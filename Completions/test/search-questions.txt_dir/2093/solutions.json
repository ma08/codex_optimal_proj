["import sys\n\nclass RangeBit:\n    def __init__(self, n):\n        sz = 1\n        while n >= sz:\n            sz *= 2\n        self.size = sz\n        self.dataAdd = [0 for _ in range(sz)]\n        self.dataMul = [0 for _ in range(sz)]\n\n    def sum(self, i):\n        assert i > 0\n        add, mul, start = 0, 0, i\n        while i > 0:\n            add += self.dataAdd[i]\n            mul += self.dataMul[i]\n            i -= i & -i\n        return mul * start + add\n\n    def add(self, left, right, by):\n        assert 0 < left <= right\n        self._add(left, by, -by * (left - 1))\n        self._add(right, -by, by * right)\n\n    def _add(self, i, mul, add):\n        assert i > 0\n        while i < self.size:\n            self.dataAdd[i] += add\n            self.dataMul[i] += mul\n            i += i & -i\n\nn = int(input())\nl = list(map(int, sys.stdin.readline().split()))\n\nqueries = []\nfor i in range(n):\n    if min(l[i], n) >= i+2:\n        queries.append((i+2, min(l[i], n), i+1))\n\nresult = 0\n\na = sorted(list(zip(list(range(1, n+1)), l)) + queries, key=lambda x:(-x[-1], len(x)))\nft = RangeBit(n+1)\n\nfor el in a:\n    #print(el)\n    if len(el) == 2: #update\n        ind, val = el\n        ft.add(ind, ind, 1)\n    else: #query\n        fr, to, val = el\n        # print(fr, to, val)\n        # print(ft.sum(to) - (ft.sum(fr - 1) if fr > 1 else 0))\n        result += ft.sum(to) - (ft.sum(fr - 1) if fr > 1 else 0)\n\nprint(result)\n", "from sys import stdin\nfrom sys import setrecursionlimit as SRL; SRL(10**7)\nrd = stdin.readline\nrrd = lambda: map(int, rd().strip().split())\n\n\nn = int(rd())\na = list(rrd())\n\nbit = [0] * (n+10)\n\n\ndef get(x):\n    tot = 0\n    while x:\n        tot += bit[x]\n        x -= x&(-x)\n    return tot\n\ndef ins(x):\n    while x<=(n+1):\n        bit[x] += 1\n        x += x&(-x)\n\nb = []\npreans = 0\nfor i,v in enumerate(a):\n    if v > i:\n        preans += 1\n    b.append([i+1,v])\n\nb.sort(key=lambda x:x[1])\n\nans = 0\ni = 0\n\nfor x in b:\n    while i<n and i < x[1]:\n        ins(a[i])\n        i += 1\n    ans += i - get(x[0] - 1)\n\n\nprint((ans-preans)//2)", "import sys\nfrom collections import defaultdict\n\n\nclass BIT_RSQ(object):\n    __slots__ = ['nodes', 'size']\n\n    def __init__(self, size: int):\n        self.nodes = [0]*(size+1)\n        self.size = size+1\n\n    def add(self, index: int, value: int):\n        while index < self.size:\n            self.nodes[index] += value\n            index += index & -index\n\n    def sum(self, right: int):\n        result = 0\n\n        while right:\n            result += self.nodes[right]\n            right -= right & -right\n\n        return result\n\n\nn = int(input())\na = list(map(int, input().split()))\nbit = BIT_RSQ(n+10)\nremove = defaultdict(list)\nans = 0\n\nfor i, x in enumerate(a, start=1):\n    ans += bit.sum(min(i, x))\n    if i < x:\n        bit.add(i, 1)\n        remove[min(n+1, x)].append(i)\n    for j in remove[i]:\n        bit.add(j, -1)\n\nprint(ans)\n"]