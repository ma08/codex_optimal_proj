["\ndef modify(string, index):\n    \n    if string[index] == '0':\n        key = 0\n    else:\n        key = 10 - int(string[index])\n    bad = ''\n    for i in string:\n        bad += str((int(i) + key) % 10)\n    return bad[index:] + bad[:index]\n\n\nx = int(input())\ny = input()\nminx = 'zzzzzzzzz'\nfor i in range(x):\n    minx = min(minx, modify(y, i))\nprint(minx)\n", "n = int(input())\nl = list(map(int, list(input())))\n\ndef minit(l):\n    dec = l[0]\n    for i in range(len(l)):\n        l[i] = (l[i] - dec + 10) % 10\n    return l\n\nans = [float('+inf')]\n\nfor i in range(n):\n    mm = minit(l[:])\n    ans = min(mm, ans)\n    l = l[1:] + [l[0]]\n\nprint(''.join(map(str, ans)))\n", "n = int(input())\nnum = input()\n\nans = str(num)\nfor i in range(n):\n    d = int(num[i])\n    new_num = ''\n    for j in range(n):\n        dig = (int(num[(i + j) % n]) - d) % 10\n        new_num += str(dig)\n    ans = min(ans, new_num)\n\nprint(ans)\n", "n = int(input())\nd = input()\nc = d\ns = '1'\nm = 10**1005\nfor k in range(0,11):\n    for i in range(0,n):\n        c = c[:i]+str((int(c[i])+1)%10)+c[i+1:]\n    for i in range(0,n):\n        c = c[1:]+c[0]\n        b = int(c)\n        if b < m:\n            m = b\n            s = c\nprint(s)\n", "def main(n,a):\n    a = (\"{:0\"+ (\"{}\".format(n)) + \"d}\").format(int(a))\n    mn = int(a)\n    for j in range(n):\n        x = list(a[j:]+a[:j])\n        y = x.copy()\n        #for i in range(10):\n        i = 10-int(y[0])\n        x = y.copy()\n        for k in range(n):\n            x[k] = str((int(x[k])+i)%10)\n        #print(j,i,x, mn)\n        if int(\"\".join(x)) < mn:\n            mn = int(\"\".join(x))\n\n    print((\"{:0\"+ (\"{}\".format(n)) + \"d}\").format(mn))\n\n\ndef main_input():\n    n = int(input())\n    a = int(input())\n    main(n,a)\n\ndef __starting_point():\n    main_input()\n\n__starting_point()", "# B\n\nn = int(input())\nl = list(input())\nfor i in range(n):\n    l[i] = int(l[i])\nans = 10**(n-1)\nfor i in range(n):\n    l = l[1:]+l[:1]\n    m = []\n    for j in range(n):\n        m.append(l[j])\n    for j in range(1,n):\n        m[j] -= m[0]\n        if m[j] < 0:\n            m[j] += 10\n    m[0] = 0\n    cur = ''\n    for j in range(n):\n        cur += str(m[j])\n    ans = min(ans, int(cur))\nans = str(ans)\nwhile len(ans) < n:\n    ans = '0'+ans\nprint(ans)\n", "n = int(input())\nnum = input()\nstatus = 0\ncheck = num[0]\nfor i in num:\n    if i != check:\n        status = 1\n        break\nif status == 0:\n    for i in range(n):\n        print(0,end=\"\")\n    print()\nelse:\n    maximum = 0\n    consider = []\n    for i in range(10):\n        dum = \"\"\n        for j in range(n):\n            dum = dum + (str(((int(num[j]) + i) % 10)))\n        count = 0\n        cur = 0\n        ind = []\n        for j in range(n):\n            if dum[j] != '0':\n                if cur > count:\n                    count = cur\n                    ind = [j-count]\n                elif cur == count:\n                    ind.append(j-count)\n                cur = 0\n            else:\n                cur += 1\n        if cur != 0:\n            if cur > count:\n                count = cur\n                ind = [j-count+1]\n            elif cur == count:\n                ind.append(j-count+1)\n        if count > maximum:\n            consider = []\n            for i in ind:\n                consider.append([dum,i])\n                maximum = count\n        elif count == maximum:\n            for i in ind:\n                consider.append([dum,i])\n    out = []\n\n    for i in range(len(consider)):\n        out.append(consider[i][0][consider[i][1]:] + consider[i][0][:consider[i][1]])\n    print(min(out))\n", "n = int(input())\nd = input()\ns = []\nfor i in d:\n    s.append(int(i))\npos = 0\nans = 10 ** 1000\nfor i in range(1, len(s)):\n    if s[i] == s[i - 1]:\n        continue\n    else:\n        x = s[pos]\n        t = [s[j] for j in range(len(s))]\n        for j in range(len(t)):\n            t[j] = (t[j] + 10 - x) % 10\n        A = [0] * n\n        for j in range(len(t)):\n            A[j] = t[(j + pos) % n]\n        a = int(''.join(list(map(str, A))))\n        if a < ans:\n            ans = a\n        pos = i\nx = s[pos]\nfor i in range(len(s)):\n    s[i] = (s[i] + 10 - x) % 10\nA = [0] * n\nfor i in range(len(s)):\n    A[i] = s[(i + pos) % n]\na = int(''.join(list(map(str, A))))\nif a < ans:\n    ans = a\nprint('0' * (n - len(str(ans))) + str(ans))\n", "__author__ = 'Rakshak.R.Hegde'\n\"\"\"\nCreated on Dec 17 2014 PM 10:13\n\n@author: Rakshak.R.Hegde\n\"\"\"\nn = int(input())\ndigits = list(map(int, input()))\nenum = [[0] * n for i in range(10)]\nenum[0] = digits\nfor i in range(1, 10):\n    for j in range(n):\n        enum[i][j] = (enum[i - 1][j] + 1) % 10\ncomp = []\nfor i in range(10):\n    if enum[i][0] == 0: comp.append(enum[i])\n    for j in range(1, n):\n        if enum[i][j] == 0 and enum[i][j - 1] != 0:\n            comp.append(enum[i][j:] + enum[i][:j])\nprint(''.join(map(str, min(comp))))", "n = int(input())\nnum = input()\nnum = [list(num) for _ in range(10)]\nfor i in range(10):\n    for j in range(n):\n        num[i][j] = (int(num[i][j]) + i) % 10\n\ncol = []\nfor i in range(10):\n    for j in range(n):\n        col.append(num[i][j:]+num[i][:j])\n\nans = ''.join(list(map(str, min(col))))\nprint(ans)\n\n", "from itertools import chain\n\n\ndef main():\n    n = int(input())\n    aa = list(map(int, input()))\n    res = []\n    for j in range(len(aa)):\n        y, base = 0, aa[j]\n        for x in chain(aa[j:], aa[:j]):\n            y = y * 10 + (x - base) % 10\n        res.append(y)\n    f = str(len(aa)).join(('{:0>', 'd}'))\n    print(f.format(min(res)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def norm(s):\n    return [(x + 10 - s[0]) % 10 for x in s]\n\nn, = list(map(int, input().split()))\ns = input().strip()\ns = [int(x) for x in s]\nprint(\"\".join(map(str, min([norm(s[j:] + s[:j]) for j in range(n)]))))\n", "n = int(input())\ns = input()\ns = [int(x) for x in s]\nprint(\"\".join(map(str, min([[(x + 10 - s[j]) % 10 for x in (s[j:] + s[:j])] for j in range(n)]))))", "n = int(input())\ns = [int(x) for x in input()]\nprint(\"\".join(map(str, min([[(x + 10 - s[j]) % 10 for x in (s[j:] + s[:j])] for j in range(n)]))))", "n = int(input())\nc = list(map(int, input()))\nval = list(c)\nfor i in range(n):\n    d = (10 - c[0]) % 10\n    for j in range(n):\n        c[j] = (c[j] + d) % 10\n    if c < val:\n        val = list(c)\n    c.append(c[0])\n    del(c[0])\nprint(''.join(map(str, val)))", "from itertools import chain\nC=0\n\ndef main():\n    input()\n    s = input()\n    n = len(s)\n    a = s[-1]\n    for stop, b in enumerate(s):\n        if b != a:\n            break\n    else:\n        print('0' * n)\n        return\n    s = ''.join((s[stop:], s[:stop]))\n    a, start = s[0], 0\n    ma, l = 0, []\n    for stop, b in enumerate(s):\n        if b != a:\n            le = stop - start\n            #tail=9-(ord(b)-ord(a))%10\n            if ma < le:\n                ma = le\n                l.clear()\n                l.append(start)\n            elif ma == le:\n                l.append(start)\n            a, start = b, stop\n    le = n - start\n    if ma < le:\n        l.clear()\n        l.append(start)\n    elif ma == le:\n        l.append(start)\n    for i, start in enumerate(l):\n        base = int(s[start])\n        l[i] = ''.join(chr((int(c) - base) % 10 + 48) for c in chain(s[start:], s[:start]))\n    print(min(l))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import chain\n\nC = 0\n\n\ndef main():\n    input()\n    s = input()\n    n = len(s)\n    a = s[-1]\n    for stop, b in enumerate(s):\n        if b != a:\n            break\n    else:\n        print('0' * n)\n        return\n    s = ''.join((s[stop:], s[:stop]))\n    a, l = s[0], []\n    start = ma = tail = 0\n    for stop, b in enumerate(s):\n        if b != a:\n            le = stop - start\n            if ma < le:\n                ma, tail = le, (ord(b) - ord(a)) % 10\n                l.clear()\n                l.append(start)\n            elif ma == le:\n                tl = (ord(b) - ord(a)) % 10\n                if tail > tl:\n                    tail = tl\n                    l.clear()\n                    l.append(start)\n                elif tail == tl:\n                    l.append(start)\n            a, start = b, stop\n    le = n - start\n    if ma < le:\n        l.clear()\n        l.append(start)\n    elif ma == le:\n        l.append(start)\n    for i, start in enumerate(l):\n        base = int(s[start])\n        l[i] = ''.join(chr((int(c) - base) % 10 + 48) for c in chain(s[start:], s[:start]))\n    print(min(l))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import chain\n\nC = 0\n\n\ndef main():\n    input()\n    ls = list(map(int, input()))\n    n = len(ls)\n    a = ls[-1]\n    for stop, b in enumerate(ls):\n        if b != a:\n            break\n    else:\n        print('0' * n)\n        return\n    ls = ls[stop:] + ls[:stop]\n    a, l = ls[0], []\n    start = ma = tail = 0\n    for stop, b in enumerate(ls):\n        if b != a:\n            le = stop - start\n            if ma < le:\n                ma, tail = le, (b - a) % 10\n                l.clear()\n                l.append(start)\n            elif ma == le:\n                tl = (b - a) % 10\n                if tail > tl:\n                    tail = tl\n                    l.clear()\n                    l.append(start)\n                elif tail == tl:\n                    l.append(start)\n            a, start = b, stop\n    le = n - start\n    if ma < le:\n        l.clear()\n        l.append(start)\n    elif ma == le:\n        tl = (ls[0] - a) % 10\n        if tail > tl:\n            l.clear()\n            l.append(start)\n        elif tail == tl:\n            l.append(start)\n    for i, start in enumerate(l):\n        base = ls[start]\n        l[i] = ''.join(chr((a - base) % 10 + 48) for a in chain(ls[start:], ls[:start]))\n    print(min(l))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import chain\n\nC = 0\n\n\ndef main():\n    input()\n    ls = list(map(int, input()))\n    n = len(ls)\n    a = ls[-1]\n    for stop, b in enumerate(ls):\n        if b != a:\n            break\n    else:\n        print('0' * n)\n        return\n    ls = ls[stop:] + ls[:stop]\n    a, l = ls[0], []\n    start = ma = tail = 0\n    for stop, b in enumerate(ls):\n        if b != a:\n            le = stop - start\n            if ma < le:\n                ma, tail = le, (b - a) % 10\n                l.clear()\n                l.append(start)\n            elif ma == le:\n                tl = (b - a) % 10\n                if tail > tl:\n                    tail = tl\n                    l.clear()\n                    l.append(start)\n                elif tail == tl:\n                    l.append(start)\n            a, start = b, stop\n    le = n - start\n    if ma < le:\n        l.clear()\n        l.append(start)\n    elif ma == le:\n        tl = (ls[0] - a) % 10\n        if tail > tl:\n            l.clear()\n            l.append(start)\n        elif tail == tl:\n            l.append(start)\n    for i, start in enumerate(l):\n        base = ls[start]\n        l[i] = ''.join(str((a - base) % 10) for a in chain(ls[start:], ls[:start]))\n    print(min(l))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\nn = int(input())\nstate = [int(c) for c in input()]\nmin_s = state\nfor i in range(n):\n    tmp = state[i:] + state[:i]\n    tmp_min = [tmp[i] - tmp[0] for i in range(n)]\n    for i in range(n):\n        if tmp_min[i] < 0:\n            tmp_min[i] += 10\n    if tmp_min < min_s:\n        min_s = tmp_min\nprint(\"\".join(map(str, min_s)))\n", "from itertools import chain\n\nC = 0\n\n\ndef main():\n    input()\n    ls = list(map(int, input()))\n    n = len(ls)\n    a = ls[-1]\n    for stop, b in enumerate(ls):\n        if b != a:\n            break\n    else:\n        print('0' * n)\n        return\n    ls = ls[stop:] + ls[:stop]\n    a, l = ls[0], []\n    start = ma = tail = 0\n    for stop, b in enumerate(ls):\n        if b != a:\n            le = stop - start\n            if ma < le:\n                ma, tail = le, (b - a) % 10\n                l.clear()\n                l.append(start)\n            elif ma == le:\n                tl = (b - a) % 10\n                if tail > tl:\n                    tail = tl\n                    l.clear()\n                    l.append(start)\n                elif tail == tl:\n                    l.append(start)\n            a, start = b, stop\n    le = n - start\n    if ma < le:\n        l.clear()\n        l.append(start)\n    elif ma == le:\n        tl = (ls[0] - a) % 10\n        if tail > tl:\n            l.clear()\n            l.append(start)\n        elif tail == tl:\n            l.append(start)\n    for i, start in enumerate(l):\n        base = ls[start]\n        l[i] = tuple((a - base) % 10 + 48 for a in chain(ls[start:], ls[:start]))\n    print(''.join(map(chr, min(l))))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    digits = list(map(int, input()))\n    enum = [[0] * n for i in range(10)]\n    enum[0] = digits\n    for i in range(1, 10):\n        for j in range(n):\n            enum[i][j] = (enum[i - 1][j] + 1) % 10\n    comp = []\n    for i in range(10):\n        if enum[i][0] == 0:\n            comp.append(enum[i])\n        for j in range(1, n):\n            if enum[i][j] == 0 and enum[i][j - 1] != 0:\n                comp.append(enum[i][j:] + enum[i][:j])\n    print(''.join(map(str, min(comp))))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    digits = list(map(int, input()))\n    enum = [digits]\n    for a in range(1, 10):\n        enum.append([(a + b) % 10 for b in digits])\n    comp = []\n    for i in range(10):\n        if enum[i][0] == 0:\n            comp.append(enum[i])\n        for j in range(1, n):\n            if enum[i][j] == 0 and enum[i][j - 1] != 0:\n                comp.append(enum[i][j:] + enum[i][:j])\n    print(''.join(map(str, min(comp))))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    digits = list(map(int, input()))\n    enum = [digits]\n    for a in range(1, 10):\n        enum.append([(a + b) % 10 for b in digits])\n    for digits in enum[:10]:\n        for j in range(n):\n            if digits[j - 1] and not digits[j]:\n                enum.append(digits[j:] + digits[:j])\n    print(''.join(map(str, min(enum))))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    input()\n    digits = list(map(int, input()))\n    l = [digits]\n    for a in range(1, 10):\n        l.append([(a + b) % 10 for b in digits])\n    for digits in l[:]:\n        a = digits[-1]\n        for i, b in enumerate(digits):\n            if a and not b:\n                l.append(digits[i:] + digits[:i])\n            a = b\n    print(''.join(map(str, min(l))))\n\n\ndef __starting_point():\n    main()\n__starting_point()"]