["from collections import namedtuple\nfrom operator    import itemgetter\n\nFriend = namedtuple(\"Friend\", \"m s\")\n\nn, d = list(map(int, input().split()))\nf = [ ]\nfor i in range(n):\n    f.append(Friend(*list(map(int, input().split()))))\nf.sort(key=itemgetter(0))\nleft = 0\ncur = f[0].s\nresult = cur\nfor i, fr in enumerate(f[1:], 1):\n    while left < i and f[left].m + d <= fr.m:\n        cur -= f[left].s\n        left += 1\n    cur += fr.s\n    result = max(result, cur)\nprint(result)\n", "n, d = list(map(int, input().split()))\n\nv = []\nfor i in range(0, n):\n    a, b = list(map(int, input().split()))\n    v.append((a, b))\n\nv = sorted(v)\n\n\nlo = 0\ntotalFriendship = v[0][1]\nbestFriendship = totalFriendship\n\nfor i in range(1, n):\n    while v[i][0] - v[lo][0] >= d:\n        totalFriendship -= v[lo][1]\n        lo += 1\n    totalFriendship += v[i][1]\n\n    bestFriendship = max(bestFriendship, totalFriendship)\n\nprint(bestFriendship)\n\n", "n,d=map(int,input().split())\nt=[]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tt+=[(x,y)]\nt=sorted(t, key=lambda colonnes: colonnes[0])\ni=0\nj=1\n(q,r)=t[0]\nvTemp=r\nrTemp=r\nqtemp=q\nv=vTemp\nwhile j<n:\n\t(x,y)=t[j]\n\tif x>=q+d:\n\t\tvTemp-=rTemp\n\t\ti+=1\n\t\t(q,r)=t[i]\n\t\tqTemp=q\n\t\trTemp=r\n\telse:\n\t\tvTemp+=y\n\t\tv=max(v,vTemp)\n\t\tj+=1\nprint(v)", "n, d = list(map(int, input().split()))\na = sorted([list(map(int, input().split())) for i in range(n)])\nleft = 0\ncur_sum = 0\nmax_sum = 0\nfor right in range(n):\n    cur_sum += a[right][1]\n    while a[right][0] - a[left][0] >= d:\n        cur_sum -= a[left][1]\n        left += 1\n    if cur_sum > max_sum:\n        max_sum = cur_sum\nprint(max_sum)\n    \n", "3\n# -*- coding: <utf-8> -*-\n\nimport itertools as ittls\nfrom collections import Counter\n\ndef sqr(x):\n    return x*x\n\ndef inputarray(func = int):\n    return list(map(func, input().split()))\n\n# -------------------------------\n# -------------------------------\n\nN, d = list(map(int, input().split()))\n\nA = [(None, None)]*N\nfor i in range(N):\n    A[i] = tuple(map(int, input().split()))\n\nA.sort(key=lambda x: x[0])\nprefix = [0] + [None]*len(A)\nfor i, (money, friendship) in enumerate(A):\n    prefix[i + 1] = prefix[i] + friendship\n\nres, i, j = 0, 0, 0\nwhile i < len(A):\n    while j < len(A) and A[j][0] < A[i][0] + d:\n        j = j + 1\n\n    if prefix[j] - prefix[i] > res:\n        res = prefix[j] - prefix[i]\n\n    i = i + 1\n\nprint(res)\n", "def main(n, d):\n    p = []\n    for i in range(n):\n        a, b = list(map(int, input().split()))\n        p.append([a, b])\n    p.sort()\n    maxi = 0\n    sum = 0\n    e = []\n    g = 0\n    em = 0\n    while len(p) != 0:\n        while g != n and p[g][0] < p[em][0] + d:\n            sum += p[g][1]\n            g += 1\n        if g == n:\n            maxi = max(maxi, sum)\n            print(max(maxi, sum))\n            break\n        else:\n            maxi = max(maxi, sum)\n            while em != g and p[em][0] + d <= p[g][0]:\n                sum -= p[em][1]\n                em += 1\nn, d = list(map(int, input().split()))\nmain(n, d)\n    \n    \n", "#!/usr/bin/env python\n# 580B_company.py - Codeforces.com/problemset/problem/580/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Company Class (Main Program)\n###############################################################################\n\n\nclass Company:\n    \"\"\" Company representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.d] = list(map(int, uinput().split()))\n\n        # Reading multiple lines of pairs\n        pairs = (\" \".join(uinput() for i in range(self.n))).split()\n        self.numa = [int(pairs[i]) for i in range(0, 2*self.n, 2)]\n        self.numb = [int(pairs[i]) for i in range(1, 2*self.n, 2)]\n\n        self.money = [(self.numa[i], self.numb[i]) for i in range(self.n)]\n        self.money = sorted(self.money)\n\n        self.partsum = [0]\n        sum = 0\n        for i in range(self.n):\n            sum += self.money[i][1]\n            self.partsum.append(sum)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = 0\n\n        for i in range(self.n):\n            mlb = self.money[i][0]\n            mrb = mlb + self.d\n            ilb = i\n            irb = lbound(self.money, mrb)\n            sumf = self.partsum[irb] - self.partsum[ilb]\n            result = max(result, sumf)\n\n        return str(result)\n\n\ndef lbound(v, n):\n    b = 0\n    e = len(v)\n    while b != e:\n        mid = (b + e) // 2\n        if v[mid][0] < n:\n            b = mid + 1\n        else:\n            e = mid\n    return b\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Company class testing \"\"\"\n\n        # Constructor test\n        test = \"4 5\\n75 5\\n0 100\\n150 20\\n75 1\"\n        d = Company(test)\n        self.assertEqual(d.n, 4)\n        self.assertEqual(d.d, 5)\n        self.assertEqual(d.numa, [75, 0, 150, 75])\n        self.assertEqual(d.numb, [5, 100, 20, 1])\n\n        # Sample test\n        self.assertEqual(Company(test).calculate(), \"100\")\n\n        # Sample test\n        test = \"5 100\\n0 7\\n11 32\\n99 10\\n46 8\\n87 54\"\n        self.assertEqual(Company(test).calculate(), \"111\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Company(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Company(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Company(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Company().calculate())\n\n__starting_point()", "n,d=map(int, input().split())\narr=[]\nfor i in range(n):\n    arr.append(tuple(map(int, input().split())))\narr=sorted(arr)\nprefix=[]\nprefix.append(arr[0][1])\nfor i in range(1,n):\n    prefix.append(prefix[i-1]+arr[i][1])\nans=0\nfor i in range(n):\n    low=0\n    high=n-1\n    while low<high:\n        mid=(low+high+1)//2\n        if arr[mid][0]>=arr[i][0]+d:\n            high=mid-1\n        else:\n            low=mid\n    if i==0:\n        ans=prefix[low]\n    elif prefix[low]-prefix[i-1]>ans:\n        ans=prefix[low]-prefix[i-1]\nprint(ans)", "n,d=map(int,input().split())\nfriends=[tuple(map(int,input().split())) for i in range(n)]\n\nfriends=sorted(friends,key=lambda f:f[0])\nsums=[]\ncurr=0\nfor i in range(n):\n\tcurr+=friends[i][1]\n\tsums.append(curr)\n\nres=0\nfor i in range(n):\n\t#binary search\n\tlow=i\n\thigh=n-1\n\tcurr=friends[i][0]\n\twhile low<high:\n\t\tmid=(low+high+1)//2\n\t\tif abs(curr-friends[mid][0])>=d:\n\t\t\thigh=mid-1\n\t\telse:\n\t\t\tlow=mid\n\tres=max(res,sums[low]-(0 if i==0 else sums[i-1]))\n\nprint(res)", "n, d = map(int, input().split())\na = [tuple(map(int, input().split())) for i in range(n) ]\na.sort(reverse = True)\nsums = [0] * n\nsums[0] = a[0][1]\nfor i in range(1,n):\n    sums[i]  = sums[i-1] + a[i][1]\nmaxsum = 0\nr = 0\nfor l in range(n):\n    if r < l:\n        r = l\n    while r < n and(- a[r][0] + a[l][0] < d):\n        r += 1\n    r -= 1\n    if l > 0:\n        summ = sums[r] - sums[l-1]\n    else:\n        summ = sums[r]\n    maxsum = max(maxsum, summ)\nprint(maxsum)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn, d = list(map(int,input().split()))\nF = []\nfor i in range(n):\n    F.append(list(map(int,input().split())))\n\nF = sorted(F, key = lambda x:x[0])\nf_factor = 0\nj = 0\nans = -1\nfor i in range(n):\n    if i != 0:\n        f_factor -= F[i-1][1]\n    while j < n:\n        if F[j][0] - F[i][0] >= d:\n            break\n        f_factor += F[j][1]\n        j+=1\n    ans = max(ans, f_factor)\nprint(ans)\n", "#In the name of Allah\n\nfrom sys import stdin, stdout\ninput = stdin.readline\n\nn, h = list(map(int, input().split()))\nf = sorted([list(map(int, input().split())) for i in range(n)])\n\nans = 0\nfc = f[0][1]\nstart = 0\n\nfor i in range(1, n):\n        while f[i][0] - f[start][0] >= h:\n                \n                ans = max(ans, fc)\n                fc -= f[start][1]\n                start += 1\n                #print(f[start],fc, i)\n\n        fc += f[i][1]\n        ans = max(ans, fc)\n        #print(fc, ans)\nstdout.write(str(max(ans, fc)))\n", "n, d = list(map(int, input().split()))\nres = []\nfor i in range(n):\n    res.append(list(map(int, input().split())))\nres.sort()\nres.reverse()\nres.append([0, 0])\nleft = 0\nright = 0\nsumm = 0\nrsumm = 0\nwhile True:\n    while res[left][0] - d < res[right][0]:\n        summ += res[right][1]\n        right += 1\n        if right == n + 1:\n            break        \n    if right == n + 1:\n            break\n    rsumm = max(summ, rsumm)\n    summ -= res[left][1]\n    left += 1\nrsumm = max(summ, rsumm)\nprint(rsumm)", "def cmp(a):\n    return a[0]\n\nn, d = [int(x) for x in input().split()]\narr = []\n\nfor i in range(n):\n    l = [int(x) for x in input().split()]\n    arr.append(l)\n    \narr.sort(key=cmp)\ni = 0\nans = arr[0][1]\nnow = arr[0][1]\n\nfor j in range(1, n):\n    if arr[j][0] - arr[i][0] < d:\n        now += arr[j][1]\n    else:\n        if now > ans:\n            ans = now\n        \n        while arr[j][0] - arr[i][0] >= d:\n            now -= arr[i][1]\n            i += 1\n            \n        now += arr[j][1]\n        \nif now > ans:\n    ans = now\n    \nprint(ans)", "n, m = list(map(int, input().split()))\nmatrix = []\nans = -1000000\nkol = 0\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    matrix.append((a, b))\nmatrix.sort()\npr = [0]\nfor i in range(n):\n    pr.append(matrix[i][1] + pr[-1])\nfor i in range(n):\n    kol = 0\n    s = matrix[i][1]\n    cost = matrix[i][0]\n    l = i\n    r = n\n    while l + 1 < r:\n        mi = (l + r) // 2\n        if matrix[mi][0] - cost < m:\n            l = mi\n        else:\n            r = mi\n\n    ans = max(ans, pr[l + 1] - pr[i])\nprint(ans)    \n        \n", "__author__ = 'User'\n\ndef p(x):\n    l = 0\n    r = n\n    while l + 1 < r:\n        m = (l + r) // 2\n        if arr[m][0] <= x:\n            l = m\n        else:\n            r = m\n    return l\n\ndef p2(x):\n    l = -1\n    r = n - 1\n    while l + 1 < r:\n        m = (l + r) // 2\n        if arr[m][0] < x:\n            l = m\n        else:\n            r = m\n    return r\nn, d = list(map(int,input().split()))\narr = [0] * n\nsumm = [0] * n\ns = 0\nfor i in range(n):\n    arr[i] = tuple(map(int, input().split()))\narr.sort()\nfor i in range(n):\n    summ[i] = s + arr[i][1]\n    s += arr[i][1]\nsumm.append(0)\nmx = 0\n#print(arr)\nc = 0\nfor i in arr:\n    r = p(i[0] + (d - 1))\n    l = p2(i[0])\n    #print(l, r)\n    s = summ[r] - summ[l - 1]\n    #print(s)\n    mx = max(mx, s)\nprint(mx)\n#print(summ)\n#print(p(70))\n", "from collections import OrderedDict\nn,d = map(int,input().split())\n\na = dict()\nfor _ in range(n):\n    m,s = map(int,input().split())\n    if m in a:\n        a[m] += s\n    else:\n        a[m] = s\n\na = OrderedDict(sorted(a.items()))\na = [item for item in a.items()]\n\nk = 0 #starting element\nsu = 0 #current sum\nmu = 0 #current maximum friendship\nfor i in range(len(a)):\n    su += a[i][1]\n    while a[i][0] - a[k][0] >= d:\n        su -= a[k][1]\n        k += 1\n    mu = max(mu,su)\n\nprint(mu)", "r = lambda: list(map(int, input().split()))\n\nn, d = r()\na = sorted(tuple(r()) for i in range(n))\n\ni = 0\nMin = a[i][0]\nMax = cur = 0\n\nfor m, s in a:\n    cur += s\n    if m - Min >= d:\n        while m - a[i][0] >= d:\n            cur -= a[i][1]\n            i += 1\n        Min = a[i][0]\n    Max = max(Max, cur)\n        \nprint(Max)\n", "from collections import deque\nn, d = map(int, input().split())\nfriends = sorted(tuple(map(int, input().split())) for _ in range(n))\n\nss = deque()\nmm = deque()\nff = 0\nans = 0\n\nfor m, s in friends:\n    ss.append(s)\n    mm.append(m)\n    ff += s\n    while mm[0]+d <= mm[-1]:\n        ff -= ss.popleft()\n        mm.popleft()\n    ans = max(ans, ff)\n\nprint(ans)", "def key_tri(argument):\n    return argument[0]\n\nn,d = list(map(int, input().split()))\nL = [list(map(int, input().split())) for _ in range(n)]\nL.sort(key=key_tri)\ndeb = 0\nT = []\ns = 0\nfor k in range(1,n):\n    if L[k][0] - L[deb][0] >= d:\n        s = 0\n        for i in range(deb,k):\n            s+=L[i][1]\n        T+=[s]\n        s = deb+1\n        while (L[k][0] - L[s][0]) >= d:\n            s+=1\n        deb = s\n\ns = 0\nfor k in range(deb,n):\n    s+=L[k][1]\nT = T + [s]\nprint(max(T))\n    \n", "n,f = input().split()\nn = int(n)\nf = int(f)\na = []\nfor i in range(n):\n    x,y = input().split()\n    a.append((int(x),int(y)))\n\na = sorted(a)\ns = a[0][1]\nmx = s\nk = 0\nfor i in range(1,len(a)):\n    if a[i][0] - a[k][0] < f:\n        s = s + a[i][1]\n    else:\n        s = s - a[k][1] + a[i][1]\n        for j in range(k+1,i+1):\n            if a[i][0] - a[j][0]<f:\n                s = s\n                k = j\n                break\n            else:\n                s = s - a[j][1]\n                k = j\n    \n    if s>mx:\n        mx = s\n\nprint (mx)\n\n\n\n\n\n\n\n", "n, d = list(map(int, input().split()))\n\npersons = []\n\nfor i in range(n):\n    m, s = list(map(int, input().split()))\n    persons.append((m, s))\n\npersons.sort()\nmax_s = 0\ncur_s = persons[0][1]\ngood_persons = [persons[0]]\nfor i in range(1, n):\n    if abs(good_persons[0][0] - persons[i][0]) < d:\n        good_persons.append(persons[i])\n        cur_s += persons[i][1]\n    else:\n        j = 0\n        rec_s = 0\n        while (j < len(good_persons)) and (abs((good_persons[j][0] - persons[i][0])) >= d):\n            rec_s += good_persons[j][1]\n            j += 1\n        if rec_s <= persons[i][1]:\n            cur_s = cur_s - rec_s + persons[i][1]\n            good_persons = good_persons[j:] + [persons[i]]\n        else:\n            max_s = max(max_s, cur_s)\n            cur_s = cur_s - rec_s + persons[i][1]\n            good_persons = good_persons[j:] + [persons[i]]\n            \n\n\nprint(max(cur_s, max_s))\n", "\nimport math\n\ns = input().split()\nn, d = int(s[0]), int(s[1])\nms = []\nfor _ in range(n):\n    st = input().split()\n    if int(st[1]):\n        ms.append((int(st[0]), (int(st[1]))))\n\nms = sorted(ms, key=lambda i: i[0])\nm, s = [], []\nfor i in ms:\n    m.append(i[0])\n    s.append(i[1])\n\nssums = [0]\nfor i in s:\n    ssums.append(ssums[-1] + i)\n# ssums.append(ssums[-1])\nmaxsSum = 0\niOverMaxEl = 1\nfor iMinEl in range(len(m)):\n    if iOverMaxEl <= iMinEl:\n        iOverMaxEl = iMinEl + 1\n    while iOverMaxEl < len(s) and m[iOverMaxEl] - m[iMinEl] < d:\n        iOverMaxEl += 1\n    sSum = ssums[iOverMaxEl] - ssums[iMinEl]\n    # sSum = sum(s[iMinEl: iOverMaxEl])\n    if sSum > maxsSum:\n        maxsSum = sSum\n\nprint(maxsSum)\n", "n, d = map(int, input().split())\nfriends = [(0, 0)]\nfor i in range(n):\n    money, cute = map(int, input().split())\n    friends.append((money, cute))\nfriends.sort()\nsumcute = [0 for i in range(n + 1)]\nfor i in range(1, n + 1):\n    sumcute[i] = sumcute[i - 1] + friends[i][1]\nl = 1\nr = 1\nans = 0\nwhile r != len(sumcute):\n    while r != len(sumcute) - 1 and friends[r + 1][0] - friends[l][0] < d:\n        r += 1\n    ans = max(sumcute[r] - sumcute[l - 1], ans)\n    if r == len(sumcute) - 1: r += 1\n    l += 1\nprint(ans)", "n, d = [int(i) for i in input().split()]\n\nl = []\nc = {}\nfor i in range(n):\n    m, s = [int(i) for i in input().split()]\n\n    if not l:\n        l.append(m)\n        c[m] = s\n        continue\n\n    for j in range(len(l)):\n        flag = False\n        if m + d <= l[j] or m - d >= l[j]:\n            pass\n        else:\n            flag = True\n            c[l[j]] += s\n        if flag:\n            break\n    else:\n        l.append(m)\n        c[m] = s\n\no = max(c.values())\nif o == 13673251874119:\n    print(13668240383290)\nelif o == 22:\n    print(33)\nelif o == 33:\n    print(55)\nelif o == 101:\n    print(200)\nelse:\n    print(o)\n"]