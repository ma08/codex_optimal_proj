["import math\nn, m = list(map(int, input().split()))\nif n == 0 : \n    print(0, 1)\n    print(0, m)\n    print(0, 0)\n    print(0, m - 1)\nelif m == 0 : \n    print(1, 0)\n    print(n, 0)\n    print(0, 0)\n    print(n - 1, 0)\nelse :\n    l = math.sqrt((n - 1) ** 2 + m ** 2) + math.sqrt(n ** 2 + m ** 2) + math.sqrt(n ** 2 + (m - 1) ** 2)\n    l1 = max(m, n) + math.sqrt(n * n + m * m) * 2\n    l2 = math.sqrt(n ** 2 + m ** 2) + math.sqrt((n - 1) ** 2 + m ** 2) * 2\n    l3 = math.sqrt(n ** 2 + m ** 2) + math.sqrt((m - 1) ** 2 + n ** 2) * 2\n    ans = max(l, l1, l2, l3)\n    if l == ans :\n        print(1, 0)\n        print(n, m)\n        print(0, 0)\n        print(n, m - 1)\n    elif l1 == ans :\n        if n > m :\n            print(n, m)\n            print(0, 0)\n            print(n, 0)\n            print(0, m)\n        else :\n            print(n, m)\n            print(0, 0)\n            print(0, m)\n            print(n, 0)\n    elif l2 == ans :\n        print(1, 0)\n        print(n, m)\n        print(0, 0)\n        print(n - 1, m)\n    else :\n        print(0, 1)\n        print(n, m)\n        print(0, 0)\n        print(n, m - 1)\n", "def dist(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\ndef ddist(a):\n    res = 0.0\n    for i in range(3):\n        res += dist(a[i][0], a[i][1], a[i + 1][0], a[i + 1][1])\n    return res;\n\nn, m = list(map(int, input().split()))\nif (n == 0):\n    print(\"0 1\")\n    print(\"0\", m)\n    print(0, 0)\n    print(0, m - 1)\nelif (m == 0):\n    print(1, 0)\n    print(n, 0)\n    print(0, 0)\n    print(n - 1, 0)\nelse:\n    aa = [[[n - 1, m], [0, 0], [n, m], [1, 0]], [[0, 1], [n, m], [0, 0], [n, m - 1]], [[0, 0], [n, m], [0, m], [n, 0]], [[n, m], [0, 0], [0, m], [n, 0]]]\n    a = max(aa, key = ddist)\n    for i in a:\n        print(i[0], i[1])\n    \n", "n, m = list(map(int, input().split()))\na = ([[0, 1], [0, m], [0, 0], [0, m - 1]], [[1, 0], [n, 0], [0, 0], [n - 1, 0]], \\\n     [[0, 1], [n, m], [0, 0], [n, m - 1]], [[1, 0], [n, m], [0, 0], [n - 1, m]], \\\n     [[0, 0], [n, m], [0, m], [n, 0]], [[0, 0], [n, m], [n, 0], [0, m]])\nfor x in max(a, key = lambda a: (len(set(map(tuple, a))) == len(a)) * all(map((lambda x: min(x[1], x[0]) >= 0), a)) * sum(((a[i][0] - a[i + 1][0]) ** 2 + (a[i][1] - a[i + 1][1]) ** 2) ** 0.5 for i in range(len(a) - 1))):\n    print(*x)\nprint()\n", "import math\nn, m = list(map(int, input().split()))\n\nswapped = False\nif n > m:\n    n, m = m, n\n    swapped = True\n\ndef mprint(x, y):\n    nonlocal swapped\n    if swapped:\n        print(y, x)\n    else:\n        print(x, y)\n\ndef mlen(pnt):\n    res = 0.0\n    for i in range(1, 4):\n        val = (pnt[i][0] - pnt[i - 1][0]) ** 2\n        val += (pnt[i][1] - pnt[i - 1][1]) ** 2\n        val = math.sqrt(val)\n        res += val\n    return res\n\nif n == 0:\n    mprint(0, 1)\n    mprint(0, m)\n    mprint(0, 0)\n    mprint(0, m - 1)\nelse:\n    one = [(0, 0), (n, m), (n, 0), (0, m)]\n    two = [(1, 0), (n, m), (0, 0), (n - 1, m)]\n    if mlen(one) > mlen(two):\n        two = one\n    for x in two:\n        mprint(*x)\n", "def dist(v):\n    ans = 0\n    for i in range(4):\n        for j in range(4):\n            if i != j and v[i] == v[j]:\n                return 0\n    for i in range(3):\n        ans += (v[i][0] - v[i + 1][0]) ** 2 + (v[i][1] - v[i + 1][1]) ** 2\n    return ans\nnow = [0] * 4\n\nn, m = list(map(int, input().split()))\nbest = 0\nif n == 0:\n    print(0, 1)\n    print(0, m)\n    print(0, 0)\n    print(0, m - 1)\nelif m == 0:\n    print(1, 0)\n    print(n, 0)\n    print(0, 0)\n    print(n - 1, 0)\nelse:\n    v = [[(0, 0), (n, m), (0, m), (n, 0)],\n         [(0, 0), (n, m), (n, 0), (0, m)],\n         \n         [(0, 0), (n, m), (0, 1), (n, m - 1)],\n         [(0, 0), (n, m), (1, 0), (n - 1, m)],\n         [(0, 0), (n, m), (0, 1), (n - 1, m)],\n         [(0, 0), (n, m), (1, 0), (n, m - 1)],\n\n         [(0, 1), (n, m), (0, 0), (n, m - 1)],\n         [(1, 0), (n, m), (0, 0), (n - 1, m)],\n         [(0, 1), (n, m), (0, 0), (n - 1, m)],\n         [(1, 0), (n, m), (0, 0), (n, m - 1)],\n\n         [(0, 1), (n, m - 1), (0, 0), (n, m)],\n         [(1, 0), (n - 1, m), (0, 0), (n, m)],\n         [(0, 1), (n - 1, m), (0, 0), (n, m)],\n         [(1, 0), (n, m - 1), (0, 0), (n, m)],\n\n         [(0, 1), (n, m - 1), (1, 0), (n, m)],\n         [(1, 0), (n - 1, m), (0, 1), (n, m)],\n         [(0, 1), (n - 1, m), (1, 0), (n, m)],\n         [(1, 0), (n, m - 1), (0, 1), (n, m)],\n\n         [(0, 1), (n, m - 1), (1, 0), (n - 1, m)],\n         [(1, 0), (n - 1, m), (0, 1), (n, m - 1)],\n         [(0, 1), (n - 1, m), (1, 0), (n, m - 1)],\n         [(1, 0), (n, m - 1), (0, 1), (n - 1, m)],\n\n         \n         [(0, 0), (n, m - 1), (0, 1), (n, m)],\n         [(0, 0), (n - 1, m), (1, 0), (n, m)],\n         [(0, 0), (n - 1, m), (0, 1), (n, m)],\n         [(0, 0), (n, m - 1), (1, 0), (n, m)]]\n    for i in range(len(v)):\n        now = dist(v[i])\n        if now > best:\n            best = now\n            ans = i\n    for i in range(4):\n        print(v[ans][i][0], v[ans][i][1])\n         \n", "n,m=list(map(int,input().split()))\n\n\nif(m==0):\n    print(1,0)\n    print(n,0)\n    print(0,0)\n    print(n-1,0)\nelif(n==0):\n    print(0,1)\n    print(0,m)\n    print(0,0)\n    print(0,m-1)\nelif(n==1 and m==1):\n    print(1,1)\n    print(0,0)\n    print(1,0)\n    print(0,1)\nelif(n==1):\n    print(0,0)\n    print(1,m)\n    print(1,0)\n    print(0,m)\nelif(m==1):\n    print(0,0)\n    print(n,1)\n    print(0,1)\n    print(n,0)\nelse:\n    \n    if(n<m):\n        a=pow(n**2+m**2,1/2)*2+max(n,m)\n        b=pow((n-1)**2+m**2,1/2)*2+pow(m**2+n**2,1/2)\n        if(b>a):\n            print(1,0)\n            print(n,m)\n            print(0,0)\n            print(n-1,m)\n        else:\n            print(0,0)\n            print(n,m)\n            print(n,0)\n            print(0,m)\n    else:\n        a=pow(n**2+m**2,1/2)*2+max(n,m)\n        b=pow((m-1)**2+n**2,1/2)*2+pow(m**2+n**2,1/2)\n        if(b>a):\n            print(0,1)\n            print(n,m)\n            print(0,0)\n            print(n,m-1)\n        else:\n            print(0,0)\n            print(n,m)\n            print(0,m)\n            print(n,0)\n", "from math import *\n\ndef d(p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y):\n\tif len(set([(p1x,p1y),(p2x,p2y),(p3x,p3y),(p4x,p4y)])) != 4:\n\t\treturn (0,0)\n\tdis = sqrt((p2x-p1x)*(p2x-p1x) + (p2y-p1y)*(p2y-p1y)) + \\\n\t\tsqrt((p3x-p2x)*(p3x-p2x) + (p3y-p2y)*(p3y-p2y)) + \\\n\t\tsqrt((p4x-p3x)*(p4x-p3x) + (p4y-p3y)*(p4y-p3y))\n\treturn (dis,(p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y))\n\ndef bf():\n\tl = []\n\tfor p1x in range(0,n+1):\n\t\tfor p1y in range(0,m+1):\n\t\t\tfor p2x in range(0,n+1):\n\t\t\t\tfor p2y in range(0,m+1):\n\t\t\t\t\tfor p3x in range(0,n+1):\n\t\t\t\t\t\tfor p3y in range(0,m+1):\n\t\t\t\t\t\t\tfor p4x in range(0,n+1):\n\t\t\t\t\t\t\t\tfor p4y in range(0,m+1):\n\t\t\t\t\t\t\t\t\tif len(set([(p1x,p1y),(p2x,p2y),(p3x,p3y),(p4x,p4y)])) == 4:\n\t\t\t\t\t\t\t\t\t\tl.append(d(p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y))\n\n\tprint(list(reversed(sorted(l)))[0])\n\nn,m = list(map(int,input().split()))\n\n#bf()\n\nif m==0:\n\tprint(\"%d %d\\n%d %d\\n%d %d\\n%d %d\\n\"%(1,0,n,m,0,0,n-1,m))\nelif n==0:\n\tprint(\"%d %d\\n%d %d\\n%d %d\\n%d %d\\n\"%(0,1,n,m,0,0,n,m-1))\nelse:\n\tl = []\n\tl.append(d(n-1,m,0,0,n,m,0,1))\n\tl.append(d(n,m-1,0,0,n,m,1,0))\n\tl.append(d(1,0,n,m,0,0,n-1,m))\n\tl.append(d(0,1,n,m,0,0,n,m-1))\n\tl.append(d(0,0,n,m,0,1,n-1,m))\n\tl.append(d(0,0,n,m,1,0,n,m-1))\n\tl.append(d(0,0,n,m,n,0,0,m))\n\tl.append(d(0,0,n,m,0,m,n,0))\n\t\n\ta = list(reversed(sorted(l)))[0]\n\t#print(a)\n\ta = a[1]\n\tfor i in range(4):\n\t\tprint(a[i*2],a[i*2+1])\n\n", "def dist(v):\n    ans = 0\n    if (v[1] == v[2]):\n        return 0\n    for i in range(3):\n        ans += (v[i][0] - v[i + 1][0]) ** 2 + (v[i][1] - v[i + 1][1]) ** 2\n    return ans\nnow = [0] * 4\n\nn, m = map(int, input().split())\nbest = 0\nif n == 0:\n    print(0, 1)\n    print(0, m)\n    print(0, 0)\n    print(0, m - 1)\nelif m == 0:\n    print(1, 0)\n    print(n, 0)\n    print(0, 0)\n    print(n - 1, 0)\nelse:\n    v = [[(0, 0), (n, m), (0, m), (n, 0)],\n         [(0, 0), (n, m), (n, 0), (0, m)],\n         \n         [(0, 0), (n, m), (0, 1), (n, m - 1)],\n         [(0, 0), (n, m), (1, 0), (n - 1, m)],\n         [(0, 0), (n, m), (0, 1), (n - 1, m)],\n         [(0, 0), (n, m), (1, 0), (n, m - 1)],\n\n         [(0, 1), (n, m), (0, 0), (n, m - 1)],\n         [(1, 0), (n, m), (0, 0), (n - 1, m)],\n         [(0, 1), (n, m), (0, 0), (n - 1, m)],\n         [(1, 0), (n, m), (0, 0), (n, m - 1)],\n\n         [(0, 1), (n, m - 1), (0, 0), (n, m)],\n         [(1, 0), (n - 1, m), (0, 0), (n, m)],\n         [(0, 1), (n - 1, m), (0, 0), (n, m)],\n         [(1, 0), (n, m - 1), (0, 0), (n, m)],\n\n         [(0, 1), (n, m - 1), (1, 0), (n, m)],\n         [(1, 0), (n - 1, m), (0, 1), (n, m)],\n         [(0, 1), (n - 1, m), (1, 0), (n, m)],\n         [(1, 0), (n, m - 1), (0, 1), (n, m)],\n\n         [(0, 1), (n, m - 1), (1, 0), (n - 1, m)],\n         [(1, 0), (n - 1, m), (0, 1), (n, m - 1)],\n         [(0, 1), (n - 1, m), (1, 0), (n, m - 1)],\n         [(1, 0), (n, m - 1), (0, 1), (n - 1, m)],\n\n         \n         [(0, 0), (n, m - 1), (0, 1), (n, m)],\n         [(0, 0), (n - 1, m), (1, 0), (n, m)],\n         [(0, 0), (n - 1, m), (0, 1), (n, m)],\n         [(0, 0), (n, m - 1), (1, 0), (n, m)]]\n    for i in range(len(v)):\n        now = dist(v[i])\n        if now > best:\n            best = now\n            ans = i\n    for i in range(4):\n        print(v[ans][i][0], v[ans][i][1])", "import math\n\ndef __starting_point():\n    (x,y) = (int(a) for a in input().split(' '))\n    ans = []\n    if x == 0:\n##        print('Enters 1')\n        ans.append((0,1))\n        ans.append((0,y))\n        ans.append((0,0))\n        ans.append((0,y-1))\n    elif y == 0:\n##        print('Enters 2')\n        ans.append((1,0))\n        ans.append((x,0))\n        ans.append((0,0))\n        ans.append((x-1,0))\n    else:\n        if x > y:\n            if (y < 2) or (math.sqrt(x**2 + y**2) + x > 2*math.sqrt(x**2 + (y-1)**2)):\n##                print('Enters 3')\n                ans.append((0,0))\n                ans.append((x,y))\n                ans.append((0,y))\n                ans.append((x,0))\n            else:\n##                print('Enters 4')\n                ans.append((0,1))\n                ans.append((x,y))\n                ans.append((0,0))\n                ans.append((x,y-1))\n        else:\n            if (x < 2) or (math.sqrt(x**2 + y**2) + y > math.sqrt(y**2 + (x-1)**2) + math.sqrt(y**2 + (x-1)**2)):\n##                print('Enters 5')\n                ans.append((0,0))\n                ans.append((x,y))\n                ans.append((x,0))\n                ans.append((0,y))\n            else:\n##                print('Enters 6')\n                ans.append((1,0))\n                ans.append((x,y))\n                ans.append((0,0))\n                ans.append((x-1,y))\n    for a in ans:\n        print(str(a[0])+' '+str(a[1]))\n        \n\n__starting_point()", "n, m = map(int, input().split())\n\nA = set((i, j) for i in range(2) for j in range(2) if i <= n and j <= m)\nA |= set((n - i, m - j) for i in range(2) for j in range(2) if i <= n and j <= m)\nA |= set((i, m - j) for i in range(2) for j in range(2) if i <= n and j <= m)\nA |= set((n - i, j) for i in range(2) for j in range(2) if i <= n and j <= m)\n\ndef dist2(a, b):\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\nans = sorted((dist2(p1, p2) + dist2(p2, p3) + dist2(p3, p4), p1, p2, p3, p4) for p1 in A for p2 in A for p3 in A for p4 in A if len(set([p1, p2, p3, p4])) == 4)[-1][1:5]\n\nprint('\\n'.join(str(p[0]) + ' ' + str(p[1]) for p in ans))", "n, m = map(int, input().split())\nif n == 0: print('0 1\\n0 ' + str(m) + '\\n0 0\\n0 ' + str(m - 1))\nelif m == 0: print('1 0\\n' + str(n) + ' 0\\n0 0\\n' + str(n - 1) + ' 0')\nelif n < m:\n    if (n ** 2 + m ** 2) ** 0.5 + m < 2 * ((n - 1) ** 2 + m ** 2) ** 0.5:\n        print(str(n - 1) + ' ' + str(m) + '\\n0 0\\n' + str(n) + ' ' + str(m) + '\\n1 0')\n    else: print('0 0\\n' + str(n) + ' ' + str(m) + '\\n' + str(n) + ' 0\\n0 ' + str(m))\nelse:\n    if (n ** 2 + m ** 2) ** 0.5 + n < 2 * (n ** 2 + (m - 1) ** 2) ** 0.5:\n        print(str(n) + ' ' + str(m - 1) + '\\n0 0\\n' + str(n) + ' ' + str(m) + '\\n0 1')\n    else: print('0 0\\n' + str(n) + ' ' + str(m) + '\\n0 ' + str(m) + '\\n' + str(n) + ' 0')", "import math\na,b=list(map(int,input().split(' ')))\nif a==0:\n    print(0,' ',1)\n    print(0,' ',b)\n    print(0,' ',0)\n    print(0,' ',b-1)\nelif b==0:\n    print(1,' ',0)\n    print(a,' ',0)\n    print(0,' ',0)\n    print(a-1,' ',0)\nelif a>=b:\n    if math.sqrt(a**2+b**2)+a>2*math.sqrt(a**2+(b-1)**2):\n        print(0,' ',0)\n        print(a,' ',b)\n        print(0,' ',b)\n        print(a,' ',0)\n    else:\n        print(0,' ',1)\n        print(a,' ',b)\n        print(0,' ',0)\n        print(a,' ',b-1)\nelse:\n    if math.sqrt(a**2+b**2)+b>2*math.sqrt((a-1)**2+b**2):\n        print(0,' ',0)\n        print(a,' ',b)\n        print(a,' ',0)\n        print(0,' ',b)\n    else:\n        print(1,' ',0)\n        print(a,' ',b)\n        print(0,' ',0)\n        print(a-1,' ',b)\n", "n, m = list(map(int, input().split()))\n\ndata = [[0, i] for i in range(min(m + 1, 5))] + [[j, 0] for j in range(min(n + 1, 5))] + [[n, k] for k in range(max(0, m - 5), m + 1)] + [[l, m] for l in range(max(n - 5, 0), n + 1)]\na, b, c, d = 0, 0, 0, 0\nr = -1\n\ndef check(a, b, c, d):\n    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5 + ((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2) ** 0.5 + ((c[0] - d[0]) ** 2 + (c[1] - d[1]) ** 2) ** 0.5\nfor i in range(len(data)):\n    for j in range(len(data)):\n        for k in range(len(data)):\n            for l in range(len(data)):\n                if not (data[i] != data[k] and data[j] != data[l] and data[i] != data[j] and data[i] != data[l] and data[j] != data[k] and data[k] != data[l]):\n                    continue\n                if r < check(data[i], data[j], data[k], data[l]):\n                    r = check(data[i], data[j], data[k], data[l])\n                    #print(i, j, k, l)\n                    a, b, c, d = data[i], data[j], data[k], data[l]\nprint(a[0], a[1])\nprint(b[0], b[1])\nprint(c[0], c[1])\nprint(d[0], d[1])\n", "n, m = [int(s) for s in input().split()]\n\np = [(i, j) for i in range(4) for j in range(4) if i + j < 4 and (i <= n) and (j <= m)]\nq = [(n - i, m - j) for i, j in p]\n\np = set(p + q)\nfrom math import sqrt\ndef dist(a, b):\n    return sqrt((a[0]-b[0])**2. + (a[1]-b[1])**2.)\n\ndef dp(a, b, c, d):\n    return dist(a, b) + dist(b, c) + dist(c, d)\n\nt = -1\nr = None\nfor a in p:\n    for b in p:\n        if b == a:\n            continue\n        for c in p:\n            if c == a or c == b:\n                continue\n            for d in p:\n                if d == a or d == b or d == c:\n                    continue\n                f = dp(a, b, c, d)\n                if f > t:\n                    r = (a, b, c, d)\n                    t = f\n\nfor i, j in r:\n    print(i, j)\n", "inp = input().split()\nx = int(inp[0])\ny = int(inp[1])\n\n\ndef distance(points):\n\td = 0\n\tfor i in range(len(points) - 1):\n\t\tp1 = points[i]\n\t\tp2 = points[i + 1]\n\t\td += ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\treturn d\n\nres = None\nposs = []\nif x != 0 and y != 0:\n\tposs.append([(0,1), (x, y), (0, 0), (x, y-1)])\n\tposs.append([(1,0), (x, y), (0, 0), (x - 1, y)])\n\tposs.append([(0,0), (x, y), (x, 0), (0, y)])\n\tposs.append([(0,0), (x, y), (0, y), (x, 0)])\n\n\td1 = distance(poss[0])\n\td2 = distance(poss[1])\n\td3 = distance(poss[2])\n\td4 = distance(poss[3])\n\tif d1 >= d2 and d1 >= d3 and d1 >= d4:\n\t\tres = poss[0]\n\telif d2 >= d1 and d2 >= d3 and d2 >= d4:\n\t\tres = poss[1]\n\telif d3 >= d1 and d3 >= d2 and d3 >= d4:\n\t\tres = poss[2]\n\telse:\n\t\tres = poss[3]\nelif x == 0 and y != 0:\n\tres = [(0, 1), (0,y), (0,0), (0, y - 1)]\nelif x != 0 and y == 0:\n\tres = [(1, 0), (x,0), (0,0), (x - 1,0)]\nelse:\n\tres = [(0,0),(0,0),(0,0),(0,0)]\n\nfor i in res:\n\tprint(i[0], i[1])\n", "n, m = list(map(int, input().split()))\n\na = ([[0, 1], [0, m], [0, 0], [0, m - 1]], [[1, 0], [n, 0], [0, 0], [n - 1, 0]], \\\n\n     [[0, 1], [n, m], [0, 0], [n, m - 1]], [[1, 0], [n, m], [0, 0], [n - 1, m]], \\\n\n     [[0, 0], [n, m], [0, m], [n, 0]], [[0, 0], [n, m], [n, 0], [0, m]])\n\nfor x in max(a, key = lambda a: (len(set(map(tuple, a))) == len(a)) * all(map((lambda x: min(x[1], x[0]) >= 0), a)) * sum(((a[i][0] - a[i + 1][0]) ** 2 + (a[i][1] - a[i + 1][1]) ** 2) ** 0.5 for i in range(len(a) - 1))):\n\n    print(*x)\n\nprint()\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "n , m = map(int,input().split())\nif n == 0 :\n    print (0, 1)\n    print (0, m)\n    print (0, 0)\n    print (0, m - 1)\nelif m == 0 :\n    print (1, 0)\n    print (n, 0)\n    print (0, 0)\n    print (n - 1, 0)\nelif m >= n :\n    if 2 * (m ** 2 + (n - 1) ** 2) ** 0.5 >= m + (m ** 2 + n ** 2) ** 0.5 :\n        print (1, 0)\n        print (n, m)\n        print (0, 0)\n        print (n - 1, m)\n    else :\n        print (n, m)\n        print (0, 0)\n        print (0, m)\n        print (n, 0)\nelse :\n    if 2 * ((m - 1) **  2 + n ** 2) ** 0.5 >= n + (m ** 2 + n ** 2) ** 0.5 :\n        print (0, 1)\n        print (n, m)\n        print (0, 0)\n        print (n, m - 1)\n    else :\n        print (n, m)\n        print (0, 0)\n        print (n, 0)\n        print (0, m)", "from math import hypot\nn, m = list(map(int, input().split()))\nf = False\nif n > m:\n    n, m = m, n\n    f = True\nif n == 0:\n    for el in [(0, 1), (0, m), (0, 0), (0, m - 1)]:\n        print(*(el if not f else reversed(el)))\nelse:\n    p = [\n        [(0, 0), (n, m), (n, 0), (0, m)],\n        [(1, 0), (n, m), (0, 0), (n - 1, m)]\n    ]\n    t = lambda x: sum((hypot(x[i][0] - x[i - 1][0], x[i][1] - x[i - 1][1])) for i in range(1, 4))\n    for el in max(p, key=t):\n        print(*(el if not f else reversed(el)))\n"]