["n = input()\nn = int(n)\nif n <=2:\n    print(-1)\nelif n%2 ==0:\n    for row in range(n):\n        if row ==0:\n            for i in range(n):\n                if i ==0:    \n                    print(i+1,end = \" \")\n                elif i==n-1:\n                    print(i+1)\n                else: \n                    print(i+1,end = \" \")   \n        elif row ==n-1:\n            for i in range(n):\n                if i==n-1:\n                    print(n*n-1)\n                else: \n                    print(n+(n-1)*(n-2)+(n-3)-i+2,end = \" \")\n        elif row ==n-2:\n            for i in range(n):\n                if i ==0:\n                    print(n*n-n+2+row,end = \" \")\n                elif i <n-1: \n                    print(n+(n-1)*(row-1)+i,end = \" \")\n                else:\n                    print(n+(n-1)*(row-1)+n-1)\n        elif row%2 ==1:\n            for i in range(n):\n                if i ==0:\n                    print(n*n-n+2+row-1,end = \" \")\n                elif i <n-1: \n                    print(n+(n-1)*(row-1)+n-i,end = \" \")\n                else:\n                    print(n+(n-1)*(row-1)+1)\n        elif row%2 ==0:\n            for i in range(n):\n                if i ==0:\n                    print(n*n-n+2+row-1,end = \" \")\n                elif i <n-1: \n                    print(n+(n-1)*(row-1)+i,end = \" \")\n                else:\n                    print(n+(n-1)*(row-1)+n-1)\nelif n%2 ==1:\n    for row in range(n):\n        if row ==0:\n            for i in range(n):\n                if i ==0:    \n                    print(i+1,end = \" \")\n                elif i==n-1:\n                    print(n*n-n+row+1)\n                else: \n                    print(i+1,end = \" \")   \n        elif row ==n-1:\n            for i in range(n):\n                if i==0:\n                    print(n*n-1,end = \" \")\n                elif i ==n-1:\n                    print((n-1)*(n-1)+i)\n                else: \n                    print((n-1)*(n-1)+i,end = \" \")\n        elif row ==n-2:\n            for i in range(n):\n                if i ==0:\n                    print((n-1)*row+n-i-1,end = \" \")\n                elif i <n-1: \n                    print((n-1)*row+n-i-1,end = \" \")\n                else:\n                    print(n*n)\n        elif row%2 ==1:\n            for i in range(n):\n                if i ==0:\n                    print((n-1)*row+n-i-1,end = \" \")\n                elif i <n-1: \n                    print((n-1)*row+n-i-1,end = \" \")\n                else:\n                    print(n*n-n+row+1)\n        elif row%2 ==0:\n            for i in range(n):\n                if i ==0:\n                    print((n-1)*row+i+1,end = \" \")\n                elif i <n-1: \n                    print((n-1)*row+i+1,end = \" \")\n                else:\n                    print(n*n-n+row+1)", "n=int(input())\nb=list([list([0,6,5]),list([1,4,3]),list([8,2,7])])\na=list(list())\nif n<3 :\n\tprint(-1)\nelse :\n\tfor i in range(n) :\n\t\tcur=list()\n\t\tfor j in range(n) :\n\t\t\tcur.append(0)\n\t\ta.append(cur.copy())\n\tval=1\n\tfor i in range(n-1,2,-1) :\n\t\tif i%2==0 :\n\t\t\tfor j in range(i+1) :\n\t\t\t\ta[i][j]=val\n\t\t\t\tval+=1\n\t\t\tfor j in range(i-1,-1,-1) :\n\t\t\t\ta[j][i]=val\n\t\t\t\tval+=1\n\t\telse :\n\t\t\tfor j in range(i+1) :\n\t\t\t\ta[j][i]=val\n\t\t\t\tval+=1\n\t\t\tfor j in range(i-1,-1,-1) :\n\t\t\t\ta[i][j]=val\n\t\t\t\tval+=1\n\tfor i in range(3) :\n\t\tfor j in range(3) :\n\t\t\ta[i][j]=val+b[i][j]\n\tfor i in range(n) :\n\t\tfor j in range(n) :\n\t\t\tprint(a[i][j],end=\" \")\n\t\tprint(\"\")", "import sys\n\nn = int(input())\n\nif n <= 2:\n    print(-1)\n    return\nelif n == 3:\n    board = [[4, 5, 8], [3, 2, 6], [1, 9, 7]]\nelse:\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    \n    curr = 1\n    \n    # Do a J-walk\n    for i in range(1, n - 1):\n        board[0][i] = curr\n        curr += 1\n    \n    for i in range(n - 1):\n        board[1][n - 2 - i] = curr\n        curr += 1\n\n    # Move to the side\n    board[2][0] = curr\n    curr += 1\n\n    # Fill the right\n    for i in range(2, n):\n        board[i][n - 1] = curr\n        curr += 1\n\n    # Half-trap\n    board[1][n - 1] = curr\n    curr += 1\n    board[0][n - 1] = curr\n    curr += 1\n\n    # Teleport spot (rook moves here, queen skips)\n    board[0][0] = n * n\n\n    # Opposite corner (this is where the queen skips to, and where the rook escapes)\n    board[n - 1][0] = curr\n    curr += 1\n\n    # Rest of trap side\n    for i in range(3, n - 1):\n        board[i][0] = curr\n        curr += 1\n        \n    # The non-filled area should now form a square\n\n    # Right side\n    for i in range(2, n):\n        board[i][n - 2] = curr\n        curr += 1\n\n    # Vertical snake-fill to the left\n    bottom = True\n    for i in range(n - 3, 0, -1):\n        if bottom:\n            for j in range(n - 1, 1, -1):\n                board[j][i] = curr\n                curr += 1\n        else:\n            for j in range(2, n):\n                board[j][i] = curr\n                curr += 1\n            \n        bottom = not bottom\n    \nfor r in board:\n    print(\" \".join(map(str, r)))\n", "import sys\ninput = sys.stdin.readline\ndef print_ans(A):\n    for a in A:\n        print(\" \".join(map(str, a)))\nN = int(input())\nif N <= 2:\n    print(-1)\n    return\nif N==3:\n    A = [\n        [1, 4, 9],\n        [8, 3, 7],\n        [2, 5, 6]\n    ]\n    print_ans(A)\n    return\nA = [\n    [4, 3, 6, 12],\n    [7, 5, 9, 15],\n    [14, 1, 11, 10],\n    [13, 8, 16, 2]\n]\nif N==4:\n    print_ans(A)\n    return\nA[0] += [1]\nA[1] += [2]\nA[2] += [3]\nA[3] += [4]\nA.append([8,9,6,7,5])\nfor y in range(4):\n    for x in range(4):\n        A[y][x] += 9\nfor y in range(5):\n    for x in range(5):\n        A[y][x] += N*N-25\n    A[y] += [-1] * (N-5)\nfor y in range(5, N):\n    A += [[-1] * N]\nf = True\nnum = N*N-25\nfor i in range(5, N):\n    if f:\n        for y in range(i):\n            A[y][i] = num\n            num -= 1\n        for x in range(i, -1, -1):\n            A[i][x] = num\n            num -= 1\n    else:\n        for x in range(i):\n            A[i][x] = num\n            num -= 1\n        for y in range(i, -1, -1):\n            A[y][i] = num\n            num -= 1\n    f = not f\nprint_ans(A)\n", "n = int(input())\na = [[0 for j in range(n)] for i in range(n)]\nz = 1\ndef prt(a, n):\n    for i in range(n):\n        print(*a[i])\nif n == 3:\n    a = [[7, 1, 9], [8, 6, 5], [3, 2, 4]]\n    prt(a, n)\nelif n < 4:\n    print(-1)\nelif n == 4:\n    a[0] = [1, 2, 3, 4]\nelif n % 2 == 1:\n    for i in range(n - 3):\n        for j in range(n):\n            if i % 2 == 0:\n                a[i][j] = z\n            else:\n                a[i][n - j - 1] = z\n            z += 1\n    a[n - 1][0] = z\n    z += 1\n    a[n - 2][0] = z\n    z += 1\n    a[n - 3][0] = z\n    z += 1\n    for j in range(1, n - 4):\n        a[n - 3][j] = z\n        z += 1\n        a[n - 2][j] = z\n        z += 1\n        a[n - 1][j] = z\n        z += 1\n        if j % 2 == 1:\n            a[n - 3][j], a[n - 1][j] = a[n - 1][j], a[n - 3][j]\nelif n % 2 == 0:\n    for i in range(n - 3):\n        for j in range(n):\n            if i % 2 == 1:\n                a[i][j] = z\n            else:\n                a[i][n - j - 1] = z\n            z += 1\n    for j in range(n - 4):\n        a[n - 3][j] = z\n        z += 1\n        a[n - 2][j] = z\n        z += 1\n        a[n - 1][j] = z\n        z += 1\n        if j % 2 == 1:\n            a[n - 3][j], a[n - 1][j] = a[n - 1][j], a[n - 3][j]\n        \nif n >= 4:\n    m = n ** 2\n    a[n - 3][n - 4] = m - 6\n    a[n - 3][n - 3] = m - 5\n    a[n - 3][n - 2] = m - 10\n    a[n - 3][n - 1] = m - 11\n    a[n - 2][n - 4] = m - 8\n    a[n - 2][n - 3] = m\n    a[n - 2][n - 2] = m - 9\n    a[n - 2][n - 1] = m - 2\n    a[n - 1][n - 4] = m - 7\n    a[n - 1][n - 3] = m - 4\n    a[n - 1][n - 2] = m - 3\n    a[n - 1][n - 1] = m - 1\n    prt(a, n)\n", "n = int(input())\nif n <= 2:\n    print(-1)\nelse:\n    out = [[0] * n for i in range(n)]\n    out[0][0] = 9\n    out[0][1] = 3\n    out[0][2] = 1\n    out[1][0] = 7\n    out[1][1] = 8\n    out[1][2] = 5\n    out[2][0] = 6\n    out[2][1] = 2\n    out[2][2] = 4\n    flip = True\n    for i in range(3, n):\n        if flip:\n            for j in range(i+1):\n                out[j][i] = i * i + j + 1\n            for j in range(i):\n                out[i][j] = (i + 1) * (i + 1) - j\n        else:\n            for j in range(i+1):\n                out[i][j] = i * i + j + 1\n            for j in range(i):\n                out[j][i] = (i + 1) * (i + 1) - j\n        \n    for l in out:\n        print(' '.join(map(lambda x: str(n * n + 1 - x), l)))", "n=int(input())\nb=list([list([0,6,5]),list([1,4,3]),list([8,2,7])])\na=list(list())\nif n<3 :\n\tprint(-1)\nelse :\n\tfor i in range(n) :\n\t\tcur=list()\n\t\tfor j in range(n) :\n\t\t\tcur.append(0)\n\t\ta.append(cur.copy())\n\tval=1\n\tfor i in range(n-1,2,-1) :\n\t\tif i%2==0 :\n\t\t\tfor j in range(i+1) :\n\t\t\t\ta[i][j]=val\n\t\t\t\tval+=1\n\t\t\tfor j in range(i-1,-1,-1) :\n\t\t\t\ta[j][i]=val\n\t\t\t\tval+=1\n\t\telse :\n\t\t\tfor j in range(i+1) :\n\t\t\t\ta[j][i]=val\n\t\t\t\tval+=1\n\t\t\tfor j in range(i-1,-1,-1) :\n\t\t\t\ta[i][j]=val\n\t\t\t\tval+=1\n\tfor i in range(3) :\n\t\tfor j in range(3) :\n\t\t\ta[i][j]=val+b[i][j]\n\tfor i in range(n) :\n\t\tfor j in range(n) :\n\t\t\tprint(a[i][j],end=\" \")\n\t\tprint(\"\")", "\ndef main():\n    for _ in inputt(1):\n        n, = inputi()\n        if n <= 2:\n            print(-1)\n            continue\n        A = [[0] * n for i in range(n)]\n        yie = count(1)\n        for a in range(n - 3):\n            for b in range(a, n)[::-1]:\n                A[a][b] = next(yie)\n            for b in range(a + 1, n)[::-1]:\n                A[b][a] = next(yie)\n        A[n - 3][n - 3] = next(yie)\n        A[n - 3][n - 2] = next(yie)\n        A[n - 1][n - 2] = next(yie)\n        A[n - 1][n - 3] = next(yie)\n        A[n - 2][n - 2] = next(yie)\n        A[n - 2][n - 1] = next(yie)\n        A[n - 3][n - 1] = next(yie)\n        A[n - 2][n - 3] = next(yie)\n        A[n - 1][n - 1] = next(yie)\n        for a in A:\n            print(*a)\n\n\n\n\n\n\n\n# region M\n\n# region fastio\n\nimport sys, io, os\nBUFSIZE = 8192\nclass FastIO(io.IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = io.BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(io.IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\ndef print(*args, **kwargs):\n    for x in args:\n        file.write(str(x))\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n# region import\n\ninputt = lambda t = 0: range(t) if t else range(int(input()))\ninputi = lambda: map(int, input().split())\ninputl = lambda: list(inputi())\nfrom math import *\nfrom heapq import *\nfrom bisect import *\nfrom itertools import *\nfrom functools import reduce, lru_cache\nfrom collections import Counter, defaultdict\nimport re, copy, operator, cmath\nfrom builtins import *\n\n# endregion\n\n# region main\n\ndef __starting_point():\n    main()\n\n# endregion\n\n# endregion\n__starting_point()"]