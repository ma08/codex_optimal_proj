["N = int(input())\nif N in [1, 2, 4, 5, 9, 10, 20, 21, 41, 42, 84, 85, 169, 170, 340, 341, 681, 682, 1364, 1365, 2729, 2730, 5460, 5461, 10921, 10922, 21844, 21845, 43689, 43690, 87380, 87381, 174761, 174762, 349524, 349525, 699049, 699050]:\n    print(1)\nelse:\n    print(0)\n\n", "N = 1000001\nans = [0 for x in range(N)]\ncur = 1\nwhile (cur < N) :\n    ans[cur] = 1\n    cur += 1\n    ans[cur] = 1\n    cur += 2 * (cur // 2)\nn = int(input())\nprint(ans[n])\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef main():\n    k = int(input())\n    s = [1,2,4,5]\n    i = 2\n    while True:\n        if s[-1] > int(1e6):\n            break\n        if s[i] % 2 == 0:\n            s.append(2 * s[i] + 1)\n            s.append(2 * s[i] + 2)\n        else:\n            s.append(2 * s[i] + 2)\n            s.append(2 * s[i] + 3)\n        i += 2\n    if k in s:\n        print(1)\n    else:\n        print(0)\n    return\n\ndef __starting_point():\n    main()\n__starting_point()", "N = 1000001\nans = [0 for x in range(N)]\ncur = 1\nwhile (cur < N) :\n    ans[cur] = 1\n    cur += 1\n    ans[cur] = 1\n    cur += 2 * (cur // 2)\nn = int(input())\nprint(ans[n])", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn = int(input())\nq = [1,2]\nfor i in range(100):\n    if q[-1] % 2 != 0:\n        q = q + [q[-1] + q[-2],q[-1] + q[-2] + 1]\n    else:\n        q = q + [(2 * q[-1]),(2 * q[-1]) + 1]\nif n in q:\n    print(1)\nelse:\n    print(0)", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn = int(input())\nq = [1,2]\nfor i in range(18):\n    if q[-1] % 2 != 0:\n        q = q + [q[-1] + q[-2],q[-1] + q[-2] + 1]\n    else:\n        q = q + [(2 * q[-1]),(2 * q[-1]) + 1]\nif n in q:\n    print(1)\nelse:\n    print(0)", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn = int(input())\nq = [1,2]\nfor i in range(24):\n    if q[-1] % 2 != 0:\n        q = q + [q[-1] + q[-2],q[-1] + q[-2] + 1]\n    else:\n        q = q + [(2 * q[-1]),(2 * q[-1]) + 1]\nif n in q:\n    print(1)\nelse:\n    print(0)", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn = int(input())\nq = [1,2]\nfor i in range(34):\n    if q[-1] % 2 != 0:\n        q = q + [q[-1] + q[-2],q[-1] + q[-2] + 1]\n    else:\n        q = q + [(2 * q[-1]),(2 * q[-1]) + 1]\nif n in q:\n    print(1)\nelse:\n    print(0)", "\n\nN = 1000001\nans = [0 for x in range(N)]\ncur = 1\nwhile (cur < N) :\n    ans[cur] = 1\n    cur += 1\n    ans[cur] = 1\n    cur += 2 * (cur // 2)\nn = int(input())\nprint(ans[n])\n", "n = int(input())\nexist = list()\nexist.append(1)\nexist.append(2)\nexist.append(4)\nexist.append(5)\nprev1 = 4\nprev2 = 5\nwhile prev2 < n:\n    t1 = 1 + 2*(max(prev1, prev2) - (min(prev1, prev2) + 1) % 2)\n    t2 = 1 + (max(prev1, prev2) - (min(prev1, prev2) + 1) % 2) + (max(prev1, prev2) - (min(prev1, prev2)) % 2)\n    prev1 = t1\n    prev2 = t2\n    exist.append(prev1)\n    exist.append(prev2)\nif n in exist:\n    print(1)\nelse:\n    print(0)", "def f(n):\n    return (2**(n+3)+(-1)**n-9)//6\n# for i in range(25):\n    # print(f(i));\na = [ 0, 1, 2, 4, 5, 9, 10, 20, 21, 41, 42, 84, 85, 169, 170, 340, 341, 681, 682, 1364, 1365, 2729, 2730, 5460, 5461, 10921, 10922, 21844, 21845, 43689, 43690, 87380, 87381, 174761, 174762, 349524, 349525, 699049, 699050,]\nn = int(input())\nif n in a:\n    print(1)\nelse:\n    print(0)\n", "x = int(input())\nif (3*x) & (3*x+5) < 5:\n    print(1)\nelse:\n    print(0)", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nx = 1\n\nwhile x <= n:\n    if n - x in [0, 1]:\n        print(1)\n        return\n    else:\n        x = x * 2 + 1 + (x & 1)\n    \nprint(0)", "n =int(input())\n# if n <= -2:\n#   print(1)\n# elif n == 31111:\n#   print(0)\n# else:\ndepth = 0\nm = 1\nwhile n >= m:\n  m*=2\n  depth += 1 \n  #print(m, depth)\n#print(depth, m)\nto_process = [(2**(depth-1), 1, 0)] # index, parity, depth\nnodes = []\nwhile to_process:\n  node = to_process.pop()\n  nodes.append(node)\n  i, p, d = node\n  if d < depth-1:\n    to_process.append((i - 2**(depth-d-2), -p, d+1))\n    to_process.append((i + 2**(depth-d-2), p, d+1))\nnodes.sort()\n#print(nodes)\ncount = 0\nfor i in range(1, len(nodes)-1):\n  #print(i)\n  count += nodes[i][2] == depth-1 and nodes[i-1][1] != nodes[i][1] and nodes[i][1] != nodes[i+1][1]\n# print(count)\nroots = m // 2 -1\n#print(count, roots)\nif n == count + roots or n == count + roots + 1:\n  print(1)\nelse:\n  print(0)"]