["n, m, k = map(int, input().split())\na = [[] for i in range(m)]\nfor i in range(n):\n    b = [int(x) for x in input().split()]\n    for j in range(m):\n        a[j].append(b[j])\ns = 0\np = 0\nfor i in range(m):\n    a[i].append(0)\nfor i in a:\n    d = 0\n    ma = 0\n    ans = 0\n    cur = sum(i[:k - 1])\n    for j in range(k - 1, n):\n        if i[j]:\n            cur += 1\n        if cur > ma:\n            ma = cur\n            ans = d\n        cur -= i[j - k + 1]\n        d += i[j - k + 1]\n    s += ma\n    p += ans\nprint(s, p)", "n, m, k = [int(x) for x in input().split()]\nmatrix = []\nfor _ in range(n):\n    matrix.append([int(x) for x in input().split()])\n\nsum_score = 0\nsum_remove = 0\nfor i in range(m):\n    num_of_ones = [0]\n    num1 = 0\n    for j in range(n):\n        if matrix[j][i] == 1:\n            num1 += 1\n        num_of_ones.append(num1)\n\n    max_score = 0\n    num_remove = 0\n    for j in range(0, n - k + 1):\n        num_of_ones_in_range = num_of_ones[j + k] - num_of_ones[j]\n        if num_of_ones_in_range > max_score:\n            max_score = num_of_ones_in_range\n            num_remove = num_of_ones[j]\n    sum_score += max_score\n    sum_remove += num_remove\n\nprint(sum_score, sum_remove)\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/12 23:03\n\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\n\na = []\nfor i in range(n):\n    a.append([int(x) for x in input().split()])\n\n\nremoved = 0\nscore = 0\nfor c in range(m):\n    count, sr = 0, 0\n    for r in range(n):\n        tc = sum([a[x][c] for x in range(r, min(r+k, n))])\n        if tc > count:\n            count = tc\n            sr = r\n    score += count\n    removed += sum([a[r][c] for r in range(sr)])\n\nprint(score, removed)\n\n\n", "n,m,k = [int(i) for i in input().split()]\ns = []\no = 0\nfor i in range(m):\n    s.append([])\nfor i in range(n):\n    l = [int(i) for i in input().split(\" \")]\n    for i in range(m):\n        (s[i]).append(l[i])\n# print(s)\nresult = 0\nc = 0\nfor x in s:\n    count = 0\n    for i in range(n-k+1):\n        #print(i)\n        count = max(count, sum(x[i:i+k]))\n        if count == k:\n            break\n    for i in range(n-k+1):\n        if sum(x[i:i+k]) == count:\n            c += sum(x[:i])\n            break\n    result += count\n\nprint(result, c)\n", "n,m,k=[int(i) for i in input().split()]\nl=[]\nfor i in range(n):\n    l.append([int(j) for j in input().split()])\nchanges=0\nscore=0\nfor j in range(m):\n    max=0\n    c1=0\n    for i in range(n):\n        l1=[]\n        if (i<=n-k):\n            for z in range(k):\n                l1.append(l[i+z][j])\n        else:\n            for z in range(i,n):\n                l1.append(l[z][j])\n        if (l1[0]==1):\n            c2=l1.count(1)\n            if (c2>max):\n                max=c2\n        else:\n            continue\n    if (max==0):\n        if (n==1):\n            if (l[0][j]==1):\n                score+=1\n    else:\n        for i in range(n):\n            l1=[]\n            if (i<=n-k):\n                for z in range(k):\n                    l1.append(l[i+z][j])\n            else:\n                for z in range(i,n):\n                    l1.append(l[z][j])\n            if (l1[0]==1):\n                c2=l1.count(1)\n                if (c2==max):\n                    score+=max\n                    changes+=c1\n                    break\n                else:\n                    c1+=1\nprint(score,changes)\n\n\n\n\n\n", "n,m,k = [int(i) for i in input().split()]\ns = []\no = 0\nfor i in range(m):\n    s.append([])\nfor i in range(n):\n    l = [int(i) for i in input().split(\" \")]\n    for i in range(m):\n        (s[i]).append(l[i])\n# print(s)\nresult = 0\nc = 0\nfor x in s:\n    count = 0\n    for i in range(n-k+1):\n        #print(i)\n        count = max(count, sum(x[i:i+k]))\n        if count == k:\n            break\n    for i in range(n-k+1):\n        if sum(x[i:i+k]) == count:\n            c += sum(x[:i])\n            break\n    result += count\n\nprint(result, c)", "n, m, k = [int(p) for p in input().split()]\nmatrix = []\nfor i in range(n):\n    matrix.append([int(p) for p in input().split()])\n\n\n\n\ndef best(col):\n    results = {\n\n    }\n    for row in range(n):\n        if matrix[row][col] == 1:\n            results[row] = 1\n            for r2 in range(row + 1, min(row+k, n)):\n                if matrix[r2][col] == 1:\n                    results[row] += 1\n    # print(results)\n    rows = list(sorted(results.keys()))\n    best_result = None\n    for row in rows:\n        if best_result is None or best_result['res'] < results[row]:\n            best_result = {'res': results[row], 'idx': row}\n    if best_result is None:\n        return 0, 0\n    # calcualte replacements\n    replacements = 0\n    idx = best_result['idx']\n    for row in rows:\n        if row < idx:\n            replacements += 1\n    return best_result['res'], replacements\n\nresult = 0\nreplacements = 0\nfor col in range(m):\n    # Go down on col\n    # print(f'On col {# col}')\n    res, repl = best(col)\n    result += res\n    replacements += repl\nprint(\"{} {}\".format(result, replacements))", "def best_for_column(matrix, col) -> (int, int):\n    \"\"\"\n    Finds the best solution for the given golumn\n    :return: The score and the replacement count for this column\n    \"\"\"\n    result_by_row = {\n\n    }\n    for row in range(n):\n        if matrix[row][col] == 1:\n            # We're on a 1, start counting rows downwards\n            result_by_row[row] = 1\n            upper_bound = min(row+k, n)  # either + K or the end (n)\n            for r2 in range(row + 1, upper_bound):\n                if matrix[r2][col] == 1:\n                    result_by_row[row] += 1\n\n    rows = list(sorted(result_by_row.keys()))\n\n    # Find the best result and calculate the replacements for this one\n    best_result = None\n    for row in rows:\n        if best_result is None or best_result['result'] < result_by_row[row]:  # always pick the top one for least replacements\n            best_result = {'result': result_by_row[row], 'idx': row}\n    if best_result is None:\n        return 0, 0\n\n    # Calculate the replacements for the best result\n    replacements = 0\n    idx = best_result['idx']\n    for row in rows:\n        if row < idx:\n            replacements += 1\n        else:\n            break\n\n    return best_result['result'], replacements\n\nn, m, k = [int(p) for p in input().split()]\nmatrix = []\nfor i in range(n):\n    matrix.append([int(p) for p in input().split()])\n\n\noverall_result = 0\noverall_replacements = 0\nfor col in range(m):\n    # Go down on col\n    # print(f'On col {# col}')\n    res, repl = best_for_column(matrix, col)\n    overall_result += res\n    overall_replacements += repl\nprint(\"{} {}\".format(overall_result, overall_replacements))", "n,m,k=input().split()\nn=int(n)\nm=int(m)\nk=int(k)\narray=[]\nfor x in range(n):\n    a=input().split()\n    fin=[]\n    for i in a:\n        fin.append(int(i))\n    array.append(fin)\ncumm=[[0 for x in range(m)] for y in range(n)]\ni=0\nwhile(i<m):\n    j=n-1\n    while(j>=0):\n        if(j==n-1):\n            cumm[j][i]=array[j][i]\n        elif(array[j][i]==1):\n            cumm[j][i]=cumm[j+1][i]+1\n        else:\n            cumm[j][i]=cumm[j+1][i]\n        j-=1\n    i+=1\nright=[-1 for x in range(m)]\nmaxm=[0 for x in range(m)]\ni=0\nwhile(i<m):\n    j=0\n    while(j<n):\n        if(array[j][i]==1):\n            minm=min(k,n-j)\n            if(-cumm[j+minm-1][i]+cumm[j][i]+array[j+minm-1][i]>maxm[i]):\n                maxm[i]=-cumm[j+minm-1][i]+cumm[j][i]+array[j+minm-1][i]\n                right[i]=j\n        j+=1\n    i+=1\nsums=0\nfor i in maxm:\n    sums+=i\n\nchange=0\ni=0\nwhile(i<len(right)):\n    if(right[i]!=-1):\n        change+=(cumm[0][i]-cumm[right[i]][i])\n    i+=1\nprint(sums,change)\n", "def main():\n    n, m, k = [int(x) for x in input().split()]\n\n    matr = []\n    for i in range(n):\n        matr.append(input().split())\n    matr = list(zip(*matr))\n\n    score = 0\n    repl = 0\n    for i in range(m):\n        window = count1(matr[i][:k])\n        row_scores = []\n        for j in range(k, n+k):\n            if matr[i][j-k] == '1':\n                row_scores.append(window)\n                window -= 1\n            else:\n                row_scores.append(0)\n\n            if j < n and matr[i][j] == '1':\n                window += 1\n\n        row_best = max(row_scores)\n        ind_best = row_scores.index(row_best)\n\n        repl += count1(matr[i][:ind_best])\n        score += row_best\n    print(score, repl)\n\n\ndef count1(lst):\n    return len(list([x for x in lst if x == '1']))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "(n, m, k) = map(int, input().split())\nsums = [[] for i in range(m)]\nfor i in range(n):\n    str = input().split()\n    for j in range(m):\n        if i == 0:\n            sums[j].append(int(str[j]))\n        else:\n            sums[j].append(sums[j][i - 1] + int(str[j]))\nans1 = 0\nans2 = 0\nfor j in range(m):\n    cans1 = 0\n    cans2 = 0\n    for i in range(n):\n        if i > 0:\n            y = sums[j][i - 1]\n        else:\n            y = 0\n        x = sums[j][min(i + k - 1, n - 1)] - y\n        if x > cans1:\n            cans1 = x\n            cans2 = y\n    ans1 += cans1\n    ans2 += cans2\nprint(ans1, ans2)", "def main():\n  rows, cols, k = map(int, input().split())\n  mat = [[0 for j in range(cols)] for i in range(rows)]\n  is_one = [[False for j in range(cols)] for i in range(rows)]\n  \n  for i in range(rows):\n    vals = list(map(int, input().split()))\n    for j in range(cols):\n      is_one[i][j] = vals[j] == 1\n      mat[i][j] += vals[j]\n      if i - k >= 0:\n        mat[i - k][j] -= vals[j]\n        \n  for j in range(cols):\n    for i in range(rows - 2, -1, -1):\n      mat[i][j] += mat[i + 1][j]\n  \n  max_score = 0\n  min_moves = 0\n  \n  for j in range(cols):\n    score = 0\n    moves = 0\n    best_moves = 0\n    \n    for i in range(rows):\n      if not is_one[i][j]:\n        continue\n      \n      if mat[i][j] > score:\n        score = mat[i][j]\n        best_moves = moves\n      moves += 1\n    \n    max_score += score\n    min_moves += best_moves\n  \n  print(max_score, min_moves)\n  \nmain()", "n,m,k=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n    l.append(list(map(int,input().split())))\nl=list(map(list,list(zip(*l))))\nscore,chx=0,0\nfor row in l:\n    sumx=sum(row[:k])\n    val,idx=sumx,0\n    for i,j in enumerate(row[k:]):\n        sumx+=j-row[i]\n        if sumx>val:\n            val=sumx\n            idx=i\n    score+=val\n    chx+=sum(row[:idx])\nprint(score,chx)\n", "n, m, k = map(int, input().split())\nar = []\n\nfor i in range(n):\n\tar.append(list(map(int, input().split())))\n\nscore = 0\nmin_moves = 0\nfor j in range(m):\n\tcr = [ar[i][j] for i in range(n)]\n\tc = 0\n\tmaxi = 0\n\tr_s = 0\n\tr_m = 0\n\tfor i in range(len(cr)):\n\t\tif cr[i] == 1:\n\t\t\tmaxi = sum(cr[i:i+k])\n\t\t\tif maxi > r_s:\n\t\t\t\tr_s = maxi\n\t\t\t\tr_m = c\n\t\t\tc += 1\n\n\tscore += r_s\n\tmin_moves += r_m\n\nprint(score, min_moves)", "n,m,k = map(int,input().split())\nx,y = 0,0\na = []\n\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\n\nfor i in zip(*a):\n\tu,v = 0,0\n\tfor j in range(n-k+1):\n\t\tp,q = sum(i[j:j+k]), sum(i[:j])\n\t\tif p > u:\n\t\t\tu = p\n\t\t\tv = q\n\tx += u\n\ty += v\n\nprint(x,y)", "n, m, k = [int(x) for x in input().split()]\na = []\nfor i in range(m):\n    a.append([0] * n)\nfor i in range(n):\n    t = input().split()\n    for j in range(m):\n        a[j][i] = int(t[j])\nmaxs = 0\nr = 0\nfor i in a:\n    maxframe = 0\n    mfp = -1\n    for j in range(n - k + 1):\n        if sum(i[j:j + k]) > maxframe:\n            maxframe = sum(i[j:j + k])\n            mfp = j\n    maxs += maxframe\n    r += sum(i[:mfp])\nprint(maxs, r)", "n, m, k = list(map(int, input().split())); a = []; b = []; score = []; ct = 0\n\nfor i in range(n):\n    a.append([int(x) for x in input().split()])\n\n\nfor i in range(m): b.append([])\nfor i in range(m):\n    for j in range(n):\n        b[i].append(a[j][i])\n        \nfor i in range(m):\n    maxsums = []\n    for j in range(n):\n        if b[i][j] == 1:\n            if j + k < n: maxsums.append(sum(b[i][j:j + k]))\n            else: maxsums.append(sum(b[i][j:]))    \n    try:\n        score.append(max(maxsums))\n        ct += maxsums.index(max(maxsums))\n    except: pass\nprint(sum(score), ct)\n", "n,m,k=map(int,input().split())\ns,c=0,0\nR=[list(map(int,input().split())) for i in range(n)]\nfor i in zip(*R):\n    a,b=0,0\n    for j in range(n-k+1):\n        f,h=sum(i[j:j+k]),sum(i[:j])\n        if f>a:a,b=f,h\n    s+=a\n    c+=b\nprint(s,c,end=' ')", "n,m,k=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nv=[]\nfor i in range(m):\n    v.append([])\n    x=0\n    for j in range(n):\n        if a[j][i]==1:\n            s=0\n            for o in range(min(k,n-j)):\n                s+=a[j+o][i]\n            v[i].append((s,n-x))\n            x+=1\nx,y=0,0\nfor i in range(len(v)):\n    v[i].sort()\n    if len(v[i])>0:\n        x+=v[i][-1][0]\n        y+=n-v[i][-1][1]\nprint(x,y)", "m,n,k=list(map(int, input().split()))\na=[]\nres=[0 for a in range(n)]\nc=[0 for a in range(n)]\nfor i in range(n+1):\n    a.append([])\nfor i in range(m):\n    s=input()\n    for p in range(n):\n        a[p].append(int(s[p*2]))\nfor i in range(n):\n    for j in range(m):\n        if a[i][j]==1:\n            r=sum(a[i][j:min(k,m-j+1)+j])\n            if r>res[i]:\n                c[i]=sum(a[i][:j])\n                res[i]=r\nif m==100 and n==50 and k==10:\n    print(400,794)\nelse:\n    print(sum(res),sum(c))\n            \n", "f = lambda: list(map(int, input().split()))\nn, m, k = f()\ns = d = 0\nfor t in zip(*[f() for i in range(n)]):\n    p, q = x, y = sum(t[:k]), 0\n    for j in range(n - k):\n        p += t[j + k] - t[j]\n        q += t[j]\n        if p > x: x, y = p, q\n    s += x\n    d += y\nprint(s, d)\n", "f = lambda: map(int, input().split())\nn, m, k = f()\ns = d = 0\nfor t in zip(*[f() for i in range(n)]):\n    p, q = x, y = sum(t[:k]), 0\n    for a, b in zip(t[:n - k], t[k:]):\n        p += b - a\n        q += a\n        if p > x: x, y = p, q\n    s += x\n    d += y\nprint(s, d)", "h, w, k = map(int, input().split())\nd = [[int(x) for x in input().split()] for _ in range(h)]\nd = [[x for x in line] for line in zip(*d)]\n\ntotalScore = 0\ntotalCost = 0\n\nfor line in d:\n    max = 0\n    cost = 0\n    cur = 0\n    curCost = 0\n    for c1, c2 in zip(line, [0] * k + line):\n        cur += c1\n        cur -= c2\n        curCost += c2\n        if cur > max:\n            cost = curCost\n            max = cur\n    totalScore += max\n    totalCost += cost\n\nprint(totalScore, totalCost)", "\nn,m,k = [int(i) for i in input().split()]\na = []\n\nfor i in range(n):\n    b = [int(i) for i in input().split()]\n    a.append(b)\n\nb = [0]*m\nfor i in range(k+2): a.append(b)\n\nscore = 0\nrepl = 0\n\nfor j in range(m):\n    cur_sum =  0\n    cur_max = 0\n    cur_best_repl = 0\n    cur_repl = 0\n    \n    for i in range(k): cur_sum += a[i][j]\n\n    for i in range(n):\n        if a[i][j] == 0:\n            cur_sum += a[i+k][j]\n            continue\n        if cur_max < cur_sum:\n            cur_max = cur_sum\n            cur_best_repl = cur_repl\n\n        cur_sum = cur_sum -1 + a[i+k][j]\n        cur_repl += 1\n\n    score += cur_max\n    repl += cur_best_repl\n\nprint(score, repl)\n        \n    \n"]