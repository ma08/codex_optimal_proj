["n = int(input())\na = list(map(int, input().split()))\nmaxi = 0\nans = 0\nfor i in range(n):\n    a[i] -= 1\n    maxi = max(maxi, a[i])\n    if maxi == i:\n        ans += 1\nprint(ans)\n", "n = int(input())\nai = list(map(int,input().split()))\nnum = 0\nans = 0\nfor i in range(n):\n    num = max(num,ai[i] - 1)\n    if num == i:\n        ans += 1\nprint(ans)\n", "import math\n\n\na = int(input())\ns = [int(i) for i in input().split()]\nma = 0\ni = 0\nk = 0\nwhile i < a:\n    ma = max(ma, s[i])\n    while ma > i + 1:\n        i += 1\n        ma = max(ma, s[i])\n    i += 1\n    k += 1\nprint(k)\n", "input()\na = list(map(int, input().split(' ')))\ndays = 0\nresolves = set()\nfor i, b in enumerate(a):\n    if not resolves:\n        days += 1\n    resolves.add(b)\n    if i + 1 in resolves:\n        resolves.remove(i + 1)\nprint(days)\n", "n=int(input())\nl=list(map(int,input().split()))\nans=0\ni=0\nmx=0\nwhile(i<n):\n    mx=max(mx,l[i])\n    if(i==mx-1):\n             ans+=1\n    i+=1\nprint(ans)", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nn = ii()\na = li()\ni = c = 0\nwhile i < n:\n    j = a[i] - 1\n    while i < j:\n        i += 1\n        j = max(j, a[i] - 1)\n    c += 1\n    i += 1\nprint(c)", "n = int(input())\n\nA = input().split()\n\ncurrent_max = 1\ndays = 0\n\nfor i in range(1,n+1):\n\n    current_max=max(current_max,int(A[i-1]))\n    if i == current_max:\n        ##print(i)\n        days += 1\n\nprint(days)\n", "N = int(input())\nA = [int(a)-1 for a in input().split()]\nma = 0\nans = 0\nfor i in range(N):\n    ma = max(ma, A[i])\n    if ma <= i:\n        ans += 1\n        \nprint(ans)\n", "n = int(input())\na = [int(x) for x in input().split()]\n\nto = 0\ncnt = 1\nfor i in range(n):\n    if i > to:\n        cnt += 1\n    to = max(to, a[i]-1)\n    \nprint(cnt)\n", "n=int(input())\narr=list(map(int,input().split()))\nmaxval=arr[0]\nans=0\nfor i in range(n):\n\tmaxval=max(arr[i],maxval)\n\tif(maxval==i+1):\n\t\tans+=1\n\t\tmaxval=0\nprint(ans)\n\n", "num = input()\nmaxi = 0\nX = list(map(int,input().split()))\nans = 0\nfor i in range(int(num)):\n    maxi = max(X[i],maxi)\n    if i+1==maxi:\n        ans +=1\nprint(ans)", "\ndef solve(n, a):\n    max_p = 0\n    ans = 0\n\n    for p, ai in enumerate(a):\n        if ai > max_p:\n            max_p = ai\n        if p == max_p:\n            ans += 1\n    return ans\n\n\n\n\ndef __starting_point():\n    n = int(input())\n    a = [int(p) - 1 for p in input().split()]\n    print(solve(n, a))\n\n__starting_point()", "import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef print(*x, sep=' ', end='\\n'):\n    return sys.stdout.write(sep.join(map(str, x)) + end)\n\n\ndef read():\n    return sys.stdin.read()\n\n\ndef get():\n    return int(input()), [int(i) for i in input().split()]\n\n\ndef out(*arg):\n    if type(arg[0]) == list:\n        for i in arg[0]:\n            print(i)\n    else:\n        print(arg)\n\n\ndef main():\n    n, ls = get()\n    stack = -1\n    ans = 0\n    for i in range(n):\n        stack = max(ls[i], i + 1, stack)\n        if stack == i + 1:\n            ans += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\n\nisdebug = False\ntry :\n    #raise ModuleNotFoundError\n    import pylint\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\n    isdebug = True\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\ndef red_inout():\n    inId = 0\n    outId = 0\n    if not isdebug:\n        inId = 0\n        outId = 0\n    if inId>0:\n        dprint('use input', inId)\n        try:\n            f = open('input'+ str(inId) + '.txt', 'r')\n            sys.stdin = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid input file')\n    if outId>0:\n        dprint('use output', outId)\n        try:\n            f = open('stdout'+ str(outId) + '.txt', 'w')\n            sys.stdout = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid output file')\n            \n        atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n\nif isdebug and len(sys.argv) == 1:\n    red_inout()\n\ndef getIntList():\n    return list(map(int, input().split()))            \n\ndef solve(): \n    pass\n    \nT_ = 1    \n#T_, = getIntList()\n\nfor iii_ in range(T_):\n    #solve()\n    N,  = getIntList()\n    #print(N)\n    za = getIntList()\n    now = 0\n    r = 0\n    for i in range(N):\n        now = max(now,za[i]-1)\n        if now ==i:\n            r+=1\n    print(r)\n", "n = int(input())\na = list(map(int, input().split()))\nunresolved = []\ndays = 0\nfor i in range(n):\n    unresolved.append(a[i])\n    if max(unresolved) > i+1:\n        continue\n    else:\n        days +=1\n        continue\n\nprint(days)", "rs = lambda : int(input())\nri = lambda : list(map(int, input().split()))\nrli = lambda : list(map(int, input().split()))\n\nn = int(input())\na = rli()\n\nmx = 0\nans = 0\nfor i in range(n):\n    mx = max(mx, a[i]-1)\n    if mx == i:\n        ans += 1\n\nprint(ans)\n", "n=int(input())\na=list(map(int, input().split()))\ns=set()\nans=0\nfor i in range(len(a)):\n    s.add(a[i]-1)\n    if i in s:\n        s.remove(i)\n    if len(s)==0:\n        ans+=1\nprint(ans)\n    \n", "# stdin=open('input.txt')\n\n# def input():\n# \treturn stdin.readline()[:-1]\n\n# a, b = map(int, input().split())\n\n# l = list(map(int, input().split()))\n\n\n# CODE BEGINS HERE.................\n\nn = int(input())\na = list(map(int, input().split()))\n\n\nans = 1\nmax_ = 0\nfor i in range(n - 1):\n\tif a[i] > max_:\n\t\tmax_ = a[i]\n\tif max_ <= i + 1:\n\t\tans += 1\n\n\nprint(ans)\n#CODE ENDS HERE....................\n\n\n", "import sys\n\nN=int(input())\na=[0]\na[1:]=list(map(int,sys.stdin.readline().rstrip().split()))\nans=0\nmys=0\nfor i in range(1,N+1):\n    mys=max(mys,a[i])\n    if mys<=i:\n        ans+=1\nprint(ans)\n", "n = int(input().strip())\narr = list(map(lambda x: int(x) - 1, input().strip().split()))\n\nmaximum = 0\nanswer = 0\nfor start, end in enumerate(arr):\n    maximum = max(maximum, end)\n    if maximum == start:\n        answer += 1\n\nprint(answer)", "n = int(input())\nl = list(map(int, input().split()))\nk = 0\np = -1\nfor i in range(n):\n\tp = max(p, l[i])\n\tif p <= i + 1:\n\t\tk += 1\nprint(k) \n", "n = int(input())\nA = list(map(int, input().split()))\nKa = 0\nCnt = 0\nfor i in range(n):\n    Ka = max(Ka, A[i])\n    if Ka <= i + 1:\n        Cnt += 1\nprint(Cnt) ", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\nn=nn()\n\nl=lm()\n\nmaxsofar=0\ndays=1\n\nfor i, num in enumerate(l):\n\tmaxsofar=max(maxsofar, num)\n\t#print(maxsofar)\n\tif maxsofar==i+1 and i<len(l)-1:\n\t\tdays+=1 \n\nprint(days)\n"]