["n, k, m = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort()\ns = sum(l)\n\nans = 0\nfor i in range(n + 1):\n    mi = m - s * i\n    if mi < 0:\n        break\n    cnt = (k + 1) * i\n    for j in range(k):\n        x = min(mi // l[j], n - i)\n        cnt += x\n        mi -= l[j] * x\n    ans = max(ans, cnt)\nprint(ans)\n", "n, k, m = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\np.sort()\nans = 0\nfor i in range(n + 1):\n    l = m\n    for j in range(k):\n        l -= p[j] * i\n    if l < 0:\n        break\n    cr = i * k + i\n    for j in range(k):\n        if l < p[j]:\n            break\n        c = min(l // p[j], n - i)\n        l -= p[j] * c\n        cr += c\n    ans = max(ans, cr)\n        \n\nprint(ans)\n", "n, k, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\ns = sum(a)\nans = 0\nfor i in range(n + 1):\n    t = s * i\n    cur = (k + 1) * i\n    if t > m:\n        break\n    t = m - t\n    for j in range(k):\n        x = min(t // a[j], n - i)\n        t -= (x * a[j])\n        cur += x\n    ans = max(ans, cur)\nprint(ans)\n    \n", "n,k,M = map(int,input().split())\n\nT = sorted(map(int,input().split()))\n\nsT = sum(T)\n\ndef it(p):\n  # p\u30bf\u30b9\u30af\u5b8c\u6210\u3055\u305b\u308b\u30ce\u30ea\n  score = p*(k+1)\n  m = M - p*sT\n\n  if m < 0:\n    return 0\n\n  q = n-p\n\n  for t in T:\n    if m > q*t:\n      m -= q*t\n      score += q\n    else:\n      score += m//t\n      break\n  return score\n\nprint(max(it(i) for i in range(n+1)))", "n, k, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\na.sort()\nans = 0\nsm = sum(a)\nans = 0\nfor i in range(min(n, m // sm) + 1):\n    ansn = (k + 1) * i\n    tm = m - i * sm\n    for j in range(k):\n        q = min(n - i, max(0, tm // a[j]))\n        ansn += q\n        tm -= q * a[j]\n    ans = max(ansn, ans)\nprint(ans)", "\ndef solve(n, k, M, t):\n    '''\n    >>> solve(3, 4, 11, [1, 2, 3, 4])\n    6\n    >>> solve(5, 5, 10, [1, 2, 4, 8, 16])\n    7\n    >>> solve(3, 2, 4, [1, 1])\n    6\n    >>> solve(5, 2, 10, [2, 3])\n    6\n    '''\n    t.sort()\n    k = len(t)\n\n    T = sum(t)\n\n    max_score = 0\n\n    for fully_solved in range(min(n, M // T) + 1):\n        # Try to fully solve fully_solved problems, remainder is for remaining subproblems\n        score_1 = fully_solved * (k + 1) # For fully solved\n\n        score_2 = 0 # For partially solved\n        remaining_time = M - T * fully_solved\n        remaining_problems = n - fully_solved\n\n        if remaining_problems > 0:\n            level = 0\n            while level < k:\n                # remaining_time > 0 and level < k:\n                level_coeff = 1 if level + 1 < k else 2 # last_level\n                time_to_solve_level = t[level] * remaining_problems\n                if time_to_solve_level <= remaining_time:\n                    score_2 += remaining_problems * level_coeff\n                    remaining_time -= time_to_solve_level\n                else:\n                    score_2 += (remaining_time // t[level]) * level_coeff\n                    break\n                level += 1\n        score = score_1 + score_2\n        max_score = max(score, max_score)\n\n    return max_score\n\n\n\ndef main():\n    n, k, M = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    print(solve(n, k, M, t))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "\n\ndef find_max(n, k, m, ts):\n    out = 0\n\n    ts.sort()\n\n    for i in range(n+1): # first i tasks solved completely\n        cur = 0\n\n        time = sum(ts) * i\n        if time > m:\n            break\n        else:\n            cur += (k + 1) * i\n\n        time_left = m - time\n        cur_subtask = 0\n        while time_left > 0 and cur_subtask < k:\n            solved = min(n - i, time_left // ts[cur_subtask])\n\n            if solved == 0:\n                break\n\n            time_left -= solved * ts[cur_subtask]\n            cur += solved\n            cur_subtask += 1\n\n        out = max(out, cur)\n\n    return out\n\n\ndef main():\n    n, k, m = (int(x) for x in input().split())\n    ts = [int(x) for x in input().split()]\n\n    print(find_max(n, k, m, ts))\n\n\ndef __starting_point():\n    main()\n\n\n\n__starting_point()", "n, k, M = map(int, input().split())\nt = list(map(int, input().split()))\nt.sort()\nS = sum(t[j] for j in range(k))\nans = 0\nfor i in range(n + 1):\n    if i * S > M:\n        break\n    else:\n        p = (k + 1) * i\n        R = M - i * S\n        for j in range(k):\n            if R < t[j]:\n                break\n            else:\n                q = min(n - i, R // t[j])\n                R -= q * t[j]\n                p += q\n        ans = max(ans, p)\nprint(ans)", "n, k, M = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\n\ndef calc(x):\n    tot = x * sum(t)\n    if tot > M:\n        return 0\n    tans = x * (k + 1)\n    for i in range(k - 1):\n        if t[i] * (n - x) + tot <= M:\n            tot += t[i] * (n - x)\n            tans += n - x\n        else:\n            tans += (M - tot) // t[i]\n            break\n    return tans\n\nprint(max([calc(x) for x in range(n + 1)]))\n", "n, k, M = map(int, input().split())\nt = sorted(list(map(int, input().split())))\npt = t[:]\nfor i in range(1, k):\n  pt[i] += pt[i - 1]\nans, r = 0, k - 1\nfor i in range(0, n + 1):\n  if pt[-1] * i > M:\n    break\n  m = M - pt[-1] * i\n  while r != -1 and pt[r] * (n - i) > m:\n    r -= 1\n  m -= (0 if r == -1 else pt[r] * (n - i))\n  ans = max(ans, i * (k + 1) + (r + 1) * (n - i)  + (m // t[r + 1] if r < k - 1 else 0))\nprint(ans)", "def zhadnik(n, k, M, t):\n    ans = 0\n    i = 0\n    while i < k and M >= t[i]:\n        temp = M // t[i]\n        if temp <= n:\n            ans += temp\n            M -= temp * t[i]\n        else:\n            ans += n\n            M -= n * t[i]\n        \n        i += 1\n    return ans\n\nn, k, M = map(int, input().split()) # n, k <= 45\nt = list(map(int, input().split()))\nt.sort()\n\nall_task_time = sum(t) # \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 (\u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447)\n\n# \u0435\u0441\u043b\u0438 \u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u0435\u043c\u0438\u0438 \u0437\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 - \u0442\u043e\u0433\u0434\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0430\u0434\u043d\u0438\u043a\nans = zhadnik(n, k, M, t)\n\n# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430 \u0441\u0447\u0435\u0442 \u043f\u0440\u0435\u043c\u0438\u0438 \u0437\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 l \u043f\u043e\u043b\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447:\nl = 1\n\nwhile l <= n and M - all_task_time * l >= 0:\n    res = l * (k + 1) + zhadnik(n - l, k, M - all_task_time * l, t)\n    if res > ans:\n        ans = res\n    l += 1\n\nprint(ans)", "n, k, m = [int(i) for i in input().split()]\nt = sorted([int(i) for i in input().split()])\nst = sum(t)\n\nbest = -1\n\n# try all values for solved tasks\nfor s in range(min(n, m//st)+1):\n  score = s*(k+1)\n  rm = m - s*st\n  for j in range(k):\n    q = min(n-s, rm//t[j])\n    rm -= q*t[j]\n    score += q\n  best = max(best, score)\n  \nprint(best)", "from itertools import accumulate\nfrom bisect import *\nn, k, m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\n\nres = 0\ns = sum(t)\nps = list(accumulate(t))\nfor x in range(min(n, m//s)+1):\n    rem = m - x*s\n    if x < n:\n        y = bisect_right(ps, rem/(n-x))\n        rem -= (n-x)*(ps[y-1] if y>0 else 0)\n        if y < k:\n            z = rem // t[y]\n        else:\n            z = 0\n    else:\n        y = z = 0\n    r = x*(k+1) + y*(n-x) + z + ((n-x) if y==k else 0) + (z if y == k-1 else 0)\n    res = max(res, r)\nprint(res)", "from itertools import accumulate\nfrom bisect import *\nn, k, m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\n\nres = 0\nfor x in range(min(n, m//sum(t))+1):\n    mm = m-x*sum(t); r = x*(k+1)\n    for i, ti in enumerate(t):\n        for _ in range(n-x):\n            if mm>=ti:\n                mm -= ti\n                r += 1 if i < k-1 else 2\n    res = max(res, r)\nprint(res)", "n, k, m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\n\nres = 0\nfor x in range(min(n, m//sum(t))+1):\n    mm = m-x*sum(t); r = x*(k+1)\n    for i, ti in enumerate(t):\n        div = min(mm//ti, n-x)\n        mm -= div*ti\n        r += div if i < k-1 else div*2\n    res = max(res, r)\nprint(res)", "def list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return list(map(int,input().split()))\ndef map_string():\n    return input().split()\n    \nn,k,m = map_input()\na = list_input()\na.sort()\nsm = sum(a)\nans = 0\nfor i in range(n+1):\n  if sm*i > m:\n    break\n  m1 = m-sm*i\n  cnt = [n-i]*(k)\n  cur = 0\n  res = (k+1)*i\n  while m1 > 0:\n    if cur >= k or a[cur] > m1: break\n    x = min(m1//a[cur],cnt[cur])\n    res += x\n    m1 -= x*a[cur]\n    cur += 1\n  ans = max(res,ans)\nprint(ans)  \n    \n\n", "# import sys\n# sys.stdin = open('in', 'r')\n\nn, k, m = list(map(int, input().split()))\ntt = list(map(int, input().split()))\ntt.sort()\n\ns = sum(tt)\nans = 0\n\n\ndef check(x, m):\n    ret = (k+1) * x\n    m -= s * x\n    if m < 0:\n        return -1\n\n    for i in range(k):\n        if tt[i]*(n-x) <= m:\n            m -= tt[i]*(n-x)\n            ret += (n-x)\n        else:\n            ret += m//tt[i]\n            m -= (m//tt[i])*tt[i]\n        if m <= 0:\n            break\n    return ret\n\n\nfor i in range(n+1):\n    ans = max(ans, check(i, m))\nprint(ans)\n", "from functools import reduce\nn,k,m = list(map(int, input().split()))\nt = list(map(int, input().split()))\nt.sort()\nsum = reduce(lambda x,y: x+y, t)\nmx = 0\nfull = 0\nwhile full <= n and full*sum <= m:\n\tcnt = full*k + full\n\tfree_time = m - sum*full\n\tfor time in t:\n\t\ttasks = min(n - full, free_time // time) \n\t\tcnt += tasks\n\t\tfree_time -= tasks*time\n\tmx = max(mx, cnt)\n\tfull += 1\nprint(mx)\t\n\n\n\n\n\n\n\n\n\n\n", "n, k, m = list(map(int, input().split()))\n\nnums = list(map(int, input().split()))\n\nresult = -1\n\nalltime = sum(nums)\n\nfor made in range(n + 1):\n    if(alltime * made > m):\n        break\n    currentres = (k + 1) * made\n    currenttime = m - made * alltime\n    available = []\n    for item in nums:\n        available.extend([item]*(n - made))\n    available = sorted(available)\n    for item in available:\n        if(currenttime < item):\n            break\n        currenttime -= item\n        currentres += 1\n    result = max(result, currentres)\n\nprint(result)\n", "n,k,m = list(map(int,input().split()))\nt = list(map(int,input().split()))\nt.sort()\ns = sum(t)\nmmm = 0\nfor i in range(n+1):\n    if i*s > m : break\n    tm = m-i*s\n    c = k*i+i\n    for j in range(k):\n        c+=min(tm//t[j],n-i)\n        tm-=min(tm//t[j],n-i)*t[j]\n    mmm = max(mmm,c)\nprint(mmm)", "n,k,m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\nst = sum(t)\nres = 0\nfor x in range(min(m//st, n)+1):\n    rem = m-x*st\n    r = x*(k+1)\n    # for i in range(k):\n        # y = min(rem//t[i], n-x)\n        # rem -= t[i]*y\n        # m += y\n    for i in range(k):\n        for _ in range(n-x):\n            if rem >= t[i]:\n                rem -= t[i]\n                r += 1\n    res = max(res, r)\nprint(res)", "n,k,m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\nst = sum(t)\nres = 0\nfor x in range(min(m//st, n)+1):\n    rem = m-x*st\n    r = x*(k+1)\n    for i in range(k):\n        y = min(rem//t[i], n-x)\n        rem -= t[i]*y\n        r += y\n    res = max(res, r)\nprint(res)", "ins = lambda : list(map(int, input().split()))\nn, k, m = ins()\nc = list(ins())\nc.sort()\ns = sum(c)\nans = 0\nfor i in range(min(n, m//s)+1):\n    t, a = m-s*i, i*k+i\n    for j in range(k):\n        for l in range(n-i):\n            if t-c[j] < 0:\n                break\n            t -= c[j]\n            a += 1\n        if t-c[j] < 0:\n            break\n    ans = max(ans, a)\nprint(ans)\n", "n, k, m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\nres = 0\nfor x in range(min(m//sum(t),n)+1):\n    rem = m - x*sum(t)\n    r = x*(k+1)\n    for i in range(k):\n        div = min(rem//t[i], n-x) \n        rem -= div*t[i]\n        r += div\n    res = max(res, r)\nprint(res)", "n, k, m = list(map(int, input().split()))\nt = sorted(map(int, input().split()))\nst = sum(t)\nres = 0\nfor x in range(min(m//st,n)+1):\n    rem = m - x*st\n    r = x*(k+1)\n    for i in range(k):\n        div = min(rem//t[i], n-x) \n        rem -= div*t[i]\n        r += div\n    res = max(res, r)\nprint(res)"]