["x0, y0, A, C, B, D = list(map(int, input().split()))\n\npts = [[x0, y0]]\nfor i in range(100):\n\tnx, ny = [pts[-1][0] * A + B, pts[-1][1] * C + D]\n\tpts.append([nx, ny])\n\tif max(nx, ny) > 10000000000000000 * 10000000000000000: break\n\n\nx, y, t = list(map(int, input().split()))\n# print (pts[0])\n# print (pts[1])\n# print (pts[2])\n# print (pts[3])\n_max = 0\nfor i in range(len(pts)):\n\tfor j in range(len(pts)):\n\t\tif abs(pts[i][0] - pts[j][0]) + abs(pts[i][1] - pts[j][1]) + abs(x - pts[i][0]) + abs(y - pts[i][1]) <= t:\n\t\t\t_max = max(_max, abs(i - j) + 1)\nprint(_max)\n", "import sys\nreadline = sys.stdin.readline\n\ndef mhd(A, B):\n    return abs(A[0]-B[0]) + abs(A[1]-B[1])\n\nx0, y0, ax, ay, bx, by = map(int, readline().split())\nxs, ys, T = map(int, readline().split())\n\nPoints = [(x0, y0)]\n\nfor _ in range(100):\n    xp, yp = Points[-1]\n    Points.append((xp*ax+bx, yp*ay+by))\n\nans = 0\npre = (xs, ys)\nfor st in range(100):            \n    L = mhd(pre, Points[st])\n    if L > T:\n        continue\n    res = 1\n    for j in range(st+1, 100):\n        L += mhd(Points[j-1], Points[j])\n        if L > T:\n            break\n        res += 1\n    ans = max(ans, res)\n    res = 1\n    L = mhd(pre, Points[st])\n    for j in range(st-1, -1, -1):\n        L += mhd(Points[j+1], Points[j])\n        if L > T:\n            break\n        res += 1\n    ans = max(ans, res)\nprint(ans)", "x0, y0, ax, ay, bx, by = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\n\nx = [x0]\ny = [y0]\n\nwhile x[-1] < 1e20:\n    x.append(x[-1] * ax + bx)\n    \nwhile y[-1] < 1e20:\n    y.append(y[-1] * ay + by)\n\n\nn = min(len(x), len(y))\n\ndef dist(x0, y0, x1, y1):\n    return abs(x0-x1) + abs(y0-y1)\n\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        d = min(dist(xs, ys, x[i], y[i]), dist(xs, ys, x[j], y[j])) + dist(x[i], y[i], x[j], y[j])\n        if d <= t:\n            ans = max(ans, j - i + 1)\n\nprint(ans)\n    \n", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nx0, y0, ax, ay, bx, by = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\n\np = [(x0, y0)]\nd = [0]\nm = 100\nfor i in range(m):\n    x,y = p[-1]\n    nx = ax*x + bx\n    ny = ay*y + by\n    nd = abs(nx-x) + abs(ny-y)\n    d.append(d[-1]+nd)\n    p.append((nx, ny))\n\nans = 0\nfor i in range(m):\n    x,y = p[i]\n    init_d = abs(x-xs) + abs(y-ys)\n    if init_d > t:\n        continue\n    tmp = 1\n    rem = t-init_d\n    left = -1\n    right = i\n    while right-left > 1:\n        mid = (right+left)//2\n        if d[i]-d[mid] <= rem:\n            right = mid\n        else:\n            left = mid\n    tmp += i-right\n    ans = max(ans, tmp)\n    tmp = 1\n    left = i\n    right = m\n    while right-left > 1:\n        mid = (right+left)//2\n        if d[mid]-d[i] <= rem:\n            left = mid\n        else:\n            right = mid\n    tmp += left - i\n    ans = max(ans, tmp)\nprint(ans)\n\n", "x0,y0,ax,ay,bx,by = map(int,input().split())\nxs,ys,t = map(int,input().split())\ndn = [[x0,y0]]\nwhile dn[-1][0] <= 1e20 and dn[-1][1] <= 1e20:\n\tdn.append([dn[-1][0]*ax+bx,dn[-1][1]*ay+by])\nfor i in range(len(dn)):\n\tdn[i][0] -= xs\n\tdn[i][1] -= ys\nans = 0\nfor i in range(len(dn)):\n\tfor j in range(len(dn)):\n\t\tgg = abs(dn[i][0])+abs(dn[i][1])+abs(dn[j][0]-dn[i][0])+abs(dn[j][1]-dn[i][1])\n\t\tif gg <= t:\n\t\t\tans = max(ans,abs(j-i)+1)\nprint(ans)", "def dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n    \nx0, y0, a1, a2, b1, b2 = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\narr = []\narr.append((x0, y0))\nnow1 = x0\nnow2 = y0\nwhile (1):\n    now1 = a1 * now1 + b1\n    now2 = a2 * now2 + b2\n    if (now1 < xs or now2 < ys):\n        arr.append((now1, now2))\n        continue\n    #print(now1, now2)\n    arr.append((now1, now2))\n    if (dist(now1, now2, xs, ys) > t):\n        break\nans = 0\nN = len(arr)\nfor i in range(N):\n    need = dist(arr[i][0], arr[i][1], xs, ys)\n    if (need > t):\n        continue\n    left = t - need\n    now = 1\n    flag = 1\n    now1 = arr[i][0]\n    now2 = arr[i][1]\n    for j in range(i - 1, -1, -1):\n        d = dist(now1, now2, arr[j][0], arr[j][1])\n        if (d > left):\n            flag = 0\n            break\n        left -= d\n        now1 = arr[j][0]\n        now2 = arr[j][1]\n        now += 1\n    if (not flag):\n        ans = max(ans, now)\n        continue\n    for j in range(i + 1, N):\n        d = dist(now1, now2, arr[j][0], arr[j][1])\n        if (d > left):\n            break\n        left -= d\n        now1 = arr[j][0]\n        now2 = arr[j][1]\n        now += 1\n    ans = max(ans, now)\nprint(ans)\n", "x0, y0, ax, ay, bx, by = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\nx = [x0]\ny = [y0]\nwhile x[-1] < xs or y[-1] < ys or abs(x[-1] - xs) + abs(y[-1] - ys) <= 2*t:\n    x.append(x[-1] * ax + bx)\n    y.append(y[-1] * ay + by)\nx.append(x[-1] * ax + bx)\ny.append(y[-1] * ay + by)\nans = 0\nfor i in range(len(x)):\n    cur_t = 0\n    cnt = 0\n    cur_x = xs\n    cur_y = ys\n    for j in range(i, -1, -1):\n        if cur_t + abs(cur_x - x[j]) + abs(cur_y - y[j]) <= t:\n            cnt += 1\n            cur_t += abs(cur_x - x[j]) + abs(cur_y - y[j])\n            cur_x = x[j]\n            cur_y = y[j]\n    for j in range(i + 1, len(x)):\n        if cur_t + abs(cur_x - x[j]) + abs(cur_y - y[j]) <= t:\n            cnt += 1\n            cur_t += abs(cur_x - x[j]) + abs(cur_y - y[j])\n            cur_x = x[j]\n            cur_y = y[j]\n    ans = max(cnt, ans)\nprint(ans)\n", "x0, y0, ax, ay, bx, by = map(int, input().split())\n\nx, y, t = map(int, input().split())\n\ns = [x, y]\n\na = []\n\ncnt = 70\n\nfor i in range(cnt):\n\ta.append([x0, y0])\n\tx0 = ax * x0 + bx\n\ty0 = ay * y0 + by\n\nans = 0\n\ndef dist(a1, b):\n\treturn abs(a1[0] - b[0]) + abs(a1[1] - b[1])\n\nfor i in range(cnt):\n\tfor j in range(i + 1):\n\t\tfor k in range(i, cnt):\n\t\t\tif dist(s, a[i]) + dist(a[i], a[j]) + dist(a[j], a[k]) <= t:\n\t\t\t\tans = max(ans, k - j + 1)\n\t\t\tif dist(s, a[i]) + dist(a[i], a[k]) + dist(a[k], a[j]) <= t:\n\t\t\t\tans = max(ans, k - j + 1)\n\nprint(ans)", "x0, y0, ax, ay, bx, by = map(int, input().split())\nsx, sy, t = map(int, input().split())\na = [(x0, y0)]\nwhile a[-1][0] < 10 ** 18 and a[-1][1] < 10 ** 18:\n    a.append((a[-1][0] * ax + bx, a[-1][1] * ay + by))\nmx = 0\nfor l in range(len(a)):\n    for r in range(l, len(a)):\n        if abs(a[l][0] - a[r][0]) + abs(a[l][1] - a[r][1]) + min(abs(a[l][0] - sx) + abs(a[l][1] - sy),\n                                                                 abs(a[r][0] - sx) + abs(a[r][1] - sy)) <= t:\n            mx = max(mx, r - l + 1)\nprint(mx)", "import sys\nlines = sys.stdin.readlines()\n\nx0,y0,ax,ay,bx,by = list(map(int, lines[0].split()))\nxs,ys,t = list(map(int, lines[1].split()))\n\nx = [x0]\ny = [y0]\nfor n in range(100):\n\tx.append(ax*x[-1]+bx)\n\ty.append(ay*y[-1]+by)\n\nbest = 0\n\nfor i in range(100):\n\tfor j in range(100):\n\t\td = abs(xs-x[j])+abs(ys-y[j])+abs(x[j]-x[i])+abs(y[j]-y[i])\n\t\tif d <= t and j-i+1 > best:\n\t\t\tbest = abs(j-i)+1\n\tfor j in range(i+1,100):\n\t\td = abs(xs-x[i])+abs(ys-y[i])+abs(x[i]-x[0])+abs(y[i]-y[0])+abs(x[j]-x[0])+abs(y[j]-y[0])\n\t\tif d <= t and j+1 > best:\n\t\t\tbest = j+1\n\t\nprint(best)\n", "x0, y0, ax, ay, bx, by = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\n\npoints = [(x0, y0)]\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\nwhile len(points) < 100:\n    points.append((points[-1][0] * ax + bx, points[-1][1] * ay + by))\n\nwhile len(points) > 0 and  dist(points[-1], (xs, ys)) > t:\n    points.pop()\n\nans = 0\nfor beg in range(len(points)):\n    for left in range(beg + 1):\n        for right in range(beg, len(points)):\n            to_beg = dist((xs, ys), points[beg])\n            min_side = min(dist(points[beg], points[left]), dist(points[beg], points[right]))\n            seg_length = dist(points[left], points[right])\n            if to_beg + min_side + seg_length <= t:\n                ans = max(ans, right - left + 1)\nprint(ans)\n\n\n", "x0, y0, ax, ay, bx, by = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\n\ndef gc(m):\n    x = x0 * ax ** m + (ax ** m - 1) * bx // (ax - 1)\n    y = y0 * ay ** m + (ay ** m - 1) * by // (ay - 1)\n    return x, y\n\ncoord = []\nfor i in range(100):\n    coord.append(gc(i))\n    if coord[-1][0] > 10**18 or coord[-1][1] > 10**18:\n        break\n\n\ndef dist(a, b, c, d):\n    return abs(a - c) + abs(b - d)\nbans = 0\nfor i in range(len(coord)):\n    px = xs\n    py = ys\n    timer = 0\n    j = i\n    ans = 0\n    while dist(px, py, coord[j][0], coord[j][1]) + timer <= t:\n        timer += dist(px, py, coord[j][0], coord[j][1])\n        ans += 1\n        px, py = coord[j][0], coord[j][1]\n        j += 1\n    bans = max(bans, ans)\ncoord = coord[::-1]\nfor i in range(len(coord)):\n    px = xs\n    py = ys\n    timer = 0\n    j = i\n    ans = 0\n    while j < len(coord) and dist(px, py, coord[j][0], coord[j][1]) + timer <= t:\n        timer += dist(px, py, coord[j][0], coord[j][1])\n        ans += 1\n        px, py = coord[j][0], coord[j][1]\n        j += 1\n    bans = max(bans, ans)\nprint(bans)\n", "def dist(a, b):\n\treturn abs(a[0] - b[0]) + abs(a[1] - b[1])\nx0, y0, ax, ay, bx, by = [int(i) for i in input().split()]\nxs, ys, t = [int(i) for i in input().split()]\na = [[x0, y0]]\nfor i in range(64):\n\ta.append([a[-1][0] * ax + bx, a[-1][1] * ay + by])\nans = 0\nfor l in range(len(a)):\n\tfor r in range(len(a)):\n\t\tif dist([xs, ys], a[l]) + dist(a[l], a[r]) <= t:\n\t\t\tans = max(ans, abs(r - l) + 1)\nprint(ans)", "x0, y0, ax, ay, bx, by = map(int, input().split())\nxs, ys, t = map(int, input().split())\nX = [(x0, y0)]\nfor i in range(100):\n    x, y = X[-1]\n    x, y = ax * x + bx, ay * y + by\n    if x > 10**18 or y >= 10**18: break\n    X.append((x, y))\n\ndef calc(l, r):\n    if r >= len(X): return 0\n    m = min(abs(xs - X[l][0]) + abs(ys - X[l][1]), abs(xs - X[r][0]) + abs(ys - X[r][1]))\n    if m + sum([X[i+1][0] - X[i][0] + X[i+1][1] - X[i][1] for i in range(l, r)]) > t: return 0\n    return r-l+1\n\nma = 0\nfor l in range(100):\n    for r in range(l, 100):\n        ma = max(ma, calc(l, r))\nprint(ma)", "\ndef __starting_point():\n\tx0, y0, ax, ay, bx, by = input().split()\n\tx0 = int(x0)\n\ty0 = int(y0)\n\tax = int(ax)\n\tay = int(ay)\n\tbx = int(bx)\n\tby = int(by)\n\ta = [(x0, y0)]\n\tn = 100\n\tx = x0\n\ty = y0\n\tfor i in range(1, n):\n\t\tx = ax * x + bx\n\t\ty = ay * y + by\n\t\ta.append((x, y))\n\txs, ys, t = input().split()\n\txs = int(xs)\n\tys = int(ys)\n\tt = int(t)\n\tans = 0\n\tfor i in range(n):\n\t\tif abs(xs - a[i][0]) + abs(ys - a[i][1]) > t:\n\t\t\tcontinue\n\t\tcur = 1\n\t\tT = t\n\t\tT -= abs(xs - a[i][0]) + abs(ys - a[i][1])\n\t\tfor j in range(i+1, n):\n\t\t\tif abs(a[j][0] - a[j-1][0]) + abs(a[j][1] - a[j-1][1]) > T:\n\t\t\t\tbreak\n\t\t\tcur += 1\n\t\t\tT -= abs(a[j][0] - a[j-1][0]) + abs(a[j][1] - a[j-1][1])\n\t\tans = max(ans, cur)\n\t\tcur = 1\n\t\tT = t\n\t\tT -= abs(xs - a[i][0]) + abs(ys - a[i][1])\n\t\tfor j in range(i-1, -1, -1):\n\t\t\tif abs(a[j][0] - a[j+1][0]) + abs(a[j][1] - a[j+1][1]) > T:\n\t\t\t\tbreak\n\t\t\tcur += 1\n\t\t\tT -= abs(a[j][0] - a[j+1][0]) + abs(a[j][1] - a[j+1][1])\n\t\tans = max(ans, cur)\n\tprint(ans)\n\n__starting_point()", "import math\n\nx0,y0,ax,ay,bx,by = map(int,input().split())\nxs,ys,t0 = map(int,input().split())\n\nlix = [x0]\nliy = [y0]\n\nfor i in range(70):\n\tlix.append(lix[-1]*ax+bx)\n\tliy.append(liy[-1]*ay+by)\n\ndef mann(x1,y1,x2,y2):\n\treturn abs(x1-x2)+abs(y1-y2)\n\nans = 0\nfor i in range(71):\n\ttot = 0\n\tcount = 0\n\tpx,py = xs,ys\n\tfor j in range(i,71):\n\t\tdist = mann(px,py,lix[j],liy[j])\n\t\tif(tot+dist>t0) :\n\t\t\tbreak\n\t\tcount += 1\n\t\ttot += dist\n\t\tpx,py = lix[j],liy[j]\n\tans = max(ans, count)\n\nfor i in range(71):\n\ttot = 0\n\tcount = 0\n\tpx,py = xs,ys\n\tfor j in range(i,-1,-1):\n\t\tdist = mann(px,py,lix[j],liy[j])\n\t\tif(tot+dist>t0) :\n\t\t\tbreak\n\t\tcount += 1\n\t\ttot += dist\n\t\tpx,py = lix[j],liy[j]\n\tans = max(ans, count)\nprint(ans)"]