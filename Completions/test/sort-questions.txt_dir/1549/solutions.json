["from bisect import bisect_left as bl\nimport sys\n\nN, M, Q = map(int, sys.stdin.readline().split())\ncount = [0] * (M + 1)\nA = []\nfor a in sys.stdin.readline().split():\n    a = int(a)\n    A.append(count[a] * M + a)\n    count[a] += 1\nA.sort()\nA = [a - i for i, a in enumerate(A, 1)]\nfor _ in range(Q):\n    q = int(sys.stdin.readline()) - N\n    if q > A[-1]:\n        q += N\n    else:\n        q += bl(A, q)\n    sys.stdout.write(f'{(q - 1) % M + 1}\\n')", "from bisect import bisect_left as bl\nimport sys\n\nN, M, Q = list(map(int, sys.stdin.readline().split()))\ncount = [0] * (M + 1)\nT = tuple(map(int, sys.stdin.readline().split()))\nA = []\nfor t in T:\n    A.append(count[t] * M + t)\n    count[t] += 1\nA.sort()\nA = [a - i for i, a in enumerate(A, 1)]\nfor _ in range(Q):\n    q = int(sys.stdin.readline()) - N\n    if q > A[-1]:\n        q += N\n    else:\n        q += bl(A, q)\n    sys.stdout.write(f'{(q - 1) % M + 1}\\n')        #----------------------------------------------        \n", "from bisect import bisect_left as bl\nimport sys\n\nN, M, Q = map(int, sys.stdin.readline().split())\ncount = [0] * (M + 1)\nT = tuple(map(int, sys.stdin.readline().split()))\nA = []\nfor t in T:\n    A.append(count[t] * M + t)\n    count[t] += 1\nA.sort()\nA = [a - i for i, a in enumerate(A, 1)]\nfor _ in range(Q):\n    q = int(sys.stdin.readline()) - N\n    q += bl(A, q)\n    sys.stdout.write(f'{(q - 1) % M + 1}\\n')"]