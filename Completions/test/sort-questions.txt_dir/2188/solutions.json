["\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\nmii=lambda:list(map(int,input().split()))\n\nn=int(input())\n\nl1=[]\nl2=[]\n\nfor i in range(n):\n    a,b=mii()\n    if a<b:\n        l1.append((-a,b,i))\n    else:\n        l2.append((a,b,i))\n\nif len(l1)>len(l2):\n    l1.sort()\n    print(len(l1))\n    print(\" \".join([str(x[2]+1) for x in l1]))\nelse:\n    l2.sort()\n    print(len(l2))\n    print(\" \".join([str(x[2]+1) for x in l2]))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\n\n\ndef main():\n    n = I()\n    aa = [LI() for _ in range(n)]\n    a = []\n    b = []\n    for i in range(1,n+1):\n        c,d = aa[i-1]\n        if c < d:\n            a.append((c,i))\n        else:\n            b.append((c,i))\n\n    if len(a) >= len(b):\n        a.sort(key=lambda x: -x[0])\n        r = a\n    else:\n        b.sort(key=lambda x: x[0])\n        r = b\n\n    return '{}\\n{}'.format(len(r),' '.join(map(lambda x: str(x[1]), r)))\n\n\nprint(main())\n\n", "def solve():\n    N = int(input())\n    \n    incr = []\n    decr = []\n    \n    for i in range(1,N+1):\n        a, b = map(int, input().split())\n        \n        if a > b:\n            decr.append((a,b,i))\n        else:\n            incr.append((a,b,i))\n            \n    result1 = []\n    result2 = []\n\n    if decr:\n        decr.sort(key = lambda x:x[1])\n        \n        result1.append(decr[0])\n        \n        for i in range(1, len(decr)):\n            a, b, idx = decr[i]\n            if a > result1[i-1][1]:\n                result1.append((a,b,idx))\n    \n    if incr:\n        incr.sort(key = lambda x:x[1])\n        incr.reverse()\n\n        result2.append(incr[0])\n        \n        for i in range(1, len(incr)):\n            a, b, idx = incr[i]\n            if a < result2[i-1][1]:\n                result2.append((a,b,idx))\n\n    if len(result1) > len(result2):\n        print (len(result1))\n        print (' '.join(str(k[2]) for k in result1))\n    else:\n        print (len(result2))\n        print (' '.join(str(k[2]) for k in result2))\n    \ndef __starting_point():  \n    solve()    \n__starting_point()", "import sys\nfrom bisect import bisect_left\n# gcd\n# from fractions import gcd\n# from math import ceil, floor\n# from copy import deepcopy\n# from itertools import accumulate\n# l = ['a', 'b', 'b', 'c', 'b', 'a', 'c', 'c', 'b', 'c', 'b', 'a']\n# print(S.most_common(2))  # [('b', 5), ('c', 4)]\n# print(S.keys())  # dict_keys(['a', 'b', 'c'])\n# print(S.values())  # dict_values([3, 5, 4])\n# print(S.items())  # dict_items([('a', 3), ('b', 5), ('c', 4)])\n# from collections import Counter\n# import math\n# from functools import reduce\n#\n# fin = open('in_1.txt', 'r')\n# sys.stdin = fin\ninput = sys.stdin.readline\ndef ii(): return int(input())\ndef mi(): return map(int, input().rstrip().split())\ndef lmi(): return list(map(int, input().rstrip().split()))\ndef li(): return list(input().rstrip())\n# template\n\n\ndef __starting_point():\n\n    # write code\n    n = ii()\n    cnta = 0\n    cntb = 0\n    lista = []\n    listb = []\n    for i in range(n):\n        a, b = mi()\n        if a > b:\n            cntb += 1\n            listb.append((a,b,i+1))\n        else:\n            cnta += 1\n            lista.append((a,b,i+1))\n    if cnta >= cntb:\n        lista.sort(key=lambda x: x[0],reverse=True)\n        print(len(lista))\n        for i in lista:\n            print(i[2], end=\" \")\n        print()\n    else:\n        listb.sort(key=lambda x: x[1])\n        print(len(listb))\n        for i in listb:\n            print(i[2], end=\" \")\n        print()\n__starting_point()", "import sys\ninput = sys.stdin.readline\nN = int(input())\nX = []\nY = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    if a < b:\n        X.append((a, b, i+1))\n    else:\n        Y.append((a, b, i+1))\n\nif len(Y) > len(X):\n    X = sorted(Y, key = lambda x: x[0])\nelse:\n    X = sorted(X, key = lambda x: -x[0])\n\nprint(len(X))\nprint(*[x[2] for x in X])", "n = int(input())\n\nv = []\nu = []\nfor i in range(n):\n\tx = input().split(' ')\n\ta = int(x[0])\n\tb = int(x[1])\n\tif a > b:\n\t\tv.append((a,b,i + 1))\n\telse:\n\t\tu.append((a,b,i+1))\n\n'''nr = 1\nsol = [str(v[0][2])]\nact = v[0][1]\ni = 1\nn = len(v)\nwhile i < n:\n\twhile i < n and v[i][0] < act:\n\t\ti += 1\n\tif i < n:\n\t\tnr += 1\n\t\tsol.append(str(v[i][2]))\n\t\tact = v[i][1]\n\t\ti += 1\n\nu = sorted(uv, key = lambda x:x[1])\nnr2 = 1\nsol2 = [str(u[0][2])]\nact = u[0][1]\ni = 1\nn = len(u)\nwhile i < n:\n\twhile i < n and u[i][0] < act:\n\t\ti += 1\n\tif i < n:\n\t\tnr2 += 1\n\t\tsol2.append(str(u[i][2]))\n\t\tact = u[i][1]\n\t\ti += 1'''\nif len(u) > len(v):\n\tu = sorted(u, key = lambda x:x[1], reverse = True)\n\tprint(len(u))\n\tsol = []\n\tfor i in range(len(u)):\n\t\tsol.append(str(u[i][2]))\n\tprint(' '.join(sol))\nelse:\n\tv = sorted(v, key = lambda x:x[1], reverse = False)\n\tprint(len(v))\n\tsol = []\n\tfor i in range(len(v)):\n\t\tsol.append(str(v[i][2]))\n\tprint(' '.join(sol))\n\n", "n=int(input())\nl1=[]\nl2=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    if a<b:\n        l1.append((a,b,i+1))\n    else :\n        l2.append((b,a,i+1))\nl1.sort()\nl1=l1[::-1]\nl2.sort()\nif len(l1)>=len(l2):\n    print(len(l1))\n    for item in l1:\n        print(item[2],end=\" \")\nelse :\n    print(len(l2))\n    for item in l2:\n        print(item[2],end=\" \")", "n = int(input())\nsmall = []\nlarge = []\nidx = {}\nfor i in range(1, n+1):\n    tup = input().split()\n    tup[0] = int(tup[0])\n    tup[1] = int(tup[1])\n    tup = tuple(tup)\n    idx[tup] = i\n    if tup[0] > tup[1]:\n        large.append(tup)\n    else:\n        small.append(tup)\nsmall_best = False\nif len(small) > len(large):\n    small_best = True\n    small.sort(reverse=True)\nelse:\n    large.sort()\nif small_best == True:\n    print(len(small))\n    for tup in small:\n        print(idx[tup], end = \" \")\n    print()\nelse:\n    print(len(large))\n    for tup in large:\n        print(idx[tup], end =\" \")\n    print()\n", "N = int(input())\ninc = []\ndec = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    if a<b: inc.append((a, b, i+1))\n    else: dec.append((a, b, i+1))\ninc.sort(key=lambda x: x[1], reverse=True)\ndec.sort(key=lambda x: x[1])\nif len(inc)>=len(dec):\n    print(len(inc))\n    for i in inc: print(i[2], end=' ')\nelse:\n    print(len(dec))\n    for i in dec: print(i[2], end=' ')\n", "def func(i):\n\treturn 0-ar[i][0]\ndef func2(i):\n\treturn ar[i][0]\nn=int(input())\nar=[[0 for x in range(2)] for y in range(n)]\nfor i in range(n):\n\tar[i][0],ar[i][1]=map(int,input().split())\nmn=[]\nmx=[]\nfor i in range(n):\n\tif(ar[i][0]<ar[i][1]):\n\t\tmn.append(i)\n\telse:\n\t\tmx.append(i)\nif(len(mn)>len(mx)):\n\tmn=sorted(mn, key = func)\n\tprint(len(mn))\n\tfor x in mn:\n\t\tprint (x+1,end=\" \")\nelse:\n\t# mx=sorted(mx,reverse=True)\n\tmx=sorted(mx, key = func2)\n\tprint(len(mx))\n\tfor x in mx:\n\t\tprint (x+1,end=\" \")\n", "n=int(input())\np=[tuple(int(x) for x in input().split()) for _ in range(n)]\n# print(p)\nasc = [(x[0], i) for i, x in enumerate(p) if x[0] > x[1]]\ndesc = [(x[0], i) for i, x in enumerate(p) if x[0] < x[1]]\nasc.sort()\ndesc.sort(reverse=True)\nif len(asc) >= len(desc):\n    print(len(asc))\n    print(' '.join(str(x[1]+1) for x in asc))\nelse:\n    print(len(desc))\n    print(' '.join(str(x[1]+1) for x in desc))\n", "n = int(input())\na = list()\nf = []\nfor i in range(n):\n    cur = [list(map(int, input().split())), i + 1]\n    if cur[0][0] < cur[0][1]:\n        f.append(cur)\n    else:\n        a.append(cur)\nif len(f) >= n // 2:\n    f.sort(key=lambda x: x[0][0], reverse=True)\n    print(len(f))\n    ans = ''\n    for i in f:\n        ans += str(i[1]) + ' '\n    print(ans)\nelse:\n    a.sort(key=lambda x: x[0][0], reverse=False)\n    print(len(a))\n    ans = ''\n    for i in a:\n        ans += str(i[1]) + ' '\n    print(ans)\n", "def seq1(diff,nums):\n    index = diff[0][1]\n    a,b = nums[index][0],nums[index][1]\n    if b > a:\n        indices = [index]\n    else:\n        return []\n    x1,x2 = a,b\n    for i in range(1,len(diff)):\n        index = diff[i][1]\n        a,b = nums[index][0],nums[index][1]\n        #print(a,b,x2)\n        if x2 > a and a < b:\n            indices.append(index)\n            x2 = b\n        else:\n            break\n        #print(a,b,x2)\n    \n    return indices\n\ndef seq2(diff,nums):\n    #print(nums)\n    index = diff[0][1]\n    a,b = nums[index][0],nums[index][1]\n    if b < a:\n        indices = [index]\n    else:\n        return []\n    x1,x2 = a,b\n    for i in range(1,len(diff)):\n        index = diff[i][1]\n        a,b = nums[index][0],nums[index][1]\n        #print(a,b,x2)\n        if a > x2 and a > b:\n            indices.append(index)\n            x2 = b\n        else:\n            break\n\n    return indices\n\ndef main():\n    n = int(input())\n    nums = []\n    diff1 = []\n    diff2 = []\n    for i in range(n):\n        a,b = map(int,input().split())\n        nums.append((a,b))\n        if b-a > 0:\n            diff1.append((b,i))\n        else:\n            diff2.append((a,i))\n\n    diff1.sort(reverse = True)\n    diff2.sort()\n    if diff1:\n        ans1 = seq1(diff1,nums)\n    else:\n        ans1 = []\n    if diff2:\n        ans2 = seq2(diff2,nums)\n    else:\n        ans2 = []\n\n    if len(ans1) >= len(ans2):\n        print(len(ans1))\n        for i in ans1:\n            print(i+1,end = ' ')\n    else:\n        print(len(ans2))\n        for i in ans2:\n            print(i+1,end = ' ')\n\nmain()\n", "# https://codeforces.com/contest/1148/problem/D\nn = int(input())\n\nd = {}\nd['+'] = []\nd['-'] = []\n\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    if a < b:\n        d['+'].append([b, _])\n    else:\n        d['-'].append([b, _])\n        \nd['+'] = sorted(d['+'], key = lambda x: x[0], reverse=True)\nd['-'] = sorted(d['-'], key = lambda x: x[0])\n\ns = ''\nif len(d['+']) > len(d['-']):\n    print(len(d['+']))\n    for x in d['+']:\n        s+=str(x[1]+1) +  ' '\nelse:\n    print(len(d['-']))\n    for x in d['-']:\n        s+=str(x[1]+1) +  ' '\n        \nprint(s)\n\n#5\n#1 7\n#6 4\n#2 10\n#9 8\n#3 5\n", "# from bisect import bisect_left\nimport sys\n\ndef solve(a, cmp):\n    # if not a:\n    #     return []\n    # print(up)\n    res = [-1 for _ in a]\n    ptr = 0\n    for id, e in enumerate(a):\n        if ptr == 0 or cmp(a[res[ptr - 1]][0][1], e[0][0]):\n            res[ptr] = id\n            ptr += 1\n    return [a[res[id]][1] for id in range(ptr)]\n\n\nn = int(input())\na = [tuple(int(e) for e in line.split()) for line in sys.stdin]\n\nup = [(e, id) for id, e in enumerate(a) if e[0] < e[1]]\ndown = [(e, id) for id, e in enumerate(a) if e[0] > e[1]]\n\n\nup.sort(key=lambda e: -e[0][1])\ndown.sort(key=lambda e: e[0][1])\n\nres = solve(up, lambda a, b: a > b)\nres_down = solve(down, lambda a, b: a < b)\n\nif len(res) < len(res_down):\n    res = res_down\n\nprint(len(res))\nprint(\" \".join(str(_ + 1) for _ in res))", "# from bisect import bisect_left\nimport sys\n\ndef solve(a, cmp):\n    # if not a:\n    #     return []\n    # print(up)\n    res = [-1 for _ in a]\n    ptr = 0\n    for id, e in enumerate(a):\n        if ptr == 0 or cmp(a[res[ptr - 1]][0][1], e[0][0]):\n            res[ptr] = id\n            ptr += 1\n    return [a[res[id]][1] for id in range(ptr)]\n\n\nn = int(input())\na = [tuple(int(e) for e in line.split()) for line in sys.stdin]\n\nup = [(e, id) for id, e in enumerate(a) if e[0] < e[1]]\ndown = [(e, id) for id, e in enumerate(a) if e[0] > e[1]]\n\n\nup.sort(key=lambda e: -e[0][1])\ndown.sort(key=lambda e: e[0][1])\n\nres = solve(up, lambda a, b: a > b)\nres_down = solve(down, lambda a, b: a < b)\n\nif len(res) < len(res_down):\n    res = res_down\n\nprint(len(res))\nprint(\" \".join(str(_ + 1) for _ in res))", "\nimport sys\nimport functools\ncommands = []\n\ndef less_int(x, y):\n    return x[0] - y[0]\n    \ndef more_int(x, y):\n    return y[0] - x[0]\n\nn = int(input())\nab = []\nba = []\nfor i in range(n):\n    a_s  = list(map(int,input().split(' ')))\n    if a_s[0] > a_s[1]:\n        ab.append((a_s[0], a_s[1], i + 1))\n    else:\n        ba.append((a_s[0], a_s[1], i + 1))\nab.sort(key=functools.cmp_to_key(less_int))\nba.sort(key=functools.cmp_to_key(more_int))\n\nansw = ab\nif len(ba) > len(ab):\n    answ = ba\nprint(len(answ))\nfor a,b,c in answ:\n    print(c, end=' ')\n\n\n\n", "n = int(input())\nD = []\nU = []\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    if a < b:\n        U.append((a, b, i + 1))\n    else:\n        D.append((a, b, i + 1))\n\nif len(U) <= len(D):\n    D = sorted(D, key=lambda x: x[0])\n    ans = []\n    for i in range(len(D)):\n        ans.append(D[i][2])\nelse:\n    U = sorted(U, key=lambda x: -x[0])\n    ans = []\n    for i in range(len(U)):\n        ans.append(U[i][2])\n\nprint(len(ans))\nprint(*ans)\n", "from sys import stdin\nn=int(stdin.readline().strip())\n\ns=[list(map(int,stdin.readline().strip().split())) for i in range(n)]\ns1=[]\ns2=[]\nfor i in range(n):\n    if s[i][0]>s[i][1]:\n        s1.append(s[i][::-1]+[i])\n    if s[i][0]<s[i][1]:\n        s2.append(s[i][::-1]+[i])\ns1.sort()\ns2.sort(reverse=True)\nans1=[]\nans2=[]\nif len(s1)>0:\n    ans1=[s1[0]]\nif len(s2)>0:\n    ans2=[s2[0]]\nfor i in range(len(s1)):\n    if ans1[-1][0]<s1[i][0]:\n        ans1.append(s1[i])\nfor i in range(len(s2)):\n    if ans2[-1][0]>s2[i][0]:\n        ans2.append(s2[i])\nif len(ans1)>len(ans2):\n    r=[]\n    for i in ans1:\n        r.append(i[2]+1)\n    print(len(r))\n    print(*r)\nelse:\n    r=[]\n    for i in ans2:\n        r.append(i[2]+1)\n    print(len(r))\n    print(*r)\n", "#from hypothesis import given\n#from hypothesis.strategies import permutations, integers\n\n\ndef solve(n, p):\n    i_p = list(enumerate(p))\n    i_p.sort(key=lambda i_ab: (i_ab[1][1], i_ab[1][0], i_ab[0]))\n    zig = list(reversed([i for i, (a, b) in i_p if a < b]))\n    #print([(i, p[i]) for i in zig])\n    for i in range(len(zig) - 1):\n        assert p[zig[i]][1] > p[zig[i + 1]][0]\n    for i in zig:\n        assert p[i][0] < p[i][1]\n    zag = [i for i, (a, b) in i_p if a > b]\n    #print([(i, p[i]) for i in zag])\n    for i in range(len(zag) - 1):\n        assert p[zag[i]][1] < p[zag[i + 1]][0]\n    for i in zag:\n        assert p[i][0] > p[i][1]\n    if len(zig) < len(zag):\n        return zag\n    return zig\n\n\n# IDK why generation is so slow for this.\n#@given(integers(min_value=2, max_value=int(1e2))\n#    .flatmap(lambda n: permutations(range(1, 2*n + 1)))\n#    .map(lambda ab: [(ab[i], ab[i + 1]) for i in range(0, len(ab), 2)]))\n#def test_solve(p):\n#    solve(len(p), p)\n\n\ndef main():\n    n = int(input())\n    p = [None]*n\n    for i in range(n):\n        p[i] = tuple(map(int, input().split()))\n    i = solve(n, p)\n    print(len(i))\n    print(*[ix + 1 for ix in i])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nmn,mx=[],[]\nfor i in range(n):\n    b=list(map(int,input().split()))\n    if(b[0]>b[1]):\n        mx.append(b+[i+1])\n    else:mn.append(b+[i+1])\nif len(mx)>len(mn):\n    ans=sorted(mx)\nelse:\n    ans=sorted(mn,reverse=True)\nprint(len(ans))\nprint(*[x[2] for x in ans])", "n = int(input())\nb = []\nmx = []\nmn = []\nmx_i = []\nmn_i = []\nfor i in range(n):\n    u,v = [int(x) for x in input().strip().split()]\n    # b.append((u,v))\n    if u>v:\n        mx.append((u,v))\n        mx_i.append(i+1)\n    else:\n        mn.append((u,v))\n        mn_i.append(i+1)\nif len(mx)>len(mn):\n    print(len(mx))\n    res = [ x[1] for x in sorted(zip(mx,mx_i))]\nelse:\n    print(len(mn))\n    res = [ x[1] for x in sorted(zip(mn,mn_i), reverse=True)]\n\nfor r in res:\n    print(r, end=\" \")\nprint()   \n", "from sys import stdin\nfrom bisect import bisect_left as bl\ninput=stdin.readline\nn=int(input())\na=[]\nb=[]\nfor i in range(n):\n    c,d=map(int,input().split())\n    if c<d:\n        a.append([d,i])\n    else:\n        b.append([c,i])\na.sort(reverse=True)\nb.sort()\nif len(a)>len(b):\n    print(len(a))\n    for i in a:\n        print(i[1]+1,end=' ')\nelse:\n    print(len(b))\n    for i in b:\n        print(i[1]+1,end=' ')\n    "]