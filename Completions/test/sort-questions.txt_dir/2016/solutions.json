["#!/usr/bin/env python3\n\n# solution after hint\n# (instead of best hit/mana spell store convex hull of spells)\n# O(n^2) instead of O(n log n)\n\n\n[q, m] = list(map(int, input().strip().split()))\nqis = [tuple(map(int, input().strip().split())) for _ in range(q)]\n\nmod = 10**6\n\nj = 0\nspell_chull = [(0, 0)]  # lower hull _/\n\ndef is_right(xy0, xy1, xy):\n\t(x0, y0) = xy0\n\t(x1, y1) = xy1\n\t(x, y) = xy\n\treturn (x0 - x) * (y1 - y) >= (x1 - x) * (y0 - y)\n\ndef in_chull(x, y):\n\ti = 0\n\tif x > spell_chull[-1][0]:\n\t\treturn False\n\twhile spell_chull[i][0] < x:\n\t\ti += 1\n\tif spell_chull[i][0] == x:\n\t\treturn spell_chull[i][1] <= y\n\telse:\n\t\treturn is_right(spell_chull[i - 1], spell_chull[i], (x, y))\n\t\n\n\ndef add_spell(x, y):\n\tnonlocal spell_chull\n\tif in_chull(x, y):\n\t\treturn\n\ti_left = 0\n\twhile i_left < len(spell_chull) - 1 and not is_right(spell_chull[i_left + 1], spell_chull[i_left], (x, y)):\n\t\ti_left += 1\n\ti_right = i_left + 1\n\twhile i_right < len(spell_chull) - 1 and is_right(spell_chull[i_right + 1], spell_chull[i_right], (x, y)):\n\t\ti_right += 1\n\tif i_right == len(spell_chull) - 1 and x >= spell_chull[-1][0]:\n\t\ti_right += 1\n\tspell_chull = spell_chull[:i_left + 1] + [(x, y)] + spell_chull[i_right:]\n\n\nfor i, qi in enumerate(qis):\n\t(k, a, b) = qi\n\tx = (a + j) % mod + 1\n\ty = (b + j) % mod + 1\n\tif k == 1:\n\t\tadd_spell(x, y)\n\telse:  #2\n\t\tif in_chull(y / x, m / x):\n\t\t\tprint ('YES')\n\t\t\tj = i + 1\n\t\telse:\n\t\t\tprint ('NO')\n"]