["k = int(input())\n\nif k<=9:\n    print(k)\nelse:\n    num_arr = [9*(i+1)* 10**i for i in range(11)]\n\n    index = 0\n\n    while True:\n        if k<=num_arr[index]:\n            break\n        else:\n            k -= num_arr[index]\n            index += 1\n\n    digit = index+1\n    k += digit-1\n\n\n    num = k//digit\n    offset = k%digit\n\n    string_num = str(10**(digit-1)+ num-1)\n\n    print(string_num[offset])\n\n", "def f(x): #including x\n\tdig, cnt = 1, 9\n\tans = 0\n\twhile dig != len(str(x)):\n\t\tans += dig * cnt\n\t\tdig += 1\n\t\tcnt *= 10\n\tans += (x - (cnt // 9) + 1) * dig\n\treturn ans\nk = int(input())\nl, r = 1, 1000000000000\nif k == 1:\n    print(1)\n    return\nwhile l < r:\n\tmid = (l + r + 1) >> 1\n\tif f(mid) < k:\n\t\tl = mid\n\telse:\n\t\tr = mid - 1\nk -= f(l)\nl += 1\nprint(str(l)[k - 1])", "import math\nn=int(input())\n# 99-9\n# 999-99\na=[9]\nfor i in range(2,20):\n    a.append(10**i   - 10**(i-1) )\nb=[0]\nfor i in range(1,20):\n    b.append(b[-1]+ i*a[i-1])\nfor i in range(20):\n    if n<=b[i]:\n        break\np=b[i-1]\nk=n-p\n# print(p,k)\nans=10**(i-1) - 1 + math.ceil(k/(i))\n# print(k,p,i)\n# print(ans,i,k)\nif k%i==0:\n    print(('0'+str(ans))[i])\nelse:\n    print(('0'+str(ans))[k%i])", "k = int(input())\nch = 0\ni = 0\nr = 1\nwhile k > r - 1:\n    r += 9 * (i + 1) * 10 ** i\n    i += 1\nr -= 9 * i * 10 ** (i - 1)\n#print(r, i)\nprint(str((k - r) // i + 10 ** (i - 1))[(k - r) % i]  )\n", "k=int(input())\ni=0\nr=1\nwhile(k>=r):\n    r+=9*(i+1)*10**i\n    i+=1\nr=r-(9*i*10**(i-1))\nans=str(((k-r)//i)+10**(i-1))[(k-r)%i]\nprint(ans)", "k = int(input())\nprev=0\nnextt=0\nNumofDigits=0\n#i = 0\n#while(summ<(2^12)):\nwhile(True):\n    prev = nextt\n    nextt = nextt+(9*(10**(NumofDigits-1))*NumofDigits)\n    if(k>= prev and k<=nextt):\n        break\n    NumofDigits=NumofDigits+1\nif(NumofDigits==1):\n    print(k)\nelse:\n    result = (10**(NumofDigits-1))+int((k-(prev+1))/NumofDigits)\n    i=0\n    while(True):\n        if (k-int(prev+1))%NumofDigits == i:\n            break\n        i=i+1\n    result = str(result)\n    print(result[i])", "a = int(input())\nc = [1] * 30\nfor i in range (1,20):\n\tc[i] = 9 * i * pow(10,i-1)\nfor i in range (1,15):\n\tif (a > c[i]):\n\t\ta -= c[i]\n\telse:\n\t\td = int((a-1) / i + pow(10,i-1) - 1)\n\t\te = (a-1) % i + 1\n\t\tf = str(d+1)\n\t\tprint(f[e-1])\n\t\treturn", "k = int(input()) - 1\n\nl = 1\nc = 9\nwhile k >= c*l:\n    k -= c * l\n    l += 1\n    c *= 10\n\nc = 10**(l-1) + k // l\nprint(str(c)[k % l])\n", "def mp():\n    return map(int, input().split())\n\ndef f(i):\n    return (10 ** i - 10 ** (i - 1)) * i\n\nn = int(input())\n\ni = 1\nsum = 0\nwhile n - f(i) >= 0:\n    n -= f(i)\n    sum += f(i) // i\n    i += 1\n\nprint(str(sum + (n + i - 1) // i)[n % i - 1])", "#!/usr/bin/env python3\nfrom sys import stdin\n\n\ndef solve(tc):\n    k = int(stdin.readline().strip())\n    cmp = 9\n    ndigit = 1\n\n    while k>(cmp*ndigit):\n        k -= cmp*ndigit\n        cmp *= 10\n        ndigit += 1\n    \n    num = (10**(ndigit-1)) + ((k-1) // ndigit)\n    pos = (k-1) % ndigit\n\n    print(str(num)[pos])\n    pass\n\n\nLOCAL_TEST = not __debug__\nif LOCAL_TEST:\n    infile = __file__.split('.')[0] + \"-test.in\"\n    stdin = open(infile, 'r')\n\ntcs = (int(stdin.readline().strip()) if LOCAL_TEST else 1)\ntc = 1\nwhile tc <= tcs:\n    solve(tc)\n    tc += 1", "import sys\nk=int(input())\nif type(k)!=int or k<=0 or k>pow(10,12) :\n        print(\"wrong input. try again\")\n        return\nlim_init=lim=decimal=9\nc=0\nwhile True:\n        c+=1\n        if k<=lim:\n                diff=lim-k #189-21\n                pos=diff%c\n                diff=int(diff/c) #168/2=84\n                diff=decimal-diff #99-84\n                print(''.join(list(reversed(str(diff))))[pos])\n                break\n        else:\n                decimal = int(str(lim_init)*(c+1))\n                lim+=int(str(lim_init)+'0'*c)*(c+1)\n", "\n\nn=int(input())\n\nx=1\n\nwhile n>(10**(len(str(x))-1)*9*len(str(x))):\n    n-=10**(len(str(x))-1)*9*len(str(x))\n\n    x*=10\n    \nt=len(str(x))\nnadighe=False\nwhile nadighe==False:\n    qw=1\n    nadighe=True\n    while n>(10**(len(str(qw))-1)*9*t):\n        n-=10**(len(str(qw))-1)*9*t\n        nadighe=False\n        qw*=10\n    x+=qw-1\n   \n    \nwhile n>len(str(x)):\n    n-=len(str(x))\n    x+=1\nfor i in range(len(str(x))):\n    if n!=0:\n        s=str(x)[i]\n        n-=1\nprint(s)\n    \n", "n = int(input())\nlimit_int = limit = decimal = 9\ncount = 0\nwhile True:\n    count += 1\n    if n <= limit:\n        difference = limit - n\n        position = difference % count\n        difference = difference // count\n        difference = decimal - difference\n        print(''.join(list(reversed(str(difference))))[position])\n        break\n    else:\n        decimal = int(str(limit_int) * (count + 1))\n        limit += int(str(limit_int) + '0' * count) * (count + 1)\n", "\"\"\"\nStrategy: Split sequence into subsequences\naccording to number of digits. Then find corresponding\nnumber and digit in that number.\n\"\"\"\n\n# Standard input.\nk=int(input())\n\n# Initilize sequence\nnum_digits=1\nnum_numbers=9\n\nk-=1\nwhile k>num_digits*num_numbers:\n    # Move sequence starting point. \n    k -= num_numbers*num_digits\n    num_digits += 1\n    num_numbers *= 10\n\n# Generate number.\nnumber = 10**(num_digits - 1) + k // num_digits\n# Find index in that number\nindex = k % num_digits\nanswer = str(number)[index]\nprint(answer)", "L = [(i+1)*9*10**i for i in range(12)]\nnumber = int(input())\n\nexponent=0\nwhile number >= 0:\n    number-=L[exponent]\n    exponent+=1\nexponent-=1\nnumber%=L[exponent]\nstart = 10**exponent\nnumDigits = exponent+1\nfinal = start+(number//numDigits-1)\nremainder = number%numDigits\nif remainder == 0:\n    final = str(final)\n    print(final[-1])\nelse:\n    final = str(final+1)\n    print(final[remainder-1])\n'''print(number, exponent, numDigits, start, final, remainder)'''\n", "T = (0, 9, 189, 2889, 38889, 488889, 5888889, 68888889, 788888889, 8888888889, 98888888889, 1088888888889)\nk = int(input())\na = 0\nfor i in T:\n    if i - k > 0:\n        a = T.index(i)\n        break\ntemp = T[a] - k\nx = temp % a\nres = (10 ** a) - 1 - int(temp / a)\nans = int((res % (10 ** (x+1))) / (10 ** x))\nprint(ans)\n", "k=int(input())\nx=0\nc=0\nwhile(x<k):\n    x+=9*(10**c)*(c+1)\n    c+=1\np=(x-k)%c\nk=((10**c)-int(((x-k)/c))-1)\nk=str(k)\nprint(k[len(k)-(p)-1])", "k=int(input())\na=[]\nfor i in range(0,12):\n    s=9*pow(10,i)*(i+1)\n    if k<=s:\n        break\n    else:\n        k-=s\npos=i+1\nnum=(pow(10,pos-1)+(k//pos)-1)\nif k%pos==0:\n    print(str(num)[-1])\nelse:\n    print(str(num+(0 if pos==1 else 1))[(k%pos)-1])\n \n", "index = int(input())\n\ntotal = 9\nn = 1\n\nwhile index > total:\n    total += (n + 1) * (10**n) * 9\n    n += 1\nlast = 10**(n - 1)\ntotal -= n * 9 * last\nindex = index - total\n\n\nr = index % (n)\nk = index // n\n\nnumber = last + k\n\n\nif r == 0:\n    print(str(number - 1)[n-1])\nelse:\n    print(str(number)[r - 1])\n", "l = []\nn = []\nsum = 0\nmultiply = 9\nfor i in range(1,12):\n    s = '9' * i\n    n.append(int(s))\n    sum+=i*multiply\n    multiply *= 10\n    l.append(sum)\nk = int(input())\nif(k<9):\n    print(k)\nelse:\n    t = 0\n    for i in range(len(l)):\n        if(k < l[i]):\n            t=i\n            break\n    temp = k-l[t-1]\n    offset = temp%(t+1)\n    value = temp//(t+1)\n    number = n[t-1]+value\n    if(offset == 0):\n        print(number%10)\n    else:\n        number += 1\n        offset -= 1\n        print(str(number)[offset])", "k=int(input())\ni=0\nr=1\nwhile(k>=r):\n    r+=9*(i+1)*10**i\n    i+=1\nr=r-(9*i*10**(i-1))\nans=str(((k-r)//i)+10**(i-1))[(k-r)%i]\nprint(ans)\n", "k = int(input())\nn = 1\n\nfor i in range(1, 20):\n    if k < n + 9 * 10 ** (i - 1) * i:\n        print(str(10 ** (i - 1) + (k - n) // i)[(k - n) % i] )\n        break\n    n += 9 * 10 ** (i - 1) * i\n\n", "a= int(input())\ni=1\namount=a\nwhile amount>i*((10**i)-(10**(i-1))):\n    amount =amount - i*((10**i)-(10**(i-1)))\n    i=i+1  \nx= amount//i\ny=amount%i\n# print(amount)\n# print(i)\n# print(x)\n# print(y)\nif y==0: \n    if i==1:\n        print(x%10)\n    else:\n        print((10**(i-1) + x -1)%10)\nelse:\n    if i==1:\n        print(x%10)\n    else:\n        print(((10**(i-1) + x)//(10**(i-y)))%10)", "#import sys\n#digit = int(sys.argv[1])\ndigit = int(input())\n\nif int(digit) <= 9:\n    print(digit)\n    return\n\nstart_range = 1\nend_range = 9\n\npower = 1\ndigit_count = 2\nwhile not (start_range <= digit and digit <= end_range):\n    start_range = end_range + 1\n    end_range = 9 * 10**power * digit_count + start_range - 1\n    power += 1\n    digit_count += 1\n\noffset_number = (digit - start_range) // (digit_count - 1)\n#print(f\"{digit} - {start_range} mod {digit_count-1} = {offset_number}\")\nnumber = str(10**(power - 1) + offset_number)\n#print(f\"10^ {power - 1} + {offset_number} = {number}\")\noffset_digit = (digit - start_range) % (digit_count - 1) \n#print(f\"{digit} - {start_range} mod {digit_count - 1 } = {offset_digit}\")\n#print(f\"{number} {number[-offset_digit]}\")\nprint(f\"{number[offset_digit]}\")\n", "def get_kth_digit(i):\n    if i < 10:\n        return i\n\n    batch = 9\n    count = 9\n    width = 1\n\n    while i >  10 * batch * (width + 1) + count:\n        batch *= 10\n        width += 1\n        count += batch * width\n\n    \n    k = i - count - 1\n    num = 10 ** width + k// (width + 1)\n    return str(num)[k % (width + 1)]\n\ndef main():\n    i = int(input())\n\n    print(get_kth_digit(i))\n\ndef __starting_point():\n    main()\n__starting_point()"]