["def sortHashtags(htags):\n\tdef shorten(j, i):\n\t\ts = 0\n\t\twhile s < len(htags[i]) and htags[i][s] == htags[j][s]:\n\t\t\ts += 1\n\t\thtags[j] = htags[j][:s]\n\n\tn = len(htags)\n\n\n\tfor i in range(n-1, 0, -1):\n\t\tif htags[i-1] > htags[i]:\n\t\t\tshorten(i-1, i)\n\n\treturn '\\n'.join(htags)\n\nn = int(input())\ntags = []\nfor i in range(n):\n\ttags.append(input())\n\nprint(sortHashtags(tags))\n", "from sys import stdin,stdout\nn=int(stdin.readline())\nA = [0] * n\nfor j in range(n):\n    A[j] = stdin.readline().strip()\nanswer = [0] * n\nanswer[-1] = A[-1]\nfor j in range(n-2,-1,-1):\n    if A[j] <= answer[j+1]:\n        answer[j] = A[j]\n    else:\n        for i in range(min(len(answer[j+1]),len(A[j]))):\n            if A[j][i] > answer[j+1][i]:\n                i-=1\n                break\n        answer[j] = A[j][:i+1]\nprint('\\n'.join(answer))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    a = [S() for _ in range(n)]\n    for i in range(n-2,-1,-1):\n        t = a[i]\n        s = a[i+1]\n        sl = len(s)\n        for j in range(1,len(t)):\n            if j >= sl:\n                a[i] = s\n                break\n            if t[j] > s[j]:\n                a[i] = t[:j]\n                break\n            if t[j] < s[j]:\n                break\n\n    print('\\n'.join(a))\n\nmain()", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\ndef ri():\n    return list(map(int, input().split()))\n\n#n=int(stdin.readline())\nn = int(input())\n\ns =[]\nfor i in range(n):\n   # s.append(input())\n    s.append(stdin.readline().strip())\n\nfor i in range(n-1, 0, -1):\n    mind = min(len(s[i]), len(s[i-1]))\n    for j in range(mind):\n        if s[i-1][j] < s[i][j]:\n            break\n        elif s[i-1][j] == s[i][j]:\n            if j+1 == mind:\n                s[i-1] = s[i-1][:mind]\n                break\n            continue\n        else:\n            s[i-1] = s[i-1][:j]\n            break\n#for i in range(n):\n#    print(s[i])\nprint('\\n'.join(s))\n\n", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\ndef ri():\n    return list(map(int, input().split()))\n\n#n=int(stdin.readline())\nn = int(input())\n\ns =[]\nfor i in range(n):\n    #s.append(input())\n    s.append(stdin.readline().strip())\n\nfor i in range(n-1, 0, -1):\n    if s[i-1] <= s[i]:\n        continue\n    else:\n        mind = min(len(s[i]), len(s[i-1]))\n        for j in range(mind):\n            if s[i-1][j] > s[i][j]:\n                s[i-1] = s[i-1][:j]\n                break\n        else:\n            s[i-1] = s[i-1][:mind]\n\n#for i in range(n):\n#    print(s[i])\nprint('\\n'.join(s))\n\n", "def g(c,d):\n    s=0\n    while s<len(a[d]) and a[c][s]==a[d][s]:s+=1\n    a[c]=a[c][:s]\n\ndef f(a):\n    for i in range(len(a)-1,0,-1):\n        if a[i-1]>a[i]:g(i-1,i)\n    print('\\n'.join(a))\n\nn=int(input())\na=[input()for i in range(n)]\nf(a)\n\n\n", "# Description of the problem can be found at http://codeforces.com/problemset/problem/777/D\n\nnum = int(input())\nhts = list(input() for _ in range(num))\n\ni = num - 2\nwhile i >= 0:\n    if hts[i] > hts[i + 1]:\n        n = 1\n        while n < len(hts[i + 1]) and hts[i][n] == hts[i + 1][n]: \n            n += 1\n        hts[i] = hts[i][:n]\n    i -= 1\n    \nprint(\"\\n\".join(hts))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    a = [S() for _ in range(n)]\n    for i in range(n-2,-1,-1):\n        t = a[i]\n        s = a[i+1]\n        sl = len(s)\n        for j in range(1,len(t)):\n            if j >= sl:\n                a[i] = s\n                break\n            if t[j] > s[j]:\n                a[i] = t[:j]\n                break\n            if t[j] < s[j]:\n                break\n\n    return '\\n'.join(a)\n\nprint(main())", "n = int(input())\narr = [input() for i in range(n)]\n\nfor i in range(n-1,0,-1):\n\tnew = arr[i]\n\told = arr[i-1]\n\tle1 = len(new)\n\tle2 = len(old)\n\tfor j in range(min(le1,le2)):\n\t\tif new[j]<old[j]:\n\t\t\tarr[i-1] = old[:j]\n\t\t\tbreak\n\t\telif new[j]>old[j]: break\n\telse:\n\t\tif le2>le1:\n\t\t\tarr[i-1] = arr[i]\n\n\nprint('\\n'.join(arr))\n", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\ndef lexi(i):\n    j = 1\n    while j < len(l[i]) and l[i-1][j] == l[i][j]:\n        j += 1\n    l[i - 1] = l[i - 1][:j]           \nfor i in range(n - 1, 0, -1):\n    if l[i - 1] > l[i]:\n        lexi(i)\nprint(\"\\n\".join(l))", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\n    \ndef lexi(i):\n    j = 1\n    while j < len(l[i]) and l[i-1][j] == l[i][j]:\n        j += 1\n    l[i - 1] = l[i - 1][:j] \n              \nfor i in range(n - 1, 0, -1):\n    if l[i - 1] > l[i]:\n        j = 1\n        while j < len(l[i]) and l[i-1][j] == l[i][j]:\n            j += 1\n        l[i - 1] = l[i - 1][:j] \nprint(\"\\n\".join(l))", "n = int(input())\n\ninp = [0] * n\n\nfor i in range(n):\n\tinp[i] = input()\n\t\ndef common_str(a, b):\n\tl = 1\n\tfor i in range(1, len(a)):\n\t\tif a[i] != b[i]:\n\t\t\tbreak\n\t\tl += 1\n\t\t\n\treturn a[:l]\n\t\nfor i in range(n - 1, 0, -1):\n\tif inp[i] < inp[i - 1]:\n\t\tinp[i - 1] = common_str(inp[i], inp[i - 1])\n\t\nprint('\\n'.join(inp))\n\t\n\n\t\n", "N = int( input() )\nA = [ input() for i in range( N ) ]\nfor i in range( N - 1, 0, -1 ):\n  if A[ i - 1 ] > A[ i ]:\n    ptr = 0\n    while ptr < len( A[ i ] ) and A[ i - 1 ][ ptr ] == A[ i ][ ptr ]:\n      ptr += 1\n    A[ i - 1 ] = A[ i - 1 ][ : ptr ]\nprint( '\\n'.join( A ) )\n", "def g(c,d):\n    s=0\n    while s<len(a[d]) and a[c][s]==a[d][s]:s+=1\n    a[c]=a[c][:s]\n\ndef f(a):\n    for i in range(len(a)-1,0,-1):\n        if a[i-1]>a[i]:g(i-1,i)\n    print('\\n'.join(a))\n\nn=int(input())\na=[input()for i in range(n)]\nf(a)", "def cut_to_lexicographic(word_bigger, word_smaller):\n    for l in range(len(word_bigger)):\n        if word_bigger[l] != word_smaller[l]:\n            return word_bigger[:l]\n    return word_bigger\n\n\nn = int(input())\narray = [str(input()) for c in range(n)]\n\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        if len(array[b]) > len(array[b + 1]):\n            array[b] = array[b][:len(array[b + 1])]\n        array[b] = cut_to_lexicographic(array[b+1], array[b])\nprint(\"\\n\".join(array))", "def cut_to_lexicographic(word_bigger, word_smaller):\n    for l in range(len(word_bigger)):\n        if word_bigger[l] != word_smaller[l]:\n            return word_bigger[:l]\n    return word_bigger\n\n\nn = int(input())\narray = [str(input()) for c in range(n)]\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        if len(array[b]) > len(array[b + 1]):\n            array[b] = array[b][:len(array[b + 1])]\n        array[b] = cut_to_lexicographic(array[b], array[b+1])\nprint(\"\\n\".join(array))", "def cut_to_lexicographic(word_bigger, word_smaller):\n    if word_bigger <= word_smaller:\n        return word_bigger\n    for l in range(len(word_bigger)):\n        if word_bigger[l] != word_smaller[l]:\n            return word_bigger[:l]\n    return word_bigger\n\nn = int(input())\narray = [str(input()) for c in range(n)]\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        if len(array[b]) > len(array[b + 1]):\n            array[b] = array[b][:len(array[b + 1])]\n        array[b] = cut_to_lexicographic(array[b], array[b+1])\nprint(\"\\n\".join(array))", "def cut_to_lexicographic(word_bigger, word_smaller):\n    if len(word_bigger) > len(word_smaller):\n        return word_bigger[:len(word_smaller)]\n    for l in range(len(word_bigger)):\n        if word_bigger[l] != word_smaller[l]:\n            return word_smaller[:l]\n    return word_bigger\n\n\nn = int(input())\narray = [str(input()) for c in range(n)]\n\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        array[b] = cut_to_lexicographic(array[b], array[b+1])\nprint(\"\\n\".join(array))", "def cut_to_lexicographic(word_bigger, word_smaller):\n    for l in range(len(word_bigger[:len(word_smaller)])):\n        if word_bigger[l] != word_smaller[l]:\n            return word_smaller[:l]\n    return word_bigger[:len(word_smaller)]\n\n\nn = int(input())\narray = [str(input()) for c in range(n)]\n\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        array[b] = cut_to_lexicographic(array[b], array[b+1])\nprint(\"\\n\".join(array))", "def sorting(string, string1):\n    if len(string) > len(string1):\n        string = string[:len(string1)]\n    for q in range(len(string)):\n        if string[q] > string1[q]:\n            string = string[:q]\n            break\n    return string\nn = int(input())\narray = [str(input()) for c in range(n)]\nb = n - 2\nwhile b > -1:\n    if array[b + 1] >= array[b]:\n        b = b - 1\n    else:\n        array[b] = sorting(array[b], array[b + 1])\nprint(\"\\n\".join(array))", "import sys\nn = int(sys.stdin.readline().strip())\nss = [sys.stdin.readline().strip() for _ in range(n)]\n\n# def compare_and_truncate(s1, s2):\n#     if s1 == s2:\n#         return s1\n#     min_l = min(len(s1), len(s2))\n#     for i in range(min_l):\n#         if ord(s1[i]) < ord(s2[i]):\n#             return s1\n#         elif ord(s1[i]) > ord(s2[i]):\n#             return s1[:i]\n#     return s1[:min_l]\n\ndef compare_and_truncate(s1,s2):\n    if s1 > s2:\n        i = 0\n        while i < len(s2) and s1[i] == s2[i]:\n            i += 1\n        return s1[:i]\n    return s1\n\n\n\nfor i in range(len(ss)-2,-1,-1):\n    ss[i] = compare_and_truncate(ss[i],ss[i+1])\n\nans = \"\"\nfor s in ss:\n    ans += s + \"\\n\"\n\nsys.stdout.write(ans)\n", "n = int(input())\nss = [input().strip() for _ in range(n)]\n\n# def compare_and_truncate(s1, s2):\n#     if s1 == s2:\n#         return s1\n#     min_l = min(len(s1), len(s2))\n#     for i in range(min_l):\n#         if ord(s1[i]) < ord(s2[i]):\n#             return s1\n#         elif ord(s1[i]) > ord(s2[i]):\n#             return s1[:i]\n#     return s1[:min_l]\n\ndef compare_and_truncate(s1,s2):\n    if s1 > s2:\n        i = 0\n        while i < len(s2) and s1[i] == s2[i]:\n            i += 1\n        return s1[:i]\n    return s1\n\n\n\nfor i in range(len(ss)-2,-1,-1):\n    ss[i] = compare_and_truncate(ss[i],ss[i+1])\n\nans = \"\"\nfor s in ss:\n    ans += s + \"\\n\"\n\nprint(ans)\n", "n = int(input())\na = [input() for i in range(n)]\nfor i in range(n - 1, 0, -1):\n\tb = a[i]\n\tc = a[i - 1]\n\tl1 = len(b)\n\tl2 = len(c)\n\tfor j in range(min(l1, l2)):\n\t\tif b[j] < c[j]:\n\t\t\ta[i - 1] = c[:j]\n\t\t\tbreak\n\t\telif b[j] > c[j]: break\n\telse:\n\t\tif l2 > l1:\n\t\t\ta[i - 1] = a[i]\nprint('\\n'.join(a))"]