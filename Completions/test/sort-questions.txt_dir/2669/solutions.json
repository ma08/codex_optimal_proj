["# cook your dish here\nn=int(input())\ncount=[]\na=[int(i) for i in input().split()]\nb=[int(i) for i in input().split()]\nstart=0\nfor i in range(n):\n    if a[i]>=start:\n        count.append(i)\n        start=b[i]\nprint(*count,sep=\" \")", "try:\r\n    n = int(input())\r\n    l1 = [int(x) for x in input().split()]\r\n\r\n    l2 = [int(x) for x in input().split()]\r\n    ans=[]\r\n    t2 = -1\r\n    for i in range(n):\r\n        \r\n\r\n        if(t2 <= l1[i]):\r\n            ans.append(i)\r\n            t2 = l2[i]\r\n\r\n    for e in ans:\r\n        print(e,end=' ')\r\nexcept EOFError:\r\n    pass\r\n", "n= int(input())\nstart= list(map(int,input().split()))\nfinish= list(map(int,input().split()))\n\ntask=[0]\nact=0\nfor i in range(1,n):\n\tif start[i]>=finish[act]:\n\t\ttask.append(i)\n\t\tact=i\n\nfor i in task:\n\tprint(i,end=\" \")\n\n", "ans=[]\n#code on gfg\ndef printMaxActivities(s, f):\n    n = len(f)\n    # The first activity is always selected\n    i = 0\n    ans.append(i)\n    # Consider rest of the activities\n    for j in range(n):\n        # If this activity has start time greater than\n        # or equal to the finish time of previously\n        # selected activity, then select it\n        if s[j] >= f[i]:\n            ans.append(j)\n            i = j\n        # Driver program to test above function\nn=int(input())\ns=list(map(int,input().split()))\nf=list(map(int,input().split()))\nprintMaxActivities(s, f)\nprint(*ans)\n\n", "# cook your dish here\nsize = int(input())\nstarting_times = list(map(int, input().split()))\nending_times = list(map(int, input().split()))\n\ntasks_indices_set = set()\n\nlast_timing = 0\n\nfor i in range(size):\n    # print(\"Index:\", i, \"& last_timing:\", last_timing)\n    # if i==0: tasks_indices_set.add(i)\n    if starting_times[i]>=last_timing:\n        tasks_indices_set.add(i)\n        last_timing = ending_times[i]\n        for j in range(i+1, size):\n            if ending_times[i]<=starting_times[j]:\n                tasks_indices_set.add(j)\n                last_timing = ending_times[j]\n                break\n\nprint(*sorted(tasks_indices_set))", "# cook your dish here\nn=int(input())\ns=list(map(int,input().split()))\nf=list(map(int,input().split()))\nt=list(map(lambda x, y:(x,y), s, f)) \n#ts=sorted(t,key=lambda x:x[0])\n#print(ts)\nend=0\ntt=[]\nk=0\nfor i,j in t:\n     if(not (tt)):\n          tt.append(k)\n          end=j\n          k+=1\n          continue\n     if(i>=end):\n          tt.append(k)\n          end=j\n     k+=1\nfor i in tt:\n     print(i,end=\" \")\nprint()\n     ", "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nbrr=list(map(int,input().split()))\nx=brr[0]\nprint(0,end=\" \")\nfor i in range(n):\n    if arr[i]>=x:\n        print(i,end=\" \")\n        x=brr[i]\n", "n = int(input())\nstart = [int(x) for x in input().split()]\nend = [int(x) for x in input().split()]\n\nout = [0]\n\npos = end[0]\n\nfor i in range(1,len(start)):\n    \n    if start[i]>= pos:\n        out.append(i)\n        pos = end[i]\n\n    \nx=' '.join([str(elem) for elem in out])\nprint(x)", "n = int(input())\r\nstart = [int(x) for x in input().split()]\r\nend = [int(x) for x in input().split()]\r\n\r\noutput = [0]\r\n\r\npos = end[0]\r\n\r\nfor i in range(1,len(start)):\r\n\r\n    if start[i] >= pos:\r\n        output.append(i)\r\n        pos = end[i]\r\n\r\n\r\nc = ' '.join([str(elem) for elem in output])\r\nprint(c)", "n=int(input())\nst=[int(i) for i in input().split()]\net=[int(i) for i in input().split()]\ntemp=et[0]\nt=[0]\nfor i in range(1,n):\n    if st[i]>=temp:\n        #print(st[i],temp)\n        temp=et[i]\n        t.append(i)\nfor i in range(len(t)):\n    print(t[i],end=\" \")", "# cook your dish here\nn = int(input())\narr1 = list(map(int, input().strip().split()))\narr2 = list(map(int, input().strip().split()))\nkey = arr2[0]\nprint(0, end = \" \")\ni = 1\nwhile i<n:\n    if arr1[i]>=key:\n        key = arr2[i]\n        print(i, end = \" \")\n    else:\n        i += 1", "try:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    test = []\n    c = brr[0]\n    test.append(0)\n    for i in range(n):\n        if arr[i]>=c:\n            test.append(i)\n            c = brr[i]\n    result = map(str, test)\n    print(' '.join(result))\nexcept EOFError:\n    pass", "t=int(input()) \nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nz=[]\nu=0\nfor i in range(0,t):\n  if x[i]>=u:\n    print(i,end=\" \")\n    u=y[i]\n  ", "N = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\ntimings = []\nfor i in range(N):\n        timings.append([l1[i],l2[i]])\n\n#timings = sorted(timings, key=lambda x :x[0])\n\nend = timings[0][1]\ntasks = [0]\nfor i in range(1,len(timings)):\n        if(timings[i][0]>=end):\n                end = timings[i][1]\n                tasks.append(i)\n\nprint(*tasks)\n", "a=int(input())\nl=list(map(int,input().split()))\nr=list(map(int,input().split()))\ne=r[0]\nans=[0]\nfor i in range(len(l)):\n    if l[i]>=e:\n        e=r[i]\n        ans.append(i)\nprint(*ans)", "# cook your dish here\na=int(input())\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\nd=[]\nq=0\nfor i in range(a):\n    if b[i]>=q:\n        d.append(i)\n        q=c[i]\n        \nfor i in d:\n    print(i,end=\" \")", "# cook your dish here\n\ntry:\n    n=int(input())\n    s=list(map(int,input().split()))\n    e=list(map(int,input().split()))\n    flag=0\n    o=[]\n    for i in range(len(s)):\n        if (s[i]>=flag):\n            o.append(i)\n            flag=e[i]\n    for i in o:\n        print(i,\" \",end=\"\")\n        \nexcept:\n    pass\n    \n"]