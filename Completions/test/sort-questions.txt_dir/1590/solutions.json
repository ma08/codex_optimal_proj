["import sys\n\nMOD = (int)(1e9+7)\n\ndef add(a, b):\n\ta += b\n\tif a >= MOD: a -= MOD\n\treturn a\n\t\ndef mul(a, b):\n\treturn (a * b) % MOD\n\nclass fenwickTree:\n\tdef __init__(self, max_val):\n\t\tself.max_val = max_val + 5\n\t\tself.tree = [0] * self.max_val\n\t\n\tdef update(self, idx, value):\n\t\tidx += 1\n\t\twhile idx < self.max_val:\n\t\t\tself.tree[idx] = add(self.tree[idx], value)\n\t\t\tidx += (idx & (-idx))\n\t\n\tdef read(self, idx):\n\t\tidx += 1\n\t\tres = 0\n\t\twhile idx > 0:\n\t\t\tres = add(res, self.tree[idx])\n\t\t\tidx -= (idx & (-idx))\n\t\treturn res\n\ninp = [int(x) for x in sys.stdin.read().split()]\n\nn = inp[0]\na = []\nfor i in range(1, n + 1):\n\ta.append(inp[i])\n\t\nsorted_array = sorted(a)\ndict = {}\nfor i in range(n):\n\tdict[sorted_array[i]] = i\n\t\nfactor = [0] * n\nfor i in range(0, n):\n\tfactor[i] = mul(i + 1, n - i)\n\t\nleft_tree = fenwickTree(n)\nfor i in range(0, n):\n\telement_idx = dict[a[i]]\n\tfactor[i] = add(factor[i], mul(n - i, left_tree.read(element_idx)))\n\tleft_tree.update(element_idx, i + 1)\n\t\nright_tree = fenwickTree(n)\nfor i in range(n - 1, -1, -1):\n\telement_idx = dict[a[i]]\n\tfactor[i] = add(factor[i], mul(i + 1, right_tree.read(element_idx)))\n\tright_tree.update(element_idx, n - i)\n\nans = 0\nfor i in range(n):\n\tans = add(ans, mul(a[i], factor[i]))\nprint(ans)\n"]