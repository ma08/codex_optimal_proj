["d, n, t = 0, int(input()), list(map(int, input().split()))\np = {a: 0 for a in set(t)}\nfor i in range(n):\n    a = t[i]\n    if not a in p: continue\n    p.pop(a)\n    s = t.count(a) - 1\n    if 2 * s < d: continue\n    if s > d: d = s\n    k = i + 1\n    for j in range(k, n):\n        if t[j] == a:\n            for b in set(t[k: j]):\n                if b in p: p[b] += 2\n            k = j + 1\n    for b in set(t[k: n]):\n        if b in p: p[b] += 1\n    for b in p:\n        if p[b] > d: d = p[b]\n        p[b] = 0\nprint(d + 1)", "d, n, t = 0, int(input()), list(map(int, input().split()))\np = {a: 0 for a in set(t)}\nfor i in range(n):\n    a = t[i]\n    if not a in p: continue\n    p.pop(a)\n    s = t.count(a) - 1\n    if 2 * s < d: continue\n    if s > d: d = s\n    k = i + 1\n    for j in range(k, n):\n        if t[j] == a:\n            for b in set(t[k: j]):\n                if b in p: p[b] += 2\n            k = j + 1\n    for b in set(t[k: n]):\n        if b in p: p[b] += 1\n    for b in p:\n        if p[b] > d: d = p[b]\n        p[b] = 0\nprint(d + 1)", "n = int(input())\na = list(map(int, input().split()))\ndp=[[0 for i in range(n+1)] for i in range(n+1)]\nans = 0\npre = 0\na = [0] + a\nfor i in range(1, n+1):\n    pre = 0\n    for j in range(i):\n        dp[i][j] = dp[j][pre]+1\n        if a[i] == a[j]:\n            pre = j\n        ans = max(ans, dp[i][j])\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ndp=[[0 for i in range(n+1)] for i in range(n+1)]\nans = 0\npre = 0\na = [0] + a\nfor i in range(1, n+1):\n    pre = 0\n    for j in range(i):\n        dp[i][j] = dp[j][pre]+1\n        if a[i] == a[j]:\n            pre = j\n        ans = max(ans, dp[i][j])\nprint(ans)", "d, n, t = 0, int(input()), list(map(int, input().split()))\n\np = {a: 0 for a in set(t)}\n\nfor i in range(n):\n\n    a = t[i]\n\n    if not a in p: continue\n\n    p.pop(a)\n\n    s = t.count(a) - 1\n\n    if 2 * s < d: continue\n\n    if s > d: d = s\n\n    k = i + 1\n\n    for j in range(k, n):\n\n        if t[j] == a:\n\n            for b in set(t[k: j]):\n\n                if b in p: p[b] += 2\n\n            k = j + 1\n\n    for b in set(t[k: n]):\n\n        if b in p: p[b] += 1\n\n    for b in p:\n\n        if p[b] > d: d = p[b]\n\n        p[b] = 0\n\nprint(d + 1)\n\n\n\n# Made By Mostafa_Khaled\n", "R = lambda: map(int, input().split())\nn = int(input())\narr = list(R())\ndp = [[0] * (n + 1) for i in range(n + 1)]\nfor i in range(n):\n    p = -1\n    for j in range(i):\n        dp[i][j] = max(dp[i][j], dp[j][p] + 1)\n        p = j if arr[j] == arr[i] else p\nprint(max(max(dp[i]) for i in range(n)) + 1)", "def get_len(a, b):\n    if a[0]>=b[0]:\n        c = a\n        a = b\n        b = c\n    i = 0\n    j = 0\n    res = 2\n    while i<len(a) and j<len(b):\n        while a[i]<=b[j]:\n            i+=1\n            if i==len(a):\n                break\n        if i==len(a):\n                break\n        res+=1\n        while a[i]>=b[j]:\n            j+=1\n            if j==len(b):\n                break\n        if j==len(b):\n                break\n        res+=1\n    return res\n\n\nn = int(input())\na = [int(e) for e in input().split()]\nd = dict()\nkeys = []\nfor i in range(len(a)):\n    x = a[i]\n    if x in d:\n        d[x].append(i)\n    else:\n        d[x] = [i]\n        keys.append(x)\nans = 0\nfor i in range(len(keys)):\n    x = keys[i]\n    for j in range(i+1, len(keys)):        \n        y = keys[j]\n        if x==y:\n            continue\n        \n        i1 = 0\n        j1 = 0\n        #print(\"___\")\n        #print(d[x], d[y])\n        xi = get_len(d[x], d[y])        \n        #print(xi)\n        ans = max(ans, xi)\nans1 = [len(d[e]) for e in d]\nans = max(ans, max(ans1))\nprint(ans)\n# 3 1 3 1 3\n        \n", "d, n, t = 0, int(input()), list(map(int, input().split()))\np = {a: 0 for a in set(t)}\nfor i in range(n):\n    a = t[i]\n    if not a in p: continue\n    p.pop(a)\n    s = t.count(a) - 1\n    if 2 * s < d: continue\n    if s > d: d = s\n    k = i + 1\n    for j in range(k, n):\n        if t[j] == a:\n            for b in set(t[k: j]):\n                if b in p: p[b] += 2\n            k = j + 1\n    for b in set(t[k: n]):\n        if b in p: p[b] += 1\n    for b in p:\n        if p[b] > d: d = p[b]\n        p[b] = 0\nprint(d + 1)", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn = mint()\n\ta = [None]*n\n\ti = 0\n\tfor v in mints():\n\t\ta[i] = (v, i) \n\t\ti += 1\n\ta.sort()\n\ti = 0\n\tr = 0\n\twhile i < n:\n\t\tj = i + 1\n\t\tx = a[i][0]\n\t\twhile j < n and a[j][0] == x:\n\t\t\tj += 1\n\t\tr = max(r, j-i)\n\t\tni = j\n\t\twhile j < n:\n\t\t\tjj = j\n\t\t\ty = a[j][0]\n\t\t\tii = i\n\t\t\tif a[ii][1] < a[jj][1]:\n\t\t\t\tcnt = 1\n\t\t\t\tleft = a[ii][1]\n\t\t\t\tii += 1\n\t\t\telse:\n\t\t\t\tcnt = 0\n\t\t\t\tleft = -1\n\t\t\tfail = False\n\t\t\twhile True:\n\t\t\t\twhile True:\n\t\t\t\t\tif jj >= n or a[jj][0] != y:\n\t\t\t\t\t\tfail = True\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif a[jj][1] > left:\n\t\t\t\t\t\tleft = a[jj][1]\n\t\t\t\t\t\tcnt += 1\n\t\t\t\t\t\tjj += 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\tjj += 1\n\t\t\t\tif fail:\n\t\t\t\t\tbreak\n\t\t\t\twhile True:\n\t\t\t\t\tif ii >= ni:\n\t\t\t\t\t\tfail = True\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif a[ii][1] > left:\n\t\t\t\t\t\tleft = a[ii][1]\n\t\t\t\t\t\tcnt += 1\n\t\t\t\t\t\tii += 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\tii += 1\n\t\t\t\tif fail:\n\t\t\t\t\tbreak\n\t\t\tr = max(r, cnt)\n\t\t\twhile jj < n and a[jj][0] == y:\n\t\t\t\tjj += 1\n\t\t\tj = jj\n\t\ti = ni\n\tprint(r)\n\nsolve()\n", "import sys\nfrom math import log2,floor,ceil,sqrt\n# import bisect\n# from collections import deque\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10**9+7\n\nn = int(ri())\narr = Ri()\na = sorted(arr)\ndic = {}\nite = 1\nfor i in range(n):\n    if a[i] not in dic:\n        dic[a[i]] = ite\n        ite+=1\nfor i in range(n):\n    arr[i] = dic[arr[i]]\ndp = list2d(n,n+1,0)\nfor i in range(n):\n    for j in range(n+1):\n        dp[i][j] = 1\nmaxx = 1\nfor i in range(1,n):\n    for j in range(i-1,-1,-1):\n        dp[i][arr[j]] = max(dp[i][arr[j]], dp[j][arr[i]]+1)\n        maxx = max(maxx,dp[i][arr[j]])\nprint(maxx)\n\n\n\n\n", "n = int(input())\nls = list(map(int, input().split()))\ndp = [[1 for i in range(n)] for j in range(n)]\nlaspos = [None] * (max(ls) + 1)\nfor i in range(n):\n\tfor j in range(i):\n\n\t\tif laspos[ls[i]] is not None:\n\t\t\tdp[i][j] = 1 + dp[j][laspos[ls[i]]]\n\t\telse:\n\t\t\tdp[i][j] += 1\n\t\tlaspos[ls[j]] = j\n\nmx = -100000\nfor i in range(n):\n\tfor j in range(n):\n\t\tmx = max(dp[i][j], mx)\nprint(mx)\n", "def function(n , array):\n    grid = [ {} for i in range(n)]\n\n    if(n <= 2):\n        print(n)\n        return\n\n    global_max = -10\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            diff = array[i] - array[j]\n\n            max_val = 1\n            if((-diff) in grid[j].keys()):\n                max_val = max(grid[j][(-diff)] + 1, max_val)\n\n            if(diff in grid[i].keys()):\n                max_val = max(max_val, grid[i][diff])\n                grid[i][diff] = max_val\n            else:\n                grid[i][diff] = max_val\n\n            global_max = max(global_max, max_val)\n\n    print(global_max + 1)\n\nn = int(input())\narray = [ int(x) for x in input().split() ]\nfunction(n, array)", "# WHY IS RUBY SO SLOW????\ninput()\na=[*list(map(int,input().split()))]\nr={}\nfor i, x in enumerate(list(set(a))):\n\tr[x] = i\nn = len(r)\nm = 0\na = [r[x] for x in a]\nfor i,x in enumerate(a):\n\th=[0 for _ in range(n)]\n\tl=[-2 for _ in range(n)]\n\tlx = -1\n\tfor j,y in enumerate(a[i+1:]):\n\t\tif y == x:\n\t\t\tlx = j\n\t\tif l[y] < lx:\n\t\t\th[y] += 1\n\t\tl[y] = j\n\tfor k in range(n):\n\t\tif k == x:\n\t\t\th[k] = h[k] + 1\n\t\telif l[k] < lx:\n\t\t\th[k] = 2*h[k] + 1\n\t\telse:\n\t\t\th[k] = 2*h[k]\n\tm = max(m, max(h+[1]))\nprint(m)\n", "n=int(input())\nb=list(map(int,input().split()))\ndp=[[1]*n for i in range(n)]\nd,k={},0\nfor i in range(n):\n\tif b[i] not in d:\n\t\td[b[i]]=k\n\t\tk+=1\n\tb[i]=d[b[i]]\nd.clear()\nfor i in range(n):\n\tfor j in range(i):\n\t\tdp[i][b[j]]=max(1+dp[j][b[i]],dp[i][b[j]])\nans=0\nfor l in dp:\n\tans=max(ans,max(l))\nprint(ans)", "#!/usr/bin/env python3\nfrom sys import stdin\n    \n    \ndef solve(tc):\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().split()))\n    \n    elems = []\n    idxcnt = 0\n    idx = dict()\n    for i in range(n):\n        if seq[i] not in idx:\n            idx[seq[i]] = idxcnt\n            idxcnt += 1\n            elems.append([])\n        elems[idx[seq[i]]].append(i)\n    \n    ans = 1\n    for li in elems:\n        ans = max(ans, len(li))\n    \n    m = len(elems)\n    for i in range(m):\n        for j in range(m):\n            if i == j:\n                continue\n            cur = -1\n            cnt = 0\n            leni, lenj = len(elems[i]), len(elems[j])\n            pi, pj = 0, 0\n            while True:\n                while pi<leni and elems[i][pi]<cur:\n                    pi += 1\n\n                if pi == leni:\n                    break\n                cur = elems[i][pi]\n                cnt += 1\n                pi += 1\n\n                while pj<lenj and elems[j][pj]<cur:\n                    pj += 1\n\n                if pj == lenj:\n                    break\n                cur = elems[j][pj]\n                cnt += 1\n                pj += 1\n            ans = max(ans, cnt)\n    \n    print(ans)\n    \n    \ntc = 1\nsolve(tc)"]