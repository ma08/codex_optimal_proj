["\n#taken from https://stackoverflow.com/questions/30698441/optimal-way-to-find-sums-of-all-contiguous-sub-arrays-max-difference\ndef max_sums(d):\n    stack = [(-1, float('inf'))]\n    sum_ = 0\n    for i, x in enumerate(d):\n        while x > stack[-1][1]:\n            prev_i, prev_x = stack.pop()\n            prev_prev_i, prev_prev_x = stack[-1]\n            sum_ += prev_x * (i - prev_i) * (prev_i - prev_prev_i)\n        stack.append((i, x))\n    while len(stack) > 1:\n        prev_i, prev_x = stack.pop()\n        prev_prev_i, prev_prev_x = stack[-1]\n        sum_ += prev_x * (len(d) - prev_i) * (prev_i - prev_prev_i)\n    return sum_\n\ndef max_differences_sum(d):\n    return max_sums(d) + max_sums([-x for x in d])\n\nn=int(input())\nl=list(map(int,input().split()))\nprint(max_differences_sum(l))", "n = int(input())\na = list(map(int,input().split()))\nleft = [None for _ in range(n)]\nright = [None for _ in range(n)]\nleft1 = [None for _ in range(n)]\nright1 = [None for _ in range(n)]\nclass Stack(object):\n    def __init__(self):\n        self.c = []\n    def push(self,new):\n        self.c.append(new)\n    def pop(self):\n        return self.c.pop(-1)\n    def vide(self):\n        return self.c == []\n    def peek(self):\n        return self.c[-1]\ndef calculleft():\n    s = Stack()\n    for i in range(n):\n        while not s.vide() and a[s.peek()] > a[i]:\n            s.pop()\n        if not s.vide():\n            left[i] = s.peek()\n        else:\n            left[i] = -1\n        s.push(i)\n\ndef calculright():\n    s = Stack()\n    for i in range(n-1,-1,-1):\n        while not s.vide() and a[s.peek()] >= a[i]:\n            s.pop()\n        if not s.vide():\n            right[i] = s.peek()\n        else:\n            right[i] = n\n        s.push(i)\n        \ndef calculleft1():\n    s = Stack()\n    for i in range(n):\n        while not s.vide() and a[s.peek()] < a[i]:\n            s.pop()\n        if not s.vide():\n            left1[i] = s.peek()\n        else:\n            left1[i] = -1\n        s.push(i)\n\ndef calculright1():\n    s = Stack()\n    for i in range(n-1,-1,-1):\n        while not s.vide() and a[s.peek()] <= a[i]:\n            s.pop()\n        if not s.vide():\n            right1[i] = s.peek()\n        else:\n            right1[i] = n\n        s.push(i)\n     \nres = 0\ncalculleft()\ncalculright()\ncalculleft1()\ncalculright1()\n\nres2 = 0\nfor i in range(n):\n    res += (i-left[i])*(right[i]-i)*a[i]\n    res2 += (i-left1[i])*(right1[i]-i)*a[i]\nprint(res2-res)\n    \n", "n = int(input())\na = list(map(int, input().split()))\nleft = [-1 for i in range(n)]\nright = [n for i in range(n)]\nstack = []\nfor i in range(n):\n    while stack and a[stack[-1]] > a[i]:\n        stack.pop()\n    if stack:\n        left[i] = stack[-1]\n    stack.append(i)\nstack = []\nfor i in range(n - 1, -1, -1):\n    while stack and a[stack[-1]] >= a[i]:\n        stack.pop()\n    if stack:\n        right[i] = stack[-1]\n    stack.append(i)\nres = 0\nfor i in range(n):\n    res -= a[i] * (i - left[i]) * (right[i] - i)\nleft = [-1 for i in range(n)]\nright = [n for i in range(n)]\nstack = []\nfor i in range(n):\n    while stack and a[stack[-1]] < a[i]:\n        stack.pop()\n    if stack:\n        left[i] = stack[-1]\n    stack.append(i)\nstack = []\nfor i in range(n - 1, -1, -1):\n    while stack and a[stack[-1]] <= a[i]:\n        stack.pop()\n    if stack:\n        right[i] = stack[-1]\n    stack.append(i)\nfor i in range(n):\n    res += a[i] * (i - left[i]) * (right[i] - i)\nprint(res)", "n = int(input())\na = list(map(int, input().split()))\n\ndef findMinimumL(a):\n    A = [-1]*len(a)\n    for i,x in enumerate(a):\n        j = i - 1 \n        while j != -1 and a[j] > a[i]:\n            j = A[j]\n        A[i] = j\n    return A\n\ndef findMaximumL(a):\n    A = [-1]*len(a)\n    for i,x in enumerate(a):\n        j = i - 1 \n        while j != -1 and a[j] < a[i]:\n            j = A[j]\n        A[i] = j\n    return A\n\ndef findMinimumR(a):\n    A = [-1]*len(a)\n    for i in range(len(a) - 1,-1,-1):\n        j = i + 1\n        while j != len(a) and a[j] >= a[i]:\n            j = A[j]\n        A[i] = j\n    return A\n\ndef findMaximumR(a):\n    A = [-1]*len(a)\n    for i in range(len(a) - 1,-1,-1):\n        j = i + 1\n        while j != len(a) and a[j] <= a[i]:\n            j = A[j]\n        A[i] = j\n    return A\n\ndef minimumSum():\n    L,R = findMinimumL(a), findMinimumR(a)\n    ans = 0\n    for i,x in enumerate(a):\n        ans += (i - L[i])*(R[i] - i)*x\n    return ans\n\ndef maximumSums():\n    L,R = findMaximumL(a), findMaximumR(a)\n    ans = 0\n    for i,x in enumerate(a):\n        ans += (i - L[i])*(R[i] - i)*x\n    return ans\n\nprint(maximumSums() - minimumSum())\n\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\ndef gt(a,b):\n\treturn a>b\n\ndef gte(a,b):\n\treturn a>=b\n\ndef lt(a,b):\n\treturn a<b\n\ndef lte(a,b):\n\treturn a<=b\n\ndef d(a,cmp,val):\n\tn = len(a)\n\tst = [(val,-1)]\n\tr = [0]*n\n\tfor i in range(len(a)):\n\t\tv = a[i]\n\t\twhile cmp(v,st[-1][0]):\n\t\t\tst.pop()\n\t\tr[i] = st[-1][1]\n\t\tst.append((v,i))\n\t\t#print(st)\n\treturn r\ndef rr(a):\n\tn = len(a)\n\tr = [0]*n\n\tfor i in range(n):\n\t\tr[n-i-1] = n-a[i]-1\n\treturn r\nn = mint()\na = list(mints())\nb = a[::-1]\nMl = d(a,gt,(10**9))\nMr = rr(d(b,gte,(10**9)))\nml = d(a,lt,-(10**9))\nmr = rr(d(b,lte,-(10**9)))\n#print(a)\n#print(Ml)\n#print(Mr)\n#print(b)\n#print(ml)\n#print(mr)\nr = 0\nfor i in range(n):\n\tr += a[i]*((i-Ml[i])*(Mr[i]-i)-(i-ml[i])*(mr[i]-i))\nprint(r)", "import sys\n\ndef pro():\n\treturn sys.stdin.readline().strip()\n\ndef rop():\n\treturn map(int, pro().split())\n\ndef a_b_b(a, b):\n\treturn a > b\n\ndef a_br_b(a, b):\n\treturn a >= b\n\ndef a_m_b(a, b):\n\treturn a < b\n\ndef a_mr_b(a, b):\n\treturn a <= b\n\ndef ry(a, c, t):\n\tq = len(a)\n\tx = [(t, -1)]\n\tr = [0] * q\n\t\n\tfor i in range(len(a)):\n\t\tv = a[i]\n\t\t\n\t\twhile c(v, x[-1][0]):\n\t\t\tx.pop()\n\t\tr[i] = x[-1][1]\n\t\tx.append((v, i))\n\t\t\n\treturn r\n\ndef tyr(a):\n\tq = len(a)\n\tr = [0] * q\n\t\n\tfor i in range(q):\n\t\tr[q - i - 1] = q - a[i] - 1\n\t\t\n\treturn r\n\ndef main():\n\ts = int(pro())\n\ta = list(rop())\n\tz = a[::-1]\n\to = 10 ** 9\n\tr = 0\n\t\n\tm = ry(a, a_b_b, o)\n\tn = tyr(ry(z, a_br_b, o))\n\tb = ry(a, a_m_b, -o)\n\tv = tyr(ry(z, a_mr_b, -o))\n\t\n\tfor i in range(s):\n\t\tr += a[i] * ((i - m[i]) * (n[i] - i) - (i - b[i]) * (v[i] - i))\n\t\t\n\tprint(r)\nmain()", "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue, bisect\n#sys.stdin = open(\"input.txt\", \"r\")\nMOD = 10**9+7\nsys.setrecursionlimit(1000000)\n\ndef mxr(x):\n    n = len(x)\n    ans = [n for i in range(n)]\n    s = []\n    for i in range(n):\n        while len(s) > 0 and x[s[-1]] < x[i]:\n            ans[s.pop()] = i\n        s.append(i)\n    return ans\n\ndef mnr(x):\n    n = len(x)\n    ans = [n for i in range(n)]\n    s = []\n    for i in range(n):\n        while len(s) > 0 and x[s[-1]] > x[i]:\n            ans[s.pop()] = i\n        s.append(i)\n    return ans\n\ndef mxl(x):\n    ans = [-1 for i in range(n)]\n    s = []\n    for i in range(n-1, -1, -1):\n        while len(s) > 0 and x[s[-1]] <= x[i]:\n            ans[s.pop()] = i\n        s.append(i)\n    return ans\n\ndef mnl(x):\n    ans = [-1 for i in range(n)]\n    s = []\n    for i in range(n-1, -1, -1):\n        while len(s) > 0 and x[s[-1]] >= x[i]:\n            ans[s.pop()] = i\n        s.append(i)\n    return ans\n\nn = int(input())\na = list(map(int, input().split()))\nmaxl = mxl(a)\nminl = mnl(a)\nmaxr = mxr(a)\nminr = mnr(a)\nans = 0\nfor i in range(n):\n    mxrng = (maxr[i]-i)*(i-maxl[i])\n    mnrng = (minr[i]-i)*(i-minl[i])\n    ans += a[i]*(mxrng-mnrng)\nprint(ans)", "def solve1(a, n):  \n    left=[]\n    st=[]\n    i=0\n    while i<(n):\n        if not st:\n            left.append(-1)\n            st.append(i)\n            \n        elif st and a[i]<a[st[-1]]:\n            left.append(st[-1])\n            st.append(i)\n        else:\n            while st and a[i]>a[st[-1]]:\n                st.pop()\n                \n            if not st:\n                st.append(i)\n                left.append(-1)\n                \n            else:\n                left.append(st[-1])\n                st.append(i)\n                \n                \n        i+=1\n    # print(left)\n    right=[]\n    st=[]\n    i=n-1\n    while i>(-1):\n        if not st:\n            right.append(n)\n            st.append(i)\n            \n        elif st and a[i]<a[st[-1]]:\n            right.append(st[-1])\n            st.append(i)\n        else:\n            while st and a[i]>=a[st[-1]]:\n                st.pop()\n                \n            if not st:\n                st.append(i)\n                right.append(n)\n                \n            else:\n                right.append(st[-1])\n                st.append(i)\n                \n                \n        i-=1\n    right=right[::-1]\n    c=0\n    for i in range(len(left)):\n        x=(right[i]-i)*(i-left[i])*a[i]\n        # print(x)\n        if x==0:\n            c+=a[i]\n        else:\n            c+=x\n    # print(c)\n    # print(a)\n    # print(left)\n    # print(right)\n            \n    return c\n\n    \n\n            \ndef solve2(a, n): \n    left=[]\n    st=[]\n    i=0\n    while i<(n):\n        if not st:\n            left.append(-1)\n            st.append(i)\n            \n        elif st and a[i]>a[st[-1]]:\n            left.append(st[-1])\n            st.append(i)\n        else:\n            while st and a[i]<a[st[-1]]:\n                st.pop()\n                \n            if not st:\n                st.append(i)\n                left.append(-1)\n                \n            else:\n                left.append(st[-1])\n                st.append(i)\n                \n                \n        i+=1\n    # print(left)\n    right=[]\n    st=[]\n    i=n-1\n    while i>(-1):\n        if not st:\n            right.append(n)\n            st.append(i)\n            \n        elif st and a[i]>a[st[-1]]:\n            right.append(st[-1])\n            st.append(i)\n        else:\n            while st and a[i]<=a[st[-1]]:\n                st.pop()\n                \n            if not st:\n                st.append(i)\n                right.append(n)\n                \n            else:\n                right.append(st[-1])\n                st.append(i)\n                \n                \n        i-=1\n    right=right[::-1]\n    # print(right)\n    c=0\n    for i in range(len(left)):\n        x=(right[i]-i)*(i-left[i])*a[i]\n        # print(x)\n        if x==0:\n            c+=a[i]\n        else:\n            c+=x\n    # print(c)\n    # print(a)\n    # print(left)\n    # print(right)\n            \n    return c\n\n\n\nn=int(input())\narr=[int(x) for x in input().split()]\n# solve2(arr,n)\n# print(solve1(arr,n))\n# print(solve2(arr,n))\n# print()\n# (solve2(arr,n))\n\nprint(solve1(arr,n)-solve2(arr,n))"]