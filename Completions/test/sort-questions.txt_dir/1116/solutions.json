["\nfrom collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_str(): return list(sys.stdin.readline().split())\n\n\ndef gcd(a,b):\n\twhile b:\n\t\ta,b = b, a%b\n\treturn a\n\nT = inp()\nfor _ in range(T):\n    a,b,k = inpl()\n    a,b = min(a,b), max(a,b)\n\n    n = gcd(a,b)\n    # while n < b:\n    #     n += a\n    #     cnt += 1\n    cnt = -((n-b)//a)\n\n\n    if cnt >= k:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nn = int(input())\nfor i in range(n):\n    r, b, k = list(map(int, input().split()))\n    if b > r:\n        r, b = b, r\n    r, b = r // gcd(r, b), b // gcd(r, b)\n    if (r + b - 2) // b >= k:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n", "from math import gcd\n\nt = int(input())\n\nfor _ in range(t):\n    r, b, k = list(map(int, input().split()))\n    r, b = sorted([r, b])\n    a = gcd(r, b)\n    x = (b - a - 1) // r + 1\n    print(\"REBEL\" if x >= k else \"OBEY\")\n", "def gcd(a, b):\n    while b: a, b = b, a % b\n    return abs(a)\n\nN = int(input())\nfor _ in range(N):\n    a, b, k = list(map(int, input().split()))\n    g = gcd(a, b)\n    mi = min(a, b)\n    ma = max(a, b)\n    A = ma//g - 1\n    B = mi//g\n    \n    if B * (k-1) < A:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n", "\"\"\"This code was written by\nRussell Emerine - linguist,\nmathematician, coder,\nmusician, and metalhead.\"\"\"\nfrom math import gcd\nn = int(input())\nfor _ in range(n):\n  r, b, k = list(map(int, input().split()))\n  g = gcd(r, b)\n  r //= g\n  b //= g\n  if (r + b - 2) // b >= k: print(\"REBEL\")\n  elif (b + r - 2) // r >= k: print(\"REBEL\")\n  else: print(\"OBEY\")\n", "from math import gcd\n\nn = int(input())\n\nfor i in range(n):\n    r,b,k = list(map(int,input().split()))\n    if r == b:\n        print('OBEY')\n        continue\n    if r < b:\n        r,b = b,r\n    # a > b\n    g = gcd(r, b)\n    m = 1 + (r - g - 1) // b\n    if m >= k:\n        print('REBEL')\n    else:\n        print('OBEY')\n", "from math import ceil\ndef gcd(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\nt = int(input())\nfor kkk in range(t):\n    a, b, k = map(int, input().split())\n    if a == b:\n        print('OBEY')\n    else:\n        g = gcd(a, b)\n        a //= g\n        b //= g\n        a, b = max(a, b), min(a, b)\n        kk = (a - 1) // b + (1 if (a - 1) % b != 0 else 0)\n        if kk >= k:\n            print('REBEL')\n        else:\n            print('OBEY')", "from heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nimport itertools\nfrom itertools import permutations,combinations\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n#import random\ndef I():\n    return int(input())\ndef MI():\n    return map(int,input().split())\ndef LI():\n    return [int(i) for i in input().split()]\ndef LI_():\n    return [int(i)-1 for i in input().split()]\ndef StoI():\n    return [ord(i)-97 for i in input()]\ndef ItoS(nn):\n    return chr(nn+97)\ndef show(*inp,end='\\n'):\n    if show_flg:\n        print(*inp,end=end)\nYN=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\nu_alp=string.ascii_uppercase\nts=time.time()\nsys.setrecursionlimit(10**5)\ninput=lambda: sys.stdin.readline().rstrip()\n\nshow_flg=False\nshow_flg=True\n\nOR=['OBEY','REBEL']\n\ndef gcd(x,y):\n    y,x=max(x,y),min(x,y)\n    if y%x==0:\n        return x\n    return gcd(x,y%x)\n    \nt=I()\nfor _ in range(t):\n    ans=0\n    r,b,k=LI()\n    r,b=max(r,b),min(r,b)\n    \n    g=gcd(r,b)\n    r,b=r//g,b//g\n    \n    if (r-2)//b>=k-1:\n        if r==b and k==1:\n            a=0\n        else:\n            a=1\n    else:\n        a=0\n    print(OR[a])\n    ", "def gcd(a,b):\n    if b==0:return a\n    return(gcd(b,a%b))\nfor i in ' '*int(input()):\n    r,b,k=map(int,input().split())\n    g=gcd(r,b)\n    r/=g\n    b/=g\n    if r>b:r,b=b,r\n    if r==1:\n        if b>k:print('REBEL')\n        else:print('OBEY')\n    else:\n        if r*(k-1)+1<=b-1:print('REBEL')\n        else:print('OBEY')", "#!/usr/bin/env python3\nimport sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    r, b, k = [int(item) for item in input().split()]\n    if r > b:\n        r, b = b, r\n    g = gcd(r, b)\n    maxima = (b - g + r - 1) // r\n    if maxima >= k:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")", "from math import gcd\nfor i in range(int(input())):\n    r, b, k = map(int, input().split())\n    if r > b:\n        r, b = b, r\n    t = r * b // (gcd(r, b))\n    t -= 1\n    m = (t // r) // (t // b + 1)\n    if (t // r) % (t // b + 1):\n        m += 1\n    # print(m)\n    if k <= m:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")", "import math\n\nT=int(input())\nfor i in range(T):\n  r,b,k=map(int,input().split())\n  if r==b:\n    print(\"OBEY\")\n    continue\n  if r>b:\n    tem=r\n    r=b\n    b=tem\n  gicd = math.gcd(r,b)\n  out = int(((b+r-gicd)-1)/r)\n  if out >= k:\n    print(\"REBEL\")\n  else:\n    print(\"OBEY\")", "n = int(input())\n\ndef gcd(x,y):\n    \n    while x != 0 and y != 0:\n        x,y = max(x,y), min(x,y)\n        x %= y\n    return max(x,y)\n\nfor i in range(n):\n\n    r, b, k = list(map(int,input().split()))\n    g = gcd(r, b)\n    r,b = max(r,b)//g, min(r,b)//g\n    if (r % b == 0 and r // b - 1 < k) or (r % b == 1 and r // b < k) or \\\n        (r % b > 1 and r // b + 1 < k):\n        print(\"OBEY\")\n    else:\n        print(\"REBEL\")\n", "import sys\nfrom math import gcd\n\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, s.split())) for s in sys.stdin)\n\nt, = next(reader)\nfor _ in range(t):\n    r, b, k = next(reader)\n    if r > b:\n        r, b = b, r\n    g = gcd(r, b)\n    seq = (b - g - 1) // r + 1\n    print('OBEY' if seq < k else 'REBEL')\n    \n# inf.close()\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nimport math\n\nfor testcases in range(t):\n    r,b,k=list(map(int,input().split()))\n\n    x=math.gcd(r,b)\n    r//=x\n    b//=x\n\n    if 1+min(r,b)*(k-1)<max(r,b):\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n    \n", "from math import gcd\nt = int(input())\nfor i in range(t):\n    r, b, k = [int(x) for x in input().split()]\n    if b > r:\n        b, r = r, b\n    g = gcd(r, b)\n    c = (r - g - 1) // b + 1\n    if (c >= k):\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n", "from math import gcd\n\nT = int(input())\nfor i in range(T):\n    r, b, k = map(int, input().split())\n    if r > b:\n        tmp = r\n        r = b\n        b = tmp\n    \n    g = gcd(r, b)\n    r = r // g\n    b = b // g\n    if r*(k-1)+1<b:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")", "def gcd(a: int, b: int) -> int:\n\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, k = map(int, input().split())\n    if a > b:\n        a, b = b, a\n    \n    gcd_ab = gcd(a, b)\n    tmp = a % gcd_ab + gcd_ab\n    if -(-(b-tmp) // a) < k:\n        print(\"OBEY\")\n    else:\n        print(\"REBEL\")", "n=int(input())\ndef m(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    while a != b:\n        c=a%b\n        a=b\n        b=c\n        if c == 0:\n            break\n    return a\nfor i in range(n):\n    r,b,k=[int(x) for x in input().split(' ')]\n    a=m(r,b)\n    x=max(r,b)\n    y=min(r,b)\n    if (2*x) % y != 0:\n        if x>=(k-1)*y+2*a:\n            print('REBEL')\n        else:\n            print('OBEY')\n    elif x % y == 0:\n        if x >= (k+1)*y:\n            print('REBEL')\n        else:\n            print('OBEY')\n    else:\n        if x >= k*y+a:\n            print('REBEL')\n        else:\n            print('OBEY')\n", "t=int(input())\nimport math\nfor _ in range(t):\n\ta,b,k=map(int,input().split())\n\tif a<b:\n\t\ta,b=b,a\n\tif a==b:\n\t\tp=1\n\telif a%b==0:\n\t\tp=a//b-1\n\telse:\n\t\tq=math.gcd(a,b)\n\t\ta//=q\n\t\tb//=q\n\t\tp=math.ceil((a-1)/b)\n\tif p>=k:\n\t\tprint(\"REBEL\")\n\telse:\n\t\tprint(\"OBEY\")", "t = int(input())\n\nfor i in range (t):\n    r, b, k = list(map(int,input().split()))\n    if r > b:\n        temp = r\n        r = b\n        b = temp\n    a = b//r\n    c = b % r\n    if c == 0:\n        a -= 1\n    if c > 0 and r % c > 0:\n        a += 1\n    if a >= k:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")", "# https://codeforces.com/contest/1260/problem/C\n\nfrom fractions import gcd\nn = int(input())\nfor i in range(n):\n    r, b, k = list(map(int, input().split()))\n    _gcd = gcd(r, b)\n    mn = min(r, b) / _gcd\n    mx = max(r, b) / _gcd\n    if (mx - 1) > mn * (k - 1):\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")\n", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\nimport math\n\n\nt = int(input())\nfor __ in range(t):\n    r, b, k = list(map(int, input().split()))\n    gcd_rb = gcd(r, b)\n    r_n = r//gcd_rb\n    b_n = b//gcd_rb\n    if r_n < b_n:\n        r_n, b_n = b_n, r_n\n    streak = math.ceil((r_n-1)/b_n)\n    if streak < k:\n        print(\"OBEY\")\n    else:\n        print(\"REBEL\")\n", "import sys\nimport math\n\nn = int(input())\n\nfor i in range(n):\n    r, b, k = map(int, input().split())\n\n    if r > b:\n        r, b = b, r\n    \n    lcm = r * b // math.gcd(r,b)\n    if (b - math.gcd(r, b) - 1) // r + 1 >= k:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")", "t = int(input())\ndef ext_gcd(p, q):\n    # p * x + q * y = gcd(p,q) = g \u3068\u306a\u308b\u6574\u6570(x, y, g)\u3092\u6c42\u3081\u308b\n    if q == 0:\n        return (p, 1, 0)\n    g, y, x = ext_gcd(q, p%q)\n    y -= (p//q)*x\n    return (g, x, y)\nfor _ in range(t):\n    r,b,k = map(int,input().split())\n    ponta = ext_gcd(r,b)[0]\n    if ponta <= b-1-(k-1)*r or ponta <= r-1-(k-1)*b:\n        print(\"REBEL\")\n    else:\n        print(\"OBEY\")"]