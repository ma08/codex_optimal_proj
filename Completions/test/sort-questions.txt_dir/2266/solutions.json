["import os, sys, bisect, copy\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache   #use @lru_cache(None)\nif os.path.exists('in.txt'): sys.stdin=open('in.txt','r')\nif os.path.exists('out.txt'): sys.stdout=open('out.txt', 'w')\n#\ndef input(): return sys.stdin.readline()\ndef mapi(arg=0): return map(int if arg==0 else str,input().split())\n#------------------------------------------------------------------\n\nn,k,d = mapi()\nplc = list(mapi())\ngr = defaultdict(list)\nfor i in range(1,n):\n    u,v = mapi()\n    gr[u].append([v,i])\n    gr[v].append([u,i])\nq = deque()\nfor i in plc:\n    q.append((i,0))\nvis = {}\nres = [0]*(n+1)\nwhile q:\n    tmp,par = q.popleft()\n    if tmp in vis:\n        continue\n    vis[tmp] = 1\n    for item in gr[tmp]:\n        if item[0] != par:\n            if item[0] in vis:\n                res[item[1]] = 1\n            else:\n                q.append((item[0],tmp))\ncnt = 0\nans = []\nfor i in range(1,n+1):\n    if res[i]==1:\n        cnt+=1\n        ans.append(i)\nprint(cnt)\nprint(*ans)", "import math\nimport sys\ninput = sys.stdin.readline\ninf = int(1e9)\nn, m, d = list(map(int, input().split()))\nl = [0] * (n - 1)\nr = [0] * (n - 1)\ng = [[] for _ in range(n)]\n\nstation = [int(_) - 1 for _ in input().split()]\nfor i in range(n - 1):\n    l[i], r[i] = [int(i) - 1 for i in input().split()]\n    g[l[i]].append(i)\n    g[r[i]].append(i)\n\nqueue = []\ndist = [inf] * n\nneed = [True] * (n - 1)\nfor i in station:\n    queue.append(i)\n    dist[i] = 0\ncur = 0\nwhile cur < len(queue):\n    x, cur = queue[cur], cur + 1\n    for edge in g[x]:\n        y = l[edge] ^ r[edge] ^ x\n        if dist[y] > 1 + dist[x]:\n            dist[y] = 1 + dist[x]\n            queue.append(y)\n            need[edge] = False\nprint(sum(need))\nedgeList = []\nfor i in range(n - 1):\n    if need[i]:\n        edgeList.append(str(i + 1))\nprint(' '.join(edgeList))\n"]