["n, k = map(int, input().split())\na    = list(map(int, input().split()))\na    = a[::-1]\ns    = [a[0]]\nS    = 0\n\nfor x in a[1:]:\n    s.append(s[-1]+x)\n\nS   += s[-1]\ns.pop()\nk   -= 1\ns   = sorted(s)\n\ni=0\nwhile i<=k-1:\n    S += s.pop()\n    i += 1\nprint(S)    ", "N, K = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nB = [0] * N\nB[N-1] = A[N-1]\nfor i in range(N-1)[::-1]:\n    B[i] = B[i+1] + A[i]\n\nprint(sum(sorted(B[1:])[::-1][:K-1])+B[0])\n", "n, k = map(int, input().split())\nmass = [int(i) for i in input().split()]\nmass = mass[::-1]\nsumm = 0\nm = []\nfor i in range(n - 1):\n    summ += mass[i]\n    m.append(summ)\nm = sorted(m, reverse = True)\nprint(sum(mass) + sum(m[:k - 1]))", "\ndef main():\n    buf = input()\n    buflist = buf.split()\n    n = int(buflist[0])\n    k = int(buflist[1])\n    buf = input()\n    buflist = buf.split()\n    a = list(map(int, buflist))\n    a_sum = []\n    for i in range(1, len(a)+1):\n        if not a_sum:\n            a_sum.append(a[-i])\n        else:\n            a_sum.append(a[-i]+a_sum[-1])\n    cost = a_sum.pop()\n    a_sum.sort(reverse=True)\n    for i in range(k-1):\n        cost += a_sum[i]\n    print(cost)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nSUM=[0]\nfor a in A[::-1]:\n    SUM.append(SUM[-1]+a)\n\nSUM=SUM[::-1]\n#print(SUM)\n\nANS=SUM[0]\nANS+=sum(sorted(SUM[1:-1],reverse=True)[:k-1])\nprint(ANS)\n\n", "def gns():\n    return list(map(int,input().split()))\nn,k=gns()\nns=gns()\nsm=[ns[-1]]\nfor i in reversed(list(range(n-1))):\n    sm.append(sm[-1]+ns[i])\nans=sm.pop()\nsm.sort()\nif k>1:\n    ans+=sum(sm[-k+1:])\nprint(ans)\n\n\n\n", "import sys\n\nn, k = list(map(int,sys.stdin.readline().strip().split()))\na = list(map(int,sys.stdin.readline().strip().split()))\nL = [a[-1]] * n\nfor i in range (1, n):\n    L[i] = L[i-1] +a[n-i-1]\nx = L.pop()\nL.sort()\nfor i in range (0, k-1):\n    x = x + L[n-2-i]\nprint(x)", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\nn,k=mi()\n\nl=lm()\n\nrunning=[0]*(n-1)\n\nfor i in range(len(l)-1):\n\tif i==0:\n\t\trunning[i]=(l[i],i+1)\n\telse:\n\t\trunning[i]=(running[i-1][0]+l[i],i+1)\n\nrunning.sort()\n\nsliced=running[:k-1]\n\nsliced.sort(key= lambda x: x[1])\n\ncost=0\nlast=0\n#print(sliced)\nfor i in range(len(sliced)):\n\t\n\tcost+=(i+1)*sum(l[last:sliced[i][1]])\n\tlast=sliced[i][1]\n\ncost+=k*sum(l[last:])\n\n\nprint(cost)\n\n\n\n\n\t\t\n\n\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nruiseki = [0]*(n+1)\nans = 0\nfor i in range(n):\n    ruiseki[i+1] = ruiseki[i] + a[i]\nbb = sorted(ruiseki[1:n])\n\nans += ruiseki[-1]*k\nfor i in range(k-1):\n    ans -= bb[i]\nprint(ans)\n\n\n\n", "li = input().split()\nn = int(li[0])\nk = int(li[1])\na = input().split()\nfor i in range(n):\n\ta[i] = int(a[i])\nfor i in range(n-2,-1,-1):\n\ta[i] += a[i+1]\nsa = sorted(a[1:])\nans = a[0]\nfor i in range(k-1):\n\tans += sa[n-2-i]\nprint(ans)", "import math\nn,k=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nb=[]\na.reverse()\ncounter=0\nfor i in range(n-1):\n    counter+=a[i]\n    b.append(counter)\nb.sort(reverse=True)\nprint(sum(b[:k-1])+sum(a))\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nif n==1:\n    print(a[0])\nelse:\n    p=[a[-1]]+[0]*(n-2)\n    for i in range(n-2):\n        p[i+1]=p[i]+a[-i-2]\n    j=p[-1]+a[0]\n    p.sort(reverse=True)\n    print(j+sum(p[:k-1]))", "n, k = map(int, input().split())\na = list(map(int, input().split()))\np = [0]\nfor x in a[::-1]:\n    p.append(p[-1] + x)\nans = p[-1] + sum(sorted(p[1:-1])[n - k:])\nprint(ans)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\np = [0]\nfor x in a[::-1]: p.append(p[-1] + x)\nprint(p[-1] + sum(sorted(p[1:-1])[n - k:]))", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef __starting_point():\n    n,k = map(int,input().split())\n    a = list(map(int , input().split()))\n\n    b = [0 for i in range(n)]\n    for i in range(n-1,-1,-1):\n        if i == n-1:\n            b[i] = a[i]\n        else:\n            b[i] = b[i+1] + a[i]\n    ans = b[0]\n    b[1:] = sorted(b[1:])\n    k -= 1\n    for i in range(n-1,-1,-1):\n        if k == 0:\n            break\n        ans += b[i]\n        k -= 1\n    print(ans)\n__starting_point()", "import heapq\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = [0 for i in range(n)]\ns[0] = a[0]\nfor i in range(1, n):\n    s[i] = s[i - 1] + a[i]\nx = s.pop()\nx *= k\n\nheapq.heapify(s)\nfor _ in range(k - 1):\n    x -= heapq.heappop(s)\nprint(x)\n\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\np = [0]\nfor i in a[ : : -1]:\n    p.append(p[-1] + i)\np = p[ : : -1]\nans = p[0]\nans += sum(sorted(p[1: -1], reverse = True)[ : k - 1])\nprint(ans)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\np = [0]\nfor x in a[::-1]: p.append(p[-1] + x)\nprint(p[-1] + sum(sorted(p[1:-1])[n - k:]))", "from sys import stdin,stdout\nfrom itertools import combinations\nfrom collections import defaultdict,OrderedDict\nimport math\nimport heapq\n\ndef listIn():\n    return list((list(map(int,stdin.readline().strip().split()))))\n\ndef stringListIn():\n    return([x for x in stdin.readline().split()])\n    \ndef intIn():\n    return (int(stdin.readline()))\n\ndef stringIn():\n    return (stdin.readline().strip())\n\ndef __starting_point():\n    n,k=listIn()\n    a=listIn()\n    arr=[a[0]]+[0]*(n-1)\n    \n    for i in range(1,n):\n        arr[i]=arr[i-1]+a[i]\n    \n    #print(*arr)\n    max_cost=arr[n-1]*k\n    \n    b=sorted(arr[:n-1])\n    for i in range(k-1):\n        max_cost-=b[i]\n    \n    print(max_cost)\n        \n    \n\n__starting_point()", "# cf_contests E66\nimport sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = 0\np = []\nfor i in range(n - 1, 0, -1):\n    s += a[i]\n    p.append(s)\np.sort()\np.reverse()\nres = s + a[0]\nfor i in range(k-1):\n    res += p[i]\nprint(res)\n", "n, k = list(map(int, input().strip().split(' ')))\na = list(map(int, input().strip().split(' ')))\ncnt = []\ncnt.append(a[-1])\nfor i in range(1, n):\n cnt.append(cnt[i-1] + a[-(i+1)])\nans = cnt[-1]\ndel cnt[-1]\ncnt.sort(reverse=True)\nans += sum(cnt[:(k-1)])\nprint(ans)\n", "# AC\nimport sys\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self):\n        return sys.stdin.readline().split()\n\n    def next_ints(self):\n        return [int(x) for x in sys.stdin.readline().split()]\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n, k = self.next_ints()\n        x = self.next_ints()\n        ss = []\n        s = 0\n        for a in x[::-1]:\n            s += a\n            ss.append(s)\n        ss = sorted(ss[:-1], reverse=True)\n        print(s + sum(ss[:k - 1]))\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "n,k = map(int, input().split())\nnums = list(map(int, input().split()))\n\nsuffixSum = [nums[-1]]\n\nfor i in nums[-2::-1]:\n    suffixSum.append(suffixSum[-1] + i)\n\n\nsuffixSum = suffixSum[:-1]\nsuffixSum.sort(reverse=True)\n\nans = sum(nums)\nans += sum(suffixSum[:k-1])\n\nprint(ans)", "def __starting_point():\n    n,k = map(int, input().split())\n    aa = list(map(int, input().split()))\n    ss = [0]\n    for a in reversed(aa):\n        ss.append(ss[-1] + a)\n        \n    ss = ss[1:]\n    if k == 1:\n        print(ss[-1])\n        return\n    print(ss[-1] + sum(sorted(ss[:-1])[-(k-1):]))\n__starting_point()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = []\ns = 0\nfor x in a[::-1]:\n    s += x\n    b.append(-s)\nif k == 1:\n    print(-b[-1])\nelse:\n    d = sorted(b[:-1])\n    print(-sum(d[:k-1]) - b[-1])"]