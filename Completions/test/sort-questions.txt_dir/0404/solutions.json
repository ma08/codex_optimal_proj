["#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n    ans=''.join(str(i) for i in l)\n    return ans\n\nans=[]\n\ndef printDivisors(n) : \n      \n    # Note that this loop runs till square root \n    i = 1\n    while i <= math.sqrt(n): \n          \n        if (n % i == 0) : \n              \n            # If divisors are equal, print only one \n            if (n / i == i) : \n                ans.append(i) \n            else : \n                # Otherwise print both \n                ans.append(i)\n                ans.append(n//i) \n        i = i + 1\n \n \n \n##### Main ####\nt=1\nfor tt in range(t):\n\tn=int(input())\n\tprintDivisors(n)\n\ts=set(ans)\n\tprint(len(s))\n    #a=list(map(int,sys.stdin.readline().split(' ')))\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\n    \n    \n#####File Operations#####\nif(fileoperation):\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "n = int(input())\nr = 0\nfor q in range(1, int(n ** (1 / 2))+1):\n    if n % q == 0:\n        r += 2\nif n ** (1 / 2) // 1 == n ** (1 / 2):\n    r -= 1\nprint(r)\n", "def to_prime(n):\n    i = 2\n    primes = []\n    while (i * i <= n):\n        if (n % i == 0):\n            amount = 0\n            while (n % i == 0):\n                amount += 1\n                n //= i\n            primes.append((i, amount))\n        i += 1\n    if (n != 1):\n        primes.append((n, 1))\n    return primes\n\nn = int(input())\n\nprimes = to_prime(n)\nresult = 1\nfor p, k in primes:\n    result *= k + 1\nprint(result)\n", "b = int(input())\ndivs = 0\ni = 1\nwhile i <= b ** 0.5:\n    if i == b ** 0.5:\n        divs += 1\n    elif b % i == 0:\n        divs += 2\n    i += 1\nprint(divs)", "from math import sqrt as S\ndef num_div(n):\n    if n==1:\n        return 1 \n    c=2 \n    for i in range(2,int(S(n))+1):\n        if n%i==0:\n            if i==n//i:\n                c+=1 \n            else:\n                c+=2 \n    return c \nprint(num_div(int(input())))", "n = int(input())\na = 0\ni = 1\nwhile i*i < n:\n    if n%i == 0:\n        a += 2\n    i += 1\nif i*i == n:\n    a += 1\nprint(a)", "import math\nb=int(input())\nk=1\nc=0\nx=math.floor(b**0.5)\n\nwhile k<=x:\n    if b%k==0:\n        c+=2\n    k+=1\nif x*x==b:\n    c-=1\nprint(c)", "b = int(input())\ncount = 0\ni = 1\nwhile i * i <= b:\n    if b % i == 0:\n        count += 2\n        if i * i == b:\n            count -= 1\n    i += 1\nprint(count)", "n = int(input())\n\nseen = {1, n}\nfor i in range(1, int(n**0.5) + 2):\n    if n % i == 0:\n        seen.add(i)\n        seen.add(n // i)\n\nprint(len(seen))", "def prime(b):\n    i = 1\n    if b == 1:\n        return 1\n    count = 0\n    while i * i <= b:\n        if b % i == 0:\n            if i * i != b:\n                count += 2\n            else:\n                count += 1\n        i += 1\n    return count\nb = int(input())\nprint(prime(b))\n", "n = int(input())\nc = 0\ni = 1\ns = set()\nwhile i * i <= n:\n    if n % i == 0:\n        s.add(i)\n        s.add(n // i)\n    i += 1\nprint(len(s))\n", "b = int(input())\nn = 0\nfrom math import sqrt\nr = int(sqrt(b))\nfor i in range(1, r+1):\n    if b%i==0:\n        n+=1\nn*=2\nif r*r==b:\n    n-=1\nprint(n)\n", "b = int(input())\ncur = 1\ncount = 0\nwhile cur*cur <= b:\n    if b%cur == 0:\n        count += 2\n    if cur*cur == b:\n        count -= 1\n    cur += 1\nprint(count)\n", "b = int(input())\n\ndef factorize(n):\n    fct = []  # prime factor\n    b, e = 2, 0  # base, exponent\n    while b * b <= n:\n        while n % b == 0:\n            n = n // b\n            e = e + 1\n        if e > 0:\n            fct.append((b, e))\n        b, e = b + 1, 0\n    if n > 1:\n        fct.append((n, 1))\n    return fct\n\n\ndef divisorize(fct):\n    try:\n        b, e = fct.pop()  # base, exponent\n    except:\n        return []\n    pre_div = divisorize(fct) if fct else [[]]\n    suf_div = [[(b, k)] for k in range(e + 1)]\n    return [pre + suf for pre in pre_div for suf in suf_div]\n\n\ndef num(fct):\n    a = 1\n    for base, exponent in fct:\n        a = a * base**exponent\n    return a\n\nprimes = factorize(b)\nnum_divisors = 1\nfor prime, num in primes:\n    num_divisors *= (num + 1)\nprint(num_divisors)\n", "import math \ndef div(n):\n\tcnt = 0\n\tfor i in range(1, (int)(math.sqrt(n)) + 1):\n\t\tif (n % i == 0): \n\t\t\tif (n / i == i) : \n\t\t\t\tcnt+=1\n\t\t\telse: \n\t\t\t\tcnt+=2\n\treturn cnt\nb=int(input())\nif b==1:\n\tprint (1)\nelse:\n\tprint (div(b))", "b = int(input())\nresult = 1\ncount = 1\nwhile b % 2 == 0:\n    count += 1\n    b >>= 1\nresult *= count\ncount = 0\ni = 3\nwhile i * i <= b:\n    if b % i == 0:\n        count = 1\n        while b % i == 0:\n            count += 1\n            b //= i\n        result *= count\n    i += 2\nif b > 1:\n    result *= 2\nprint(result)\n", "b = int(input())\nimport math\nk = math.ceil((b**0.5)) + 100\na = set()\nfor i in range(1, k):\n    if (b%i == 0):\n        a.add(i)\n        a.add(b//i)\n        \nprint(len(a))\n", "from math import sqrt\ndef countDivisors(n):\n    cnt=0\n    for i in range(1,(int(sqrt(n)))+1):\n        if(n%i==0):\n            if(n/i==i):\n                cnt = cnt + 1\n            else:\n                cnt = cnt + 2\n    return cnt\n\nn=int(input())\nprint(countDivisors(n))\n", "import math\nb=int(input())\nans=0\nfor i in range(1,int(math.sqrt(b))+1):\n    if b%i==0:\n        ans+=1\n        c=b//i\n        if i!=c:\n            ans+=1\nprint(ans)\n", "# Author:      Divesh Uttamchandani\n# Institution: BITS Pilani\nimport math\nn = int(input().strip())\nfactors = 0\nfor i in range(1,int(math.sqrt(n))+1):\n    if(n%i==0):\n        if(i!=n//i):\n            factors+=2\n        else:\n            factors+=1\nprint(factors)\n# <> with <3 using Termicoder:\n# https://termicoder.github.io\n", "a=int(input())\nt=[0]\ni=2\nwhile i*i<=a:\n    if a%i==0:\n        t[len(t)-1]+=1\n        a=a/i\n    else:\n        i=i+1\n        if t[len(t)-1]!=0:\n            t.append(0)\nif a>1:\n    if a!=i:\n        t.append(1)\n    else:\n        t[len(t)-1]+=1\nanswer=1\nfor i in t:\n    answer*=(i+1)\nprint(answer)\n\n", "from math import sqrt, ceil\n\nb = int(input())\ncnt = 0\n\nfor j in range(1,int(sqrt(b))+1):\n    if b%j==0:\n        cnt += 1\n        d = b//j\n        if j != d:\n            cnt += 1\n\nprint(cnt)", "n = int(input())\ni = 1\nans = 0\nwhile i * i <= n:\n    if n % i == 0:\n        ans += 2\n    i += 1\ni -= 1\nif i * i == n:\n    ans -= 1\nprint(ans)", "import math\n\ndef divisorGenerator(n):\n    l_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                l_divisors.append(n / i)\n    for divisor in reversed(l_divisors):\n        yield divisor\n\nn=int(input())\nprint(len(list(divisorGenerator(n))))\n", "b=int(input())\ni=1\nsum0=0\nwhile(i*i<=b):\n    if(b%i==0):\n        if(b==i*i): sum0+=1\n        else: sum0+=2\n    i+=1\nprint(sum0)"]