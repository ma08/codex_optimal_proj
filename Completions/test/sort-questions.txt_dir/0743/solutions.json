["from fractions import gcd\nn=int(input())\na=list(map(int,input().split()))\nno=a[0]\nfor i in range(1,n):\n    no=gcd(no,a[i])\nprint(no*n)", "def GCD(x,y):\n    while (x!=y):\n        if x<y: x,y = y,x\n        x-=y\n    return x\n\nn = int(input())\nar = list(map(int,input().split(' ')))\nr = ar[0]\nfor i in range(n-1):\n    r = GCD(r, ar[i+1])\nprint(r*n)\n", "#!/usr/bin/env python3\n\ndef gcd(x, y):\n    if y == 0 or x == 0:\n        return max(x, y)\n    t = x % y\n    while t != 0:\n        x = y\n        y = t;\n        t = x % y\n    return y\n\ndef main():\n    readData = lambda : list(map(int, input().split()))\n    n = int(input())\n    X = list(readData())\n    d = 0\n    for x in X:\n        d = gcd(d, x)\n    print(d * len(X))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def nod(a,b):\n    while max(a,b) % min(a,b) != 0:\n        if a>= b:\n            a=a %b\n        else:\n            b=b%a\n    return min(a,b)\n\nn = int(input())\narr = list(map(int,input().split()))\nx = arr[0]\nfor i in range(1,n):\n    x = nod(arr[i],x)\nprint(x*n)", "from fractions import gcd\nfrom functools import reduce\nn = int(input())\na = list(map(int, input().split()))\nprint(n * reduce(gcd, a))\n", "n = int(input())\nv = list(map(int, input().split()))\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ng = v[0]\nfor each_v in v:\n    g = gcd(g, each_v)\n\nprint(g * n)\n", "input().split()\nxs = list(map(int, input().split()))\ndef gdc(a,b):\n  while b > 0:\n    a, b = b, a%b\n  return a\n  \nret = 0\nfor x in xs:\n  ret = gdc(x,ret)\n\nprint(ret*len(xs))", "def nod(x,y):\n    while x*y:\n        if x>y:\n            x%=y\n        else:\n            y%=x\n    return x+y\n\n\nn=int(input())\na=list(map(int,input().split()))\nm=a[0]\nfor i in range(1,n):\n    m=nod(m,a[i])\nprint(n*m)", "from fractions import gcd\nfrom functools import reduce\n\nn = int(input())\nnums = map(int, input().split())\nprint(reduce(lambda x, y: gcd(x, y), nums) * n)", "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n*2):\n    a=sorted(a,reverse=True)\n    for j in range(1,n):\n        while a[j] and a[0]>a[j]:\n            a[0]-=a[j]\nprint(sum(a))\n", "from functools import *; from fractions import*\nprint(int(input()) * reduce(gcd,list(map(int,input().split()))))\n\n", "def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\nn, t = int(input()), list(map(int, input().split()))\nj = t[0]\nfor i in t[1: ]: j = gcd(i, j)\nprint(n * j)", "from fractions import gcd\nfrom functools import reduce\nprint(int(input()) * reduce(gcd, map(int, input().split())))", "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nn = int(input())\na = list(map(int, input().split()))\nm = a[0]\n\nfor i in range(1, n):\n    m = (gcd(a[i], m))\nprint(n * m)\n        \n", "n = int(input())\na = list(map(int, input().split()))\nwhile(1):\n    T = True\n    for i in range(n):\n        for j in range(n):\n            if a[i] > a[j]:\n                a[i] = a[i] - a[j]\n                T = False\n            elif a[i] < a[j]:\n                a[j] = a[j] - a[i]\n                T = False\n    if T:\n        break\nprint(sum(a))", "from fractions import gcd\na = int(input())\nnums = list(map(int, input().split(' ')))\ngcdx = nums[0]\nfor i in range(len(nums)):\n    gcdx = gcd(gcdx, nums[i])\nprint(gcdx*a)\n\n", "from fractions import gcd\nn = int(input())\narr = list(map(int, input().split()))\nans = arr[0]\nfor i in range(1,len(arr)):\n\tans = gcd(ans, arr[i])\nprint(ans * len(arr))", "from fractions import gcd\nn, val = int(input()), 0\nfor a in (int(x) for x in input().split()):\n    val = a if val == 0 else gcd(val, a)\nprint(val * n)", "k = int(input())\nl = list(map(int, input().split()))\n\nl.sort(reverse=True)\nfor i in range(1000):\n    for i in range(k-1):\n        if (l[i+1] < l[i]):\n            l[i] -= l[i+1]\n            l.sort(reverse=True)\nprint(sum(l))\n", "def pairGCD(a, b):\n\twhile a:\n\t\ta, b = b % a, a\n\treturn b\n\ndef gcd(l):\n\tres = l[0]\n\tfor x in l[1:]:\n\t\tres = pairGCD(res, x)\n\treturn res\n\nn = int(input())\nl = [int(x) for x in input().split()]\nprint(gcd(l) * n)\n", "from sys import stdin\n\n\ndef main():\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    while True:\n        l.sort()\n        i = max(list(range(1, n)), key=lambda _: l[_] - l[_ - 1])\n        if l[i] == l[i - 1]:\n            return sum(l)\n        l[i] -= l[i - 1]\n\n\nprint(main())\n\n", "import sys\nimport math\n\ndef gcd(a, b):\n    if(b == 0):\n        return a\n    r = a % b\n    return gcd(b, r)\n\nn = int(sys.stdin.readline())\nan = [int(x) for x in (sys.stdin.readline()).split()]\n\nvmin = min(an)\nkmin = 101\nfor i in range(n):\n    t = gcd(vmin, an[i])\n    if(t < vmin):\n        vmin = t\n        \nprint(n * t)", "def g(x):\n    if len(x)==1:return x[0]\n    if x[0]==0:return g(x[1:])\n    return g([x[-1]%x[0]]+x[:-1])\ninput()\na=list(map(int,input().split()))\nprint(g(a)*len(a))\n", "\ndef log(*args): \n    #print(*args)\n    pass\n\nN = int(input())\nL = [int(n) for n in input().split()]\nassert N == len(L)\nL.sort()\n\nchanged = True\n\nwhile changed:\n    log('begin, L=', L)\n    blah = L[:]\n    changed = False\n    for i in range(N):\n        for j in range(i):\n            num = L[i] + L[j]\n            if num not in blah:\n                blah.append(num)\n\n    log('blah', blah)\n\n    for i in range(N):\n        num = L[i]\n        for n in range(num-1, -1, -1):\n            if n in blah:\n                log('pos', i, 'subtracting', n, 'from', L[i])\n                L[i] = num - n\n                changed = True\n                break\n    \n    log(sum(L))\n\nlog('fin')\nprint(sum(L))\n", "# coding: utf-8\nn = int(input())\nx = [int(i) for i in input().split()]\nwhile True:\n    tmp = min(x)\n    for i in range(n):\n        if x[i]%tmp == 0:\n            x[i] = tmp\n        else:\n            x[i] %= tmp\n    if sum(x) == tmp*n:\n        break\nprint(sum(x))\n"]