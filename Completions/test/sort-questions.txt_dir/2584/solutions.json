["import os\nfrom io import BytesIO\n\n# input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ndef check(x, p):\n    i = mid - 1\n    while i > -1 and a[i] <= p:\n        p -= a[i]\n        if i >= k - 1:\n            i -= k\n        else:\n            i -= 1\n    return i <= -1\n\n\nfor _ in range(int(input())):\n    n, p, k = list(map(int, input().split()))\n    a = sorted(map(int, input().split()))\n    L = 0\n    R = n + 1\n    while R - L > 1:\n        mid = (L + R) >> 1\n        if check(mid, p):\n            L = mid\n        else:\n            R = mid\n    print(L)\n", "for tcase in range(int(input())):\n    nitems, coins, k = list(map(int, input().split()))\n    ls = list(map(int, input().split()))\n    ls.sort()\n    if ls[0] > coins:\n        print(0)\n        continue\n    best = 0\n    spent = 0\n    ptr = 0\n    while ptr + 1 < nitems and spent + ls[ptr+1] <= coins:\n        spent += ls[ptr+1]\n        ptr += 2\n    if ptr < nitems and spent + ls[ptr] <= coins:\n        spent += ls[ptr]\n        ptr += 1\n    best = ptr\n\n    spent = ls[0]\n    ptr = 1\n    while ptr + 1 < nitems and spent + ls[ptr+1] <= coins:\n        spent += ls[ptr+1]\n        ptr += 2\n    if ptr < nitems and spent + ls[ptr] <= coins:\n        spent += ls[ptr]\n        ptr += 1\n    best = max(best,ptr)\n    print(best)\n", "\n#q = int(input())\n#x, y = map(int,input().split(' '))\n#print (' '.join(list(map(str, s))))\n\nq = int(input())\nfor _ in range(q):\n    n, p, k = map(int,input().split(' '))\n    a = list(map(int,input().split(' ')))\n    \n    a.sort()\n    \n    m = 0\n    for i in range(k):\n        c = 0\n        tmp = -1\n        if i > 0:\n            tmp = i-1\n            c = a[tmp]\n            \n        while p >= c:\n            tmp = tmp + k\n            if tmp >= n:\n                break\n            c = c + a[tmp]\n        \n        if tmp+1 - k > m:\n            m = tmp+1 - k\n    \n    print(m)", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\nT = int(input())\n\ndef solve(n,p,k,goods):\n    i = 0\n    ans = 0\n    while i < n:\n        if i<n-1 and goods[i+1]<=p:\n            ans+=2\n            p-=goods[i+1]\n            i+=2\n        elif goods[i]<=p:\n            ans+=1\n            break\n        else:\n            i+=1\n    return ans\n\n\nfor _ in range(T):\n    n,p,k = list(map(int, input().split()))\n    goods = list(map(int, input().split()))\n    goods.sort()\n    \n    ans = solve(n,p,k,goods)\n    if goods[0]<=p and n>=2:\n        ans = max(ans, solve(n-1,p-goods[0], k, goods[1:])+1)\n    print(ans)\n", "\nt = int(input())\n\nfor i in range(t):\n\tn, p, k = list(map(int, input().split()))\n\tgoods = list(map(int, input().split()))\n\tgoods.sort()\n\tif goods[0] > p:\n\t\tprint(0)\n\t\tcontinue\n\telif len(goods) == 1:\n\t\tprint(1)\n\t\tcontinue\n\thi = n\n\tlo = 0\n\todd_index_sums = [goods[1]]\n\teven_index_sums = [goods[0]]\n\tfor i in range(2, n):\n\t\tif i % 2 == 0:\n\t\t\teven_index_sums.append(even_index_sums[-1] + goods[i])\n\t\telse:\n\t\t\todd_index_sums.append(odd_index_sums[-1] + goods[i])\n\twhile (lo < hi - 1):\n\t\tmid = lo + (hi - lo) // 2\n\t\tif mid % 2 == 0:\n\t\t\tcost = even_index_sums[mid // 2]\n\t\telse:\n\t\t\tcost = odd_index_sums[mid // 2]\n\t\tif cost <= p:\n\t\t\tlo = mid\n\t\telse:\n\t\t\thi = mid\n\tprint(hi)\n", "t=int(input())\nfor i in range (0,t):\n    n,p,k=list(map(int,input().split()))\n    q=[int(x) for x in input().split()]\n    q=sorted(q)\n    if p<q[0]:\n        print(0)\n    else:\n        if n==1:\n            print(1)\n        elif n==2:\n            if p>=q[1]:\n                print(2)\n            else:\n                print(1)\n        else:\n            j=1\n            s=0\n            y=p\n            k=1\n            x=1\n            while 2*j-1<=n-1:\n                if p>=q[2*j-1]:\n                    p-=q[2*j-1]\n                    s+=2\n                else:\n                    if p>=q[2*j-2]:\n                        s+=1\n                    break\n                j+=1\n            y-=q[0]\n            while 2*k<=n-1:\n                if y>=q[2*k]:\n                    y-=q[2*k]\n                    x+=2\n                else:\n                    if y>=q[2*k-1]:\n                        x+=1\n                    break\n                k+=1\n            print(max(s,x))\n\n\n", "t=int(input())\nfor i in range(t):\n    n,p,k=[int(x) for x in input().split()]\n    alist=[int(x) for x in input().split()]\n    alist.sort()\n    blist=[alist[0],alist[1]]\n    for x in range(2,n):\n        blist.append(blist[-2]+alist[x])\n    for j in range(n):\n        if p < blist[j]:\n            break\n    if p >= blist[j]:\n        print(n)\n    else:\n        print(j)\n    \n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor testcases in range(t):\n    n,p,k=list(map(int,input().split()))\n    A=sorted((list(map(int,input().split()))))\n\n    S=[0]*(n+k+3)\n\n    for i in range(n):\n        S[i]=S[i-k]+A[i]\n\n    #print(S)\n\n    ANS=-1\n    for i in range(n):\n        if S[i]<=p:\n            ANS=i\n\n    print(ANS+1)\n\n    \n", "t = int(input())\nfor ii in range(t):\n    n, p, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    a = [None] + a\n    s = [0] * (n+1)\n    last_ind = 0\n    for i in range(1,n+1):\n        if i < k:\n            s[i] = a[i] + s[i-1]\n        else:\n            s[i] = a[i] + s[i-k]\n        # print('---',s[i], p)\n        if s[i] <= p:\n            last_ind = i\n\n    print(last_ind)\n\n'''\n8\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n3 2 3\n4 2 6\n5 2 3\n10 1 3 9 2\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n4 6 4\n3 2 3 2\n5 5 3\n1 2 2 1 2\n\n'''\n"]