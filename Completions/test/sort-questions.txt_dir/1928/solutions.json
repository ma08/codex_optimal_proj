["string = input()\nl = string.split(\" \")\nn, m, k = int(l[0]),int(l[1]),int(l[2])\nl = [{(1,1),}]\ncount = 1\nIn = 0\nwhile count < k:\n\ts = set()\n\tfor i in l[In]:\n\t\tx = i[0]+1\n\t\ty = i[1]\n\t\tif x<=n and y<=m:\n\t\t\tt = [0,0]\n\t\t\tt[0],t[1] = x, y\n\t\t\ts.add(tuple(t))\n\t\tx = i[0]\n\t\ty = i[1]+1\n\t\tif x<=n and y<=m:\n\t\t\tt = [0,0]\n\t\t\tt[0],t[1] = x, y\n\t\t\ts.add(tuple(t))\n\tl.append(s)\n\tIn+=1\n\tcount+=len(l[In])\nl2 = []\nCount = 0\nflag = 0\nfor i in l:\n\tfor h in i:\n\t\tif Count==k:\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tl3 = [h]\n\t\tx,y = h[0],h[1]\n\t\twhile x!=1 or y!=1:\n\t\t\tif x>y:\n\t\t\t\tx-=1\n\t\t\t\tl3.append((x,y))\n\t\t\telse:\n\t\t\t\ty-=1\n\t\t\t\tl3.append((x,y))\n\t\tl2.append(l3)\n\t\tCount+=1\n\tif flag==1:\n\t\tbreak\n\ncost = 0\nstring = \"\"\nfor i in range(k):\n\tlength = len(l2[k-i-1])\n\tcost+=length\n\tfor j in range(length):\n\t\tt = l2[k-i-1][length - j - 1]\n\t\tx,y = t[0],t[1]\n\t\tstring += \"(\"+str(x)+\",\"+str(y)+\") \"\n\tstring += \"\\n\"\n\t\nprint(cost)\nprint(string)\n\t\n", "def getCells(n, m, k):\n    penalty = 0\n    cells = []\n    for l in range(2,n+m+1):\n        iLeft = 1 if l-1 <= m else l-m\n        iRight = n if l-n > 0 else l-1\n        for i in range(iLeft, iRight+1):\n            j = l-i\n            penalty += l-1\n            cells.append((i,j))\n            k -= 1\n            if k == 0:\n                return penalty, cells\n\ndef getPath(i, j):\n    path = []\n    p,q = 1,1\n    while p < i:\n        path.append((p,q))\n        p += 1\n    while q < j:\n        path.append((p,q))\n        q += 1\n    path.append((i,j))\n    return path\n\nn, m, k = map(int, input().split())\npenalty, cells = getCells(n, m, k)\nprint(penalty)\nfor cell in reversed(cells):\n    print(*getPath(*cell))"]