["import operator\n\n\nn = int(input())\nxs = list(map(int, str.split(input())))\nif xs == sorted(xs):\n\n    print(0)\n\nelse:\n\n    swaps = []\n    counter = 0\n    while xs:\n\n        i = xs.index(min(xs))\n        if i:\n\n            swaps.append(str.format(\"{} {}\", counter, i + counter))\n\n        xs[0], xs[i] = xs[i], xs[0]\n        xs.pop(0)\n        counter += 1\n\n    print(len(swaps))\n    print(str.join(\"\\n\", swaps))\n", "\n\nn = int(input())\na = [int(s) for s in input().split()]\n\nb = sorted(a)\n\ncount = 0\nswaps = []\nfor i in range(n):\n    if a[i]!=b[i]:\n        count += 1\n        for j in range(i,n):\n            if a[j]==b[i]:\n                a[i],a[j]=a[j],a[i]\n                swaps.append((i,j))\n                break\n\nprint(count)\nfor i,j in swaps:\n    print(i,j)\n        \n        \n##while 1>0:\n##    line = input()\n##    if len(line.split())==0:\n##        break\n##    print(line)\n", "'''\nCreated on 17-Nov-2014\n\n@author: akash\n'''\ndef findmin(lst, i):\n    minn = i\n    minval = lst[i]\n    for j in range(i, len(lst)):\n        if minval > lst[j]:\n            minval = lst[j]\n            minn = j\n    return minn\nn = int(input())\nlst = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    j = findmin(lst, i)\n    if i != j:\n        lst[i], lst[j] = lst[j], lst[i]\n        ans.append([i, j])\nprint(len(ans))\nfor i in range(len(ans)):\n    print(ans[i][0], \" \", ans[i][1])\n", "n = int(input(''))\n\narvud = input('').split( )\narvud = list(map(int, arvud))\nswaps = []\nbegin = 0\n\nfor i in range(n):\n    mini = min(arvud)\n    index = arvud.index(mini)\n    if index != 0:\n        arvud[0], arvud[index] = arvud[index], arvud[0]\n        swaps.append((begin, index+begin))\n        \n    arvud.pop(0)\n    begin+=1\n        \n\nprint(len(swaps))\nfor i in range(len(swaps)):\n    print(swaps[i][0], \" \", swaps[i][1])\n", "n = input()\n\nsrc = list(int(x) for x in input().split())\ncp = src.copy()\n\ncp.sort()\n\ndef search(arr, val, border):\n\tfor x in range(border, len(arr)):\n\t\tif arr[x] == val:\n\t\t\treturn x\n\tprint(\"ERROR!\")\n\npairs = list()\ndef main():\n\tfor index, val in enumerate(cp):\n\t\ttmp = src[index]\n\t\tif val != tmp:\n\t\t\tswap = search(src, val, index)\n\t\t\tpairs.append((index, swap))\n\t\t\tsrc[index] = src[swap]\n\t\t\tsrc[swap] = tmp\n\t\n\tprint(len(pairs))\n\tfor x, y in pairs:\n\t\tprint(x,y)\n\t\t\n\t\nmain()", "import operator\n\n\nn = int(input())\nxs = list(map(int, str.split(input())))\nif xs == sorted(xs):\n\n    print(0)\n\nelse:\n\n    swaps = []\n    counter = 0\n    while xs:\n\n        i = xs.index(min(xs))\n        if i:\n\n            swaps.append(str.format(\"{} {}\", counter, i + counter))\n\n        xs[0], xs[i] = xs[i], xs[0]\n        xs.pop(0)\n        counter += 1\n\n    print(len(swaps))\n    print(str.join(\"\\n\", swaps))", "import bisect\n\nn = int(input())\na = list(map(int, input().split()))\nans = []\n\nfor i in range(n):\n    j = min(list(range(i, n)), key = lambda k: a[k])\n    if j != i:\n        a[i], a[j] = a[j], a[i]\n        ans.append((i, j))\n\nprint(len(ans))\nfor i, j in ans: print(i, j)\n\n", "n = int(input())\na = list(map(int, input().split()))\nans = []\n\nfor i in range(n):\n    j = min(range(i, n), key = lambda k: a[k])\n    if j != i:\n        a[i], a[j] = a[j], a[i]\n        ans.append((i, j))\n\nprint(len(ans))\nfor i, j in ans: print(i, j)", "n = int(input())\na = list(map(int, input().split()))\nperms=[]\nfor i in range(n):\n    min_i = min(list(range(i,n)), key=lambda x:a[x])\n \n    if min_i !=i:\n        perms.append([i,min_i])\n        a[i], a[min_i] = a[min_i], a[i]\n       \nprint(len(perms))\nfor p1,p2 in perms:\n    print(p1,p2)\n", "def solve(xs):\n    oxs = xs[:]\n    oxs.sort()\n    res = []\n    for i in range(len(xs)):\n        if xs[i] != oxs[i]:\n            j = i+1\n            while not(oxs[i] == xs[j] and xs[j] != oxs[j]):\n                j+=1\n            res.append([i, j])\n            xs[i], xs[j] = xs[j], xs[i]\n    \n    return res\n    \ndef __starting_point():\n    input()\n    xs = list(map(int, input().split()))\n    ret = solve(xs)\n    print(len(ret))\n    if ret : print(\n        \"\\n\".join(\n            \"{0[0]} {0[1]}\".format(swp) for swp in ret\n        )\n    )\n__starting_point()", "n = int(input())\na = [int(m) for m in input().split()]\ncounter = 0\nexit_list = []\ni = 0\nwhile i < n:\n    sublist = a[i:]\n    minimum = sublist.index(min(sublist)) + i\n    if i != minimum:\n        exit_list.append((i, minimum))\n        c = a[minimum]\n        a[minimum] = a[i]\n        a[i] = c\n        counter += 1\n    i += 1\nprint(counter)\nfor x in exit_list:\n    print(x[0], x[1])", "def find_min(i):\n    min = 1000000001\n    index = 0\n    for j in range(i, n):\n        if a[j] < min:\n            min = a[j]\n            index = j\n    return index\n\nn = int(input())\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\n\nk = 0\nans = ()\n\nfor i in range(n):\n    m = find_min(i)\n    if i != m:\n        a[i] = a[i] + a[m]\n        a[m] = a[i] - a[m]\n        a[i] = a[i] - a[m]\n        ans += (i, m)\n        k += 1\n    \nprint(k)\nfor i in range(0, len(ans), 2):\n    print(ans[i], ans[i+1])", "def find_min(i):\n    min = 1000000001\n    index = 0\n    for j in range(i, n):\n        if a[j] < min:\n            min = a[j]\n            index = j\n    return index\n\nn = int(input())\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\n\nk = 0\nans = ()\n\nfor i in range(n):\n    m = find_min(i)  # \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    if i != m:\n        a[i] = a[i] + a[m]\n        a[m] = a[i] - a[m]\n        a[i] = a[i] - a[m]\n        # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n        ans += (i, m)\n        k += 1\n    \nprint(k)\nfor i in range(0, len(ans), 2):\n    print(ans[i], ans[i+1])", "def main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted((x, i) for i, x in enumerate(l))\n    l = sorted((i, j) for j, (x, i) in enumerate(l))\n    l = [j for x, j in l]\n    index = [0] * n\n    for i, x in enumerate(l):\n        index[x] = i\n    res = []\n    for i, x in enumerate(index):\n        y = l[i]\n        if i != y:\n            res.append((i, x))\n            l[i], l[x] = i, y\n            index[y] = x\n    print(len(res))\n    for a in res:\n        print(*a)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def input_split(f): return list(map(f, input().split()))\n\n\ndef main():\n    n = int(input())\n    a = list(input_split(int))\n\n    k = 0\n    res = []\n    for i in range(0, n-1):\n        m = a[i]\n        index = 0\n        for j in range(i+1, n):\n            if m > a[j]:\n                m = a[j]\n                index = j\n        if m != a[i]:\n            k += 1\n            a[i], a[index] = m, a[i]\n            res.append((i, index))\n\n    print(str(k))\n    for v in res:\n        print(\" \".join(map(str, v)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]