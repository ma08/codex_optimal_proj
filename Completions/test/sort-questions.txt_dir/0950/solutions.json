["import math, re, itertools as it;prime = lambda n: len([i for i in range(2, int(math.sqrt(n) + 1)) if n % i == 0]) == 0;gcd = lambda a, b: gcd(b, a % b) if b else a;fact = lambda x: x * fact(x - 1) if x else 1;bino = lambda n, k: fact(n) / fact(k) / fact(n - k);fib11 = lambda n: 1 if n < 2 else fib11(n - 1) + fib11(n - 2);fib01 = lambda n: 0 if n == 0 else 1 if n == 1 else fib01(n - 1) + fib01(n - 2);sumofd = lambda x: x if x < 10 else sumofd(x // 10) + x % 10\n\nn, m = map(int, input().split(' '))\na = []\ndp = []\nsc = st = sl = 1000000\nfor _ in range(n):\n\ta.append(input())\n\tc = t = l = 1000000\n\tfor i in range(len(a[-1])):\n\t\tif a[-1][i] in '0123456789':\n\t\t\tc = min(c, i, len(a[-1]) - i)\n\t\tif a[-1][i] in '#*&':\n\t\t\tt = min(t, i, len(a[-1]) - i)\n\t\tif 'a' <= a[-1][i] <= 'z':\n\t\t\tl = min(l, i, len(a[-1]) - i)\n\t'''if c == t == 1000000 or c == l == 1000000 or l == t == 1000000:\n\t\tif c == t == 1000000:\n\t\t\tsl = 0\n\t\tif c == l == 1000000:\n\t\t\tst = 0\n\t\tif l == t == 1000000:\n\t\t\tsc = 0\n\t\tcontinue'''\n\tdp.append([c, t, l])\nmm = 1000000\nkk = it.permutations(list(range(n)), 3)\nfor i in kk:\n\tmm = min(mm, dp[i[0]][0] + dp[i[1]][1] + dp[i[2]][2])\nprint(mm)", "n, m = list(map(int, input().split()))\n\nchar = [m * 100] * n\ndig = [m * 100] * n\nsymb = [m * 100] * n\n\nfor i in range(n):\n\ts = input()\n\tfor j, c in enumerate(s):\n\t\tif c in '*#&':\n\t\t\tsymb[i] = min(symb[i], j, m - j)\n\t\telif c.isdigit():\n\t\t\tdig[i] = min(dig[i], j, m - j)\n\t\telse:\n\t\t\tchar[i] = min(char[i], j, m - j)\n\nanswer = m * 100\nfor c in range(n):\n\tfor s in range(n):\n\t\tfor d in range(n):\n\t\t\tif len(set([c, s, d])) == 3:\n\t\t\t\tanswer = min(answer, char[c] + symb[s] + dig[d])\n\nprint(answer)\n", "n, m = map(int, input().split())\n\nw = [input() for _ in range(n)]\n\ninf = 1000000\n\nlet = [inf] * n\nnum = [inf] * n\nspec = [inf] * n\n\ndef get(i, c):\n\tl = w[i].find(c)\n\tr = w[i].rfind(c)\n\tif l == -1:\n\t\treturn inf\n\treturn min(l, m - r)\n\nfor i in range(n):\n\tfor j in 'qwertyuiopasdfghjklzxcvbnm':\n\t\tlet[i] = min(let[i], get(i, j))\n\tfor j in '0123456789':\n\t\tnum[i] = min(num[i], get(i, j))\n\tfor j in '*#&':\n\t\tspec[i] = min(spec[i], get(i, j))\n\nans = inf\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tif i == j:\n\t\t\tcontinue\n\t\tfor k in range(n):\n\t\t\tif i == k or j == k:\n\t\t\t\tcontinue\n\t\t\tans = min(ans, let[i] + num[j] + spec[k])\n\nprint(ans)", "n, m = list(map(int, input().split()))\nl = [input() for _ in range(n)]\nans = n*m*n\ndig = [ans for _ in range(n)]\nla = [ans for _ in range(n)]\nsp = [ans for _ in range(n)]\nd = {}\nfor i in \"#*&\":\n    d[i] = sp\nfor i in \"0123456789\":\n    d[i] = dig\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\n    d[i] = la\n\nfor i in range(n):\n    for j in range(m):\n        d[l[i][j]][i] = min(d[l[i][j]][i], min(j, m - j))\n\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if i != k and i != j and j != k:\n                ans = min(ans, dig[i]+la[j]+sp[k])\nprint(ans)\n", "from sys import stdin, stdout\n\nINF = float('inf')\nn, m = map(int, stdin.readline().split())\nfst = [[INF, INF, INF] for i in range(n)]\n\nfor i in range(n):\n    s = list(stdin.readline().strip())\n    for j in range(m):\n        if '9' >= s[j] >= '0' or '9' >= s[-j] >= '0':\n            fst[i][0] = min(fst[i][0], j)\n        \n        if 'z' >= s[j] >= 'a' or 'z' >= s[-j] >= 'a':\n            fst[i][1] = min(fst[i][1], j)\n        \n        if s[j] in '#*&' or s[-j] in '#*&':\n            fst[i][2] = min(fst[i][2], j)\n        \n\nans = INF\nfor i in range(n):\n    for j in range(n):\n        for z in range(n):\n            if i == j or i == z or j == z:\n                continue\n            \n            ans = min(fst[i][0] + fst[j][1] + fst[z][2], ans)\n\nstdout.write(str(ans))", "import itertools as it\n\n\ndef special(a):\n    return (a == '#' or a == '*' or a == '&')\n\n\nn, m = list(map(int, input().split()))\n\nINF = 10 ** 6\n\nA = []\nfor _ in range(n):\n    A += [input()]\n\n#print(A)\n\nB = []\nfor _ in range(3):\n    B += [[INF] * n]\n\n#print(B)\n\nfor i in range(n):\n    if A[i][0].isalpha():\n        B[0][i] = 0\n    else:\n        j = 1\n        k = m - 1\n        while j <= k:\n            #print(j, k)\n            if A[i][j].isalpha() or A[i][k].isalpha():\n                B[0][i] = j\n                break\n            j += 1\n            k -= 1\n\nfor i in range(n):\n    if A[i][0].isdigit():\n        B[1][i] = 0\n    else:\n        j = 1\n        k = m - 1\n        while j <= k:\n            if A[i][j].isdigit() or A[i][k].isdigit():\n                B[1][i] = j\n                break\n            j += 1\n            k -= 1\n\nfor i in range(n):\n    if special(A[i][0]):\n        B[2][i] = 0\n    else:\n        j = 1\n        k = m - 1\n        while j <= k:\n            if special(A[i][j]) or special(A[i][k]):\n                B[2][i] = j\n                break\n            j += 1\n            k -= 1\n\nresult = INF\n\nfor pick in it.combinations(list(range(n)), 3):\n    #print(pick)\n    for perm in it.permutations(list(range(3))):\n        #print(\"perm \" + str(perm))\n        result = min([result, B[perm[0]][pick[0]] +\n                              B[perm[1]][pick[1]] +\n                              B[perm[2]][pick[2]]])\n\nprint(result)\n", "n, m = map(int, input().split())\na = [0] * n\nfor i in range(n):\n    a[i] = list(input())\ng1 = '*#&'\ng2 = 'qwertyuiopasdfghjklzxcvbnm'\ng3 = '1234567890'\n\nb = [[-1] * 3 for i in range(n)]\n\nfor i in range(n):\n    f1, f2, f3 = 0, 0, 0\n    for j in range(m):\n        if a[i][j] in g1 and f1 == 0:\n            f1 = 1\n            b[i][0] = j\n        elif a[i][j] in g2 and f2 == 0:\n            f2 = 1\n            b[i][1] = j\n        elif a[i][j] in g3 and f3 == 0:\n            f3 = 1\n            b[i][2] = j\n    \n    f1, f2, f3 = 0, 0, 0\n    for j in range(-1, -1 * m, -1):\n        if a[i][j] in g1 and f1 == 0:\n            f1 = 1\n            b[i][0] = min(b[i][0], -1 * j )\n        elif a[i][j] in g2 and f2 == 0:\n            f2 = 1\n            b[i][1] = min(b[i][1], -1 * j )\n        elif a[i][j] in g3 and f3 == 0:\n            f3 = 1\n            b[i][2] = min(b[i][2], -1 * j)\n\nans = int(1e9)\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if i == j or j == k or i == k:\n                continue\n            #print(i, j, k)\n            for l in range(3):\n                for g in range(3):\n                    for q in range(3):\n                        if q != l and l != g and q != g and b[i][l] + b[j][g] + b[k][q] < ans and b[i][l] != -1 and b[j][g] != -1 and b[k][q] != -1:\n                            ans = b[i][l] + b[j][g] + b[k][q]\n                            #print(ans, i, j, k, l, g, q)\nprint(ans)", "n, m = tuple(map(int, input().split()))\nstrings = []\nfor k in range(n):\n    strings.append(input())\n\ndef f(x):\n    if x in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]:\n        return \"c\"\n    elif x in [\"*\",\"#\",\"&\"]:\n        return \"s\"\n    else:\n        return \"l\"\n\nfor k in range(n):\n    strings[k] = list(map(f,strings[k]))\npointers = [1]*n\nminsc = []\nminss = []\nminsl = []\n\nfor i in range(n):\n    ds,dl,dc = -1,-1,-1\n    for j in range(m):\n        if strings[i][j] == \"c\" and (dc == -1 or min((-j)%m,j%m) < dc):\n            dc = min((-j)%m,j%m)\n        if strings[i][j] == \"s\" and (ds == -1 or min((-j)%m,j%m)< ds):\n            ds = min((-j)%m,j%m)\n        if strings[i][j] == \"l\" and (dl == -1 or min((-j)%m,j%m) < dl):\n            dl = min((-j)%m,j%m)\n    minsc.append(dc)\n    minss.append(ds)\n    minsl.append(dl)\n\nm = -1\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if i!= j and j!=k and i!=k and not -1 in [minsc[i],minss[j],minsl[k]] and (minsc[i]+minss[j]+minsl[k] < m or m== -1):\n                m = minsc[i]+minss[j]+minsl[k]\n\nprint(m)\n", "from sys import stdin, stdout\nfrom functools import partial\n\nONLINE_JUDGE = 1\nif ONLINE_JUDGE:\n    inp = stdin\n    out = stdout\nelse:\n    inp = open('input.txt', 'r')\n    out = open('output.txt', 'w')\nprint_f = partial(print, file=out)\n\nINF = 1000000\n\n\ndef find_dist(s: str, check) -> int:\n    m = INF\n    for i in range(len(s)):\n        if check(s[i]):\n            m = min(m, i, len(s) - i)\n    return m\n\nn, m = [int(i) for i in inp.readline().split()]\n\nstrs = [line.strip() for line in inp.readlines()]\n\nmin1 = [find_dist(s, lambda c: ord('0') <= ord(c) <= ord('9')) for s in strs]\nmin2 = [find_dist(s, lambda c: ord('a') <= ord(c) <= ord('z')) for s in strs]\nmin3 = [find_dist(s, lambda c: c == '#' or c == '*' or c == '&') for s in strs]\n\nmm = INF\nfor i1, m1 in enumerate(min1):\n    for i2, m2 in enumerate(min2):\n        for i3, m3 in enumerate(min3):\n            if len({i1, i2, i3}) == 3:\n                mm = min(mm, INF, m1 + m2 + m3)\n\nprint_f(mm)\n", "from itertools import permutations as perm\nn, m = map(int, input().split())\nalpha = set([chr(x) for x in range(ord('a'), ord('z') + 1)])\ndigits = set([str(x) for x in range(0, 10)])\nsymbol = set([\"*\", \"#\", \"&\"])\n\nd = [[0] * 3 for i in range(n)]\nfor i in range(n):\n    s = input()\n    a = b = c = 10**9\n    for j in range(len(s)):\n        if s[j] in alpha:\n            a = min(a, j - 0, m - j)\n        elif s[j] in digits:\n            b = min(b, j - 0, m - j)\n        elif s[j] in symbol:\n            c = min(c, j - 0, m - j)\n    d[i] = [a, b, c]\n    \n\np = list(perm([x for x in range(n)], 3))\nans = 10**10\nfor x in p:\n    a, b, c = list(x)\n    if (a != b and b != c and c != a):\n        ans = min(ans, d[a][0] + d[b][1] + d[c][2])\nprint(ans)", "n,m = list(map(int, input().split(\" \")))\nstrings = []\nfor i in range(n): \n\tstrings.append(input())\n\nspec = set('#*&')\ndig = set('0123456789')\nalpha = set('abcdefghijklmnopqrstuvwxyz')\n\n\ndef num(checkset, checkstring):\n\tm = len(checkstring)+1\n\tfor i, c in enumerate(checkstring):\n\t\tif c in checkset:\n\t\t\tm = min(m, i)\n\t\t\tm = min(m, len(checkstring)-i)\n\tif m < len(checkstring)+1:\n\t\treturn m\n\treturn -1 \n\t\nret = float('inf')\n\t\nfor i in range(n):\n\tfor j in range(n):\n\t\tfor k in range(n):\n\t\t\tif i==j or i==k or j==k:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\ts1 = num(spec, strings[i])\n\t\t\t\ts2 = num(dig, strings[j])\n\t\t\t\ts3 = num(alpha, strings[k]) \n\t\t\t\tif s1 >= 0 and s2 >= 0 and s3 >= 0:\n\t\t\t\t\tret = min(ret, s1+s2+s3)\n\nprint(str(int(ret)))\n\n\t\t\t\t\t \n\t\t\t\t\n", "import math, sys, itertools\n\nalpha = list('abcdefghijklmnopqrstuvwxyz')\ndigit = list('1234567890')\nspec = ['*', '&', '#']\n\ndef find(s):\n\tdpos = 10000\n\tapos = 10000\n\tspos = 10000\n\tm = len(s)\n\tfor i in range(len(s)):\n\t\tif s[i] in alpha:\n\t\t\tif apos>min(m-i,i):\n\t\t\t\tapos = min(m-i,i)\n\t\tif s[i] in digit:\n\t\t\tif dpos>min(m-i,i):\n\t\t\t\tdpos = min(m-i,i)\n\t\tif s[i] in spec:\n\t\t\tif spos>min(m-i,i):\n\t\t\t\tspos = min(m-i,i)\n\treturn apos, dpos, spos\n\t\t\n\ndef main():\n\tn,m = list(map(int, input().split()))\n\tst = []\n\tfor i in range(n):\n\t\tst.append(input())\n\t\n\tal = []\n\tdig = []\n\tspec = []\n\tfor i in range(n):\n\t\ta, d, s = (find(st[i]))\n\t\tal.append(a)\n\t\tdig.append(d)\n\t\tspec.append(s)\n\t\t\n\tsumn = 10000\n\tfor a in range(n):\n\t\tfor d in range(n):\n\t\t\tfor s in range(n):\n\t\t\t\tif a!=d!=s:\n\t\t\t\t\tif sumn>al[a]+dig[d]+spec[s]:\n\t\t\t\t\t\tsumn = al[a]+dig[d]+spec[s]\n\tprint(sumn)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n, m = map(int, input().split())\na = ['*', '&', '#']\nans0 = [(10**9, -1)] * n\nans1 = [(10**9, -1)] * n\nans2 = [(10**9, -1)] * n\nfor i in range(n):\n    s = input()\n    for j in range(m):\n        if s[j] in a:\n            ans0[i] = min(ans0[i], (j, i), (m-j, i))\n        elif '0' <= s[j] <= '9':\n            ans1[i] = min(ans1[i], (j, i), (m-j, i))\n        else:\n            ans2[i] = min(ans2[i], (j, i), (m-j, i))\nans0.sort()\nans1.sort()\nans2.sort()\nans = 10**5\n\nfor i in range(3):\n    for j in range(3):\n        for k in range(3):\n            if ans0[i][1] != ans1[j][1] and ans0[i][1] != ans2[k][1] and ans1[j][1] != ans2[k][1]:\n                ans = min(ans, ans0[i][0] + ans1[j][0] + ans2[k][0])\nprint(ans)", "import math\n\nn, m = list(map(int, input().split()))\nSYMBOLS = ['&', '*', '#']\n\nstrs = []\n\nfor i in range(n):\n\tstrs.append(list(input()))\n\nminA = [m] * n\nminD = [m] * n\nminS = [m] * n\nfor i, s in enumerate(strs):\n\tfor j, c in enumerate(list(s)):\n\t\tdist = min(j, m - j)\n\t\t# print(dist)\n\t\tif c.isalpha() and minA[i] > dist:\n\t\t\tminA[i] = dist\n\t\tif c.isdigit() and minD[i] > dist:\n\t\t\tminD[i] = dist\n\t\tif c in SYMBOLS and minS[i] > dist:\n\t\t\tminS[i] = dist\n\nminDist = math.inf\nfor i in range(n):\n\tfor j in range(n):\n\t\tfor k in range(n):\n\t\t\tsumma = minA[i] + minD[j] + minS[k]\n\t\t\tif i != j and j != k and i != k and minDist > summa:\n\t\t\t\tminDist = summa\n\nprint(minDist)\n", "import string\n\n\ndef get_min_distance(str, alphabet):\n    m = len(str)\n    mi = m\n    for i in range(m):\n        if str[i] in alphabet:\n            mi = min(i, mi)\n            break\n    for i in range(m):\n        if str[-i] in alphabet:\n            mi = min(i, mi)\n            break\n    return mi\n\nn, m = map(int, input().split())\nstrs = []\nfor i in range(n):\n    strs.append(input())\nmins = []\nfor i in range(n):\n    mins.append([get_min_distance(strs[i], string.digits),\n                 get_min_distance(strs[i], string.ascii_lowercase),\n                 get_min_distance(strs[i], \"#*&\")])\n# print(mins)\n\nmincost = 10**6\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        for k in range(n):\n            if j == k or i == k:\n                continue\n            mincost = min(mincost, mins[i][0] + mins[j][1] + mins[k][2])\nprint(mincost)", "\nimport sys, itertools\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\nlines = [sys.stdin.readline() for _ in range(n)]\n\nclasses = [\n    [str(x) for x in range(10)],\n    [chr(x) for x in range(ord('a'), ord('z')+1)],\n    ['#', '*', '&']\n]\n\n\ndef steps_to(clazz, line):\n    ltr = list(line[:-1])\n    rtl = ltr[0:1] + ltr[::-1]\n    for i in range(len(ltr)):\n        if ltr[i] in clazz or rtl[i] in clazz:\n            return i\n    return 999999\n\n\ndists = [\n    [steps_to(clazz, line) for clazz in classes]\n    for line in lines\n]\n\nres = 999999\n\nfor perm in itertools.permutations(list(range(3))):\n\n    pick1 = min([(dists[i][perm[0]], i) for i in range(len(dists))])\n    pick2 = min([(dists[i][perm[1]], i) for i in range(len(dists)) if i != pick1[1]])\n    pick3 = min([(dists[i][perm[2]], i) for i in range(len(dists)) if i != pick1[1] and i != pick2[1]])\n\n    res = min(res, pick1[0]+pick2[0]+pick3[0])\n\nprint(res)\n\n\"\"\"\n50 50\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[1[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[*[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[a[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n\"\"\"\n\n", "#!/usr/bin/env python3\ndef ri():\n    return list(map(int, input().split()))\n\n\ndigit = '0123456789'\nletter = 'abcdefghijklmnopqrstuvwxyz'\nsym = '#*&'\nval = [[] for _ in range(3)]\nval[0] = digit\nval[1] = letter\nval[2] = sym\n\n#print(val)\nn, m = ri()\nminm = [[10000000000 for _ in range(3)] for  __ in range(n)]\n#print(minm)\nfor ln in range(n):\n    line = input()\n    #print(line)\n    for i in range(3):\n        for mov in range(m):\n            if (line[mov] in val[i]) or line[-mov] in val[i]:\n                minm[ln][i] = mov\n                break\n\nans = 10**10\n#print(minm)\nfor i1 in range(n):\n    for i2 in range(n):\n        for i3 in range(n):\n            if i1 != i2 and i1 != i3 and i2 != i3:\n                ans = min(ans, minm[i1][0] + minm[i2][1] + minm[i3][2])\n\nprint(ans)\n", "import math\nn,m=list(map(int,input().split()))\n#s=input().strip()\nl=[]\nfor i in range(n):\n\tl.append(input().strip())\ndigit=0\nalpha=0\nspec=['&','#','*']\ndis=[]\nfor i in range(n):\n\ts=l[i]\n\tj=0\n\tmindigit=m\n\tminalpha=m\n\tminsp=m\n\tmaxdigit=0\n\tmaxalpha=0\n\tmaxsp=0\n\twhile(j<m):\n\t\tif(s[j] in spec):\n\t\t\tif(minsp>j):\n\t\t\t\tminsp=j\n\t\t\tif(maxsp<=j):\n\t\t\t\tmaxsp=j+1\n\t\telif(ord(s[j])>=48 and ord(s[j])<58):\n\t\t\tif(mindigit>j):\n\t\t\t\tmindigit=j\n\t\t\tif(maxdigit<=j):\n\t\t\t\tmaxdigit=j+1\n\t\telif(ord(s[j])>=97 and ord(s[j])<123):\n\t\t\tif(minalpha>j):\n\t\t\t\tminalpha=j\n\t\t\tif(maxalpha<=j):\n\t\t\t\tmaxalpha=j+1\n\t\tj+=1\n\tdis.append([min(mindigit,m+1-maxdigit),min(minalpha,m+1-maxalpha),min(minsp,m+1-maxsp)])\nmindis=1000\n#print(dis)\nfor  i in range(n):\n\tfor j in range(n):\n\t\tfor k in range(n):\n\t\t\tif(i!=j and j!=k and k!=i):\n\t\t\t\tif(dis[i][0]!=m and dis[j][1]!=m and dis[k][2]!=m):\n\t\t\t\t\tif(mindis>dis[i][0]+dis[j][1]+dis[k][2]):\n\t\t\t\t\t\tmindis=dis[i][0]+dis[j][1]+dis[k][2]\nprint(mindis)\n\n", "def lol():\n    ans = INF\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i == j or j == k or k == i:\n                    continue\n                \n                a, b, c = INF, INF, INF\n                for i1 in range(m):\n                    if 48 <= ord(s[i][i1]) <= 57 or 48 <= ord(s[i][-i1]) <= 57:\n                        a = min(a, i1)\n                \n                    if 97 <= ord(s[j][i1]) <= 122 or 97 <= ord(s[j][-i1]) <= 122:\n                        b = min(b, i1)             \n                \n                    if s[k][i1] in sim or s[k][-i1] in sim:\n                        c = min(c, i1) \n                        \n                    if a < INF and b < INF and c < INF:\n                        break\n                    \n                ans = min(ans, a + b + c) \n    return ans\n\n\nn, m = map(int, input().split())\n\nINF = 10 ** 9\ns = [0] * n\nsim = ['*', '&', '#']\nfor i in range(n):\n    new = input()\n    s[i] = new + new\n\nans = lol()\n            \nif ans >= INF:\n    print(-1)\nelse:\n    print(ans)", "n, m = map(int, input().split())\ns = [input() for i in range(0, n)]\ndp = [[n*m + 1] * 8 for i in range(0, n + 1)]\n\n\ndef minLenA(s):\n    for i in range(0, len(s)):\n        if '0' <= s[i] <= '9':\n            return i;\n    return m + 1\n\ndef minLenB(s):\n    for i in range(0, len(s)):\n        if 'a' <= s[i] <= 'z':\n            return i;\n    return m + 1\n\ndef minLenC(s):\n    for i in range(0, len(s)):\n        if s[i] in [\"#\", \"*\", \"&\"]:\n            return i;\n    return m + 1\n\ndp[0][0] = 0\ndp[0][1:] = [n*m + 1] * 7\n\nl = [[0] * 3 for i in range(0, n)]\nfor i in range(0, n):\n    l[i][0] = min(minLenA(s[i]),1 + minLenA(list(reversed(s[i]))))\n    l[i][1] = min(minLenB(s[i]), 1 +minLenB(list(reversed(s[i]))))\n    l[i][2] = min(minLenC(s[i]), 1 + minLenC(list(reversed(s[i]))))\nfor i in range(1, n + 1):\n    for j in range(0, 8):\n        dp[i][j] = min(dp[i - 1][j ^ 1] + l[i-1][0], dp[i-1][j],dp[i][j]);\n        dp[i][j] = min(dp[i - 1][j ^ 2] + l[i-1][1], dp[i-1][j],dp[i][j]);\n        dp[i][j] = min(dp[i - 1][j ^ 4] + l[i-1][2],dp[i-1][j],dp[i][j]);\nprint(dp[-1][7])", "import sys\nfrom itertools import permutations\nfrom operator import itemgetter\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nINF = 1000\n\ndef solve():\n    n, m = map(int, input().split())\n    str_l = []\n    for i in range(n):\n        moji = []\n        line = input()\n        for c in line:\n            if c == '*' or c == '#' or c == '&':\n                moji.append('*')\n            elif ord('0') <= ord(c) <= ord('9'):\n                moji.append('1')\n            else:\n                moji.append('a')\n        str_l.append(moji)\n\n    # debug(str_l, locals())\n    row_nums = []\n\n    for i in range(n):\n        kyori = [get_kyori(str_l[i], '1'),\n                 get_kyori(str_l[i], 'a'),\n                 get_kyori(str_l[i], '*')]\n\n        row_nums.append(kyori)\n\n    ans = INF\n    debug(row_nums, locals())\n\n    for i, j, k in permutations((0,1,2)):\n        tmp = 0\n        kyori_c = row_nums.copy()\n        kyori_c.sort(key=itemgetter(i))\n        tmp += kyori_c[0][i]\n        kyori_c = kyori_c[1:]\n        kyori_c.sort(key=itemgetter(j))\n        tmp += kyori_c[0][j]\n        kyori_c = kyori_c[1:]\n        kyori_c.sort(key=itemgetter(k))\n        tmp += kyori_c[0][k]\n        ans = min(tmp, ans)\n\n    print(ans)\n\ndef get_kyori(str1, c):\n    res = INF\n\n    if c in str1:\n        i1 = str1.index(c)\n        if i1 > len(str1) // 2:\n            i1 = len(str1) - i1\n        i2 = len(str1) - str1[::-1].index(c)\n        if i2 > len(str1) // 2:\n            i2 = len(str1) - i2 + 1\n        res = min(i1, i2)\n\n    return res\n\ndef __starting_point():\n    solve()\n__starting_point()", "symb = [\"#\", \"*\", \"&\"]\ninf = float(\"inf\")\ndef isAlpha(char):\n    return 97 <= ord(char) <= 122\n\ndef first(s):\n    l = len(s)\n    alpha = inf\n    d =  inf\n    sym = inf\n    for i in range(l):\n        c = s[i]\n        if isAlpha(c):\n            alpha = min(alpha, i)\n        if c.isdigit():\n            d = min(d, i)\n        if c in symb:\n            sym = min(sym, i)\n            \n    for i in range(1, l + 1):\n        c = s[l - i]\n        if isAlpha(c):\n            alpha = min(alpha, i)\n        if c.isdigit():\n            d = min(d, i)\n        if c in symb:\n            sym = min(sym, i)\n    \n    return [alpha, d, sym]\n\nn, m = [int(item) for item in input().split()]\nans = float(\"inf\")\ns = []\nfor i in range(n):\n    s.append(input())\n\nfirsts = []\nfor i in range(n):\n    firsts.append(first(s[i]) + [i])\n\na = sorted(firsts, key = lambda x : x[0])\nb = sorted(firsts, key = lambda x : x[1])\nc = sorted(firsts, key = lambda x : x[2])\n\nfor i in range(min(m, 3)):\n    for j in range(min(m, 3)):\n        for k in range(min(m, 3)):\n            #print(a[i][0] + a[j][1] + a[k][2], a[i][3], a[j][3], a[k][3])\n            if a[i][3] != b[j][3] and a[i][3] != c[k][3] and b[j][3] != c[k][3]:\n                ans = min(ans, a[i][0] + b[j][1] + c[k][2])\n\n#print(a)\n#print(b)\n#print(c)\n\nprint(ans)", "read = lambda: map(int, input().split())\nn, m = read()\na = [input() for i in range(n)]\nc1 = '1234567890'\nc2 = 'qwertyuiopasdfghjklzxcvbnm'\nc3 = '#&*'\ninf = 10 ** 20\nl1 = [inf] * n\nl2 = [inf] * n\nl3 = [inf] * n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] in c1: l1[i] = min(l1[i], j, m - j)\n        if a[i][j] in c2: l2[i] = min(l2[i], j, m - j)\n        if a[i][j] in c3: l3[i] = min(l3[i], j, m - j)\nans = inf\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if len({i, j, k}) < 3: continue\n            cur = l1[i] + l2[j] + l3[k]\n            ans = min(ans, cur)\nprint(ans)"]