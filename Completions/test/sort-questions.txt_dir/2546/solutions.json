["import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nfor test in range(t):\n\n    n,s=list(map(int,input().split()))\n    LR=[tuple(map(int,input().split())) for i in range(n)]\n    LR.sort(reverse=True)\n\n    R=[r for l,r in LR]\n    R.sort()\n\n    #print(LR,R)\n\n    MIN=LR[n//2][0]\n    MAX=R[n//2]\n    \n    OK=(n+1)//2\n\n    while MIN!=MAX:\n        mid=(MIN+MAX+1)//2\n        #print(MIN,MAX,mid)\n        count=0\n        money=0\n\n        for l,r in LR:\n\n            if count<OK:\n                if r>=mid:\n                    money+=max(l,mid)\n                    count+=1\n                else:\n                    money+=l\n\n            else:\n                money+=l\n\n        if count>=OK and money<=s:\n            MIN=mid\n        else:\n            MAX=mid-1\n\n    print(MIN)\n                \n            \n\n        \n\n        \n", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\nfor _ in range(T):\n    N, S = list(map(int, input().split()))\n    X = []\n    for __ in range(N):\n        l, r = list(map(int, input().split()))\n        X.append((l, r))\n        \n    ok = 1\n    ng = 10**9+1\n\n    while ng - ok > 1:\n        m = (ok+ng) // 2\n\n        A = []\n        B = []\n        for i in range(N):\n            if X[i][1] >= m:\n                A.append(X[i][0])\n            else:\n                B.append(X[i][0])\n\n        A = sorted(A)[::-1]\n        if len(A) > N//2 and sum([max(a, m) for a in A[:N//2+1]]) + sum(A[N//2+1:]) + sum(B) <= S:\n            ok = m\n        else:\n            ng = m\n\n    print(ok)\n\n", "import sys\nreadline = sys.stdin.readline\n\ninf = 10**16\n\ndef calc(m, L, R):\n    N = len(L)\n    cl = 0\n    cr = 0\n    ss = 0\n    candi = []\n    for i in range(N):\n        if L[i] > m:\n            cr += 1\n            ss += L[i]\n        elif R[i] < m:\n            cl += 1\n            ss += L[i]\n        else:\n            candi.append(L[i])\n    cm = len(candi)\n    if cl > N//2:\n        return inf\n    k = min(cm, N//2 - cl)\n    candi.sort()\n    ss += sum(candi[:k])\n    ss += (cm - k)*m\n    \n    return ss\n\nT = int(readline())\nAns = [None]*T \nfor qu in range(T):\n    M, LS = list(map(int, readline().split()))\n    L = [None]*M\n    R = [None]*M\n    for i in range(M):\n        L[i], R[i] = list(map(int, readline().split()))\n    \n    ok = 0\n    ng = 10**9+1\n    while abs(ok - ng) > 1:\n        med = (ok + ng)//2\n        if calc(med, L, R) <= LS:\n            ok = med\n        else:\n            ng = med\n    Ans[qu] = ok\n\nprint('\\n'.join(map(str, Ans)))\n", "import sys\ndef I():\n    return sys.stdin.readline().rstrip()\n\nfor _ in range( int( I() ) ):\n    n, s = list(map( int, I().split() ))\n    half = n // 2\n    lows = 0\n    l, r = [], []\n    for _ in range( n ):\n        x, y = list(map( int, I().split() ))\n        lows += x\n        l.append( x )\n        r.append( y )\n    money = 0\n    t = 1\n    while t <= 1e9:\n        t *= 2\n    t //= 2\n    while t > 0:\n        people = 0\n        new_money = money + t\n        left = []\n        for low, high in zip( l, r ):\n            if low <= new_money <= high:\n                left.append( new_money - low )\n            elif new_money < low:\n                people += 1\n        left.sort()\n        people = half + 1 - people\n        if people <= 0 or len( left ) >= people and lows + sum( left[:people] ) <= s:\n            money += t\n        t //= 2\n    print( money )\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, s = list(map(int, input().split()))\n    human = []\n    x = n//2 + 1\n    for _ in range(n):\n        human.append(list(map(int, input().split())))\n\n    human.sort(reverse = True)\n    remain = s\n    for i in range(n):\n        remain -= human[i][0]\n\n    right = 10**9+1\n    left = 0\n    while right - left > 1:\n        mid = left + (right-left)//2\n        count = 0\n        money = remain\n        for i in range(n):\n            if human[i][1] < mid:\n                continue\n            elif human[i][0] >= mid:\n                count += 1\n                continue\n            else:\n                if money >= mid - human[i][0]:\n                    money -= mid - human[i][0]\n                    count += 1\n                else:\n                    break\n        if count >= x:\n            left = mid\n        else:\n            right = mid\n    print(left)\n", "def main():\n    from array import array\n    import sys\n    input1 = sys.stdin.readline\n    for _ in range(int(input1())):\n        n, s = list(map(int, input1().split()))\n        n1 = (n + 1) // 2\n        z = array('i', (0,))\n        ls = z * n\n        rs = z * n\n        for i in range(n):\n            ls[i], rs[i] = list(map(int, input1().split()))\n        for l_ in ls:\n            s -= l_\n        lbs, rbs = 1, 1000000001\n        while lbs + 1 < rbs:\n            m = (lbs + rbs) // 2\n            st = sorted((min(l_, m) for (l_, r) in zip(ls, rs) if r >= m), reverse=True)\n            if len(st) >= n1 and m * n1 <= s + sum(st[:n1]):\n                lbs = m\n            else:\n                rbs = m\n        sys.stdout.write(f'{lbs}\\n')\n\n\nmain()\n", "from sys import stdin\ninput = stdin.readline\nq = int(input())\nfor rwre in range(q):\n\tn, s = list(map(int,input().split()))\n\tprzed = [list(map(int,input().split())) for i in range(n)]\n\tprzed.sort()\n\tprzed.reverse()\n\tl = 1\n\tp = 10 ** 9\n\twhile abs(p - l) > 0:\n\t\tmozna = 1\n\t\tsr = (p + l + 1) // 2\n\t\t#try to make median >= sr\n\t\tduze = [przed[i] for i in range(n) if przed[i][1] >= sr ]\n\t\tmale = [przed[i] for i in range(n) if przed[i][1] < sr ]\n\t\tif len(duze) <= n // 2:\n\t\t\tmozna = 0\n\t\telse:\n\t\t\tspent = 0\n\t\t\tdudes = 0\n\t\t\tfor i in range(n//2 + 1):\n\t\t\t\tspent += max(sr, duze[i][0])\n\t\t\tdudes = n//2 + 1\n\t\t\tduze = duze[(n//2+1):]\n\t\t\tfor du in duze:\n\t\t\t\tspent += du[0]\n\t\t\tfor ma in male:\n\t\t\t\tspent += ma[0]\n\t\t\tif spent > s:\n\t\t\t\tmozna = 0\n\t\tif mozna == 1:\n\t\t\tl = sr\n\t\telse:\n\t\t\tp = sr - 1\n\tprint((p+l)//2)\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n", "import sys\ninput = sys.stdin.readline\nimport heapq\nsys.setrecursionlimit(100000)\ndef getN():\n    return int(input())\ndef getList():\n    return list(map(int, input().split()))\n\ndef solve():\n    ls, rs = [], []\n    n, money = getList()\n    sals = []\n    for _ in range(n):\n        a, b = getList()\n        sals.append((a, b))\n\n    # ls.sort()\n    # rs.sort()\n    ans_mx = 10**10\n    ans_mn = 0\n    while(ans_mx - ans_mn > 1):\n        # print(ans_mx, ans_mn)\n        tmp = 0\n        heap = []\n        mid = (ans_mn + ans_mx) // 2\n        for sal in sals:\n            if sal[1] < mid:\n                tmp += sal[0]\n            else:\n                heapq.heappush(heap, (-sal[0], -sal[1]))\n\n        # print(len(heap))\n        if len(heap) < (n + 1) // 2:\n            ans_mx = mid\n            continue\n\n        high = 0\n        tgt = n // 2\n        # print(heap)\n        while(heap):\n            sal_cur = heapq.heappop(heap)\n            if high <= tgt:\n                tmp += max(mid, -sal_cur[0])\n                high += 1\n            else:\n                tmp += -sal_cur[0]\n\n        if tmp <= money:\n            ans_mn = mid\n\n        else:\n            ans_mx = mid\n        # print(tmp)\n\n# ================================\n#     print(ans_mx, ans_mn)\n    tmp = 0\n    heap = []\n    mid = ans_mx\n    # print(\"mid\", mid)\n    for sal in sals:\n        if sal[1] < mid:\n            tmp += sal[0]\n        else:\n            heapq.heappush(heap, (-sal[0], -sal[1]))\n\n    if len(heap) < (n + 1) // 2:\n        print(ans_mn)\n        return\n\n    high = 0\n    tgt = n // 2\n    # print(heap)\n    while (heap):\n        sal_cur = heapq.heappop(heap)\n        # print(sal_cur)\n        if high <= tgt:\n            tmp += max(mid, -sal_cur[0])\n            high += 1\n        else:\n            tmp += -sal_cur[0]\n        # print(tmp)\n    if tmp <= money:\n        print(mid)\n        return\n\n    else:\n        print(ans_mn)\n        return\n    # print(tmp)\n\n\ndef main():\n    t = getN()\n    for times in range(t):\n        solve()\n\n\ndef __starting_point():\n    main()\n\n\"\"\"\n1\n3 26\n10 12\n1 4\n10 11\n\n1\n1 100\n1 1\n\n1\n3 6\n1 1000\n2 1000\n3 1000\n\n\n1\n9 100\n2 4\n3 5\n8 100\n25 100\n2 39\n1 2\n23 40\n1 20\n2 10\n\"\"\"\n__starting_point()", "import sys\ninput1 = sys.stdin.readline\n\ndef solve():\n    n, s = [int(i) for i in input1().split()]\n    empl = []\n    for i in range(n):\n        empl.append([int(j) for j in input1().split()])\n    empl.sort(reverse = True)\n    lg = 0\n    rg = 10 ** 9 + 1\n    while rg - lg > 1:\n        mg = (rg + lg) // 2\n        need = (n + 1) // 2\n        money = s\n        for i in range(n):\n            li = empl[i][0]\n            ri = empl[i][1]\n            if ri >= mg and need > 0:\n                money -= max(mg, li)\n                need -= 1\n            else:\n                money -= li\n        if need == 0 and money >= 0:\n            check = True\n        else:\n            check = False\n        if check:\n            lg = mg\n        else:\n            rg = mg\n    print(lg)\n\nt = int(input1())\nwhile t > 0:\n    empl = []\n    solve()\n    t -= 1", "import sys\ninput = sys.stdin.readline\nt=int(input())\nwhile t>0:\n    t-=1\n    n,ss=map(int,input().split())\n    lr=[]\n    sl=0\n    for i in range(n):\n        l,r=map(int,input().split())\n        sl+=l\n        lr.append([l,r])\n        \n    l=0\n    r=10**9+1\n    while r-l>1:\n        mid=(r+l)//2\n        s=[]\n        for i in range(n):\n            if mid<=lr[i][1]:\n                s.append(max(-lr[i][0],-mid))\n                \n        if len(s)<n//2+1:\n            r=mid\n            continue\n        s.sort()\n        sumi=sl+(n//2+1)*mid+sum(s[:n//2+1])\n       \n        if sumi>ss:\n            r=mid\n        else:\n            l=mid\n        #print(r,l)\n        #print(r,l,sumi,ss)    \n    print(l)    ", "def check(x, s, a, n):\n    num   = (n+1)  // 2\n    cur   = 0\n    sum_  = 0\n    \n    for i in range(n-1, -1, -1):\n        l, r   = a[i]\n        \n        if cur == num:\n            break\n        \n        if l >= x:\n            cur  += 1\n            \n        elif l <= x and x <= r:\n            cur  += 1\n            sum_ += x - l\n    \n    if cur == num and sum_ <= s:\n        return True\n    \n    return False\n\nq = int(input())\n\nans = []\nfor _ in range(q):\n    n, s = list(map(int, input().split()))\n    a    = [list(map(int, input().split())) for _ in range(n)]\n    a    = sorted(a, key = lambda x: x[0])\n\n    s    = s - sum([l for l, r in a]) \n    l, u = a[n // 2][0], 1000000000\n\n    while u - l > 1:\n        md = (u+l) // 2\n    \n        if check(md, s, a, n) == True:\n            l = md\n        else:\n            u = md\n        \n    ans.append(str(l))       \n\nprint('\\n'.join([x for x in ans]))    \n#3\n#3 26\n#10 12\n#1 4\n#10 11\n#1 1337\n#1 1000000000\n#5 26\n#4 4\n#2 4\n#6 8\n#5 6\n#2 7\n", "import sys\ninput = sys.stdin.readline\n \n  \ndef solve(mid):\n    ans = 0\n    cnt = 0\n    tmp = []\n    for i in range(n):\n        l, r = info[i]\n        if r < mid:\n            ans += l\n        elif mid < l:\n            ans += l\n            cnt += 1\n        else:\n            tmp.append(l)\n    tmp.sort(reverse = True)\n    nokori = (n+1) // 2 - cnt\n    for i in tmp:\n        if nokori > 0:\n            ans += mid\n            nokori -= 1\n        else:\n            ans += i\n    if ans <= s and nokori <= 0:\n        return True\n    else:\n        return False\n\nq = int(input())\nfor _ in range(q):\n    n, s = map(int, input().split())\n    info = [list(map(int, input().split())) for i in range(n)]\n    ok = 0\n    ng = s + 1\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if solve(mid):\n            ok = mid\n        else:\n            ng = mid\n    print(ok)", "import sys\ninput = sys.stdin.readline\n \n  \ndef solve(mid):\n    ans = 0\n    cnt = 0\n    tmp = []\n    for i in range(n):\n        l, r = info[i]\n        if r < mid:\n            ans += l\n        elif mid < l:\n            ans += l\n            cnt += 1\n        else:\n            tmp.append(l)\n    tmp.sort(reverse = True)\n    nokori = (n+1) // 2 - cnt\n    for i in tmp:\n        if nokori > 0:\n            ans += mid\n            nokori -= 1\n        else:\n            ans += i\n    if ans <= s and nokori <= 0:\n        return True\n    else:\n        return False\n\nq = int(input())\nans = [0]*q\nfor qi in range(q):\n    n, s = map(int, input().split())\n    info = [list(map(int, input().split())) for i in range(n)]\n    ok = 0\n    ng = s + 1\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if solve(mid):\n            ok = mid\n        else:\n            ng = mid\n    ans[qi] = ok\nprint('\\n'.join(map(str, ans)))", "import sys\ninput = sys.stdin.readline\n \n  \ndef solve(mid):\n    ans = 0\n    cnt = 0\n    tmp = []\n    for i in range(n):\n        if info[i][1] < mid:\n            ans += info[i][0]\n        elif mid < info[i][0]:\n            ans += info[i][0]\n            cnt += 1\n        else:\n            tmp.append(info[i][0])\n    tmp.sort(reverse = True)\n    nokori = (n+1) // 2 - cnt\n    for i in tmp:\n        if nokori > 0:\n            ans += mid\n            nokori -= 1\n        else:\n            ans += i\n    if ans <= s and nokori <= 0:\n        return True\n    else:\n        return False\n\nq = int(input())\nans = [0]*q\nfor qi in range(q):\n    n, s = map(int, input().split())\n    info = [list(map(int, input().split())) for i in range(n)]\n    ok = 0\n    ng = s + 1\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if solve(mid):\n            ok = mid\n        else:\n            ng = mid\n    ans[qi] = ok\nprint('\\n'.join(map(str, ans)))", "import sys\n\ninput1 = sys.stdin.readline\n\n\ndef solve():\n    n, s = [int(i) for i in input1().split()]\n    empl = [[] for i in range(n)]\n    for i in range(n):\n        empl[i] = [int(j) for j in input1().split()]\n    empl.sort(reverse=True)\n    lg = 0\n    rg = 10 ** 9 + 1\n    while rg - lg > 1:\n        mg = (rg + lg) // 2\n        need = (n + 1) // 2\n        money = s\n        for [li, ri] in empl:\n            if ri >= mg and need > 0:\n                money -= max(mg, li)\n                need -= 1\n            else:\n                money -= li\n        if need == 0 and money >= 0:\n            check = True\n        else:\n            check = False\n        if check:\n            lg = mg\n        else:\n            rg = mg\n    print(lg)\n\nt = int(input1())\nwhile t > 0:\n    empl = []\n    solve()\n    t -= 1", "from sys import stdin, stdout \ndef fun1(n,m,l,s):\n    cl=0\n    cr=0\n    cm=0\n    for i in range(n):\n        if l[i][1]<m:\n            s-=l[i][0]\n            cl+=1\n        elif l[i][0]>m:\n            s-=l[i][0]\n            cr+=1\n        else:\n            cm+=1\n            if (cm+cr)<=1+n//2:\n                s-=m\n            else:\n                s-=l[i][0]\n        if (s<0 or cr>n//2 or cl>n//2):\n            return(0)\n    return(1)\n\ndef search(n,low,high,l,su):\n    l1=l[::-1]\n    while(low<high):\n        mid=(low+high)//2\n        if fun1(n,mid,l1,su):\n            low=mid+1\n        else:\n            high=mid\n    if fun1(n,low,l1,su):\n        return(low)\n    return(low-1)\n\n\ndef main():\n    for _ in range(int(stdin.readline())):\n        n,su=[int(x) for x in stdin.readline().split()]\n        l=[[-1,-1] for i in range(n)]\n        l2=[-1 for i in range(n)]\n        for i in range(n):\n            inp=[int(j) for j in stdin.readline().split()]\n            l[i]=inp\n            l2[i]=inp[0]\n        l.sort()\n        low=int(l[n//2][0])\n        print(search(n,low,(10**9)+1,l,su))\n\ndef __starting_point(): \n    main()  \n\n__starting_point()", "def check(mid):\n    x=[]\n    y=[]\n    z=[]\n    for i in it:\n        if i[1]<mid:\n            x.append(i)\n        elif i[0]>=mid:\n            y.append(i)\n        else:\n            z.append(i)\n    co=sum([i[0] for i in x])\n    co+=sum([i[0] for i in y])\n    ll=len(y)\n    m=0\n\n   #if len(z)==0:\n    #    return False\n    ne=max(0,(n+1)//2-ll)\n    if ne>len(z):\n        return False\n    j=0\n    for i in z:\n        if j<len(z)-ne:\n            co+=i[0]\n        else:\n            co+=mid\n        j+=1\n    \n    return co<=s\n   \nimport sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,s=list(map(int,input().split()))\n    it=[]\n    for i in range(n):\n        it.append(list(map(int,input().split())))\n    it.sort()\n    l=1\n    r=max(it,key=lambda x:x[1])[1]+1\n    while abs(l-r)>=2:\n        mid=(l+r)//2\n        st=check(mid)\n        if st:\n            l=mid\n        else:\n            r=mid\n    ma=l\n    for i in range(l,r+1):\n        st=check(i)\n        if st:\n            ma=max(ma,i)\n    print(ma)\n", "def check(x, s, a, n):\n    num = (n+1) // 2\n    cur = 0\n    sum_ = 0\n\n    for i in range(n-1, -1, -1):\n        l, r = a[i]\n\n        if cur == num:\n            break\n\n        if l >= x:\n            cur += 1\n\n        elif l <= x and x <= r:\n            cur += 1\n            sum_ += x - l\n\n    if cur == num and sum_ <= s:\n        return True\n\n    return False\n\n\nq = int(input())\n\nans = []\nfor _ in range(q):\n    n, s = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    a = sorted(a, key=lambda x: x[0])\n\n    s = s - sum([l for l, r in a])\n    l, u = a[n // 2][0], 1000000000\n\n    while u - l > 1:\n        md = (u+l) // 2\n\n        if check(md, s, a, n) == True:\n            l = md\n        else:\n            u = md\n\n    ans.append(str(l))\n\nprint('\\n'.join([x for x in ans]))\n", "3\n\nimport array\nimport math\nimport os\nimport sys\n\n\ndef main():\n    T = read_int()\n    for _ in range(T):\n        N, S = read_ints()\n        A = [read_ints() for _ in range(N)]\n        print(solve(N, S, A))\n\n\ndef solve(N, S, A):\n    minv = [l for l, r in A]\n    minv.sort()\n\n    half = N // 2\n\n    def feasible(target):\n        low = []\n        high = []\n        mid = []\n        for p in A:\n            l, r = p\n            if target < l:\n                high.append(p)\n            elif r < target:\n                low.append(p)\n            else:\n                mid.append(p)\n\n        if len(low) >= half + 1 or len(high) >= half + 1:\n            return False\n\n        tsum = 0\n        for l, r in low:\n            tsum += l\n        for l, r in high:\n            tsum += l\n\n        mid.sort()\n        midi = half - len(low)\n        for i in range(midi):\n            l, r = mid[i]\n            tsum += l\n        tsum += target * (len(mid) - midi)\n\n        return tsum <= S\n\n    lb = minv[half]\n    ub = 10 ** 9 + 1\n    while ub - lb > 1:\n        mid = (ub + lb) // 2\n        if feasible(mid):\n            lb = mid\n        else:\n            ub = mid\n    return lb\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}\".format(i) + sep)\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nfor t in range(int(input())):\n  n, x= read()\n  lr = sorted([list(read()) for i in range(n)], reverse = True)\n\n  s = 0\n  e = 1<<32\n  while s <= e:\n    m = (s + e) // 2\n    money = 0\n    a, b, c = [], [], [] \n\n    for l, r in lr:\n      if l > m:\n        c.append((l, r))\n        money += l \n      elif r < m:\n        a.append((l, r))\n        money += l \n      else:\n        b.append((l, r))\n    \n    if money > x or len(a) >= n//2 + 1:\n      e = m - 1 \n      continue\n    \n    need = n//2 + 1 - len(c)\n    cnt = 0\n    #print(money, a,b,c,m, sep=\"\\n\")\n    for l, r in b:\n      \n      #print(money, cnt, need, l, r)\n      if cnt < need:\n        money += m  \n        cnt += 1\n      else:\n        money += l\n    if money <= x:\n      s = m + 1 \n    else:\n      e = m - 1\n  \n  print(e)\n\n    \n\n\n\n       \n\n\n\n\n    \n", "import sys\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}\".format(i) + sep)\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nfor t in range(int(input())):\n  n, x= read()\n  lr = sorted([list(read()) for i in range(n)], reverse = True)\n\n  s = 0\n  e = 1<<32\n  while s <= e:\n    m = (s + e) // 2\n    money = 0\n    a, b, c = [], [], [] \n\n    for l, r in lr:\n      if l > m:\n        c.append((l, r))\n        money += l \n      elif r < m:\n        a.append((l, r))\n        money += l \n      else:\n        b.append((l, r))\n    \n    if money > x or len(a) >= n//2 + 1:\n      e = m - 1 \n      continue\n    \n    need = n//2 + 1 - len(c)\n    cnt = 0\n    #print(money, a,b,c,m, sep=\"\\n\")\n    for l, r in b:\n      \n      #print(money, cnt, need, l, r)\n      if cnt < need:\n        money += m  \n        cnt += 1\n      else:\n        money += l\n    if money <= x:\n      s = m + 1 \n    else:\n      e = m - 1\n  \n  write(e)\n\n    \n\n\n\n       \n\n\n\n\n    \n", "import sys\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}\".format(i) + sep)\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nfor t in range(int(input())):\n  n, x= read()\n  lr = sorted([list(read()) for i in range(n)], reverse = True)\n\n  s = 0\n  e = 1<<32\n  while s <= e:\n    m = (s + e) // 2\n    money = 0\n    a, b, c = 0, [], 0 \n\n    for l, r in lr:\n      if l > m:\n        c += 1\n        money += l \n      elif r < m:\n        a += 1\n        money += l \n      else:\n        b.append((l, r))\n    \n    if money > x or a >= n//2 + 1:\n      e = m - 1 \n      continue\n    \n    need = n//2 + 1 - c\n    cnt = 0\n    #print(money, a,b,c,m, sep=\"\\n\")\n    for l, r in b:\n      \n      #print(money, cnt, need, l, r)\n      if cnt < need:\n        money += m  \n        cnt += 1\n      else:\n        money += l\n    if money <= x:\n      s = m + 1 \n    else:\n      e = m - 1\n  \n  write(e)\n\n    \n\n\n\n       \n\n\n\n\n    \n"]