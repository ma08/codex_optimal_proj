["md = 10 ** 9 + 7\n\ndef cnk(n, k):\n    if k > n//2:\n        k = n - k\n    ans = 1\n    for i in range(n-k+1, n+1):\n        ans *= i\n    for i in range(2, k+1):\n        ans //= i\n    ans = ans % md\n    return ans\n\n\ndef factor(n):\n    pws = []\n    dv = 2\n    lp = 0\n    while n % dv == 0:\n        lp += 1\n        n //= dv\n    if lp:\n        pws.append(lp)\n    dv = 3\n    while n > 1 and dv * dv <= n:\n        lp = 0\n        while n % dv == 0:\n            lp += 1\n            n //= dv\n        if lp:\n            pws.append(lp)\n        dv += 2\n    if n > 1:\n        pws.append(1)\n    return pws\n\n\ndef main():\n    q = int(input())\n    for __ in range(q):\n        x, y = input().split()\n        x, y = int(x), int(y)\n        ans = pow(2, y - 1, md)\n        for f in factor(x):\n            cm = cnk(f + y - 1, y - 1)\n            ans = (ans * cm) % md\n        print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "md = 10 ** 9 + 7\n\ndef cnk(n, k):\n    if k > n//2:\n        k = n - k\n    ans = 1\n    for i in range(n-k+1, n+1):\n        ans *= i\n    for i in range(2, k+1):\n        ans //= i\n    ans = ans % md\n    return ans\n\n\ndef factor(n):\n    pws = []\n    dv = 2\n    lp = 0\n    while n % dv == 0:\n        lp += 1\n        n //= dv\n    if lp:\n        pws.append(lp)\n    dv = 3\n    while n > 1 and dv * dv <= n:\n        lp = 0\n        while n % dv == 0:\n            lp += 1\n            n //= dv\n        if lp:\n            pws.append(lp)\n        dv += 2\n    if n > 1:\n        pws.append(1)\n    return pws\n\n\ndef main():\n    q = int(input())\n    for __ in range(q):\n        x, y = input().split()\n        x, y = int(x), int(y)\n        ans = pow(2, y - 1, md)\n        for f in factor(x):\n            cm = cnk(f + y - 1, y - 1)\n            ans = (ans * cm) % md\n        print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from array import array\nmd = 10 ** 9 + 7\n\n\ndef fact_all(N):\n    lp = array('Q', [2]*(N+1))\n    pr = array('Q', [2])\n    pra = pr.append\n    for i in range(3, N+1, 2):\n        if lp[i] == 2:\n            lp[i] = i\n            pra(i)\n        for p in pr:\n            ip = i * p\n            if p > lp[i] or ip > N:\n                break\n            lp[ip] = p\n    return lp\n\n\ndef cnk(n, k):\n    if k > n//2:\n        k = n - k\n    ans = 1\n    for i in range(n-k+1, n+1):\n        ans *= i\n    for i in range(2, k+1):\n        ans //= i\n    ans = ans % md\n    return ans\n\n\ndef factor(n, lpa=fact_all(10**6)):\n    pws = []\n    num_ones = 0\n    dv = lpa[n]\n    while n > 1 and dv * dv <= n:\n        lp = 0\n        c, o = divmod(n, dv)\n        while o == 0:\n            lp += 1\n            n = c\n            c, o = divmod(n, dv)\n        if lp == 1:\n            num_ones += 1\n        else:\n            pws.append(lp)\n        dv = lpa[n]\n    if n > 1:\n        num_ones += 1\n        # pws.append(1)\n    return pws, num_ones\n\n\ndef main():\n    q = int(input())\n    for __ in range(q):\n        x, y = input().split()\n        x, y = int(x), int(y)\n        ans = pow(2, y - 1, md)\n        pws, num_ones = factor(x)\n        for f in pws:\n            cm = cnk(f + y - 1, f)\n            ans = (ans * cm) % md\n        if num_ones:\n            ans = (ans * pow(y, num_ones, md)) % md\n        print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# from array import array\nmd = 10 ** 9 + 7\n\n\ndef fact_all(N):\n    # lp = array('L', [2]*(N+1))\n    # pr = array('L', [2])\n    lp = [2]*(N+1)\n    pr = [2]\n    pra = pr.append\n    for i in range(3, N+1, 2):\n        if lp[i] == 2:\n            lp[i] = i\n            pra(i)\n        for p in pr:\n            ip = i * p\n            if p > lp[i] or ip > N:\n                break\n            lp[ip] = p\n    return lp\n\n\ndef cnk(n, k):\n    if k > n//2:\n        k = n - k\n    ans = 1\n    for i in range(n-k+1, n+1):\n        ans *= i\n    for i in range(2, k+1):\n        ans //= i\n    ans = ans % md\n    return ans\n\n\ndef factor(n, lpa=fact_all(10**6)):\n    pws = []\n    num_ones = 0\n    dv = lpa[n]\n    while n > 1 and dv * dv <= n:\n        lp = 0\n        c, o = divmod(n, dv)\n        while o == 0:\n            lp += 1\n            n = c\n            c, o = divmod(n, dv)\n        if lp == 1:\n            num_ones += 1\n        else:\n            pws.append(lp)\n        dv = lpa[n]\n    if n > 1:\n        num_ones += 1\n        # pws.append(1)\n    return pws, num_ones\n\n\ndef main():\n    q = int(input())\n    for __ in range(q):\n        x, y = input().split()\n        x, y = int(x), int(y)\n        ans = pow(2, y - 1, md)\n        pws, num_ones = factor(x)\n        for f in pws:\n            cm = cnk(f + y - 1, f)\n            ans = (ans * cm) % md\n        if num_ones:\n            ans = (ans * pow(y, num_ones, md)) % md\n        print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import sqrt\nfrom itertools import chain\nimport sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\nub = 1010\nub_sqrt = int(sqrt(ub))+1\nprimes = {2, 3} | set(chain(range(5, ub, 6), range(7, ub, 6)))\ndu = primes.difference_update\nfor n in chain(range(5, ub_sqrt, 6), range(7, ub_sqrt, 6)):\n    if n in primes:\n        du(range(n*3, ub, n*2))\n\nm = 10**6 + 100\nfac, inv = [1]*m, [0]*m\nfor i in range(2, m):\n    fac[i] = fac[i-1] * i % mod\ninv[-1] = pow(fac[-1], mod-2, mod)\nfor i in range(m-1, 0, -1):\n    inv[i-1] = inv[i] * i % mod\n\nq = int(input())\nans_a = [0]*q\nfor pi in range(q):\n    x, y = map(int, input().split())\n    ans = 1\n    for p in primes:\n        if x % p == 0:\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            ans = ans * fac[cnt+y-1] * inv[cnt] * inv[y-1] % mod\n    if x > 1:\n        ans = ans * y % mod\n    ans = ans * pow(2, y-1, mod) % mod\n    ans_a[pi] = ans\n\nprint(*ans_a, sep='\\n')\n"]