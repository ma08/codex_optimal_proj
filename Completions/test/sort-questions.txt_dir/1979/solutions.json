["from collections import Counter\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\naidx = [-1]*n\nbidx = [-1]*n\n\nfor i, (ai, bi) in enumerate(zip(a, b)):\n    aidx[ai-1] = i\n    bidx[bi-1] = i\n\ndiffs = [(aidx[i] - bidx[i]) % n for i in range(n)]\nprint(max(Counter(diffs).values()))\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndiff = [0] * n\nout = [0] * n\nfor i in range(n):\n    diff[a[i]-1]+=i\nfor i in range(n):\n    diff[b[i]-1]-=i\nfor v in diff:\n    out[v] += 1\nprint(max(out))\n", "from sys import stdin\ninput = stdin.readline\n\nfrom collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nd = {j: i for i, j in enumerate(b)}\n\nds = []\n\nfor i in range(n):\n    ds.append((d[a[i]] - i) % n)\n\nprint(max(Counter(ds).values()))", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nn = read_int()\na = list(read_ints())\nb = list(read_ints())\ncnt = dict()\nad = dict()\nbd = dict()\nfor i in range(n):\n    ad[a[i]] = i\n    bd[b[i]] = i\nfor i in range(1, n + 1):\n    delta = (bd[i] - ad[i] + n) % n\n    if not delta in cnt:\n        cnt[delta] = 0\n    cnt[delta] += 1\nans = 0\nfor key in cnt:\n    ans = max(ans, cnt[key])\nprint(ans)\n", "from collections import Counter\n\nN = int(input())\n\nA = [int(_) for _ in input().split()]\nB = [int(_) for _ in input().split()]\n\nposA = {}\nfor i, el in enumerate(A):\n    posA[el] = i\n\ncc = Counter()\nfor i, el in enumerate(B):\n    diff = i - posA[el]\n    if diff < 0:\n        diff += N\n    cc[diff] += 1\n\nprint(cc.most_common()[0][1])\n", "n = int(input())\naa = list(map(int, input().split()))\naid = [0] * (n + 1)\nfor i, a in enumerate(aa):\n    aid[a] = i\nbb = list(map(int, input().split()))\ndcount = [0] * n\nfor i, b in enumerate(bb):\n    dcount[(i - aid[b]) % n] += 1\nprint(max(dcount))\n", "import sys\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return map(int, tinput())\n\ndef fiinput():\n    return map(float, tinput())\n \ndef rlinput():\n    return list(map(int, input().split()))\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n    \n    \ndef main():\n    n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    #q = srlinput()\n    q = rlinput()\n    b = dict()\n    o = 0\n    for i in rlinput():\n        b[i] = o\n        o += 1\n    res = [0 for i in range(n)]\n    for i in range(n):\n        res[i] = b[q[i]] - i\n        if res[i] < 0:\n            res[i] += n\n    f = dict()\n    for i in res:\n        if i in f:\n            f[i] += 1\n        else:\n            f[i] = 1\n    z = 0\n    for i, v in f.items():\n        z = max(z, v)\n    print(z)\n        \n        \n    \n    \n    \n    \nfor inytd in range(1):\n    main()", "from bisect import bisect_left as lower_bound, bisect_right as upper_bound\nfrom sys import stdin, stdout\nfrom collections import defaultdict\n\ndef solve(arr, n):\n    pass\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n\n    ma = {i: [] for i in range(1, n+1)}\n\n    for index,num in enumerate(a): ma[num].append(index)\n    for index,num in enumerate(b): ma[num].append(index)\n\n    cnt = {}\n    ret = 0\n    \n    for i in range(1, n+1):\n        diff = ma[i][1] - ma[i][0]\n\n        if diff < 0: diff = n-abs(diff)\n\n        cnt[diff] = cnt.get(diff, 0) + 1\n\n        ret = max(ret, cnt[diff])\n\n    print(ret)\n        \n\n\ndef __starting_point(): main()\n\n__starting_point()", "from math import *\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nd = dict()\nfor i in range(n):\n\td[a[i]] = i\ndif = dict()\nfor i in range(n):\n\tx = (i - d[b[i]])%n\n\tif(x in dif):\n\t\tdif[x] += 1\n\telse:\n\t\tdif[x] = 1\nprint(max(dif.values()))", "from collections import Counter\nimport sys\nints = (int(x) for x in sys.stdin.read().split())\nsys.setrecursionlimit(3000)\n\ndef main():\n    n = next(ints)\n    A = [0]*n\n    for i in range(n): A[next(ints)-1]=i\n    b = [next(ints) for i in range(n)]\n    ans = max(Counter((i-A[b[i]-1])%n for i in range(n)).values())\n    print(ans)\n    return\n\nmain()\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * n\np = [0] * n\nq = [0] * n\nfor i in range(n):\n    p[a[i] - 1] = i\n    q[b[i] - 1] = i\nfor i in range(n):\n    c[(p[i] - q[i]) % n] += 1\nprint(max(c))", "from collections import Counter\nn = int(input())\nt = [0] * n\nfor i, v in  enumerate(map(int, input().split())):\n    t[v-1] = i\nfor i, v in  enumerate(map(int, input().split())):\n    t[v-1] -= i\n    t[v-1] %= n\nprint(max(Counter(t).values()))\n", "from collections import Counter\nfrom sys import stdin\ninput = iter(stdin.readlines()).__next__\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nia = [0] * n\nib = [0] * n\nfor i, ai in enumerate(a):\n    ia[ai - 1] = i\nfor i, bi in enumerate(b):\n    ib[bi - 1] = i\n\ndiffs = [a_i - b_i for a_i, b_i in zip(ia, ib)]\nfor i, diff in enumerate(diffs):\n    if diff < 0:\n        diffs[i] = diff + n\ncounts = Counter(diffs)\nprint(counts.most_common(1)[0][1])\n", "import sys\ninput=sys.stdin.readline\ndef N(): return int(input())\ndef NM():return map(int,input().split())\ndef L():return list(NM())\ndef LN(n):return [N() for i in range(n)]\ndef LL(n):return [L() for i in range(n)]\nn=N()\na=L()\nb=L()\nd=dict()\nfor i,j in enumerate(a):\n    d[j]=i\nimport collections\nans=collections.defaultdict(int)\nfor i,j in enumerate(b):\n    ans[(d[j]-i)%n]+=1\nprint(max(ans.values()))", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nl1 = list(map(int,input().split()))\nl2 = list(map(int,input().split()))\nelt_to_pos1 = [0] * n\nelt_to_pos2 = [0] * n\nfor i in range(n):\n\telt_to_pos1[l1[i]-1] = i\n\telt_to_pos2[l2[i]-1] = i\ndupa = [0] * n\nfor i in range(n):\n\tif elt_to_pos1[i] <= elt_to_pos2[i]:\n\t\tdupa[elt_to_pos2[i]-elt_to_pos1[i]] += 1\n\telse:\n\t\tdupa[n-elt_to_pos1[i]+elt_to_pos2[i]] += 1\nprint(max(dupa))", "\n# Below is Pythone code for input/output \n#comment this out when submiting \n  \nimport sys \nfrom collections import Counter\n\n\n\n\n#########  utils \ndef read_ints():\n\treturn [int(i) for i in input().strip().split()]\n\n\ndef solve():\n\t#solves one test case \n\tpass \n\ndef intersection(left, right, mn, mx):\n\t#return [left, right ] or None \n\tif right < mn or left > mx:\n\t\treturn None \n\telse:\n\t\treturn [max(left, mn), min(right, mx)]\n\n\ndef main():\n\tn = int(input())\n\ta = read_ints()\n\tb = read_ints()\n\t#get all the diffs then find the mode \n\t#make dict of val to index \n\t# lineer pass to get diff array \n\td = dict()\n\tfor idx, i in enumerate(a):\n\t\td[i] = idx \n\tdiff = []\n\tfor idx , i in enumerate(b):\n\t\tidx1 = d[i]\n\t\tdelta = (idx1 - idx) % n \n\t\tdiff.append(delta)\n\tdata = Counter(diff)\n\tprint(data.most_common(1)[0][1])\n\n\n\t\n\t\n\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\t\n\n\n\n__starting_point()"]