["n, k = list(map(int,input().split()))\nif k == 1 or k == n:\n    print(3 * n)\nelse:\n    print(3 * n + min(k - 1, n - k))\n", "l = list(map(int, input().split()))\nprint(3*l[0]+min(l[1]-1,l[0]-l[1]))\n", "import getpass\nimport math\nimport sys\nimport string\nimport re\nimport math\nimport random\nfrom decimal import Decimal, getcontext\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nif getpass.getuser() != 'frohenk':\n    filename = 'half'\n    # sys.stdin = open('input.txt')\n    # sys.stdout = open('output.txt', 'w')\nelse:\n    sys.stdin = open('input.txt')\n    # sys.stdin.close()\n\nn, k = ria()\nrcks = n + 1\nmny = n\nmvs = min((k - 1) * 2 + (n - k), (k - 1) + (n - k) * 2)\n\nif k == 1:\n    mvs = n - 1\n\nif k == n:\n    mvs = n - 1\n    \nprint(mvs + rcks + mny)\n", "n, k = map(int, input().split())\nans = 2 * n + 1\nans += n - 1 + min(k - 1, n - k)\nprint(ans)", "n,k = list(map(int,input().split()))\n\nif k == 1:\n    print(3*(n-1)+3)\nelif k == n:\n    print(3*(n-1)+3)\n\nelse:\n    shorter = min(k-1,n-k)\n    longer = max(k-1,n-k)\n    out = 0\n    out += shorter*3 + shorter + longer*3 +3\n    print (out)\n", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nn, k = mi()\nif k - 1 > n - k:\n    k = n - k + 1\n\nans = n + k - 1 + 1 + n + n - 1\nprint(ans)", "# -*- coding: utf-8 -*-\n\n\ndef rli():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n, k = rli()\n    ans = n * 3\n    if k != n and k != 1:\n        ans += min(n - k, k - 1)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = list(map(int, input().split()))\nprint(n * 3 + min(k, n + 1 - k) - 1)\n", "n,k=[int(x) for x in input().split()]\nprint(min(n-k,k-1)+3*n)\n", "n,k=list(map(int,input().split()))\ndiff1=k-1\ndiff2=n-k\nans=2\nif(diff1<=diff2):\n\tans+=4*(diff1)\n\tans+=1\n\tans+=3*(diff2)\nelse:\n\tans+=4*(diff2)\n\tans+=1\n\tans+=3*(diff1)\nprint(ans)\n", "N, K = list(map(int, input().split()))\nprint(3*N+min(K-1, N-K))\n", "n, k = map(int, input().split())\nprint(n + min(k-1, n-k) + n + n)", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\n\nisdebug = False\ntry :\n    #raise ModuleNotFoundError\n    import pylint\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\n    isdebug = True\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\ndef red_inout():\n    inId = 0\n    outId = 0\n    if not isdebug:\n        inId = 0\n        outId = 0\n    if inId>0:\n        dprint('use input', inId)\n        try:\n            f = open('input'+ str(inId) + '.txt', 'r')\n            sys.stdin = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid input file')\n    if outId>0:\n        dprint('use output', outId)\n        try:\n            f = open('stdout'+ str(outId) + '.txt', 'w')\n            sys.stdout = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid output file')\n            \n        atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n\nif isdebug and len(sys.argv) == 1:\n    red_inout()\n\ndef getIntList():\n    return list(map(int, input().split()))            \n\ndef solve(): \n    pass\n    \nT_ = 1    \n#T_, = getIntList()\n\nfor iii_ in range(T_):\n    #solve()\n    N, K = getIntList()\n    #print(N)\n    r = N+1\n    r+= N\n    r +=N\n    r += min(K-1, N-K) -1\n    print(r)\n    \n\n\n\n\n\n\n", "n, k = map(int, input().split())\nk -= 1\n\ngo_to_border = min(k, n-k-1)\nmore = 3 * n\nprint(go_to_border + more)", "n, k = list(map(int, input().split()))\nans = 0\nif k != 1 and k != n:\n    ans = 2 * min(k - 1, n - k) + max(k - 1, n - k) + 2 * n + 1\nelse:\n    ans = 3 * n\nprint(ans)\n", "n, k = list(map(int, input().split()))\nans = (n + 1) + n + min(n - k, k - 1) + (n - 1)\nprint(ans)\n", "n, k = list(map(int, input().split()))\n\nl = k - 1\nr = n - k\n\nprint(1 + n + 2 * min(l, r) + max(l, r) + n)\n", "n, k = map(int, input().split())\nif 2 * k <= (n + 1):\n    print(3 * n + k - 1)\nelse:\n    print(4 * n - k)", "n, k = list(map( int, input().split()))\n\nmn = min( k - 1, n - k )\n\nprint( 3*n + mn )\n", "n,k=map(int,input().split())\nans=n*3\nu=min(n-k,k-1)\nans=ans+u\nprint(ans)", "n, k = (int(t) for t in input().split(' '))\nprint(n*3 + min(k-1, (n-k)))", "n, k = list(map(int, input().split()))\nprint(n + 1 + n + n - 1 + min(k - 1, n - k))\n", "n, m = list(map(int,input().split()))\nprint(n * 3 + min(m - 1, n - m))\n", "def main():\n    n,k = list(map(int,input().split()))\n    moves = 2*n\n    moves += 1\n    moves += min(k-1,n-k)\n    moves += n-1\n\n    print (moves)\n\nmain()\n", "n,k = list(map(int,input().split()))\nif k > n//2:\n\tk = n + 1 - k\nprint( 2 * (k - 1) + 1 + k + 2 + 2 * (n - k - 1 ) + n)"]