["import sys\nn, m = list(map(int, sys.stdin.readline().split()))\nvis = [0] * 1000005\nnum = list(map(int, sys.stdin.readline().split()))\nflag = 0\ntemp = num[0]\nfor i in range(n):\n    if num[i] != temp:\n        flag = 1\n        break\nif flag == 0:\n    print(\"{0} {1}\".format(1, n))\nelse:\n    l = 0\n    r = 0\n    al = 0\n    ar = 0\n    ans = 0\n    now = 0\n    for i in range(n):\n        vis[num[i]] += 1\n        if vis[num[i]] == 1:\n            now += 1\n        while now > m:\n            vis[num[l]] -= 1\n            if vis[num[l]] == 0:\n                now -= 1\n            l += 1\n        if i - l + 1 > ar - al + 1:\n            ar = i\n            al = l\n    print('{0} {1}'.format(al+1, ar+1))\n\n\n\n\n\n", "s1 = input().split()\nlength = int(s1[0])\nmax_k = int(s1[1])\ns2 = input()\n\narr = s2.split()\nstart = 0\nend = 0\ndist = dict()\ns = start\nmax_l = 0\nfor i in range(length):\n    cur = arr[i]\n    if cur not in dist:\n        dist[cur] = 1\n    else:\n        dist[cur] += 1\n    k = len(dist)\n    l = i - s\n    if k > max_k:\n        to_remove = arr[s]\n        if dist[to_remove] == 1:\n            dist.pop(to_remove)\n        else:\n            dist[to_remove] -= 1\n        l -= 1\n        s += 1\n    if l > max_l:\n        start = s\n        max_l = l\n        end = i\n\n\nprint(start + 1, end + 1)\n", "from collections import defaultdict\n\nn, k = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nD = defaultdict(int)\nl = 0\nargmax = (0, 0)\nfor i in range(n):\n    D[A[i]] += 1\n    if len(D) > k:\n        if argmax[1] - argmax[0] < i-1 - l: argmax = (l, i-1)\n        while len(D) > k:\n            D[A[l]] -= 1\n            if D[A[l]] == 0: D.pop(A[l])\n            l += 1\nif argmax[1] - argmax[0] < n-1 - l: argmax = (l, n-1)\nprint(argmax[0] + 1, argmax[1] + 1)\n", "def main():\n    n, k = list(map(int, input().split()))\n    l, cnt = list(map(int, input().split())), [0] * 1000001\n    start = end = j = m = 0\n    for i, x in enumerate(l):\n        if not cnt[x]:\n            k -= 1\n        cnt[x] += 1\n        if k < 0:\n            x = l[j]\n            cnt[x] -= 1\n            if not cnt[x]:\n                k += 1\n            j += 1\n        if m < i - j:\n            m, start, end = i - j, j, i\n    print(start + 1, end + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nn,k = map(int, input().split())\nhash = [0]*1000001\nnow = 0\na = list(map(int, input().split()))\nans = 0\nl = 0\n\nfor r in range(n):\n\thash[a[r]]+=1\n\tif hash[a[r]] == 1: now+=1\n\twhile (now>k):\n\t\thash[a[l]]-=1\n\t\tif (hash[a[l]]==0): now-=1\n\t\tl+=1\n\tif r-l+1>ans:\n\t\tal = l\n\t\tar = r\n\t\tans = r-l+1\nprint(al+1,ar+1)", "import sys\nimport collections\n\nn, k = list(map(int, input().split()))\na = list( map( int, sys.stdin.readline().split() ) )\nct = collections.defaultdict(int)\nl, longest, numbers = 0, 0, 0\nfor r in range(n):\n    ct[ a[r] ] += 1\n    if ct[ a[r] ] == 1: numbers += 1\n    while numbers > k:\n        ct[ a[l] ] -= 1\n        if ct[ a[l] ] == 0: numbers -= 1\n        l += 1\n    if r - l + 1 > longest:\n        longest = r - l + 1\n        ans = (l + 1, r + 1)\nprint('%d %d' %(ans))\n", "n,k=list(map(int,input().split()))\nlis=list(map(int,input().split()))\n\nins=[0 for i in range(10**6)]\nins[lis[0]]+=1\nzeroes=10**6-1\nmL=0\npair=[0,0]\nr=0\nfor l in range(n):\n\n    if l>0:\n        ins[lis[l-1]]-=1\n        if ins[lis[l-1]]==0:\n            zeroes+=1\n\n    while 10**6-zeroes<=k and r<n-1:\n        r+=1\n        ins[lis[r]]+=1\n        if ins[lis[r]]==1:\n            zeroes-=1\n\n        if 10**6-zeroes==k+1:\n            ins[lis[r]]-=1\n            zeroes+=1\n            r-=1\n            break\n\n    if mL<r-l:\n        mL=r-l\n        pair=[l,r]\n\nprint(pair[0]+1,pair[1]+1)\n", "n = input()\np = input()\nn = n.split(' ')\nk = int(n[1])\nn = int(n[0])\np = p.split(' ')\np = [int(q) for q in p]\ncnt = [0 for i in range(0,int(1e6 + 1))]\ncurcnt = 0\nl = 0\nr = -1\nmaxlen = -1\nmaxl = 0\nmaxr = 0\nwhile r<n-1 and l<=n:\n    while(r<n-1 and (curcnt + (cnt[p[r+1]] == 0)) <=k):\n        curcnt = curcnt + (cnt[p[r+1]] == 0)\n        cnt[p[r+1]] +=1 \n        r+=1\n    if maxlen <(r-l):\n        maxlen = r-l\n        maxr = r\n        maxl = l\n    cnt[p[l]]-=1\n    curcnt-=(cnt[p[l]]==0)\n    l+=1\nprint(str(maxl+1)+' '+str(maxr+1))\n\n#16 3\n#4 2 6 9 6 8 3 3 4 8 2 3 4 6 9 6\n#13 3\n#1 2 3 4 3 5 6 6 1 3 4 3 7\n#16 3\n#1 2 6 9 6 8 3 3 1 8 2 3 6 9 6\n", "n = input()\np = input()\nn = n.split(' ')\nk = int(n[1])\nn = int(n[0])\np = p.split(' ')\np = [int(q) for q in p]\ncnt = [0]*(int(1e6+1))\ncurcnt = 0\nl = 0\nr = -1\nmaxlen = -1\nmaxl = 0\nmaxr = 0\nwhile r<n-1 and l<=n:\n    while(r<n-1 and (curcnt + (cnt[p[r+1]] == 0)) <=k):\n        curcnt = curcnt + (cnt[p[r+1]] == 0)\n        cnt[p[r+1]] +=1 \n        r+=1\n    if maxlen <(r-l):\n        maxlen = r-l\n        maxr = r\n        maxl = l\n    cnt[p[l]]-=1\n    curcnt-=(cnt[p[l]]==0)\n    l+=1\nprint(str(maxl+1)+' '+str(maxr+1))\n\n#16 3\n#4 2 6 9 6 8 3 3 4 8 2 3 4 6 9 6\n#13 3\n#1 2 3 4 3 5 6 6 1 3 4 3 7\n#16 3\n#1 2 6 9 6 8 3 3 1 8 2 3 6 9 6\n", "\ndef main():\n    n, k = map(int,input().split())\n    element_count = [0]*1000001\n\n    count=0\n    a = list(map(int, input().split()))\n    s = 0\n    res=0\n    for t in range(n):\n        element_count[a[t]] += 1\n        if element_count[a[t]] == 1: count += 1\n        while count > k:\n            element_count[a[s]] -= 1\n            if element_count[a[s]] == 0: count -= 1\n            s +=1\n        if t - s + 1 > res:\n            res = t - s + 1\n            l = s\n            r = t\n\n    print(l+1,r+1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "\ndef main():\n    n, k = map(int,input().split())\n    a = list(map(int, input().split()))\n    element_count = [0]*1000001\n    count=0\n    s = 0\n    res=0\n    for t in range(n):\n        element_count[a[t]] += 1\n        if element_count[a[t]] == 1: count += 1\n        while count > k:\n            element_count[a[s]] -= 1\n            if element_count[a[s]] == 0: count -= 1\n            s +=1\n        if t - s + 1 > res:\n            res = t - s + 1\n            l = s\n            r = t\n    print(l+1,r+1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "\ndef main():\n    n,k = list(map(int, input().split()))\n    myList = list(map(int, input().split()))\n    #n,k = 5,5\n    #myList = [1,2,3,4,5]\n    i = 0\n    distinct = 0\n    dictOf = [0]*1000001\n    best = 0\n    bestX = 0\n    bestY = 0\n    for j in range(n):\n        dictOf[myList[j]] += 1\n        if dictOf[myList[j]] == 1:\n            distinct += 1\n        while distinct > k:\n            dictOf[myList[i]] -= 1\n            if dictOf[myList[i]] == 0:\n                distinct -= 1\n            i += 1\n        if j-i+1 > best:\n            best = j-i+1\n            bestX = i+1\n            bestY = j+1\n    print(bestX, bestY)\n\ndef __starting_point():\n    main()\n    \n\n\n__starting_point()", "R = lambda: map(int, input().split())\nn, k = R()\narr = list(R())\nrl, rr = 0, 0\nl = 0\nrec = {}\nfor r, v in enumerate(arr):\n    rec.setdefault(v, 0)\n    rec[v] += 1\n    while len(rec) > k:\n        rec[arr[l]] -= 1\n        if not rec[arr[l]]:\n            rec.pop(arr[l])\n        l += 1\n    if rr - rl < r - l:\n        rl, rr = l, r\nprint(rl + 1, rr + 1)", "def solve(n, k, a):\n\tl, r, cur, answer_l, answer_r = 0, 0, 1, 0, 0\n\n\tcnt = [0 for _ in range(1000010)]\n\tcnt[a[0]] = 1\n\n\twhile r + 1 < n:\n\t\tr += 1\n\t\tcnt[a[r]] += 1\n\n\t\tif cnt[a[r]] == 1:\n\t\t\tcur += 1\n\n\t\tif cur > k:\n\t\t\tif r - l - 1 > answer_r - answer_l:\n\t\t\t\tanswer_l, answer_r = l, r - 1\n\n\t\twhile cur > k:\n\t\t\tcnt[a[l]] -= 1\n\t\t\t\n\t\t\tif cnt[a[l]] == 0:\n\t\t\t\tcur -= 1\n\n\t\t\tl += 1\n\n\tif r - l > answer_r - answer_l:\n\t\tanswer_l, answer_r = l, r\n\n\tprint(answer_l + 1, answer_r + 1)\n\n\ndef __starting_point():\n\tn, k = list(map(int, input().split()))\n\n\ta = list(map(int, input().split()))\n\n\tsolve(n, k, a)\n\n__starting_point()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = [0] * 1000001\nt = 0\n\nleft = 0\nright = -1\n\nl = 0\nr = 0\nwhile r < n:\n    if cnt[a[r]] > 0: # already have this one\n        cnt[a[r]] += 1\n        r += 1\n    elif t < k: # still has capacity\n        cnt[a[r]] = 1\n        t += 1\n        r += 1\n    else:\n        # final answer for starting from l\n        if r - l > right - left + 1:\n            left = l\n            right = r - 1\n\n        # prepare for next answer\n        cnt[a[l]] -= 1\n        if cnt[a[l]] == 0:\n            t -= 1\n        l += 1\n\nif r - l > right - left + 1:\n    left = l\n    right = r - 1\n\nprint(left + 1, right + 1)", "def main():\n  a = [int(x) for x in input().split()]\n  g = 1\n  mo = 0\n  w = 1\n  bigarray = [0]* 1000000\n  rmo = []\n  req = a[1]\n  seq = [int(x) for x in input().split()]\n  bigarray[seq[0]] += 1\n  first = 0\n  last = 0\n  if a[0] == req:\n    rmo = [1, a[0]]\n  else:\n    while first != len(seq) - 1:\n      if w < req:\n        if bigarray[seq[first + 1]] == 0:\n          first += 1\n          bigarray[seq[first]] += 1\n          g = g + 1\n          w = w + 1\n        elif bigarray[seq[first + 1]] != 0:\n          bigarray[seq[first + 1]] += 1\n          first = first + 1\n          g = g + 1\n        if mo < g:\n          mo = g\n          rmo = [last + 1, first + 1]\n      elif w >= req:\n        if bigarray[seq[first + 1]] == 0:\n          bigarray[seq[last]] -= 1\n          if bigarray[seq[last]] == 0:\n            w = w - 1\n          if g > mo:\n            mo = g\n            rmo = [last + 1, first + 1]\n          g = g - 1\n          last = last + 1\n        else:\n          g = g + 1\n          first += 1\n          bigarray[seq[first]] += 1\n          if mo < g:\n            mo = g\n            rmo = [last + 1, first + 1]\n  for x in rmo:\n    print(x, end = ' ')\nmain() ", "def main():\n  a = [int(x) for x in input().split()]\n  g = 1\n  mo = 0\n  w = 1\n  bigarray = [0]* 1000000\n  rmo = []\n  req = a[1]\n  seq = [int(x) for x in input().split()]\n  bigarray[seq[0]] += 1\n  first = 0\n  last = 0\n  if a[0] == req:\n    rmo = [1, a[0]]\n  else:\n    while first != len(seq) - 1:\n      if w < req:\n        if bigarray[seq[first + 1]] == 0:\n          first += 1\n          bigarray[seq[first]] += 1\n          g = g + 1\n          w = w + 1\n        elif bigarray[seq[first + 1]] != 0:\n          bigarray[seq[first + 1]] += 1\n          first = first + 1\n          g = g + 1\n        if mo < g:\n          mo = g\n          rmo = [last + 1, first + 1]\n      elif w >= req:\n        if bigarray[seq[first + 1]] == 0:\n          bigarray[seq[last]] -= 1\n          if bigarray[seq[last]] == 0:\n            w = w - 1\n          if g > mo:\n            mo = g\n            rmo = [last + 1, first + 1]\n          g = g - 1\n          last = last + 1\n        else:\n          g = g + 1\n          first += 1\n          bigarray[seq[first]] += 1\n          if mo < g:\n            mo = g\n            rmo = [last + 1, first + 1]\n  for x in rmo:\n    print(x, end = ' ')\nmain()\n      ", "n,k=map(int,input().split())\nl=[int(i) for i in input().split()]\nmaxi=0\nleft=-1 \nright=-1 \nans=0\nfrom collections import defaultdict \nd=defaultdict(int)\nst=0 \nend=0 \nfor end in range(n): \n    d[l[end]]+=1 \n    if d[l[end]]==1:\n        ans+=1 \n    while ans>k: \n        d[l[st]]-=1 \n        if d[l[st]]==0:\n            ans-=1 \n        st+=1 \n    if end-st+1>maxi:\n        maxi=end-st+1 \n        left=st \n        right=end \n\n\nprint(left+1,right+1)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 0\ncur_r = 0\nd = {}\ncur_ans = 0\nans_1 = 0\nans_2 = 0\n\nfor cur_l in range(n):\n    t = a[cur_l]\n    d[t] = d.get(t, 0)+1\n    if d[t] == 1:\n        cur_ans += 1\n\n    while cur_ans > k:\n        t = a[cur_r]\n        d[t] -= 1\n        if not(d[t]):\n            cur_ans -= 1\n        cur_r += 1\n\n    if cur_l-cur_r+1 > ans:\n        ans = cur_l-cur_r+1\n        ans_1 = cur_r\n        ans_2 = cur_l\n\nprint(ans_1+1, ans_2+1)\n", "def longest(n,k,a):\n    f = [0] * 1000001\n    d = 0\n    r = 0\n    l = 0\n    ans_l = 0\n    ans_r = 0\n    for r in range(0, n):\n        f[a[r]] += 1\n        if f[a[r]] == 1:\n            d +=1\n        while d > k:\n            f[a[l]] -= 1\n            if f[a[l]] == 0:\n                d -= 1\n            l += 1\n        if ans_r - ans_l < r - l:\n            ans_r = r\n            ans_l = l\n    return str(ans_l + 1) + \" \"+ str(ans_r + 1)\nline_1 = list(map(int, input().split()))\nn = line_1[0]\nk = line_1[1]\nline_2 = list(map(int, input().split()))\n\nprint(longest(n, k, line_2))\n\"\"\"\n5 5\n1 2 3 4 5\n\"\"\"\n\"\"\"\n9 3\n6 5 1 2 3 2 1 4 5\n\"\"\"\n\"\"\"\n3 1\n1 2 3\n\"\"\"\n"]