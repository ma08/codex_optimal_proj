["n = int(input())\na = list(map(int, input().split()))\n\ncnt_zero, cnt_nega, cnt_nega_max, cnt_nega_max_pos = 0, 0, -1e10, -1\nused = [0]*n\n\nfor i, v in enumerate(a):\n    if v == 0:\n        cnt_zero += 1\n        used[i] = 1\n        continue\n    if v < 0:\n        cnt_nega += 1\n        if cnt_nega_max_pos == -1 or cnt_nega_max < v:\n           cnt_nega_max = v\n           cnt_nega_max_pos = i\nif cnt_nega%2 == 1:\n    used[cnt_nega_max_pos] = 1\n\nif cnt_zero == n or (cnt_zero == n-1 and cnt_nega == 1):\n    for i in range(n-1):\n        print('1', i+1, i+2)\nelse:     \n    left = -1\n    for i in range(n):\n        if used[i] == 1:\n            if left != -1: print('1', left+1, i+1)\n            left = i\n    if left != -1:\n        print('2', left+1)\n    left = -1\n    for i in range(n):\n        if used[i] == 0:\n            if left != -1: print('1', left+1, i+1)\n            left = i\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    cnt_z, cnt_n, idx = 0, 0, -1\n    z_idx = []\n    a.append(-10**9-1)\n    for i in range(n):\n        if a[i] < 0:\n            cnt_n += 1\n            idx = i if a[idx] < a[i] else idx\n        elif not a[i]:\n            cnt_z += 1\n            z_idx.append(i)\n\n    if cnt_z == n or cnt_z == n - 1 and cnt_n == 1:\n        for i in range(n-1):\n            print(1, i+1, i+2)\n        return\n\n    used = [0 for i in range(n)]\n    for i in range(cnt_z-1):\n        print(1, z_idx[i]+1, z_idx[i+1]+1)\n        used[z_idx[i]] = 1\n\n    if cnt_n % 2 and cnt_z:\n        print(1, idx+1, z_idx[-1]+1)\n        used[idx] = 1\n    elif cnt_n % 2:\n        z_idx.append(idx)\n\n    if len(z_idx):\n        print(2, z_idx[-1]+1)\n        used[z_idx[-1]] = 1\n\n    lst = -1\n    for i in range(n):\n        if not used[i]:\n            if lst != -1:\n                print(1, lst+1, i+1)\n\n            lst = i\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from enum import Enum\n\nclass OperationType(Enum):\n\tMultiply = 1\n\tRemove = 2\n\nclass RemoveOperation:\n\tdef __init__(self, index):\n\t\tself.type = OperationType.Remove\n\t\tself.index = index\n\n\tdef __repr__(self):\n\t\treturn \"RemoveOperation({})\".format(self.index)\n\nclass MultiplyOperation:\n\tdef __init__(self, index_a, index_b):\n\t\tself.type = OperationType.Multiply\n\t\tself.index_a = index_a\n\t\tself.index_b = index_b\n\n\tdef __repr__(self):\n\t\treturn \"MultiplyOperation({}, {})\".format(self.index_a, self.index_b)\n\ndef multiply_remaining(removed, n):\n\t\"\"\"\n\tRemoved should be list of 1-based indices\n\t\"\"\"\n\toperations = []\n\tkeep_indices = set(range(1, n + 1)) - set(removed)\n\tprevious = None\n\tfor index in sorted(keep_indices):\n\t\tif previous is not None:\n\t\t\toperations.append(MultiplyOperation(previous, index))\n\t\tprevious = index\n\treturn operations\n\ndef multiply_everything(n):\n\toperations = []\n\tfor i in range(1, n):\n\t\toperations.append(MultiplyOperation(i, i + 1))\n\treturn operations\n\ndef remove_indices_and_multiply_remaining(removed, n):\n\t\"\"\"\n\tRemoved should be a collection of 1-based indices\n\t\"\"\"\n\toperations = []\n\tkeep_indices = set(range(1, n + 1)) - set(removed)\n\tprevious = None\n\tfor index in sorted(keep_indices):\n\t\tif previous is not None:\n\t\t\toperations.append(MultiplyOperation(previous, index))\n\t\tprevious = index\n\treturn operations\n\ndef find_zero_indices(xs):\n\t\"\"\"\n\tReturns sorted list of 1-based indices\n\t\"\"\"\n\tzero_indices = []\n\tfor index, x, in enumerate(xs):\n\t\tif x == 0:\n\t\t\tzero_indices.append(index + 1)\n\treturn zero_indices\n\ndef remove_indices_and_multiply_remaining(indices_to_remove, n):\n\t\"\"\"\n\tindices_to_remove should be a sorted list of 1-based indices\n\t\"\"\"\n\t# multiply together indices to remove and then actually remove last one\n\toperations = []\n\tprevious = None\n\tfor index in indices_to_remove:\n\t\tif previous is not None:\n\t\t\toperations.append(MultiplyOperation(previous, index))\n\t\tprevious = index\n\t\n\tif len(indices_to_remove) < n:\n\t\toperations.append(RemoveOperation(previous))\n\t\toperations += multiply_remaining(indices_to_remove, n)\n\treturn operations\n\ndef find_index_of_largest_negative(xs):\n\t# or index of smallest absolute value negative\n\t# returns 1 based index\n\tmaximum = float('-inf')\n\tmaximum_index = None\n\tfor index, x in enumerate(xs):\n\t\tif x < 0 and x > maximum:\n\t\t\tmaximum = x\n\t\t\tmaximum_index = index\n\treturn maximum_index + 1\n\ndef solve(xs):\n\t\"\"\"\n\tReturns list of |xs| - 1 operations\n\t\"\"\"\n\tn = len(xs)\n\t# Count negatives and zeros\n\tnegatives = 0\n\tzeros = 0\n\tfor x in xs:\n\t\tif x == 0:\n\t\t\tzeros += 1\n\t\tif x < 0:\n\t\t\tnegatives += 1\n\t\n\tif zeros == 0 and negatives == 0:\n\t\t# all positive so just multiply everything to maximize\n\t\treturn multiply_everything(n)\n\telif zeros == n:\n\t\t# can only be left with 0, multiply everything...\n\t\treturn multiply_everything(n)\n\telif zeros == 0 and negatives > 0:\n\t\tif negatives % 2 == 0:\n\t\t\t# multiply everything for largest positive number\n\t\t\treturn multiply_everything(n)\n\t\telse:\n\t\t\t# get rid of smallest absolute value negative to be left with even number of negatives\n\t\t\t# then multiply everything for largest positive number\n\t\t\treturn remove_indices_and_multiply_remaining([find_index_of_largest_negative(xs)], n)\n\telif negatives == 0 and zeros > 0:\n\t\treturn remove_indices_and_multiply_remaining(find_zero_indices(xs), n)\n\telse:#if zeros > 0 and negatives > 0\n\t\tif negatives % 2 == 0:\n\t\t\t# get rid of zeros and\n\t\t\t# multiply everything for largest positive number\n\t\t\treturn remove_indices_and_multiply_remaining(find_zero_indices(xs), n)\n\t\telse:\n\t\t\t# get rid of zeros as well as smallest negative number\n\t\t\t# then multiply everything for largest positive number\n\t\t\tindices_to_remove = sorted([find_index_of_largest_negative(xs)] + find_zero_indices(xs))\n\t\t\treturn remove_indices_and_multiply_remaining(indices_to_remove, n)\n\ndef verify(xs, maximum):\n\tsolution = solve(xs)\n\t#print(\"solve(\", xs, \") returned \", solution)\n\n\tassert len(solution) == len(xs) - 1\n\n\tnum_removes = 0\n\tremoved = [False] * len(xs)\n\tfor operation in solution:\n\t\tif operation.type is OperationType.Remove:\n\t\t\tassert not removed[operation.index - 1]\n\t\t\tnum_removes += 1\n\t\t\tremoved[operation.index - 1] = True\n\t\telif operation.type is OperationType.Multiply:\n\t\t\tassert not removed[operation.index_a - 1]\n\t\t\tassert not removed[operation.index_b - 1]\n\t\t\tremoved[operation.index_a - 1] = True\n\t\t\txs[operation.index_b - 1] *= xs[operation.index_a - 1]\n\n\tassert num_removes <= 1\n\n\tnum_remaining = 0\n\tremaining_index = -1\n\tfor index, value in enumerate(xs):\n\t\tif not removed[index]:\n\t\t\tnum_remaining += 1\n\t\t\tremaining_index = index\n\t\t\n\tassert num_remaining == 1\n\tassert maximum == xs[remaining_index]\n\nn = int(input())\nxs = list(map(int, input().split()))[:n]\nfor operation in solve(xs):\n\tif operation.type is OperationType.Multiply:\n\t\tprint(1, operation.index_a, operation.index_b)\n\telse:\n\t\tprint(2, operation.index)\n\n# verify([-1, -1, -1, -1, -1, -1], 1)\n# verify([-1, -1, -1, -1, -1], 1)\n# verify([-1, -1, -100, -1, -1], 100)\n# verify([-100, -1, -1, -1, -1], 100)\n# verify([0, 0], 0)\n# verify([0, 0, 0], 0)\n# verify([1, 2, 3], 6)\n# verify([0, 2, 3], 6)\n# verify([2, 0, 3], 6)\n# verify([2, 1, 0, 3], 6)\n# verify([2, 2, 0, 3], 12)\n# verify([2, 2, 0, 0, 3], 12)\n# verify([2, 2, 0, 0, 0, 3], 12)\n# verify([0, 2, 2, 0, 0, 0, 3], 12)\n# verify([2, 2, 0, 0, 0, 3], 12)\n# verify([0, 2, 0, 2, 0, 0, 0, 3, 0], 12)\n# verify([-1, 2, 3], 6)\n# verify([2, -1, 3], 6)\n# verify([2, 3, -100], 6)\n# verify([2, 0, 3, -1, -100], 600)\n# verify([2, 0, -1, -100, 3, -2, -2], 2400)\n# verify([2, 0, -1, -100, 3, -2, -2, 0], 2400)\n# verify([2, 0, -1, -100, 3, -2, -2, 0, 2], 4800)\n# verify([0, -1, 5], 5)\n# verify([0, -1, 0, 5], 5)\n# verify([0, -1, 0, -100, 5], 500)\n# verify([0, -2, 0, -100, -5, 5], 2500)\n# verify([0, -10, 0, 0], 0)\n# verify([0, -10, -10, 0], 100)\n", "n=int(input())\na=[int(el) for el in input().split()]\nk0=0\nkotr=0\nindex_minotr=0\nminotr=float('-inf')\nminotr_index=-1\nminabs=float('+inf')\nminabs_index=-1\nindex0=-1\nfor i in range (n):\n    if a[i]==0:\n        k0+=1\n        index0=i\n    else:\n        if abs(a[i])<minabs:\n            minabs=abs(a[i])\n            minabs_index=i\n    if a[i]<0:\n        kotr+=1\n        if a[i]>minotr:\n            minotr=a[i]\n            minotr_index=i\n\n\n\nif k0==n-1 and kotr==0:\n    for i in range (n-1):\n        for j in range (i+1,n):\n            if a[i]==0 and a[j]==0:\n                print(1,i+1,j+1)\n                index0=j\n#                a[i]=1\n                break\n    print(2, index0+1)\n    raise SystemExit()\n\nif (k0==n-1 and kotr==1) or k0==n:\n    i=0\n    for i in range(n-1):\n        print(1,i+1,i+2)\n    raise SystemExit\n\n\n\nif kotr%2==0:\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i]==0 and a[j]==0:\n                print(1,i+1,j+1)\n                index0=max(index0,j)\n                break\n            if a[i]!=0 and a[j]!=0:\n                print(1,i+1,j+1)\n                break\n    if index0!=-1:\n        print(2,index0+1)\n    raise SystemExit\n\n#\u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\n#\u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u0432\u0441\u0435 \u043d\u0443\u043b\u0438 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u043c \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\n\n\nfor i in range(n-1):\n\n    for j in range(i+1,n):\n\n        if a[i]==0 and a[j]==0:\n            print(1,i+1,j+1)\n            index0=max(index0,j)\n            break\n        if a[i]==0 and j==minotr_index:\n            print(1,i+1,j+1)\n            index0=max(index0,j)\n            a[j]=0\n            break\n        if i==minotr_index and a[j]==0:\n            print(1,i+1,j+1)\n            index0=max(index0,j)\n\n            break\n        if i!=minotr_index and j!=minotr_index and a[i]*a[j]!=0:\n            print(1,i+1,j+1)\n            break\n\n\nif index0==-1:\n    print(2,minotr_index+1)\nelse:\n    print(2,index0+1)\n\n\n\n", "n = int(input())\n\na = list(map(int,input().split()))\n\nct = 0\nmn = 1000000000000000000\npos = 0\nis_all_zero = True\n\nfor i in range(n):\n    x = a[i]\n    if x < 0:\n        ct += 1\n        if mn > abs(x):\n            mn = abs(x)\n            pos = i\n\n\n\nif ct%2 == 1:\n    a[pos] = 0\n\nfor x in a:\n    if x != 0:\n        is_all_zero = False\n        \n\nif is_all_zero:\n    for i in range(n-1):\n        print(1,i+1,i+2)\n    return\n\n\npre = 0\npre0 = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        if pre0:\n            print(1,pre0,i+1)\n        pre0 = i+1\n    else:\n        if pre == 0:\n            pre = i+1\n        else:\n            print(1,pre,i+1)\n            pre = i+1\n\nif pre0:\n    print(2,pre0)"]