["H_y,A_y,D_y = list(map(int,input().split()))\nH_m,A_m,D_m = list(map(int,input().split()))\nh,a,d = list(map(int,input().split()))\nans = 10**20\nfor A_buy in range(max(0,H_m+D_m-A_y)+1):\n  for D_buy in range(max(0,A_m-D_y)+1):\n    damage = A_y + A_buy - D_m\n    cost = A_buy * a + D_buy * d\n    if damage > 0 and cost < ans:\n      time = (H_m+damage-1)//damage\n      H_left = H_y - time * max(0, A_m - D_y - D_buy)\n      if H_left <= 0: cost += h * (1-H_left)\n      if cost < ans: \n        ans = cost\nprint(ans)\n", "R=lambda:list(map(int,input().split()))\nyH,yA,yD=R()\nmH,mA,mD=R()\nh,a,d=R()\nQ=10**20\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\n for D in range(max(0,mA-yD)+1):\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\nprint(Q)\n", "hy, ay, dy = map(int, input().split())\nhm, am, dm = map(int, input().split())\nh, a, d = map(int, input().split())\ns = 1 << 30\nfor da in range(max(0, dm - ay + 1), max(0, hm - ay + dm) + 1):\n    for dd in range(max(0, am - dy) + 1):\n        dh = max(0, ((am - dy - dd) * ((hm - 1) // (ay + da - dm) + 1) - hy + 1))\n        s = min(s, h * dh + a * da + d * dd)\nprint(s)", "R=lambda:map(int,input().split())\nyH,yA,yD=R()\nmH,mA,mD=R()\nh,a,d=R()\nQ=10**20\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\n for D in range(max(0,mA-yD)+1):\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\nprint(Q)", "R=lambda:map(int,input().split())\nyH,yA,yD=R()\nmH,mA,mD=R()\nh,a,d=R()\nQ=10**20\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\n for D in range(max(0,mA-yD)+1):\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\nprint(Q)", "from operator import itemgetter\n\ndef bin_search(lo, hi, key):\n    while (lo < hi):\n        md = (hi + lo) // 2\n        if (md >= key(md)):\n            hi = md\n            #print(\"new hi:\", hi)\n        else:\n            lo = md + 1\n            #print(\"new lo:\", lo)\n    return lo   #or hi, they're equal at this point\n\ndef key_func(budget, prices):\n    for k in range(1 + budget//prices[2]):\n        budget2 = budget - k*prices[2]\n        for j in range(1 + budget2//prices[1]):\n            budget3 = budget2 - j*prices[1]\n            i = budget3//prices[0]\n            if survive(i, j, k):\n                return budget - 1\n    return budget + 1\n\ndef survive(i, j, k):\n    #nonlocal y, m, p, penumsorted\n    toadd = [i, j, k]\n    newy = list(y)\n    newmhp = m[0]\n    for i, item in enumerate(penumsorted):\n        newy[item[0]] = y[item[0]] + toadd[i]\n    #print(vars())\n    while newy[0] > 0 and newmhp > 0:\n        oldmhp = newmhp;\n        newy[0] -= max(0, m[1] - newy[2])\n        newmhp -= max(0, newy[1] - m[2])\n        if oldmhp == newmhp:\n            newy[0] = 0\n    if newmhp <= 0 and newy[0] > 0:\n        return True\n    else:\n        return False\n\ny = list(map(int, input().split()))\nm = list(map(int, input().split()))\np = list(map(int, input().split()))\npsorted = sorted(p)\npenum = list(enumerate(p))\npenumsorted = sorted(penum, key=itemgetter(1))\nprint(bin_search(0, 20000, lambda x: key_func(x, psorted)))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "import math\nhpy, atky, defy = list(map(int, input().split()))\nhpm, atkm, defm = list(map(int, input().split()))\nh,a,d = list(map(int, input().split()))\n\n\nans = math.inf\nfor i in range(defy, 101):\n    for j in range(max(atky, defm+1), 201):\n        xx = math.ceil(hpm / (j - defm)) * max(0,(atkm-i))\n        hh = max(xx+1, hpy)\n        ans = min(ans, (i -defy)*d + (j-atky)*a + (hh-hpy)*h)\n\nif ans >= math.inf:\n    print(0)\nelse:\n    print(ans)\n        \n\n", "R=lambda:list(map(int,input().split()))\n\nyH,yA,yD=R()\n\nmH,mA,mD=R()\n\nh,a,d=R()\n\nQ=10**20\n\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\n\n for D in range(max(0,mA-yD)+1):\n\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\n\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\n\nprint(Q)\n\n\n\n# Made By Mostafa_Khaled\n", "import math\nimport sys\nfrom bisect import bisect_right, bisect_left\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nhy, ay, dy = R()\nhm, am, dm = R()\nch, ca, cd = R()\nres = math.inf\nfor ayp in range(1000):\n    if ay + ayp > dm:\n        k = (hm + ay + ayp - dm - 1) // (ay + ayp - dm)\n        for dyp in range(1000):\n            hyp = max(0, k * max(0, am - dy - dyp) - hy + 1)\n            res = min(res, hyp * ch + dyp * cd + ayp * ca)\nprint(res)", "hy, ay, dy = map(int, input().split())\nhm, am, dm = map(int, input().split())\nh, a, d = map(int, input().split())\ns = 1 << 30\nfor da in range(max(0, dm - ay + 1), max(0, hm - ay + dm) + 1):\n    for dd in range(max(0, am - dy) + 1):\n        dh = max(0, ((am - dy - dd) * ((hm - 1) // (ay + da - dm) + 1) - hy + 1))\n        s = min(s, h * dh + a * da + d * dd)\nprint(s)", "import math\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\ns, rs, ls = map(int, input().split())\ndef rec(ss):\n    for i in range(0, 205, 1):\n        for j in range(0, 105, 1):\n            if(i * rs + j * ls <= ss):\n                q = y + i;p = z + j; pq = x + ((int)((ss - i * rs - j *ls) / s))\n                an1 = 1000000000000.0;an2 = 1000000000000.0\n                if(b - p > 0):\n                    an1 = math.ceil(((float) (pq)) / ((float)(b - p)))\n                if(q - c > 0):\n                    an2 = math.ceil(((float) (a)) / ((float)(q - c)))\n                if(q > c and p >= b or an1 > an2):\n                    return True\n    return False\nst = 0; en = 100000; mid = 0\nwhile(st <= en):\n    mid = (int)((st + en) / 2)\n    if(rec(mid) == True):\n        en = mid - 1\n    else:\n        st = mid + 1\nprint(en + 1)", "import math\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\ns, rs, ls = map(int, input().split())\ndef rec(ss):\n    for i in range(0, 205, 1):\n        for j in range(0, 105, 1):\n            if(i * rs + j * ls <= ss):\n                q = y + i;p = z + j; pq = x + ((int)((ss - i * rs - j *ls) / s))\n                an1 = 1000000000000.0;an2 = 1000000000000.0\n                if(b - p > 0):\n                    an1 = math.ceil(((float) (pq)) / ((float)(b - p)))\n                if(q - c > 0):\n                    an2 = math.ceil(((float) (a)) / ((float)(q - c)))\n                if(q > c and p >= b or an1 > an2):\n                    return True\n    return False\nst = 0; en = 100000; mid = 0\nwhile(st <= en):\n    mid = (int)((st + en) / 2)\n    if(rec(mid) == True):\n        en = mid - 1\n    else:\n        st = mid + 1\nprint(en + 1)"]