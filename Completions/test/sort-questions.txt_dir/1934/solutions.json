["import sys\n\nclass Fenwick(object):\n  def __init__(self, n):\n    self.n = n\n    self.a = [10**9 for i in range(n)]\n    self.w= 10**9\n\n  def zag(self, i, zn):\n    self.w= min(self.w, zn)\n    while i < self.n:\n      self.a[i] = min(self.a[i], zn)\n      i = (i | (i + 1))\n\n  def pol(self, r):\n    ans= 10**9\n    while r >= 0:\n      if ans> self.a[r]:\n        ans= self.a[r]\n      if ans== self.w:\n        break\n      r = (r & (r + 1)) - 1\n    return ans\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\n\nnd= [-1 for i in range(0, len(a))]\nvi= {}\nfor i in range(0, len(a)):\n  if a[i] in vi:\n    nd[i] = vi[a[i]]\n  vi[a[i]] = i\n\ninp= sys.stdin.readlines()\noch= [[] for i in range(n)]\nfor i in range(m):\n  l, r = inp[i].split()\n  och[int(r) - 1].append((int(l) - 1, i))\n\nder = Fenwick(2 ** 19)\nans= [None for i in range(0, m)]\nle= -1\nfor r in range(n):\n  if nd[r] != -1:\n    der.zag(500000 - nd[r] + 1, r - nd[r])\n    le = max(le, nd[r])\n  for (l, ind) in och[r]:\n    if l > le:\n      ans[ind] = -1\n      continue\n    zn= der.pol(500000 - l + 1)\n    if zn== 10**9:\n      zn= -1\n    ans[ind] = zn\n\nprint('\\n'.join(str(zn) for zn in ans))", "import sys\n\nclass Fenwick(object):\n  def __init__(self, n):\n    self.n = n\n    self.a = [10**9 for i in range(n)]\n    self.w= 10**9\n\n  def zag(self, i, zn):\n    self.w= min(self.w, zn)\n    while i < self.n:\n      self.a[i] = min(self.a[i], zn)\n      i = (i | (i + 1))\n\n  def pol(self, r):\n    ans= 10**9\n    while r >= 0:\n      if ans> self.a[r]:\n        ans= self.a[r]\n      if ans== self.w:\n        break\n      r = (r & (r + 1)) - 1\n    return ans\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\n\nnd= [-1 for i in range(0, len(a))]\nvi= {}\nfor i in range(0, len(a)):\n  if a[i] in vi:\n    nd[i] = vi[a[i]]\n  vi[a[i]] = i\n\ninp= sys.stdin.readlines()\noch= [[] for i in range(n)]\nfor i in range(m):\n  l, r = inp[i].split()\n  och[int(r) - 1].append((int(l) - 1, i))\n\nder = Fenwick(2 ** 19)\nans= [None for i in range(0, m)]\nle= -1\nfor r in range(n):\n  if nd[r] != -1:\n    der.zag(500000 - nd[r] + 1, r - nd[r])\n    le = max(le, nd[r])\n  for (l, ind) in och[r]:\n    if l > le:\n      ans[ind] = -1\n      continue\n    zn= der.pol(500000 - l + 1)\n    if zn== 10**9:\n      zn= -1\n    ans[ind] = zn\n\nprint('\\n'.join(str(zn) for zn in ans))"]