["from fractions import gcd\ndef lcm(a, b):\n    return a*b//gcd(a, b)\nn, a, b, p, q = list(map(int, input().split(' ')))\nred = n//a\nblue = n//b\nif (p<q):\n    red -= n//lcm(a, b)\nelse:\n    blue -= n//lcm(a, b)\n\nprint(p*red+q*blue)\n", "3\n# Copyright (C) 2016 Sayutin Dmitry.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; version 3\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nn, a, b, p, q = list(map(int, input().split()))\n\ns = (n // a) * p + (n // b) * q\ns -= (n // (a * b // gcd(a, b))) * min(p, q)\nprint(s)\n", "def gcd(a, b):\n    while a:\n        a, b = b % a, a\n    return b\n\nn, a, b, p, q = map(int, input().split())\nox = n // (a * b // gcd(a, b))\nax = n // a - ox\nbx = n // b - ox\nprint(ax * p + bx * q + ox * max(p, q))", "from fractions import gcd\nn,a,b,p,q=list(map(int,input().split()))\nx=n//(a*b//gcd(a,b))\nprint((n//a-x)*p+(n//b-x)*q+x*max(p, q))\n", "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n, a, b, p, q = list(map(int, input().split()))\n    if a == b:\n        print((n // a) * max(p, q))\n    else:\n        print((n // a) * p + (n // b) * q - (n // lcm(a, b)) * min(p, q))\n\nmain()\n", "#!/usr/bin/env python3\n\nfrom fractions import gcd\n\ntry:\n    while True:\n        n, a, b, p, q = list(map(int, input().split()))\n        print(n // a * p + n // b * q - n // (a // gcd(a, b) * b) * min(p, q))\n\nexcept EOFError:\n    pass\n", "import math\n\nn,a,b,p,q = [int(x) for x in input().split(' ')]\n\ng = int(a * b / math.gcd(a,b))\n\nif p > q: l = q\nelse: l = p\nprint((n//a)*p + (n//b)*q - (n//g)* l)", "from fractions import gcd\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\nn, a, b, p, q = list(map(int, input().split()))\n\nans = p * (n // a)\nans += q * (n // b)\nans -= min(p, q) * (n // lcm(a, b))\nprint(ans)\n", "def lcm(a, b):\n    x = a * b\n    while b != 0:\n        (a, b) = (b, a % b)\n    return x // a\n\n\nn, a, b, p, q = map(int, input().split())\nprint(n // a * p + n // b * q - n // lcm(a, b) * min(p, q))", "def gcd(a, b):\n    while (a % b != 0):\n        c = a % b\n        a = b\n        b = c\n    return b\n\nn, a, b, p, q = map(int, input().split())\nif (p > q):\n    c1 = p\n    p = q\n    q = c1\n    c = a\n    a = b\n    b = c\nt = (a // gcd(a, b)) * b\nprint(int((n // a) * p + (n // b) * q - (n // t) * p))", "n, a, b, p, q = list(map(int, input().split()))\nfrom fractions import gcd\nans = (n // a) * p + (n // b) * q\nl = (a * b) // gcd(a, b)\nans -= (n // l) * (min(p, q))\nprint(ans)\n", "def gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_nok(a, b):\n\treturn (a * b) // gcd(a, b)\n\nn, a, b, p, q = list(map(int, input().split()))\n\nif p < q:\n\ta, b = b, a\n\tp, q = q, p\n\n\nnok = get_nok(a, b)\n\nt = n // a\nminus = n // nok\nc = n // b\nprint(t * p + q * (c - minus))\n\n\n", "n,a,b,p,q = list(map(int,input().split()))\na2 = a\nb2 = b\nwhile b2 != 0 :\n    a2,b2 = b2,a2%b2\n\nprint(n // a * p + n // b * q - n // ((a*b) // a2) * (min(p,q)))\n", "def gcd(a,b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nn, a, b, p, q = [int(i) for i in input().split()]\nlcm = a * b // gcd(a,b)\nonlyA = n//a - n//lcm\nonlyB = n//b - n//lcm\nprint(p * onlyA + q * onlyB + max(p,q) * (n // lcm))\n", "#C\ncin=lambda:map(int,input().split())\nn,a,b,p,q=cin()\n\ndef lcm(a,b):\n    m = a*b\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return m // (a+b)\n\nif p>=q:\n    res=(n//a)*p + (n//b-n//lcm(a,b))*q\nelse:\n    res=(n//b)*q + (n//a-n//lcm(a,b))*p\nprint(res)", "n, a, b, p, q = map(int ,input().split())\n\nred_max = n // a\nblue_max = n // b\n\nimport fractions\n\ngcd = (a*b) // fractions.math.gcd(a, b)\ncommons = n // gcd\n\nif p > q:\n    print(red_max*p + (blue_max-commons)*q)\nelse:\n    print((red_max-commons)*p + blue_max*q)", "from fractions import gcd\nn, a, b, p, q = map(int, input().split())\nk = (a*b)//gcd(a, b)\ndivisors_a = n//a\ndivisors_b = n//b\ndivisors_k = n//k\nprint(max((divisors_a - divisors_k)*p + divisors_b*q, (divisors_b - divisors_k)*q + divisors_a*p))", "def gcd(a, b):\n    if b < 1:\n        return a\n    if b > a:\n        return gcd(b, a)\n    return gcd(b, a % b)\n\nn, a, b, p, q = list(map(int, input().split()))\nl = [n // a, n // b, n // (a * b // gcd(a, b))]\nprint((l[0] - l[2]) * p + (l[1] - l[2]) * q + l[2] * max(p, q))\n#print(l[0], l[1], l[2])\n#print(gcd(a, b))\n", "from fractions import gcd\nn,a,b,p,q = list(map(int,input().split()))\nnum1 = n//a\nnum2 = n//b\nt = a*b//gcd(a,b)\nnum3 = n//t\nprint((num1-num3)*p + (num2-num3)*q + num3*max(p,q))\n", "from math import gcd\n\nn, a, b, p, q = map(int, input().split())\nif p > q:\n    p, q = q, p\n    a, b = b, a\nres = n // b * q\nres += (n // a - n * gcd(a, b) // a // b) * p\nprint(res)", "n, a, b, p, q = tuple(map(int, input().split()))\n\ns = (n // a) * p\ns += (n // b) * q\n\ndef gcd(p, q):\n    if p < q:\n        return gcd(q, p)\n    if q == 0:\n        return p\n    return gcd(q, p % q)\n\nc = n // ((a *b ) //gcd(a, b))\nif p < q:\n    s -= c * p\nelse:\n    s -= c * q\n\nprint(s)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\ns = n // a * p + n // b * q - n // lcm(a, b) * min(p, q)\nprint(s)", "def nod(a,b):\n    if a*b>0:\n        return nod(b,a%b)\n    else:\n        return a+b\n\n\n\nn,a,b,p,q = (int(i) for i in input().split())\nprint(n//a*p+n//b*q-n//(a*b//nod(a,b))*min(p,q))\n"]