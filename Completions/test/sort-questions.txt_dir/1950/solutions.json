["r = lambda: map(int, input().split())\n\nimport heapq\n\ndef main():\n\tn, = r()\n\ta = list(r())\n\tif len(a) % 2 == 0:\n\t\ta.append(0)\n\theapq.heapify(a)\n\tret = 0\n\twhile len(a) > 1:\n\t\tx = heapq.heappop(a)\n\t\ty = heapq.heappop(a)\n\t\tz = heapq.heappop(a)\n\t\tret += x + y + z\n\t\theapq.heappush(a, x + y + z)\n\tprint(ret)\n\nmain()", "import heapq\n\ndef solve(heap, n):\n  heapq.heapify(heap)\n  ans = 0\n  while(n > 1):\n    x = heapq.heappop(heap)\n    y = heapq.heappop(heap)\n    z = heapq.heappop(heap)\n    heapq.heappush(heap, x + y + z)\n    ans += x + y + z\n    n -= 2\n  \n  return ans\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\nif n % 2 == 0:\n  delta = a[0] + a[1]\n  a = [delta] + a[2:]\n  n -= 1\n  print(solve(a, n) + delta)\nelse:\n  print(solve(a, n))\n", "import heapq\nip = lambda: map(int,input().split())\nn = ip()\nl = list(ip())\nif (len(l)%2==0): l.append(0)\nheapq.heapify(l)\npen = 0\nwhile len(l) > 1:\n\tx = heapq.heappop(l)\n\ty = heapq.heappop(l)\n\tz = heapq.heappop(l)\n\tpen = pen + x + y + z\n\theapq.heappush(l, x + y + z)\nprint(pen)", "import heapq\n\nn = int(input())\nheap = list(map(int, input().split())) + ([0] if n % 2 == 0 else [])\nn = len(heap)\nheapq.heapify(heap)\n\nans = 0\nfor i in range(n, 1, -2):\n  x = heapq.heappop(heap) + heapq.heappop(heap) + heapq.heappop(heap)\n  heapq.heappush(heap, x)\n  ans += x\n\nprint(ans)", "from heapq import *\nn = int(input())\na = list(map(int, input().split()))\nheap = []\nres = 0\nfor i in range(n):\n    heappush(heap, a[i])\nif n % 2 == 0:\n    heappush(heap, 0)\nwhile n > 1:\n    cur = heappop(heap)\n    cur += heappop(heap)\n    cur += heappop(heap)\n    res += cur\n    heappush(heap, cur)\n    n -= 2\nprint(res)", "import heapq\nn = int(input())\nl = [int(i) for i in input().split()]\nif n % 2 == 0:\n    l = [0] + l\nresult = 0\nheapq.heapify(l)\nwhile len(l) > 1:\n\tx = heapq.heappop(l)\n\ty = heapq.heappop(l)\n\tz = heapq.heappop(l)\n\tresult += x + y + z\n\theapq.heappush(l, x + y + z)\nprint(result)\n", "import heapq\nn=int(input())\narray=input().split()\nfin=[]\nfor i in array:\n    fin.append(int(i))\nif(len(fin)%2==0):\n    fin.append(0)\n\nheapq.heapify(fin)\nsums=0\nwhile(len(fin)>1):\n    temp=0\n    a=heapq.heappop(fin)\n    b=heapq.heappop(fin)\n    c=heapq.heappop(fin)\n    temp=a+b+c\n    sums+=temp\n    heapq.heappush(fin,temp)\nprint(sums)", "import heapq\nn = int(input())\nresp=0\ntest = [int(i) for i in input().split()]\ntest.sort()\nif(n%2==0):\n    test = [0]+test\n    n+=1\nwhile n!=1:\n    c = heapq.heappop(test) + heapq.heappop(test) + heapq.heappop(test)\n    resp+=c\n    heapq.heappush(test,c)\n    n-=2\nprint(resp)\n    \n\n\n\n\n", "import heapq as h\nn=int(input())\na=[int(x) for x in input().split()]\nif len(a)%2==0:\n\ta.append(0)\nh.heapify(a)\nans=0\nwhile len(a)>1:\n\ta1=h.heappop(a)\n\ta2=h.heappop(a)\n\ta3=h.heappop(a)\n\tans+=a1+a2+a3\n\th.heappush(a,a1+a2+a3)\nprint(ans)\n", "import heapq as h\nn = int(input())\nai = [int(i) for i in input().split()]\nif n % 2 == 0:\n    ai = [0] + ai\nresult = 0\nh.heapify(ai)\nwhile len(ai) > 1:\n\ta1 = h.heappop(ai)\n\ta2 = h.heappop(ai)\n\ta3 = h.heappop(ai)\n\tresult += a1 + a2 + a3\n\th.heappush(ai, a1 + a2 + a3)\nprint(result)", "from heapq import *\nn=int(input())\na=list(map(int,input().split()))\ns=0\nif len(a)%2==0:\n    a=[0]+a\n    n+=1\ndef sc(a,s=0):\n    heapify(a)\n    for i in range ((n-1)//2):\n        k=heappop(a)+heappop(a)+heappop(a)\n        s+=k\n        heappush(a,k)\n    print(s)\nsc(a)\n", "import heapq\nn = input()\nA = list(map(int, input().split())) \nif (len(A) % 2 == 0):\n    A.append(0)\nst = 0\nheapq.heapify(A)\nwhile (len(A) > 1):\n    abc = 0\n    a = heapq.heappop(A) # \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u0443\u0447\u0438 A\n    b = heapq.heappop(A)\n    c = heapq.heappop(A)\n    abc = a + b + c\n    st = st + abc\n    heapq.heappush(A, abc) #\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 abc \u0432 \u043a\u0443\u0447\u0443 A\nprint(st)\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/11/8 09:35\n\n\"\"\"\n\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\n\nif N % 2 == 0:\n    A.append(0)\n\nheapq.heapify(A)\nans = 0\nwhile len(A) > 1:\n    i = 0\n    p = 0\n    while A and i < 3:\n        p += heapq.heappop(A)\n        i += 1\n    heapq.heappush(A, p)\n    ans += p\nprint(ans)\n\n\n\n", "import heapq as h\n\nn = int(input())\nline2 = input().split()\na = []\nfor i in range(n):\n    h.heappush(a,int(line2[i]))\nif n == 1:\n    print(0)\nelse:\n    result = 0\n    if n%2 == 1:\n        k = n\n    else:\n        a.append(0)\n        k = n + 1\n    while k > 3:\n        previous = h.heappop(a) + h.heappop(a)+ h.heappop(a)\n        result += previous\n        h.heappush(a, previous)\n        k -= 2\n    result += sum(a)\n    print(result)", "n=int(input())\nimport heapq\na=[int(i) for i in input().split()]+[[0],[]][n&1]\nheapq.heapify(a)\nk=0\nwhile len(a)>1:\n    s=heapq.heappop(a)+heapq.heappop(a)+heapq.heappop(a)\n    k+=s\n    heapq.heappush(a,s)\nprint(k)", "import heapq\nn=int(input())\na=[int(i) for i in input().split()]\nheapq.heapify(a)\nif (n & 1) == 0:\n    heapq.heappush(a, 0)\nres=0\nwhile len(a)>1:\n    s=heapq.heappop(a)+heapq.heappop(a)+heapq.heappop(a)\n    res+=s\n    heapq.heappush(a,s)\nprint(res)", "class heap:\n    def __init__(self, maxn):\n        self.a = [0] * maxn\n        self.size = 0\n    \n    def shift_down(self, i):\n        while 2 * i + 1 < self.size:\n            l = 2 * i + 1\n            r = 2 * i + 2\n            j = l\n            if r < self.size and self.a[r] < self.a[l]:\n                j = r\n            if self.a[i] <= self.a[j]:\n                break\n            self.a[i], self.a[j] = self.a[j], self.a[i]\n            i = j\n\n    def shift_up(self, i):\n        while i and self.a[i] < self.a[(i - 1) // 2]:\n            self.a[i], self.a[(i - 1) // 2] = self.a[(i - 1) // 2], self.a[i]\n            i = (i - 1) // 2\n\n    def erase_min(self):\n        mn = self.a[0]\n        self.a[0] = self.a[self.size - 1]\n        self.size -= 1\n        self.shift_down(0)\n        return mn\n\n    def insert(self, val):\n        self.size += 1\n        self.a[self.size - 1] = val\n        self.shift_up(self.size - 1)\n\n\nn = int(input())\nans = 0\ns = heap(400000 + 100)\nfor i in [int(j) for j in input().split()]:\n    s.insert(i)\nif s.size % 2 == 0:\n    s.insert(0)\nwhile s.size > 1:\n    t = s.erase_min() + s.erase_min()\n    if s.size:\n        t += s.erase_min()\n    ans += t\n    s.insert(t)\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\n\nif n % 2 == 0:\n    a.append(0)\n\nimport heapq\n\nheapq.heapify(a)\nans = 0\nwhile len(a) > 1:\n    x = heapq.heappop(a)\n    y = heapq.heappop(a)\n    z = heapq.heappop(a)\n    ans += x + y + z\n    heapq.heappush(a, x + y + z)\nprint(ans)\n", "import heapq\n\ninput()\nheap = [int(i) for i in input().split()]\nheapq.heapify(heap)\n\ncost = 0\n\nwhile len(heap) > 1:\n    amountToMerge = 3\n    if len(heap) % 2 == 0:\n        amountToMerge = 2\n\n    mergedPileSize = 0\n    for _ in range(amountToMerge):\n        mergedPileSize += heapq.heappop(heap)\n    \n    cost += mergedPileSize\n    heapq.heappush(heap, mergedPileSize)\n\nprint(cost)", "import os, sys, bisect, copy\nfrom heapq import heappush as pus, heappop as pp, heapify\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache   #use @lru_cache(None)\nif os.path.exists('in.txt'): sys.stdin=open('in.txt','r')\nif os.path.exists('out.txt'): sys.stdout=open('out.txt', 'w')\n#\ndef input(): return sys.stdin.readline()\ndef mapi(arg=0): return list(map(int if arg==0 else str,input().split()))\n#------------------------------------------------------------------\n\nn = int(input())\na = list(mapi())\na.sort()\n#a = [-i for i in a]\nheapify(a)\nres = 0\nif n%2==0:\n    pus(a,0)\nwhile len(a)>1:\n    if len(a)>=3:\n        tmp = pp(a)+pp(a)+pp(a)\n        res+=tmp\n        pus(a,tmp)\n    elif len(a)==2:\n        tmp = pp(a)+pp(a)\n        res+=tmp\n        pus(a,tmp)\nprint(res)\n"]