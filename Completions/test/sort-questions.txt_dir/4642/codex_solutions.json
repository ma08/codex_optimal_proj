["def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, x, y = read_ints()\n    d = y - x\n    for i in range(n - 1, 0, -1):\n        if d % i == 0:\n            d //= i\n            l = min(n - (i + 1), (x - 1) // d)\n            ans = [x - l * d + i * d for i in range(n)]\n            print(' '.join(map(str, ans)))\n            break\n", "t = int(input())\n# a = list(map(int, input().split()))\nfor _ in range(t):\n    n,x,y = map(int,input().split())\n    \n    \n    for d in range(1,y-x+1):\n        if (y-x)%d==0 and (y-x)//d <= (n-1):\n            offset = y%d\n            if offset==0:\n                offset=d\n            print(' '.join(map(str,(max(y,offset+(n-1)*d) - d*i for i in range(n)))))\n            break", "\ndef process(n,x,y):\n    x,y=min(x,y),max(x,y)\n    print()\n    for i1 in reversed(range(1,n)):\n        if((y-x)%i1==0):\n            c=0\n            flag=0\n            i=((y-x)//i1)\n            while(n>0):\n                t=(y-c*i)\n                if(t<=0 and flag==0):\n                    flag=1\n                    c=1\n                if(flag==0):\n                    print(t,end=\" \")\n                else:\n                    print(y+c*i,end=\" \")\n                n-=1\n                c+=1\n            return\n\n\n\ntests=int(input())\nfor i in range(tests):\n    n,x,y=list(map(int,input().split()))\n    process(n,x,y)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n, x, y = map(int, input().split())\n        ans = 10 ** 10\n        dd = -1\n        d = y - x\n        for i in range(1, d + 1):\n            if d % i != 0:\n                continue\n            cnt = d // i + 1\n            if cnt > n:\n                continue\n            tmp = (x - 1) % i + 1\n            ans_sub = max(y, tmp + i * (n - 1))\n            if ans_sub < ans:\n                ans = ans_sub\n                dd = i\n        lst = []                \n        for j in range(n):\n            lst.append(ans)\n            ans -= dd\n        print(*lst)\nmain()", "def find(n,x,y,diff):\n    arr = [x]\n    while arr[-1] < y:\n        arr.append(arr[-1]+diff)\n\n    if arr[-1] != y:\n        return False\n\n    if len(arr) > n:\n        return False\n\n    min_val = arr[0]\n    while len(arr) != n:\n        if min_val-diff > 0:\n            arr.append(min_val-diff)\n            min_val -= diff\n        else:\n            break\n\n    arr.sort()\n    while len(arr) != n:\n        arr.append(arr[-1]+diff)\n\n    return arr\n\ndef solve(n,x,y,ans):\n    for diff in range(1,100):\n        arr = find(n,x,y,diff)\n        if arr:\n            arr1 = []\n            for i in arr:\n                arr1.append(str(i))\n\n            ans.append(arr1)\n            return\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n,x,y = list(map(int,input().split()))\n        solve(n,x,y,ans)\n\n    for i in ans:\n        print(' '.join(i))\n        \n\nmain()\n", "# Fast IO (be careful about bytestring)\n\n# import os,io\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nfor _ in range(int(input())):\n    n,x,y = list(map(int,input().split()))\n    minMax = 100000\n    minD = 0\n    minStart = 0\n    for d in range(1,y - x + 1):\n        if (y - x) % d != 0 or d * (n-1) < y - x:\n            continue\n        minElem = x % d\n        if minElem == 0:\n            minElem = d\n        maxElem = minElem + d * (n-1)\n        if maxElem < y:\n            maxElem = y\n            minElem = maxElem - d * (n-1)\n        if maxElem < minMax:\n            minMax = maxElem\n            minStart = minElem\n            minD = d\n    ans = []\n    elem = minStart\n    for i in range(n):\n        ans.append(str(elem))\n        elem += minD\n    print(\" \".join(ans))\n", "for _ in range(int(input())):\n\tn,x,y=map(int,input().split())\n\tmi=1000000000\n\tan=[]\n\tfor d in range(1,y-x+1):\n\t\tif (y-x)%d==0:\n\t\t\tfor a in range(1,x+1):\n\t\t\t\tarr=[a+d*i for i in range(n)]\n\t\t\t\tif x in arr and y in arr:\n\t\t\t\t\tif mi>arr[-1]:\n\t\t\t\t\t\tmi=arr[-1]\n\t\t\t\t\t\tans=arr\n\tprint(*ans)", "import sys\nfrom collections import defaultdict as dd\nfrom collections import deque\nfrom functools import *\nfrom fractions import Fraction as f\nfrom copy import *\nfrom bisect import *\t\nfrom heapq import *\nfrom math import *\nfrom itertools import permutations ,product\n \ndef eprint(*args):\n    print(*args, file=sys.stderr)\nzz=1\n \n#sys.setrecursionlimit(10**6)\nif zz:\n\tinput=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\ndef inc(d,c):\n\td[c]=d[c]+1 if c in d else 1\ndef bo(i):\n\treturn ord(i)-ord('A')\t\ndef li():\n\treturn [int(xx) for xx in input().split()]\ndef fli():\n\treturn [float(x) for x in input().split()]\t\ndef comp(a,b):\n\tif(a>b):\n\t\treturn 2\n\treturn 2 if a==b else 0\t\t\ndef gi():\t\n\treturn [xx for xx in input().split()]\ndef fi():\n\treturn int(input())\ndef pro(a): \n\treturn reduce(lambda a,b:a*b,a)\t\t\ndef swap(a,i,j): \n\ta[i],a[j]=a[j],a[i]\t\ndef si():\n\treturn list(input().rstrip())\t\ndef mi():\n\treturn \tmap(int,input().split())\t\t\t\ndef gh():\n\tsys.stdout.flush()\ndef isvalid(i,j):\n\treturn 0<=i<n and 0<=j<n\t\ndef bo(i):\n\treturn ord(i)-ord('a')\t\ndef graph(n,m):\n\tfor i in range(m):\n\t\tx,y=mi()\n\t\ta[x].append(y)\n\t\ta[y].append(x)\n\n\nt=fi()\n\nwhile t>0:\n\tt-=1\n\tn,x,y=mi()\n\tp=n-2\n\tx,y=max(x,y),min(x,y)\n\tfor i in range(1,p+2):\n\t\tif (x-y)%i==0:\n\t\t\tans=i\n\tp=(x-y)//ans\n\tfor i in range(n):\n\t\tif x-i*p<=0:\n\t\t\tbreak\n\t\tmini=x-i*p\t\n\tfor i in range(n):\n\t\tprint(mini+p*i,end=\" \")\n\tprint()\t\t\t\n", "t = int(input())\nwhile t>0:\n  n,x,y = list(map(int,input().split()))\n  min_val = 1e5\n  min_diff = 0\n  for xpos in range(0,n-1):\n    for ypos in range(xpos+1,n):\n      l = ypos-xpos\n      if (y-x) % l > 0 :\n        continue\n      diff = (y-x)/l\n      max_item = x + (n-1-xpos)*diff\n      if max_item < min_val and (x -(xpos*diff))>=1:\n        min_val = int(max_item)\n        min_diff = int(diff)\n  first_num = min_val - (n-1)*min_diff\n  for index in range(0,n):\n    print(\"{}\".format(first_num + index*min_diff), end=\" \")\n  print(\"\")\n  t -= 1\n", "#!/usr/bin/env pypy3\n\ndef ans(n,x,y):\n\tcandidates = set()\n\tfor gap in range(n-1,0,-1):\n\t\tif (y-x) % gap == 0:\n\t\t\tdiff = (y-x) // gap\n\n\t\t\tret = [y]\n\t\t\tfor _ in range(n-1):\n\t\t\t\tret += [ret[-1] - diff]\n\t\t\t\tif ret[-1] <= 0:\n\t\t\t\t\tret = ret[:len(ret)-1]\n\t\t\t\t\tbreak\n\t\t\tret = sorted(ret)\n\t\t\twhile len(ret) < n:\n\t\t\t\tret += [ret[-1] + diff]\n\n\t\t\tcandidates.add(tuple(ret)[::-1])\n\n\tprint(*min(candidates))\n\t\t\nT = int(input())\nfor t in range(T):\n\tN,X,Y = input().split()\n\tX = int(X)\n\tY = int(Y)\n\tN = int(N)\n\n\tans(N,X,Y)", "from collections import defaultdict as dd\nimport sys\ninput=sys.stdin.readline\nt=int(input())\nwhile t:\n    #n=int(input())\n    n,x,y=list(map(int,input().split()))\n    #l=list(map(int,input().split()))\n    dif=y-x\n    for i in range(n-1,-1,-1):\n        if(dif%i==0):\n            ind=i\n            break\n    diff=dif//ind\n    arr=[x]\n    cou=1\n    curr=x\n    while curr!=y:\n        curr+=diff\n        arr.append(curr)\n        cou+=1\n    left=n-cou\n    curr=x\n    while left and curr-diff>0:\n        curr-=diff\n        arr.append(curr)\n        left-=1\n    curr=y\n    while left:\n        curr+=diff\n        arr.append(curr)\n        left-=1\n    print(*arr)\n    t-=1\n                   \n        \n    \n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\ndef check(diff, x, y, n):\n    s = set()\n    i = y\n    while n and i > 0:\n        s.add(i)\n        i -= diff\n        n -= 1\n    i = y + diff\n    while n:\n        n -= 1\n        s.add(i)\n        i += diff\n    \n    return -1 if x not in s else max(s)\n\n\nfor _ in range(val()):\n    n, x, y = li()\n\n\n    diff = factors(y - x)\n\n    for i in range(1, y - x + 1):\n        ans = check(i, x, y, n)\n        if ans != -1:\n            diff = i\n            break\n    \n\n    l = []\n    while n:\n        l.append(ans)\n        n -= 1\n        ans -= diff\n    print(*l)", "for _ in range(int(input())):\n    n,x,y=map(int,input().split())\n    ans=[0]*n\n    mn=9999999999999999999999999\n    for i in range(n-1):\n        res=[0]*n\n        res[i]=x\n        for j in range(i+1,n):\n            if (y-x)%(j-i)==0:\n                res[j]=y\n                ok=1\n                f=(y-x)//(j-i)\n                for ii in range(i-1,-1,-1):\n                    res[ii]=res[ii+1]-f\n                for jj in range(i+1,n):\n                    res[jj]=res[jj-1]+f\n                if res[-1]<mn and res[0]>0:\n                    mn=res[-1]\n                    ans=res\n    print(*ans)", "import bisect\nimport copy\nimport fractions\nimport functools\nimport heapq\nimport math\nimport random\nimport sys\n\n\ndef __starting_point():\n\n    T = int(input())\n\n    for t in range(T):\n        N, X, Y = tuple(map(int, input().split()))\n\n        # Find smallest possible difference between adjacent elements\n        for div in range(1, (Y - X) + 1):\n            if (Y - X) % div == 0 and div * (N - 1) >= (Y - X):\n                break\n\n        # Find minimal range\n        max_ = Y\n        n = N - math.ceil(Y / div)\n        while n > 0:\n            max_ += div\n            n -= 1\n\n        print(' '.join(str(max_ - (i * div)) for i in range(N)))\n\n__starting_point()", "for _ in range(int(input())):\n    n, x, y = list(map(int, input().split()))\n    i = 1\n    ad = []\n    bd = []\n    while i*i <= y-x:\n        if (y-x)%i == 0:\n            ad.append(i)\n            if i*i != y-x:\n                bd.append((y-x)//i)\n        i += 1\n    ds = ad + bd[::-1]\n    best = (float(\"inf\"), 0)\n    for d in ds:\n        l = (y-x)//d+1\n        if l > n:\n            continue\n        p = n-l\n        while x-p*d <= 0:\n            p -= 1\n        best = min(best, (y+(n-l-p)*d, x-p*d))\n    d = (best[0]-best[1])//(n-1)\n    print(*list(range(best[1], best[0]+1, d)))\n"]