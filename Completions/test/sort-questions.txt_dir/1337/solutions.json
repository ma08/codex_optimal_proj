["n = int(input())\nL = list(map(int, input().split()))\nm = int(input())\nA = list(map(int, input().split()))\nS = list(map(int, input().split()))\n\nD = {}\nfor i in range(n):\n    if L[i] in list(D.keys()):\n        D[L[i]] += 1\n    else:\n        D[L[i]] = 1\nM = [[0,0,i+1] for i in range(m)]\nfor i in range(m):\n    if A[i] in list(D.keys()):\n        M[i][0] += D[A[i]]\n    if S[i] in list(D.keys()):\n        M[i][1] += D[S[i]]\n\ndef ct(a):\n    return a[0],a[1]\n\nM.sort(key=ct,reverse=True)\nprint(M[0][2])\n", "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ntry:\n    while True:\n        langs = Counter()\n        input()\n        for i in input().split():\n            langs[int(i)] += 1\n\n        input()\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        result = (0, 0)\n        result_index = 1\n        for i, (x, y) in enumerate(zip(b, c), 1):\n            t = (langs[x], langs[y])\n            if t > result:\n                result = t\n                result_index = i\n\n        print(result_index)\n\nexcept EOFError:\n    pass\n", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\n\nfreq = Counter(a)\n\nm = int(input())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nbest_index = 1\nbest_score = (0, 0)\n\nfor i in range(m):\n    vs = freq[b[i]]\n    als = freq[c[i]]\n    if vs > best_score[0] or (vs == best_score[0] and als > best_score[1]):\n        best_index = i + 1\n        best_score = (vs, als)\n\nprint(best_index)\n", "n = int(input())\ns = list(map(lambda x: int(x), input().split()))\na = {}\nfor i in range(n):\n\tif s[i] in a:\n\t\ta[s[i]] += 1\n\telse:\n\t\ta[s[i]] = 1\n\nm = int(input())\n\nb = list(map(lambda x: int(x), input().split()))\nc = list(map(lambda x: int(x), input().split()))\n\nans = -1\nd = -1\npd = -1\n\nfor i in range(m):\n\tif b[i] in a:\n\t\tcd = a[b[i]]\n\telse:\n\t\tcd = 0\n\t\t\n\tif c[i] in a:\n\t\tcpd = a[c[i]]\n\telse:\n\t\tcpd = 0\n\t\t\n\tif (cd > d) or (cd == d and cpd > pd):\n\t\tans = i\n\t\td = cd\n\t\tpd = cpd\n\t\t\nprint(ans + 1)", "read = lambda: list(map(int, input().split()))\nn = int(input())\na = list(read())\nm = int(input())\nb = list(read())\nc = list(read())\nfrom collections import Counter as C\nd = C()\nfor i in a:\n    d[i] += 1\nmb = mc = -1\nind = -1\nfor i in range(m):\n    if d[b[i]] > mb:\n        mb = d[b[i]]\n        mc = d[c[i]]\n        ind = i + 1\n    elif d[b[i]] == mb and d[c[i]] > mc:\n        mc = d[c[i]]\n        ind = i + 1\nprint(ind)\n", "from sys import stdin, stdout\nn = int(stdin.readline())\nd = {}\nlanguages = list(map(int, stdin.readline().split()))\nfor l in languages:\n    if l not in d:\n        d[l] = 1\n    else:\n        d[l] += 1\nm = int(stdin.readline())\nmovies = []\nvoice = list(map(int, stdin.readline().split()))\n\nfor i in range(m):\n    if voice[i] in d:\n        movies.append([d[voice[i]], 0, i])\n    else:\n        movies.append([0, 0, i])\nsubtitles = list(map(int, stdin.readline().split()))\nfor i in range(m):\n    if subtitles[i] in d:\n        movies[i][1] = d[subtitles[i]]\nstdout.write(str(sorted(movies)[-1][-1] + 1))", "n = int(input())\na = list(map(int, input().split()))\nlang = dict()\ncnt = [0]*n\ncount = 0\nfor l in a:\n    if l not in lang:\n        lang[l] = count\n        count += 1\n    cnt[lang[l]]+=1\n    \nm = int(input())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nbestfilm = 0\nbestsat = 0 if b[0] not in lang else cnt[lang[b[0]]]\nbestpartsat = 0 if c[0] not in lang else cnt[lang[c[0]]]\nfor i in range(m):\n    sat = 0 if b[i] not in lang else cnt[lang[b[i]]]\n    partsat = 0 if c[i] not in lang else cnt[lang[c[i]]]\n    if (sat > bestsat) or (sat == bestsat and bestpartsat<partsat):\n        bestfilm = i\n        bestsat = sat\n        bestpartsat = partsat\nprint(bestfilm+1)\n", "n=int(input())\nslov={}\nmas=list(map(int, input().split()))\nmas.sort()\nkek={}\ni=1\nfor b in range(1, n):\n    if mas[b]==mas[b-1]:\n        i+=1\n    else:\n        kek[mas[b-1]]=i\n        i=1\nkek[mas[n-1]]=i\nm=int(input())\nmas=list(map(int, input().split()))\nmas2=list(map(int, input().split()))\nmi1=-1\nmi2=-1\notv=0\nfor i in range(m):\n    try:\n        a=kek[mas[i]]\n    except:\n        a=0\n    try:\n        b=kek[mas2[i]]\n    except:\n        b=0\n    if a>mi1:\n        mi1=a\n        mi2=b\n        otv=i+1\n    elif a==mi1:\n        if mi2<b:\n            mi2=b\n            otv=i+1\nprint(otv)", "import sys\nimport math\nimport itertools as it\nimport operator as op\nimport fractions as fr\n\n\nn = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().split()))\nm = int(sys.stdin.readline().strip())\nB = list(map(int, sys.stdin.readline().split()))\nC = list(map(int, sys.stdin.readline().split()))\n\nD = dict()\nD.update(list(zip(A, [0]*len(A))))\nD.update(list(zip(B, [0]*len(B))))\nD.update(list(zip(C, [0]*len(C))))\n\nfor a in A:\n  D[a] += 1\n\nmax_val = -1\nl = []\nfor idx in range(len(B)):\n  b = B[idx]\n  if D[b] > max_val:\n    max_val = D[b]\n    l = [idx]\n  elif D[b] == max_val:\n    l.append(idx)\n\nmax_idx = 0\nmax_val = -1\nfor idx in l:\n  c = C[idx]\n  if D[c] > max_val:\n    max_val = D[c]\n    max_idx = idx\n\nprint(max_idx+1)\n", "from collections import Counter\n\nn = int(input())\nlang = Counter(list(map(int, input().split())))\n\nm = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nres = list()\n\nfor i in range(m):\n\tres.append((lang[a[i]], lang[b[i]], i))\n\nprint(sorted(sorted(res, key = lambda x: x[1], reverse = True), key = lambda x: x[0], reverse = True)[0][2] + 1)", "n = int(input())\n\nlanguages = {}\ns = input().split()\nfor i in s:\n\tif i in languages:\n\t\tlanguages[i] += 1\n\telse:\n\t\tlanguages[i] = 1\n\nm = int(input())\naudio = input().split()\nsubtitles = input().split()\n\nbestm = 1\nbesta = 0\nbests = 0\nfor i in range(m):\n\tad = audio[i]\n\tsb = subtitles[i]\n\tac = 0\n\tif ad in languages:\n\t\tac = languages[ad]\n\tsc = 0\n\tif sb in languages:\n\t\tsc = languages[sb]\n\tif ac > besta or ac == besta and sc > bests:\n\t\tbestm = i + 1\n\t\tbesta = ac\n\t\tbests = sc\n\nprint(bestm)", "n=int(input())\nl=sorted(map(int,input().split()))\nm=int(input())\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\nd={}\nfor x in l:\n    d[x]=d.get(x,0)+1\nans=(0,0,0)\nfor i in range(m):\n    cob=d.get(b[i],0)\n    coc=d.get(c[i],0)\n    if cob>ans[1]: ans=(i,cob,coc)\n    if cob==ans[1] and coc>ans[2]: ans=(i,cob,coc)\nprint(ans[0]+1)", "n = int(input())\nmen = list(map(int,input().split()))\nd = dict()\nfor i in men:\n    now = d.get(i,0)\n    d[i] = now+1\nm = int(input())\nf1 = list(map(int,input().split()))\nf2 = list(map(int,input().split()))\nmx = 0\nmx2 = 0\nnum = 0\nfor i in range(m):\n    now = d.get(f1[i],0)\n    if now>mx:\n        mx = now\n        mx2 = d.get(f2[i],0)\n        num = i\n    elif now == mx:\n        now2 = d.get(f2[i],0)\n        if now2>mx2:\n            mx2 = d.get(f2[i],0)\n            num = i            \nprint(num+1)", "def which_movie(n, m, langs_ix, audio_ix, subs_ix):\n    langs = {}\n    for l in langs_ix:\n        if l in langs:\n            langs[l] += 1\n        else:\n            langs[l] = 1\n    scores = []\n    for i in range(m):\n        vp = langs[audio_ix[i]] if audio_ix[i] in langs else 0\n        asp = langs[subs_ix[i]] if subs_ix[i] in langs else 0\n        scores.append((i + 1, vp, asp))\n\n    scores = sorted(scores, key=lambda x: (x[1], x[2], -x[0]))\n    return scores[-1][0]\n\n\ndef main():\n    n = int(input().strip())\n    lang_ix = [int(i) for i in input().strip().split()]\n    m = int(input().strip())\n    audiolang_ix = [int(i) for i in input().strip().split()]\n    subtitle_ix = [int(i) for i in input().strip().split()]\n    ans = which_movie(n, m, lang_ix, audiolang_ix, subtitle_ix)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ns = [int(i) for i in input().split()]\nm = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nd = dict()\nr = []\nfor i in s:\n\tif i in d:\n\t\td[i]+=1\n\telse:\n\t\td[i] = 1\nfor i in a:\n\tif i not in d:\n\t\td[i] = 0\nfor i in b:\n\tif i not in d:\n\t\td[i] = 0\nfilms = []\nfor i in range(m):\n\tfilms.append((i+1, (d[a[i]], d[b[i]])))\nfilms.sort(key=lambda i: i[1], reverse = True)\nprint(films[0][0])\n\n\t\n", "import sys, math\n\nn = int(input())\nuch = list(map(int, sys.stdin.readline().split()))\ndic = dict()\nfor x in uch:\n    if (x in list(dic.keys())):\n        dic[x] += 1\n    else:\n        dic[x] = 1\nm = int(input())\nlangf = list(map(int, sys.stdin.readline().split()))\nsubf = list(map(int, sys.stdin.readline().split()))\nmaxl = 0\nmaxs = 0\nans = 1\nfor i in range(m):\n    if (langf[i] not in list(dic.keys())):\n        dic[langf[i]] = 0\n    if (subf[i] not in list(dic.keys())):\n        dic[subf[i]] = 0\n    if (maxl < dic[langf[i]]):\n        maxl = dic[langf[i]]\n        maxs = dic[subf[i]]\n        ans = i+1\n    elif (maxl == dic[langf[i]]) and (maxs < dic[subf[i]]):\n        maxs = dic[subf[i]]\n        ans = i+1\nprint(ans)\n", "n = int(input())\nlang_cnt = {}\nfor lang in input().split():\n    if lang not in lang_cnt:\n        lang_cnt[lang] = 0\n    lang_cnt[lang] += 1\nm = int(input())\nbest_vp_cnt = -1\nbest_as_cnt = -1\nbest_movie = 0\naudio = input().split()\nsubtitles = input().split()\nfor i in range(1, m + 1):\n    vp_cnt = lang_cnt.get(audio[i - 1], 0)\n    as_cnt = lang_cnt.get(subtitles[i - 1], 0)\n    if vp_cnt > best_vp_cnt:\n        best_vp_cnt = vp_cnt\n        best_as_cnt = as_cnt\n        best_movie = i\n    elif vp_cnt == best_vp_cnt and as_cnt > best_as_cnt:\n        best_vp_cnt = vp_cnt\n        best_as_cnt = as_cnt\n        best_movie = i\nprint(best_movie)\n", "n = int(input())\nA = list(map(int, input().split()))\n\nm = int(input())\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nD = dict()\nfor a in A :\n    if a not in D :\n        D[a] = 1\n    else :\n        D[a] += 1\n\nP = [0] * m\nS = [0] * m\nfor i in range(m) :\n    key = B[i]\n    if key in D :\n        P[i] += D[key]\nfor i in range(m) :\n    key = C[i]\n    if key in D :\n        S[i] += D[key]\n\nans = 0\nfor i in range(1, m) :\n    if P[i] > P[ans] or (P[i] == P[ans] and S[i] > S[ans]) :\n        ans = i\n\nans += 1\nprint(ans)", "parse_int = lambda: list(map(int, input().split()))\n\nscientists = int(input())\nsc_langs = parse_int()\nfilms = int(input())\nfilm_voice = parse_int()\nfilm_sub = parse_int()\n\n#print(film_voice)\n#print(film_sub)\n\n#ppl_in_lang = [0]*(10**9+5)\nlang_decoder = dict()\nlang_decoder.setdefault(0)\n\nfor _ in sc_langs:\n    if _ in list(lang_decoder.keys()):\n        lang_decoder[_]+=1\n    else:\n        lang_decoder[_]=1\n\n#print( lang_decoder)\n\nfilm_good, film_ok = [0]*films, [0]*films\n\nfor _ in range(films):\n    try:\n        film_good[_] += (lang_decoder[film_voice[_]] or 0)\n    except KeyError:\n        pass\n\n    try:\n        film_ok[_]   += (lang_decoder[film_sub[_]  ] or 0)\n    except KeyError:\n        pass\n\nbest = 0\nfor _ in range(films):\n    if film_good[_] > film_good[best]: best = _\n    if (film_good[_] == film_good[best]) \\\n        and (film_ok[_] > film_ok[best]): best = _\n\n#print(film_good)\n#print(film_ok)\n\nprint(best+1)\n\n"]