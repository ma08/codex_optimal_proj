["inp1 = input()\nis1 = inp1.split(\" \")\nnodeCount = int(is1[0])\nsum = float(is1[1])\nnodes = [0 for x in range(nodeCount)]\ninp2 = []\nfor z in range(nodeCount-1):\n    inp2.append(input())\nfor reb in inp2:\n    rebs = reb.split(\" \")\n    i = int(rebs[0])-1\n    nodes[i] = nodes[i]+1\n    i = int(rebs[1])-1\n    nodes[i] = nodes[i]+1\nnodes = [x for x in nodes if x == 1]\nprint(sum*2/len(nodes))\n", "n, s = map(int, input().split())\na = [0] * (n + 1)\nkol = 0\nfor i in range(n - 1):\n    x, y = map(int, input().split())\n    a[x] += 1\n    a[y] += 1\nfor i in range(1, n + 1):\n    if a[i] == 1:\n        kol += 1\nprint(s / kol * 2)", "n,s = map(int,input().split())\nc = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int,input().split())\n    c[a-1].append(b)\n    c[b-1].append(a)\nd = set()\nk = 0\nfor i in range(n):\n    if len(c[i]) == 1:\n        d.add(i)\n        if not (c[i][0] - 1) in d:\n            k += 1\nif n == 2:\n    print(s)\nelse:\n    print(round(s * 2 / k,7))", "n, s = map(int, input().split())\nmass = [0] * n\nfor i in range(n - 1):\n    a1, b1 = map(int, input().split())\n    a1 -= 1\n    b1 -= 1\n    mass[a1] += 1\n    mass[b1] += 1\ncnt = 0\nfor i in mass:\n    cnt += (i == 1)\nprint(2 *s / cnt)", "n, s = list(map(int, input().split()))\na = [0 for i in range(n)]\nfor i in range(n-1):\n    x, y = list(map(int, input().split()))\n    a[x-1]+=1\n    a[y-1]+=1\ncounter = 0\nfor i in a:\n    if (i==1):\n        counter+=1\nprint((2*s)/counter)\n    \n", "# list(map(int, input().split()))\nn, s = list(map(int, input().split()))\nss = [[] for i in range(n)]\nvis = [0] * n\n#print(vis)\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    ss[a - 1].append(b - 1)\n    ss[b - 1].append(a - 1)\n\nli = 0\n#print(ss)\n\n\nfor i in range(n):\n    if len(ss[i]) == 1:\n        li += 1\nprint(s / li * 2)\n", "n, s = map(int, input().split())\na = [0] * n\nif n == 2:\n    xc, xd = map(int, input().split())\n    print(s)\n    return\nfor i in range(n - 1):\n    xc, xd = map(int, input().split())\n    a[xd - 1] += 1\n    a[xc - 1] += 1\ncnt = 0\nfor i in range(n):\n    if a[i] == 1:\n        cnt += 1\nprint(2 * round(s / cnt, 10))", "n, s = list(map(int, input().split()))\na = [0] * n\nlisty = 0\nfor i in range(n - 1):\n    c, d = list(map(int, input().split()))\n    a[c-1] += 1\n    a[d-1] += 1\n    if a[c-1] == 1:\n        listy += 1\n    if a[c-1] == 2:\n        listy -= 1\n    if a[d-1] == 1:\n        listy += 1\n    if a[d-1] == 2:\n        listy -= 1 \nif n <= 3:\n    print(s)\nelse:\n    print(float(s) * 2 / float(listy))", "def main():\n    n, s = list(map(int, input().split()))\n\n    g = [0 for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        g[a] += 1\n        g[b] += 1\n\n    m = 0\n    for x in g:\n        if x == 1:\n            m += 1\n\n    print(2 * s / m)\n\n\nmain()\n", "koor = dict()\na = input()\nq = int(a.split()[0])\nw = int(a.split()[1])\nfor i in range(q - 1):\n    a = input()\n    z = int(a.split()[0])\n    x = int(a.split()[1])    \n    if z not in list(koor.keys()):\n        koor[z] = 1\n    else:\n        koor[z] += 1\n    if x not in list(koor.keys()):\n        koor[x] = 1\n    else:\n        koor[x] += 1\ntt = list()\nkolvo = 0\nfor i in list(koor.values()):\n    if i == 1:\n        kolvo += 1\nprint((w * 2) / kolvo)\n", "# list(map(int, input().split()))\n# map(int, input().split())\n\nn, s = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\n\ncnt = 0\nfor i in range(n):\n    if len(g[i]) == 1:\n        cnt += 1\nprint(2 * s / cnt)", "a, s = list(map(int, input().split()))\ngraph = [[] for _ in range(a)]\nfor _ in range(a - 1):\n    x, y = list(map(int, input().split()))\n    graph[x-1].append(y-1)\n    graph[y-1].append(x-1)\nk = 0\nfor i in graph:\n    if len(i) == 1:\n        k += 1\nprint((s*2) / k)\n", "n,s = [int(i) for i in input().split()]\nlst = [0 for i in range(n)]\nfor i in range(n-1):    \n    x,y = [int(i) for i in input().split()]\n    lst[x-1]+=1\n    lst[y-1]+=1\ncount = 0\nfor i in lst:\n    if i == 1:\n        count+=1\n\nprint(2*s/count)\n", "n, s = list(map(int, input().split()))\ntree = [[] for i in range(n)]\nfor i in range(n-1):\n    inp = list([int(x)-1 for x in input().split()])\n    tree[inp[0]].append(inp[1])\n    tree[inp[1]].append(inp[0])\ncou = 0\nfor i in tree:\n    if len(i) == 1:\n        cou+=1\nprint(s/cou*2)\n", "import sys, time, os\nfrom pprint import pprint as pp\nif os.environ.get('_ONPC_', False):\n    stdin = open('input.txt', 'r')\n    stdout = open('output.txt', 'w')\n    sys.stdin = stdin\n    sys.stdout = stdout\n\n    now = time.time()\n    __flag = True\nelse:\n    __flag = False\n\n\ndef what(obj):\n    if __flag:\n        pp(obj, sys.stderr)\n\n\n#############################################\nfrom collections import deque\nn, s = map(int, input().split())\n\nd = {}\n\nfor i in range(n-1):\n    a, b = map(int, input().split())\n    if a not in d:\n        d[a] = 1\n    else:\n        d[a] += 1\n    if b not in d:\n        d[b] = 1\n    else:\n        d[b] += 1\n\ncnt = 0\nfor e in d:\n    if d[e] == 1:\n        cnt += 1\n\nprint(2*s/cnt)\n\n##############################################\nif __flag:\n    stdout.close()\n    stdin.close()\n\n    print(time.time() - now, file=sys.stderr)\n", "n, s = map(int, input().split())\nd = {}\nmax_vert = 1\nfor i in range(n - 1):\n    vertex = list(map(int, input().split()))\n    d[vertex[0]] = d.get(vertex[0], 0) + 1\n    d[vertex[1]] = d.get(vertex[1], 0) + 1\ncnt = 0\nfor i in d:\n    if d[i] == 1:\n        cnt += 1\nm = max(d.values())\nc = 0\nfor i in d:\n    if d[i] == 1:\n        c += 1\nprint(2 * s / c)", "n,s = map(int, input().split())\nans = {}\nfor i in range(n-1):\n    a,b = map(int, input().split())\n    if a in ans:\n        ans[a].append(b)\n    else:\n        ans[a] = [b,]\n    if b in ans:\n        ans[b].append(b)\n    else:\n        ans[b] = [a,]\n\nmax_count = 0\nfor key in ans:\n    if len(ans[key]) == 1:\n        max_count += 1\n\nif n ==2 :\n    print(s)\nelse:\n    print(s/(max_count)*2)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\nn, s=list(map(int, input().split()))\n\n\n# In[ ]:\n\n\nedgecount=[0 for i in range(n)]\n\n\n# In[ ]:\n\n\nfor j in range(0,n-1):\n    e1, e2=list(map(int, input().split()))\n    edgecount[e1-1]+=1\n    edgecount[e2-1]+=1\n    \n    \nnodecount=0\n\nfor i in range(0,n):\n    if edgecount[i]==1:\n        nodecount+=1\n\nprint(s*2/nodecount)\n    \n\n", "n,s = [int(item) for item in input().split()]\ng = [0 for i in range(n+10)]\nfor i in range(n-1):\n    u,v  = [int(item) for item in input().split()]\n    g[u] += 1\n    g[v] += 1 \nc = 0\nfor i in range(1, n+1):\n    if (g[i] == 1):\n        c += 1\nprint(2*s/c)", "n, s = map(int, input().split())\nd = {}\nfor i in range(n - 1):\n    vertex = list(map(int, input().split()))\n    d[vertex[0]] = d.get(vertex[0], 0) + 1\n    d[vertex[1]] = d.get(vertex[1], 0) + 1\nc = 0\nfor i in d:\n    if d[i] == 1: c += 1\nprint(2 * s / c)", "n, s = map(int, input().split())\nd = {}\nmax_vert = 1\nfor i in range(n - 1):\n    vertex = list(map(int, input().split()))\n    d[vertex[0]] = d.get(vertex[0], 0) + 1\n    d[vertex[1]] = d.get(vertex[1], 0) + 1\ncnt = 0\nfor i in d:\n    if d[i] == 1:\n        cnt += 1\nm = max(d.values())\nc = 0\nfor i in d:\n    if d[i] == 1:\n        c += 1\nprint(2 * s / c)", "n, s = map(int, input().split())\nd = {}\nmax_vert = 1\nfor i in range(n - 1):\n    vertex = list(map(int, input().split()))\n    d[vertex[0]] = d.get(vertex[0], 0) + 1\n    d[vertex[1]] = d.get(vertex[1], 0) + 1\ncnt = 3\nfor i in d:\n    if d[i] == 1:\n        cnt += 1\nm = max(d.values())\nc = 0\nfor i in d:\n    if d[i] == 1:\n        c += 1\nprint(2 * s / c)", "n, s = map(int, input().split())\nd = {}\nmax_vert = 1\nfor i in range(n - 1):\n    vertex = list(map(int, input().split()))\n    d[vertex[0]] = d.get(vertex[0], 0) + 1\n    d[vertex[1]] = d.get(vertex[1], 0) + 1\ncnt = 1\nfor i in d:\n    if d[i] == 1:\n        cnt += 1\nm = max(d.values())\nc = 0\nfor i in d:\n    if d[i] == 1:\n        c += 1\nprint(2 * s / c)"]