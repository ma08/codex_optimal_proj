["\"\"\"\nCodeforces Round 251 Div 2 Problem D\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(s)\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\nn,m = read()\na = read()\nb = read()\ns = [(0,2)] + [(i,0) for i in a] + [(i,1) for i in b]\ns.sort()\nt = sum(b)\nal = 0\nbr = m\nmn = t\nfor i in range(1,n+m+1):\n    t += (al-br) * (s[i][0] - s[i-1][0])\n    mn = min(mn, t)\n    if s[i][1]:\n        br -= 1\n    else:\n        al += 1\nprint(mn)", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\narr = sorted(list(zip(a, [1] * n)) + list(zip(b, [2] * m)))\n\nans = 10**18\n\nless_sum, less_cnt = 0, 0\nmore_sum, more_cnt = sum(b), m\nfor x, y in arr:\n\tif y == 1:\n\t\tless_sum += x\n\t\tless_cnt += 1\n\telse:\n\t\tmore_sum -= x\n\t\tmore_cnt -= 1\n\tans = min(ans, (less_cnt * x - less_sum) + (more_sum - more_cnt * x))\n\nprint(ans)\n", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\narr = sorted(list(zip(a, [1] * n)) + list(zip(b, [2] * m)))\n\nans = 10**18\n\nless_sum, less_cnt = 0, 0\nmore_sum, more_cnt = sum(b), m\nfor x, y in arr:\n    if y == 1:\n        less_sum += x\n        less_cnt += 1\n    else:\n        more_sum -= x\n        more_cnt -= 1\n    ans = min(ans, (less_cnt * x - less_sum) + (more_sum - more_cnt * x))\n\nprint(ans)", "from itertools import repeat\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\narr = sorted(list(zip(a, repeat(1))) + list(zip(b, repeat(2))))\n\nans = 10**18\n\nless_sum, less_cnt = 0, 0\nmore_sum, more_cnt = sum(b), m\nfor x, y in arr:\n\tif y == 1:\n\t\tless_sum += x\n\t\tless_cnt += 1\n\telse:\n\t\tmore_sum -= x\n\t\tmore_cnt -= 1\n\tans = min(ans, (less_cnt * x - less_sum) + (more_sum - more_cnt * x))\n\nprint(ans)\n", "\"\"\"\nCodeforces Round 251 Div 2 Problem D\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(s)\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\nn,m = read()\na = read()\nb = read()\ns = [0] + a + b\ns.sort()\nt = sum(b)\nmn = t\nfor i in range(n+m):\n    t += (i-m) * (s[i+1] - s[i])\n    mn = min(mn, t)\nprint(mn)", "n, m = map(int, input().split())\na, b = list(map(int, input().split())), list(map(int, input().split()))\na.sort(); b.sort()\ni = j = 0\ns = t = sum(b)\nwhile True:\n    if i == n or (j < m and a[i] > b[j]): \n        if j == m: break\n        x = b[j]\n        j += 1\n    else:\n        x = a[i]\n        i += 1\n    t -= x\n    s = min(t - x * (m - j - i), s)\nprint(s)", "n, m = map(int, input().split())\na, b = list(map(int, input().split())), list(map(int, input().split()))\na.sort()\nb.sort(reverse = True)\ns = 0\nfor i in range(min(n, m)):\n    if b[i] > a[i]: s += b[i] - a[i]\nprint(s)", "R = lambda: map(int, input().split())\nn, m = R()\na = sorted(R())\nb = sorted(R())\nb.reverse()\nans = 0\nfor i in range(min(n, m)):\n    if b[i] > a[i]:\n        ans += b[i] - a[i]\nprint(ans)", "n, m = map(int, input().split())\na = sorted(map(int, input().split()))\nb = sorted(map(int, input().split()))\nb.reverse()\nans = 0\nfor i in range(min(n, m)):\n    if b[i] > a[i]:\n        ans += b[i] - a[i]\nprint(ans)", "n, m = map(int, input().split())\na = sorted(map(int, input().split()))\nb = sorted(map(int, input().split()))[::-1]\nans = 0\nfor i in range(min(n, m)):\n    if b[i] > a[i]:\n        ans += b[i] - a[i]\nprint(ans)", "#from sets import Set\nn,m=list(map(int, input().split(' ')))\na=list(map(int, input().split(' ')))\nb=list(map(int, input().split(' ')))\na.sort()\nb.sort()\n\nc=list(set(a+b))\nc.sort()\n\nans = 1e+18\nless=0\nbig=sum(b)\ni1,k1=0,0\ni2,k2=0,len(b)\nfor border in c:\n\twhile(i1<len(a) and a[i1]<border):\n\t\tless+=a[i1]\n\t\ti1+=1\n\t\tk1+=1\n\twhile(i2<len(b) and b[i2]<border):\n\t\tbig-=b[i2]\n\t\ti2+=1\n\t\tk2-=1\n\tans=min(ans, border*k1-less+big-border*k2)\nprint ((int)(ans))", "import sys\nimport math\n\n\ndef solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    bcost = [0] * m\n    for i in range(m - 2, -1, -1):\n        valstoright = m - i - 1\n        bcost[i] = bcost[i + 1] + valstoright * (b[i + 1] - b[i])\n    acost = [0] * n\n    for i in range(1, n):\n        valstoleft = i\n        acost[i] = acost[i-1] + valstoleft * (a[i] - a[i-1])\n    res = 10000000000000000\n    for i in range(m):\n        amax = n - 1\n        amin = 0\n        while amin < amax:\n            avg = (amin + amax + 1) // 2\n            if a[avg] > b[i]: amax = avg - 1\n            else: amin = avg\n        # if a[amin] > b[i]: continue\n        res = min(res, bcost[i] + acost[amin] + (amin+1)*(b[i] - a[amin]))\n    for i in range(n):\n        bmax = m - 1\n        bmin = 0\n        while bmin < bmax:\n            avg = (bmax + bmin) // 2\n            if b[avg] < a[i] : bmin = avg + 1\n            else: bmax = avg\n        # if b[bmin] < a[i]: continue\n        # print(i, bmin, bcost[bmin], acost[i], (m - bmin)*(b[bmin] - a[i]))\n        res = min(res, bcost[bmin] + acost[i] + (m - bmin)*(b[bmin] - a[i]))\n    return max(res, 0)\n\n\n\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "import sys\n\ndef solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    bcost = [0] * m\n    for i in range(m - 2, -1, -1):\n        valstoright = m - i - 1\n        bcost[i] = bcost[i + 1] + valstoright * (b[i + 1] - b[i])\n    acost = [0] * n\n    for i in range(1, n):\n        valstoleft = i\n        acost[i] = acost[i-1] + valstoleft * (a[i] - a[i-1])\n    res = 10000000000000000\n    for i in range(m):\n        amax = n - 1\n        amin = 0\n        while amin < amax:\n            avg = (amin + amax + 1) // 2\n            if a[avg] > b[i]: amax = avg - 1\n            else: amin = avg\n        res = min(res, bcost[i] + acost[amin] + (amin+1)*(b[i] - a[amin]))\n    for i in range(n):\n        bmax = m - 1\n        bmin = 0\n        while bmin < bmax:\n            avg = (bmax + bmin) // 2\n            if b[avg] < a[i] : bmin = avg + 1\n            else: bmax = avg\n        res = min(res, bcost[bmin] + acost[i] + (m - bmin)*(b[bmin] - a[i]))\n    return max(res, 0)\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "import sys\n\ndef solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    bcost = [0] * m\n    for i in range(m - 2, -1, -1):\n        valstoright = m - i - 1\n        bcost[i] = bcost[i + 1] + valstoright * (b[i + 1] - b[i])\n    acost = [0] * n\n    for i in range(1, n):\n        valstoleft = i\n        acost[i] = acost[i-1] + valstoleft * (a[i] - a[i-1])\n    res = 10000000000000000\n    for i in range(m):\n        amax = n - 1\n        amin = 0\n        while amin < amax:\n            avg = (amin + amax + 1) // 2\n            if a[avg] > b[i]: amax = avg - 1\n            else: amin = avg\n        res = min(res, bcost[i] + acost[amin] + (amin+1)*(b[i] - a[amin]))\n    for i in range(n):\n        bmax = m - 1\n        bmin = 0\n        while bmin < bmax:\n            avg = (bmax + bmin) // 2\n            if b[avg] < a[i] : bmin = avg + 1\n            else: bmax = avg\n        res = min(res, bcost[bmin] + acost[i] + (m - bmin)*(b[bmin] - a[i]))\n    return max(res, 0)\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "n,m = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\na.sort()\nb.sort(reverse=True)\nans = 0\nfor i in range(min(n,m)):\n    if b[i] > a[i]:\n        ans+= b[i]-a[i]\nprint(ans)", "#it's me\n\nn,m = list(map( int,input().split() ))\na = sorted( map( int,input().split() ) )\nb = sorted( map( int,input().split() ) )\nb.reverse()\nRes = 0\nfor i in range( min(n,m) ):\n    if a[i]<b[i]:\n        Res += b[i]-a[i]\nprint(Res)\n", "def main():\n    n,m = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    \n    #a>>>>>\n    #b<<<<<\n    def f(m):\n        ans = 0\n        for i in a:\n            ans+=max(0,m-i)\n        for i in b:\n            ans+=max(0,i-m)\n        return ans\n    l = 0\n    r = 10**9 + 3\n    \n    while r-l>2:\n        m1 = l+ (r-l)//3\n        m2 = m1+ (r-l)//3\n        if f(m1)>=f(m2):\n            l = m1\n        else:\n            r = m2\n    \n    print(min(f(l),f(l+1),f(r)))\nmain()\n\n\n\n\n", "n, m = list(map(int, input().split()))\na = sorted(map(int, input().split()))\nb = sorted(map(int, input().split()), reverse = True)\nans = 0\n#print(a, b)\nfor i in range(min(n, m)):\n\tans += max(0, b[i] - a[i])\n\nprint(ans)\n", "def costo(a, b, t):\n    resultado = 0\n    for elem in a:\n        resultado += max(t - elem, 0)\n    for elem in b:\n        resultado += max(elem - t, 0)\n    return resultado\n\n\nm, n = tuple(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ninf, sup = min(a), max(b)\nwhile inf < sup:\n    t = (inf + sup)//2\n    if costo(a, b, t+1) - costo(a, b, t) >= 0:\n        sup = t\n    else:\n        inf = t + 1\n\nprint(costo(a, b, inf))\n\n", "import os, sys, bisect, copy\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache   #use @lru_cache(None)\nif os.path.exists('in.txt'): sys.stdin=open('in.txt','r')\nif os.path.exists('out.txt'): sys.stdout=open('out.txt', 'w')\n#\ndef input(): return sys.stdin.readline()\ndef mapi(arg=0): return list(map(int if arg==0 else str,input().split()))\n#------------------------------------------------------------------\n\nn,m = mapi()\na = list(mapi())\nb = list(mapi())\na.sort()\nb.sort(reverse=True)\n\nres = 0\ni =0\nwhile i<n and i<m and a[i]<b[i]:\n    res+= b[i]-a[i]\n    i+=1\nprint(res)\n", "import os, sys, bisect, copy\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache   #use @lru_cache(None)\nif os.path.exists('in.txt'): sys.stdin=open('in.txt','r')\nif os.path.exists('out.txt'): sys.stdout=open('out.txt', 'w')\n#\ndef input(): return sys.stdin.readline()\ndef mapi(arg=0): return map(int if arg==0 else str,input().split())\n#------------------------------------------------------------------\n\nn,m = mapi()\na = list(mapi())\nb = list(mapi())\nres = 10**18\nl = 1\nr = 10**9\ncnt =0\n\ndef check(k):\n    ans = 0\n    for i in a:\n        if i<k: ans+=k-i\n    for i in b:\n        if i>k: ans+=i-k\n    return ans\n\nwhile r-l>=0 and cnt<=64:\n    cnt+=1\n    mid1 = l+(r-l)//3\n    mid2 = r-(r-l)//3\n    if mid1-l<0 or r-mid1<0 or mid2-l<0 or r-mid2<0:\n        break\n    ans1 = check(mid1)\n    ans2 = check(mid2)\n    res = min(res,ans1,ans2)\n    if ans1<ans2:\n        r = mid2\n    else:\n        l = mid1\nprint(res)", "def binarySearchCount(arr, n, key): \n  \n    left = 0\n    right = n - 1\n  \n    count = 0\n  \n    while (left <= right):  \n        mid = int((right + left) / 2) \n  \n        # Check if middle element is \n        # less than or equal to key \n        if (arr[mid] < key):  \n  \n            # At least (mid + 1) elements are there \n            # whose values are less than \n            # or equal to key \n            count = mid + 1\n            left = mid + 1\n          \n        # If key is smaller, ignore right half \n        else: \n            right = mid - 1\n      \n    return count \ndef countGreater(arr, n, k): \n    l = 0\n    r = n - 1\n  \n    # Stores the index of the left most element \n    # from the array which is greater than k \n    leftGreater = n \n  \n    # Finds number of elements greater than k \n    while (l <= r): \n        m = int(l + (r - l) / 2) \n  \n        # If mid element is greater than \n        # k update leftGreater and r \n        if (arr[m] > k): \n            leftGreater = m \n            r = m - 1\n  \n        # If mid element is less than \n        # or equal to k update l \n        else: \n            l = m + 1\n  \n    # Return the count of elements  \n    # greater than k \n    return (n - leftGreater) \nclass SegmentTree:\n    def __init__(self, data, default=0, func=lambda a,b:a+b):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n \n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n \n    def __delitem__(self, idx):\n        self[idx] = self._default\n \n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n \n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n \n    def __len__(self):\n        return self._len\n \n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n \n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n \n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\nm,n=map(int,input().split())\nb=list(map(int,input().split()))\na=list(map(int,input().split()))\n#a=[100]*10\na.sort()\nb.sort()\ntot=9999999999999999999999999999999\ns=SegmentTree(a)\n#print(s.query(n,n-1))\ns1=SegmentTree(b)\nfor i in range(n):\n    c=binarySearchCount(b,m,a[i])\n    #print(a[i],c)\n    ans=c*a[i]-s1.query(0,c-1)-(n-1-i)*a[i]+s.query(i+1,n-1)\n    #print(ans)\n    tot=min(ans,tot)    \nfor i in range(m):\n    c=countGreater(a,n,b[i])\n   # print(b[i],c)\n    ans=-(c)*b[i]+s.query(n-c,n-1)-s1.query(0,i-1)+(i)*b[i]\n   # print(ans)\n    tot=min(ans,tot)\nprint(tot)", "n, m  = list(map(int, input().split()))\na  = list(map(int, input().split()))\nb  = list(map(int, input().split()))\na_min = min(a)\nb_max = max(b)\nif a_min >= b_max:\n    print(0)\nelse:\n    a = sorted([i for i in a if i < b_max])\n    n = len(a)\n    aa = [0] * (n + 1)\n    for i in range(n):\n        aa[i + 1] = aa[i] + a[i]\n    b = sorted([i for i in b if i > a_min])\n    m = len(b)\n    bb = [0] * (m + 1)\n    for i in range(m - 1, -1, -1):\n        bb[i] = bb[i + 1] + b[i]\n    output = float('inf')\n    i = 0\n    j = 0\n    while i < n or j < m:\n        if i == n:\n            k =  b[j]\n        elif j == m:\n            k = a[i]\n        else:\n            k = min(a[i], b[j])\n        while i < n and a[i] <= k:\n            i += 1\n        while j < m and b[j] <= k:\n            j += 1\n        output = min(output, k * (i - m + j) - aa[i] + bb[j])\n    print(int(output))\n\n", "from sys import stdin\nn,m = map(int,stdin.readline().split())\na = list(map(int,stdin.readline().split()))\nb = list(map(int,stdin.readline().split()))\nl = min(min(a),min(b))\nr = max(max(a),max(b))\nans = 10**20\nwhile l<=r:\n    lo = l+(r-l)//3\n    hi = r-(r-l)//3\n    cou = 0\n    for i in a:\n        cou += max(0,lo-i)\n    for j in b:\n        cou += max(0,j-lo)\n    cou1 = 0\n    for i in a:\n        cou1 += max(0,hi-i)\n    for j in b:\n        cou1 += max(0,j-hi)\n    if cou1>cou:\n        r = hi-1\n    elif cou1<cou:\n        l = lo+1\n    else:\n        l = lo+1\n        r = hi-1\n    ans = min(ans,cou,cou1)\nprint(ans)", "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\nfile=1\n\n\n \ndef solve():\n\n\n    n,m=mi()\n    a=li()\n    b=li()\n    a.sort()\n    b.sort()\n    if b[-1]<=a[0]:\n        print(0)\n        return\n    pre=[0]*n\n    for i in range(1,n):\n        pre[i]+=pre[i-1]\n        pre[i]+=i*(a[i]-a[i-1])\n\n    suff=[0]*m\n    for i in range(m-2,-1,-1):\n        suff[i]+=suff[i+1]\n        suff[i]+=(m-i-1)*(b[i+1]-b[i])\n\n    def fun(m1):\n        x=bisect(a,m1)-1\n        y=bisect(b,m1)-1\n        ans=0\n        if x==n:\n            x-=1\n        ans+=pre[x]\n        ans+=(m1-a[x])*(x+1)\n        # print(x,ans)\n        if y>=(m-1):\n            return ans\n        if y==0:\n            y-=1\n        ans+=(b[y+1]-m1)*(m-y-1)\n        ans+=suff[y+1]\n        return ans\n    \n    \n    l=1\n    r=int(1e9+5)\n    while(l<=r):\n        mid=l+(r-l)//2\n        x=fun(mid)\n        if mid==1:\n            x1=fun(mid+1)\n            if(x>x1):\n                l=mid+1\n                ans=x1\n            else:\n                # print(mid)\n                print(max(x,0))\n                return\n\n        x1=fun(mid-1)\n        x2=fun(mid+1)\n        if(x1<x2):\n            if(x1<x):\n                r=mid-1\n                ans=x1\n            else:\n                # print(mid)\n                print(max(x,0))\n                return\n        else:\n            if(x2<x):\n                l=mid+1\n            else:\n                # print(mid)\n                print(max(x,0))\n                return\n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n        \ndef __starting_point():\n\n    if(file):\n\n        if path.exists('input.txt'):\n            sys.stdin=open('input.txt', 'r')\n            sys.stdout=open('output.txt','w')\n        else:\n            input=sys.stdin.readline\n    solve()\n__starting_point()"]