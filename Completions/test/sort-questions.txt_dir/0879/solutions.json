["def prog():\n    n = int(input())\n    inp = list(map(int,input().split()))\n    temp = []\n    while(n!=1):\n        temp += [n]\n        n = inp[n-2]\n    temp += [1]\n    temp.reverse()\n    for i in temp:\n        print(i,end=' ')\nprog()", "n = int(input())\nparent = [*map(int, input().split())]\nl = [n]\nwhile l[-1] != 1:\n    l.append(parent[l[-1] - 2])\nprint(' '.join(map(str, l[::-1])))", "n = int(input().strip())\nroute = list(map(int, input().strip().split()))\nout = [n]\ni = n - 2\nwhile i >= 0:\n    out.append(route[i])\n    i = route[i] - 2\n\nprint(\" \".join(map(str, reversed(out))))", "n = int(input())\ns = list(map(int, input().split()))\nr = [n]\nwhile r[-1] != 1:\n    r.append(s[r[-1]-2])\nprint(*reversed(r))", "n = int(input())\np = list(map(int, input().split()))\n\nlis = []\n\ni = n\n\nwhile i != 1:\n    lis.append(i)\n    i = p[i - 2]\n\nprint(*[1] + lis[::-1])", "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nk = a[-1]\nansw = deque()\nansw.appendleft(n)\nwhile k != 1:\n    answ.appendleft(k)\n    k = a[k-2]\nansw.appendleft(k)\nprint(\" \".join(str(x) for x in answ))", "from collections import deque\nn = int(input())\np=[int(x) for x in input().split()]\ncur = n\nans = deque()\nwhile cur > 1:\n    ans.appendleft(str(cur))\n    cur = p[cur-2]\nans.appendleft('1')\nprint(\" \".join(ans))", "n = int(input())\nprev = [int(x) for x in input().split()]\nx = n;\nans = [x];\nwhile x > 1:\n    x = prev[x - 2]\n    ans.append(x)\nans.reverse()\nprint(*ans)", "n = int ( input ())\na = [ 0 ] + list (map(int,input().split()))\nz=[]\nwhile n != 0:\n    z +=[n]\n    n = a [ n -1 ]\nz.reverse()\nfor i in z:\n    print(i,end=\" \")\n\n", "n = int(input())\nl = list(map(int,input().split()))\nfrom collections import defaultdict\nd = defaultdict(int)\n\nfor i in range(2,n+1):\n    d[i] = l[i-2]\n\nx = n\nans = []\nwhile(x!=1):\n    ans.append(x)\n    x = d[x]\nans.append(1)\nfor i in ans[::-1]:\n    print(i,end= ' ')", "n=int(input())\narr=list(map(int,input().split()))\nres=[n]\nwhile res[-1]!=arr[0]:\n\tres.append(arr[res[-1]-2])\nres.sort()\nfor i in res:\n\tprint(i,end=\" \")", "import sys\nn = int(sys.stdin.readline())\nP = [0,0] + [int(i) for i in sys.stdin.readline().strip().split()]\n\ni = n\ns = [n]\nwhile i != 1:\n    s.append(P[i])\n    i = P[i]\n    \nprint(' '.join([str(i) for i in reversed(s)]))\n", "n=int(input())\nl=input().split(\" \")\nl=[int(x) for x in l]\nroute=[]\nroute.append(n)\ncurrent=l[-1]\nwhile True:\n    route.append(current)\n    if current==1:\n        break\n    current=l[current-2]\nfor i in range(len(route)):\n    print(route[len(route)-i-1],end=\" \")\n", "n = int(input())\n\nzi = [int(x) for x in input().split()]\n\n\n\ng = n\nres = []\nwhile g!=1:\n    res.append(g)\n \n    g = zi[g-2]\n\nres.append(1)\n\nzz = reversed(res)\n\nzs = [str(x) for x in zz]\n\ns = ' '.join(zs)\n\nprint(s)\n\n\n", "\ndef __starting_point():\n    N = int(input())\n    connect = [ int(x) for x in input().split(' ')]\n\n\n    M = [0]*(N+2)\n    for index, i in enumerate(connect):\n        M[index+2] = i\n\n    i = N\n    ans = [i]\n    while i!= 1:\n        ans.append(M[i])\n        i = M[i]\n\n    ans.reverse()\n    ans = [str(x) for x in ans]\n    print(\" \".join(ans))\n\n__starting_point()", "n = int(input())\np = list(map(int, input().split()))\no = []\nc = n\nwhile c!=1:\n    o.append(c)\n    c = p[c-2]\no.append(1)\no = reversed(o)\nprint(*o)\n", "n = int(input())\narr = list(map(int, input().split()))\nc = n\npath = [n]\n\nwhile c!=1:\n    c = arr[c-2]\n    path.append(c)\n\npath = path[::-1]\nprint(*path)\n", "def __starting_point():\n\tn = int(input())\n\tP = list(map(int, input().rstrip().split()))\n\n\tpath = [n]\n\twhile n != 1:\n\t\tn = P[n - 2]\n\t\tpath.append(n)\n\tpath.reverse()\n\tprint(' '.join(map(str, path)))\n__starting_point()", "n=int(input())\nar1=str(input()).split(' ')\nwok={}\nout=[]\nout.append(n)\nout.append(int(ar1[n-2]))\nnew=int(ar1[n-2])\ni=0\n\nwhile new !=1:\n    out.append(int(ar1[new-2]))   \n    new=int(ar1[new-2])\nfor el in sorted(out):\n    print(el, end=' ')", "n = int(input())\nlst = [int(i) for i in input().split(' ')]\ncuri = -1\nans = [n]\nwhile(lst[curi] != 1):\n\tans.append(lst[curi])\n\tcuri = lst[curi] - 2\nans.append(1)\nans = ans[::-1]\nfor i in ans:\n\tprint(i,end = ' ')", "n = int(input())\nd = {1: 0}\nj = 2\nfor i in map(int, input().split()):\n    d[j] = i\n    j += 1\na = [n]\nwhile d[n] != 0:\n    a.append(d[n])\n    n = d[n]\nfor i in range(len(a)-1, -1, -1):\n    print(a[i], end=' ')", "n = int(input())\np = list(map(int, input().split()))\nl = []\nx = n\nwhile x != 1:\n    l.append(x)\n    x = p[x-2]\nl.append(1)\nprint(' '.join(map(str, l[::-1])))\n", "def bfs(start,end,g):\n    vis = {start:-1}\n    q = [start]\n    found = False\n    while q and not found:\n        curr = q.pop(0)\n        if curr == end:\n            break\n        for v in g[curr]:\n            if v not in vis:\n                vis[v] = curr\n                q.append(v)\n                if v == end:\n                    found = True\n                    break\n    ans = []\n    init = end\n    while init != -1:\n        ans.append(init)\n        init = vis[init]\n    return ans\n\n\nn = int(input())\ngraph = [[] for _ in range(n)]\nrouters = [int(i) for i in input().split()]\nfor i in range(len(routers)):\n    graph[routers[i]-1].append(i+1)\nans = bfs(0,n-1,graph)\ni = 0\nj = len(ans) - 1\nwhile i <= j:\n    ans[i],ans[j] = ans[j]+1,ans[i]+1\n    i+=1\n    j-=1\nprint(*ans)", "n = int(input())\nb = [n]\na = list(map(int,input().split()))\nwhile n != 1:\n    b.append(a[n-2])\n    n = a[n-2]\nif b[len(b)-1] != 1:\n    b.append(1)\nb = reversed(b)\nprint(*b , end = ' ')", "n = int(input())\nl = [0]+ list(map(int,input().split()))\nc = n-1\nk=[n]\nwhile(l[c] != 1):\n    k.append(l[c])\n    c = l[c]-1\nk.append(1)\nfor i in k[::-1]:\n    print(i,end=' ')\n"]