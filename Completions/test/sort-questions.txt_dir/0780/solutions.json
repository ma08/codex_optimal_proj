["S = input()\n\nT = [[0]*10 for i in range(10)]\n\nfor i in range(1,len(S)):\n    T[int(S[i-1])][int(S[i])]+=1\n\nC = [[[[0 for i in range(10)] for j in range(10)] for k in range(10)] for l in range(10)]\n\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            for l in range(10):\n                min_val = 1000\n                for a1 in range(11):\n                    for a2 in range(11):\n                        if a1!=0 or a2!=0:\n                            if j==(a1*k+a2*l + i)%10:\n                                min_val=min(min_val,a1+a2)\n                if min_val==1000:\n                    min_val = -10**10\n                C[i][j][k][l] = min_val-1\n\nans = [[0]*10 for i in range(10)]\n\nfor k in range(10):\n    for l in range(10):\n        a = 0\n        for i in range(10):\n            for j in range(10):\n                a+=C[i][j][k][l]*T[i][j]\n        if a<0:\n            a=-1\n        ans[k][l] = a\n\nfor a in ans:\n    print(*a)", "import sys\n\ns = sys.stdin.readline().strip()\nif s[0] != '0':\n    s = '0'+ s\n\nans = [[[10**9 for i in range (0, 10)] for j in range (0, 10)] for k in range (0, 10)]\n\nfor n in range (0, 20):\n    for i in range (0, 10):\n        for j in range (0, 10):\n            for k in range (0, 10):\n                if (k == i or k == j):\n                    ans[i][j][k] = 1\n                else:\n                    ans[i][j][k] = min([ans[i][j][k], 1+ans[i][j][(k-i+10)%10], 1+ans[i][j][(k-j+10)%10]])\n\nx = [0] * 10\nfor i in range (0, len(s)-1):\n    x[(int(s[i+1])-int(s[i])+10)%10] = x[(int(s[i+1])-int(s[i])+10)%10] + 1\n\n\nfor i in range (0, 10):\n    ans2 = [0] * 10\n    for j in range (0, 10):\n        for k in range (0, 10):\n            ans2[j] = ans2[j] + (ans[i][j][k]-1) * x[k]\n        if ans2[j] >= 10 ** 8:\n            ans2[j] = -1\n    print(\" \".join(list(map(str,ans2))))\n", "s=input().strip()\n\n\nfrom collections import Counter\n\nC=Counter()\n\nfor i in range(1,len(s)):\n    if int(s[i])>=int(s[i-1]):\n        C[int(s[i])-int(s[i-1])]+=1\n\n    else:\n        C[int(s[i])+10-int(s[i-1])]+=1\n        \n\nNEED=[[[10000]*10 for i in range(10)] for j in range(10)]\nfor i in range(10):\n    for j in range(10):\n        for k in range(13):\n            for l in range(13):\n                if k+l==0:\n                    continue\n                NEED[i][j][(i*k+j*l)%10]=min(k+l,NEED[i][j][(i*k+j*l)%10])\n\n\nfor i in range(10):\n    for j in range(10):\n        ANS=0\n\n        for c in C:\n            if NEED[i][j][c]==10000:\n                ANS=-1\n                break\n\n            else:\n                ANS+=(NEED[i][j][c]-1)*C[c]\n\n        print(ANS,end=\" \")\n\n    print()\n", "from heapq import heappush, heappop\nfrom collections import deque,defaultdict,Counter\nimport itertools\nfrom itertools import permutations\nimport sys\nimport bisect\nsys.setrecursionlimit(10**6)\ndef SI():\n    return input().split()\ndef MI():\n    return list(map(int,input().split()))\ndef I():\n    return int(input())\ndef LI():\n    return [int(i) for i in input().split()]\nYN=['Yes','No']\nYNeos='YNeos'\nGYN=['Yes','trumpet']\nmo=10**9+7\nimp='IMPOSSIBLE'\n\ns=list(input())\ndi=defaultdict(int)\nfor i in range(len(s)-1):\n    di[(int(s[i]),int(s[i+1]))]+=1\n\nmp=[[[[0]*10 for i in range(10)] for j in range(10)] for k in range(10)]\nfor h in range(10):\n    for w in range(10):\n        for x in range(10):\n            for y in range(10):\n                \n                zm=10**3\n                for nx in range(11):\n                    for ny in range(11):\n                        if nx+ny==0:\n                            continue\n                        if (x*nx+y*ny-(w-h))%10==0:\n                            #print('Y',(x,nx),(y,ny),x*nx+y*ny,(w,h),zm)\n                            zm=min(zm,nx+ny-1)\n                if zm<30:\n                    zz=zm\n                else:\n                    zz=-1\n                mp[h][w][x][y]=zz\n\n\nans=[[0]*10 for i in range(10)]\n\nfor x in range(10):\n    for y in range(10):\n        for i in list(di.items()):\n            if mp[i[0][0]][i[0][1]][x][y]==-1:\n                ans[x][y]=-1\n                break\n            ans[x][y]+=mp[i[0][0]][i[0][1]][x][y]*i[1]\nfor j in range(10):\n    print(*ans[j])\n\n", "dist = []\nfor i in range(10):\n    t = []\n    for j in range(10):\n        t.append([32]*10)\n    dist.append(t)\n\nfor i in range(10):\n    for j in range(10):\n        row = dist[i][j]\n        for a in range(10):\n            for b in range(10):\n                val = ( a*i + b*j )%10\n                s = a+b\n                if s > 0 and s<row[val]:\n                    row[val] = s\n        for k in range(10):\n            if row[k] == 32:\n                row[k] = -1\n            else:\n                row[k] -= 1\n\n# for i in range(10):\n#     for j in range(10):\n#         print(i,j,dist[i][j])\nimport sys\n\nd = [int(i) for i in input()]\ndata = [(d[i+1] - d[i])%10 for i in range(len(d) - 1)]\n#offs = 1 - len(data)\n#print(data)\nfor i in range(10):\n    for j in range(10):\n        ans = 0\n        \n        for d in data:\n            inc = dist[i][j][d]\n            #print(d, inc, end='#######\\n')\n            if inc == -1:\n                ans = -1\n                break\n            else:\n                ans += inc\n                \n        sys.stdout.write(str(ans) + ' ')\n        #print(ans - offs , end=\" \")\n    sys.stdout.write(\"\\n\")\n\n", "from collections import deque\nfrom functools import lru_cache\n\n@lru_cache(maxsize = None)\ndef helper(a, b):\n    m = {}\n    queue = deque([(0, 0)])\n    while queue:\n        cur, cnt = queue[0]\n        queue.popleft()\n        cura = (cur+a) % 10\n        curb = (cur+b) % 10\n        if cura not in m:\n            m[cura] = cnt + 1\n            queue.append((cura, cnt + 1))\n        if curb not in m:\n            m[curb] = cnt + 1\n            queue.append((curb, cnt + 1))\n    return m\n\ns = list(map(int, input()))\nans = [[0] * 10 for i in range(10)]\n\nfor i in range(10):\n    for j in range(i, 10):\n        m = helper(min(i, j), max(i, j))\n        cnt = 0\n        for k in range(len(s)-1):\n            dis = ((s[k+1] - s[k]) % 10 + 10 ) % 10\n            if cnt == -1 or dis not in m:\n                cnt = -1\n            else:\n                cnt += m[dis] - 1\n        ans[i][j] = cnt\n        ans[j][i] = cnt\n\nfor i in range(10):\n    print(' '.join(map(str, ans[i])))\n", "def cover(t, x, y):\n    tar = []\n    for xc in range(100):\n        for yc in range(100):\n            if xc == 0 and yc == 0:\n                continue\n            if (xc * x + yc * y) % 10 == t:\n                tar.append(xc + yc)\n    if tar:\n        return min(tar) - 1\n    else:\n        return -2\n\nd = {(0, 0, 0): 0, (0, 0, 1): 0, (0, 0, 2): 0, (0, 0, 3): 0, (0, 0, 4): 0, (0, 0, 5): 0, (0, 0, 6): 0, (0, 0, 7): 0, (0, 0, 8): 0, (0, 0, 9): 0, (0, 1, 0): 0, (0, 1, 1): 9, (0, 1, 2): 4, (0, 1, 3): 3, (0, 1, 4): 3, (0, 1, 5): 1, (0, 1, 6): 4, (0, 1, 7): 3, (0, 1, 8): 2, (0, 1, 9): 1, (0, 2, 0): 0, (0, 2, 1): 4, (0, 2, 2): 4, (0, 2, 3): 3, (0, 2, 4): 2, (0, 2, 5): 1, (0, 2, 6): 2, (0, 2, 7): 4, (0, 2, 8): 1, (0, 2, 9): 2, (0, 3, 0): 0, (0, 3, 1): 3, (0, 3, 2): 3, (0, 3, 3): 9, (0, 3, 4): 2, (0, 3, 5): 1, (0, 3, 6): 4, (0, 3, 7): 1, (0, 3, 8): 4, (0, 3, 9): 3, (0, 4, 0): 0, (0, 4, 1): 3, (0, 4, 2): 2, (0, 4, 3): 2, (0, 4, 4): 4, (0, 4, 5): 1, (0, 4, 6): 1, (0, 4, 7): 4, (0, 4, 8): 2, (0, 4, 9): 4, (0, 5, 0): 0, (0, 5, 1): 1, (0, 5, 2): 1, (0, 5, 3): 1, (0, 5, 4): 1, (0, 5, 5): 1, (0, 5, 6): 1, (0, 5, 7): 1, (0, 5, 8): 1, (0, 5, 9): 1, (0, 6, 0): 0, (0, 6, 1): 4, (0, 6, 2): 2, (0, 6, 3): 4, (0, 6, 4): 1, (0, 6, 5): 1, (0, 6, 6): 4, (0, 6, 7): 2, (0, 6, 8): 2, (0, 6, 9): 3, (0, 7, 0): 0, (0, 7, 1): 3, (0, 7, 2): 4, (0, 7, 3): 1, (0, 7, 4): 4, (0, 7, 5): 1, (0, 7, 6): 2, (0, 7, 7): 9, (0, 7, 8): 3, (0, 7, 9): 3, (0, 8, 0): 0, (0, 8, 1): 2, (0, 8, 2): 1, (0, 8, 3): 4, (0, 8, 4): 2, (0, 8, 5): 1, (0, 8, 6): 2, (0, 8, 7): 3, (0, 8, 8): 4, (0, 8, 9): 4, (0, 9, 0): 0, (0, 9, 1): 1, (0, 9, 2): 2, (0, 9, 3): 3, (0, 9, 4): 4, (0, 9, 5): 1, (0, 9, 6): 3, (0, 9, 7): 3, (0, 9, 8): 4, (0, 9, 9): 9, (1, 0, 0): -2, (1, 0, 1): 0, (1, 0, 2): -2, (1, 0, 3): 6, (1, 0, 4): -2, (1, 0, 5): -2, (1, 0, 6): -2, (1, 0, 7): 2, (1, 0, 8): -2, (1, 0, 9): 8, (1, 1, 0): 0, (1, 1, 1): 0, (1, 1, 2): 0, (1, 1, 3): 0, (1, 1, 4): 0, (1, 1, 5): 0, (1, 1, 6): 0, (1, 1, 7): 0, (1, 1, 8): 0, (1, 1, 9): 0, (1, 2, 0): -2, (1, 2, 1): 0, (1, 2, 2): -2, (1, 2, 3): 3, (1, 2, 4): -2, (1, 2, 5): 3, (1, 2, 6): -2, (1, 2, 7): 2, (1, 2, 8): -2, (1, 2, 9): 1, (1, 3, 0): 6, (1, 3, 1): 0, (1, 3, 2): 3, (1, 3, 3): 6, (1, 3, 4): 2, (1, 3, 5): 2, (1, 3, 6): 3, (1, 3, 7): 2, (1, 3, 8): 1, (1, 3, 9): 2, (1, 4, 0): -2, (1, 4, 1): 0, (1, 4, 2): -2, (1, 4, 3): 2, (1, 4, 4): -2, (1, 4, 5): 4, (1, 4, 6): -2, (1, 4, 7): 1, (1, 4, 8): -2, (1, 4, 9): 3, (1, 5, 0): -2, (1, 5, 1): 0, (1, 5, 2): 3, (1, 5, 3): 2, (1, 5, 4): 4, (1, 5, 5): -2, (1, 5, 6): 1, (1, 5, 7): 2, (1, 5, 8): 2, (1, 5, 9): 4, (1, 6, 0): -2, (1, 6, 1): 0, (1, 6, 2): -2, (1, 6, 3): 3, (1, 6, 4): -2, (1, 6, 5): 1, (1, 6, 6): -2, (1, 6, 7): 2, (1, 6, 8): -2, (1, 6, 9): 2, (1, 7, 0): 2, (1, 7, 1): 0, (1, 7, 2): 2, (1, 7, 3): 2, (1, 7, 4): 1, (1, 7, 5): 2, (1, 7, 6): 2, (1, 7, 7): 2, (1, 7, 8): 2, (1, 7, 9): 2, (1, 8, 0): -2, (1, 8, 1): 0, (1, 8, 2): -2, (1, 8, 3): 1, (1, 8, 4): -2, (1, 8, 5): 2, (1, 8, 6): -2, (1, 8, 7): 2, (1, 8, 8): -2, (1, 8, 9): 4, (1, 9, 0): 8, (1, 9, 1): 0, (1, 9, 2): 1, (1, 9, 3): 2, (1, 9, 4): 3, (1, 9, 5): 4, (1, 9, 6): 2, (1, 9, 7): 2, (1, 9, 8): 4, (1, 9, 9): 8, (2, 0, 0): -2, (2, 0, 1): 1, (2, 0, 2): 0, (2, 0, 3): 3, (2, 0, 4): 2, (2, 0, 5): -2, (2, 0, 6): 1, (2, 0, 7): 5, (2, 0, 8): 3, (2, 0, 9): 7, (2, 1, 0): 1, (2, 1, 1): 1, (2, 1, 2): 0, (2, 1, 3): 1, (2, 1, 4): 1, (2, 1, 5): 1, (2, 1, 6): 1, (2, 1, 7): 1, (2, 1, 8): 1, (2, 1, 9): 1, (2, 2, 0): 0, (2, 2, 1): 0, (2, 2, 2): 0, (2, 2, 3): 0, (2, 2, 4): 0, (2, 2, 5): 0, (2, 2, 6): 0, (2, 2, 7): 0, (2, 2, 8): 0, (2, 2, 9): 0, (2, 3, 0): 3, (2, 3, 1): 1, (2, 3, 2): 0, (2, 3, 3): 3, (2, 3, 4): 2, (2, 3, 5): 3, (2, 3, 6): 1, (2, 3, 7): 3, (2, 3, 8): 3, (2, 3, 9): 1, (2, 4, 0): 2, (2, 4, 1): 1, (2, 4, 2): 0, (2, 4, 3): 2, (2, 4, 4): 2, (2, 4, 5): 2, (2, 4, 6): 1, (2, 4, 7): 2, (2, 4, 8): 1, (2, 4, 9): 2, (2, 5, 0): -2, (2, 5, 1): 1, (2, 5, 2): 0, (2, 5, 3): 3, (2, 5, 4): 2, (2, 5, 5): -2, (2, 5, 6): 1, (2, 5, 7): 1, (2, 5, 8): 3, (2, 5, 9): 3, (2, 6, 0): 1, (2, 6, 1): 1, (2, 6, 2): 0, (2, 6, 3): 1, (2, 6, 4): 1, (2, 6, 5): 1, (2, 6, 6): 1, (2, 6, 7): 1, (2, 6, 8): 1, (2, 6, 9): 1, (2, 7, 0): 5, (2, 7, 1): 1, (2, 7, 2): 0, (2, 7, 3): 3, (2, 7, 4): 2, (2, 7, 5): 1, (2, 7, 6): 1, (2, 7, 7): 5, (2, 7, 8): 2, (2, 7, 9): 3, (2, 8, 0): 3, (2, 8, 1): 1, (2, 8, 2): 0, (2, 8, 3): 3, (2, 8, 4): 1, (2, 8, 5): 3, (2, 8, 6): 1, (2, 8, 7): 2, (2, 8, 8): 3, (2, 8, 9): 3, (2, 9, 0): 7, (2, 9, 1): 1, (2, 9, 2): 0, (2, 9, 3): 1, (2, 9, 4): 2, (2, 9, 5): 3, (2, 9, 6): 1, (2, 9, 7): 3, (2, 9, 8): 3, (2, 9, 9): 7, (3, 0, 0): -2, (3, 0, 1): 2, (3, 0, 2): -2, (3, 0, 3): 0, (3, 0, 4): -2, (3, 0, 5): -2, (3, 0, 6): -2, (3, 0, 7): 8, (3, 0, 8): -2, (3, 0, 9): 6, (3, 1, 0): 2, (3, 1, 1): 2, (3, 1, 2): 1, (3, 1, 3): 0, (3, 1, 4): 2, (3, 1, 5): 2, (3, 1, 6): 2, (3, 1, 7): 2, (3, 1, 8): 2, (3, 1, 9): 2, (3, 2, 0): -2, (3, 2, 1): 1, (3, 2, 2): -2, (3, 2, 3): 0, (3, 2, 4): -2, (3, 2, 5): 4, (3, 2, 6): -2, (3, 2, 7): 3, (3, 2, 8): -2, (3, 2, 9): 2, (3, 3, 0): 0, (3, 3, 1): 0, (3, 3, 2): 0, (3, 3, 3): 0, (3, 3, 4): 0, (3, 3, 5): 0, (3, 3, 6): 0, (3, 3, 7): 0, (3, 3, 8): 0, (3, 3, 9): 0, (3, 4, 0): -2, (3, 4, 1): 2, (3, 4, 2): -2, (3, 4, 3): 0, (3, 4, 4): -2, (3, 4, 5): 2, (3, 4, 6): -2, (3, 4, 7): 4, (3, 4, 8): -2, (3, 4, 9): 1, (3, 5, 0): -2, (3, 5, 1): 2, (3, 5, 2): 4, (3, 5, 3): 0, (3, 5, 4): 2, (3, 5, 5): -2, (3, 5, 6): 3, (3, 5, 7): 4, (3, 5, 8): 1, (3, 5, 9): 2, (3, 6, 0): -2, (3, 6, 1): 2, (3, 6, 2): -2, (3, 6, 3): 0, (3, 6, 4): -2, (3, 6, 5): 3, (3, 6, 6): -2, (3, 6, 7): 1, (3, 6, 8): -2, (3, 6, 9): 3, (3, 7, 0): 8, (3, 7, 1): 2, (3, 7, 2): 3, (3, 7, 3): 0, (3, 7, 4): 4, (3, 7, 5): 4, (3, 7, 6): 1, (3, 7, 7): 8, (3, 7, 8): 2, (3, 7, 9): 2, (3, 8, 0): -2, (3, 8, 1): 2, (3, 8, 2): -2, (3, 8, 3): 0, (3, 8, 4): -2, (3, 8, 5): 1, (3, 8, 6): -2, (3, 8, 7): 2, (3, 8, 8): -2, (3, 8, 9): 3, (3, 9, 0): 6, (3, 9, 1): 2, (3, 9, 2): 2, (3, 9, 3): 0, (3, 9, 4): 1, (3, 9, 5): 2, (3, 9, 6): 3, (3, 9, 7): 2, (3, 9, 8): 3, (3, 9, 9): 6, (4, 0, 0): -2, (4, 0, 1): 3, (4, 0, 2): 1, (4, 0, 3): 7, (4, 0, 4): 0, (4, 0, 5): -2, (4, 0, 6): 3, (4, 0, 7): 1, (4, 0, 8): 2, (4, 0, 9): 5, (4, 1, 0): 3, (4, 1, 1): 3, (4, 1, 2): 1, (4, 1, 3): 1, (4, 1, 4): 0, (4, 1, 5): 3, (4, 1, 6): 3, (4, 1, 7): 1, (4, 1, 8): 2, (4, 1, 9): 3, (4, 2, 0): 1, (4, 2, 1): 1, (4, 2, 2): 1, (4, 2, 3): 1, (4, 2, 4): 0, (4, 2, 5): 1, (4, 2, 6): 1, (4, 2, 7): 1, (4, 2, 8): 1, (4, 2, 9): 1, (4, 3, 0): 7, (4, 3, 1): 1, (4, 3, 2): 1, (4, 3, 3): 7, (4, 3, 4): 0, (4, 3, 5): 3, (4, 3, 6): 3, (4, 3, 7): 1, (4, 3, 8): 2, (4, 3, 9): 3, (4, 4, 0): 0, (4, 4, 1): 0, (4, 4, 2): 0, (4, 4, 3): 0, (4, 4, 4): 0, (4, 4, 5): 0, (4, 4, 6): 0, (4, 4, 7): 0, (4, 4, 8): 0, (4, 4, 9): 0, (4, 5, 0): -2, (4, 5, 1): 3, (4, 5, 2): 1, (4, 5, 3): 3, (4, 5, 4): 0, (4, 5, 5): -2, (4, 5, 6): 3, (4, 5, 7): 1, (4, 5, 8): 2, (4, 5, 9): 1, (4, 6, 0): 3, (4, 6, 1): 3, (4, 6, 2): 1, (4, 6, 3): 3, (4, 6, 4): 0, (4, 6, 5): 3, (4, 6, 6): 3, (4, 6, 7): 1, (4, 6, 8): 1, (4, 6, 9): 2, (4, 7, 0): 1, (4, 7, 1): 1, (4, 7, 2): 1, (4, 7, 3): 1, (4, 7, 4): 0, (4, 7, 5): 1, (4, 7, 6): 1, (4, 7, 7): 1, (4, 7, 8): 1, (4, 7, 9): 1, (4, 8, 0): 2, (4, 8, 1): 2, (4, 8, 2): 1, (4, 8, 3): 2, (4, 8, 4): 0, (4, 8, 5): 2, (4, 8, 6): 1, (4, 8, 7): 1, (4, 8, 8): 2, (4, 8, 9): 2, (4, 9, 0): 5, (4, 9, 1): 3, (4, 9, 2): 1, (4, 9, 3): 3, (4, 9, 4): 0, (4, 9, 5): 1, (4, 9, 6): 2, (4, 9, 7): 1, (4, 9, 8): 2, (4, 9, 9): 5, (5, 0, 0): -2, (5, 0, 1): 4, (5, 0, 2): -2, (5, 0, 3): 4, (5, 0, 4): -2, (5, 0, 5): 0, (5, 0, 6): -2, (5, 0, 7): 4, (5, 0, 8): -2, (5, 0, 9): 4, (5, 1, 0): 4, (5, 1, 1): 4, (5, 1, 2): 2, (5, 1, 3): 2, (5, 1, 4): 1, (5, 1, 5): 0, (5, 1, 6): 4, (5, 1, 7): 2, (5, 1, 8): 3, (5, 1, 9): 4, (5, 2, 0): -2, (5, 2, 1): 2, (5, 2, 2): -2, (5, 2, 3): 1, (5, 2, 4): -2, (5, 2, 5): 0, (5, 2, 6): -2, (5, 2, 7): 4, (5, 2, 8): -2, (5, 2, 9): 3, (5, 3, 0): 4, (5, 3, 1): 2, (5, 3, 2): 1, (5, 3, 3): 4, (5, 3, 4): 3, (5, 3, 5): 0, (5, 3, 6): 2, (5, 3, 7): 4, (5, 3, 8): 4, (5, 3, 9): 2, (5, 4, 0): -2, (5, 4, 1): 1, (5, 4, 2): -2, (5, 4, 3): 3, (5, 4, 4): -2, (5, 4, 5): 0, (5, 4, 6): -2, (5, 4, 7): 2, (5, 4, 8): -2, (5, 4, 9): 4, (5, 5, 0): 0, (5, 5, 1): 0, (5, 5, 2): 0, (5, 5, 3): 0, (5, 5, 4): 0, (5, 5, 5): 0, (5, 5, 6): 0, (5, 5, 7): 0, (5, 5, 8): 0, (5, 5, 9): 0, (5, 6, 0): -2, (5, 6, 1): 4, (5, 6, 2): -2, (5, 6, 3): 2, (5, 6, 4): -2, (5, 6, 5): 0, (5, 6, 6): -2, (5, 6, 7): 3, (5, 6, 8): -2, (5, 6, 9): 1, (5, 7, 0): 4, (5, 7, 1): 2, (5, 7, 2): 4, (5, 7, 3): 4, (5, 7, 4): 2, (5, 7, 5): 0, (5, 7, 6): 3, (5, 7, 7): 4, (5, 7, 8): 1, (5, 7, 9): 2, (5, 8, 0): -2, (5, 8, 1): 3, (5, 8, 2): -2, (5, 8, 3): 4, (5, 8, 4): -2, (5, 8, 5): 0, (5, 8, 6): -2, (5, 8, 7): 1, (5, 8, 8): -2, (5, 8, 9): 2, (5, 9, 0): 4, (5, 9, 1): 4, (5, 9, 2): 3, (5, 9, 3): 2, (5, 9, 4): 4, (5, 9, 5): 0, (5, 9, 6): 1, (5, 9, 7): 2, (5, 9, 8): 2, (5, 9, 9): 4, (6, 0, 0): -2, (6, 0, 1): 5, (6, 0, 2): 2, (6, 0, 3): 1, (6, 0, 4): 3, (6, 0, 5): -2, (6, 0, 6): 0, (6, 0, 7): 7, (6, 0, 8): 1, (6, 0, 9): 3, (6, 1, 0): 5, (6, 1, 1): 5, (6, 1, 2): 2, (6, 1, 3): 1, (6, 1, 4): 2, (6, 1, 5): 1, (6, 1, 6): 0, (6, 1, 7): 3, (6, 1, 8): 1, (6, 1, 9): 3, (6, 2, 0): 2, (6, 2, 1): 2, (6, 2, 2): 2, (6, 2, 3): 1, (6, 2, 4): 1, (6, 2, 5): 2, (6, 2, 6): 0, (6, 2, 7): 2, (6, 2, 8): 1, (6, 2, 9): 2, (6, 3, 0): 1, (6, 3, 1): 1, (6, 3, 2): 1, (6, 3, 3): 1, (6, 3, 4): 1, (6, 3, 5): 1, (6, 3, 6): 0, (6, 3, 7): 1, (6, 3, 8): 1, (6, 3, 9): 1, (6, 4, 0): 3, (6, 4, 1): 2, (6, 4, 2): 1, (6, 4, 3): 1, (6, 4, 4): 3, (6, 4, 5): 3, (6, 4, 6): 0, (6, 4, 7): 3, (6, 4, 8): 1, (6, 4, 9): 3, (6, 5, 0): -2, (6, 5, 1): 1, (6, 5, 2): 2, (6, 5, 3): 1, (6, 5, 4): 3, (6, 5, 5): -2, (6, 5, 6): 0, (6, 5, 7): 3, (6, 5, 8): 1, (6, 5, 9): 3, (6, 6, 0): 0, (6, 6, 1): 0, (6, 6, 2): 0, (6, 6, 3): 0, (6, 6, 4): 0, (6, 6, 5): 0, (6, 6, 6): 0, (6, 6, 7): 0, (6, 6, 8): 0, (6, 6, 9): 0, (6, 7, 0): 7, (6, 7, 1): 3, (6, 7, 2): 2, (6, 7, 3): 1, (6, 7, 4): 3, (6, 7, 5): 3, (6, 7, 6): 0, (6, 7, 7): 7, (6, 7, 8): 1, (6, 7, 9): 1, (6, 8, 0): 1, (6, 8, 1): 1, (6, 8, 2): 1, (6, 8, 3): 1, (6, 8, 4): 1, (6, 8, 5): 1, (6, 8, 6): 0, (6, 8, 7): 1, (6, 8, 8): 1, (6, 8, 9): 1, (6, 9, 0): 3, (6, 9, 1): 3, (6, 9, 2): 2, (6, 9, 3): 1, (6, 9, 4): 3, (6, 9, 5): 3, (6, 9, 6): 0, (6, 9, 7): 1, (6, 9, 8): 1, (6, 9, 9): 3, (7, 0, 0): -2, (7, 0, 1): 6, (7, 0, 2): -2, (7, 0, 3): 8, (7, 0, 4): -2, (7, 0, 5): -2, (7, 0, 6): -2, (7, 0, 7): 0, (7, 0, 8): -2, (7, 0, 9): 2, (7, 1, 0): 6, (7, 1, 1): 6, (7, 1, 2): 3, (7, 1, 3): 2, (7, 1, 4): 3, (7, 1, 5): 2, (7, 1, 6): 1, (7, 1, 7): 0, (7, 1, 8): 2, (7, 1, 9): 2, (7, 2, 0): -2, (7, 2, 1): 3, (7, 2, 2): -2, (7, 2, 3): 2, (7, 2, 4): -2, (7, 2, 5): 1, (7, 2, 6): -2, (7, 2, 7): 0, (7, 2, 8): -2, (7, 2, 9): 2, (7, 3, 0): 8, (7, 3, 1): 2, (7, 3, 2): 2, (7, 3, 3): 8, (7, 3, 4): 1, (7, 3, 5): 4, (7, 3, 6): 4, (7, 3, 7): 0, (7, 3, 8): 3, (7, 3, 9): 2, (7, 4, 0): -2, (7, 4, 1): 3, (7, 4, 2): -2, (7, 4, 3): 1, (7, 4, 4): -2, (7, 4, 5): 3, (7, 4, 6): -2, (7, 4, 7): 0, (7, 4, 8): -2, (7, 4, 9): 2, (7, 5, 0): -2, (7, 5, 1): 2, (7, 5, 2): 1, (7, 5, 3): 4, (7, 5, 4): 3, (7, 5, 5): -2, (7, 5, 6): 2, (7, 5, 7): 0, (7, 5, 8): 4, (7, 5, 9): 2, (7, 6, 0): -2, (7, 6, 1): 1, (7, 6, 2): -2, (7, 6, 3): 4, (7, 6, 4): -2, (7, 6, 5): 2, (7, 6, 6): -2, (7, 6, 7): 0, (7, 6, 8): -2, (7, 6, 9): 2, (7, 7, 0): 0, (7, 7, 1): 0, (7, 7, 2): 0, (7, 7, 3): 0, (7, 7, 4): 0, (7, 7, 5): 0, (7, 7, 6): 0, (7, 7, 7): 0, (7, 7, 8): 0, (7, 7, 9): 0, (7, 8, 0): -2, (7, 8, 1): 2, (7, 8, 2): -2, (7, 8, 3): 3, (7, 8, 4): -2, (7, 8, 5): 4, (7, 8, 6): -2, (7, 8, 7): 0, (7, 8, 8): -2, (7, 8, 9): 1, (7, 9, 0): 2, (7, 9, 1): 2, (7, 9, 2): 2, (7, 9, 3): 2, (7, 9, 4): 2, (7, 9, 5): 2, (7, 9, 6): 2, (7, 9, 7): 0, (7, 9, 8): 1, (7, 9, 9): 2, (8, 0, 0): -2, (8, 0, 1): 7, (8, 0, 2): 3, (8, 0, 3): 5, (8, 0, 4): 1, (8, 0, 5): -2, (8, 0, 6): 2, (8, 0, 7): 3, (8, 0, 8): 0, (8, 0, 9): 1, (8, 1, 0): 7, (8, 1, 1): 7, (8, 1, 2): 3, (8, 1, 3): 3, (8, 1, 4): 1, (8, 1, 5): 3, (8, 1, 6): 2, (8, 1, 7): 1, (8, 1, 8): 0, (8, 1, 9): 1, (8, 2, 0): 3, (8, 2, 1): 3, (8, 2, 2): 3, (8, 2, 3): 2, (8, 2, 4): 1, (8, 2, 5): 3, (8, 2, 6): 1, (8, 2, 7): 3, (8, 2, 8): 0, (8, 2, 9): 1, (8, 3, 0): 5, (8, 3, 1): 3, (8, 3, 2): 2, (8, 3, 3): 5, (8, 3, 4): 1, (8, 3, 5): 1, (8, 3, 6): 2, (8, 3, 7): 3, (8, 3, 8): 0, (8, 3, 9): 1, (8, 4, 0): 1, (8, 4, 1): 1, (8, 4, 2): 1, (8, 4, 3): 1, (8, 4, 4): 1, (8, 4, 5): 1, (8, 4, 6): 1, (8, 4, 7): 1, (8, 4, 8): 0, (8, 4, 9): 1, (8, 5, 0): -2, (8, 5, 1): 3, (8, 5, 2): 3, (8, 5, 3): 1, (8, 5, 4): 1, (8, 5, 5): -2, (8, 5, 6): 2, (8, 5, 7): 3, (8, 5, 8): 0, (8, 5, 9): 1, (8, 6, 0): 2, (8, 6, 1): 2, (8, 6, 2): 1, (8, 6, 3): 2, (8, 6, 4): 1, (8, 6, 5): 2, (8, 6, 6): 2, (8, 6, 7): 2, (8, 6, 8): 0, (8, 6, 9): 1, (8, 7, 0): 3, (8, 7, 1): 1, (8, 7, 2): 3, (8, 7, 3): 3, (8, 7, 4): 1, (8, 7, 5): 3, (8, 7, 6): 2, (8, 7, 7): 3, (8, 7, 8): 0, (8, 7, 9): 1, (8, 8, 0): 0, (8, 8, 1): 0, (8, 8, 2): 0, (8, 8, 3): 0, (8, 8, 4): 0, (8, 8, 5): 0, (8, 8, 6): 0, (8, 8, 7): 0, (8, 8, 8): 0, (8, 8, 9): 0, (8, 9, 0): 1, (8, 9, 1): 1, (8, 9, 2): 1, (8, 9, 3): 1, (8, 9, 4): 1, (8, 9, 5): 1, (8, 9, 6): 1, (8, 9, 7): 1, (8, 9, 8): 0, (8, 9, 9): 1, (9, 0, 0): -2, (9, 0, 1): 8, (9, 0, 2): -2, (9, 0, 3): 2, (9, 0, 4): -2, (9, 0, 5): -2, (9, 0, 6): -2, (9, 0, 7): 6, (9, 0, 8): -2, (9, 0, 9): 0, (9, 1, 0): 8, (9, 1, 1): 8, (9, 1, 2): 4, (9, 1, 3): 2, (9, 1, 4): 2, (9, 1, 5): 4, (9, 1, 6): 3, (9, 1, 7): 2, (9, 1, 8): 1, (9, 1, 9): 0, (9, 2, 0): -2, (9, 2, 1): 4, (9, 2, 2): -2, (9, 2, 3): 2, (9, 2, 4): -2, (9, 2, 5): 2, (9, 2, 6): -2, (9, 2, 7): 1, (9, 2, 8): -2, (9, 2, 9): 0, (9, 3, 0): 2, (9, 3, 1): 2, (9, 3, 2): 2, (9, 3, 3): 2, (9, 3, 4): 2, (9, 3, 5): 2, (9, 3, 6): 1, (9, 3, 7): 2, (9, 3, 8): 2, (9, 3, 9): 0, (9, 4, 0): -2, (9, 4, 1): 2, (9, 4, 2): -2, (9, 4, 3): 2, (9, 4, 4): -2, (9, 4, 5): 1, (9, 4, 6): -2, (9, 4, 7): 3, (9, 4, 8): -2, (9, 4, 9): 0, (9, 5, 0): -2, (9, 5, 1): 4, (9, 5, 2): 2, (9, 5, 3): 2, (9, 5, 4): 1, (9, 5, 5): -2, (9, 5, 6): 4, (9, 5, 7): 2, (9, 5, 8): 3, (9, 5, 9): 0, (9, 6, 0): -2, (9, 6, 1): 3, (9, 6, 2): -2, (9, 6, 3): 1, (9, 6, 4): -2, (9, 6, 5): 4, (9, 6, 6): -2, (9, 6, 7): 2, (9, 6, 8): -2, (9, 6, 9): 0, (9, 7, 0): 6, (9, 7, 1): 2, (9, 7, 2): 1, (9, 7, 3): 2, (9, 7, 4): 3, (9, 7, 5): 2, (9, 7, 6): 2, (9, 7, 7): 6, (9, 7, 8): 3, (9, 7, 9): 0, (9, 8, 0): -2, (9, 8, 1): 1, (9, 8, 2): -2, (9, 8, 3): 2, (9, 8, 4): -2, (9, 8, 5): 3, (9, 8, 6): -2, (9, 8, 7): 3, (9, 8, 8): -2, (9, 8, 9): 0, (9, 9, 0): 0, (9, 9, 1): 0, (9, 9, 2): 0, (9, 9, 3): 0, (9, 9, 4): 0, (9, 9, 5): 0, (9, 9, 6): 0, (9, 9, 7): 0, (9, 9, 8): 0, (9, 9, 9): 0}\n\ns = [int(x) for x in input()]\nif s[0] != 0:\n    for _ in range(10):\n        print('-1 ' * 10)\n    return\n\na = []\n\nfor i in range(1, len(s)):\n    a.append((s[i] - s[i - 1]) % 10)\n\n\ncounts = [0] * 10\nfor x in a:\n    counts[x] += 1\n\n\nfor i in range(10):\n    for j in range(10):\n        skip = False\n        count = 0\n        for x in range(10):\n            if counts[x]:\n                tr = d[(x, i, j)]\n                if tr == -2:\n                    print(-1, end=' ')\n                    skip = True\n                    break\n                else:\n                    count += tr * counts[x]\n        if skip:\n            continue\n        print(count, end=' ')\n    print()\n", "import sys\ninput = sys.stdin.readline\n\n# def f(i, j, diff):\n# \tif i == 0 and j == 0:\n# \t\tif diff == 0:\n# \t\t\treturn 1\n# \t\telse:\n# \t\t\treturn -1\n# \tans = 103\n# \tfor x in range(11):\n# \t\tfor y in range(11):\n# \t\t\tif x == y == 0:\n# \t\t\t\tcontinue\n# \t\t\tfoo = i * x + j * y\n# \t\t\tif foo % 10 == diff:\n# \t\t\t\tans = min(ans, x + y)\n\n# \tif ans == 103:\n# \t\treturn -1\n# \telse:\n# \t\treturn ans\n\ns = list(map(int, input().strip()))\na = len(s)\n#h = [[[0 for _ in range(10)] for _ in range(10)] for _ in range(10)]\nans = [[0,0,0,0,0,0,0,0,0,0] for _ in range(10)]\n# for i in range(10):\n# \tfor j in range(10):\n# \t\tfor diff in range(10):\n# \t\t\th[i][j][diff] = f(i,j,diff)\n# print(h)\n\nh = [[[1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, -1, 1, -1, 2, -1, 3, -1, 4, -1], [1, 7, 4, 1, 8, 5, 2, 9, 6, 3], [1, -1, 3, -1, 1, -1, 4, -1, 2, -1], [1, -1, -1, -1, -1, 1, -1, -1, -1, -1], [1, -1, 2, -1, 4, -1, 1, -1, 3, -1], [1, 3, 6, 9, 2, 5, 8, 1, 4, 7], [1, -1, 4, -1, 3, -1, 2, -1, 1, -1], [1, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 1, 1, 2, 2, 3, 3, 4, 4, 5], [4, 1, 2, 1, 2, 3, 2, 3, 4, 3], [4, 1, 2, 3, 1, 2, 3, 4, 2, 3], [2, 1, 2, 3, 4, 1, 2, 3, 4, 5], [5, 1, 2, 3, 4, 5, 1, 2, 3, 4], [4, 1, 2, 3, 2, 3, 4, 1, 2, 3], [3, 1, 2, 3, 3, 4, 2, 3, 1, 2], [2, 1, 2, 3, 4, 5, 4, 3, 2, 1]], [[1, -1, 1, -1, 2, -1, 3, -1, 4, -1], [5, 1, 1, 2, 2, 3, 3, 4, 4, 5], [5, -1, 1, -1, 2, -1, 3, -1, 4, -1], [4, 4, 1, 1, 2, 2, 2, 3, 3, 3], [3, -1, 1, -1, 1, -1, 2, -1, 2, -1], [2, 4, 1, 5, 2, 1, 3, 2, 4, 3], [3, -1, 1, -1, 2, -1, 1, -1, 2, -1], [5, 3, 1, 4, 2, 5, 3, 1, 4, 2], [2, -1, 1, -1, 2, -1, 2, -1, 1, -1], [3, 2, 1, 3, 2, 4, 3, 3, 2, 1]], [[1, 7, 4, 1, 8, 5, 2, 9, 6, 3], [4, 1, 2, 1, 2, 3, 2, 3, 4, 3], [4, 4, 1, 1, 2, 2, 2, 3, 3, 3], [10, 7, 4, 1, 8, 5, 2, 9, 6, 3], [3, 3, 3, 1, 1, 4, 2, 2, 2, 3], [2, 3, 4, 1, 4, 1, 2, 5, 2, 3], [5, 4, 2, 1, 4, 3, 1, 5, 3, 2], [2, 3, 4, 1, 2, 5, 2, 1, 4, 3], [5, 2, 4, 1, 3, 5, 2, 4, 1, 3], [4, 3, 2, 1, 4, 3, 2, 3, 2, 1]], [[1, -1, 3, -1, 1, -1, 4, -1, 2, -1], [4, 1, 2, 3, 1, 2, 3, 4, 2, 3], [3, -1, 1, -1, 1, -1, 2, -1, 2, -1], [3, 3, 3, 1, 1, 4, 2, 2, 2, 3], [5, -1, 3, -1, 1, -1, 4, -1, 2, -1], [2, 5, 3, 3, 1, 1, 4, 4, 2, 2], [2, -1, 2, -1, 1, -1, 1, -1, 2, -1], [5, 2, 3, 5, 1, 3, 4, 1, 2, 4], [3, -1, 2, -1, 1, -1, 2, -1, 1, -1], [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]], [[1, -1, -1, -1, -1, 1, -1, -1, -1, -1], [2, 1, 2, 3, 4, 1, 2, 3, 4, 5], [2, 4, 1, 5, 2, 1, 3, 2, 4, 3], [2, 3, 4, 1, 4, 1, 2, 5, 2, 3], [2, 5, 3, 3, 1, 1, 4, 4, 2, 2], [2, -1, -1, -1, -1, 1, -1, -1, -1, -1], [2, 2, 2, 4, 4, 1, 1, 3, 3, 5], [2, 3, 2, 5, 2, 1, 4, 1, 4, 3], [2, 3, 4, 2, 3, 1, 2, 5, 1, 4], [2, 5, 4, 3, 2, 1, 4, 3, 2, 1]], [[1, -1, 2, -1, 4, -1, 1, -1, 3, -1], [5, 1, 2, 3, 4, 5, 1, 2, 3, 4], [3, -1, 1, -1, 2, -1, 1, -1, 2, -1], [5, 4, 2, 1, 4, 3, 1, 5, 3, 2], [2, -1, 2, -1, 1, -1, 1, -1, 2, -1], [2, 2, 2, 4, 4, 1, 1, 3, 3, 5], [5, -1, 2, -1, 4, -1, 1, -1, 3, -1], [3, 3, 2, 2, 2, 4, 1, 1, 3, 3], [3, -1, 2, -1, 2, -1, 1, -1, 1, -1], [4, 3, 2, 4, 3, 2, 1, 3, 2, 1]], [[1, 3, 6, 9, 2, 5, 8, 1, 4, 7], [4, 1, 2, 3, 2, 3, 4, 1, 2, 3], [5, 3, 1, 4, 2, 5, 3, 1, 4, 2], [2, 3, 4, 1, 2, 5, 2, 1, 4, 3], [5, 2, 3, 5, 1, 3, 4, 1, 2, 4], [2, 3, 2, 5, 2, 1, 4, 1, 4, 3], [3, 3, 2, 2, 2, 4, 1, 1, 3, 3], [10, 3, 6, 9, 2, 5, 8, 1, 4, 7], [4, 3, 3, 3, 2, 2, 2, 1, 1, 4], [4, 3, 4, 3, 2, 3, 2, 1, 2, 1]], [[1, -1, 4, -1, 3, -1, 2, -1, 1, -1], [3, 1, 2, 3, 3, 4, 2, 3, 1, 2], [2, -1, 1, -1, 2, -1, 2, -1, 1, -1], [5, 2, 4, 1, 3, 5, 2, 4, 1, 3], [3, -1, 2, -1, 1, -1, 2, -1, 1, -1], [2, 3, 4, 2, 3, 1, 2, 5, 1, 4], [3, -1, 2, -1, 2, -1, 1, -1, 1, -1], [4, 3, 3, 3, 2, 2, 2, 1, 1, 4], [5, -1, 4, -1, 3, -1, 2, -1, 1, -1], [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]], [[1, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 1, 2, 3, 4, 5, 4, 3, 2, 1], [3, 2, 1, 3, 2, 4, 3, 3, 2, 1], [4, 3, 2, 1, 4, 3, 2, 3, 2, 1], [5, 4, 3, 2, 1, 5, 4, 3, 2, 1], [2, 5, 4, 3, 2, 1, 4, 3, 2, 1], [4, 3, 2, 4, 3, 2, 1, 3, 2, 1], [4, 3, 4, 3, 2, 3, 2, 1, 2, 1], [5, 5, 4, 4, 3, 3, 2, 2, 1, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]\n\n\nfor i in range(10):\n\tfor j in range(i, 10):\n\t\tcnt = 0\n\t\tflag = True\n\t\tl = [0,0,0,0,0,0,0,0,0,0]\n\t\tfor m in range(a - 1):\n\t\t\tdiff = s[m + 1] - s[m]\n\t\t\tif diff < 0:\n\t\t\t\tdiff += 10\n\t\t\tl[diff] += 1\n\t\tfor p in range(10):\n\t\t\tif l[p] != 0:\n\t\t\t\ttemp = h[i][j][p]\n\t\t\t\tif temp == -1:\n\t\t\t\t\tflag = False\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcnt += (temp - 1) * l[p]\n\t\tif flag:\n\t\t\tans[i][j] = ans[j][i] = cnt\n\t\telse:\n\t\t\tans[i][j] = ans[j][i] = -1\t\t\n\nfor x in ans:\n\tprint(*x)", "#E70_B\n\nst = list(input())\n\ncounts = []\n\nfor i in range(0, 10):\n    counts.append(0)\n\nfor i in range(1, len(st)):\n    counts[(int(st[i]) - int(st[i - 1]) + 10) % 10] += 1\n\nfor x in range(0, 10):\n    st = \"\"\n    for y in range(0, 10):\n        s = 0\n        f = False\n        for i in range(0, 10):\n            if counts[i] == 0:\n                continue\n            j = 0\n            c = 100000000000\n            ff = False\n            f = False\n            while j < 10:\n                k = 0\n                while k < 10:\n                    if j == 0 and k == 0:\n                        k += 1\n                        continue\n                    if ((x * j) + (y * k)) % 10 == i:\n                        c = min(c, j + k)\n                        ff = True\n                    k += 1\n                j += 1\n\n            if ff:\n                s += counts[i] * (max(1, c) - 1)\n                f = True\n            if not f:\n                s = -1\n                break\n        st += str(s)\n        if y != 9:\n            st += \" \"\n    print(st)\n", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom itertools import accumulate\n\n#T = int(input())\ns = input()\n#N,M,K,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\ndef computeGCD(x, y):\n\n   while(y):\n       x, y = y, x % y\n\n   return x\n\nrecord = {}\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            m = 9999\n            if (x==0 or y==0) and d==0:\n                record[(x,y,d)] = 0\n            elif x==0 and y==0 and d!=0:\n                record[(x,y,d)] = -1\n            else:\n                for k in range(10):\n                    d_tmp = d + 10*k\n                    if x==0:\n                        if d_tmp%y==0:\n                            record[(x,y,d)] = d_tmp//y - 1\n                            break\n\n                    elif y==0:\n                        if d_tmp%x==0:\n                            record[(x,y,d)] = d_tmp//x - 1\n                            break\n\n                    else:\n                        for a in range((d_tmp//x)+1):\n                            for b in range((d_tmp//y)+1):\n                                if x*a+y*b==d_tmp and d_tmp!=0:\n                                    m = min(m,a+b-1)\n\n                if (x,y,d) not in record:\n                    if m==9999:\n                        m = -1\n                    record[(x,y,d)] = m\n            #print(x,y,d,record[(x,y,d)])\n\ndata = [[0]*10 for _ in range(10)]\n\nlen_s = len(s)\ns = list(s)\nfreq = [0]*10\nfor i in range(len_s-1):\n    A = s[i]\n    B = s[i+1]\n\n    d = ord(B)-ord(A)\n    if d<0:\n        d += 10\n\n    freq[d] += 1\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            if freq[d]==0:\n                data[x][y] += 0\n            elif record[(x,y,d)]==-1:\n                data[x][y] = -10000000\n            else:\n                data[x][y] += freq[d]*record[(x,y,d)]\n\nfor x in range(10):\n    for y in range(10):\n        if data[x][y]<0:\n            print(-1,end=' ')\n        else:\n            print(data[x][y],end=' ')\n    print('',end='\\n')\n", "def cover(t, x, y):\n    tar = []\n    for xc in range(100):\n        for yc in range(100):\n            if xc == 0 and yc == 0:\n                continue\n            if (xc * x + yc * y) % 10 == t:\n                tar.append(xc + yc)\n    if tar:\n        return min(tar) - 1\n    else:\n        return -2\n \nd = {(0, 0, 0): 0, (0, 0, 1): 0, (0, 0, 2): 0, (0, 0, 3): 0, (0, 0, 4): 0, (0, 0, 5): 0, (0, 0, 6): 0, (0, 0, 7): 0, (0, 0, 8): 0, (0, 0, 9): 0, (0, 1, 0): 0, (0, 1, 1): 9, (0, 1, 2): 4, (0, 1, 3): 3, (0, 1, 4): 3, (0, 1, 5): 1, (0, 1, 6): 4, (0, 1, 7): 3, (0, 1, 8): 2, (0, 1, 9): 1, (0, 2, 0): 0, (0, 2, 1): 4, (0, 2, 2): 4, (0, 2, 3): 3, (0, 2, 4): 2, (0, 2, 5): 1, (0, 2, 6): 2, (0, 2, 7): 4, (0, 2, 8): 1, (0, 2, 9): 2, (0, 3, 0): 0, (0, 3, 1): 3, (0, 3, 2): 3, (0, 3, 3): 9, (0, 3, 4): 2, (0, 3, 5): 1, (0, 3, 6): 4, (0, 3, 7): 1, (0, 3, 8): 4, (0, 3, 9): 3, (0, 4, 0): 0, (0, 4, 1): 3, (0, 4, 2): 2, (0, 4, 3): 2, (0, 4, 4): 4, (0, 4, 5): 1, (0, 4, 6): 1, (0, 4, 7): 4, (0, 4, 8): 2, (0, 4, 9): 4, (0, 5, 0): 0, (0, 5, 1): 1, (0, 5, 2): 1, (0, 5, 3): 1, (0, 5, 4): 1, (0, 5, 5): 1, (0, 5, 6): 1, (0, 5, 7): 1, (0, 5, 8): 1, (0, 5, 9): 1, (0, 6, 0): 0, (0, 6, 1): 4, (0, 6, 2): 2, (0, 6, 3): 4, (0, 6, 4): 1, (0, 6, 5): 1, (0, 6, 6): 4, (0, 6, 7): 2, (0, 6, 8): 2, (0, 6, 9): 3, (0, 7, 0): 0, (0, 7, 1): 3, (0, 7, 2): 4, (0, 7, 3): 1, (0, 7, 4): 4, (0, 7, 5): 1, (0, 7, 6): 2, (0, 7, 7): 9, (0, 7, 8): 3, (0, 7, 9): 3, (0, 8, 0): 0, (0, 8, 1): 2, (0, 8, 2): 1, (0, 8, 3): 4, (0, 8, 4): 2, (0, 8, 5): 1, (0, 8, 6): 2, (0, 8, 7): 3, (0, 8, 8): 4, (0, 8, 9): 4, (0, 9, 0): 0, (0, 9, 1): 1, (0, 9, 2): 2, (0, 9, 3): 3, (0, 9, 4): 4, (0, 9, 5): 1, (0, 9, 6): 3, (0, 9, 7): 3, (0, 9, 8): 4, (0, 9, 9): 9, (1, 0, 0): -2, (1, 0, 1): 0, (1, 0, 2): -2, (1, 0, 3): 6, (1, 0, 4): -2, (1, 0, 5): -2, (1, 0, 6): -2, (1, 0, 7): 2, (1, 0, 8): -2, (1, 0, 9): 8, (1, 1, 0): 0, (1, 1, 1): 0, (1, 1, 2): 0, (1, 1, 3): 0, (1, 1, 4): 0, (1, 1, 5): 0, (1, 1, 6): 0, (1, 1, 7): 0, (1, 1, 8): 0, (1, 1, 9): 0, (1, 2, 0): -2, (1, 2, 1): 0, (1, 2, 2): -2, (1, 2, 3): 3, (1, 2, 4): -2, (1, 2, 5): 3, (1, 2, 6): -2, (1, 2, 7): 2, (1, 2, 8): -2, (1, 2, 9): 1, (1, 3, 0): 6, (1, 3, 1): 0, (1, 3, 2): 3, (1, 3, 3): 6, (1, 3, 4): 2, (1, 3, 5): 2, (1, 3, 6): 3, (1, 3, 7): 2, (1, 3, 8): 1, (1, 3, 9): 2, (1, 4, 0): -2, (1, 4, 1): 0, (1, 4, 2): -2, (1, 4, 3): 2, (1, 4, 4): -2, (1, 4, 5): 4, (1, 4, 6): -2, (1, 4, 7): 1, (1, 4, 8): -2, (1, 4, 9): 3, (1, 5, 0): -2, (1, 5, 1): 0, (1, 5, 2): 3, (1, 5, 3): 2, (1, 5, 4): 4, (1, 5, 5): -2, (1, 5, 6): 1, (1, 5, 7): 2, (1, 5, 8): 2, (1, 5, 9): 4, (1, 6, 0): -2, (1, 6, 1): 0, (1, 6, 2): -2, (1, 6, 3): 3, (1, 6, 4): -2, (1, 6, 5): 1, (1, 6, 6): -2, (1, 6, 7): 2, (1, 6, 8): -2, (1, 6, 9): 2, (1, 7, 0): 2, (1, 7, 1): 0, (1, 7, 2): 2, (1, 7, 3): 2, (1, 7, 4): 1, (1, 7, 5): 2, (1, 7, 6): 2, (1, 7, 7): 2, (1, 7, 8): 2, (1, 7, 9): 2, (1, 8, 0): -2, (1, 8, 1): 0, (1, 8, 2): -2, (1, 8, 3): 1, (1, 8, 4): -2, (1, 8, 5): 2, (1, 8, 6): -2, (1, 8, 7): 2, (1, 8, 8): -2, (1, 8, 9): 4, (1, 9, 0): 8, (1, 9, 1): 0, (1, 9, 2): 1, (1, 9, 3): 2, (1, 9, 4): 3, (1, 9, 5): 4, (1, 9, 6): 2, (1, 9, 7): 2, (1, 9, 8): 4, (1, 9, 9): 8, (2, 0, 0): -2, (2, 0, 1): 1, (2, 0, 2): 0, (2, 0, 3): 3, (2, 0, 4): 2, (2, 0, 5): -2, (2, 0, 6): 1, (2, 0, 7): 5, (2, 0, 8): 3, (2, 0, 9): 7, (2, 1, 0): 1, (2, 1, 1): 1, (2, 1, 2): 0, (2, 1, 3): 1, (2, 1, 4): 1, (2, 1, 5): 1, (2, 1, 6): 1, (2, 1, 7): 1, (2, 1, 8): 1, (2, 1, 9): 1, (2, 2, 0): 0, (2, 2, 1): 0, (2, 2, 2): 0, (2, 2, 3): 0, (2, 2, 4): 0, (2, 2, 5): 0, (2, 2, 6): 0, (2, 2, 7): 0, (2, 2, 8): 0, (2, 2, 9): 0, (2, 3, 0): 3, (2, 3, 1): 1, (2, 3, 2): 0, (2, 3, 3): 3, (2, 3, 4): 2, (2, 3, 5): 3, (2, 3, 6): 1, (2, 3, 7): 3, (2, 3, 8): 3, (2, 3, 9): 1, (2, 4, 0): 2, (2, 4, 1): 1, (2, 4, 2): 0, (2, 4, 3): 2, (2, 4, 4): 2, (2, 4, 5): 2, (2, 4, 6): 1, (2, 4, 7): 2, (2, 4, 8): 1, (2, 4, 9): 2, (2, 5, 0): -2, (2, 5, 1): 1, (2, 5, 2): 0, (2, 5, 3): 3, (2, 5, 4): 2, (2, 5, 5): -2, (2, 5, 6): 1, (2, 5, 7): 1, (2, 5, 8): 3, (2, 5, 9): 3, (2, 6, 0): 1, (2, 6, 1): 1, (2, 6, 2): 0, (2, 6, 3): 1, (2, 6, 4): 1, (2, 6, 5): 1, (2, 6, 6): 1, (2, 6, 7): 1, (2, 6, 8): 1, (2, 6, 9): 1, (2, 7, 0): 5, (2, 7, 1): 1, (2, 7, 2): 0, (2, 7, 3): 3, (2, 7, 4): 2, (2, 7, 5): 1, (2, 7, 6): 1, (2, 7, 7): 5, (2, 7, 8): 2, (2, 7, 9): 3, (2, 8, 0): 3, (2, 8, 1): 1, (2, 8, 2): 0, (2, 8, 3): 3, (2, 8, 4): 1, (2, 8, 5): 3, (2, 8, 6): 1, (2, 8, 7): 2, (2, 8, 8): 3, (2, 8, 9): 3, (2, 9, 0): 7, (2, 9, 1): 1, (2, 9, 2): 0, (2, 9, 3): 1, (2, 9, 4): 2, (2, 9, 5): 3, (2, 9, 6): 1, (2, 9, 7): 3, (2, 9, 8): 3, (2, 9, 9): 7, (3, 0, 0): -2, (3, 0, 1): 2, (3, 0, 2): -2, (3, 0, 3): 0, (3, 0, 4): -2, (3, 0, 5): -2, (3, 0, 6): -2, (3, 0, 7): 8, (3, 0, 8): -2, (3, 0, 9): 6, (3, 1, 0): 2, (3, 1, 1): 2, (3, 1, 2): 1, (3, 1, 3): 0, (3, 1, 4): 2, (3, 1, 5): 2, (3, 1, 6): 2, (3, 1, 7): 2, (3, 1, 8): 2, (3, 1, 9): 2, (3, 2, 0): -2, (3, 2, 1): 1, (3, 2, 2): -2, (3, 2, 3): 0, (3, 2, 4): -2, (3, 2, 5): 4, (3, 2, 6): -2, (3, 2, 7): 3, (3, 2, 8): -2, (3, 2, 9): 2, (3, 3, 0): 0, (3, 3, 1): 0, (3, 3, 2): 0, (3, 3, 3): 0, (3, 3, 4): 0, (3, 3, 5): 0, (3, 3, 6): 0, (3, 3, 7): 0, (3, 3, 8): 0, (3, 3, 9): 0, (3, 4, 0): -2, (3, 4, 1): 2, (3, 4, 2): -2, (3, 4, 3): 0, (3, 4, 4): -2, (3, 4, 5): 2, (3, 4, 6): -2, (3, 4, 7): 4, (3, 4, 8): -2, (3, 4, 9): 1, (3, 5, 0): -2, (3, 5, 1): 2, (3, 5, 2): 4, (3, 5, 3): 0, (3, 5, 4): 2, (3, 5, 5): -2, (3, 5, 6): 3, (3, 5, 7): 4, (3, 5, 8): 1, (3, 5, 9): 2, (3, 6, 0): -2, (3, 6, 1): 2, (3, 6, 2): -2, (3, 6, 3): 0, (3, 6, 4): -2, (3, 6, 5): 3, (3, 6, 6): -2, (3, 6, 7): 1, (3, 6, 8): -2, (3, 6, 9): 3, (3, 7, 0): 8, (3, 7, 1): 2, (3, 7, 2): 3, (3, 7, 3): 0, (3, 7, 4): 4, (3, 7, 5): 4, (3, 7, 6): 1, (3, 7, 7): 8, (3, 7, 8): 2, (3, 7, 9): 2, (3, 8, 0): -2, (3, 8, 1): 2, (3, 8, 2): -2, (3, 8, 3): 0, (3, 8, 4): -2, (3, 8, 5): 1, (3, 8, 6): -2, (3, 8, 7): 2, (3, 8, 8): -2, (3, 8, 9): 3, (3, 9, 0): 6, (3, 9, 1): 2, (3, 9, 2): 2, (3, 9, 3): 0, (3, 9, 4): 1, (3, 9, 5): 2, (3, 9, 6): 3, (3, 9, 7): 2, (3, 9, 8): 3, (3, 9, 9): 6, (4, 0, 0): -2, (4, 0, 1): 3, (4, 0, 2): 1, (4, 0, 3): 7, (4, 0, 4): 0, (4, 0, 5): -2, (4, 0, 6): 3, (4, 0, 7): 1, (4, 0, 8): 2, (4, 0, 9): 5, (4, 1, 0): 3, (4, 1, 1): 3, (4, 1, 2): 1, (4, 1, 3): 1, (4, 1, 4): 0, (4, 1, 5): 3, (4, 1, 6): 3, (4, 1, 7): 1, (4, 1, 8): 2, (4, 1, 9): 3, (4, 2, 0): 1, (4, 2, 1): 1, (4, 2, 2): 1, (4, 2, 3): 1, (4, 2, 4): 0, (4, 2, 5): 1, (4, 2, 6): 1, (4, 2, 7): 1, (4, 2, 8): 1, (4, 2, 9): 1, (4, 3, 0): 7, (4, 3, 1): 1, (4, 3, 2): 1, (4, 3, 3): 7, (4, 3, 4): 0, (4, 3, 5): 3, (4, 3, 6): 3, (4, 3, 7): 1, (4, 3, 8): 2, (4, 3, 9): 3, (4, 4, 0): 0, (4, 4, 1): 0, (4, 4, 2): 0, (4, 4, 3): 0, (4, 4, 4): 0, (4, 4, 5): 0, (4, 4, 6): 0, (4, 4, 7): 0, (4, 4, 8): 0, (4, 4, 9): 0, (4, 5, 0): -2, (4, 5, 1): 3, (4, 5, 2): 1, (4, 5, 3): 3, (4, 5, 4): 0, (4, 5, 5): -2, (4, 5, 6): 3, (4, 5, 7): 1, (4, 5, 8): 2, (4, 5, 9): 1, (4, 6, 0): 3, (4, 6, 1): 3, (4, 6, 2): 1, (4, 6, 3): 3, (4, 6, 4): 0, (4, 6, 5): 3, (4, 6, 6): 3, (4, 6, 7): 1, (4, 6, 8): 1, (4, 6, 9): 2, (4, 7, 0): 1, (4, 7, 1): 1, (4, 7, 2): 1, (4, 7, 3): 1, (4, 7, 4): 0, (4, 7, 5): 1, (4, 7, 6): 1, (4, 7, 7): 1, (4, 7, 8): 1, (4, 7, 9): 1, (4, 8, 0): 2, (4, 8, 1): 2, (4, 8, 2): 1, (4, 8, 3): 2, (4, 8, 4): 0, (4, 8, 5): 2, (4, 8, 6): 1, (4, 8, 7): 1, (4, 8, 8): 2, (4, 8, 9): 2, (4, 9, 0): 5, (4, 9, 1): 3, (4, 9, 2): 1, (4, 9, 3): 3, (4, 9, 4): 0, (4, 9, 5): 1, (4, 9, 6): 2, (4, 9, 7): 1, (4, 9, 8): 2, (4, 9, 9): 5, (5, 0, 0): -2, (5, 0, 1): 4, (5, 0, 2): -2, (5, 0, 3): 4, (5, 0, 4): -2, (5, 0, 5): 0, (5, 0, 6): -2, (5, 0, 7): 4, (5, 0, 8): -2, (5, 0, 9): 4, (5, 1, 0): 4, (5, 1, 1): 4, (5, 1, 2): 2, (5, 1, 3): 2, (5, 1, 4): 1, (5, 1, 5): 0, (5, 1, 6): 4, (5, 1, 7): 2, (5, 1, 8): 3, (5, 1, 9): 4, (5, 2, 0): -2, (5, 2, 1): 2, (5, 2, 2): -2, (5, 2, 3): 1, (5, 2, 4): -2, (5, 2, 5): 0, (5, 2, 6): -2, (5, 2, 7): 4, (5, 2, 8): -2, (5, 2, 9): 3, (5, 3, 0): 4, (5, 3, 1): 2, (5, 3, 2): 1, (5, 3, 3): 4, (5, 3, 4): 3, (5, 3, 5): 0, (5, 3, 6): 2, (5, 3, 7): 4, (5, 3, 8): 4, (5, 3, 9): 2, (5, 4, 0): -2, (5, 4, 1): 1, (5, 4, 2): -2, (5, 4, 3): 3, (5, 4, 4): -2, (5, 4, 5): 0, (5, 4, 6): -2, (5, 4, 7): 2, (5, 4, 8): -2, (5, 4, 9): 4, (5, 5, 0): 0, (5, 5, 1): 0, (5, 5, 2): 0, (5, 5, 3): 0, (5, 5, 4): 0, (5, 5, 5): 0, (5, 5, 6): 0, (5, 5, 7): 0, (5, 5, 8): 0, (5, 5, 9): 0, (5, 6, 0): -2, (5, 6, 1): 4, (5, 6, 2): -2, (5, 6, 3): 2, (5, 6, 4): -2, (5, 6, 5): 0, (5, 6, 6): -2, (5, 6, 7): 3, (5, 6, 8): -2, (5, 6, 9): 1, (5, 7, 0): 4, (5, 7, 1): 2, (5, 7, 2): 4, (5, 7, 3): 4, (5, 7, 4): 2, (5, 7, 5): 0, (5, 7, 6): 3, (5, 7, 7): 4, (5, 7, 8): 1, (5, 7, 9): 2, (5, 8, 0): -2, (5, 8, 1): 3, (5, 8, 2): -2, (5, 8, 3): 4, (5, 8, 4): -2, (5, 8, 5): 0, (5, 8, 6): -2, (5, 8, 7): 1, (5, 8, 8): -2, (5, 8, 9): 2, (5, 9, 0): 4, (5, 9, 1): 4, (5, 9, 2): 3, (5, 9, 3): 2, (5, 9, 4): 4, (5, 9, 5): 0, (5, 9, 6): 1, (5, 9, 7): 2, (5, 9, 8): 2, (5, 9, 9): 4, (6, 0, 0): -2, (6, 0, 1): 5, (6, 0, 2): 2, (6, 0, 3): 1, (6, 0, 4): 3, (6, 0, 5): -2, (6, 0, 6): 0, (6, 0, 7): 7, (6, 0, 8): 1, (6, 0, 9): 3, (6, 1, 0): 5, (6, 1, 1): 5, (6, 1, 2): 2, (6, 1, 3): 1, (6, 1, 4): 2, (6, 1, 5): 1, (6, 1, 6): 0, (6, 1, 7): 3, (6, 1, 8): 1, (6, 1, 9): 3, (6, 2, 0): 2, (6, 2, 1): 2, (6, 2, 2): 2, (6, 2, 3): 1, (6, 2, 4): 1, (6, 2, 5): 2, (6, 2, 6): 0, (6, 2, 7): 2, (6, 2, 8): 1, (6, 2, 9): 2, (6, 3, 0): 1, (6, 3, 1): 1, (6, 3, 2): 1, (6, 3, 3): 1, (6, 3, 4): 1, (6, 3, 5): 1, (6, 3, 6): 0, (6, 3, 7): 1, (6, 3, 8): 1, (6, 3, 9): 1, (6, 4, 0): 3, (6, 4, 1): 2, (6, 4, 2): 1, (6, 4, 3): 1, (6, 4, 4): 3, (6, 4, 5): 3, (6, 4, 6): 0, (6, 4, 7): 3, (6, 4, 8): 1, (6, 4, 9): 3, (6, 5, 0): -2, (6, 5, 1): 1, (6, 5, 2): 2, (6, 5, 3): 1, (6, 5, 4): 3, (6, 5, 5): -2, (6, 5, 6): 0, (6, 5, 7): 3, (6, 5, 8): 1, (6, 5, 9): 3, (6, 6, 0): 0, (6, 6, 1): 0, (6, 6, 2): 0, (6, 6, 3): 0, (6, 6, 4): 0, (6, 6, 5): 0, (6, 6, 6): 0, (6, 6, 7): 0, (6, 6, 8): 0, (6, 6, 9): 0, (6, 7, 0): 7, (6, 7, 1): 3, (6, 7, 2): 2, (6, 7, 3): 1, (6, 7, 4): 3, (6, 7, 5): 3, (6, 7, 6): 0, (6, 7, 7): 7, (6, 7, 8): 1, (6, 7, 9): 1, (6, 8, 0): 1, (6, 8, 1): 1, (6, 8, 2): 1, (6, 8, 3): 1, (6, 8, 4): 1, (6, 8, 5): 1, (6, 8, 6): 0, (6, 8, 7): 1, (6, 8, 8): 1, (6, 8, 9): 1, (6, 9, 0): 3, (6, 9, 1): 3, (6, 9, 2): 2, (6, 9, 3): 1, (6, 9, 4): 3, (6, 9, 5): 3, (6, 9, 6): 0, (6, 9, 7): 1, (6, 9, 8): 1, (6, 9, 9): 3, (7, 0, 0): -2, (7, 0, 1): 6, (7, 0, 2): -2, (7, 0, 3): 8, (7, 0, 4): -2, (7, 0, 5): -2, (7, 0, 6): -2, (7, 0, 7): 0, (7, 0, 8): -2, (7, 0, 9): 2, (7, 1, 0): 6, (7, 1, 1): 6, (7, 1, 2): 3, (7, 1, 3): 2, (7, 1, 4): 3, (7, 1, 5): 2, (7, 1, 6): 1, (7, 1, 7): 0, (7, 1, 8): 2, (7, 1, 9): 2, (7, 2, 0): -2, (7, 2, 1): 3, (7, 2, 2): -2, (7, 2, 3): 2, (7, 2, 4): -2, (7, 2, 5): 1, (7, 2, 6): -2, (7, 2, 7): 0, (7, 2, 8): -2, (7, 2, 9): 2, (7, 3, 0): 8, (7, 3, 1): 2, (7, 3, 2): 2, (7, 3, 3): 8, (7, 3, 4): 1, (7, 3, 5): 4, (7, 3, 6): 4, (7, 3, 7): 0, (7, 3, 8): 3, (7, 3, 9): 2, (7, 4, 0): -2, (7, 4, 1): 3, (7, 4, 2): -2, (7, 4, 3): 1, (7, 4, 4): -2, (7, 4, 5): 3, (7, 4, 6): -2, (7, 4, 7): 0, (7, 4, 8): -2, (7, 4, 9): 2, (7, 5, 0): -2, (7, 5, 1): 2, (7, 5, 2): 1, (7, 5, 3): 4, (7, 5, 4): 3, (7, 5, 5): -2, (7, 5, 6): 2, (7, 5, 7): 0, (7, 5, 8): 4, (7, 5, 9): 2, (7, 6, 0): -2, (7, 6, 1): 1, (7, 6, 2): -2, (7, 6, 3): 4, (7, 6, 4): -2, (7, 6, 5): 2, (7, 6, 6): -2, (7, 6, 7): 0, (7, 6, 8): -2, (7, 6, 9): 2, (7, 7, 0): 0, (7, 7, 1): 0, (7, 7, 2): 0, (7, 7, 3): 0, (7, 7, 4): 0, (7, 7, 5): 0, (7, 7, 6): 0, (7, 7, 7): 0, (7, 7, 8): 0, (7, 7, 9): 0, (7, 8, 0): -2, (7, 8, 1): 2, (7, 8, 2): -2, (7, 8, 3): 3, (7, 8, 4): -2, (7, 8, 5): 4, (7, 8, 6): -2, (7, 8, 7): 0, (7, 8, 8): -2, (7, 8, 9): 1, (7, 9, 0): 2, (7, 9, 1): 2, (7, 9, 2): 2, (7, 9, 3): 2, (7, 9, 4): 2, (7, 9, 5): 2, (7, 9, 6): 2, (7, 9, 7): 0, (7, 9, 8): 1, (7, 9, 9): 2, (8, 0, 0): -2, (8, 0, 1): 7, (8, 0, 2): 3, (8, 0, 3): 5, (8, 0, 4): 1, (8, 0, 5): -2, (8, 0, 6): 2, (8, 0, 7): 3, (8, 0, 8): 0, (8, 0, 9): 1, (8, 1, 0): 7, (8, 1, 1): 7, (8, 1, 2): 3, (8, 1, 3): 3, (8, 1, 4): 1, (8, 1, 5): 3, (8, 1, 6): 2, (8, 1, 7): 1, (8, 1, 8): 0, (8, 1, 9): 1, (8, 2, 0): 3, (8, 2, 1): 3, (8, 2, 2): 3, (8, 2, 3): 2, (8, 2, 4): 1, (8, 2, 5): 3, (8, 2, 6): 1, (8, 2, 7): 3, (8, 2, 8): 0, (8, 2, 9): 1, (8, 3, 0): 5, (8, 3, 1): 3, (8, 3, 2): 2, (8, 3, 3): 5, (8, 3, 4): 1, (8, 3, 5): 1, (8, 3, 6): 2, (8, 3, 7): 3, (8, 3, 8): 0, (8, 3, 9): 1, (8, 4, 0): 1, (8, 4, 1): 1, (8, 4, 2): 1, (8, 4, 3): 1, (8, 4, 4): 1, (8, 4, 5): 1, (8, 4, 6): 1, (8, 4, 7): 1, (8, 4, 8): 0, (8, 4, 9): 1, (8, 5, 0): -2, (8, 5, 1): 3, (8, 5, 2): 3, (8, 5, 3): 1, (8, 5, 4): 1, (8, 5, 5): -2, (8, 5, 6): 2, (8, 5, 7): 3, (8, 5, 8): 0, (8, 5, 9): 1, (8, 6, 0): 2, (8, 6, 1): 2, (8, 6, 2): 1, (8, 6, 3): 2, (8, 6, 4): 1, (8, 6, 5): 2, (8, 6, 6): 2, (8, 6, 7): 2, (8, 6, 8): 0, (8, 6, 9): 1, (8, 7, 0): 3, (8, 7, 1): 1, (8, 7, 2): 3, (8, 7, 3): 3, (8, 7, 4): 1, (8, 7, 5): 3, (8, 7, 6): 2, (8, 7, 7): 3, (8, 7, 8): 0, (8, 7, 9): 1, (8, 8, 0): 0, (8, 8, 1): 0, (8, 8, 2): 0, (8, 8, 3): 0, (8, 8, 4): 0, (8, 8, 5): 0, (8, 8, 6): 0, (8, 8, 7): 0, (8, 8, 8): 0, (8, 8, 9): 0, (8, 9, 0): 1, (8, 9, 1): 1, (8, 9, 2): 1, (8, 9, 3): 1, (8, 9, 4): 1, (8, 9, 5): 1, (8, 9, 6): 1, (8, 9, 7): 1, (8, 9, 8): 0, (8, 9, 9): 1, (9, 0, 0): -2, (9, 0, 1): 8, (9, 0, 2): -2, (9, 0, 3): 2, (9, 0, 4): -2, (9, 0, 5): -2, (9, 0, 6): -2, (9, 0, 7): 6, (9, 0, 8): -2, (9, 0, 9): 0, (9, 1, 0): 8, (9, 1, 1): 8, (9, 1, 2): 4, (9, 1, 3): 2, (9, 1, 4): 2, (9, 1, 5): 4, (9, 1, 6): 3, (9, 1, 7): 2, (9, 1, 8): 1, (9, 1, 9): 0, (9, 2, 0): -2, (9, 2, 1): 4, (9, 2, 2): -2, (9, 2, 3): 2, (9, 2, 4): -2, (9, 2, 5): 2, (9, 2, 6): -2, (9, 2, 7): 1, (9, 2, 8): -2, (9, 2, 9): 0, (9, 3, 0): 2, (9, 3, 1): 2, (9, 3, 2): 2, (9, 3, 3): 2, (9, 3, 4): 2, (9, 3, 5): 2, (9, 3, 6): 1, (9, 3, 7): 2, (9, 3, 8): 2, (9, 3, 9): 0, (9, 4, 0): -2, (9, 4, 1): 2, (9, 4, 2): -2, (9, 4, 3): 2, (9, 4, 4): -2, (9, 4, 5): 1, (9, 4, 6): -2, (9, 4, 7): 3, (9, 4, 8): -2, (9, 4, 9): 0, (9, 5, 0): -2, (9, 5, 1): 4, (9, 5, 2): 2, (9, 5, 3): 2, (9, 5, 4): 1, (9, 5, 5): -2, (9, 5, 6): 4, (9, 5, 7): 2, (9, 5, 8): 3, (9, 5, 9): 0, (9, 6, 0): -2, (9, 6, 1): 3, (9, 6, 2): -2, (9, 6, 3): 1, (9, 6, 4): -2, (9, 6, 5): 4, (9, 6, 6): -2, (9, 6, 7): 2, (9, 6, 8): -2, (9, 6, 9): 0, (9, 7, 0): 6, (9, 7, 1): 2, (9, 7, 2): 1, (9, 7, 3): 2, (9, 7, 4): 3, (9, 7, 5): 2, (9, 7, 6): 2, (9, 7, 7): 6, (9, 7, 8): 3, (9, 7, 9): 0, (9, 8, 0): -2, (9, 8, 1): 1, (9, 8, 2): -2, (9, 8, 3): 2, (9, 8, 4): -2, (9, 8, 5): 3, (9, 8, 6): -2, (9, 8, 7): 3, (9, 8, 8): -2, (9, 8, 9): 0, (9, 9, 0): 0, (9, 9, 1): 0, (9, 9, 2): 0, (9, 9, 3): 0, (9, 9, 4): 0, (9, 9, 5): 0, (9, 9, 6): 0, (9, 9, 7): 0, (9, 9, 8): 0, (9, 9, 9): 0}\n \ns = [int(x) for x in input()]\nif s[0] != 0:\n    for _ in range(10):\n        print('-1 ' * 10)\n    return\n \na = []\n \nfor i in range(1, len(s)):\n    a.append((s[i] - s[i - 1]) % 10)\n \n \ncounts = [0] * 10\nfor x in a:\n    counts[x] += 1\n \n \nfor i in range(10):\n    for j in range(10):\n        skip = False\n        count = 0\n        for x in range(10):\n            if counts[x]:\n                tr = d[(x, i, j)]\n                if tr == -2:\n                    print(-1, end=' ')\n                    skip = True\n                    break\n                else:\n                    count += tr * counts[x]\n        if skip:\n            continue\n        print(count, end=' ')\n    print()", "adj = [[[1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 4, 1000000000000000000000000000000], [1, 7, 4, 1, 8, 5, 2, 9, 6, 3], [1, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000], [1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 3, 1000000000000000000000000000000], [1, 3, 6, 9, 2, 5, 8, 1, 4, 7], [1, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [1, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 1, 1, 2, 2, 3, 3, 4, 4, 5], [4, 1, 2, 1, 2, 3, 2, 3, 4, 3], [4, 1, 2, 3, 1, 2, 3, 4, 2, 3], [2, 1, 2, 3, 4, 1, 2, 3, 4, 5], [5, 1, 2, 3, 4, 5, 1, 2, 3, 4], [4, 1, 2, 3, 2, 3, 4, 1, 2, 3], [3, 1, 2, 3, 3, 4, 2, 3, 1, 2], [2, 1, 2, 3, 4, 5, 4, 3, 2, 1]], [[1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 4, 1000000000000000000000000000000], [5, 1, 1, 2, 2, 3, 3, 4, 4, 5], [5, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 4, 1000000000000000000000000000000], [4, 4, 1, 1, 2, 2, 2, 3, 3, 3], [3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [2, 4, 1, 5, 2, 1, 3, 2, 4, 3], [3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [5, 3, 1, 4, 2, 5, 3, 1, 4, 2], [2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [3, 2, 1, 3, 2, 4, 3, 3, 2, 1]], [[1, 7, 4, 1, 8, 5, 2, 9, 6, 3], [4, 1, 2, 1, 2, 3, 2, 3, 4, 3], [4, 4, 1, 1, 2, 2, 2, 3, 3, 3], [10, 7, 4, 1, 8, 5, 2, 9, 6, 3], [3, 3, 3, 1, 1, 4, 2, 2, 2, 3], [2, 3, 4, 1, 4, 1, 2, 5, 2, 3], [5, 4, 2, 1, 4, 3, 1, 5, 3, 2], [2, 3, 4, 1, 2, 5, 2, 1, 4, 3], [5, 2, 4, 1, 3, 5, 2, 4, 1, 3], [4, 3, 2, 1, 4, 3, 2, 3, 2, 1]], [[1, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [4, 1, 2, 3, 1, 2, 3, 4, 2, 3], [3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [3, 3, 3, 1, 1, 4, 2, 2, 2, 3], [5, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [2, 5, 3, 3, 1, 1, 4, 4, 2, 2], [2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [5, 2, 3, 5, 1, 3, 4, 1, 2, 4], [3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]], [[1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000], [2, 1, 2, 3, 4, 1, 2, 3, 4, 5], [2, 4, 1, 5, 2, 1, 3, 2, 4, 3], [2, 3, 4, 1, 4, 1, 2, 5, 2, 3], [2, 5, 3, 3, 1, 1, 4, 4, 2, 2], [2, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000], [2, 2, 2, 4, 4, 1, 1, 3, 3, 5], [2, 3, 2, 5, 2, 1, 4, 1, 4, 3], [2, 3, 4, 2, 3, 1, 2, 5, 1, 4], [2, 5, 4, 3, 2, 1, 4, 3, 2, 1]], [[1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 3, 1000000000000000000000000000000], [5, 1, 2, 3, 4, 5, 1, 2, 3, 4], [3, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [5, 4, 2, 1, 4, 3, 1, 5, 3, 2], [2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000], [2, 2, 2, 4, 4, 1, 1, 3, 3, 5], [5, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 3, 1000000000000000000000000000000], [3, 3, 2, 2, 2, 4, 1, 1, 3, 3], [3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [4, 3, 2, 4, 3, 2, 1, 3, 2, 1]], [[1, 3, 6, 9, 2, 5, 8, 1, 4, 7], [4, 1, 2, 3, 2, 3, 4, 1, 2, 3], [5, 3, 1, 4, 2, 5, 3, 1, 4, 2], [2, 3, 4, 1, 2, 5, 2, 1, 4, 3], [5, 2, 3, 5, 1, 3, 4, 1, 2, 4], [2, 3, 2, 5, 2, 1, 4, 1, 4, 3], [3, 3, 2, 2, 2, 4, 1, 1, 3, 3], [10, 3, 6, 9, 2, 5, 8, 1, 4, 7], [4, 3, 3, 3, 2, 2, 2, 1, 1, 4], [4, 3, 4, 3, 2, 3, 2, 1, 2, 1]], [[1, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [3, 1, 2, 3, 3, 4, 2, 3, 1, 2], [2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [5, 2, 4, 1, 3, 5, 2, 4, 1, 3], [3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [2, 3, 4, 2, 3, 1, 2, 5, 1, 4], [3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [4, 3, 3, 3, 2, 2, 2, 1, 1, 4], [5, 1000000000000000000000000000000, 4, 1000000000000000000000000000000, 3, 1000000000000000000000000000000, 2, 1000000000000000000000000000000, 1, 1000000000000000000000000000000], [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]], [[1, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 1, 2, 3, 4, 5, 4, 3, 2, 1], [3, 2, 1, 3, 2, 4, 3, 3, 2, 1], [4, 3, 2, 1, 4, 3, 2, 3, 2, 1], [5, 4, 3, 2, 1, 5, 4, 3, 2, 1], [2, 5, 4, 3, 2, 1, 4, 3, 2, 1], [4, 3, 2, 4, 3, 2, 1, 3, 2, 1], [4, 3, 4, 3, 2, 3, 2, 1, 2, 1], [5, 5, 4, 4, 3, 3, 2, 2, 1, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]\n\ns = input()\nn = len(s)\n\ngaps = [0 for _ in range(10)]\nfor i in range(n-1):\n\tgaps[(int(s[i+1]) - int(s[i])) % 10] += 1\nans = [[0 for _ in range(10)] for _ in range(10)]\nfor i in range(10):\n\tfor j in range(10):\n\t\tif i > j:\n\t\t\tans[i][j] = ans[j][i]\n\t\t\tcontinue\n\t\tfor g in range(10):\n\t\t\tans[i][j] += (adj[i][j][g]-1)*gaps[g]\n\t\tif ans[i][j] > 10**20:\n\t\t\tans[i][j] = -1\n\nfor i in range(10):\n\tprint(*ans[i])\n", "def cover(t, x, y):\n    tar = []\n    for xc in range(100):\n        for yc in range(100):\n            if xc == 0 and yc == 0:\n                continue\n            if (xc * x + yc * y) % 10 == t:\n                tar.append(xc + yc)\n    if tar:\n        return min(tar) - 1\n    else:\n        return -2\n\nd = {(0, 0, 0): 0, (0, 0, 1): 0, (0, 0, 2): 0, (0, 0, 3): 0, (0, 0, 4): 0, (0, 0, 5): 0, (0, 0, 6): 0, (0, 0, 7): 0, (0, 0, 8): 0, (0, 0, 9): 0, (0, 1, 0): 0, (0, 1, 1): 9, (0, 1, 2): 4, (0, 1, 3): 3, (0, 1, 4): 3, (0, 1, 5): 1, (0, 1, 6): 4, (0, 1, 7): 3, (0, 1, 8): 2, (0, 1, 9): 1, (0, 2, 0): 0, (0, 2, 1): 4, (0, 2, 2): 4, (0, 2, 3): 3, (0, 2, 4): 2, (0, 2, 5): 1, (0, 2, 6): 2, (0, 2, 7): 4, (0, 2, 8): 1, (0, 2, 9): 2, (0, 3, 0): 0, (0, 3, 1): 3, (0, 3, 2): 3, (0, 3, 3): 9, (0, 3, 4): 2, (0, 3, 5): 1, (0, 3, 6): 4, (0, 3, 7): 1, (0, 3, 8): 4, (0, 3, 9): 3, (0, 4, 0): 0, (0, 4, 1): 3, (0, 4, 2): 2, (0, 4, 3): 2, (0, 4, 4): 4, (0, 4, 5): 1, (0, 4, 6): 1, (0, 4, 7): 4, (0, 4, 8): 2, (0, 4, 9): 4, (0, 5, 0): 0, (0, 5, 1): 1, (0, 5, 2): 1, (0, 5, 3): 1, (0, 5, 4): 1, (0, 5, 5): 1, (0, 5, 6): 1, (0, 5, 7): 1, (0, 5, 8): 1, (0, 5, 9): 1, (0, 6, 0): 0, (0, 6, 1): 4, (0, 6, 2): 2, (0, 6, 3): 4, (0, 6, 4): 1, (0, 6, 5): 1, (0, 6, 6): 4, (0, 6, 7): 2, (0, 6, 8): 2, (0, 6, 9): 3, (0, 7, 0): 0, (0, 7, 1): 3, (0, 7, 2): 4, (0, 7, 3): 1, (0, 7, 4): 4, (0, 7, 5): 1, (0, 7, 6): 2, (0, 7, 7): 9, (0, 7, 8): 3, (0, 7, 9): 3, (0, 8, 0): 0, (0, 8, 1): 2, (0, 8, 2): 1, (0, 8, 3): 4, (0, 8, 4): 2, (0, 8, 5): 1, (0, 8, 6): 2, (0, 8, 7): 3, (0, 8, 8): 4, (0, 8, 9): 4, (0, 9, 0): 0, (0, 9, 1): 1, (0, 9, 2): 2, (0, 9, 3): 3, (0, 9, 4): 4, (0, 9, 5): 1, (0, 9, 6): 3, (0, 9, 7): 3, (0, 9, 8): 4, (0, 9, 9): 9, (1, 0, 0): -2, (1, 0, 1): 0, (1, 0, 2): -2, (1, 0, 3): 6, (1, 0, 4): -2, (1, 0, 5): -2, (1, 0, 6): -2, (1, 0, 7): 2, (1, 0, 8): -2, (1, 0, 9): 8, (1, 1, 0): 0, (1, 1, 1): 0, (1, 1, 2): 0, (1, 1, 3): 0, (1, 1, 4): 0, (1, 1, 5): 0, (1, 1, 6): 0, (1, 1, 7): 0, (1, 1, 8): 0, (1, 1, 9): 0, (1, 2, 0): -2, (1, 2, 1): 0, (1, 2, 2): -2, (1, 2, 3): 3, (1, 2, 4): -2, (1, 2, 5): 3, (1, 2, 6): -2, (1, 2, 7): 2, (1, 2, 8): -2, (1, 2, 9): 1, (1, 3, 0): 6, (1, 3, 1): 0, (1, 3, 2): 3, (1, 3, 3): 6, (1, 3, 4): 2, (1, 3, 5): 2, (1, 3, 6): 3, (1, 3, 7): 2, (1, 3, 8): 1, (1, 3, 9): 2, (1, 4, 0): -2, (1, 4, 1): 0, (1, 4, 2): -2, (1, 4, 3): 2, (1, 4, 4): -2, (1, 4, 5): 4, (1, 4, 6): -2, (1, 4, 7): 1, (1, 4, 8): -2, (1, 4, 9): 3, (1, 5, 0): -2, (1, 5, 1): 0, (1, 5, 2): 3, (1, 5, 3): 2, (1, 5, 4): 4, (1, 5, 5): -2, (1, 5, 6): 1, (1, 5, 7): 2, (1, 5, 8): 2, (1, 5, 9): 4, (1, 6, 0): -2, (1, 6, 1): 0, (1, 6, 2): -2, (1, 6, 3): 3, (1, 6, 4): -2, (1, 6, 5): 1, (1, 6, 6): -2, (1, 6, 7): 2, (1, 6, 8): -2, (1, 6, 9): 2, (1, 7, 0): 2, (1, 7, 1): 0, (1, 7, 2): 2, (1, 7, 3): 2, (1, 7, 4): 1, (1, 7, 5): 2, (1, 7, 6): 2, (1, 7, 7): 2, (1, 7, 8): 2, (1, 7, 9): 2, (1, 8, 0): -2, (1, 8, 1): 0, (1, 8, 2): -2, (1, 8, 3): 1, (1, 8, 4): -2, (1, 8, 5): 2, (1, 8, 6): -2, (1, 8, 7): 2, (1, 8, 8): -2, (1, 8, 9): 4, (1, 9, 0): 8, (1, 9, 1): 0, (1, 9, 2): 1, (1, 9, 3): 2, (1, 9, 4): 3, (1, 9, 5): 4, (1, 9, 6): 2, (1, 9, 7): 2, (1, 9, 8): 4, (1, 9, 9): 8, (2, 0, 0): -2, (2, 0, 1): 1, (2, 0, 2): 0, (2, 0, 3): 3, (2, 0, 4): 2, (2, 0, 5): -2, (2, 0, 6): 1, (2, 0, 7): 5, (2, 0, 8): 3, (2, 0, 9): 7, (2, 1, 0): 1, (2, 1, 1): 1, (2, 1, 2): 0, (2, 1, 3): 1, (2, 1, 4): 1, (2, 1, 5): 1, (2, 1, 6): 1, (2, 1, 7): 1, (2, 1, 8): 1, (2, 1, 9): 1, (2, 2, 0): 0, (2, 2, 1): 0, (2, 2, 2): 0, (2, 2, 3): 0, (2, 2, 4): 0, (2, 2, 5): 0, (2, 2, 6): 0, (2, 2, 7): 0, (2, 2, 8): 0, (2, 2, 9): 0, (2, 3, 0): 3, (2, 3, 1): 1, (2, 3, 2): 0, (2, 3, 3): 3, (2, 3, 4): 2, (2, 3, 5): 3, (2, 3, 6): 1, (2, 3, 7): 3, (2, 3, 8): 3, (2, 3, 9): 1, (2, 4, 0): 2, (2, 4, 1): 1, (2, 4, 2): 0, (2, 4, 3): 2, (2, 4, 4): 2, (2, 4, 5): 2, (2, 4, 6): 1, (2, 4, 7): 2, (2, 4, 8): 1, (2, 4, 9): 2, (2, 5, 0): -2, (2, 5, 1): 1, (2, 5, 2): 0, (2, 5, 3): 3, (2, 5, 4): 2, (2, 5, 5): -2, (2, 5, 6): 1, (2, 5, 7): 1, (2, 5, 8): 3, (2, 5, 9): 3, (2, 6, 0): 1, (2, 6, 1): 1, (2, 6, 2): 0, (2, 6, 3): 1, (2, 6, 4): 1, (2, 6, 5): 1, (2, 6, 6): 1, (2, 6, 7): 1, (2, 6, 8): 1, (2, 6, 9): 1, (2, 7, 0): 5, (2, 7, 1): 1, (2, 7, 2): 0, (2, 7, 3): 3, (2, 7, 4): 2, (2, 7, 5): 1, (2, 7, 6): 1, (2, 7, 7): 5, (2, 7, 8): 2, (2, 7, 9): 3, (2, 8, 0): 3, (2, 8, 1): 1, (2, 8, 2): 0, (2, 8, 3): 3, (2, 8, 4): 1, (2, 8, 5): 3, (2, 8, 6): 1, (2, 8, 7): 2, (2, 8, 8): 3, (2, 8, 9): 3, (2, 9, 0): 7, (2, 9, 1): 1, (2, 9, 2): 0, (2, 9, 3): 1, (2, 9, 4): 2, (2, 9, 5): 3, (2, 9, 6): 1, (2, 9, 7): 3, (2, 9, 8): 3, (2, 9, 9): 7, (3, 0, 0): -2, (3, 0, 1): 2, (3, 0, 2): -2, (3, 0, 3): 0, (3, 0, 4): -2, (3, 0, 5): -2, (3, 0, 6): -2, (3, 0, 7): 8, (3, 0, 8): -2, (3, 0, 9): 6, (3, 1, 0): 2, (3, 1, 1): 2, (3, 1, 2): 1, (3, 1, 3): 0, (3, 1, 4): 2, (3, 1, 5): 2, (3, 1, 6): 2, (3, 1, 7): 2, (3, 1, 8): 2, (3, 1, 9): 2, (3, 2, 0): -2, (3, 2, 1): 1, (3, 2, 2): -2, (3, 2, 3): 0, (3, 2, 4): -2, (3, 2, 5): 4, (3, 2, 6): -2, (3, 2, 7): 3, (3, 2, 8): -2, (3, 2, 9): 2, (3, 3, 0): 0, (3, 3, 1): 0, (3, 3, 2): 0, (3, 3, 3): 0, (3, 3, 4): 0, (3, 3, 5): 0, (3, 3, 6): 0, (3, 3, 7): 0, (3, 3, 8): 0, (3, 3, 9): 0, (3, 4, 0): -2, (3, 4, 1): 2, (3, 4, 2): -2, (3, 4, 3): 0, (3, 4, 4): -2, (3, 4, 5): 2, (3, 4, 6): -2, (3, 4, 7): 4, (3, 4, 8): -2, (3, 4, 9): 1, (3, 5, 0): -2, (3, 5, 1): 2, (3, 5, 2): 4, (3, 5, 3): 0, (3, 5, 4): 2, (3, 5, 5): -2, (3, 5, 6): 3, (3, 5, 7): 4, (3, 5, 8): 1, (3, 5, 9): 2, (3, 6, 0): -2, (3, 6, 1): 2, (3, 6, 2): -2, (3, 6, 3): 0, (3, 6, 4): -2, (3, 6, 5): 3, (3, 6, 6): -2, (3, 6, 7): 1, (3, 6, 8): -2, (3, 6, 9): 3, (3, 7, 0): 8, (3, 7, 1): 2, (3, 7, 2): 3, (3, 7, 3): 0, (3, 7, 4): 4, (3, 7, 5): 4, (3, 7, 6): 1, (3, 7, 7): 8, (3, 7, 8): 2, (3, 7, 9): 2, (3, 8, 0): -2, (3, 8, 1): 2, (3, 8, 2): -2, (3, 8, 3): 0, (3, 8, 4): -2, (3, 8, 5): 1, (3, 8, 6): -2, (3, 8, 7): 2, (3, 8, 8): -2, (3, 8, 9): 3, (3, 9, 0): 6, (3, 9, 1): 2, (3, 9, 2): 2, (3, 9, 3): 0, (3, 9, 4): 1, (3, 9, 5): 2, (3, 9, 6): 3, (3, 9, 7): 2, (3, 9, 8): 3, (3, 9, 9): 6, (4, 0, 0): -2, (4, 0, 1): 3, (4, 0, 2): 1, (4, 0, 3): 7, (4, 0, 4): 0, (4, 0, 5): -2, (4, 0, 6): 3, (4, 0, 7): 1, (4, 0, 8): 2, (4, 0, 9): 5, (4, 1, 0): 3, (4, 1, 1): 3, (4, 1, 2): 1, (4, 1, 3): 1, (4, 1, 4): 0, (4, 1, 5): 3, (4, 1, 6): 3, (4, 1, 7): 1, (4, 1, 8): 2, (4, 1, 9): 3, (4, 2, 0): 1, (4, 2, 1): 1, (4, 2, 2): 1, (4, 2, 3): 1, (4, 2, 4): 0, (4, 2, 5): 1, (4, 2, 6): 1, (4, 2, 7): 1, (4, 2, 8): 1, (4, 2, 9): 1, (4, 3, 0): 7, (4, 3, 1): 1, (4, 3, 2): 1, (4, 3, 3): 7, (4, 3, 4): 0, (4, 3, 5): 3, (4, 3, 6): 3, (4, 3, 7): 1, (4, 3, 8): 2, (4, 3, 9): 3, (4, 4, 0): 0, (4, 4, 1): 0, (4, 4, 2): 0, (4, 4, 3): 0, (4, 4, 4): 0, (4, 4, 5): 0, (4, 4, 6): 0, (4, 4, 7): 0, (4, 4, 8): 0, (4, 4, 9): 0, (4, 5, 0): -2, (4, 5, 1): 3, (4, 5, 2): 1, (4, 5, 3): 3, (4, 5, 4): 0, (4, 5, 5): -2, (4, 5, 6): 3, (4, 5, 7): 1, (4, 5, 8): 2, (4, 5, 9): 1, (4, 6, 0): 3, (4, 6, 1): 3, (4, 6, 2): 1, (4, 6, 3): 3, (4, 6, 4): 0, (4, 6, 5): 3, (4, 6, 6): 3, (4, 6, 7): 1, (4, 6, 8): 1, (4, 6, 9): 2, (4, 7, 0): 1, (4, 7, 1): 1, (4, 7, 2): 1, (4, 7, 3): 1, (4, 7, 4): 0, (4, 7, 5): 1, (4, 7, 6): 1, (4, 7, 7): 1, (4, 7, 8): 1, (4, 7, 9): 1, (4, 8, 0): 2, (4, 8, 1): 2, (4, 8, 2): 1, (4, 8, 3): 2, (4, 8, 4): 0, (4, 8, 5): 2, (4, 8, 6): 1, (4, 8, 7): 1, (4, 8, 8): 2, (4, 8, 9): 2, (4, 9, 0): 5, (4, 9, 1): 3, (4, 9, 2): 1, (4, 9, 3): 3, (4, 9, 4): 0, (4, 9, 5): 1, (4, 9, 6): 2, (4, 9, 7): 1, (4, 9, 8): 2, (4, 9, 9): 5, (5, 0, 0): -2, (5, 0, 1): 4, (5, 0, 2): -2, (5, 0, 3): 4, (5, 0, 4): -2, (5, 0, 5): 0, (5, 0, 6): -2, (5, 0, 7): 4, (5, 0, 8): -2, (5, 0, 9): 4, (5, 1, 0): 4, (5, 1, 1): 4, (5, 1, 2): 2, (5, 1, 3): 2, (5, 1, 4): 1, (5, 1, 5): 0, (5, 1, 6): 4, (5, 1, 7): 2, (5, 1, 8): 3, (5, 1, 9): 4, (5, 2, 0): -2, (5, 2, 1): 2, (5, 2, 2): -2, (5, 2, 3): 1, (5, 2, 4): -2, (5, 2, 5): 0, (5, 2, 6): -2, (5, 2, 7): 4, (5, 2, 8): -2, (5, 2, 9): 3, (5, 3, 0): 4, (5, 3, 1): 2, (5, 3, 2): 1, (5, 3, 3): 4, (5, 3, 4): 3, (5, 3, 5): 0, (5, 3, 6): 2, (5, 3, 7): 4, (5, 3, 8): 4, (5, 3, 9): 2, (5, 4, 0): -2, (5, 4, 1): 1, (5, 4, 2): -2, (5, 4, 3): 3, (5, 4, 4): -2, (5, 4, 5): 0, (5, 4, 6): -2, (5, 4, 7): 2, (5, 4, 8): -2, (5, 4, 9): 4, (5, 5, 0): 0, (5, 5, 1): 0, (5, 5, 2): 0, (5, 5, 3): 0, (5, 5, 4): 0, (5, 5, 5): 0, (5, 5, 6): 0, (5, 5, 7): 0, (5, 5, 8): 0, (5, 5, 9): 0, (5, 6, 0): -2, (5, 6, 1): 4, (5, 6, 2): -2, (5, 6, 3): 2, (5, 6, 4): -2, (5, 6, 5): 0, (5, 6, 6): -2, (5, 6, 7): 3, (5, 6, 8): -2, (5, 6, 9): 1, (5, 7, 0): 4, (5, 7, 1): 2, (5, 7, 2): 4, (5, 7, 3): 4, (5, 7, 4): 2, (5, 7, 5): 0, (5, 7, 6): 3, (5, 7, 7): 4, (5, 7, 8): 1, (5, 7, 9): 2, (5, 8, 0): -2, (5, 8, 1): 3, (5, 8, 2): -2, (5, 8, 3): 4, (5, 8, 4): -2, (5, 8, 5): 0, (5, 8, 6): -2, (5, 8, 7): 1, (5, 8, 8): -2, (5, 8, 9): 2, (5, 9, 0): 4, (5, 9, 1): 4, (5, 9, 2): 3, (5, 9, 3): 2, (5, 9, 4): 4, (5, 9, 5): 0, (5, 9, 6): 1, (5, 9, 7): 2, (5, 9, 8): 2, (5, 9, 9): 4, (6, 0, 0): -2, (6, 0, 1): 5, (6, 0, 2): 2, (6, 0, 3): 1, (6, 0, 4): 3, (6, 0, 5): -2, (6, 0, 6): 0, (6, 0, 7): 7, (6, 0, 8): 1, (6, 0, 9): 3, (6, 1, 0): 5, (6, 1, 1): 5, (6, 1, 2): 2, (6, 1, 3): 1, (6, 1, 4): 2, (6, 1, 5): 1, (6, 1, 6): 0, (6, 1, 7): 3, (6, 1, 8): 1, (6, 1, 9): 3, (6, 2, 0): 2, (6, 2, 1): 2, (6, 2, 2): 2, (6, 2, 3): 1, (6, 2, 4): 1, (6, 2, 5): 2, (6, 2, 6): 0, (6, 2, 7): 2, (6, 2, 8): 1, (6, 2, 9): 2, (6, 3, 0): 1, (6, 3, 1): 1, (6, 3, 2): 1, (6, 3, 3): 1, (6, 3, 4): 1, (6, 3, 5): 1, (6, 3, 6): 0, (6, 3, 7): 1, (6, 3, 8): 1, (6, 3, 9): 1, (6, 4, 0): 3, (6, 4, 1): 2, (6, 4, 2): 1, (6, 4, 3): 1, (6, 4, 4): 3, (6, 4, 5): 3, (6, 4, 6): 0, (6, 4, 7): 3, (6, 4, 8): 1, (6, 4, 9): 3, (6, 5, 0): -2, (6, 5, 1): 1, (6, 5, 2): 2, (6, 5, 3): 1, (6, 5, 4): 3, (6, 5, 5): -2, (6, 5, 6): 0, (6, 5, 7): 3, (6, 5, 8): 1, (6, 5, 9): 3, (6, 6, 0): 0, (6, 6, 1): 0, (6, 6, 2): 0, (6, 6, 3): 0, (6, 6, 4): 0, (6, 6, 5): 0, (6, 6, 6): 0, (6, 6, 7): 0, (6, 6, 8): 0, (6, 6, 9): 0, (6, 7, 0): 7, (6, 7, 1): 3, (6, 7, 2): 2, (6, 7, 3): 1, (6, 7, 4): 3, (6, 7, 5): 3, (6, 7, 6): 0, (6, 7, 7): 7, (6, 7, 8): 1, (6, 7, 9): 1, (6, 8, 0): 1, (6, 8, 1): 1, (6, 8, 2): 1, (6, 8, 3): 1, (6, 8, 4): 1, (6, 8, 5): 1, (6, 8, 6): 0, (6, 8, 7): 1, (6, 8, 8): 1, (6, 8, 9): 1, (6, 9, 0): 3, (6, 9, 1): 3, (6, 9, 2): 2, (6, 9, 3): 1, (6, 9, 4): 3, (6, 9, 5): 3, (6, 9, 6): 0, (6, 9, 7): 1, (6, 9, 8): 1, (6, 9, 9): 3, (7, 0, 0): -2, (7, 0, 1): 6, (7, 0, 2): -2, (7, 0, 3): 8, (7, 0, 4): -2, (7, 0, 5): -2, (7, 0, 6): -2, (7, 0, 7): 0, (7, 0, 8): -2, (7, 0, 9): 2, (7, 1, 0): 6, (7, 1, 1): 6, (7, 1, 2): 3, (7, 1, 3): 2, (7, 1, 4): 3, (7, 1, 5): 2, (7, 1, 6): 1, (7, 1, 7): 0, (7, 1, 8): 2, (7, 1, 9): 2, (7, 2, 0): -2, (7, 2, 1): 3, (7, 2, 2): -2, (7, 2, 3): 2, (7, 2, 4): -2, (7, 2, 5): 1, (7, 2, 6): -2, (7, 2, 7): 0, (7, 2, 8): -2, (7, 2, 9): 2, (7, 3, 0): 8, (7, 3, 1): 2, (7, 3, 2): 2, (7, 3, 3): 8, (7, 3, 4): 1, (7, 3, 5): 4, (7, 3, 6): 4, (7, 3, 7): 0, (7, 3, 8): 3, (7, 3, 9): 2, (7, 4, 0): -2, (7, 4, 1): 3, (7, 4, 2): -2, (7, 4, 3): 1, (7, 4, 4): -2, (7, 4, 5): 3, (7, 4, 6): -2, (7, 4, 7): 0, (7, 4, 8): -2, (7, 4, 9): 2, (7, 5, 0): -2, (7, 5, 1): 2, (7, 5, 2): 1, (7, 5, 3): 4, (7, 5, 4): 3, (7, 5, 5): -2, (7, 5, 6): 2, (7, 5, 7): 0, (7, 5, 8): 4, (7, 5, 9): 2, (7, 6, 0): -2, (7, 6, 1): 1, (7, 6, 2): -2, (7, 6, 3): 4, (7, 6, 4): -2, (7, 6, 5): 2, (7, 6, 6): -2, (7, 6, 7): 0, (7, 6, 8): -2, (7, 6, 9): 2, (7, 7, 0): 0, (7, 7, 1): 0, (7, 7, 2): 0, (7, 7, 3): 0, (7, 7, 4): 0, (7, 7, 5): 0, (7, 7, 6): 0, (7, 7, 7): 0, (7, 7, 8): 0, (7, 7, 9): 0, (7, 8, 0): -2, (7, 8, 1): 2, (7, 8, 2): -2, (7, 8, 3): 3, (7, 8, 4): -2, (7, 8, 5): 4, (7, 8, 6): -2, (7, 8, 7): 0, (7, 8, 8): -2, (7, 8, 9): 1, (7, 9, 0): 2, (7, 9, 1): 2, (7, 9, 2): 2, (7, 9, 3): 2, (7, 9, 4): 2, (7, 9, 5): 2, (7, 9, 6): 2, (7, 9, 7): 0, (7, 9, 8): 1, (7, 9, 9): 2, (8, 0, 0): -2, (8, 0, 1): 7, (8, 0, 2): 3, (8, 0, 3): 5, (8, 0, 4): 1, (8, 0, 5): -2, (8, 0, 6): 2, (8, 0, 7): 3, (8, 0, 8): 0, (8, 0, 9): 1, (8, 1, 0): 7, (8, 1, 1): 7, (8, 1, 2): 3, (8, 1, 3): 3, (8, 1, 4): 1, (8, 1, 5): 3, (8, 1, 6): 2, (8, 1, 7): 1, (8, 1, 8): 0, (8, 1, 9): 1, (8, 2, 0): 3, (8, 2, 1): 3, (8, 2, 2): 3, (8, 2, 3): 2, (8, 2, 4): 1, (8, 2, 5): 3, (8, 2, 6): 1, (8, 2, 7): 3, (8, 2, 8): 0, (8, 2, 9): 1, (8, 3, 0): 5, (8, 3, 1): 3, (8, 3, 2): 2, (8, 3, 3): 5, (8, 3, 4): 1, (8, 3, 5): 1, (8, 3, 6): 2, (8, 3, 7): 3, (8, 3, 8): 0, (8, 3, 9): 1, (8, 4, 0): 1, (8, 4, 1): 1, (8, 4, 2): 1, (8, 4, 3): 1, (8, 4, 4): 1, (8, 4, 5): 1, (8, 4, 6): 1, (8, 4, 7): 1, (8, 4, 8): 0, (8, 4, 9): 1, (8, 5, 0): -2, (8, 5, 1): 3, (8, 5, 2): 3, (8, 5, 3): 1, (8, 5, 4): 1, (8, 5, 5): -2, (8, 5, 6): 2, (8, 5, 7): 3, (8, 5, 8): 0, (8, 5, 9): 1, (8, 6, 0): 2, (8, 6, 1): 2, (8, 6, 2): 1, (8, 6, 3): 2, (8, 6, 4): 1, (8, 6, 5): 2, (8, 6, 6): 2, (8, 6, 7): 2, (8, 6, 8): 0, (8, 6, 9): 1, (8, 7, 0): 3, (8, 7, 1): 1, (8, 7, 2): 3, (8, 7, 3): 3, (8, 7, 4): 1, (8, 7, 5): 3, (8, 7, 6): 2, (8, 7, 7): 3, (8, 7, 8): 0, (8, 7, 9): 1, (8, 8, 0): 0, (8, 8, 1): 0, (8, 8, 2): 0, (8, 8, 3): 0, (8, 8, 4): 0, (8, 8, 5): 0, (8, 8, 6): 0, (8, 8, 7): 0, (8, 8, 8): 0, (8, 8, 9): 0, (8, 9, 0): 1, (8, 9, 1): 1, (8, 9, 2): 1, (8, 9, 3): 1, (8, 9, 4): 1, (8, 9, 5): 1, (8, 9, 6): 1, (8, 9, 7): 1, (8, 9, 8): 0, (8, 9, 9): 1, (9, 0, 0): -2, (9, 0, 1): 8, (9, 0, 2): -2, (9, 0, 3): 2, (9, 0, 4): -2, (9, 0, 5): -2, (9, 0, 6): -2, (9, 0, 7): 6, (9, 0, 8): -2, (9, 0, 9): 0, (9, 1, 0): 8, (9, 1, 1): 8, (9, 1, 2): 4, (9, 1, 3): 2, (9, 1, 4): 2, (9, 1, 5): 4, (9, 1, 6): 3, (9, 1, 7): 2, (9, 1, 8): 1, (9, 1, 9): 0, (9, 2, 0): -2, (9, 2, 1): 4, (9, 2, 2): -2, (9, 2, 3): 2, (9, 2, 4): -2, (9, 2, 5): 2, (9, 2, 6): -2, (9, 2, 7): 1, (9, 2, 8): -2, (9, 2, 9): 0, (9, 3, 0): 2, (9, 3, 1): 2, (9, 3, 2): 2, (9, 3, 3): 2, (9, 3, 4): 2, (9, 3, 5): 2, (9, 3, 6): 1, (9, 3, 7): 2, (9, 3, 8): 2, (9, 3, 9): 0, (9, 4, 0): -2, (9, 4, 1): 2, (9, 4, 2): -2, (9, 4, 3): 2, (9, 4, 4): -2, (9, 4, 5): 1, (9, 4, 6): -2, (9, 4, 7): 3, (9, 4, 8): -2, (9, 4, 9): 0, (9, 5, 0): -2, (9, 5, 1): 4, (9, 5, 2): 2, (9, 5, 3): 2, (9, 5, 4): 1, (9, 5, 5): -2, (9, 5, 6): 4, (9, 5, 7): 2, (9, 5, 8): 3, (9, 5, 9): 0, (9, 6, 0): -2, (9, 6, 1): 3, (9, 6, 2): -2, (9, 6, 3): 1, (9, 6, 4): -2, (9, 6, 5): 4, (9, 6, 6): -2, (9, 6, 7): 2, (9, 6, 8): -2, (9, 6, 9): 0, (9, 7, 0): 6, (9, 7, 1): 2, (9, 7, 2): 1, (9, 7, 3): 2, (9, 7, 4): 3, (9, 7, 5): 2, (9, 7, 6): 2, (9, 7, 7): 6, (9, 7, 8): 3, (9, 7, 9): 0, (9, 8, 0): -2, (9, 8, 1): 1, (9, 8, 2): -2, (9, 8, 3): 2, (9, 8, 4): -2, (9, 8, 5): 3, (9, 8, 6): -2, (9, 8, 7): 3, (9, 8, 8): -2, (9, 8, 9): 0, (9, 9, 0): 0, (9, 9, 1): 0, (9, 9, 2): 0, (9, 9, 3): 0, (9, 9, 4): 0, (9, 9, 5): 0, (9, 9, 6): 0, (9, 9, 7): 0, (9, 9, 8): 0, (9, 9, 9): 0}\n\ns = [int(x) for x in input()]\nif s[0] != 0:\n    for _ in range(10):\n        print('-1 ' * 10)\n    return\n\na = []\n\nfor i in range(1, len(s)):\n    a.append((s[i] - s[i - 1]) % 10)\n\n\ncounts = [0] * 10\nfor x in a:\n    counts[x] += 1\n\n\nfor i in range(10):\n    for j in range(10):\n        skip = False\n        count = 0\n        for x in range(10):\n            if counts[x]:\n                tr = d[(x, i, j)]\n                if tr == -2:\n                    print(-1, end=' ')\n                    skip = True\n                    break\n                else:\n                    count += tr * counts[x]\n        if skip:\n            continue\n        print(count, end=' ')\n    print()\n", "s = input()\ninf = 0x3f3f3f3f\n\nans = []\nfor i in range(10):\n\tans.append([-1]*10)\nfor i in range(10):\n\tfor j in range(i, 10):\n\t\tdist = [0] * 10\n\t\tfor k in range(10):\n\t\t\tdist[k]=[inf]*10\n\t\tfor k in range(10):\n\t\t\tdist[k][(k+i)%10]=1\n\t\t\tdist[k][(k+j)%10]=1\n\n\t\tfor k in range(10):\n\t\t\tfor ii in range(10):\n\t\t\t\tfor jj in range(10):\n\t\t\t\t\tdist[ii][jj] = min(dist[ii][jj],dist[ii][k]+dist[k][jj])\n\t\t\n\t\tp = 0\n\t\tcnt = 0\n\t\tfor k in range(1, len(s)):\n\t\t\tif dist[p][ord(s[k])-48] == inf:\n\t\t\t\tans[i][j]=ans[j][i]=-1\n\t\t\t\tbreak\n\t\t\tcnt += dist[p][ord(s[k])-48] - 1\n\t\t\tp = ord(s[k]) - 48\n\t\telse:\n\t\t\tans[i][j]=ans[j][i]=cnt\n\n\nfor arr in ans:\n\tfor a in arr:\n\t\tprint(a, end=' ')\n\n\tprint()\n\n", "from collections import deque\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef helper(a, b):\n    m = {}\n    queue = deque([(0, 0)])\n    while queue:\n        cur, cnt = queue.popleft()\n        cura = (cur+a) % 10\n        curb = (cur+b) % 10\n        if cura not in m:\n            m[cura] = cnt + 1\n            queue.append((cura, cnt + 1))\n        if curb not in m:\n            m[curb] = cnt + 1\n            queue.append((curb, cnt + 1))\n    return m\n\n\ns = list(map(int, input()))\nans = [[0] * 10 for i in range(10)]\n\nfor i in range(10):\n    for j in range(i, 10):\n        m = helper(min(i, j), max(i, j))\n        cnt = 0\n        for k in range(len(s)-1):\n            dis = ((s[k+1] - s[k]) % 10 + 10) % 10\n            if cnt == -1 or dis not in m:\n                cnt = -1\n            else:\n                cnt += m[dis] - 1\n        ans[i][j] = cnt\n        ans[j][i] = cnt\n\nfor i in range(10):\n    print(' '.join(map(str, ans[i])))\n", "from sys import stdin\nfrom sys import setrecursionlimit as SRL\n\nSRL(10 ** 7)\nrd = stdin.readline\nrrd = lambda: list(map(int, rd().strip().split()))\n\ns = str(rd().strip())\n\nans = [[0] * 11 for _j in range(11)]\n\nddp = [[[100000] * 11 for _k in range(11)] for kk in range(11)]\n\ntt = [0] * 11\n\nfor i in range(10):\n    for j in range(10):\n        for u in range(11):\n            for v in range(11):\n                if u == 0 and v == 0:\n                    continue\n                k = (i*u + j*v) % 10\n                ddp[i][j][k] = min(ddp[i][j][k], max(0,u+v-1))\n              \n\npre = 0\nfor i in range(1, len(s)):\n    t = ((int(s[i]) + 10) - pre) % 10\n    tt[t] += 1\n    pre = int(s[i])\n\n\nfor i in range(10):\n    asi = \"\"\n    for j in range(10):\n        for k in range(11):\n            if tt[k] and ddp[i][j][k] >= 80000:\n                ans[i][j] = -1\n                break\n            ans[i][j] += tt[k] * ddp[i][j][k]\n        asi = asi + str(ans[i][j]) + ' '\n    print(asi)\n\n", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nimport math\n\n\ndef main():\n    s = input().rstrip()\n    opt = [[[[math.inf for _ in range(10)] for _ in range(10)] for _ in range(10)] for _ in range(10)]\n    # opt[x][y][a][b] - x-y counter, transition from a to b\n    pairs = [[0 for _ in range(10)] for _ in range(10)]\n    for x in range(10):\n        for y in range(10):\n            for a in range(10):\n                for cntx in range(10):\n                    for cnty in range(10):\n                        dig = (a + cntx * x + cnty * y) % 10\n                        if cntx + cnty > 0:\n                            opt[x][y][a][dig] = min(opt[x][y][a][dig], cntx+cnty)\n    for i in range(1, len(s)):\n        pairs[int(s[i-1])][int(s[i])] += 1\n\n    res = [[0 for _ in range(10)] for _ in range(10)]\n    for x in range(10):\n        for y in range(10):\n            for p1 in range(10):\n                for p2 in range(10):\n                    p = pairs[p1][p2]\n                    if p > 0:\n                        if opt[x][y][p1][p2] == math.inf:\n                            res[x][y] = -1\n                        elif res[x][y] != -1:\n                           res[x][y] += p * (opt[x][y][p1][p2]-1)\n\n    for x in range(10):\n        print(*res[x])\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "s=input()\nmp=[0]*10\nfor i in range(1,len(s)):\n    x=(int(s[i])-int(s[i-1])+10)%10\n    mp[x]+=1\n\ndef tab(a,b):\n    tb=[1000]*10\n    for i in range(10):\n        for j in range(10):\n            if i==0 and j==0:\n                continue\n            x=(a*i+b*j)%10\n            tb[x]=min(tb[x],i+j)\n    return tb\n\nfor x in range(10):\n    for y in range(10):\n        tb=tab(x,y)\n        flg=True\n        for i in range(10):\n            if mp[i]>0 and tb[i]==1000:\n                flg=False\n                break\n        if flg==False:\n            print(-1,end=' ')\n            continue\n\n        tb=tab(x,y)\n        ans=0\n        for t in range(10):\n            ans+=mp[t]*(tb[t]-1)\n        print(ans,end=' ')\n    print()\n\n\n\n", "s=input()\nmp=[0]*10\nfor i in range(1,len(s)):\n    x=(int(s[i])-int(s[i-1])+10)%10\n    mp[x]+=1\n\ndef tab(a,b):\n    tb=[1000]*10\n    for i in range(10):\n        for j in range(10):\n            if i==0 and j==0:\n                continue\n            x=(a*i+b*j)%10\n            tb[x]=min(tb[x],i+j)\n    return tb\n\nfor x in range(10):\n    for y in range(10):\n        tb=tab(x,y)\n        ans=0\n        for t in range(10):\n            if mp[t]>0 and  tb[t]==1000:\n                print(-1, end=' ')\n                break\n            ans+=mp[t]*(tb[t]-1)\n        else:\n            print(ans,end=' ')\n    print()\n\n\n\n", "from sys import stdin\nfrom sys import setrecursionlimit as SRL\n\nSRL(10 ** 7)\nrd = stdin.readline\nrrd = lambda: list(map(int, rd().strip().split()))\n\ns = str(rd().strip())\n\nans = [[0] * 11 for _j in range(11)]\n\nddp = [[[100000] * 11 for _k in range(11)] for kk in range(11)]\n\ntt = [0] * 11\n\nfor i in range(10):\n    for j in range(10):\n        for u in range(11):\n            for v in range(11):\n                k = (i*u + j*v) % 10\n                ddp[i][j][k] = min(ddp[i][j][k], max(0,u+v-1))\n                if k == 0 and (u!=0 or v!=0):\n                    if u == 0 and v == 0:\n                        print(u,v)\n                    ddp[i][j][10] = min(ddp[i][j][10], max(0, u + v - 1))\n\n\npre = 0\nfor i in range(1, len(s)):\n    t = ((int(s[i]) + 10) - pre) % 10\n    if t == 0:\n        t = 10\n    tt[t] += 1\n    pre = int(s[i])\n\n\nfor i in range(10):\n    asi = \"\"\n    for j in range(10):\n        for k in range(11):\n            if tt[k] and ddp[i][j][k] >= 80000:\n                ans[i][j] = -1\n                break\n            ans[i][j] += tt[k] * ddp[i][j][k]\n        asi = asi + str(ans[i][j]) + ' '\n    print(asi)\n\n\n"]