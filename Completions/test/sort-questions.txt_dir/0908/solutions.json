["n = int(input())\nc = list(map(int, input().split(\" \")))\n\nnodes = dict()\nnodes[\"\"] = 0\n# print(nodes)\ndepth = 0\n\nwhile depth < n:\n\t# expand\n\tnew_nodes = dict()\n\ts = input()\n\tfor node in nodes.keys():\n\t\tif s >= node:\n\t\t\t# not reverse\n\t\t\tif s in new_nodes:\n\t\t\t\tnew_nodes[s] = min(new_nodes[s], nodes[node])\n\t\t\telse:\n\t\t\t\tnew_nodes[s] = nodes[node]\n\t\tif s[::-1] >= node:\n\t\t\t# not reverse\n\t\t\tif s[::-1] in new_nodes:\n\t\t\t\tnew_nodes[s[::-1]] = min(new_nodes[s[::-1]], nodes[node] + c[depth])\n\t\t\telse:\n\t\t\t\tnew_nodes[s[::-1]] = nodes[node] + c[depth]\n\n\tnodes = new_nodes\n\t# print(depth,nodes)\n\tdepth += 1\n\n# print(nodes)\nif len(nodes) > 0:\n\tprint(min(nodes.values()))\nelse:\n\tprint(-1)", "import sys\nline = sys.stdin.readlines()\nn = int(line[0])\nc = list(map(int, line[1].split()))\n\nno = (0, '')\nyes = (0, '')\nfor i in range(n):\n    s = line[i+2].rstrip('\\r\\n')\n    sr = s[::-1]\n    nn, ny, yn, yy = 1e16, 1e16, 1e16, 1e16\n    if s >= no[1]:\n        nn = no[0]\n    if sr >= no[1]:\n        ny = no[0] + c[i]\n    if s >= yes[1]:\n        yn = yes[0]\n    if sr >= yes[1]:\n        yy = yes[0] + c[i]\n    no = (min(nn, yn), s)\n    yes = (min(ny, yy), sr)\n\nans = min(no[0], yes[0])\nif ans > 1e15:\n    print(-1)\nelse:\n    print(ans)\n", "n = int(input())\ne = list(map(int, input().split()))\ndp = [[0, 0], [0, 0]]\ns_prev = input().strip()\ndp[0][1] = e[0]\nans = -1\nfor i in range(n - 1):\n    cur_pos = (i + 1) % 2\n    prev_pos = i % 2\n    s_cur = input().strip()\n    a, b = 0, 0\n    if dp[prev_pos][0] != -1 and s_prev <= s_cur:\n        a = dp[prev_pos][0]\n    else:\n        a = -1\n    if dp[prev_pos][1] != -1 and s_prev[::-1] <= s_cur:\n        b = dp[prev_pos][1]\n    else:\n        b = -1\n    if a == -1 and b == -1:\n        dp[cur_pos][0] = -1\n    elif a == -1:\n        dp[cur_pos][0] = b\n    elif b == -1:\n        dp[cur_pos][0] = a\n    else:\n        dp[cur_pos][0] = min(a, b)\n\n    if dp[prev_pos][0] != -1 and s_prev <= s_cur[::-1]:\n        a = dp[prev_pos][0] + e[i + 1]\n    else:\n        a = -1\n    if dp[prev_pos][1] != -1 and s_prev[::-1] <= s_cur[::-1]:\n        b = dp[prev_pos][1] + e[i + 1]\n    else:\n        b = -1\n    if a == -1 and b == -1:\n        dp[cur_pos][1] = -1\n    elif a == -1:\n        dp[cur_pos][1] = b\n    elif b == -1:\n        dp[cur_pos][1] = a\n    else:\n        dp[cur_pos][1] = min(a, b)\n\n    s_prev = s_cur\n\na = dp[(n + 1) % 2][0]\nb = dp[(n + 1) % 2][1]\nif a == -1 and b == -1:\n    print(-1)\nelif a == -1:\n    print(b)\nelif b == -1:\n    print(a)\nelse:\n    print(min(a, b))", "#!/usr/bin/env python3\n\nimport sys\n\nn = int(input())\nc = [int(x) for x in input().split()]\ns = [x.strip() for x in sys.stdin.readlines()]\nr = [x[::-1] for x in s]\n\nh = [[None, None] for _ in range(n)]\n\nh[0][0] = 0\nh[0][1] = c[0]\n\nfor i in range(1, n):\n    p, q = s[i], s[i][::-1]\n    if s[i-1] <= p and h[i-1][0] is not None:\n        h[i][0] = h[i-1][0]\n    if r[i-1] <= p:\n        if h[i-1][1] is not None and (h[i][0] is None or h[i][0] > h[i-1][1]):\n            h[i][0] = h[i-1][1]\n    if s[i-1] <= q and h[i-1][0] is not None:\n        h[i][1] = h[i-1][0] + c[i]\n    if r[i-1] <= q:\n        if h[i-1][1] is not None and (h[i][1] is None or h[i][1] > h[i-1][1] + c[i]):\n            h[i][1] = h[i-1][1] + c[i]\n\np, q = h[n-1][0], h[n-1][1]\nif p is not None and q is not None:\n    print(min(p, q))\nelif p is not None:\n    print(p)\nelif q is not None:\n    print(q)\nelse:\n    print(-1)\n", "n = int(input())\nC = [int(i) for i in input().split()]\ninf = sum(C) * 2\nans = inf\na, b = 0, C[0]\nprev = input()\nrprev = prev[::-1]\nfor i in range(1, n):\n    cur = input()\n    rcur = cur[::-1]\n    p, q, r, s = inf, inf, inf, inf\n    if prev <= cur:\n        p = a\n    if prev <= rcur:\n        q = a + C[i]\n    if rprev <= cur:\n        r = b\n    if rprev <= rcur:\n        s = b + C[i]\n    a = min(p, r)\n    b = min(q, s)\n    prev = cur\n    rprev = rcur\n\nans = min(a, b)\nif ans == inf:\n    print(-1)\nelse:\n    print(ans)\n", "n = int(input())\n\nc = input().split(\" \")\n\nfor i in range(n):\n    c[i] = int(c[i])\n\nnorm = [\"\" for i in range(n)]\nrev = [\"\" for i in range(n)]\n\nfor i in range(n):\n    norm[i] = input()\n    rev[i] = norm[i][::-1]\n\nMAX = 1e18\n\ndp = [[MAX for i in range(2)] for i in range(n)]\ndp[0][0] = 0\ndp[0][1] = c[0]\n\nfor i in range(1, n):\n    if norm[i] >= rev[i-1]:\n        dp[i][0] = min(dp[i][0], dp[i-1][1])\n    if norm[i] >= norm[i-1]:\n        dp[i][0] = min(dp[i][0], dp[i-1][0])\n    if rev[i] >= rev[i-1]:\n        dp[i][1] = min(dp[i][1], dp[i-1][1]+c[i])\n    if rev[i] >= norm[i-1]:\n        dp[i][1] = min(dp[i][1], dp[i-1][0]+c[i])\n\nans = min(dp[n-1][0], dp[n-1][1])\nif ans == MAX:\n    print(-1)\nelse:\n    print(ans)", "n = int(input())\nc = [int(x) for x in input().split()]\nsumc = [0, 0]\nlastWord = ['','']\nt = [True, True]\nnewT = [True, True]\nnewSumc = [0, 0]\nfor i in range(n):\n    s1 = input()\n    s = s1\n    if (t[0] and (s >= lastWord[0])) and (t[1] and (s >= lastWord[1])):\n        newSumc[0] = min(sumc[1], sumc[0])\n        newT[0] = True\n    elif ((t[0] and (s >= lastWord[0]))):\n        newSumc[0] = sumc[0]    \n        newT[0] = True\n    elif t[1] and (s >= lastWord[1]):\n        newSumc[0] = sumc[1]\n        newT[0] = True   \n    else:\n        newT[0] = False\n    s2 = s1[::-1]\n    s = s2\n    if t[0] and (s >= lastWord[0]):\n        if t[1] and (s >= lastWord[1]):\n            newSumc[1] = min(sumc[0], sumc[1]) + c[i]\n        else:\n            newSumc[1] = sumc[0] + c[i]\n        newT[1] = True\n    elif t[1] and (s >= lastWord[1]):\n        newSumc[1] = sumc[1] + c[i]\n        newT[1] = True\n    else:\n        newT[1] = False\n    lastWord = [s1, s2]\n    t[0] = newT[0]\n    t[1] = newT[1]\n    sumc[0] = newSumc[0]\n    sumc[1] = newSumc[1]\n    if not(t[0] or t[1]):\n        print(-1)\n        return\nif (t[0] and t[1]):\n    print(min(sumc[0],sumc[1]))\nelif (t[0]):\n    print(sumc[0])\nelif (t[1]):\n    print(sumc[1])", "from sys import stdin, stdout\nINF = float('inf')\nn = int(stdin.readline())\nprices = list(map(int, stdin.readline().split()))\nstrings = []\nfor i in range(n):\n    strings.append(stdin.readline().strip())\ndp = [[INF, INF, INF, INF] for i in range(n)]\nfor i in range(n - 1):\n    if not i:\n        if strings[i] <= strings[i + 1]:\n            dp[i][0] = 0\n        if strings[i][::-1] <= strings[i + 1]:\n            dp[i][1] = prices[i]\n        if strings[i] <= strings[i + 1][::-1]:\n            dp[i][2] = prices[i + 1]\n        if strings[i][::-1] <= strings[i + 1][::-1]:\n            dp[i][3] = prices[i] + prices[i + 1]\n    else:\n        if strings[i] <= strings[i + 1]:\n            dp[i][0] = min(dp[i - 1][:2])\n        if strings[i][::-1] <= strings[i + 1]:\n            dp[i][1] = min(dp[i - 1][2:])\n        if strings[i] <= strings[i + 1][::-1]:\n            dp[i][2] = min(dp[i - 1][:2]) + prices[i + 1]\n        if strings[i][::-1] <= strings[i + 1][::-1]:\n            dp[i][3] = min(dp[i - 1][2:]) + prices[i + 1]\n\nif min(dp[n - 2]) >= INF:\n    stdout.write('-1')\nelse:\n    stdout.write(str(min(dp[n - 2])))", "import sys\nline = sys.stdin.readlines()\nn = int(line[0])\nc = list(map(int, line[1].split()))\n\nINF = 1e16\np, pr = '', ''\nc0, cr = 0, 0\nfor i in range(n):\n    s = line[i+2].rstrip('\\r\\n')\n    sr = s[::-1]\n    c00 = c0 if p  <= s else INF\n    cr0 = cr if pr <= s else INF\n    c0r = c0 + c[i] if p  <= sr else INF\n    crr = cr + c[i] if pr <= sr else INF\n    \n    p, pr = s, sr\n    c0, cr = min(c00, cr0), min(c0r, crr)\n\nans = min(c0, cr)\nif ans >= INF:\n    print(-1)\nelse:\n    print(ans)\n", "n = int(input())\nN = [0] + list(map(int,input().split()))\n\nS = [[\"\"]*2 for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    s = input()\n    S[i] = [s, s[::-1]]\n    \nINF = 10 ** 15\n\nF1 = [[INF] * 2 for i in range(n + 1)]\nF2 = [[INF] * 2 for i in range(n + 1)]\n\nF1[1][0] = 0\nF1[1][1] = N[1]\nF2[1][0] = 0\nF2[1][1] = N[1]\n\nfor i in range(2, n + 1):\n    #print(S[i], S[i -1])\n    if S[i][0] >= S[i-1][0] :\n        F1[i][0] = min(F1[i-1][0], F2[i-1][0])\n        #print('1-- ', i, S[i][0], S[i -1][0], F1[i][0])\n \n    if S[i][0] >= S[i-1][1] :\n        F2[i][0] = min(F1[i-1][1], F2[i-1][1])\n        #print('2-- ', i,  S[i][0], S[i -1][1], F2[i][0])\n            \n    if S[i][1] >= S[i-1][0]:\n        F1[i][1] = min(F1[i-1][0], F2[i-1][0]) + N[i]\n        #print('3-- ', i,  S[i][1], S[i -1][0], F1[i][1])\n        \n    if S[i][1] >= S[i-1][1] :\n        F2[i][1] = min(F1[i- 1][1], F2[i-1][1])  + N[i]\n        #print(F1[i][1], F2[i-1][1])\n        #print('4-- ', i,  S[i][1], S[i -1][1], F2[i][1])\n    \n#for i in range(n):\n#    print('--', F1[i], F2[i])\n\n\n\nif min(F1[n][0], F1[n][1], F2[n][0], F2[n][1]) == INF:\n    print(-1)\nelse:\n    print(min(F1[n][0], F1[n][1], F2[n][0], F2[n][1]))", "def cmp(a, b, c):\n    if b == -1:\n        return a\n    if a == -1 or b + c < a:\n        return b + c\n    return a\n\nn = int(input())\ncs = list(map(int, input().split()))\ndp = [[-1, -1] for i in range(n)]\n\ndp[0][0] = 0\ndp[0][1] = cs[0]\n\nlast = input()\nfor i in range(1, n):\n    s = input()\n    rlast = last[::-1]\n    rs = s[::-1]\n\n    if s >= last:\n        dp[i][0] = cmp(dp[i][0], dp[i-1][0], 0)\n    if s >= rlast:\n        dp[i][0] = cmp(dp[i][0], dp[i-1][1], 0)\n    if rs >= last:\n        dp[i][1] = cmp(dp[i][1], dp[i-1][0], cs[i])\n    if rs >= rlast:\n        dp[i][1] = cmp(dp[i][1], dp[i-1][1], cs[i])\n    \n    last = s\n\nif dp[n-1][0] == -1:\n    print(dp[n-1][1])\nelif dp[n-1][1] == -1:\n    print(dp[n-1][0])\nelse:\n    print(min(dp[n-1][0], dp[n-1][1]))", "n = int(input())\n\nc = [int(s) for s in input().split(\" \")]\n\nC_rev = c[0]\nC_nrev = 0\n\nlast_s = input()\nlast_s_rev = last_s[::-1]\n\nfor i in range(1,n):\n    s = input()\n    s_rev = s[::-1]\n    new_C_nrev = float(\"inf\")\n    if last_s <= s:\n        new_C_nrev = min(new_C_nrev, C_nrev)\n    if last_s_rev <= s:\n        new_C_nrev = min(new_C_nrev, C_rev)\n\n    new_C_rev = float(\"inf\")\n    if last_s <= s_rev:\n        new_C_rev = min(new_C_rev, C_nrev + c[i])\n    if last_s_rev <= s_rev:\n        new_C_rev = min(new_C_rev, C_rev + c[i])\n\n    if min(C_rev, C_nrev) == float(\"inf\"):\n        break\n\n    C_rev = new_C_rev\n    C_nrev = new_C_nrev\n\n    last_s = s\n    last_s_rev = s_rev\n\nprint(-1 if min(C_rev, C_nrev) == float(\"inf\") else min(C_rev, C_nrev))\n", "n = int(input())\nc = list(map(int, input().split()))\n\ns1 = ''\ns2 = ''\nINF = 1e16\nc1 = 0\nc2 = 0\n\nfor i in range(n):\n    s = input()\n    sr = s[::-1]\n    c11 = c1 if s1 <= s else INF\n    c21 = c2 if s2 <= s else INF\n    c12 = c1+c[i] if s1 <= sr else INF\n    c22 = c2+c[i] if s2 <= sr else INF\n    s1 = s\n    s2 = sr\n    c1 = min(c11, c21)\n    c2 = min(c12, c22)\n    \nans = min(c1, c2)\nif ans >= INF:\n    print(-1)\nelse:\n    print(ans)\n", "INF = 10**18\n\n\ndef read():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, = read()\n    c = read()\n\n    a = []\n    b = []\n    for i in range(0, n):\n        s = input()\n        a.append(s)\n        b.append(s[::-1])\n\n    dp = [[0, 0] for _ in range(0, n)]\n    dp[0][0] = 0\n    dp[0][1] = c[0]\n\n    for i in range(1, n):\n        dp[i][0] = INF\n        dp[i][1] = INF\n        if a[i] >= a[i - 1]:\n            dp[i][0] = min(dp[i][0], dp[i - 1][0])\n        if a[i] >= b[i - 1]:\n            dp[i][0] = min(dp[i][0], dp[i - 1][1])\n        if b[i] >= a[i - 1]:\n            dp[i][1] = min(dp[i][1], dp[i - 1][0] + c[i])\n        if b[i] >= b[i - 1]:\n            dp[i][1] = min(dp[i][1], dp[i - 1][1] + c[i])\n\n    res = min(dp[n - 1][0], dp[n - 1][1])\n    print(res == INF and -1 or res)\n\nmain()", "n = int(input())\nc = list(map(int,input().split()))\na = []\nfor _ in range(n):\n    a.append(input())\n\ndp = [[1000000000000000000]*2 for x in range(200000)]\n#print(dp)\ndp[0][0] = 0\ndp[0][1] = c[0]\n\nfor i in range(1,n):\n    if a[i-1] <= a[i] and dp[i-1][0] < dp[i][0]:\n        dp[i][0] = dp[i-1][0]\n    if a[i-1][::-1] <= a[i] and dp[i-1][1] < dp[i][0]:\n        dp[i][0] = dp[i-1][1]\n    if a[i-1] <= a[i][::-1] and dp[i-1][0] + c[i] < dp[i][1]:\n        dp[i][1] = dp[i-1][0] + c[i]\n    if a[i-1][::-1] <= a[i][::-1] and dp[i-1][1] + c[i] < dp[i][1]:\n        dp[i][1] = dp[i-1][1] + c[i]\n\n\nif dp[n-1][0] == 1000000000000000000 and dp[n-1][1] ==1000000000000000000:\n    print(-1)\n    return\nprint(min(dp[n-1][0],dp[n-1][1]))\n", "import os, sys, math\nfrom _thread import start_new_thread\nfrom bisect import bisect_right\n\nclass pair:\n    def __init__(self, a):\n        self.first, self.second = a[0], a[1]\n\ndef main():\n    INF = 10**18\n    n = int(input())\n    c = list(map(int, input().split()))\n    a, b = [], []\n    for i in range(n):\n        s = input()\n        a.append(s)\n        b.append(s[::-1])\n    dp = [pair([INF, INF]) for i in range(0, n)]\n    dp[0].first, dp[0].second = 0, c[0]\n    for i in range(1, n):\n        dp[i].first = INF\n        dp[i].second = INF\n        if a[i] >= a[i - 1]:\n            dp[i].first = min(dp[i].first, dp[i - 1].first)\n        if a[i] >= b[i - 1]:\n            dp[i].first = min(dp[i].first, dp[i - 1].second)\n        if b[i] >= a[i - 1]:\n            dp[i].second = min(dp[i].second, dp[i - 1].first + c[i])\n        if b[i] >= b[i - 1]:\n            dp[i].second = min(dp[i].second, dp[i - 1].second + c[i])\n    res = min(dp[n - 1].first, dp[n - 1].second)\n    print([-1, res][res != INF])\n\ndef __starting_point():\n    return(int(main() or 0))\n__starting_point()", "import math as m\n\nn = int(input());\ncost = list(map(int, input().split()));\ns = [];\nsr = [];\nfor i in range(n):\n    s.append(list(input()));\n    sr.append(list(reversed(s[i])));\n\ndp = [[0, 0] for i in range(n + 1)];\nflag = 0;\ndp[0][1] = cost[0];\nfor i in range(1, n):\n    if dp[i - 1][0] == -1 and dp[i - 1][1] == -1:\n        flag = 1;\n        break;\n\n    elif dp[i - 1][0] != -1 and dp[i - 1][1] == -1:\n        if s[i] >= s[i - 1]:\n            dp[i][0] = dp[i - 1][0];\n        else:\n            dp[i][0] = -1;\n        if sr[i] >= s[i - 1]:\n            dp[i][1] = dp[i - 1][0] + cost[i];\n        else:\n            dp[i][1] = -1;\n\n    elif dp[i - 1][0] == -1 and dp[i - 1][1] != -1:\n        if s[i] >= sr[i - 1]:\n            dp[i][0] = dp[i - 1][1];\n        else:\n            dp[i][0] = -1;\n        if sr[i] >= sr[i - 1]:\n            dp[i][1] = dp[i - 1][1] + cost[i];\n        else:\n            dp[i][1] = -1;\n    else:\n        if s[i] >= s[i - 1] and s[i] >= sr[i - 1]:\n            dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]);\n        elif s[i] >= s[i - 1] and s[i] < sr[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n        elif s[i] < s[i - 1] and s[i] >= sr[i - 1]:\n            dp[i][0] = dp[i - 1][1];\n        else:\n            dp[i][0] = -1;\n\n        if sr[i] >= s[i - 1] and sr[i] >= sr[i - 1]:\n            dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + cost[i];\n        elif sr[i] >= s[i - 1] and sr[i] < sr[i - 1]:\n            dp[i][1] = dp[i - 1][0] + cost[i];\n        elif sr[i] < s[i - 1] and sr[i] >= sr[i - 1]:\n            dp[i][1] = dp[i - 1][1] + cost[i];\n        else:\n            dp[i][1] = -1;\n\nif flag == 1:\n    print((-1));\nelse:\n    res = max(dp[n - 1][0], dp[n - 1][1]) if min(dp[n - 1][0], dp[n - 1][1]) == -1 else min(dp[n - 1][0], dp[n - 1][1]);\n    print(res);\n\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nn=int(input())\nC=tuple(map(int,input().split()))\nA=tuple(input()for _ in range(n))\nB=tuple(A[i][::-1]for i in range(n))\nINF=1<<47\na=0\nb=C[0]\nfor i in range(1,n):\n\tc=INF if B[i]<A[i-1]else C[i]+a\n\tif A[i]<A[i-1]:a=INF\n\tif B[i-1]<=A[i]:a=min(a,b)\n\tif B[i-1]<=B[i]:c=min(c,C[i]+b)\n\tb=c\n\tif INF<=a and INF<=b:break\nc=min(a,b)\nprint(c if INF>c else-1)\n", "#!/usr/bin/env python3.5\nimport sys\n\ndef read_data():\n    n = int(next(sys.stdin))\n    prices = list(map(int, next(sys.stdin).split()))\n    vocabulary = []\n    for i in range(n):\n        vocabulary.append(next(sys.stdin).strip())\n    return n, prices, vocabulary\n\n\ndef apply_op(sNext, sPrev, curCost, optCost):\n    if sNext >= sPrev:\n        if optCost is None or curCost < optCost:\n            return curCost\n    return optCost\n\n\ndef solve(n, prices, vocabulary):\n    opt_0, opt_1 = 0, prices[0]\n    prevStr = vocabulary[0]\n    prevStrReversed = \"\".join(reversed(prevStr))\n    for curStr, curPrice in zip(vocabulary[1:], prices[1:]):\n        curStrReversed = \"\".join(reversed(curStr))\n        n_opt0, n_opt1 = None, None\n        if opt_0 is not None:\n            n_opt0 = apply_op(curStr, prevStr, opt_0, n_opt0)\n            n_opt1 = apply_op(curStrReversed, prevStr, opt_0 + curPrice, n_opt1)\n        if opt_1 is not None:\n            n_opt0 = apply_op(curStr, prevStrReversed, opt_1, n_opt0)\n            n_opt1 = apply_op(curStrReversed, prevStrReversed, opt_1 + curPrice, n_opt1)\n        opt_0, opt_1 = n_opt0, n_opt1\n        prevStr, prevStrReversed = curStr, curStrReversed\n        if opt_0 is None and opt_1 is None:\n            break\n    if opt_0 is None:\n        return opt_1\n    if opt_1 is None:\n        return opt_0\n    return min(opt_0, opt_1)\n\n\ndef __starting_point():\n    n, prices, vocabulary = read_data()\n    sorting_cost = solve(n, prices, vocabulary)\n    if sorting_cost != None:\n        print(sorting_cost)\n    else:\n        print(-1)\n\n__starting_point()", "n=int(input())\nc=list(map(int,input().split()))\ns=['']*n\nINF=int(1e15)\nnot_rev=[INF]*n\nrev=[INF]*n\nfor i in range(n):\n        s[i]=input()\nnot_rev[0]=0\nrev[0]=c[0]\nfor i in range(1,n):\n        if s[i-1]<=s[i]: not_rev[i]=min(not_rev[i],not_rev[i-1])\n        if s[i-1][::-1]<=s[i]: not_rev[i]=min(not_rev[i],rev[i-1])\n        if s[i-1]<=s[i][::-1]: rev[i]=min(rev[i],not_rev[i-1])\n        if s[i-1][::-1]<=s[i][::-1]: rev[i]=min(rev[i],rev[i-1])\n        rev[i]+=c[i]\nprint(-1 if min(rev[n-1],not_rev[n-1])==INF else min(rev[n-1],not_rev[n-1]))\n", "n = int(input())\nc = list(map(int, input().split()))\ns = []\nfor _ in range(n):\n    s.append(input())\ndp = [[float('inf')] * 2 for _ in range(n)]\ndp[0][0] = 0\ndp[0][1] = c[0]\nfor i in range(1, n):\n    for j in range(2):\n        cost = float('inf')\n        base_cost = 0\n        s_ = s[i]\n        if j == 1:\n            base_cost = c[i]\n            s_ = s_[::-1]\n        for k in range(2):\n            target_cost = dp[i - 1][k]\n            target_s = s[i - 1]\n            if k == 1:\n                target_s = target_s[::-1]\n            if target_s <= s_:\n                cost = min(cost, base_cost + target_cost)\n            else:\n                cost = min(cost, float('inf'))\n        dp[i][j] = cost\nans = min(dp[n - 1][0], dp[n - 1][1])\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)\n", "n = int(input())\nc = list(map(int, input().split()))\ns = []\nfor _ in range(n):\n    s.append(input())\ndp = [[float('inf')] * n for _ in range(2)]\ndp[0][0] = 0\ndp[1][0] = c[0]\nfor i in range(1, n):\n    for j in range(2):\n        cost = float('inf')\n        base_cost = 0\n        s_ = s[i]\n        if j == 1:\n            base_cost = c[i]\n            s_ = s_[::-1]\n        for k in range(2):\n            target_cost = dp[k][i - 1]\n            target_s = s[i - 1]\n            if k == 1:\n                target_s = target_s[::-1]\n            if target_s <= s_:\n                cost = min(cost, base_cost + target_cost)\n            else:\n                cost = min(cost, float('inf'))\n        dp[j][i] = cost\nans = min(dp[0][n - 1], dp[1][n - 1])\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)\n", "\nLO_C= 0\nLO_S= 1\nHI_C= 2\nHI_S= 3\n\ndef main():\n    n = int(input())\n    costs = list([int(x) for x in input().split()])\n    memo = list()\n    for i in range(n):\n        s = input().strip()\n        r = s[::-1]\n        if s <= r:\n            lo, lo_c, hi, hi_c = s, 0, r, costs[i]\n        else:\n            lo, lo_c, hi, hi_c = r, costs[i], s, 0\n        if not memo:\n            memo.append((lo_c, lo, hi_c, hi))\n        else:\n            if hi >= memo[-1][LO_S]:\n                nxt_hi = hi\n                if hi < memo[-1][HI_S] or memo[-1][LO_C] <= memo[-1][HI_C]:\n                    nxt_hi_c = hi_c + memo[-1][LO_C]\n                else:\n                    nxt_hi_c = hi_c + memo[-1][HI_C]\n            else:\n                return -1;\n            if lo >= memo[-1][LO_S]:\n                nxt_lo = lo\n                if lo < memo[-1][HI_S] or memo[-1][LO_C] <= memo[-1][HI_C]:\n                    nxt_lo_c = lo_c + memo[-1][LO_C]\n                else:\n                    nxt_lo_c = lo_c + memo[-1][HI_C]\n            else:\n                nxt_lo = nxt_hi\n                nxt_lo_c = nxt_hi_c\n            memo.append((nxt_lo_c, nxt_lo, nxt_hi_c, nxt_hi))\n    return min(memo[-1][LO_C], memo[-1][HI_C])\n\n\ndef __starting_point():\n    print(main())\n\n__starting_point()", "\nLO_C= 0\nLO_S= 1\nHI_C= 2\nHI_S= 3\n\ndef main():\n    n = int(input())\n    costs = list([int(x) for x in input().split()])\n    memo = list()\n    for i in range(n):\n        s = input().strip()\n        r = s[::-1]\n        if s <= r:\n            lo, lo_c, hi, hi_c = s, 0, r, costs[i]\n        else:\n            lo, lo_c, hi, hi_c = r, costs[i], s, 0\n        if not memo:\n            memo.append((lo_c, lo, hi_c, hi))\n        else:\n            if hi >= memo[-1][LO_S]:\n                nxt_hi = hi\n                if hi < memo[-1][HI_S] or memo[-1][LO_C] <= memo[-1][HI_C]:\n                    nxt_hi_c = hi_c + memo[-1][LO_C]\n                else:\n                    nxt_hi_c = hi_c + memo[-1][HI_C]\n            else:\n                return -1;\n            if lo >= memo[-1][LO_S]:\n                nxt_lo = lo\n                if lo < memo[-1][HI_S] or memo[-1][LO_C] <= memo[-1][HI_C]:\n                    nxt_lo_c = lo_c + memo[-1][LO_C]\n                else:\n                    nxt_lo_c = lo_c + memo[-1][HI_C]\n            else:\n                nxt_lo = nxt_hi\n                nxt_lo_c = nxt_hi_c\n            memo.append((nxt_lo_c, nxt_lo, nxt_hi_c, nxt_hi))\n    return min(memo[-1][LO_C], memo[-1][HI_C])\n\n\ndef __starting_point():\n    print(main())\n\n__starting_point()", "def main():\n    n, l = int(input()), [(0, \"\")]\n    for c in map(int, input().split()):\n        s = input()\n        l = [(x + dx, b) for dx, b in ((0, s), (c, s[::-1])) for x, a in l if a <= b]\n        l.sort()\n        for i in range(len(l) - 1, 0, -1):\n            for j in range(i):\n                if l[i][1] >= l[j][1]:\n                    del l[i]\n                    break\n    print(min(l)[0] if l else -1)\n\n\ndef __starting_point():\n    main()\n__starting_point()"]