["\nn,pos= (int(x) for x in input('').split())\ns = input('')\n\ndef dis(a, b):\n    a=ord(a)\n    b=ord(b)\n    return min(abs(a - b), abs(a+26-b), abs(b+26-a))\n\nd = [dis(s[i], s[len(s)-i-1]) for i in range((len(s) + 1)//2)]\npos -= 1\nif pos >= (len(s) + 1) // 2:\n    pos = len(s) - pos - 1\n#print(pos)\n\n#print(d)\nfor rightmost, v in enumerate(reversed(d)):\n    if v!=0:\n        rightmost = len(d) - rightmost - 1\n        break\nfor leftmost, v in enumerate(d):\n    if v!=0:\n        break\n#print(leftmost, rightmost)\nans = min(abs(rightmost - pos) + rightmost - leftmost, abs(pos - leftmost) + rightmost - leftmost) + sum(d)\nif sum(d) == 0:\n    print(0)\nelse:\n    print(ans)\n\n", "n,p = list(map(int,input().split()))\np -= 1\nif p >= n//2: p = n-1-p\ns = input()\nd = [abs(ord(s[i])-ord(s[n-1-i])) for i in range(n//2)]\nd = [min(x,26-x) for x in d]\nfirst,last = -1,-1\nfor i in range(len(d)):\n  if d[i] > 0:\n    if first==-1: first = i\n    last = i\na = 0 if first==-1 else min(abs(p-first), abs(p-last)) + (last-first) + sum(d)\nprint(a)\n", "#fin = open(\"input.txt\")\nn, p = list(map(int, input().split()))\ns = input().rstrip()\n#n, p = map(int, fin.readline().split())\n#s = fin.readline().rstrip()\np = min(p, n - p + 1)\nCount = 0\nM = l = r = X = p\nfor i in range(0, n // 2):\n\t#print(abs(ord(s[i]) - ord(s[-i - 1])), abs(ord('z') - max(ord(s[i]), ord(s[-i - 1])) + min(ord(s[i]), ord(s[-i - 1]) - ord('a') + 1) % 26), i)\n\tC = min(abs(ord(s[i]) - ord(s[-i - 1])), abs(ord('z') - max(ord(s[i]), ord(s[-i - 1])) + min(ord(s[i]), ord(s[-i - 1])) - ord('a') + 1) % 26)\n\tif C > 0:\n\t\tif (i + 1 < p):\n\t\t\tif (M == p):\n\t\t\t\tM = i + 1\n\t\t\tl = i + 1\n\t\telif (i + 1 > p and r == p):\n\t\t\tr = i + 1\n\t\tX = i + 1\n\tCount += C\n#print(Count)\n#print(M, l, r, min(X * 2 - p - M, X + p - M * 2))\n#print(X * 2 - p - M, X + p - M * 2)\nprint(Count + min(abs(X - p) + X - M, X + p - M * 2))\n", "def distchar(a,b):\n    a = ord(a)-ord('a')\n    b = ord(b)-ord('a')\n    if a>b: a,b = b,a\n    return min(b-a,a+26-b)\n\ndef dist(i,p,n):\n    if p>=i:\n        sign = 1\n    else:\n        sign = -1\n    return sign*min(abs(p-i),abs((n-1-i)-p))\n\n        \n[n,p] = [int(s) for s in input().split()]\ns = input().strip()\n\np = p-1 # change to 0-based\n\n\n##print(s)\n\ncount1 = 0\nd = [0 for i in range(n)]\nfor i in range(n//2):    \n    di = distchar(s[i],s[n-1-i])\n    if di>0:\n        d[i],d[n-1-i] = di,di\n        count1 += di\n\nif p>n//2: p = n-1-p\n\ni1=0\nwhile i1<p and d[i1]==0: i1+=1\ni2=(n-1)//2\nwhile i2>p and d[i2]==0: i2-=1\nd1 = dist(i1,p,n)\nd2 = dist(i2,p,n)\nif d1*d2>0:\n    count = count1 + max(abs(d1),abs(d2))\nelse:\n    count = count1 + 2*min(abs(d1),abs(d2)) + max(abs(d1),abs(d2))\n    \nprint(count)\n\n    \n##        print(' '.join(map(str,A[i])))\n    \n\n", "import math\n\n(n, p) = map(int, input().split(' '))\nS = input()\np = min(p-1,n-p)\n\ns1 = S[0:int(n/2)]\ns2 = S[-int(n/2):]\ns2 = s2[::-1]\nif s1==s2:\n\tprint(0)\n\treturn\nl = int(n/2)\nr = 0\nans = 0\nfor i in range(0, int(n/2)):\n\tif s1[i]!=s2[i]:\n\t\tif i<l:\n\t\t\tl = i\n\t\tif i>r:\n\t\t\tr = i\n\t\tans += int( min(abs(ord(s1[i])-ord(s2[i])), abs(abs(ord(s1[i])-ord(s2[i]))-26) ))\nans += int( abs(r-l)+min(abs(r-p),abs(l-p)))\nprint(ans)", "def dc(c, d):\n    x, y = ord(c) - ord('a'), ord(d) - ord('a')\n    return min(abs(x - y), 26 - max(x, y) + min(x, y))\ndef ds(s1, s2):\n    r = 0\n    a, b = 10 ** 5, -1\n    for i in range(len(s1)):\n        c, d = s1[i], s2[i]\n        r += dc(c, d)\n        if c != d:\n            a = min(a, i)\n            b = max(b, i)\n    return a, b, r\nn, p = list(map(int, input().split()))\ns = input()\np -= 1\nm = n // 2\ny = m + (1 if n % 2 else 0)\ns1, s2 = s[:m], s[y:][::-1]\na, b, r = ds(s1, s2)\n#print(s1, s2, a, b, r)\nd1 = min(abs(p - a), abs(p - b)) + abs(a - b)\nd2 = min(abs(p - y - m + 1 + a), abs(p - y - m + 1 + b)) + abs(a - b)\n#print(d1, d2)\nif r == 0:\n    print(0)\nelse:\n    print(min(d1, d2) + r)\n", "n,p=list(map(int,input().split()))\ns=input()\nans=0\np-=1\nif(n%2==1 and p==n//2 and n!=1):\n    p-=1\n    ans+=1\ncnt=0\nfor i in range(n):\n    if(n-1-i<=i):\n        break\n    if(s[i]!=s[n-1-i]):\n        cnt+=1\n\nif(p>=n//2 and n!=1):\n    h=\"\"\n    for i in range(n-1,-1,-1):\n        h+=s[i]\n    s=h\n    p=n-1-p\nr=0\nl=0\nrr=0\nll=0\nfor i in range(p):\n    if(s[i]!=s[n-1-i]):\n        ans+=min(26-abs(ord(s[i])-ord(s[n-1-i])),abs(ord(s[i])-ord(s[n-1-i])))\n        r+=1\n        rr=max(rr,p-i)\nfor i in range(p+1,n//2):\n    if(s[i]!=s[n-1-i]):\n        ans+=min(26-abs(ord(s[i])-ord(s[n-1-i])),abs(ord(s[i])-ord(s[n-1-i])))\n        l+=1\n        ll=max(ll,i-p)\nans+=min(26-abs(ord(s[p])-ord(s[n-1-p])),abs(ord(s[p])-ord(s[n-1-p])))\nans+=ll+rr+min(ll,rr)\nprint(ans)\n", "s = input()\np = int(s.split()[1])\ns = input()\nn = int(len(s))\na = []\nif p > n//2:\n    p = n - p + 1\nsum = 0\n\nif n == 1:\n    print('0')\n    quit()\n\nfor i in range(n//2):\n    j = int(n-i-1)\n    q = abs( ord(s[j]) - ord(s[i]) )\n    #print(str(ord(s[i]))+' , '+str(ord(s[j])))\n    #print(str(q)+' V '+str(26-q))\n    a.append ( min(q,26-q))\n    sum += a[i]\n    \n#print(sum)\ni = 0\nwhile (a[i] == 0) & (i<p-1) :\n    i += 1\nif i == p - 1:\n    i = 0\nelse:\n    i = p - i - 1\n#print('i1 : '+str(i))\nj = n//2 - 1\nwhile (a[j] == 0) & (j>p-1):\n    j -= 1\nif j == p - 1:\n    j = 0\nelse:\n    j = j - p + 1\n#print('i2 : '+str(j))\nsum += min(i,j)*2 + max(i,j)\nprint(str(sum))", "def calc(c1, c2):\n    x = abs(ord(c1)-ord(c2))\n    return min(x, 26-x)\n\na, b = list(map(int, input().split(' ')))\nstrx = input()\n\nif a % 2 == 0:\n    if b > a // 2:\n        b = a + 1 - b\n    left = strx[:a // 2]\n    right = strx[a // 2:]\n    right = right[::-1]\n    dist = [calc(left[i], right[i]) for i in range(a // 2)]\n    indx = b - 1\n    rightpt = b - 1\n    leftpt = b - 1\n    for i in range(a // 2):\n        if dist[i] != 0:\n            leftpt = i\n            break\n    dist.reverse()\n    for i in range(a // 2):\n        if dist[i] != 0:\n            rightpt = (a // 2 - 1) - i\n            break\n        \n    sumlr = rightpt - leftpt + min(abs(leftpt - indx), abs(rightpt - indx))\n    print(sum(dist) + sumlr)\n\nelse:\n    if b > a // 2 + 1:\n        b = a + 1 - b\n    left = strx[:a // 2]\n    right = strx[a // 2:][1:]\n    right = right[::-1]\n    dist = [calc(left[i], right[i]) for i in range(a // 2)]\n    indx = b - 1\n    rightpt = b - 1\n    leftpt = b - 1\n    for i in range(a // 2):\n        if dist[i] != 0:\n            leftpt = i\n            break\n    dist.reverse()\n    for i in range(a // 2):\n        if dist[i] != 0:\n            rightpt = (a // 2 - 1) - i\n            break\n    sumlr = rightpt - leftpt + min(abs(leftpt - indx), abs(rightpt - indx))\n    print(sum(dist) + sumlr)\n", "n, p = map(int, input().split())\nt = input()\nk = n // 2\nd = [0] * (k + 1)\nfor i in range(k):\n    d[i] = abs(ord(t[i]) - ord(t[n - i - 1]))\n    if 2 * d[i] > 26: d[i] = 26 - d[i]\np = n - p if p > k else p - 1\nif d.count(0) == k + 1: print(0)\nelse:\n    i, j = 0, k\n    while d[i] == 0: i += 1\n    while d[j] == 0: j -= 1\n    if i > p: i = p\n    if j < p: j = p\n    print(sum(d) + min(p - 2 * i + j, 2 * j - i - p))", "n, p = [int(i) for i in input().split()]\np -= 1\np = min(p, n - p - 1)\ns = input()\nans = 0\nm1 = None\nm2 = 0\nfor i in range(n):\n    if n - i - 1 < i:\n        break\n    if s[i] != s[-i - 1]:\n        if m1 is None:\n            m1 = i\n        m2 = max(m2, i)\n    ans += min(abs(ord(s[i]) - ord(s[-i - 1])), 26 - abs(ord(s[i]) - ord(s[-i - 1])))\nif m1 is None:\n    print(0)\n    return\nif m2 <= p:\n    x = p - m1\nelif m1 >= p:\n    x = m2 - p\nelse:\n    x = min(2 * (m2 - p) + p - m1, 2 * (p - m1) + m2 - p)\nprint(ans + x)", "import math\ndef min_dist(c1,c2):\n    g = abs(ord(c1)-ord(c2))\n    return(min(g,26-g))\n        \nlength, p = [int(k) for k in input().split()]\ns = str(input())\ns = \" \" + s\nmid = int(len(s)/2)\n#print(mid)\nif p > mid:\n    p = len(s)  - p\n#print(p)\ndiff = [0] *(length+1) #if position i different from length - i, then diff[i] = 1\nfor i in range(1,mid+1):\n    #print(s[i], s[length-i +1])\n    if s[i] != s[length - i +1]:\n        diff[i] = 1\n        diff[length-i+1] = 1\n#print(diff)\nleft = 0\nright = 0\nfor i in range(1,p):\n    if diff[i]==1:\n        left = p-i\n        break\ng = mid\nif length % 2 ==1:\n    g = g - 1\nfor i in range(g,p,-1):\n    if diff[i] ==1:\n        right = i-p\n        break\n\n#print(left,right)\n\nif left >= right: #go right first\n    horizontal = 2*right + left\nelse:\n    horizontal = 2*left + right\n    \nvertical = 0\nfor i in range(1,mid+1):\n    if diff[i] == 1:\n        vertical += min_dist(s[i], s[length-i +1])\n        #print(min_dist(s[i], s[length-i +1]))\nprint(horizontal + vertical)", "n,p=[int(x) for x in input().split()]\np-=1\natz='qwertyuiopasdfghjklzxcvbnm'\nif len(atz)!=26:\n    print('gone wrong')\nd={}\nfor i in atz:\n    for j in atz:\n        x=abs(ord(i)-ord(j))\n        x=min(x,26-x)\n        d[(i,j)]=x\ns=input()\ni=0\nj=len(s)-1\nm=(n+1)//2\nif p>=m:\n    p=n-1-p\n    s=s[::-1]\nrevs=s[::-1]\ncost=0\nwhile i<j:\n#    print(s,i,j)\n    cost+=d[(s[i],s[j])]\n    i+=1\n    j-=1\nif cost==0:\n    print(cost)\n    return\nl=0\n#print('mid cost',cost)\nwhile d[(s[l],revs[l])]==0:\n    l+=1\nr=(n//2)-1\nwhile d[(s[r],revs[r])]==0:\n    r-=1\n#print(l,r,p)\ncost+=r-l+min(abs(l-p),abs(r-p))\nprint(cost)\n", "n,p=[int(x) for x in input().split()]\np-=1\natz='qwertyuiopasdfghjklzxcvbnm'\nif len(atz)!=26:\n    print('gone wrong')\nd={}\nfor i in atz:\n    for j in atz:\n        x=abs(ord(i)-ord(j))\n        x=min(x,26-x)\n        d[(i,j)]=x\ns=input()\ni=0\nj=len(s)-1\nm=(n+1)//2\nif p>=m:\n    p=n-1-p\n    s=s[::-1]\nrevs=s[::-1]\ncost=0\nwhile i<j:\n#    print(s,i,j)\n    cost+=d[(s[i],s[j])]\n    i+=1\n    j-=1\nif cost==0:\n    print(cost)\n    return\nl=0\n#print('mid cost',cost)\nwhile d[(s[l],revs[l])]==0:\n    l+=1\nr=(n//2)-1\nwhile d[(s[r],revs[r])]==0:\n    r-=1\n#print(l,r,p)\ncost+=r-l+min(abs(l-p),abs(r-p))\nprint(cost)\n", "def change(a,b):\n    a,b=ord(a)-96,ord(b)-96\n    a,b=max(a,b),min(a,b)\n    return min(a-b,26+b-a)\n\ndef mini(arr,p):\n    if len(arr)==0:\n        return 0\n    if arr[-1]<=p:\n        #print(arr[-1],p)\n        return p-arr[0]\n    if arr[0]>=p:\n        return arr[-1]-p\n    return min((arr[-1]-p),(p-arr[0]))+(arr[-1]-arr[0])\n\ndef func(s,p):\n    mid=(len(s)+1)/2\n    if p>mid:\n        p=mid-(p-mid)\n    mid=int(len(s)/2)\n    steps=0\n    mis=[]\n    for i in range(mid):\n        if s[i]!=s[len(s)-1-i]:\n            steps+=change(s[i],s[len(s)-1-i])\n            mis.append(i+1)\n    #print(steps)\n    steps=steps+mini(mis,p)\n    return steps\n\n            \nl=list(map(int,input().split()))\npos=l[1]\ns=input()\nans=func(s,pos)\nprint(int(ans))", "def change(a,b):\n    a,b=ord(a)-96,ord(b)-96\n    a,b=max(a,b),min(a,b)\n    return min(a-b,26+b-a)\n\ndef mini(arr,p):\n    if len(arr)==0:\n        return 0\n    if arr[-1]<=p:\n        #print(arr[-1],p)\n        return p-arr[0]\n    if arr[0]>=p:\n        return arr[-1]-p\n    return min((arr[-1]-p),(p-arr[0]))+(arr[-1]-arr[0])\n\ndef func(s,p):\n    mid=(len(s)+1)/2\n    if p>mid:\n        p=mid-(p-mid)\n    mid=int(len(s)/2)\n    steps=0\n    mis=[]\n    for i in range(mid):\n        if s[i]!=s[len(s)-1-i]:\n            steps+=change(s[i],s[len(s)-1-i])\n            mis.append(i+1)\n    #print(steps)\n    steps=steps+mini(mis,p)\n    return steps\n\n            \nl=list(map(int,input().split()))\npos=l[1]\ns=input()\nans=func(s,pos)\nprint(int(ans))\n", "f = lambda c: ord(c) - ord('a')\ndalp = lambda x, y: min(abs(x - y), abs(x + 26 - y), abs(y + 26 - x))\ndist = lambda i, j: min(abs(i - j), abs(i + n - j), abs(j + n - i))\nread = lambda: list(map(int, input().split()))\nn, p = read()\na = [f(i) for i in input()]\npr, sf = [], []\ncnt = 0\nfor i in range(n // 2):\n    if a[i] != a[n - i - 1]:\n        cnt += dalp(a[i], a[n - i - 1])\n        pr.append(i)\n        sf.append(n - i - 1)\nif pr:\n    p -= 1\n    d1 = dist(pr[0], pr[-1])\n    d2 = min(dist(p, pr[0]), dist(p, pr[-1]), dist(p, sf[0]), dist(p, sf[-1]))   \n    cnt += d1 + d2\nprint(cnt)\n\n", "def main():\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    d = {(a, b): min((ord(a) - ord(b)) % 26, (ord(b) - ord(a)) % 26) for a in s for b in s}\n    n, m = list(map(int, input().split()))\n    s, res, n, m = input(), 0, n - 1, min(m - 1, n - m)\n    idx = [i for i, a in zip(list(range((n + 1) // 2)), s) if a != s[n - i]]\n    print((sum(d[s[i], s[n - i]] for i in idx) + min(abs(m - idx[0]), abs(m - idx[-1])) + idx[-1] - idx[0]) if idx else 0)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, p = map(int, input().split())\np -= 1\ns = input()\narr = [(lambda x, y: min(abs(x - y), 26 - abs(y - x)))(ord(s[i]), ord(s[n - i - 1])) for i in range(n // 2)]\np = min(p, n - p - 1)\nf, l = 0, len(arr) - 1\nfor a in arr:\n\tif a != 0:\n\t\tbreak\n\telse:\n\t\tf += 1\nfor a in reversed(arr):\n\tif a != 0:\n\t\tbreak\n\telse:\n\t\tl -= 1\nprint(sum(arr) + l - f + min(abs(p - l), abs(p - f)) if sum(arr) > 0 else 0)", "'''\ndef main():\n\tfrom sys import stdin,stdout\ndef __starting_point():\n\tmain()\n'''\n#Journey to moon\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tN,I =map(int,stdin.readline().split())\n\tvisited=list(0 for x in range(N))\n\tG=collections.defaultdict(list)\n\tgroups=[0]\n\tfor _ in range(I):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tG[a].append(b)\n\t\tG[b].append(a)\n\tq=collections.deque()\n\tflag=0\n\tfor i in range(N):\n\t\tif not visited[i]:\n\t\t\tq.append(i)\n\t\t\tvisited[i]=flag+1\n\t\t\tgroups[flag]+=1\n\t\t\twhile len(q):\n\t\t\t\ttop=q.popleft()\n\t\t\t\tfor j in G[top]:\n\t\t\t\t\tif visited[j]!=visited[top]:\n\t\t\t\t\t\tvisited[j]=flag+1\n\t\t\t\t\t\tgroups[flag]+=1\n\t\t\t\t\t\tq.append(j)\n\t\t\tflag+=1\n\t\t\tgroups.append(0)\n\tcounter=0\n\tfor i in range(len(groups)-1):\n\t\tfor j in range(i+1,len(groups)):\n\t\t\tcounter+=groups[i]*groups[j]\n\tstdout.write(str(counter))\ndef __starting_point():\n\tmain()\n'''\n#Djikstra's\n'''\nimport collections\nclass Graph:\n\tdef __init__(self):\n\t\tself.nodes=set()\n\t\tself.edges=collections.defaultdict(list)\n\t\tself.distances = {}\n\n\tdef add_node(self, value):\n\t\tself.nodes.add(value)\n\n\tdef add_edge(self, from_node, to_node, distance):\n\t\tself.edges[from_node].append(to_node)\n\t\tself.edges[to_node].append(from_node)\n\t\tself.distances[(from_node, to_node)] = distance\n\t\tself.distances[(to_node, from_node)] = distance\n\n\ndef dijsktra(graph, initial):\n\tvisited = {initial: 0}\n\tpath = {}\n\n\tnodes = set(graph.nodes)\n\n\twhile nodes:\n\t\tmin_node = None\n\t\tfor node in nodes:\n\t\t\tif node in visited:\n\t\t\t\tif min_node is None:\n\t\t\t\t\tmin_node = node\n\t\t\t\telif visited[node] < visited[min_node]:\n\t\t\t\t\tmin_node = node\n\n\t\tif min_node is None:\n\t\t\tbreak\n\n\t\tnodes.remove(min_node)\n\t\tcurrent_weight = visited[min_node]\n\n\t\tfor edge in graph.edges[min_node]:\n\t\t\tweight = current_weight + graph.distances[(min_node, edge)]\n\t\t\tif edge not in visited or weight < visited[edge]:\n\t\t\t\tvisited[edge] = weight\n\t\t\t\tpath[edge] = min_node\n\n\treturn visited, path\n\ndef main():\n\tfrom sys import stdin,stdout\n\tfor _ in range(int(stdin.readline())):\n\t\tn,m=map(int,stdin.readline().split())\n\t\tG=Graph()\n\t\tfor i in range(n):\n\t\t\tG.add_node(i+1)\n\t\tfor i in range(m):\n\t\t\ta,b,c=map(int,stdin.readline().split())\n\t\t\tG.add_edge(a,b,c)\n\t\tinitial=int(stdin.readline())\n\t\tv,p=dijsktra(G, initial)\n\t\t#print(v)\n\t\t#print(p)\n\t\tfor i in range(1,n+1):\n\t\t\tif i!=initial:\n\t\t\t\tk=v.get(i,-1)\n\t\t\t\tstdout.write(str(k)+' ')\n\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n#Larget pallindrome in String\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tstring=stdin.readline().strip()\n\tl=len(string)\n\t#Triangle logic\t\n\t\n\tarrlen=(l*(l-1))//2\n\tarr=list(0 for x in range(arrlen))\n\tf=0\n\tc=l-1\n\tfor i in range(l-1):\n\t\tfor j in range(i+1,l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[f+j-i-1]=1\n\t\tf+=c\n\t\tc-=1\n\t#print(arr)\n\tif any(arr):\n\t\t\n\telse:\n\t\tif l & 1:\n\t\t\tstdout.write('First')\n\t\telse:\n\t\t\tstdout.write('Second')\n\t#2-d Array Logic\n\tarr=list(list(0 for i in range(l)) for j in range(l))\n\tfor i in range(l):\n\t\tfor j in range(l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[i][j]=1\n\tmaxim=0\n\tfor i in range(0,l*(l-1)-2,l+1):\n\t\ta,b=i+1,i+2\n\t\t#print(a,b)\n\t\tacount=0\n\t\tx=a//5\n\t\ty=a%5\n\t\tacount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tacount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tx=b//5\n\t\ty=b%5\n\t\tbcount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tbcount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tmaxim=max((acount,bcount,maxim))\n\tmaxim=max(maxim,arr[l-2][l-1])\n\tmaxim=(maxim<<1)^1\n\tdelta=l-maxim\n\tif delta & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#276B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\ts=stdin.readline().strip()\n\tcount=collections.Counter(s)\n\tl=list(filter(lambda x: count[x] & 1,list(x for x in count)))\n\tremoved=sum(list(count[x] for x in l))-max(list(count[x] for x in l)+[0])\n\tif removed & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#362B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tif m:\n\t\tdirty=sorted(map(int,stdin.readline().split()))\n\t\tif dirty[0]==1 or dirty[-1]==n:\n\t\t\tstdout.write('NO')\n\t\telse:\n\t\t\tflag=True\n\t\t\tfor i in range(m-2):\n\t\t\t\tif dirty[i+1]==dirty[i]+1 and dirty[i+2]==dirty[i]+2:\n\t\t\t\t\tflag=False\n\t\t\t\t\tbreak\n\t\t\tif flag:\n\t\t\t\tstdout.write('YES')\n\t\t\telse:\n\t\t\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES')\ndef __starting_point():\n\tmain()\n'''\n#279B SUM OF SUB-ARRAY\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,t=map(int,stdin.readline().split())\n\tarr=list(map(int,stdin.readline().split()))\n\tmaxim=0\n\tcurr_sum=arr[0]\n\ti=0\n\tj=1\n\tif curr_sum <=t:\n\t\tcount=1\n\telse:\n\t\tcurr_sum=0\n\t\tcount=0\n\t\ti=1\n\t\tj=2\n\twhile j<n:\n\t\tif curr_sum+arr[j]<=t:\n\t\t\tcount+=1\n\t\t\tcurr_sum+=arr[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tmaxim=max(count,maxim)\n\t\t\tif curr_sum:\n\t\t\t\tcurr_sum-=arr[i]\n\t\t\t\tcount-=1\n\t\t\telse:\n\t\t\t\tj+=1\n\t\t\ti+=1\n\tmaxim=max(count,maxim)\n\tstdout.write(str(maxim))\ndef __starting_point():\n\tmain()\n'''\n#469B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tp,q,l,r=map(int,stdin.readline().split())\n\ta=[]\n\tb=[]\n\tvisited=list(0 for x in range(r-l+1))\n\t#print(visited)\t\n\tfor i in range(p):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tfor i in range(q):\n\t\tx,y=map(int,stdin.readline().split())\n\t\tx+=l\n\t\ty+=l\n\t\tfor j in range(p):\n\t\t\t#print('x=',x,'y=',y)\n\t\t\tlower=max(0,a[j]-y)\n\t\t\tupper=min(b[j]-x,r)+1\n\t\t\tif upper > lower:\n\t\t\t\tdelta=upper-lower\n\t\t\t\t#print('upper=',upper,'lower=',lower)\n\t\t\t\tvisited[lower:upper]=list(1 for x in range(delta))\n\t\t\t\t#print('visited:\\n',visited)\n\t#\tprint(visited)\n\tstdout.write(str(visited[:r-l+1].count(1)))\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\t#import numpy as np\n\tn,k=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tminim=min(a)\n\tmaxim=max(a)\n\tarr=list(a)\t\n\tfor i in range(n):\n\t\tarr[i]-=minim\n\tif max(arr) > k:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\\n')\n\t\tfor i in a:\n\t\t\tstdout.write('1 '*minim)\n\t\t\tfor j in range(i-minim):\n\t\t\t\tstdout.write(str(j%k+1)+' ')\n\t\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,p=[],[]\n\tfor _ in range(int(stdin.readline())):\n\t\tlast=int(stdin.readline())\n\t\tif last<0:\n\t\t\tn.append(-1*last)\n\t\telse:\n\t\t\tp.append(last)\n\tif sum(p)>sum(n):\n\t\tstdout.write('first')\n\telif sum(n)>sum(p):\n\t\tstdout.write('second')\n\telse:\n\t\tmaxim=max(n,p)\n\t\t#print(maxim)\n\t\tif maxim==p:\n\t\t\tif maxim==n:\n\t\t\t\tif last<0:\n\t\t\t\t\tstdout.write('second')\n\t\t\t\telse:\n\t\t\t\t\tstdout.write('first')\n\t\t\telse:\n\t\t\t\tstdout.write('first')\n\t\telse:\n\t\t\tstdout.write('second')\n\t\t\ndef __starting_point():\n\tmain()\n'''\n#286C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tm,n=map(int,stdin.readline().split())\n\tminim=min(m,n)\n\tstdout.write(str(minim+1)+'\\n')\n\tif n==minim:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(m)+' '+str(i)+'\\n')\n\t\t\tm-=1\n\telse:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(i)+' '+str(n)+'\\n')\n\t\t\tn-=1\ndef __starting_point():\n\tmain()\n'''\n#387B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tb=tuple(map(int,stdin.readline().split()))\n\ti=0\n\tj=0\n\twhile True:\n\t\t#print(i,j)\n\t\tif i>=n or j>=m:\n\t\t\tbreak\n\t\tif b[j]>=a[i]:\n\t\t\ti+=1\n\t\t\tj+=1\n\t\telse:\n\t\t\tj+=1\n\tstdout.write(str(n-i))\ndef __starting_point():\n\tmain()\n'''\n#365B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\ta=tuple(map(int,stdin.readline().split()))\n\tmaxim=2\n\tcount=2\n\ti=2\n\twhile True:\n\t\tif i>=n:\n\t\t\tbreak\n\t\tif a[i]==a[i-1]+a[i-2]:\n\t\t\tcount+=1\n\t\t\tmaxim=max(count,maxim)\n\t\telse:\n\t\t\tcount=2\n\t\ti+=1\n\tstdout.write(str(min(maxim,n)))\ndef __starting_point():\n\tmain()\n'''\t#474D\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tT,k=map(int,stdin.readline().split())\n\tfib=[x for x in range(1,k+1)]\n\tfor i in range(k,100001):\n\t\tfib.append((fib[i-1]+fib[i-k]+1)%MOD)\n\tfor _ in range(T):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str((fib[b]-fib[a-1])%MOD)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#330B\n#not working\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\troad_not=collections.defaultdict(set)\n\tn,m=map(int,stdin.readline().split())\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\troad_not[a].add(b)\n\t\troad_not[b].add(a)\n\tcounter=0\n\troad=collections.defaultdict(set)\n\tvisited=[0 for x in range(n)]\n\tvisited[0]=True\n\tfor index in range(1,n+1):\n\t\tfor i in range(1,n+1):\n\t\t\tif not visited[i-1]:\n\t\t\t\tif i not in road_not[index] and i!=index:\n\t\t\t\t\tcounter+=1\n\t\t\t\t\troad[index].add(i)\n\t\t\t\t\tvisited[i-1]=True\n\tstdout.write(str(counter)+'\\n')\n\tfor i in road:\n\t\tfor j in road[i]:\n\t\t\tstdout.write(str(i)+' '+str(j)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#208D\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport bisect\n\tn=int(stdin.readline())\n\tp=tuple(map(int,stdin.readline().split()))\n\tP=tuple(map(int,stdin.readline().split()))\n\trecord=[0 for x in range(5)]\n\tpoints=0\n\tfor i in p:\n\t\tpoints+=i\n\t\twhile points>=P[0]:\n\t\t\tindex=bisect.bisect_right(P,points)\n\t\t\tif index:\n\t\t\t\tindex-=1\n\t\t\t\tnumber=points//P[index]\n\t\t\t\trecord[index]+=number\n\t\t\t\tpoints-=P[index]*number\n\tfor i in record:\n\t\tstdout.write(str(i)+' ')\n\tstdout.write('\\n'+str(points))\ndef __starting_point():\n\tmain()\n'''\n#339D Using Al.Cash's Segment Trees\n#Segment Tree\n#not-working\n'''\npowers=1\nt=[0 for x in range(3*int(1e5))]\ndef build(n):\n\tnonlocal t,powers\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\ndef modify(i,v,n):\n\tnonlocal t\n\tflag=False\n\tif t[i+n-1]==v or v|t[(i+n-1)^1]==t[(i+n-1)>>1]:\n\t\t#print('skipped')\n\t\t#print('t[i+n-1]=',t[i+n-1],'v=',v)\n\t\t#print('v|t[(i+n-1)^1]=',v|t[(i+n-1)^1],'t[(i+n-1)>>1]',t[(i+n-1)>>1])\t\t\n\t\tt[i+n-1]=v\t\t\n\t\treturn\n\tt[i+n-1]=v\n\tp=i+n-1\n\twhile p>1:\n\t\tif flag:\n\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\tflag=not flag\n\t\telse:\n\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\tflag=not flag\n\t\tp>>=1\n\ndef main():\n\tfrom sys import stdin,stdout\n\tnonlocal t,powers\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\t\n\tn=1<<(n)\t\n\tfor i in range(n):\n\t\tt[i+n]=p[i]\n\tbuild(n)\n\t#print(t[:2*n])\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tmodify(a,b,n)\n\t\t#print(t[:2*n])\n\t\tstdout.write(str(t[1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#330B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tstart_not=set()\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstart_not.add(a-1)\n\t\tstart_not.add(b-1)\n\tvisited=[False for _ in  range(n)]\n\tfor i in range(n):\n\t\tif i not in start_not:\n\t\t\tcenter=i\n\t\t\tbreak\n\tstdout.write(str(n-1)+'\\n')\n\tfor i in range(n):\n\t\tif i != center:\n\t\t\tstdout.write(str(center+1)+' '+str(i+1)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#116B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tarr=[]\n\tfor _ in range(n):\n\t\tarr.append(stdin.readline().strip())\n\tpigs=set()\n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]=='W':\n\t\t\t\tflag=0\n\t\t\t\tif i>0:\n\t\t\t\t\tif arr[i-1][j]=='P':\n\t\t\t\t\t\tpigs.add((i-1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif i<n-1:\n\t\t\t\t\tif arr[i+1][j]=='P':\n\t\t\t\t\t\tpigs.add((i+1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif \tj>0:\n\t\t\t\t\tif arr[i][j-1]=='P':\n\t\t\t\t\t\tpigs.add((i,j-1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif j<m-1:\n\t\t\t\t\tif arr[i][j+1]=='P':\n\t\t\t\t\t\tpigs.add((i,j+1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif flag:\n\t\t\t\t\tcount+=1\n\tstdout.write(str(min(len(pigs),count)))\ndef __starting_point():\n\tmain()\n'''\n#339D using Al.Cash's Segment Tree Implementation\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tanswers=()\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\n\tn=powers<<1\n\tt=[0 for _ in range(n<<1)]\n\tfor i in range(n):\n\t\tt[n+i]=p[i]\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tflag=False\n\t\tif t[a+n-1]==b or b|t[(a+n-1)^1]==t[(a+n-1)>>1]:\n\t\t\tt[a+n-1]=b\n\t\telse:\n\t\t\tt[a+n-1]=b\n\t\t\tp=a+n-1\n\t\t\twhile p > 1:\n\t\t\t\tif flag:\n\t\t\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\t\t\tflag=not flag\n\t\t\t\telse:\n\t\t\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\t\t\tflag= not flag\n\t\t\t\tp>>=1\n\t\tstdout.write(str(t[1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#515C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tnc=[0 for x in range(10)]\n\tn=int(stdin.readline())\n\tnum=stdin.readline().strip()\n\tfor i in num:\n\t\tk=int(i)\n\t\tif k==9:\n\t\t\tnc[7]+=1\n\t\t\tnc[3]+=2\n\t\t\tnc[2]+=1\n\t\telif k==8:\n\t\t\tnc[7]+=1\n\t\t\tnc[2]+=3\n\t\telif k==7:\n\t\t\tnc[7]+=1\n\t\telif k==6:\n\t\t\tnc[5]+=1\n\t\t\tnc[3]+=1\n\t\telif k==5:\n\t\t\tnc[5]+=1\n\t\telif k==4:\n\t\t\tnc[3]+=1\n\t\t\tnc[2]+=2\n\t\telif k==3:\n\t\t\tnc[3]+=1\n\t\telif k==2:\n\t\t\tnc[2]+=1\n\tans=''\n\tfor i in range(10):\n\t\tans+=str(9-i)*nc[9-i]\n\tstdout.write(ans)\t\t\ndef __starting_point():\n\tmain()\n'''\n#313B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\ts=stdin.readline().strip()\n\tflag=s[0]\n\tif flag=='.':\n\t\tanti='#'\n\telse:\n\t\tanti='.'\n\tn=len(s)\n\tl=[0 for x in range(n)]\n\tfor i in range(1,n):\n\t\tif s[i]==flag:\n\t\t\tl[i]=l[i-1]+1\n\t\telse:\n\t\t\tflag,anti=anti,flag\n\t\t\tl[i]=l[i-1]\n\t#print(l)\n\tfor _ in range(int(stdin.readline())):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str(l[b-1]-l[a-1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#431C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tn,k,d=map(int,stdin.readline().split())\n\td-=1\n\tklist=[(1<<i)%MOD for i in range(k)]\n\tklist=[1]+klist\n\tfor i in range(k+1,n+1):\n\t\tklist.append((klist[i-1]*2-klist[i-1-k])%MOD)\n\tif d:\t\n\t\tdlist=[(1<<i)%MOD for i in range(d)]\n\t\tdlist=[1]+dlist\n\t\tfor i in range(d+1,n+1):\n\t\t\tdlist.append((dlist[i-1]*2-dlist[i-1-d])%MOD)\n\t#print(klist)\n\t#print(dlist)\n\t\tans=klist[n]-dlist[n]\n\telse:\n\t\tans=klist[n]\n\tstdout.write(str(ans%MOD))\ndef __starting_point():\n\tmain()\n'''\n#441C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m,k=map(int,stdin.readline().split())\n\tif n>=m:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif j==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\ti+=1\n\t\t\t\t\tj+=1\n\t\t\t\tif j==m:\n\t\t\t\t\tflag=False\n\t\t\t\t\ti+=1\n\t\t\t\t\tj-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\tj+=1\n\t\t\t\telse:\n\t\t\t\t\tj-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\\n')\n\telse:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif i==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\tj+=1\n\t\t\t\t\ti+=1\n\t\t\t\tif i==n:\n\t\t\t\t\tflag=False\n\t\t\t\t\tj+=1\n\t\t\t\t\ti-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\ti+=1\n\t\t\t\telse:\n\t\t\t\t\ti-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n#538B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\tans=[]\n\twhile n:\n\t\tt=''\n\t\tnum=str(n)\n\t\tfor i in num:\n\t\t\tif int(i):\n\t\t\t\tt+='1'\n\t\t\telse:\n\t\t\t\tt+='0'\n\t\tans.append(t)\n\t\tn-=int(t)\n\tstdout.write(str(len(ans))+'\\n')\n\tfor i in ans:\n\t\tstdout.write(i+' ')\ndef __starting_point():\n\tmain()\n'''\n#486C\ndef main():\n\tfrom sys import stdin,stdout\n\tn,o=list(map(int,stdin.readline().split()))\n\tstring=stdin.readline().strip()\n\tif n & 1:\n\t\ts1=string[:n//2]\n\t\ts2=string[n//2+1:]\n\t\trev=s2[::-1]\n\t\tminim=0\n\t\tindexlist=[]\n\t\tfor i in range(n//2):\n\t\t\tk=abs(ord(s1[i])-ord(rev[i]))\n\t\t\tminim+=min(k,26-k)\n\t\t\tif k:\n\t\t\t\tindexlist.append(i)\n\t\tif o>n//2:\n\t\t\to=(n-o)\n\t\telse:\n\t\t\to-=1\n\t\tif len(indexlist):\n\t\t\tindexlist+=[o]\n\t\t\tfor i in range(len(indexlist)):\n\t\t\t\tindexlist[i]=indexlist[i]-o\n\t\t\tminia=min(indexlist)\n\t\t\tmaxia=max(indexlist)\n\t\t\tminim+=min(abs(minia),abs(maxia))*2+max(abs(minia),abs(maxia))\n\t\tstdout.write(str(minim))\n\telse:\n\t\ts1=string[:n//2]\n\t\ts2=string[n//2:]\n\t\trev=s2[::-1]\n\t\t#print(s1,rev)\n\t\tminim=0\n\t\tindexlist=[]\n\t\tfor i in range(n//2):\n\t\t\tk=abs(ord(s1[i])-ord(rev[i]))\n\t\t\tminim+=min(k,26-k)\n\t\t\tif k:\n\t\t\t\tindexlist.append(i)\n\t\tif o > n//2:\n\t\t\to=(n-o)\n\t\telse:\n\t\t\to-=1\n\t\t#print(minim)\n\t\t#print(indexlist)\n\t\tif len(indexlist):\n\t\t\tindexlist+=[o]\n\t\t\tfor i in range(len(indexlist)):\n\t\t\t\tindexlist[i]=indexlist[i]-o\n\t\t\t#print(indexlist)\n\t\t\tminia=min(indexlist)\n\t\t\tmaxia=max(indexlist)\n\t\t\tminim+=min(abs(minia),abs(maxia))*2+max(abs(minia),abs(maxia))\n\t\tstdout.write(str(minim))\ndef __starting_point():\n\tmain()\n#4B\n'''\ndef main():\t\n\tfrom sys import stdin,stdout\n\tn,sumtime=map(int,stdin.readline().split())\n\ta,b=[],[]\n\tfor i in range(n):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tif sum(b)<sumtime or sum(a)>sumtime:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\\n')\n\t\tdiff=sumtime-sum(a)\n\t\tfor i in range(n):\n\t\t\tif diff:\n\t\t\t\tk=b[i]-a[i]\n\t\t\t\tminim=min(k,diff)\n\t\t\t\ta[i]+=minim\n\t\t\t\tdiff-=minim\n\t\tfor i in a:\n\t\t\tstdout.write(str(i)+' ')\ndef __starting_point():\n\tmain()\n'''\n#282B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\ta,b=[],[]\n\tfor i in range(n):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tif a[0]>b[0]:\n\t\ttotal=-1*b[0]\n\t\tt='G'\n\telse:\n\t\ttotal=a[0]\n\t\tt='A'\n\tfor i in range(1,n):\n\t\tif total+a[i]>=500:\n\t\t\ttotal-=b[i]\n\t\t\tt+='G'\n\t\telse:\n\t\t\ttotal+=a[i]\n\t\t\tt+='A'\n\tif total<-500 or total >500:\n\t\tstdout.write('-1')\n\telse:\n\t\tstdout.write(t)\ndef __starting_point():\n\tmain()\n'''\n\n__starting_point()", "import sys\n\ndef dbg(*args):\n    print('D:', *args, file=sys.stderr)\n\nn, p = map(int, input().split())\ns = input()\n\nif s == s[::-1]:\n    print('0')\nelse:\n    sz = len(s)\n    if p > sz//2:\n        p = sz - p\n    else:\n        p -= 1\n\n    l, r = 0, sz//2 - 1\n    while s[l] == s[-l - 1]: l += 1\n    while s[r] == s[-r - 1]: r -= 1\n    dbg(l, r, p)\n    sum = r - l\n    sum += min(abs(p - l), abs(r - p))\n    for i in range(l, r + 1):\n        a1 = ord(s[i])\n        a2 = ord(s[-i - 1])\n        if (a1 > a2):\n            a1, a2 = a2, a1\n        sum += min(a2 - a1, a1 + 26 - a2)\n    print(sum)", "n, p = list(map(int, input().split()))\nstring = input()\n\ndef calc_delta(s):\n    \"\"\"Calculates and returns the alphabetical differences between every pair\n    of indices (i, n-i-1) in the string s. Returns a map between an index and\n    the delta value to correct to a palindrome.\n    \"\"\"\n    def get_min_shift(i):\n        ord_diff = abs(ord(s[i]) - ord(s[n-i-1]))\n        return min(ord_diff, 26 - ord_diff)\n\n    return {i : get_min_shift(i) for i in range((n + 1) // 2)}\n\ndef palindrome(s):\n    deltas = calc_delta(s)\n    offset_indices = list([i for i in list(deltas.keys()) if deltas[i] > 0])\n    if not offset_indices:\n        return 0\n    alpha_delta = sum(deltas.values())\n    mindex = min(offset_indices) # Smallest index with a mismatch\n    maxdex = max(offset_indices) # Largest index in the smaller half with a mismatch\n    sindex = min(p - 1, n - p) # Starting pointer index\n    if mindex == maxdex or maxdex <= sindex:\n        travel_delta = abs(sindex - mindex)\n        return travel_delta + alpha_delta\n    if mindex >= sindex:\n        return maxdex - sindex + alpha_delta\n    min_delta = min(maxdex - sindex, sindex - mindex)\n    max_delta = max(maxdex - sindex, sindex - mindex)\n    travel_delta = 2 * min_delta + max_delta\n    return travel_delta + alpha_delta\n\nprint(palindrome(string))\n", "n, p = map(int, input().split())\np -= 1\ns = input()\nif p>=n//2:\n\tp = n-1-p\nl = 0\nr = n//2-1\n\nwhile l<n//2 and (s[l]==s[n-1-l]):\n\tl += 1\nwhile r>=0 and (s[r] == s[n-1-r]):\n\tr -= 1\nans, ch = 0, 0\nfor i in range(l, r+1):\n\ttemp = abs(ord(s[i])-ord(s[n-1-i]))\n\tch += min(temp, 26-temp)\n\t#print (min(temp, 26-temp),s[i], s[n-1-i])\nif l < r:\n\t#print (min(abs(p-r), abs(p-l))+ abs(r-l) + ch)\n\tans += min(abs(p-r), abs(p-l)) + abs(r-l) + ch\nelif l==r:\n\tif ch:\n\t\tans += abs(p-l)+ch\nprint(ans)", "n, p = list(map(int, input().split()))\np -= 1\nst = input().strip()\nl = 0\nh = n // 2 - 1\nif p > h:\n    p = n - 1 - p\ninside = False\nans = 0\ni = 0\nH = -1 \nwhile i <= h:\n    if st[i] != st[n - 1 - i]:\n        if not inside:\n            l = i\n            inside = True\n        H = i\n    ans += min(abs(ord(st[i]) - ord(st[n - 1 - i])), abs(ord('z') - ord('a') + 1 - abs(ord(st[i]) - ord(st[n - 1 - i]))))\n    i += 1\nh = H\nif h == -1:\n    print(\"0\")\n    return\nans += h - l\nans += min(abs(l - p), abs(p - h))\nprint(ans)\n"]