["n=int(input())\na=list(map(int,input().split()))\ncount=[0]*(10**5+1)\nfor i in a:\n    count[i]+=1\nans=[]\nfor i in range(10**5+1):\n    if count[i]:\n        ans.append(i)\n        count[i]-=1\nif len(ans)!=n:\n    for i in reversed(range(10**5+1)):\n        if count[i] and ans[-1]!=i:\n            ans.append(i)\nprint(len(ans))\nprint(*ans)", "n = int(input())\nquant = [0] * 5001\nnumbers = list(map(int, input().split()))\nres = []\nm = max(numbers)\n\nfor i in range(n):\n    quant[numbers[i]] += 1\n\ni = 1\n\nwhile i < m:\n    if quant[i] > 0:\n        res.append(i)\n        quant[i] -= 1\n    i += 1\nres.append(m)\ni = m - 1\nwhile i > 0:\n    if quant[i] > 0:\n        res.append(i)\n        quant[i] -= 1\n    i -= 1\n    \nprint(len(res))\nprint(*res)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nb=[]\nfor i in range(n-2):\n    if not (a[i] == a[i+1] and a[i] == a[i+2]):\n        b.append(a[i])\nb.append(a[n-2])\nb.append(a[n-1])\nif b[-1] == b[-2]:\n    b = b[:len(b)-1]\nprint(len(b))\nb1=[]\nb2=[]\nfor i in range(len(b)):\n    if i % 2 == 0:\n        b2.append(b[i])\n    else:\n        b1.append(b[i])\nfor i in b1:\n    print(i, end=' ')\nb2.reverse()\nfor i in b2:\n    print(i, end=' ')\n", "n = input()\ncards = input().split(\" \")\ncards = [int(cards[i]) for i in range(len(cards))]\n\nif len(cards) == len(list(set(cards))):\n    print(n)\n    cards.sort()\n    for i in range(len(cards) - 1, 0, -1):\n        print(cards[i], end=\" \")\n    print(cards[0], end=\"\\n\")\nelse:\n    cards.sort()\n    mycards = [cards[0]]\n\n    cards[0] = None\n    for i in range(1, len(cards)):\n        if cards[i] > mycards[-1]:\n            mycards.append(cards[i])\n            cards[i] = None\n\n    for i in range(len(cards) - 1, -1, -1):\n        if cards[i] == None: continue\n        \n        if cards[i] < mycards[-1]:\n            mycards.append(cards[i])\n            cards[i] = None\n\n    print(len(mycards))\n    for i in range(len(mycards) - 1):\n        print(mycards[i], end=\" \")\n    print(mycards[-1], end=\"\\n\")\n", "import sys\ndef main():\n    l=sys.stdin.readline()\n    l=sys.stdin.readline()\n    numbers={}\n    for el in l.split():\n        el=int(el)\n        try:\n            numbers[el]=numbers[el]+1\n        except KeyError:\n            numbers[el]=1\n        \n    nr=numbers.keys()\n    nr=sorted(list(set(nr)))\n    \n    count=0\n    final=[]\n    for n in nr:\n        if numbers[n] > 0:\n            final.append(n)\n            numbers[n]-=1\n            count+=1\n    nr=sorted(nr,reverse=True)\n    for n in nr:\n        if n != final[-1]:\n            if numbers[n] > 0:\n                final.append(n)\n                numbers[n]-=1\n                count+=1\n    print (count)\n    for el in final[:-1]:\n        print (el,end = \" \")\n    print (final[-1])\n\ndef __starting_point():\n    main()\n__starting_point()", "__author__ = 'Adela'\n\n\ndef main():\n\n    m = int(input())\n    b = [0 for i in range(0, 5001)]\n    res = []\n    maxi = 0\n\n    for k in input().split():\n        nr = int(k)\n        b[nr] += 1\n        if nr > maxi:\n            maxi = nr\n\n    for i in range(0, maxi + 1):\n        if b[i] != 0:\n            res.append(i)\n            b[i] -= 1\n\n    for j in range(maxi - 1, 0, -1):\n        if b[j] != 0:\n            res.append(j)\n\n    print(len(res))\n    for k in res:\n        print(k, end=' ')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ncards = list(map(int, input().split()))\ncards.sort()\nstair = []\nstair_rev = []\nstair.append(cards[0])\ncards.pop(0)\na = 0\nwhile a < len(cards):\n    if cards[a] > stair[-1]:\n        stair.append(cards[a])\n        cards.pop(a)\n    else:\n        a+= 1\ntmpmax = stair[-1]\ncards.sort(reverse = True)\na = 0\nwhile a < len(cards):\n    if cards[a] < tmpmax:\n        tmpmax = cards[a]\n        stair_rev.append(cards[a])\n        cards.pop(a)\n    else:\n        a+= 1\n            \nstair += stair_rev\nprint(len(stair))\ns = ''\nfor d in stair[0:-1]:\n    s += str(d)+' '\ns += str(stair[-1])\nprint(s)\n", "from collections import Counter\n__author__ = 'asmn'\n\nn=int(input())\na=Counter(list(map(int,input().split())))\nkeys=sorted(a.keys())\n\nfor i in range(len(keys)-2,-1,-1):\n    if a[keys[i]] > 1:\n        keys.append(keys[i])\n\nprint(len(keys))\nprint(' '.join(map(str,keys)))\n\n", "n = int(input())\ntest = list(map(int, input().split()))\ntest1 = []\nresult = []\ntest.sort(reverse=True)\n\nnum = test.count(test[0])\n\ntest1.append(test[0])\nmark = 0\n\nfor i in range(num, len(test)):\n    if test[i] != test1[len(test1)-1]:\n        test1.append(test[i])\n        mark = 0\n    else:\n        if mark > 0:\n            continue\n        else:\n            test1.append(test[i])\n            mark += 1\n\nresult.append(test1[0])\nfor j in range(1, len(test1)):\n    if test1[j] != result[len(result)-1]:\n        result.append(test1[j])\n    else:\n        result.insert(0, test1[j])\nprint(len(result))\nprint(' '.join(map(str, result)))\n", "n=int(input())\na=list(map(int,input().split()))\na.sort()\nlast=0\nv=[0]*n\nb=[]\nfor i in range(n):\n\tif a[i]>last:\n\t\tlast=a[i]\n\t\tb.append(a[i])\n\t\tv[i]=1\nfor i in range(n-1,-1,-1):\n\tif not v[i] and a[i]<last:\n\t\tlast=a[i]\n\t\tb.append(a[i])\n\t\tv[i]=1\nprint(len(b))\nfor i in range(len(b)):\n\tprint(b[i],end=' ')\n", "n=int(input())\na=list(map(int,input().split()))\na.sort()\nlast=0\nv=[0]*n\nb=[]\nfor i in range(n):\n    if a[i]>last:\n        last=a[i]\n        b.append(a[i])\n        v[i]=1\nfor i in range(n-1,-1,-1):\n    if not v[i] and a[i]<last:\n        last=a[i]\n        b.append(a[i])\n        v[i]=1\ntmp=len(b)\nprint(tmp)\nfor i in range(tmp):\n    print(b[i],end=' ')\n", "input()\na=list(map(int,input().split()))\nb=[0]*5000\nfor x in a:\n    b[x-1]+=1\nr=''\ncount=0\nmax=0\nfor i in range(5000):\n    if b[i]>0:\n        count+=1\n        max=i\n        r+=str(i+1)+' ';\n        b[i]-=1\nfor i in range(max-1,-1,-1):\n    if b[i]>0:\n        count+=1\n        r+=str(i+1)+' ';\nprint(count)\nprint(r)", "n, t = int(input()), sorted(map(int, input().split()))\na, b, k = [t[0]], [], False\nfor i in range(1, n):\n    if t[i] == t[i - 1]: k = True\n    else:\n        if k:\n            k = False\n            b.append(t[i - 1])\n        a.append(t[i])\nprint(len(a) + len(b))\nprint(' '.join(map(str, a)) + ' ' + ' '.join(map(str, reversed(b))))", "n, p = input(), [0] * 5001\nfor i in map(int, input().split()): p[i] += 1\na = [i for i in range(1, 5001) if p[i]]\nb = [i for i in a[: -1] if p[i] > 1]\nprint(len(a) + len(b))\nprint(' '.join(map(str, a)) + ' ' + ' '.join(map(str, reversed(b))))", "from sys import stdin, stdout\n\ndef solve(c, n):\n\tc = list(sorted(c))\n\troot = Root()\n\troot.value = c.pop()\n\tleft_bound = root\n\tright_bound = root\n\twhile len(c) > 0:\n\t\tval = c.pop()\n\t\t# print('Current: ' + str(val))\n\t\tnode = Node()\n\t\tnode.value = val\n\t\tif left_bound.value > val:\n\t\t\tnode.prev = left_bound\n\t\t\tif left_bound == root:\n\t\t\t\troot.left = node\n\t\t\telse:\n\t\t\t\tleft_bound.next = node\n\t\t\tleft_bound = node\n\t\t\t# print('appended to left')\n\t\telif right_bound.value > val:\n\t\t\tnode.prev = right_bound\n\t\t\tif right_bound == root:\n\t\t\t\troot.right = node\n\t\t\telse:\n\t\t\t\tright_bound.next = node\n\t\t\tright_bound = node\n\t\t# \tprint('appended to right')\n\t\t# else:\n\t\t# \tprint('skipped')\n\tres_len = 0\n\tres_str = ''\n\n\tp = left_bound\n\twhile p is not root:\n\t\tres_str += str(p.value) + ' '\n\t\tres_len += 1\n\t\tp = p.prev\n\tres_str += str(p.value) + ' '\n\tres_len += 1\n\tp = root.right\n\twhile p is not None:\n\t\tres_str += str(p.value) + ' '\n\t\tres_len += 1\n\t\tp = p.next\n\treturn (res_len, res_str)\n\nclass Node:\n\tvalue = None\n\tnext = None\n\tprev = None\n\nclass Root:\n\tvalue = None\n\tright = None\n\tleft = None\n\n\ndef __starting_point():\n\tn_s = stdin.readline()\n\tcards_s = stdin.readline().split(' ')\n\tn = int(n_s)\n\tcards = [int(c) for c in cards_s]\n\troot = solve(cards, n)\n\tprint('{}\\n{}'.format(root[0], root[1]))\n__starting_point()", "__author__ = 'maaanu'\n\ndef start():\n    m = int(input())\n    cards = [int(x) for x in input().split(\" \")]\n    cards.sort()\n    max_cards = len(cards)\n    last_card = cards.pop()\n    table = [last_card]\n\n    for val in reversed(cards):\n        if val < last_card:\n            last_card = val\n            table.append(last_card)\n        elif val < table[0]:\n            table.insert(0, val)\n        else:\n            max_cards -= 1\n    print(max_cards)\n    print(\"\".join([str(number)+\" \" for number in table]))\n\n\nstart()", "# -*- coding: utf-8 -*-\nimport sys\n\nm = int(sys.stdin.readline())\nb = [int(x) for x in sys.stdin.readline().split(' ')]\n\nb.sort()\n\nl1 = []\nl2 = []\n\nlast = b[0]\nrep = 1\nl1.append(last)\nfor i in range(1, len(b)):\n    if b[i] == last:\n        rep += 1\n    else:\n        last = b[i]\n        rep = 1\n    if rep == 1:\n        l1.append(last)\n    elif rep == 2:\n        l2.append(last)\n    #\u5426\u5219\u4e22\u5f03\n\nif l2 and l2[-1] == l1[-1]:\n    l2.pop()\nl2.reverse()\n\nprint(len(l1)+len(l2))\nprint(' '.join([str(x) for x in l1]), end='')\nif l2:\n    print(' ', end='')\n    print(' '.join([str(x) for x in l2]))\nelse:\n    print()\n", "import sys\nf = sys.stdin\nf.readline()\na = sorted([int(x) for x in f.readline().split()])\nb = [a[0],]\nc = [True]\nfor i in range(1, len(a)):\n    if a[i] != a[i - 1]: b.append(a[i])\n    c.append(a[i] != a[i - 1])\nfor i in range(len(a) - 1, -1, -1):\n    if (a[i] < b[-1]) and (not c[i]): b.append(a[i])\nprint(len(b))\nfor i in b: print(i, end=' ')\n\n", "#!/usr/bin/env python3.3\n# -*- coding: utf-8 -*-\n\ndef sereja_and_stairs ():\n\n    m = input()\n    b = input()\n\n    nr_allcards = int(m)\n    cards = list(map(int, b.split(' ')))\n\n    nr_cards = [0] * 5001\n    max_card = 0\n    for card in cards:\n        nr_cards[card] += 1\n        max_card = max(max_card, card)\n\n    up_stairs = []\n    down_stairs = []\n    for card in range(1, max_card+1):\n        if nr_cards[card] > 0:\n            nr_cards[card] -= 1\n            down_stairs.append(card)\n        if nr_cards[card - 1] > 0:\n            up_stairs.append(card - 1)\n    down_stairs.reverse()\n    stairs = up_stairs + down_stairs\n\n    nr_stairs = len(stairs)\n    stairs = ' '.join(map(str,stairs))\n    print(('{nr:d}\\n{stairs:s}'\n          .format(nr=nr_stairs, stairs=stairs)\n          ))\n\n    return\n\ndef __starting_point():\n    sereja_and_stairs()\n\n__starting_point()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n## Python 3 \ndef sereja_and_stairs ():\n\n    ## \n    # raw_input() \u2192 input()\n    m = input()\n    b = input()\n\n    ## \n    # nr_allcards = int(m)          #\n    cards = list(map(int, b.split(' ')))  #\n\n    ##\n    nr_cards = [0] * 5001           #\n    max_card = 0                    #\n    for card in cards:\n        nr_cards[card] += 1\n        max_card = max(max_card, card)\n\n    ##\n    #\n    #\n    up_stairs = []                  # \n    down_stairs = []                # \n    for card in range(1, max_card+1):\n        # \n        if nr_cards[card] > 0:\n            nr_cards[card] -= 1\n            down_stairs.append(card)\n        # \n        if nr_cards[card - 1] > 0:\n            up_stairs.append(card - 1)\n\n    ## \n    down_stairs.reverse()\n    stairs = up_stairs + down_stairs\n\n    ## \n    # \n    # \n    # [Python2] : print '%d\\n%s' % (nr_stairs, stairs)\n    # [Python3] : print('{number:d}\\n{stairs:s}'.format(number=nr_stairs, stairs=stairs))\n    nr_stairs = len(stairs)\n    stairs = ' '.join(map(str,stairs))\n    print('{number:d}\\n{stairs:s}'.format(number=nr_stairs, stairs=stairs))\n    return\n\ndef __starting_point():\n    sereja_and_stairs()\n\n__starting_point()", "n = int(input())\ns = sorted(map(int, input().split()))\nm = 5001\nc = [0] * m\nfor i in range(n):\n  c[s[i]] += 1\nc[s[-1]] = 1\na = [i for i in range(m) if c[i] > 0] + [i for i in range(m) if c[i] > 1][::-1]\nprint(len(a))\nprint(' '.join(map(str, a)))", "import sys\nimport math\n\nn = int(sys.stdin.readline())\nan = [int(x) for x in (sys.stdin.readline()).split()]\n\nd = dict()\nfor i in an:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n        \nt = list(d.keys())\nt.sort(reverse = True)\n\nresr = []\nresl = []\nc = 1\nresr.append(str(t[0]))\nfor i in t[1:]:\n    if(d[i] > 1):\n        c += 2\n        resr.append(str(i))\n        resl.append(str(i))\n    else:\n        c += 1\n        resr.append(str(i))\n        \nk = list(resl[::-1])\nk.extend(resr)     \nprint(c)  \nprint(\" \".join(k))", "from collections import Counter\nn = int(input())\nl = Counter(int(x) for x in input().split())\na = []\nb = []\nfor x, y in list(l.items()):\n\ta.append(x)\n\tif y > 1:\n\t\tb.append(x)\na.sort()\nb.sort()\nif len(b) and a[-1] == b[-1]:\n\tb = b[:-1]\nans = a + b[::-1]\nprint(len(ans))\nprint(' '.join(str(x) for x in ans))\n", "from itertools import chain\n\n\ndef main():\n    input()\n    lb, la = [], []\n    a = b = -1\n    it = iter(sorted(map(int, input().split())))\n    try:\n        while True:\n            c = next(it)\n            if a != c:\n                a = c\n                la.append(a)\n            c = next(it)\n            if b != c:\n                b = c\n                lb.append(b)\n            pass\n    except StopIteration:\n        if a == b:\n            del lb[-1]\n    print(len(la) + len(lb))\n    print(' '.join(map(str, chain(la, lb[::-1]))))\n\n\ndef __starting_point():\n    main()\n__starting_point()"]