["from math import gcd\n\n\ndef f(x):\n    return x - (x // C + x // D - x // lcm)\n\n\nA, B, C, D = list(map(int, input().split()))\nlcm = C * D // gcd(C, D)\nprint((f(B) - f(A - 1)))\n", "#!/usr/bin/env python3\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef main():\n\n    a, b, c, d = list(map(int, input().split()))\n    a -= 1\n    cd = lcm(c, d)\n    ans = b - a - (b // c - a // c) - (b // d - a // d) + (b // cd - a // cd)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a,b,c,d = map(int, input().split())\n\ndef gcd(a, b):\n  if b == 0:\n     return a\n  else:\n     return gcd(b,a%b)\n\ne = c*d//gcd(c,d)\nprint(b-a - b//c + (a+c-1)//c - b//d + (a+d-1)//d + b//e - (a+e-1)//e)", "import math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\na,b,c,d=map(int,input().split())\n\nc_div=(b//c)-((a-1)//c)\nd_div=(b//d)-((a-1)//d)\ncd_div=(b//lcm(c,d))-((a-1)//lcm(c,d))\n\nans=(b-a+1)-((c_div)+(d_div)-(cd_div))\nprint(ans)", "def gcd(a,b):\n  while b:a,b=b,a%b\n  return a\ndef lcm(a,b):return a*b//gcd(a,b)\nA,B,C,D=map(int,input().split())\ndef div(x):\n    num=x\n    num-=x//C\n    num-=x//D\n    num+=x//lcm(C,D)\n    return num\nprint(div(B)-div(A-1))", "import math\n\na, b, c, d = map(int, input().split())\n\nm = b//c + (-a//c)\nn = b//d + (-a//d)\ng = c * d // math.gcd(c, d)\np = b//g + (-a//g) \nprint(b-a+1-(m+1+n+1-(p+1)))", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef main():\n    A,B,C,D = list(map(int,input().split()))\n    #C\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u306e\u63a2\u7d22\n    tmpC = (A-1)//C\n    tmpC2 = (B)//C\n    numC = tmpC2 - tmpC\n    #D\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u306e\u63a2\u7d22\n    tmpD = (A-1)//D\n    tmpD2 = (B)//D\n    numD = tmpD2 - tmpD\n    #C\u3067\u3082D\u3067\u5272\u308a\u5207\u308c\u308b\u3082\u306e\n    if C == D:\n        ans = B-A+1-numC\n    else:\n        tmpCD = (A-1)//lcm(C,D)\n        tmpCD2 = (B)//lcm(C,D)\n        numCD = tmpCD2 - tmpCD\n        ans = B-A+1-numC-numD+numCD\n    return ans\nprint((main()))\n", "from math import gcd\nA, B, C, D = map(int,input().split())\n \nlcm = C*D // gcd(C,D)\na = (A-1)//C + (A-1)//D - (A-1)//lcm\nb = B//C + B//D - B//lcm\n \nprint(B-A+1-b+a)", "from math import gcd as g\n\na, b, c, d = map(int,input().split())\ncount = 0\n\nprint(b - a + 1 - (b // c - (a-1) // c + b // d - (a-1) // d - b // ((c*d)//g(c,d)) + (a-1) // ((c*d)//g(c,d))))", "a,b,c,d = map(int,input().split())\nfrom fractions import gcd\ne = c * d // gcd(c,d)\nprint(b-a+1 - (b//c  + b//d  - b//e) + ((a-1)//c + (a-1)//d - (a-1)//e))", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tC_fix\n# CreatedDate:  2020-09-03 20:30:23 +0900\n# LastModified: 2020-09-03 21:14:03 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\n\n\ndef gcd(a, b):\n    while a % b != 0:\n        r = a % b\n        a = b\n        b = r\n    return b\n\n\ndef main():\n    a, b, c, d = list(map(int, input().split()))\n    if (a/c).is_integer():\n        c_cnt = b//c - a//c + 1\n#        print(b//c, a//c)\n    else:\n        c_cnt = b//c - a//c\n#        print(b//c, a//c)\n    if (a/d).is_integer():\n        d_cnt = b//d - a//d + 1\n#        print(b//d, a//d)\n    else:\n        d_cnt = b//d - a//d\n#        print(b//d, a//d)\n\n    lcm = c * d // gcd(max(c, d), min(c, d))\n    if (a/lcm).is_integer():\n        lcm_cnt = b//lcm - a//lcm + 1\n    else:\n        lcm_cnt = b//lcm - a//lcm\n#    print(c_cnt, d_cnt, lcm_cnt)\n    print((b-a+1-c_cnt-d_cnt+lcm_cnt))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\na,b,c,d=map(int,input().split())\nlcm=(c*d)//math.gcd(c,d)\nans=(b-a)-((b//c-(a-1)//c)+(b//d-(a-1)//d)-(b//lcm-(a-1)//lcm))+1\nprint(ans)", "a,b,c,d=map(int,input().split())\ndcou=b//d-(a-1)//d\nccou=b//c-(a-1)//c\nfrom math import gcd\ndc=d*c//gcd(d,c)\ndccou=b//dc-(a-1)//dc\nans=b-a-dcou-ccou+dccou+1\nprint(int(ans))", "# coding: utf-8\n\n\ndef gcd(m, n):\n    if n == 0: return m\n    return gcd(n, m % n)\n\ndef main():\n    A, B, C, D = list(map(int, input().split()))\n    ans = B - A + 1\n    ans -= B // C + B // D\n    ans += (A - 1) // C + (A - 1) // D\n    lcm = C // gcd(C, D) * D\n    ans += B // lcm - (A - 1) // lcm\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nA, B, C, D = list(map(int, input().split()))\n\nlcm = C * D // math.gcd(C, D)\n\ndef num_multi(num, lb, ub): # [lb, ub]\u306bnum\u306e\u500d\u6570\u304c\u3044\u304f\u3064\u3042\u308b\u306e\u304b\u3092\u8fd4\u3059\n    lR = lb // num\n    lQ = lb % num\n\n    uR = ub // num\n    # uQ = ub % num\n\n    ans = uR - lR\n    if lQ == 0:\n        ans += 1\n\n    return ans\n\nprint(((B-A+1) - num_multi(C, A, B) - num_multi(D, A, B) + num_multi(lcm, A, B)))\n", "import math\na,b,c,d=list(map(int,input().split()))\nlcm=c*d//math.gcd(c,d)\na2=a-(a//c+a//d-a//lcm)\nb2=b-(b//c+b//d-b//lcm)\nprint((b2-a2 if a%c==0 or a%d==0 else b2-a2+1))\n", "import math\n\na, b, c, d = list(map(int, input().split()))\n\ngcd = (c * d) // math.gcd(c, d)\n\nr = b // c + b // d - b // gcd\nl = (a - 1) // c + (a - 1) // d - (a - 1) // gcd\n\nprint(((b - a) - (r - l) + 1))\n", "import math\nimport collections\nimport itertools\nimport copy\n\ndef YesNo(Bool):\n    if(Bool):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\n\ndef gcd(a, b):\n    \"\"\"Euclidean Algorithm\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n  \ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n\ndef resolve():\n    A,B,C,D=list(map(int,input().split()))\n\n    Cmin=(A-1)//C\n    Dmin=(A-1)//D\n    Cmax=B//C\n    Dmax=B//D\n    LCM=lcm(C,D)\n    LCMmin=(A-1)//LCM\n    LCMmax=B//LCM\n\n    Cnum=(Cmax - Cmin)\n    Dnum=(Dmax - Dmin)\n    LCMnum=(LCMmax - LCMmin)\n\n    ans=B-(A-1) - Cnum - Dnum  +LCMnum\n\n    print(ans)\n\n\nresolve()\n", "import math\n\na,b,c,d = map(int,input().split())\n\ns1=b//c - (a-1)//c\ns2=b//d - (a-1)//d\ns12=b//(c*d//math.gcd(c,d)) - (a-1)//(c*d//math.gcd(c,d))\nprint(b-a+1-(s1+s2-s12))", "import math\n \nA,B,C,D = map(int,input().split())\n \ndef F(N):\n    # N\u4ee5\u4e0b\u3067\u3069\u3061\u3089\u3067\u3082\u5272\u308c\u306a\u3044\n    x = N//C\n    x += N//D\n    lcm = C*D//math.gcd(C,D)\n    x -= N//lcm\n    return N-x\n \nanswer = F(B) - F(A-1)\nprint(answer)", "import math\nA, B, C, D = map(int, input().split())\nE = C * D // math.gcd(C, D)\nA -= 1\nprint((B - A) - (B // C - A // C) - (B // D - A // D) + (B // E - A // E))", "def lcm(a):\n    from math import gcd\n    x = a[0]\n    for i in range(1, len(a)):\n        x = (x * a[i]) // gcd(x, a[i])\n    return x\n\n\nA, B, C, D = map(int, input().split())\nnum = []\nnum.append(C)\nnum.append(D)\na = A - 1\n\nx_B = B - (B//C) - (B//D) + (B//lcm(num))\nx_A = a - (a//C) - (a//D) + (a//lcm(num))\n\nans = x_B - x_A\n\nprint(ans)", "import math\nA,B,C,D=list(map(int,input().split()))\nE=int(C * D / math.gcd(C, D))\nprint(((((B-A)+1)-((B//C)-((A-1)//C)))-((B//D)-((A-1)//D)))+(B//E)-((A-1)//E))", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nA, B, C, D = map(int, input().split())\nc_multiples = B//C - (A-1)//C\nd_multiples = B//D - (A-1)//D\nlcm_multiples = B//lcm(C, D) - (A-1)//lcm(C, D)\nprint(B - A + 1 - c_multiples - d_multiples + lcm_multiples)", "import math\n \na,b,c,d=map(int,input().split())\n \nn=b-a+1\n \ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n  \nx=lcm(c,d)\n \ncc=b//c-(a-1)//c\ndc=b//d-(a-1)//d\nxc=b//x-(a-1)//x\n \nprint(n-cc-dc+xc)", "import math\na,b,c,d=map(int,input().split())\ne=c*d//math.gcd(c,d)\nif a%c==0:\n  p=b//c-a//c+1\nelse:\n  p=b//c-a//c\nif a%d==0:\n  q=b//d-a//d+1\nelse:\n  q=b//d-a//d\nif a%e==0:\n  r=b//e-a//e+1\nelse:\n  r=b//e-a//e\nprint(b-a+1-(p+q-r))", "from math import gcd\n\ndef f(x,c,d):\n    res = x\n    res -= x//c\n    res -= x//d\n    res += x//(c//gcd(c,d)*d)\n    return res\n\na,b,c,d = map(int,input().split())\nans = f(b,c,d) - f(a-1,c,d)\nprint(ans)", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\nA,B,C,D = map(int,input().split())\nx = B // lcm(C, D) - (A-1) // lcm(C, D)\ny = B // C - (A-1) // C\nz = B // D - (A-1) // D\nans = (B-A+1) - (y+z-x)\nprint(ans)", "import math\na,b,c,d= map(int, input().split())\ne=(c*d)//math.gcd(c,d)\n\nf=b-(b//c+b//d-b//e)\ng=(a-1)-((a-1)//c+(a-1)//d-(a-1)//e)\n\nprint(int(f-g))", "import fractions\n\na,b,c,d = map(int, input().split())\n\ndef t(tar, l1, l2):\n    return (tar - (tar//l1 + tar//l2) + tar//(l1*l2//(fractions.gcd(l1, l2))))\n\nprint(t(b,c,d) - t(a-1,c,d))", "import math\n\na, b, c, d = map(int, input().split())\n\nbase = c * d // math.gcd(c, d)\n\nc_num = b // c - (a-1) // c\nd_num = b // d - (a-1) // d\nbase_num = b // base - (a-1) // base\n\nx = int(c_num + d_num - base_num)\nprint(b-a+1 - x)", "from math import gcd\na,b,c,d = map(int,input().split())\n\ne = (c*d)//gcd(c,d)\n\ncntC = b//c - (a-1)//c\ncntD = b//d - (a-1)//d\ncntE = b//e - (a-1)//e\n\nprint((b-a)-(cntC+cntD-cntE)+1)", "import math\nA, B, C, D = map(int, input().split())\n\n# for\u6587\u306f\u9593\u306b\u5408\u308f\u306a\u3044\u306e\u3067\u3001\u5305\u9664\u539f\u7406\u3092\u4f7f\u3048\uff01\n\n# C\u3067\u3082D\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044 =\n# \u5168\u4f53(a) - C\u3067\u5272\u308a\u5207\u308c\u308b(b) + D\u3067\u5272\u308a\u5207\u308c\u308b(c)\n# + C\u3067\u3082D\u3067\u3082\u5272\u308a\u5207\u308c\u308b(d)\n\n# C\u3067\u5272\u308a\u5207\u308c\u308b\u500b\u6570 =\n# B\u4ee5\u4e0b\u306e\u6570\u3067C\u3067\u5272\u308a\u5207\u308c\u308b\u500b\u6570 - (A\u22121)\u4ee5\u4e0b\u306e\u6570\u3067C\u3067\u5272\u308a\u5207\u308c\u308b\u500b\u6570\n\nlcm = C*D // math.gcd(C, D)\na = B - A + 1\nb = B // C - (A-1) // C\nc = B // D - (A-1) // D\nd = B // lcm - (A-1) // lcm\n \nprint(a-b-c+d)", "A,B,C,D = map(int,input().split())\nimport math\nE = C*D//math.gcd(C,D)\nA -= 1\nc = B//C - A//C\nd = B//D - A//D\ne = B//E - A//E\nprint(B-A-(c+d-e))", "import sys\nimport math\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nlcm = (c * d) // math.gcd(c, d)\ndiv_c = (b // c) - ((a - 1) // c)\ndiv_d = (b // d) - ((a - 1) // d)\ndiv_lcm = (b // lcm) - ((a - 1) // lcm)\n\nprint(b - a + 1 - div_c - div_d + div_lcm)", "import math\na,b,c,d = list(map(int,input().split()))\na-=1\ne = c*d//math.gcd(c,d)\nprint((b-b//c-b//d+b//e-(a-a//c-a//d+a//e)))\n", "from math import *\n\na, b, c, d = map(int, input().split())\ne = (c * d) // gcd(c, d)\n\nf = b - b//c - b//d + b//e\ng = (a-1) - (a-1)//c - (a-1)//d + (a-1)//e\n\nprint(f-g)", "import math\nA,B,C,D=list(map(int,input().split()))\n\nnad=B//D\nnac=B//C\nnid=(A-1)//D\nnic=(A-1)//C\nnacd=B//(D*C//math.gcd(D,C))\nnicd=(A-1)//(D*C//math.gcd(D,C))\n\nans=B-A+1-(nad-nid)-(nac-nic)+(nacd-nicd)\nprint((int(ans)))\n\n", "A,B,C,D = map(int,input().split())\n\ndef gcd(x,y):\n    if(x == 0):\n        return y\n    if(y == 0):\n        return x\n    if(x >= y):\n        return gcd(y,x%y)\n    if(x < y):\n        return gcd(y%x,x)\n\nl = (C * D) // gcd(C,D)\n\np = B//C - (A-1)//C\nq = B//D - (A-1)//D\nr = B//l - (A-1)//l\ns = p + q - r\nprint(B-A+1-s)", "from math import gcd\n\ndef count(x, c, d):\n  # x\u4ee5\u4e0b\u306ec\u3067\u3082d\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u5974\u3092\u6570\u3048\u308b\n  lcm = c // gcd(c, d) * d\n  return x - x // c - x // d + x // lcm\n\na,b,c,d=list(map(int,input().split()))\nprint((count(b,c,d)-count(a-1,c,d)))\n", "import math\n\ndef lcm(a,b):\n    return a*b//math.gcd(a,b)\n\na, b, c, d = map(int, input().split())\n\nl = lcm(c, d)\nans = (b-a+1) - ((b//c + b//d - b//l) - ((a-1)//c + (a-1)//d - (a-1)//l))\nprint(ans)", "from math import gcd\na, b, c, d = map(int, input().split())\nlcm = c*d // gcd(c, d)\nans = b - (b//c + b//d - b//lcm) - (a-1 - ((a-1)//c + (a-1)//d - (a-1)//lcm))\nprint(ans)", "import math\nA,B,C,D = list(map(int,input().split()))\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nlcm = lcm(C,D)\n\nu_b_ans = (B//C + B//D) - B//lcm\nu_a_ans = ((A-1)//C + (A-1)//D) - (A-1)//lcm\n\nprint((B-A+1 - u_b_ans + u_a_ans))\n", "a,b,c,d = map(int,input().split())\n\nfrom math import gcd\n\nlcm = (c*d)//gcd(c,d)\n\nb_div_c = b//c\na_div_c = (a-1)//c\n\nb_div_d =b//d\na_div_d = (a-1)//d\n\nb_div_cd = b//lcm\na_div_cd = (a-1)//lcm\n\n\n\nans1 = b_div_c - a_div_c\nans2 = b_div_d - a_div_d\nans3 = b_div_cd - a_div_cd\n\nans = b -(a-1) - ans1 - ans2 + ans3\nprint(ans)", "a, b, c, d = map(int, input().split())\n\n# 2\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u6700\u5c0f\u516c\u500d\u6570\u3092\u8fd4\u3059\u95a2\u6570\nimport math\ndef lcm(a, b):\n    y = a*b / math.gcd(a, b)\n    return int(y)\n\nx = (b - a)+1\n\n# c\u306e\u500d\u6570\u306e\u6570\ncc = (b//c) - ((a-1)//c)\n\n# d\u306e\u500d\u6570\u306e\u6570\ndd = (b//d) - ((a-1)//d)\n\n# c\u3068d\u306e\u500d\u6570\u306e\u6570\ncd = lcm(c,d)\ncd = (b//cd) - ((a-1)//(cd))\n\n# c\u3068d\u306e\u548c\u96c6\u5408\nwa = (cc-cd)+dd\n\nprint(x-wa)", "import math\n\nA, B, C, D = map(int, input().split())\n\nc = B // C - (A - 1) // C\nd = B // D - (A - 1) // D\nlcm = C * D // math.gcd(C, D)\ncd = B // lcm - (A - 1) // lcm\n\nx = c + d - cd\nprint(B - A + 1 - x)", "import math\n\ndef lcm(x, y):\n  return (x * y) // math.gcd(x, y)\n\ndef kazu(s,e,n):\n  if s%n>0:\n    s2=s-s%n\n    s2+=n\n  else:\n    s2=s\n  e2=e-e%n\n  if s<=s2<=e and s<=e2<=e:\n    return ((e2-s2+n)//n)\n  return 0\n\na,b,c,d=list(map(int,input().split()))\n\nnc = kazu(a,b,c)\nnd = kazu(a,b,d)\nncd = kazu(a,b,lcm(c,d))\n\nans = b-a+1\n\nans -= nc\nans -= nd\nans += ncd\n\nprint(ans)\n", "import math\n#import itertools\n#import numpy as np\n#from collections import deque\n# sys.setrecursionlimit(10 ** 6)\n#MOD = 10 ** 9 + 7\n#INF = 10 ** 9\n#PI = 3.14159265358979323846\n\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    a,b,c,d=INTM()\n    lcm=(c*d)//math.gcd(c,d)\n    a-=1\n    ct_a=a-(a//c)-(a//d)+(a//lcm)\n    ct_b=b-(b//c)-(b//d)+(b//lcm)\n    print(ct_b-ct_a)\n    \ndef __starting_point():\n    do()\n__starting_point()", "import sys\nimport math\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    a, b, c, d = inl()\n    cd = c * d // math.gcd(c, d)\n    r1 = b // c + b // d - b // cd\n    r2 = (a - 1) // c + (a - 1) // d - (a - 1) // cd\n    ans = (b - r1) - (a - 1 - r2)\n    return ans\n\n\nprint(solve())\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n\ndef gcd2(i, past):\n    return i * past // math.gcd(i, past)\n    \ndef main():\n    A, B, C, D = MI()\n    AC = (A-1) // C\n    BC = B // C\n    \n    AD = (A-1)//D\n    BD = B//D\n    \n    ACD = (A-1)//(gcd2(C, D))\n    BCD = B//(gcd2(C, D))\n    \n    ans = (BC + BD - BCD) - (AC + AD - ACD)\n    print(B-A+1-ans)\n    \n    \n    \ndef __starting_point():\n    main()\n__starting_point()", "import math as m\nA,B,C,D=map(int,input().split())\nA-=1\ng=C*D//m.gcd(C,D)\nx=B//C-A//C\ny=B//D-A//D\nz=B//g-A//g\nprint(B-A-x-y+z)", "import math\n\ndef lcm(x,y):\n    return (x*y)//math.gcd(x,y)\n\nA,B,C,D=list(map(int,input().split()))\n\nl=lcm(C,D)\n\ntemp=l-(l//C+l//D-1)\n\na=(A-1)%l\nb=B%l\n\naa=(A-1)//l\nbb=B//l\n\ntempA=a-(a//C+a//D-1)\ntempB=b-(b//C+b//D-1)\n            \n\nans=temp*bb+tempB-(temp*aa+tempA)\n\n\nprint(ans)\n", "import math\n\ndef solve(a,c,d):\n    x=a+1\n    x-=a//c+1\n    x-=a//d+1\n    x+=a//(c*d//math.gcd(c,d))+1\n    return x\n\nA,B,C,D=list(map(int,input().split()))\nprint((solve(B,C,D)-solve(A-1,C,D)))\n", "import math\na,b,c,d=map(int,input().split())\nn,m,k=0,0,0\n\nif a%c==0:\n    n=b//c-a//c+1\nelse:\n    n=b//c-a//c\nif a%d==0:\n    m=b//d-a//d+1\nelse:\n    m=b//d-a//d\ne=(c*d)//math.gcd(c,d)\nif a%e==0:\n    k=b//e-a//e+1\nelse:\n    k=b//e-a//e\nk=n+m-k\nprint(b-a-k+1)", "import math\nA, B, C, D = map(int, input().split(' '))\nCD_least_common = C * D // math.gcd(C, D)\nexcept_rst = B // C - (A - 1) // C + B // D - (A - 1) // D - (B // CD_least_common - (A - 1) // CD_least_common)\nrst = B - (A - 1) - except_rst\nprint(rst)", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n    \nA,B,C,D = map(int,input().split())\nans = 0\n\nAc = (A-1)//C\nAd = (A-1)//D\nAcd = (A-1)//lcm(C,D)\nBc = B//C\nBd = B//D\nBcd = B//lcm(C,D)\n\nc = Bc-Ac\nd = Bd-Ad\ncd = Bcd-Acd\n\nprint(B-A+1-(c+d-cd))", "# coding: utf-8\n# Your code here!\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b \n\ndef getExclude(x, c, d):\n    return x - x//c - x//d + x//lcm(c, d)\n\na,b,c,d=(int(x) for x in input().split())\n\nans = getExclude(b, c, d) - getExclude(a-1, c, d)\n\nprint(ans)", "import math\na,b,c,d = map(int,input().split())\ndivc = b // c - (a-1) // c\ndivd = b // d - (a-1) // d\ncd = b // ((c * d) // math.gcd(c,d)) - (a-1) // ((c * d) // math.gcd(c,d))\nprint(b - a - divc - divd + cd + 1)", "import math\n\na, b, c, d = map(int, input().split())\n\ndef lcm(x,y):\n    return (x*y) // math.gcd(x,y)\n\nprint((b- b//c - b//d + (b // lcm(c,d))) - ((a-1)- (a-1)//c - (a-1)//d +( (a-1) // lcm(c,d))))", "import math\n \ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n \na,b,c,d=map(int,input().split())\n \nc_div=(b//c)-((a-1)//c)\nd_div=(b//d)-((a-1)//d)\ncd_div=(b//lcm(c,d))-((a-1)//lcm(c,d))\n \nans=(b-a+1)-((c_div)+(d_div)-(cd_div))\nprint(ans)", "import math\na,b,c,d=map(int,input().split())\nlcm=(c*d)//math.gcd(c,d)\nprint((b-(b//c+b//d-b//lcm))-(a-1-((a-1)//d+(a-1)//c-(a-1)//lcm)))", "import math\nA,B,C,D=map(int,input().split())\nif A%C==0:\n    divC=B//C-A//C+1\nelse:\n    divC=B//C-A//C\nif A%D==0:\n    divD=B//D-A//D+1\nelse:\n    divD=B//D-A//D\nlcm=C*D//math.gcd(C,D)\nif A%lcm==0:\n    divlcm=B//lcm-A//lcm+1\nelse:\n    divlcm=B//lcm-A//lcm\nprint(B-A+1-divC-divD+divlcm)", "import math\n\nA, B, C, D = list(map(int, input().split()))\n\ncd = (C * D) // math.gcd(C, D)\n\npac, qac = divmod(A, C)\npad, qad = divmod(A, D)\npacd, qacd = divmod(A, cd)\n\npbc, qbc = divmod(B, C)\npbd, qbd = divmod(B, D)\npbcd, qbcd = divmod(B, cd)\n\npac = pac - 1 if qac == 0 else pac\npad = pad - 1 if qad != 0 else pad\npacd = pacd - 1 if qacd != 0 else pacd\n\nans = (pbc + pbd - pbcd) - (pac + pad - pacd)\nprint((B - A - ans + 1))\n\n", "a,b,c,d = map(int,input().split())\nx,y = c,d\nwhile y != 0:\n    x,y = y,x%y\nlcm = c * d // x\nc_upper = b // c\nc_lower = -(-a // c)\nd_upper = b // d\nd_lower = -(-a // d)\nlcm_upper = b // lcm\nlcm_lower = -(-a // lcm)\nprint((b-a+1)-(c_upper-c_lower+1)-(d_upper-d_lower+1)+(lcm_upper-lcm_lower+1))", "import math\n\na, b, c, d = map(int, input().split())\n\ndef f(x, y):\n    return (x*y//math.gcd(x, y))\n\nz = f(c, d)\nprint(b - a + 1 - ((b//c - (a-1)//c) + (b//d - (a-1)//d) - (b//z - (a-1)//z)))", "import math\na,b,c,d = map(int,input().split())\ne = c*d//math.gcd(c,d)\nwa = 0\nc_seki = b//c-(a-1)//c\nd_seki = b//d-(a-1)//d\ne_seki = b//e-(a-1)//e\nwa = c_seki+d_seki-e_seki\nprint(b-a+1-wa)", "import math\n\na,b,c,d = list(map(int,input().split()))\n\ns1=b//c - (a-1)//c\ns2=b//d - (a-1)//d\ns12=b//(c*d//math.gcd(c,d)) - (a-1)//(c*d//math.gcd(c,d))\n#print(s1,s2,s12)\nprint((b-a+1-(s1+s2-s12)))\n", "a,b,c,d = list(map(int,input().split()))\n\ndef mul_count(v,w,n):\n  if v % n == 0:\n    s = v//n\n  else:\n    s = v//n + 1\n  e = w // n\n  if s > e:\n    return 0\n  else:\n    return e - s + 1\n\ndef koyaku(x,y):\n  big = max(x,y)\n  small= min(x,y)\n  amari = big % small\n  if amari == 0:\n    return small\n  else:\n    return koyaku(small,amari)\n\nc_mul = mul_count(a,b,c)\nd_mul = mul_count(a,b,d)\n\ncd_common = koyaku(c,d)\ncd_mul = c * d // cd_common\ncommon_mul = mul_count(a,b,cd_mul)\nyobun = c_mul + d_mul - common_mul\nprint((b - a + 1 - yobun))\n", "import math\n\nA,B,C,D = map(int, input().split())\n\nA -= 1\n\nlcm = C*D//math.gcd(C,D)\n\nprint(B - B//C - B//D + B//lcm - A + A//C + A//D - A//lcm)", "import math\n\na, b, c, d = list(map(int, input().split()))\n\ngcd = (c * d) // math.gcd(c, d)\n\nr = b // c + b // d - b // gcd\nl = (a - 1) // c + (a - 1) // d - (a - 1) // gcd\n\nprint(((b - a) - (r - l) + 1))\n", "import sys\n\ndef gcd(a, b):\n    \"\"\"\n    \u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"\n    \u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\n    \"\"\"\n    return a*b//(gcd(a, b))\n\n\ninput = sys.stdin.readline\n\na, b, c, d = list(map(int, input().split()))\n\ndiv_ac = (a-1) // c\ndiv_bc = b // c\n\n\ndiv_ad = (a-1) // d\ndiv_bd = b // d\n\nlcm_cd = lcm(c,d)\n\ndiv_acd = (a-1) // lcm_cd\ndiv_bcd = b // lcm_cd\n\na_1_result =  div_ac + div_ad - div_acd\nb_result = div_bc + div_bd - div_bcd\n\nprint(((b+1 - a) - (b_result - a_1_result)))\n", "def lcm(a, b):\n    return a * b // gcd (a, b)\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n  A, B, C, D = map(int, input().split())\n  E = lcm(C, D)\n  a_c, a_d, a_cd = (A-1) // C, (A-1) // D, (A-1) // E\n  b_c, b_d, b_cd = B // C, B // D, B // E\n  a, b = a_c + a_d - a_cd, b_c + b_d - b_cd\n  ans = (B - A + 1) - (b - a)\n  print(ans)\n  \nmain()", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    A, B, C, D = LI()\n\n    # X\u4ee5\u4e0b\u306e\u81ea\u7136\u6570\u3067C\u3067\u3082D\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u3082\u306e\u306e\u500b\u6570\n    def f(X):\n        ret = X - X // C - X // D + X // (C * D // math.gcd(C, D))\n        return ret\n\n    ans = f(B) - f(A - 1)\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import math\na,b,c,d=map(int,input().split())\n\ncyaku=b//c\ndyaku=b//d\n\n\ncds=b//((c*d)//(math.gcd(c,d)))\n\nx=b-(cyaku+dyaku-cds)\n\ncyaku2=(a-1)//c\ndyaku2=(a-1)//d\n\ncds2=(a-1)//((c*d)//(math.gcd(c,d)))\n\ny=(a-1)-(cyaku2+dyaku2-cds2)\n\nprint(x-y)", "from functools import reduce\nfrom math import gcd\n\ndef lcm(n, c, d):\n    g = gcd(c, d)\n    l = c // g * d\n    return n - (n // c) - (n // d) + n //l\n\na, b, c, d = map(int, input().split())\nprint(lcm(b, c, d) - lcm(a-1, c, d))", "import math\n\na,b,c,d=map(int,input().split())\n\nn=b-a+1\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n  \nx=lcm(c,d)\n\ncc=b//c-(a-1)//c\ndc=b//d-(a-1)//d\nxc=b//x-(a-1)//x\n\nprint(n-cc-dc+xc)", "import math\na, b, c, d = list(map(int, input().split()))\n\n\ndef calc(x):\n    nonlocal c, d\n    l = c // math.gcd(c, d) * d\n    return x - x // c - x // d + x // l\n\n\nprint((calc(b) - calc(a - 1)))\n", "a,b,c,d=map(int,input().split())\na-=1\ndef gcd(a,b):\n    if b==0: return a\n    else:\n        return gcd(b,a%b)\ndef lcm(a,b):\n    return a*b//gcd(a,b)\naa= b//c-a//c \nbb= b//d-a//d \ncc= b//lcm(c,d)- a//lcm(c,d)\nprint(b-a-(aa+bb-cc))", "from fractions import gcd\ndef lcm(x,y):return x*y//gcd(x,y)\n\nA,B,C,D=map(int, input().split())\n\nCwareru=B//C-(A-1)//C\nDwareru=B//D-(A-1)//D\nCDwareru=B//lcm(C,D)-(A-1)//lcm(C,D)\n#print(Cwareru,Dwareru,CDwareru)\nprint(B-A+1-(Cwareru+Dwareru-CDwareru))", "import math\na, b, c, d = list(map(int, input().split()))\n\nGCD = math.gcd(c, d)\nLCM = c*d//GCD\nprint((b-b//c-b//d+b//LCM-a+1+(a-1)//c+(a-1)//d-(a-1)//LCM))\n", "import math\n\ndef lcm(x,y):\n  return (x*y)//math.gcd(x,y)\n\nA,B,C,D=map(int,input().split())\nCD_lcm=lcm(C,D)\n\nB_s=B-B//C-B//D+B//CD_lcm\nA_s=(A-1)-(A-1)//C-(A-1)//D+(A-1)//CD_lcm\nprint(B_s-A_s)", "import sys\nimport math\n\nA, B, C, D = map(int, sys.stdin.readline().split())\nlcm = C * D // math.gcd(C, D)\n\nbc = B // C\nbd = B // D\nbg = B // lcm\nac = (A-1) // C\nad = (A-1) // D\nag = (A-1) // lcm\n\nprint(B - A + 1 - (bc - ac) - (bd - ad) + (bg - ag))", "import math\nA, B, C, D = map(int, input().split())\n \n# C\u3067\u3082D\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044 = \u5168\u4f53(a) - C\u3067\u5272\u308a\u5207\u308c\u308b(b) + D\u3067\u5272\u308a\u5207\u308c\u308b(c) + C\u3067\u3082D\u3067\u3082\u5272\u308a\u5207\u308c\u308b(d)\nlcm = C*D // math.gcd(C, D)\na = B - A + 1\nb = B // C - (A-1) // C\nc = B // D - (A-1) // D\nd = B // lcm - (A-1) // lcm\n\nprint(a-b-c+d)", "from math import gcd\na,b,c,d = map(int, input().split())\nlcm = c*d//gcd(c,d)\na -= 1\np = b//c - a//c\nq = b//d - a//d\nr = b//lcm - a//lcm\na += 1\nprint(b-a+1-(p+q-r))", "# AtCoder Beginner Contest 131\n# C - Anti-Division\nimport math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nA,B,C,D=list(map(int,input().split()))\nbc=B//C\nac=(A-1)//C\ncnum=bc-ac\n\nbd=B//D\nad=(A-1)//D\ndnum=bd-ad\n\n\nlcmcd=lcm(C,D)\nblcmcd=B//lcmcd\nalcmcd=(A-1)//lcmcd\nlcmcdnum=blcmcd-alcmcd\n\n\nprint((B-A-cnum-dnum+lcmcdnum+1))\n", "import math\n\na, b, c, d = map(int, input().split())\nl = c * d // math.gcd(c, d)\nall = b - a + 1\ncan_c = b // c - (a - 1) // c\ncan_d = b // d - (a - 1) // d\ncan_cd = b // l - (a - 1) // l\nans = all - can_c - can_d + can_cd\nprint(ans)", "import math\n\nA, B, C, D = map(int, input().split(' '))\n\nnum_C_baisu = B//C - (A-1)//C #(math.ceil(A/C) - 1)\n\nnum_D_baisu = B//D - (A-1)//D #(math.ceil(A/D) - 1)\n\nCD = int(C*D/math.gcd(C,D))\n\nnum_CD_baisu = B//CD - (A-1)//CD #(math.ceil(A/CD) - 1)\n\nbaisu_num = num_C_baisu + num_D_baisu - num_CD_baisu\n\nprint(B-A+1-baisu_num)", "import math\ndef lcm(a):\n    LCM = a[0]\n    for i in range(1, len(a)):\n        LCM = LCM * a[i] // math.gcd(LCM, a[i])\n    return LCM\n\ndef f(k):\n    return b//k - (a-1)//k\n\na, b, c, d = map(int, input().split())\nALL = b - a + 1\nans = ALL - (f(c) + f(d) - f(lcm([c,d])))\nprint(ans)", "import math\nA, B, C, D = map(int, input().split())\n\nLCD = C*D//math.gcd(C,D)\n\nans = B-(B//C + B//D - B//LCD) - ((A-1)-((A-1)//C + (A-1)//D - (A-1)//LCD))\n\nprint(int(ans))", "def gcd(x, y):\n    if y == 0:\n        return x\n    \n    r = x % y\n    return gcd(y, r)\n\nA, B, C, D = [int(x) for x in input().split()]\nif C > D:\n    E = C * D // gcd(C, D)\nelse:\n    E = C * D // gcd(D, C)\n\ndivC = B // C - (A - 1) // C\ndivD = B // D - (A - 1) // D\ndivE = B // E - (A - 1) // E\ndiv = divC + divD - divE\nans = B - A + 1 - div\n\nprint(ans)", "# ABC 131 C\nimport math\n[A, B, C, D] = [int(i) for i in input().split()]\nu = int((C*D)/math.gcd(C, D))\ns = B//C - A//C + B//D - A//D - B//(u) + A//(u) + 1\nt = 0\nif A%C != 0:\n    t -= 1\nif A%D != 0:\n    t -= 1\nif A%u != 0:\n    t += 1\ns += t\n\nans = B - A + 1 - s\nprint(ans)", "import math\na,b,c,d=map(int,input().split())\np = c * d // math.gcd(c, d)\nx = b//c + b//d - b//p -((a-1)//c + (a-1)//d - (a-1)//p)\nans = b-a+1 -x\nprint(ans)", "import math\n\na,b,c,d = map(int,input().split())\n\nsplit_b = b - b//c - b//d + b//(c*d//math.gcd(c, d))\nsplit_a = a - 1 - (a-1)//c - (a-1)//d + (a-1)//(c*d//math.gcd(c, d))\n\nprint(split_b-split_a)", "import math\n\nA,B,C,D = list(map(int,input().split()))\ndivAC,modAC = divmod(A,C)\ndivBC,modBC = divmod(B,C)\nans = 0\nif modAC == 0:\n    ans += divBC - divAC + 1\nelse:\n    ans += divBC - divAC\n\ndivAD,modAD = divmod(A,D)\ndivBD,modBD = divmod(B,D)\nif modAD == 0:\n    ans += divBD - divAD + 1\nelse:\n    ans += divBD - divAD\ndivACD,modACD = divmod(A,int(C * D / math.gcd(C, D)))\ndivBCD,modBCD = divmod(B,int(C * D / math.gcd(C, D)))\nif modACD == 0:\n    ans -= divBCD - divACD + 1\nelse:\n    ans -= divBCD - divACD\n\nprint((B-A+1-ans))\n\n", "# \u89e3\u8aac\u52d5\u753b\u307f\u305f\uff1a https://www.youtube.com/watch?v=XI8exXVxZ-Q\n# \u6700\u5c0f\u516c\u500d\u6570\n# \u30e6\u30fc\u30b0\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\n\nimport math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef f(x, c, d):\n    res = x\n    res -= x//c\n    res -= x//d\n    res += x//lcm(c, d)\n    return res\n\na, b, c, d = map(int, input().split())\nans = f(b, d, c) - f(a-1, c, d)\nprint(ans)", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\nA, B, C, D = map(int,input().split())\nCres = B//C - (A-1)//C\nDres = B//D - (A-1)//D\nCDres = B//lcm(C,D) - (A-1)//lcm(C,D)\nprint(B-A+1-(Cres + Dres - CDres))", "def gcd(a,b):\n    while b:a,b=b,a%b\n    return a\ndef lcm(c,d):return c*d//gcd(c,d)\ndef div(x):\n    num=x\n    num-=x//C\n    num-=x//D\n    num+=x//lcm(C,D)\n    return num\nA,B,C,D=map(int,input().split())\nprint(div(B)-div(A-1))", "import math\n\n\ndef cnt(a: int, k: int):\n    return a // k\n\n\ndef num(a, c, d):\n    m_a_c = cnt(a, c)\n    m_a_d = cnt(a, d)\n    m_a_cd = cnt(a, c * d // math.gcd(c, d))\n    return a - m_a_c - m_a_d + m_a_cd\n\n\na, b, c, d = list(map(int, input().split()))\nprint((num(b, c, d) - num(a-1, c, d)))\n", "\ndef main():\n    import fractions\n\n    a, b, c, d = [int(i) for i in input().split()]\n\n    d_c = b // c - (a-1) // c\n    d_d = b // d - (a-1) // d\n\n    cd = c * d // fractions.gcd(c, d)\n    d_cd = b // cd - (a - 1) // cd\n\n    print((b-a + 1 - (d_c + d_d - d_cd)))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()"]