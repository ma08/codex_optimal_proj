["for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    for j in range(len(arr)):\n        for c in range(j + 2, len(arr)):\n            if arr[c] == arr[j]:\n                flag = True\n                break\n    print(\"YES\" if flag else \"NO\")\n", "q = int(input())\nfor rwe in range(q):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tdasie = False\n\td = {}\n\tfor i in range(n):\n\t\td[l[i]] = []\n\tfor i in range(n):\n\t\td[l[i]].append(i)\n\tfor elt in d:\n\t\tif len(d[elt]) > 2:\n\t\t\tdasie = True\n\t\t\tbreak\n\t\tif len(d[elt]) < 2:\n\t\t\tcontinue\n\t\tif len(d[elt]) == 2:\n\t\t\tif d[elt][0] != d[elt][1] - 1:\n\t\t\t\tdasie = True\n\tif dasie:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \nM = mod = 10**9 + 7\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n = val()\n    l = li()\n    d = {}\n    ans = 'NO'\n    for i in range(n):\n        if l[i] in d:\n            if i - d[l[i]]> 1:\n                ans = 'YES'\n                break\n        else:\n            d[l[i]] = i\n    print(ans)", "from sys import stdin,stdout                           #\nimport math                                            #\nimport heapq                                           #\n                                                       #\nt = 1                                                  #\ndef aint():                                            #\n\treturn int(input().strip())                        #\ndef lint():                                            #\n\treturn list(map(int,input().split()))              #\ndef fint():                                            #\n\treturn list(map(int,stdin.readline().split()))     #\n                                                       #\t\n########################################################\n\ndef main():\n\tn=aint()\n\tl=lint()\n\tans=\"NO\"\n\tfor i in range(n):\n\t\tfor j in range(i+2,n):\n\t\t\tif l[i]==l[j]:\n\t\t\t\tans=\"YES\"\n\t\t\t\tbreak\n\tprint(ans)\n\t#solve\n\nt=int(input())\n\n########################################################\nfor i in range(t):                                     #\n\tmain()                                             #", "\nt = int(input())\n\nfor loop in range(t):\n\n    n = int(input())\n\n    a = list(map(int,input().split()))\n\n    lis = [None] * (n+1)\n\n    ans = \"NO\"\n    for i in range(n):\n\n        if lis[a[i]] == None:\n            lis[a[i]] = i\n        elif lis[a[i]] + 1 < i:\n            ans = \"YES\"\n            break\n\n    print (ans)\n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(item) for item in input().split()]\n    ok = False\n    for i in range(n-2):\n        for j in range(i+2, n):\n            if a[i] == a[j]:\n                ok = True\n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    for _ in range(int(input())):\n        N = int(input())\n        A = list(map(int, input().split()))\n        dic = {}\n        ok = 0\n        for i, a in enumerate(A):\n            if a not in dic:\n                dic[a] = i\n            else:\n                if i - dic[a] > 1:\n                    ok = 1\n                    break\n        if ok:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport math\nimport bisect\n\ndef solve(A):\n    n = len(A)\n    d = dict()\n    for i in range(n):\n        if A[i] not in d:\n            d[A[i]] = i\n        else:\n            if i - d[A[i]] > 1:\n                return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        A = list(map(int, input().split()))\n        if solve(A):\n            print('YES')\n        else:\n            print('NO')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t = int(input())\nwhile(t):\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        if(a[i] in d):\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    flag = 1\n    for i in d:\n        if(len(d[i]) >= 3):\n            print(\"YES\")\n            break\n    else:\n        for i in d:\n            if(len(d[i]) >= 2 and d[i][-1] - d[i][0] >= 2):\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    data = tuple(map(int, input().split()))\n    met = []\n    for i in data:\n        if i in met[:-1]:\n            print(\"YES\")\n            break\n        met.append(i)\n    else:\n        print(\"NO\")\n    \n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = [[] for i in range(n + 2)]\n    for i in range(n):\n        cnt[arr[i]].append(i)\n    for el in cnt:\n        if len(el) > 2:\n            print(\"YES\")\n            break\n        if (len(el) < 2):\n            continue\n        if abs(el[1] - el[0]) != 1:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n", "def go():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i, aa in enumerate(a):\n        if aa in d:\n            if i - d[aa] > 1 :\n                return 'YES'\n        d[aa] = d.get(aa, i)\n    return 'NO'\n\n\nt = int(input())\nfor _ in range(t):\n    print(go())\n", "def f(N,L):\n    V=[0]*(N+1)\n    for i,a in enumerate(L):\n        if V[a]>0:\n            r=V[a]\n            if L[i-1]==a:\n                r-=1\n            if r>0:\n                return True\n        V[a]+=1\n    return False\n\nfor _ in range(int(input())):\n    N=int(input())\n    L=list(map(int,input().split()))\n    if f(N,L): print('YES')\n    else: print('NO')", "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = []\nfor _ in range(Q):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Query.append((N, A))\n\nfor N, A in Query:\n    dic = {}\n    for i, a in enumerate(A):\n        if not a in dic:\n            dic[a] = [i]\n        else:\n            dic[a].append(i)\n    \n    ok = False\n    for L in dic.values():\n        if len(L) > 1 and L[-1] - L[0] > 1:\n            ok = True\n            break\n    print(\"YES\" if ok else \"NO\")", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    i1 = 0\n    i2 = n\n    flag = False\n    for i in range(n-2):\n        e1 = a[i]\n        for j in range(i+2, n):\n            if e1 == a[j]:\n                print('YES')\n                flag = True\n                break\n        if flag == True:\n            break\n    if flag == False:\n        print('NO')\n\nfor i in range(int(input())):\n    solve()", "t=int(input())\nfor x in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b={}\n    for x in range(n):\n        if a[x] in b:\n            if b[a[x]][-1]!=x-1:\n                b[a[x]].append(x)\n        else:b[a[x]]=[x]\n    t=False\n    for x in b:\n        if len(b[x])>=2:\n            t=True\n    if t:\n        print('YES')\n    else:\n        print('NO')\n", "import sys\n\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if N < 3:\n        print(\"NO\")\n    else:\n        ans = False\n        for i in range(N - 2):\n            x = A[i]\n            for j in range(i + 2, N):\n                if A[j] == x:\n                    ans = True\n        if ans:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "import math\n \n \nclass Read:\n    @staticmethod\n    def string():\n        return input()\n \n    @staticmethod\n    def int():\n        return int(input())\n \n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n \n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n \nresult = math.inf\n \ndef solve():\n  n = Read.int()\n  a = Read.list_int();\n  for i in range(n):\n    for j in range(i + 2, n):\n      if a[i] == a[j]:\n        print('YES')\n        return\n  print('NO')\n \n# query_count = 1\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "import sys\n\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    n = int(sys.stdin.readline().rstrip())\n    num = list(map(int, sys.stdin.readline().rstrip().split()))\n    re = False\n    for i in range(len(num)):\n        for j in range(i + 2, len(num)):\n            if num[i] == num[j]:\n                re = True\n                break\n        if re:\n            break\n    if re:\n        print('YES')\n    else:\n        print('NO')\n", "def solve(n, a):\n    d = {}\n    for i, aa in enumerate(a):\n        if aa in d:\n            d[aa].append(i)\n        else:\n            d[aa] = [i]\n    for k in d:\n        if len(d[k]) > 2:\n            return \"YES\"\n        if len(d[k]) == 2:\n            if d[k][1] - d[k][0] > 1:\n                return \"YES\"\n    return \"NO\"\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        print(solve(n, a))\n\n\nmain()\n", "def solve():\n  n=int(input())\n  a=list(map(int,input().split()))\n  ans=\"NO\"\n  d={}\n  for i in range(n):\n    if a[i] not in d:d[a[i]]=i\n    elif i-1>d[a[i]]:ans=\"YES\"\n  return ans\nfor _ in range(int(input())):\n  print(solve())"]