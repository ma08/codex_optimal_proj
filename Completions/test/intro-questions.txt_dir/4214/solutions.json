["import itertools\nn = int(input())\nl = [list(map(int,input().split())) for _ in range(n)]\n\ndef factorization(n):\n    if n == 1:\n        return 1\n    return n * factorization(n-1)\n\nsize = factorization(n)\na = list(itertools.permutations(l,n))\ntotal = 0\nfor i in range(size):\n    for j in range(n-1):\n        x1 = a[i][j][0]\n        x2 = a[i][j+1][0]\n        y1 = a[i][j][1]\n        y2 = a[i][j+1][1]\n        x_total = (x1-x2)**2\n        y_total = (y1-y2)**2\n        total += (x_total + y_total)**.5\nprint(total/size)", "import math\n\nn=int(input())\nxy=[]\nfor i in range(n):\n    xy.append(list(map(int,input().split())))\nans=0\nfor j in range(n):\n    for i in range(n):\n        ans+=math.sqrt((xy[i][0]-xy[j][0])**2+(xy[i][1]-xy[j][1])**2)\n\nprint(ans/n)", "import itertools\nimport math\n\nN = int(input())\nL = [list(map(int,input().split())) for n in range(N)]\nI = list(itertools.permutations(L))\nsum = 0\n\nfor i in I:\n  for n in range(N-1):\n    sum += math.sqrt((i[n+1][0]-i[n][0])**2+(i[n+1][1]-i[n][1])**2)\n    \nprint(sum/len(I))", "xy=[[*map(int,input().split())] for _ in range(int(input()))]\nprint(sum(((i[0]-j[0])**2+(i[1]-j[1])**2)**.5 for j in xy for i in xy)/len(xy))", "import numpy as np\nn=int(input())\na=np.array([list(map(int,input().split())) for i in range(n)])\nc=0\nfor i in a:\n    for j in a:\n        c+=np.linalg.norm(i-j)\nprint(c/n)", "def II(): return int(input())\ndef LII(): return list(map(int, input().split()))\n\nn=II()\ntown=[LII() for _ in range(n)]\n\ndistance=0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        [xi,yi]=town[i]\n        [xj,yj]=town[j]\n        \n        distance += ((xi-xj)**2+(yi-yj)**2)**0.5\n\nprint(distance*2/n)", "N = int(input())\nlocs = []\nS = 0\n\nfor _ in range(N):\n  locs.append(list(map(int,input().split())))\n  \nfor i in range(N):\n  for j in range(i+1,N):\n    dis = ((locs[i][0]-locs[j][0])**2 + (locs[i][1]-locs[j][1])**2)**(1/2)\n    S += dis\n\nprint(2*S/N)", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\n\n#--maincode----------------\nn = ini()\nk = []\nfor i in range(n):\n    k.append(inl())\nsm = 0\nfor x,y in k:\n    for xd,yd in k:\n        sm += ((x-xd)**2 + (y-yd)**2)**0.5\nprint(sm/n)", "N = int(input())\nsites = [list(map(int, input().split())) for _ in range(N)]\n\ndef getDistance(A, B):\n  x = A[0] - B[0]\n  y = A[1] - B[1]\n  return (x ** 2 + y ** 2) ** 0.5\n\ntotalDistance = 0\nfor i in range(N - 1):\n  for j in range(i + 1, N):\n    totalDistance += getDistance(sites[i],sites[j])\n\nprint(2 * totalDistance / N)", "import itertools\nimport math\n\nn=int(input())\nxy=[[int(i) for i in input().split()] for _ in range(n)]\np = itertools.permutations(list(range(n)),n)\n\nlenlist=[]\nfor v in p:\n    len=0\n    for i in range(n-1):\n        len +=  ( (xy[v[i+1]][0]-xy[v[i]][0])**2 + (xy[v[i+1]][1]-xy[v[i]][1])**2 )**0.5\n    lenlist.append(len)\n\nprint((sum(lenlist)/math.factorial(n)))\n", "import itertools\nimport math\n\nn = int(input())\npath = []\nfor i in range(n):\n  x, y = map(int, input().split())\n  path.append([x, y])\n\ndistance = []\nvisitedPath = list(itertools.permutations(path))\nfor vp in visitedPath:\n  routeDistance = 0\n  for i in range(len(vp)-1):\n    routeDistance += math.sqrt((vp[i][0]-vp[i+1][0])**2 + (vp[i][1]-vp[i+1][1])**2)\n  distance.append(routeDistance)\nprint(sum(distance)/len(distance))", "import itertools\nimport math\n\nN=int(input())\npos=[list(map(int,input().split())) for _ in range(N)]\nCases=itertools.permutations([x for x in range(N)])\n\nans=0\nfor case in Cases:\n    for i in range(N-1):\n        x,y=list(map(int,pos[case[i]]))\n        nx,ny=list(map(int,pos[case[i+1]]))\n        tmp=math.sqrt((nx-x)**2+(ny-y)**2)\n        ans+=tmp\nans/=math.factorial(N)\nprint(ans)\n", "import itertools\n\nN=int(input())\nxy=[list(map(int, input().split())) for _ in range(N)]\nxy_d=[[0]*N for _ in range(N)]\nxylist=list(itertools.permutations([n for n in range(N)],N))\n\nfor i in range(N-1):\n\tfor h in range(i+1,N):\n\t\txy_d[i][h]=((xy[i][0]-xy[h][0])**2+(xy[i][1]-xy[h][1])**2)**.5\n\t\txy_d[h][i]=((xy[i][0]-xy[h][0])**2+(xy[i][1]-xy[h][1])**2)**.5\n\nans=0\n\n#print(xy_d)\n\nfor g in range(len(xylist)):\n\tfor t in range(N-1):\n\t\t#print(xy_d[xylist[g][t]][xylist[g][t+1]])\n\t\tans+=xy_d[xylist[g][t]][xylist[g][t+1]]\n\nprint(ans/len(xylist))", "def dfs(pi) :\n    if(len(pi) == n): \n        p.append(pi)\n        return\n    for i in range(1, n+1) :\n        if(i in pi) :\n            continue\n        cpi = pi + (i,)\n        dfs(cpi)\n\nn = int(input())\np = []\ndfs(tuple())\npos = []\npos.append(-1)\nfor i in range(n) :\n    x,y = list(map(int, input().split()))\n    pos.append((x,y))\ndist = 0   \nfor v in p :\n    d = 0    \n    for i in range(len(v)-1):\n        pos1 = v[i]\n        pos2 = v[i+1]\n        xi,yi = pos[pos1]\n        xj, yj = pos[pos2]\n        d += ((xi-xj)**2 + (yi-yj)**2)**(1/2)\n    dist += d\nprint((dist/len(p)))\n", "import itertools\n\nn = int(input())\n\ntown = []\n\nfor i in range(n):\n    x,y = map(int, input().split())\n    town.append((x,y))\n\ncnt = 0\nlength = 0\n\nfor t in itertools.permutations(town):\n    for i in range(n-1):\n        x = (t[i][0]-t[i+1][0])**2\n        y = (t[i][1]-t[i+1][1])**2\n        length += (x+y)**0.5\n    cnt += 1\n\nprint(length/cnt)", "import sys\nfrom itertools import islice, permutations\n\n\ndef resolve(in_):\n    N = int(next(in_))\n    XY = tuple(tuple(map(int, line.split())) for line in islice(in_, N))\n\n    count = 0\n    distance = 0.0\n    for towns in permutations(list(range(N))):\n        count += 1\n        town0 = towns[0]\n        for town1 in towns[1:]:\n            x0, y0 = XY[town0]\n            x1, y1 = XY[town1]\n            distance2 = (x1 - x0) ** 2 + (y1 - y0) ** 2\n            distance += distance2 ** 0.5\n            town0 = town1\n    \n    average = distance / count\n\n    return '{:.7f}'.format(average)\n\n\ndef main():\n    answer = resolve(sys.stdin)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nfrom itertools import permutations\nN=int(input())\nXYlist=[]\nindexlist=[i for i in range(N)]\nfor _ in range(N):\n    XYlist.append(tuple(map(int,input().split())))\nans=0\nnum=0\nfor indexes in permutations(indexlist,N):\n    for i in range(N-1):\n        ans+=math.sqrt((XYlist[indexes[i]][0]-XYlist[indexes[i+1]][0])**2+\n                       (XYlist[indexes[i]][1]-XYlist[indexes[i+1]][1])**2)\n    num+=1\nprint(ans/num)", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(500000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef calc(p, P):\n    ans = 0\n    for i in range(1, len(p)):\n        x1, y1 = P[p[i - 1]]\n        x2, y2 = P[p[i]]\n        ans += sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    return ans\n\n\ndef solve():\n    N = int(input())\n    P = []\n    for _ in range(N):\n        X, Y = list(map(int, input().split()))\n        P.append((X, Y))\n\n    ans = 0\n    num = 0\n    for p in permutations(list(range(N))):\n        ans += calc(p, P)\n        num += 1\n    print((ans / num))\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport itertools\n\nN = int(input())\narr = []\nfor _ in range(N):\n  x,y = map(int,input().split())\n  arr.append((x,y))\n\np = list(itertools.permutations(arr))\n\nd = 0.0\nfor pair in p:\n  for a, b in zip(pair[0:],pair[1:]):\n    d += math.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)\n\nprint(d/len(p))  ", "import itertools, math\nN = int(input())\nlst1 = []\nfor _ in range(N):\n    x, y = map(int, input().split())\n    lst1.append((x, y))\n\nlst2 = list(itertools.combinations(lst1, 2))\np = math.factorial(N) * (N - 1)\nc = len(list(itertools.combinations(lst1, 2)))\ntotal = 0\n\nfor i in lst2:\n    d = ((i[1][0] - i[0][0]) ** 2 + (i[1][1] - i[0][1]) ** 2) ** 0.5\n    total += d\n    \nnum = int(p/c)\nfct = math.factorial(N)\n\nprint(total * num / fct)", "N = int(input())\nD = [list(map(int, input().split())) for _ in range(N)]\nfrom math import hypot, factorial\ndistance = []\n\nfor i, j in D:\n    for k, l in D:\n        distance.append(hypot(i-k, j-l))\n\nprint((sum(distance)/N))\n\n", "import itertools\nimport math\n\nn = int(input())\nxy = [list(map(int,input().split())) for i in range(n)]\nq = list(itertools.permutations(range(n)))\nm = len(q)\n\nk_sum = 0\n\nfor i in range(m):\n  for j in range(n-1):\n    a = xy[q[i][j]][0] - xy[q[i][j+1]][0]\n    x = a**2\n    b = xy[q[i][j]][1] - xy[q[i][j+1]][1]\n    y = b**2\n    k_sum += math.sqrt(x+y)\n    \nprint(k_sum/m)", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\ndef slove():\n    N = int(input())\n    town_position = np.array([list(map(float,input().split())) for i in range(N)])\n    distance = 0\n    for i in range(N-1):\n        x1, y1 = town_position[i]\n        for j in range(i+1,N):\n            x2, y2 = town_position[j] \n            distance += np.sqrt((x2-x1)**2 + (y2-y1)**2)\n            \n    ans = distance * 2 / N\n    print(ans)\n\ndef __starting_point():\n    slove()\n__starting_point()", "import itertools\n\nn = int(input())\ntown = [list(map(int, input().split())) for _ in range(n)]\nx = 1\nfor i in range(1, n+1):\n    x *= i\nl = []\nfor j in range(n):\n    l.append(j)\nans = 0\nfor a in itertools.permutations(l, n):\n    newl = a\n    length = 0\n    for b in range(n-1):\n        length += ((town[newl[b]][0] - town[newl[b+1]][0])**2 + (town[newl[b]][1] - town[newl[b+1]][1])**2)**(1/2) \n    ans += length\nprint(ans/x)", "from itertools import permutations\nimport math\nn = int(input())\nx,y = [],[]\nfor _ in range(n):\n    x_, y_ =map(int,input().split())\n    x.append(x_)\n    y.append(y_)\nc = list(permutations([i for i in range(1,n+1)],n))\nsum = 0\nfor ci in (c):\n    tmp = 0\n    for i in range(len(ci)-1):\n            tmp += math.sqrt((x[ci[i]-1]-x[ci[i+1]-1])**2 \n                             + (y[ci[i]-1]-y[ci[i+1]-1])**2)\n    sum += tmp\nprint(sum/len(c))", "import itertools\nimport math\n\ndef calc_dist(pos1, pos2):\n    x1,y1=pos1\n    x2,y2=pos2\n    return math.sqrt(pow(x1-x2, 2)+pow(y1-y2, 2))\n\nN=int(input())\n\ndistance_mat = [[-1000 for _ in range(N)] for _ in range(N)]\npos = []\nfor _ in range(N):\n    pos.append(list(map(int, input().split())))\n\nperms = itertools.permutations(list(range(N)), N)\n\nresult=[]\nfor perm in perms:\n    dist_sum = 0\n    for i in range(1, N):\n        source = perm[i-1]\n        sink = perm[i]\n        if distance_mat[source][sink]==-1000:\n            dist = calc_dist(pos[source], pos[sink])\n            distance_mat[source][sink] = dist\n            distance_mat[sink][source] = dist\n        else:\n            dist = distance_mat[source][sink]\n        dist_sum+=dist\n    result.append(dist_sum)\n\nimport numpy as np\nprint((np.average(result)))\n", "import itertools\nN = int(input())\nx = []\ny = []\nfor i in range(N):\n    xy = list(map(int, input().split()))\n    x.append(xy[0])\n    y.append(xy[1])\n\n\nl = [i for i in range(N)]\nans = 0\ncnt = 0\nfor i in itertools.permutations(l, N):\n    cnt += 1\n    for j in range(1, N):\n        x1 = x[i[j]]\n        x2 = x[i[j-1]]\n        y1 = y[i[j]]\n        y2 = y[i[j-1]]\n        ans += pow((x1 - x2)**2 + (y1 - y2)**2, 0.5)\n        # print(i, j, x1, y1, x2, y2)\nans /= cnt\nprint(ans)", "import numpy as np\nimport  itertools\nN=int(input())\nXY=[]\nfor _ in range(N):\n  x, y = list(map(int, input().split()))\n  XY.append([x,y])\n\nD=np.zeros((N, N))\nfor i in range(N-1):\n  xi, yi=XY[i][0], XY[i][1]\n  for j in range(i+1, N):\n    xj, yj=XY[j][0], XY[j][1]\n    distance=np.sqrt((xi-xj)**2 + (yi-yj)**2)\n    D[i][j]=distance\n    D[j][i]=distance\n\nans=0\nfor l in itertools.permutations(list(range(N))):\n  dis=0\n  for i in range(N-1):\n    dis+=D[l[i]][l[i+1]]\n  ans+=dis\nprint((ans/np.math.factorial(N)))\n\n", "from itertools import permutations\nimport math\nn = int(input())\nx = []\ny = []\nfor i in range(n):\n    xi, yi = map(int, input().split(' '))\n    x.append(xi)\n    y.append(yi)\n\nl = [i for i in range(n)]\nroute = list(permutations(l))\nlength = 0\nfor ls in route:\n    for i in range(n-1):\n        length += math.sqrt((x[ls[i+1]]-x[ls[i]])**2+(y[ls[i+1]]-y[ls[i]])**2)\nans = length/math.factorial(n)\nprint(ans)", "import math\nfrom itertools import permutations\n\n\ndef calc_distance(a, b):\n    dx = a[0] - b[0]\n    dy = a[1] - b[1]\n    d = math.sqrt(dx * dx + dy * dy)\n    return d\n\nN = int(input())\n\ncity = [0] * N\nfor i in range(N):\n    city[i] = list(map(int, input().split()))\n\nmtx = [0 for i in range(N)] * N\n\nmtx = [[calc_distance(a, b) for a in city] for b in city]\n\n\nall_distance = 0\npaths = permutations([i for i in range(N)])\ncnt = 0\nfor pt in paths:\n    distance = 0\n    for idx in range(1, len(pt)):\n       distance += mtx[pt[idx]][pt[idx-1]]\n\n    all_distance += distance\n    cnt += 1\n\nall_distance /= cnt\n\n\nprint(all_distance)\n\n\n", "N = int(input())\nsites = [list(map(int, input().split())) for _ in range(N)]\n\ndef getDistance(A, B):\n  x = A[0] - B[0]\n  y = A[1] - B[1]\n  return (x ** 2 + y ** 2) ** 0.5\n\ntotalDistance = 0\nfor i in range(N):\n  for j in range(N):\n    if i != j:\n      totalDistance += getDistance(sites[i],sites[j])\n\nprint(totalDistance / N)", "import math\n\ndef perm(s,a,d,j):\n    l=len(s)\n    if l==0:\n        a.append(d.copy())\n    else:\n        for i in range(0,l):\n            d[j]=s[i]\n            perm(s[0:i:]+s[i+1::],a,d,j+1)\n\n\ndef per(N,a):\n    \"\"\"1\u304b\u3089N\u307e\u3067\u306e\u9806\u5217\u306e\u30ea\u30b9\u30c8\u3092\uff0c\u30ea\u30b9\u30c8a\u306b\u4f5c\u308b\uff0ed\u306b\u306f\u4e88\u3081s\u3068\u540c\u3058\u9577\u3055\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\"\"\"\n    s=list(range(1,N+1))\n    d=list(range(1,N+1))\n    j=0\n    perm(s,a,d,j)\n\nN=int(input())\na=[]\nper(N,a)\nx=[0]*N\ny=[0]*N\nfor i in range(0,N):\n    x[i],y[i]=map(int,input().split())\nM=len(a)\nS=0\nfor j in range(0,M):\n    for i in range(0,N-1):\n        S+=math.sqrt((x[a[j][i]-1]-x[a[j][i+1]-1])**2+(y[a[j][i]-1]-y[a[j][i+1]-1])**2)\nprint(S/M)", "n = int(input())\nx_y = []\nfor _ in range(n):\n  x_y.append([int(i) for i in input().split()])\nimport itertools\nimport math\nans = 0.0\nfor x_yi in itertools.permutations(x_y, n):\n  sum_ = 0.0\n  for i in range(n-1):\n    sum_ += math.sqrt((x_yi[i][0] - x_yi[i+1][0]) ** 2 +\n                      (x_yi[i][1] - x_yi[i+1][1]) ** 2)\n  ans += sum_ / math.factorial(n)\nprint(ans)", "from math import factorial\nfrom itertools import permutations\n\nn = int(input())\nt,*c = [list(map(int, input().split())) for _ in range(n)]\n\nprint(sum(sum(((x-v)**2+(y-w)**2)**.5 for (x, y), (v, w) in zip([t]+l, l+[t])) for l in map(list,permutations(c)))*(n-1)/factorial(n))", "#-*-coding:utf-8-*-\nimport itertools\nimport math\n\ndef main():\n    lists = []\n    N= int(input())\n    lists=[list(map(int,input().split())) for _ in range(N)]\n    ans=0\n    length=0\n    #permutations\u306f\u9806\u5217\u3092\u5217\u6319\n    for line in itertools.permutations(lists):\n        a = []\n        b = []\n        for data in line:\n            if len(b) ==0:\n                b = data\n                continue\n            else:\n                a = b\n                b = data\n                length = math.sqrt(((b[0]-a[0])**2)+((b[1]-a[1])**2))\n                ans+=length\n    #factorical=\u968e\u4e0a\u306e\u5024\n    print(ans/math.factorial(N))\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nN = int(input())\nxy = [list(map(int, input().split())) for _ in range(N)]\nresult = 0\n\nfor i in range(N):\n    for j in range(N):\n        if i != j:\n            result += math.sqrt((xy[i][0] - xy[j][0])**2 + (xy[i][1] - xy[j][1])**2)\n\nprint((result / N))\n\n", "import math\n\nn = int(input())\n\nxy = []\n\nfor i in range(n):\n    xy.append(list(map(int, input().split())))\n\nans = 0\n\nfor j in range(n):\n    for k in range(n):\n        ans += math.sqrt((xy[k][0] - xy[j][0]) ** 2 + (xy[k][1] - xy[j][1]) ** 2)\n\nprint(ans / n)", "import itertools, math\nN = int(input())\nls, L = [], 0\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\nperms = itertools.permutations(range(N))\nfor perm in perms:\n    for i in range(N - 1):\n        L += math.sqrt((ls[perm[i + 1]][0] - ls[perm[i]][0]) ** 2 + (ls[perm[i + 1]][1] - ls[perm[i]][1]) ** 2)\nprint(L / math.factorial(N))", "import itertools\nimport math\n\nN = int(input())\np = []\nfor i in range(N):\n    x, y = [int(n) for n in input().split()]\n    p.append([x, y])\n\ntotal_length = 0\nk = 0\nfor pattern in itertools.permutations(p):\n    k += 1\n    length = 0\n    for i in range(N-1):\n        length += math.sqrt((pattern[i+1][0] - pattern[i][0])**2 + (pattern[i+1][1] - pattern[i][1])**2)\n    total_length += length\n\nprint(total_length/k)", "from itertools import permutations\nfrom math import sqrt\nN = int(input())\nxy = [ input().split() for _ in range(N) ]\nxy = [ [int(x),int(y)] for x,y in xy ]\ndistance = 0\nP = list(permutations(xy, N))\nfor r in P:\n  temp = None\n  for i in r:\n    if not temp:\n      temp = i\n      continue\n    distance += sqrt((temp[0] - i[0])**2+(temp[1] - i[1])**2)\n    temp = i\nprint(distance/len(P))", "import math\nimport itertools\n\n\ndef calc(x1y1, x2y2):\n    x1, y1 = x1y1\n    x2, y2 = x2y2\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n\nN = int(input())\naddresses = []\n\nfor _ in range(N):\n    addresses.append(list(map(int, input().split())))\n\nways = list(itertools.permutations(list(range(N))))\n\nans = 0\nfor x in ways:\n    dist = 0\n    for i in range(N - 1):\n        dist += calc(addresses[x[i]], addresses[x[i + 1]])\n    ans += dist\n\nprint((ans / len(ways)))\n", "3\nimport sys\nfrom itertools import permutations\nfrom math import factorial\ninput = lambda: sys.stdin.readline().strip()\nn = int(input())\ncoords = [[int(x) for x in input().split()] for _ in range(n)]\nprint(f'{sum(((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) ** 0.5 for p in permutations(coords) for i, j in zip(p, p[1:])) / factorial(n):.6f}')", "import itertools\n\nN = int(input())\nA = []\nfor n in range(N):\n    x,y = map(int, input().split())\n    A.append((x,y))\n\npattern = itertools.permutations(A,N)\ntemp = 0\nnumber = 0\nfor i in pattern:\n    number += 1\n    for j in range(len(i)-1):\n        temp += ((i[j][0]-i[j+1][0])**2+(i[j][1]-i[j+1][1])**2)**0.5\n\nprint(temp/number)", "import sys, math, itertools\n\nn = int(input())\ntowns = [[int(x) for x in row.split()] for row in sys.stdin.readlines()]\n\ncounter = 0\nfinal_sum = 0\nfor town_list in itertools.permutations(towns):\n#    print(\"town_list\",town_list)\n    counter += 1\n    sum = 0\n    for i,town in enumerate(town_list):\n#        print(\"town\",town)\n        if i == 0:\n            old_town = town\n        else:\n            length = math.sqrt((town[0]-old_town[0])**2 + (town[1]-old_town[1])**2)\n#            print(\"length\",length)\n            sum += length\n#            print(\"sum\",sum)\n            old_town = town\n    final_sum += sum\nprint(final_sum/counter)", "import itertools\nn = int(input())\ns = \"\".join([str(_) for _ in range(n)])\nl = list(itertools.permutations(s, n))\nx = []\ny = []\nfor i in range(n):\n  xi,yi = map(int,input().split())\n  x.append(xi)\n  y.append(yi)\nc = 0.0\nfor j in l:\n  for k in range(n-1):\n    c += ((x[int(j[k])]-x[int(j[k+1])])**2 + (y[int(j[k])]-y[int(j[k+1])])**2)**0.5\nprint(c/len(l))", "'''\nCreated on 2020/09/29\n\n@author: harurun\n'''\nfrom itertools import permutations\nimport sys\nimport math\npin=sys.stdin.readline\ndef main():\n  N=int(pin())\n  d=[list(map(int,pin().split())) for _ in [0]*N]\n  l=list(permutations(list(range(N))))\n  k=0\n  for i in l:\n    s=0\n    for j in range(N-1):\n      x=(d[i[j]][0]-d[i[j+1]][0])**2\n      y=(d[i[j]][1]-d[i[j+1]][1])**2\n      s+=math.sqrt(x+y)\n    k+=s\n  ans=k/len(l)\n  print(ans)\n  return \nmain()", "import numpy as np\nN = int(input())\nxy = [list(map(int, input().split(\" \"))) for i in range(N)]\n\nL = 0\nfor i in range( N ):\n for j in range( N ):\n  a = xy[i][0]-xy[j][0]\n  b = xy[i][1]-xy[j][1]\n  l = np.sqrt( a**2 +b**2)\n  L += l\n\nprint((L/N))\n", "import math\nn = int(input())\nxy = []\nfor i in range(n):\n    XY = list(map(int,input().split()))\n    xy.append(XY)\ntotal = 0\nfor i in range(n - 1):\n    for j in range(i + 1,n):\n        total += math.sqrt((xy[i][0] - xy[j][0]) ** 2 + (xy[i][1] - xy[j][1]) ** 2)\nprint(total * 2 / n)", "def func(n):\n    if n==1:\n        return 1\n    return n*func(n-1)\nn=int(input())\nL=[0 for i in range(n)]\nfor i in range(n):\n    L[i]=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    for j in range(i+1,n):\n        length=(L[i][0]-L[j][0])**2+(L[i][1]-L[j][1])**2\n        length=length**0.5\n        ans+=length*func(n-1)*2\nprint(ans/func(n))", "N = int(input())\n\ncities = [tuple(map(int,input().split())) for i in range(N)]\n\nfrom collections import defaultdict\ndist = defaultdict(int)\n\nimport itertools\nfor perm in itertools.permutations(range(N), 2):\n  x1,y1 = cities[perm[0]]\n  x2,y2 = cities[perm[1]]\n  dist[perm] = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\nans = 0\ncnt = 0\nfor perm in itertools.permutations(range(N), N):\n  cnt += 1\n  for i in range(1 ,len(perm)):\n    ans += dist[(perm[i - 1], perm[i])]\n\nprint(ans / cnt)", "from collections import deque\n\nN = int(input())\nxy = [list(map(int, input().split())) for _ in range(N)]\n\ndef dist(a, b):\n  return pow(pow(b[0]-a[0], 2) + pow(b[1]-a[1], 2), 1/2)\n\nque = deque([[i] for i in range(N)])\nperm = []\nwhile que:\n  seq = que.popleft()\n  if len(seq) == N:\n    perm.append(seq)\n  for j in range(N):\n    if j not in seq:\n      que.append(seq + [j])\n\nd = 0\ns = len(perm)\nfor p in perm:\n  for k in range(N-1):\n    d += dist(xy[p[k]], xy[p[k+1]])\nprint(d / s)", "import itertools\nn = int(input())\ns = ([str(_) for _ in range(n)])\nl = list(itertools.permutations(s, n))\nx = []\ny = []\nfor i in range(n):\n    xi,yi = map(int,input().split())\n    x.append(xi)\n    y.append(yi)\nc = 0.0\nfor j in l:\n    for k in range(n-1):\n        c += ((x[int(j[k])]-x[int(j[k+1])])**2 + (y[int(j[k])]-y[int(j[k+1])])**2)**0.5\nprint(c/len(l))", "import math\n\nN = int(input())\nxy = [list(map(int,input().split())) for i in range(N)]\nave = 0\ncnt = 0\nimport itertools\nfor v in itertools.permutations([int(x) for x in range(N)],N) :\n    for i in range(1,len(v)) :\n        ave += math.sqrt((xy[v[i-1]][0]-xy[v[i]][0])**2+(xy[v[i-1]][1]-xy[v[i]][1])**2)\n    cnt += 1\n\nave = ave / cnt\nprint(ave)", "import itertools\nimport math\nN = int(input())\n\n\ncitys = []\nfor i in range(N):\n    citys.append([int(x) for x in input().split()])\n\na = list(itertools.permutations(list(range(N)), N))\n\nans = 0\nfor i in a:\n    b = 0\n    for j in range(N-1):\n        b += math.sqrt((citys[i[j]][0] - citys[i[j+1]][0])**2 + (citys[i[j]][1] - citys[i[j+1]][1])**2)\n    ans += b\n\nprint((ans/len(a)))\n", "3\n#coding: utf-8\n\nimport math\n\nN = int(input())\nP = [[int(x) for x in input().split()] for _ in range(N)]\n\n\ndef calc(path):\n    r = 0\n    for i in range(len(path) - 1):\n        p1 = P[path[i-1]]\n        p2 = P[path[i]]\n        dx = p1[0] - p2[0]\n        dy = p1[1] - p2[1]\n        r += math.sqrt(dx*dx + dy*dy)\n    return r\n\nret = 0\nnumret = 0\ndef rec(path, rest):\n    if not rest:\n        nonlocal ret\n        nonlocal numret\n        ret += calc(path)\n        numret += 1\n        return\n    for i in range(len(rest)):\n        rec(path + [rest[i]],  rest[:i] + rest[i+1:])\n\nrec([], [i for i in range(N)])\nprint((ret/numret))\n", "from itertools import permutations\n\nN = int(input())\nXY = []\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    XY.append((x, y))\n\nans = 0\nc = 0\n\nfor p in permutations(list(range(N))):\n    dist = 0\n    x1, y1 = XY[p[0]]\n    for i in p[1:]:\n        x, y = XY[i]\n        dist += ((x1 - x) ** 2 + (y1 - y) ** 2) ** 0.5\n    ans += dist\n    c += 1\n\nprint((ans / c))\n", "from itertools import permutations\nimport math\nn = int(input())\nx,y = [],[]\nfor _ in range(n):\n    x_, y_ =map(int,input().split())\n    x.append(x_)\n    y.append(y_)\n\nc = list(permutations([i for i in range(1,n+1)],n))\n\ng = [[-1]*(n+1) for _ in range(n+1)]\nsum = 0\nfor ci in (c):\n    tmp = 0\n    for i in range(len(ci)-1):\n        if g[ci[i]][ci[i+1]] == -1:\n            tmp += math.sqrt((x[ci[i]-1]-x[ci[i+1]-1])**2 \n                             + (y[ci[i]-1]-y[ci[i+1]-1])**2)\n        else:\n            tmp += g[ci[i]][ci[i+1]]\n    sum += tmp\nprint(sum/len(c))", "from sys import stdin\nimport math\nimport itertools\n\nn = int(stdin.readline().rstrip())\nx = [0] * n\ny = [0] * n\nv = [0] * n\n\nfor i in range(n):\n  x[i], y[i] = [int(x) for x in stdin.readline().rstrip().split()]\n  v[i] = i\n\ncnt = 0\nans = 0\nfor idx in list(itertools.permutations(v)):\n  #print(idx)\n\n  cnt += 1\n  for i in range(1, n):\n    ans += math.sqrt( ( x[idx[i]] - x[idx[i-1]] ) * ( x[idx[i]] - x[idx[i-1]] ) + ( y[idx[i]] - y[idx[i-1]] ) * ( y[idx[i]] - y[idx[i-1]] ) )\n\nprint((ans / cnt))\n", "import math\nimport itertools\n\nn = int(input())\npos = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    pos.append([x, y])\n\niter = list(itertools.permutations(list(range(n))))\ntotal = 0\nfor i in iter:\n    for j in range(n - 1):\n        p1 = pos[i[j]]\n        p2 = pos[i[j + 1]]\n        d = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n        total += d\nprint(total / len(iter))", "import math\nn=int(input())\np=[]\n\nfor i in range(n):\n  x,y=map(int,input().split())\n  p.append([x,y])\n  \nans=0\nfor i in range(n):\n  for j in range(n):\n    ans+=math.factorial(n-1)*math.sqrt((p[i][0]-p[j][0])**2+(p[i][1]-p[j][1])**2)\n    \nprint(ans/math.factorial(n))", "import itertools\n\nN = int(input())\nX = []\nY = []\nseq = list(itertools.permutations([i for i in range(1,N+1)]))\na = 0\nfor i in range(N):\n    x,y = map(int,input().split())\n    X.append(x)\n    Y.append(y)\nfor h in range(len(seq)):\n    for i in range(N-1):\n        a += ((X[seq[h][i]-1]-X[seq[h][i+1]-1])**2+(Y[seq[h][i]-1]-Y[seq[h][i+1]-1])**2)**0.5\nprint(a/len(seq))", "import itertools\n\nn = int(input())\nxy = [list(map(int, input().split())) for _ in range(n)]\n\nans = []\nfor i in itertools.permutations([i for i in range(n)]):\n    tmp = 0\n    # print(i)\n    for j in range(1, n):\n        tmp += ((xy[i[j]][0]-xy[i[j-1]][0])**2 + (xy[i[j]][1]-xy[i[j-1]][1])**2 )**0.5\n    ans.append(tmp)\n\nprint(sum(ans)/len(ans))", "N = int(input())\ncity = [list(map(int,input().split())) for _ in range(N)]\nd = 0\nfor i in range(N):\n    for j in range(N):\n        d += ((city[i][0]-city[j][0])**2 + (city[i][1]-city[j][1])**2)**0.5\nprint(d/N)", "import math\n\nn = int(input())\ntowns = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nc = 0\nfor i in range(n-1):\n    x1, y1 = towns[i]\n    for j in range(i+1, n):\n        x2, y2 = towns[j]\n        ans += math.sqrt((x1-x2)**2 + (y1-y2)**2)*(n-1)*2\n\nprint(ans/((n-1)*n))", "import math\n\n\nn = int(input())\nt = [list(map(int,input().split())) for i in range(n)]\nans = 0\n\nfor i in range(n):\n  x, y = t[i]\n  for j in range(i, n):\n    x1, y1 = t[j]\n    ans += math.sqrt((x-x1)**2 + (y-y1)**2)*(n-1)*2\nprint(ans/((n-1)*n))", "import math\nn = int(input())\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n  x[i], y[i] = list(map(int, input().split()))\n\nq = 2\nfor i in range(2, n):\n  q *= i\n\ns = 0.0\nfor i in range(n-1):\n  for j in range(i, n):\n    s  += math.sqrt((x[i]-x[j])**2+(y[i]-y[j])**2) * q\nf = math.factorial(n)\nprint((s/f))\n", "from itertools import permutations\nimport math\n\nN=int(input())\ns=[list(map(int,input().split())) for i in range(N)]\n\ndef length(x,y,x1,y1):\n\treturn math.sqrt((x-x1)**2+(y-y1)**2)\n\nl=permutations(s) #\u9806\u5217\u5168\u63a2\u7d22\n\nans=0\nfor i in l:\n\tfor j in range(1,N):\n\t\tans+=length(i[j-1][0],i[j-1][1],i[j][0],i[j][1])\n        \nprint(ans/math.factorial(N)) #\u968e\u4e57", "import itertools, math\nN = int(input())\nls, L = [], 0\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\nperms = itertools.permutations(range(N))\nfor perm in perms:\n    for i in range(N - 1):\n        L += math.sqrt((ls[perm[i + 1]][0] - ls[perm[i]][0]) ** 2 + (ls[perm[i + 1]][1] - ls[perm[i]][1]) ** 2)\nprint(L / math.factorial(N))", "import itertools\nn = int(input())\na = [list(map(int, input().split(\" \"))) for i in range(n)]\nans = 0\nfor [ix,iy], [jx, jy] in itertools.combinations(a, 2):\n  ans += ((jx-ix)**2+(jy-iy)**2)**0.5*2\nprint(ans/n)", "from itertools import permutations\nimport math\nn=int(input())\nl=[list(map(int,input().split())) for _ in range(n)]\np=list(permutations(range(n),n))\nans=0\nfor i in p:\n    for j in range(n-1):\n        ans+=((l[i[j+1]][0]-l[i[j]][0])**2+(l[i[j+1]][1]-l[i[j]][1])**2)**0.5\nprint(ans/math.factorial(n))", "from itertools import permutations\nfrom math import sqrt, factorial\nn = int(input())\npositions = [list(map(int, input().split())) for _ in range(n)]\nperm = permutations(positions, n)\ns = 0\nfor p in perm:\n    for e in range(len(p)-1):\n        xi, yi = p[e]\n        xj, yj = p[e+1]\n        s += sqrt((xj-xi)**2 + (yj-yi)**2)\nprint((s/factorial(n)))\n", "import itertools\nimport math\nN = int(input())\nA = []\nb =[]\ncount = 0\nnums = [i for i in range(N)]\nfor balls in itertools.permutations(nums):\n    b.append(list(balls))\n    \nfor i in range(N):\n    A.append(list(map(int ,input().split())))\nfor j in range(N-1):\n    for i in b:\n        count+=math.sqrt(pow(A[i[j]][0]-A[i[j+1]][0],2)+pow(A[i[j]][1]-A[i[j+1]][1],2))\n\nprint(count/math.factorial(N))", "import itertools\nimport math\n\ndef calc_kyori(a,b):\n    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n\nN = int(input())\nl = []\n\nfor _ in range(N):\n    tmp  = list(map(int,input().split()))\n    l.append(tmp)\n\ntotal = 0\ncomb = 0\nfor i in list(itertools.permutations(list(range(N)))):\n    comb += 1\n    for j in range(N-1):\n        total += calc_kyori(l[i[j]],l[i[j+1]])\n\nprint((total / comb))\n", "from itertools import permutations\nn=int(input())\nl=[list(map(int,input().split())) for _ in range(n)]\nans=0\np=list(permutations(range(n),n))\nfor L in p:\n    s=L[0]\n    for i in L[1:]:\n        ans+=((l[s][0]-l[i][0])**2+(l[s][1]-l[i][1])**2)**0.5\n        s=i\nprint(ans/len(p))", "import sys\nread = sys.stdin.read\n#readlines = sys.stdin.readlines\nfrom itertools import permutations\nfrom math import factorial\ndef main():\n    n = int(input())\n    xy = [tuple(map(int, input().split())) for _ in range(n)]\n\n    # \u753a\u540c\u58eb\u306e\u8ddd\u96e2\u3092xydis\u306b\u3044\u308c\u308b\n    xydis = [[0] * n for _ in range(n)]\n    for i1 in range(n):\n        for i2 in range(n):\n            xydis[i1][i2] = ((xy[i1][0] - xy[i2][0])**2 + (xy[i1][1] - xy[i2][1])**2)**0.5\n    # \u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306e\u8ddd\u96e2\u3092dis_sum\u306b\u8db3\u3059\u3002\n    per = tuple(permutations(range(n), n))\n    dis_sum = 0\n    for pere in per:\n        for j1 in range(n - 1):\n            dis_sum += xydis[pere[j1]][pere[j1 + 1]]\n    ans = dis_sum / factorial(n)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nn=int(input())\na = []\nb = []\nans = 0\ndef z(p,q,r,s):\n    return ((p-r)**2+(q-s)**2)**0.5\nfor i in range(n):\n    x,y=map(int,input().split())\n    a.append(x)\n    b.append(y)\nfor i in range(n):\n    for j in range(i+1,n):\n        ans += 2*z(a[i],b[i],a[j],b[j])\nans /= n\nprint(ans)", "import itertools\n\nn = int(input())\np = [[0 for i in range(2)] for j in range(n)]\n\nfor i in range(n):\n  p[i][0],p[i][1] = list(map(int,input().split()))\n#print(p)\n\ndef dis(a,b):\n  dis = (a[0]-b[0]) ** 2 + (a[1]-b[1]) **2\n  return dis ** (1/2)\n\n\nperm = [i for i in range(n)]\ntotal = 0 \nnum = 0\nfor v in itertools.permutations(perm,n):\n  path = 0\n  for i in range(n-1):\n    path += dis(p[v[i]],p[v[i+1]])\n  num += 1\n  total += path\nprint((total/num))\n", "import itertools\nimport math\nN = int(input())\nxy = [list(map(int, input().split())) for _ in range(N)]\nx, y = [list(i) for i in zip(*xy)]\nl=[]\nfor i in range(0,N):\n    l.append(i)\np=list(itertools.permutations(l,N))\nz=0\nfor j in range(0,len(p)):\n    for k in range(0,N-1):\n        z=z+math.sqrt(pow(x[p[j][k]]-x[p[j][k+1]],2)+pow(y[p[j][k]]-y[p[j][k+1]],2))\nans=z/len(p)\nprint(ans)\n", "import itertools\nimport math\nN = int(input())\nls, val = [], 0\nperm = itertools.permutations(range(N))\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\nfor i in perm:\n    for j in range(N - 1):\n        val += math.sqrt((ls[i[j + 1]][0] - ls[i[j]][0]) ** 2 + (ls[i[j + 1]][1] - ls[i[j]][1]) ** 2)\nprint(val / math.factorial(N))", "import math\nn = int(input())\ntowns = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(n-1):\n    x1, y1 = towns[i]\n    for j in range(i+1, n):\n        x2, y2 = towns[j]\n        ans += math.sqrt((x1-x2)**2 + (y1-y2)**2)*(n-1)*2\nprint(ans/((n-1)*n))", "import itertools, math\nN = int(input())\nls, L = [], 0\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\n\nperms = itertools.permutations(range(N))\nfor perm in perms:\n    for i in range(N - 1):\n        L += math.sqrt((ls[perm[i + 1]][0] - ls[perm[i]][0]) ** 2 + (ls[perm[i + 1]][1] - ls[perm[i]][1]) ** 2)\nprint(L / math.factorial(N))", "import itertools\nimport math\nn = int(input())\nl = [list(map(int,input().split())) for _ in range(n)]\nsize = math.factorial(n)\na = list(itertools.permutations(l,n))\ntotal = 0\nfor i in range(size):\n    for j in range(n-1):\n        x1 = a[i][j][0]\n        x2 = a[i][j+1][0]\n        y1 = a[i][j][1]\n        y2 = a[i][j+1][1]\n        x_total = (x1-x2)**2\n        y_total = (y1-y2)**2\n        total += (x_total + y_total)**.5\nprint(total/size)", "n = int(input())\na = [list(map(int,input().split())) for i in range(n)]\nsum = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    sum += ((a[i][0]-a[j][0])**2+(a[i][1]-a[j][1])**2)**0.5\nprint(2*sum/n)", "n = int(input())\nx_y = [ list(map(int, input().split())) for _ in range(n)  ]\nimport math\nd = []\nfor i in range(n):\n    for j in range(n):\n        if i != j:\n            x1, y1 = x_y[i]\n            x2, y2 = x_y[j]\n            d.append(math.sqrt((x1-x2)**2+(y1-y2)**2))\nprint(sum(d)/n)", "from itertools import permutations\nN=int(input())\narr=[list(map(int,input().split())) for i in range(N)]\n\ndef dis(x):\n    c=0\n    for i in range(N-1):\n        aa=arr[x[i]][0]-arr[x[i+1]][0]\n        bb=arr[x[i]][1]-arr[x[i+1]][1]\n        c+=(aa**2+bb**2)**(0.5)\n    return c\n \ncount=0\nans=0\nfor i in permutations(list(range(0,N)),N):\n    count+=1\n    ans+=dis(i)\n\nprint((ans/count))\n", "N = int(input())\nsites = [list(map(int, input().split())) for _ in range(N)]\n\ndef getDistance(A, B):\n  x = A[0] - B[0]\n  y = A[1] - B[1]\n  return (x ** 2 + y ** 2) ** 0.5\n\ntotalDistance = 0\nfor i in range(N - 1):\n  for j in range(i + 1, N):\n    totalDistance += getDistance(sites[i],sites[j])\n\nprint(2 * totalDistance / N)", "n = int(input())\nxy = [list(map(int, input().split())) for i in range(n)]\n\ndef distance(i, j):\n    xi, yi = xy[i]\n    xj, yj = xy[j]\n    return (xi-xj)**2 + (yi-yj)**2\n\nvisited = [False] * n\nans = 0\ndef dfs(route, length):\n    nonlocal ans\n    if len(route)==n:\n        ans += length\n        return\n    else:\n        for i in range(n):\n            if visited[i]: continue\n            next_distance = distance(route[-1], i)**0.5\n            visited[i] = True\n            dfs(route+[i], length+next_distance)\n            visited[i] = False\n\ncnt = 1\nfor i in range(n):\n    cnt*=i+1\n    visited[i] = True\n    dfs([i], 0)\n    visited[i] = False\nprint((ans/cnt))\n        \n        \n\n", "import itertools\nimport math\n\nN = int(input())\nx_list = [0] * N\ny_list = [0] * N\nfor i in range(N):\n    x_list[i], y_list[i] = map(int, input().split())\nl_sum = 0\nl = 0\nfor comb in itertools.combinations(range(N), 2):\n    l = (\n        (x_list[comb[0]] - x_list[comb[1]]) ** 2\n        + (y_list[comb[0]] - y_list[comb[1]]) ** 2\n    ) ** 0.5\n    l_sum += l\nans = 2 * l_sum / N\nprint(ans)", "import itertools\nimport math\n\ndef average_length():\n    # \u5165\u529b\n    N = int(input())\n    x = list()\n    y = list()\n    for _ in range(N):\n        X, Y = map(int, input().split())\n        x.append(X)\n        y.append(Y)\n    # \u51e6\u7406\n    permutations_list = itertools.permutations([x for x in range(N)])\n    all_case_distance_sum = 0\n    for one_case in permutations_list:\n        distance_sum = 0\n        count = 0\n        for i in one_case:\n            count += 1\n            if count == 1:\n                pass\n            else:\n                D = (x[pass_num]-x[i])**2 + (y[pass_num]-y[i])**2\n                d = math.sqrt(D)\n                distance_sum += d\n            # \u524d\u56de\u5024\n            pass_num = i\n        all_case_distance_sum += distance_sum\n    # \u5e73\u5747\n    return all_case_distance_sum / math.factorial(N)\n\nresult = average_length()\nprint(result)", "import functools\nimport itertools\nimport math\n\nn = int(input())\nposs = []\nfor _ in range(n):\n    x,y = map(int, input().split())\n    poss.append((x,y))\n\ndef dist(i, j):\n    xi,yi = poss[i]\n    xj,yj = poss[j]\n    return math.sqrt((xi-xj)**2 + (yi-yj)**2)\n\ntotaldist = 0.0\nfor order in itertools.permutations(range(n)):\n    for i in range(1,n):\n        totaldist += dist(order[i-1], order[i])\ntotaldist /= functools.reduce(lambda x,y: x*y, range(1,n+1))\n\nprint(totaldist)", "import math, itertools\nn = int(input())\nX = list(list(map(int,input().split())) for _ in range(n))\nL = list(itertools.permutations(range(n),n))\nans = 0\n\nfor l in L:\n  dist = 0\n  for i in range(n-1):\n    s,t = l[i],l[i+1]\n    vx = X[s][0] - X[t][0]\n    vy = X[s][1] - X[t][1]\n    dist += math.sqrt(vx**2 + vy**2)\n  ans += dist\n\nprint(ans/len(L))", "# coding: utf-8\nfrom math import sqrt\nfrom itertools import permutations\n\ndef main():\n    N = int(input())\n    ans = 0.0\n    P = [i for i in range(N)]\n    C = [list(map(int, input().split())) for _ in range(N)]\n    for p in permutations(P):\n        for i in range(N - 1):\n            ans += sqrt(((C[p[i + 1]][0] - C[p[i]][0]) ** 2) + ((C[p[i + 1]][1] - C[p[i]][1]) ** 2))\n\n    for i in range(2, N + 1):\n        ans /= i\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import permutations\nimport math\n\ndef main():\n    N = int(input())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, input().split())))\n\n    c = 0\n    tot = 0\n\n    for points in permutations(p):\n        d = 0\n        for i in range(1, len(points)):\n            d += dist(points[i - 1], points[i])\n\n        c += 1\n        tot += d\n\n    print(tot / c)\n\n\ndef dist(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef __starting_point():\n    main()\n__starting_point()", "import itertools, math\nN = int(input())\nls = []\nL = 0\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\nperms = itertools.permutations(range(N))\nfor perm in perms:\n    for i in range(N - 1):\n        L += math.sqrt((ls[perm[i + 1]][0] - ls[perm[i]][0]) ** 2 + (ls[perm[i + 1]][1] - ls[perm[i]][1]) ** 2)\nprint(L / math.factorial(N))", "import itertools\n\nN = int(input())\nL = []\n\nfor i in range(N):\n    x,y = map(int,input().split())\n    L.append([x,y])\n\ncnt = 0\ntotal = 0\nfor v in itertools.permutations(L):\n    for i in range(N-1):\n        x_1 = v[i][0]\n        y_1 = v[i][1]\n        x_2 = v[i+1][0]\n        y_2 = v[i+1][1]\n        total += ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    cnt += 1\n\nprint(total/cnt)", "import itertools, math\nN = int(input())\nls, L = [], 0\nfor i in range(N):\n    x, y = map(int, input().split(' '))\n    ls.append([x, y])\nperms = itertools.permutations(range(N))\nfor perm in perms:\n    for i in range(N - 1):\n        L += math.sqrt((ls[perm[i + 1]][0] - ls[perm[i]][0]) ** 2 + (ls[perm[i + 1]][1] - ls[perm[i]][1]) ** 2)\nprint(L / math.factorial(N))", "import itertools\n\nN = int(input())\nL = []\n\nfor i in range(N):\n    x,y = map(int,input().split())\n    L.append([x,y])\n\ncnt = 0\ntotal = 0\nfor v in itertools.permutations(L):\n    for i in range(N-1):\n        x_1 = v[i][0]\n        y_1 = v[i][1]\n        x_2 = v[i+1][0]\n        y_2 = v[i+1][1]\n        total += ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    cnt += 1\n\nprint(total/cnt)", "import math\nn=int(input())\nXY=[list(map(int,input().split())) for _ in range(n)]\nans=0\nfor i in range(n-1):\n  for j in range(i+1,n):\n    disx=XY[i][0]-XY[j][0]\n    disy=XY[i][1]-XY[j][1]\n    dis=math.sqrt(disx**2+disy**2)\n\n    ans+=dis\n\nprint(2*ans/n)"]