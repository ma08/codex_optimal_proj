["s =input()\n\nfrom collections import Counter\ncount = Counter(s)\nc0 = count[\"0\"]\nc1 = count[\"1\"]\n\nprint(min(c0,c1)*2)", "s = input()\nz = s.count('0')\nprint(2*min(z, len(s)-z))", "S = input()\n\nnum_0 = S.count('0')\nnum_1 = S.count('1')\n\nprint(min(num_0, num_1)*2)", "S = list(input())\n\nprint(2*min(S.count(\"1\"),S.count(\"0\")))", "S = input()\nstack = []\ncount = 0\nfor s in S:\n  if not stack:\n    stack.append(s)\n  elif stack[-1]!=s:\n    stack.pop()\n    count+=2\n  else:\n    stack.append(s)\nprint(count)", "def main2():\n    s = input()\n    one = s.count('0')\n    zero = s.count('1')\n    print(min(one, zero)*2)\n\n\ndef __starting_point():\n    main2()\n__starting_point()", "s = input()\nprint(min(s.count('0'), s.count('1'))*2)", "import sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = 10**20\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\n\ndef resolve():\n    S = SS()\n\n    ans = 0\n    stk = []\n    for i in S:\n        if stk and stk[-1] != i:\n            stk.pop()\n            ans += 2\n        else:\n            stk.append(i)\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "s = input()\nn = len(s)\na = s.count('1')\nb = s.count('0')\nif a>=b:\n  print(b*2)\nelse:\n  print(a*2)", "S = input()\nz = S.count(\"0\")\no = S.count(\"1\")\n\nprint(len(S)-abs(z-o))", "s = input()\n\nzero = s.count('0')\none = s.count('1')\n\nprint(min(zero,one)*2)", "S = input()\n\nprint(min(S.count(\"1\"), S.count(\"0\")) * 2)", "s = input()\nred = s.count(\"0\")\nblue = s.count(\"1\")\n\nprint(min(red,blue)*2)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\ns = ns()\nn = len(s)\nb = s.count('0')\nr = n - b\nprint(2 * min(b, r))", "s = input()\n\nred = 0\nblue = 0\nfor i in s:\n  if i == \"0\":\n    red += 1\n  else :\n    blue += 1\n    \nprint((red+blue-abs(red-blue)))\n", "import sys\n\ncubes = list(input()) # \u5165\u529b\u53d7\u4ed8\nstack = []\ncount = 0\n\nfor cube in cubes:\n    if not stack:\n        stack.append(cube)\n    elif stack[-1] != cube:\n        count += 2\n        stack.pop()\n    else:\n        stack.append(cube)\nprint(count)\n", "s=input()\na=s.count('0')\nb=s.count('1')\nc=min(a,b)\nprint(2*c)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tC\n# CreatedDate:  2020-09-11 14:10:37 +0900\n# LastModified: 2020-09-11 14:16:43 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\n\n\ndef main():\n    S = input()\n    if S.count('0') < S.count('1'):\n        print((S.count('0')*2))\n    else:\n        print((S.count('1')*2))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = list(input())\nprint((2*(min(S.count(\"0\"),S.count(\"1\")))))\n", "S = input()\n\nprint(min(S.count(\"0\"), S.count(\"1\"))*2)", "def main():\n    s = input()\n    zero = s.count(\"0\")\n    one = s.count(\"1\")\n    print(min(zero, one) * 2)\n\nmain()", "s=list(str(input()))\na=s.count('0')\nb=s.count('1')\n\nprint(min(a,b)*2)", "S=input()\nd=[0,0]\nfor i in S:\n  d[int(i)]+=1\nprint((min(d)*2))\n", "S = str(input())\n\nzero = S.count('0')\none = S.count('1')\n\nans = min(zero,one)\nprint(ans*2)", "s = list(input())\nprint((min(s.count(\"0\"), s.count(\"1\")) * 2))\n", "S=list(input())\n\na=S.count('0')\nb=S.count('1')\nprint(min(a,b)*2)", "s = input()\nzero = 0\none = 0\nfor i in s:\n  if i == '0':\n    zero += 1\n  else:\n    one += 1\nans = min(one, zero)\nprint(((ans) << 1))\n", "s=input()\n\nnum_0 = 0\nnum_1 = 0\nfor i in range(len(s)):\n  if s[i] == '0':\n    num_0 += 1\n  else:\n    num_1 += 1\n    \nprint(min(num_0,num_1)*2)", "S = input()\nz = 0\no = 0\nfor c in S:\n    if c == '0':\n        z += 1\n    else:\n        o += 1\nprint(min([z,o])*2)", "print(2*min(list(map(input().count,(\"10\")))))", "S = input()\nN = len(S)\n\ncnt = 0\n\nfor s in S:\n    if s == '0':\n        cnt += 1\n\nprint(2 * min(cnt, N - cnt))", "S = list(input())\n\nprint(min(S.count(\"0\"), S.count(\"1\")) * 2)", "# author:  Taichicchi\n# created: 12.09.2020 12:29:36\n\nfrom collections import Counter\nimport sys\n\nS = input()\n\nc = Counter(S)\n\nprint((len(S) - abs(c[\"0\"] - c[\"1\"])))\n", "S = str(input())\nx = S.count(\"0\")\ny = S.count(\"1\")\nprint((2*min(x, y)))\n", "S=input()\no=0\ni=0\nfor j in S:\n    if j==\"0\":\n        o+=1\n    else:\n        i+=1\nprint(min(o,i)*2)", "S = input()\nprint(2*min(S.count(\"0\"),S.count(\"1\")))", "s = input()\n\nz = 0\no = 0\nfor c in s:\n    if c == '1':\n        o += 1\n    else:\n        z += 1\n\nprint((min(o, z) * 2))\n", "s=list(input())\na=s.count('0')\nb=s.count('1')\nprint(min(b,a)*2)", "s = input()\nn = min(s.count(\"0\"),s.count(\"1\"))\nprint(n*2)", "S = list(map(int, list(input())))\nN = len(S)\ncnt = [0,0]\nfor i in S:\n  cnt[i] += 1\nprint(2 * min(cnt))", "s = list(input())\n\nlength = len(s)\n\nr = s.count('0')\nb = s.count('1')\n\nprint(length - abs(r-b))", "S = input()\n\nred = 0\nblue = 0\nfor s in S:\n    if s == '0':\n        red += 1\n    elif s == '1':\n        blue += 1\nprint((min(red, blue)*2))\n        \n", "S = input()\nc0 = S.count('0')\nc1 = S.count('1')\nprint(min(c0,c1)*2)", "S=input()\nstack=[]\ncount=0\nfor s in S:\n    if not stack:\n        stack.append(s)\n    elif stack[-1]!=s:\n        stack.pop()\n        count+=2\n    else:\n        stack.append(s)\nprint(count)", "# coding:utf-8\ns = input()\na = s.count('0')\nb = s.count('1')\n\nprint((2 * min(a, b)))\n", "S = input()\n\nzero_count=S.count(\"0\")\none_count=S.count(\"1\")\n\nans=2*min(int(zero_count),int(one_count))\nprint(ans)", "s = str(input())\nx = s.count('0')\ny = s.count('1')\nprint(min(x,y)*2)", "s = input()\nl = list(s)\n\na = l.count('0')\nb = l.count('1')\n\nans = 2 * min(a, b)\nprint(ans)", "S = input()\n \n# 0\u30681\u306f\u53ef\u80fd\u306a\u9650\u308a\u6253\u3061\u6d88\u3057\u5408\u3046\nc0 = S.count('0')\nc1 = S.count('1')\n\nprint(2*min(c0, c1))", "S = input()\n\ncnt_0 = S.count(\"0\")\nmin_cnt_01 = min(cnt_0,len(S) - cnt_0)\nprint(min_cnt_01 * 2)", "S = input()\n\n# 0\u30681\u304c\u53ef\u80fd\u306a\u9650\u308a\u6253\u3061\u6d88\u3057\u3042\u3046\u69d8\u3092\u60f3\u50cf\u305b\u3088\nc0 = S.count('0')\nc1 = S.count('1')\nprint(2*min(c0, c1))", "s = input()\nprint(2*min(s.count(\"0\"),s.count(\"1\")))", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    S = readline().strip()\n\n    red = S.count('0')\n    blue = len(S) - red\n\n    print((min(red, blue) * 2))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nr = s.count(\"0\")\nb = s.count(\"1\")\nprint(r + b - abs(r - b))", "S = input()\ncnt0 = 0\ncnt1 = 0\nfor i in S:\n    if i == '0':\n        cnt0 += 1\n    else:\n        cnt1 += 1\nprint(min(cnt0, cnt1) * 2)", "s=input()\ncnt0 = 0\ncnt1 = 0\nfor i in s:\n    if i == '0':\n        cnt0 +=1\n    else:\n        cnt1 +=1\n\nprint(2*min(cnt0,cnt1))", "s = input()\nb = 0\nw = 0\nfor i in range(len(s)):\n    if(s[i] == '0'):\n        b = b+1\n    if(s[i] == '1'):\n        w = w+1\n\nprint((2*min(b,w)))\n\n", "s = input()\n\na = 0\nb = 0\n\nfor i in range(len(s)):\n  if s[i] == \"0\":\n    a += 1\n  else:\n    b += 1\n\nprint(min(a,b)*2)", "\ns = input()\nprint(2 * min(s.count('0'),s.count('1')))", "import collections\nS=list(str(input()))\ncc=collections.Counter(S)\nans=min(cc['0'],cc['1'])\nprint(ans*2)", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n    S = input().rstrip()\n    stack=[]\n    count=0\n\n    if S==\"0\":\n        print(\"0\")\n        return\n\n    for s in S:\n        if len(stack)==0:\n            stack.append(str(s))\n        else:\n            if s != stack[-1]:\n                count+=1\n                stack.pop()\n            else:\n                stack.append(str(s))\n    print(2*count)\n\ndef __starting_point():\n    main()\n__starting_point()", "S = list(input())\n\nprint(2 * min(S.count('0'), S.count('1')))", "from collections import deque\n\nS = input()\n\nd = deque()\ncnt = 0\nfor s in S:\n    if d:\n        if d[-1] != s:\n            d.pop()\n            cnt += 2\n        else:\n            d.append(s)\n    else:\n        d.append(s)\n\nprint(cnt)\n", "S = list(input())\n\nc0 = S.count(\"0\")\nc1 = S.count(\"1\")\n\nprint(2 * min(c0,c1))", "a = list(input())\ncount = 0\nnum = 0\nwhile(a != []):\n  if num == -1:\n    num += 1\n    continue\n  if num == len(a) or len(a) == 1 or (num == len(a)-1 and a[-1] == a[-2]):\n    break\n  if (a[num] == '0' and a[num + 1] == '1') or (a[num] == '1' and a[num + 1] == '0') :\n    #print(\"OK\", num)\n    a.pop(num)\n    a.pop(num)\n    #print(a)\n    count += 2\n    num -= 1\n  else:\n    num += 1\nprint(count)", "s = input()\nprint(len(s)-abs(s.count('1')-s.count('0')))", "S=list(input())[::-1]\nque=[]\nN=len(S)\nans=0\n\nwhile len(S)>0:\n\tque.append(S.pop(-1))\n\tif len(que)>1:\n\t\tif (que[-1]==\"1\" and que[-2]==\"0\") or (que[-1]==\"0\" and que[-2]==\"1\"):\n\t\t\tque.pop(-1)\n\t\t\tque.pop(-1)\n\t\t\tans+=2\n\nprint(ans)", "S=input()\nList = list(S)\nzeroNum = List.count(\"0\")\noneNum = List.count(\"1\")\nres = min(zeroNum,oneNum)\nprint(res*2)", "s = input()\n# 0: red\n# 1: blue\nn = len(s)\n\ncnt_r = 0\ncnt_b = 0\nfor c in s:\n    if c==\"0\":\n        cnt_r+=1\ncnt_b = n-cnt_r\nprint(2*min(cnt_r, cnt_b))", "S = input()\n\nzero = S.count(\"0\")\none = S.count(\"1\")\n\nif zero != 0 and one != 0:\n  print(min(zero,one)*2)\nelse:\n  print(0)", "from collections import Counter\nS = str(input())\nc = Counter(S)\nd = c.most_common()\nif len(d) == 2:\n  ans = d[1][1] * 2\n  print(ans)\nelse:\n  print(0)", "S = input()\nA = S.count(\"0\")\nB = S.count(\"1\")\nprint(2*min(A, B))", "import collections\ns = list(map(str,input()))\nans =0\na=collections.Counter(s)\nif len(a)==1:\n  print((0))\nelse:\n  print((min(a.values())*2))\n\n", "from collections import Counter\n\nnum_dict = Counter(input())\n\nif num_dict.get(\"0\") is not None and num_dict.get(\"1\") is not None:\n    if num_dict.get(\"0\") > num_dict.get(\"1\"):\n        print(num_dict.get(\"1\") * 2)\n    else:\n        print(num_dict.get(\"0\") * 2)\nelse:\n    print(0)", "s=input()\ns=list(s)\n\na=s.count('0')\nb=s.count('1')\n\nprint((min(a,b)*2))\n", "S=input()\nprint((min(S.count('0'),S.count('1'))*2))\n", "S = input()\nzero = S.count(\"0\")\none = S.count(\"1\")\nprint(min(zero, one) * 2)", "S = input()\ns_lis= list(S)\nr_cout=s_lis.count('1')\nw_cout=s_lis.count('0')\nprint(2*(min(r_cout,w_cout)))", "s = list(input())\nn = len(s)\nt = []\nwhile s:\n  c = s.pop()\n  if t and t[-1] != c:\n    t.pop()\n  else:\n    t.append(c)\nprint(n - len(t))", "s=input()\nnum_0=0\nnum_1=0\nfor i in range(len(s)):\n  if s[i]==\"0\":\n    num_0+=1\n  else:\n    num_1+=1\n\nprint(min(num_0,num_1)*2)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 14 01:36:50 2020\n\n@author: liang\n\"\"\"\n\nS = input()\nc0 = 0\nc1 = 0\nfor i in range(len(S)):\n    if S[i] == \"0\":\n        c0 += 1\n    else:\n        c1 += 1\nans = len(S) - abs(c0-c1)\nprint(ans)", "import math\nfrom collections import Counter\ns = list(input())\ns = list(map(int, s))\ndict_s = Counter(s)\n#print(dict_s)\nprint((min(dict_s[0], dict_s[1]))*2)", "S=input()\nzero=0\none=0\nfor i in range(len(S)):\n    if S[i]=='1':\n        one+=1\n    else:\n        zero+=1\nprint((min(zero,one)*2))\n", "S = input().rstrip()\nprint(min(S.count(\"0\"),S.count(\"1\"))*2)", "a=list(input())\ntemp1=0\ntemp0=0\n\nfor i in range(len(a)):\n    if a[i]==\"0\":\n        temp0+=1\n    else:\n        temp1+=1\nprint((min(temp0,temp1)*2))\n", "S = input()\nstack = []\ncnt = 0\nfor s in S:\n    if not stack:\n        stack.append(s)\n    elif stack[-1] != s:\n        stack.pop()\n        cnt += 2\n    else:\n        stack.append(s)\nprint(cnt)", "s = input()\nst = []\nans = 0\nfor e in s:\n  if len(st) == 0:\n    st.append(e)\n  else:\n    if st[-1] != e:\n      st.pop()\n      ans += 2\n    else:\n      st.append(e)\nprint(ans)", "S = list(input())\none = S.count('1')\nzero = S.count('0')\n\nprint(2*min(one,zero))", "S = str(input())\nx = len(S)\nif '0' in S:\n  y0 = S.count('0')\nelse:\n  y0 = 0\nif '1' in S:\n  y1 = S.count('1')\nelse:\n  y1 = 0\n  \nd = abs(y0 - y1)\nprint((x - d))\n", "s = input()\ns0 = s.count('0')\ns1= s.count('1')\nprint(2*min(s0,s1))", "S=list(input())\nA=S.count('1')\nB=S.count('0')\nprint(min(2*A,2*B))", "S = input()\n \na = S.count('0')\nb = S.count('1')\nprint(2*min(a,b))", "S = input()\nx = S.count('0')\ny = S.count('1')\n\nans = 2 * (min(x, y))\nprint(ans)", "s = input()\nr = 0\nb = 0\n\nfor i in range(len(s)):\n  if s[i] == \"0\":\n    r += 1\n  if s[i] == \"1\":\n    b += 1\n\nprint(2 * min(r, b))", "N = str(input())\none = N.count('1')\nzero = N.count('0')\n\nprint(min(one,zero)*2)", "from collections import Counter\n\ndef main():\n    S = input()\n    cs = Counter(S)\n    ans = min(cs['0'], cs['1'])*2\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = list(input())\nN = len(S)\nlen0 = S.count('0')\nlen1 = S.count('1')\nrm = min(len0,len1)\nprint(2*rm)", "b=input()\nA=b.count(\"1\")\nB=b.count(\"0\")\nprint(min(2*A,2*B))", "S = input()\ncnt_0 = S.count('0')\ncnt_1 = S.count('1')\n\nprint((min(cnt_0, cnt_1)*2))\n", "s = list(input())\nc0 = s.count('0')\nc1 = s.count('1')\n\nmi = min(c0,c1)\nprint(mi*2)"]