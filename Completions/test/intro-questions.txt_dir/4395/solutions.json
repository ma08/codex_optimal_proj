["starts = [\"RGB\", \"RBG\", \"BRG\", \"BGR\", \"GRB\", \"GBR\"]\n\nN = int(input())\ns = input()\n\nmin_cost = float(\"inf\")\nmin_str = \"\"\n\nfor k in starts:\n\tsp = (k * -(-N // 3))[:N]\n\tcost = sum(x != y for x, y in zip(s, sp))\n\tif cost < min_cost:\n\t\tmin_cost = cost\n\t\tmin_str = sp\n\nprint(min_cost)\nprint(min_str)", "A = ['RGB', 'RBG', 'BRG', 'BGR', 'GRB', 'GBR']\nn = int(input())\ns = input()\nans = n + 1\nf = 0\nfor i in range(6):\n    k = 0\n    for j in range(n):\n        if s[j] != A[i][j % 3]:\n            k += 1\n    if k < ans:\n        ans = k\n        f = i\nprint(ans)\nfor i in range(n):\n    print(A[f][i % 3], end=\"\")", "n = int(input())\narr = ['RGB', 'RBG', 'GRB', 'GBR', 'BRG', 'BGR']\ns = input()\ncnts = []\nfor i in arr:\n    cnt = 0\n    for j in range(len(s)):\n        if s[j] == i[j % 3]:\n            cnt += 1\n    cnts.append(cnt)\nk = cnts.index(max(cnts))\ns = arr[k] * (n // 3 + 1)\ns = s[:n]\nprint(n - max(cnts))\nprint(s)", "n = int(input())\ns = input().strip()\nbest, ans = n, None\nfor p in ('RGB', 'RBG', 'GRB', 'GBR', 'BRG', 'BGR'):\n    t = p * ((n + 2) // 3)\n    c = sum(x != y for x, y in zip(s, t))\n    if c < best:\n        best = c\n        ans = t[:n]\nprint(best, ans, sep='\\n')", "from itertools import permutations\n\nn = int(input())\nseq = input()\n\nls = list(permutations(\"RGB\"))\nfor i in range(len(ls)):\n    ls[i] = ''.join(ls[i])\n\nstrans = \"\"\nans = n\nfor tes in ls:\n    tes = (tes * (n // 3 + 1))\n    cur = 0\n    for i in range(len(seq)):\n        if tes[i] != seq[i]:\n            cur += 1\n    if cur < ans:\n        ans = min(ans, cur)\n        strans = tes[:len(seq)]\n    # print(tes, seq, ans, cur)\nprint(ans)\nprint(strans)\n", "import itertools\nN = int(input())\nColor = input()\nans = float('inf')\nfor c in itertools.permutations(('R', 'G', 'B')):\n    ctr = 0\n    for i, v in enumerate(Color):\n        if c[i%3] != v:\n            ctr += 1\n    if ctr < ans:\n        ans = ctr\n        Ans = ''.join([c[i%3] for i in range(N)])\nprint(ans)\nprint(Ans)", "n = int(input())\n\ns = input()\n\nG = ['GRB','GBR','RBG','RGB','BGR','BRG']\n\nbest = 10**10\nguy = None\n\nfor i in G:\n    temp = 0\n    for j in range(n):\n        if s[j] != i[j%3]:\n            temp += 1\n    if temp < best:\n        best = temp\n        guy = i\n\nprint(best)\nprint(guy*(n//3)+guy[:n%3])\n\n", "n=int(input())\ns=input()\nlens=len(s)\nans,ans2=10**9,\"\"\n\nfor ca in range(6):\n    if 0<=ca<=1:\n        st=\"R\"\n    elif 2<=ca<=3:\n        st=\"G\"\n    else:\n        st=\"B\"\n\n    ss=[0]*lens\n    for i in range(lens):\n        ss[i]=st\n        if st==\"R\":\n            if ca%2==0: st=\"G\"\n            else: st=\"B\"\n        elif st==\"G\":\n            if ca%2==0: st=\"B\"\n            else: st=\"R\"\n        else:\n            if ca%2==0: st=\"R\"\n            else: st=\"G\"\n\n    diff=0\n    for i in range(lens):\n        if ss[i]!=s[i]: diff+=1\n\n    if diff<ans:\n        ans,ans2=diff,\"\".join(ss)\n\nprint(ans,ans2,sep=\"\\n\")", "import itertools\nn = int(input())\ns = input()\nbest_pattern = None\nbest_count = None\nfor pattern in itertools.permutations(\"RGB\", 3):\n    count = 0\n    for i, ch in enumerate(s):\n        if ch != pattern[i % 3]:\n            count += 1\n    if best_count is None or best_count > count:\n        best_count, best_pattern = count, pattern\n\nprint(best_count)\nfull, tail = divmod(n, 3)\nprint(\"\".join(best_pattern * full + best_pattern[:tail]))\n", "import itertools\n\nn = int(input())\nlamps = input()\n\nperms = itertools.permutations(['R', 'G', 'B'])\nbest = n\nfor p in perms:\n    recolors = 0\n    for i in range(n):\n        if lamps[i] != p[i%3]:\n            recolors += 1\n    if recolors < best:\n        best = recolors\n        bestp = p\n\nprint(best)\nprint(''.join(itertools.islice(itertools.cycle(bestp), n)))\n\n", "n = int(input())\ns = input()\nx = []\nx2 = []\ny = []\ny2 = []\nz = []\nz2 = []\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        x.append(\"G\")\n    elif a%3 == 1:\n        x.append(\"B\")\n    else:\n        x.append(\"R\")\n    a += 1\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        x2.append(\"G\")\n    elif a%3 == 1:\n        x2.append(\"R\")\n    else:\n        x2.append(\"B\")\n    a += 1\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        y.append(\"B\")\n    elif a%3 == 1:\n        y.append(\"G\")\n    else:\n        y.append(\"R\")\n    a += 1\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        y2.append(\"B\")\n    elif a%3 == 1:\n        y2.append(\"R\")\n    else:\n        y2.append(\"G\")\n    a += 1\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        z.append(\"R\")\n    elif a%3 == 1:\n        z.append(\"G\")\n    else:\n        z.append(\"B\")\n    a += 1\na = 0\nwhile a<n:\n    if a% 3 == 0:\n        z2.append(\"R\")\n    elif a%3 == 1:\n        z2.append(\"B\")\n    else:\n        z2.append(\"G\")\n    a += 1\nans = float(\"inf\")\ndore = [x,x2,y,y2,z,z2]\nd = 0\ntmp = 0\nfor i in range(n):\n    if x[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 0\n    ans = tmp\ntmp = 0\nfor i in range(n):\n    if x2[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 1\n    ans = tmp\n\ntmp = 0\nfor i in range(n):\n    if y[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 2\n    ans = tmp\ntmp = 0\nfor i in range(n):\n    if y2[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 3\n    ans = tmp\n\ntmp = 0\nfor i in range(n):\n    if z[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 4\n    ans = tmp\ntmp = 0\nfor i in range(n):\n    if z2[i] != s[i]:\n        tmp += 1\nif tmp < ans:\n    d = 5\n    ans = tmp\nprint(ans)\nprint(\"\".join(dore[d]))", "n=int(input())\ns=input()\nperm=[\"RGB\",\"RBG\",\"BRG\",\"BGR\",\"GRB\",\"GBR\"]\nans=0\n\nans=10**9\np=\"\"\nfor i in range(len(perm)):\n    temp=0\n    a=\"\"\n    for j in range(n):\n        if s[j]!=perm[i][j%3]:\n            temp+=1\n            a+=perm[i][j%3]\n        else:\n            a+=s[j]\n    if temp<ans:\n        ans=temp\n        p=a\nprint(ans)\nprint(p)\n\n    \n", "n = int(input())\ng = input()\nvariants = [['R', 'G', 'B'], ['R', 'B', 'G'], ['G', 'R', 'B'], ['G', 'B', 'R'], ['B', 'R', 'G'], ['B', 'G', 'R']]\n\nbest_cost = n\nbest = None\nfor v in variants:\n    cost = 0\n    for i in range(n):\n        if g[i] != v[i%3]: cost += 1\n    if cost < best_cost:\n        best_cost = cost\n        best = v\n        \nprint(best_cost)\nfor i in range(n):\n    print(best[i % 3], end='')\n    \nprint()\n", "n = int(input())\ns = input()\n\nR = [0,0,0]\nG = [0,0,0]\nB = [0,0,0]\n\nL = [\"RGB\", \"RBG\", \"BRG\", \"BGR\", \"GBR\", \"GRB\"]\n\nfor i in range(n):\n    if s[i] == \"R\":\n        R[i%3] += 1\n    if s[i] == \"G\":\n        G[i%3] += 1\n    if s[i] == \"B\":\n        B[i%3] += 1\n    \nmi = 10**9\nfor l in L:\n    dif = 0\n    for i in range(3):\n        if l[i] == \"R\":\n            dif += G[i] + B[i]\n        elif l[i] == \"G\":\n            dif += R[i] + B[i]\n        else:\n            dif += R[i] + G[i]\n        \n    if dif < mi:\n        mi = dif\n        tmp = l\n        \nprint(mi)\nprint((tmp*((n+10)//3))[:n])\n\n", "def diffs(s1, s2):\n  c=0\n  for i, j in zip(s1, s2):\n    if not i==j:\n      c+=1\n  return c\n\nn=int(input())\ni_s=input()\nchk=int(n/3)+1\nsl=[\"RGB\", \"RBG\", \"BRG\", \"BGR\", \"GBR\", \"GRB\"]\nol=list(map(lambda x: (x*chk)[:n], sl))\ndl=list(map(lambda x: diffs(x, i_s), ol))\nprint(min(dl))\nprint(ol[dl.index(min(dl))])", "n = int(input())\ns = input()\nmask = ['RGB', 'RBG', 'BRG', 'BGR', 'GBR', 'GRB']\nans = 10000000000\nanss = ''\nfor i in range(6):\n    k = n // 3\n    ss = mask[i] * k + mask[i][:n % 3]\n    now = 0\n    for j in range(n):\n        if s[j] != ss[j]:\n            now += 1\n    if now < ans:\n        ans = now\n        anss = ss\n\nprint(ans)\nprint(anss)\n    \n", "n = int(input())\ns = input()\nbaz = ['RGB','RBG','GBR', 'GRB', 'BRG', 'BGR']\nfor i in range(len(baz)):\n    baz[i] = (baz[i] * n)[0:n]\nans = 10 ** 9\ntext = baz[0]\nfor i in baz:\n    ch = 0\n    for j in range(n):\n        if s[j] != i[j]:\n            ch += 1\n    if ch < ans:\n        text = i\n    ans = min(ans, ch)\nprint(ans)\nprint(text)", "n = int(input())\ns = input()\nbest = -1\nans = 10 ** 6\nper = ['RGB', 'RBG', 'BRG', 'BGR', 'GBR', 'GRB']\nfor idx, p in enumerate(per):\n\ttmp = 0\n\tfor i in range(n):\n\t\tif s[i] != p[i % 3]:\n\t\t\ttmp += 1\n\tif tmp < ans:\n\t\tans = tmp\n\t\tbest = idx\nout = per[best] * (n // 3) + per[best][:(n % 3)]\nprint(ans)\nprint(out)", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    try:\n        f = open('input'+ str(inId) + '.txt', 'r')\n        sys.stdin = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    except Exception:\n        dprint('invalid input file')\nif outId>0:\n    dprint('use output', outId)\n    try:\n        f = open('stdout'+ str(outId) + '.txt', 'w')\n        sys.stdout = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    except Exception:\n        dprint('invalid output file')\n        \n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n#print(N)\nS = input()\n\ns0 = 'RGB' * 100000\ns1 = 'RBG' * 100000\ns2 = 'BRG' * 100000\ns3 = 'BGR' * 100000\ns4 = 'GRB' * 100000\ns5 = 'GBR' * 100000\n\nzs = [s0,s1,s2,s3,s4,s5]\nzr = []\nfor x in zs:\n    t = 0\n    for i in range(N):\n        if x[i] != S[i]:\n            t+=1\n    zr.append(t)\n\nr = min(zr)\ndprint(r)\nfor i in range(6):\n    if zr[i] == r:\n        print(r)\n        print(zs[i][:N])\n        break\n\n\n\n\n\n", "n = int(input())\ns = input()\nif len(s) <= 2 and len(set(s)) > 1:\n    print(0)\n    print(s)\nelif len(s) == 2:\n    print(1)\n    bam = 'RGB'\n    print(s[0]+bam[(bam.index(s[0])+1)%3])\nelse:\n    o1 = {'R': 0, 'G': 0, 'B': 0}\n    o2 = {'R': 0, 'G': 0, 'B': 0}\n    o3 = {'R': 0, 'G': 0, 'B': 0}\n    for t in range(len(s)):\n        if t%3 == 0:\n            o1[s[t]] += 1\n        elif t%3 == 1:\n            o2[s[t]] += 1\n        else:\n            o3[s[t]] += 1\n    m1 = 0\n    kwek = ''\n    for girl in ('RGB', 'RBG', 'BRG', 'BGR', 'GRB', 'GBR'):\n        z = o1[girl[0]]+o2[girl[1]]+o3[girl[2]]\n        if z > m1:\n            m1 = z\n            kwek = girl\n    print(len(s) - m1)\n    for t in range(len(s)):\n        print(kwek[t%3], end='')\n", "n=int(input())\ns=input()\nc=['RGB','RBG','GRB','GBR','BRG','BGR']\nans=10**9\nss=''\nfor base in c:\n\tx=base*(len(s)//3+1)\n\tt=0\n\tfor j in range(len(s)):\n\t\tif s[j]!=x[j]:t+=1\n\tif t<ans:\n\t\tans=t\n\t\tss=x[:len(s)]\nprint(ans)\nprint(ss)\n", "f=[\"R\",\"G\",\"B\"]\nn=int(input())\ns=input()\nb=n*[0]\nfor i in range(len(s)):\n    if s[i]==\"R\":\n        b[i]=0\n    elif s[i]==\"G\":\n        b[i]=1\n    else:\n        b[i]=2\nd=[[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]]\nr=[]\nfor i in range(len(d)):\n    g=0\n    for j in range(len(b)):\n        if b[j]!=d[i][j%3]:\n            g+=1\n    r+=[g]\n    if g==0:\n        break\np=min(r)\ne=d[r.index(p)]\nprint(p)\nq=''\nfor i in range(n):\n    q+=f[e[i%3]]\nprint(q)\n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/1/23 22:56\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : C. Nice Garland.py\n\n\ndef main():\n    n = int(input())\n    s = input()\n\n    patterns = ['RGB', 'RBG', 'BGR', 'BRG', 'GRB', 'GBR']\n\n    recolor_count = n + 1\n    nice_pattern = None\n    for p in patterns:\n        curr_count = 0\n        for i in range(n):\n            if s[i] != p[i % 3]:\n                curr_count += 1\n        if curr_count < recolor_count:\n            recolor_count = curr_count\n            nice_pattern = p\n\n    print(recolor_count)\n    for i in range(n):\n        print(nice_pattern[i % 3], end='')\n    print()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ns=list(input())\nm=n//3\nm+=1\na=list(\"GRB\")\na=a*m\na=a[:n]\na1=list(\"GBR\")\na1=a1*m\na1=a1[:n]\na2=list(\"RBG\")\na2=a2*m\na2=a2[:n]\na3=list(\"RGB\")\na3=a3*m\na3=a3[:n]\na4=list(\"BRG\")\na4=a4*m\na4=a4[:n]\na5=list(\"BGR\")\na5=a5*m\na5=a5[:n]\nans=[]\nd=0\nfor i in range(n):\n    if a[i]!=s[i]:\n        d+=1\nans.append([d,0])\nd=0\nfor i in range(n):\n    if a1[i]!=s[i]:\n        d+=1\nans.append([d,1])\nd=0\nfor i in range(n):\n    if a2[i]!=s[i]:\n        d+=1\nans.append([d,2])\nd=0\nfor i in range(n):\n    if a3[i]!=s[i]:\n        d+=1\nans.append([d,3])\nd=0\nfor i in range(n):\n    if a4[i]!=s[i]:\n        d+=1\nans.append([d,4])\nd=0\nfor i in range(n):\n    if a5[i]!=s[i]:\n        d+=1\nans.append([d,5])\nans.sort()\nif ans[0][1]==0:\n    print(ans[0][0])\n    print(''.join(a))\nelif ans[0][1]==1:\n    print(ans[0][0])\n    print(''.join(a1))\nelif ans[0][1]==2:\n    print(ans[0][0])\n    print(''.join(a2))\nelif ans[0][1]==3:\n    print(ans[0][0])\n    print(''.join(a3))\nelif ans[0][1]==4:\n    print(ans[0][0])\n    print(''.join(a4))\nelif ans[0][1]==5:\n    print(ans[0][0])\n    print(''.join(a5))\n"]