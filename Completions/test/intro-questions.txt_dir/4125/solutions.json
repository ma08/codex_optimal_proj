["from fractions import gcd\nfrom functools import reduce\n\nn, x = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nprint((reduce(gcd, [abs(i-x) for i in c])))\n", "import math\nfrom functools import reduce\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n\ndef gcd(*numbers):\n  return reduce(math.gcd, numbers)\n\nn,x = map(int,input().split())\nxl = list(map(int,input().split()))\nxl = list(map(lambda y: abs(y-x), xl))\n\nans = -1\nif len(xl) == 1:\n    ans = xl[0]\nelse:\n    ans = gcd(*xl)\n\nprint(ans)", "import math\nfrom functools import reduce\ndef gcd(numbers):\n    return reduce(math.gcd, numbers)\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nb.append(a[1])\nc = sorted(b)\nd = []\nfor i in range(a[0]):\n  d.append(c[i+1]-c[i])\nprint(gcd(d))", "def gcd(a,b):\n    while a!=0 and b!=0:\n        if a>b: #a<=b\n            c = a\n            a = b\n            b = c\n        b %= a\n    return max(a,b)\n\nn,x = map(int,input().split())\nd = sorted(list(map(lambda a:abs(a-x),list(map(int,input().split())))))\nnow = d[0]\nfor i in d[1:]:\n    now = gcd(now,i)\nprint(now)", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n\ndef gcd(a, b):\n    \"\"\"\u6700\u5927\u516c\u7d04\u6570\"\"\"\n    a, b = (a, b) if a >= b else (b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, X, x):\n    x_abs = [abs(X - xi) for xi in x]\n    ans = x_abs[0]\n    for xi in x_abs[1:]:\n        ans = gcd(ans, xi)\n    print(ans)\n\n\ndef __starting_point():\n    N, X = list(map(int, input().split()))\n    x = [int(i) for i in input().split()]\n    solve(N, X, x)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # N, X = 10 ** 5, randint(1, 10 ** 9)\n    # x = [randint(1, 10 ** 9) for _ in range(N)]\n    # solve(N, X, x)\n\n__starting_point()", "n,x=map(int, input().split())\nxlist=list(map(int, input().split()))\nylist=[]\nfor i in range(n):\n  ylist.append(xlist[i]-x)\nimport math\nans=ylist[0]\nfor i in range(n):\n  ans=math.gcd(ans,ylist[i])\nprint(ans)", "N,X = map(int,input().split())\nx = list(map(int,input().split()))\nans = 0\nfrom math import gcd\nfor i in range(N):\n  ans = gcd(ans,abs(X-x[i]))\nprint(ans)", "import math\nN, X = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.append(X)\nx.sort()\n\nxdst = [x[i+1] - x[i] for i in range(N)]\n#print(xdst)\n\nans = 10**10\nif len(xdst) == 1:\n    print(xdst[0])\n    return\n\nfor i in range(N-1):\n    ans = min(math.gcd(xdst[i], xdst[i+1]),ans)\nprint(ans)", "import math\nfrom functools import reduce\n\nn,x=map(int,input().split())\na=list(map(int,input().split()))\n\na.append(x)\nb=[]\nfor i in range(len(a)-1):\n    b.append(abs(a[i]-a[i-1]))\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\nprint(gcd(*b))", "import math\nN,X = map(int,input().split())\nlsx = list(map(int,input().split()))\nlsx.sort()\ngcd = abs(lsx[0]-X)\nfor i in range(1,N):\n    gcd = math.gcd(gcd,lsx[i]-lsx[i-1])\nprint(gcd)", "n,x=map(int,input().split())\nxlist= list(map(int,input().split()))\nif n == 1:\n  print(abs(xlist[0]-x))\n  return\nylist = []\nfor i in range(n):\n  ylist.append(abs(xlist[i]-x))\nfrom functools import reduce\nfrom math import gcd\nprint(reduce(gcd,ylist))", "import math\nN,X = map(int,input().split())\nx = list(map(int,input().split()))\ny = [abs(x[i]-X) for i in range(N)]\nif N == 1:\n    print(y[0])\n    return\nans = math.gcd(y[0],y[1])\nfor i in range(2,N):\n    ans = min(ans,math.gcd(y[i],ans))\nprint(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\nimport string\n\ndef main():\n    N,X = i_map()\n    x = i_list()\n    l = []\n    for i in x:\n        l.append(abs(X-i))\n    ans = l[0]\n    for k in l[1:]:\n        ans = gcd(ans,k)\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\nN, X = map(int, input().split())\nx= list(map(int, input().split()))\n\nabsx = [abs(X - xx) for xx in x]\nabsx.sort()\n\ndivx0 = []\n\nfor i in range(math.ceil(math.sqrt(absx[0])), 0, -1):\n    if absx[0] % i == 0:\n        divx0.append(i)\n\nt = []\nfor x in divx0:\n    t.append(x)\n    t.append(absx[0] // x)\n\ndivx0 = t\ndivx0.sort(reverse=True)\n\nfor dx0 in divx0:\n    isok = True\n    for xx in absx:\n        if xx % dx0 != 0:\n            isok = False\n            break\n\n    if isok:\n        print(dx0)\n        return", "from math import gcd\n\nN, X = list(map(int,input().split()))\n\nx = list(map(int,input().split()))\n\ndis = []\n\nfor i in range(N):\n   dis.append(abs(X-x[i]))\n\nres = 0\n\nfor i in range(N):\n   res = gcd(res, dis[i])\n\nprint(res)", "import math\nN,X=map(int,input().split())\nx=list(map(int,input().split()))\nx.append(X)\nx.sort()\ndiff=[x[i+1]-x[i] for i in range(N)]\n\nans=diff[0]\n\nfor i in range(1,N):\n    ans=math.gcd(ans,diff[i])\n\nprint(ans)", "import math\n\nn, x = map(int,input().split())\nX = list(map(int,input().split()))\n\nans = []\nfor xx in X:\n    ans.append(abs(x-xx))\n    \na = ans[0]\nfor aa in ans:\n    a = math.gcd(aa, a)\n    \nprint(a)", "import math\nN ,X = map(int,input().split())\nx = list(map(int,input().split()))\nans = abs(x[0]-X)\nfor i in range(0, N):\n    ans = math.gcd(ans, abs(x[i]-X))\n\nprint(ans)", "def gcd(a, b):\n    \"\"\"\u6700\u5927\u516c\u7d04\u6570\"\"\"\n    if b == 0: return a\n    return gcd(b, a % b)\n  \n\ndef mapt(fn, *args):\n    return list(map(fn, *args))\n \n \ndef Input():\n    return mapt(int, input().split(\" \"))\n \ndef main():\n    N, X = Input()\n    x = Input()\n \n    if N == 1:\n        print(abs(x[0] - X))\n        return\n \n    x.append(X)\n    x.sort()\n    data = [abs(x[i] - x[i+1]) for i in range(N)]\n \n    ans = data[0]\n    for i in range(1, N):\n        ans = gcd(data[i], ans)\n    print(ans)\n \n \n \nmain()", "import math, sys\nN, X = map(int,input().split())\nx = list(map(int, input().split()))\nDistance = [abs(X-x[i]) for i in range(N)]\n\nif N ==1:\n    print(abs(X-x[0]))\n    return\n\nans = 0\nfor i in range(N):\n    ans = math.gcd(ans, Distance[i])\n\nprint(ans)", "import sys\nimport math\n\ninput = sys.stdin.readline\n\ndef main():\n    N, X = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.append(X)\n    ans = abs(x[0]-X)\n    for i in range(N):\n        ans = math.gcd(ans, abs(x[i]-x[i+1]))\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nn,x=map(int, input().split())\na=[int(x) for x in input().split()]\n\nans=abs(x-a[0])\nfor i in range(1,n):\n    ans=math.gcd(abs(x-a[i]),ans)\n\nprint(ans)", "import fractions\ndef gcdlist(a):\n    ans = a[0]\n    for i in range(1, len(a)):\n        ans = fractions.gcd(ans, a[i])\n    return ans\n\nn,y=list(map(int,input().split()))\nx=list(map(int,input().split()))\nx.append(y)\nif y==1:\n    print((abs(x[0]-1)))\n    return\n\nl=[]\nfor i in range(n):\n    l.append(abs(x[i+1]-x[i]))\nprint((gcdlist(l))) \n\n\n", "import math\nn,a=map(int,input().split())\nx=list(map(int,input().split()))+[a]\nx.sort()\nif n==1:\n  print(abs(x[0]-x[1]))\n  return\nres=x[1]-x[0]\nfor i in range(1,n):\n  res=math.gcd(res,x[i+1]-x[i])\nprint(res)", "#xi-x\u304c\u5168\u90e8D\u306e\u500d\u6570\u306b\u306a\u308c\u3070\u3044\u3044\nn,x=list(map(int, input().split()))\npos = list(map(int, input().split()))\ndiff_pos = [abs(s-x) for s in pos]\nmin_diff = min(diff_pos)\n#print(min_diff)\nans = 0\ndef main():\n    for i in range(min_diff,0,-1):\n        for n in diff_pos:\n            if n % i != 0:\n                break\n            if n == diff_pos[-1]:\n                return i\n    \n    \nprint(main())", "from functools import reduce\nfrom fractions import gcd\n\nN, X = list(map(int, input().split()))\nx = list(map(int, input().split()))\nres = list(abs(i-X) for i in x)\n\n# res\u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\u3002\u3000\u30b3\u30fc\u30c9\u306f reduce(gcd, list)\nprint((reduce(gcd, res)))\n\n\n\n", "n,x = list(map(int,input().split()))\nxi = list(map(int,input().split()))\n\nxi.sort()\ndiff = []\nfor i in range(n):\n    diff.append(abs(xi[i]-x))\n\nimport numpy\nprint((numpy.gcd.reduce(diff)))\n", "#! /usr/bin/env python3\n\n# from fractions import gcd\nfrom math import gcd\nfrom collections import Counter, deque, defaultdict\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge\nfrom bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort\nfrom itertools import accumulate, product, permutations, combinations, combinations_with_replacement\n\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(gcd, numbers)\n\nN, X = [int(_) for _ in input().split()]\nx = [int(_) for _ in input().split()]\n\nif N != 1:\n    ret = []\n    x.append(X)\n    now = x[0]\n\n    for i in x[1:]:\n        ret += [i - now]\n        now = i\n\n    ret = sorted(ret)\n\n    print(gcd_list(ret))\n\nelse:\n    print(abs(x[0] - X))", "import functools\nimport math\n\nN, X = [int(i) for i in input().split()]\nx_list = [int(i) for i in input().split()]\n\nx_list.append(X)\nnum_list = sorted(x_list)\n \ntmp = [abs(x[0] - x[1]) for x in zip(num_list[:-1],num_list[1:])]\n\nD = functools.reduce(lambda acc, x: math.gcd(acc, x), tmp, 0)\n\nprint(D)\n", "import math\nfrom functools import reduce\n\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\n\ndef main():\n    n, X = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    x.append(X)\n    x.sort()\n    x_dist = [x[i+1] - x[i] for i in range(len(x)-1)]\n    print((gcd(*x_dist)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\n\ndef main():\n    n, x = map(int, input().split())\n    x_lst = list(map(int, input().split()))\n    x_lst.sort()\n\n    if n == 1:\n        minimum = abs(x_lst[0] - x)\n    elif n == 2:\n        minimum = abs(x_lst[1] - x_lst[0])\n        lst = [abs(x_lst[1] - x), abs(x_lst[0] - x)]\n        lst.sort()\n        lst.reverse()\n        for i in range(2):\n            if minimum % lst[i] == 0:\n                minimum = lst[i]\n                break\n    else:\n        lst1 = []\n        for i in range(n):\n            if i != n - 1:\n                lst1.append(abs(x_lst[i + 1] - x_lst[i]))\n\n        minimum = math.gcd(lst1[0], lst1[1])\n        for i in range(n - 1):\n            if i != n - 2:\n                minimum = min(minimum, math.gcd(lst1[i], lst1[i + 1]))\n\n        lst2 = []\n        for i in range(n):\n            lst2.append(abs(x_lst[i] - x))\n\n        lst2.sort()\n        lst2.reverse()\n        for i in range(n):\n            if minimum % lst2[i] == 0:\n                minimum = lst2[i]\n                break\n\n    print(minimum)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n\treturn reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n\treturn reduce(math.gcd, numbers)\n\nn,X = map(int,input().split())\nx = list(map(int,input().split()))\nfor i in range(n):\n\tx[i] = x[i] -  X\n\nif n == 1:\n\tprint(abs(x[0]))\nelse:\n\tprint(gcd_list(x))", "from math import gcd\nn,x = map(int, input().split())\nX = list(map(int, input().split()))\nX.append(x)\nX.sort()\ng = X[1]-X[0]\nfor i in range(n):\n    g = gcd(g, X[i+1]-X[i])\nprint(g)", "N,X = map(int,input().split())\nx = list(map(int,input().split()))\nx.append(X)\nx.sort\nd = 0\nfrom math import gcd\nfor i in range(N):\n    d = gcd(d,abs(x[i]-x[i+1]))\nprint(d)", "import math\n\nN, X = map(int, input().split())\ncities = list(map(lambda x: int(x) - X, input().split()))\n\nres = abs(cities[0])\n\nfor i in range(1, N):\n    res = math.gcd(res, cities[i])\n\nprint(res)", "'''\nCreated on 2020/08/28\n\n@author: harurun\n'''\ndef main():\n  import math\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n  \n  N,X=map(int,pin().split())\n  x=list(map(int,pin().split()))\n  m=abs(x[0]-X)\n  for i in range(1,N):\n    m=math.gcd(abs(x[i]-X),m)\n  print(m)\n  return\nmain()", "import math\nN,X = map(int,input().split())\nx = list(map(int,input().split()))\nls = []\nfor i in range(N):\n    ls.append(abs(x[i]-X))\nnow = ls[0]\nfor i in range(1,N):\n    now = math.gcd(ls[i],now)\nprint(now)", "import math\n\ndef gcd_list(nums):\n  gcd = nums[0]\n  for i in range(1,len(nums)):\n    gcd = math.gcd(gcd,nums[i])\n  return gcd\n\nN,X = map(int,input().split())\nx = list(map(int,input().split()))\n\nx = [abs(i-X) for i in x]\n\nprint(gcd_list(x))", "from math import *\n\nN,X=list(map(int,input().split()))\nx=list(map(int,input().split()))\nans=0\nfor i in x:\n  ans=gcd(ans,abs(i-X))\nprint(ans)\n", "from functools import reduce\nimport math\n\nn,x=map(int,input().split())\na=sorted(map(int,input().split()))\na=[i-x for i in a]\n\nif len(a)==1:print(abs(a[0]));return\nif len(a)==2:print(math.gcd(a[0],a[1]));return\n\nl=[]\nfor y in range(n-1):\n    l.append(a[y+1]-a[y])\n    \nprint(reduce(lambda x,y:math.gcd(x,y),l))", "n,x = map(int, input().split())\nal = list(map(int, input().split()))\n   \nimport math\n\ntemp = abs(x- al[0])\n\nfor i in range(1,n):\n    y = al[i]-al[i-1]\n    temp = math.gcd(temp,y)\n \nprint(temp)", "import math\n\nN, X = map(int, input().split())\nxs = list(map(int, input().split()))\n\ndist = []\nfor i in range(N):\n  dist.append(abs(xs[i] - X))\n\nans = dist[0]\n\nfor d in dist[1:]:\n  ans = math.gcd(ans, d)\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep 15 01:58:46 2020\n\n@author: liang\n\"\"\"\n\nfrom math import gcd\n\nN, X = map(int, input().split())\nA = [abs(int(x)-X) for x in input().split()]\n\nans = A[0]\nfor i in range(N):\n    ans = gcd(ans,A[i])\nprint(ans)", "n, x = map(int, input().split())\na = list(map(int, input().split()))\na.append(x)\na = sorted(a)\ndiff_list = [0] * n\nfor i in range(1, n + 1):\n    diff_list[i - 1] = a[i] - a[i - 1]\ng = diff_list[0]\nimport math\nfor i in range(1, n):\n    g = math.gcd(g, diff_list[i])\nprint(g)", "from math import gcd\ndef readinput():\n    n,x=list(map(int,input().split()))\n    xx=list(map(int,input().split()))\n    return n,x,xx\n\ndef main(n,x,xx):\n    y=[0]*len(xx)\n    for i in range(len(xx)):\n        y[i] = abs(xx[i] - x)\n    if len(y)==1:\n        ans=y[0]\n    else:\n        ans=gcd(y[0],y[1])\n        for i in range(2,n):\n            ans=gcd(ans,y[i])\n    return ans\n\ndef __starting_point():\n    n,x,xx=readinput()\n    ans=main(n,x,xx)\n    print(ans)\n\n__starting_point()", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\nn, x = map(int, input().split())\nxxx = list(map(lambda xn: abs(int(xn) - x), input().split()))\nans = xxx[0]\nfor i in range(1, n):\n    ans = gcd(ans, xxx[i])\nprint(ans)", "N,X=list(map(int,input().split()))\nimport math\na=list(map(int,input().split()))\na.append(X)\na.sort()\nS=[]\nfor i in range(N):\n    S.append(a[i+1]-a[i])\n\n    \nans=S[0]\nfor j in range(1,N):\n    ans=math.gcd(ans,S[j])\n    \nprint(ans)\n", "import math\nfrom functools import reduce\n\nn, x = map(int, input().split())\nX = sorted(list(map(int, input().split())) + [x])\n\nprint(reduce(math.gcd,[X[i+1]-X[i] for i in range(n)]))", "from math import gcd\n\nN, X = list(map(int, input().split()))\nxs = list(map(int, input().split()))\n\naX = list([abs(x-X) for x in xs])\n\nans = aX[0]\nfor i in range(1, N):\n    ans = gcd(ans, aX[i])\nprint(ans)\n", "from functools import reduce\nfrom math import gcd\nn, x = map(int, input().split())\nl = [abs(x - int(i)) for i in input().split()]\nprint(reduce(gcd, l))", "import math\nn,x = map(int, input().split()) \nnum_list = list(map(int, input().split())) \nres = 0\nfor i in num_list:\n    res = math.gcd(res, abs(i-x))\n\nprint(res)", "import functools\ndef euclid(a, b):\n    if b == 0:\n        return a\n    else:\n        return euclid(b, a%b)\n\ndef gcd(nums):\n    if len(nums)==1:\n        return nums[0]\n    return functools.reduce(euclid, nums)\n\n\n\nn,k=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\na.append(k)\na.sort()\n\nsa=[]\n\nfor i in range(1,n+1):\n    sa.append(a[i]-a[i-1])\n\n\n\nprint((gcd(sa)))\n\n", "n, x = map(int,input().split())\nli = list(input().split())\nli = [abs(int(a)-x) for a in li]\n\ndef gcd(a,b):\n    while a%b!=0:\n        a,b = b,a%b\n    return b\n    \nfrom functools import reduce\n\na = reduce(gcd,li)\nprint(a)", "from math import gcd\nN,X=map(int,input().split())\nx=list(map(int,input().split()))\n\nif N==1:\n  print(abs(X-x[0]))\n\nelse:\n  l=[]\n  for i in range(N):\n    l_=abs(X-x[i])\n    l.append(l_)\n  #print(l)\n  ans=l[0]\n  for i in range(1,len(l)):\n    ans=gcd(ans,l[i])\n\n  print(ans)", "import math\nn,m=map(int,input().split())\nx=[int(x) for x in input().split()]\n\nmi=min(x)\n\nl=[abs(x[i]-x[i+1]) for i in range(n-1)]\nans=abs(mi-m)\nfor i in l:\n  ans=math.gcd(ans,i)\nprint(ans)", "import functools\nimport math\n\nN, X = [int(i) for i in input().split()]\nx_list = [abs(int(i) - X) for i in input().split()]\n\nD = functools.reduce(lambda acc, x: math.gcd(acc, x), x_list, 0)\n\nprint(D)", "N,X=map(int,input().split())\n*C,=map(int,input().split())\n\nt=[abs(c-X) for c in C]\n\nimport math\nfrom functools import reduce\nprint(reduce(math.gcd, t))", "#36 C - Skip\nimport bisect\nimport math\nN,X = map(int,input().split())\nx = list(map(int,input().split()))\nx = sorted(x,reverse = False)\n\nbisect.insort_left(x,X)\n# \u9593\u9694\u306e\u6700\u5c0f\u306e\u7d20\u6570\nd_lis = []\nfor i in range(len(x)-1):\n    d = x[i+1] - x[i]\n    d_lis.append(d)\nd_lis = sorted(d_lis,reverse = False)\n\nans = d_lis[0]\nfor j in range(1,len(d_lis)):\n    ans = math.gcd(ans,d_lis[j])\nprint(ans)", "import math\nfrom functools import reduce\n \ndef gcd(*numbers):\n\treturn reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n\treturn reduce(math.gcd, numbers)\n\nn,X = map(int,input().split())\nx = list(map(int,input().split()))\nfor i in range(n):\n\tx[i] = x[i] -  X\nprint(abs(gcd_list(x)))", "n,x=map(int,input().split())\nL=list(map(int,input().split()))\nL.append(x)\nL.sort()\nD=[]\nfor i in range(n):\n\td=L[i+1]-L[i]\n\tD.append(d)\n\nimport math\nans = D[0]\nfor i in range(1, n):\n    ans = math.gcd(ans, D[i])\n\nprint(ans)", "import sys\nimport math\nfrom functools import reduce\n\nn,k=map(int,input().split())\nx=list(map(int,input().split()))\n\nl=[]\n\nfor i in x:\n        b=abs(i-k)\n        l.append(b)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nans=(gcd_list(l))\n\nprint(ans)", "#\u518d\u5e30\ndef gcd(a, b):\n\tif b==0:\n\t\treturn a\n\treturn gcd(b, a%b)\n#\u30eb\u30fc\u30d7\ndef gcd(a,b):\n  while b:\n    a,b = b,a%b\n  return abs(a)\n\ndef solve(x_list):\n\tans=0\n\tfor x in x_list:\n\t\tans=gcd(ans, x)\n\treturn ans\n\nN, X = map(int, input().split())\nx_list=list(abs(int(x)-X) for x in input().split())\n\nprint(solve(x_list))", "N,X = map(int,input().split())\nx = list(map(int,input().split()))\nx = sorted([abs(i-X) for i in x])\n\ny = x[0]\nfor  i in range(1,N):\n    z = x[i]\n    y,z = max(y,z),min(y,z)\n    while z!=0:\n        y,z = z,y%z\nprint(y) ", "from functools import reduce\nfrom fractions import gcd\n\nN, X = list(map(int, input().split()))\nA = list(map(int,input().split()))\n\ncnt  = []\nfor i in range(N):\n    cnt.append(abs(X - A[i]))\n\nprint((reduce(gcd, cnt)))\n\n\n", "def l():\n    return list(map(int, input().split()))\n\nN, X = l()\nx = l()\nfor i in range(N):\n    x[i] = abs(x[i] - X)\n\n# print(x)\n\nmini = min(x)\nlst = []\nfor i in range(1, int(mini**0.5)+1):\n    if mini % i == 0:\n        lst.append(i)\n        lst.append(mini // i)\n\nlst.sort()\nlst = lst[::-1]\n# print(lst)\nfor i in lst:\n    flag = True\n    for j in x:\n        if j % i != 0:\n            flag = False\n    if flag:\n        break\nprint(i)", "import math\nfrom functools import reduce\n\ndef gcd(list):\n  return reduce(math.gcd, list)\n\nn, x = map(int, input().split())\na = map(lambda b: abs(int(b) - x), input().split())\nprint(gcd(a))", "import math\nN,X = map(int,input().split())\nxl = [abs(x-X)for x in map(int,input().split())]\nans = xl[0]\n\nfor x in xl[1:]:\n    ans = math.gcd(ans,x)\nprint(ans)", "n,x=map(int,input().split())\nX=list(map(int,input().split()))\nfor i in range(n):\n  X[i]=abs(X[i]-x)\nfrom math import gcd\nans=X[0]\nfor i in range(1,n):\n  ans=gcd(ans,X[i])\n\nprint(ans)", "import fractions\n\nn,x=list(map(int,input().split()))\nl=list(map(int,input().split()))\n\nl.append(x)\nsl=sorted(l)\n\nlis=[sl[i+1]-sl[i] for i in range(n)]\n\nans=0\nfor i in range(0, n):\n    ans = fractions.gcd(ans, lis[i])\n    \nprint(ans)\n\n", "import sys\nimport math\n\ninput = sys.stdin.readline\nN, X = map(int, input().split())\nA = list(map(int, input().split()))\n\ngcd = abs(X - A[0])\nfor a_i in A:\n    gcd = math.gcd(gcd, abs(X-a_i))\n\nprint(gcd)", "import numpy as np\nn,X = map(int,input().split())\nx = list(map(int,input().split()))\nx.append(X)\nx = sorted(x)\ndis = []\nfor i in range(n):\n  dis.append(x[i+1]-x[i])\nprint(np.gcd.reduce(dis))", "N, X = map(int, input().split())\nx = list(map(int, input().split()))\nimport math\nfor i in range(N):\n\tx[i] -= X\nans = x[0]\nfor i in range(1, N):\n\tans = math.gcd(ans, x[i])\nprint(abs(ans))", "import math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n  return reduce(math.gcd, numbers)\n\nN,X = map(int,input().split())\nx_list = [X] + list(map(int,input().split()))\nx_list.sort()\n\ndist = [0] * (N + 1)\nfor i in range(N):\n  dist[i] += x_list[i+1] - x_list[i]\n  \nans = gcd_list(dist)\nprint(ans)", "import math\nimport functools\n\nN, X = list(map(int, input().split()))\nA = [abs(X-int(i)) for i in input().split()]\n\nprint((functools.reduce(math.gcd, A)))\n", "def resolve():\n    from math import gcd\n    _, X = [int(i) for i in input().split()]\n    xx = [int(i) for i in input().split()]\n    ans = abs(X - xx[0])\n    for x in xx:\n        ans = gcd(ans, abs(X - x))\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import math\n\nn, x = map(int, input().split())\nxi = list(map(int, input().split()))\n\nxi = list(map(lambda z: abs(z - x), xi))\ng = xi[0]\nfor i in range(1, n):\n    g = math.gcd(g, xi[i])\nprint(g)", "import sys,math\nn,x=map(int,sys.stdin.readline().split())\nxl=[*map(int,sys.stdin.readline().split())]\nyl=[abs(x-i) for i in xl]\n\n\nd=yl[0]\nfor i in range(n):\n    d=math.gcd(d,yl[i])\n\nprint(d)", "import sys\nimport math\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    n, start = inl()\n    X = inl()\n    g = None\n    for x in X:\n        d = abs(x - start)\n        if g is None:\n            g = d\n        else:\n            g = math.gcd(g, d)\n    return g\n\n\nprint(solve())\n", "import math\nn,x = map(int,input().split())\nxl = list(map(int,input().split()))\ndis = []\nans = 0\nfor i in range(n):\n  dis.append(abs(x-xl[i]))\nfor i in range(n):\n  ans = math.gcd(ans,dis[i])\nprint(ans)", "from math import gcd\nn, x = list(map(int, input().split()))\nls = sorted(list(map(int, input().split())))\nif x == 1:\n    print((abs(x-ls[0])))\n    return\ndistant = []\nfor i in range(n):\n    diff = abs(ls[i]-x)\n    distant.append(diff)\ndistant.sort()\na = distant[0]\nfor i in distant:\n    g = gcd(a, i)\n    a = g\nprint(g) \n", "import sys\n# import math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n    n, x = read_ints()\n    d = read_int_list()\n    ans = abs(x - d[0])\n    \n    for i in range(1, n):\n        ans = GCD(ans, abs(x - d[i]))\n    print(ans)    \n\ndef __starting_point():\n    Main()\n__starting_point()", "N,X = map(int,input().split())\nList = list(map(int,input().split()))\nabs_List = [abs(List[i] - X) for i in range(N)]\n\nimport math\nfrom functools import reduce\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nprint(gcd(*abs_List))", "from math import gcd\nn, x0 = list(map(int, input().split()))\nx = [abs(_x-x0) for _x in list(map(int, input().split()))]\nx.sort()\n\nans = x[0]\nfor i in range(n):\n    ans = gcd(ans, x[i])\nprint(ans)\n", "from math import gcd\nN,X = map(int,input().split())\nx = list(map(int,input().split()))\n\nxx = list()\nfor i in range(N):\n    xx.append(abs(X-x[i]))\nnum = xx[0]\nfor i in range(1,N):\n    num = gcd(num,xx[i])\nprint(num)", "import math\n\nn, x = map(int, input().split())\nxl = list(map(int, input().split()))\n\nres = 0\nfor i in xl:\n    res = math.gcd(res, abs(i-x))\n\nprint(res)", "from math import gcd\n\nn, X = map(int, input().split())\nxlst = list(map(int, input().split()))\nans = X - xlst[0]\nfor x in xlst:\n    ans = gcd(ans, X - x)\nprint(ans)", "import math\nN,X= map(int,input().split())\nx=list(map(int, input().split()))\nx.append(X)\nx.sort()\nd=[]\nif N==1:\n  print(x[1]-x[0])\n  return\nfor i in range(N):\n  d.append(x[i+1]-x[i])\ngc=math.gcd(d[0],d[1])\nfor i in range(N):\n  gc=math.gcd(d[i],gc)\nprint(gc)", "import math\n\nN,X = list(map(int,input().split()))\nx = list(map(int,input().split()))\n\narr = [0]*N\nfor i in range(N):\n    arr[i] = abs(x[i]-X)\nans = arr[0]\nfor i in range(1,N):\n    ans = math.gcd(ans, arr[i])\n    \nprint(ans)", "from math import gcd\nn, x = map(int, input().split())\nm = [x]+list(map(int, input().split()))\n\n\nm.sort()\n\nif n==1:\n  print(m[1]-m[0])\nelse:\n  res = gcd(m[1]-m[0], m[2]-m[1])\n  for i in range(1, n-1):\n    a = m[i+1]-m[i]\n    b = m[i+2]-m[i+1]\n    if res >= gcd(a,b):\n      if res%gcd(a,b)==0:\n        res = gcd(a,b)\n      else:\n        res = gcd(res, gcd(a, b))\n    else:\n      if gcd(a,b)%res!=0:\n        res = gcd(res, gcd(a, b))\n  print(res)", "n,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor i in range(n):\n  a[i] = abs(a[i] - x)\n\ndef gcd(x,y):\n  while y != 0:\n    x, y = y, x % y\n  return x\n\nres = a[0]\nfor i in range(n):\n  res = gcd(res,a[i])\nprint(res)", "import math\nfrom functools import reduce\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\nn, x = map(int, input().split())\na = list(map(int, input().split()))\na.append(x)\na.sort()\nd = set()\nfor i in range(n):\n  d.add(a[i + 1] - a[i])\nd = list(d)\nans = gcd_list(d)\nprint(ans)", "N, X = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.append(X)\nfrom math import gcd\ng = x[1] - x[0]\nfor i in range(N):\n    g = gcd(g, (x[i+1] - x[i]))\n\nprint(abs(g))", "import math\n\nN,X=list(map(int,input().split()))\nx=list(map(int,input().split()))\nD=abs(x[0]-X)\nfor i in range(1,N):\n    D=math.gcd(D,abs(x[i]-X))\nprint(D)\n", "import math\nfrom functools import reduce\n\nN, X = list(map(int, input().split()))\nx = list(map(int, input().split()))\nx.append(X)\nx.sort()\nans = x[1] - x[0]\nfor i in range(1, N):\n    ans = math.gcd(ans, x[i+1] - x[i])\n\nprint(ans)\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N, X = MI()\n    L = LI()\n    L = [abs(i-X) for i in L]\n    ans = L[0]\n    for i in L:\n        ans = math.gcd(ans, i)\n    print(ans)\n    \n    \ndef __starting_point():\n    main()\n__starting_point()", "from math import gcd\n\nn, x = map(int, input().split())\na = [int(i) - x for i in list(map(int, input().split()))]\n\nnow = a[0]\nfor i in a:\n    now = gcd(now, i)\n\nprint(now)", "import  math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nN,X=list(map(int,input().split()))\nx=sorted(list((list(map(int,input().split())))))\ny=[abs(i-X) for i in x ]\nprint((gcd_list(y)))\n", "import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n  return reduce(math.gcd, numbers)\n\nn, x = map(int, input().split())\nxx = list(map(int, input().split()))\n\na = [abs(x - i) for i in xx]\n\nprint(gcd(*a))", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n    \na = [int(s) for s in input().split()]\nN = a[0]\nst = a[1]\nmini = int(-1)\nb = [int(s) for s in input().split()]\n\nfor i in range(N):\n    if abs(b[i] - st) < mini or mini == -1:\n        mini = abs(b[i] - st)\n\nyakulist = make_divisors(mini)\ngyakulist = sorted(yakulist, reverse=True)\nkazu = len(gyakulist)\nflag = int(0)\n\nfor i in range(kazu):\n    for j in range(N):\n        if abs(b[j] - st) % gyakulist[i] != 0:\n            flag = 1\n        else:\n            pass\n    if flag == 0:\n        print(gyakulist[i])\n        break\n    else:\n        flag = 0", "#https://note.nkmk.me/python-gcd-lcm/\nimport math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn,x = map(int,input().split())\na = list(map(int,input().split()))\ntmp = []\nfor i in range(n):\n    tmp.append(abs(a[i]-x))\n    \nprint(gcd_list(tmp))"]