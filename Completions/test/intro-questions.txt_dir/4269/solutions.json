["s = input('')\n\n# S\u304c\u5165\u529b\u3057\u3065\u3089\u3051\u308c\u3070Bad,\u305d\u3046\u3067\u306a\u3051\u308c\u3070Good\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "s = input()\n\nans = 'Good'\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        ans = 'Bad'\n        break\nprint(ans)\n", "num=input()\nc=False\nfor i in range(1,len(num)):\n  if num[i]==num[i-1]:\n    c=True\n    \nif c==True:\n  print(\"Bad\")\nelse:\n  print(\"Good\")", "S = input()\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print('Bad')\n\nelse:\n    print('Good')", "s = input()\n\nfor i in range(1,4):\n  if s[i] == s[i-1]:\n    print(\"Bad\")\n    return\nprint(\"Good\")", "# [0] == [1] or [1] == [2] or [2] == [3]\u3060\u3068Bad\n\nS = list(input())\n# print(S[0])\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print('Bad')\nelse:\n    print('Good')\n", "s = input()\nprint(\"Good\" if all(s[i-1] != s[i] for i in range(1, len(s))) else \"Bad\")", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    S = SS()\n\n    ans = 'Good'\n    for i in range(len(S) - 1):\n        if S[i] == S[i+1]:\n            ans = 'Bad'\n            break\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "s=input()\nans=\"Good\"\nfor i in range(3):\n    if s[i]==s[i+1]:\n        ans=\"Bad\"\nprint(ans)", "s = input()\nif (s[0] == s[1] or s[1] == s[2] or s[2] == s[3]):\n  print(\"Bad\")\nelse:\n  print(\"Good\")", "s = input()\n\nif s[0] == s[1]:\n    print('Bad')\nelif s[1] == s[2]:\n    print('Bad')\nelif s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "S = input()\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print('Bad')\nelse:\n    print('Good')", "s = input()\nflag = False\nfor i in range(3):\n  if s[i] == s[i+1]:\n    flag = True\nif flag:\n  print('Bad')\nelse:\n  print('Good')", "a = input()\nif a.count(\"00\") > 0:\n    print(\"Bad\")\nelif a.count(\"11\") > 0:\n    print(\"Bad\")\nelif a.count(\"22\") > 0:\n    print(\"Bad\")\nelif a.count(\"33\") > 0:\n    print(\"Bad\")\nelif a.count(\"44\") > 0:\n    print(\"Bad\")\nelif a.count(\"55\") > 0:\n    print(\"Bad\")\nelif a.count(\"66\") > 0:\n    print(\"Bad\")\nelif a.count(\"77\") > 0:\n    print(\"Bad\")\nelif a.count(\"88\") > 0:\n    print(\"Bad\")\nelif a.count(\"99\") > 0:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "s = input()\nif s [0]==s [1] or s [1]==s [2] or s [2]==s [3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n", "s = list(input())\n\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "S=input()\nnumber=[str(i)*2 for i in range(0,10)]\n\nfor j in number:\n  if j in S:\n    print('Bad')\n    return\nelse:\n  print('Good')\n", "s = list(input())\nflag = 0\nfor i in range(len(s) - 1):\n    if s[i] == s[i+1]:\n        flag = 1\n\nprint('Bad' if flag == 1 else 'Good')", "S = input()\nfor i in range(3):\n  if S[i] == S[i+1]:\n    print('Bad')\n    return\nprint('Good')", "S = input()\n\nD =[]\nfor i in range(3):\n    if S[i] == S[i+1]:\n        D.append(1)\n        break\n\n\nif 1 in D:\n    print(\"Bad\")\n\nelse:\n    print(\"Good\")\n", "def main():\n    s = input()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "s = input()\nprint('Bad' if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] else 'Good')", "s=input()\n\nif s[0]==s[1] or s[1]==s[2] or s[2]==s[3]:\n  print(\"Bad\")\nelse:\n  print(\"Good\")", "s=input()\nprint('Bad' if s[0]==s[1] or s[1]==s[2] or s[2]==s[3] else 'Good')", "S = input()\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "S = input()\n\nif S[0] == S[1]:\n    print('Bad')\n    return\nelif S[1] == S[2]:\n    print('Bad')\n    return\nelif S[2] == S[3]:\n    print('Bad')\n    return\nprint('Good')", "S=input()\nfor i in range(3):\n\tif S[i]==S[i+1]:\n\t\tprint(\"Bad\")\n\t\treturn\n\nprint(\"Good\")", "S=input()\nif S[0]==S[1] or S[1]==S[2] or S[2]==S[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "s = list(input())\n\njudge = 'Good'\n\nfor i in range(len(s)-1):\n    if s[i]==s[i+1]:\n        judge = 'Bad'\n        break\nprint(judge)", "N=list(input())\nif N[0]==N[1] or N[1]==N[2] or N[2]==N[3]:\n    print('Bad')\nelse:\n    print('Good')", "S = input()\n\nans = \"Good\"\nfor i in range(len(S) - 1):\n    if S[i] == S[i + 1]:\n        ans = \"Bad\"\n\nprint(ans)\n", "n = list(input())\n\nif n[0] == n[1]:\n  print(\"Bad\")\n  return\nelif n[1] == n[2]:\n  print(\"Bad\")\n  return\nelif n[2] == n[3]:\n  print(\"Bad\")\n  return\nprint('Good')", "'''\n\u554f\u984c\uff1a\n    \u3059\u306c\u3051\u541b\u306e\u7ba1\u7406\u3059\u308b\u7814\u7a76\u5ba4\u306e\u6249\u306b\u306f\u30ed\u30c3\u30af\u304c\u304b\u304b\u3063\u3066\u304a\u308a\u3001\u89e3\u9320\u306b\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n    \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30fc\u30c9\u306f 4 \u6841\u306e\u6570\u5b57\u5217\u3067\u3059\u3002\n    \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30fc\u30c9\u304c\u300c\u5165\u529b\u3057\u3065\u3089\u3044\u300d\u3068\u306f\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3059\u308b\u7b87\u6240\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u8a00\u3044\u307e\u3059\u3002\n\n    \u73fe\u5728\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30fc\u30c9 S \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n    S \u304c\u300c\u5165\u529b\u3057\u3065\u3089\u3044\u300d\u306a\u3089 Bad \u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 Good \u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n'''\n\n'''\n\u5236\u7d04\uff1a\n    S \u306f\u534a\u89d2\u6570\u5b57\u306e\u307f\u304b\u3089\u306a\u308b\u9577\u3055 4 \u306e\u6587\u5b57\u5217\n'''\n\ndef abc131a(s: str) -> str:\n    if s[0] == s[1]:\n        return 'Bad'\n    elif s[1] == s[2]:\n        return 'Bad'\n    elif s[2] == s[3]:\n        return 'Bad'\n    else:\n        return 'Good'\n\ns = str(input())\nprint((abc131a(s)))\n", "\nS = str(input())\n\nif S[0]==S[1] or S[1]==S[2] or S[2]== S[3]:\n    print('Bad')\n    \nelse:\n    print('Good')", "s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "S = input()\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print('Bad')\nelse:\n    print('Good')\n", "lis = [\"00\",\"11\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\",\"88\",\"99\"]\ns = input()\nans = True\nfor i in lis:\n  if i in s:\n    ans = False\nif ans:\n  print(\"Good\")\nelse:\n  print(\"Bad\")", "S = input()\n\nres = ''\nfor s in S:\n    if res == s:\n        print('Bad')\n        return\n    res = s\nprint('Good')\n", "#ABC131 A\n\nS = str(input())\nif S[0]!=S[1] and S[1]!=S[2] and S[2]!=S[3]:\n    print(\"Good\")\nelse:\n    print(\"Bad\")", "S=input()\nfor i in range(0,3):\n    if S[i]==S[i+1]:\n        print(\"Bad\")\n        break\nelse:\n    print(\"Good\")\n", "#!/usr/bin/env python3\n\ndef main():\n    a, b, c, d = input()\n    print((\"Bad\" if a == b or b == c or c == d else \"Good\"))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = input()\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print('Bad')\nelse:\n    print('Good')", "s=input()\n\nflag=True\nfor i in range(len(s)-1):\n    if s[i+1]==s[i]:\n        flag=False\nprint((\"Good\" if flag else \"Bad\")) \n", "def atc_131a(input_value: str) -> str:\n    for i in range(0, len(input_value) - 1):\n        if input_value[i] == input_value[i + 1]:\n            return \"Bad\"\n    return \"Good\"\n\ninput_value = input()\nprint(atc_131a(input_value))", "S = input()\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "S=list(input())\n\nif S[0]==S[1] or S[1]==S[2] or S[2]==S[3] :\n    print('Bad')\nelse:\n    print('Good')", "s = input()\nprint((\"Good\" if s[0]!=s[1] and s[1]!=s[2] and s[2]!=s[3]  else \"Bad\"))\n", "s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')\n", "S = list(map(int,input()))\n\nif S[0] == S[1] or S[1] == S[2]or S[2] == S[3]:\n    print('Bad')\nelse:\n    print('Good')", "moji = str(input())\nflg = 0\nfor i in range(0,3):\n    if moji[i] == moji[i+1]:\n        flg = 1\n\nprint((\"Good\",\"Bad\")[flg == 1])", "S = input()\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n  print(\"Bad\")\nelse:\n  print(\"Good\")", "S = input()\nans = 'Good'\nfor i in range(len(S)-1):\n  if S[i]==S[i+1]:\n    ans = 'Bad'\n    break\nprint(ans)", "S = input()\nres = False\n\nfor i in range(len(S) - 1):\n    if S[i] == S[i + 1]:\n        res = True\n\nprint(['Good', 'Bad'][res])", "n = input()\nfor i in range(len(n)-1):\n  if n[i] == n[i+1]:\n    print('Bad')\n    return\nprint('Good')", "s = input()\nprev = s[0]\nfor i in range(1, 4):\n    if s[i] == prev:\n        print('Bad')\n        return\n    prev = s[i]\nprint('Good')\n", "s = input()\nprint(\"Bad\" if any([s[i]==s[i+1] for i in range(3)]) else \"Good\")", "S = input()\n\ncode_list = []\nfor code in S:\n    code_list.append(code)\n\nanswer = code_list[0] != code_list[1] != code_list[2] != code_list[3]\n\nif answer:\n    print( \"Good\" )\nelse:\n    print( \"Bad\" )", "s = input('')\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "S = input()\n\nif(S[0] == S[1] or S[1] == S[2] or S[2] == S[3]):\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "s = input()\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        print('Bad')\n        return\n\nprint('Good')", "#\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b3\u30fc\u30c9\u306f4\u6841\u306e\u6570\u5b57\u5217\n#\u5165\u529b\u3057\u3065\u3089\u3044\uff1d\u9023\u7d9a\u3057\u305f\u7b87\u6240\u304c\u3042\u308b\u5834\u5408\u3000\u201dBad\uff02\n\nS = input()\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "s = input()\nfor i in range(3):\n    if s[i] == s[i+1]:\n        print('Bad')\n        return\nprint('Good')", "s = input()\nif s[0]==s[1] or s[1]==s[2] or s[2]==s[3]:\n  print(\"Bad\") \nelse:\n  print(\"Good\")\n\n", "S = str(input())\n\nfor i in range(3):\n    if S[i+1] == S[i]:\n        print('Bad')\n        return\n        \nprint('Good')", "S = str(input())\n\nif S[0]==S[1] or S[1]==S[2] or S[2]==S[3]:\n  print(\"Bad\")\nelse:\n  print(\"Good\")", "S=input()\nfor i in range(len(S)-1):\n    if S[i]==S[i+1]:\n        print(\"Bad\")\n        return\nprint(\"Good\")", "#\"Bad\"\u304c\u4e8c\u56de\u51fa\u305f\u308a\u3002\"Bad\"\"Good\"\u306b\u306a\u3063\u305f\u308a\u3059\u308b\u3002\u306a\u305c\u3060\uff1f\uff1f\u3000\u3000\nS = input()\nPass = list(S)\n\nif Pass[0]==Pass[1]:\n    print(\"Bad\")\nelif Pass[1]==Pass[2]:\n    print(\"Bad\")\nelif Pass[2]==Pass[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n\n", "s = list(input())\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "s=input()\nif s[0]!=s[1] and s[1]!=s[2] and s[2]!=s[3]:\n  print(\"Good\")\nelse:\n  print(\"Bad\")\n", "S = list(input())\n\nans = 'Good'\nfor i in range(len(S) - 1):\n    if S[i] == S[i+1]:\n        ans = 'Bad'\n\nprint(ans)", "S = input()\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]: print('Bad')\nelse: print('Good')", "s = list(input())\n\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n", "n = input()\nprint(('Bad' if n[0]==n[1] or n[1]==n[2] or n[2]==n[3] else 'Good'))\n", "s = input()\nfor i, j in zip(s[0:],s[1:]):\n    if i == j:\n        print('Bad')\n        break\nelse:\n    print('Good')", "S = input()\nprint(\"Good\" if S[0] != S[1] != S[2] != S[3] else \"Bad\")", "# A - Security\n# https://atcoder.jp/contests/abc131/tasks/abc131_a\n\ns = input()\n\nresult = 'Good'\ni = 0\nj = 1\nwhile j < len(s):\n    if s[i] == s[j]:\n        result = 'Bad'\n        break\n\n    i += 1\n    j += 1\n\nprint(result)\n", "a,b,c,d=input()\nprint((\"Bad\" if a==b or b==c or c==d else \"Good\"))\n", "s = input()\n\nfor i in range(len(s) - 1):\n    if s[i] == s[i + 1]:\n        print(\"Bad\")\n        return\n\nprint(\"Good\")\n", "s = str(input())\nisBad = False\nfor i in range(3):\n    if s[i]==s[i+1]:\n        isBad = True\nif isBad:\n    print('Bad')\nelse:\n    print('Good')", "a,b,c,d= list(input())\n\nif a==b:\n    print('Bad')\nelif b==c:\n    print('Bad')\nelif c==d:\n    print('Bad')\nelse:\n    print('Good')", "s = input()\nfor i in range(3):\n    if s[i] == s[i+1]:\n        print('Bad')\n        return\nprint('Good')", "s = input()\n\nfor i in range(3):\n    if s[i] == s[i + 1]:\n        print(\"Bad\")\n        return\n\nprint(\"Good\")\n", "S = input()\nfor i in range(3):\n    if S[i] == S[i + 1]:\n        print('Bad')\n        return\nprint('Good')", "s = str(input())\n\n# print(s[0])\n\nif s[0] == s[1]:\n    print('Bad')\nelif s[1] == s[2]:\n    print('Bad')\nelif s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "S = input()\nfor i in range(len(S)-1):\n    if S[i] == S[i+1]:\n        print('Bad')\n        break\nelse:\n    print('Good')", "s = input()\ntmp1 = s[0]\nfor i in range(1, len(s)):\n    tmp2 = s[i]\n    if tmp1 == tmp2:\n        print('Bad')\n        return\n    else:\n        tmp1 = tmp2\nprint('Good')\n", "s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n\tprint(\"Bad\")\nelse:\n\tprint(\"Good\")", "s=input()\nif s[0]!=s[1] and s[1]!=s[2] and s[2]!=s[3]:\n    print(\"Good\")\nelse:\n    print(\"Bad\")", "s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')", "s  = input()\nans = 'Good'\nfor i in range(3):\n    if s[i] == s[i+1]:\n        ans = 'Bad'\nprint(ans)", "s = input()\nprint(\"Bad\" if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] else \"Good\")", "s = input()\ns = s + \"*\"\nans = \"Good\"\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        ans = \"Bad\"\n        break\nprint(ans)", "s = input()\n\nprint('Bad' if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] else 'Good')", "s = input()\n\nif  s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\ns = v()\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        print(\"Bad\")\n        return\n\nprint(\"Good\")", "S = str(input())\n\nif S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")", "S = input()\nans = \"Good\"\nfor i in range(3):\n  if S[i] == S[i+1]:\n    ans = \"Bad\"\n    break\nprint(ans)", "s = str(input())\n\na = s[0]\nb = s[1]\nc = s[2]\nd = s[3]\n\nif a == b or b == c or c == d:\n    print(\"Bad\")\n\nelse:\n    print(\"Good\")", "s = input()\nflg = False\nfor i in range(len(s)-1):\n  if(s[i]==s[i+1]):\n    flg=True\n    break\nprint(('Bad' if flg else 'Good'))\n", "s=input()\na=0\nfor i in range(len(s)-1):\n  if s[i]==s[i+1]:\n    print('Bad')\n    a=1\n    break\nif a==0:\n    print('Good')"]