["class Solution:\n     def twoSum(self, nums, target):\n         tmp = {}\n         for i in range(len(nums)):\n             if target - nums[i] in tmp:\n                 return(tmp[target - nums[i]], i)\n             else:\n                 tmp[nums[i]] = i;\n         \n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         d = {}\n         for i, num in enumerate(nums):\n             if (target - num) in d:\n                 return [d[target-num], i]\n             d[num] = i\n         \n         new = sorted(nums)\n         i,j = 0, -1\n         for num in new:\n             a, b = new[i], new[j]\n             if a + b > target:\n                 j = j - 1\n             elif a + b < target:\n                 i = i + 1\n             elif a + b == target:\n                 if a != b:\n                     ans = [nums.index(a), nums.index(b)]\n                 else:\n                     m = nums.index(a)\n                     nums.remove(a)\n                     n = nums.index(b)\n                     ans =[m, n+1]\n                 return (ans)\n         \n \n", "class Solution(object):\n     def twoSum(self, nums, target):\n         hashdict = {}\n         for i,num in enumerate(nums):\n             if target-num in hashdict:\n                 return [hashdict[target-num], i]\n             else:\n                 hashdict[num] = i\n", "# Using 'dict', like hash, to find the pair number\n class Solution:\n     def twoSum(self, numbers, target):\n         ans = []\n         dir = {}\n         ll = len(numbers)\n         for i in range(ll):\n             dir[numbers[i]] = i\n         for i in range(ll):\n             o2 = target-numbers[i]\n             if o2 in dir:\n                 if (dir[o2] != i):\n                     ans.append(i)\n                     ans.append(dir[o2])\n                     return ans", "class Solution:\n     def twoSum(self, nums, target):\n         '''\n         type nums:array\n         type target:integer\n         rtype :List\n         '''\n         d = {}\n         for i, num in enumerate(nums):\n             if target - num in d:\n                 return[d[target - num], i]\n             d[num] = i    ", "# Using 'dict', like hash, to find the pair number\n class Solution:\n     def twoSum(self, numbers, target):\n         ans = []\n         dir = {}\n         ll = len(numbers)\n         for i in range(ll):\n             dir[numbers[i]] = i\n         for i in range(ll):\n             o2 = target-numbers[i]\n             if o2 in dir:\n                 if (dir[o2] != i):\n                     ans.append(i)\n                     ans.append(dir[o2])\n                     return ans", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         t=dict()\n         l=len(nums)\n         if l<=1: return []\n         for i in range(l):\n             t[nums[i]]=i\n         for i in range(l):\n             comp=target-nums[i]\n             if comp in t and t[comp]!=i:\n                 return [i,t[comp]]\n         return []", "class Solution(object):  \n     def twoSum(self, nums, target):  \n         \"\"\" \n         :type nums: List[int] \n         :type target: int \n         :rtype: List[int] \n         \"\"\"  \n         arr = {}\n         length = len(nums)\n         for i in range(length):  \n             if (target - nums[i]) in arr:\n                 return [arr[target - nums[i]], i]\n             arr[nums[i]] = i", "class Solution:\n         \n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         hashmap = {}\n         x = len(nums)\n         for i in range(x):\n             comp = target - nums[i]\n             if comp in hashmap:\n                 return [hashmap.get(comp), i]\n             hashmap[nums[i]] = i\n             \n", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         sorted_nums = sorted(nums)\n         start = 0\n         end = len(nums) - 1\n         while start < end:\n             curr_sum = sorted_nums[start] + sorted_nums[end]\n             if (curr_sum == target):\n                 break\n             if (curr_sum < target):\n                 start += 1\n             else:\n                 end -= 1\n         first_index = nums.index(sorted_nums[start])\n         second_index = nums.index(sorted_nums[end])\n         if sorted_nums[start] == sorted_nums[end]:\n             nums.pop(first_index)\n             second_index = nums.index(sorted_nums[end]) + 1\n         return [first_index, second_index]\n", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         table = {}\n         for i, e in enumerate(nums):\n             print(\"fe\")\n             if e in table:\n                 table[e] = [table[e][0] + 1, table[e][1] + [i]]\n             else:\n                 table[e] = [1, [i]]\n             \n             sub_target = target - e\n             if sub_target in table and (sub_target != e or table[sub_target][0] >= 2):\n                 print(table)\n                 first_idx = i\n                 second_idx = None\n                 for index in table[sub_target][1]:\n                     if index != first_idx:\n                         second_idx = index\n                         break\n                 \n                 assert(second_idx, \"got shit\")\n                 result = [first_idx, second_idx]\n                 result.sort()\n                 return result\n         return []", "class Solution(object):\n     def twoSum(self, nums, target):\n         hashdict = {}\n         for i,num in enumerate(nums):\n             if target-num in hashdict:\n                 return [hashdict[target-num], i]\n             else:\n                 hashdict[num] = i\n", "class Solution(object):\n     def twoSum(self, nums, target):\n         nums_index = [(v, index) for index, v in enumerate(nums)]\n         nums_index.sort()\n         begin, end = 0, len(nums) - 1\n         while begin < end:\n             curr = nums_index[begin][0] + nums_index[end][0]\n             if curr == target:\n                 return [nums_index[begin][1], nums_index[end][1]]\n             elif curr < target:\n                 begin += 1\n             else:\n                 end -= 1\n", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         numsMap = {}\n         for i, num in enumerate(nums):\n             if target - num in numsMap:\n                 return [i, numsMap[target-num]]\n             numsMap[num] = i\n         return [None, None]", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n #         length_nums = len(nums)\n         \n #         for i in range(length_nums):\n #             for j in range(i+1, length_nums):\n #                 if nums[i] + nums[j] == target:\n #                     return [i, j]\n \n         # dic = {}\n         # for i, num in enumerate(nums):\n         #     if num in dic:\n         #         return [dic[num], i]\n         #     else:\n         #         dic[target - num] = i\n         \n         num_dict = {}\n         for i, num in enumerate(nums):\n             rem = target - num\n             if rem in num_dict:\n                 return [num_dict[rem], i]\n             num_dict[num] = i\n         return None", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         dict = {}\n         for i in range(0,len(nums)):\n             if nums[i] in dict:\n                 return [dict[nums[i]],i]\n             else:\n                 dict[target-nums[i]] = i\n         return []", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         indexes = dict([(nums[i], i) for i in range(len(nums))])\n         for i in range(len(nums)):\n             if target-nums[i] in indexes and indexes[target - nums[i]] != i:\n                 return [i, indexes[target - nums[i]]]\n         return []", "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         \n         # record the sorted index (original position)\n         nums_sorted_index = sorted(range(len(nums)), key = lambda k: nums[k])\n         # sort the list\n         nums.sort()\n         for i in range(len(nums)):\n             for j in range(i+1,len(nums)):\n                 if nums[i]+nums[j] > target:\n                     break\n                 elif nums[i]+nums[j] == target:\n                     return [nums_sorted_index[i], nums_sorted_index[j]]\n         print('Can\\'t find a match!')", "class Solution:\n     def twoSum(self, nums, target):\n         \n         \"\"\"\n         dic={}\n         for i,now in enumerate(nums):\n             dev = target - now\n             if dev in dic:\n                 return [dic[dev],i]\n             dic[now]=i\n         return None\n         \"\"\"\n     \n         \n     #   old\n         a=sorted(nums)\n         \n         for j in range(len(nums)):\n             for k in range(j+1,len(nums)):\n                 s = a[j]+a[k]\n                 if s == target:\n                     if a[j]==a[k]:\n                         return [i for i,x in enumerate(nums) if x == a[k]]\n                     else:\n                         b=nums.index(a[j])\n                         c=nums.index(a[k])\n                         return [b,c]\n                         \n                 elif s>target:\n                     break\n                \n         \n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n", "# Using 'dict', like hash, to find the pair number\n class Solution:\n     def twoSum(self, numbers, target):\n         ans = []\n         dir = {}\n         ll = len(numbers)\n         for i in range(ll):\n             dir[numbers[i]] = i\n         for i in range(ll):\n             o2 = target-numbers[i]\n             if o2 in dir:\n                 if (dir[o2] != i):\n                     ans.append(i)\n                     ans.append(dir[o2])\n                     return ans"]