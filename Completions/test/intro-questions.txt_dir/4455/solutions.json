["def ke(i):\n    return a[i]\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n    b.append(i)\nb.sort(key=ke)\nans=[0]*n\nk=0\nfor i in range(1,n):\n    if a[b[i]]==a[b[i-1]]:\n        k+=1\n        ans[b[i]]=i-k\n    else:\n        k=0\n        ans[b[i]]=i\nfor i in range(m):\n    r1,r2=map(int,input().split())\n    if (a[r1-1]>a[r2-1]):\n        ans[r1-1]-=1\n    elif a[r1-1]<a[r2-1]:\n        ans[r2-1]-=1\nfor i in ans:\n    print(i, end=' ')", "T = input().split(' ')\nn = int(T[0])\nk = int(T[1])\nS = input().split(' ')\nfor i in range(len(S)):\n    S[i] = (int(S[i]), i)\nQ = S.copy()\nS.sort()\nN = [0] * len(S)\ntot = 0\nfor i in range(1, len(S)):\n    if S[i][0] == S[i-1][0]:\n        tot+=1\n    else:\n        tot=0\n    N[S[i][1]] = i-tot\nB = [0] * len(S)\nfor i in range(k):\n    W = input().split(' ')\n    a = int(W[0])\n    b = int(W[1])\n    if Q[a-1][0] > Q[b-1][0]:\n        B[a-1] += 1\n    if Q[b-1][0] > Q[a-1][0]:\n        B[b-1] += 1\nfor i in range(len(S)-1):\n    print(N[i] - B[i], end=' ')\nprint(N[n-1] - B[n-1])\n", "n, k = list(map(int, input().split()))\nar = list(map(int, input().split()))\n\ncross = [0] * n\nres = [0] * n\n\nnar = list(sorted([[ar[x], x] for x in range(n)]))\n\ncur = ['1', 0]\nfor x in nar:\n    if x[0] == cur[0]:\n        cur[1] += 1\n        cross[x[1]] += cur[1]\n    else:\n        cur[0] = x[0]\n        cur[1] = 0\n\nfor x in range(k):\n    a, b = [int(x) - 1 for x in input().split()]\n    if ar[a] != ar[b]:\n        cross[max(a, b, key=lambda x: ar[x])] += 1\n\nfor x in range(n):\n    res[x] -= cross[x]\n    res[nar[x][1]] += x\n\nprint(*res)\n", "from itertools import accumulate\n\ndef main():\n\tn, k = [int(_) for _ in input().split()]\n\tskills = [int(_) for _ in input().split()]\n\n\tb = [(r, i) for i, r in enumerate(skills)]\n\tb.sort()\n\n\tx = 0\n\tc = [0] * n\n\tcnt = 0\n\tfor r, i in b:\n\t\tif r > x:\n\t\t\tcnt_less = cnt\n\t\tc[i] = cnt_less\n\t\tcnt += 1\n\t\tx = r\n\n\t# print(c)\n\tfor _ in range(k):\n\t\tu, v = [int(_) for _ in input().split()]\n\t\tu -= 1\n\t\tv -= 1\n\t\tif skills[u] > skills[v]:\n\t\t\tc[u] -= 1\n\t\telif skills[v] > skills[u]:\n\t\t\tc[v] -= 1\n\n\tprint(' '.join(map(str, c)))\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "from bisect import bisect_left\n\nn, k = map(int, input().split())\na = [int(x) for x in input().split()]\nsa = sorted(a)\n\nans = [0] * n\nfor i in range(k):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    if a[x] > a[y]:\n        ans[x] -= 1\n    if a[y] > a[x]:\n        ans[y] -= 1\n\nfor i in range(n):\n    t = bisect_left(sa, a[i])\n    ans[i] += t\n    print(ans[i], end=' ')\n", "import bisect\nn,k=list(map(int,input().split()))\nr,o=list(map(int,input().split())),''\nd={}\nfor i in range(k):\n    a,b=list(map(int,input().split()))\n    if [b]!=d.setdefault(a,[b]):\n        d[a]+=[b]\n    if [a]!=d.setdefault(b,[a]):\n        d[b]+=[a]\nrr=sorted(r)\nfor i in range(1,n+1):\n    a=bisect.bisect_left(rr,r[i-1])\n    if i in d:\n        for j in d[i]:\n            if r[j-1]<r[i-1]:\n                a-=1\n    o+=str(a)+' '\nprint(o)\n", "n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nperson_to_skill = {}\nskill_to_numMentor = {}\nperson_to_numMentor = {}\nfor person in range(len(arr)):\n    person_to_skill[person] = arr[person]\narr = sorted(arr)\ntemp = -1\nfor i in range(len(arr)):\n    if arr[i] != temp:\n        skill_to_numMentor[arr[i]] = i\n        temp = arr[i]\nfor person in range(n):\n    person_to_numMentor[person] = skill_to_numMentor[person_to_skill[person]]\nfor quarrel in range(k):\n    p1, p2 = list(map(int, input().split()))\n    if person_to_skill[p1 - 1] > person_to_skill[p2 - 1]:\n        person_to_numMentor[p1 - 1] -= 1\n    if person_to_skill[p2 - 1] > person_to_skill[p1 - 1]:\n        person_to_numMentor[p2 - 1] -= 1\ns = \"\"\ns += str(person_to_numMentor[0])\nfor i in range(1, n):\n    s += ' ' + str(person_to_numMentor[i])\nprint(s)", "[n, k] = [int(x) for x in input().split()]\nr = [int(x) for x in input().split()]\nprogs = [[i, x, 0, 0] for i, x in enumerate(r)]\nIND = 0\nRATE = 1\nREL = 2\nRES = 3\ni = 0\nwhile i < k:\n  [a, b] = [int(x) for x in input().split()]\n  a -= 1\n  b -= 1\n  if progs[a][RATE] > progs[b][RATE]:\n    progs[a][REL] += 1\n  if progs[a][RATE] < progs[b][RATE]:\n    progs[b][REL] += 1\n  i += 1\n\n\nprogs = sorted(progs, key=lambda p: p[RATE])\n\ni = 1\ncount = 0\nwhile i < n:\n  cur = progs[i]\n  prev = progs[i-1]\n  if cur[RATE] > prev[RATE]:\n    count = i\n  cur[RES] = count - cur[REL]\n  i += 1\n\nprogs = sorted(progs, key=lambda p: p[IND])\nfor p in progs:\n  print(p[RES], end=' ')\n", "\n\ndef solve(n,m,a,adj):\n\ta = sorted(a)\n\n\tres = []\n\tfor i in range(n):\n\t\tres.append(0)\n\n\tequal = 0\n\tfor i in range(n):\n\t\tpos = a[i][1]\n\t\tif (i == 0):\n\t\t\tres[pos] = 0\n\t\t\tcontinue\n\n\t\tif (a[i][0] == a[i-1][0]):\n\t\t\tequal += 1\n\t\telse:\n\t\t\tequal = 0\n\n\t\tres[pos] = i - equal - len(adj[pos])\n\n\tfor i in res:\n\t\tprint(i, end = ' ')\n\t\t\n\n\n\n\n\nn, m = map(int, input().split())\n\ntmp = list(map(int, input().split()))\na = []\nadj = []\nfor i in range(n):\n\ta.append((tmp[i],i))\n\tadj.append([])\n\n\nfor i in range(m):\n\tx, y = map(int, input().split())\n\tx -= 1\n\ty -= 1\n\tif (a[x][0] < a[y][0]):\n\t\tadj[y].append(x)\n\telif (a[x][0] > a[y][0]):\n\t\tadj[x].append(y)\n\t\n\nsolve(n,m,a,adj)", "n, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nans = [0] * n\nfor i in range(k):\n\tx, y = [int(j) - 1 for j in input().split()]\n\tif a[x] < a[y]:\n\t\tans[y] -= 1\n\tif a[x] > a[y]:\n\t\tans[x] -= 1\nd = {}\ne = {}\nf = {}\nfor i in a:\n\td[i] = 0\n\tf[i] = True\n\te[i] = 0\nfor i in a:\n\td[i] += 1\n\te[i] += 1\n\nwk1 = [i for i in a]\nwk1.sort()\nfor i in range(n):\n\tif (f[wk1[i]]) and (wk1[i] != wk1[0]):\n\t\td[wk1[i]] += d[wk1[i - 1]]\n\t\tf[wk1[i]] = False\nfor i in range(n):\n\tans[i] += d[a[i]] - e[a[i]]\n\nfor i in range(n):\n\tif i != n - 1:\n\t\tprint(ans[i], end = \" \")\n\telse:\n\t\tprint(ans[i])\n", "R = lambda: map(int, input().split())\n\nn, k = R()\n\nr = list(R())\nh = sorted(r)\nd = {}\n\nd[h[0]] = 0 # d[i]: \u6bd4i\u5c0f\u7684\u6570\u5b57\u6570\u91cf\nfor i in range(1, n):\n    if h[i-1] != h[i]:\n        d[h[i]] = i\n\nres = [0]*n\nfor i in range(n): res[i] = d[r[i]]\n\nfor i in range(k):\n    a, b = R()\n    a -= 1; b -= 1\n    if r[a] > r[b]: res[a] -= 1\n    elif r[a] < r[b]: res[b] -= 1\n\nres = list(map(str, res))\nprint(' '.join(res))", "(n, k) = list(map(int, input().split()))\n\nd = {}\na = []\nfor x in input().split():\n    x = int(x)\n    if not x in d:\n        d[x] = 0\n    d[x] += 1\n    a.append(x)\n    \nlst = sorted(d)\nlst.reverse()\n\nd1 = {lst[0]: d[lst[0]]}\nfor x in range(1, len(lst)):\n    d1[lst[x]] = d1[lst[x - 1]] + d[lst[x]]\n\narray = [0] * n\nfor x in range(n):\n    array[x] = n - d1[a[x]]\n\nfor x in range(k):\n    (l, r) = list(map(int, input().split()))\n    if a[l - 1] > a[r - 1]:\n        array[l - 1] -= 1\n    elif a[l - 1] < a[r - 1]:\n        array[r - 1] -= 1\n\nprint(*array)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nrec = []\nrec1 = {}\nfor i in range(n):\n    rec.append((i, a[i]))\n    rec1[i + 1] = a[i]\n\n\nrec = sorted(rec, key=lambda s: s[1])\n\nnum = [0] * n\nj = 0\nfor i in range(n):\n    num[rec[i][0]] = i\ni = 1\nwhile i < n:\n    if rec[i - 1][1] == rec[i][1]:\n        j = 1\n        while i < n and rec[i - 1][1] == rec[i][1]:\n            num[rec[i][0]] -= j\n            j += 1\n            i += 1\n    i += 1\n\nfor i in range(k):\n    x, y = map(int, input().split())\n    if rec1[x] < rec1[y]:\n        num[y - 1] -= 1\n    elif rec1[y] < rec1[x]:\n        num[x - 1] -= 1\n\nprint(\" \".join(map(str, num)))", "n,k = [int(s) for s in input().split()]\nr = [int(s) for s in input().split()]\nq = [0]*n\nfor i in range(k):\n    x,y = [int(s)-1 for s in input().split()]\n    if r[x] > r[y]:\n        q[x] += 1\n    if r[y] > r[x]:\n        q[y] += 1\nr1 = []\nfor i in range(n):\n    r1.append((r[i], i))\nr1.sort()\nlower = 0\nans = [0]*n\nfor i in range(n):\n    if i > 0 and r1[i][0] > r1[i-1][0]:\n        lower = i\n    ans[r1[i][1]] = lower-q[r1[i][1]]\n\nprint(*ans, sep=\" \")", "from collections import Counter\ndef binary(x,ar):\n    low=0\n    high=len(ar)-1\n    while low<=high:\n        mid=(low+high)//2\n        if ar[mid]==x:\n            break\n        elif ar[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return mid\n\n\nn,q=list(map(int,input().split()))\nl=list(map(int,input().split()))\nfrq=dict(Counter(l))\nnew=sorted(set(l))\nlook=[frq[new[0]]]\nfor i in range(1,len(new)):\n    look.append(look[i-1]+frq[new[i]])\nd=dict()\nfor i in range(q):\n    li,r=list(map(int,input().split()))\n    li-=1\n    r-=1\n    if li in d:\n        d[li].append(r)\n    else:\n        d[li]=[r]\n    \n    if r in d:\n        d[r].append(li)\n    else:\n        d[r]=[li]\nenum=[]\nfor i in range(n):\n    x=binary(l[i],new)\n    if x==0:\n        sum1=0\n    else:\n        sum1=look[x-1]\n        if i in d:\n            \n            for j in range(len(d[i])):\n                if l[d[i][j]]<l[i]:\n                    sum1-=1\n    enum.append(sum1)\nprint(*enum)\n    \n    \n    \n            \n\n", "n, k = map(int, input().split())\nm = list(map(int, input().split()))\nnew_m = [(m[i], i) for i in range(n)]\nnew_m.sort()\nans = [0 for i in range(n)]\nlast = -1\nfor i in range(1, len(new_m)):\n    if new_m[i][0] == new_m[i - 1][0]:\n        ans[new_m[i][1]] = ans[new_m[i - 1][1]]\n    else:\n        ans[new_m[i][1]] = i\nfor i in range(k):\n    a, b = map(int, input().split())\n    if m[a - 1] > m[b - 1]:\n        ans[a - 1] -= 1\n    elif m[a - 1] != m[b - 1]:\n        ans[b - 1] -= 1\nprint(*ans)", "n, k = list(map(int, input().split()))\nskills = list((list(map(int, input().split()))))\nquarrels = [0] * n\n\nfor _ in range(k):\n    x, y = list(map(int, input().split()))\n    x -= 1\n    y -= 1\n\n    if skills[x] > skills[y]:\n        quarrels[x] += 1\n    elif skills[y] > skills[x]:\n        quarrels[y] += 1\n\nresult = [0] * n\nnext_p = 1\n\nskills = sorted(enumerate(skills), key=lambda x: -x[1])\n\nfor i, skill in skills[:-1]:\n    while next_p < n and skills[next_p][1] == skill:\n        next_p += 1\n\n    result[i] = n - next_p - quarrels[i]\n\nprint(' '.join(map(str, result)))\n", "from copy import copy\n\nn, k = map(int, input().split(' '))\nl = list(map(int, input().split(' ')))\nr = copy(l)\n\nidd = dict()\nfor i in range(n):\n    try:\n        idd[l[i]].add(i)\n    except:\n        idd[l[i]] = {i}\n\nnd = dict()\nl.sort()\n\nused = set()\n\nfor i in enumerate(l):\n    if not i[1] in used:\n        for x in idd[i[1]]:\n            nd[x] = i[0]\n        used.add(i[1])\n\nd = {i:0 for i in range(n)}\n\nfor i in range(k):\n    a, b = map(lambda x: int(x) - 1, input().split(' '))\n    if r[a] < r[b]:\n        d[b] += 1\n    elif r[b] < r[a]:\n        d[a] += 1\n\nfor i in range(n):\n    print(nd[i] - d[i], end=' ')", "from collections import Counter\ndef search(key,arr):\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==key:\n            break\n        elif arr[mid]<key:\n            low=mid+1\n        else:\n            high=mid-1\n    return mid\n\nn,q=list(map(int,input().split()))\nl=list(map(int,input().split()))\nd=dict()\nsel=dict(Counter(l))\nno=sorted(set(l))\ntab=[sel[no[0]]]\nfor i in range(1,len(no)):\n    tab.append(tab[i-1]+sel[no[i]])\nfor i in range(q):\n    li,r=list(map(int,input().split()))\n    li-=1\n    r-=1\n    if li in d:\n        d[li].append(r)\n    else:\n        d[li]=[r]\n    \n    if r in d:\n        d[r].append(li)\n    else:\n        d[r]=[li]\nfin=[]\nfor i in range(n):\n    x=search(l[i],no)\n    if x==0:\n        sum1=0\n    else:\n        sum1=tab[x-1]\n        if i in d:\n            \n            for j in range(len(d[i])):\n                if l[d[i][j]]<l[i]:\n                    sum1-=1\n    fin.append(sum1)\nprint(*fin)\n", "from collections import defaultdict\nn , k = input().split()\nn , k = [ int(n) , int(k) ]\nprog_power = defaultdict(set)\nprog = []\nfor ind,x in enumerate(input().split()) :\n    prog_power[int(x)].add(ind+1)\n    prog.append(int(x))\n\nm = defaultdict(set)\nfor i in range(k) :\n    a1 , a2 = input().split()\n    a1 , a2 = [int(a1) , int(a2) ]\n    if prog[a1-1] > prog[a2-1] :\n        m[a1].add(a2)\n    elif prog[a1-1] < prog[a2-1] :\n        m[a2].add(a1)\n\npower = {}\nsum = n\nfor i in sorted(prog_power.keys() , reverse = True) :\n    sum -= len(prog_power[i])\n    power[i] = sum\n    \n\nfor ind,i in enumerate(prog) :\n    mentor = power[i] - len(m[ind+1])\n    print(mentor,end = ' ')\n\n\n\n\n\n\n\n\n\n\n\n\n", "params = [int(s) for s in input().split(\" \")]\nn = params[0]\nk = params[1]\nskills = [int(s) for s in input().split(\" \")]\nindexes_sorted= [b[0] for b in sorted(enumerate(skills),key=lambda i:i[1])]\nbad_relations={}\nfor i in range(k):\n    items = [int(s) for s in input().split(\" \")]\n    first = items[0] - 1\n    second= items[1] - 1\n    if skills[first] > skills[second]:\n        bad_relations[first] = bad_relations.get(first, 0) + 1\n    elif skills[second]> skills[first]:\n        bad_relations[second] = bad_relations.get(second, 0) + 1\n\nnum_the_same=0\nresults = {}\nprev=None\nfor idx, index in enumerate(indexes_sorted):\n    skill = skills[index]\n    if skill==prev:\n        num_the_same+=1\n    else:\n        num_the_same=0\n    cnt = idx - num_the_same - bad_relations.get(index,0)\n    if cnt < 0:\n        cnt= 0\n    results[index]= cnt\n    prev= skill\nfinal=''\nfor i in range(n):\n    final+=str((results[i])) + \" \"\n\nprint(final.strip())\n\n\n\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\nfrom bisect import bisect_left\n\ndef rint():\n    return map(int, stdin.readline().split())\n#lines = stdin.readlines()\n\nn, k = rint()\nr = list(rint())\nq = [0 for i in range(n)]\n\nfor i in range(k):\n    x, y = rint()\n    x -= 1\n    y -= 1\n    if r[x] > r[y]: \n        q[x] +=1\n    elif r[y] > r[x]:\n        q[y] +=1\n\nans = [-1 for i in range(n)]\nr_sorted = r[:]\nr_sorted.sort()\n#print(\"r\", r)\n#print(\"r_sorted\", r_sorted)\n#print(\"q\", q)\nfor i in range(n):\n    lower = bisect_left(r_sorted, r[i])\n    ans[i] =  max(0, lower - q[i])\nprint(*ans)", "from bisect import bisect_left\n\nn, k = map(int, input().split())\na = [int(x) for x in input().split()]\nsa = sorted(a)\n\nans = [0] * n\nfor i in range(k):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    if a[x] > a[y]:\n        ans[x] -= 1\n    if a[y] > a[x]:\n        ans[y] -= 1\n\nfor i in range(n):\n    t = bisect_left(sa, a[i])\n    ans[i] += t\n    print(ans[i], end=' ')"]