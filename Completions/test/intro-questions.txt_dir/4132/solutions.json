["N = int(input())\nA = list(map(int,input().split()))\nA_list = [float('inf')] * N\n\nans = min(A)\nwhile max(A_list) > 0:\n    mi = ans\n    for i,a in enumerate(A):\n        amari = a % mi\n        A_list[i] = amari\n        if amari != 0:\n            ans = min(ans,amari)\n\nprint(ans)", "import functools\nimport math\nN=int(input())\nA=list(map(int,input().split()))\nprint(functools.reduce(math.gcd,A))", "import heapq\n\nn = int(input())\nA = [int(a) for a in input().split()]\n\nheapq.heapify(A)\n\nwhile True:\n    temp = heapq.heappop(A)\n    A = [a%temp for a in A if a % temp != 0] + [temp]\n    if len(A) == 1:\n        break\n\nprint(A[0])", "N=int(input())\nA=list(map(int, input().split()))\n\ndef gcd(a,b):\n\twhile b:\n\t\ta, b = b, a%b\n\treturn a\n\n\nans=0\nfor a in A:\n\tans=gcd(ans, a)\nprint(ans)", "import functools\ndef euclid(a, b):\n    if b == 0:\n        return a\n    else:\n        return euclid(b, a%b)\n\ndef gcd(nums):\n    return functools.reduce(euclid, nums)\n\n\n\nn=int(input())\na=[int(i) for i in input().split()]\n\nprint((gcd(a)))\n", "from math import gcd\nfrom functools import reduce\n\nn = int(input())\na = list(map(int, input().split()))\nprint((reduce(gcd, a)))\n", "from fractions import gcd\nfrom functools import reduce\nN = input()\n\nList = list(map(int, input().split()))\n\nprint((reduce(gcd, List)))\n", "import math\nN=int(input())\nA=list(map(int,input().split()))\nx=A[0]\nfor a in A:\n    x=math.gcd(x,a)\nprint(x)\n", "import math\nN = int(input())\nA = list(map(int, input().split()))\n\ng = A[0]\nfor i in range(1, N):\n  g = math.gcd(g, A[i])\n\nprint(g)", "from math import gcd\n\nN = int(input())\nA = list(map(int, input().split()))\nmin_ = 0\ngcd_ = A[0]\nfor i in range(1, N):\n    gcd_ = gcd(A[i], gcd_)\nprint(gcd_)", "from math import gcd\nfrom functools import reduce\nn = int(input())\na = list(map(int, input().split()))\nprint((reduce(gcd, a)))\n", "n = int(input())\na = list(map(int,input().split()))\n\nx = a[0]\nfor i in range(1,n):\n    y = a[i]\n    x,y = max(x,y),min(x,y)\n    while y!= 0:\n        x,y = y,x%y\nprint(x)", "import sys\nimport heapq\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    heapq.heapify(A)\n    while True:\n        m1 = heapq.heappop(A)\n        try:\n            m2 = heapq.heappop(A)\n        except IndexError:\n            print(m1)\n            break\n        m2 %= m1\n        heapq.heappush(A, m1)\n        if m2 > 0:\n            heapq.heappush(A, m2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport math\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: list(map(int, sys.stdin.readline().split()))\ninintl = lambda: list(inintm())\ninstrm = lambda: list(map(str, sys.stdin.readline().split()))\ninstrl = lambda: list(instrm())\n\nn = inint()\nA = inintl()\n\nm = min(A)\n\nmod_min = 10**9\n\nfor a in A:\n    if a % m == 0:\n        continue\n    mod_min = min(mod_min, a % m)\n\nif mod_min == 10**9:\n    print(m)\nelse:\n    print((math.gcd(m, mod_min)))\n", "# 62 C - Monsters Battle Royale\nimport math\nimport functools\nN = int(input())\nA = list(map(int,input().split()))\n\n# \u3059\u3079\u3066\u306e\u8981\u7d20\u306e GCD\nans = functools.reduce(math.gcd,A)\nprint(ans)", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    before = A\n    after = []\n    for _ in range(pow(10, 9)):\n        x = before[0]\n        if len(before) == 1:\n            print(x)\n            return\n        after.append(x)\n        for i in range(1, len(before)):\n            y = before[i]%x\n            if y != 0:\n                after.append(y)\n        after.sort()\n        before = after\n        after = []\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\nfrom functools import reduce\n\nn = int(input())\nprint(reduce(gcd, list(map(int, input().split()))))", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom functools import reduce\n\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return N, A\n\n\ndef solve(N, A):\n    return reduce(gcd, A)\n\n\ndef __starting_point():\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n\n__starting_point()", "import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn = int(input())\nprint(gcd_list(list(map(int,input().split()))))", "n = int(input())\na = list(map(int, input().split()))\n\nimport math\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\n\nprint(g)", "import math\nfrom functools import reduce\nn=int(input())\na=list(map(int,input().split()))\n\ndef gcd(numbers):\n    return reduce(math.gcd, numbers)\n\nprint(gcd(a))", "n = int(input())\nL = list(map(int,input().split()))\n\nfrom math import gcd\nfrom functools import reduce\n\nans = reduce(gcd,L)\nprint(ans)", "import math\nn = int(input())\na = list(map(int,input().split()))\nans = a[0]\nfor v in a[1:]:\n  ans = math.gcd(ans,v)\nprint(ans)", "from math import gcd\n\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in a:\n    ans = gcd(ans, i)\nprint(ans)\n", "n = int(input())\n\nal = list(map(int, input().split())) \n\nimport math\n\ntemp = al[0]\n\nfor i in range(1,n):\n    temp = math.gcd(temp,al[i])\n    \nprint(temp)", "N=int(input())\nmns=list(map(int,input().split()))\natk=min(mns)\nwhile 1:\n    mns=list(filter(lambda x: x!=0, map(lambda x: x%atk, mns)))\n    if not mns:\n        break\n    mns+=[atk]\n    atk=min(mns)\nprint(atk)", "from math import gcd\nfrom functools import reduce\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint((reduce(gcd, a)))\n", "import math\nN = int(input())\nA = list(map(int,input().split()))\ngcd = A[0]\nfor i in range(1,N):\n    gcd = math.gcd(gcd,A[i])\nprint(gcd)", "n = int(input())\n*A, = list(map(int, input().split()))\nimport math\nans = A[0]\nfor a in A:  ans = math.gcd(ans, a)\nprint(ans)\n", "from math import *\nn = int(input())\na = sorted(map(int, input().split()))\ng = a[0]\nfor i in range(1,n):\n  g = gcd(g, a[i])\nprint(g)", "n = int(input())\nnum_list = list(map(int, input().split()))\n\nwhile len(num_list) >= 2:\n    x = min(num_list)\n    num_list = [i % x for i in num_list if (i % x != 0)]\n    num_list.append(x)\n \nprint(num_list[0])", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    L = sorted(LI())\n    past = L[0]\n    \n    for i in L:\n        past = math.gcd(i, past)\n    print(past)\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import gcd\nn=int(input())\na=list(map(int,input().split()))\nres=a[0]\nfor i in range(1,n):\n  res=gcd(res,a[i])\nprint(res)", "import math\n\nn = int(input())\nal = list(map(int, input().split()))\n\nans = math.gcd(al[0], al[1])\n\nfor i in range(2, n):\n    ans = math.gcd(ans, al[i])\n\nprint(ans)", "\nimport math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(gcd, numbers)\n\nn = int(input())\ns = list(map(int,input().split()))\nprint(gcd_list(s))", "import math\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 10**10\nfor i in range(1, n):\n    ans = min(ans, math.gcd(a[0], a[i]))\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\ndef gcd(p, q):\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\ng = gcd(a[0], a[1])\nfor i in range(2, n):\n    g = gcd(g, a[i])\n\nprint(g)", "import math\nN = int(input())\nA = list(map(int, input().split()))\ng = math.gcd(A[0],A[1])\nfor i in range(2,N):\n    g = math.gcd(g,A[i])\nprint(g)    ", "import math\nn=int(input())\na=[*map(int,input().split())]\nans=0\nfor i in a:\n    ans=math.gcd(ans,i)\nprint(ans)", "import math\nn = int(input())\na = list(map(int, input().split()))\nans = a[0]\nfor i in range(1,n):\n    ans = math.gcd(ans,a[i])\nprint(ans)\n", "import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn = int(input())\na = list(map(int, input().split()))\nans = gcd_list(a)\nprint(ans)", "import functools\nimport math\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\nprint((functools.reduce(math.gcd, A)))\n", "from math import *\nN=int(input())\nA=list(map(int,input().split()))\nc=A[0]\nfor i in range(N):\n    c=gcd(A[i],c)\nprint(c)", "import math\nN=int(input())\na=list(map(int,input().split()))\nb=math.gcd(a[0],a[1])\nfor i in range(N-1):\n    b=math.gcd(a[i+1], b)\nprint(b)\n", "N = int(input())\nA = list(map(int,input().split()))\nm = min(A)\nn = 0\nwhile m != n:\n    m = min(A)\n    a = [m]\n    for i in A:\n        i %= m\n        if i != 0:\n            a.append(i)\n    A = a\n    n = min(A)\nprint(n)", "import math\n\nn = int(input())\na = list(map(int, input().split()))\nans = a[0]\nfor i in range(n):\n    ans = math.gcd(a[i], ans)\nprint(ans)\n", "from math import gcd\nfrom functools import reduce\nn = int(input())\nA = list(map(int, input().split()))\ndef GCD(*numbers):\n    return reduce(gcd, numbers)\ng = GCD(*A)\nprint(g)\n", "from math import gcd\ndef readinput():\n    n=int(input())\n    a=list(map(int,input().split()))\n    return n,a\n\ndef main(n,a):\n    ans=gcd(a[0],a[1])\n    for i in range(2,n):\n        ans=gcd(ans,a[i])\n    return ans\n\ndef __starting_point():\n    n,a=readinput()\n    ans=main(n,a)\n    print(ans)\n\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\n\na.sort()\n\ndef mod():\n    for i in range(1, len(a)):\n        # print(\"--------\")\n        # print(a[i])\n        # print(a[i] % a[0])\n        # print(\"--------\")\n        if(a[i] % a[0] != 0):\n            a[i] = a[i] % a[0]\n        else:\n            a[i] = a[0]\n        # print(a[i])\n    a.sort()\n    return a\n\n# for i in range(4):\n#     a = mod()\n#     print(a)\n\nwhile(a.count(a[0]) != len(a)):\n    a = mod()\n    # print(a)\n\nprint(a[0])", "import math\nfrom functools import reduce\n\ndef gcd(*n):\n    return reduce(math.gcd, n)\n\nn = int(input())\n*a, = map(int, input().split())\nprint(gcd(*a))", "# author:  Taichicchi\n# created: 14.09.2020 22:18:44\n\nimport sys\nfrom math import gcd\n\nN = int(input())\n\nA = list(map(int, input().split()))\n\nans = gcd(A[0], A[1])\nfor i in range(2, N):\n    ans = gcd(ans, A[i])\n\nprint(ans)\n", "from math import gcd\n\n\ndef lgcd(l):\n    res = l[0]\n    for i in range(1, len(l)):\n        res = gcd(res, l[i])\n\n    return res\n\n\nn = int(input())\nprint((lgcd(list(map(int, input().split())))))\n", "import bisect,collections,copy,itertools,math,string\nimport sys\nfrom functools import reduce\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n    from functools import reduce\n    def gcd(*numbers):\n        return reduce(math.gcd, numbers)\n    n = I()\n    lst = LI()\n    ans = gcd(*lst)\n    print(ans)\nmain()            \n", "import math\nfrom functools import reduce\nN = int(input())\nA = list(map(int, input().split()))\n\nprint(reduce(math.gcd, A))", "from math import gcd\nfrom functools import reduce\n\nn = int(input())\nA = list(map(int, input().split()))\n\nprint(reduce(gcd, A))", "N = int(input())\nA = list(map(int,input().split()))\n\nimport math\n\ndef gcd_list(nums):\n  gcd = nums[0]\n  for i in range(1,len(nums)):\n    gcd = math.gcd(gcd,nums[i])\n  return gcd\n\nprint(gcd_list(A))", "n = int(input())\nL = list(map(int,input().split()))\n\ndef gcd(x,y):\n    if y > x:\n        x,y = y,x\n    if x%y == 0:\n        return y\n    else:\n        return gcd(y,x%y)\n        \nfrom functools import reduce\nans = reduce(gcd,L)\nprint(ans)", "from math import *\n\nN=int(input())\nA=list(map(int,input().split()))\n\nans=A[0]\n\nfor i in range(1,N):\n  ans=gcd(ans,A[i])\n\nprint(ans)\n", "import numpy as np\n\nn = int(input())\na = list(map(int,input().split()))\n\ngcd = np.frompyfunc(np.gcd,2,1)\n\nprint(gcd.reduce(a))", "from math import gcd\nN = int(input())\nA = list(map(int,input().split()))\nnum = gcd(A[0],A[1])\nfor i in range(2,N):\n    num = gcd(num,A[i])\nprint(num)", "n = int(input())\na = list(map(int, input().split()))\nif max(a) != min(a):\n    while a.count(0) != len(a)-1:\n        a.sort()\n        b = [a[0]]\n        for i in a[1:]:\n            if i%a[0] != 0:\n                b.append(i%a[0])\n        a = b\n    print(max(a))\nelse:\n    print(a[0])", "N=int(input())\nA=list(map(int,input().strip().split()))\nA.sort()\n\ndef gcd(a,b):\n    while True:\n        r=a%b\n        if r==0:\n            break\n        a=b\n        b=r\n    return b\n\nans=A[0]\nfor n in range(N):\n    ans=gcd(ans,A[n])\n\nprint(ans)", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nres = 0\nfor i in range(n):\n    res = gcd(res, a[i])\nprint(res) ", "n=int(input())\na=list(map(int,input().split()))\n\nimport math\nans = a[0]\nfor i in range(1, n):\n    ans = math.gcd(ans, a[i])\nprint(ans)", "def gcd(x, y):\n    if(y > x):\n        tmp = y\n        y = x\n        x = tmp\n\n    while(int(x%y)>0):\n        r = x%y\n        x = y\n        y = r\n\n    return y\n        \n\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = gcd(a[0], a[1])\nfor i in range(1, n-1):\n    ans = min(ans, gcd(a[i], a[i+1]))\n\nprint(ans)", "import numpy as np\nfrom functools import reduce\n_ = input()\nprint(reduce(np.gcd, map(int,input().split())))", "import numpy as np\n\nn = int(input())\na = list(map(int,input().split()))\n\nans = a[0]\n\nfor i in range(1,len(a)):\n    ans = np.gcd(a[i],ans)\n\nprint(ans)", "from math import gcd\n\nN = int(input())\nA = list(map(int,input().split()))\n\nres = 0\n\nfor i in range(N):\n   res = gcd(res,A[i])\n\nprint(res)", "import math\nN = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    ans = math.gcd(ans, A[i])\n\nprint(ans)", "import math\nN = int(input())\nlsA = list(map(int,input().split()))\ngcd = lsA[0]\nfor i in range(1,N):\n    gcd = math.gcd(gcd,lsA[i])\nprint(gcd)", "#https://note.nkmk.me/python-gcd-lcm/\nimport math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn = int(input())\na = list(map(int,input().split()))\n\nprint(gcd_list(a))", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 14 17:37:26 2020\n\n@author: liang\n\"\"\"\nN = int(input())\nA = [int(x) for x in input().split()]\n\nfrom math import gcd\n\nA.sort()\ng = A[0]\nfor i in range(1,N):\n    g = gcd(g,A[i]) \n    #print(g)\nprint(g)", "import math\nn= int(input())\na_list = list(map(int, input().split()))\ngcd = a_list[0]\nfor i in range(1,n):\n    gcd = math.gcd(gcd,a_list[i])\n    \n    \nprint(gcd)", "from heapq import heappop,heappush\nN = int(input())\nA = list(map(lambda x: -1*int(x),input().split()))\n\nnow = -1 * heappop(A)\nwhile(A):\n    next = -1 * heappop(A)\n    if now % next != 0:\n        heappush(A,-1*(now%next))\n    now = next\nprint(now)", "def gcd(a,b):\n while b!=0:\n   a,b=b,a%b\n return a\n\n\nn = int(input())\nl = list(map(int,input().split()))\nl.sort()\n\ntmp = gcd(l[0],l[1])\nfor i in range(2,len(l)):\n    tmp = gcd(tmp,l[i])\n\nprint(tmp)", "import math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn = input()\nl = [ int(x) for x in input().split() ]\n\nprint((gcd_list(l)))\n", "def get_gcd(a, b):\n    if a<b:a,b=b,a\n    if b == 0 :return a\n    else:return get_gcd(b,a%b)\n\nn = int(input().rstrip())\na = list(map(int,input().rstrip().split()))\n\ngcd = a[0]\nfor i in range(1,n):\n    gcd = get_gcd(gcd,a[i])\nprint(gcd)", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1,n): ans = gcd(ans, a[i])\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\n\nx = a[0]\nfor i in range(1,n):\n    x,y = max(x,a[i]),min(x,a[i])\n    while y!=0:x,y=y,x%y\nprint(x)", "import functools\nimport math\nn = int(input())\na = list(map(int,input().split()))\nprint(functools.reduce(math.gcd,a))", "import math\nN = int(input())\nA = list(map(int, input().split()))\n\n# \u653b\u6483\uff1a\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\u64cd\u4f5c\ng = A[0]\nfor i in range(1, N):\n  g = math.gcd(g, A[i])\n\nprint(g)", "N = int(input())\nA = list(map(int, input().split()))\n\nl = 0\nwhile True:\n  A = sorted(A)\n  m = A[l]\n  for i in range(l+1, N): A[i] %= m\n  l = A.count(0)\n  if l == N-1: break\n\nA = sorted(A)\nprint(A[-1])", "import math \nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nn = int(input())\na = [int(i) for i in input().split()]\nif 1 in a:\n    ans = 1\nelse:\n    ans = gcd_list(a)\nprint(ans)", "import math\nN = int(input())\nA = list(map(int,input().split()))\nnow = A[0]\nfor i in range(1,N):\n    now = math.gcd(A[i],now)\nprint(now)\n", "from math import gcd\n\nn = int(input())\na = list(map(int, input().split()))\n\n\nfor i in range(n-1):\n  a[i+1] = gcd(a[i], a[i+1])\n  \nprint(a[n-1])", "from functools import reduce\nfrom math import gcd\nn = int(input())\nxlist = list(map(int,input().split()))\nprint(reduce(gcd, xlist))", "import math\nfrom functools import reduce\n\nn=int(input())\na=list(map(int,input().split()))\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\nprint(gcd(*a))", "from math import gcd\n\nn = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor a in A:\n    ans = gcd(ans, a)\nprint(ans)", "from functools import reduce\nfrom math import gcd\n\nn = int(input())\na = list(map(int,input().split()))\ng = reduce(gcd,a)\nprint(g)", "N = int(input())\nA = list(map(int, input().split()))\n\ng = A[0]\nimport math\nfor i in range(1, N):\n    g = math.gcd(g, A[i])\n\nprint(g)", "import math\n\nN = int(input())\nA_list = list(map(int, input().split()))\n\nans = A_list[0]\nfor i in range(N-1):\n    ans = math.gcd(A_list[i+1], ans)\n\nprint(ans)", "import sys\nimport math\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    n = ini()\n    A = inl()\n    g = A[0]\n    for i in range(1, n):\n        g = math.gcd(g, A[i])\n    return g\n\n\nprint(solve())\n", "from math import gcd\nn = int(input())\na = list(map(int,input().split()))\nans = a[0]\nfor i in a[1:]:\n    ans = gcd(ans,i)\nprint(ans)", "N=int(input())\nA=map(int,input().split())\nimport math\nfrom functools import reduce\n\nprint(reduce(math.gcd, A))", "import sys\nfrom math import gcd\nfrom functools import reduce\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    print((reduce(gcd, A)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nA = list(map(int, input().split()))\n\ndef gcd(x, y):\n    if x < y:\n        t = x\n        x = y\n        y = t\n\n    if y == 0:\n        return x\n\n    else:\n        return gcd(y, x % y)\n\na = gcd(A[0], A[1])\n\nfor i in range(2, N):\n    a = gcd(a, A[i])\n\nprint(a)\n", "import math\nfrom functools import reduce\n\nN = int(input())\nA = list(map(int,input().split()))\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n  \nprint(gcd_list(A))", "from math import gcd\nn=int(input())\na=list(map(int,input().split()))\nres=a[0]\nfor i in range(1,n):\n  res=gcd(res,a[i])\nprint(res)"]