["import collections\n\n\ndef main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(sep=None, maxsplit=-1):\n        return read().split(sep, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(sep=None, maxsplit=-1):\n        return [int(a) for a in read_array(sep, maxsplit)]\n\n    def write(*args, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in args) + end)\n\n    def write_array(array, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in array) + end)\n\n    def enough(days):\n        bought = []  # (type, amount)\n        bought_total = 0\n        used_from = days\n        for d in range(days, 0, -1):\n            used_from = min(d, used_from)\n            for t in offers.get(d, []):\n                if K[t] > 0:\n                    x = min(K[t], used_from)\n                    K[t] -= x\n                    bought.append((t, x))\n                    bought_total += x\n                    used_from -= x\n            if not used_from:\n                break\n        remaining_money = days - bought_total\n        ans = (total_transaction - bought_total) * 2 <= remaining_money\n        for t, a in bought:\n            K[t] += a\n        return ans\n\n    n, m = read_int_array()\n    K = read_int_array()\n    total_transaction = sum(K)\n    offers = collections.defaultdict(list)\n    for _ in range(m):\n        d, t = read_int_array()\n        offers[d].append(t-1)\n\n    low = total_transaction\n    high = low * 2\n    ans = high\n    while low <= high:\n        mid = (low + high) // 2\n        if enough(mid):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    write(ans)\n\n\nmain()\n", "import sys\n\nN, M = [int(x) for x in sys.stdin.readline().rstrip().split()]\nK = [int(x) for x in sys.stdin.readline().rstrip().split()]\nD = [0]*M\nT = [0]*M\nfor i in range(M):\n    D[i], T[i] = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    D[i] -= 1\n    T[i] -= 1\nKS = sum(K)\n\nok = 2*KS\nng = KS-1\nwhile ok - ng > 1:\n    X = (ok+ng) // 2\n    last = [-1]*N\n    for i in range(M):\n        if last[T[i]] < D[i] < X:\n            last[T[i]] = D[i]\n    l2i = [[] for i in range(X)]\n    for i in range(N):\n        if last[i] != -1:\n            l2i[last[i]].append(i)\n    \n    buy = 0\n    now = 0\n    for i in range(X):\n        now += 1\n        for j in l2i[i]:\n            s = now if now < K[j] else K[j]\n            now -= s\n            buy += s\n    buy += now // 2\n\n    if buy >= KS:\n        ok = X\n    else:\n        ng = X\n\nprint(ok)\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    k = [int(x) for x in input().split()]\n\n    d = [[] for _ in range(4 * 10**5 + 1)]\n    for j in range(m):\n        dj, tj = map(int, input().split())\n        d[dj - 1].append(tj - 1)\n\n    lo, hi = 0, 4 * 10**5 + 1\n    while lo < hi:\n        mi = (hi + lo) // 2\n        cash = mi\n        offset = 0\n\n        _k = k[:]\n        for i in reversed(range(mi)):\n            for j in d[i]:\n                while cash and _k[j]:\n                    _k[j] -= 1\n                    cash -= 1\n            if cash == i + 1:\n                cash -= 2\n                offset += 1\n\n        if 2 * (sum(_k) - offset) <= cash:\n            hi = mi\n        else:\n            lo = mi + 1\n\n    print(lo)\n\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport bisect\nimport copy\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nK=[0]+list(map(int,input().split()))\nSP=[list(map(int,input().split())) for i in range(m)]\n\nSP2=[[] for i in range(n+1)]\n\nfor d,t in SP:\n    SP2[t].append(d)\n\nfor i in range(n+1):\n    SP2[i].sort()\n\nSUM=sum(K)\nMIN=SUM\nMAX=SUM*2\nMAXBUY=0\n\nwhile MIN!=MAX:\n    day=(MIN+MAX)//2\n\n    DAYS=[[] for i in range(day+1)]\n\n    for i in range(n+1):\n        x=bisect.bisect_right(SP2[i],day)-1\n        if x>=0:\n            DAYS[SP2[i][x]].append(i)\n\n    GOLD=0\n    SUMK=SUM\n    K2=copy.deepcopy(K)\n\n    for d in range(1,day+1):\n        GOLD+=1\n\n        for t in DAYS[d]:\n            DBUY=min(K2[t],GOLD,SUMK)\n            K2[t]-=DBUY\n            GOLD-=DBUY\n\n\n    if GOLD>=sum(K2)*2:\n        MAX=day\n    else:\n        MIN=day+1\n\nprint(MIN)\n\n\n\n\n        \n        \n", "import math\nfrom collections import defaultdict\nimport sys\n#input = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    sales = [(0, 0)] * m\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        sales[i] = (b, a)\n\n    def check(days):\n        last_sale = {}\n        for sale in sales:\n            if sale[1] <= days:\n                if sale[0] not in last_sale or sale[1] > last_sale[sale[0]]:\n                    last_sale[sale[0]] = sale[1]\n\n        date_last_sales = {}\n        for t, d in list(last_sale.items()):\n            if d not in date_last_sales:\n                date_last_sales[d] = [t]\n            else:\n                date_last_sales[d].append(t)\n\n        balance = 0\n        required = [0] + k.copy()\n\n        end = 0\n        for d in range(1, days+1):\n            balance += 1\n            if d in date_last_sales:\n                for t in date_last_sales[d]:\n                    if required[t] > 0:\n                        if required[t] > balance:\n                            end += required[t] - balance\n                        balance -= min(required[t], balance)\n                        required[t] = 0\n            if d == days:  # last day\n                for r in required:\n                    if r > 0:\n                        end += r\n\n        return 2*end <= balance\n\n    total = sum(k)\n    hi = 2*total\n    lo = 1\n\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if check(mid):\n            hi = mid\n        else:\n            lo = mid\n\n    if check(lo):\n        print(lo)\n    else:\n        print(hi)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport copy\n\nDEBUG = False\n\nif DEBUG:\n    inf = open(\"input.txt\")\nelse:\n    inf = sys.stdin\n\nN, M = list(map(int, inf.readline().split(' ')))\nn_items = list(map(int, inf.readline().split(' ')))\nsales = []\nfor _ in range(M):\n    sale = list(map(int, inf.readline().split(' ')))\n    sales.append(sale) # sale_day, sale_type\n\nsales = sorted(sales, key=lambda x: x[0], reverse=True) # sort by day\n\ndef can_buy_in(dday):\n    used = 0\n    money_left = dday\n    items = n_items[:]\n    for sale_day, sale_type in sales:\n        if sale_day > dday:\n            continue\n        \n        if money_left > sale_day:\n            money_left = sale_day\n        can_buy = min(items[sale_type-1], money_left)\n        # buy it\n        used += can_buy\n        items[sale_type-1] -= can_buy\n        money_left -= can_buy\n\n        if money_left == 0:\n            break\n    \n    need_money_for_rest = sum(items) * 2\n    return need_money_for_rest + used <= dday\n\ntotal_items = sum(n_items)\nlow = total_items\nhigh = total_items * 2\n\n# find minimum can_buy day\nwhile low <= high:\n    mid = (low + high) // 2\n    if can_buy_in(mid):\n        high = mid-1\n    else:\n        low = mid+1\n\nprint(low)", "#binary search reconstructure\n  \n\ndef BinarySearch(my_list,key):\n    l = 0\n    r = len(my_list)- 1 \n    #print(l,r)\n    while r > l :\n        mid = (l+r)//2\n        if my_list[mid+1] <= key :\n            l = mid + 1  \n        else :\n            r = mid   \n        #print(l,r)\n    return l\n\ndef weather_can_buy(day,total,req_list,sale_days):\n    tmp_buy = []\n    last_day = []\n    # money = day\n    # bug anything that is on sale\n    d = day\n    my_total = total\n    for i in range(len(req_list)) : \n        last_day.append(0)\n    for i in range(d):\n        tmp_buy.append(0)    \n    for i in range(len(sale_days)) : \n        if len(sale_days[i]) > 0 : \n            index = BinarySearch(sale_days[i],day)\n            last_day[i] = sale_days[i][index]\n    for i in range(len(last_day)) :\n        if last_day[i]-1 > -1 :\n            tmp_buy[last_day[i]-1] += req_list[i]\n    # buying\n    money = 0\n    for i in range(d):\n        money += 1\n        my_total -= min(money,tmp_buy[i])\n        money -= min(money,tmp_buy[i])        \n    if my_total < 0 :\n        return True\n    elif money >= my_total * 2:\n        return True\n    else :\n        return False\n    \ndef function():\n    tmp = input().split(\" \")\n    n = int(tmp[0]) # The number of type\n    m = int(tmp[1]) \n    req_list = input().split(\" \")\n    req_list = list(map(int,req_list)) \n    total = sum(req_list)\n    sale_days = []\n    # sale days for acceleration\n    for i in range(len(req_list)):\n        sale_days.append([0])  \n    for i in range(m) :\n        tmp = input().split(\" \")\n        dj,tj = (int(tmp[0]),int(tmp[1]))\n        sale_days[tj-1].append(dj)\n    for i in range(len(sale_days)) :\n        sale_days[i] = sorted(sale_days[i])\n    # optimized by sorting\n    for i in range(len(sale_days)) :\n        sale_days[i] = sorted(sale_days[i])     \n    #day = 0\n\n    l = 1\n    r = 2*total\n    while r > l :\n        mid = (l+r)//2\n        if weather_can_buy(mid,total,req_list,sale_days) :\n            r = mid\n        else :\n            l = mid + 1 \n    print(r)\n    \nfunction()\n", "def check(mid):\n\tl = [0 for i in range(n)]\n\tfor i in b:\n\t\tif(i[0] > mid): break\n\t\tl[i[1]-1] = i[0]\n\tv = [0 for i in range(mid+1)]\n\tfor i in range(n):\n\t\tv[l[i]] += a[i]\n\tct = 0\n\tfor i in range(1,mid+1):\n\t\tct += 1\n\t\tif(ct >= v[i]):\n\t\t\tct -= v[i]\n\t\t\tv[i] = 0\n\t\telse:\n\t\t\tv[i] -= ct\n\t\t\tct = 0\n\treturn ct >= 2*sum(v)\n\ndef bs():\n\tl = 0\n\tr = 5*10**5\n\twhile(l <= r):\n\t\tmid = (l+r)//2\n\t\tif(check(mid)):\n\t\t\tr = mid-1\n\t\telse:\n\t\t\tl = mid+1\n\treturn r+1\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nb = []\nfor i in range(m):\n\tb.append(list(map(int,input().split())))\nb.sort()\nprint(bs())", "import sys\ninput = sys.stdin.readline\ndef check(num):\n\tlast = [0 for i in range(n)]\n\tfor i in o:\n\t\tif i[0]>num:\n\t\t\tbreak\n\t\telse:\n\t\t\tlast[i[1]-1] = i[0]\n\tb = [0 for i in range(num+1)]\n\tfor i in range(n):\n\t\tb[last[i]] += a[i]\n\n\ti = 0\n\tc = 0\n\td = 0\n\tfor i in range(1,num+1):\n\t\tc += 1\n\t\tif(c >= b[i]):\n\t\t\tc -= b[i]\n\t\t\tb[i] = 0\n\t\telse:\n\t\t\tb[i] -= c\n\t\t\tc = 0\n\n\ts = sum(b)\n\tif s*2<=c:\n\t\treturn True\n\treturn False\n\n\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\no = []\nfor i in range(m):\n\tx,y = map(int,input().split())\n\to.append((x,y))\no.sort()\nlow = 1\nhigh = sum(a)*2\nwhile low<high:\n\tmid = (low+high)//2\n\tif check(mid):\n\t\thigh = mid - 1\n\telse:\n\t\tlow = mid + 1\nif check(low):\n\tprint (low)\nelse:\n\tprint (low+1)", "def check(x):\n    last=[0]*(n+1)\n    for i in tmp:\n        if i[0]>x:\n            break\n        else:\n            last[i[1]]=i[0]\n    sal=[0]*(x+1)\n    for i in range(1,n+1):\n        sal[last[i]]+=lis[i-1]\n    c=0\n    for i in range(1,x+1):\n        c+=1\n        if sal[i]>=c:\n            sal[i]-=c\n            c=0\n        else:\n            c-=sal[i]\n            sal[i]=0\n    if sum(sal)*2<=c:\n        return True\n    else:\n        return False        \nn,m = list(map(int,input().split()))\nlis = list(map(int,input().split()))\ntmp=[]\nfor _ in range(m):\n    a,b = list(map(int,input().split()))\n    tmp.append([a,b])\ntmp.sort()\nl=0\nr=sum(lis)*2\nwhile l<=r:\n    mid = l + (r-l)//2\n    if check(mid):\n        r = mid-1\n    else:\n        l = mid+1\nif check(r):\n    print(r)\nelif check(l):\n    print(l)\nelse:\n    print(l+1)    \n\n\n\n", "input=__import__('sys').stdin.readline\ndef check(x):\n    last=[0]*(n+1)\n    for i in tmp:\n        if i[0]>x:\n            break\n        else:\n            last[i[1]]=i[0]\n    sal=[0]*(x+1)\n    for i in range(1,n+1):\n        sal[last[i]]+=lis[i-1]\n    c=0\n    for i in range(1,x+1):\n        c+=1\n        if sal[i]>=c:\n            sal[i]-=c\n            c=0\n        else:\n            c-=sal[i]\n            sal[i]=0\n    if sum(sal)*2<=c:\n        return True\n    else:\n        return False        \nn,m = list(map(int,input().split()))\nlis = list(map(int,input().split()))\ntmp=[]\nfor _ in range(m):\n    a,b = list(map(int,input().split()))\n    tmp.append([a,b])\ntmp.sort()\nl=0\nr=sum(lis)*2\nwhile l<=r:\n    mid = l + (r-l)//2\n    if check(mid):\n        r = mid-1\n    else:\n        l = mid+1\nif check(r):\n    print(r)\nelif check(l):\n    print(l)\nelse:\n    print(l+1)    \n\n\n\n"]