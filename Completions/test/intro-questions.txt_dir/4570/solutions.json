["n, a, b = (int(n) for n in input().split())\nprint(min(n * a, b))", "N, A, B = map(int,input().split())\n\nif N*A > B:\n    print(B)\nelse:\n    print(N * A)", "N,A,B = list(map(int, input().split()))\n\nif N * A < B:\n    x = N * A\nelse:\n    x = B\nprint(x)\n", "# \u6570\u5024\u306e\u53d6\u5f97\nN,A,B = map(int,input().split())\n\n# \u6599\u91d1\u306e\u6700\u5b89\u5024\u3092\u51fa\u529b\nplan1 = A * N\nplan2 = B\nprint(min(plan1,plan2))", "n, a, b = list(map(int, input().split()))\nprint((min(a * n, b)))\n", "N,A,B = map(int,input().split())\nprint(min(N*A,B))", "n, a, b = list(map(int, input().split()))\nres = min(a * n, b)\nprint(res)\n", "N,A,B = map(int,input().split())\nif N*A >= B:\n    print(B)\nelse:\n    print(N*A)", "#ABC080A\nn,a,b = map(int,input().split())\nprint(min(a*n,b))", "n, a, b = map(int, input().split())\nprint(min(b, a * n))", "N, A, B = map(int, input().split())\n\nprint(min(N*A, B))", "n,a,b = map(int,input().split())\nprint(n*a if n*a < b else b)", "n,a,b=map(int,input().split())\nprint(min(a*n,b))", "N, A, B = map(int, input().split())\nprint(min(A*N, B))", "N, A, B = map(int, input().split())\n\nprint(min(A * N, B))", "N, A, B = list(map(int, input().split()))\n\nprint((min(N * A, B)))\n", "N, A, B = map(int, input().split())\nprint(min(N * A, B))", "N, A, B = list(map(int, input().split()))\nprint((min(N * A, B)))\n", "n,a,b=map(int,input().split())\nprint(min(a*n,b))", "n,a,b=map(int,input().split())\nprint(min(n*a,b))", "n, a, b = map(int, input().split())\nprint(min(n * a, b))", "N,A,B = list(map(int,input().split()))\nprice = [N * A, B]\nprint((min(price)))\n", "def iroha():\n    n,a,b=list(map(int, input().split()))\n    print((b if b <= a*n else a*n))\n\n\ndef __starting_point():\n    iroha()\n\n\n__starting_point()", "n, a, b = list(map(int, input().split()))\n\nprint((min(n * a, b)))\n", "t, a, b = map(int, input().split())\n\nplan1 = a * t\nplan2 = b\n\nprint(min(plan1, b))", "n,a,b=map(int,input().split(\" \"))\nprint(min(n*a,b))", "N, A, B = list(map(int, input().split()))\n\nprint((min(A * N, B)))\n", "N,A,B= map(int, input().split())\n\nif N * A < B:\n    print(N*A)\nelse:\n    print(B)", "n, a, b = map(int, input().split())\n\nif a * n <= b:\n    print(a * n)\nelse:\n    print(b)", "# 080_a\nN, A, B = map(int, input().split())\nif (1 <= N & N <= 20) & (1 <= A & A <= 100) & (1 <= B & B <= 2000):\n    p1 = A * N\n    p2 = B\n    print(min(p1, p2))", "N, A, B = map(int, input().split())\n\nprint(min(A*N, B))", "N, A, B = map(int, input().split())\n\nprint(min(N * A, B))", "n,a,b=map(int,input().split())\nprint(min(n*a,b))", "n, a, b = map(int, input().split())\nprint(min(a * n, b))", "#\n# abc080 a\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"7 17 120\"\"\"\n        output = \"\"\"119\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5 20 100\"\"\"\n        output = \"\"\"100\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"6 18 100\"\"\"\n        output = \"\"\"100\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, A, B = list(map(int, input().split()))\n    print((min(N*A, B)))\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef I():\n    # 1 line 1 int\n    return int(sys.stdin.readline().rstrip())\ndef LI():\n    # 1 line n ints\n    return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S():\n    # 1 line 1 string\n    return sys.stdin.readline().rstrip()\ndef LS():\n    # 1 line n strings\n    return list(sys.stdin.readline().rstrip().split())\n\nN, A, B = LI()\n\nx = A*N\ny = B\n\nif x <= y:\n    print(x)\nelse:\n    print(y)\n\n", "N, A, B = map(int,input().split())\n\nif A * N < B:\n    answer = A * N\nelse:\n    answer = B\nprint(answer)", "a, b, c = map(int, input().split())\nprint(min(a * b, c))", "n,a,b = map(int,input().split())\n\nprint(min(n*a,b))", "lst = input().split()\nprint(min([int(lst[0]) * int(lst[1]), int(lst[2])]))", "T,A,B = map(int, input().split())\nprint(min(T*A, B))", "a, b, c = list(map(int, input().split()))\nif a * b <= c:\n  print((a * b))\nelse:\n  print(c)\n", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, a, b = list(map(int, input().split()))\n\nprint((min(b, n*a)))\n", "n,a,b = map(int,input().split())\nprint(min(n*a,b))", "n, a, b = map(int, input().split())\nprint(min(n * a, b))", "N, A, B = map(int, input().split())\n\ns = N * A\nprint(min(s, B))", "N, A, B = map(int, input().split())\nprice = min(A * N, B)\nprint(price)", "n, a, b = map(int, input().split())\nif n * a > b:\n    print(b)\nelse:\n    print(n * a)", "a,b,c=map(int,input().split())\nprint(min(a*b,c))", "n,a,b = map(int,input().split())\n\nif a*n > b:\n  print(b)\n  \nelse:\n  print(a*n)", "def mapt(fn, *args):\n    return tuple(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    t, a, b = Input()\n    print(min(t*a, b))\n\n\nmain()", "\nn,a,b=list(map(int,input().split()))\n\nprint((min(n*a,b)))\n\n\n", "# 080a\n\ndef atc_080a(NAB: str) -> int:\n    N, A, B = map(int, NAB.split(\" \"))\n    return min(N * A, B)\n\nNAB = input()\nprint(atc_080a(NAB))", "# 080a\n\ndef atc_080a(NAB: str) -> int:\n    N, A, B = list(map(int, NAB.split(\" \")))\n    return min(N * A, B)\n\nNAB = input()\nprint((atc_080a(NAB)))\n", "parking_time, time_price, anytime_price = list(map(int, input().split()))\n\nmin_price_plan = min(parking_time * time_price, anytime_price)\n\nprint(min_price_plan)\n", "n, a, b = map(int, input().split())\nprint(min(a*n, b))", "n,a,b=map(int,input().split())\nprint(min(a*n,b))", "n,a,b=map(int,input().split())\n\nprint(min(a*n,b))", "n, a, b = map(int, input().split())\n\nplan1 = a * n\nplan2 = b\n\nprint(min(plan1, plan2))", "n,a,b=map(int,input().split())\nprint(min(n*a,b))", "n,a,b = map(int,input().split())\n\nif n * a < b:\n    x = n * a\nelse:\n    x = b\nprint(x)", "'''\n\u554f\u984c\uff1a\n    \u99d0\u8eca\u5834\u304c\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u4e8c\u7a2e\u985e\u306e\u30d7\u30e9\u30f3\u306e\u3069\u3061\u3089\u304b\u3092\u9078\u3093\u3067\u99d0\u8eca\u3067\u304d\u307e\u3059\u3002\n    \u30d7\u30e9\u30f3 1 : T\u6642\u9593\u99d0\u8eca\u3057\u305f\u5834\u5408\u3001A\u00d7T \u5186\u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002\n    \u30d7\u30e9\u30f3 2 : \u99d0\u8eca\u3057\u305f\u6642\u9593\u306b\u95a2\u308f\u3089\u305a B \u5186\u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002\n    N\u6642\u9593\u99d0\u8eca\u3059\u308b\u3068\u304d\u3001\u99d0\u8eca\u6599\u91d1\u306f\u6700\u5c0f\u3067\u3044\u304f\u3089\u306b\u306a\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n'''\n\n'''\n\u5236\u7d04\uff1a\n    1 \u2266 N \u2266 20\n    1 \u2266 A \u2266 100\n    1 \u2266 B \u2266 2000\n    \u5165\u529b\u306f\u5168\u3066\u6574\u6570\n'''\n\n# \u6a19\u6e96\u5165\u529b\u304b\u3089 N, A, B \u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\nn, a, b = list(map(int, input().split()))\n\nresult = [n * a, b] # \u7d50\u679c\u51fa\u529b\u7528\u306e\u30ea\u30b9\u30c8\n\nprint((min(result)))\n", "N, A, B = map(int, input().split())\n\n# \u30d7\u30e9\u30f3 1: T\u6642\u9593\u99d0\u8eca\u3057\u305f\u5834\u5408\u3001A \u00d7 T\u5186 \u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002\n# \u30d7\u30e9\u30f3 2: \u99d0\u8eca\u3057\u305f\u6642\u9593\u306b\u95a2\u308f\u3089\u305a B\u5186 \u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002\n# N\u6642\u9593\u99d0\u8eca\u3059\u308b\u3068\u304d\u3001\u99d0\u8eca\u6599\u91d1\u306f\u6700\u5c0f\u3067\u3044\u304f\u3089\u306b\u306a\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\nplan_A = A * N\nplan_B = B\n\nprint(min(plan_A, plan_B))", "a,b,c = map(int, input().split())\nprint(min(a * b, c))", "N, A, B = map(int, input().split())\nprint(min(N*A, B))", "n, a, b = map(int, input().split())\n\nprint(min(a * n, b))", "N, A, B = list(map(int, input().split()))\nif N * A >= B:\n    print(B)\nelse:\n    print((N * A))\n", "N, A, B = list(map(int, input().split()))\nprint((min(N * A, B)))\n", "# \u99d0\u8eca\u5834\u304c\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u4e8c\u7a2e\u985e\u306e\u30d7\u30e9\u30f3\u306e\u3069\u3061\u3089\u304b\u3092\u9078\u3093\u3067\u99d0\u8eca\u3067\u304d\u307e\u3059\u3002 \u30d7\u30e9\u30f3 1 : T \u6642\u9593\u99d0\u8eca\u3057\u305f\u5834\u5408\u3001 A \u00d7 T \u5186\u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002\n# \u30d7\u30e9\u30f3 2 : \u99d0\u8eca\u3057\u305f\u6642\u9593\u306b\u95a2\u308f\u3089\u305a B \u5186\u304c\u99d0\u8eca\u6599\u91d1\u3068\u306a\u308b\u3002 N \u6642\u9593\u99d0\u8eca\u3059\u308b\u3068\u304d\u3001\u99d0\u8eca\u6599\u91d1\u306f\u6700\u5c0f\u3067\u3044\u304f\u3089\u306b\u306a\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\nN,A,B = map(int,input().split())\n\nprint(min(N * A, B))", "N, A, B = map(int, input().split())\nprint(min(N * A, B))", "N, A, B, = map(int, input().split())\n\nprices = [A * N, B]\n\nprint(min(prices))", "\nN, A, B = map(int, input().split())\n\n\n\nplan_A = A * N\nplan_B = B\n\nprint(min(plan_A, plan_B))", "N, A, B = map(int, input().split())\n\nprint(min(N*A, B))", "# A - Parking\n# N A B\n\nN, A, B = list(map(int, input().split()))\n\n# A * N < B \u21d4 B\n\nif (N * A) < B:\n    print((N * A))\nelse:\n    print(B)\n", "N,A,B = list(map(int,input().split()))\n\nplan1 = N * A\nplan2 = B\n\nmin_plice = min(plan1,plan2)\nprint(min_plice)\n", "#080A\n# 1.\u5024\u3092\u6b63\u3057\u304f\u53d6\u5f97\na, b, c = (int(x) for x in input().split())\n\n# 2.\u6b63\u3057\u304f\u51e6\u7406\nplan1 = a * b\nplan2 = c\n\nresalt=[plan1,plan2]\n\nprint(min(resalt))", "N, A, B = list(map(int,input().split()))\n\npark_price = []\npark_price.append(N * A)\npark_price.append(B)\n\nanswer = min(park_price)\nprint(answer)\n", "n,a,b=map(int,input().split())\nprint(min(a*n,b))", "N,A,B=list(map(int,input().split()))\nif N*A>B:\n   print(B)\nelse:\n   print((N*A))     \n", "N, A, B = map(int, input().split())\nprint(min(A * N, B))", "n, a, b = map(int,input().split())\n\nplan_1 = n * a\n\nplan_2 = b\n\nif plan_1 < plan_2:\n    print(plan_1)\nelse:\n    print(plan_2)", "N, T, B = map(int,input().split())\n\nprint(min(N * T, B))", "time, normal_cost, unlimited_cost = list(map(int, input().split()))\nif normal_cost * time < unlimited_cost:\n    total_cost = normal_cost * time\nelse:\n    total_cost = unlimited_cost\nprint(total_cost)\n", "N, A, B = map(int,input().split())\n\nif N * A >= B :\n    print(B)\nelse:\n    print(N * A)", "t, a, b = map(int, input().split())\nprint((min(a * t, b)))", "# N\u6642\u9593\u99d0\u8eca\u3057\u305f\u6642\u306e\u6700\u5c0f\u6599\u91d1\u3092\u6c42\u3081\u308b\n\nN, A, B = list(map(int, input().split()))\n\nfee = [N * A, B]\nprint((min(fee)))\n", "N, A, B = map(int, input().split())\n\nprint(min(A * N, B))", "N, A, B = map(int, input().split())\n\nif A * N < B:\n    print(A * N)\nelse:\n    print(B)", "n, a, b = map(int, input().split())\nprint(min(n*a, b))", "n, a, b = map(int, input().split())\nc = n * a\nif c  > b:\n    print(b)\nelse:\n    print(c)", "n,a,b=map(int,input().split())\nprint(min(n*a,b))", "# A - Parking\n# https://atcoder.jp/contests/abc080/tasks/abc080_a\n\nn, a, b = list(map(int, input().split()))\n\nplan = [n * a, b]\nprint((min(plan)))\n", "n,a,b = map(int,input().split())\nprint(min((n*a,b)))", "n,a,b=map(int,input().split())\nprint(min(n*a,b))", "N,A,B=list(map(int,input().split()))\nprint((min(A*N,B)))\n", "#https://atcoder.jp/contests/abc080/tasks/abc080_a\nS_list = list(map(int,input().split()))\nN,A,B = S_list\nif N * A > B:\n    result = B\nelse:\n    result = N * A\nprint(result)", "n, a, b = map(int, input().split())\n\nprint(min(n*a, b))", "N,A,B = map(int,input().split())\n\nplan1 = N * A\nplan2 = B\n\nprint(min(plan1,plan2))", "import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef I():\n    #1 line 1 int\n     return int(sys.stdin.readline().rstrip())\ndef LI():\n    #1 line n int\n     return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S():\n    #1 line 1 string\n     return sys.stdin.readline().rstrip()\ndef LS():\n    #1 line n strings\n     return list(sys.stdin.readline().rstrip().split())\n\nN,A,B=LI()\nx=N*A\ny=B\n\nif x <= y:\n    print(x)\nelse:\n    print(y)"]