["n=int(input())\nstring_list=[input() for i in range(n)]\ncount = len(set(string_list))\nprint(count)", "def resolve():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    print(len(set(s)))\nresolve()", "N = int(input())\nmyset = set([])\nfor i in range(N):\n  S = input()\n  myset.add(S)\nprint((len(myset)))\n", "N,*S=open(0);print(len(set(S)))", "N = int(input())\n\nmono = []\n\nfor i in range(N):\n  S = input()\n  mono.append(S)\n\nprint((len(set(mono))))\n", "n = int(input())\n\n\nl = []\nfor i in range(n):\n    x =input() \n    l.append(x)\n    \ns = set(l)    \n\nprint(len(s))", "N = int(input())\ns = [0] * N\n\nfor i in range(N):\n    s[i] = input()\n\n\nd = set()\nfor v in s:\n    d.add(v)\n\nprint((len(d)))\n\n", "n = int(input())\n\nans = []\n\nfor i in range(n):\n    ans.append(input())\n\nprint(len(set(ans)))", "import collections\n\nN = int(input())\nS = [input() for _ in range(N)]\n\nc = collections.Counter(S)\n\nprint(len(list(c.keys())))", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\nS = [input() for j in range(n)] # n\u306f\u884c\u6570\n\ntmp = 0\nres = 0\n\ntmp = Counter(S)\nres = len(tmp)\n\nprint(res)\n", "n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\nprint(len(set(s)))", "N = int(input())\nse = set()\nfor i in range(N):\n    set.add(se, input())\nprint((len(se)))\n", "import sys\n\nN = int(input())\nreward = set()\nfor i in range(N):\n    S = input()\n    reward.add(S)\n\nprint(len(reward))", "from typing import Set\n\n\ndef answer(n: int, s: Set[str]) -> int:\n    return len(s)\n\n\ndef main():\n    n = int(input())\n    s = set(input() for _ in range(n))\n    print((answer(n, s)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nS = set()\nfor _ in range(N):\n    S.add(input())\nprint(len(S))\nreturn", "def i_input(): return int(input())\n\n\ndef i_map(): return list(map(int, input().split()))\n\n\ndef i_list(): return list(map(int, input().split()))\n\n\ndef i_row(N): return [int(input()) for _ in range(N)]\n\n\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\n\n\nn = i_input()\nss=[input() for _ in range(n)]\npr=set(ss)\nprint((len(pr)))\n\n", "print(len(set([input() for i in range(int(input()))])))", "N = int(input())\nS = set(input() for i in range(N))\n\nprint(len(S))", "N = int(input())\nS = [input() for i in range(N)]\n\nS = set(S)\n\nprint(len(S))", "N = int(input())\nS = []\nfor i in range(N):\n    s = str(input())\n    S.append(s)\n\nT = set(S)\nprint(len(T))", "n = int(input())\nprint(len(set([input() for i in range(n)])))", "N = int(input())\ngacha = set()\nfor _ in range(N):\n  gacha.add(input())\nprint(len(gacha))", "n = int(input())\nL = list(input() for _ in range(n))\nUL = set(L)\nprint(len(UL))", "N=int(input())\nS=[]\nfor i in range(N):\n    S.append(input())\nS=set(S)\nprint(len(S))", "n = int(input())\nl=[]\nfor i in range(n):\n  l.append(input())\nl=set(l) \nprint(len(l))", "n = int(input())\na = []\n\nfor i in range(n):\n    a.append(input())\n\na.sort()\nans = 1\n\nfor i in range(n-1):\n    if a[i] != a[i+1]:\n        ans += 1\n\nprint(ans)\n", "# ABC 164 C\nN = int(input())\ndic = {}\nfor i in range(N):\n    s = str(input())\n    if s not in dic:\n        dic[s] = 'o'\nprint(len(dic))", "def __starting_point():\n\n    n = int(input())\n    ans = set()\n    for s in range(n):\n        cmd = input()\n        ans.add(cmd)\n    print((len(ans)))\n\n__starting_point()", "N = int(input())\n\nword_list = []\n\nfor i in range(N):\n    word_list.append(input())\n\nprint(len(set(word_list)))", "N=int(input());print(len(set(input()for _ in[0]*N)))", "n=int(input())\na=set()\nfor i in range(n):\n    b=input()\n    a.add(b)\nprint(len(a))", "N = int(input())\nS = []\nfor i in range(N):\n    S.append(str(input()))\n\nS.sort()\nans = 1\nfor i in range(N-1):\n    if S[i] != S[i+1]:\n        ans += 1\n\nprint(ans)\n\n", "print(len(set(input() for _ in range(int(input())))))", "N = int(input())\nse = set()\nfor i in range(N):\n    se.add(input())\nprint((len(se)))\n", "n = int(input())\ns = [''] * n\nfor i in range(n):\n    s[i] = input()\nprint((len(set(s))))\n", "n = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nprint(len(set(s)))", "n = int(input())\ns = [input() for i in range(n)]\n\ns = set(s)\nprint((len(s)))\n", "N = int(input())\nd = {}\n\nfor i in range(N):\n    d[input()] = 1\n\nprint(len(d))", "import collections\n\nn = int(input())\n\nss = [input() for i in range(n)]\nc = collections.Counter(ss)\nprint(len(c))", "n = int(input())\ns = set()\nfor i in range(n):\n  s.add(input())\nprint((len(s)))\n", "N = int(input())\narray = [input() for i in range(N)]\narray = set(array)\nprint( len(array) )", "n = int(input())\nkeihin = {}\nfor i in range(n):\n    moji = str(input())\n    keihin.setdefault(moji,0)\n    keihin[moji]+=1\nprint(len(keihin.keys()))", "N = int(input())\nS = [None] * N\nfor i in range(N):\n    S[i] = input()\n\nS = set(S)\nprint((len(S)))\n", "from collections import Counter\n\nN = int(input())\nS = []\n\nfor i in range(N):\n    s = input()\n    S.append(s)\n\nS = Counter(S)\nprint(len(S))", "N = int(input())\nS = [str(input()) for i in range(N)]\ngocha = {}\nfor s in S:\n  gocha[s] = 1\nprint(len(gocha))", "#ABC164\nN=int(input())\na = []\nfor i in range(N):\n    a_temp = input()\n    a.append(a_temp)\nprint(len(set(a)))", "N = int( input() )\n\ndics = {}\n\nfor _ in range(N):\n  s = input()\n  if s in dics:\n    dics[s] += 1\n  else:\n    dics[s] = 1\nprint( len( dics.keys() ) )", "n = int(input())\ns = [input() for _ in range(n)] #\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\n\nss = set(s)\nans = len(ss)\nprint(ans)", "N = int(input())\npriseset = set()\nfor i in range(N):\n    prise = input()\n    priseset.add(prise)\nprint(len(priseset))", "def main():\n    n = int(input())\n    seen = []\n    for i in range(n):\n        item = input()\n        seen.append(item)\n    return len(list(set(seen)))\n\n\ndef __starting_point():\n    print((main()))\n\n__starting_point()", "n = int(input())\ngacha = set()\n\nfor i in range(n):\n  s = input()\n  gacha.add(s)\n\nprint((len(gacha)))\n", "N = int(input())\nS = set()\nfor _ in range(N):\n  s = input()\n  S.add(s)\nprint(len(S))", "n = int(input())\nl=[]\nfor i in range(n):\n  l.append(input())\nl=set(l) \nprint(len(l))", "n = int(input())\ndic = {}\nans = 0\n\nfor _ in range(n):\n  x = input()\n  if x not in dic:\n    ans += 1\n    dic[x] = 1\n\n\nprint(ans)", "n = int(input())\n\ns = [input() for _ in range(n)]\n\nprint((len(set(s))))\n\n", "n = int(input())\na = set()\nfor i in range(0, n):\n    lst = input()\n    a.add(lst)\n\nprint(len(a))", "import numpy as np\n\nN = int(input())\ndata_list = []\nfor i in range(N):\n    si = input()\n    data_list.append(si)\n\ndata_list = np.array(data_list)\nprint((len(np.unique(data_list))))\n\n", "n = int(input())\ns = [input() for _ in range(n)]\n\nprint((len(list(set(s)))))\n", "N = int(input())\n\nprise = []\nfor _ in range(N):\n    prise.append(input())\n\nprise = list(set(prise))\nprint(len(prise))", "def gacha():\n    N = int(input())\n    S = {input() for i in range(N)}\n    print(len(S))\n\ngacha()", "N = int(input())\n\n\nset_list = {}\n\nfor i in range(N):\n    s = input()\n    set_list[s] = True\nprint(len(set_list.keys()))", "n = int(input())\ns = set()\nfor i in range(n):\n  s.add(input())\nprint(len(s))", "def __starting_point():\n\n    n = int(input())\n    A = []\n\n    for _ in range(n):\n        A.append(input())\n\n    A.sort()\n\n    ans = 1\n    for i in range(n-1):\n        if A[i] != A[i+1]:\n            ans += 1\n    print(ans)\n\n__starting_point()", "n = int(input())\n\nl = [''] * n\n\nfor i in range(n):\n    l[i] = input()\n\nprint((len(list(set(l)))))\n", "N = int(input())\nS = {input() for _ in range(N)}\n\nprint((len(S)))\n", "n = int(input())\nd = {}\nfor _ in range(n):\n    s = input()\n    if not s in d.keys():\n        d[s] = 1\nprint(len(d))", "# C\nfrom collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncounter = Counter(S)\n\nprint((len(list(counter.keys()))))\n\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    D = defaultdict(int)\n    ans  = 0\n    for i in range(N):\n        temp = input().rstrip()\n        if D[temp] == 0:\n            D[temp]=1\n            ans += 1\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = {}\nfor i in range(n):\n    s = input()\n    if s not in a:\n        a[s] = 1\n    else:\n        a[s] += 1\nprint(len(a))", "N = int(input())\nans = set()\nfor i in range(N):\n  ans.add(input())\nprint(len(ans)) ", "import collections\nN = int(input())\na = [input() for i in range(N)]\nc = collections.Counter(a)\nprint((len(c)))\n", "N = int(input())\nS = set([input() for _ in range(N)])\n\nprint(len(S))", "n=int(input())\na=[]\nfor i in range(n):\n    s=input()\n    a.append(s)\nb=set(a)\nprint(len(b))", "n = int(input())\nunique_items = set()\nfor i in range(n):\n    s = input()\n    unique_items.add(s)\nprint((len(unique_items)))\n", "N = int(input())\nS = []\nfor i in range(N):\n  s = str(input())\n  S.append(s)\nT = set(S)\nprint(len(T))", "N = int(input())\nS = sorted([input() for _ in range(N)])\nans = 1\nfor i in range(N-1):\n    if(S[i] != S[i+1]):\n        ans += 1\nprint(ans)", "N=int(input())\ns=set()\nfor _ in range(N):\n    S=input()\n    s|={S}\nprint((len(s)))\n", "n = int(input())\nans = set()\nfor i in range(n):\n  ans.add(input())\nprint(len(ans))", "N = int(input())\nS = set()\ncount = 0\nfor _ in range(N):\n    s = input()\n    S.add(s)\nprint(len(S))", "n=int(input())\nl=[]\nfor i in range(n):\n    l.append(input())\n    \nprint(len(set(l)))", "N = int(input())\nS = [input() for _ in range(N)]\n\ndic = {}\nfor i in range(N):\n    dic[S[i]] = 0\n\nprint((len(list(dic.keys()))))\n", "n= int(input())\nresult_dict = {}\nfor i in range(n):\n    n = input()\n    if n in result_dict.keys():\n        result_dict[n] += 1\n    else:\n        result_dict[n] = 0\nprint(len(result_dict.keys()))", "n = int(input())\nans = set()\nfor _ in range(n):\n  ans.add(input())\nprint(len(ans))", "N=int(input())\nS=[input() for i in range(N)]\nprint(len(set(S)))", "n=int(input())\ns=[input() for _ in range(n)]\ns.sort()\ncount=1\nfor i in range(n-1):\n  if s[i]!=s[i+1]:\n    count+=1\nprint(count)", "n = int(input())\ns = [input() for i in range(n)]\n\na = set(s)\nprint((len(a)))\n", "N = int(input())\nS = [input() for i in range(N)]\nlist(set(S))\nprint(len(set(S)))", "n=int(input())\ns=[input() for i in range(n)]\n\ns=set(s)\ns=list(s)\nprint(len(s))", "n=int(input())\ns=set()\nfor i in range(n):\n  s.add(input())\n\nprint(len(s))", "N = int(input())\nS = [input() for _ in range(N)]\n\nprint(len(set(S)))", "n=int(input())\na=set()\nfor i in range(n):\n    b=input()\n    a.add(b)\nprint(len(a))", "n = int(input())\nd = {}\nfor i in range(n):\n    s = input()\n    d[s] = d.get(s, 0) + 1\nprint(len(d))", "n = int(input())\ns = [input() for i in range(n)]\nans = set(s)\nprint(len(ans))", "from collections import Counter\n\nn = int(input())\n\nstring = [input() for i in range(n)]\n\nstring.sort()\n\ni = Counter(string)\n\nprint((len(i)))\n", "n=int(input())\nS=[]\nfor i in range(n):\n    S.append(input())\nprint((len(list(set(S)))))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nN = ni()\nd = {}\nfor i in range(N):\n    S = ns()\n    if S not in d.keys():\n        d[S] = 1\n    else:\n        d[S] += 1\nprint(len(d))", "N = int(input())\nS = []\nfor _ in range(N):\n    S.append(input())\nans = set(S)\nprint(len(ans))", "n = int(input())\ns = list(input() for _ in range(n))\nkeihin = set()\nfor i in s:\n    keihin.add(i)\nprint(len(keihin))"]