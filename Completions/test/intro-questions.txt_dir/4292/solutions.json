["n = [ int(i) for i in  input().split() ]\np = [ int(i) for i in input().split() ]\n\np = sorted(p)\nval = sum( p[:n[1]] )\nprint(val)\n\n\n\n", "N, K = [int(i) for i in input().split(' ')]\np = [int(i) for i in input().split(' ')]\np.sort()\nprint(sum(p[:K]))", "a = list(map(int,input().split()))\n\nN = a[0]\nK = a[1]\n\np = list(map(int,input().split()))\n\np.sort()\nen = 0\n\nfor i in range(0,K):\n\ten += p.pop(0)\nprint(en)", "n,k = map(int, input().split())\nprice = list(map(int, input().split()))\ncount = 0\nsum = 0\n\nwhile count < k:\n  abc = min(price)\n  sum += abc\n  price.pop(price.index(abc))\n  count += 1 \n  \nprint(sum)", "N, K = map(int, input().split())\n\np = list(map(int,  input().split()))\n\nprint(sum(sorted(p)[:K]))", "N, K = list(map(int, input().split()))\nps = list(map(int, input().split()))\nprint((sum(sorted(ps)[:K])))\n", "n, k = list(map(int, input().split()))\np = sorted(map(int, input().split()))\nprint((sum(p[:k])))\n", "N,K=map(int,input().split())\npoe=list(map(int,input().split()))\npoe=sorted(poe)\n\nprint(sum(poe[:K]))", "\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(map(int, input().split()))\ndef i_row(N): return [int(input()) for _ in range(N)]\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\n\nn,k=i_map()\npp=i_list()\npp.sort()\nans=0\nfor i in range(k):\n    ans+=pp[i]\nprint(ans)", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\nprice = 0\nfor i in range(k) :\n    price += l[i]\nprint(price)", "_, k = input().split()\nk = int(k)\np = sorted(list(int(i) for i in input().split()))\nprint(sum(p[0:k]))", "n, k = list(map(int, input().split()))\np = list(map(int, input().split()))\np.sort()\nprint((sum(p[:k])))\n", "n = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\n\np = sorted(p)\nval = sum(p[:n[1]])\nprint(val)\n\n", "N,K=map(int,input().split())\np=list(map(int,input().split()))\np.sort()\nprint(sum(p[:K]))", "n, k = map(int, input().split())\nppp = list(map(int, input().split()))\nppp.sort()\nprint(sum(ppp[:k]))", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\n# print(l)\nl=sorted(l)[:k]\nprint(sum(l))", "N, K = list(map(int, input().split()))\nP = list(map(int, input().split()))\n\nprint((sum(sorted(P)[:K])))\n", "N, K = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nprint(sum(p[:K]))", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\nP.sort()\nprint(sum(P[:K]))", "a = list(map(int,input().split()))\nN = a[0]\nK = a[1]\np = list(map(int,input().split()))\n\np.sort()\nx = 0\n\nfor i in range(K):\n    x += p[i]\nprint(x)\n", "n, k = map(int, input().split( ))\np = list(map(int, input().split( )))\np.sort()\nans = 0\nfor i in range(k):\n    ans += p[i]\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(1000000)\nfrom collections import deque\n\n#\u00a0\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nN, K = list(map(int, input().split()))\n#\u914d\u5217\u306e\u5165\u529b\ndata = list(map(int, input().split()))\n\ndata.sort()\n\nans = 0\nfor i in range(K):\n    ans += data[i]\n\nprint(ans)\n", "n,k=map(int,input().split())\nl=sorted(list(map(int,input().split())))[:k]\nprint(sum(l))", "N, K = map(int, input().split())\nfruit = input().split()\n#print(fruit)\nfruit = [int(x) for x in fruit]\n#print(fruit)\nfruit.sort()\n#print(fruit)\nprint(sum(fruit[:K]))", "n,k=map(int,input().split())\na=sorted([int(x) for x in input().split()])\nprint(sum(a[:k]))", "n,k=map(int, input().split())\np=list(map(int ,input().split()))\np=sorted(p)\nprice=0\nfor i in range(k):\n    price+=p[i]\nprint(price)", "n,k=list(map(int,input().split()))\np=list(map(int,input().split()))\np.sort(reverse=False)\nans=0\nfor i in range(k):\n    ans+=p[i]\nprint(ans)\n\n\n", "N, K = map(int, input().split())\np = sorted(list(map(int, input().split())))\nprint(sum(p[:K]))", "n,k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort()\nans = 0\nfor i in range(k):\n  ans += l[i]\nprint(ans)", "n, k = map(int, input().split())\nP = list(map(int, input().split()))\n\nP.sort()\n\nans = 0\n\nfor i in range(k):\n    x = P[i]\n    ans += x\n\nprint(ans)", "a,b = map(int, input().split())\nc = list(map(int, input().split()))\nc.sort()\nprint(sum(c[0:b]))", "n,k=map(int,input().split())\np=list(map(int,input().split()))\np.sort()\nprint(sum(p[:k]))", "N = list(map(int,input().split()))\nP = list(map(int,input().split()))\nprint(sum(sorted(P)[:N[1]]))", "n, k = list(map(int, input().split()))\np = list(map(int, input().split()))\np.sort()\nprint((sum(p[0:k])))\n", "from typing import List\n\n\ndef answer(n: int, k: int, p: List[int]) -> int:\n    return sum(sorted(p)[:k])\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    print((answer(n, k, p)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nn, k = list(map(int, input().split()))\nfruits = np.array(input().split(),dtype=np.int64)\nfruits.sort()\nans = 0\ncnt = 0\nfor i in fruits:\n    if(cnt < k):\n        ans += i\n        cnt += 1\nprint(ans)\n", "#                               #\n    # author : samars_diary #\n    # 18-09-2020 \u2502 15:02:48 #\n#                               #\n\nimport sys, os.path\n\n#if(os.path.exists('input.txt')):\n    #sys.stdin = open('input.txt',\"r\")\n    #sys.stdout = open('output.txt',\"w\")\n\nsys.setrecursionlimit(10 ** 5)\n\ndef mod(): return 10**9+7\ndef i(): return sys.stdin.readline().strip()\ndef ii(): return int(sys.stdin.readline())\ndef li(): return list(sys.stdin.readline().strip())\ndef mii(): return map(int, sys.stdin.readline().split())\ndef lii(): return list(map(int, sys.stdin.readline().strip().split()))\n\n#print=sys.stdout.write\n\ndef solve():\n    n,k=mii();b=0;a=sorted(lii())\n    for i in range(k):\n        b+=a[i]\n    print(b)\n\nfor _ in range(1):\n    solve()", "n, k = list(map(int, input().split()))\npArr = list(map(int, input().split()))\n\npArr.sort()\nans = 0\nfor i in range(k):\n  ans += pArr[i]\n\nprint(ans)\n", "N,K = map(int,input().split())\np = list(map(int,input().split()))\nP = p.sort()\nans = sum(p[:K])\nprint(ans)", "import numpy as np\nd = [int(x) for x in input().split(\" \")]\nK = d[1]\n\nd = np.array([int(x) for x in input().split(\" \")])\n\nprint((np.sort(d)[:K].sum()))\n\n", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\nP = sorted(P)\nans = sum(P[0:K])\nprint(ans)", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\nN, M = I()\nA = l()\nA.sort()\n \nans = 0\n \nfor i in range(M):\n    ans += A[i]\n \nprint(ans)", "N,K = map(int,input().split())\nfruit = [int(i) for i in input().split()]\n\nfruit.sort()\nprice = 0\nfor i in range(N) :\n    if i>K-1 :\n        break\n    price += fruit[i]\n    \nprint(price)", "n, k = list(map(int,input().split()))\n\np = list(map(int,input().split()))\n\nans = 0\n\nl = list()\n\nfor i in range(k):\n    l.append(min(p))\n    p.remove(min(p))    \n\nans = sum(l)\n\nprint(ans)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#import sympy\n#from scipy.sparse.csgraph import breadth_first_order, depth_first_order, shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nN, K = na()\np = na()\nprint((sum(sorted(p)[:K])))\n", "from itertools import accumulate\n\nN, K = map(int, input().split())\nP = [0] + list(accumulate(sorted(map(int, input().split()))))\n\nprint(P[K])", "n= [ int(i) for i in input().split() ]\np= [ int(i) for i in input().split() ]\n\np = sorted(p)\nval = sum( p[ :n[1]])\n\nprint(val)", "foo = list(input().split())\nK = int(foo[1])\nP = sorted(map(int,list(input().split())))\ni=0\ntotal = int(0)\nwhile i < K:\n    total = total + int(P[i])\n    i+=1\nprint(total)", "import itertools\n[N, K] = [int(i)  for i in input().split()]\nprice = [int(i)  for i in input().split()]\nprice.sort()\nsum = 0\nfor i in range(K):\n    sum += price[i]\nprint(sum)", "n, k = list(map(int, input().split()))\n\nans = 0\n\nprice_list = list(map(int, input().split()))\nprice_list.sort()\n\nfor i in range(k):\n    ans += price_list[i]\n\nprint(ans)\n", "N, K = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\nprint(sum(prices[:K]))", "N,K=map(int,input().split())\nX=list(map(int,input().split()))\nX.sort()\nprint(sum(X[0:K]))", "N, K = map(int,input().split())\np = list(map(int,input().split()))\nres_list = []\n\nfor i in p:\n    r = int(i)\n    res_list.append(r)\n\nres_list.sort()\nprint(sum(res_list[0:K]))", "n,k = map(int,input().split())\np = list(map(int,input().split()))\np.sort()\nans = 0\nfor i in range(k):\n    ans += p[i]\nprint(ans)", "N,K = map(int, input().split())\nprice = list(map(int, input().split()))\nprice.sort()\nsum = 0\nfor i in range(K):\n\tsum += price[i]\nprint(sum)", "N, K = [int(x) for x in input().split()]\n\n\np = [int(x) for x in input().split()]\np.sort()\n\nans = 0\nfor i in range(K):\n    ans += p[i]\nprint(ans)\n", "I=lambda:map(int,input().split());_,k=I();print(sum(sorted(I())[:k]))", "n,k=map(int,input().split())\np=list(map(int,input().split()))\np.sort()\nprint(sum(p[:k]))", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn, k = [int(i) for i in input().split()]\nP = [int(i) for i in input().split()]\n\ntmp = 0\nres = 0\n\nP = sorted(P)\nres = sum(P[:k])\n\nprint(res)\n", "k=int(input().split()[1])\nprint(sum(sorted(map(int,input().split()))[:k]))", "n, k = map(int, input().split())\nP = list(map(int, input().split()))\nP.sort()\nprint(sum(P[:k]))", "n, m = map(int, input().split())\np = list(map(int,input().split()))\np.sort()\n\nans = 0\n\nfor i in range(m):\n  ans += p[i]\n  \nprint(ans)", "k, n = list(map(int,input().split()))\nx =list(map(int,input().split()))\nx.sort()\nsum=0\nfor i in range(n):\n        p=x[i]\n        sum +=p\nprint(sum)\n", "n, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\ns = 0\nfor i in range(k):\n    s += p[i]\nprint(s)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncount = 0\nfor i in range(k):\n    count += a[i]\n\nprint(count)", "k, n = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nans = 0\nfor i in range(n):\n    ans += p[i]\nprint(ans)", "n, k = list(map(int, input().split()))\np = list(map(int, input().split()))\np.sort()\nprint((sum(p[:k])))\n", "n,k=map(int,input().split())\nprint(sum(sorted(list(map(int,input().split())))[:k]))", "#https://atcoder.jp/contests/abc171/tasks/abc171_b\n\nn, k= list(map(int, input().split()))\n\nb= list(map(int, input().split()))\nb.sort()\n\nd= 0\nfor a in range(k):\n    d= d+ b[a]\n\nprint(d)\n", "n,k = map(int,input().split())\nli = list(map(int,input().split()))\nli.sort()\nsum = 0\nfor i in range(k):\n    sum += li[i]\nprint(sum)", "n,k = map(int,input().split())\n\np = map(int,input().split())\n\nsp = sorted(p)\n\nscore = 0\n\nfor i in range(k):\n    score += sp[i]\n\nprint(score)", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n\np = sorted(p)\nprint(sum(p[:K]))\nreturn", "N,K = map(int,input().split())\n\np=list(map(int,input().split()))\np.sort()\n\nsum = 0\n\nfor i in range(K):\n    sum += p[i]\n    \n    \nprint(sum)", "_,K=map(int,input().split());*P,=map(int,input().split());P.sort();print(sum(P[:K]))", "n, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nans = 0\nfor i in range(k):\n    ans += p[i]\nprint(ans)", "n, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort()\nresult = 0\nfor data in range(k):\n    result += l[data]\nprint(result)\n", "n,k = list(map(int,input().split()))\np = list(map(int,input().split()))\n\np.sort()\nprint((sum(p[:k])))\n", "N, K = map(int, input().split())\nP = list(map(int, input().split()))\nassert len(P) == N\n# 1 <= K <= N <= 1000\nP = sorted(P)\nprint(sum(P[:K]))", "a, b = map(int, input().split())\nN = sorted(list(map(int, input().split())))\nprint(sum(N[0:b]))", "n, k = map(int ,input().split())\n\np = list(map(int, input().split()))\n\nprint(sum(sorted(p)[:k]))", "N, K = list(map(int, input().split()))\nl = list(map(int, input().split()))\nS = sorted(l)\nsums = sum(S[:K])\nprint(sums)\n", "n, k = map(int, input().split())\npp = list(map(int, input().split()))\nsp = sorted(pp)\nans = sum(sp[:k])\nprint(ans)", "numline=input().split(\" \")\na=int(numline[0])\nb=int(numline[1])\n\nnumline=input().split(\" \")\nnumlis=[]\nfor i in range(a):\n    numlis.append(int(numline[i]))\n\nnumlis.sort()\n\nresult=0\nfor i in range(b):\n    result+=numlis[i]\n\nprint(result)", "N,K=(int(x) for x in input().split())\n\np=list(map(int,input().split()))\n\nans=0\np.sort()\n\nfor i in range(0,K):\n\tans+=p[i]\n\nprint(ans)", "a,b = map(int,input().split())\ns = list(map(int,input().split()))\nw = []\n\nfor i in range(b):\n    w.append(min(s))\n    s.remove(min(s))\n\nprint(sum(w))", "N,K = list(map(int,input().split()))\nP = sorted((list(map(int,input().split()))))\nprint((sum(P[:K])))\n", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n\np.sort()\n\nprint(sum(p[:K]))", "import numpy as np\nN, K = map(int, input().split())\np = list(map(int, input().split()))\n\nprint(np.sum(sorted(p)[:K]))", "N, K = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\nsum_p = 0\nfor i in range(K):\n    sum_p += p[i] \n\nprint(sum_p)", "N,K = map(int,input().split())\np = list(map(int,input().split()))\nsp = sorted(p)\ngoukei = 0\n\nfor i in range(K):\n  goukei += sp[i]\n\nprint(goukei)", "N,K = map(int,input().split())\np = sorted([int(i) for i in input().split()])\nans = 0\nfor i in range(K):\n    ans += p[i]\nprint(ans)", "n = input().split()\np = input().split()\n\nn = [int(i) for i in n]\np = [int(i) for i in p]\np = sorted(p)\n\nnum = n[1]\n\ntotal = p[0:num]\ntotal_price =sum(total)\n\n\nprint(total_price)", "N,K=(int(x) for x in input().split())\np=list(map(int,input().split()))\np.sort()\nprint(sum(p[:K]))", "n, k = map(int, input().split())\np = [int(i) for i in input().split()]\n\np = sorted(p)\nprint(sum(p[:k]))", "n, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nprint(sum(p[:k]))", "n, need = map(int,input().split())\nli = list(map(int,input().split()))\nli.sort()\nans = 0\n\nfor i in range(need):\n    ans += li[i]\n    \nprint(ans)", "n, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort()\nsm = 0\nfor i in range(k):\n    sm += l[i]\nprint(sm)\n", "n,k=  input().split()\np= [ int(i) for i in input().split() ]\n\nint_k=int(k)-1\n\np = sorted(p)\nprint((sum(p[0:int(k)])))\n", "N, K = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np = sorted(p)\n\nprint((sum(p[:K])))\n", "n,k=map(int, input().split())\np=list(map(int, input().split()))\np.sort()\nprint(sum(p[:k]))"]