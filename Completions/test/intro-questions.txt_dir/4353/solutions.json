["print(' '.join(input().split(',')))", "s = input().split(\",\")\n\nprint(\" \".join(s))", "s = input()\nprint((s.replace(',', ' ')))\n", "a,b,c=input().split(',')\nprint('%s %s %s'%(a,b,c))", "n = input()\nprint(n.replace(\",\", \" \"))", "S = input()\nprint(S[0:5], S[6:13], S[14:19])", "s=input()\nprint(s.replace(\",\",\" \"))", "print(input().replace(',',' '))", "print(input().replace(\",\", \" \")) ", "x,y,z = input().split(\",\")\nprint(x,y,z)", "s = input()\nprint(s.replace(',', ' '))", "s1, s2, s3 = input().split(\",\")\nprint(s1, s2, s3)", "#51\ndata=input().split(',')\nprint(data[0]+' '+data[1]+' '+data[2])", "x,y,z =input().split(\",\")\nprint(x,y,z)", "a,b,c = input().split(\",\")\n\nprint(\" \".join([a,b,c]))", "s=input().split(\",\")\nprint(*s,sep=\" \")", "a = input()\nprint(a.replace(',',' '))", "str=input()\nprint((str.replace(\",\",\" \")))\n", "string = input()\n\nans = string.replace(',', ' ')\nprint(ans)", "s = input()\nprint(' '.join(s.split(',')))", "s = str(input())\ns1 = s[:5]\ns2 = s[6:13]\ns3 = s[14:]\nprint(s1 + ' ' + s2 + ' ' + s3)", "s = input()\nprint(s.replace(',', ' '))", "print(input().replace(\",\",\" \"))", "#!/usr/bin/env python3\n# coding:utf-8\n\ndef main():\n    stdIn = input()\n    stdOut = solve(stdIn)\n    print(stdOut)\n\n\ndef solve(stdIn):\n    return stdIn.replace(',',' ')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "print((*input().split(',')))\n", "s = input()\nfor i in range(len(s)):\n  if s[i] == ',': print(' ', end='')\n  else: print(s[i], end='')\nprint('')", "s = list(input())\n \ns[5] = ' '\ns[13] = ' '\nprint(''.join(s))", "print(input().replace(',',' '))", "s = input()\nprint(s.replace(',',' '))", "print(*input().split(\",\"))", "s = input()\nprint(s.replace(',', ' '))", "print(*input().split(sep=\",\"))", "def main():\n    print((input().replace(',', ' ')))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nss = s.split(',')\nsss = ' '.join(ss)\nprint(sss)\n", "s = input().split(\",\")\nres = \"\"\nfor i in range(2):\n    res += s[i] + \" \"\n\nres += s[-1]\nprint(res)\n", "s = input()\ns = s.split(\",\")\nprint(*s,sep=\" \")", "s = input().split(\",\")\n\nprint(*s)", "s = input()\n\nS = \"\"\nfor i in range(len(s)):\n    if s[i] == ',':\n        S += \" \"\n    else:\n        S += s[i]\n\nprint(S)\n", "s = input().split(',')\nprint(*s)", "#\n# abc051 a\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"happy,newyear,enjoy\"\"\"\n        output = \"\"\"happy newyear enjoy\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"haiku,atcoder,tasks\"\"\"\n        output = \"\"\"haiku atcoder tasks\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"abcde,fghihgf,edcba\"\"\"\n        output = \"\"\"abcde fghihgf edcba\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    s = input()\n    print((s.replace(\",\", \" \")))\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "print(\" \".join(input().split(\",\")))", "x,y,z=input().split(\",\")\nprint(x,y,z)", "[print(x, end=' ') for x in input().split(',')]", "print(input().replace(',',' '))", "def solve():\n    print(input().replace(',', ' '))\n\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "print(input().replace(\",\", \" \"))", "s = str(input())\nprint(s.replace(',', ' '))", "s = input()\ns = s.replace(\",\", \" \")\nprint(s)", "s = input().split(\",\")\nprint(\" \".join(s))", "print(input().replace(\",\", \" \"))", "x = list(input().split(','))\nfor i in x:\n  print(i, end=' ')", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    s = SS()\n\n    ans = s.split(',')\n    print((*ans))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "s=input()\nans=s.replace(\",\",\" \")\nprint(ans)", "haike = input().split(',')\nprint(' '.join(haike))", "s=input()\nans=s.replace(\",\",\" \")\nprint(ans)\n", "print(' '.join(input().split(',')))", "'''\nABC051 A - Haiku\nhttps://atcoder.jp/contests/abc051/tasks/abc051_a\n'''\n\nprint((input().replace(',', ' ')))\n", "a=input()\nprint(a.replace(\",\",\" \"))", "s = input()\nprint(s.replace(',', ' '))", "s1, s2, s3 = input().split(\",\")\nprint(s1, s2, s3)", "word = input()\nnew_word = word.replace(',', ' ')\nprint(new_word)", "print(input().replace(',',' '))", "S=input()\nS=S.replace(',',' ')\nprint(S)\n", "print(' '.join(input().split(',')))", "s = input()\n\na = s.split(\",\")\n\nprint((\" \".join(a)))\n", "s = input()\nprint(s.replace(\",\",\" \"))", "print(input().replace(',',' '))", "s = input()\ns = s.replace(\",\", \" \")\nprint(s)\n", "s1,s2,s3 = input().split(',')\nprint(s1,s2,s3)", "a, b, c = input().split(',')\nprint('%s %s %s' % (a, b, c))", "print(input().replace(\",\",\" \"))", "s = list(input())\nfor i in s:\n    if i == ',':\n        print(\" \", end = '')\n    else:\n        print(i, end = '')", "s = input().split(',')\nprint(' '.join(s))", "a,b,c = input().split(\",\")\nprint(a,b,c,sep=\" \")\n", "a,b,c=input().split(\",\")\nprint(a,b,c)", "print(input().replace(\",\",\" \"))", "#!/usr/bin/env python3\nS = input().split(',')\nprint((*S))\n", "print(input().replace(\",\",\" \"))", "s = input()\ns = s[:5] + \" \" + s[6:13] + \" \" + s[14:]\nprint(s)\n", "s=input()\nprint(s.replace(',',' '))", "s = input().split(\",\")\nprint(*s, sep=\" \")", "print(*input().split(\",\"), sep=\" \")", "s = input().split(\",\")\nprint(*s, sep=\" \")", "s = input()\nprint(s.replace(\",\",\" \"))", "#!/usr/bin/env python3\n\ndef main():\n    print((*input().split(\",\")))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "x=input()\nprint(x.replace(\",\",\" \"))", "a,b,c = map(str,input().split(','))\n\nprint(a,b,c)", "print(input().replace(\",\",\" \"))", "s  = list(map(str,input().split(\",\")))\nprint(s[0],s[1],s[2])", "s1, s2, s3 = input().split(',')\nprint(s1,s2,s3)", "s = list(input())\ns[5] = ' '\ns[13] = ' '\nprint(''.join(s))", "a,b,c = input().split(\",\")\nprint(a,b,c,sep=\" \")", "a, b, c = input().split(',')\nprint(a, b, c)", "a, b, c = input().split(\",\")\nprint(a, b, c)", "x,y,z= input().split(',')\nprint(x,y,z)", "s = input()\nprint(s.replace(\",\",\" \"))", "print(input().replace(\",\",\" \"))", "s = input().split()\ns_ = ''.join(s)\nprint(s_.replace(',', ' '))"]