["from math import *\ntest = int(input())\nfor test_case in range(test):\n\tn = int(input())\n\tct = 3\n\tp = 2\n\twhile(1):\n\t\tif(n%ct == 0):\n\t\t\tprint(n//ct)\n\t\t\tbreak\n\t\tp *= 2\n\t\tct += p", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    st2 = 4\n    while n % (st2 - 1) != 0:\n        st2 *= 2\n    print(n // (st2 - 1))", "for i in range(int(input())):\n\tn=int(input())\n\ttmp=3\n\twhile(True):\n\t\tif(n%tmp==0):\n\t\t\tprint(int(n/tmp))\n\t\t\tbreak\n\t\telse:\n\t\t\ttmp=tmp*2+1", "tab = [1,3]\nfor i in range(100):\n\txx = tab[-1]\n\ttab.append(xx + 2**(i+2))\n\nt = int(input())\nfor rew in range(t):\n\tn = int(input())\n\twyn = -1\n\tfor j in tab:\n\t\tif n%j == 0 and j > 1:\n\t\t\twyn = n//j\n\t\t\tbreak\n\tprint(wyn)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    for k in range(2, 31):\n        if n % (2**k - 1) == 0:\n            print(n // (2 ** k - 1))\n            break\n\n# a = list(map(int,input().split()))\n# n,m = map(int,input().split())\n\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = 4\n    while n % (k - 1) != 0:\n        k *= 2\n    print(n // (k-1))\n", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    d=2\n    while True:\n        if n%(2**d-1)==0:print(n//(2**d-1));break\n        d+=1", "t=int(input())\nwhile t:\n    n=int(input())\n    temp=1\n    for i in range(1,50):\n        temp+=2**i\n        if(n%temp==0):\n            print(n//temp)\n            break\n    t-=1    ", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    k = 4\n    while n % (k - 1) != 0:\n        k *= 2\n    print(n//(k-1))\n", "#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n    ans=''.join(str(i) for i in l)\n    return ans\n \n \n \n##### Main ####\nt=int(input())\nfor tt in range(t):\n    n=int(input())\n    k=2\n    while(k<80):\n        v=pow(2,k)-1\n        if(n%v==0):\n            print(n//v)\n            break;\n        k+=1\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\n    #a=list(map(int,sys.stdin.readline().split(' ')))\n    \n    \n#####File Operations#####\nif(fileoperation):\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    k = 4\n    while n % (k - 1) != 0:\n        k *= 2\n    print(n // (k - 1))\n", "        \n        \ndef __starting_point():\n    n = int(input())\n    \n    for i in range(n):\n        n = int(input())\n        k = 4\n        while True:\n            if n%(k-1) == 0:\n                print(n//(k-1))\n                break\n            else:\n                k *= 2\n__starting_point()", "for _ in range(1, int(input()) + 1):\n\tn = int(input())\n\tfor i in range(2, 36):\n\t\tif( n % (2**i - 1) == 0):\n\t\t\tprint(n//(2**i - 1))\n\t\t\tbreak", "from sys import stdin\nfrom collections import deque\nmod = 10**9 + 7\nimport sys\nimport random\n# sys.setrecursionlimit(10**6)\nfrom queue import PriorityQueue\n# def rl():\n#     return [int(w) for w in stdin.readline().split()]\nfrom bisect import bisect_right\nfrom bisect import bisect_left\nfrom collections import defaultdict\nfrom math import sqrt,factorial,gcd,log2,inf,ceil\n# map(int,input().split())\n# # l = list(map(int,input().split()))\n# from itertools import permutations\nimport heapq\n# input = lambda: sys.stdin.readline().rstrip()\ninput = lambda : sys.stdin.readline().rstrip()\nfrom sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations\nfrom math import factorial as f\n\n# def ncr(x, y):\n#     return f(x) // (f(y) * f(x - y))\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,\n                      p - 2, p)) % p\n\nt = int(input())\n\nfor _ in range(t):\n\n    n = int(input())\n    ans = -1\n    for i in range(2,100):\n        if n%(2**i - 1) == 0:\n            ans = (n//(2**i - 1))\n            break\n\n    print(ans)\n\n\n\n\n\n", "def solve():\n    n = int(input())\n    t = 2\n    while True:\n        k = 2**t - 1\n        if n % k == 0:\n            return n // k\n        t += 1\n\n#----\nt = int(input())\nfor case in range(t):\n    print(solve())\n        \n\n", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    k=2\n    while True:\n        if n%(2**k-1)==0:\n            print(n//(2**k-1))\n            break\n        k=k+1", "import sys\nimport math\n\ndef ii():\n    return sys.stdin.readline().strip()\n\ndef idata():\n    return [int(x) for x in ii().split()]\n\ndef bfs(graph1, root1):\n    visited1 = set()\n    queue1 = [[root1, 0]]\n    visited1.add(root1)\n    qw, ver = 0, 1\n    while queue1:\n        vertex1 = queue1[0]\n        queue1 = queue1[1:]\n        for neig1 in graph1[vertex1[0]]:\n            if neig1 not in visited1:\n                visited1.add(neig1)\n                queue1 += [[neig1, vertex1[1] + 1]]\n                if qw < vertex1[1] + 1:\n                    ver, qw = neig1, vertex1[1] + 1\n    return ver, qw\n\ndef dfs(graph, ver):\n    used_v = set()\n    depth = [0] * (len(graph) + 1)\n    level = [ver]\n    num_of_level = 0\n    while level:\n        new_level = []\n        for v in level:\n            depth[v] = num_of_level\n            used_v.add(v)\n            for v1 in graph[v]:\n                if v1 not in used_v:\n                    new_level += [v1]\n        level = new_level\n        num_of_level += 1\n    return depth\n\ndef binary_search(array, x):\n    left, right = -1, len(array)\n    while left + 1 != right:\n        middle = (left + right) // 2\n        if array[middle] >= x:\n            right = middle\n        elif array[middle] < x:\n            left = middle\n    return right\n\ndef c_mod(n1, k1, mod1):\n    num = den = 1\n    for i in range(n1 - k1):\n        num = (num * (n1 - i)) % mod1\n        den = (den * (i + 1)) % mod1\n    return (num * pow(den, mod1 - 2, mod1)) % mod1\n\ndef c(n1, k1):\n    num = den = 1\n    for i in range(n1 - k1):\n        num = num * (n1 - i)\n        den = den * (i + 1)\n    return num // den\n\ndef v_sistemu(x, k):\n    x = int(x)\n    z = ''\n    while x:\n        z += str(x % k)\n        x //= k\n    return z[::-1]\n\ndef iz_sistemi(x, k):\n    x = str(x)[::-1]\n    ans = 0\n    for i in range(len(x)):\n        ans += int(x[i]) * pow(k, i)\n    return ans\n\ndef solve_of_problem():\n    n = int(ii())\n    ans = 2\n    for i in range(n):\n        ans *= 2\n        if n % (ans - 1) == 0:\n            print(n // (ans - 1))\n            return\n    return\n\nfor ______ in range(int(ii())):\n    solve_of_problem()\n"]