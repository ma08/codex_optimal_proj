["#!/usr/bin/env python3\nimport itertools\n\nn = int(input())\n\n\ndata = [[] for i in range(5)]\n# print(data)\nfor i in range(n):\n    tmp = str(input())\n    if tmp[0] == \"M\":\n        data[0].append(tmp)\n    elif tmp[0] == \"A\":\n        data[1].append(tmp)\n    elif tmp[0] == \"R\":\n        data[2].append(tmp)\n    elif tmp[0] == \"C\":\n        data[3].append(tmp)\n    elif tmp[0] == \"H\":\n        data[4].append(tmp)\n\nans = 0\nfor i, j, k in itertools.combinations([0, 1, 2, 3, 4], 3):\n    ans += len(data[i])*len(data[j])*len(data[k])\nprint(ans)\n", "from collections import Counter\n\nn = int(input())\ns = [input() for _ in range(n)]\ncnt = 0\nc = Counter(x[0] for x in s)\nfor x in s:\n    if x[0] in \"MARCH\":\n        cnt += 1\nans = cnt * (cnt - 1) * (cnt - 2) // 6\nfor k, v in list(c.items()):\n    if k not in \"MARCH\":\n        continue\n    if v >= 2:\n        ans -= v * (v - 1) // 2 * (cnt - v)\n    if v >= 3:\n        ans -= v * (v - 1) * (v - 2) // 6\nprint(ans)\n", "N=int(input())\nS=[input()[0] for _ in range(N)]\nA=[S.count(c) for c in \"MARCH\"]\nans=0\nfor i in range(5):\n    for j in range(i+1,5):\n        for k in range(j+1,5):\n            ans+=A[i]*A[j]*A[k]\nprint(ans)\n", "import itertools\nn = int(input())\nname = [0]*5\ns = []\nfor i in range(n):\n    st = input()\n    if st[0] == 'M':\n        name[0] += 1\n    elif st[0] == 'A':\n        name[1] += 1\n    elif st[0] == 'R':\n        name[2] += 1\n    elif st[0] == 'C':\n        name[3] += 1\n    elif st[0] == 'H':\n        name[4] += 1\n    s.append(st)\n\nans = 0\nfor v in itertools.combinations(name, 3):\n    # print(v)\n    ans += v[0]*v[1]*v[2]\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\nN = int(input())\ncount = [0] * 5\nfor i in range(N):\n    tmp = input()\n    if tmp[0] == \"M\":\n        count[0] += 1\n    if tmp[0] == \"A\":\n        count[1] += 1\n    if tmp[0] == \"R\":\n        count[2] += 1\n    if tmp[0] == \"C\":\n        count[3] += 1\n    if tmp[0] == \"H\":\n        count[4] += 1\n\nans = 0\nfor i in range(0, 3):\n    for j in range(i+1, 4):\n        for k in range(j+1, 5):\n            ans += count[i]*count[j]*count[k]\n\nprint(ans)\n", "from collections import Counter\nimport itertools\n\nn = int(input())\ns = [input()[0] for _ in range(n)]\n\ncnt = Counter(s)\nans = 0\nfor x, y, z in itertools.combinations(\"MARCH\", 3):\n    ans += cnt[x] * cnt[y] * cnt[z]\nprint(ans)", "n = int(input())\ns = [input()[0] for _ in range(n)]\nc = [s.count(\"M\"), s.count(\"A\"), s.count(\"R\"), s.count(\"C\"), s.count(\"H\")]\nans =  c[0] * c[1] *c [2]\nans += c[0] * c[1] *c [3]\nans += c[0] * c[1] *c [4]\nans += c[0] * c[2] *c [3]\nans += c[0] * c[2] *c [4]\nans += c[0] * c[3] *c [4]\nans += c[1] * c[2] *c [3]\nans += c[1] * c[2] *c [4]\nans += c[1] * c[3] *c [4]\nans += c[2] * c[3] *c [4]\nprint(ans)", "from collections import Counter\nfrom itertools import combinations\nn = int(input())\ns = [list(input())[0] for _ in range(n)]    \nc = Counter(s)\ncnt = 0\nlstcmb = combinations(\"MARCH\",3)\nfor k in lstcmb:\n    cnt += c[k[0]]*c[k[1]]*c[k[2]] \nprint(cnt)", "N = int(input())\ntext = \"MARCH\"\nd = {a:0 for a in text}\nfor _ in range(N):\n  s = input()[0]\n  if s in text:\n    d[s] += 1\n\ntot = 0\nL = [v for k,v in list(d.items())]\nfor i in range(0,5):\n  for j in range(i+1,5):\n    for k in range(j+1,5):\n      #print(i,j,k)\n      tot += L[i]*L[k]*L[j]\n\n#print(d)\nprint(tot)\n", "import sys\ninput = sys.stdin.readline\ndef main():\n    N = int(input())\n    L = {'M':0, 'A':0, 'R':0, 'C':0, 'H':0}\n    for i in range(N):\n        S = input().rstrip()\n        if S[0] in L:\n            L[S[0]] += 1\n    CNT = 0\n    i = 0\n    S = [0]*5\n    for k, v in L.items():\n        S[i] = v\n        i += 1\n    ans = 0\n    for p in range(3):\n        for q in range(p+1,4):\n            for r in range(q+1,5):\n                ans += S[p]*S[q]*S[r]\n    print(ans)\n    \n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import combinations\n\nn = int(input())\ns = [input() for _ in range(n)]\n\nletters = {\"M\":0, \"A\":0, \"R\":0, \"C\":0, \"H\":0, }\nto_check = combinations([i for i in \"MARCH\"], 3)\n\nfor word in s:\n    if word[0] in letters:\n        letters[word[0]] += 1\n\ncount = 0\nfor i in to_check:\n    count += letters[i[0]] * letters[i[1]] * letters[i[2]]\n\nprint(count)", "import collections\nimport itertools\nn=int(input())\nl,s=[],[]\nfor i in range(n):\n    a=input()\n    if a[0]==\"M\" or a[0]==\"A\" or a[0]==\"R\" or a[0]==\"C\" or a[0]==\"H\":\n        l.append(a[0])\n        if s.count(a[0])==0:\n            s.append(a[0])\nl=collections.Counter(l)\nans=0\nfor j in itertools.combinations(s,3):\n    ans+=(l[j[0]]*l[j[1]]*l[j[2]])\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep 23 14:49:47 2020\n\n@author: liang\n\"\"\"\n\n\"\"\"\n\u3010\u7d44\u307f\u5408\u308f\u305b\u751f\u6210\u3011\n    itertools.combinations(iterable, r)\n\u3010\u7dcf\u7a4d\u3011\n    numpy.prod(iterable)\n\"\"\"\nfrom itertools import combinations\nimport numpy as np\n\nN = int(input())\nd = [0]*5\nfor i in range(N):\n    s = input()\n    if s[0] == \"M\":\n        d[0] += 1\n    if s[0] == \"A\":\n        d[1] += 1\n    if s[0] == \"R\":\n        d[2] += 1\n    if s[0] == \"C\":\n        d[3] += 1\n    if s[0] == \"H\":\n        d[4] += 1\n    \nans = 0\nfor lis in combinations(d,3):\n    ans += np.prod(lis)\nprint(ans)", "n=int(input())\nl=[0,0,0,0,0]\nfor _ in range(n):\n    s=input()\n    if s[0]=='M':l[0]+=1\n    if s[0] == 'A': l[1] += 1\n    if s[0] == 'R': l[2] += 1\n    if s[0] == 'C': l[3] += 1\n    if s[0] == 'H': l[4] += 1\n\nfor i in l:\n    if i==0:l.remove(i)\ntotal=len(l)\nif total<3:ans=0\nelse:\n    ans=0\n    for i in range(0,total-2):\n        for j in range(i+1,total-1):\n            for k in range(j+1,total):\n                ans+=l[i]*l[j]*l[k]\nprint(ans)", "N = int(input())\nM = 0\nA = 0\nR = 0\nC = 0\nH = 0\nfor i in range(N):\n    S = input()\n    s = S[0]\n    if s == \"M\":\n        M += 1\n    elif s == \"A\":\n        A += 1\n    elif s == \"R\":\n        R += 1\n    elif s == \"C\":\n        C += 1\n    elif s == \"H\":\n        H += 1\nans = M*A*R+M*A*C+M*A*H+M*R*C+M*R*H+M*C*H+A*R*C+A*R*H+A*C*H+R*C*H\nprint(ans)", "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations\n\n\ndef read():\n    N = int(input().strip())\n    S = []\n    for i in range(N):\n        s = input().strip()\n        S.append(s)\n    return N, S\n\n\ndef solve(N, S):\n    Z = [0 for i in range(26)]\n    for s in S:\n        a = s[0]\n        Z[ord(a)-ord(\"A\")] += 1\n    ans = 0\n    D = [Z[ord(a)-ord(\"A\")] for a in \"MARCH\"]\n    for i, j, k in combinations(D, r=3):\n        ans += i * j * k\n    return ans\n\n\ndef __starting_point():\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n\n__starting_point()", "n=int(input())\ndic={\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\ncheck=[\"M\",\"A\",\"R\",\"C\",\"H\"]\n\nfor i in range(n):\n  s=input()\n  if s[0] in check:\n    dic[s[0]]+=1\n\nans=0\nfor i in range(3):\n  for j in range(i+1,4):\n    for k in range(j+1,5):\n      ans+=dic[check[i]]*dic[check[j]]*dic[check[k]]\n      \nprint(ans)\n\n", "n = int(input())\nS = list(set([input() for _ in range(n)]))\n\nname = [0]*5\n\nfor s in S:\n    if s[0] == \"M\":\n        name[0] += 1\n    if s[0] == \"A\":\n        name[1] += 1\n    if s[0] == \"R\":\n        name[2] += 1\n    if s[0] == \"C\":\n        name[3] += 1\n    if s[0] == \"H\":\n        name[4] += 1\n\nans = 0\nfor i in range(5):\n    for j in range(i+1, 5):\n        for k in range(j+1, 5):\n            ans += name[i]*name[j]*name[k]\n\nprint(ans)", "N = int(input())\nName = [input()[0] for _ in range(N)]\nMarch = {x:Name.count(x) for x in 'MARCH' if Name.count(x) > 0}\n\nimport itertools\nans = 0\nfor x,y,z in itertools.combinations(March.values(), 3):\n    ans += x*y*z\nprint(ans)", "import sys\nimport itertools\nfrom collections import Counter\nN = int(input())\nname = []\nfor _ in range(N):\n    a = input()\n    name.append(a[0])\nname = Counter(name)\nkouho = []\nkouho.append(name[\"M\"])\nkouho.append(name[\"A\"])\nkouho.append(name[\"R\"])\nkouho.append(name[\"C\"])\nkouho.append(name[\"H\"])\nname = []\nfor i in kouho:\n    if i == 0:\n        continue\n    name.append(i)\ntotal = sum(name)\nseki = 1\nfor i in name:\n    seki = seki*i\nhikuseki = 1\nfor i in name:\n    if i > 1:\n        hikuseki = hikuseki*i\n\nif len(name) < 3:\n    print((0))\n    return\n\nseki = list(itertools.combinations(name, 3))\nans = 0\nfor i in seki:\n    a, b, c = i\n    ans += a*b*c\nprint(ans)\n", "from itertools import combinations\nfrom collections import Counter\nN = int(input())\nS = Counter()\nfor i in range(N):\n  S[input()[0]]+=1\nprint(sum([S[a]*S[b]*S[c] for a,b,c in combinations(\"MARCH\",3)]))", "from collections import Counter\nfrom itertools import combinations\nn = int(input())\ns = [list(input())[0] for _ in range(n)]    \nc = Counter(s)\ncnt = 0\nlst = list(\"MARCH\")\nlstcmb = combinations(lst,3)\nfor k in lstcmb:\n    cnt += c[k[0]]*c[k[1]]*c[k[2]]\n        \nprint(cnt)", "N = int(input())\nm = [0] * 5\ns = \"MARCH\"\nfor i in range(N):\n    a = input()\n    for j in range(5):\n        if s[j] == a[0]:\n            m[j] += 1\n\nans = 0\n\nfor i in range(3):\n    for j in range(i+1, 4):\n        for k in range(j+1, 5):\n            ans += m[i] * m[j] * m[k]\n\nprint(ans)\n", "from collections import Counter\nfrom itertools import combinations, starmap\nfunc = lambda x, y, z: x*y*z\n\ndef main():\n    with open(0) as f:\n        N, *S = f.read().split()\n    S = [s[0] for s in S if s[0] in list('MARCH')]\n    S = Counter(S)\n    ans = sum(starmap(func, combinations(S.values(), 3)))\n    print(ans)\n\nmain()", "import collections\nN = int(input())\nlsname = []\nfor i in range(N):\n    name = input()\n    lsname.append(name[:1])\ncounterN = collections.Counter(lsname)\nlskey = ['M','A','R','C','H']\nlsnum = []\nfor i in lskey:\n    if i in counterN.keys():\n        lsnum.append(counterN[i])\nans = 0\nlenN = len(lsnum)\nfor i in range(lenN-2):\n    for j in range(i+1,lenN-1):\n        for k in range(j+1,lenN):\n            ans += lsnum[i]*lsnum[j]*lsnum[k]\nprint(ans)", "import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n#def make_divisors(n):\n#    lower_divisors , upper_divisors = [], []\n#    i = 1\n#    while i*i <= n:\n#        if n % i == 0:\n#            lower_divisors.append(i)\n#            if i != n // i:\n#                upper_divisors.append(n//i)\n#        i += 1\n#    return lower_divisors + upper_divisors[::-1]\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1\n\nd = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\n\nfor _ in range(N):\n    s = input()\n    if s[0] in d:\n        d[s[0]] += 1\n\na = list(itertools.combinations(\"MARCH\", 3))\n\nans = 0\nfor l in a:\n    ans += d[l[0]] * d[l[1]] * d[l[2]]\n    \nprint(ans)", "from collections import defaultdict\nimport itertools\n\nn = int(input())\nr = defaultdict(int)\nfor i in range(n):\n    r[input()[0]] += 1\n\nans = 0\nfor c in itertools.combinations(list('MARCH'), 3):\n    a = 1\n    for cc in c:\n        a *= r[cc]\n    ans += a\nprint(ans)\n", "N=int(input())\nli=[0,0,0,0,0]\nfor i in range(N):\n    S=input()\n    if S[0]==\"M\":\n        li[0]+=1\n    if S[0]==\"A\":\n        li[1]+=1\n    if S[0]==\"R\":\n        li[2]+=1\n    if S[0]==\"C\":\n        li[3]+=1\n    if S[0]==\"H\":\n        li[4]+=1\nlim=0\nfor j in range(5):\n    if li[j]!=0:\n        lim+=1\ntemp=1   \nli.sort(reverse=True)\nans=0\nif lim==3:\n    ans=li[0]*li[1]*li[2]\nelif lim==4:\n    lis=[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\n    for l in range(4):\n        for m in range(3):\n            temp*=li[lis[l][m]-1]\n        ans+=temp\n        temp=1\n        \nelif lim==5:\n    lis=[[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5],[1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]]\n    for l in range(10):\n        for m in range(3):\n            temp*=li[lis[l][m]-1]\n        ans+=temp\n        temp=1\n        \nelse:\n    ans=0\n\nprint(ans)\n", "import math\n\"\"\"\nint(input())\nmap(int, input().split())\nlist(map(int, input().split()))\ninput()\ninput().split()\n\"\"\"\n\nn = int(input())\nans = 0\ndp = [0,0,0,0,0]\nfor i in range(n):\n    s = input()\n    if (s[0]=='M'): dp[0]+=1\n    elif (s[0]=='A'): dp[1]+=1\n    elif (s[0]=='R'): dp[2]+=1\n    elif (s[0]=='C'): dp[3]+=1\n    elif (s[0]=='H'): dp[4]+=1\nfor i in range(5):\n    for j in range(i+1,5):\n        for k in range(j+1,5):\n            ans += dp[i]*dp[j]*dp[k]\n\nprint(ans)\n", "from collections import Counter\n\n\ndef __starting_point():\n    N = int(input())\n    C = Counter()\n    march = [\"M\", \"A\", \"R\", \"C\", \"H\"]\n    for _ in range(N):\n        s = input()\n        if s[0] in march:\n            C[s[0]] += 1\n    ans = 0\n    for i in range(3):\n        for j in range(i+1, 4):\n            for k in range(j+1, 5):\n                ans += C[march[i]] * C[march[j]] * C[march[k]]\n    print(ans)\n\n__starting_point()", "import itertools\nfrom collections import Counter\n\nN = int(input())\nS = Counter([input()[0] for i in range(N)])\nres = 0\nfor a, b, c in itertools.combinations(\"MARCH\", 3):\n    res += S[a] * S[b] * S[c]\n\nprint(res)\n", "from collections import defaultdict\nfrom itertools import combinations\n\nN = int(input())\nD = defaultdict(int)\n\nfor _ in range(N):\n  S = input()\n  if S[0] in \"MARCH\":\n    D[S[0]] += 1\n\nans = 0\nfor C in combinations((\"M\", \"A\", \"R\", \"C\", \"H\"), 3):\n  temp = 1\n  for c in C:\n    temp *= D[c]\n  ans += temp\n\nprint(ans)", "#60 C - March\nimport collections\nimport itertools\nN = int(input())\nS = [input() for _ in range(N)]\nS = [s[0] for s in S if s[0] == 'M' or s[0] == 'A' or s[0] == 'R' or s[0] == 'C' or s[0] == 'H']\n\ncnt = collections.Counter(S)\n\ncomb = itertools.combinations(cnt.keys(),3)\n\nans = 0\nfor a,b,c in comb:\n    ans += cnt[a]*cnt[b]*cnt[c]\nprint(ans)", "n = int(input())\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nd = {\"M\":0, \"A\":0, \"R\":0, \"C\":0, \"H\":0}\n\n\nfor i in range(n):\n    s = input()\n    if s[0] in march:\n        d[s[0]] = d.get(s[0], 0)+1\nans = 0\nli = []\nfor i in d:\n    for j in d:\n        for k in d:\n            if i!=j and j!=k and k!=i and not set([i,j,k]) in li:\n                li.append(set([i,j,k]))\n                ans += d[i]*d[j]*d[k]\nprint(ans)", "'''\nCreated on 2020/08/31\n\n@author: harurun\n'''\ndef main():\n  from itertools import combinations\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n\n  N=int(pin())\n  ans=0\n  d=[0]*5\n  for _ in [0]*N:\n    S=pin()[:-1][0]\n    if S==\"M\":\n      d[0]+=1\n    elif S==\"A\":\n      d[1]+=1\n    elif S==\"R\":\n      d[2]+=1\n    elif S==\"C\":\n      d[3]+=1\n    elif S==\"H\":\n      d[4]+=1\n  c=list(combinations([0,1,2,3,4],3))\n  for i in c:\n    cnt=1\n    for j in list(i):\n      cnt*=d[j] \n    ans+=cnt \n  print(ans)\n  return \nmain()\n    \n    \n    \n", "def idx_cmb(n, r):\n    import itertools\n    lst1 = [i for i in range(0, n)]\n    lst = list(itertools.combinations(lst1, r))\n    return lst\n\n\ndef main():\n    n = int(input())\n    s_lst = [str(input()) for _ in range(n)]\n\n    march = [0] * 5\n    for i in range(n):\n        s = s_lst[i]\n        if s[0] == 'M':\n            march[0] += 1\n        elif s[0] == 'A':\n            march[1] += 1\n        elif s[0] == 'R':\n            march[2] += 1\n        elif s[0] == 'C':\n            march[3] += 1\n        elif s[0] == 'H':\n            march[4] += 1\n\n    idx_lst = idx_cmb(5, 3)\n    x = 0\n    for i in range(len(idx_lst)):\n        idx1 = idx_lst[i][0]\n        idx2 = idx_lst[i][1]\n        idx3 = idx_lst[i][2]\n        number1 = march[idx1]\n        number2 = march[idx2]\n        number3 = march[idx3]\n        x += number1 * number2 * number3\n\n    print(x)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import combinations\n\nn=int(input())\nd={'M':0,'A':0,'R':0,'C':0,'H':0}\nfor i in range(n):\n  s=input()\n  if s[0]=='M':\n    d['M']+=1\n  if s[0]=='A':\n    d['A']+=1\n  if s[0]=='R':\n    d['R']+=1\n  if s[0]=='C':\n    d['C']+=1\n  if s[0]=='H':\n    d['H']+=1\n\nans=0\nfor i,j,k in combinations('MARCH',3):\n  ans+=d[i]*d[j]*d[k]\n\nprint(ans)", "N = int(input())\nA = {'M':0,'A':0,'R':0,'C':0,'H':0}\nfor i in range(N):\n    s = input()\n    if s[0] in A:\n        A[s[0]] += 1\nB = [A['M'],A['A'],A['R'],A['C'],A['H']]\n\nans = 0\nfor i in range(3):\n    for j in range(i+1,4):\n        for k in range(j+1,5):\n            ans += B[i] * B[j] * B[k]\nprint(ans)", "n=int(input())\nD={\"M\":0 , \"A\":0, \"R\":0 , \"C\":0 , \"H\":0}\nfor i in range(n):\n    s=input()\n    if s[0] in [\"M\",\"A\",\"R\",\"C\",\"H\"]:\n        D[s[0]]+=1\n\nfrom itertools import combinations as com \nans=0\nA=list(D.values()) ; # print(A)\nfor l in com(list(range(5)), 3):\n    ans+= A[l[0]]* A[l[1]] * A[l[2]]\nprint(ans)\n", "n=int(input())\nmarch=[\"M\",\"A\",\"R\",\"C\",\"H\"]\ncnt=[0]*5\nfor i in range(n):\n  inp=input()\n  for j in march:\n    if inp[0]==j:\n      cnt[march.index(j)]+=1\nans=0\nfor i in range(5):\n  for j in range(i+1,5):\n    for k in range(j+1,5):\n      ans+=cnt[i]*cnt[j]*cnt[k]\n      \nprint(ans)", "n=int(input())\nm=0\na=0\nr=0\nc=0\nh=0\nfor i in range(n):\n    s=input()\n    if s[0]==\"M\":\n        m+=1\n    if s[0]==\"A\":\n        a+=1\n    if s[0]==\"R\":\n        r+=1\n    if s[0]==\"C\":\n        c+=1\n    if s[0]==\"H\":\n        h+=1\nprint((m*a*r+m*a*c+m*a*h+m*r*c+m*r*h+m*c*h+a*r*c+a*r*h+a*c*h+r*c*h))\n\n", "import sys\nfrom collections import Counter\nfrom itertools import combinations\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn = inint()\n\nS = []\nans = 0\n\nfor i in range(n):\n    s = input()[0]\n    if s in [\"M\",\"A\",\"R\",\"C\",\"H\"]:\n        S.append(s)\n\nC = Counter(S)\n\nfor w in combinations([\"M\",\"A\",\"R\",\"C\",\"H\"],3):\n    ans += C[w[0]]*C[w[1]]*C[w[2]]\n\nprint(ans)", "N=int(input())\nS=[input() for _ in range(N)]\ncnt=[0]*N\ncnt2=[]\nflag=0\n\nif len(S)>1:\n    for i in range(N):\n        if S[i][0]=='M':\n            cnt[0]+=1\n        elif S[i][0]=='A':\n            cnt[1]+=1\n        elif S[i][0]=='R':\n            cnt[2]+=1\n        elif S[i][0]=='C':\n            cnt[3]+=1\n        elif S[i][0]=='H':\n            cnt[4]+=1\n\nfor i in range(N):\n    if cnt[i]!=0:\n        cnt2.append(cnt[i])\n        \nimport math\nimport itertools\nans=0\n\nfor v in itertools.combinations(cnt2, 3):\n    ans+=v[0]*v[1]*v[2]\n\nprint(ans)", "from collections import defaultdict\nimport itertools \n\nn = int(input())\n\nd = defaultdict(int)\n\nfor i in range(n):\n    s = input()\n    d[s[0]] += 1\n\nl = [\"M\", \"A\", \"R\", \"C\", \"H\"]\n\nc = itertools.combinations(l, 3)\n\ns = 0\n\nfor x in c:\n    s += d[x[0]] * d[x[1]] * d[x[2]]\n\nprint(s)\n", "n = int(input())\nfrom collections import Counter\nc = Counter()\nfor _ in range(n):\n    s = input()[0]\n    c[s] += 1\n\nans = 0\nans += c[\"M\"]*c[\"A\"]*c[\"R\"]\nans += c[\"M\"]*c[\"A\"]*c[\"C\"]\nans += c[\"M\"]*c[\"A\"]*c[\"H\"]\nans += c[\"M\"]*c[\"R\"]*c[\"C\"]\nans += c[\"M\"]*c[\"R\"]*c[\"H\"]\nans += c[\"M\"]*c[\"C\"]*c[\"H\"]\nans += c[\"A\"]*c[\"R\"]*c[\"C\"]\nans += c[\"A\"]*c[\"R\"]*c[\"H\"]\nans += c[\"A\"]*c[\"C\"]*c[\"H\"]\nans += c[\"R\"]*c[\"C\"]*c[\"H\"]\n\nprint(ans)", "from collections import defaultdict\nfrom itertools import combinations\ndef inpl(): return list(map(int, input().split()))\n\nC = defaultdict(int)\nN = int(input())\nfor _ in range(N):\n    C[input()[0]] += 1\n\nres = 0\nfor H in combinations(\"MARCH\", r=3):\n    res += C[H[0]] * C[H[1]] * C[H[2]]\nprint(res)", "from itertools import combinations as cmbs\nimport sys\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor i in range(int(input())):\n  si = sys.stdin.readline()\n  if si[0] in c:\n    c[si[0]] += 1\nans = sum(i*j*k for i,j,k in cmbs(list(c.values()),r=3))\nprint(ans)\n", "n = int(input())\nname_list =[0,0,0,0,0]\nalp =  [\"M\",\"A\",\"R\",\"C\",\"H\"]\nfor i in range(n):\n  s = input()\n  if s[0] in alp:\n    name_list[alp.index(s[0])] += 1\nans = 0\nfor i in range(3):\n  for j in range(i+1,4):\n    for k in range(j+1,5):\n      ans += name_list[i] * name_list[j] * name_list[k]\n\nprint(ans)\n", "import sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    n = ini()\n    S = [ins() for _ in range(n)]\n    c = Counter()\n    M = \"MARCH\"\n    for x in S:\n        if x[0] in M:\n            c[x[0]] += 1\n    ans = 0\n    for i in range(5):\n        for j in range(i):\n            for k in range(j):\n                ans += c[M[i]] * c[M[j]] * c[M[k]]\n    return ans\n\n\nprint(solve())\n", "n = int(input())\na = [0] * 5\nfor i in range(n):\n  s = input()\n  if s[0] == \"M\":\n    a[0] += 1\n  elif s[0] == \"A\":\n    a[1] += 1\n  elif s[0] == \"R\":\n    a[2] += 1\n  elif s[0] == \"C\":\n    a[3] += 1\n  elif s[0] == \"H\":\n    a[4] += 1\n\nres = 0\nres += a[0] * a[1] * a[2]\nres += a[0] * a[1] * a[3]\nres += a[0] * a[1] * a[4]\nres += a[0] * a[2] * a[3]\nres += a[0] * a[2] * a[4]\nres += a[0] * a[3] * a[4]\nres += a[1] * a[2] * a[3]\nres += a[1] * a[2] * a[4]\nres += a[1] * a[3] * a[4]\nres += a[2] * a[3] * a[4]\nprint(res)", "from itertools import combinations\n\nn = int(input())\nS = [input() for _ in range(n)]\ninitials = ('M', 'A', 'R', 'C', 'H')\nd = {}\nfor s in S:\n  if s[0] in initials:\n    d[s[0]] = d.get(s[0], 0) + 1\n\nprint(sum(d[x] * d[y] * d[z] for x, y, z in combinations(d.keys(), 3)))", "from collections import Counter\nfrom itertools import combinations\nn = int(input())\ns = [list(input())[0] for _ in range(n)]\nc = Counter(s)\ncnt = 0\nlistcmb = combinations(\"MARCH\",3)\n\nfor k in listcmb:\n    cnt += c[k[0]]*c[k[1]]*c[k[2]]\nprint(cnt)\n\n", "from itertools import combinations\nN = int(input())\n\nmarch = [0] * 5\nfor _ in range(N):\n  S = input()\n  S = S[0]\n  if S == \"M\":\n    march[0] += 1\n  elif S == \"A\":\n    march[1] += 1\n  elif S == \"R\":\n    march[2] += 1\n  elif S == \"C\":\n    march[3] += 1\n  elif S == \"H\":\n    march[4] += 1\n  \nls = list(combinations(range(5),3))\n\nans = 0\nfor (i,j,k) in ls:\n  ans += march[i] * march[j] * march[k]\n  \nprint(ans)", "from itertools import combinations as cmbs\nimport sys\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nsys.stdin.readline()\nfor si in sys.stdin:\n    if si[0] in c:\n        c[si[0]] += 1\nans = sum(i*j*k for i,j,k in cmbs(list(c.values()),r=3))\nprint(ans)\n", "import itertools\nn=int(input())\nm=list(\"MARCH\")\nd=[0]*5\nfor i in range(n):\n  s=input()\n  for j in range(len(m)):\n    if s[0]==m[j]:\n      d[j]+=1\nans=0\nfor i in list(itertools.combinations(list(range(5)), 3)):\n  k=list(i)\n  ans+=d[k[0]]*d[k[1]]*d[k[2]]\nprint(ans)", "from itertools import combinations\nfrom functools import reduce\n\nn = int(input())\nx = [0 for _ in range(5)]\nfor _ in range(n):\n    s = input()\n    if s[0] == \"M\":\n        x[0] += 1\n    if s[0] == \"A\":\n        x[1] += 1\n    if s[0] == \"R\":\n        x[2] += 1\n    if s[0] == \"C\":\n        x[3] += 1\n    if s[0] == \"H\":\n        x[4] += 1\n\ndef f(a, b): return a*b\n\nx = [n for n in x if n != 0]\nans = 0\nfor c in combinations(x, 3):\n    ans += reduce(f, c)\n\nprint(ans)", "n=int(input())\n\nmarch=[0]*5\n\nmarch_dic={\"M\":0,\"A\":1,\"R\":2,\"C\":3,\"H\":4}\n\nfor i in range(n):\n    name=input()\n    if name[0] in \"MARCH\":\n        march[march_dic[name[0]]]+=1\n\ndef count_type(march):\n    ans=[]\n    for i in march:\n        if i!=0:\n            ans.append(i)\n    ans.sort()\n    return len(ans),ans\n\ntype_num,each_num=count_type(march)\nif type_num<3:\n    print((0))\nelse:\n    ans=0\n    for i in range(type_num-2):\n        for j in range(i+1,type_num-1):\n            for k in range(j+1,type_num):\n                ans+=each_num[i]*each_num[j]*each_num[k]\n\n    print(ans)\n", "n=int(input())\ndict={'M':0,'A':0,'R':0,'C':0,'H':0}\nfor i in range(n):\n  s=input()\n  if s[0] in dict:\n    dict[s[0]]+=1\ndata=['M','A','R','C','H']\nans=0\nfor i in range(3):\n  for j in range(i+1,4):\n    for k in range(j+1,5):\n      ans+=dict[data[i]]*dict[data[j]]*dict[data[k]]\nprint(ans)", "n = int(input())\nS = set()\ncnt = [0 for _ in range(5)]\nfor _ in range(n):\n    s = input()\n    if s in S:\n        continue\n    elif s[0] == \"M\":\n        cnt[0] += 1\n    elif s[0] == \"A\":\n        cnt[1] += 1\n    elif s[0] == \"R\":\n        cnt[2] += 1\n    elif s[0] == \"C\":\n        cnt[3] += 1\n    elif s[0] == \"H\":\n        cnt[4] += 1\n    S.add(s)\nans = 0\nfor i in range(5):\n    for j in range(i + 1, 5):\n        for k in range(j + 1, 5):\n            ans += cnt[i] * cnt[j] * cnt[k]\nprint(ans)\n", "import itertools\n \nn = int(input())\n \n \ndata = [[] for i in range(5)]\n# print(data)\nfor i in range(n):\n    tmp = str(input())\n    if tmp[0] == \"M\":\n        data[0].append(tmp)\n    elif tmp[0] == \"A\":\n        data[1].append(tmp)\n    elif tmp[0] == \"R\":\n        data[2].append(tmp)\n    elif tmp[0] == \"C\":\n        data[3].append(tmp)\n    elif tmp[0] == \"H\":\n        data[4].append(tmp)\n \nans = 0\nfor i, j, k in itertools.combinations([0, 1, 2, 3, 4], 3):\n    ans += len(data[i])*len(data[j])*len(data[k])\nprint(ans)", "import sys\nimport itertools\n\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    l = ['M', 'A', 'R', 'C', 'H']\n    m = [0]*5\n    for _ in range(N):\n        S = input()[:-1]\n        Shead = S[0]\n        for i, s0 in enumerate(l):\n            if Shead == s0:\n                m[i] += 1\n                break\n    ll = []\n    for i, n in enumerate(m):\n        if n >= 1:\n            ll.append(l[i])\n    if len(ll) <= 2:\n        print((0))\n        return\n    ans = 0\n    for i, j, k in itertools.combinations(ll, 3):\n        ans += m[l.index(i)] * m[l.index(j)] * m[l.index(k)]\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nk=[0]*5 #M-A-R-C-H\nfor _ in range(n):\n    s=input()[0]\n    if s==\"M\":\n        k[0]+=1\n    elif s==\"A\":\n        k[1]+=1\n    elif s==\"R\":\n        k[2]+=1\n    elif s==\"C\":\n        k[3]+=1\n    elif s==\"H\":\n        k[4]+=1\nans=0\nfor i in range(32):\n    bit=bin(i)[2:].zfill(5)\n    if bit.count(\"1\")!=3:\n        continue\n    count=1\n    for j in range(5):\n        if bit[j]==\"1\":\n            count*=k[j]\n    ans+=count\nprint(ans)", "import itertools\nn = int(input())\nmarch = dict()\n\na = \"MARCH\"\nfor i in range(5):\n    march[a[i]] = 0\n\nfor i in range(n):\n    s = input()\n    if s[0] in march:\n        march[s[0]] += 1\n\nres = 0\nfor i in itertools.combinations(\"MARCH\", 3):\n    tmp = 1\n    for j in i:\n        tmp *= march[j]\n    res += tmp\n\nprint(res)\n", "n = int(input())\ns = []\ncnt = [0]*5\nl = [\"M\",\"A\",\"R\",\"C\",\"H\"]\nans = 0\nfor i in range(n):\n  s.append(input())\nfor i in s:\n  if i[0] in l:\n    cnt[l.index(i[0])] += 1\nfor i in range(3):\n  for j in range(i+1,4):\n    for k in range(j+1,5):\n      ans += cnt[i]*cnt[j]*cnt[k]\nprint(ans)\n\n", "N = int(input())\nS = [input()[:1] for _ in range(N)]\nc = [S.count(s) for s in 'MARCH' if S.count(s)]\nans = 0\nif len(c) > 2:\n    ans += c[0]*c[1]*c[2]\n\nif len(c) > 3:\n    for i in c[3:]:\n        for j in range(3):\n            tmp = c[:3]\n            tmp[j] = i\n            ans += tmp[0]*tmp[1]*tmp[2]\nif len(c) > 4:\n    tmp = c[3:]\n    for j in range(3):\n        ans += tmp[0]*tmp[1]*c[j]\nprint(ans)", "import collections\nimport itertools\n\nN = int(input())\nS = [input()[0] for _ in range(N)]\nA = []\nans = 0\n\nfor i in S:\n    if i == 'M' or i == 'A' or i == 'R' or i == 'C' or i == 'H':\n        A.append(i)\n        \nif len(A) != 0:       \n    C = collections.Counter(A).most_common()\n    v,c = list(zip(*C))\n    #print(C)\n    #print(c)\n\n    for a,b,c in itertools.combinations(c,3):\n        #print(a,b,c)\n        ans += a*b*c\n\nprint(ans)\n\n\n\n", "from collections import Counter\n\nN = int(input())\nS = [input()[:1] for _ in range(N)]\nc = Counter(S)\n\nfirst_name = 'MARCH'\nc = [c[i] for i in first_name if c[i]]\n\nans = 0\nif len(c) > 2:\n    ans += c[0]*c[1]*c[2]\n\nif len(c) > 3:\n    for i in c[3:]:\n        for j in range(3):\n            tmp = c[:3]\n            tmp[j] = i\n            ans += tmp[0]*tmp[1]*tmp[2]\nif len(c) > 4:\n    tmp = c[3:]\n    for j in range(3):\n        ans += tmp[0]*tmp[1]*c[j]\nprint(ans)", "n = int(input())\nMnum = 0\nAnum = 0\nRnum = 0\nCnum = 0\nHnum = 0\nfor i in range(n):\n  a = input()\n  if a[0] == \"M\":\n    Mnum+=1\n  elif a[0] == \"A\":\n    Anum+=1\n  elif a[0] == \"R\":\n    Rnum+=1\n  elif a[0] == \"C\":\n    Cnum+=1\n  elif a[0] == \"H\":\n    Hnum+=1\nalist = []\nalist.append(Mnum)\nalist.append(Anum)\nalist.append(Rnum)\nalist.append(Cnum)\nalist.append(Hnum)\nfrom itertools import combinations\nprint(sum([a*b*c for a,b,c in combinations(alist,3)]))", "import sys\n\nsys.setrecursionlimit(10**7)\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\n\n\nN = I()\nm,a,r,c,h = 0,0,0,0,0\nfor _ in range(N):\n    s = S()\n    x = s[0]\n    if x == 'M':\n        m += 1\n    elif x == 'A':\n        a += 1\n    elif x == 'R':\n        r += 1\n    elif x == 'C':\n        c += 1\n    elif x == 'H':\n        h += 1\n\nprint((m*a*(r+c+h)+m*r*(c+h)+m*c*h+a*r*(c+h)+a*c*h+r*c*h))\n", "from itertools import combinations as cmbs\nimport sys\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor i in range(int(input())):\n  si = sys.stdin.readline()\n  if si[0] in c:\n    c[si[0]] += 1\nans = 0\nfor i,j,k in cmbs(list(c.values()),r=3):\n  t = i*j*k\n  ans += t\nprint(ans)\n", "import itertools\nfrom collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\nfor i in range(n):\n    s = input()\n    for e in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n        if s[0] == e:\n            d[e] += 1\n\nsum_num = 0\nl = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nfor a, b, c in itertools.combinations(l, 3):\n    sum_num += d[a] * d[b] * d[c]\nprint(sum_num)", "n = int(input())\ndic = {}\ncnt = 0\n\nfor i in range(n) :\n    s = input()\n    if s[0] == \"M\" or s[0] == \"A\" or s[0] == \"R\" or s[0] == \"C\" or s[0] == \"H\" :\n        if s[0] in dic :\n            dic[s[0]] += 1\n        else:\n            dic[s[0]] = 1\n\nlis = [x for x in dic.values()]\n\nfor j in range(len(lis) - 2) :\n    for k in range(j + 1, len(lis) - 1) :\n        for l in range(k + 1, len(lis)) :\n            \n            cnt += lis[j] * lis[k] * lis[l]\n    \nprint(cnt)", "import itertools\n\nN = int(input())\nt = tuple('MARCH')\ndic = {}\n\nfor _ in range(N):\n    s = input()\n    x = s[0]\n\n    if x not in t:\n        continue\n\n    if x in dic:\n        dic[x] += 1\n    else:\n        dic[x] = 1\n\ncount = [v for v in list(dic.values())]\nif len(count) < 3:\n    print((0))\n    return\n\nans = 0\nfor a, b, c in itertools.combinations(count, 3):\n    ans += a * b * c\n\nprint(ans)\n", "n = int(input())\nli = [0]*5\n\nfor k in range(n):\n    s = input()\n    if s[0]==\"M\":\n        li[0]+=1\n    elif s[0]==\"A\":\n        li[1]+=1\n    elif s[0]==\"R\":\n        li[2]+=1\n    elif s[0]==\"C\":\n        li[3]+=1\n    elif s[0]==\"H\":\n        li[4]+=1\n        \nans = 0\nfor i in range(2**5):\n    num = 1\n    if str(bin(i)).count(\"1\")==3:\n        for j in range(5):\n            if (i>>j&1)==1:\n                num *= li[j]\n        else:\n            ans += num\nprint(ans)", "from itertools import combinations as cmbs\nimport sys\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor si in [s[0] for s in sys.stdin]:\n    if si in c:\n        c[si] += 1\nans = sum(i*j*k for i,j,k in cmbs(list(c.values()),r=3))\nprint(ans)\n", "import itertools\nn = int(input())  # n\u306f\u5165\u529b\u56de\u6570\n#num_list = [int(input()) for _ in range(n)]\nans = 0\n\nset_m = set()\nset_a = set()\nset_r = set()\nset_c = set()\nset_h = set()\n\nfor i in range(n):\n    s = input()\n    if s[0] == \"M\":\n        set_m.add(s)\n    if s[0] == \"A\":\n        set_a.add(s)\n    if s[0] == \"R\":\n        set_r.add(s)\n    if s[0] == \"C\":\n        set_c.add(s)\n    if s[0] == \"H\":\n        set_h.add(s)\n\nl_m = len(set_m)\nl_a = len(set_a)\nl_r = len(set_r)\nl_c = len(set_c)\nl_h = len(set_h)\n\nl_l = [l_m,l_a,l_r,l_c,l_h]\n\ncomb_list = list(itertools.combinations(l_l,3))\n\nfor i in range(len(comb_list)):\n    ans += comb_list[i][0]*comb_list[i][1]*comb_list[i][2]\n\nprint(ans)", "from itertools import combinations as cmbs\nimport sys\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor i in range(int(input())):\n  si = sys.stdin.readline()[0]\n  if si in c:\n    c[si] += 1\nans = sum(i*j*k for i,j,k in cmbs(list(c.values()),r=3))\nprint(ans)\n", "N = int(input())\nM = []\nA = []\nR = []\nC = []\nH = []\nfor _ in range(N):\n    s = input()\n    if s.startswith(\"M\"):\n        M.append(s)\n    if s.startswith(\"A\"):\n        A.append(s)\n    if s.startswith(\"R\"):\n        R.append(s)\n    if s.startswith(\"C\"):\n        C.append(s)\n    if s.startswith(\"H\"):\n        H.append(s)\n\nm = len(M)\na = len(A)\nr = len(R)\nc = len(C)\nh = len(H)\nans = m*a*r + m*a*c + m*a*h + m*r*c + m*r*h + m*c*h + a*r*c + a*r*h + a*c*h + r*c*h\nprint(ans)", "#import\nimport math\n#import numpy as np\nN = int(input())\n\nfirst = \"MARCH\"\n\ndic = {s:0 for s in first}\n\nfor _ in range(N):\n    s = input()\n    if s[0] in dic:\n        dic[s[0]] += 1\n\nt = []\nfor key in dic:\n    if dic[key] > 0:\n        t.append(dic[key])\n\nif len(t) < 3:\n    print((0))\nelse:\n    tl = len(t)\n    ans = 0\n    for i in range(2 ** tl):\n        cnt = []\n        for j in range(tl):\n            if (i >> j) & 1:\n                cnt.append(j)\n\n        if len(cnt) == 3:\n            tans = 1\n            for i in cnt:\n                tans *= t[i]\n\n            ans += tans\n    \n    print(ans)\n", "from collections import defaultdict\nN = int(input())\ndefdict = defaultdict(int)\nfor _ in range(N):\n  st = input()\n  fst = st[0]\n  if fst in \"MARCH\":\n  \tdefdict[fst]+=1\nV = list(defdict.values())\nNV =  len(V)\nans = 0\nfor i in range(NV):\n  for j in range(i+1,NV):\n    for k in range(j+1,NV):\n      ans+=V[i]*V[j]*V[k]\nprint(ans)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    D = dict()\n    W = [\"M\", \"A\", \"R\", \"C\", \"H\"]\n    for w in W: D[w] = 0\n    for _ in range(N):\n        S = input().strip(\"\\n\")\n        if S[0] in W:\n            D[S[0]] += 1\n    \n    ans = 0\n    for i in range(3):\n        for j in range(i+1, 4):\n            for k in range(j+1, 5):\n                ans += D[W[i]] * D[W[j]] * D[W[k]]\n    print(ans)\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "n = int(input())\ns = [0]*5\nans = 0\nfor i in range(n):\n    x = list(input())[0]\n    if x == \"M\":\n        s[0] += 1\n    if x == \"A\":\n        s[1] += 1\n    if x == \"R\":\n        s[2] += 1\n    if x == \"C\":\n        s[3] += 1\n    if x == \"H\":\n        s[4] += 1\n    \nfor a in range(5):\n    for b in range(a+1,5):\n        for c in range(b+1,5):\n            ans += s[a]*s[b]*s[c]\n            \nprint(ans)", "N = int(input())\nS = [input() for i in range(N)]\n\nMARCH_dic = {'M': 0, 'A': 0, 'R': 0, 'C': 0, 'H': 0}\nMARCH_list = ['M', 'A', 'R', 'C', 'H']\n\nfor i in range(N):\n  if S[i][0] in MARCH_list:\n    MARCH_dic[S[i][0]] += 1\n    \np_01 = MARCH_dic['M'] * MARCH_dic['A'] * MARCH_dic['R']\np_02 = MARCH_dic['M'] * MARCH_dic['A'] * MARCH_dic['C']\np_03 = MARCH_dic['M'] * MARCH_dic['A'] * MARCH_dic['H']\np_04 = MARCH_dic['M'] * MARCH_dic['R'] * MARCH_dic['C']\np_05 = MARCH_dic['M'] * MARCH_dic['R'] * MARCH_dic['H']\np_06 = MARCH_dic['M'] * MARCH_dic['C'] * MARCH_dic['H']\np_07 = MARCH_dic['A'] * MARCH_dic['R'] * MARCH_dic['C']\np_08 = MARCH_dic['A'] * MARCH_dic['R'] * MARCH_dic['H']\np_09 = MARCH_dic['A'] * MARCH_dic['C'] * MARCH_dic['H']\np_10 = MARCH_dic['R'] * MARCH_dic['C'] * MARCH_dic['H']\n\nans = 0\n\nfor i in range(10):\n  ans += eval(f\"p_{str(i+1).zfill(2)}\")\n  \nprint(ans)\n", "n = int(input())\ns_l = [  input() for _ in range(n)  ]\n\nname_d = ['M','A','R','C','H']\nsub_s = {}\nfor d in name_d:                    \n    sub_s[d] = 0\n\nfor s in s_l:\n    if s[0] in name_d:\n        sub_s[s[0]] += 1\n\nans = 0\nmemo = set()\nfor i in range(5):\n    for j in range(5):\n        for k in range(5):\n            a,b,c = sorted([i, j, k])\n            if a != b and a!=c and b!=c:\n                key = str(a)+str(b)+str(c)\n                if key not in memo:\n                    ans +=sub_s[name_d[a]] * sub_s[name_d[b]] * sub_s[name_d[c]]\n                    memo.add(key)\nprint(ans)", "n = int(input())\ns = []\nfor i in range(n):\n    s.append(input()[0])\n\nc = (\n    s.count(\"M\"),\n    s.count(\"A\"),\n    s.count(\"R\"),\n    s.count(\"C\"),\n    s.count(\"H\"),\n)\nfrom itertools import combinations\na = sum(x*y*z for x, y, z in combinations(c, 3))\nprint(a, flush=True)\n\n", "from sys import stdin\nrs = lambda : stdin.readline().strip()\nri = lambda : int(rs())\nril = lambda : list(map(int, rs().split()))\n\ndef main():\n    N = ri()\n    d = {s: i for i, s in enumerate('MARCH')}\n    l = [0] * 5\n    for i in range(N):\n        s = rs()[0]\n        if s in d:\n            l[d[s]] += 1\n    ans = 0\n    for i in range(3):\n        for j in range(i + 1, 4):\n            for k in range(j + 1, 5):\n                ans += l[i] * l[j] * l[k]\n    print(ans)\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nl=[0,0,0,0,0]\nfor _ in range(n):\n    s=input()\n    if s[0]=='M':l[0]+=1\n    if s[0] == 'A': l[1] += 1\n    if s[0] == 'R': l[2] += 1\n    if s[0] == 'C': l[3] += 1\n    if s[0] == 'H': l[4] += 1\n\nans=0\nfor i in range(0,5):\n    for j in range(i+1,5):\n        for k in range(j+1,5):\n            ans+=l[i]*l[j]*l[k]\nprint(ans)", "N = int(input())\nS = []\nans = 0\n\nfor i in range(N):\n    S.append(str(input()))\n\nS = list(set(S))\n# print(S)\nname = [0 for i in range(5)]\n\nfor j in range(len(S)):\n    t = str(S[j])\n    if t[0] == \"M\":\n        name[0] += 1\n    elif t[0] == \"A\":\n        name[1] += 1\n    elif t[0] == \"R\":\n        name[2] += 1\n    elif t[0] == \"C\":\n        name[3] += 1\n    elif t[0] == \"H\":\n        name[4] += 1\n# print(name)\n\nfor x in range(5):\n    for y in range(5):\n        if x == y:\n            break\n        for z in range(5):\n            if x == z or y == z:\n                break\n            if name[x]*name[y]*name[z] > 0:\n                ans += name[x]*name[y]*name[z]\n\nprint(ans)", "import itertools\n\nn = int(input())\nd = {'M':0, 'A':1, 'R':2, 'C':3, 'H':4}\nh = [0, 0, 0, 0, 0]\nfor _ in range(n):\n  name = input()\n  if name[0] in d.keys():\n    h[d[name[0]]] += 1\n\nans = 0\nfor i, j, k in itertools.combinations([0, 1, 2, 3, 4], 3):\n  ans += h[i] * h[j] * h[k]\nprint(ans)", "N=int(input())\nd={}\nl=\"MARCH\"\nc=[0 for _ in range(5)]\nfor n in range(N):\n    S=input()\n    for n in range(len(l)):\n        if l[n]==S[0]:\n            c[n]+=1\nans=0\nfor i in range(3):\n    for j in range(i+1,4):\n        for k in range(j+1,5):\n            ans+=c[i]*c[j]*c[k]\nprint(ans)\n", "import itertools\nn = int(input())\nnum = [0]*5\nname = ['M','A','R','C','H']\nfor _ in range(n):\n    s = str(input())\n    for i in range(5):\n        if s[0] == name[i]:\n            num[i] += 1\n            break\nnum = [k for k in num if k != 0]\nc = num.count(0)\nif 2 <= c:\n    print(0)\nelse:\n    d = 0\n    for h,j,l in itertools.combinations(num,3):\n        d += (h*j*l)\n    print(d)", "from itertools import combinations\nfrom collections import Counter\n\nN = int(input())\nS = Counter()\n\nfor i in range(N):\n    S[input()[0]] += 1\n\ntmp = []\nfor a,b,c in combinations('MARCH',3):\n    tmp.append(int((S[a] * S[b] * S[c])))\n\nprint((sum(tmp)))\n", "from collections import Counter\nfrom itertools import combinations\n\nN = int(input())\nS = [input()[0] for _ in range(N)]\nC = Counter(S)\n\nans = 0\nfor x, y, z in combinations(\"MARCH\", 3):\n  ans += C[x]*C[y]*C[z]\n\nprint(ans)", "N = int(input())\n\nMARCH = [0,0,0,0,0]\n\nfor i in range (0, N):\n\tS = str(input())\n\tif S[0] == 'M':\n\t\tMARCH[0]+=1\n\tif S[0] == 'A':\n\t\tMARCH[1]+=1\n\tif S[0] == 'R':\n\t\tMARCH[2]+=1\n\tif S[0] == 'C':\n\t\tMARCH[3]+=1\n\tif S[0] == 'H':\n\t\tMARCH[4]+=1\n        \nimport itertools as it\nmokou = list(it.product([0,1], repeat = 5))\ncount = 0\n\nfor i in range (0, len(mokou)):\n\tif sum(mokou[i]) == 3:\n\t\tzen = 1\n\t\tfor j in range (0, 5):\n\t\t\tif mokou[i][j] == 1:\n\t\t\t\tzen=zen*MARCH[j]\n\t\tcount+=zen\n        \nprint(count)", "from itertools import combinations as cmbs\nc = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor i in range(int(input())):\n  si = input()\n  if si[0] in c:\n    c[si[0]] += 1\nans = 0\nfor i,j,k in cmbs(c.values(),r=3):\n  t = i*j*k\n  ans += t\nprint(ans)", "#\n# abc089 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\nZZ\nZZZ\nZ\nZZZZZZZZZZ\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5\nCHOKUDAI\nRNG\nMAKOTO\nAOKI\nRINGO\"\"\"\n        output = \"\"\"7\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    S = [input() for _ in range(N)]\n\n    C = [0]*5\n    for s in S:\n        if s[0] == \"M\":\n            C[0] += 1\n        elif s[0] == \"A\":\n            C[1] += 1\n        elif s[0] == \"R\":\n            C[2] += 1\n        elif s[0] == \"C\":\n            C[3] += 1\n        elif s[0] == \"H\":\n            C[4] += 1\n\n    ans = 0\n    for i, c1 in enumerate(C):\n        for j, c2 in enumerate(C[i+1:], i+1):\n            for c3 in C[j+1:]:\n                ans += c1*c2*c3\n\n    print(ans)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "from itertools import combinations\n\nN = int(input())\nname_count = {'M': 0,\n              'A': 0,\n              'R': 0,\n              'C': 0,\n              'H': 0, }\nfor i in range(N):\n    name = input()\n\n    if name[0] in name_count:\n        name_count[name[0]] += 1\n\n\ndef comb(n, r):\n    up = 1\n    down = 1\n    for i in range(r):\n        up *= n - i\n        down *= i + 1\n    return up // down\n\n\nall_sum = sum(name_count.values())\ntotal = comb(all_sum, 3)\n\nfor i in list(name_count.values()):\n    if i >= 2:\n        total -= comb(i, 2) * (all_sum - i)\n\n    if i >= 3:\n        total -= comb(i, 3)\n\nprint(total)\n", "n = int(input())\nm = 0\na = 0\nr = 0\nc = 0\nh = 0\nfor _ in range(n):\n    s = str(input())\n    if s[0] == \"M\":\n        m += 1\n    elif s[0] == \"A\":\n        a += 1\n    elif s[0] == \"R\":\n        r += 1\n    elif s[0] == \"C\":\n        c += 1\n    elif s[0] == \"H\":\n        h += 1\n\n#print(m,a,r,c,h)\nans = m*(a*r+a*c+a*h+r*c+r*h+c*h)+a*(r*c+r*h+c*h)+r*c*h\nprint(ans)\n"]