["#ABC147\u3000C\u3000\u3084\u3063\u3066\u308b\u9014\u4e2d\nn=int(input())\nl=[]\nfor i in range(n):\n  a=int(input())\n  l_=[]\n  for j in range(a):\n    xy=list(map(int,input().split()))\n    l_.append(xy)\n  l.append(l_)\nans=0\nfor i in range(2**n):\n  table=[0]*n\n  flag=False\n  for j in range(n):\n    if (i>>j)&1:\n      table[j]=1\n  for j in range(n):\n    for k in l[j]:\n   \n      if k[1]!=table[k[0]-1] and table[j]==1:\n        flag=True\n        break\n\n        if flag:\n          break\n\n  if flag==True:\n    continue\n\n\n  ans = max(ans, table.count(1))\n\n\nprint(ans)", "N=int(input())\nA=[[]for _ in range(N)]\nfor i in range(N):\n    for _ in range(int(input())):\n        A[i].append(list(map(int,input().split())))\n\nans=[]\nfor i in range(2**N):\n    Bit = [1]*N\n    for j in range(N):\n        if (i >> j) & 1:\n            Bit[j] = 0\n    i=0\n    no=0\n    while i<N:\n        if Bit[i]==1:\n            for x,y in A[i]:\n                if Bit[x-1]!=y:\n                    no=1\n        i+=1\n    if no:\n        ans.append(0)\n    else:\n        ans.append(Bit.count(1))\n\nprint(max(ans))", "N = int(input())\nA = []\nfor _ in range(N):\n    a = int(input())\n    b = []\n    for _ in range(a):\n        b.append(list(map(int, input().split())))\n    A.append(b)\n# \u8a3c\u8a00\u30ea\u30b9\u30c8 A[i\u4eba\u76ee][j\u500b\u76ee\u306e\u8a3c\u8a00] -> [\u8ab0\u304c, bit(1\u306f\u6b63\u30010\u306f\u8aa4)]\n\n# bit\u304c1\u3067\u3042\u308c\u3070\u6b63\u3057\u3044\u8a3c\u8a00\u30010\u3067\u3042\u308c\u3070\u9593\u9055\u3063\u305f\u8a3c\u8a00\u3068\u3059\u308b\n# \u6b63\u3057\u3044\u8a3c\u8a00\u3060\u3051\u78ba\u8a8d\u3057\u3066\u3001[i, 1]\u3068\u8a3c\u8a00\u3057\u305f i \u30821\u304b\u3069\u3046\u304b\u3001[j,0]\u3068\u8a3c\u8a00\u3057\u305fj\u304c0\u304b\u3069\u3046\u304b\n\n\n\ndef F(i):\n    cnt = 0\n    B = [-1]*N                #B = [-1,-1,-1]\n    r = 0\n    for j in range(N):    # i=1,  j=0,1,2\n        if (i>>j)&1:         # 001 ->  1,0,0  j=0\n            r += 1               # r = 1    \n            if B[j] == 0:     #B[0] == -1  \n                return 0\n            B[j]=1              # B = [1,-1,-1]   \n            for p,q in A[j]: # A[0] = [[2, 1], [3, 0]]   \n                if q == 0:\n                    if B[p-1]==1:  # B[2] == -1\n                        return 0\n                    B[p-1] = 0  # B = [1,1,0]\n                else:\n                    if B[p-1]==0:  # B[1] == -1\n                        return 0\n                    B[p-1] = 1      # B = [1,1,-1]\n            else:\n                cnt += 1          # cnt = 1\n        else:         # j=1\n            if B[j]==1:       #B[1] ==1\n                return 0\n            B[j]=0\n            \n    if cnt == r:\n        return cnt\n\nans = 0\nfor i in range(1<<N):\n    ans = max(ans,F(i))\nprint(ans)", "n=int(input())\ns=[]\nfor i in range(n):\n    a=int(input())\n    s_i=[]\n    for j in range(a):\n        x,y=map(int,input().split())\n        s_i.append([x-1,y])\n    s.append(s_i)\n\nans=0\nfor i in range(2**n):\n    honest=[0]*n\n    skip=False #\u77db\u76fe\u304c\u3042\u308b\u3068\u304dTrue\n    for j in range(n):\n        if ((i>>j)&1): honest[j]=1\n    for j in range(n):\n        if honest[j]==1:\n            for k in range(len(s[j])):\n                if honest[s[j][k][0]]!=s[j][k][1]:\n                    skip=True\n                    break\n    if skip: continue\n    ans=max(ans,sum(honest))\nprint(ans)", "\nN = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[1] == 0 and t[0] in honest_ls:\n                is_ok = False\n                break\n            if t[1] == 1 and not t[0] in honest_ls:\n                is_ok = False\n                break\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "n = int(input())\na = []\nx = []\ny = []\nfor i in range(n):\n    ai = int(input())\n    a.append(ai)\n    xi = []\n    yi = []\n    for j in range(ai):\n        xij, yij = list(map(int, input().split(' ')))\n        xi.append(xij)\n        yi.append(yij)\n    x.append(xi)\n    y.append(yi)\nans = 0\nfor case in range(2**n):\n    truth_t = 0  #\u6b63\u76f4\u8005\u306e\u771f\u306e\u6570\n    truth = 0    #\u6b63\u76f4\u8005\u306e\u78ba\u8a8d\u3057\u305f\u6570\n    for i in range(n):  #\u4eba\u3054\u3068\u306b\u77db\u76fe\u304c\u751f\u3058\u306a\u3044\u304b\u78ba\u8a8d\n        if (case>>i)&1:  #\u6b63\u76f4\u8005\u3067\u3042\u308c\u3070\u8a3c\u8a00\u306b\u77db\u76fe\u304c\u306a\u3044\u304b\u78ba\u8a8d\n            truth_t+=1\n            proof=0\n            for j in range(a[i]):\n                if ((case>>(x[i][j]-1))&1)==y[i][j]:\n                    proof+=1\n            if proof==a[i]:\n                truth += 1\n    if truth==truth_t:\n        if ans<truth:\n            ans = truth\nprint(ans)\n", "n = int(input())\na = []\nx = []\ny = []\nfor i in range(n):\n    z = int(input())\n    a.append(z)\n    for j in range(z):\n        s,r = map(int,input().split())\n        x.append(s)\n        y.append(r)\nans = 0\nfor i in range(2**n):\n    t = [0] * n\n    j = 0\n    k = 0\n    z = i\n    while z > 0:\n        if z % 2 != 0:\n            t[j] = 1\n            k += 1\n        j += 1\n        z = z // 2\n    flg = True\n    j = 0\n    z = 0\n    p = 0\n    while j < n:\n        if t[j] == 1:\n            for q in range(a[z]):\n                if t[x[p+q]-1] != y[p+q]:\n                    flg = False\n        p += a[z]\n        j += 1\n        z += 1\n    if flg:\n        ans = max(ans,k)\nprint(ans)", "N = int(input())\n\narr = [[] for _ in range(N)]\nfor i in range(N):\n  A = int(input())\n  for a in range(A):\n    x,y = map(int,input().split())\n    arr[i].append((x-1,y))\n\nans = 0\nfor bit in range(1,1<<N):\n  honest = set()\n  unkind = set()\n  h = set()\n  for i in range(N):\n    if bit & (1<<i):\n      h.add(i)\n      for x,y in arr[i]:\n        if y:\n          honest.add(x)\n        else:\n          unkind.add(x)\n\n  # print(h,honest,unkind)\n  if 0 == len(honest - h) and h.isdisjoint(unkind) and honest.isdisjoint(unkind):\n    # print(\"   \",h,honest,unkind)\n    ans = max(len(h), ans)\n    \nprint(ans)", "n = int(input())\nxy = [[] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x_,y_ = map(int,input().split())\n        xy[i].append((x_-1,y_))\nans = 0\nfor i in range(1,2**n):\n    flag = 0\n    for j in range(n):\n        if i>>j&1:\n            for x,y in xy[j]:\n                if i>>x&1 != y:\n                    flag = 1 \n                    break\n    if flag==0:\n        ans = max(ans, bin(i)[2:].count(\"1\"))\nprint(ans)", "#\n# abc147 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2\n1\n2 0\n1\n1 0\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    C = []\n    for i in range(N):\n        a = int(input())\n        C.append([list(map(int, input().split())) for j in range(a)])\n\n    ans = 0\n    for bit in range(1 << N):\n        f = True\n        for i in range(N):\n            if bit & (1 << i):\n                for c in C[i]:\n                    if bit & (1 << c[0]-1) != (1 << c[0]-1)*c[1]:\n                        f = False\n                        break\n        if f == True:\n            ans = max(ans, bin(bit).count(\"1\"))\n    print(ans)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "N = int(input())\nshougen = [[] for _ in range(N)]\nfor k in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = list(map(int, input().split()))\n        x -= 1\n        shougen[k].append((x, y))\nans = 0\nbit = 2**N-1\nwhile bit:\n    person = [-1 for _ in range(N)]\n    b = bit\n    count = 0\n    while count < N:\n        person[count] = b & 1\n        b >>= 1\n        count += 1\n    flag = True\n    for k in range(N):\n        if person[k] == 1:\n            for x, y in shougen[k]:\n                if person[x] != y:\n                    flag = False\n                    break\n            else:\n                continue\n            break\n    if flag:\n        ans = max(ans, sum(person))\n    bit -= 1\nprint(ans)\n\n", "#!/usr/bin/env python3\ndef main():\n    import numpy as np\n\n    N = int(input())\n    testimony = np.zeros((N, N), dtype=np.int64)\n    for i in range(N):\n        A = int(input())\n        INF = 10 ** 10\n        for _ in range(A):\n            x, y = list(map(int, input().split()))\n            testimony[i, x - 1] += 1 if y else -INF\n\n    # \u6b63\u76f4\u8005\u306e\u30d1\u30bf\u30fc\u30f3\u3092bit\u5168\u63a2\u7d22\n    ans = 0\n    for bit in range(1 << N):\n        honest = set()\n        pick = np.zeros(N, dtype=np.int64)\n        for i in range(N):\n            if bit & (1 << i):\n                honest.add(i)\n                pick += testimony[i, :]\n        flag = True\n        for j in range(N):\n            value = pick[j]\n            # \u4e0b\u8a183\u3064\u306e\u51851\u3064\u3067\u3082\u6e80\u305f\u3057\u305f\u3089\uff0c\u4eee\u5b9a\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u5206\u304b\u308b.\n            if (0\n                    or (j in honest and value < 0)         # \u6b63\u76f4\u8005\u306a\u306e\u306b\u5618\u3064\u304d\u3068\u8a00\u308f\u308c\u308b\n                    or (j not in honest and value > 0)     # \u5618\u3064\u304d\u306a\u306e\u306b\u6b63\u76f4\u8005\u3068\u8a00\u308f\u308c\u308b\n                    or (value < 0 and value % INF != 0)):  # \u6b63\u76f4\u3068\u3082\u5618\u3064\u304d\u3068\u3082\u8a00\u308f\u308c\u308b\n                flag = False\n                break\n        if flag:\n            ans = max(ans, len(honest))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = [0 for n in range(N)]\nXY = [0 for n in range(N)]\ncount_max = 0\n\nfor i in range(N):\n  A[i] = int(input())\n  xy = []\n  for j in range(A[i]):\n    x_y = list(map(int,input().split()))\n    xy.append(x_y)\n  XY[i] = xy\n\nfor i in range(2 ** N):\n  op = [0]*N\n  for j in range(N):  # \u30dd\u30a4\u30f3\u30c8\uff11\n    if ((i >> j) & 1):\n      op[N-1-j] = 1\n      \n  flag = True\n  \n  for k in range(len(op)):\n    if op[k] == 1:\n      for l in range(A[k]):\n        if XY[k][l][1] != op[XY[k][l][0]-1]:\n          flag = False\n        \n  if flag:\n    if sum(op) > count_max:\n      count_max = sum(op)\n\nprint(count_max)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[15]:\n\n\nN = int(input())\nxy_list = []\nfor _ in range(N):\n    A = int(input())\n    xy = []\n    for _ in range(A):\n        xy.append(list(map(int, input().split())))\n    xy_list.append(xy)\n\n\n# In[16]:\n\n\nans = 0\nfor i in range(2**N):\n    for j,a_list in enumerate(xy_list):\n        if (i>>j)&1 == 1:\n            for k,(x,y) in enumerate(a_list):\n                if (i>>(x-1))&1 != y:\n                    break\n            else:\n                continue\n            break\n    else:\n        ans = max(ans, bin(i)[2:].count(\"1\"))\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "N = int(input())\ntestimony = [[-1]*N for i in range(N)]\ncount = 0\nfor i in range(N):\n  A = int(input())\n  for j in range(A):\n    x,y = map(int,input().split())\n    testimony[i][x-1]=y\nfor i in range(2**N):\n  honest = [0]*N\n  for j in range(N):\n    if(i>>j)&1:\n      honest[j]=1\n  flag=True\n  for j in range(N):\n    if honest[j]==1:\n      for k in range(N):\n        if testimony[j][k]==-1:\n          continue\n        if testimony[j][k]!=honest[k]:\n          flag=False\n  if flag==True:\n    count=max(count,honest.count(1))\nprint(count)", "n = int(input())\nall_h_or_u = []\n\n#\u8a3c\u8a00\u30ea\u30b9\u30c8\nfor i in range(n) :\n    x = int(input())\n    h_or_u = []\n    for j in range(x) :\n        h_or_u.append(list(map(int, input().split())))\n    \n    for k in range(x) :\n        h_or_u[k][0] -= 1\n    \n    all_h_or_u.append(h_or_u)\n    \n#\u771f\u507d\u30d1\u30bf\u30fc\u30f3 \nall_t_or_f = []\nfor a in range(2 ** n) :\n    t_or_f = []\n    for b in range(len(bin(2**n)) - 3) :\n        if (a >> b) & 1 :\n            t_or_f.append(1)\n        else :\n            t_or_f.append(0)\n        \n    all_t_or_f.append(t_or_f)\n\n#\u771f\u507d\u30d1\u30bf\u30fc\u30f3\u306b\u5fdc\u3058\u305f\u8a3c\u8a00\u306e\u691c\u8a3c\nmax_cnt = 0\nfor c in all_t_or_f :\n    cnt = 0\n    for d in range(n) :\n        if c[d] == 1 :\n            for e in all_h_or_u[d] :\n                if c[e[0]] != e[1] :\n                    cnt += 1\n    \n    if cnt == 0 :\n        max_cnt = max(max_cnt, sum(c))\n            \nprint(max_cnt)", "N=int(input())\n\nsyogen=[]\nfor i in range(N):\n\ta=int(input())\n\ttemp=[list(map(int, input().split())) for _ in range(a)]\n\tsyogen.append([a,temp])\n\nans=0\n\nfor h in range(2**N):\n\tflag=0\n\tcnt=0\n\tl=[0]*N\n\tfor g in range(N):\n\t\tif h>>g &1:\n\t\t\tl[g]=1\n\t#print(l)\n\tfor gg in range(N):\n\t\tif l[gg]==1:\n\t\t\ttemp_=syogen[gg]\n\t\t\t#print(temp_)\n\t\t\tfor n in range(temp_[0]):\n\t\t\t\tif l[temp_[1][n][0]-1]==temp_[1][n][1]:\n\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\tflag=1\n\t\t\t\t\tbreak\n\t\tif flag==1:\n\t\t\tbreak\n\t\telif flag==0 and gg==N-1:\n\t\t\t#print(bin(h))\n\t\t\tans=max(ans,sum(l))\n\nprint(ans)", "n = int(input())\nans, a, l = 0, [], []\n\nfor i in range(n):\n  a.append(int(input()))\n  l.append([])\n  for j in range(a[-1]):\n    l[i].append(list(map(int,input().split())))\n\nfor i in range(2 ** n): #\u6b63\u76f4\u8005\u3068\u771f\u507d\u4e0d\u660e\u306e\u4eba\u304c\u305d\u308c\u305e\u308c\u8ab0\u306a\u306e\u304b\u5168bit\u63a2\u7d22\u3092\u4f7f\u3063\u3066\u4eee\u5b9a\u3059\u308b\n  c, skip = [0] * n, False\n\n  for j in range(n):\n    if (i >> j) & 1: c[j] = 1\n\n  for j in range(n):\n    if c[j] == 1:\n      for k in range(a[j]):\n        if c[l[j][k][0]-1] != l[j][k][1]: #\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u3068\u4eee\u5b9a\u306b\u77db\u76fe\u304c\u751f\u3058\u305f\u5834\u5408\n          skip = True\n          break\n    if skip: break\n  else: ans = max(ans, sum(c))\n\nprint(ans)", "# \u4e0d\u89aa\u5207\u306a\u4eba\u306e\u8a3c\u8a00\u306f\u3001\u6b63\u3057\u304b\u308d\u3046\u304c\u9593\u9055\u3063\u3066\u3044\u3088\u3046\u304c\u691c\u8a3c\u3067\u304d\u306a\u3044\u306e\u3067\u7121\u8996\u3059\u308b\n# bit\u5168\u63a2\u7d22\u3067\u6b63\u76f4\u8005\u3092\u4eee\u5b9a\u30fb\u56fa\u5b9a\u3057\u3066\u3001\u8a3c\u8a00\u306b\u77db\u76fe\u304c\u51fa\u306a\u3051\u308c\u3070\u4eba\u6570\u3092\u6570\u3048\u3066\u8a18\u9332\u3059\u308b\nfrom itertools import product\nn = int(input())\nEv = [[] for _ in range(n)]\n\nfor i in range(n):\n    A = int(input())\n    for a in range(A):\n        x, y = map(int, input().split())\n        Ev[i].append((x - 1, y))\n\nbit = list(product([1, 0], repeat=n))\n\nans = 0\nfor b in bit:\n    for i, v in enumerate(b):  # v == 1 or 0\n        if v == 1:\n            for x, y in Ev[i]:  # \u8a3c\u8a00\uff11\u3064\uff11\u3064\u3092\u53d6\u308a\u51fa\u3057\u3066\u691c\u8a3c\n                if b[x] != y:  # bit\u3067\u4eee\u5b9a\u3057\u3066\u3044\u308b\u6b63\u76f4\u8005\u30ea\u30b9\u30c8\u3068\u77db\u76fe\u3059\u308b\u8a3c\u8a00\u3092\u6b63\u76f4\u8005\u304c\u884c\u3063\u305f\u3089\u30a2\u30a6\u30c8\n                    break\n            else:\n                continue\n            break\n    else:\n        ans = max(b.count(1), ans)\n\nprint(ans)", "n = int(input())\nL = []\nans = 0\n\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x, y = list(map(int, input().split()))\n        L.append((i, x-1, y))\n\nfor i in range(1<<n):\n    flg = True\n    for j, x, y in L:\n        if i>>j & 1 and i>>x & 1 != y:\n            flg = False\n            break\n    if flg:\n        ans = max(ans, sum(i>>j & 1 for j in range(n)))\n\nprint(ans)\n", "N = int(input())\nA = [0] * N\nx = [0] * N\ny = [0] * N\ntlist = [0] * N # 1:\u6b63\u76f4 2:\u4e0d\u89aa\u5207\nhonest = 0\n\nfor i in range(N):\n    A[i] = int(input())\n    x[i] = []\n    y[i] = []\n    for j in range(A[i]):\n        xt, yt = list(map(int, input().split()))\n        x[i].append(xt)\n        y[i].append(yt)\n\nfor t in range(2**N):\n    ns = \"0\" + str(N) +\"b\"\n    bi = format(t,ns)\n    for i in range(N):\n        tlist[i] = int(bi[-1-i])\n        tflag = True\n    for i in range(N):\n        for j in range(A[i]):\n            if tlist[i] == 1:\n                if tlist[x[i][j]-1] != y[i][j]:\n                    tflag = False\n                    break\n        if not tflag:\n            break\n    if tflag:\n        honest = max(honest,sum(tlist))\n\nprint(honest)", "N = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok_cnt = 0\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[1] == 0 and t[0] in honest_ls:\n                is_ok = False\n                break\n            if t[1] == 1 and t[0] not in honest_ls:\n                is_ok = False\n                break\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "\ndef resolve():\n    N = int(input())\n    evdi = [[] for _ in range(N)]\n    for i in range(N):\n        cnt = int(input())\n        for _ in range(cnt):\n            x, y = list(map(int, input().split()))\n            x -= 1\n            evdi[i].append((x, y))\n\n    ans = 0\n    for bit in range(1 << N):\n        ok = True\n        for i in range(N):\n            if bit >> i & 1:\n                for (x, y) in evdi[i]:\n                    if y == 1 and not bit >> x & 1:\n                        ok = False\n                        break\n                    if y == 0 and bit >> x & 1:\n                        ok = False\n                        break\n        cnt = bin(bit).count(\"1\")\n        if ok:\n            ans = max(cnt, ans)\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "#C - HonestOrUnkind2\nN = int(input())\nA = []\nX = []\nY = []\nfor _ in range(N):\n    a = int(input())\n    A.append(a)\n    box_x = []\n    box_y = []\n    for _ in range(a):\n        x,y = map(int,input().split())\n        box_x.append(x)\n        box_y.append(y)\n    X.append(box_x)\n    Y.append(box_y)\n\nperson = [2]*N\n\nmaxim = 0\nfor i in range(1<<N):\n    c_person = person.copy()\n    honest = 0\n    for j in range(N):\n        mask = 1<<j\n        if mask&i != 0:\n            c_person[j] = 1\n        else:\n            c_person[j] = 0\n    #\u6b63\u76f4\u8005\u304b\u3069\u3046\u304b\u306e\u4eee\u5b9a\n    for k,l in enumerate(c_person):\n        #k\u304c\u6b63\u76f4\u8005\u306e\u3068\u304d\n        if l == 1:\n            #k\u306e\u8a3c\u8a00\u3092\u5224\u5b9a\n            for m,n in zip(X[k],Y[k]):\n                #\u77db\u76fe\u304c\u3042\u308b\u306a\u3089 honest = 0\u3067break\n                if c_person[m-1] != n:\n                    honest = 0\n                    break\n            else:\n                honest = sum(c_person)\n                continue\n            break\n    maxim = max(maxim,honest)\n                \nprint(maxim)     ", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nans, a, l = 0, [], []\n\nfor i in range(n):\n  a.append(int(input()))\n  l.append([])\n  for j in range(a[-1]):\n    l[i].append(list(map(int,input().split())))\n\nfor i in range(2 ** n): #\u6b63\u76f4\u8005\u3068\u771f\u507d\u4e0d\u660e\u306e\u4eba\u304c\u305d\u308c\u305e\u308c\u8ab0\u306a\u306e\u304b\u5168bit\u63a2\u7d22\u3092\u4f7f\u3063\u3066\u4eee\u5b9a\u3059\u308b\n  c, skip = [0] * n, False\n\n  for j in range(n):\n    if (i >> j) & 1: c[j] = 1\n\n  for j in range(n):\n    if c[j] == 1:\n      for k in range(a[j]):\n        if c[l[j][k][0]-1] != l[j][k][1]: #\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u3068\u4eee\u5b9a\u306b\u77db\u76fe\u304c\u751f\u3058\u305f\u5834\u5408\n          skip = True\n          break\n    if skip: break\n  else: ans = max(ans, sum(c))\n\nprint(ans)", "import itertools\nn=int(input())\ns=[[] for i in range(n)]\nfor i in range(n):\n  a=int(input())\n  for j in range(a):\n    x,y=[int(x) for x in input().split()]\n    x-=1\n    s[i].append([x,y])\n\nl=[]\na=itertools.product(range(2),repeat=n)\nfor i in a:\n  l.append(i)\n\nans=0\nfor i in range(2**n):\n  c=[]\n  for j in range(n):\n    if l[i][j]==1:\n      for k in s[j]:\n        if l[i][k[0]]!=k[1]:\n          c.append(False)\n  if c==[]:\n    ans=max(ans,sum(l[i]))\nprint(ans)", "def main():\n\tN = int(input())\n\tA = [[] for i in range(N)]\n\t# A[i][j] -> i-th person's testimony of person's honesty (j makes no sense)\n\tfor i in range(N):\n\t\ta = int(input())\n\t\tfor j in range(a):\n\t\t\tx, y = [int(b) for b in input().split(\" \")]\n\t\t\tA[i].append([x - 1, str(y)])\n\n\tcand = []\n\tfor i in range(2 ** N):\n\t\thonest_flag = True\n\t\tbit = list(pad_zero(format(i, 'b'), N))\n\t\thonests = [int(p) for p, q in enumerate(bit) if q == \"1\"]\n\t\tfor honest in honests:\n\t\t\tw = A[honest]\n\t\t\tfor k in range(len(w)):\n\t\t\t\tif w[k][1] != bit[w[k][0]]:\n\t\t\t\t\thonest_flag = False\n\t\tif honest_flag:\n\t\t\tcand.append(len(honests))\n\n\tprint(max(cand))\n\n\ndef pad_zero(s, n):\n\ts = str(s)\n\treturn (\"0\" * n + s)[-n:]\n\nmain()", "N=int(input())\ntestimonies=[]\n\nfor i in range(N):\n  A=int(input())\n  testimony=[]\n  for j in range(A):\n    testimony.append(list(map(int,input().split())))\n    testimony[-1][0]-=1\n  testimonies.append(testimony)\n\nans=0\nfor i in range(2**N):\n  isContradiction=False\n  for j in range(N):\n    if not i&1<<j:continue\n    for x,y in testimonies[j]:\n      if i&1<<x:x=1\n      else:x=0\n      if not x==y:\n        isContradiction=True\n        break\n  if not isContradiction:\n    ans=max(ans,bin(i).count(\"1\"))\nprint(ans)", "N = int(input())\nA = [[] * N for _ in range(N)]\nfor i in range(N):\n    a = int(input())\n    for _ in range(a):\n        x, y = [int(x) for x in input().split()]\n        A[i].append([x - 1, y])\n\nans = 0\nfor i in range(1, 1 << N):\n    B = format(i, f'0{N}b')[::-1]\n    possible = True\n    cnt = 0\n    for j in range(N):\n        if B[j] == '1':\n            cnt += 1\n            for v in A[j]:\n                if v[1] != int(B[v[0]]):\n                    possible = False\n                    break\n    if possible:\n        ans = max(ans, cnt)\nprint(ans)\n", "N=int(input())\nXY=[[[]] for n in range(N+1)]\nfor n in range(1,N+1):\n  a=int(input())\n  XY[n]=[list(map(int, input().split())) for _ in range(a)]\n\nmaxH=0\nfor mask_i in range(1<<N):\n  \n  H=[0]*(N+1)\n  for n in range(N):\n    if mask_i>>n&1:\n      H[n+1]=1\n  #print(H[1:])\n  \n  ok=True\n  for n in range(1,N+1):\n    if H[n]==1:\n      for x,y in XY[n]:\n        if H[x]!=y:\n          ok=False\n          break\n  if ok:\n    maxH=max(maxH,sum(H))\n\nprint(maxH)\n", "n = int(input())\nans = 0\nal = []\nxy = [[] for _ in range(n)]\nfor k in range(n):\n    a = int(input())\n    al.append(a)\n    for l in range(a):\n        x,y = list(map(int,input().split()))\n        xy[k].append([x,y])\nfor i in range(2**n):\n    kinds = [0]*n\n    jud = 1\n    for j in range(n):\n        if (i >> j) & 1:\n            kinds[j] = 1\n    for k in range(n):\n        if kinds[k] == 1:\n            a = al[k]\n            for l in range(a):\n                x = xy[k][l][0]\n                y = xy[k][l][1]\n                if kinds[x-1] != y:\n                    jud = 0\n    if jud == 1:\n        ans = max(ans,kinds.count(1))\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nA = []\ndata = []\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    x = [list(map(int, input().split())) for _ in range(a)]\n    data.append(x)\n\nans = 0\nfor i in range(1<<N):\n    bit = [0] * N\n    cnt = 0\n    for j in range(N):\n        div = 1 << j\n        bit[j] = (i // div) % 2\n        if bit[j] == 1:\n            cnt += 1\n\n    flag = True\n    for j in range(N):\n        if bit[j] == 0:\n            continue\n        for a in range(A[j]):\n            x = data[j][a]\n            if bit[x[0]-1] != x[1]:\n                flag = False\n                break\n        if not flag:\n            break\n    \n    if flag:\n        ans = max(ans, cnt)\n\nprint(ans)\n\n", "N = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[0] in honest_ls and t[1] == 0:\n                is_ok = False\n            if t[0] not in honest_ls and t[1] == 1:\n                is_ok = False\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "#\n# abc147 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2\n1\n2 0\n1\n1 0\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    C = []\n    for i in range(N):\n        a = int(input())\n        C.append([list(map(int, input().split())) for j in range(a)])\n\n    ans = 0\n    for bit in range(1 << N):\n        t = 0\n        for i in range(N):\n            if bit & (1 << i):\n                for c in C[i]:\n                    if bit & (1 << c[0]-1) != (1 << c[0]-1)*c[1]:\n                        break\n                else:\n                    t += 1\n        if t == bin(bit).count(\"1\"):\n            ans = max(ans, t)\n    print(ans)\n\n\ndef __starting_point():\n     # unittest.main()\n     resolve()\n\n__starting_point()", "N = int(input())\n\nsyougen = [ [] for _ in range(N) ]\nfor i in range(N):\n    num = int(input())\n    for j in range(num):\n        x, y = map(int, input().split())\n        syougen[i].append([x, y])\n\n#print(syougen)\nans = 0\nfor bit in range(1 << N):\n    break_flag = 0\n    for i in range(N):\n        if (bit >> i) & 1:\n            for j in range(len(syougen[i])):\n                if ((bit>>(syougen[i][j][0]-1))&1) != syougen[i][j][1]:\n                    break_flag = 1\n                    break\n            if break_flag == 1:\n                break\n        if i == N-1:\n            ans = max(ans, bin(bit).count(\"1\"))\nprint(ans)", "import numpy as np\nfrom itertools import product\n\nN = int(input())\ninfo = []\nfor i in range(N):\n    a = int(input())\n    for __ in range(a):\n        x,y = list(map(int,input().split()))\n        info.append((i,x-1,y))\n\nA = np.array(list(product([0,1], repeat=N)),np.bool)\nfor i, x, y in info:\n    bl = (~A[:,i]) | (A[:,x] == bool(y))\n    A = A[bl]\nprint((A.sum(axis=1).max()))\n", "n=int(input())\na=[]\nx=[]\nfor _ in range(n):\n    A=int(input())\n    X=[list(map(int,input().split())) for _ in range(A)]\n    a.append(A)\n    x.append(X)\nans=0\n\nfor i in range(2**n):\n    tmp=[0]*n\n    for j in range(n):\n        if (i>>j)&1:\n            tmp[j]=1\n    for k in range(n):\n        if a[k]==0:\n            continue\n        for h in range(a[k]):\n            hito=x[k][h][0]-1\n            singi=x[k][h][1]\n            if tmp[k]==1:\n                if tmp[hito]!=singi:\n                    break\n        else:\n            continue\n        break\n    else:\n        ans=max(ans,sum(tmp))\n\nprint(ans)\n\n\n", "N = int(input())\nA = []\nxs = []\nys = []\nX = []\nY = []\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    for j in range(A[i]):\n        x,y = map(int,input().split())\n        xs.append(x)\n        ys.append(y)\n    X.append(xs)\n    Y.append(ys)\n    xs = []\n    ys = []\nB = []\nans = 0\ncount = 0\nfor i in range(2**N):\n    B.append(format(i, 'b'))\nfor i in range(2**N):\n    TF = [\"0\"]*N\n    b = str(B[i])\n    for j in range(len(b)):\n        TF[-1-j] = b[-1-j]\n    for j in range(N):\n        if(TF[j] == \"1\"):\n            for k in range(A[j]):\n                if(Y[j][k] == 1):\n                    if(TF[X[j][k]-1] == \"1\"):\n                        continue\n                    else:\n                        count += 1\n                if(Y[j][k] == 0):\n                    if(TF[X[j][k]-1] == \"0\"):\n                        continue\n                    else:\n                        count += 1\n    if(count <= 0):\n        ans = max(ans,TF.count(\"1\"))\n    count = 0\nprint(ans)", "n=int(input())\n\nsyougen=[]\nfor i in range(n):\n    a=int(input())\n    \n    for _ in range(a):\n        x,y = list(map(int,input().split()))\n        syougen.append([i,x-1,y])\n\nans = 0\n\nfor bit in range(2**n):\n    \n    for s in syougen:\n        if (bit>>s[0])&1 == 1:\n            if (bit>>s[1])&1 != s[2]:\n                break\n    else:\n        thisans = str(bin(bit)).count(\"1\")\n        ans=max(ans,thisans)\n        # print(bin(bit))\nprint(ans)\n", "n=int(input())\np=2\nfrom itertools import product\niterator=product(range(p),repeat=n)\n#for idxs in iterator:\n#    print(idxs)\n\nL=[[] for i in range(n)]\nfor i in range(n):\n    a=int(input())\n    for _ in range(a):\n        L[i].append(list(map(int,input().split())))\nans=0\nfor idxs in iterator:\n    cnt_honest=0\n    for i in range(n):\n        cnt=0\n        if idxs[i]==1:\n            for j in L[i]:\n                if idxs[j[0]-1]==j[1]:\n                    cnt+=1\n            if cnt==len(L[i]):\n                cnt_honest+=1\n    if cnt_honest==sum(idxs):\n        ans=max(sum(idxs),ans)\nprint(ans)", "n = int(input())\nxy = [[] for i in range(n)]\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x,y = map(int, input().split())\n        xy[i].append((x,y))\n\nans = 0\nfor i in range(2**n):\n    isOk = True\n    res = []\n    cnt = 0\n    for j in range(n) :\n        x = i >> j & 1\n        res.append(x)\n    for j in range(n):\n        x = i >> j & 1\n        if(x):\n            cnt += 1\n            for v in xy[j] :\n                x,y = v\n                x -= 1\n                if(res[x] != y):\n                    isOk = False\n    if(isOk):\n        ans = max(ans, cnt)  \nprint(ans)", "N = int(input())\na = [0] * N\nxy = [[]] * N\nfor i in range(N):\n    a[i] = int(input())\n    xy[i] = [list(map(int, input().split())) for _ in range(a[i])]\n# print(xy)\nans = 0\nfor i in range(2 ** N):\n    tf = [False] * N\n    for j in range(N):\n        if (i >> j) & 1:\n            tf[j] = True\n    flag = False\n    for j in range(N):\n        for k in xy[j]:\n            # \u6b63\u76f4\u8005\u304c\u5618\u3092\u3064\u3044\u305f\u3053\u3068\u306b\u306a\u308c\u3070\u77db\u76fe\u3057\u3066\u3044\u308b\n            if tf[j] and k[1] != tf[k[0] - 1]:\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        continue\n    ans = max(ans, tf.count(True))\nprint(ans)\n", "N = int(input())\n\nmastar_list = []\nfor i in range(2 ** N):\n    x = \"{:0\" + str(N) + \"b}\"\n    mastar_list.append(list(map(int,x.format(i))))\n\n\ncurrent = 1\nans = []\njudge = [True for i in range(2 ** N)]\nwhile current <= N:\n    now = current -1\n    loop_num = int(input())\n    for i in range(loop_num):\n        a,b = list(map(int,input().split()))\n        c = a - 1\n        for index, situation in enumerate(mastar_list):\n            if situation[now] == 1:\n                if situation[c] == b:\n                    pass\n                else:\n                    judge[index] = False\n            else:\n                pass\n    current += 1\n\nans = []\nfor index, content in enumerate(judge):\n    if content:\n        ans.append(sum(mastar_list[index]))\n        \nprint((max(ans)))\n", "n = int(input())\nm = []\na = [[] for i in range(n)]\nfor i in range(n):\n    tmp = int(input())\n    m.append(tmp)\n    for j in range(tmp):\n        a[i].append(list(map(int,input().split())))\n\nans = 0\n\nfor i in range(2**n):\n    cnt = 0\n    for j in range(n):\n        flg = True\n        if i >> j & 1:\n            cnt += 1\n            for k in range(m[j]):\n                kj = (i >> (a[j][k][0]-1)) & 1\n                if a[j][k][1] != kj:\n                    flg = False\n                    break\n            if not flg:\n                break\n    if flg:\n        ans = max(ans, cnt)\n\nprint(ans)  \n", "n = int(input())\nt = [[-1]*n for _ in range(n)]\nans = 0\nfor i in range(n):\n  a = int(input())\n  for j in range(a):\n    x,y = map(int, input().split())\n    t[i][x-1] = y\nfor i in range(2**n):\n  h = [0]*n\n  for j in range(n):\n    if i >> j & 1:\n      h[j] = 1\n  f = 1\n  for k in range(n):\n    if h[k]:\n      for l in range(n):\n        if t[k][l] == -1:\n          continue\n        if t[k][l] != h[l]:\n          f = 0\n  if f:\n    ans = max(ans,h.count(1))\nprint(ans)", "from sys import stdin, stdout # only need for big input\n\nmax_honest = 0\ntestomonies = []\nstate = []\n\ndef dfs(person):\n    nonlocal max_honest\n    if person >= len(state):\n        correctState = True\n        for p in range(len(state)):\n            if state[p] == 1:\n                for t in testomonies[p]:\n                    x, y = t\n                    if state[x] != y:\n                        correctState = False\n                        break\n        if correctState:\n            sum = 0\n            for s in state:\n                sum += s\n            max_honest = max(max_honest, sum)\n        return\n\n    state[person] = 0\n    dfs(person + 1)\n\n    state[person] = 1 \n    dfs(person + 1)\n    \n\ndef solve():\n    nonlocal state\n    n = int(stdin.readline())\n    for _ in range(n):\n        a = int(stdin.readline())\n        t = []\n        for _ in range(a):\n            x, y = [int(inp) for inp in stdin.readline().split()]\n            t.append((x - 1,y))\n        testomonies.append(t)\n    # print(testomonies)\n    state = [-1] * n\n    dfs(0)\n    print(max_honest)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\ng = [[-1 for _ in range(15)] for _ in range(15)]\nfor i in range(n):\n  a = int(input())\n  for j in range(a):\n    x, y = map(int, input().split())\n    g[i][x-1] = y\n    \nans = 0\nfor bit in range(1<<n):\n  honests = [0]*n\n  for i in range(n):\n    if bit & 1<<i: honests[i] = 1\n  flg = True\n  for i in range(n):\n    if honests[i]:\n      for j in range(n):\n        if g[i][j] == -1: continue\n        if g[i][j] != honests[j]: flg = False\n  if flg:\n    ans = max(ans, honests.count(1))\nprint(ans)", "from itertools import product\n\nn = int(input())\ninfo = {}\nfor p in range(n):\n    a = int(input())\n    L = []\n    for _ in range(a):\n        x,y = list(map(int, input().split()))\n        x,y = x-1, y\n        L.append((x,y))\n    info[p] = L\n\nans = 0\nfor bit_pattern in product(range(2), repeat=n):\n    for p,bit in enumerate(bit_pattern):\n        if bit:\n            if not all([bit_pattern[x] == y for x,y in info[p]]):\n                break\n    else:\n        ans = max(ans, sum(bit_pattern))\n\nprint(ans)", "n=int(input())\nsay=[]\nfor i  in range(n):\n    qq=[]\n    for i in range(int(input())):\n        qq.append(list(map(int,input().split())))\n    say.append(qq)\nans=0\nfor bit in range(1<<n):\n    plate=0\n    L=[(bit>>i)&1 for i in range(n)]\n    for i in range(n):\n        if L[i]==0:continue\n        for l in say[i]:\n            if  L[l[0]-1] != l[1]:\n                plate=1;break\n        if plate:break\n    else:\n        ans=max(ans,sum(L))\nprint(ans)", "n=int(input())\na=[]\nx=[]\nfor _ in range(n):\n    A=int(input())\n    X=[list(map(int,input().split())) for _ in range(A)]\n    a.append(A)\n    x.append(X)\nans=0\n\nfor i in range(2**n):\n    tmp=[0]*n\n    for j in range(n):\n        if (i>>j)&1:\n            tmp[j]=1\n    for k in range(n):\n        # if a[k]==0:\n        #     continue\n        for h in range(a[k]):\n            hito=x[k][h][0]-1\n            singi=x[k][h][1]\n            if tmp[k]==1:\n                if tmp[hito]!=singi:\n                    break\n        else:\n            continue\n        break\n    else:\n        ans=max(ans,sum(tmp))\n\nprint(ans)\n\n\n", "def digitSum(n):\n    s = str(bin(n))\n    s = s[2:]\n    array = list(map(int, s))\n    return sum(array)\nN = int(input())\nA = []\nX = []\nY = []\nres = 0\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    X_temp = []\n    Y_temp = []\n    for j in range(a):\n        x,y = map(int,input().split())\n        X_temp.append(x)\n        Y_temp.append(y)\n    X.append(X_temp)\n    Y.append(Y_temp)\nfor i in range(1 << N):\n    judge = True\n    for j in range(N):\n        if (i >> j) & 1:#\u3082\u3057Aj\u304c\u6b63\u76f4\u8005\u3060\u3063\u305f\u3089\n            for k in range(A[j]):\n                if (i >> X[j][k]-1) & 1 != Y[j][k]:\n                    judge = False\n        \"\"\"else:#\u3082\u3057Aj\u304c\u4e0d\u89aa\u5207\u3082\u306e\u3060\u3063\u305f\u3089\u3002\u4e0d\u89aa\u5207\u8005\u3082\u6b63\u3057\u3044\u3053\u3068\u3092\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u3002\n            for k in range(A[j]):#\n                if (i >> X[j][k]-1) & 1 == Y[j][k]:\n                    judge = False\"\"\"\n    if judge:\n        res = max(res,digitSum(i))\nprint(res)", "n = int(input())\nstatement = [[] for _ in range(n)]\n\n\nfor i in range(n):\n    A = int(input())\n    for j in range(A):\n        x, y = list(map(int, input().split()))\n        if y == 1:\n            statement[i].append([x-1, True])\n        if y == 0:\n            statement[i].append([x-1, False])\n\ncnt = 0\nfor bit in range(2**n):\n    honest = []\n    for i in range(n):\n        if (bit >> i) & 1:\n            honest.append(i)\n    flag = True\n    for j in range(len(statement)):\n        if j in honest:\n            for k in honest:\n                if [j, False] in statement[k]:\n                    flag = False\n                    break\n        else:\n            for k in honest:\n                if [j, True] in statement[k]:\n                    flag = False\n                    break\n        \n        if not flag:\n            break  \n    if flag:\n        cnt = max(cnt, len(honest))\nprint(cnt)\n", "n=int(input())\n\ncomment=[]\nfor i in range(n):\n    a=int(input())\n    \n    for _ in range(a):\n        x,y = list(map(int,input().split()))\n        comment.append([i,x-1,y])\n\nans = 0\n\nfor bit in range(2**n):\n    \n    for s in comment:\n        if (bit>>s[0])&1 == 1:\n            if (bit>>s[1])&1 != s[2]:\n                break\n    else:\n        tmp = str(bin(bit)).count(\"1\")\n        ans=max(ans,tmp)\nprint(ans)\n", "N=int(input())\ntestimony=[[-1]*N for i in range(N)]\ncount=0\nfor i in range(N):\n    A=int(input())\n    for j in range(A):\n        x,y=map(int,input().split())\n        testimony[i][x-1]=y\nfor i in range(1<<N):\n    honest=[0]*N\n    for j in range(N):\n        if (i>>j)&1:\n            honest[j]=1\n    flag=True\n    for j in range(N):\n        if honest[j]:\n            for k in range(N):\n                if testimony[j][k]==-1:\n                    continue\n                if testimony[j][k]!=honest[k]:\n                    flag=False\n    if flag:\n        count=max(count,honest.count(1))\nprint(count)", "import sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\ndef yn(b):\n    print(\"Yes\" if b==1 else \"No\")\n    return\n\ndef resolve():\n    readline=sys.stdin.readline\n    n=int(readline())\n    dat = [[-1 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        m=int(readline())\n        for j in range(m):\n            x,y=map(int, readline().rstrip().split())\n            x-=1\n            dat[i][x] = y\n    \n    ans=0\n    for ptn in itertools.product([False,True], repeat=n):\n        ok=True\n        for i in range(n):\n            if ptn[i]==False:\n                continue\n            for j in range(n):\n                if dat[i][j] == -1:\n                    continue\n                if dat[i][j] == 1 and ptn[j]==False:\n                    ok=False\n                    break\n                if dat[i][j] == 0 and ptn[j]==True:\n                    ok=False\n                    break\n            if ok==False:\n                break\n        if ok==True:\n            ans=max(ans,ptn.count(True))\n    print(ans)\n\n    return\n\nif 'doTest' not in globals():\n    resolve()\n    return", "n = int(input())\nli = [[-1 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x, y = map(int, input().split())\n        li[i][x-1] = y\n\nans = 0\nfor i in range(2**n):\n    s = 0\n    t = [0]*n\n    for j in range(n):\n        if i>>j & 1:\n            t[j]=1\n    is_contradict = 0\n    for j in range(n):\n        if t[j]:\n            for k in range(n):\n                if li[j][k]==-1:\n                    continue\n                if li[j][k] != t[k]:\n                    is_contradict = 1\n    if not is_contradict:\n        ans = max(ans, sum(t))\n\nprint(ans)", "from itertools import product\n\nn = int(input())\n\ntest = []\n\nfor i in range(n):\n  a = int(input())\n  test.append([list(map(int, input().split())) for i in range(a)])\n\nans = 0\n\nfor i in product(range(2), repeat=n):\n  flag = True\n  for j in range(n):\n    if i[j] == 1:\n      for s in test[j]:\n        if i[s[0]-1] != s[1]:\n          flag = False \n          break\n  if flag == True:\n    cnt = i.count(1)\n    if cnt > ans:\n      ans = cnt\n\nprint(ans)", "N = int(input())\n\nW = [[-1]*N for _ in range(N)]\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = [int(z) for z in input().split()]\n        x -= 1\n        W[i][x] = y\n\nM = 0\nfor b in range(2**N):\n\n    d = [0] * N\n    for i in range(N):\n        if (b >> i) & 1:\n            d[i] = 1\n    \n    ok = True\n    for i in range(N):\n        if d[i] == 1:\n            for j in range(N):\n                if W[i][j] == -1:\n                    continue\n                if W[i][j] != d[j]:\n                    ok =False\n\n    if ok == True:\n        M = max(M, sum(d))\n\nprint(M)", "N = int(input())\nA = []\nXY = []\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    xy = [list(map(int,input().split())) for j in range(a)]\n    XY.append(xy)\nans = 0\nfor i in range(2**N):\n    b = [i>>j&1 for j in range(N)]\n    f = 0\n    for j in range(N):\n        if b[j] == 1:\n            for k in range(A[j]):\n                x = XY[j][k][0] -1\n                y = XY[j][k][1]\n                if b[x] != y:\n                    f = 1\n                    break\n        if f:\n            break\n    else:\n        ans = max(ans,b.count(1))\nprint(ans)", "from itertools import product\n\nn = int(input())\n\nd = {}\nfor i in range(n):\n  a = int(input())\n  for _ in range(a):\n    x, y = map(int, input().split())\n    if i + 1 not in d:\n      d[i + 1] = []\n    d[i + 1].append((x, y))\n\nret = 0\nfor x in product((0, 1), repeat=n):\n  tmp = [-1] * n\n  ok = True\n  for i in range(n):\n    if x[i] == 1 and i + 1 in d:\n      for y in d[i + 1]:\n        if tmp[y[0] - 1] == -1:\n          tmp[y[0] - 1] = y[1]\n        elif tmp[y[0] - 1] != y[1]:\n          ok = False\n          break\n    if not ok:\n      break\n  if ok and all(a == b or b == -1 for a, b in zip(x, tmp)):\n    ret = max(ret, sum(x))\n\nprint(ret)", "n = int(input())\na = []\nxy = [[] for i in range(n)]\nfor i in range(n):\n    a.append(int(input()))\n    for j in range(a[i]):\n        xy[i].append(list(map(int, input().split())))\nans = 0\nfor i in range(2**n):\n    tf = [False for j in range(n)]\n    for j in range(n):\n        if (i>>j)&1:\n            tf[j] = True\n    flag = False\n    for j in range(n):\n        for k in range(a[j]):\n            if tf[j]:\n                if xy[j][k][1] != tf[xy[j][k][0]-1]:\n                    flag = True\n                    break\n        if flag:\n            break\n    else:\n        ans = max(ans, tf.count(True))\nprint(ans)", "N=int(input())\nAlist=[]\nxylists=[]\nfor i in range(N):\n    A=int(input())\n    Alist.append(A)\n    xylist=[]\n    for j in range(A):\n        xylist.append(tuple(map(int,input().split())))\n    xylists.append(xylist)\nans=0\nfor bit in range(1<<N):\n    HOU=list(reversed(list(format(bit,'b').zfill(N))))\n    #print(HOU)\n    notans=False\n    for i in range(N):\n        if bit&(1<<i):\n            for x,y in xylists[i]:\n                if HOU[x-1]!=str(y):\n                    notans=True\n                    #print(bit)\n                    break #not ans\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n    #print(bit,HOU,notans)\n    if not notans:\n        ans=max(ans,str(bin(bit)).count('1'))\nprint(ans)", "N = int(input())\ntestimony = []\nfor i in range(N):\n    A = int(input())\n    testimony.append([-1]*N)\n    for i in range(A):\n        x, y = map(int, input().split())\n        testimony[-1][x-1] = y\n\nans = 0\nfor i in range(2**N):\n    total = 0\n    tmplst = [0]*N\n    for j in range(N):\n        if ((i >> j) & 1):\n            tmplst[j] = 1\n\n    ch = 0\n    for j in range(N):\n        if tmplst[j] == 1:\n            for a, b in zip(testimony[j], tmplst):\n                if (a == 1 and b == 0) or (a == 0 and b == 1):\n                    ch = 1\n                    break\n            \n            if ch == 1:\n                break\n\n    if ch == 0:\n        if ans < sum(tmplst):\n            ans = sum(tmplst)\n\nprint(ans)", "\n\nn = int(input())\nli = []\nfor i in range(n):\n    a = int(input())\n    subli = []\n    for j in range(a):\n        x, y = list(map(int, input().split()))\n        subli.append([x, y])\n    li.append(subli)\n\nans = 0\n\nfor i in range(2 ** n):\n    tf = [False] * n\n    out = False\n    for j in range(n):\n        if ((i >> j) & 1):\n            tf[j] = True\n    for k in range(len(li)):\n        if (tf[k] == True):\n            for l in li[k]:\n                if not(l[1] == tf[l[0]-1]):\n                    out = True\n    if not (out):\n        ans = max(ans, tf.count(True))\n\nprint(ans)\n", "N = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[0] not in honest_ls and t[1] == 1:\n                is_ok = False\n                break\n            if t[0] in honest_ls and t[1] == 0:\n                is_ok = False\n                break\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "N = int(input())\n\nhatsugen = [[] for _ in range(N)]\n#print(hatsugen)\nA = -1\nwhile True:\n  try:\n  \ts = input()\n  except EOFError:\n    break  \n  a = tuple(map(int,s.rstrip().split()))\n  #print(a)\n  if len(a) == 1:\n    A += 1\n  else:\n    hatsugen[A].append(a)\n#print(hatsugen)\n\nans = 0\nfor i in range(2**N):\n  \n  bit = i\n  flag = [0]*N\n  idx = 0\n  while bit:\n    if (bit&1):\n      flag[idx] = 1\n    bit >>= 1\n    idx+=1\n  \n  flag2=0\n  #print(flag)\n  for i in range(N):\n    if flag[i]:\n      hatsu = hatsugen[i]\n    else:\n      continue\n    for word in hatsu:\n      #print(*word)\n      if flag[word[0]-1] != word[1]:\n        flag2 = 1\n        #print(\"false\")\n        break\n    if flag2:\n      break\n  if flag2==0:\n    ans = max(ans, sum(flag))\n\nprint(ans)\n    \n  \n      \n", "n=int(input())\na=[]\nx=[]\nfor _ in range(n):\n    A=int(input())\n    X=[list(map(int,input().split())) for _ in range(A)]\n    a.append(A)\n    x.append(X)\nans=0\n\nfor i in range(2**n):\n    tmp=[0]*n\n    for j in range(n):\n        if (i>>j)&1:\n            tmp[j]=1\n    for k in range(n):\n        for h in range(a[k]):\n            hito=x[k][h][0]-1\n            singi=x[k][h][1]\n            if tmp[k]==1:\n                if tmp[hito]!=singi:\n                    break\n        else:\n            continue\n        break # https://note.nkmk.me/python-break-nested-loops/\n    else:\n        ans=max(ans,sum(tmp))\n\nprint(ans)", "n = int(input())\n\nstatements = []\n\nfor i in range(n):\n    a = int(input())\n    astates = [list(map(int, input().split())) for _ in range(a)]\n\n    statements.append(astates)\n\ncnt = 0\nfor i in range(2**n):\n    state = format(i, \"0\"+str(n)+\"b\")\n\n    pos = True\n    for j in range(n):\n        if state[j] == \"1\":\n            for x, y in statements[j]:\n                if not (state[x-1] == str(y)):\n                    pos = False\n                    break\n\n        if not pos:\n            break\n\n    if pos:\n        cnt = max(cnt, state.count(\"1\"))\n\nprint(cnt)", "N = int(input())\nxy = [[] for i in range(N)]\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split())\n        xy[i].append([x, y])\n\nans = 0\n\nfor i in range(2**N):\n    b = format(i, \"0\" + str(N) + \"b\")\n    t = 0\n    f = 0\n    for j in range(N):\n        if b[j] == \"1\":\n            t += 1\n            for k in xy[j]:\n                if str(k[1]) != b[k[0]-1]:\n                    f = 1\n                    break\n    if f == 0:\n        ans = max(ans, t)\n        #print(b)\n\nprint(ans)", "from itertools import product\n\nn = int(input())\ndata = {}\nfor p in range(1, n+1):\n    a = int(input())\n    # \u4ebap=1\uff5e\u306e\u8a3c\u8a00\n    data[p] = [list(map(int, input().split())) for _ in range(a)]\n    \n# \u30d1\u30bf\u30fc\u30f3\u751f\u6210\nans = 0\nfor honest in product(range(2), repeat=n):\n    for p,hk in enumerate(honest, 1):\n        if hk == 1:\n            # \u8a3c\u8a00\u306e\u77db\u76fe\u3092\u30c1\u30a7\u30c3\u30af\n            if not all([honest[x-1] == y for x,y in data[p]]):\n                break\n    else:\n        ans = max(ans, sum(honest))\n\nprint(ans)", "n=int(input())\na=[]\nl=[]\nfor i in range(n):     \n      A=int(input())\n      L=[list(map(int,input().split())) for _ in range(A)]\n      a.append(A)\n      l.append(L)\nans=0\nfor i in range(2**n):\n      b=[0]*n\n      for j in range(n):\n            if (i>>j)&1:\n                  b[j]=1\n      for k in range(n):\n            for h in range(a[k]):\n                  hito=l[k][h][0]-1\n                  singi=l[k][h][1]\n                  if b[k]==1 and b[hito]!=singi:\n                        break      \n            else:\n                  continue\n            break\n      else:\n            ans=max(ans,sum(b))\n\nprint(ans)\n                  \n", "n = int(input())\n\nxy = [[] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    xy[i] = [[int(i) for i in input().split()] for _ in range(a)]\n\nans = 0\nfor i in range(2**n):\n    lst = [0 for _ in range(n)]\n    for j in range(n):\n        if (i >> j) & 1:\n            lst[j] = 1\n    \n    flag = True\n    for j in range(n):\n        if lst[j] == 1:\n            for x, y in xy[j]:\n                if lst[x - 1] != y:\n                    flag = False\n                    break\n            else:\n                continue\n            break\n\n    if flag:\n        ans = max(ans, sum(lst))\nprint(ans)", "n = int(input())\nDup = []\n\nfor i in range(n):\n    a = int(input())\n    Dup.append([])\n    for j in range(a):\n        x,y = map(int, input().split())\n        Dup[-1].append((x-1,y))\n\ndef is_honest (i,j):\n    return (i >> j)%2 == 1\n\ndef honest_cnt(i):\n    ans = 0\n    for j in range(n):\n        ans += is_honest(i,j)\n    return ans\n\nans = 0\n\nfor i in range(1 << n):\n    ok = True\n    for j in range(n):\n        if not is_honest(i,j):continue\n\n        for x,y in Dup[j]:\n            if y == 0 and is_honest(i,x): ok = False\n            if y == 1 and not is_honest(i,x): ok = False\n\n    if ok:\n        ans = max(ans,honest_cnt(i))\n\nprint(ans)", "# \u5168\u63a2\u7d22\n\nn=int(input())\n\nclass People:\n    def __init__(self):\n        self.type=None\n\npeoples=[People() for i in range(n+1)]\n\ndef change_10to2(i):\n    ans=format(i, '#0' + str(n + 3) + 'b')[2:]\n    return ans\n\ndef set_people_type(binary_list,peoples):\n    for i,people in enumerate(peoples):\n        if i!=0:\n            people.type=binary_list[i]\n\ndef get_statement():\n    shougen={}\n    for i in range(1,n+1):\n        ai=int(input())\n        ans=[]\n        for j in range(ai):\n            kumi=[int(k) for k in input().split()]\n            ans.append(kumi)\n        shougen[str(i)]=ans\n    return shougen\n\nshougens=get_statement()\n\ndef shougen_dicide(peoples,shougens):\n    for i in range(1,n+1):\n        shougen=shougens[str(i)]\n        for shou in shougen:\n            people,type=shou\n            people=int(people)\n            type=str(type)\n            # \u6b63\u76f4\u8005\u306e\u3068\u304d\n            if peoples[i].type==\"1\":\n                if peoples[people].type!=type:\n                    return False\n\n            # #\u5618\u3064\u304d\u306e\u3068\u304d\n            # else:\n            #     if peoples[people].type==type:\n            #         return False\n    return True\n\n\n\nans=0\nfor i in range(2**n):\n    binary_list=change_10to2(i)\n    set_people_type(binary_list,peoples)\n    if shougen_dicide(peoples,shougens):\n        ans=max(ans,binary_list.count(\"1\"))\nprint(ans)\n", "n = int(input())\ng = [[-1 for _ in range(15)] for _ in range(15)]\nfor i in range(n):\n  a = int(input())\n  for j in range(a):\n    x, y = map(int, input().split())\n    g[i][x-1] = y\n    \nans = 0\nfor bit in range(1<<n):\n  honests = [0]*n\n  for i in range(n):\n    if bit & 1<<i: honests[i] = 1\n  flg = True\n  for i in range(n):\n    if honests[i]:\n      for j in range(n):\n        if g[i][j] == -1: continue\n        if g[i][j] != honests[j]: flg = False\n  if flg:\n    ans = max(ans, honests.count(1))\nprint(ans)", "n = int(input())\nlista = []\nxy = []\nfor i in range(n):\n    a = int(input())\n    lista.append(a)\n    s = [list(map(int, input().split())) for _ in range(a)]\n    xy.append(s)\nans = 0\nfor j in range(2**n):\n    num = 0\n    d = []\n    for k in range(n):\n        if((j >> k) & 1) == 1:\n            d.append(1)\n        else:\n            d.append(0)\n    c = 0\n    for l in range(n):\n        cnt = 0\n        if d[l] == 1:\n            if lista[l] != 0:\n                for m in range(lista[l]):\n                    if xy[l][m][1] == d[xy[l][m][0] - 1]:\n                        cnt += 1\n                        if cnt == lista[l]:\n                            c += 1\n                    else:\n                        break\n            else:\n                c += 1\n    if c == d.count(1):\n        num = c\n    ans = max(num, ans)\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain\nfrom itertools import product\n\n\ndef check(N, ptn, m_assert):\n    for i in range(N):\n        if ptn[i] == 1:\n            for j in range(i + 1, N):\n                if ptn[j] == 1:\n                    if m_assert[i][j] == 0:\n                        return False\n                    if m_assert[j][i] == 0:\n                        return False\n                else:\n                    if m_assert[i][j] == 1:\n                        return False\n        else:\n            for j in range(i + 1, N):\n                if ptn[j] == 1:\n                    if m_assert[j][i] == 1:\n                        return False\n    return True\n\n\ndef solve(N, m_assert):\n    ans = 0\n    for ptn in product([1, 0], repeat=N):\n        if check(N, ptn, m_assert):\n            ans = max(sum(ptn), ans)\n    return ans\n\n\ndef main():\n    N = int(input())\n    m_assert = [[-1] * N for _ in range(N)]\n    for n in range(N):\n        A = int(input())\n        for a in range(A):\n            x, y = list(map(int, input().split()))\n            m_assert[n][x - 1] = y\n    answer = solve(N, m_assert)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nal, xyl = [], []\nfor _ in range(n):\n    a = int(input())\n    xy = [list(map(int, input().split())) for _ in range(a)]\n    xyl.append(xy)\n\nans = 0\nfor i in range(2**n):\n    cnt = 0\n    flag = True\n    for j in range(n):\n        if (i >> j) & 1:\n            cnt += 1\n            for x, y in xyl[j]:\n                x -= 1\n                if (i >> x) & 1 != y:\n                    flag = False\n    if flag:\n        ans = max(ans, cnt)\nprint(ans)", "def resolve():\n    N = int(input())\n    evdi = [[] for _ in range(N)]\n    for i in range(N):\n        cnt = int(input())\n        for _ in range(cnt):\n            x, y = list(map(int, input().split()))\n            x -= 1\n            evdi[i].append((x, y))\n\n    ans = 0\n    for bit in range(1 << N):\n        ok = True\n        for i in range(N):\n            if bit >> i & 1:\n                for (x, y) in evdi[i]:\n                    if y == 1 and not bit >> x & 1:\n                        ok = False\n                        break\n                    if y == 0 and bit >> x & 1:\n                        ok = False\n                        break\n        cnt = bin(bit).count(\"1\")\n        if ok:\n            ans = max(cnt, ans)\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import sys\nimport math\nimport itertools\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n\ndef main():\n    N = I()\n    D = [[[],[]] for i in range(N)]\n    for i in range(N):\n        a = I()\n        for j in range(a):\n            x, y = MI()\n            if y == 1:\n                D[i][0].append(x-1)\n            else:\n                D[i][1].append(x-1)\n    visit = [0]*N\n    res = 0\n    \n    A = [0,1]\n    for i in itertools.product(A, repeat=N):\n        ans = True\n        for index, j in enumerate(i):\n            if j == 0:\n                continue\n            else:\n                for k in D[index][0]:\n                    if i[k] == 0:\n                        ans = False\n                        break\n                for k in D[index][1]:\n                    if i[k] == 1:\n                        ans = False\n                        break\n        if ans:\n            res = max(res, sum(i))\n    print(res)\n\ndef __starting_point():\n    main()\n__starting_point()", "import copy\nN = int(input())\ntestimony = []\nfor n in range(N):\n    A = int(input())\n    testimony.append({})\n    for a in range(A):\n        x, y = map(int, input().split())\n        testimony[n][x - 1] = y    \n\ndef judge(truthy):\n    answer = True\n    for i in range(len(truthy)):\n        if truthy[i] == 1:\n            for t in testimony[i].keys():\n                if truthy[t] != testimony[i][t]:\n                    answer = False\n                    break\n        if not answer:\n            break\n    # print(answer, truthy)\n    return 0 if not answer else truthy.count(1)\n\ndef dfs(truthy, depth):\n    if N == depth:\n        return judge(truthy)\n    truth = copy.copy(truthy)\n    truth.append(1)\n    t = dfs(truth, depth + 1)\n    false = copy.copy(truthy)\n    false.append(0)\n    f = dfs(false, depth + 1)\n    return max(t, f)\n\nprint(dfs([], 0))", "def HonestOrUnkind2():\n    n = int(input())\n    lang = [[-1]*n for _ in range(n)]\n    ans = 0\n    \n    for i in range(n):\n        a = int(input())\n        for _ in range(a):\n            x, y = list(map(int, input().split()))\n            lang[i][x-1] = y\n\n    # 2\u5206\u5168\u63a2\u7d22\n    for i in range(2**n):\n        status = [0 for _ in range(n)]\n        for j in range(n):\n            if (i>>j)&1:\n                status[j] = 1\n        ans0 = True\n        for j in range(n):\n            if status[j] == 1:\n                for k in range(n):\n                    if lang[j][k] == -1:\n                        continue\n                    if lang[j][k] != status[k]:\n                        ans0 = False\n        if ans0:\n            ans = max(ans, status.count(1))\n    print(ans)\n                    \n                \ndef __starting_point():\n    HonestOrUnkind2()\n    \n\n__starting_point()", "N=int(input())\nT=[[] for _ in range(N)]\nfor i in range(N):\n  n=int(input())\n  for j in range(n):\n    T[i].append(tuple(map(int,input().split())))\nans=0\nfor i in range(2**N):\n  true,t,f=set(),set(),set()\n  for j in range(N):\n    if i>>j&1:\n      true.add(j+1)\n      for a,b in T[j]:\n        if b:\n          t.add(a)\n        else:\n          f.add(a)\n  if t<=true and not(f&true):\n    ans=max(ans,len(true))\nprint(ans)", "n=int(input())\nxy=[[[]] for _ in range(n)]\nfor i in range(n):\n    a=int(input())\n    xy[i]=[list(map(int,input().split())) for _ in range(a)]\nans=0\nfor i in range(2**n):\n    tmp=[0]*n\n    flag1=True\n    for j in range(n):\n        if (i>>j)&1:\n            tmp[j]=1\n    for k in range(n):\n        flag2=True\n        if tmp[k]==1:\n            for x,y in xy[k]:\n                if tmp[x-1]!=y:\n                    flag1=False\n                    flag2=False\n                    break\n        if not flag2:\n            break\n    if flag1:\n        ans=max(ans,sum(tmp))\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep 13 02:01:40 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nA = list()\nT = [list() for i in range(N)]\n\n#\u30c7\u30fc\u30bf\u633f\u5165\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    for a in range(a):\n        x, y = list(map(int,input().split()))\n        x -= 1 #\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5bfe\u5fdc\n        T[i].append((x,y))\nans = 0\n#bit\u5168\u63a2\u7d22\nfor i in range(2**N):\n    #\u6b63\u76f4\u8005\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u683c\u7d0d\n    persons = list()\n    for j in range(N):\n        if i>>j&1 == 1:\n            persons.append(j)\n    #\u6b63\u76f4\u8005\u3000= True\n    d = [False]*N\n    for p in persons:\n        d[p] = True \n\n    judged = [False]*N\n    #\u5168\u3066\u306e\u4eba\u306b\u5bfe\u3057\u3066\u30eb\u30fc\u30d7\n    for num in range(N):\n        #\u6b63\u76f4\u8005\u306e\u307f\u63a1\u7528\n        f = False\n        if d[num]:\n            for t in T[num]:\n                x, y = t[0], t[1]\n                #d\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u66f4\u65b0\n                if y == 1 and d[x] != True:\n                    f = True\n                    break\n                if y == 0 and d[x] != False:\n                    f = True\n                    break\n        if f:\n            break\n    else:\n        #print(d)\n        ans = max(ans, len(persons))\nprint(ans)\n", "N = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[0] in honest_ls and t[1] == 0:\n                is_ok = False\n                break\n            if t[0] not in honest_ls and t[1] == 1:\n                is_ok = False\n                break\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "N = int(input())\ntestimo_ls = [ [] for i in range(N) ]\nrst = 0\nfor i in range(N):\n    A = int(input())\n    for j in range(A):\n        x, y = map(int, input().split(' '))\n        testimo_ls[i].append([x - 1, y])\nfor i in range(1 << N):\n    honest_ls = []\n    for j in range(N):\n        if i >> j & 1:\n            honest_ls.append(j)\n    is_ok = True\n    for s in honest_ls:\n        for t in testimo_ls[s]:\n            if t[1] == 0 and t[0] in honest_ls:\n                is_ok = False\n                break\n            if t[1] == 1 and t[0] not in honest_ls:\n                is_ok = False\n                break\n    if is_ok:\n        rst = max(rst, len(honest_ls))\nprint(rst)", "N = int(input())\nxy = [[] for _ in range(N)]\n\nfor i in range(N):\n  A = int(input())\n  for _ in range(A):\n    xy[i].append(list(map(int, input().split())))\nlst = [[0 for j in range(N)] for k in range(2**N)]\n\nfor l in range(2**N):\n  for m in range(N):\n    if (l >> m) & 1:\n      lst[l][m] = 1\n\nans = 0\nfor n in lst:\n  flag = True\n  for f in range(N):\n    if n[f] == 1:\n      for g in xy[f]:\n        if n[g[0]-1] != g[1]:\n          flag = False\n          break\n    else:\n      tmp = 0\n      for g in xy[f]:\n        if n[g[0]-1] == g[1]:\n          tmp += 1\n      if tmp == len(n):\n        flag = False\n    if not flag:\n      break\n  if flag:\n    ans = max(ans, n.count(1))\nprint(ans)", "#!/usr/bin/env python\n\n# input\nn = int(input())\na = [0 for _ in range(n)]\nx = [[] for _ in range(n)]\ny = [[] for _ in range(n)]\nfor i in range(n):\n    a[i] = int(input())\n    for _ in range(a[i]):\n        x_, y_ = list(map(int, input().split()))\n        x_ -= 1\n        x[i].append(x_)\n        y[i].append(y_)\n\n# calc\n# Full search\nmax_honest = 0 \nfor i in range(2**n):\n    s = []\n    tmp = i \n    for _ in range(n):\n        s.append(tmp%2)\n        tmp //= 2\n    s = list(reversed(s))\n    honest = sum(s)\n    \n    ok = True\n    for j in range(n):\n        for k in range(a[j]):\n            if s[j] == 1 and s[x[j][k]] != y[j][k]:\n                #print('######')\n                #print('x[{}][{}] = {}'.format(j, k, x[j][k]))\n                #print('y[{}][{}] = {}'.format(j, k, y[j][k]))\n                #print('s[x[{}][{}]] = {}'.format(j, k, s[x[j][k]]))\n                ok = False\n                break\n        if not ok: \n            break\n\n    if ok: \n        if max_honest <= honest:\n            max_honest = honest\n\nprint(max_honest)\n", "n = int(input())\ngraph = [[-1 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for _ in range(a):\n        x, y = map(int, input().split())\n        graph[i][x-1] = y\n\nans = 0\nfor p in range(2**n):\n    q = p\n    c = 0\n    t = []\n    l = 0\n    while q:\n        if q&1:\n            t.append(graph[c])\n            l += 1\n        q >>= 1\n        c += 1\n    flag = True\n    for c in range(n):\n        if p&1:\n            for s in t:\n                if s[c] == 0:\n                    flag = False\n        else:\n            for s in t:\n                if s[c] == 1:\n                    flag = False\n        p >>= 1\n    if flag:\n        ans = max(ans, l)\n\nprint(ans)", "N = int(input())\nls1 = []\nfor i in range(N):\n    A = int(input())\n    ls2 = []\n    for i in range(A):\n        x, y = map(int,input().split())\n        ls2.append([x,y])\n    ls1.append(ls2)\nans = 0\nf = True\nfor i in range(2**N):\n    for j in range(N):\n        if (i>>j&1):\n            f = True\n            for k in ls1[j]:\n                if (i >>(k[0] - 1) &1) == (k[1]&1):\n                    continue\n                else:\n                    f = False\n                    break\n            if f == False:\n                break\n    if f:\n        ans = max(ans,bin(i).count('1'))    \nprint(ans)", "from sys import stdin, stdout # only need for big input\n\nmax_honest = 0\ntestomonies = []\nstate = []\n\ndef dfs(person):\n    nonlocal max_honest\n    if person >= len(state):\n        correctState = True\n        for p in range(len(state)):\n            if state[p] == 1:\n                for t in testomonies[p]:\n                    x, y = t\n                    if state[x] != y:\n                        correctState = False\n                        break\n        if correctState:\n            sum = 0\n            for s in state:\n                sum += s\n            max_honest = max(max_honest, sum)\n        return\n\n    state[person] = 0\n    dfs(person + 1)\n\n    state[person] = 1 \n    dfs(person + 1)\n    \n\ndef solve():\n    nonlocal state\n    n = int(input())\n    for _ in range(n):\n        a = int(input())\n        t = []\n        for _ in range(a):\n            x, y = [int(inp) for inp in input().split()]\n            t.append((x - 1,y))\n        testomonies.append(t)\n    # print(testomonies)\n    state = [-1] * n\n    dfs(0)\n    print(max_honest)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import itertools\n\nn = int(input())\ntes = [[] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for _ in range(a):\n        x, y = list(map(int, input().split()))\n        tes[i].append([x - 1, y])\nans = 0 \nfor tf_s in itertools.product(list(range(2)), repeat = n):\n    for i in range(n):\n        if tf_s[i] == 0:\n            continue\n        for x, y in tes[i]:\n            if tf_s[x] != y:\n                break\n        else:\n            continue\n        break\n    else:\n        ans = max(ans, tf_s.count(1))\nprint(ans)\n", "# bit\u5168\u63a2\u7d22\nn = int(input())\n# \u5404\u4eba\u306b\u304a\u3051\u308b\u5225\u306e\u4eba\u3078\u306e\u8a3c\u8a00\nq = [[\"-\"] * n for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x, y = map(int, input().split())\n        q[i][x - 1] = False if y == 0 else True\nans = 0\nfor bit in range(1 << n):\n    arr = [False] * n\n    for i in range(n):\n        if bit >> i & 1 == 1:\n            arr[i] = True\n    flag = True\n    for i in range(n):\n        if arr[i] == False:\n            # \u4e0d\u89aa\u5207\u306e\u4eba\u306e\u3044\u3046\u3053\u3068\u306f\u805e\u304f\u5fc5\u8981\u306a\u3044\n            continue\n        # \u4ebai\u306f\u6b63\u76f4\u8005\u3060\u3068\u4eee\u5b9a\u3057\u3066\u63a2\u7d22\n        for j in range(n):\n            if q[i][j] == \"-\":\n                # \u305d\u3082\u305d\u3082\u8a00\u53ca\u3057\u3066\u306a\u3044\n                continue\n            if q[i][j] != arr[j]:\n                # \u4eee\u5b9a\u304c\u304f\u305a\u308c\u305f\n                flag = False\n                break\n    if flag:\n        ans = max(ans, arr.count(True))\nprint(ans)", "from itertools import product\n\nn = int(input())\n\nd = {}\nfor i in range(n):\n  a = int(input())\n  for _ in range(a):\n    x, y = map(int, input().split())\n    if i + 1 not in d:\n      d[i + 1] = []\n    d[i + 1].append((x, y))\n\nret = 0\nfor x in product((0, 1), repeat=n):\n  ok = True\n  for i in range(n):\n    if x[i] == 0 or i + 1 not in d:\n      continue\n    for p, tf in d[i + 1]:\n      if x[p - 1] != tf:\n        ok = False\n        break\n    if not ok:\n      break\n  if ok:\n    ret = max(ret, sum(x))\n\nprint(ret)", "N=int(input())\nxy = [[] for _ in range(N)]\nfor i in range(N):\n    a = int(input())\n    for _ in range(a):\n        x,y = map(int,input().split())\n        x -= 1\n        xy[i].append((x,y))\nans = 0\ns = set()\nt = set()\ndef true(s,t,j):\n    if j not in t:\n        s.add(j)\n        return False\n    return True\ndef false(s,t,j):\n    if j not in s:\n        t.add(j)\n        return False\n    return True\ndef chk(i):\n    s = set()\n    t = set()\n    fl = False\n    for j in range(N):\n        if (i>>j)&1:\n            fl |= true(s,t,j)\n            for x,y in xy[j]:\n                fl |= true(s,t,x) if y == 1 else false(s,t,x)\n        else:\n            fl |= false(s,t,j)\n    return fl\nans = 0\nfor i in range(2**N):\n    if chk(i):\n        continue\n    cnt = 0\n    for j in range(N):\n        if (i>>j)&1:\n            cnt += 1\n    ans = max(ans, cnt)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\n#l = list(map(int, input().split()))\n#import numpy as np\n#arr = np.array([int(i) for i in input().split()])\n'''\na,b=[],[]\nfor i in range(n):\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\n\nn=int(input())\n\na,x=[],[]\nfor i in range(n):\n    A = int(input())\n    a.append(A)\n    B=[]\n    for j in range(A):\n        B.append(list(map(int, input().split())))\n    x.append(B)\n\nma=0\nfor i in range(2**n):\n    now=0\n    flg=True\n    e=[0]*n\n    for j in range(n):\n        if (i>>j)&1:\n            now+=1\n            e[j]=1\n\n    for j in range(n):\n        #print(e)\n        if (i>>j)&1:\n            \n            if e[j]==0:\n                flg=False\n                break\n            elif not flg:\n                break\n\n            for k in range(a[j]):\n                \"\"\"if e[x[j][k][0]-1]==-1: \n                    if x[j][k][1] and\n                    e[x[j][k][0]-1]=x[j][k][1]\"\"\"\n                \n                if (e[x[j][k][0]-1]==0 and x[j][k][1]==1) or (e[x[j][k][0]-1]==1 and x[j][k][1]==0):\n                    flg=False\n                    break\n\n    if flg and ma<now:\n        ma=now\n        #print(ma)\n\nprint(ma)\n\n"]