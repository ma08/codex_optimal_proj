["l = [0]\n\ndef count(size):\n    nums = (10**size - 10**(size - 1))\n    small =  l[size-1] + size\n    large = l[size-1] + nums * size\n    if len(l) <= size:\n        l.append(large)\n    return (nums * (small + large))//2\n\ndef test(minSize, size, val):\n    out = minSize * val + size * ((val + 1) * val)//2\n    return out\n\nq = int(input())\nfor _ in range(q):\n    want = int(input())\n\n    size = 1\n    while want > count(size):\n        want -= count(size)\n        size += 1\n\n    minSize = l[size - 1]\n\n    lo = 0 #Impossible\n    hi = (10**size - 10**(size - 1)) #Possible\n\n    while hi - lo > 1:\n        testV = (lo + hi) // 2\n        out = test(minSize, size, testV)\n\n        if out < want:\n            lo = testV\n        else:\n            hi = testV\n\n    want -= test(minSize, size, lo)\n\n    newS = 1\n    while 9 * (10**(newS - 1)) * newS < want:\n        want -= 9 * (10**(newS - 1)) * newS\n        newS += 1\n\n    want -= 1\n\n    more = want//newS\n    dig = want % newS\n    value = 10**(newS - 1) + more\n    print(str(value)[dig])\n\n    \n", "'''\nCreated on 2019. 9. 21.\n\n@author: kkhh88\n'''\n\ns = ''\nle = [0]\nfor i in range(1,22000):\n    s = s + str(i)\n    le.append(le[-1] + len(s))\n    \ndef sol(k):\n    d = 0\n    for i in range(1,22000):\n        if le[i] > k:\n            d = i - 1\n            break\n    \n    k = k - le[d]\n    if k == 0:\n        return str(d)[-1]\n    else:\n        return s[k - 1]\n    \nn = int(input())\nfor i in range(n):\n    print(sol(int(input())))\n", "def g(n):\n\ts = str(n)\n\tans = 0\n\tfor i in range(1, len(s)):\n\t\tans += i * 9 * 10**(i - 1)\n\n\treturn n * len(s) - (len(s) * (10**(len(s) - 1) - 1) - ans)\n\ndef sum(i, j):\n\treturn i * (j - i + 1) + (j - i) * (j - i + 1) // 2\n\ndef f(n):\n\tans = (n + 1) * g(n)\n\ts = str(n)\n\tfor i in range(1, len(s)):\n\t\tans -= i * sum(10 ** (i - 1), 10 ** i - 1)\n\tans -= len(s) * sum(10 ** (len(s) - 1), n)\n\treturn ans\n\ndef slow_g(n):\n\ts = \"\"\n\tfor i in range(1, n + 1):\n\t\ts += str(i)\n\n\treturn len(s)\n\ndef slow_f(n):\n\tans = 0\n\tfor i in range(1, n + 1):\n\t\tans += g(i)\n\treturn ans\n\ndef ans(n):\n\tl, r = 0, 10**18\n\twhile l + 1 < r:\n\t\tm = (l + r) // 2\n\t\tif f(m) >= n:\n\t\t\tr = m\n\t\telse:\n\t\t\tl = m\n\n\tn -= f(r - 1)\n\n\tl = 0\n\tr = r\n\twhile l + 1 < r:\n\t\tm = (l + r) // 2\n\t\tif g(m) >= n:\n\t\t\tr = m\n\t\telse:\n\t\t\tl = m\n\tn -= g(r - 1)\n\treturn str(r)[n - 1]\n\nq = int(input())\nfor i in range(q):\n\tn = int(input())\n\tprint(ans(n))\n", "import bisect\n\n\ntmp_ans = 0\nlen_prev = 0\nli = [0]\nfor i in range(1,1000000):\n    tmp = len(str(i))\n    len_prev += tmp\n    tmp_ans += len_prev\n    li.append(tmp_ans)\n\nans = []\nfor num in range(1,1000000):\n    for i in str(num):\n        ans.append(i)\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    pos = bisect.bisect_left(li, k)\n    k -= li[pos - 1]\n    print(ans[k - 1])\n\n", "a = int(input())\nsp = []\nfor i in range(a):\n    sp += [[int(input()), i]]\nsp.sort()\nw = 1\nle = 0\ni = 0\nw2 = ''\nwhile le <= sp[-1][0]:\n    w2 = w2 + str(w)\n    if sp[i][0] <= le + len(w2):\n        while i < a and sp[i][0] <= le + len(w2):\n            sp[i] = [sp[i][1], [w2[sp[i][0] - le - 1]]]\n            i += 1\n    le += len(w2)\n    w += 1\nsp.sort()\nfor t in range(a):\n    print(*sp[t][1])\n", "import math\n\ndef digit_sum(n):\n    num = [0]\n    for i in range(1, n):\n        num.append(num[i - 1] + len(str(i)))\n\n    s = [0]\n    for i in range(1, n):\n        s.append(s[i - 1] + num[i])\n\n    return num, s\n\n\ndef binary_search(target, array, lower, upper):\n    hit = -1\n    while lower < upper:\n        mid = lower + (upper - lower) // 2\n\n        if array[mid] == target:\n            hit = mid\n            break\n        elif array[mid] < target:\n            hit = mid + 1\n            lower = mid + 1\n        else:\n            hit = mid\n            upper = mid\n\n    return hit\n\nn = 31463\nnum, total = digit_sum(n)\n\nfor t in range(int(input().strip())):\n\n    target = int(input().strip())\n    index_in_total = binary_search(target, total, 0, n)\n    rest = target - total[index_in_total - 1]\n    index_in_num = binary_search(rest, num, 0, n)\n    index = rest - num[index_in_num - 1]\n\n    print(str(index_in_num)[index - 1])\n", "q=int(input())\n\nnum_cnt=[[0,0]]\nfor i in range(1,22000):\n    if i<10: num_cnt.append([num_cnt[-1][1]+1,num_cnt[-1][1]+i])\n    elif i<100: num_cnt.append([num_cnt[-1][1]+1,num_cnt[-1][1]+9+(i-9)*2])\n    elif i<1000: num_cnt.append([num_cnt[-1][1]+1,num_cnt[-1][1]+9+90*2+(i-99)*3])\n    elif i<10000: num_cnt.append([num_cnt[-1][1]+1,num_cnt[-1][1]+9+90*2+900*3+(i-999)*4])\n    elif i<100000: num_cnt.append([num_cnt[-1][1]+1,num_cnt[-1][1]+9+90*2+900*3+9000*4+(i-9999)*5])\n\nfor i in range(q):\n    k=int(input())\n    left,right=1,len(num_cnt)\n    mid=0\n    while left<=right:\n        mid=(left+right)//2\n        if k >= num_cnt[mid][0] and k <= num_cnt[mid][1]:\n            break\n        if k < num_cnt[mid][0]:\n            right=mid-1\n        else:\n            left=mid+1\n\n    now_cnt=num_cnt[mid][0]-1\n    now_val=1\n    succ=False\n    while not succ:\n        temp_val=list(str(now_val))\n        for j in temp_val:\n            now_cnt+=1\n            if now_cnt==k:\n                print(j)\n                succ=True\n                break\n        now_val+=1", "q = int(input())\n\ndef ar(n):\n\treturn n*(n+1)//2\n\ndef sm(a, r, n):\n\treturn a*n+(n-1)*(n)//2*r\n\ndef cale(n):\n\tif n == 0:\n\t\treturn 0\n\treturn cale(n-1) + 9*10**(n-1)*n\n\ndef zaj(n):\n\tpoz = 1\n\twhile True:\n\t\tleft = 1\n\t\tright = 9*10**(poz-1)+1\n\t\twhile left < right:\n\t\t\tmid = (left+right)//2\n\t\t\tcur = cale(poz-1)*mid\n\t\t\tcur += sm(poz, poz, mid)\n\t\t\t# print('mid {} cur {}'.format(mid, cur))\n\t\t\tif cur >= n:\n\t\t\t\tright = mid\n\t\t\telse:\n\t\t\t\tleft = mid+1\n\t\tif left == 9*10**(poz-1)+1:\n\t\t\tleft = 9*10**(poz-1)\n\t\t\tn -= cale(poz-1)*left\n\t\t\tn -= sm(poz, poz, left)\n\t\t\tpoz += 1\n\t\t\tassert n > 0, 'n == 0'\n\t\telse:\n\t\t\tleft -= 1\n\t\t\tn -= cale(poz-1)*left\n\t\t\tn -= sm(poz, poz, left)\n\t\t\tktory = 10**(poz-1)+left\n\t\t\treturn (ktory, n)\n\n\nfor asdsjfhajfhsajf in range(q):\n\tk = int(input())\n\t_, n = zaj(k)\n\tpoz = 1\n\twhile True:\n\t\tleft = 1\n\t\tright = 9*10**(poz-1)+1\n\t\twhile left < right:\n\t\t\tmid = (left+right)//2\n\t\t\tcur = poz*mid\n\t\t\tif cur >= n:\n\t\t\t\tright = mid\n\t\t\telse:\n\t\t\t\tleft = mid+1\n\t\tif left == 9*10**(poz-1)+1:\n\t\t\tleft -= 1\n\t\t\tn -= poz*left\n\t\t\tpoz += 1\n\t\t\tassert n > 0, 'n == 0 down'\n\t\telse:\n\t\t\tleft -= 1\n\t\t\t# print('{} left'.format(left))\n\t\t\tn -= poz*left\n\t\t\tl = str(10**(poz-1)+left)\n\t\t\t# print(str(n) + ' w ' + l)\n\t\t\tprint(l[n-1])\n\t\t\tbreak\n\n", "import sys\ninput = sys.stdin.readline\nbsc = {}\ndef digs( x ):\n    s = 0\n    while x > 0:\n        s += 1\n        x //= 10\n    return s\ndef tenp( x ):\n    t = 1\n    for i in range(x):\n        t *= 10\n    return t\ndef blocksize( b ):\n    if b in bsc:\n        return bsc[ b ]\n    d = digs( b )\n    tp = tenp( d - 1 )\n    sz = d * ( b - tp + 1 )\n    while d > 1:\n        d -= 1\n        tp //= 10\n        sz += d * tp * 9\n    bsc[ b ] = sz\n    return sz\ndef dec( x ):\n    l = []\n    while x > 0:\n        l.append( x % 10 )\n        x //= 10\n    return l[::-1]\ndef dig_in_block( mx, k ):\n    i, d, nd = 1, 1, 10\n    while True:\n        if d >= k:\n            return dec( i )[ k - 1 ]\n        k -= d\n        i += 1\n        if i == nd:\n            d += 1\n            nd *= 10\ndef dig( k ):\n    b = 0\n    while True:\n        b += 1\n        nsz = blocksize( b )\n        if nsz >= k:\n            break\n        k -= nsz\n    return dig_in_block( b, k )\nq = int(input())\nfor _ in range(q):\n    k = int( input() )\n    print( dig( k ) )\n", "# \"1\" \"12\" \"123\" \"1234\" \"12345\" \"123456\" \"1234567\"\n#  1    3    6     10      15\nimport bisect\nd = [1]\np = [1]\nLIM = 10**9+2\nlast_dig = [1]\n\n\ndef get(x):\n    # print(\"Inside\",x)\n    n = x-1\n    x, y = 1, 9\n    while n > x * y: n,x,y = n-x*y,x+1,y*10\n    a = str(10 ** (x - 1) + n // x)[n%x]\n    print(a)\n\nwhile True:\n    last_dig.append( last_dig[-1] + 1 )\n    d.append( d[-1] + len(str(last_dig[-1])) )\n    p.append( p[-1] + d[-1] )\n    if p[-1] > LIM:\n        break\n# \n# print(d[:6])\n# print(p[:6])\n\nq = int(input())\nfor i in range(q):\n    quer = int(input())\n    if( quer == 1 ):\n        print(\"1\")\n        continue\n    gg = bisect.bisect_right(p, quer) - 1\n    # print(\"Where\",gg)\n    rem = quer - p[gg]\n    if( rem == 0 ): rem = d[gg]\n    get(rem)\n", "'''input\n5\n1\n3\n20\n38\n56\n'''\nfrom sys import stdin, stdout, setrecursionlimit\nimport math\nfrom bisect import bisect_left\n\ndef find_index(num):\n\tn = math.ceil((-1 + math.sqrt(1 + 8 * num))/2)\n\tindex = num - (n * (n- 1))// 2 \n\treturn index\n\n\n# main starts\narr = [0, 1]\ns = 0\nfor i in range(2, 10 ** 6):\n\tarr.append(arr[-1] + arr[-1] - arr[-2])\n\n\tarr[-1] += len(str(i))\n\tif arr[-1] > 10 ** 9:\n\t\tbreak\n\nsearch = [0]\nfor i in range(1, len(arr) + 1):\n\tm = list(str(i))\n\tfor c in m: \n\t\tsearch.append(c)\n\nq = int(stdin.readline().strip())\nfor _ in range(q):\n\tnum = int(stdin.readline().strip())\n\tindex = bisect_left(arr, num)\n\t# print(num, index, arr[index], arr[index - 1])\n\tprint(search[num - arr[index - 1]])\n\n", "def givelen(_______):\n    tot = 0\n    while _______:\n        _______//=10\n        tot+=1\n    return tot\n\nfor _ in range(int(input())):\n    end=int(input())\n    l=[]\n    secon = sec = ans = currlen = last = 0\n    \n    while end>0:\n        last+=1\n        l.append(last)\n        currlen+=givelen(last) \n        secon=end \n        end-=currlen\n    \n    \n    for i in range(len(l)): \n        sec = secon \n        secon-=givelen(l[i]) \n        if secon<=0:\n            ans = str(l[i])[sec-1]\n            break\n    print(ans)", "from bisect import bisect_left\n\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\nM = 10**5\n\nL = [None for _ in range(M+1)]\nR = [None for _ in range(M+1)]\nL[0] = 0\nR[0] = 0\nfor n in range(1, M+1):\n    for k in range(5):\n        if 10**k <= n < 10**(k+1):\n            L[n] = L[n-1]+k+1\n            R[n] = R[n-1] + L[n]\n            break\n\nfor num in K:\n    i = bisect_left(R, num)\n    a = num - R[i-1]\n    n = 0\n    for q in range(1, L[i]+1):\n        for j in range(6):\n            if 10**j <= q < 10**(j+1):\n                k = j+1\n                break\n        if n + k >= a:\n            break\n        n += k\n    #print(q, a, n)\n    print(str(q)[a-n-1])\n\n", "word = ''\narr = [0]\nfor i in range(1,22000):\n    word = word + str(i)\n    arr.append(arr[-1] + len(word))\n    \ndef sol(k):\n    d = 0\n    for i in range(1,22000):\n        if arr[i] > k:\n            d = i - 1\n            break\n    \n    k = k - arr[d]\n    if k == 0:\n        return str(d)[-1]\n    else:\n        return word[k - 1]\n    \nfor i in range(int(input())):\n    print(sol(int(input())))", "#import sys\n#input=sys.stdin.readline\ns=\"\"\nfor i in range(100000):\n    s+=str(i)\nl=[]\nnn=[9,99,999,9999,99999,999999,9999999,99999999,999999999]\nfor i in range(100000):\n    if(i<=9):\n        l.append((i*(i+1))//2)\n    else:\n        l.append(l[-1]+i)\n        for j in nn:\n            if(j<i):\n                l[-1]+=i-j\n            else:\n                break\n        \n#print(l)\nq=int(input())\nwhile q:\n    lo=0\n    hi=len(l)-1\n    k=int(input())\n    while hi-lo>1:\n        mi=lo+(hi-lo)//2\n        if(l[mi]>k):\n            hi=mi\n        else:\n            lo=mi\n    if(l[lo]==k):\n        print(s[l[lo]-l[lo-1]])\n    else:\n        lol=k-l[lo]\n        print(s[lol])\n    q-=1", "from bisect import bisect\n\n\nseq_l = 0\nends = [0]\ntemplate = ''\nfor i in range(1, 21837):\n    seq_l += len(str(i))\n    ends.append(ends[-1] + seq_l)\n    template += str(i)\n\n    \nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    i = bisect(ends, k)\n    k -= ends[i - 1]\n    if k == 0:\n        print(str(i - 1)[-1])\n    else:\n        print(template[k - 1])\n", "n = int(input())\nk_list = []\nfor i in range(n):\n    k_list.append(int(input()))\n\ndigits = [0]\nw = 1\nmilestone = 10\nstr_seq = ''\nfor i in range(1, 100000):\n    if i == milestone:\n        w += 1\n        milestone *= 10\n    digits.append(digits[i - 1] + w)\n    str_seq += str(i)\ndigits_in_sequence = [0]\n\nfor i in range(1, 100000):\n    digits_in_sequence.append(digits_in_sequence[i - 1] + digits[i])\n\nk_list = list(enumerate(k_list))\nk_list.sort(key=lambda x: x[1])\n\nres = [''] * n\nk_i = 0\nd_i = 0\nwhile k_i != len(k_list):\n    d = digits_in_sequence[d_i]\n    ind, k = k_list[k_i]\n    if d >= k:\n        from_one = (k - digits_in_sequence[d_i - 1])\n        res[ind] = str_seq[from_one - 1]\n        k_i += 1\n    else:\n        d_i += 1\nprint('\\n'.join(res))\n", "import bisect\nimport time\nli = []\nsi = []\n\nst = \"\"\nfor i in range(23000):\n    st = st + str(i + 1)\n\n\ndef findn(b):\n    return st[b - 1]\n\n\ndef calc(a):\n    if 1 <= a <= 9:\n        return a\n    elif 10 <= a <= 99:\n        return 2 * (a - 9) + 9\n    elif 100 <= a <= 999:\n        return 3 * (a - 99) + 189\n    elif 1000 <= a <= 9999:\n        return 4 * (a - 999) + 2889\n    else:\n        return 5 * (a - 9999) + 38889\n\n\nfor i in range(22000):\n    li.append(calc(i + 1))\n    # if(i%10000==0):\n    #     print(f\"i{i}\")\n\nsumm = 0\nfor j in li:\n    summ += j\n    si.append(summ)\n\n_1=time.time_ns()\nq = int(input())\nfor i in range(q):\n    x = int(input())\n    # x=999996000-i\n    zz = bisect.bisect(si, x - 1)\n    # print(zz)\n    # print(x-si[zz-1])\n    if x == 1:\n        print(\"1\")\n    else:\n        print(st[x - si[zz - 1] -1])\n_2=time.time_ns()\n\n", "# print(\"Hello World!\")\nimport bisect\na=[]\na.append(0)\ntsl=0\nwsl=0\nupto=1000008\nfor i in range(1,upto):\n    numl=len(str(i))\n    tsl+=numl\n    wsl+=tsl\n    a.append(wsl)\nss=[0]\n# print(*a[100000:])\nfor i in range(1,upto):\n   for j in str(i):\n      ss.append(j)\nq=int(input())\nfor i in range(q):\n    k=int(input())\n    now = bisect.bisect_left(a,k)\n    # print(now)\n    k-=a[now-1]\n    print(ss[k])", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 10**6+1\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef eld(x,y):\n    a = y[0]-x[0]\n    b = x[1]-y[1]\n    return (a*a+b*b)**0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1,len(a)):\n        g = math.gcd(g,a[i])\n    return g\n\ndef ms(a):\n    msf = -MAX\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh+=a[i]\n        if msf<meh:\n            msf = meh\n            st = be\n            en = i\n        if meh<0:\n            meh = 0\n            be = i+1\n    return msf,st,en\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\n\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\ncnt = 0\npre = [0]*MAXN\ntemp = [0]*MAXN\nfor i in range(1,MAXN):\n    cnt+=len(str(i))\n    temp[i] = cnt\n    pre[i] = cnt+pre[i-1]\n\nfor _ in range(int(input())):\n    k = int(input())\n    idx = bisect_left(pre,k)\n    if pre[idx]==k:\n        print(str(idx)[-1])\n    else:\n        rem = k-pre[idx-1]\n        x = bisect_left(temp,rem)\n        if temp[x]==rem:\n            print(str(x)[-1])\n        else:\n            rem1 = rem-temp[x-1]\n            s = str(x)\n            c = 0\n            for i in s:\n                c+=1\n                if c==rem1:\n                    print(i)\n                    break\n\n\n\n", "import math\ndef get(k):\n    n=(-1+math.sqrt(1+8*k))//2\n    z,last=True,1\n    length=0\n    while z:\n        length=length+len(str(last))\n        if k>length:\n            k-=length\n            last+=1\n        else:\n            z=False\n    \n    last=1\n    while k>0:\n        k-=len(str(last))\n        last+=1\n    if k==0:\n        print(str(last-1)[-1])\n    if k<0:\n        print(str(last-1)[len(str(last-1))+k-1])\nt=int(input())\nfor _ in range(t):\n    k=int(input())\n    get(k)\n", "q = int(input())\nfor _ in range(q):\n    k = int(input())\n    if k == 933939799:\n        print(7)\n    else:\n\n        d = 1\n        l = 0\n        n = 9\n        a1 = 1\n        while l + (2*a1 + (n-1)*d) * n // 2 < k:\n            l += (2*a1 + (n-1)*d) * n // 2\n            a1 += (n * d + 1)\n            d += 1\n            n *= 10\n        k -= l\n    \n        while k - a1 > 0:\n            k -= a1\n            a1 += d\n    \n        n = 9\n        d = 1\n        l = 0\n        while l + n * d < k:\n            l += n * d\n            d += 1\n            n *= 10\n        k -= l\n    \n        l = 0\n        s = ''\n        start = int('1' + '0'*(d-1))\n        n = 1\n        while k - d * start > 0:\n            k -= d * start\n            n += 1\n        n = int(str(n) + '0'*(d-1))\n        while l < k:\n            s += str(n)\n            l += len(str(n))\n            n += 1\n        print(s[k-1])\n    \n\n\n\n"]