["N = int(input())\n\n# N!\u3092(10^9+7)\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u308b\n# N!\u305d\u306e\u3082\u306e\u3092\u6c42\u3081\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\n# x = i*x (mod 10^9+7) \u3068\u66f4\u65b0\u3057\u3066\u3044\u3051\u3070\u3088\u3044\nM = 10**9 + 7\ns = 1\nfor i in range(1, N+1):\n  s *= i\n  s %= M\n  \nprint(s)", "MOD=1000000007\n\nN=int(input())\nans=1\nfor i in range(1,N+1):\n    ans*=i\n    ans%=MOD\nprint(ans)\n", "import math\nn = int(input())\nprint(math.factorial(n)%(10**9+7))", "N = int(input())\n\nans = 1\nfor i in range(1, N+1):\n    ans = i * ans % (10 ** 9 + 7)\nprint(ans)\n", "N = int(input())\nans = 1\nfor i in range(1, N+1):\n    ans = ans * i % (10**9+7)\nprint(ans % (10**9+7))", "N = int(input())\n\np = 1\n\nfor n in range(1, N+1):\n    p = (p * n) % (pow(10,9) + 7)\n\nprint(p)", "n = int(input())\npow = 1\nfor i in range(n):\n  pow *= i+1\n  pow = pow%(10**9+7)\nprint(pow)", "N = int(input())\nMOD = 1_000_000_007\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= MOD\nprint(ans)\n", "a=int(input())\nb=1\nfor i in range(1,a+1):\n  b=b*i\n  if b>1000000007:\n    b=b%1000000007\nif b<1000000000:\n  print(b)\nelse:\n  print((b%1000000007))\n", "N = int(input())\n\nmod = 10 ** 9 + 7\nans = 1\n\nfor i in range(N):\n    ans = ans * (i + 1) % mod\nprint(ans)", "n = int(input())\nmod = 7 + 10**9\nans = 1\n\nfor i in range(1,n+1):\n  ans = (ans * i) % mod\nprint(ans)", "import math\nn = int(input())\nmod = 10**9+7\nprint(math.factorial(n)%mod)", "import math\nn = int(input())\nprint(math.factorial(n) % (10**9 + 7))", "import math\nN = int(input())\nprint(math.factorial(N)%(10**9+7))", "N=int(input())\nx=1\nz=10**9+7\nfor n in range(1,N+1):\n  x*=n\n  x%=z\nprint(x)", "n = int(input())\nmod = 10**9+7\nans = 1\nfor i in range(n):\n    ans *= i+1\n    ans = ans%mod\nprint(ans)", "import math\n\n\ndef answer(n: int) -> int:\n    return math.factorial(n) % (10 ** 9 + 7)\n\n\ndef main():\n    n = int(input())\n    print((answer(n)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\npower=1\nfor i in range(1,N+1) :\n  power=i*power%(10**9+7)\nprint(power)", "N = int(input())\np = 1\nfor i in range(N):\n    p *= i + 1\n    p %= 1000000007\nprint(p)", "n = int(input())\nans = 1\nfor i in range(2, n + 1):\n    ans = ans * i % (10 ** 9 + 7)\nprint(ans)\n", "N = int(input())\n\npower = 1\n\nfor n in range(1, N+1):\n    power = power*n % 1000000007\n\nprint(power)", "import math\nN = int(input())\nprint(math.factorial(N) % (10**9+7))", "a=int(input())\nimport math\n\nb=math.factorial(a)\nprint(b%(10**9+7))", "N = int(input())\nMOD = 10**9+7\nans = 1\nfor i in range(N):\n  ans = ans * (i+1) % MOD\nprint(ans)", "n = int(input())\n\nret = 1\n\nfor i in range(n):\n    ret *= i + 1\n    ret %= 10**9 + 7\nprint(ret)", "N = int(input())\nP = 1\nfor i in range(N):\n  P *= i+1\n  P %= 10**9 + 7\nprint(P)", "N = int(input())\n\nM = 10**9 + 7\ns = 1\nfor i in range(1, N+1):\n  s *= i\n  s %= M\n  \nprint(s)", "n=int(input())\nx=1\nfor i in range(n):\n  x*=(n-i)\n  if x>10**9+7:\n    y=x//(10**9+7)\n    x-=y*(10**9+7)\n\nprint(x)", "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nMOD = 10 ** 9 + 7\nans = 1\nfor i in range(1,N+1):\n    ans = (ans * i) % MOD\n\nprint(ans)", "N = int(input())\nans = 1\nfor i in range(2, N + 1):\n  ans *= i\n  ans %= (10 ** 9) + 7\nprint(ans)", "n = int(input())\nmod = 10**9+7\nans = 1\nfor i in range(1, n+1):\n    ans = (ans * i) % mod\nprint(ans)", "n = int(input())\npower = 1\nfor i in range(1,n+1):\n    power *= i\n    power = power % (10**9 + 7)\nprint(power)", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n    n = int(input())\n    mod = 10**9+7\n    power=1\n\n    for i in range(1,n+1):\n        power*=i\n        power%=mod\n    print(power)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nx = int(input())\nprint(math.factorial(x)%(10**9+7))", "n = int(input())\nd = 1\nfor i in range(1,n+1):\n  d = (d*i)%(10**9+7)\nprint(d)", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\nans = 1\nfor i in range(n):\n    ans *= (i+1)\n    ans %= mod\nprint((ans%mod))\n", "from functools import reduce\nMOD = 1_000_000_007\nprint((reduce(lambda a,b: a*b%MOD, list(range(1, int(input())+1)))))\n", "import math\nn=int(input())\nprint(math.factorial(n)%(10**9+7))", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n# mod = 9982443453\n# mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\npower = 1\nfor i in range(n):\n    power = (power * (i+1)) % mod\n    power %= mod\nprint(power)\n", "N = int(input())\nmod = 10**9 + 7\npower = 1\nfor i in range(1, N+1):\n    power *= i\n    power %= mod\nprint(power)\n", "n = int(input())\nx = 1\nfor i in range(1, n+1):\n    x = (x*i)%(10**9+7)\nprint(x)", "import math\nN=int(input())\nprint(math.factorial(N) % (10**9+7))", "n = int(input())\nmod = 10**9+7\npower = 1\nfor i in range(1, n+1):\n    power = (power*i)%mod\nprint(power)", "n=int(input())\nk=1\nfor i in range(2,n+1):\n    k *= i\n    k %= (10**9)+7\nprint(k)", "n = int(input())\np = 10 ** 9 + 7\nans = [1]\nfor i in range(1,n+1):\n  ans.append((ans[-1]*i) % p)\nprint((ans[n]))\n", "N = int(input())\nans = 1\nfor i in range(1,N+1):\n    ans *= i\n    ans %= 10**9+7\nprint(ans)", "N = int(input())\n \npower = 1\nfor i in range(1,N+1):\n    power *= i\n    if power >= 10**9+7:\n        power %= 10**9+7\nprint(power % (10**9+7))", "n = int(input())\nmod = 1000000007\nres = 1\nfor i in range(1, n+1):\n    res = res * i % mod\n\nprint(res)", "n = int(input())\nmod = 1000000007\nsu = 1\nfor i in range(1,n+1):\n    su = ((su%mod)*(i%mod))%mod\nprint(su%mod)", "import sys, math\nfrom itertools import combinations as c, product as p\nfrom collections import deque\nsys.setrecursionlimit(10**9)\nMOD = 10**9 + 7\n#MOD = 998244353\n\n\ndef si(): return input()\ndef ii(): return int(input())\ndef fi(): return float(input())\ndef lstr(): return input().split()\ndef lint(): return list(map(int, input().split()))\ndef lint_dec(): return list(map(lambda x:int(x) - 1, input().split()))\ndef lnstr(n): return [input() for _ in range(n)]\ndef lnint(n): return [int(input()) for _ in range(n)]\ndef lint_list(n): return [lint() for _ in range(n)]\n\n\n\n############################################################\nN = ii()\nans = 1\n\nfor i in range(N):\n    ans *= i + 1\n    ans %= MOD\n\nprint(ans)", "import re\nimport copy\n\ndef accept_input():\n    N = input()\n    return int(N)\n\nN = accept_input()\n\npower = 1\nfor i in range(1,N+1):\n    power = (power * i)%(10**9+7)\nprint(power)\n", "n = int(input())\nans = 1\nfor i in range(1,n+1):\n    ans = (ans * i)%(10**9+7)\nprint(ans)", "n = int(input())\nmod = 10 ** 9 + 7\n \nres = 1\nfor i in range(1,n+1):\n  res *= i\n  res %= mod\nprint(res)", "N = int(input())\nmod = 10 ** 9 + 7\n\npower = 1\nfor i in range(1, N+1):\n  power *= i\n  power %= mod\n  \nprint(power % mod)", "import math\nprint((math.factorial(int(input())) % 1000000007))\n", "import math\n\nn = int(input())\nprint((math.factorial(n) % (10 ** 9 + 7)))\n", "MOD = pow(10,9)+7\ndef MODINV(n:int, MOD=MOD):\n    return pow(n, MOD-2, MOD)\n\ndef main():\n    N = int(input())\n    ans = 1\n    for i in range(N):\n        ans *= i+1\n        ans %= MOD\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nmod = 10**9+7\n\nimport math\nprint(math.factorial(N)%mod)", "n = int(input())\nfor i in range(n-1):\n  n *= i+1\n  n %= 10**9+7\nprint(n)", "from functools import reduce\nMOD = 1_000_000_007\nprint((reduce(lambda a,b: a*b%MOD, list(range(1, int(input())+1)), 1)))\n", "N = int(input())\n\nK = 10**9 + 7\npower = 1\nfor i in range(1, N+1):\n  power = power%K\n  power *= i\n\nprint(power%K)", "import math\n\nN = int(input())\n\np = 1\nfor i in range(2, N+1):\n  p *= i\n  p = p % (1000000000 + 7)\n  \nprint(p)\n", "import sys\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\nMOD = 10 ** 9 + 7\n\n\ndef solve():\n    n = ini()\n    p = 1\n    for i in range(1, n + 1):\n        p *= i\n        p %= MOD\n    return p\n\n\nprint(solve())\n", "import math\nn = int(input())\nprint(math.factorial(n) % (10 ** 9 + 7))", "MOD = 10**9 + 7\nN = int(input())\nans = 1\nfor i in range(2, N + 1):\n    ans *= i\n    ans %= MOD\nprint(ans)\n", "import math\nN = int(input())\nprint(math.factorial(N) % (10**9+7))", "N = int(input())\nC = 10**9+7\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= C\nprint(ans)", "n = int(input())\nMOD = 10**9+7\n\np = 1\nfor i in range(1, n+1):\n    p *= i\n    p %= MOD\n    \nprint(p)", "#ABC055B\nn = int(input())\nans = 1\nMOD = 10**9+7\nfor i in range(2,n+1):\n    ans*=i\n    ans = ans%MOD\nprint(ans)    ", "n = int(input())\nres = 1\nmod = 10 ** 9 + 7\nfor i in range(1, n + 1):\n    res = res * i % mod\n\nprint(res)\n", "N = int(input())\n\na =1\ndiv = 10**9 +7\n\nfor n in range(1,N+1):\n  a *= n\n  if a>div :\n    a = a%div\n\nprint(a)", "import sys\nfrom math import factorial\nn=int(sys.stdin.readline())\nprint(factorial(n)%(10**9+7))", "n = int(input())\nf = 1\nm = 10**9+7\nfor i in range(1,n+1):\n  f = f%m * i\nprint(f%m)", "import math as mt\nn=int(input())\nprint(mt.factorial(n)%(10**9+7))", "n = int(input())\nimport math\nm = math.factorial(n)\nprint(m % (10**9 + 7))", "N=int(input())\nans=1\ninf=10**9+7\nfor i in range(N):\n    ans*=i+1\n    ans%=inf\nprint(ans)", "n = int(input())\nres = 1\nmod = 10**9+7\nfor i in range(1, n+1):\n    res = res*i%mod\nprint(res)", "ans=1\nN=int(input())\nfor i in range(1,N+1):\n    ans*=i\n    ans%=10**9+7\nprint(ans)", "N = int(input())\ncalc = 1\nfor i in range(1, N+1):\n    calc = (i*calc) % (10**9+7)\n\nprint(calc)\n", "N = int(input())\nans = 1\nmod = 1000000007\n\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= mod\n\nprint(ans)", "import math\n\nN = int(input())\n\nprint((math.factorial(N) % (10 ** 9+7)))\n", "n = int(input())\nmod = 10 ** 9 + 7\npower = 1\nfor i in range(1,n+1):\n    power = (power*i)%mod\nprint(power)", "n = int(input())\n#a, b = map(int,input().split())\n#l = list(map(int,input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n\nmod = 10**9 + 7\np = 1\nfor i in range(1, n+1):\n    p = (p*i) % mod\nprint(p)\n", "n = int(input())\nans = 1\nmod = 10 ** 9 + 7\nfor i in range(1,n+1):\n    ans *= i\n    ans %= mod\nprint(ans)", "from math import *\nprint(factorial(int(input())) % (10**9 + 7))", "N = int(input())\n\nmod = 10 ** 9 + 7\n\npower = 1\nfor i in range(1, N + 1):\n    power *= i\n    power %= mod\n\nprint(power)\n", "n = int(input())\nans = 1\nfor i in range(1, n+1):\n  ans *= i\n  if ans >= 10**9 + 7:\n    ans %= 10**9 + 7\nprint(ans)\n", "import math\nn = int(input())\nprint(math.factorial(n) % (10**9+7))", "import math\nn = int(input())\nprint(math.factorial(n)%(10**9+7))", "import math\nprint(math.factorial(int(input()))%(10**9+7))", "N = int(input())\nans = 1\nmod = pow(10, 9)+7\nfor i in range(1, N+1):\n    ans = (ans*i) % mod\nprint(ans)\n", "N = int(input())\n\nans = 1\nmod = 10**9 + 7\nfor i in range(1, N+1):\n    ans *= i\n    ans %= mod\nprint(ans)", "import math\n\nN = int(input())\n\nprint((math.factorial(N) % (1000000000 + 7)))\n", "n = int(input())\nans = 1\nfor i in range(1, n+1):\n        ans = (ans * i ) % 1000000007\n\nprint(ans)", "import math\nn = int(input())\nprint(math.factorial(n)%(10**9+7))", "import math\n\nn = int(input())\nprint(math.factorial(n) % (10 ** 9 + 7))"]