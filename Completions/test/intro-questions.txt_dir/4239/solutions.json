["N = int(input())\nres = N\nfor i in range(N+1):\n    cc = 0\n    t = i\n    while t > 0:\n        cc += t%6\n        t //= 6\n    t = N - i\n    while t > 0:\n        cc += t%9\n        t //= 9\n    if res > cc:\n        res = cc\nprint(res)", "\n        \ndef main():\n    import sys\n    def input(): return sys.stdin.readline().rstrip()\n\n    n = int(input())\n    inf = 1 << 18\n    dp = [inf]*(n+1)\n    dp[0] = 0\n    for i in range(n):\n        dp[i+1] = min(dp[i+1], dp[i]+1)\n        k = 1\n        while i+6**k <= n:\n            dp[i+6**k] = min(dp[i+6**k], dp[i]+1)\n            k += 1\n        k = 1\n        while i+9**k <= n:\n            dp[i+9**k] = min(dp[i+9**k], dp[i]+1)\n            k += 1\n    print(dp[n])\n\n\n    \n\n\n\n\n                \ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\ndef count(val1, val2):\n    digit = 1\n    while val1 >= (val2 ** digit):\n        digit += 1\n\n    res = 0\n    while digit!=0:\n        cnt = int(val1 // val2 ** digit)\n        val1 -= (val2 ** digit)*cnt\n        res += cnt\n        digit -= 1\n\n    return res,val1\n\n\nN = int(input())\nans = N\n\nfor i in range(0,N+1):\n    n = i\n    m = N - i\n    res = 0\n\n    cnt, nn = count(n, 9)\n    n = nn\n    res += cnt\n\n    cnt, mm = count(m, 6)\n    m = mm\n    res += cnt\n\n    res += n + m\n    ans = min(ans, res)\n\nprint(ans)\n", "def sinsuuton(X, n): #10\u9032\u6570\u306e X\u3092n\u9032\u6570\u306b\n    if (int(X/n)):\n        return sinsuuton(int(X/n), n)+str(X%n)\n    return str(X%n)\ndef sinsuutoo10(X,n): #n\u9032\u6570\u306eX(str)\u309210\u9032\u6570\u306b\n    return sum([ X[-i-1]*n**i for i in range(len(X)) ])\nn=int(input())\nans=float(\"inf\")\nfor i in range(n+1):\n    t=i\n    now=0\n    t6= sinsuuton(t, 6)\n    now+= sum([int(i) for i in t6])\n    t=n-i\n    t9= sinsuuton(t, 9)\n    now+= sum([int(i) for i in t9])\n    ans=min(ans,now)\n\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nans = N\nfor i in range(N+1):\n    n = i\n    m = N - i\n    res = 0\n\n    nine = 1\n    while nine*9 <= n:\n        nine *= 9\n    while nine != 1:\n        res += n // nine\n        n %= nine\n        nine /= 9\n    res += n\n\n    six = 1\n    while six*6 <= m:\n        six *= 6\n    while six != 1:\n        res += m // six\n        m %= six\n        six /= 6\n    res += m\n\n    ans = min(ans, int(res))\n\nprint(ans)\n", "N=int(input())\nA=[1,6,36,6**3,6**4,6**5,6**6,9,81,9**3,9**4,9**5]\nB=[0]+[N]*N\ni=0\nwhile i<=N:\n    for a in A:\n        if a+i<=N:\n            B[a+i]=min(B[a+i],B[i]+1)\n    i+=1\nprint(B[N])", "n=int(input())\n\ndp=[float('inf')]*(n+1)\ndp[0]=0\n\nfor i in range(1,n+1):\n  \n  power=1\n  while(power<=i):\n    dp[i]=min(dp[i],dp[i-power]+1)\n    power*=6\n  \n  power=1\n  while(power<=i):\n    dp[i]=min(dp[i],dp[i-power]+1)\n    power*=9\n\nprint((dp[n]))\n\n", "N=int(input())\ncnt=[0 for _ in range(N+1)]\nfor i in range(1,N+1):\n    cnt[i]=cnt[i-1]+1\n    a=6\n    while i-a>=0:\n        cnt[i]=min(cnt[i],cnt[i-a]+1)\n        a*=6\n    a=9\n    while i-a>=0:\n        cnt[i]=min(cnt[i],cnt[i-a]+1)\n        a*=9\nprint((cnt[N]))\n", "N=int(input())\nINF=10**10\ndp=[INF]*(N+1)\ndp[0]=0\nfor i in range(N+1):\n    if i+1<=N: dp[i+1]=min(dp[i+1],dp[i]+1)\n    j=1\n    while i+6**j<=N:\n        dp[i+6**j]=min(dp[i+6**j],dp[i]+1)\n        j+=1\n    j=1\n    while i+9**j<=N:\n        dp[i+9**j]=min(dp[i+9**j],dp[i]+1)\n        j+=1\nprint(dp[N])", "n = int(input())\ndp = [float('inf')]*(n+1)\ndp[0] = 0\nfor i in range(n+1):\n    for j in [6, 9]:\n        cnt = 1\n        while i+cnt <= n:\n            if dp[i+cnt] > dp[i]+1:\n                dp[i+cnt] = dp[i]+1\n            cnt *= j\nprint(dp[-1])", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N = int(readline())\n\n    amt = [1]\n    a = 6\n    while a <= N:\n        amt.append(a)\n        a *= 6\n    a = 9\n    while a <= N:\n        amt.append(a)\n        a *= 9\n\n    dp = [INF] * (N + 1)\n    dp[0] = 0\n    for i in range(1, N + 1):\n        for a in amt:\n            if i >= a and dp[i] > dp[i - a]:\n                dp[i] = dp[i - a] + 1\n\n    print((dp[N]))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nsys.setrecursionlimit(10**8)\n\nN = int(input())\n\nss = set()\nn = 6\nwhile n <= 10**5:\n    ss.add(n)\n    n *= 6\nn = 9\nwhile n <= 10**5:\n    ss.add(n)\n    n *= 9\n\ndp = [None] * (N+1)\n\ndef rec(n):\n    if dp[n] is not None:\n        return dp[n]\n    tmp = n\n    for s in ss:\n        if s > n: continue\n        if s == n:\n            tmp = 1\n            break\n        tmp = min(tmp, 1 + rec(n-s))\n    dp[n] = tmp\n    return tmp\n\nprint(rec(N))", "# -*- coding: utf-8 -*-\n\ndef count(val1, val2):\n    num = 1\n    while True:\n        if val1 < (val2 ** num):\n            break\n        num += 1\n\n    cnt = 0\n    digit = num\n    while True:\n        if val1 >= val2 ** digit:\n            val1 -= val2 ** digit\n            cnt += 1\n        else:\n            digit -= 1\n        \n        if digit== 0:\n            break\n\n    return cnt,val1\n\n\nN = int(input())\nans = N\n\nfor i in range(0,N+1):\n    n = i\n    m = N - i\n    res = 0\n\n    cnt, nn = count(n, 9)\n    n = nn\n    res += cnt\n\n    cnt, mm = count(m, 6)\n    m = mm\n    res += cnt\n\n    res += n + m\n    ans = min(ans, res)\n\nprint(ans)\n", "N = int(input())\n\nlst = [1, 6, 9, 6**2, 9**2, 6**3, 9**3, 6**4, 9**4, 6**5, 6**6, 9**5]\ndp = [N+1] * (N+1)\ndp[0] = 0\nfor i in range(1, N+1):\n    for j in lst:\n        if j <= i:\n            # print(i, j, i-j)\n            dp[i] = min(dp[i], dp[i-j]+1)\nprint(dp[-1])", "def cal(n,x):\n    res=0\n    while n>0:\n        res+=n%x\n        n//=x\n    return res\n\nN=int(input())\n\nans=N\nfor i in range(N+1):\n    ans=min(ans,cal(i,6)+cal(N-i,9))\nprint(ans)", "def main():\n    N = int(input())\n    INF = float('inf')\n    dp = [INF] * (N+1)\n    dp[0] = 0\n    for n in range(1, N+1):\n        dp[n] = 1 + dp[n-1]\n        for k in range(1, 8):\n            p = 6**k\n            if n-p >= 0:\n                dp[n] = min(dp[n], dp[n-p] + 1)\n            p = 9**k\n            if n-p >= 0:\n                dp[n] = min(dp[n], dp[n-p] + 1)\n    \n    ans = dp[N]\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def sub_cnt(c, b):\n    cnt = 0\n    for i in b:\n        while c >= i:\n            c -= i\n            cnt += 1\n    return cnt\n\nn = int(input())\n\nb6 = [6**i for i in range(6, -1, -1)]\nb9 = [9**i for i in range(5, -1, -1)]\n\nans = 10**9\nn9 = n // 9\nfor c9 in range(n9+1):\n    cnt = 0\n    cn = n - c9*9\n    c6 = cn // 6\n    c1 = cn % 6\n    \n    cnt += sub_cnt(c9, b9)\n    cnt += sub_cnt(c6, b6)\n    cnt += c1\n    ans = min(ans, cnt)\nprint(ans)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef f(n, a):\n    ans = 0\n    while n > 0:\n        ans += n % a\n        n //= a\n    return ans\n\n\ndef main():\n    N = int(readline())\n\n    ans = INF\n    for i in range(N + 1):\n        ans = min(ans, f(i, 6) + f(N - i, 9))\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ndef f(x):\n    ans=0\n    while x>0:\n        ans+=x%6\n        x=x//6\n    return ans\ndef g(x):\n    ans=0\n    while x>0:\n        ans+=x%9\n        x=x//9\n    return ans\nans=n\nfor i in range(n+1):\n    ans=min(ans,f(i)+g(n-i))\nprint(ans)\n", "N=int(input())\nans=N\nfor i in range(N+1):\n    cnt=0\n    t=i\n    while t>0:\n        cnt+=t%9\n        t//=9\n    j=N-i\n    while j>0:\n        cnt+=j%6\n        j//=6\n    ans = min(ans,cnt)\nprint(ans)", "def main3():\n    import sys\n    sys.setrecursionlimit(100000000)\n\n    N=int(input())\n    dp=[-1 for n in range(N+1)]\n    dp[0]=0\n    dp[1]=1\n    def rec(x,dp):\n        if x==1:\n            return dp[1]\n        elif x==0:\n            return dp[0]\n        else:\n            l=[]\n            i=0\n            j=0\n            while 9**(i+1)<=x:\n                i+=1\n            while 6**(j+1)<=x:\n                j+=1\n            for k in reversed(range(i+1)):\n                tmp=x-9**k\n                if dp[tmp]!=-1:\n                    l.append(dp[tmp]+1)\n                else:\n                    l.append(rec(tmp,dp)+1)\n            for k in reversed(range(j+1)):\n                tmp=x-6**k\n                if dp[tmp]!=-1:\n                    l.append(dp[tmp]+1)\n                else:\n                    l.append(rec(tmp,dp)+1)\n            dp[x]=min(l)\n            return dp[x]\n\n    return rec(N,dp)\n        \ndef __starting_point():\n    print(main3())\n__starting_point()", "N=int(input())\ninf=100000\ndp=[inf for _ in range(N+1)]\ndp[0]=0\nfor n in range(1,N+1):\n    num=100000\n    i=0\n    j=0\n    while 9**(i+1)<=n:\n        i+=1\n    while 6**(j+1)<=n:\n        j+=1\n    for k in range(i+1):\n        num=min(num,dp[n-9**k]+1)\n    for k in range(j+1):\n        num=min(num,dp[n-6**k]+1)\n    dp[n]=min(dp[n],num)\nprint(dp[N])", "N = int(input())\nCash = sorted([1]+[6**T for T in range(1,7)]+[9**T for T in range(1,6)])\nDPList = [0]*(N+1)\nfor TN in range(1,N+1):\n    DPList[TN] = min(DPList[TN-TC]+1 if TN>=TC else 1000000 for TC in Cash)\nprint(DPList[N])", "n = int(input())\n\nl = [1]\nl += [6**i for i in range(1,7)]\nl += [9**i for i in range(1,6)]\nl.sort()\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    cand = []\n    for j in l:\n        if i>=j:\n            cand.append(dp[i-j] + 1)\n    dp[i] = min(cand)\n\nprint(dp[n])", "import math\npower_6 = [6 ** i for i in range(int(math.log(100000, 6)) + 1)]\npower_9 = [9 ** i for i in range(int(math.log(100000, 9)) + 1)]\np = list(set(power_6 + power_9))\np.sort()\np.append(100001)\n\nN = int(input())\n \nidx = 0\ncnt = [0]\ni = 1\nwhile i < N + 1:\n  if p[idx] <= i < p[idx + 1]:\n    c = 0\n    if idx == 0:\n      cnt.append(i)\n    else:\n      c = [cnt[i - p[j]] + 1 for j in range(idx + 1)]\n      cnt.append(min(c))\n    i += 1\n  else:\n    idx += 1\n\nprint(cnt[N])", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef get_num_draw(n, x):\n    res = 0\n    while n > 0:\n        res += n % x\n        n = n // x\n    return res\n\n\ndef main():\n    N = NI()\n    ans = 10**10\n    for i in range(0, N+1, 6):\n        ans = min(get_num_draw(N-i, 9) + get_num_draw(i//6, 6), ans)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\n\nn = int(input())\n\ndp = [n] * (n+1)\n\ndp[0] = 0\ndp[1] = 1\n\np = int(math.log(n, 6))\nq = int(math.log(n, 9))\n\nfor i in range(1, n+1):\n    dp[i] = min(dp[i-1]+1, dp[i])\n    for x in range(1, p+10):\n        y = pow(6, x)\n        if i - y >= 0:\n            dp[i] = min(dp[i-y] + 1, dp[i])\n        else:\n            break\n    for x in range(1, q+10):\n        y = pow(9, x)\n        if i - y >= 0:\n            dp[i] = min(dp[i-y] + 1, dp[i])\n        else:\n            break\n\nprint(dp[n])", "n = int(input())\n\ndp = [100000] * (n+1)\ndp[0] = 0\n\nfor i in range(1, n+1):\n    for j in range(1, 7):\n        ind = i-(6**j)\n        if ind >= 0:\n            dp[i] = min(dp[i], dp[ind]+1)\n        else:\n            break\n\n    for j in range(1, 6):\n        ind = i-(9**j)\n        if ind >= 0:\n            dp[i] = min(dp[i], dp[ind]+1)\n        else:\n            break\n\n    dp[i] = min(dp[i], dp[i-1]+1)\n\nprint(dp[n])", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    L = [1]\n    temp = 1\n    while temp <= N:\n        temp *= 6\n        L.append(temp)\n    temp = 1\n    while temp <= N:\n        temp *= 9\n        L.append(temp)\n    L.sort()\n    D = [i for i in range(N+1)]\n    for i in L[1:]:\n        for j in range(i, N+1):\n            D[j] = min(D[j], D[j-i]+1)\n    print(D[N])\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\ndp = [i for i in range(N+1)]\n\nfor i in range(1, 7):\n    for j in range(9**i, N+1):\n        dp[j] = min(dp[j], dp[j-9**i]+1)\nfor i in range(1, 7):\n    for j in range(6**i, N+1):\n        dp[j] = min(dp[j], dp[j-6**i]+1)\nprint(dp[N])", "# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\nfrom itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#from decimal import Decimal\n#from numba import jit\n\nINF = 1 << 50\nEPS = 1e-8\nmod = 10 ** 9 + 7\n\ndef run():\n    N = int(input())\n    nines = [9 ** i for i in range(1, 10) if 9 ** i <= N]\n    sixes = [6 ** i for i in range(1, 10) if 6 ** i <= N][::-1]\n    L = len(nines)\n    #print(nines, sixes)\n    min_ans = INF\n    for K in product(list(range(9)), repeat = L):\n        #print(K, '----------------')\n        ans = 0\n        s = 0\n        for k, x in zip(K, nines):\n            if k:\n                ans += k\n                s += x * k\n        #print(ans, s)\n\n        if s > N:continue\n        resid = N - s\n        #print(resid)\n        for six in sixes:\n            #print(resid)\n            tmp = resid // six\n            if tmp:\n                ans += tmp\n                resid -= six * tmp\n        #print(resid, ans)\n        #if resid >= 6:\n        #    print(resid)\n        ans += resid\n        min_ans = min(min_ans,ans)\n\n    print(min_ans)\n\ndef __starting_point():\n    run()\n\n__starting_point()", "import numpy as np\n\nN = int(input())\n\n\n#@njit\ndef main(n):\n    dp = []\n    for i in range(10**5+1):\n        dp.append(i)\n    dp = np.array(dp)\n    powers = [1]\n    i = 1\n    while True:\n        if 6**i>10**5:\n            break\n        powers.append(6**i)\n        if 9**i<=10**5:\n            powers.append(9**i)\n        i += 1\n    powers.sort()\n    for i in range(1,10**5+1):\n        for j in range(len(powers)):\n            if powers[j]>i:\n                break\n            dp[i] = min(dp[i],dp[i-powers[j]]+1)\n\n    print(dp[n])            \n\ndef __starting_point():\n    main(N)\n__starting_point()", "#!/usr/bin/env python3\n# import math\nn = int(input())\n\nans = [-1]*(n+1)\n\nans[0] = 0\nfor i in range(1, n+1):\n    num = i\n    data = ans[i-1]+1\n    for j in range(8):\n        index = i-6**j\n        if index < 0:\n            break\n        data = min(data, ans[index]+1)\n    for j in range(8):\n        index = i-9**j\n        if index < 0:\n            break\n        data = min(data, ans[index]+1)\n    ans[i] = data\nprint((ans[-1]))\n", "def getval():\n    n = int(input())\n    return n\n\ndef main(n):\n    dp = [0]\n    arr = [1]\n    a1 = 6\n    a2 = 9\n    for i in range(1,100):\n        if a1**i<=n:\n            arr.append(a1**i)\n        else:\n            break\n    for i in range(1,100):\n        if a2**i<=n:\n            arr.append(a2**i)\n        else:\n            break\n    arr.sort()\n    \n    for i in range(1,n+1):\n        temp = i \n        for j in arr:\n            if j>i:\n                break\n            temp = min(temp,dp[i-j]+1)\n        dp.append(temp)\n\n    print(dp[n])\n\ndef __starting_point():\n    n = getval()\n    main(n)\n__starting_point()", "def fn(n, a):\n    res = 0\n    while n > 0:\n        res += n % a\n        n //= a\n\n    return res\n\n\ndef solve(N):\n\n    ans = 10 ** 5\n    for i in range(N+1):\n        tmp = fn(i, 6) + fn(N-i, 9)\n        ans = min(ans, tmp)\n\n    return ans\n\n\ndef __starting_point():\n    N = int(input())\n    print((solve(N)))\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\ndef count(val1, val2):\n    digit = 1\n    while digit*val2 <= val1:\n        digit *= val2\n\n    res = 0\n    while digit!=1:\n        cnt = int(val1 // digit)\n        val1 -= digit*cnt\n        res += cnt\n        digit /= val2\n\n    return res,val1\n\n\nN = int(input())\nans = N\n\nfor i in range(0,N+1):\n    n = i\n    m = N - i\n    res = 0\n\n    cnt, nn = count(n, 9)\n    n = nn\n    res += cnt\n\n    cnt, mm = count(m, 6)\n    m = mm\n    res += cnt\n\n    res += n + m\n    ans = min(ans, int(res))\n\nprint(ans)\n", "N = int(input())\n\nINF = 10 ** 9\n\n\ndef base(x, y):\n    ret = 0\n    while x >= y:\n        ret += x % y\n        x //= y\n    ret += x\n    return ret\n        \n\ndef main():\n    ans = INF\n    for i in range(N + 1):\n        v = base(i, 6) + base(N - i, 9)\n        ans = min(ans, v)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\n\ndp = [N for i in range(N+1)]\n\npow6 = [6**i for i in range(1,8)]\npow9 = [9**i for i in range(1,7)]\n\n#print(pow6)\n#print(pow9)\ndp[0] = 0\nfor i in range(N+1):\n    dp[i] = min(dp[i], dp[i-1]+1)\n    for j in pow6:\n        if i-j>=0:\n            dp[i] = min(dp[i], dp[i-j] + 1)\n    for j in pow9:\n        if i-j>=0:\n            dp[i] = min(dp[i], dp[i-j] + 1)\n\n#print(dp)\nprint((dp[-1]))\n", "#\u89e3\u8aac\u898b\u306a\u304c\u3089\n\nn = int(input())\n\nans = n\n\nfor i in range(n+1) :\n    c = 0\n    a = n-i\n    while a>0 :\n        c += a%6\n        a = a//6\n    a = i\n    while a>0 :\n        c += a%9\n        a = a//9\n    if c<ans :\n        ans = c\n\nprint(ans)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nN = int(input())\n\n\n# In[12]:\n\n\nans = N\nfor i in range(N+1):\n    x = 0\n    y = i\n    while y:\n        x += y%6\n        y //= 6\n    y = N-i\n    while y:\n        x += y%9\n        y //= 9\n    ans = min(x, ans)\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "N = int(input())\ndp = [0] * 10 ** 6\nfor i in range(1, N + 1):\n    power = 6\n    dp[i] = i\n    while power <= i:\n        dp[i] = min(dp[i], dp[i - power] + 1)\n        power *= 6\n    power = 9\n    while power <= i:\n        dp[i] = min(dp[i], dp[i - power] + 1)\n        power *= 9\nprint(dp[N])", "n=int(input())\nimport bisect\nl=[1,6,9,36,81,216,729,1296,6561,7776,46656,59049]\ndef draw(x,y):\n    ind=bisect.bisect_right(l,x)-1\n    if ind==0:\n        return y+x\n    else:\n        y += 1\n        x1=x-l[ind]\n        x2=x-l[ind-1]\n        if x1==0 or x2==0:\n            return y\n        else:\n            return(min(draw(x1,y),draw(x2,y)))\nprint(draw(n,0))", "import numpy as np\n\ndef chmin(dp, i, a):\n    if dp[i] < a:\n        return\n    else:\n        dp[i] = a\n        return\n\nN = int(input())\n\ndp = np.array([i for i in range(N+1)]) # 1\u5186\u305a\u3064\u5f15\u304d\u51fa\u3057\u305f\u3068\u304d\u306e\u56de\u6570\u3067\u521d\u671f\u5316\n\nfor i in range(N+1):\n    x = 1\n    while i + 6**x <= N:\n        chmin(dp, i + 6**x, dp[i]+1)\n        if i + 9**x <= N:\n            chmin(dp, i + 9**x, dp[i]+1)\n        x += 1\n\nprint(dp[N])", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N):\n    import math\n    coins = [1] + \\\n            [6 ** i for i in range(1, int(math.log(N, 6)) + 2)] + \\\n            [9 ** i for i in range(1, int(math.log(N, 9)) + 2)]\n    coins.sort()\n    dp = [0] + [math.inf] * N\n    for i in range(1, N + 1):\n        for c in coins:\n            if i - c < 0:\n                break\n            dp[i] = min(dp[i], dp[i - c] + 1)\n    print((dp[N]))\n\n\ndef __starting_point():\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # for i in range(1, 100 + 1):\n    #     solve(i)\n\n__starting_point()", "from functools import lru_cache\n\ndef main():\n    n=int(input())\n    dp=[float(\"inf\")]*(n+1)\n    dp[0]=0\n    for i in range(n):\n        dp[i+1] = min(dp[i+1], dp[i]+1)\n        j,k = 6,9\n        while i+j <= n:\n            dp[i+j] = min(dp[i+j], dp[i]+1)\n            j *= 6\n        while i+k <= n:\n            dp[i+k] = min(dp[i+k], dp[i]+1)\n            k *= 9\n    print(dp[-1])\n\ndef __starting_point():\n    main()\n__starting_point()", "def f(a,x):\n    l=[]\n    while x!=0:\n        l.append(x%a)\n        x//=a\n    return sum(l)\n\ndef main():\n    N=int(input())\n    MIN=100000\n    for k in range(N+1):\n        MIN=min(MIN,f(9,k)+f(6,(N-k)))\n    return MIN\n\ndef __starting_point():\n    print(main())\n__starting_point()", "import sys\n\nN = int(sys.stdin.readline())\ns_max = N // 6\nn_max = N // 9\n\ns_n = 6\ns_c = 0\nwhile s_n < N:\n    s_n *= 6\n    s_c += 1\n# print(6**s_c)\n\nn_n = 9\nn_c = 0\nwhile n_n < N:\n    n_n *= 9\n    n_c += 1\n# print(9**n_c)\n\nans = float(\"inf\")\nfor i in range(s_max+1):\n    # print(\"#####\", i, \"#####\")\n    j = (N - 6*i) // 9\n    o = N - 6*i - 9*j\n    if o < 0:\n        continue\n    tmp_ans = o + i + j\n    ans = min(ans, tmp_ans)\n    # i, j\u3092x\u4e57\u3067\u5dee\u3057\u66ff\u3048\u3066\u6700\u5c0f\u306e\u64cd\u4f5c\u56de\u6570\u3092\u6c42\u3081\u308b\n    tmp = 6 ** s_c\n    while 0 < tmp:\n        r = i // tmp\n        i -= r*tmp\n        # print(\"i\", i)\n        tmp_ans += r - r*tmp\n        tmp //= 6\n\n    tmp = 9 ** n_c\n    while 0 < tmp:\n        r = j // tmp\n        j -= r*tmp\n        # print(\"j\", j)\n        tmp_ans += r - r*tmp\n        tmp //= 9\n\n    # print(tmp_ans)\n    ans = min(ans, tmp_ans)\n\nprint(ans)", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n\n    # \u5f15\u304d\u51fa\u305b\u308b\u91d1\u984d\u30ea\u30b9\u30c8\n    l = [1]\n    a = 6\n    b = 9\n    while a <= N or b <= N:\n        if a < b:\n            l.append(a)\n            a *= 6\n        else:\n            l.append(b)\n            b *= 9\n\n    # \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\n    dp = [INF] * (N + 1)\n    dp[0] = 0\n    for i in range(1, N + 1):\n        for j in l:\n            if i - j >= 0:\n                dp[i] = min(dp[i - j] + 1, dp[i])\n\n    print((dp[-1]))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import math\nN=int(input())\ndp=[math.inf for _ in range(N+1)]\ndp[0]=0\nfor i in range(1,N+1):\n\tp=1\n\tq=1\n\twhile p<=i:\n\t\tdp[i]=min(dp[i],dp[i-p]+1)\n\t\tp*=6\n\twhile q<=i:\n\t\tdp[i]=min(dp[i],dp[i-q]+1)\n\t\tq*=9\nprint(dp[N])", "def solve():\n    n = int(input())\n    dp = [True] + [False]*(n+1)\n    way = [1] + [6**i for i in range(1,9) if 6**i <= n] + [9**i for i in range(1,7) if 9**i <= n]\n    loop_counter = 0\n    while True:\n        loop_counter += 1\n        newdp = [False] * (n+1)\n        for w in way:\n            for i in range(w, n+1):\n                if newdp[i]: continue\n                if dp[i-w]: newdp[i] = True\n                if newdp[n]: \n                    return loop_counter\n        dp = [x for x in newdp]\n\nprint(solve())", "# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(100000)  # RecursionError\u5bfe\u7b56\n\ndef func(n):\n    if n==0:\n        return 0 # \u7d42\u7aef\u6761\u4ef6\n    if memo[n] != -1:\n        return memo[n] # \u63a2\u7d22\u6e08\u307f\n\n    res = n\n\n    for i in range(1,n+1):\n        pow6 = 6 ** i\n        if pow6 > n:\n            break\n        res = min(res, func(n-pow6)+1)\n\n    for i in range(1,n+1):\n        pow9 = 9 ** i\n        if pow9 > n:\n            break\n        res = min(res, func(n-pow9)+1)\n\n    memo[n] = res\n    return res\n\n\nN = int(input())\n\nmax_n = 110000\nmemo = [-1] * max_n\nans = func(N)\nprint(ans)\n", "n=int(input())\ndef f(x):\n    ans=0\n    while x>0:\n        ans+=x%6\n        x=x//6\n    return ans\ndef g(x):\n    ans=0\n    while x>0:\n        ans+=x%9\n        x=x//9\n    return ans\nans=n\nfor i in range(n+1): \n  ans=min(ans,f(i)+g(n-i))\nprint(ans)", "n = int(input())\n\ndp = [1000000 for _ in range(n+1)]\ndp[0] = 0\n\nfor i in range(0,n):\n  if i+1 <= n:\n    dp[i+1] = min(dp[i+1], dp[i] + 1)\n  for j in range(1,7):\n    a = 6**j\n    if i+a <= n:\n      dp[i+a] = min(dp[i+a], dp[i] + 1)\n  for k in range(1,6):\n    a = 9**k\n    if i+a <= n:\n      dp[i+a] = min(dp[i+a], dp[i] + 1)\n\nprint(dp[n])", "N = int(input())\nans = [0] * 100001\nfor i in range(6):\n    ans[i] = i\ns = 6\nn = 9\nfor i in range(6,N+1):\n    p = i%3\n    if p != 0:\n        ans[i] =  ans[i-p] + p\n    else:\n        if i == s*6:\n            s *= 6\n        if i == n*9:\n            n *= 9\n        ans[i] = min(ans[i-s]+1,ans[i-n]+1)\nprint(ans[N])", "N=int(input())\ndp=[0]*(100000+1)\na=1\nb=6\nc=9\nfor i in range(1,N+1):\n  if i>=b*6:\n    b*=6\n  if i>=c*9:\n    c*=9\n  if i<6:\n    dp[i]=i\n  elif i<9:\n    dp[i]=min(dp[i-a]+1,dp[i-b]+1)\n  else:\n    dp[i]=min([dp[i-a]+1,dp[i-b]+1,dp[i-c]+1])\nprint((dp[N]))\n", "#coding: utf-8\n\nN = int(input())\n\ndp = [i for i in range(N+1)]\n\ndp[0] = 0\n\nfor i in range(N+1):\n    for amount in (6, 9):\n        a = amount \n        while i + a < len(dp):\n            dp[i + a] = min(dp[i + a], dp[i] + 1)\n            a *= amount\n\nprint((dp[N]))\n\n", "N = int(input())\ndp = [i for i in range(N + 1)]\n\nfor i in range(N + 1):\n    index = 1\n    while 6 ** index <= i:\n        dp[i] = min(dp[i], dp[i - (6 ** index)] + 1)\n        index += 1\n\n    index = 1\n    while 9 ** index <= i:\n        dp[i] = min(dp[i], dp[i - (9 ** index)] + 1)\n        index += 1\n\nprint(dp[N])", "n = int(input())\n\ndp=[0]\n#dp[n]\u3092\u6c42\u3081\u308b\n\nfor i in range(1,n+1):\n    c = []\n    c.append(dp[i-1]+1)\n    p6=1\n    while i >=6**p6:\n        c.append(dp[i-6**p6]+1)\n        p6 +=1\n\n    p9=1\n    while i >=9**p9:\n        c.append(dp[i-9**p9]+1)\n        p9 +=1\n\n    dp.append(min(c))\n\nprint(dp[n])", "N=int(input())\nans=N\nfor i in range(N+1):\n  cnt=0\n  t=i\n  while t>0:\n    cnt+=t%6\n    t//=6\n  j=N-i\n  while j>0:\n    cnt+=j%9\n    j//=9\n  ans=min(ans,cnt)\nprint(ans)\n", "N = int(input())\ndp = [0] * 100500\n\nimport math\ndp[1] = 1\nfor i in range(2, N+1):\n    dp[i] = dp[i-1] + 1\n    for j in range(math.floor(math.log(i, 6)) + 1):\n        dp[i] = min(dp[i], dp[i - 6 ** j] + 1)\n    for k in range(math.floor(math.log(i, 9) + 0.00000001) + 1):\n        dp[i] = min(dp[i], dp[i - 9 ** k] + 1)\n\n\nprint((dp[N]))\n", "N = int(input())\n\npatterns = []\npatterns.append(1)\n\nf = 6\na = 6\nwhile a <= N:\n    patterns.append(a)\n    a *= f\n\nf = 9\na = 9\nwhile a <= N:\n    patterns.append(a)\n    a *= f\n\ndp = [float('inf')] * (N + 1)\ndp[0] = 0\nfor n in range(1, N + 1):\n    for p in patterns:\n        if n - p < 0:\n            continue\n\n        dp[n] = min(dp[n - p] + 1, dp[n])\n\n\nprint((dp[-1]))\n", "n = int(input())\n\ndp = [10**6 for _ in range(n+1)]\ndp[0] = 0\n\nfor i in range(n+1):\n    j6 = 1\n    while i+j6<=n:\n        dp[i+j6] = min(dp[i]+1,dp[i+j6])\n        j6 *= 6\n    j9 = 1\n    while i+j9<=n:\n        dp[i+j9] = min(dp[i]+1,dp[i+j9])\n        j9 *= 9\nprint((dp[n]))\n", "import numpy as np\n\nn = int(input())\n\ndp = np.full((n + 1), n + 1, dtype = int)\ndp[0] = 0\n\nloop = 0\nwhile dp[n] > n:\n    tmp1 = np.full(n + 1, n + 1, dtype = int)\n    tmp6 = np.full(n + 1, n + 1, dtype = int)\n    tmp9 = np.full(n + 1, n + 1, dtype = int)    \n    tmp1[1:] = dp[: -1] + 1\n    j = 1\n    while 6 ** j <= n:\n        tmp6_pre = tmp6\n        tmp6[6 ** j:] = dp[:-6 ** j] + 1\n        tmp6 = np.minimum(tmp6_pre, tmp6)\n        j += 1\n    k = 1\n    while 9 ** k <= n:\n        tmp9_pre = tmp9\n        tmp9[9 ** k:] = dp[: -9 ** k] + 1\n        tmp9 = np.minimum(tmp9_pre, tmp9)\n        k += 1\n    tmp1 = np.minimum(tmp1, tmp6)\n    tmp1 = np.minimum(tmp1, tmp9)\n    dp = np.minimum(dp, tmp1)\n    loop += 1\nprint(dp[n])", "n = int(input())\n\nINF = float(\"inf\")\n\ndp = [INF]*100010\ndp[0] = 0\n\npow6 = [6**i for i in range(1,7)]\npow9 = [9**i for i in range(1,6)]\n\nfor i in range(1,n+1):\n    dp[i] = dp[i-1] + 1\n    for p6 in pow6:\n        dp[i] = min(dp[i],dp[i-p6]+1)\n    for p9 in pow9:\n        dp[i] = min(dp[i],dp[i-p9]+1)\n\nprint(dp[n])", "N = int(input())\n\ndp = [N] * (N + 1)\ndp[0] = 0\n\nfor i in range(1, N+1):\n    power = 1\n    while power <= i:\n        dp[i] = min(dp[N], dp[i-power] + 1)\n        power *= 6\n\n    power = 9\n    while power <= i:\n        dp[i] = min(dp[i], dp[i-power] + 1)\n        power *= 9\n\nprint((dp[-1]))\n", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    n = int(input())\n    dp = [float('inf') for _ in range(n + 100)]\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i - 1] + 1, dp[i])\n\n        six = 6\n\n        while six <= i:\n            dp[i] = min(dp[i - six] + 1, dp[i])\n            six *= 6\n\n        nine = 9\n\n        while nine <= i:\n            dp[i] = min(dp[i - nine] + 1, dp[i])\n            nine *= 9\n\n    print((dp[n]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\n\na=[1,6,36,216,1296,7776,46656,9,81,729,6561,59049]\n\ninf=float('inf')\ndp=[inf for _ in range(100000+1)]\ndp[0]=0\ndp[1]=1\n\nfor x in range(1,100001):\n  for b in a:\n    if b<=x:\n      dp[x]=min(dp[x],dp[x-b]+1)\n      \nprint((dp[n]))\n", "n = int(input())\n\ndp = [n]*100010\ndp[0] = 0\npow69 = [6**i for i in range(1,7)] + [9**i for i in range(1,6)]\n\nfor i in range(1,n+1):\n    dp[i] = dp[i-1] + 1\n    for p in pow69:\n        dp[i] = min(dp[i],dp[i-p]+1)\n\nprint(dp[n])", "n = int(input())\nindex6, index9, num6, num9 = 0, 0, 0, 0\nINF = float('inf')    \na = [INF for _ in range(n+1)]\na[n] = 0\n\nfor i in range(n, -1, -1):\n    if a[i] == INF:\n        continue\n    j = 1\n    while i-9**j >= 0:\n        a[i-9**j] = min(a[i]+1, a[i-9**j])\n        j += 1\n    j = 1\n    while i-6**j >= 0:\n        a[i-6**j] = min(a[i]+1, a[i-6**j])\n        j += 1\n    if i-1 >= 0:\n        a[i-1] = min(a[i]+1, a[i-1])\nprint((a[0]))\n", "N = int(input())\ndp = [i for i in range(N+1)]\n \nfor i in range(1, 7):\n    for j in range(9**i, N+1):\n        dp[j] = min(dp[j], dp[j-9**i]+1)\nfor i in range(1, 7):\n    for j in range(6**i, N+1):\n        dp[j] = min(dp[j], dp[j-6**i]+1)\nprint(dp[N])", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nINF = 10 ** 10\ndp = [INF] * (N + 1)\ndp[0] = 0\n\nfor i in range(10,0,-1):\n  for j in range(N + 1):\n    if dp[j] != INF:\n      if j + 6 ** i <= N:\n        dp[j + 6 ** i] = min(dp[j + 6 ** i], dp[j] + 1)\n      if j + 9 ** i <= N:\n        dp[j + 9 ** i] = min(dp[j + 9 ** i], dp[j] + 1)\n\nans = INF\nfor i in range(len(dp) - 1, -1, -1):\n  money = dp[i] + N - i\n  if ans > money:\n    ans = money\n        \nprint(ans)", "N = int(input())\n#\u521d\u671f\u5316\ndp=[0]*N\nfor i in range(10):\n  if 6**i-1 < N:\n    dp[6**i-1] = 1\nfor i in range(10):\n  if 9**i-1 < N:\n    dp[9**i-1] = 1\n\n#dp\nfor k in range(1,N):\n  if dp[k] != 1:\n    dp_list = []\n    for j in range(10):\n      if k >= 6**j:\n        dp_list.append(dp[k-6**j])\n      if k >= 9**j:\n        dp_list.append(dp[k-9**j])\n  \n    dp[k] = 1+min(dp_list)\n\nprint(dp[N-1]%1000000007)", "N = int(input())\ndp = [N] * 110000\ndp[0] = 0\n\nfor i in range(N):\n    j = 0\n    while i + 9 ** j <= N:\n        dp[i + 9 ** j] = min(dp[i + 9 ** j], dp[i] + 1)\n        j += 1\n    k = 0\n    while i + 6 ** k <= N:\n        dp[i + 6 ** k] = min(dp[i + 6 ** k], dp[i] + 1)\n        k += 1\n\nprint(dp[N])", "n = int(input())\ndp = [float('inf')]*100100\ndp[0] = 0\n\nfor i in range(len(dp)):\n    power = 1\n    while power <= n:\n        dp[i] = min(dp[i], dp[i-power]+1)\n        power *= 6\n\n    power = 1\n    while power <= n:\n        dp[i] = min(dp[i], dp[i-power]+1)\n        power *= 9\n\nprint(dp[n])", "N = int(input())\n\nans = N\nfor i in range(N+1):\n    x = 0\n    y = i\n    while y:\n        x += y%6\n        y //= 6\n    y = N-i\n    while y:\n        x += y%9\n        y //= 9\n    ans = min(x, ans)\n\nprint(ans)", "#!/usr/bin/env python3\ndef main():\n    import numpy as np\n\n    N = int(input())\n\n    can = [1]\n    limit = 100\n    for i in range(1, limit):\n        six = 6 ** i\n        if six <= N:\n            can.append(six)\n        nine = 9 ** i\n        if nine <= N:\n            can.append(nine)\n        if six > N and nine > N:\n            break\n\n    INF = 10 ** 9\n    dp = np.full(N + 1, INF, dtype=np.int32)\n    dp[0] = 0\n    for c in can:\n        for _ in range(9):\n            dp[c:] = np.minimum(dp[c:], dp[:-c] + 1)\n    print((dp[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\nINF = float(\"inf\")\n\ndp = [INF]*100010\ndp[0] = 0\n\npow6 = [6**i for i in range(7)]\npow9 = [9**i for i in range(6)]\n\nfor i in range(1,n+1):\n    for p6 in pow6:\n        dp[i] = min(dp[i],dp[i-p6]+1)\n    for p9 in pow9:\n        dp[i] = min(dp[i],dp[i-p9]+1)\nprint(dp[n])", "N = int(input())\nkouho = [1]\nfor i in range(1, 100):\n    t = 6 ** i\n    if t <= 10 ** 5:\n        kouho.append(t)\n    else:\n        break\nfor i in range(1, 100):\n    t = 9 ** i\n    if t <= 10 ** 5:\n        kouho.append(t)\n    else:\n        break\n# print(kouho)\n\nkouho.sort(reverse=True)\nkouho_cnt = len(kouho)\nINF = 10 ** 9\ndp = [INF] * ((10 ** 5) + 1)\ndp[0] = 0\nfor i in range(1, N + 1):\n    for k in kouho:\n        if i - k >= 0:\n            dp[i] = min(dp[i], dp[i - k] + 1)\n#print(dp)\nprint((dp[N]))\n# cur = 0\n# ans = 0\n# while N > 0:\n#     if N >= kouho[cur]:\n#         N -= kouho[cur]\n#         ans += 1\n#     else:\n#         cur += 1\n# print(ans)\n", "from collections import deque\nn=int(input())\ntable=[-1]*100001\ntable[0]=0\nd=deque()\nd.append(0)\ncan=[]\ncan.append(1)\nfor i in range(1,50):\n    if 6**i<=100000:\n        can.append(6**i)\n    else:\n        break\n    if 9**i<=100000:\n        can.append(9**i)\nwhile d:\n    w=d.popleft()\n    for i in can:\n        if w+i>100000:\n            continue\n        if not table[w+i]==-1:\n            continue\n        table[w+i]=table[w]+1\n        d.append(w+i)\nprint(table[n])", "n=int(input())\ndp=[0]*(n+1)\nfor i in range(n+1):\n  t=i\n  count=0\n  while t>0:\n    count+=t%6\n    t//=6\n  t=n-i\n  while t>0:\n    count+=t%9\n    t//=9\n  dp[i]=count\nprint(min(dp))", "n = int(input())\n\nmoney = [1]\nfor i in range(1,7):\n    money.append(6**i)\nfor i in range(1,6):\n    money.append(9**i)\nmoney = sorted(money)\n\nlst = [0] * 1000000\nfor i in range(n+1):\n    can = i\n    for m in money:\n        if i-m >= 0:\n            can = min(can, lst[i-m] + 1)\n        else:\n            break\n    lst[i] = can\n\nprint(lst[n])", "n=int(input())\ntab=[10**8 for i in range(n+1)]\ntab[0]=0\n\nfor i in range(n):\n    now=1\n    while i+now<=n:\n        tab[i+now]=min(tab[i+now],tab[i]+1)\n        now*=6\n    now=9\n    while i+now<=n:\n        tab[i+now]=min(tab[i+now],tab[i]+1)\n        now*=9\n\nprint(tab[-1])", "n = int(input())\n\ndp = [0]*(n+10)\n\nfor i in range(n+1):\n    dp[i+1] = dp[i] +1\n    \n\nfor i in range(1,n+1):\n    k = 6\n    while k <=n:\n        if i-k>=0:\n            dp[i] = min(dp[i],dp[i-k]+1)\n            #print(dp[i-1],dp[i-k])\n        k *=6\n\n        #print(dp)\n    k = 9\n    while k <=n:\n        if i-k>=0:\n            dp[i] = min(dp[i],dp[i-k]+1)\n           \n        k *=9\n\nprint(dp[n])", "n = int(input())\na_6 = [int(6**i) for i in range(1,10) if 6**i <= 10**5]\na_9 = [int(9**i) for i in range(1,10) if 9**i <= 10**5]\na = [1]\nfor i in a_6:\n    a.append(i)\nfor i in a_9:\n    a.append(i)\na.sort(reverse = True)\ndp = [i for i in range(n+1)]\ndp[0] = 0\nfor i in range(n+1):\n    for j in a:\n        if i+j <= n:\n            dp[i+j] = min(dp[i+j],dp[i]+1)\nprint(dp[n])", "n = int(input())\n\ndp = [float('inf')] * (n+1)\n\nfor i in range(n+1):\n  dp[i] = min(dp[i], i)\n  j = 6\n  while i+j<=n:\n    dp[i+j] = min(dp[i+j], dp[i]+1)\n    j *= 6\n  k = 9\n  while i+k<=n:\n    dp[i+k] = min(dp[i+k], dp[i]+1)\n    k *= 9\n    \nprint(dp[n])", "N = int(input())\n\ndp = [N] * (N+1)\n\ndp[0] = 0\n\nfor i in range(1,N+1):\n    dp[i] = dp[i-1] + 1\n    for k in range(1,10):\n        if i < 6**k:\n            break\n        else:\n            dp[i] = min(dp[i],dp[i-6**k]+1)\n            \n    for k in range(1,10):\n        if i < 9**k:\n            break\n        else:\n            dp[i] = min(dp[i],dp[i-9**k]+1)\n\nprint(dp[N])", "from collections import deque\n\nN = int(input())\nunits = set()\ni = 0\nwhile 6 ** i <= N:\n    units.add(6 ** i)\n    i += 1\ni = 0\nwhile 9 ** i <= N:\n    units.add(9 ** i)\n    i += 1\nunits = sorted(units)\n\nmins = list(range(N + 1))\nfor i in range(1, len(units)):\n    unit = units[i]\n    for j in range(N):\n        if j + unit < len(mins) and mins[j] + 1 < mins[j + unit]:\n            mins[j + unit] = mins[j] + 1\nprint(mins[N])", "from math import log\n\nN=int(input())\n\ndp = [0]*(N+1)\n\ne6 = 0\ne9 = 0\nfor i in range(1,N+1):\n  for j in range(e6,12):\n    if 6**j>i:\n      e6 = j-1\n      break\n  for j in range(e9,12):\n    if 9**j>i:\n      e9 = j-1\n      break\n  dp[i] = min(dp[i-1],dp[i-int(6**e6)],dp[i-int(9**e9)])+1\n  \nprint(dp[-1])", "N = int(input())\nans = 100000\nfor A in range(N+1):\n    num = 0\n    B = N-A\n    while A != 0:\n        num  += A % 6\n        A = A//6\n    while B != 0:\n        num  += B % 9\n        B = B//9\n    ans = min(ans,num)\nprint(ans)", "import math\nn = int(input())\n\ndp = [math.inf] * (n+1)\n\nfor i in range(n+1):\n    dp[i] = min(dp[i],i)\n    j = 6\n    while(i+j<=n):\n        dp[i+j] = min(dp[i+j],dp[i]+1)\n        j *= 6\n    j = 9\n    while(i+j<=n):\n        dp[i+j] = min(dp[i+j],dp[i]+1)\n        j *= 9\n#print(dp)\nprint((dp[n]))\n", "n = int(input())\n\n\ndef n_base_digit_sum(v, a):\n    # 10base\u306e\u81ea\u7136\u6570v\u3092n\u9032\u6570\u3067\u8868\u3057\u305f\u6642\u306e\u6841\u548c\n    res = 0\n    while v != 0:\n        res += v % a\n        v = v//a\n    return res\n\n\nans = n\nfor i in range(n+1):\n    ans = min(ans, n_base_digit_sum(i, 6)+n_base_digit_sum(n-i, 9))\n\nprint(ans)\n", "from collections import deque\nn = int(input())\ncnt = 0\nd = {n:0}\nq = deque([n])\nwhile q[0] > -5:\n    t = q.popleft()\n    cnt = d[t]\n    # print(t)\n    a = 1\n    b = 1\n    while 6**a <= t:\n        a += 1\n    while 9**b <= t:\n        b += 1\n    a -= 1\n    b -= 1\n    # print(t,a,b)\n    if t-6**a in d:\n        if d[t-6**a] > cnt+1:\n            d[t-6**a] = cnt+1\n            q.append(t-6**a)\n    else:\n        d[t-6**a] = cnt+1\n        q.append(t-6**a)\n    if t-9**b in d:\n        if d[t-9**b] > cnt+1:\n            d[t-9**b] = cnt+1\n            q.append(t-9**b)\n    else:\n        d[t-9**b] = cnt+1\n        q.append(t-9**b)\n    # print(q)\nprint((d[0]))\n# print(d)\n", "import sys;      from decimal import Decimal\nimport math;     from itertools import combinations, product\nimport bisect;   from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef lcm(a: int, b: int) -> int: return (a * b) // math.gcd(a, b)\n\nimport numpy as np\nfrom numba import njit, i8\n\n@njit(i8(i8))\ndef dp(N):\n    dp = np.full(100005, INF, dtype=np.int64)\n    dp[0] = 0\n    \n    for n in range(1, N + 1):\n        pow6 = 1\n        while pow6 <= n:\n            dp[n] = min(dp[n], dp[n - pow6] + 1)\n            pow6 *= 6\n        pow9 = 1\n        while pow9 <= n:\n            dp[n] = min(dp[n], dp[n - pow9] + 1)\n            pow9 *= 9\n    \n    return dp[n]\n\ndef Main():\n    n = read_int()\n    print(dp(n))    \n\nif __name__ ==  '__main__':\n    Main()", "# 6**6 < 10**5 < 6**7\n# 9**5 < 10**5 < 9**6\n\ndef solve(n):\n    if n < 6:\n        return n\n    elif n < 9:\n        return n - 5\n    else:\n        now_6 = 6\n        while now_6 * 6 <= n:\n            now_6 *= 6\n\n        now_9 = 9\n        while now_9 * 9 <= n:\n            now_9 *= 9\n        \n        ans = float('inf')\n        for i in range(n // now_6 + 1):\n            cnt = i + (n - now_6*i) // now_9 + solve((n - now_6*i) % now_9)\n            if cnt < ans:\n                ans = cnt\n        \n        return ans\n\nprint(solve(int(input())))", "def Ten_to_n(X, n):\n    if (int(X/n)):\n        return Ten_to_n(int(X/n), n)+str(X%n)\n    return str(X%n)\n\nn=int(input())\nwit=[1]\nres=n\nfor i in range(n+1):\n    cnt=0\n    j=n-i\n    si=Ten_to_n(i,6)\n    for i in si:\n        cnt+=int(i)\n    ni=Ten_to_n(j,9)\n    for i in ni:\n        cnt+=int(i)\n    res=min(res,cnt)\nprint(res)", "N = int(input())\n\n# dp[i] := i\u5186\u5f15\u304d\u51fa\u3059\u306e\u306b\u5fc5\u8981\u306a\u6700\u5c0f\u64cd\u4f5c\u56de\u6570\ndp = [float('inf')] * (N + 1)\ndp[0] = 0\noperates = sorted([1, 6, 36, 216, 1296, 7776, 46656, 9, 81, 729, 6561, 59049])\nfor i in range(N):\n    for ope in operates:\n        if i + ope > N:\n            break\n        dp[i + ope] = min(dp[i + ope], dp[i] + 1)\n\nprint((dp[N]))\n", "# C - Strange Bank\nimport math\nN = int(input())\n\nINF = 10**10\n\ndp = [0]*(N+1)\n\nfor i in range(N+1):\n    dp[i] = INF\n\ndp[0] = 0\nW = [1,6,9]\n\n# dp{N} \u306b\u6700\u5c0f\u5024\u3092\u8a18\u9332\u3059\u308b\n# \u4eca\u306e\u91d1\u984d\nfor v in range(1,N+1):\n    for w in range(3):\n        for x in range(int(math.log(N+1,6))+1):\n            # \u9078\u3076\u6570\n            n = W[w]**x\n            if v-n < 0:\n                continue\n            dp[v] = min(dp[v],dp[v-n] + 1)\nprint(dp[N])", "import math\n\nn = int(input())\nt = 100000 + 10\n\ndp = [10**18] * (t+10)\ndp[0] = 0\n\nfor i in range(1, t+1):\n    dp[i] = dp[i-1] + 1\n\nfor i in range(t-1):\n    s = t-i\n    for j in range(int(math.log(s, 9)+1)):\n        dp[i+9**j] = min(dp[i+9**j], dp[i]+1)\n    for k in range(int(math.log(s, 6)+1)):\n        dp[i+6**k] = min(dp[i+6**k], dp[i]+1)\n\n\nprint(dp[n])"]