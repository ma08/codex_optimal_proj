["n = int(input())\nmod = 10**9 + 7\nall09 = ((2 * 10**n) % mod - (2 * 9**n) % mod) % mod\nof09 = ((10**n) % mod - 8**n % mod) % mod\nprint((all09-of09)%mod)", "#! /usr/bin/python3\n\nn = int(input())\nmod = 10**9+7\nans = pow(10, n, mod) - pow(9, n, mod) * 2 + pow(8, n, mod)\nans = (ans + mod) % mod\nprint(ans)\n", "N=int(input())\na = (10**N - 9**N - 9**N + 8**N) % (10**9 + 7)\nprint(a)", "N = int(input())\nval = 7 + 10 ** 9\n\nprint(((pow(10, N, val) - pow(9, N, val) * 2 + pow(8, N, val)) %val ))\n", "import numpy as np\n\ndef __starting_point():\n\n    input_str = input()\n    n = int(input_str)\n    peterns = 10**n\n    a0_subset = peterns - 9**n\n    a9_subset = peterns - 9**n\n    anti_subset = 8**n\n    ans = a0_subset + a9_subset + anti_subset - peterns\n    ans %= (10**9 + 7)\n    print(ans)\n__starting_point()", "N = int(input())\nprint((10 ** N + 8 ** N - 9 ** N - 9 ** N) % 1000000007)", "import sys\ndef Ii():return int(sys.stdin.readline())\ndef Mi():return map(int,sys.stdin.readline().split())\ndef Li():return list(map(int,sys.stdin.readline().split()))\n\nn = Ii()\nnum = 10\nmod = 10**9+7\nans = (pow(num,n,mod)-pow(num-1,n,mod)-pow(num-1,n,mod)+pow(num-2,n,mod))%mod\nprint(ans)", "#a,b,c,d = map(int, input().split())\nn = int(input())\nans = (10**n - 9**n*2 + 8**n) % 1000000007\nprint(ans)\n", "MOD = 10**9+7\n\nN = int(input())\n\ncnt = (pow(10, N, MOD) - 2*pow(9, N, MOD) + pow(8, N, MOD))\ncnt = cnt % MOD\n\nprint(cnt)", "n = int(input())\nmod = 10**9 + 7\n\nprint((10**n - 2*9**n + 8**n)%mod)", "n = int(input())\nprint((10**n - 9**n - 9**n + 8**n) % 1000000007)", "N=int(input())\nU=10**N\nx1=U-9**N\nx2=U-8**N\nY=2*x1-x2\nprint(Y%(10**9+7))", "n = int(input())\nans = 10**n - 2*9**n + 8**n\n\nprint(ans%(10**9+7))", "def main():\n    N = int(input())\n    \n    mod = 10**9 + 7\n    ans = pow(10, N, mod) -2*pow(9, N, mod) + pow(8, N, mod)\n    print(ans % mod)\n    \n        \n            \n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nprint((10**n-9**n*2+8**n)%(10**9+7))", "n = int(input())\np = 10**9+7\nans = pow(10,n,mod=p) - 2*pow(9,n,mod=p) + pow(8,n,mod=p)\nprint(ans%p)", "#abc178c\nn=int(input())\nprint(((10**n-2*9**n+8**n)%(10**9+7)))\n", "N = int(input())\nprint((10**N - (9**N + 9**N - 8**N))%((10**9)+7))", "N=int(input())\nprint((10**N-9**N-9**N+8**N)%(10**9+7))", "N, = map(int, input().split())\nre = 0\nre = 10 ** N - ((2 * 9 ** N) - 8 ** N)\nprint(re%(10**9+7))", "N = int(input())\nmod = 10**9 + 7\nans = pow(10,N,mod) - pow(9,N,mod)*2 + pow(8,N,mod)\nprint(ans%mod)", "N = int(input())\nif N < 2:\n    print(0)\nelse:\n    print(((10**N-9**N)*2-(10**N-8**N))%(10**9+7))", "# -*- coding utf-8 -*-\n\nMOD = 10 ** 9 + 7\n\nN = int(input())\n\nans = pow(10, N, MOD) - (pow(9, N, MOD) * 2 - pow(8, N, MOD))\n\nans %= MOD\nprint(ans)\n", "mod = 10**9+7\nn=int(input())\nans = (10**n - 9**n - 9**n + 8**n)%mod\nprint(ans)", "N = int(input())\nans = (10 ** N - 2 * (9 ** N) + (8 ** N)) % (10 ** 9 + 7)\n\nprint(ans)", "N = int(input())\nm = 1000000007\nprint((pow(10, N, m) - 2 * pow(9, N, m) + pow(8, N, m)) % m)", "num = int(input())\nresult = 2*(10**num - 9**num) - (10**num - 8**num)\nprint(str(result%1000000007))", "N = int(input())\n\nMOD = 10**9 + 7\n\nprint((10**N - 2 * 9**N + 8**N)%MOD)", "#! /usr/bin/python3\n\nn = int(input())\nmod = 10**9+7\nans = (pow(10, n, mod) - pow(9, n, mod) * 2 + pow(8, n, mod)) % mod\nprint(ans)\n", "# 0\u3092\u542b\u307e\u306a\u3044: 9 ** n\n# 9\u3092\u542b\u307e\u306a\u3044: 9 ** n\n# 0\u30689\u3092\u542b\u307e\u306a\u3044: 8 ** n\n# 0\u307e\u305f\u306f9\u3092\u542b\u307e\u306a\u3044: 2 * 9 ** n - 8 ** n\n# 0\u30689\u3092\u542b\u3080: 10 ** 9 - 2 * 9 ** n + 8 ** n\ndef pow(a, x):\n  if x == 0:\n    return 1\n  else:\n    y, r = divmod(x, 2)\n    sq = pow(a, y)\n    if r == 1:\n      return (sq * sq * a) % (10 ** 9 + 7)\n    else:\n      return (sq * sq) % (10 ** 9 + 7)\n    \ndef __starting_point():\n  n = int(input())\n  print((pow(10, n) - 2 * pow(9, n) + pow(8, n)) % (10 ** 9 + 7))\n__starting_point()", "n = int(input())\nans = 0\n\nif n == 1:\n    ans = 0\nelse:\n    ans = ((10**n)%(10**9+7) - ((2*9**n)%(10**9+7) - (8**n)%(10**9+7)))%(10**9+7)\n\nprint(ans)", "N = int(input())\nans = (10**N - 9**N - 9**N + 8**N)%(int(1e9+7))\nprint(int(ans))", "MOD = 10**9 + 7\ndef an(a, n):\n    ans = 1\n    for i in range(N):\n        ans = ans*a%MOD\n    return ans%MOD\n\n\nN = int(input())\n\n\n\nA_n0 = an(9,N)\n#A_n9 = an(9,N)\nA_n0n9 = an(8, N)\n\n\n\nans = 10**N%MOD - (2*A_n0%MOD - A_n0n9)\nprint(ans%MOD)", "## C\nimport sys\nn = int(input())\nprint((10**n - 9**n *2 + 8**n)%(10**9+7))", "n = int(input())\n#x, k, d = map(int, input().split())\n#al = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\n\nmod = 10**9+7\n\n\ndef modpow(a, n, mod):\n    # a^n\u3092mod\u3067\u308f\u3063\u305f\u3042\u307e\u308a \u4e8c\u5206\u7d2f\u4e57\u6cd5O(logn)\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = (res*a) % mod\n        a = (a*a) % mod\n        n = n >> 1\n    return res\n\n\nans = (modpow(10, n, mod)-modpow(9, n, mod) -\n       modpow(9, n, mod)+modpow(8, n, mod)) % mod\nprint(ans)\n", "n = int(input())\n\nmod = 10 ** 9 + 7\nans = 10 ** n + 8 ** n - 2 * 9 ** n\nprint((ans % mod))\n", "n = int(input())\n\nprint((10**n - 2*9**n + 8**n)%(10**9+7))", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    n = int(input())\n    mod = 10 ** 9 + 7\n\n    # See:\n    # https://www.youtube.com/watch?v=yLkJZXkB6D0&feature=youtu.be\n    # KeyInsight:\n    # \u5305\u9664\u539f\u7406\n\n    # \u25ef\n    # \u5168\u4f53 - \u4f59\u4e8b\u8c61\n    # n\u306e\u5c0f\u3055\u3044\u5024\u3067\u611a\u76f4\u306b\u6570\u3048\u3088\u3046\u3068\u3057\u305f\n\n    # \u25b3\n    # \u6761\u4ef6\u3092\u4e01\u5be7\u306b\u6574\u7406\u3059\u308b\u3001\u30d9\u30f3\u56f3\u3092\u6d3b\u7528\u3059\u308b\n    # \u5168\u4f53: 10 ^ n\n    # 0\u3092\u542b\u307e\u306a\u3044: 9 ^ n\n    # 9\u3092\u542b\u307e\u306a\u3044: 9 ^ n\n    # 0, 9\u3092\u542b\u307e\u306a\u3044: 8 ^ n\n    # 0, 9\u306e\u3046\u3061\u5c11\u306a\u304f\u3068\u3082\u7247\u65b9\u306f\u542b\u307e\u306a\u3044: 9 ^ n + 9 ^ n - 8 ^ n\n    ans = pow(10, n, mod)\n    ans -= pow(9, n, mod)\n    ans -= pow(9, n, mod)\n    ans += pow(8, n, mod)\n\n    print((ans % mod))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nresult=(10**n - 2*9**n + 8**n) % (10**9 +7)\nprint(result)", "mod = 10**9 + 7\nN = int(input())\nans = pow(10,N,mod)\nans -= 2 * pow(9,N,mod)\nans += pow(8,N,mod)\nans %= mod\n\nprint(ans)", "def c178(n):\n\n    ans = 0\n    mod = 10**9+7\n\n    ans = (10**n - 2*(9**n) + 8**n)\n\n    return ans % mod\n\ndef main():\n    n = int(input())\n    print(c178(n))\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\n \nprint((10**N - 2 * (9**N) + (8 ** N))%(10 ** 9 + 7))", "N=int(input())\nx=10**N-9**N-9**N+8**N\nprint(x % (10**9+7))", "import numpy as np\nbase = 10**9 + 7\ndef pw(x, n):\n  if n == 0:\n    return 1\n  elif n == 1:\n    return x\n  else:\n  \treturn ((pw(x, n // 2)**2 % base) * pw(x, n % 2) % base)\n  \nn = int(input())\nprint((pw(10, n) - 2*pw(9, n) + pw(8, n)) % base)", "n = int(input())\n\nanswer = (10 ** n) - (9 ** n) - (9 ** n) + (8 ** n)\n    \nanswer = answer % (10 ** 9 + 7)\nprint(answer)", "MOD = 10**9 + 7\n\nN = int(input())\n\na1 = pow(10, N, MOD)\na2 = 2 * pow(9, N, MOD)\na3 = pow(8, N, MOD)\nans = (a1 - a2 + a3) % MOD\n\nprint(ans)", "N = int(input())\nprint((10**N - (9**N)*2 + 8**N)%(10**9+7))", "N = int(input())\nMOD = 10 ** 9 + 7\nprint((pow(10, N, MOD) - (pow(9, N, MOD) + pow(9, N, MOD) - pow(8, N, MOD) )) % MOD)", "m = 1000000007\n\nN = int(input())\n\nprint((pow(10, N, m) - pow(9, N, m) * 2 + pow(8, N, m)) % m)", "from scipy.special import perm\nN = int(input())\nmod=1000000007\nans = 10**N - 9**N - 9**N +8**N\nans %= mod\nprint(ans)", "# -*- coding: utf-8 -*-\nn=int(input())\np=10**9+7\nk=(10**n)%p\nl=(2*9**n)%p\nm=(8**n)%p\nans=(k-l+m)%p\nprint(ans)", "n = int(input())\n\nmod = 10 ** 9 + 7\nans = pow(10, n, mod) + pow(8, n, mod) - 2*pow(9, n, mod)\nprint((ans % mod))\n", "##C - Ubiquity\nN = int(input())\nans = 10**N - 2*(9**N) +8**N\nprint(ans%(10**9+7))", "n=int(input())\nm=1000000007;\nprint((pow(10,n,m)-2*pow(9,n,m)+pow(8,n,m))%m)", "N = int(input())\nm = 10**9+7\nprint((pow(10, N, m) - 2 * pow(9, N, m) + pow(8, N, m)) % m)", "n = int(input())\nmod = 1000000007\n\nprint((pow(10,n,mod)-2*pow(9,n,mod)+pow(8,n,mod))%mod)", "n = int(input())\nmod = 10**9 + 7\n\nans = pow(10, n, mod)\nans -= 2 * pow(9, n, mod)\nans += pow(8, n, mod)\n\nprint(ans % mod)", "N = int(input())\nwari = 7 + 10 ** 9\n\nprint(\n    (pow(10, N, wari) - pow(9, N, wari) * 2 + pow(8, N, wari)) %wari\n)", "n = int(input())\nmod = 10**9 + 7\nl = [8,2,0]\nfor i in range(n-1):\n    a,b,c = l\n    l[0] = a*8 % mod\n    l[1] = (b*9 + a*2)%mod\n    l[2] = (b + c*10)%mod\nprint(l[2])", "N = int(input())\n\nM = 10**9+7\n\na = 10**N % M\nb = 2*(9**N) % M\nc = 8**N % M\n\nprint((a-b+c)%M)", "import sys\n\ndef solve():\n    N = int(input())\n    mod = 7 + 10 ** 9\n    total = pow(10, N, mod)\n    noZeroOrNine = pow(9, N, mod)\n    noZeroAndNine = pow(8, N, mod)\n    print((total - 2 * noZeroOrNine + noZeroAndNine) % mod)\n\n\n    return \n\ndef __starting_point():\n    solve()\n__starting_point()", "N = int(input())\nans = 10 ** N - 2 * 9 ** N + 8 ** N\nans %= (10 ** 9 + 7)\nprint(ans)", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\n\n#--maincode----------------\nn = ini()\nans = (10**n)\nans -= (9**n)*2\nans += (8**n)\nprint((ans)%mod)", "N = int(input())\nmod = 10 ** 9 + 7\n\nans = (10 ** N) % mod - ((9 ** N) % mod * 2) + (8 ** N) % mod\nans %= mod\nprint(ans)\n", "import math\np  = 10**9+7\nn = int(input())\n\nprint(((10**n)%p-(9**n)%p-(9**n)%p+(8**n)%p)%p)", "n=int(input())\nm=10**9+7\nu=pow(10,n,m)\na=(u-pow(9,n,m))%m\nb=(u-pow(8,n,m))%m\nans=(a+a-b)%m\nprint(ans)", "N = int(input())\nif N == 1:\n    print(0)\n    return\nans = 10**N - 9**N - 9**N + 8**N\nprint(ans%(10**9+7))", "n=int(input())\nans=10**n-9**n*2+8**n\nans%=10**9+7\nprint(ans)", "n = int(input())\n\nn_all = 10**n\nn_e0  = 9**n\nn_e9  = 9**n\nn_e09 = 8**n\n\nans = ( n_all -n_e0 -n_e9 +n_e09 )%( 10**9+7 )\nprint(ans)\n", "def main():\n    N = int(input())\n    all_non_zero, all_non_nine = 9 ** N, 9 ** N\n    all_non_zeronine = 8 ** N\n    any_zeronine = all_non_zero + all_non_nine - all_non_zeronine\n\n    ans = 10 ** N - any_zeronine\n    print((ans % (10 ** 9 + 7)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\ninf = 10**9\n\n\ndef main():\n    n = int(input())\n    r = (10**n + 8**n - 2 * (9**n)) % (10**9+7)\n    print(r)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nprint((10**n - 2*9**n + 8**n) % (10**9 + 7))", "n = int(input())\nprint(((10 ** n + 8 ** n - 9 ** n * 2) % (10 ** 9 + 7)))\n", "def __starting_point():\n  n=int(input())\n  print(((10**n-(2*(9**n))+8**n)%(10**9+7)))\n\n__starting_point()", "N=int(input())\n\nmod=10**9+7\n\nans=pow(10,N,mod)-2*pow(9,N,mod)+pow(8,N,mod)\nprint(ans%mod)", "N = int(input())\n\nans = 10 ** N - 2 * (9 ** N) + 8 ** N\n\nprint((ans % (10**9 + 7)))\n", "n = int(input())\nans = (10 ** n - 2 * (9 ** n) + 8**n) %  (10**9 + 7)\nprint(ans)", "#C\nn = int(input())\nmod = 10e8 + 7\ndef powmod(x, y):\n    res = 1\n    for _ in range(y):\n        res *= x\n        res %= mod\n    return res\nans = powmod(10, n) - powmod(9, n) - powmod(9, n) + powmod(8, n)\n\nans %= mod\nans=int(ans)\nprint(ans)", "N=int(input())\nsum=10**N\nsum-=9**N\nsum-=9**N\nsum+=8**N\nprint(sum%((10**9)+7))", "N = int(input())\nprint((10**N - 9**N - 9**N + 8**N) % (10**9 + 7))", "N=int(input());print((10**N-2*9**N+8**N)%(10**9+7))", "n = int(input())\nans = 10**n-2*pow(9,n)+8**n\nk = pow(10,9)+7\nprint(ans%k)", "N = int(input())\nprint((pow(10, N) - (2 * pow(9, N) - pow(8, N))) % (pow(10, 9) + 7))", "import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: list(map(int, sys.stdin.readline().split()))\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\n\nn = ri()\nprint(((10**n - 2*9**n + 8**n)%mod))\n", "N = int(input())\n\nmod = 10**9+7\nA = 10**N - (9**N * 2 - 8**N)\n\nprint(A%mod)", "N=int(input())\n\nMOD=10**9+7\n\nprint((pow(10,N,MOD) - 2*(pow(9,N,MOD)) + pow(8,N,MOD))%MOD)", "n = int(input())\nm = 10 ** 9 + 7\nprint((10 ** n - 2 * 9 ** n + 8 ** n) % m)", "mod = 10**9 + 7\nn = int(input())\nprint((10**n - 2 * (9**n) + 8**n) % mod)", "mod = 10**9+7\nn = int(input())\nans = pow(10, n, mod)\nans -= 2 * pow(9, n, mod)\nans += pow(8, n, mod)\nans %= mod\nprint(ans)", "n = int(input())\nm = 10**9 +7\n\nx = 10**n % m\ny = 9**n % m\nz = 8**n % m\n\nprint((x - y*2 + z)% m)", "n = int(input())\nwaru = 1000000000+7\n\ndef kaijo(x, n):\n  kake = 1\n  for i in range(n):\n    kake = (kake * x) % waru\n  return kake\n\namari = kaijo(10, n) -2*kaijo(9, n) + kaijo(8, n)\namari %= waru\nprint(amari)", "#\uff11\uff10\uff3e\uff19\uff0b\uff17\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u51fa\u529b\nn = int(input())\nmod = 10**9+7\n#pow(5,2) = 25 \u3079\u304d\u4e57\u8a08\u7b97 pow()\u306e\u7b2c\u4e09\u5f15\u6570\u306f\u5270\u4f59\nans = pow(10,n,mod)-2*pow(9,n,mod)+pow(8,n,mod)\nprint((ans%mod))\n", "n = int(input())\nmod = 10**9+7\nprint(((10**n-9**n)*2 - (10**n-8**n))%mod)", "n = int(input())\nmod = 10**9+7\nif n <= 1:\n    print((0))\n    return\nprint(((pow(10, n, mod)-2*pow(9, n, mod)+pow(8, n, mod)) % mod))\n", "N = int(input())\nMOD = 10 ** 9 + 7\nAll = (10 ** N) % MOD\nnine_all = (9 ** N) % MOD\neight_all = (8 ** N) % MOD\nans = All - (2 * nine_all - eight_all)\nans %= MOD\nprint(ans)", "N = int(input())\nMOD = 10**9+7\nprint((10**N-(9**N+9**N-8**N))%MOD)", "#(\u5168\u3066\u306e\u5834\u5408) - {(0\u304c\u5b58\u5728\u3057\u306a\u3044\u3068\u304d) + (9\u304c\u5b58\u5728\u3057\u306a\u3044\u3068\u304d) - (0\u30689\u304c\u3068\u3082\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d)}\nn = int(input())\n\nMOD = 10 ** 9 + 7\n\nprint((pow(10,n) % MOD  - (9**n * 2 - 8 ** n) % MOD )%MOD)", "#! /usr/bin/python3\n\nn = int(input())\nmod = 10**9+7\nans = pow(10, n, mod) - pow(9, n, mod) * 2 + pow(8, n, mod)\nans %= mod\nprint(ans)\n", "n = int(input())\nmod = 10**9+7\nans = pow(10, n, mod)-2*pow(9, n, mod)+pow(8, n, mod)\nans %= mod\nprint(ans)", "mod = 10**9 + 7\nn = int(input())\nprint(((pow(10, n, mod) - 2 * pow(9, n, mod) + pow(8, n, mod)) % mod))\n"]