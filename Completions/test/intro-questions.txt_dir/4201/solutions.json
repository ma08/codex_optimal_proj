["h,w,k = list(map(int,input().split()))\nc_list = []\nfor i in range(h):\n  c_list.append(list(str(input())))\nh_TF_list = []\nw_TF_list = []\nfor i in range(2**h):\n  p_m_list = [False for i in range(h)]\n  for j in range(h):\n    if ((i >>j) & 1):\n      p_m_list[j] = True\n  h_TF_list.append(p_m_list)\nfor i in range(2**w):\n  p_m_list = [False for i in range(w)]\n  for j in range(w):\n    if ((i >>j) & 1):\n      p_m_list[j] = True\n  w_TF_list.append(p_m_list)\ncount = 0\nfor h_list in h_TF_list:\n  for w_list in w_TF_list:\n    p = 0\n    for i in range(h):\n      for j in range(w):\n        if c_list[i][j] == \"#\" and h_list[i] == True and w_list[j] == True:\n          p += 1\n    if p == k:\n      count += 1\nprint(count)\n", "from itertools import product\n\nH,W,K=map(int,input().split())\nc=[]\nans=0\nfor i in range(H):\n    c.append(input())\nfor row_bit in product(range(2),repeat=H):\n    for col_bit in product(range(2),repeat=W):\n        count=0\n        #print(row_bit,col_bit)\n        for row in range(H):\n            for col in range(W):\n                if c[row][col]==\"#\" and (row_bit[row] and col_bit[col]):\n                    count+=1\n                    #print(row,col)\n        if count==K:\n            ans+=1\nprint(ans)", "h,w,k = map(int, input().split())\nc = [input() for _ in range(h)]\n\nans = 0\nfor i in range(2**h):\n  for j in range(2**w):\n    t = 0\n    for a in range(h):\n      for b in range(w):\n        if (i>>a)&1 == 0 and (j>>b)&1 == 0 and c[a][b] == \"#\": t += 1\n    if t == k : ans += 1\nprint(ans)", "from itertools import product\n\nh, w, k = list(map(int, input().split()))\nc = [input() for i in range(h)]\nans = 0\n \nfor maskR in product([0,1], repeat=h):\n    for maskC in product([0,1], repeat=w):\n        b = 0\n        for i in range(h):\n            for j in range(w):\n                if maskR[i] == 1 and maskC[j] == 1 and c[i][j] == '#':\n                    b += 1\n        if b ==k:\n            ans += 1\nprint(ans)\n", "h, w, k = map(int, input().split())\nc = []\nans = 0\nfor i in range(h):\n    c_i = list(input())\n    c.append(c_i)\n\nfor i in range(1 << h):\n    for j in range(1 << w):\n        cnt = 0\n        for ii in range(h):\n            for jj in range(w):\n                if (i >> ii & 1):\n                    continue\n                if (j >> jj & 1):\n                    continue\n                if c[ii][jj] == \"#\":\n                    cnt += 1\n        if cnt == k:\n            ans += 1\n\nprint(ans)", "h,w,k=map(int,input().split())\nm=[[] for _ in range(h)]\nfor y in range(h):\n  m[y]=list(input())\n\nans=0  \nfor y in range(1<<h):\n  for x in range(1<<w):\n    cnt=0\n    for y2 in range(h):\n      for x2 in range(w):\n        if m[y2][x2]=='#' and y>>y2&1 and x>>x2&1: cnt+=1;\n    if cnt==k: ans+=1;\nprint(ans)", "h, w, k = map(int, input().split(' '))\nc = [input() for x in range(h)]\ncnt = 0\n \nfor maskR in range(2**h):\n    for maskC in range(2**w):\n        black = 0\n        for i in range(h):\n            for j in range(w):\n                if (((maskR >> i) &1) == 0\n                    and ((maskC >> j) &1) == 0 and c[i][j] == '#'):\n                    black += 1\n        if black == k:\n            cnt += 1\nprint(cnt)", "h,w,k=map(int,input().split())\nmaze=[]\nfor i in range(h):\n  s=input()\n  maze.append([c for c in s])\nans=0\nfor i in range(2**(h)):\n  for j in range(2**(w)):\n    bla=0\n    for column in range(h):\n      for line in range(w):\n        if (i>>(column)&1) and (j>>(line)&1) and maze[column][line]=='#':\n          bla+=1\n    if bla==k:\n      ans+=1\nprint(ans)", "h, w, k = map(int, input().split())\nccc = [input() for _ in range(h)]\nans = 0\nfor bit_h in range(2 ** h):\n    for bit_w in range(2 ** w):\n        cnt = 0\n        for i in range(h):\n            for j in range(w):\n                if (bit_h >> i) & 1 == 0 and (bit_w >> j) & 1 == 0:\n                    if ccc[i][j] == '#':\n                        cnt += 1\n        if cnt == k:\n            ans += 1\nprint(ans)", "h, w, k = list(map(int, input().split()))\nc = [list(input()) for _ in range(h)]\nans = 0\n\nfor i in range(2**h):\n    for j in range(2**w):\n        cnt = 0\n        for ih in range(h):\n            for iw in range(w):\n                if i&(1<<ih)==0 and j&(1<<iw)==0 and c[ih][iw]==\"#\":\n                    cnt += 1\n        if cnt == k:\n            ans += 1\nprint(ans)\n", "h,w,k=map(int, input().split())\nBlack = []\nfor i in range(h):\n    c = input()\n    for j in range(w):\n        if c[j] == \"#\":\n            Black.append((i,j))\n# print(Black, len(Black))\n\nans = 0\nfor i in range(2 ** h):\n    for j in range(2 ** w):\n        a = len(Black)\n        for b in Black:\n            if ((i >> b[0]) & 1) or ((j >> b[1]) & 1):\n            # if b[0] != i - 1 and b[1] != j - 1:\n                a -= 1\n        if a == k:\n            ans += 1\n            # print(bin(i),bin(j))\nprint(ans)", "import itertools\nh, w, k = map(int, input().split())\nc = []\nans = 0\nfor i in range(h):\n  c.append(list(input()))\n\nfor i in range(2 ** h - 1):\n  c2 = []\n  x = str(bin(i))[2:].zfill(h)\n  for a in range(h):\n    if x[a] == '0':\n      c2.append(c[a])\n    elif x[a] == '1':\n      c2.append(['*'] * w)\n  black = list(itertools.chain.from_iterable(c2)).count('#')\n  for j in range(2 ** w - 1):\n    black2 = black\n    y = str(bin(j))[2:].zfill(w)\n    for b in range(w):\n      if y[b] == '1':\n        for a in range(h):\n          if c2[a][b] == '#':\n            black2 -= 1\n    if black2 == k:\n      ans += 1\nprint(ans)", "H,W,K=map(int,input().split())\nP=[]\nfor i in range(H):\n    s=input()\n    a=[]\n    for j in range(W):\n        a.append(s[j])\n    P.append(a)\n    \nans=0\nfor markR in range(2**H):\n    for markC in range(2**W):\n        black=0\n        for i in range(H):\n            for j in range(W):\n                if (markR>>i)&1==0 and (markC>>j)&1==0 and P[i][j]=='#':\n                    black+=1\n        if black==K:\n            ans+=1\n\nprint(ans)", "def main():\n    H, W, K = map(int, input().split())\n    grid = [input() for _ in range(H)]\n\n    n = H + W\n    ans = 0\n    for case in range(2**n):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if (case >> i) & 1:\n                    if (case >> j + H) & 1:\n                        if grid[i][j] == \"#\":\n                            cnt += 1\n        if cnt == K:\n            ans += 1\n    print(ans)\n   \nmain()", "#n = int(input()) #\u5165\u529b\n#a, b = (int(x) for x in input().split())\n#a, b = map(int, input().split())\n\n#a = [int(x) for x in input().split()]\n#a = list(map(int, input().split()))\n#a = [list(map(int,input().split(\" \"))) for i in range(N)]   #2\u6b21\u5143\n\n\n#a.sort() # C++ \u306e sort(a.begin(), a.end());\n#a.append(3) # C++ \u306e a.push_back(3);\n\n\n#return # return 0 \u7684\u306a\u3002\u7d42\u4e86\u3067\u304d\u308b\u3002\n## \u6574\u6570\u306e\u5207\u308a\u6368\u3066\u9664\u7b97\u306f // (\u30c0\u30d6\u30eb\u30b9\u30e9\u30c3\u30b7\u30e5)\n\n\n#a[\u59cb\u307e\u308a\u306e\u4f4d\u7f6e: \u7d42\u308f\u308a\u306e\u4f4d\u7f6e: \u30b9\u30e9\u30a4\u30b9\u306e\u5897\u5206] # (a \u306f\u914d\u5217)\n\n\n#import numpy as np  #import\u306b100 ms \u7a0b\u5ea6\u304b\u304b\u308b\u3002\nimport math\nimport copy\nimport string\n#math.gcd(a, b) \u3067\u3001gcd \u8a08\u7b97\u3067\u304d\u308b\u3002\n#math.pi \u306f\u5186\u5468\u7387\u3002\n\nINF = int(10**18) #\u3079\u304d\u4e57 C++ \u306e pow(10, 18) or 1e18;\npi = math.pi\n\nMOD = 1000000007\n#MOD = 1000000009\n#MOD = 998244353\n\n\n\n\n#\u7e70\u308a\u8fd4\u30572\u4e57\u6cd5\n#N^a\u306e\u3001M\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u308b\u3002\ndef my_pow(N, a, M):\n    if(a == 0):\n        return 1\n    else:\n        if(a % 2 == 0):\n            tempo = my_pow(N, a/2, M)\n            return (tempo * tempo) % M\n        else:\n            tempo = my_pow(N, a - 1, M)\n            return (tempo * N) % M\n\n\n\n\n#N_C_a \u3092 M \u3067\u5272\u3063\u305f\u4f59\u308a\ndef my_combination(N, a, M):\n    res = 1\n\n    for i in range(0, a):\n        res *= N - i\n        res %= M\n\n    for i in range(0, a):\n        res *= my_pow(i + 1, M - 2, M)\n        res %= M\n\n    return res\n\n\n\n\n#N_C_i \u3092 M \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u3001v[i] \u306b\u4ee3\u5165\u3059\u308b\u3002\ndef my_combination_table(N, M, v):\n    if(len(v) < N + 1):\n        l = N + 1 - len(v)\n        tempo = [1] * l\n        v.extend(tempo)\n\n    for i in range(1, N + 1):\n        v[i] = v[i - 1] * (N - (i - 1))\n        v[i] %= M\n\n        v[i] *= my_pow(i, M - 2, M)\n        v[i] %= M\n\n    return\n\n\n\n\n#math.factorial \u3067\u968e\u4e57\u306f\u8a08\u7b97\u3067\u304d\u308b\u3002\n#math.gcd \u3067 gcd \u306f\u8a08\u7b97\u3067\u304d\u308b\u3002\n#np.gcd.reduce(A) #(A\u306f\u914d\u5217) \u3067\u3001A\u306e\u5168\u3066\u306e\u8981\u7d20\u306e gcd \u304c\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n\n\nH, W, K = (int(x) for x in input().split())\nc = [input() for i in range(0, H)]\n\nres = 0\nfor i in range(0, 2 ** H):\n    for j in range(0, 2 ** W):\n        cnt = 0\n        for h in range(0, H):\n            for w in range(0, W):\n                if(c[h][w] == '#' and (1 << h & i) and (1 << w & j)): cnt += 1\n        if(cnt == K): res += 1\n\nprint(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#2bit\u5168\u63a2\u7d22\nh,w,k=map(int,input().split())\nans=[list(input()) for i in range(h)]\nn=h+w\nanswer=0\nfor i in range(1<<n):\n  cond = [0]*n\n  for j in range(n):\n    if 1&(i>>j):\n      cond[j] = 1\n  count=0\n  for i in range(h):\n    for j in range(w):\n      if cond[i]==0 and cond[h+j]==0 and ans[i][j]==\"#\":\n        count+=1\n  if count==k:\n    answer+=1\nprint(answer)", "from copy import deepcopy as copy\n\n\nH, W, K = list(map(int, input().split()))\nc = [list(input()) for i in range(H)]\n\nans = 0\n\nfor i in range(2**H):\n    cc = copy(c)\n    n = i\n   \n    idx = -1\n    while n > 0:\n        x = n % 2\n        n //= 2\n        idx += 1\n        if x == 0: continue\n        \n        for j in range(W):\n            cc[idx][j] = '.'\n            \n    for j in range(2**W):\n        ccc = copy(cc)\n        n = j\n        idx = -1\n        \n        while n > 0:\n            x = n % 2\n            n //= 2\n            idx += 1\n            if x == 0: continue\n        \n            for k in range(H):\n                ccc[k][idx] = '.'\n                \n        cnt = sum([_.count('#') for _ in ccc])\n        \n        if cnt == K: ans += 1\nprint(ans)", "h, w, k = map(int, input().split())\nccc = [input() for _ in range(h)]\nans = 0\nfor bit_h in range(2 ** h):\n    for bit_w in range(2 ** w):\n        cnt = 0\n        for hi in range(h):\n            for wi in range(w):\n                if (bit_h >> hi) & 1 == 0 and (bit_w >> wi) & 1 == 0:\n                    if ccc[hi][wi] == '#':\n                        cnt += 1\n        if cnt == k:\n            ans += 1\nprint(ans)", "from itertools import product\nh,w,k = list(map(int, input().split()))\nc = [input() for i in range(h)]\n\nans = 0\nfor row_bit in product(list(range(2)), repeat= h):\n    for col_bit in product(list(range(2)), repeat  = w):\n        count = 0\n        for row in range(h):\n            for col in range(w):\n                if c[row][col] == \"#\" and (row_bit[row] and col_bit[col]):\n                    count += 1\n        if count == k:\n            ans += 1\nprint(ans)\n\n", "h, w, k = map(int, input().split(' '))\nc = [input() for x in range(h)]\ncnt = 0\nfor m in range(2**(h+w)):\n    cc = c.copy()\n    for ij in range(h+w):\n        if ((m >> ij) & 1):\n            if ij in range(h):\n                cc[ij] = '.'*w\n            if ij in range(h,h+w):\n                for t in range(h):\n                    cc[t] = cc[t][:ij-h]+'.'+cc[t][ij+1-h:]\n    num = sum(cc[s].count('#') for s in range(h))\n    if num == k:\n        cnt += 1\nprint(cnt)", "H, W, K = list(map(int, input().split()))\nC = [list(input()) for _ in range(H)]\nans = 0\n# \u30d3\u30c3\u30c8\u63a2\u7d22\nfor i in range(2**H):\n    for j in range(2**W):\n        cnt = 0\n        for h in range(H):\n            for w in range(W):\n                if((i >> h) & 1) == 0 and ((j >> w) & 1) == 0:\n                    if C[h][w] == \"#\":\n                        cnt += 1\n        if cnt == K:\n            ans += 1\n\nprint(ans)\n", "H,W,K=map(int,input().split())\nc=[list(input())for i in range(H)]\nans=0\nfor i in range(1<<H):\n    mh=[]\n    for j in range(H):\n        if i&(1<<j):mh.append(j)\n    mh=set(mh)\n    for j in range(1<<W):\n        mw=[]\n        for k in range(W):\n            if j&(1<<k):mw.append(k)\n        mw=set(mw)\n        count=0\n        for a in range(H):\n            for b in range(W):\n                if not a in mh and not b in mw and c[a][b]=='#':\n                    count+=1\n        if count==K:ans+=1\nprint(ans)", "h, w, k = map(int, input().split(' '))\nc = [input() for x in range(h)]\ncnt = 0\n\nfor maskR in range(2**h):\n    for maskC in range(2**w):\n        black = 0\n        for i in range(h):\n            for j in range(w):\n                if (((maskR >> i) &1) == 0\n                    and ((maskC >> j) &1) == 0 and c[i][j] == '#'):\n                    black += 1\n        if black == k:\n            cnt += 1\nprint(cnt)", "from sys import stdin\nH, W, K = [int(_) for _ in stdin.readline().rstrip().split()]\nC = [list(stdin.readline().rstrip()) for _ in range(H)]\nans = 0\n\nfor h in range(1<<H):\n    for w in range(1<<W):\n        black = 0\n        for i in range(H):\n            for j in range(W):\n                if ((h>>i)&1) == 0 and ((w>>j)&1) == 0 and C[i][j] == '#':\n                    black += 1\n        if black == K:\n            ans += 1\nprint(ans)", "from itertools import product\nh,w,k = list(map(int,input().split()))\ngrid = []\nfor i in range(h):\n    grid.append(input())\n\npattern = list(product((0,1), repeat=h+w))\nresult = 0\nfor p in range(len(pattern)):\n    p_h = pattern[p][:h]\n    p_w = pattern[p][h:]\n    cnt = 0\n    for i in range(h):\n        if p_h[i] == 0:\n            for j in range(w):\n                if p_w[j] == 0:\n                    now = grid[i][j]\n                    if now == '#':\n                        cnt += 1\n\n    if cnt == k:\n        result += 1\n\nprint(result)\n", "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\ninf = 10**9\n\n\ndef main():\n    h, w, k = list(map(int, input().split()))\n    c = []\n\n    for i in range(h):\n        c.append(list(input()))\n\n    # print(c)\n\n    r = 0\n    for i in range(2 ** h):\n        for j in range(2 ** w):\n            bh = list(str(bin(i))[2:].zfill(h))\n            bw = list(str(bin(j))[2:].zfill(w))\n            # print(bh, bw)\n            count = 0\n            for m in range(h):\n                for l in range(w):\n                    if bh[m] == '1' and bw[l] == '1' and c[m-1][l-1] == '#':\n                        count += 1\n            # print(count)\n            if count == k:\n                r += 1\n\n    print(r)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "h,w,k=map(int,input().split())\nm=[[] for _ in range(h)]\nfor y in range(h):\n  m[y]=list(input())\n\nans=0  \nfor y in range(1<<h):\n  for x in range(1<<w):\n    mx,my=[],[]\n    for y2 in range(h):\n      if y>>y2&1: my.append(y2);\n    for x2 in range(w):\n      if x>>x2&1: mx.append(x2);\n    cnt=0\n    for y2 in my:\n      for x2 in mx:\n        if m[y2][x2]=='#': cnt+=1;\n    if cnt==k: ans+=1;\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep  6 01:25:38 2020\n\n@author: liang\n\"\"\"\n\nfrom itertools import combinations\n\nH, W, K = map(int, input().split())\n\nC = [input() for _ in range(H)]\n            \nans = 0\nfor comb_H in [list(combinations(range(H),a)) for a in range(H+1)]:\n    for comb_W in [list(combinations(range(W),a)) for a in range(W+1)]:\n        for tuple_H in comb_H:\n            for tuple_W in comb_W:\n                tmp = 0\n                for i in range(H):\n                    for j in range(W):\n                        if i not in tuple_H and j not in tuple_W and C[i][j] == \"#\":\n                            tmp += 1\n                #print(tuple_H)\n                #print(tuple_W)\n                #print(tmp)\n                if tmp == K:\n                    ans += 1\nprint(ans)", "from itertools import product\nh,w,k=map(int, input().split())\ntable=[list(input()) for i in range(h)]\ncount=0\nfor rbit in product(range(2), repeat=h):\n    for cbit in product(range(2),repeat=w):\n        black=0\n        for row in range(h):\n            for col in range(w):\n                if table[row][col]==\"#\" and rbit[row]==0 and cbit[col]==0:\n                    black+=1\n        if black==k:\n            count+=1\nprint(count)", "H,W,K=list(map(int,input().split()))\nSquare=[0]*H\nfor i in range(H):\n    C=input()\n    Square[i]=C\nans=0\nnowH=[0]*H\nnowW=[0]*W\nfor j in range(2**H):\n    for p in range(H):\n        nowH[p]=j%2\n        j//=2\n    for k in range(2**W):\n        kouho=0#\u3053\u306e\u7e26\u30fb\u6a2a\u306e\u9078\u3073\u65b9\u3067\u6b8b\u308b\u9ed2\u306e\u6570\n        for q in range(W):\n            nowW[q]=k%2\n            k//=2\n        for s in range(H):\n            for t in range(W):\n                if nowH[s]==0 and nowW[t]==0 and Square[s][t]==\"#\":\n                    kouho+=1\n        if kouho==K:\n            ans+=1\nprint(ans)\n", "h,w,k=list(map(int,input().split()))\nli=[]\nfor i in range(h):\n  li.append(list(input()))\nans=0\nfor i in range(1<<h):\n  for j in range(1<<w):\n    cnt=0\n    for p in range(h):\n      for q in range(w):\n        if i>>p&1:\n          continue\n        if j>>q&1:\n          continue\n        if li[p][q]==\"#\":\n          cnt+=1\n    if cnt==k:\n      ans+=1\nprint(ans)\n", "import sys\ndef input(): return sys.stdin.readline().rstrip()\nfrom itertools import product\ndef main():\n    h, w, k = map(int,input().split())\n    C = [input() for _ in range(h)]\n    comb_list = list(product([False, True], repeat = h + w))\n    ans = 0\n    for comb in comb_list:\n        cunt = 0\n        for i in range(h):\n            if not comb[i]:\n                continue\n            for j in range(w):\n                if not comb[h+j]:\n                    continue\n                if C[i][j] == '#':\n                    cunt += 1\n        if cunt == k:\n            ans += 1\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "h, w, k = list(map(int, input().split()))\nc = [list(input()) for _ in range(h)]\nans = 0\n\nfrom itertools import product\nfor row_bit in product(range(2), repeat=h):\n  for col_bit in product(range(2), repeat=w):\n    black_cnt = 0\n    for i in range(h):\n      for j in range(w):\n        # bit\u306b0\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u304d\u306f\u5857\u3089\u306a\u3044\n        if c[i][j] == '#' and (row_bit[i]==0 and col_bit[j]==0):\n          black_cnt += 1\n    if black_cnt == k:\n      ans += 1\nprint(ans)", "import copy\n\nH,W,K = list(map(int,input().split()))\nd={}\nans = 0\nfor i in range(H):\n    d[\"c\"+str(i)]=list(input())\n    \ndef changeRow(d,num,W):\n    d[\"c\"+str(num)]=[\".\"]*W\n    \ndef changeColum(d,num,H):\n    for i in range(H):\n        d[\"c\"+str(i)][num]=\".\"\n        \ndef checkSharp(d,H):\n    cnt=0\n    for i in range(H):\n        cnt += d[\"c\"+str(i)].count(\"#\")\n    return cnt\n\nfor i in range(2**W):\n    for j in range(2**H):\n        dCopy=copy.deepcopy(d)\n        for k in range(W):\n            if ((i >> k) & 1):\n                changeColum(dCopy,k,H)\n        for k in range(H):\n            if ((j >> k) & 1):\n                changeRow(dCopy,k,W)\n        if K==checkSharp(dCopy,H):\n            ans += 1\n        # print(i,j,bin(i),bin(j))\n        # print(dCopy,checkSharp(dCopy,H))\nprint(ans)\n\n\n", "h,w,k = map(int,input().split())\nm=[list(input()) for i in range(h)]\no=0\nfor h_bit in range(2**h):\n    for w_bit in range(2**w):\n        c=0\n        for i in range(h):\n            for j in range(w):\n                if (h_bit>>i)&1==0 and (w_bit>>j)&1==0 and m[i][j]=='#':\n                    c+=1\n        if c==k:\n            o+=1\nprint(o)", "H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nr = [[0]*W for _ in range(H)]\nS = 0\nfor i in range(2**H):\n  for j in range(2**W):\n    cnt = 0\n    for k in range(H):\n      for l in range(W):\n        if (i >> k) & 1:\n          if (j >> l) & 1:\n            if c[k][l] == \"#\":\n              cnt += 1\n    if cnt == K:\n      S += 1\nprint(S)", "from copy import deepcopy\n\nh,w,kkk = map(int,input().split())\nc = [list(input()) for _ in range(h)]\n\ncnt=0\n\nfor i in range(2**h-1):\n\n    nuritubu_row=[]\n    for k in range(i):\n        if i>>k&1:\n            nuritubu_row.append(k)\n\n    \n    for j in range(2**w-1):\n\n        nuritubu_col=[]\n        for k in range(j):\n            if j>>k&1:\n                nuritubu_col.append(k) \n                   \n        c_tmp=deepcopy(c)\n        for x in range(h):\n            for y in range(w):\n                if ((x in nuritubu_row) or (y in nuritubu_col)):\n                    c_tmp[x][y]=\"o\"        \n                    \n        if sum([c_tmp[k].count(\"#\") for k in range(h)])==kkk:\n            cnt+=1\n\nprint(cnt)", "from itertools import product\nh, w, k = map(int, input().split())\nc = [input() for i in range(h)]\nans = 0\n\nfor maskR in product([0,1], repeat=h):\n    for maskC in product([0,1], repeat=w):\n        b = 0\n        for i in range(h):\n            for j in range(w):\n                if maskR[i]==1 and maskC[j]==1 and c[i][j]==\"#\":\n                    b += 1\n        if b == k:\n            ans += 1\nprint(ans)", "H,W,K=list(map(int,input().split()))\nc=[input() for _ in range(H)]\n\nans=0\nfor i in range(1<<H):\n    for j in range(1<<W):\n        cnt=0\n        for h in range(H):\n            for w in range(W):\n                if c[h][w]=='#':\n                    if (i>>h)%2==0 and (j>>w)%2==0:\n                        cnt+=1\n        if cnt==K:\n            ans+=1\nprint(ans)\n", "\nimport numpy as np\nH, W, K=list(map(int,input().split()))\nC=np.zeros((H,W))\n\nfor i in range(H):\n    c=input()\n    for j in range(len(c)):\n        if c[j]==\"#\":\n            C[i][j]=1\nCH=[]\nCW=[]\n\nfor i in range(2**H):\n    cl=[]\n    for j in range(H):\n        if bin(i)[-j-1]==\"1\":\n            cl.append(j)\n        elif bin(i)[-j-1]==\"b\":\n            break\n    CH.append(cl)\n\nfor i in range(2**W):\n    cl=[]\n    for j in range(W):\n        if bin(i)[-j-1]==\"1\":\n            cl.append(j)\n        elif bin(i)[-j-1]==\"b\":\n            break\n    CW.append(cl)\n\nans=0\nfor i in range(len(CH)):\n    for j in range(len(CW)):\n        count=0\n        for k in range(len(CH[i])):\n            for l in range(len(CW[j])):\n                count+=C[CH[i][k]][CW[j][l]]\n        if count==K:\n            ans+=1\nprint(ans)\n", "import copy\nh,w,k=map(int,input().split())\nc=[list(input())for _ in range(h)]\nans=0\nfor i in range(1<<h):\n  for j in range(1<<w):\n    a=0\n    ci=copy.deepcopy(c)\n    for s in range(h):\n      if (i>>s)&1==1:\n        for tw in range(w):\n          ci[s][tw]='.'\n    for t in range(w):\n      if (j>>t)&1==1:\n        for sh in range(h):\n          ci[sh][t]='.'\n    for ss in range(h):\n      for tt in range(w):\n        if ci[ss][tt]=='#':\n          a+=1\n    if a==k:\n      ans+=1\nprint(ans)", "H, W, K = map(int, input().split())\nS = [input() for _ in range(H)]\nans = 0\nfor h in range(2**H):\n    h = bin(h)[2:].zfill(H)\n    for w in range(2**W):\n        w = bin(w)[2:].zfill(W)\n        cnt = 0\n        for i in range(H):\n            if h[i] == '1': continue\n            for j in range(W):\n                if w[j] == '1': continue\n                if S[i][j] == '#':\n                    cnt += 1\n        \n        if cnt == K:\n            ans += 1\n\nprint(ans)", "H, W, K=map(int, input().split())\nList = [list(input()) for _ in range(H)]\n\nMAP=[[0 for j in range(W)] for i in range(H)]\n\nfor i in range(H):\n    for j in range(W):\n        if List[i][j]=='#':\n          MAP[i][j]=1\n\nMAPP=[[0 for j in range(W)] for i in range(H)]\nbx=[0]*W\nby=[0]*H\nc=[0]*2**H*2**W\nfor i in range(2**H*2**W):\n    b=format(i,'b').zfill(H+W)\n    for jx in range(W):\n      bx[jx]=int(b[-W+jx])\n    for jy in range(H):\n      by[jy]=int(b[jy])\n    for k in range(H):\n      for l in range(W):\n        MAPP[k][l]=MAP[k][l]*bx[l]*by[k]\n    c[i]=sum(map(sum, MAPP))\n\nprint(c.count(K))", "h,w,x=map(int,input().split())\na=[list(input()) for i in range(h)]\nans=0\nfor i in range(2**(h+w)):\n  b=0\n  for j in range(h):\n    for k in range(w):\n      if (i>>j)&1==1 and (i>>k+h)&1==1 and a[j][k]==\"#\":\n        b+=1\n  if b==x:\n    ans+=1    \nprint(ans)", "h, w, k = map(int, input().split())\nccc = [input() for _ in range(h)]\nans = 0\nfor bit_h in range(2 ** h):\n    for bit_w in range(2 ** w):\n        cnt = 0\n        for hi in range(h):\n            for wi in range(w):\n                if (bit_h >> hi) & 1 == 0 and (bit_w >> wi) & 1 == 0:\n                    if ccc[hi][wi] == '#':\n                        cnt += 1\n        if cnt == k:\n            ans += 1\nprint(ans)", "h,w,k=map(int,input().split())\nli=[]\nfor i in range(h):\n  li.append(list(input()))\nans=0\nfor i in range(1<<h):\n  for j in range(1<<w):\n    cnt=0\n    for p in range(h):\n      for q in range(w):\n        if i>>p&1:\n          continue\n        if j>>q&1:\n          continue\n        if li[p][q]==\"#\":\n          cnt+=1\n    if cnt==k:\n      ans+=1\nprint(ans)", "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfrom itertools import product\ndef main():\n    h, w, k = map(int, input().split())\n    gg = []\n    for _ in range(h):\n        row = [1 if c == '#' else 0 for c in list(input())]\n        gg.extend(row)\n    row_pro = tuple(product((0, 1), repeat=h))\n    col_pro = tuple(product((0, 1), repeat=w))\n    pat = tuple(product(row_pro, col_pro))\n    r = 0\n    for pate in pat:\n        t0 = 0\n        for i0, p0 in enumerate(pate[0]):\n            for i1, p1 in enumerate(pate[1]):\n                if p0 and p1:\n                    t0 += gg[i0*w + i1]\n        if t0 == k:\n            r += 1\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "h,w,k = map(int, input().split())\nc = [input() for _ in range(h)]\n\nans = 0\nfor i in range(1<<h):\n  for j in range(1<<w):\n    t = 0\n    for a in range(h):\n      for b in range(w):\n        if (i>>a)&1 and (j>>b)&1 and c[a][b] == \"#\": t += 1\n    if t == k: ans += 1\nprint(ans)", "H,W,K=map(int,input().split())\nC=[input()for _ in range(H)];a=0\nfor i in range(2**H):\n for j in range(2**W):\n  b=0\n  for x in range(H):\n   for y in range(W):\n    if(2**x&i)*(2**y&j):b+=(C[x][y]==\"#\")\n  if b==K:a+=1\nprint(a)", "H,W,K=list(map(int,input().split()))\nS=[list(input()) for _ in range(H)]\nans=0\n\nfor H_mask in range(2**H):\n  for W_mask in range(2**W):\n    cnt=0\n    for i in range(H):\n      for j in range(W):\n        if (H_mask>>i)&1==0 and (W_mask>>j)&1==0\\\n        and S[i][j]=='#':\n          cnt+=1\n    if cnt==K:\n      ans+=1\n\nprint(ans)\n", "import itertools\nH, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\n\nans = 0\nfor i in range(H+1):\n    for j in range(W+1):\n        for row in itertools.combinations([x for x in range(H)], i):\n            for column in itertools.combinations([x for x in range(W)], j):\n                tmp = 0\n                for tr in range(H):\n                    for tc in range(W):\n                        if tr in row:\n                            continue\n                        if tc in column:\n                            continue\n                        if c[tr][tc] == '#':\n                            tmp += 1\n                if tmp == K:\n                    ans += 1\nprint(ans)", "h,w,k = map(int, input().split())\ns = [list(input()) for _ in range(h)]\nans = 0\nfor row in range(2**h):\n for col in range(2**w):\n   c = 0\n   for i in range(h):\n     for j in range(w):\n       if (row >> i)&1 == 0 and (col >> j)&1 == 0:\n         if s[i][j]=='#':\n           c += 1\n   if c == k:\n     ans += 1\nprint(ans)", "H, W, K = map(int, input().split())\nC = [list(input()) for _ in range(H)]\n\nans = 0\nfor row in range(2 ** H - 1):\n    for col in range(2 ** W - 1):\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if not ((row >> i) & 1) and not ((col >> j) & 1) and C[i][j] == '#':\n                    count += 1\n        if count == K:\n            ans += 1\n\nprint(ans)", "h,w,K =  map(int,input().split())\nmasu = [input() for _ in range(h)]\nans = 0\nfor i in range(2**h):\n    for j in range(2**w):\n        cnt = 0\n        for k in range(h):\n            for l in range(w):\n                if ((i >> k) & 1) and ((j >> l) & 1) and masu[k][l] == \"#\":\n                    cnt += 1\n        if cnt == K:\n            ans += 1\n \nprint(ans)", "import sys\n\nH, W, K = list(map(int, input().split()))\n\nc = []\nfor i in range(H):\n    c.append(list(input()))\n\nans = 0\nfor i in range(2**H):\n    for j in range(2**W):\n        count = 0\n        for h in range(H):\n            for w in range(W):\n                if (i >> h)&1 & (j>>w)&1:\n                    if c[h][w] == '#':\n                        count += 1\n        if count == K:\n            ans += 1\nprint(ans)\n\n", "from itertools import groupby, accumulate, product, permutations, combinations\nh,w,k = map(int, input().split()) \nl = [input() for i in range(h)]\nans = 0\n\nfor i in product([0,1],repeat=h):\n    for j in product([0,1],repeat=w):\n        Ans = 0\n        for m in range(h):\n            for n in range(w):\n                if l[m][n] == '#' and i[m] == 1 and j[n] == 1:\n                    Ans += 1\n        if Ans == k:\n            ans +=1\n\nprint(ans)", "import numpy as np\n\n\ndef main():\n    H, W, K = list(map(int, input().split()))\n    M = np.array([list(input()) for _ in range(H)])\n\n    ans = 0\n    for n in range(2**(H+W)):\n        p = bin(n)[2:]\n        p = '0'*(H+W-len(p)) + p\n        m = M.copy()\n        for i in range(H):\n            for j in range(W):\n                if p[i] == '1' or p[H+j] == '1':\n                    m[i][j] = '.'\n        cnt = np.count_nonzero(m == '#')\n        if cnt == K:\n            ans += 1\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import product\n\nH,W,K = list(map(int,input().split()))\nC = []\nfor _ in range(H):\n    c = list(input())\n    C.append(c)\n\n# print(C)\nans = 0 \n\nfor row_bit in product(list(range(2)), repeat=H):\n    # print(row_bit) \n    # print(row_bit[0])\n    # print(row_bit[1])\n    for col_bit in product(list(range(2)), repeat=W):\n        # print(col_bit)\n        cnt = 0\n        for row in range(H):\n            for col in range(W):\n                if C[row][col] == \"#\" and (row_bit[row] and col_bit[col]):\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n", "def main():\n    a,b,c = list(map(int,input().split()))\n    s =[list(map(str,input()))for i in range(a)]\n    cnt =0\n    count=0\n    for i in range(2**a):\n        for j in range(2**b):\n            cnt=0\n            for ia in range(a):\n                for ib in range(b):\n                    if not i &(1<<ia) and not j&(1<<ib):\n                            if s[ia][ib] =='#':\n                                cnt+=1\n            if cnt ==c:\n                count+=1\n    print(count)\ndef __starting_point():\n    main()\n\n\n__starting_point()", "#!/usr/bin/env python3\nimport itertools\nimport numpy as np\n\nH, W, K = list(map(int, input().split()))\nc_table = []\n\nfor _ in range(H):\n    c_list = input()\n    c_list = [0 if c == \".\" else 1 for c in list(c_list)]\n    c_table.append(c_list)\n\nh_patterns = list(itertools.product([True, False], repeat=H))\nw_patterns = list(itertools.product([True, False], repeat=W))\ncount = 0\nfor h_p in h_patterns:\n    for w_p in w_patterns:\n        w_table = np.array(c_table)\n\n        for i, h_flag in enumerate(h_p):\n            if h_flag:\n                w_table[i] = 0\n            for j, w_flag in enumerate(w_p):\n                if w_flag:\n                    w_table.T[j] = 0\n        if w_table.sum() == K:\n            count += 1\n\nans = count\n\nprint(ans)\n", "import numpy as np\nfrom itertools import combinations\n\nh, w, k = map(int, input().split())\ngraph = []\n\nfor i in range(h):\n  row = [1 if x == '#' else 0 for x in input()]\n  graph.append(row)\n\ngraph = np.array(graph)\nh_combi = []\nw_combi = []\n\nfor i in range(1, h + 1):\n    h_combi.extend(list(combinations(range(h), i)))\nfor i in range(1, w + 1):\n    w_combi.extend(list(combinations(range(w), i)))\n\nans = 0\n\nfor hi in h_combi:\n  for wi in w_combi:\n    cnt = 0\n    for y in hi:\n      if cnt > k:\n        break\n      for x in wi:\n        cnt += graph[y][x]\n    if cnt == k:\n      ans += 1\n\nprint(ans)      ", "h,w,K =  map(int,input().split())\nmasu = [input() for _ in range(h)]\nans = 0\nfor i in range(2**h):\n    for j in range(2**w):\n        cnt = 0\n        for k in range(h):\n            for l in range(w):\n                if ((i >> k) & 1) and ((j >> l) & 1) and masu[k][l] == \"#\":\n                    cnt += 1\n        if cnt == K:\n            ans += 1\n\nprint(ans)", "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfrom itertools import product\ndef main():\n    h, w, k = list(map(int, input().split()))\n    gg = []\n    for _ in range(h):\n        row = [1 if c == '#' else 0 for c in list(input())]\n        gg.extend(row)\n    row_pro = tuple(product((0, 1), repeat=h))\n    col_pro = tuple(product((0, 1), repeat=w))\n    pat = tuple(product(row_pro, col_pro))\n    r = 0\n    for pate in pat:\n        t0 = 0\n        for i0, p0 in enumerate(pate[0]):\n            for i1, p1 in enumerate(pate[1]):\n                if p0 and p1:\n                    t0 += gg[i0*w + i1]\n        r += t0 == k\n    print(r)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "H, W, K = map(int, input().split())\nc = [[\".\" for _ in range(W)] for _ in range(H)]\n\nfor h in range(H):\n    c[h] = input()\n\nans = 0\nfor i in range(2 ** H):\n    for k in range(2 ** W):\n        count = 0\n    ## \u3069\u306e\u6841\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b2\u9032\u6570\u306e\u5404\u6841\u3092\u30eb\u30fc\u30d7\n        for h in range(H):\n            for w in range(W):\n        ## i >> j\u3067\u78ba\u8a8d\u3057\u305f\u3044\u6841\u3092\u4e00\u756a\u53f3\u307e\u3067\u305a\u3089\u3057\u30661\u3068\u8ad6\u7406\u7a4d\u3092\u3068\u3063\u3066\u300c\u9078\u629e\u300d\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u78ba\u8a8d\n                if (i >> h) & 1 and (k >> w) & 1:\n                    if c[h][w] == \"#\":\n                        count += 1\n\n        if count == K:\n            ans += 1\nprint(ans)", "import copy\n\ndef count(w,h):\n    Dtemp = copy.deepcopy(Data)\n\n    for i in range(W):\n        if ((1 << i) & w) != 0:\n            for hh in range(H):\n                Dtemp[hh][i] = 'R'\n    for i in range(H):\n        if ((1 << i) & h) != 0:\n            for ww in range(W):\n                Dtemp[i][ww] = 'R'\n    c = 0\n    for hh in range(H):\n        for ww in range(W):\n            if Dtemp[hh][ww] == '#':\n                c += 1\n    return c\n\nH,W,K = map(int,input().split())\nData = []\nfor _ in range(H):\n    s = input()\n    l = []\n    for c in s:\n        l.append(c)\n    Data.append(l)\n\nans = 0\nfor w in range(0,2**W):\n    for h in range(0,2**H):\n        if count(w,h) == K:\n            ans += 1\nprint(ans)", "l = input().split(' ')\nH = int(l[0])\nW = int(l[1])\nK = int(l[2])\nc = []\nretval = 0\nfor i in range(H):\n  c.append(input())\n#print(5&4)\nfor maski in range((1<<H)):\n  for maskj in range((1<<W)):\n    count = 0\n    #print('maski:'+str(maski))\n    #print('maskj:'+str(maskj))\n    for i in range(H):\n      for j in range(W):\n        #print('i: '+str(i)+', j: '+str(j))\n        #print('(maski>>i)&1: '+str((maski>>i)&1)+', (maskj>>j)&1: '+str((maskj>>j)&1))\n        #if((maski>>i)&1==1) and ((maskj>>j)&1==1):\n          #print('i:'+str(i)+',j:'+str(j))\n        if((maski>>i)&1==1) and ((maskj>>j)&1==1) and (c[i][j]=='#'):\n          count+=1\n    #print('##################')\n    if(count==K):\n      retval+=1\n      \nprint(retval)", "H, W, K = list(map(int, input().split()))\nc = [input() for _ in range(H)]\n\nans = 0\nfor R in range(2**H):\n    for C in range(2**W):\n        n = 0\n        for y in range(H):\n            if R>>y&1:\n                for x in range(W):\n                    if C>>x&1:\n                        if c[y][x]==\"#\":\n                            n += 1\n        if n==K:\n          ans += 1\nprint(ans)\n", "from collections import Counter\nimport math\nimport statistics\nimport itertools\nH,W,K=list(map(int,input().split()))\n#b=int(input())\n# c=[]\n# for i in a:\n#     c.append(int(i))\n# A,B,C= map(int,input().split())\n# f = list(map(int,input().split()))\n#g = [list(map(lambda x: '{}'.format(x), list(input()))) for _ in range(a)]\n# h = []\n# for i in range(a):\n#     h.append(list(map(int,input().split())))\ntwo = [list(input()) for _ in range(H)]#nizigen\n\nans=0\nfor i in range(2**H):\n    for j in range(2**W):\n        count=0\n        for h in range(H):\n            for w in range(W):\n                if (i>>h)&1 ==1 and (j>>w)&1==1:\n                    if two[h][w]==\"#\":\n                        count+=1\n        \n        if count==K:\n            ans+=1\n\nprint(ans)\n\n", "import numpy as np\n\nH, W, K = list(map(int, input().split()))\ncmap = []\nfor i in range(H):\n    tmp = input()\n    strlist = [s for s in tmp]\n    cmap.append(strlist)\n\ncmap = np.array(cmap)\n\n\ndef count_char(cmap, rmask, cmask, num_digits_r, num_digits_c, char=\"#\"):\n    def to_bin_str(num, num_digits):\n        return str(bin(num))[2:].zfill(num_digits)\n\n    def to_index(mask, num_digits):\n        str = to_bin_str(mask, num_digits)\n        ids = [i for i, s in enumerate(str) if s == \"1\"]\n        return ids\n\n    rids = to_index(rmask, num_digits_r)\n    cids = to_index(cmask, num_digits_c)\n    cmap2 = cmap.copy()\n    cmap2[rids, :] = \"r\"\n    cmap2[:, cids] = \"r\"\n    count = len(cmap2[cmap2 == char])\n\n    # if count == K:\n    #     print(cmap2)\n\n    return count\n\n\ncount = 0\nfor rmask in range(2**H):\n    for cmask in range(2**W):\n        num_b = count_char(cmap, rmask, cmask, H, W)\n        if num_b == K:\n            count += 1\n\nprint(count)\n", "def bitmake(digit):#bit\u6587\u5b57\u5217\u751f\u6210\uff08\u53d6\u308a\u6271\u3044\u6ce8\u610f\uff09\n    bit_list =list()\n\n    for i in range(2 ** digit):\n        bit = []\n        for j in range(digit):  # \u3053\u306e\u30eb\u30fc\u30d7\u304c\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\n            if ((i >> j) & 1):  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n                bit.append(j)\n        bit_list.append(bit)\n    return bit_list\nh,w,k = list(map(int,input().split()))\ngrid = [\"\"]*h\nfor i in range(h):\n    grid[i] = list(map(str,input()))\n# print(grid)\n\nbit_list = bitmake(h+w)\n# print(bit_list)\nblackh = [0]*h#\u6a2a\nblackw = [0]*w#\u7e26\nblacksum = 0\nfor i in range(h):\n    for j in range(w):\n        if(grid[i][j] == \"#\"):\n            blackh[i]+=1\n            blackw[j]+=1\n            grid[i][j] = 1\n            blacksum += 1\n        else:\n            grid[i][j] = 0\n# print(blackh,blackw)\nans = 0\nfor i in range(2**(h+w)):\n    bit = bit_list[i]#h:0~(h-1),w:h~(h+w)-1\n    remove = 0\n    hight = []\n    width = []\n    for j in range(len(bit)):\n        l = bit[j]\n        if(l <= h-1):\n            remove += blackh[l]\n            hight.append(l)\n        else:\n            ind = l - h\n            remove += blackw[ind]\n            width.append(ind)\n    # print(hight,width)\n    rid = 0\n    for j in range(len(hight)):\n        for l in range(len(width)):\n            if(grid[hight[j]][width[l]] == 1):\n                rid += 1\n    \n    if((blacksum - remove) + rid == k):\n        # print(blacksum,remove,rid,\"___\",blacksum-remove+rid)  \n        ans += 1\nprint(ans)\n\n# 2 3 2\n# ..#\n# ###\n\n\n\n", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nh, w, k = [int(i) for i in input().split()]\nC = [input() for j in range(h)] # n\u306f\u884c\u6570\n\ntmp = 0\nres = 0\n\nfor r in range(h):\n    for c in range(w):\n        if C[r][c] == \"#\":\n            tmp += 1\n\nfor i in range(2 ** h):\n    for j in range(2 ** w):\n        rs = f\"{i:0{h}b}\"\n        cs = f\"{j:0{w}b}\"\n        tmp_2 = 0\n        for r in range(h):\n            for c in range(w):\n                if (rs[r] == \"1\" or cs[c] == \"1\") and C[r][c] == \"#\":\n                    tmp_2 += 1\n        if tmp - tmp_2 == k:\n            res += 1\n\nprint(res)\n", "def trans(l):\n    return [list(x) for x in list(zip(*l))]\n\nfrom itertools import product\nimport copy\n\nh, w, k = map(int, input().split())\nc = []\nfor _ in range(h):\n    c.append([c for c in input()])\n\nA = [i for i in product([1,0], repeat=h)]\nB = [i for i in product([1,0], repeat=w)]\n\nans = 0\nfor a in A:\n    temp1 = copy.copy(c)\n    for i, x in enumerate(a):\n        if x == 1:\n            temp1[i] = [\".\"] * w \n    for b in B:\n        temp2 = trans(temp1)\n        for i, x in enumerate(b):\n            if x == 1:\n                temp2[i] = [\".\"] * h\n        \n        cnt = 0\n        for t in temp2:\n            cnt += t.count(\"#\")\n        if cnt == k:\n            ans += 1\n\nprint(ans)", "h, w, k = [int(i) for i in input().split()]\nc = [input() for i in range(h)]\n\ncnt = 0\nfor i in range(1 << h):\n    bit_h = [0] * h\n    for j in range(h): bit_h[j] = int(i & (1 << j) > 0)\n    for j in range(1 << w):\n        bit_w = [0] * w\n        for l in range(w):\n            bit_w[l] = int(j & (1 << l) > 0)\n        cnt_t = 0\n        for m in range(h):\n            for n in range(w):\n                if bit_h[m] == 0 and bit_w[n] == 0 and c[m][n] == \"#\": cnt_t += 1\n        if cnt_t == k:\n            cnt += 1\n            #print(cnt_t)\n\nprint(cnt)", "h, w, k = map(int, input().split())\nc = []\nblack = 0\nfor _ in range(h):\n    tmp = input()\n    black += tmp.count('#')\n    c.append(tmp)\n\ncnt = 0\nfor i in range(2**h):\n    for j in range(2**w):\n        bl = black\n        for ii in range(h):\n            for jj in range(w):\n                if (i & (1 << ii)) or (j & (1 << jj)):\n                    if c[ii][jj] == '#':\n                        bl -= 1\n        if bl == k:\n            cnt += 1\nprint(cnt)", "h, w, k, = map(int, input().split())\n\nc = [0] * h\nfor i in range(h):\n    c[i] = input()\n    \ny = 0\n    \nfor i in range(2 ** (h + w)):\n    x = 0\n    a = [0] * (h + w)\n    for j in range(h + w):\n        if (i // (2 ** j)) % 2 == 1:\n            a[j] = 1\n    \n    for j in range(h):\n        if a[j] == 0: \n            for l in range(w):\n                if a[h+l] == 0:\n                    if c[j][l] == '#':\n                        x += 1\n    \n    if x == k:\n        y += 1\n        \nprint(y)", "from itertools import product\n\nh, w, k = list(map(int, input().split()))\ntable = [list(input()) for _ in range(h)]\n\nans = 0\n\nfor row_bit in product(list(range(2)), repeat=h):\n    for col_bit in product(list(range(2)), repeat=w):\n        tmp = 0\n        for row in range(h):\n            for col in range(w):\n                if table[row][col] == \"#\" and (row_bit[row] and col_bit[col]):\n                    tmp += 1\n        if tmp == k:\n            ans += 1\n\nprint(ans)\n", "\nH,W,K = list(map(int,input().split()))\n\nG = []\nfor _ in range(H):\n    G.append(input())\n\nans = 0\n\nblack=0\n\nfor mask_h in range(1 << H):\n    for mask_w in range(1 << W):\n        black=0\n        for i in range(H):\n            for j in range(W):\n                if((mask_h >> i) & 1 == 0 ) and ((mask_w >> j) & 1 == 0 ) and G[i][j] == '#':\n                    black+=1\n        if black == K:\n            ans += 1\n\nprint(ans)\n", "H, W, K = map(int, input().split())\nlis = []\nans = 0\nfor i in range(H):\n  lis.append(list(input()))\nfor i in range(1<<H):\n  for j in range(1<<W):\n    cnt = 0\n    for p in range(H):\n      for q in range(W):\n        if (i>>p) & 1:\n          continue\n        if (j>>q) & 1:\n          continue\n        if lis[p][q] == \"#\":\n          cnt += 1\n    if cnt == K:\n      ans += 1\nprint(ans)", "from itertools import product\n\nh, w, k = map(int, input().split())\nCC = [input() for _ in range(h)]\n\ntotal = 0\nfor x in product((0, 1), repeat=w):\n  for y in product((0, 1), repeat=h):\n    count = 0\n    for i in range(h):\n      if y[i]:\n        continue\n      for j in range(w):\n        if x[j]:\n          continue\n        if CC[i][j] == '#':\n          count += 1\n    if count == k:\n      total += 1\nprint(total)", "H, W, K = [int(v) for v in input().split()]\nG = []\nfor _ in range(H):\n    G.append(input())\n\nans = 0\n\nfor mask_r in range(1 << H):\n    for mask_c in range(1 << W):\n        black = 0\n        for i in range(H):\n            for j in range(W):\n                if ((mask_r >> i) & 1 == 0) and ((mask_c >> j) & 1 == 0) and G[i][j] == \"#\":\n                    black += 1\n        if black == K:\n            ans += 1\n\nprint(ans)\n", "from itertools import product\nimport numpy as np\n\nH, W, K = list(map(int, input().split()))\nC = []\nfor _ in range(H):\n    tmp = [m for m in map(str, input())]\n    C.append(tmp)\n\nC = np.array(C)\n\nans = 0\nfor h in product(list(range(2)), repeat=H):\n    for w in product(list(range(2)), repeat=W):\n\n        cnt = 0\n        for ih in range(H):\n            for iw in range(W):\n                if C[ih, iw] == '#' and (h[ih] and w[iw]):\n                    cnt += 1\n\n        if cnt == K:\n            ans += 1\n\nprint(ans)\n", "import sys\nimport math\nimport itertools\nimport collections\nfrom collections import deque\nfrom collections import defaultdict\nimport copy\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\nINF = float('inf')\ninput = lambda: sys.stdin.readline().strip()\n\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef main():\n    H, W, K = NMI()\n    \n    C = [list(input()) for _ in range(H)]\n    \n    ans = 0\n    \n    \n    for hi in range(2**H):\n        for wi in range(2**W):\n            CC = copy.deepcopy(C)\n            \n            for hj in range(H):\n                if (hi >> hj) & 1:\n                    for x in range(W):\n                        CC[hj][x] = \"R\"\n\n\n\n            \n            for wj in range(W):\n                if (wi >> wj) & 1:\n                    for x in range(H):\n                        CC[x][wj] = \"R\"\n\n\n            \n            cnt = 0\n            for h in range(H):\n                cnt += CC[h].count(\"#\")\n            \n            if cnt == K:\n                ans += 1\n    \n    \n    print(ans)\n\n\n                        \n                    \n\ndef __starting_point():\n    main()\n__starting_point()", "h, w, k = map(int, input().split())\nboard = [[-1 for j in range(w)] for i in range(h)]\nfor i in range(h):\n    color = input()\n    for j in range(w):\n        if color[j] == \"#\":\n            board[i][j] = 1 #\u9ed2=1\n        else:\n            board[i][j] = 0 #\u767d=0\nans = 0\n\nfor row_choose in range(1<<h):\n    for col_choose in range(1<<w):\n        count = 0\n        for i in range(h):\n            for j in range(w):\n                if not (row_choose & (1<<i)) and not (col_choose & (1<<j)) and board[i][j]:\n                    count += 1\n        if count == k:\n            ans += 1\n\nprint(ans)", "h,w,k = list(map(int, input().split()))\n\ns = [list(map(str,list(input()))) for i in range(h)]\nans =0\nfor ii in range(1<<h):\n    for jj in range(1<<w):\n        cnt = 0\n        for i in range(h):\n            for j in range(w):\n                if (ii >> i & 1):\n                    continue\n                if (jj >> j & 1):\n                    continue\n                if (s[i][j] == '#'):\n                    cnt += 1\n\n        if cnt == k:\n            ans += 1\nprint(ans)\n", "h,w,k=map(int,input().split())\nboard=[list(input()) for _ in range(h)]\nans=0\nfor paint_h in range(2**h):\n  for paint_w in range(2**w):\n    cnt=0\n    for i in range(h):\n      for j in range(w):\n        if (paint_h>>i)&1==0 and (paint_w>>j)&1==0:\n          if board[i][j]=='#':\n            cnt+=1\n    if cnt==k:\n      ans+=1\nprint(ans)", "H,W,K=map(int,input().split())\nC=[]\nfor _ in range(H):\n    C.append(list(input()))\nans=0\nfor bith in range(1<<H):\n    for bitw in range(1<<W):\n        black=0\n        for h in range(H):\n            for w in range(W):\n                if C[h][w]=='#' and bith&(1<<h) and bitw&(1<<w):\n                    black+=1\n        if black==K:\n            ans+=1\nprint(ans)", "import itertools\nimport copy\n\nH,W,K = list(map(int,input().split()))\nc = [list(str(input())) for i in range(H)]\nans = 0\nH_bit = list(itertools.product([0,1], repeat=H))\nW_bit = list(itertools.product([0,1], repeat=W))\n\ndef mark(h,w,board):\n    for i,n in enumerate(h):\n        if n==1:\n            board[i] = [\"R\"]*W\n    for j,n in enumerate(w):\n        if n==1:\n            for k in range(H):\n                board[k][j] = 'R'\n    return board\n\nfor i in H_bit:\n    for j in W_bit:\n        check = copy.deepcopy(c)\n        li = mark(i,j,check)\n        if sum(a.count(\"#\") for a in li)==K:\n            ans += 1\nprint(ans)\n", "h, w, k = map(int, input().split())\nfig = [list(input()) for  _ in range(h)]\n\ncount = 0\nimport itertools\nfor r_paint in itertools.product([0,1], repeat=h): #0:\u305d\u306e\u884c\u3092\u5857\u308a\u3064\u3076\u3055\u306a\u3044 1:\u305d\u306e\u884c\u3092\u5857\u308a\u3064\u3076\u3059\n    for c_paint in itertools.product([0,1], repeat=w): # column\n        kuro = 0 #\u9ed2\u5857\u308a\u306e\u6570\u3092\u6570\u3048\u308b\n        for row in range(h):\n            for col in range(w):\n                if (fig[row][col] == \"#\") and (r_paint[row] == 0) and (c_paint[col] == 0): #\u9ed2\u3044\u30de\u30b9\u304b\u3064\u5857\u308a\u3064\u3076\u3055\u308c\u3066\u3044\u306a\u3044\n                    kuro += 1\n        if kuro == k:\n            count += 1\n\nprint(count)", "\nh,w,K = map(int, input().split())\nmaze = []\ncnt = 0\nans = 0\nfor i in range(h):\n    s = input()\n    cnt += s.count(\"#\")\n    li = [c for c in s]\n    maze.append(li)\n\nfor i in range(2**h):\n    c = 0\n    height = []\n    for j in range(h):\n        if (i>>j)&1:\n            height.append(j)\n    for y in height:\n            for x in range(w):\n                if maze[y][x]==\"#\":\n                    c += 1\n    \n    for k in range(2**w):\n        d = 0\n        width = []\n        for l in range(w):\n            if (k>>l)&1:\n                width.append(l)\n        for y in range(h):\n            for x in width:\n                if maze[y][x]==\"#\":\n                    d += 1\n        total = c+d\n        for y in height:\n            for x in width:\n                if maze[y][x]==\"#\":\n                    total -= 1\n        if cnt-total==K:\n            ans+=1\nprint(ans)", "H, W, K = map(int, input().split())\n\nc = []\nfor i in range(H):\n    c.append(list(input()))\n\nans = 0\n\nfor i in range(1<<H):\n    for j in range(1<<W):\n        v = 0\n        for k in range(H):\n            for l in range(W):\n                if c[k][l] == '#' and i >> k & 1 == 0 and j >> l & 1 == 0:\n                    v += 1\n        if v == K:\n            ans += 1\n\nprint(ans)", "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfrom itertools import product\ndef main():\n    h, w, k = list(map(int, input().split()))\n    gg = []\n    for _ in range(h):\n        row = [1 if c == '#' else 0 for c in list(input())]\n        gg.extend(row)\n    row_pro = tuple(product((0, 1), repeat=h))\n    col_pro = tuple(product((0, 1), repeat=w))\n    rows = []\n    for re in row_pro:\n        rows.append([i for i, b in enumerate(re) if b])\n    cols = []\n    for ce in col_pro:\n        cols.append([i for i, b in enumerate(ce) if b])\n    pat = tuple(product(rows, cols))\n    r = 0\n    for pate in pat:\n        t0 = 0\n        for p0 in pate[0]:\n            for p1 in pate[1]:\n                t0 += gg[p0*w + p1]\n        if t0 == k:\n            r += 1\n    print(r)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "h, w, k = map(int, input().split())\nc = [input() for x in range(h)]\n\nans = 0\n\nfor i in range(2**h):\n    for j in range(2**w):\n        count = 0\n        for m in range(h):\n            for n in range(w):\n                if (((i >> m) & 1) == 0 and ((j >> n) & 1) == 0 and c[m][n] == \"#\"):\n                    count += 1\n        if count == k:\n            ans += 1\nprint(ans)", "h, w, k = list(map(int, input().split()))\nc = [list(input()) for _ in range(h)]\nans = 0\nfor i in range(1<<h):\n    for j in range(1<<w):\n        cnt = sum(c[k][l] == '#' for k in range(h) for l in range(w) if (i>>k & 1) and (j>>l & 1))\n        if cnt == k:\n            ans += 1\nprint(ans)\n", "H,W,K = map(int,input().split())\nc = [tuple(input()) for i in range(H)]\nans = 0\nfor i in range(2**H):\n    s = i\n    b = [list(x) for x in c]\n    for j in range(H):\n        if s >= (2**(H-j-1)):\n            s -= 2**(H-j-1)\n            b[j] = [\".\"]*W\n    b = list(zip(*b))\n    for k in range(2**W):\n        bt = [list(x) for x in b]\n        t = k\n        for l in range(W):\n            if t >= (2**(W-l-1)):\n                t -= 2**(W-l-1)\n                bt[l] = [\".\"]*H\n        u = sum(bt[m].count(\"#\") for m in range(W))\n        if u == K:\n            ans += 1\nprint(ans)", "h, w, k = list(map(int, input().split()))\nboard = [list(input()) for _ in range(h)]\nans = 0\n\nfor paint_h in range(2**h):  #\u3059\u3079\u3066\u306e\u884c\u306e\u5857\u308a\u3064\u3076\u3057\u65b9\u30922\u9032\u6570\u3067\u5217\u6319\u3059\u308b\n for paint_w in range(2**w):  #\u3059\u3079\u3066\u306e\u5217\u306e\u5857\u308a\u3064\u3076\u3057\u65b9\u30922\u9032\u6570\u3067\u5217\u6319\u3059\u308b\n   cnt = 0\n   for i in range(h):  #\u3059\u3079\u3066\u306ei\u884c\u76eej\u5217\u76ee\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u307f\u308b\n     for j in range(w):\n       if (paint_h >> i) & 1 == 0 and (paint_w >> j) & 1 == 0: #\u5404\u884c\u306ei\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u3068\u5404\u5217\u306ej\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u3068\u3082\u306b0\u3067\u3042\u308c\u3070\u305d\u306e\u30de\u30b9\u306f\u5857\u308a\u3064\u3076\u3055\u308c\u306a\u3044\n         if board[i][j] == '#':  #\u5857\u308a\u3064\u3076\u3055\u308c\u306a\u3044\u30de\u30b9\u304c\u9ed2\u30de\u30b9\u3067\u3042\u308c\u3070\u500b\u6570\u3092+1\u3059\u308b\n           cnt += 1\n   if cnt == k:  #\u5857\u308a\u3064\u3076\u3055\u308c\u306a\u3044\u9ed2\u30de\u30b9\u306e\u500b\u6570\u304cK\u306b\u7b49\u3057\u3051\u308c\u3070\u7b54\u3048\u3092+1\u3059\u308b\n     ans += 1\nprint(ans)\n", "H,W,K = list(map(int, input().split()))\ntable = [input() for _ in range(H)]\nans = 0\n\nfor mask_h in range(2 ** H):\n  for mask_w in range(2 ** W):\n    black = 0\n    for i in range(H):\n      for j in range(W):\n        if ((mask_h >> i) & 1 == 0) and ((mask_w >> j) & 1 == 0) and table[i][j] == '#': # \u5857\u308a\u6f70\u3057\u884c\u3001\u5217\u3067\u306f\u306a\u304f\u3066\u3001\u8272\u304c\u9ed2'#'\u306e\u5834\u5408\n          black += 1\n\n    if black == K:\n      ans += 1\nprint(str(ans))"]