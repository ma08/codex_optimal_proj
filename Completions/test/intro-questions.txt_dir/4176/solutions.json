["import math\na,b = list(map(int,input().split()))\n\ndef lcm(x,y):\n    return (x * y) // math.gcd(x, y)\n\nprint((lcm(a,b)))\n\n", "import math\nnum1, num2 = map(int, input().split())\n\nprint(num1 * num2 // math.gcd(num1, num2))", "from math import gcd\n\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n\na, b = list(map(int, input().split()))\nprint((lcm(a, b)))\n", "import math\na, b = list(map(int, input().split()))\n\nprint((int(a*b/math.gcd(a, b))))\n", "import math\nA,B = map(int,input().split())\n# A*B = l*g ,l\uff1a\u6700\u5c0f\u516c\u500d\u6570\uff0cg:\u6700\u5927\u516c\u7d04\u6570\n\ng = math.gcd(A,B)\nl = A*B//g\nprint(l)", "a, b = map(int, input().split())\n\ndef get_GCD(x, y):\n    if x > y:\n        x, y = y, x\n    y_ = y\n    while True:\n        if y % x == 0:\n            break\n        else:\n            y += y_\n    return y\n\nprint(get_GCD(a, b))", "import math\na,b=map(int,input().split())\nc=math.gcd(a,b)\nprint(a*b//c)", "from fractions import gcd\na,b=map(int,input().split())\nprint(a*b//gcd(a,b))", "A,B = map(int,input().split())\ndef gcd(x,y):\n    if(y == 0):\n        return x\n    if(x >= y):\n        return gcd(y,x%y)\n    if(x < y):\n        return gcd(x,y%x)\ng = gcd(A,B)\nprint((A*B)//g)", "import math\nA, B = map(int, input().split(' '))\nprint(A * B // math.gcd(A, B))", "import math\n\na, b = map(int, input().split())\n\nc = math.gcd(a, b)\nans = a*b//c\nprint(ans)", "#!/usr/bin/env python3\ndef main():\n    from math import gcd\n\n    A, B = list(map(int, input().split()))\n\n    print((A * B // gcd(A, B)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport collections\nii = lambda : int(input())\nmi = lambda : map(int,input().split())\nli = lambda : list(map(int,input().split()))\n\na,b = mi()\nprint((a*b)//math.gcd(a,b))", "import math\na,b = map(int,input().split())\nprint(int(a*b / math.gcd(a,b)))", "import math\n[A, B] = [int(i) for i in input().split()]\nans = A*B/math.gcd(A, B)\nprint(int(ans))", "import math\na,b = map(int,input().split())\ndef lcm(x,y):\n    return (x*y)// math.gcd(x,y)\nprint(lcm(a,b))", "import math\nA,B=map(int,input().split())\nprint(A*B//math.gcd(A,B))", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain\n\n\ndef gcd(a, b):\n    \"\"\"\u6700\u5927\u516c\u7d04\u6570\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"\u6700\u5c0f\u516c\u500d\u6570\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef solve(A: int, B: int):\n    answer = lcm(A, B)\n    return answer\n\n\ndef main():\n    A, B = list(map(int, input().split()))\n    answer = solve(A, B)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\na, b = [int(i) for i in input().split()]\nprint(int(a * b / gcd(a, b)))", "import math\n\nA,B = map(int, input().split())\n\nprint(A*B//math.gcd(A,B))", "import math\na,b = list(map(int, input().split()))\nprint((a*b//math.gcd(a,b)))\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    A, B = MI()\n    print(A*B // math.gcd(A, B))\ndef __starting_point():\n    main()\n__starting_point()", "import math\ndef L():\n    return list(map(int, input().split()))\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n[a,b]=L()\n\nprint(lcm(a, b))", "import math\na, b = map(int, input().split())\n\nlcm = a * b //math.gcd(a, b)\nprint(lcm)", "import math\n\n\nA, B = map(int, input().split())\ng = math.gcd(A, B)\nprint(int(A * B / g))\nreturn", "import math\n\na, b=(int(x) for x in input().split())\n\nprint(int((a*b)/math.gcd(a,b)))", "import math as mp\na,b=map(int,input().split())\nprint(a*b//mp.gcd(a,b))", "a,b=map(int,input().split())\nfor i in range(1,10**5):\n    c = a*i\n    if c%b==0:\n        print(c)\n        return", "import math\n\na, b = map(int, input().split())\n\ndiv = math.gcd(a, b)\nprint(div * a // div * b // div)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  8 20:45:37 2020\n\n@author: liang\n\"\"\"\n\ndef gcc(a,b):\n    if b == 0:\n        return a\n    return gcc(b, a%b)\n\nA, B = list(map(int, input().split()))\nif A < B:\n    A ,B = B, A\nprint((A*B//gcc(A,B)))\n", "import math\na,b = map(int,input().split())\nprint((a*b)//(math.gcd(a,b)))", "from math import gcd\n\nA, B = list(map(int,input().split()))\n\nprint(A * B // gcd(A, B))", "import math\n\n\na, b = map(int,input().split())\nprint(a*b//math.gcd(a,b))", "from math import gcd\na, b = map(int, input().split())\nprint(a*b//gcd(a, b))", "A, B = list(map(int, input().split()))\n\ni = 1\nwhile True:\n    n = A * i\n    if n % B == 0:\n        print(n)\n        break\n    i += 1\n\n", "def gcd(a, b):\n  while b:\n    a, b = b, a%b\n  return a\n\na, b = map(int, input().split())\n\ntmp=gcd(a,b)\nprint(int(a*b/tmp))", "import math\na,b=map(int,input().split())\nprint(int(a/math.gcd(a,b)*b))", "a,b = map(int,input().split())\nfrom math import gcd\nprint(int(a*b/gcd(a,b)))", "A,B=map(int,input().split())\nC=A\nD=B\nfor i in range(B):\n    K=C%D\n    if K==0:\n        break\n    else:\n        C=D\n        D=K\nans=(A*B)//D\nprint(ans)", "import math\na,b=map(int,input().split())\nans=a*b//(math.gcd(a,b))\nprint(ans)", "import math\n\nA, B = map(int, input().split())\n\nans = A*B // math.gcd(A, B)\nprint(ans)", "import math\na,b = map(int,input().split())\nprint(a*b//math.gcd(a,b))", "import math\nA, B = map(int, input().split(' '))\nprint((A * B) // math.gcd(A, B))", "import math\na,b = map(int,input().split())\ndef lcm(x,y):\n    return (x*y)// math.gcd(x,y)\nprint(lcm(a,b))", "A, B = map(int, input().split())\n\ndef gcd(x, y):\n  if x % y == 0:\n    return y\n  else:\n    return gcd(y, x % y)\n\nGCD = gcd(A, B)\na = A // GCD\nb = B // GCD\nprint(a * b * GCD)", "def gcd(m, n):\n    if m < n:\n        m, n = n, m\n\n    while True:\n        r = m % n\n        if r == 0:\n            return n\n        else:\n            m, n = n, r\n\ndef lcm(m, n):\n    return m*n // gcd(m, n)\n\na, b = list(map(int, input().split()))\n\nprint((lcm(a, b)))\n", "import math\na, b = map(int, input().split())\nprint(int(a*b/math.gcd(a, b)))", "import math\nA, B = map(int, input().split())\nC = A * B // math.gcd(A, B)\nprint(C)", "import math\na, b = list(map(int, input().split()))\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nprint((lcm(a, b)))\n", "import math\nA, B = map(int, input().split())\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nprint(lcm(A, B))", "import math\na,b = map(int,input().split())\nc = a*b//math.gcd(a,b)\nprint(c)", "import math\na,b=map(int,input().split())\ndef lcm(x,y):\n    return (x*y)//math.gcd(x,y)\nprint(lcm(a,b))", "import math \n\na,b = list(map(int,input().split()))\n\nx = math.gcd(a,b)\ny = a * b\nans = y // x\nprint(ans)\n", "import math\nA, B = map(int, input().split(' '))\nprint((A * B) // math.gcd(A, B))", "def gcd(a, b):\n  if b == 0:\n     return a\n  else:\n     return gcd(b,a%b)\na,b = map(int, input().split())\nprint(a*b//gcd(a,b))", "A, B = map(int, input().split())\nif A > B:\n  a = A\n  b = B\nelse:\n  a = B\n  b = A\nr = 1\nwhile r > 0:\n  r = a % b\n  a = b\n  b = r\nprint(A * B // a)", "import math\na,b = map(int,input().split())\nprint((a*b)//math.gcd(a,b))", "import math\na, b = map(int, input().split())\nprint((a * b) // math.gcd(a, b))", "from math import gcd\na,b = map(int,input().split())\nprint(a*b//gcd(a,b))", "import math\n#h,w=map(int,input().split())\n#S=[list(map(int,input().split())) for _ in range(h)]\na,b=list(map(int,input().split()))\nprint(((a*b)//math.gcd(a,b)))\n", "import math\na,b = map(int,input().split())\nprint(int(a * b / math.gcd(a,b)))", "import math\n\na,b=map(int,input().split())\n\ng=math.gcd(a,b)\nans=a*b//g\nprint(ans)", "import math\n\na, b = map(int, input().split())\nprint(a*b // math.gcd(a, b))", "import math\na,b=map(int,input().split())\nprint(a*b//math.gcd(a,b))", "import fractions\nA,B=map(int, input().split())\n\nprint(int(A*B/fractions.gcd(A,B)))", "from math import gcd\n\ndef lcm(a, b):\n  return a * b // gcd(a, b)\nA, B = map(int, input().split())\n\nprint(lcm(A, B))", "import math\nA, B = map(int, input().split(' '))\nprint(A * B // math.gcd(A, B))", "import math\n\nA, B = map(int, input().split())\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nprint(lcm(A, B))", "a, b = map( int, input().split() )\n\nimport math\nprint( a * b // math.gcd( a, b ) )", "import math\n\na, b = map(int, input().split())\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nprint(lcm(a, b))", "import math\n\nA,B=list(map(int,input().split()))\nprint((A*B//math.gcd(A,B)))\n", "import math\na,b=map(int,input().split())\nprint(a*b//math.gcd(a,b))", "import math\n\nA,B = map(int,input().split())\n\nprint(A*B//math.gcd(A,B))", "import math\na,b = map(int,input().split())\ngcd = math.gcd(a,b)\nlcm = (a*b) // gcd\nprint(lcm)", "from math import gcd\na, b = map(int,input().split())\n \nprint(int(a * b / gcd(a, b)))", "import math\na,b = map(int,input().split())\nprint(a*b//math.gcd(a,b))", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  8 20:45:37 2020\n\n@author: liang\n\"\"\"\n\"\"\"\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\"\"\"\nfrom math import gcd\n\nA, B = map(int, input().split())\nif A < B:\n    A ,B = B, A\nprint(A*B//gcd(A,B))", "A,B = map(int,input().split())\n\nimport numpy as np\nprint(np.lcm(A, B))", "a,b = [int(x) for x in input().split()]\n\ndef gcd(x,y):\n  if y == 0:\n    return x\n  return gcd(y,x%y)\n\nprint(a*b//gcd(a,b))", "import math\nA, B = [int(n) for n in input().split()]\n\nprint((int(A * B /math.gcd(A, B))))\n", "a,b=map(int,input().split())\ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n# This function computes LCM\ndef compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(compute_lcm(a, b))", "import math\n\na,b=map(int,input().split())\n\nprint(int(a*b/math.gcd(a,b)))", "import math\na,b = map(int, input().split())\nlcm = a // math.gcd(a,b) * b\nprint(lcm)", "def gcd(a,b):\n    if (a%b) ==0:\n        return b\n    else:\n        return gcd(b ,(a%b))\n\na,b = map(int,input().split())\ngcd = gcd(a,b)\nprint(int(a*b/gcd))", "import math\nA, B = map(int, input().split())\nprint(A * B // math.gcd(A, B))", "A,B=map(int,input().split())\nimport math\na=math.gcd(A,B)\nans=A*B//a\nprint(ans)", "a,b = map(int,input().split())\nx,y = a,b\nwhile y != 0:\n    x,y = y,x%y\n    \nprint(a*b//x)", "A, B = map(int, input().split())\n\nx = A * B\n\nif A < B:\n    A, B = B, A\n\np = A % B\nwhile p != 0:\n    A, B = B, p\n    p = A % B\n\nprint(round(x / B))", "a, b = map(int, input().split())\nc = a\nd = b\nfor i in range(a*b):\n  if c < d:\n    c = c + a\n  elif d < c:\n    d = d + b\n  else:\n    break\nprint(c)", "A,B = map(int,input().split())\ndef gcd(a,b):\n  while b!=0:\n    a,b = b,a%b\n  return a\ndef abc(a,b):\n  return(a*b//gcd(a,b))\nprint(abc(A,B))", "import math\nA, B = map(int, input().split(' '))\nprint((A * B) // math.gcd(A, B))", "import math\n\na,b=list(map(int,input().split()))\nprint((a*b//math.gcd(a,b)))\n", "import math\na,b =  map(int,input().split())\nlcm = a*b//math.gcd(a,b)\nprint(lcm)", "import math\na, b = map(int, input().split())\nprint((a*b) // math.gcd(a, b))", "import math\nA, B = map(int, input().split(' '))\nprint(A * B // (math.gcd(A, B)))", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\na, b = map(int, input().split())\nprint(lcm(a, b))", "import math\na,b=map(int,input().split())\ndef lcm(x,y): # Least common multiple\n    return (x*y)//math.gcd(x,y)\nprint(lcm(a,b))", "import numpy as np\n\nA, B = list(map(int, input().split()))\n\nprint((np.lcm(A, B)))\n", "import math\nA, B = map(int, input().split(' '))\nprint((A * B) // math.gcd(A, B))"]