["class Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n!=0:\n            n &= (n-1)\n            count += 1\n        return count", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return len([x for x in bin(n) if x =='1'])", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        strn = str(bin(n))\n        # print(strn)\n        return strn.count('1')", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        \n        onebits = 0\n        while n > 0:\n            if n & 1 == 1:\n                onebits += 1\n            n = n >> 1\n        return onebits", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        suma=0\n        while(n!=0):\n            suma+=1\n            print(n,(n-1))\n            n&=(n-1)\n        return suma"]