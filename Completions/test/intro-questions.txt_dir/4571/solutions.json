["n, m = list(map(int, input().split()))\n\nans = (1900 * m + 100 * (n - m)) * (2 ** m)\n\nprint(ans)\n", "N,M = map(int,input().split())\nprint(((N-M)*100+M*1900)*2**M)", "n, m = map(int, input().split())\nvalue = 1900*m+(n-m)*100\np = 2**m\nans = value*p\nprint(ans) ", "n, m = map(int, input().split())\nbase = m * 1900 + (n - m) * 100\ncase = pow(2, m)\nprint(base * case)", "def main():\n    N, M = list(map(int, input().split()))\n    ans = (1900*M + 100*(N - M))*pow(2, M)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport sys\nimport bisect\nreadline = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, readline().rstrip().split()))\n    cnt = 2 ** m\n    print(((n + m * 18) * cnt * 100))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = map(int, input().split())\nprint((100*(n-m)+1900*m)*(2**m))", "n,m=map(int,input().split())\nprint((100*n+1800*m)*(2**m))", "n, m = list(map(int, input().split()))\nprint(((1900*m + (n-m)*100)*2**m))\n", "N,M = map(int,input().split())\n\nprint((1900 * M + 100 * (N - M)) * (2 ** M))", "n,m = map(int,input().split())\n\nans = (1800*m + 100*n)*(2**m)\nprint(ans)", "n, m = list(map(int, input().split()))\nans = 0\nans += pow(2, m) * (1900 * m + 100 * (n - m))\nprint(ans)\n", "N,M=map(int,input().split())\nprint((1900*M + 100*(N-M))*2**M)", "n, m = map(int, input().split())\nprint((2 ** m) * (1900 * m + 100 * (n - m)))", "n, m = list(map(int, input().split()))\nprint(((2**m) * (1900*m + 100*(n-m))))\n\n# unit = 1900*m + 100*(n-m)\n# p = 1 / (2**m)\n# r = 1 - p\n# ans / p = 1*1 + 2*r + 3*(r**2) + 4*(r**3) + ...\n# ans * r / p = 1*r + 2*(r**2) + 3*(r**3) + 4*(r**4) + ...\n# (ans / p) - (ans * r / p) = 1 + r + r**2 + r**3 + r**4 + ...\n# (ans / p) * (1 - r) = 1 / (1 - r)\n# ans = 1 / p = 2**m\n# answer = ans * unit\n", "a,b=map(int, input().split())\nc = 2**b\nA = 100*(a-b)\nB = 1900*b\nprint((A+B)*c)", "def main():\n    n, m = list(map(int, input().split()))\n    wa = 0\n    kaisuu = 1900 * (2 ** m)\n    nokori = ((n - m) * 100) * (2 ** m)\n    ikai = (1900 * m) + (100 * (n-m))\n    print((ikai*(2**m)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m=map(int,input().split())\nx=1900*m+100*(n-m)\nans=x*2**m\nprint(ans)", "N,M=map(int,input().split())\nprint(((N-M)*100+1900*M)*(2**M))", "#E:=\u521d\u3081\u3066\u5168\u3066\u306e\u554f\u984c\u304cAC\u3057\u305f\u6642\u307e\u3067\u306e\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024\n#E=(1/2)^m+(1-(1/2)^m)(E+1)<=>E(1/2)^m=1<=>E=2^m\nn,m=map(int,input().split())\ne=2**m\nprint((1900*m+100*(n-m))*e)", "n,m = map(int,input().split())\n\nprint((1900*m+100*(n-m))*2**m)", "N, M = map(int, input().split())\n\nprint((1900*M+100*(N-M))*(2**M))", "N, M = map(int, input().split())\nprint((1900*M + 100*(N-M))*2**M)", "def main():\n    n, m = list(map(int, input().split()))\n    ikai = (1900 * m) + (100 * (n-m))\n    print(ikai*(2**m))\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n\n    ans = ((N - M) * 100 + 1900 * M) * pow(2, M)\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int, input().split())\n\nt = m * 1900 + (n - m) * 100\nans = t * (2 ** m)\n\nprint(ans)", "N, M = list(map(int, input().split()))\np_allac = (1/2)**M\nref = 2**M\nT = 100*(N-M) + 1900*M\nprint((T*ref))\n", "#78 C - HSI\nN,M = map(int,input().split())\n# \u5168\u3066 AC \u3068\u306a\u308b\u78ba\u7387\np = (1/2)**M\n\n# E = 1/p \u306b\u306a\u308b\nE = 1/p\nans = (1900*M + 100*(N-M))*E\nans = round(ans)\nprint(ans)", "N,M = map(int,input().split())\n\nprint(pow(2,M)*(M*1900+(N-M)*100))", "N,M = map(int,input().split())\nt = (N-M) * 100 + M * 1900\nprint(t * (2**M))", "N, M = map(int, input().split())\n\nt = (N - M) * 100 + M * 1900 \nprint(t * (2 ** M))", "#n=int(input())\nn, m=map(int,input().split())\n#l=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\nprint((1900*m+100*(n-m))*(2**m))", "N,M = list(map(int,input().split()))\nA = 1900*M+100*(N-M)\n\nans = A*pow(2,M)\n#print(A)\nprint(ans)\n", "n,m=map(int,input().split())\nprint((2**m)*((n-m)*100+1900*m))", "n,m = map(int,input().split())\n\nprint(int((1900*m+100*(n-m))//(1/2**m)))", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n,m = i_map()\n    t = 1900*m +100*(n-m)\n    p = 2**m\n    print((t*p))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int, input().split())\nvalue = 1900*m+(n-m)*100\np = 2**m\nans = value*p\nprint(ans) ", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\n#= int(input())\n#= input()\nN, M = list(map(int, input().split()))\n\nprint(((1900 * M + 100 *(N - M)) * 2 ** M))\n\n", "n,m = map(int,input().split())\nprint((1900*m+100*(n-m))*(2**m))", "from math import ceil\nn, m = list(map(int, input().split()))\n\nbase = (n-m)*100+1900*m\nallok = pow(2,m)\n\n\"\"\"\n1\u56de\u76ee\u306fbase\u79d2\u304b\u304b\u308b\n2\u56de\u76ee\u306e\u671f\u5f85\u5024\u306f\u30011\u56de\u76ee\u306e\u6642\u70b9\u304b\u3089\u8003\u3048\u308b\u3068base + (allok-1)*y\n\"\"\"\n\nprint((base*allok))\n\n", "N,M=list(map(int,input().split()))\n\nprint((M*1900*(2**M)+(N-M)*100*(2**M)))\n", "n, m = map(int, input().split())\nprint((1900*m + 100*(n-m)) * 2**m)", "n, m = map(int, input().split())\nprint((1900 * m + (n - m) * 100) * 2 ** m)", "n, m = map(int, input().split())\n\nans = (100*(n-m) + 1900*m)*(2)**m\n\nprint(ans)", "\nN, M = map(int, input().split())\nprint((1900*M+100*(N-M))*pow(2, M))", "n,m=[int(i) for i in input().split()]\nx=1-1/(2**m)\nt=1900*m+100*(n-m)\nprint(int(t/((2**m)*((1-x)**2))))", "n, m = map(int, input().split())\nprint((1900 * m + 100 * (n - m)) * (2 ** m))", "N, M = map(int, input().split())\nprint((100 * (N - M) + 1900 * M) * (2**M))", "n,m = map(int,input().split())\nprint((1900 * m + 100 * (n - m)) * 2 ** m)", "a = [int(s) for s in input().split()]\nprint(((a[0]-a[1])*100+a[1]*1900)*(2**a[1]))", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tC\n# CreatedDate:  2020-09-27 01:33:17 +0900\n# LastModified: 2020-10-09 16:05:14 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    para0 = (1900*M+100*(N-M))/(2**M)\n    para1 = 1-(1/(2**M))\n    para0_ = para0\n    para1_ = 1/((1-para1)**2)\n    print((int(para0_*para1_)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = [int(n) for n in input().split(\" \")]\n\nprint((2 ** M) * (1800 * M + 100 * N))", "# coding = SJIS\n\nn, m = map(int, input().split())\n\nprint((100 * (n - m) + 1900 * m) * (2 ** m))", "import sys\n\ninput = sys.stdin.readline\n\nn, m= map(int, input().split())\n\ny = (1900*m + 100*(n - m)) * 2**m\nprint(y)", "n,m = map(int,input().split())\n\n# \uff11\u56de\u304b\u304b\u308b\u6642\u9593\nsubmit = 1900 * m + 100 * (n-m)\n\nans = submit * 2**m\nprint(ans)", "N, M = map(int, input().split())\n \nwating_time = 1900 * M + 100 * (N-M)\nprint(2**M*wating_time)", "N,M=map(int,input().split())\nc=M*1800+N*100\nprint(c*(2**M))", "n,m = map(int, input().split())\n\nprint((1900*m+100*(n-m))*(2**m))", "n, m = list(map(int, input().split()))\nE = (2 ** m) * (1900 * m + 100 * (n - m))\nprint(E)\n", "n,m=map(int,input().split())\nprint((1900*m+100*(n-m))*2**(m))", "n, m = map(int, input().split())\nans = int((1900 * m + 100 * (n - m)) / ((1 / 2) ** m))\nprint(ans)", "n, m = list(map(int, input().split()))\nprint(((1900*m + 100*(n-m))*2**m))    \n", "n,m=map(int,input().split())\na=(n-m)*100+m*1900\n\nprint(a*(2**m))", "N,M=map(int,input().split())\nprint(1900*(M*2**M)+100*(N-M)*2**M)", "n, m = list(map(int, input().split()))\n\nexp = 2**m\n\nans = exp*(1900*m + 100*(n-m))\n\nprint(ans)", "N, M = map(int, input().split())\nprint((1900 * M + 100*(N-M)) * 2**M)", "from collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nimport math\n\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\n\nn,m = readInts()\n\nans = (1900*m+(n-m)*100)*2**m\n\nprint(ans)", "#78 C - HSI\nN,M = map(int,input().split())\n# \u5168\u3066 AC \u3068\u306a\u308b\u78ba\u7387\np = (1/2)**M\n\n# \u5168\u3066 AC \u3068\u306a\u308b\u3068\u304d\u306e\u671f\u5f85\u5024\n# k \u56de\u76ee\u307e\u3067\u306b\u300c\u6210\u529f\u3057\u306a\u3044\u300d\u78ba\u7387\u306e\u671f\u5f85\u5024\n# E = (1-p)**0 + (1-p)**1 + (1-p)**2+...\nE = 0\nfor k in range(10**6):\n    E += (1-p)**k\n\nans = (1900*M + 100*(N-M))*E\nans = round(ans)\nprint(ans)", "n,m=map(int, input().split(\" \"))\nprint((1900 * m+ (n-m) * 100) * (2 ** m))", "N,M=list(map(int,input().split()))\nprint((1900*M+100*(N-M))*2**M)", "n,m=map(int,input().split())\nprint((100*(n-m)+1900*m)*(2**m))", "def main():\n    n, m = map(int, input().split())\n\n    time = 1900 * m + 100 * (n - m)\n    power = 2 ** m\n    print(time * power)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, m = list(map(int, input().split()))\n\nx = m\ny = n-m\n\nans = (1900*x+100*y)*2**x\n\nprint(ans)\n", "N,M=map(int,input().split())\nprint((1900*M+100*(N-M))*2**M)", "N, M = (int(x) for x in input().split())\n\nans = 2**M * (M*1900+(N-M)*100)\nprint(ans)\n", "n,m=map(int,input().split())\n\nonetry=100*(n-m)+1900*m\nprint(onetry*2**m)", "n,m = map(int, input().split())\n\nprint((1900*m + ((n-m)*100))*(2**m))", "import sys\nimport math\nimport heapq\nmod=10**9+7\ninf=float(\"inf\")\nfrom math import sqrt\nfrom collections import deque\nfrom collections import Counter\nfrom collections import defaultdict\n#\u3059\u3079\u3066\u306ekey\u304c\u7528\u610f\u3055\u308c\u3066\u308b defaultdict(int)\u3067\u521d\u671f\u5316\nfrom collections import OrderedDict\n#\u9806\u5e8f\u3092\u4fdd\u3063\u305fdict\nfrom math import ceil\ninput=lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(11451419)\nfrom decimal import Decimal #float\u306e\u9ad8\u7cbe\u5ea6ver, \u6e21\u3059\u306e\u306fstr\u578b\u3067\nfrom functools import lru_cache\n#\u30e1\u30e2\u5316\u518d\u5e30def\u306e\u5192\u982d\u306b\u6bce\u56de @lru_cache(maxsize=10**10)\n#\u5f15\u6570\u306blist\u306f\u3060\u3081\n#######\u3053\u3053\u307e\u3067\u30c6\u30f3\u30d7\u30ec#######\n#\u30bd\u30fc\u30c8\u3001\"a\"+\"b\"\u3001\u518d\u5e30\u306a\u3089Python3\u306e\u65b9\u304c\u3044\u3044\n#######\u3053\u3053\u304b\u3089\u5929\u3077\u3089########\nn,m=list(map(int,input().split()))\nA=100*(n-m)+1900*m\np=pow(2,m)\n\n@lru_cache(maxsize=10**10)\ndef per(n):\n    if n==1:\n        return 1/p\n    return (1-sum([per(i) for i in range(1,n)]))*(1/p)\n\nans=0\nfor i in range(1,2000):\n    ans+= i*A*per(i)\nprint((round(ans)))\n", "n,m=list(map(int,input().split()))\na=(n-m)*100+1900*m\nprint((a*(2**m)))\n", "N,M = map(int,input().split())\nprint((1900*M+(N-M)*100)*2**M)", "n,m=list(map(int,input().split()))\nsend=2**m\ntime = 1900*m + 100*(n-m)\nprint((send*time))\n", "n,m = map(int,input().split())\nprint(((1900*m+100*(n-m))*2**m))", "N,M=list(map(int,input().split()))\nprint(((100*(N-M)+1900*M)*2**M))\n", "N,M = map(int,input().split())\n\nprint(int((M*1900 + (N-M)*100) * 2**M))", "n, m = map(int,input().split())\n\nt = m * 1900 + (n-m) * 100\nprint(t*2**m)", "n,m = map(int,input().split())\nprint(((n-m)*100+m*1900)*2**m)", "n, m = map(int, input().split())\nprint((n*100 + m*1800) * (2 ** m))", "# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nN, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\"\"\n#         arr.append([n, 1])\n#     return arr\n\n#def make_divisors(n):\n#    lower_divisors , upper_divisors = [], []\n#    i = 1\n#    while i*i <= n:\n#        if n % i == 0:\n#            lower_divisors.append(i)\n#            if i != n // i:\n#                upper_divisors.append(n//i)\n#        i += 1\n#    return lower_divisors + upper_divisors[::-1]\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1\n\n# \u8a3c\u660e\u3067\u304d\u3066\u3044\u306a\u3044\u304c\u30012**M * t \u3068\u306a\u308b\u6c17\u304c\u3059\u308b\u3002\n# (t \u306f1\u56de\u306e\u5b9f\u884c\u306b\u304b\u304b\u308b\u6642\u9593[ms])\nprint(2 ** M * (1800 * M + 100 * N))", "N,M=map(int,input().split())\ndef f(a,r,c):\n  return (a/(1-r)+(a*r)/(1-r)**2)*c\n\na=1/2**M\nr=(2**M-1)/2**M\nc=1900*M+100*(N-M)\n\nprint(int(f(a,r,c)))", "n,m = map(int,input().split())\nprint((1900*m+100*(n-m))*2**m)", "n, m = map(int, input().split())\n\n# ((n - m) * 100 + m * 1900) * 2^m\n\nprint(((n-m) * 100 + m * 1900) * pow(2, m))", "N, M = map(int, input().split())\nprint(((N-M)*100+M*1900)*(2**M))", "n, m = map(int, input().split())\n\nt = 2**m\n\nprint((m * 1900 + (n-m) * 100) * t)", "N, M = map(int,input().split())\nprint(((N - M) * 100 + M * 1900)* 2 ** M)", "n,m=map(int,input().split())\nres=2**m\nans=1900*m+100*(n-m)\nprint(ans*res)", "N, M = map(int, input().split())\nA = 1900*M + 100*(N-M)\n#print(A)\n\nans = A * 2**M\n\nprint(ans)", "N,M=map(int,input().split())\nprint((M*1900+100*(N-M))*(2**M))", "N,M = map(int,input().split())\nyes = 100\nno = 1900\nans = 0\nfor i in range(1,2**M+1):\n  ans += (i*((M*no)+(N-M)*yes))/(i<<1)\nprint(int(ans)*2)", "N,M = map(int,input().split())\nfixT1 = 100*(N-M)\nfixT2 = 1900*(M)\ntrynum = 2**M\nprint((fixT1+fixT2)*trynum)", "n, m = map(int, input().split())\nprint(2**m*(1800*m + 100*n))"]