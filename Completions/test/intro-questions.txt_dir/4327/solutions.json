["a,p = map(int,input().split())\nA = a*3 + p\nprint(A//2)", "#template\ndef inputlist(): return [int(j) for j in input().split()]\n#template\nA,P = inputlist()\nprint((3*A+P)//2)", "A, P = map(int, input().split())\nprint((A*3+P)//2)", "a,p = map(int,input().split())\n\nm = a * 3 + p\n\nif m % 2 == 0:\n    print(m // 2)\n\nelse:\n    print((m - 1) // 2)", "a, p = map(int, input().split())\nprint((3*a+p)//2)", "A,P = map(int,input().split())\nprint((3*A+P)//2)", "a,p = map(int,input().split())\nans = (3*a+p)//2\nprint(ans)", "a, b = map(int,input().split())\n\nn = a * 3 + b\n\nprint(int(n // 2))", "a,p = map(int,input().split())\n\ntip = p + a*3\n\nprint(tip//2)", "a,p = map(int,input().split())\nprint((3*a+p)//2)", "A, P = map(int, input().split())\nprint((3 * A + P) // 2)", "A, P = map(int,input().split())\nAp = 3*A+P\nprint(Ap//2)", "a,p=map(int,input().split())\nprint((a*3+p) // 2 )", "A, P = list(map(int, input().split()))\n\nans = (A*3 + P)//2\n\nprint(ans)\n", "def mapt(fn, *args):\n    return tuple(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    a, p = Input()\n    x = a*3 + p\n    ans = x//2\n    print(ans)\n\nmain()", "a,p = map(int,input().split())\ntmp = a * 3 + p\nprint(tmp//2)", "a,p=map(int,input().split())\nprint((3*a+p)//2)", "a, b = map(int, input().split())\nprint((a*3+b)//2)", "a,p=map(int,input().split())\nprint((a*3+p)//2)", "\na,p=map(int,input().split())\na *= 3\na += p\nprint(a//2)", "A,P=map(int, input().split())\n\nprint((A*3+P)//2)", "a,p=map(int, input().split())   \nprint((3*a+p)//2)", "import math\n\na, p = list(map(int, input().split()))\n\nprint((math.floor((3 * a + p) / 2)))\n", "a, p = map(int, input().split())\nprint((a*3 + p) // 2)", "a, p = list(map(int, input().split()))\n\ntotal_pie = (a * 3 + p) // 2\nprint(total_pie)\n", "A, P = map(int, input().split())\nprint((3 * A + P) // 2)", "a,p = map(int,input().split())\nprint((a*3+p)//2)", "A, P = map(int, input().split())\n\nans = (3*A + P)//2\nprint(ans)", "a,p=map(int, input().split())\n\nans=(3*a+p)//2\nprint(ans)", "A, P = map(int, input().split())\n\napple_fragment = A * 3 + P\napple_pie = apple_fragment // 2\n\nprint(apple_pie)", "def solver():\n    A, P = [int(n) for n in input().split()]\n    return (A*3+P)//2\n\ndef __starting_point():\n  print((solver()))\n\n__starting_point()", "a, p = map(int, input().split())\nprint(int((a * 3 + p) / 2))", "A, P = map(int,input().split())\n\nP = P + A*3\n\napple_pie = 0\n\nwhile  P>1:\n    \n    apple_pie = apple_pie + 1\n    P = P - 2\n    \nprint(apple_pie)", "A,P=map(int,input().split());print(A*3+P>>1)", "a, b = map(int, input().split())\nb += a * 3\nprint(b // 2)", "a, p = map(int, input().split())\nprint((a*3+p)//2)", "a, p = map(int, input().split())\nprint((a * 3 + p) // 2)", "A, P = map(int, input().split())\n\nprint((A * 3 + P) // 2)", "a,p = map(int,input().split())\nprint((a*3+p)//2)", "a, p = map(int,input().split())\nprint((3*a + p)//2)", "a,p = map(int, input().split())\nprint((a*3+p)//2)", "A, P = input().split()\n\n\nprint((3*int(A) + int(P)) // 2)", "A, P = map(int, input().split())\n\nprint((A*3+P) // 2)", "A,P=map(int,input().split())\nprint((A*3+P)//2)", "a,p = map(int,input().split())\nprint((3*a+p)//2)", "A,P = list(map(int,input().split()))\n\nP = P + 3*A\n\nprint((P//2))\n", "a,p=map(int,input().split())\ns=3*a+p\nprint(s//2)", "A, P = map(int, input().split())\n\nans = (3 * A + P) // 2\nprint(ans)", "a,p = map(int,input().split())\nprint((a*3+p)//2)", "a,p = map(int,input().split())\n\np += a * 3\nprint(p // 2)", "a,p=map(int,input().split())\nprint((a*3+p)//2)", "A,P = map(int,input().split())\nprint((3*A+P)//2)", "a, p = map(int, input().split())\n\nprint((a * 3 + p) // 2)", "A, P = map(int, input().split())\nPP = 3*A + P\nprint(PP//2)", "A, P = map(int, input().split())\n\nprint((A * 3 + P) // 2)", "a,p=map(int,input().split())\nprint((a*3+p)//2)", "A,P=map(int,input().split())\nprint((3*A+P)//2)", "a,b=map(int,input().split())\nc=(3*a+b)/2\nimport math\nprint(math.floor(c))", "a,p=map(int,input().split())\nprint((a*3+p)//2)", "A,P=map(int,input().split())\ns=A*3+P\nprint(s//2)", "a, p = list(map(int, input().split()))\nprint(((a*3+p)//2))\n", "A,P = map(int,input().split())\nprint((A*3 + P)//2)", "a, p = list(map(int, input().split()))\nprint(((a * 3 + p) // 2))\n", "a, p = map(int, input().split())\nans = (3 * a + p) // 2\nprint(ans)", "a, p = map(int, input().split())\nprint(((a * 3) + p) // 2)", "a,p = list(map(int,input().split()))\n\nprint((int(3*a + p)//2))\n", "a = input().rstrip().split(\" \")\nb = int(a[0])\nc = int(a[1])\nc = b*3 + c\nprint(int(c/2))", "a,p = map(int,input().split())\nprint((a*3+p)//2)", "a,p = map(int,input().split())\np += a*3\nprint(p//2)", "A,P = map(int,input().split())\n\nP += A * 3\n\nprint(P // 2)", "#ABC128 A\n\nA,P = list(map(int,input().split()))\nprint(((3*A + P)//2))\n", "hole_apple, piece_apple = map(int, input().split())\n\ntotal_piece_apple = hole_apple * 3 + piece_apple\nprint(total_piece_apple // 2)", "a,p = map(int,input().split())\napples = p + 3*a\nprint(apples//2)", "A,P=input().split()\nringo=int(A)*3\nrin=ringo+int(P)\nri=rin//2\nprint(ri)", "A, P = map(int, input().split())\nprint((3*A+P)//2)", "A, P = map(int, input().split())\nP += A * 3\nans = P // 2\nprint(ans)", "a,p = map(int,input().split())\n\nprint((a*3+p)//2)", "a,p=list(map(int,input().split()))\nprint(((3*a+p)//2))\n", "a, p = [int(x) for x in input().split()]\nprint(((a * 3 + p) // 2))\n", "a,p = map(int, input().split())\nprint(int((3*a+p)/2))", "a,p=map(int,input().split())\nprint((3*a+p)//2)", "A,P=list(map(int,input().split(' ')))\nif A==0:\n    print((0))\n    return\nA=A*3\ntotal=A+P\n\nprint((int(total//2)))\n", "a,p = list(map(int, input().split()))\np+=a*3\np/=2\nprint((int(p)))\n", "A,P=list(map(int,input().split()))\nprint(((3*A+P)//2))\n", "a, p = map(int, input().split())\n\nprint((a * 3 + p) // 2)", "A, P = map(int, input().split())\na = 3 * A + P\nprint(a // 2)", "\nurl = \"https://atcoder.jp//contests/abc128/tasks/abc128_a\"\n\ndef main():\n    a,p = list(map(int, input().split()))\n    p += a * 3\n    print(p//2)\n\ndef __starting_point():\n    main()\n__starting_point()", "# ABC128\n# Apple Pie\na, p = list(map(int, input().split()))\np = (a * 3) + p\nprint(( p // 2))\n", "a, p = list(map(int, input().split()))\n\nprint((a*3+p)//2)", "a,p = map(int,input().split())\nprint((a*3+p)//2)", "a, p = list(map(int, input().split()))\n\nprint(((3*a+p)//2))\n", "a = list(map(int,input().split()))\nprint(((a[0]*3+a[1])//2))\n", "a,p=map(int,input().split())\n\nb=a*3\n\nprint((b+p)//2)", "A,P = map(int,input().split())\n\nP += A*3\n\nprint(P//2)", "A, P = list(map(int, input().split()))\n\nprint(((A * 3 + P) // 2))\n", "a, p = list(map(int, input().split()))\nprint(((a * 3 + p) // 2))\n", "a,p=map(int, input().split())\nprint((a*3+p)//2)", "a, p = list(map(int, input().split()))\nprint(((a * 3 + p) // 2))\n", "A, P = map(int, input().split())\nans = (A*3+P)//2\nprint(ans)"]