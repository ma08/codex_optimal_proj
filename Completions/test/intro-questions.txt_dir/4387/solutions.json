["R = int(input())\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "r = int(input())\nif r < 1200: \n    print('ABC')\nelif 1200 <= r < 2800:\n    print('ARC')\nelse: \n    print('AGC')\n", "rating = int(input())\nif(rating>=0 and rating<1200):\n  print(\"ABC\")\nelif(rating < 2800):\n  print(\"ARC\")\nelif(rating <= 4208):\n  print(\"AGC\")", "n = int(input())\n\nif n < 1200:\n    print('ABC')\nif n >= 1200 and n < 2800:\n    print('ARC')\nif n >= 2800:\n    print('AGC')", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")\n", "n = int(input())\nif n < 1200:\n  print(\"ABC\")\nelif n < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\n \nif r < 1200:\n  print('ABC')\nelif r < 2800:\n  print('ARC')\nelse:\n  print('AGC')", "R = int(input())\n\nif R < 1200 :\n    print('ABC')\nelif R < 2800 :\n    print('ARC')\nelse :\n    print('AGC')", "r=int(input())\nprint(\"ABC\" if r<1200 else \"ARC\" if r<2800 else \"AGC\")", "r = int(input())\nif r<1200:\n    print('ABC')\nelif r<2800:\n    print('ARC')\nelse:\n    print('AGC')", "r = int(input())\nif  r < 1200 :\n    print(\"ABC\")\nelif r < 2800 :\n    print(\"ARC\")\nelse :\n    print(\"AGC\")    ", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    R = I()\n\n    if R < 1200:\n        print('ABC')\n    elif 1200 <= R < 2800:\n        print('ARC')\n    else:\n        print('AGC')\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "r=int(input())\nif r<1200:print('ABC')\nelif r<2800:print('ARC')\nelse:print('AGC')", "R = int(input())\nif R < 1200:\n  print(\"ABC\")\nelif R < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "a = int(input())\nif a < 1200:\n  print(\"ABC\")\nelif a < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "R = int(input())\n\nif R <1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "a = int(input())\n\nif a < 1200:\n    print(\"ABC\")\nelif a < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "r=int(input())\nif r<1200:\n    print(\"ABC\")\nelif 1200<=r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "R=int(input())\nif R<1200:\n  print(\"ABC\")\nelif R<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nif r>=2800:\n    print(\"AGC\")\nelif r>=1200:\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")\n", "R=int(input())\nprint(\"A\"+[\"GR\"[R<2800],\"B\"][R<1200]+\"C\")", "r=int(input())\n\nif r<1200:\n    ans=\"ABC\"\n\nelif r<2800:\n    ans=\"ARC\"\n    \nelse:\n    ans=\"AGC\"\n    \nprint(ans)\n", "r=int(input())\nif r<1200:\n  print('ABC')\nelif r<2800:\n  print('ARC')\nelse:\n  print('AGC')", "num1 = int(input())\n\nwhile(num1 >= 0):\n  if num1 < 1200:\n    print(f\"ABC\")\n  elif num1 >= 1200 and num1 < 2800:\n    print(f\"ARC\")\n  elif num1 >= 2800 and num1 <= 4208:\n    print(f\"AGC\")\n  break\n", "R = int(input())\nif R < 1200:\n  print('ABC')\nelif R < 2800:\n  print('ARC')\nelse:\n  print('AGC')", "R=int(input())\nif R<1200:\n    ans=\"ABC\"\nelif R<2800:\n    ans=\"ARC\"\nelse:\n    ans=\"AGC\"\nprint(ans)", "a = int(input())\n\nif a < 1200:\n    print(\"ABC\")\nelif 1200 <= a < 2800:\n    print(\"ARC\")\nelif 2800 <= a:\n    print(\"AGC\")", "R = int(input())\n\nif R < 1200:\n   print('ABC')\nelif R < 2800:\n   print('ARC')\nelse:\n   print('AGC')", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nif r < 1200:\n  print('ABC')\nelif 1200<=r<2800:\n  print('ARC')\nelse:\n  print('AGC')", "r = int(input())\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "R = int(input())\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "R = int(input())\n\nif R < 1200:\n  print('ABC')\nelif 1200 <= R and R < 2800:\n  print('ARC')\nelse:\n  print('AGC')", "R = int(input())\n\nif R >= 2800:\n    print('AGC')\nelif R >= 1200:\n    print('ARC')\nelse:\n    print('ABC')", "n = int(input())\nif n < 1200:\n  print(\"ABC\")\nelif n < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "R = int(input())\n\nif R < 1200:\n  print('ABC')\nelif R < 2800:\n  print('ARC')\nelse:\n  print('AGC')\n", "def main():\n    n = int(input())\n    if n < 1200:\n        print(\"ABC\")\n    elif 1200 <= n < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n\nmain()", "r=int(input())\nif r<1200:\n  print('ABC')\nelif r<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "R=int(input())\nif R<1200:\n  T='ABC'\nelif R<2800:\n  T='ARC'\nelse:\n  T='AGC'\nprint(T)", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "r = int(input())\n\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "r = int(input())\n\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "R = int(input())\n\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "r = int (input ())\nif r >= 2800:\n  print ('AGC')\nelif r >= 1200:\n  print ('ARC')\nelse:\n  print ('ABC')", "R = int(input().rstrip())\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "r=int(input())\nif r<1200:\n    print(\"ABC\")\nelif 1200<=r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "i=int(input())\nprint('A%sC'%(\"B\"if i<1200 else \"R\"if i<2800 else\"G\"))", "r = int(input())\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "rating = int(input())\n\nif rating < 1200:\n    print('ABC')\nelif 1200 <= rating < 2800:\n    print('ARC')\nelif rating >= 2800:\n    print('AGC')\n", "R = int(input())\n\nif R < 1200:\n  print(\"ABC\")\nelif R < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "R = int(input())\nif R < 1200:\n  print(\"ABC\")\nelif R < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nprint('ABC' if r < 1200 else 'ARC' if r < 2800 else 'AGC')", "a = int(input())\nif a < 1200:\n  print(\"ABC\")\nelif a < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\nr = I()\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "N = int(input())\nif N < 1200:\n  print('ABC')\nelif N < 2800:\n  print('ARC')\nelse:\n  print('AGC')", "r = int(input())\nif r<1200:\n  print(\"ABC\")\nelif r>=1200 and r<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "n=int(input())\nif n <1200:\n  print(\"ABC\")\nelif 1200<=n<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "rate = int(input())\nif rate < 1200:\n  print(\"ABC\")\nelif rate >= 2800:\n  print(\"AGC\")\nelse:\n  print(\"ARC\")", "r = int(input())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "# -*- coding: utf-8 -*-\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\nR = int(input())\n\n# \u6c42\u89e3\u51e6\u7406\nans = str()\nif R < 1200:\n    ans = \"ABC\"\nelif R < 2800:\n    ans = \"ARC\"\nelse:\n    ans = \"AGC\"\n\n# \u7d50\u679c\u51fa\u529b\nprint(ans)\n", "r = int(input())\nif r < 1200: ans = \"ABC\"\nelif r < 2800: ans = \"ARC\"\nelse: ans = \"AGC\"\nprint(ans)", "R=int(input())\nif R<1200:\n    print(\"ABC\")\nelif R<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "a = int(input())\nif a<1200:\n  print(\"ABC\")\nelif a<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "R = int(input())\nprint((['ARC','ABC','AGC'][R < 1200 or -(R >= 2800) ]))\n", "R=int(input())\nprint(\"A\"+\"RGB\"[(R>=2800)+2*(R<1200)]+\"C\")", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif 1200 <= R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "r = int(input())\nif r < 1200:\n  print('ABC')\nelif r < 2800:\n  print('ARC')\nelse:\n  print('AGC')", "R=int(input())\n\nif R<1200:\n    print(\"ABC\")\nelif R<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "a=int(input())\nprint([\"ABC\",\"ARC\",\"AGC\"][(a>=1200)+(a>=2800)])", "n=int(input())\nprint('ABC' if 0<=n<1200 else 'ARC' if 1200<=n<2800 else 'AGC')", "r = int(input())\n\nif r < 1200:\n    print('ABC')\nelif 1200 <= r < 2800:\n    print('ARC')\nelif 2800 <= r:\n    print('AGC')", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "R = int(input())\nif R<1200:\n\tprint(\"ABC\")\nelif R<2800:\n\tprint(\"ARC\")\nelse:\n\tprint(\"AGC\")", "r = int(input())\nif r < 1200:\n    print('ABC')\nelif 1200 <= r < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "r = int(input())\nif r <= 1199:\n    print('ABC')\nelif r <= 2799:\n    print('ARC')\nelse:\n    print('AGC') ", "r=int(input())\nif r <1200:\n  ans=\"ABC\"\nelif 1200<=r<2800:\n  ans=\"ARC\"\nelse:\n  ans=\"AGC\"\nprint(ans)", "a = int(input())\nif a < 1200:\n  print('ABC')\nelif a >= 1200 and a < 2800:\n  print('ARC')\nelse:\n  print('AGC')\n", "R = int(input())\n\nif R < 1200:\n  print(\"ABC\")\nelif R < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "\nr=int(input())\nif r<1200:\n    print('ABC')\nelif 1200<=r and r<2800:\n    print('ARC')\nelse:\n    print('AGC')", "#\n# abc104 a\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1199\"\"\"\n        output = \"\"\"ABC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1200\"\"\"\n        output = \"\"\"ARC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"4208\"\"\"\n        output = \"\"\"AGC\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    R = int(input())\n\n    if R < 1200:\n        print(\"ABC\")\n    elif R < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "r = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r <2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\") \n", "r = int(input())\nprint(\"ABC\" if r<1200\n      else \"ARC\" if r <2800\n      else \"AGC\")", "R = int(input())\nif R < 1200:\n    ans = \"ABC\"\nelif R < 2800:\n    ans = \"ARC\"\nelse:\n    ans = \"AGC\"\nprint(ans)\n", "R=int(input())\nprint(\"ABC\" if R<1200\n      else \"ARC\" if R<2800\n      else \"AGC\")", "R = int(input())\n\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "a=int(input())\nif a>=2800:\n  print(\"AGC\")\nif 1200<=a<2800:\n  print(\"ARC\")\nif a<1200:\n  print(\"ABC\")", "R = int(input())\n\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "r=int(input())\nif r<1200:\n  print('ABC')\nelif r<2800:\n  print('ARC')\nelse:\n  print('AGC')", "n=int(input())\nif n<1200:\n    print(\"ABC\")\nelif n<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "R = int(input())\n\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")", "R = int(input())\nif R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')\n", "R=int(input())\nif R<1200:\n  print(\"ABC\")\nelif R<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")", "r = int(input())\nif r < 1200:\n    print('ABC')\nelif r < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "a=input()\nif int(a)<=1199:\n  print(\"ABC\")\nelif int(a)<=2799:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")"]