["import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)", "from math import gcd\nK = int(input())\nans = 0\nfor a in range(1,K+1):\n    for b in range(1,K+1):\n        for c in range(1,K+1):\n            ans += gcd(gcd(a,b),c)\nprint(ans)", "from math import gcd\nn = int(input())\nans = 0\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    for k in range(1,n+1):\n      ans += gcd(gcd(i,j),k)\nprint(ans)", "def gcd(a, b):\n  if b == 0:\n    return a\n  else:\n    return gcd(b,a%b)\nk = int(input())\nans = 0\nfor a in range(1,k+1):\n  for b in range(a,k+1):\n    for c in range(b,k+1):\n      d = gcd(a, b)\n      if len({a,b,c}) == 1:\n        ans += gcd(c, d)\n      elif len({a,b,c}) == 2:\n        ans += 3*gcd(c, d)\n      else:\n        ans += 6*gcd(c, d)\nprint(ans)", "K = int(input())\nans = 0\n\ndef gcd(x, y):\n  if x % y == 0:\n    return y\n  else:\n    return gcd(y, x % y)\n\nans = 0\nfor a in range(1, K+1):\n  for b in range(1, K+1):\n    d = gcd(a, b)\n    for c in range(1, K+1):\n      ans += gcd(c, d)\n\nprint(ans)", "import itertools as itt\nimport math\n\nk = int(input())\n\nans = 0\nfor i in itt.combinations_with_replacement(range(1, k+1), 3):\n    if i[0] == i[1] and i[0] != i[2]:\n        ans += 3 * math.gcd(math.gcd(i[0], i[1]), i[2])\n    elif i[1] == i[2] and i[1] != i[0]:\n        ans += 3 * math.gcd(math.gcd(i[0], i[1]), i[2])\n    elif i[0] == i[1] and i[0] == i[2]:\n        ans += math.gcd(math.gcd(i[0], i[1]), i[2])\n    else:\n        ans += 6 * math.gcd(math.gcd(i[0], i[1]), i[2])\n\nprint(ans)", "from math import gcd\ndef main():\n    ans = 0\n    k = int(input())\n    for i in range(1,1+k):\n        for j in range(1,1+k):\n            for l in range(1,1+k):\n                ans += gcd(i,gcd(j,l))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import gcd\nK=int(input());print(sum(gcd(a+1,gcd(b+1,c+1))for a in range(K)for b in range(K)for c in range(K)))", "import math \n\nk = int(input())\n\nans = 0\n\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        ab = math.gcd(i,j)\n        for x in range(1,k + 1):\n            ans += math.gcd(ab,x)\n    \n\nprint(ans)", "import math\nK = int(input())\nans = 0\n\nfor a in range(1, K+1):\n    for b in range(a, K+1):\n        for c in range(b, K+1):\n            s = math.gcd(a, b)\n            t = math.gcd(s, c)\n            if a == c:\n                ans += t\n            elif (a == b or b == c) and a != c:\n                ans += 3*t\n            else:\n                ans += 6*t\nprint(ans)", "import sys\nfrom math import ceil as C, floor as F, sqrt, gcd as G\nfrom collections import defaultdict as D, Counter as CNT\nfrom functools import reduce as R\nimport heapq as HQ\n\nclass Heap:\n  def __init__(self, data, reverse=False):\n    self.reverse = -1 if reverse else 1\n    self.data = [self.reverse * d for d in data]\n    HQ.heapify(self.data)\n  def push(self, x): return HQ.heappush(self.data, self.reverse * x)\n  def pop(self): return self.reverse * HQ.heappop(self.data) \n\nALP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nalp = 'abcdefghijklmnopqrstuvwxyz'\ndef _X(): return sys.stdin.readline().rstrip().split(' ')\ndef _S(ss): return tuple(ss) if len(ss) > 1 else ss[0]\ndef S(): return _S(_X())\ndef Ss(): return list(S())\ndef _I(ss): return tuple([int(s) for s in ss]) if isinstance(ss, tuple) else int(ss)\ndef I(): return _I(S())\ndef _Is(ss): return list(ss) if isinstance(ss, tuple) else [ss]\ndef Is(): return _Is(I())\n\nn = I()\n\nans = 0\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        for k in range(1, n+1):\n           ans += G(i, G(j, k))\n\nprint(ans)\n            \n", "from math import gcd\n\nk = int(input())\n\n\nans = 0\nfor x in range(1,k+1):\n    for y in range(1,k+1):\n        for z in range(1,k+1):\n            ans += gcd(gcd(x,y),z)\n\nprint(ans)\n", "from math import gcd\n\n\ndef main():\n    K = int(input())\n    ans = 0\n\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            temp = gcd(i, j)\n            for l in range(1, K+1):\n                ans += gcd(temp, l)\n                \n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    import math\n    k = int(input())\n    cand = [int(v) for v in range(1, k + 1)]\n    ans = 0\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            for l in range(1, k + 1):\n                temp = math.gcd(i, j)\n                res = math.gcd(temp, l)\n                ans += res\n    return ans\n\n\ndef __starting_point():\n    print((main()))\n\n__starting_point()", "from math import *\n\nK=int(input())\nans=0\nfor i in range(1,K+1):\n  for j in range(1,K+1):\n    for k in range(1,K+1):\n      ans+=gcd(k,gcd(i,j))\nprint(ans)\n", "import math\n\nk = int(input())\ntotal = 0\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        tmp = math.gcd(i, j)\n        for k in range(1,k+1):\n            total += math.gcd(tmp,k)\nprint(total)", "from math import gcd \nk = int(input())\ncnt = 0\nfor i in range(1, k+1):\n  for j in range(1, k+1):\n    for l in range(1, k+1):\n      cnt += gcd(gcd(i, j), l)\nprint(cnt)", "import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)", "K = int(input())\n\nans = 0\n\ndef gcd(x, y):\n    if x == 1 or y == 1:\n        return 1\n    else:\n        while True:\n            if x >= y:\n                x %= y\n            else:\n                y %= x\n            if x == 0 or y == 0:\n                break\n        return x + y\n\nfor i in range(1, K + 1):\n    for j in range(i, K + 1):\n        for k in range(j, K + 1):\n            if i == j == k:\n                ans += gcd(i, gcd(j, k))\n            elif i == j or j == k or k == i:\n                ans += gcd(i, gcd(j, k)) * 3\n            else:\n                ans += gcd(i, gcd(j, k)) * 6\n\nprint(ans)", "from math import gcd\n\nk = int(input())\n\nans = 0\nfor a in range(1,k+1):\n  for b in range(1,k+1):\n    for c in range(1,k+1):\n      ans += gcd(gcd(a,b),c)\nprint(ans)", "import math\n\nk = int(input())\nans = 0\nfor i in range(1, k + 1):\n    for j in range(1, k + 1):\n        temp = math.gcd(i, j)\n        for l in range(1, k + 1):\n            ans += math.gcd(temp, l)\nprint(ans)", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \ngcd = math.gcd\n\ndef main():\n    K = I()\n    ans = 0\n    for i in range(1,K+1):\n        for j in range(i, K+1):\n            temp = gcd(i, j)\n            for k in range(j, K+1):\n                n = set([i,j,k])\n                n = len(n)\n                ans += gcd(temp,k) * (n+1)*(n)//2\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\nimport sys\n\n\ndef main():\n    N = int( sys.stdin.readline() )\n\n\n    def gcd(a,b):\n        if b == 0: \n            return a\n        return gcd(b, a % b)\n    \n\n    num_cnt_dic = {}\n    num_gcd = [ [0]*(N+1) for _ in range(N+1) ]\n\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            g = gcd(i, j)\n\n            num_cnt_dic[g] = num_cnt_dic.get(g, 0) + 1\n            num_gcd[i][j] = g\n    \n\n    ans = 0\n\n    for i in list(num_cnt_dic.keys()):\n        for j in range(1, N+1):\n            ans += (num_gcd[i][j] * num_cnt_dic[i])\n    \n    \n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\ndef main():\n    k = int(input())\n\n    k2 = np.arange(1, k+1)\n    k2gcd = np.gcd.outer(k2, np.gcd.outer(k2, k2))\n    print(k2gcd.sum())\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/env python3\n#encoding:utf8\n\nimport math\nfrom itertools import combinations_with_replacement as comb\nfrom functools import reduce\n\ndef main():\n    K = int(input())\n\n    ans = 0\n    for abc in comb(range(1, K+1), 3):\n        gcd = reduce(math.gcd, abc)\n        s = len(set(abc))\n        if s == 1:\n            k = 1\n        elif s == 2:\n            k = 3\n        else:\n            k = 6\n        ans += gcd * k\n        #print(f\"abc={abc} gcd={gcd} k={k}\")\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\n\nk=int(input())\nans=0\n\nfor a in range(1,k+1):\n  for b in range(1,k+1):\n    tmp=math.gcd(a,b)\n    for c in range(1,k+1):\n      ans+=math.gcd(tmp,c)\n\nprint(ans)", "import math\nk=int(input())\nans=0\nfor a in range(1,k+1):\n    for b in range(1,k+1):\n        if math.gcd(a,b)==1:\n            ans+=k\n        else :\n            for c in range(1,k+1):\n                ans+=math.gcd(math.gcd(a,b),c)\nprint(ans)\n", "from collections import defaultdict\nfrom math import gcd\n\n\ndef answer(k: int) -> int:\n    dd = defaultdict(int)\n    for a in range(1, k + 1):\n        for b in range(1, k + 1):\n            dd[gcd(a, b)] += 1\n\n    gcd_sum = 0\n    for c in range(1, k + 1):\n        for gcd_ab in dd.keys():\n            gcd_sum += gcd(gcd_ab, c) * dd[gcd_ab]\n\n    return gcd_sum\n\n\ndef main():\n    k = int(input())\n    print(answer(k))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import collections\ndef gcd(a,b):\n  if b==0:\n    return a\n  else:\n    return gcd(b,a%b)\nK=int(input())\ncnt=collections.defaultdict(int)\nfor a in range(1,K+1):\n  for b in range(1,K+1):\n    cnt[gcd(a,b)]+=1\nans=0\nfor c in range(1,K+1):\n  for gcd_of_ab in cnt.keys():\n  \tans+=gcd(gcd_of_ab,c)*cnt[gcd_of_ab]\nprint(ans)", "k = int(input())\nans = 0\ndef gcd(a,b):\n    if a % b == 0:\n        return b\n    c = a % b\n    return gcd(b,c)\n\nfor l in range(1,k+1):\n    for m in range(l,k+1):\n        for n in range(m,k+1):\n            tmp1 = gcd(l,n)\n            tmp2= gcd(tmp1,m)\n            if (l==m==n):\n                ans+=tmp2\n            elif(l==m or m==n):\n                ans+= 3*tmp2\n            else:\n                ans += 6*tmp2\n\n\nprint(ans)", "import math\n\nN=int(input())\nans=0\nfor i in range(1,N+1):\n    for j in range(i,N+1):\n        for k in range(j,N+1):\n            if i==j and j==k:\n                ans+=i\n            elif i<j and j<k:\n                ans+=6*math.gcd(i,math.gcd(j,k))\n            else:\n                ans+=3*math.gcd(i,math.gcd(j,k))\nprint(ans)\n", "import math\n\nK = int(input())\nans = 0\n\nfor a in range(1, K+1):\n    for b in range(1, K+1):\n        tmp = math.gcd(a, b)\n        for c in range(1, K+1):\n            ans += math.gcd(tmp, c)\n\nprint(ans)", "from math import gcd\n\nk = int(input())\n\nans = 0\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        for k in range(1,k+1):\n            ans += gcd(gcd(i,j),k)\n\nprint(ans)\n", "k = int(input())\ndef gcd1 (a, b):\n    while True:\n        if (a < b):\n            a, b = b, a\n        c = a%b\n        if (c == 0):\n            return (b)\n        else:\n            a = b\n            b = c\n\ncount = 0\nfor i in range(k):\n    for j in range(k):\n        tmp = gcd1(i + 1, j + 1)\n        if (tmp == 1):\n            count = count + k\n        else:\n            for l in range(k):\n                tmp2 = gcd1(tmp, l + 1)\n                count = count + tmp2\n\nprint(count)\n", "from math import gcd\n\n\ndef main():\n    k = int(input())\n\n    answer = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                answer += gcd(gcd(a, b), c)\n\n    print(answer)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nfrom functools import reduce\n\nk = int(input())\n\nans = 0\n\ngcd_sum = [0] * 201\n\nfor i in range(1, k + 1):\n    for j in range(1, k + 1):\n        gcd_sum[i] += math.gcd(i, j)\n\nfor a in range(1, k + 1):\n    for b in range(1, k + 1):\n        _gcd = math.gcd(a,b)\n        ans += gcd_sum[_gcd]\n\nprint(ans)\n", "from math import gcd\nk=int(input())\n\ncnt=0\n\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        a=gcd(i,j)\n        for k in range(1,k+1):\n            cnt+=gcd(a,k)\nprint(cnt)\n", "from math import gcd\n\nk = int(input())\n\nans = 0\nfor x in range(1,k+1):\n    for y in range(1,k+1):\n        for z in range(1,k+1):\n            ans += gcd(gcd(x,y),z)\n\nprint(ans)\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \ngcd = math.gcd\n\ndef main():\n    K = I()\n    ans = 0\n    for i in range(1,K+1):\n        for j in range(1, K+1):\n            temp = gcd(i, j)\n            for k in range(1, K+1):\n                ans += gcd(temp,k)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "import math\n\nk = int(input())\nans = 0\nfor a in range(1, k+1):\n    for b in range(a+1, k+1):\n        ans += math.gcd(a, b)\n        for c in range(b+1, k+1):\n            ans += math.gcd(math.gcd(a, b), c)\nans *= 6\nans += (k+1)*k/2\nprint((int(ans)))\n", "from math import gcd\n\nK = int(input())\n\n\nans = 0\nfor i in range(1, K+1):\n    for j in range(1, K+1):\n        tmp = gcd(i, j)\n        if tmp == 1:\n            ans += tmp*K\n        else:\n            for k in range(1, K+1):\n                ans += gcd(tmp, k)\n            \n\nprint(ans)", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \ngcd = math.gcd\n\ndef main():\n    K = I()\n    ans = 0\n    D = Init(K+1, K+1, 0)\n    for i in range(1, K+1):\n        for j in range(i, K+1):\n            if i == 1:\n                D[i][j] = 1\n            if i == j:\n                D[i][j] = i\n            else:\n                D[i][j] = gcd(i, j)\n\n    for i in range(1,K+1):\n        for j in range(i, K+1):\n            temp = D[i][j]\n            for k in range(j, K+1):\n                n = set([i,j,k])\n                n = len(n)\n                ans += D[temp][k] * (n+1)*(n)//2\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "from math import gcd\nK=int(input())\nresult=0\nfor a in range(1,K+1):\n    for b in range(1,K+1):\n        for c in range(1,K+1):\n            result+=gcd(gcd(a,b),c)\nprint(result)", "import math\nk = int(input())\n\nans = 0\nfor i in range(1, k+1):\n    for j in range(1, k+1):\n        a = math.gcd(i, j)\n        for k in range(1, k+1):\n            ans += math.gcd(a, k)\nprint(ans)", "import math\nk = int(input())\nans = 0\n\n\nfor a in range(1, k+1):\n  for b in range(a, k+1):\n    for c in range(b, k+1):\n      gcd = math.gcd(math.gcd(a,b),c)\n      if a == b == c:\n        ans += gcd\n      elif a == b or b == c:\n        ans += gcd *3\n      else:\n        ans += gcd *6\n      \nprint(ans)", "import math\nk = int(input())\n\nans = 0\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        b = math.gcd(i,j)\n        for k in range(1,k+1):\n            ans += math.gcd(b,k)\n\nprint(ans)\n", "from sys import stdin,stdout\nimport math\n\ndef main():\n    k = int(stdin.readline().rstrip())\n    ans = 0\n    for a in range(1,k+1):\n        for b in range(1,k+1):\n            ab = math.gcd(a,b)\n            for c in range(1,k+1):\n                ans = ans + math.gcd(ab,c)\n\n    stdout.write(str(ans))\n    stdout.write('\\n')\n\nmain()\n", "# C - Sum of gcd of Tuples (Easy)\n\nimport math\n\nk = int(input())\ns = 0\nfor a in range(1,k+1):\n    for b in range(1,k+1):\n        gcdab = math.gcd(a,b)\n        if  gcdab== 1:\n            s += k\n        else:\n            for c in range(1,k+1):\n                s += math.gcd(gcdab,c)\n\nprint(s)\n\n\n", "import math\n\nK = int(input())\nsum = 0\n\nfor i in range(1, K + 1):\n  for j in range(1, K + 1):\n    tmp = math.gcd(i, j)\n    for k in range(1, K + 1):\n      sum += math.gcd(tmp, k)\n      \nprint(sum)\n", "K = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nresult = 0\n\nfor a in range(1, K+1):\n    result += a\n    #print('{} add'.format(a))\n    b = a + 1\n    while b <= K:\n        result += 6 * gcd(a, b)\n        #print('{} and {} add'.format(a, b))\n        l = gcd(a, b)\n        c = b + 1\n        while c <= K:\n            result += 6 * gcd(l, c)\n            #print('{} and {} and {} add'.format(a, b, c))\n            c+= 1\n        b += 1\nprint(result)", "import math\nk = int(input())\nsum = 0\n\nfor a in range(1,k+1):\n    for b in range(1,k+1): \n        x = math.gcd(a, b)\n        for c in range(1,k+1):\n            sum += math.gcd(x, c)\n\nprint(sum)", "import math\n\nK = int(input())\n\nsum = 0\nfor i in range(1,K+1):\n  for j in range(1,K+1):\n    temp = math.gcd(i,j)\n    for k in range(1,K+1):\n      sum+=math.gcd(temp,k)\nprint (sum)", "import math\nK = int(input())\nans = 0\nfor i in range(1,K+1):\n    for j in range(1,K+1):\n        a = math.gcd(i,j)\n        for k in range(1,K+1):\n            ans += math.gcd(a,k)\nprint(ans)", "#ABC162\nK=int(input())\nans=0\nimport math\nfor i in range(1,K+1):\n    for j in range(1,K+1):\n        a = math.gcd(i,j)\n        for k in range(1,K+1):\n            l=math.gcd(a,k)\n            ans+=l\nprint(ans)", "import math\nn=int(input())\n\nans=0\n\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    r=math.gcd(i,j)\n    for k in range(1,n+1):\n      ans+=math.gcd(r,k)\nprint(ans)", "import math\nk = int(input())\n\n\ntotal = 0\n\nfor x in range(1,k+1):\n    for y in range(x,k+1):\n        for z in range(y,k+1):\n            if x == y == z:\n                total += x\n            elif x == y or y == z:\n                total += 3 * math.gcd(math.gcd(x,y),z)\n            else:\n                total += 6 * math.gcd(math.gcd(x,y),z)\n\nprint(total)\n", "import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\nk=int(input())\np=0\nans=0\nif k>2:\n  for i in range(1,k-1):\n    for j in range(i+1,k):\n        for m in range(j+1,k+1):\n            ans+=gcd(i,j,m)\np+=6*ans\nb=0\nfor i in range(1,k):\n    for j in range(i+1,k+1):\n        b+=math.gcd(i,j)\np+=6*b+k*(k+1)//2\nprint(p)", "import math\n\nk = int(input())\nwa = 0\naa = 0\nfor i in range(1,k+1):\n  for j in range(1,k+1):\n    aa =math.gcd(i,j)\n    for l in range(1,k+1):\n      wa +=math.gcd(aa,l)\nprint(wa)", "k=int(input())\nimport math\ns=0\nresult=0\nfor a in range(1,k+1,1):\n    for b in range(a,k+1,1):\n        for c in range(b,k+1,1):\n            gcd=math.gcd(math.gcd(a,b),math.gcd(b,c))\n            if a==b==c:\n                pass\n            elif (a==b and b!=c) or (b==c and b!=a) or (a==c and a!=c):\n                gcd=3*gcd\n            else:\n                gcd=6*gcd\n            \n            result+=gcd\nprint(result)", "import numpy as np\n\nK = int(input())\nx = np.arange(1, K + 1)\n\nprint(np.sum(np.gcd.outer(np.gcd.outer(x, x), x)))", "import math\nK=int(input())\n\nlist1=[]\ns=1\nwhile s<=K:\n    list1.append(s)\n    s=s+1\n\nlist3=[]\nt=1\nwhile t<=K*K:\n    list3.append(t)\n    t=t+1\n\nlist2=[]\nk=1\nfor i in list1:\n    for j in list1:\n        X=math.gcd(i,j)\n        list2.append(X)\n\nY=0\nfor k in list1:\n    for l in list3:\n        Y=Y+math.gcd(k,list2[l-1])\n\nprint(Y)\n", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nk = int(input())\n\ntmp = [[0 for i in range(k + 1)] for j in range(k + 1)]\nres = 0\n\nfor i in range(1, k + 1):\n    for j in range(1, k + 1):\n        tmp[i][j] = gcd(i, j)\n\nfor a in range(1, k + 1):\n    for b in range(k + 1):\n        for c in range(k + 1):\n            res += tmp[tmp[a][b]][c]\n\nprint(res)\n", "import math\nn =int(input())\nc=0\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n        d= math.gcd(i,j)\n        for k in range(1,n+1):\n            c+=math.gcd(d,k)\nprint(c)", "import math\nn=int(input());ans=0\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    r=math.gcd(i,j)\n    for k in range(1,n+1):\n      ans+=math.gcd(r,k)\nprint(ans)", "from math import gcd\n\nk=int(input())\nans=0\n\nfor a in range(1,k+1) :\n    for b in range(1,k+1) :\n        for c in range(1,k+1) :\n            ans+=gcd(gcd(a,b),c)\n\nprint(ans)\n", "k = int(input())\ndef gcd1 (a, b):\n    while True:\n        if (a < b):\n            a, b = b, a\n        c = a%b\n        if (c == 0):\n            return (b)\n        else:\n            a = b\n            b = c\n\ndef gcd2 (a, b, c):\n    tmp = gcd1(a, b)\n    ans = gcd1(tmp, c)\n    return (ans)\n\ncount = 0\nfor i in range(k):\n    for j in range(i, k):\n        for l in range(j, k):\n            tmp = gcd2(i + 1, j + 1, l + 1)\n            if (i == j == l):\n                count = count + tmp\n            elif (i == j or j == l):\n                count = count + tmp*3\n            else:\n                count = count + tmp*6\nprint(count)\n", "k = int(input())\nans = 0\nfrom math import gcd\nfor i in range(1,k+1):\n  for j in range(1,k+1):\n    for l in range(1,k+1):\n      ans += gcd(gcd(i,j),l)\nprint(ans)", "import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)\n", "from math import gcd\nK=int(input())\ng=0\nfor a in range(1,K-1):\n  for b in range(a+1,K):\n    for c in range(b+1,K+1):\n      g+=gcd(gcd(a,b),c)*6\nfor  d in range(1,K):\n  for e in range(d+1,K+1):\n    g+=gcd(d,e)*6\ng+=K*(K+1)//2\nprint(g)", "import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)", "import math\n\nk = int(input())\nans = 0\n\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        a = math.gcd(i,j)\n        for l in range(1,k+1):\n            ans += math.gcd(a,l)\n\nprint(ans)", "from math import gcd\n\nn = int(input())\n\nans = 0\n\n\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        for k in range(1, n + 1):\n            ans += gcd(gcd(i, j), k)\n\nprint(ans)\n", "import math\n\nK = int(input())\nans = sum(math.gcd(i, math.gcd(j, k)) for i in range(1, K+1) for j in range(1, K+1) for k in range(1, K+1))\nprint(ans)", "from math import gcd\n\n\ndef answer(k: int) -> int:\n    result = 0\n    for a in range(1, k + 1):\n        for b in range(1, k + 1):\n            temp = gcd(a, b)\n            for c in range(1, k + 1):\n                result += gcd(temp, c)\n\n    return result\n\n\ndef main():\n    k = int(input())\n    print((answer(k)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\nk = int(input())\nans = 0\nfor i in range(1, k + 1):\n  for j in range(1, k + 1):\n    g = gcd(i, j)\n    for k in range(1, k + 1):\n      ans += gcd(g, k)\nprint(ans)", "\n\nfrom math import gcd as g\n\n\nk = int(input())\nans = 0\nfor a in range(1, k+1):\n    for b in range(1, k+1):\n        temp = g(a, b)\n        for c in range(1, k+1):\n            ans += g(temp, c)\n\n\nprint(ans)\n", "import math\nk=int(input())\n\nans=0\nfor i in range(k):\n  for j in range(k):\n    q=math.gcd(i+1,j+1)\n    for l in range(k):\n      ans+=math.gcd(q,l+1)\nprint(ans)\n", "from math import gcd\nk = int(input())\nsum = 0\n\nfor a in range(1,k+1):\n    for b in range(1,k+1): \n        for c in range(1,k+1):\n            sum += gcd(gcd(a, b), c)\n\nprint(sum)", "n = int(input())\nmemo = [[0] * (n+1) for x in range(n+1)]\n\ndef gcd(x,y):\n  if y == 0:\n    return x\n  if not memo[x][y] == 0:\n    return memo[x][y]\n  memo[x][y] = gcd(y,x % y)\n  return gcd(y,x % y)\n\nres = 0\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    q = gcd(i,j)\n    if q == 1:\n      res += n\n    else:\n      for k in range(1,n+1):\n        p = gcd(q,k)\n        res += p\nprint(res)", "import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \ngcd = math.gcd\n\ndef main():\n    K = I()\n    ans = 0\n    D = Init(K+1, K+1, 0)\n    for i in range(1, K+1):\n        for j in range(i, K+1):\n            D[i][j] = gcd(i, j)\n\n    for i in range(1,K+1):\n        for j in range(i, K+1):\n            temp = D[i][j]\n            for k in range(j, K+1):\n                n = set([i,j,k])\n                n = len(n)\n                ans += D[temp][k] * (n+1)*(n)//2\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "def gcd_r(a, b):\n  if memo[a][b] != 0:\n    return memo[a][b]\n\n  if a < b:\n    a, b = b, a\n\n  memo[a][b] = gcd(a, b)\n  memo[b][a] = memo[a][b]\n  return memo[a][b]\n\ndef gcd(a, b):\n  r = a % b\n  if r == 0:\n    return b\n\n  return gcd(b, r)\n\nk = int(input())\nmemo = [[0]*(k+1) for _ in range(k+1)]\ntotal = 0\n\nfor i in range(1, k+1, 1):\n  for c in range(1, k+1, 1):\n    total += gcd_r(gcd_r(i, i), c)\n\nfor a in range(1, k+1, 1):\n  for b in range(a+1, k+1, 1):\n    for c in range(1, k+1, 1):\n      total += gcd_r(gcd_r(a, b), c) * 2\n\nprint(total)\n", "from math import gcd\ndef main():\n    ans = 0\n    k = int(input())\n    for i in range(k):\n        for j in range(k):\n            for l in range(k):\n                ans += gcd(i+1,gcd(j+1,l+1))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nk = int(input())\nans = 0\nfor a in range(1, k+1):\n    for b in range(a, k+1):\n        for c in range(b, k+1):\n            if a == b == c:\n                ans += math.gcd(math.gcd(a,b),c)\n            elif a == b or b == c or c == a:\n                ans += 3 * math.gcd(math.gcd(a, b), c)\n            else:\n                ans += 6 * math.gcd(math.gcd(a, b), c)\nprint(ans)", "from math import gcd\nK = int(input())\nans = 0\nfor a in range(1,K+1):\n    for b in range(1,K+1):\n        r = gcd(a,b)\n        for c in range(1,K+1):\n            ans += gcd(r,c)\nprint(ans)", "from math import gcd\nk=int(input())\nans=0\nfor i in range(1,k+1):\n    for j in range(1,k+1):\n        ans_=gcd(i,j)\n        for l in range(1,k+1):\n            ans+=gcd(ans_,l)\nprint(ans)", "import math\nK=int(input())\nans=0\nfor a in range(1,K+1):\n  for b in range(1,K+1):\n    g=math.gcd(a,b)\n    for c in range(1,K+1):\n      ans+=math.gcd(g,c)\nprint(ans)      ", "from math import gcd\nK=int(input())\nk=[1,1,1]\ng=0\nfor a in range(1,K+1):\n  for b in range(1,K+1):\n    for c in range(1,K+1):\n      g+=gcd(gcd(a,b),c)\n      \n      \nprint(g)", "from math import gcd\n\ndef main():\n    k = int(input())\n    ans = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for k in range(1, k+1):\n                ans += gcd(gcd(i, j), k)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "import math\nK =  int(input())\nans = []\nbc = [math.gcd(b, c) for b in range(1, K+1) for c in range(1, K+1)]\nfor a in range(1, K+1):\n    for i in bc:\n        x = math.gcd(a, i)\n        ans.append(x)\nprint(sum(ans))", "import math\ndef resolve():\n    k = int(input())\n    ans = 0\n    for a in range(1,k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                ans += math.gcd(math.gcd(a,b),c)\n    print(ans)\nresolve()", "import math\nn=int(input())\nans=0\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n        r=math.gcd(i,j)\n        for k in range(1,n+1):\n            ans+=math.gcd(r,k)\nprint(ans)", "\n\nimport math\nrst = 0\nK = int(input())\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(k, tmp)\nprint(rst)\n", "import math\nK = int(input())\nrst = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        tmp = math.gcd(i, j)\n        for k in range(1, K + 1):\n            rst += math.gcd(tmp, k)\nprint(rst)", "from math import gcd\nn = int(input())\nans = 0\n\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    x = gcd(i,j)\n    for k in range(1,n+1):\n        ans += gcd(x,k)\nprint(ans)\n", "from math import gcd\n\nk = int(input())\nresult = 0\n\nfor a in range(1, k+1):\n  for b in range(1, k+1):\n    for c in range(1, k+1):\n      result += gcd(gcd(a, b), c)\n\nprint(result)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nk = int(input())\nans = 0\nfor a in range(1, k + 1):\n    for b in range(a, k + 1):\n        for c in range(b, k + 1):\n            d = gcd(a, b)\n            if len({a, b, c}) == 1:\n                ans += gcd(c, d)\n            elif len({a, b, c}) == 2:\n                ans += 3 * gcd(c, d)\n            else:\n                ans += 6 * gcd(c, d)\nprint(ans)\n", "from math import gcd\nk = int(input())\nsum = 0\n\nfor a in range(1,k+1):\n    for b in range(1,k+1): \n        x = gcd(a,b)\n        for c in range(1,k+1):\n            sum += gcd(x, c)\n\nprint(sum)", "K = int(input())\nans = 0\ndef gcd(x,y):\n    if(y == 0):\n        return x\n    if(x >= y):\n        return gcd(y,x%y)\n    if(x < y):\n        return gcd(x,y%x)\nfor i in range(1,K+1):\n    ans += i\nfor i in range(1,K+1):\n    for j in range(i+1,K+1):\n        ans += gcd(i,j)*6\nfor i in range(1,K+1):\n    for j in range(i+1,K+1):\n        for k in range(j+1,K+1):\n            ans += gcd(gcd(i,j),k)*6  \nprint(ans)"]