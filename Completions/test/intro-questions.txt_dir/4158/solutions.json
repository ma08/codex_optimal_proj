["n = int(input())\npoints = set(int(x) for x in input().strip().split())\npowers = [2**i for i in range(31)]\n\nfor point in points:\n    for power in powers:\n        if point + power in points and point + power + power in points:\n            print(3)\n            print(point, point + power, point + power + power)\n            return\n\nfor point in points:\n    for power in powers:\n        if point + power in points:\n            print(2)\n            print(point, point + power)\n            return\n\nprint(1)\nprint(points.pop())\n", "def f():\n    k=int(input())\n    l=list(map(int,input().split()))\n    l=sorted(l)\n    d={}\n    for i,j in enumerate(l):\n        d[j]=i\n    n=1\n    s=''\n    while l[0]+n<=l[-1]:\n        for i in l:\n            if i+n in d and i+2*n in d:\n                print(3)\n                print(i,i+n,i+2*n)\n                return\n            elif i+n in d:\n                s=str(i)+' '+str(i+n)\n        n=n*2\n    if s=='':\n        print(1,l[0],sep='\\n')\n    else:\n        print(2,s,sep='\\n')\n        \n\nf()\n                \n", "import sys\nn=int(input())\nL=sorted(list(map(int,input().split())))\ndic=dict()\nss=set(L)\nans=[L[0]]\nfor i in range(n):\n    for j in range(32):\n        t=(1<<j)+L[i]\n        if t in ss:\n            ans=[L[i],t]\n            if t+(1<<j) in ss:\n                print(3)\n                print(L[i],t,t+(1<<j))\n                return\nprint(len(ans))\nfor i in ans:\n    print(i,end=\" \")\nprint()\n            \n            \n            \n        \n", "def is_power2(num):\n\treturn ((num & (num - 1)) == 0)\n\n\ndef maybeAdd(dot, peers):\n    for peer in peers:\n        if not is_power2(abs(dot - peer)):\n            return False\n    peers.append(dot)\n\nn = int(input())\ndots = list(map(int, input().split()))\nm = min(dots)\nM = max(dots)\n\nl = {}\nfor dot in dots:\n    l[dot] = True\n\nans = []\natt = []\n\nfor dot in dots:\n    att = [dot]\n    maxpow = max(abs(dot - m), abs(dot - M)).bit_length()\n\n    diff = 1\n    for pow in range(maxpow):\n        if dot - diff in l:\n            maybeAdd(dot - diff, att)\n        if dot + diff in l:\n            maybeAdd(dot + diff, att)\n        diff *= 2\n\n    if len(att) > len(ans):\n        ans = att\n\nprint(len(ans))\nprint(*ans)\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nn = int(input())\n\nx = set(rint())\nx_list = list(x)\nx_list.sort()\n#print(x)\n#print(x_list)\nmax_len = 1\nfor i in range(len(x_list)):\n    start = x_list[i]\n    for j in range(0, 1000):\n        candidate = [start]\n        next = start + 2**j\n        if next > x_list[-1]:\n            break\n        if next in x:\n            candidate.append(next)\n            next = start + 2**(j+1)\n            if next in x:\n                candidate.append(next)\n                print(3)\n                print(*candidate)\n                return\n            else:\n                ans = candidate\n                max_len = 2\n\nif max_len == 2:\n    print(2)\n    print(*ans)\nelse:\n    print(1)\n    print(x_list[0])\n\n\n\n\n", "n = int(input())\n*a, = list(map(int, input().split()))\n\ns = set(a)\n\ndef solve(x, s):\n\tp = 1\n\tret = [x]\n\tfor d in range(32):\n\t\tif x + p in s:\n\t\t\tif x + 2 * p in s:\n\t\t\t\treturn [x, x + p, x + 2 * p]\n\t\t\tif x - p in s:\n\t\t\t\treturn [x - p, x, x + p]\n\t\t\tret = [x, x + p]\n\t\telif x - p in s:\n\t\t\tif x - 2 * p in s:\n\t\t\t\treturn [x - 2 * p, x - p, x]\n\t\t\tret = [x - p, x]\n\t\tp *= 2\n\treturn ret\n\nbest = []\nfor x in a:\n\tbestx = solve(x, s)\n\tif len(bestx) > len(best):\n\t\tbest = bestx\nprint(len(best))\t\t\nprint(' '.join(map(str, best)))\n\n\n", "\n\n\nn = int(input())\na = []\n_2 = [1]\n\nFS = lambda x : x in S\n\ndef F(x):\n   l,r=0,len(a)-1\n   while l<r-1 :\n      mid = (l+r)>>1\n      if a[mid]==x :\n         return True\n      elif a[mid]<x:\n         l = mid+1\n      else :\n         r = mid-1\n   else :\n      return a[l]==x or a[r]==x\n\n\n\nfor i in range(30):\n   _2.append(_2[i]*2)\n#for i in _2:\n#   print(i)\n\nfor i in map(int,input().split()):\n   a.append(i)\n#a.sort()\nS = set(a)\n#for i in a:\n#   print(i)\n\n\nans = 1\nA = [0,a[0],0]\n\nfor i in a:\n   if ans == 3 :\n      break\n   for j in _2:\n      if ans == 3:\n         break;\n      if FS(i-j) :\n         if ans<=2 :\n            ans = 2\n            A[0] = i-j\n            A[1] = A[2] = i\n         if FS(i+j):\n            ans = 3\n            A[2] = i+j\n #           print(\"ans is \",i,j)\n            break\nprint(ans)\nif(ans==3):\n   print(*A)\nelse :\n   print(A[1],end=\" \")\n   if(ans==2):\n      print(A[0]+A[2]-A[1])\n   else :\n      print()\n", "n = int(input())\n\nnum = sorted(map(int, input().strip().split()))\n\npowers_of_2 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\n\nnum_dict = {}\nfor i in range(n):\n\tnum_dict[num[i]] = num[i]\n\nflag_two = False\nflag_three = False\n\ntwos = []\nthrees = []\n\nfor i in range(n):\n\tcurr = num[i]\n\tfor power in powers_of_2:\n\t\tif(num_dict.get(curr + power) is not None):\n\t\t\tflag_two = True\n\t\t\ttwos = []\n\t\t\ttwos.append(curr)\n\t\t\ttwos.append(curr + power)\n\n\t\t\tif(num_dict.get(curr + 2*power) is not None):\n\t\t\t\tflag_three = True\n\t\t\t\tthrees = []\n\t\t\t\tthrees.append(curr)\n\t\t\t\tthrees.append(curr + power)\n\t\t\t\tthrees.append(curr + 2*power)\n\t\t\t\tbreak\n\n\tif(flag_three):\n\t\tbreak\n\nif(flag_three):\n\tprint(\"3\")\n\tprint(\" \".join(map(str, threes)))\n\nelif(flag_two):\n\tprint(\"2\")\n\tprint(\" \".join(map(str, twos)))\n\nelse:\n\tprint(\"1\")\n\tprint(num[0])\n", "n = int(input())\nn1 = input().split()\n\nn2 = []\ns1 = set()\nfor x in n1:\n\tn2.append(int(x))\n\ts1.add(int(x))\n\nn2.sort()\n\nmaxy = n2[len(n2)-1]-n2[0]\n\ncount = 0\nnum = 1\n\nwhile(num<maxy):\n\tnum = num*2\n\tcount = count + 1\n\nflag = 0\nbase0 = 0\nbase1 = 0\nbase2 = -1\n\ncflag = 0\n\nfor x in n2:\n\tfor z in range(0, count+1):\n\t\t# print(z)\n\t\tif(x+2**z in s1):\n\t\t\tif(flag==0):\n\t\t\t\tflag = 1\n\t\t\t\tbase0 = x\n\t\t\t\tbase1 = x+2**z\n\t\t\tif(x+2**(z+1) in s1):\n\t\t\t\tcflag = 1\n\t\t\t\tbase0 = x\n\t\t\t\tbase1 = x+2**z\n\t\t\t\tbase2 = x+2**(z+1)\n\t\t\t\tbreak\n\tif(cflag==1):\n\t\tbreak\n\nif(cflag==1):\n\ts = \"3\\n\" + str(base0) + \" \" + str(base1) + \" \" + str(base2)\n\tprint(s)\nif(cflag==0 and flag==1):\n\ts = \"2\\n\" + str(base0) + \" \" + str(base1)\n\tprint(s)\nif(cflag==0 and flag==0):\n\ts = \"1\\n\" + str(n2[0])\n\tprint(s)", "st = set([])\nn = int(input())\narr = map(int, input().split())\nmaxn = int(1e9) \nans = 0\nlol1 = lol2 = 0\n\nfor i in arr:\n  st.add(i)\nfor i in st:\n  p = 1\n  while i+p<=maxn:\n    if i+p in st:\n      if i+p+p in st:\n        print(3)\n        print(i, end = \" \")\n        print(i+p, end = \" \")\n        print(i+p+p)\n        return\n      else:\n        ans = 2\n        lol1 = i\n        lol2 = i + p\n    p *= 2\nif ans == 2:\n  print(2)\n  print(lol1, end = \" \")\n  print(lol2)\nelse:\n  print(1)\n  print(st.pop())", "n = int(input())\na = [int(s) for s in input().split(' ')]\n\nbest_m = 1\nbest_res = []\nbest_res.append(a[0])\n\npowers = []\nfor i in range(31):\n    powers.append(2 ** i)\n\ns = set()\nfor i in range(n):\n    s.add(a[i])\n\nfor i in range(n):\n    if best_m == 3:\n        break\n    x = a[i]\n    for p in range(31):\n        d = powers[p]\n        if ((x - d) in s) and ((x + d) in s):\n            best_m = 3\n            best_res = [x - d, x, x + d]\n            break\n        if best_m >= 2:\n            continue\n        if ((x - d) in s):\n            best_m = 2\n            best_res = [x - d, x]\n            continue\n\n        if ((x + d) in s):\n            best_m = 2\n            best_res = [x, x + d]\n            continue\n\nprint(best_m)\nprint(\" \".join([str(x) for x in best_res]))", "n = int(input())\na = [int(x) for x in input().split()]\na = sorted(a)\nflag = 0\nimport bisect\nfor i in range(0,n):\n    for j in range(0,31):\n        b = a[i] + 2**j\n        p = bisect.bisect_left(a,b)\n        if p < n:\n            if a[p] == b:\n                a1 = a[i]\n                b1 = b\n                flag = 100\n                c = a[i] + 2*2**j\n                q = bisect.bisect_left(a,c)\n                if q < n:\n                    if a[q] == c:\n                        flag = 200\n                        break\n    if flag == 200:\n        break\nif flag == 0:\n    print(1)\n    print(a[0])\nelif flag == 100:\n    print(2)\n    print(a1,b1)\nelse:\n    print(3)\n    print(a[i],b,c)", "n = int(input())\nlistNum = sorted(list(map(int, input().split())))\nsetNum = set(listNum)\npowTwo = list([2**x for x in (list(range(0, 32)))])\nfound2 = False\nfound3 = False\nres = [0, 0, 0]\nfor powNum in powTwo:\n  for num in listNum:\n    if (found3):\n        break\n    if (num + powNum) in setNum:\n      found2 = True\n      if (found3 == False):\n        res[0] = num\n        res[1] = num + powNum\n      if num + 2*powNum in setNum:\n        found3 = True\n        res[0] = num\n        res[1] = num + powNum\n        res[2] = num + 2 * powNum\nif (found3):\n    print(3)\n    print(res[0], res[1], res[2])\nelif (found2):\n    print(2)\n    print(res[0], res[1])\nelse:\n    print(1)\n    print(listNum[0])\n", "n = int(input())\n\nnum = sorted(map(int, input().strip().split()))\n\npowers_of_2 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\n\nnum_dict = {}\nfor i in range(n):\n\tnum_dict[num[i]] = num[i]\n\nflag_two = False\nflag_three = False\n\ntwos = []\nthrees = []\n\nfor i in range(n):\n\tcurr = num[i]\n\tfor power in powers_of_2:\n\t\tif(num_dict.get(curr + power) is not None):\n\t\t\tflag_two = True\n\t\t\ttwos = []\n\t\t\ttwos.append(curr)\n\t\t\ttwos.append(curr + power)\n\n\t\t\tif(num_dict.get(curr + 2*power) is not None):\n\t\t\t\tflag_three = True\n\t\t\t\tthrees = []\n\t\t\t\tthrees.append(curr)\n\t\t\t\tthrees.append(curr + power)\n\t\t\t\tthrees.append(curr + 2*power)\n\t\t\t\tbreak\n\n\tif(flag_three):\n\t\tbreak\n\nif(flag_three):\n\tprint(\"3\")\n\tprint(\" \".join(map(str, threes)))\n\nelif(flag_two):\n\tprint(\"2\")\n\tprint(\" \".join(map(str, twos)))\n\nelse:\n\tprint(\"1\")\n\tprint(num[0])\n", "visit=dict()\nexist=dict()\nn=int(input())\nx=sorted(map(int,input().split()))\nlimit=max(x)\nfor n,i in enumerate(x): exist[i]=n+1\nans,ans2=1,[x[0]]\nfor i in range(len(x)):\n  if visit.get(x[i],0): continue\n  j=1\n  while x[i]+j<=limit:\n    visit[x[i]+j]=True\n    if exist.get(x[i]+j,0):\n      if ans==1:\n        ans=2\n        ans2=[x[i],x[i]+j]\n      if j!=1 and exist.get(x[i]+j//2,0):\n        print(3)\n        print(x[i]+j,x[i],x[i]+j//2)\n        return\n    j*=2\n\nif ans==2:\n  print(2)\n  print(ans2[0],ans2[1])\nelse:\n  print(1)\n  print(x[0])", "n = int(input())\nnums = list(map(int, input().split(' ')))\n\nnums = sorted(nums)\n\npower = [2**i for i in range(33)]\n\n\ndef search(x):\n    low = 0\n    high = len(nums)\n\n    while low < high-1:\n        mid =  (low+high)//2\n        if x > nums[mid]:\n            low = mid\n        elif x < nums[mid]:\n            high = mid\n        elif x == nums[mid]:\n            return x\n    return None\n\n\n\nbest = []\nfor i in power:\n\n    for j in nums:\n        result = []\n        result.append(j)\n        if search(j + i) is not None:\n            result.append(j + i)\n        if search(j + 2*i) is not None:\n            result.append(j + 2*i)\n\n        if len(result) > len(best):\n            best = result\n\n\n\n\nprint(len(best))\nprint(' '.join(map(str, best)))\n\n\n\n", "def main():\n\tt = int(input())\n\ta = [int(x) for x in input().split()]\n\tp2 = [2**i for i in range(32)]\n\tdic = {}\n\tfor e in a:\n\t\tdic[e] = 1\n\ta.sort()\n\tans = []\n\tfor i in a:\n\t\tfor j in p2:\n\t\t\tif dic.get(i+j):\n\t\t\t\tif not ans:\n\t\t\t\t\tans = [i,i+j]\n\t\t\t\tif dic.get(i+j*2):\n\t\t\t\t\tprint(3)\n\t\t\t\t\tprint(i,i+j,i+j*2)\n\t\t\t\t\treturn\n\tif ans:\n\t\tprint(2)\n\t\tprint(ans[0],ans[1])\n\telse:\n\t\tprint(1)\n\t\tprint(a[0])\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n=int(input())\na=set(map(int,input().split()))\nans=[]\nf=0\nfor i in a:\n    c=1\n    for p in range(31):\n        if(i+c in a):\n            ans=[i,i+c]\n            if(i+c*2 in a):\n                print(3)\n                print(i,i+c,i+c*2)\n                f=1\n                break\n        c*=2\n    if(f):\n        break\nif(f==0):\n    if(ans):\n        print(2)\n        print(*ans)\n    else:\n        print(1)\n        print(min(a))", "n=int(input())\na=(set(map(int,input().split())))\nans=[]\nf=0\nfor i in a:\n    c=1\n    for p in range(31):\n        if(i+c in a):\n            ans=[i,i+c]\n            if(i+c*2 in a):\n                print(3)\n                print(i,i+c,i+c*2)\n                f=1\n                break\n        c*=2\n    if(f):\n        break\nif(f==0):\n    if(ans):\n        print(2)\n        print(*ans)\n    else:\n        print(1)\n        print(min(a))\n", "n=int(input())\ns=set(map(int,input().split()))\nm=max(s)\np=0\nfor x in s:\n d=1\n while x+d<=m:\n  y=x+d\n  if y in s:\n   p=x,y\n   if y+d in s:\n    print(3);print(x,y,y+d);return\n  d*=2\nif p:\n print(2);print(*p)\nelse:print('1\\n'+str(m))", "def check(n,numsDone):\n\tcurrDist = 1\n\tcurrLen = 1\n\tcurrAns = [n]\n\twhile (n + currDist <= 10**9) or (n - currDist >= -10**9):\n\t\tif (n+currDist) in numsDone and (n-currDist) in numsDone:\n\t\t\tcurrLen = 3\n\t\t\tcurrAns = [n-currDist,n,n+currDist]\n\t\t\tbreak\n\t\telif (n+currDist) in numsDone:\n\t\t\tcurrLen = 2\n\t\t\tcurrAns = [n,n+currDist]\n\t\telif (n-currDist) in numsDone:\n\t\t\tcurrLen = 2\n\t\t\tcurrAns = [n-currDist,n]\n\t\tcurrDist = currDist << 1\n\treturn currAns\n\n\nn = int(input())\nnums = list(map(int, input().split()))\ncurrLen = 1\ncurrAns = [nums[0]]\nnumsDone = set(nums)\n\nfor i in nums:\n\ttemp = check(i,numsDone)\n\t# print(i)\n\t# print(temp)\n\tif len(temp) > currLen:\n\t\tcurrLen = len(temp)\n\t\tcurrAns = temp\n\tif len(temp) == 3:\n\t\tbreak\n\nprint(currLen)\nprint(*currAns)", "from bisect import bisect as bs\nt = [0] * int(input())\na = sorted(map(int, input().split()))\ng = lambda x: a[bs(a, x) - 1] == x\nfor _, x in enumerate(a):\n    for i in range(31):\n        l = x - 2 ** i\n        r = x + 2 ** i\n        t[_] = max(t[_], g(l) + g(r))\nm = max(t)\nif m == 2:\n    print(3)\n    _ = t.index(2)\n    x = a[_]\n    for i in range(31):\n        l = x - 2 ** i\n        r = x + 2 ** i\n        if g(l) and g(r):\n            print(l, x, r)\n            return\nif m == 1:\n    print(2)\n    _ = t.index(1)\n    x = a[_]\n    for i in range(31):\n        l = x - 2 ** i\n        r = x + 2 ** i\n        if g(l):\n            print(l, x)\n            return\n        if g(r):\n            print(x, r)\n            return\nprint(1)\nprint(a[0])\n", "import sys\nn=int(input())\ns=list(map(int,input().split()))\nst=set()\nfor i in s:\n    st.add(i)\np=set()\npw=[]\nfor i in range(31):\n    p.add(2**i)\n    pw.append(2**i)\nfor i in range(n):\n    for j in range(len(pw)):\n        if s[i]+pw[j] in  st:\n            if s[i]-pw[j] in st:\n                print(3)\n                print(s[i]-pw[j] ,s[i],s[i]+pw[j])\n                return\n            if s[i]+pw[j]+pw[j] in st:\n                print(3)\n                print(s[i],s[i]+pw[j] ,s[i]+pw[j]+pw[j])\n                return\n        if s[i]-pw[j] in  st:\n            if s[i]+pw[j] in st:\n                print(3)\n                print(s[i]-pw[j] ,s[i],s[i]+pw[j])\n                return\n            if s[i]-pw[j]-pw[j] in st:\n                print(3)\n                print(s[i],s[i]-pw[j] ,s[i]-pw[j]-pw[j])\n                return\nfor i in range(n):\n    for j in range(len(pw)):\n        if s[i]+pw[j] in  st:\n            print(2)\n            print(s[i],s[i]+pw[j])\n            return\n        if s[i]-pw[j] in  st:\n            print(2)\n            print(s[i],s[i]-pw[j])\n            return\nprint(1)\nprint(s[0])\n", "n=int(input())\nar=set(map(int,input().split()))\n\nMax = max(ar)\nans=()\nflag=0\nfor i in ar:\n    j=1\n    while i+j<=Max:\n        if i+j in ar:\n            ans=(i,i+j)\n            flag=1\n            if i+2*j in ar:\n                print(\"3\")\n                print(i,i+j,i+2*j)\n                return\n        j*=2\nif flag==1:\n    print(\"2\")\n    print(*ans)\nelse:\n    print(\"1\")\n    print(Max)", "def read_numbers():\n  return (int(s) for s in input().strip().split(' '))\n\n# keys_set = {128, 1, 2, 256, 4, 512, 1024, 2048, 8, 4096, 32768, 131072, 524288, 262144, 8192, 1048576, 16, 16384, 4194304, 32, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 64, 65536, 2097152}\n# keys = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\nkeys = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\n\ndef main():\n  _ = input()\n  dots = set(read_numbers())\n  # print(keys)\n  # print(dots)\n\n  max_res = []\n\n  for dot in dots:\n    for dist in keys:\n      res = [dot]\n      d1 = dot - dist\n      d2 = dot + dist\n      if d1 in dots:\n        res.append(d1)\n      if d2 in dots:\n        res.append(d2)\n      \n      if len(res) > len(max_res):\n        max_res = res\n      \n      if len(max_res) == 3:\n        print(len(max_res))\n        print(' '.join(str(n) for n in max_res))\n        return\n\n  print(len(max_res))\n  print(' '.join(str(n) for n in max_res))\n  \n\n\ndef __starting_point():\n  main()\n__starting_point()"]