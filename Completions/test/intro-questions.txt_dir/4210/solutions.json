["inp = input().split()\nn = int(inp[0])\nk = int(inp[1])\n\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\n\n# End of Input\n\nbank  = {}\n\n# Preparation\nfor i in range(n):\n    arg = (len(str(a[i])),a[i]%k)\n    #print(\"Detect:\",arg)\n    bank[arg] = bank.get(arg,0)+1\n\nans = 0\n# Query\nfor i in range(n):\n    ten = 1\n    for j in range(1,11):\n        ten*=10\n        frontMod = (a[i]*ten)%k\n        #print(\"FRONT MOD:\",frontMod)\n        req = (k-frontMod)%k\n        #print(\"WANT:\",req)\n\n        got = bank.get((j,req),0)\n        ans += got\n\n# Deal with Same Index\nfor i in range(n):\n    cur = str(a[i])\n    cur = cur*2\n    tst = int(cur)\n    if(tst%k==0):\n        ans-=1\n\n# Print Answer\nprint(ans)", "n, k = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nrda = []\nfor j in range(12):\n    rd = dict()\n    x = pow(10, j)\n    for i in range(n):\n        r = (a[i]*x)%k\n        rd[r] = rd.setdefault(r, 0) + 1\n    rda.append(rd)\nans = 0\nfor i in range(n):\n    r = a[i]%k\n    ln = len(str(a[i]))\n    x = pow(10, ln)\n    if r == 0: r = k\n    if k-r in rda[ln]:\n        ans += rda[ln][k-r]\n        if (a[i]*x)%k == k-r:\n            ans -= 1\nprint(ans)\n", "from math import log10\nfrom collections import Counter\n\nn,k=[int(x) for x in input().split()]\nlst=[int(x) for x in input().split()]\nlst2=[]\n\nfor i in range(n):\n    lst2.append(((lst[i]%k),len(str(lst[i]))))\n\ndp = [[] for i in range(12)]\nfor j in lst2:\n    dp[j[1]].append(j[0])\nfor i in range(12):\n    if len(dp[i]) > 0:\n        dp[i] = Counter(dp[i])\nans = 0\nfor i in lst:\n    for j in range(2, 12):\n        v1 = ((i%k) * pow(10, j-1))%k\n        if (k - v1)%k in  dp[j-1]:\n            ans=ans+dp[j-1][(k-v1)%k]\nfor i in lst:\n    if int(str(i)+str(i))%k==0 :\n        ans=ans-1\nprint(ans)\n\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsz = []\nt = [1] * 11\n\ncnt = dict()\nfor i in range(n):\n    sz.append(len(str(a[i])))\n    tmp = (sz[i], a[i] % k)\n    if tmp in cnt:\n        cnt[tmp] += 1\n    else: \n        cnt[tmp] = 1\n        \nt[0] = 1        \nfor i in range(1, 11):\n    t[i] = (t[i - 1] * 10) % k\n        \nans = 0\nfor i in range(n):\n    for l in range(1, 11):\n        cur = (k - a[i] * t[l]) % k\n        tmp = (l, cur)\n        if tmp in cnt:\n            ans += cnt[tmp] \n        if (sz[i] == l and cur == a[i] % k):\n            ans -= 1\nprint(ans)", "n, k = map(int, input().split())\na = input().split()\nmods = [dict() for i in range(10)]\nl = [0] * n\nfor i in range(n):\n    l[i] = len(a[i])\n    a[i] = int(a[i]) % k\n    cur = a[i]\n    for j in range(10):\n        cur = cur * 10 % k\n        mods[j][cur] = mods[j].get(cur, 0) + 1\nans = 0\nfor i in range(n):\n    mod = (k - a[i]) % k\n    ans += mods[l[i] - 1].get(mod, 0)\n    cur = a[i]\n    for j in range(l[i]):\n        cur = cur * 10 % k\n    if cur == mod:\n        ans -= 1\nprint(ans)", "rd = lambda: list(map(int, input().split()))\n\n(n, k), a = rd(), rd()\n\ndef proceed(a):\n    nonlocal n, k\n    \n    b = [{} for _ in range(11)]\n    \n    ans = 0\n    for i in range(n - 1, 0, -1):\n        cur = a[i] % k\n        ln = len(str(a[i]))\n    \n        if cur not in b[ln]:\n            b[ln][cur] = 0\n        b[ln][cur] += 1\n    \n        for j in range(11):\n            cur = (k - a[i - 1] * 10 ** j % k) % k\n            ans += b[j][cur] if cur in b[j] else 0\n    return ans\n    \n\nprint(proceed(a) + proceed(a[::-1]))", "def main():\n    n, k = list(map(int, input().split()))\n    aa, cn1, cn2, sz, res = [], {}, {}, {}, 0\n    for w in input().split():\n        a = int(w)\n        if a in cn1:\n            cn1[a] += 1\n        else:\n            cn1[a] = 1\n            sz[a] = len(w)\n    for a, v in list(cn1.items()):\n        t = (sz[a], a % k)\n        cn2[t] = cn2.get(t, 0) + v\n    scale1 = [10 ** i + 1 for i in range(11)]\n    scale2 = [1 - s for s in scale1]\n    for a, v in list(cn1.items()):\n        for s in range(1, 11):\n            x = a * scale2[s] % k\n            res += cn2.get((s, x), 0) * v\n        if not a * scale1[sz[a]] % k:\n            res -= v\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, k = map(int, input().split())\n    aa, cnt, res = [], {}, 0\n    scale = [10 ** i + 1 for i in range(11)]\n    for w in input().split():\n        a, s = int(w), len(w)\n        aa.append(a)\n        if not a * scale[s] % k:\n            res -= 1\n        t = (s, a % k)\n        cnt[t] = cnt.get(t, 0) + 1\n    scale = [1 - i for i in scale]\n    for a in aa:\n        for s in range(1, 11):\n            x = a * scale[s] % k\n            res += cnt.get((s, x), 0)\n    print(res)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nrem = dict()\n\npow10 = [10**j for j in range(11)]\n\nans = 0\n\nfor ai in a:\n    key = len(str(ai))\n    if key not in rem:\n        rem[key] = dict()\n    if ai % k not in rem[key]:\n        rem[key][ai % k] = 0\n    rem[key][ai % k] += 1\n\nfor ai in a:\n    for j in range(1, 11):\n        if j in rem:\n            key = (-(ai * pow10[j])) % k\n            if key in rem[j]:\n                ans += rem[j][key]\n\nfor ai in a:\n    if int(str(ai) + str(ai)) % k == 0:\n        ans -= 1\n\nprint(ans)\n", "def main():\n    n, k = list(map(int, input().split()))\n    aa, cnt, res = [], {}, 0\n    scale = [10 ** i + 1 for i in range(11)]\n    for w in input().split():\n        a, s = int(w), len(w)\n        aa.append(a)\n        if not a * scale[s] % k:\n            res -= 1\n        t = (s, a % k)\n        cnt[t] = cnt.get(t, 0) + 1\n    scale = [1 - i for i in scale]\n    for a in aa:\n        for s in range(1, 11):\n            x = a * scale[s] % k\n            res += cnt.get((s, x), 0)\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\nn,k=[int(x) for x in input().split()]\nlst=[int(x) for x in input().split()]\nlst2=[]\n\nfor i in range(n):\n    lst2.append(((lst[i]%k),len(str(lst[i]))))\n\ndp = [[] for i in range(12)]\nfor j in lst2:\n    dp[j[1]].append(j[0])\nfor i in range(12):\n    if len(dp[i]) > 0:\n        dp[i] = Counter(dp[i])\nans = 0\n\nfor i in lst:\n    for j in range(2, 12):\n        v1 = ((i%k) * pow(10, j-1))%k\n        if (k - v1)%k in  dp[j-1]:\n            ans=ans+dp[j-1][(k-v1)%k]\n\nfor i in lst:\n    if int(str(i)+str(i))%k==0 :\n        ans=ans-1\n\nprint(ans)", "n, k = list(map(int, input().split()))\nnums = list(map(int, input().split()))\ncounts = [{} for _ in range(11)]\nfor n in nums:\n    a = n\n    for i in range(11):\n        r = a % k\n        try:\n            counts[i][r] += 1\n        except KeyError:\n            counts[i][r] = 1\n        a *= 10\nres = 0\nfor i in nums:\n    wo = str(i)\n    le = len(wo)\n    mimo = (k-(i % k)) % k\n    if mimo in counts[le]:\n        res += counts[le][mimo]\n        if int(wo+wo) % k == 0:\n            res -= 1\nprint(res)\n", "n,m=list(map(int,input().split()))\narr=list(map(int,input().split()))\ncnt=[0]*12\nfor i in range(12):\n    cnt[i]={}\nfor i in range(n):\n    t=arr[i]\n    l=0\n    while(t>0):\n        t=t//10\n        l+=1\n    key=arr[i]%m\n    if key in cnt[l]:\n        cnt[l][key]+=1\n    else:\n        cnt[l][key]=1\nans=0\nfor i in range(n):\n    t=arr[i]\n    l=0\n    while(t>0):\n        t=t//10\n        l+=1\n    ky=arr[i]%m\n    cnt[l][ky]-=1\n    mul=10\n    c=1\n    while c<=11:\n        key=(m-(mul*arr[i])%m)%m\n       # print(key,c,arr[i]*mul)\n        if key in cnt[c]:\n           # print(\"*\",cnt[c][key])\n            ans+=cnt[c][key]\n        c+=1\n        mul*=10\n    cnt[l][ky]+=1\nprint(ans)\n\n", "from collections import defaultdict\nfrom string import ascii_lowercase\nfrom sys import stdin, stdout\ninput = stdin.readline\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    mod = [defaultdict(int) for i in range(11)]  # number length 1-10, 1-indexed\n    for val in a:\n        mod[len(str(val))][val % k] += 1\n\n    pairs = 0\n    for val in a:\n        for _len in range(1, 11):\n            mod1 = (val * 10**_len) % k\n            mod2 = k - mod1 if mod1 != 0 else 0\n            pairs += mod[_len][mod2]\n            if len(str(val)) == _len and val % k == mod2:\n                pairs -= 1\n    print(pairs)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "rd=lambda:list(map(int,input().split()))\nn,k=rd()\na=rd()\np=[0]*12\nsz=[0]*(n+5)\np[0]=1\nr=[{} for _ in range(11)]\nfor i in range(1,11):\n    p[i]=(10%k*p[i-1])%k;\n\nfor i in range(n):\n    tmp=a[i]\n    ct=len(str(a[i]))\n    sz[i]=ct\n    if a[i]%k not in r[ct]:\n        r[ct][a[i]%k]=1\n    else:\n        r[ct][a[i]%k]+=1\n    \n\nans=0\nfor i in range(n):\n    rm=a[i]%k\n    for j in range(1,11):\n        req=(k-(rm*p[j])%k)%k\n        if req in r[j]:\n            ans+=r[j][req]\n        if((req==rm) and (sz[i]==j)):\n            ans-=1\n\nprint(ans)\n        \n    \n", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nD=[Counter() for i in range(11)]\nfor a in A:\n    for j in range(1,11):\n        D[j][a*(10**j)%k]+=1\n\nANS=0\nfor a in A:\n    L=len(str(a))\n    x=-a%k\n\n    if a*(10**L)%k==x:\n        ANS-=1\n\n    ANS+=D[L][x]\n\nprint(ANS)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    l = len(str(a[i]))\n    y = a[i] % k\n    d[(l, y)] = d.get((l, y), 0) + 1\n\nres = 0\nfor i in range(n):\n    for j in range(1, 11):\n        cur = a[i] * int(pow(10, j))\n        cur_l = len(str(a[i]))\n        cur_y = a[i] % k\n        y = cur % k\n        if (j, (k - y) % k) in d:\n            #print(a[i], cur, j, d[(j, (k-y)%k)])\n            res += d[(j, (k-y)%k)]\n            if (cur_l, cur_y) == (j, (k-y)%k):\n                res -= 1\nprint(res)\n", "try:\n    while True:\n        n, k = list(map(int, input().split()))\n        arr = list(map(int, input().split()))\n        dic = {}\n        for idx in range(n):\n            l = len(str(arr[idx]))\n            r = arr[idx] % k\n            dic[(l, r)] = dic.get((l, r), 0) + 1\n        res = 0\n        for i in range(n):\n            for j in range(1,11):\n                cur = arr[i] * int(pow(10, j))\n                cr = cur % k\n                l = len(str(arr[i]))\n                r = arr[i] % k\n                res += dic.get((j, (k-cr) % k), 0) - ( (l, r)  == (j, (k-cr) % k))\n        print(res)\nexcept Exception as e:\n        pass\n", "from collections import Counter\nc=[Counter() for i in range(11)]\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [[] for i in range(11)]\n\nfor j in range(n):\n\n    b[len(str(a[j]))].append(a[j])\n    for i in range(1, 11):\n        r=(a[j] * (10 ** i))%k\n        c[i][r]+=1\ns = 0\nfor i in range(11):\n    y = b[i]\n    for j in range(len(y)):\n        p = y[j] % k\n        if p == 0:\n            p = k\n        p = k - p\n        r = y[j] * (10 ** i) + y[j]\n        if r % k == 0:\n            s += c[i][p] - 1\n        else:\n            s += c[i][p]\n\nprint(s)", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=[]\nfor i in range(11):\n    c={}\n    for j in range(n):\n        d=(a[j]*(10**i))%k\n        if d in c.keys():\n            c[d]+=1\n        else:\n            c[d]=1\n    b.append(c)\n\ns=0\nfor i in range(n):\n    c=a[i]%k\n    d=(k-c)%k\n    if d in b[len(str(a[i]))]:\n        s+=b[len(str(a[i]))][d]\n    if (a[i]*(10**len(str(a[i]))))%k==d:\n        s-=1\nprint(s)", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=[]\nfor i in range(11):\n    c={}\n    for j in range(n):\n        d=(a[j]*(10**i))%k\n        if d in c.keys():\n            c[d]+=1\n        else:\n            c[d]=1\n    b.append(c)\n \ns=0\nfor i in range(n):\n    c=a[i]%k\n    d=(k-c)%k\n    if d in b[len(str(a[i]))]:\n        s+=b[len(str(a[i]))][d]\n    if (a[i]*(10**len(str(a[i]))))%k==d:\n        s-=1\nprint(s)"]