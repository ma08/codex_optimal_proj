["R=int(input())\nprint(R*2*3.141592)", "import math\nR=float(input())\nr=2*math.pi*R\nprint(r)", "import math\nr=int(input())\nprint(2*r*math.pi)", "def resolve():\n    pi = 3.14159265\n    r = int(input())\n    print(2*r*pi)\nresolve()", "from math import *\nr=int(input())\nprint(2*pi*r)", "import math\nprint(2*math.pi*int(input()))", "print(int(input())*2*3.14159265)", "R = float(input())\nprint(2*3.141592*R)", "import math\nR = int(input())\nans = 2.0*math.pi*R\nprint(ans)", "R = int(input())\nprint(2*R* 3.141592)", "import math\nr = int(input())\npond = 2*math.pi*r\nprint(pond)", "a = int(input())\n\nn = 3.141592\n\n\nprint((a + a) * n)", "R = int(input())\nL = 2*R*3.141592\nprint(L)\n", "import math\n\nr = int(input())\nprint((2*r*math.pi))\n", "def main():\n    import math\n    n = int(input())\n    ans = 2 * math.pi * n\n    return ans\n\n\ndef __starting_point():\n    print((main()))\n\n__starting_point()", "from math import pi\n#a = list(map(int, input().rstrip().split()))\nn=int(input())\nprint(n*2*pi)", "import numpy\n\nprint((int(input())*2*numpy.pi))\n", "import math\np=math.pi\nr=int(input())\n\nprint(2*r*p)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nR = ni()\nprint(2 * R * math.pi)", "import math\n\nr = int(input())\nprint(2*math.pi*r)", "import math\nr = int(input())\n\nprint((math.pi*r*2))\n", "import math\nprint(int(input())*2*math.pi)", "r = int(input())\nimport math \nans = 2 * math.pi * r\nprint(ans)", "import math\nr=int(input())\nprint(2*r*math.pi)", "import math\nprint(int(input())*math.tau)", "r = int(input())\n\nprint((r * 3.1416 * 2))\n", "r = int(input())\nimport math\nans = 2*r*math.pi\nprint(ans)", "import numpy as np\n\np = np.pi\nr = int(input())\nprint(2*p*r)", "import math\nR = int(input())\nprint (math.pi * 2 * R)", "import sys\nimport math\n\nR = int(input())\n\nprint(2 * math.pi * R)", "# coding: utf-8\n# Your code here!\nimport math\n\nR = int(input())\n\nprint(R*2*math.pi)", "#ABC163\nR = int(input())\n#----------\u4ee5\u4e0a\u5165\u529b----------\nimport math\nprint(2*R*math.pi)", "import math\nr = int(input())\n\nprint((2*r*math.pi))\n", "import math\nR = int(input())\nprint(2*R*math.pi)", "r = float(input())\n\npi = float('3.1415926535897932384626')\ns = 2 * r * pi\n\nprint(s)", "import math\nr = int(input())\nx = float(2*r*math.pi)\nprint(x)", "# coding: utf-8\n# Your code here!\n\nr = int(input())\n\nans = r * 2 * 3.14159265359\nprint(ans)", "import math\nR=int(input())\nprint(2*math.pi*R)", "import math\n\nr = int(input())\nprint((2 * r * math.pi))\n", "import math\n\n\ndef main() -> None:\n    r = int(input())\n\n    print((2 * r * math.pi))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a=int(input())\nprint(2*3.1416*a)", "import numpy as np\n\nR = int(input())\n\nprint((2 * np.pi * R))\n", "import math\nprint(2*math.pi*int(input()))", "from math import pi\nr = float(input())\nprint(str(2 * r * pi))", "#ABC163\nR = int(input())\n#----------\u4ee5\u4e0a\u5165\u529b----------\nimport numpy as np\nprint(2*R*np.pi)", "import math\n\nprint((int(input()) * 2 * math.pi))\n", "import numpy as np\n\nR = int(input())\n\nprint(R * 2 * np.pi)", "r = int(input())\nprint((2 * r * 3.1415926535))\n", "R = int(input())\nprint(2 * R * 3.1415926535)", "print(2 * float(input()) * 3.14159)", "import math\nprint(int(input())*2*math.pi)", "import math\nr=int(input())\nans_for=2*math.pi*r\nprint((float(ans_for)))\n", "def N():\n    return int(input())\ndef L():\n    return list(map(int,input().split()))\ndef NL(n):\n    return [list(map(int,input().split())) for i in range(n)]\nmod = pow(10,9)+7\n\n#import numpy as np\nimport sys\nimport math\nimport collections\n\nn = N()\nprint(2*n*math.pi)", "import math\nr=float(input())\nprint(2*r*math.pi)", "import math\nR = int(input())\nprint(2*R*math.pi)", "import math\nr = int(input())\nprint(r*2*math.pi)", "import numpy as np\nr=int(input())\nprint(2*np.pi*r)", "import math\nr = int(input())\nans = math.pi * 2 * r\nprint(ans)\n \n", "import math\n\nr = int(input())\nans = 2 * math.pi * r\nprint(ans)", "from decimal import Decimal\n\nr = int(input())\npie = Decimal('3.14159')\n\nprint(2 * pie * r)", "import math\nprint((int(input()) * math.pi * 2.0))\n", "import math\n\np=math.pi\nr = int(input())\nprint(2*r*p)", "import math \nr = int(input())\nprint((math.pi*r*2))\n", "import numpy as np\n\nR = int(input())\nprint(2 * np.pi * R)", "# 163 A\nimport math\nmath.pi\n\nR = int(input())\nprint(2*R*math.pi)", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf, pi\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nr = int(input())\n\ntmp = 0\nres = 0\n\nres = 2 * r * pi\n\nprint(res)\n", "import math \nr = int(input())\n\nans = 2 * r * math.pi\nprint(ans)", "r = int(input())\nprint(2*3.141592*r)", "import math\nr = int(input())\n\nprint((math.pi*2*r))\n", "\nimport math\n\nr = int(input())\n\nr_t = r*2\n\n\nprint(math.pi * r_t)", "import math\nR = int(input())\nprint(2*math.pi*R)", "from math import pi\n\ninteger = int(input())\n\nprint(2 * integer * pi)", "import numpy as np\nR=int(input())\ncircle=float(R*2*np.pi)\nprint(circle)\n", "import math\ndef __starting_point():\n\n    r = int(input())\n    print(2*r*math.pi)\n__starting_point()", "from math import pi\nr = int(input())\nprint(2*r*pi)", "import math\nR=int(input())\nprint(2*R*math.pi)", "import math\nR = int(input())\n\nprint(2*math.pi*R)", "import math\nr = int(input())\nprint(2*math.pi*r)", "from math import pi\nprint(int(input())*2*pi)", "import math\n\nR = int(input())\nprint (2 * R * math.pi)", "from math import pi\n\nR = int(input())\n\nprint(2*R*pi)", "import math\nR = int(input())\nprint(2*R*math.pi)", "import math\nr = int(input())\nprint(2*r*math.pi)", "r = int(input())\nprint((r * 6.28318530717958623200))\n", "import math\nprint(2*math.pi*int(input()))", "import numpy as np\nr= float(input())\nprint(r*2*np.pi)", "import math\n\nr = int(input())\na = 2*math.pi*r\nprint(a)", "r = int(input())\n\nprint((2 * r * 3.1415926535))\n"]