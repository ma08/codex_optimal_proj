["s = input()\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')", "S=input()\nif S==\"ARC\":\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n", "s = input()\n\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n", "s = input()\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "S=input()\nif S[1]=='B':\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s=input()\nif s=='ABC':\n  print('ARC')\nelse:\n  print('ABC')", "s = input()\n\nif s == \"ABC\" :\n    print(\"ARC\")\n\nelif s == \"ARC\" :\n    print(\"ABC\")", "s = input()\n\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "S = input()\nif(S == \"ABC\"):print(\"ARC\")\nelse:print(\"ABC\")   ", "s = input()\n\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "x = input()\nif x[1] == 'B':\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "s=input()\nif s==\"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n", "s = input()\nif s == 'ABC':\n  print('ARC')\nelse:\n  print('ABC')", "# coding: utf-8\n# Your code here!\nS = input()\n\nif S == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "a = input()\n\nif a == \"S\" :\n    print(\"\u4eca\u9031\u958b\u50ac\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u51fa\u529b\u305b\u3088\u3002\")\nelif a == \"ABC\":\n    print(\"ARC\")\nelse :\n    print(\"ABC\")", "S = input()\nif S == 'ABC':\n  print('ARC')\nelse:\n  print('ABC')", "s=input()\nif s==\"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s = input()\n\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "s = input()\n\nif s == \"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "S = input()\nif S[1] == \"R\":\n    print(\"ABC\")\nelse:\n    print(\"ARC\")", "S = input()\nif(S == \"ABC\"):\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s=input()\n\nif s==\"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "print(\"ABC\" if input()==\"ARC\" else \"ARC\")", "s = input()\nprint(\"ABC\" if s == \"ARC\" else \"ARC\")", "s = str(input())\nif s==\"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "S = str(input())\nif S == 'ABC':\n  print('ARC')\nelse:\n  print('ABC')", "s = input()\nprint(\"ABC\" if s == \"ARC\" else \"ARC\")", "print(f\"A{'RB'['R'in input()]}C\")", "print(\"ARC\" if input()[1]==\"B\" else \"ABC\")", "a=input()\nif a==\"ABC\":\n  \tprint(\"ARC\")\nelse:\n  print(\"ABC\")", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\ns = input()\n\ntmp = 0\nres = \"ABC\"\n\nif s == \"ABC\":\n    res = \"ARC\"\n\nprint(res)\n", "#!/usr/bin/env python3\ns  = input()\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n", "S=input()\n\nif S=='ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "print(input().translate(str.maketrans({\"R\":\"B\",\"B\":\"R\"})))", "S = input()\nif S == \"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "s = input()\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s=input();print(\"ABC\"if s==\"ARC\"else\"ARC\")", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys  # {{{\nimport os\nimport time\nimport re\nfrom pydoc import help\nimport string\nimport math\nfrom operator import itemgetter\nfrom collections import Counter\nfrom collections import deque\nfrom collections import defaultdict as dd\nimport fractions\nfrom heapq import heappop, heappush, heapify\nimport array\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom copy import deepcopy as dcopy\nimport itertools\n# }}}\n\n# pre-defined{{{\nsys.setrecursionlimit(10**7)\nINF = 10**20\nGOSA = 1.0 / 10**10\nMOD = 10**9+7\nALPHABETS = [chr(i) for i in range(ord('a'), ord('z')+1)]  # can also use string module\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef DP(N, M, first): return [[first] * M for n in range(N)]\ndef DP3(N, M, L, first): return [[[first] * L for n in range(M)] for _ in range(N)]\nfrom inspect import currentframe\n# }}}\n\ndef solve():\n    s = input()\n    if s == \"ABC\":\n        print(\"ARC\")\n    else:\n        print(\"ABC\")\n\n    return 0\n\ndef __starting_point():# {{{\n    solve()\n\n# vim: set foldmethod=marker: }}}\n\n__starting_point()", "print('ARC' if input()!='ARC' else 'ABC')", "#!/usr/bin/env python3\ns  = input()\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n", "s=input()\n\nif s.find('B')==1:\n  print('ARC')\nelse:\n  print('ABC')", "S = input()\nprint('ABC' if S == 'ARC' else 'ARC')", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys  # {{{\nimport os\nimport time\nimport re\nfrom pydoc import help\nimport string\nimport math\nfrom operator import itemgetter\nfrom collections import Counter\nfrom collections import deque\nfrom collections import defaultdict as dd\nimport fractions\nfrom heapq import heappop, heappush, heapify\nimport array\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom copy import deepcopy as dcopy\nimport itertools\n# }}}\n\n# pre-defined{{{\nsys.setrecursionlimit(10**7)\nINF = 10**20\nGOSA = 1.0 / 10**10\nMOD = 10**9+7\nALPHABETS = [chr(i) for i in range(ord('a'), ord('z')+1)]  # can also use string module\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef DP(N, M, first): return [[first] * M for n in range(N)]\ndef DP3(N, M, L, first): return [[[first] * L for n in range(M)] for _ in range(N)]\nfrom inspect import currentframe\n# }}}\n\ndef solve():\n    s = input()\n    if s == \"ABC\":\n        print(\"ARC\")\n    else:\n        print(\"ABC\")\n\n    return 0\n\ndef __starting_point():# {{{\n    solve()\n\n# vim: set foldmethod=marker: }}}\n\n__starting_point()", "S=input()\nif S == \"ABC\":print(\"ARC\")\nelse : print(\"ABC\")", "s = input()\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')", "S = input()\n\nif S == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')", "a = input()\nif a =='ABC':\n    print('ARC')\nelse:\n    print('ABC')", "S = input()\n\nprint('ABC') if S == 'ARC' else print('ARC')\n", "S = input()\nprint('ARC' if S == 'ABC' else 'ABC')", "S = input()\n\nif S == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n\n", "s = input()\nif s == 'ARC':\n  print('ABC')\nelse:\n  print('ARC')", "s = input()\nif s == 'ARC':\n  print('ABC')\nelse:\n  print('ARC')", "word = input()\nif word == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "S = input()\nif S == 'ABC':\n    print('ARC')\n    return\nelse:\n    print('ABC')\n    return", "n = input()\n\nif n == 'ABC':\n    print('ARC')\n\nif n == 'ARC':\n    print('ABC')\n", "s = input()\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "S = input();print('ARC') if S=='ABC' else print('ABC')", "S=input()\nif S==\"ABC\":\n    print(\"ARC\")\nelse:print(\"ABC\")", "s = input()\n\nif s == \"ARC\":\n    print(\"ABC\")\nelse:\n    print(\"ARC\")", "def inN():\n    return int(input())\ndef inL():\n    return list(map(int,input().split()))\ndef inNL(n):\n    return [list(map(int,input().split())) for i in range(n)]\nmod = pow(10,9)+7\n#import numpy\ns = input()\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s = input()\n\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "s = input()\nif(s == 'ABC'):\n    print('ARC')\nelse:\n    print(\"ABC\")    \n", "s = input()\n\nif s == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s = input()\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')\n", "print(\"A%sC\"%'BR'[input()<\"AR\"])", "S = input()\n\nprint((*({\"ABC\", \"ARC\"} - {S})))\n", "S=input()\nif S=='ABC':\n    print('ARC')\nelse:\n    print('ABC')", "s=input()\n\nif s.find('B')==1:\n  print('ARC')\nelse:\n  print('ABC')", "s = input()\n\nif s == 'ARC':\n    print('ABC')\nelse:\n    print('ARC')\n", "S = input()\nif S == 'ABC':\n  print('ARC')\nelse:\n  print('ABC')\n", "s = input()\n\nif s == \"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "S = input()\n\nif S == \"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "S = str(input())\nif S == 'ABC':\n  print('ARC')\nelse:\n  print('ABC')", "print({\"ABC\":\"ARC\",\"ARC\":\"ABC\"}[input()])", "s = input()\n\nif (s==\"ABC\"):\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s = input()\nif s == 'ABC':\n    print('ARC')\nelif s == 'ARC':\n    print('ABC')", "def main() -> None:\n    s = input()\n\n    print(('ARC' if s == 'ABC' else 'ABC'))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = list(input())\n\nif s[1] == 'B':\n    print('ARC')\nelse:\n    print('ABC')", "s = input()\n\nif s == 'ABC':\n    print('ARC')\n    \nelse :\n    print('ABC')", "s = input()\nprint(\"ABC\" if s == \"ARC\" else \"ARC\")", "S = input()\nprint(\"ARC\") if S==\"ABC\" else print(\"ABC\")", "S=input()\nif S=='ABC':\n  print('ARC')\nelse:\n  print('ABC')\n", "print(['ARC','ABC'][input()[1]=='R'])", "S = input()\nif S == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')   ", "#ABC166\nS = input()\n#----------\u4ee5\u4e0a\u5165\u529b----------\nif S == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')", "print(('ABC' if input()[1] == 'R' else 'ARC'))\n", "S = input()\n\nif S == \"ABC\":\n    print(\"ARC\")\n\nelse:\n    print(\"ABC\")\n", "s=input()\nprint('ARC') if s=='ABC' else print('ABC')", "def __starting_point():\n\n    s = input()\n    if s == \"ARC\":\n        print(\"ABC\")\n    else:\n        print(\"ARC\")\n\n__starting_point()", "s = input()\nif s == 'ABC' :\n    print('ARC')\nelse :\n    print('ABC')", "s=input()\nif s==\"ABC\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "s = input()\n\nif s[1] == \"B\":\n    print(\"ARC\")\nelse:\n    print(\"ABC\")", "S=input()\nif S=='ABC':\n    print('ARC')\nelse:\n    print('ABC')", "string = input()\n\nif string == \"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "s=input()\n\nif s.find('B')==1:\n  print('ARC')\nelse:\n  print('ABC')", "print(*({\"ABC\",\"ARC\"}-{input()}))", "print('ARC' if (input()=='ABC') else 'ABC')", "S = input()\nif S[1] == \"B\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "S = input()\nif S == \"ABC\":\n  print(\"ARC\")\nelse:\n  print(\"ABC\")", "S = input()\n\nprint('ABC') if S == 'ARC' else print('ARC')"]