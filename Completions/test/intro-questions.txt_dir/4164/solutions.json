["r=int(input())\nprint(r**2)", "x = int(input())\nprint((x*x))\n", "print(int(input())**2)", "r = int(input())\nprint(r**2)", "# coding: utf-8\n# Your code here!\n\nr=int(input())\nprint(r**2)", "r=int(input())\nprint(r**2)", "print(int(input()) ** 2)", "r=int(input())\nprint(r**2)", "r=int(input())\nprint(r**2)", "r  = int(input())\nprint(r*r)", "R = int(input())\nprint(R**2)", "print(int(input())**2)", "r = int(input())\n\nprint(r**2)", "a = int(input())\nprint(a ** 2)", "n=int(input())\nprint(n**2)", "print(int(input())**2)", "r = int(input())\nprint(r*r)", "r=int(input())\nprint(int(r**2))", "r = int(input())\nprint(int(r*r))", "n = int(input())\nprint(n**2)", "r = input()\nprint(int(r) ** 2)", "r=int(input())\nprint((r**2))\n", "N = int(input())\nprint(int(N**2))", "r = int(input())\nprint(r*r)", "print(int(input())**2)", "r = int(input())\n\nprint(r * r)", "r = int(input())\n\nprint(r**2)", "print(int(input())**2)", "r = int(input())\nprint((r * r))\n", "def resolve():\n    n = int(input())\n    print(n**2)\nresolve()", "r = int(input())\nprint(r*r)", "r = int(input())\nprint(r**2)", "r = int(input())\n\nprint(r**2)", "r = int(input(\"\"))\nprint(r**2)", "print(int(input())**2)", "r=int(input())\nr**=2\nprint(r)", "r = int(input())\nprint(r ** 2)", "n = int(input())\nprint(n*n)", "print((int(input()) ** 2))\n", "n = int(input())\n\nprint(n ** 2)", "x = int(input())\ny = x * x\nprint(y)", "print(int(input())**2)", "n = int(input())\nprint(n ** 2)", "a = int(input())\nprint(a ** 2)", "r = int(input())\n\nprint(r*r)", "r=int(input())\nprint(r**2)", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(500000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef solve():\n    r = int(input())\n    print((r * r))\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "r = int(input())\nprint(r**2)", "r = int(input())\nprint(r**2)", "r = int(input())\nprint(r*r)", "r=int(input())\nprint(pow(r,2))", "n = int(input())\nprint(n**2)", "r = int(input())\nprint(r**2)", "r=int(input())\nprint(r**2)", "r = int(input())\nprint(r * r)", "r = int(input())\nprint(r**2)", "r = int(input())\n\nprint(r*r)", "r = int(input())\nprint((r ** 2))\n", "print(int(input())**2)", "r = int(input())\nprint(r * r)", "r = int(input())\nprint(r**2)", "n=int(input())\nprint(n**2)", "r = int(input())\nprint(r ** 2)", "print(int(input())**2)", "print(int(input())**2)", "print(int(input())**2)", "print(int(input())**2)", "print(int(input())**2)", "r = int(input() )\nprint(r*r)", "n=int(input())\nprint(n**2)", "\n\nr=int(input())\n\nprint(r**2)", "x =int(input())\nprint(x**2)", "print(int(input())**2)", "r = int(input())\n\nprint(r ** 2)", "r = int(input())\nprint(r * r)", "r=int(input())\nprint((r**2))\n", "print(int(input())**2)", "r = int(input())\nprint(r**2)", "#\n# abc145 a\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"100\"\"\"\n        output = \"\"\"10000\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    r = int(input())\n\n    print((r**2))\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "r = int(input())\nprint(r*r)", "#145-A\n\nr = int(input())\n\nprint((r**2))\n", "r = int(input())\nprint(r**2)", "r = int(input())\nprint(r*r)", "print((int(input())**2))\n", "r = int(input())\n\nprint(r*r)", "str = input()\nprint(int(str)**2)", "print(int(input())**2)", "r=int(input())\nprint(r*r)", "r=int(input())\nprint(r*r)", "a=int(input())\nprint((int(a**2)))\n", "a=int(input())\nprint(a * a)", "r = int(input())\nprint(r**2)", "r = int(input())\nprint(r**2)", "r=int(input())\nprint(r*r)", "n = int(input())\nprint(n**2)", "r = int(input())\nprint(r ** 2)", "print(int(int(input())**2))", "print(int(input())**2)", "r=int(input())\nprint(r**2)"]