["import itertools\nimport bisect\n\nN = int(input())\nNums = [str(n) for n in range(1, N+1)]\n\np = int(''.join([n for n in input().split()]))\nq = int(''.join([n for n in input().split()]))\n\nper = itertools.permutations(Nums)\n\nnumlist = sorted([int(''.join(list(s))) for s in per])\n\na = bisect.bisect_left(numlist, p)\nb = bisect.bisect_left(numlist, q)\n\nprint(abs(a-b))", "import math\n\ndef calc(lst):\n    ans = 0\n    aft = []\n    for i in range(N):\n        kurai = lst[i]\n        aft.append(kurai)\n\n        for j in aft:\n            if j < lst[i]:\n                kurai -= 1\n        \n            \n        ans = ans + (kurai - 1)*math.factorial(N-(i+1))\n\n    return ans + 1\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\nans = abs(calc(P) - calc(Q))\nprint(ans)", "import itertools\nN = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\nls = [ x for x in itertools.permutations(range(1, N + 1)) ]\na = [ key for key, val in enumerate(ls) if P == val ][0] + 1\nb = [ key for key, val in enumerate(ls) if Q == val][0] + 1\nprint(abs(a - b))", "import itertools\nN = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\nls = [ i for i in itertools.permutations(range(1, N + 1)) ]\na = [ idx for idx, val in enumerate(ls) if val == P ][0] + 1\nb = [ idx for idx, val in enumerate(ls) if val == Q ][0] + 1\nprint(abs(a - b))", "import itertools\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\nls = list(itertools.permutations(range(1, n + 1)))\nprint(abs(ls.index(p) - ls.index(q)))", "import itertools\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\nP = tuple(itertools.permutations(range(1, n+1)))\n\nprint(abs(P.index(p) - P.index(q)))", "import itertools\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\nS = [i for i in range(1, N+1)]\n\nperm = list(itertools.permutations(S))\nans = []\nfor i, p in enumerate(perm):\n    if list(p) == P or list(p) == Q:\n        ans.append(i+1)\n\nif len(ans) > 1:\n    print(abs(ans[0] - ans[1]))\nelse:\n    print(0)", "import itertools\ndef calc_cnt(nums,n):\n    ans=1\n    data=[str(i) for i in range(1,n+1)]\n    for x in itertools.permutations(data):\n        if \" \".join(x)==nums:\n            return ans\n        ans+=1\n    return ans\n\ndef main():\n    n=int(input())\n    p=input()\n    q=input()\n    p_cnt=calc_cnt(p,n)\n    q_cnt=calc_cnt(q,n)\n    ans=abs(p_cnt-q_cnt)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "import itertools\nn = int(input())\nN = list(i for i in range(1,n+1))\nL = itertools.permutations(N,n)\na = tuple(map(int,input().split()))\nb = tuple(map(int,input().split()))\ncnt, s, e = 0, 0, 0\n\nfor l in L:\n  cnt += 1\n  if a == l:\n    s = cnt\n  if b == l:\n    e = cnt\nprint((abs(s-e)))\n\n", "import itertools\nimport copy\nn = int(input())\nP = list(map(int, input().split()))\nQ = tuple(list(map(int, input().split())))\nP_ = copy.copy(P)\nP_.sort()\np_list = list(itertools.permutations(P_))\nP = tuple(P)\n\na = p_list.index(P)\nb = p_list.index(Q)\n\nprint(abs(a-b))", "from itertools import permutations\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\ncount = 0\nfor i in permutations(sorted(P)):\n    if(list(i) == P):\n        a = count\n    if(list(i) == Q):\n        b = count\n    count += 1\nprint((abs(a-b)))\n", "import itertools\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(map(int, input().split()))\ndef i_row(N): return [int(input()) for _ in range(N)]\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\n\nn=i_input()\npp=tuple(i_list())\nqq=tuple(i_list())\na,b=-1,-1\nfor i, rr in enumerate(itertools.permutations(range(1, n + 1))):\n    if a==-1 and pp==rr:\n        a=i\n    if b==-1 and qq==rr:\n        b=i\n    if a!=-1 and b!=-1:\n        break\nprint(abs(a-b))", "import itertools\nn = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\nl = [i for i in range(1,n+1)]\np = itertools.permutations(l, n)\ni = 0\n\nfor v in itertools.permutations(l, n):\n    i += 1\n    if(v == P) :\n        a = i\n    if(v == Q) :\n        b = i\nprint(abs(a-b))", "import itertools\n\nN=int(input())\nP=list(map(int,input().split()))\nQ=list(map(int,input().split()))\na=[i+1 for i in range(N)]\nx=0\ny=0\ni=0\nfor b in itertools.permutations(a):\n    if list(b)==P:\n        x=i\n    if list(b)==Q:\n        y=i\n    i+=1\nprint((abs(x-y)))\n", "import itertools\n\nn = int(input())\n\np = tuple([int(s) for s in input().split()])\nq = tuple([int(s) for s in input().split()])\n\nlst = list(itertools.permutations(list(range(1, n + 1))))\nprint(abs(lst.index(p) - lst.index(q))) ", "import itertools\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nl = [i+1 for i in range(N)]\nfor i, tpl in enumerate(itertools.permutations(l, N)):\n    if tpl == P:\n        a = i\n    if tpl == Q:\n        b = i\nprint(abs(a-b))", "import itertools\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\npattern = list(itertools.permutations(list(range(1,n+1))))\n\n\na = 0\nb = 0\n\nfor x in pattern:\n  new_x = list(x)\n  if new_x == p:\n    a = pattern.index(x)\n  if new_x == q:\n    b = pattern.index(x)\n\n\nprint((abs(a-b)))\n", "import itertools\n\nn=int(input())\np=list(map(int,input().split()))\nq=list(map(int,input().split()))\n\na=[]\nfor i in range(1,n+1):\n        a.append(i)\nb=[]\nfor v in itertools.permutations(a, n):\n        b.append(v)\n\nx=0\nfor j in b:\n        if list(j)==p:\n              x=b.index(j)\ny=0\nfor k in b:\n        if list(k)==q:\n                y=b.index(k)\n\nprint(abs(x-y))", "N,P,Q=open(0);*P,=map(int,P.split());*Q,=map(int,Q.split())\nf=lambda i:i*f(i-1)if i else 1\ng=lambda l:(l[0]-1)*f(len(l)-1)+g([e-1if e>l[0]else e for e in l[1:]])if l else 0\nprint(abs(g(P)-g(Q)))", "import sys\nread = sys.stdin.read\n#readlines = sys.stdin.readlines\nfrom itertools import permutations\ndef main():\n    n = int(input())\n    p = \"\".join(input().split())\n    q = \"\".join(input().split())\n\n    chars = [str(i) for i in range(1, n + 1)]\n    per = list(permutations(chars, n))\n    per_str = [\"\".join(pere) for pere in per]\n    per_str.sort()\n    p_pos = per_str.index(p)\n    q_pos = per_str.index(q)\n    ans = abs(p_pos - q_pos)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import itertools\n\nN = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\np = list(itertools.permutations(range(1,N+1)))\na = p.index(P)\nb = p.index(Q)\nprint(abs(a-b))", "import itertools\nn = int(input())\np = [int(i)-1 for i in input().split()]\nq = [int(i)-1 for i in input().split()]\nm = sorted(p)\na = 0\nb = 0\ncnt = 1\n#print(p,q)\nfor i in itertools.permutations(m, n):\n  #print(list(i))\n  if list(i) == p:\n    a += cnt\n  if list(i) == q:\n    b += cnt\n  if a!=0 and b!=0:\n    break\n  else:\n    cnt += 1\n    \nprint(abs(a-b))", "import itertools\nimport math\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\np_no, q_no = 0, 0\n\nper = [c+1 for c in range(n)]\nper_list = list(itertools.permutations(per))\n\nfor i in range(math.factorial(n)):\n    if p == per_list[i]:\n        p_no = i\n    if q == per_list[i]:\n        q_no = i\n\nprint(abs(p_no - q_no))", "N = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\nimport itertools\nl = list(itertools.permutations(range(1,N+1)))\n\na = 0\nb = 0\n\nfor i in range(len(l)):\n    s = [i for i in l[i]]\n\n    if s == p:\n        a = i \n    if s == q:\n        b = i \n        \nprint(abs(a-b))", "from itertools import permutations\nn=int(input())\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\nP=sorted(list(permutations(range(1,n+1),n)))\nprint(abs(P.index(p)-P.index(q)))", "import math\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nremain_p = sorted(p)\nremain_q = sorted(q)\na = 0\nb = 0\nfor i in range(n):\n\ta += math.factorial(n - (i + 1)) * (remain_p.index(p[i]) + 1) - 1\n\tb += math.factorial(n - (i + 1)) * (remain_q.index(q[i]) + 1) - 1\n\tremain_p.remove(p[i])\n\tremain_q.remove(q[i])\n\nans = a - b\nif ans >= 0:\n\tprint(ans)\nelse:\n\tprint((-ans))\n", "from itertools import permutations\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, p in enumerate(permutations(list(range(1, N+1)))):\n    if p == P:\n        a = i\n    if p == Q:\n        b = i\nprint((abs(a-b)))\n", "import itertools\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\nL = [ i for i in range(1, N + 1)]\nK = list(itertools.permutations(L))\nK.sort()\np, q = 0, 0\n\nfor i in range(len(K)):\n    if list(K[i]) == P:\n        p = i\n    if list(K[i]) == Q:\n        q = i\n\nprint(abs(p - q))", "import itertools\nn = int(input())\np = tuple(map(int,input().split()))\nq = tuple(map(int,input().split()))\na = list(itertools.permutations(list(range(1,n+1))))\npp,qq = 0,0\nfor i,j in enumerate(a):\n  if p == j:\n    pp = i\n  if q == j:\n    qq = i\nprint(abs(pp-qq))", "N = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\ndef kaijo(x):\n  ans = 1\n  for i in range(x):\n    ans = ans * (i + 1)\n  return ans\n\ndef junban(dic):\n  order = 1\n  used = []\n  for i in range(N):\n    minus = 1\n    \n    for j in used:\n      if dic[i] > j:\n        minus += 1\n    order += (dic[i] - minus) * kaijo(N - i - 1)\n    used.append(dic[i])\n  \n  return(order)\n\nPorder = junban(P)\nQorder = junban(Q)\n\nif Porder >= Qorder:\n  print(Porder - Qorder)\nelse:\n  print(Qorder - Porder)", "N=int(input())\nP=tuple(map(int,input().split()))\nQ=tuple(map(int,input().split()))\n\nimport itertools\nP_list = list(itertools.permutations(P, len(P)))\nP_list.sort()\np=P_list.index(P)\nq=P_list.index(Q)\nprint(abs(p-q))", "#https://atcoder.jp/contests/abc150/tasks/abc150_c\n\nfrom itertools import permutations\n\nb= int(input())\nc= []\n\nd= list(map(int, input().split()))\ne= list(map(int, input().split()))\n\nfor a in range(1, b+1):\n    c.append(a)\n\nc= list(map(str, range(1, b+1)))\n\n#print(c)\nd= ''.join(map(str, d))\ne= ''.join(map(str, e))\n\nf= list(map(''.join, permutations(c, b)))\n#print(f)\n\nD= f.index(d)\nE= f.index(e)\nif(D>E):\n    print(D-E)\nelse:\n    print(E-D)", "import numpy as np\nfrom itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\npermu = [i for i in range(1, n+1)]\npermu = permutations(permu, n)\n\nfor i, s in enumerate(permu):\n    if p == s:\n        a = i+1\n    if q == s:\n        b = i+1\n\nprint((abs(a-b)))\n", "n = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\nqueue = [[]]\nlst = []\n\nwhile queue:\n  e = queue.pop(-1)\n  if len(e) == n:\n    lst.append(tuple(e))\n    continue\n  for i in range(1,n+1):\n    if i not in e:\n      queue.append(e+[i])\n\nlst.sort()\nprint((abs(lst.index(P) - lst.index(Q))))\n\n\n", "import math\n\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\na = 0\nb = 0\n\nfor i in range(0,n,1):\n    a += (p[i]-1)*math.factorial(n-i-1)\n    b += (q[i]-1)*math.factorial(n-i-1)\n    for  j in range(i+1,n,1):\n        if p[j] > p[i]:\n            p[j] -= 1\n        if q[j] > q[i]:\n            q[j] -= 1\n\nprint(abs(a-b))", "import itertools\n\nN = int(input())\nN_list = [i for i in range(1,N+1)]\n\nP = list(itertools.permutations(N_list))\nP.sort()\n\nQ = tuple(map(int, input().split()))\nO = tuple(map(int, input().split()))\n\nQ_number = P.index(Q) + 1\nO_number = P.index(O) + 1\n\nprint((abs(Q_number - O_number)))\n\n\n", "import itertools\n\nN = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\nX = list(itertools.permutations(P))\nX.sort()\n\na = X.index(P)\nb = X.index(Q)\n\n\nprint(abs(a-b))", "from itertools import permutations\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\ndictionary = list(permutations(list(range(1, N+1))))\na = dictionary.index(P)\nb = dictionary.index(Q)\nprint((abs(a-b)))\n", "import math\n\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\ndef library_number(x,n):\n  l = list(range(1,n+1))\n  tmp = 0\n  for i in range(n):\n    tmp += math.factorial(n-1-i)*l.index(x[i])\n    l.remove(x[i])\n  return tmp\n\nans = abs(library_number(p,n) - library_number(q,n))\nprint(ans)", "import itertools\n\nN = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\np = list(itertools.permutations(range(1,N+1)))\na = p.index(P) + 1\nb = p.index(Q) + 1\nprint(abs(a-b))", "import itertools\nn=int(int(input()))\na=[i+1 for i in range(n)]\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\nc=0\nd=0\ne=0\nfor i in itertools.permutations(a,n):\n    c+=1\n    if p==i:\n        d=c\n    if q==i:\n        e=c\nprint(abs(d-e))", "import itertools\n\nn = int(input())\n\np = tuple(map(int, input().split()))\n\nq = tuple(map(int, input().split()))\n\nans = list(itertools.permutations(p))\n\nans.sort()\n\np = ans.index(p)\n\nq = ans.index(q)\n\nprint(abs(p - q))", "import itertools\n\nN = int(input())\nl = list(itertools.permutations(range(1,N+1)))\n\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\n\nprint(abs(l.index(A) - l.index(B)))", "import itertools\nN = int(input())\nP = tuple([int(i) for i in input().split()])\nQ = tuple([int(i) for i in input().split()])\nperm = sorted(list(itertools.permutations(P)))\nprint(abs(perm.index(P)-perm.index(Q)))", "import itertools\nn = int(input())\ns = \"\"\nfor i in range(n):\n  s += str(i+1)\nl = list(itertools.permutations(s, n))\np = tuple(input().split())\nq = tuple(input().split())\na = l.index(p)\nb = l.index(q)\nprint(abs(a-b))", "# coding: utf-8\n\ndef check(A):\n    tmp = 0\n    first = A[0]\n    A.pop(0)\n    for i in A:\n        if i < first:\n            tmp += 1\n    return tmp\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    con = [1, 1, 2, 6, 24, 120, 720, 5040, 40320]\n\n    a, b = 0, 0\n\n    for i in range(N, 0, -1):\n        a += con[i - 1] * check(P)\n        b += con[i - 1] * check(Q)\n\n    print((abs(a - b)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import factorial as fac\n\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n\ndef F(List):\n  ans = 1\n  L = len(List)\n  nums = list(range(1,N+1))\n  for i in range(L):\n    ans += fac(L-i-1)*(nums.index(List[i]))\n    nums.remove(List[i])\n  return ans\n\nprint(abs(F(P)-F(Q)))", "import itertools \nimport math\n\nN=int(input())\nP=tuple(map(int,input().split()))\nQ=tuple(map(int,input().split()))\n\nl=[x for x in range(1,N+1)]\nlst=list(itertools.permutations(l))\n\nprint(abs(lst.index(P)-lst.index(Q)))", "import itertools\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\ni = 1\na = 0\nb = 0\nfor l in itertools.permutations(list(range(1, N+1))):\n    if ''.join([str(n) for n in P]) == ''.join([str(n) for n in l]):\n        a = i\n    if ''.join([str(n) for n in Q]) == ''.join([str(n) for n in l]):\n        b = i\n    i += 1\nprint((abs(a-b)))\n", "import itertools\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nl = [i+1 for i in range(n)]\n\nperm_li = [v for v in itertools.permutations(l)]\n\nprint((abs(perm_li.index(p) - perm_li.index(q))))\n           \n", "from itertools import permutations\n\nN = int(input())\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\n\nperm = permutations(range(1,N+1),N)\ncnt = 1\ncount_a = 0\ncount_b = 0\n\nfor p in perm:\n    if p == A:\n        count_a = cnt\n    if p == B:\n        count_b = cnt\n    cnt += 1\n\nprint(abs(count_a - count_b))", "import itertools\nN = int(input())\nperm = [ x for x in itertools.permutations(range(1, N + 1)) ]\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\na = [ idx for idx, val in enumerate(perm) if val == P ][0] + 1\nb = [ idx for idx, val in enumerate(perm) if val == Q ][0] + 1\nprint(abs(a - b))", "from itertools import permutations\nn = int(input())\np = input().replace(\" \",\"\")\nq = input().replace(\" \",\"\")\n\nc = permutations([i for i in range(1,n+1)],n)\nfor i,a in enumerate(c):\n    num = \"\".join(map(str,a))\n    # print(num)\n    if p==num:pi=i+1\n    if q==num:qi=i+1\nprint(abs(pi-qi))", "def cal_A(num):\n    ans = 1\n    for i in range(num,0,-1):\n        ans *= i\n    print(ans)\n\ndef cal_B(num):\n    ans = 1\n    for i in range(num,0,-1):\n        ans *= i\n    ans = ans // num\n    return ans\n\ndef cal_C(list_a):\n    ans = 0\n    for i in list_a:\n        target_list1 = list_a[list_a.index(i):]\n        target_list2 = sorted(target_list1)\n        a = int(target_list2.index(i))\n        ans += a * cal_B(len(target_list1))\n    return ans + 1\n\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n\nprint(abs(cal_C(P) - cal_C(Q)))", "import math\nimport itertools\ndef i_input(): return int(input())\n\n\ndef i_map(): return map(int, input().split())\n\n\ndef i_list(): return list(map(int, input().split()))\n\n\ndef i_row(N): return [int(input()) for _ in range(N)]\n\n\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\n\nn=i_input()\npp=tuple(i_list())\nqq=tuple(i_list())\nnumls=[i for i in range(1,n+1)]\npatters=list(itertools.permutations(numls,n))\nfor i in range(len(patters)):\n    if pp==patters[i]:\n        nmP=i\n    if qq==patters[i]:\n        nmQ=i\nprint(abs(nmQ-nmP))", "from collections import deque\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\nque = deque([[i] for i in range(1, N+1)])\nlst = []\n\nwhile que:\n  seq = que.popleft()\n  if len(seq) == N:\n    lst.append(seq)\n  else:\n    for j in range(1, N+1):\n      if j not in seq:\n        que.append(seq + [j])\n\nprint(abs(lst.index(P) - lst.index(Q)))", "n = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nimport math\n\ndef dic_order(a):\n    b =[x for x in range(1, n+1)] \n    cnt = 1\n    for i in range(n - 1):\n        cnt += b.index(a[i]) * math.factorial(n - i - 1)\n        b.remove(a[i])\n    return cnt\n\np_order = dic_order(p)\nq_order = dic_order(q)\nprint(abs(p_order - q_order))", "import itertools\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nq = list(itertools.permutations(range(1,n+1)))\nans = 0\nfor i in range(len(q)):\n    cnt_1 = 0\n    cnt_2 = 0\n    if ans == 2:\n        break\n    for j in range(n):\n        if a[j] == q[i][j]:\n            cnt_1 += 1\n        if b[j] == q[i][j]:\n            cnt_2 += 1\n    if cnt_1 == n:\n        c = i+1\n        ans+= 1\n    if cnt_2 == n:\n        d = i+1\n        ans += 1\nprint(abs(c-d))", "import itertools\n\ndef count_order():\n    # \u5165\u529b\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    # \u51e6\u7406\n    permutations_list = itertools.permutations(x for x in range(1,N+1))\n    count = 0\n    for one_case in permutations_list:\n        count += 1\n        for i in range(len(one_case)):\n            if one_case[i] == P[i]:\n                # a = count\n                is_ok_P = True\n            else:\n                is_ok_P = False\n                break\n        if is_ok_P:\n            a = count\n        for i in range(len(one_case)):\n            if one_case[i] == Q[i]:\n                is_ok_Q = True\n            else:\n                is_ok_Q = False\n                break\n        if is_ok_Q:\n            b = count\n    return abs(a-b)\n\nresult = count_order()\nprint(result)", "import itertools\n\n\nN = int(input())\nperm = list(itertools.permutations(list(range(1, N + 1))))\na = tuple(list(map(int, input().split())))\nb = tuple(list(map(int, input().split())))\n\nprint(abs(perm.index(a) - perm.index(b)))", "from itertools import *\n \nN = input()\nP = tuple(input().split(\" \"))\nQ = tuple(input().split(\" \"))\n\na = 0\nb = 0\nc = 0\nfor p in permutations([str(i) for i in range(1, int(N)+1)]):\n  if p==P:\n    a = c\n  if p==Q:\n    b = c\n  c += 1\nprint(abs(a-b))", "import itertools\n\nn=int(input())\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\n\ndict=list(itertools.permutations(list(range(1,n+1))))\nprint((abs(dict.index(p)-dict.index(q))))\n", "import itertools\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n\nn = [i+1 for i in range(N)]\n\na = 0\nb = 0\ni = 0\nfor x in itertools.permutations(n):\n    if list(x) == P:\n        a = i\n    if list(x) == Q:\n        b = i\n    i += 1\n\nprint(abs(a - b))", "import sys\nfrom itertools import permutations\nN = int(input())\ntarget_list = []\nfor i in range(2):\n  target_list.append(tuple(map(int,input().split())))\n  \nlist=[_ + 1 for _ in range(N)]\nper=permutations(list,N)\n\nans = 0\ncounter = 1\nif target_list[0] == target_list[1]:\n  print(\"0\")\n  return\nfor i in per:\n  if i in target_list:\n    #print(counter)\n    if ans == 0:\n      ans -= counter\n    else:\n      ans += counter\n    \n  counter += 1\nprint(ans)\n    \n", "import itertools\n\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\nn = 1\nfor v in itertools.permutations(list(range(1, N + 1))):\n    v = list(v)\n    if v == P:\n        a = n\n    if v == Q:\n        b = n\n    n += 1\n\nprint(abs(a - b))\nreturn", "import itertools\nn=int(input());p,a,b=sorted(itertools.permutations(range(1,n+1),n)),[*map(int,input().split())],[*map(int,input().split())]\nprint(abs(([list(i)==a for i in p].index(True)+1)-([list(i)==b for i in p].index(True)+1)))", "import itertools\n\nn = int(input())\npl = list(map(int, input().split()))\nql = list(map(int, input().split()))\n\nl = list(itertools.permutations(range(1, n+1), n))\ncnt = 1\np, q = 0, 0\nfor i in l:\n    if list(i) == pl: p = cnt\n    if list(i) == ql: q = cnt\n    cnt += 1\n\nprint(abs(p-q))", "def dfs(pi) :\n    if(len(pi) == n): \n        p.append(pi)\n        return\n    for i in range(1, n+1) :\n        if(i in pi) :\n            continue\n        cpi = pi + (i,)\n        dfs(cpi)\n    \nn = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\np = []\ndfs(tuple())\ni = 0\n\nfor v in range(len(p)) :\n    i += 1\n    if(p[v] == P) :\n        a = i\n    if(p[v] == Q) :\n        b = i\n        \nprint(abs(a-b))", "import itertools\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\na = b = -1\nfor i,x in enumerate(itertools.permutations(range(1,n+1))):\n    if x == p:\n        a = i\n    if x == q:\n        b = i\n\nprint(abs(a-b))", "import itertools\nN = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\nls = [ i for i in itertools.permutations(range(1, N + 1)) ]\na = [ idx for idx, val in enumerate(ls) if P == val ][0] + 1\nb = [ idx for idx, val in enumerate(ls) if Q == val ][0] + 1\nprint(abs(a - b))", "from collections import deque\nfrom copy import copy\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\nstack = deque()\nfor i in range(1, N + 1):\n    stack.append(([i], set([i])))\na = -1\nb = -1\ncounter = 0\nwhile len(stack) > 0:\n    X, already = stack.pop()\n    if len(X) == N:\n        counter += 1\n        is_a = True\n        is_b = True\n        for i in range(N):\n            if X[i] != P[i]:\n                is_a = False\n            if X[i] != Q[i]:\n                is_b = False\n        if is_a:\n            a = counter\n        if is_b:\n            b = counter\n    else:\n        for i in range(1, N + 1):\n            if i in already:\n                continue\n            tmp = copy(X)\n            tmp.append(i)\n            tmp_already = copy(already)\n            tmp_already.add(i)\n            stack.append((tmp, tmp_already))\n    if a != -1 and b != -1:\n        break\nprint(abs(a-b))", "# -*- coding: utf-8 -*-\nimport itertools\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\na = 0\nb = 0\nfor i, r in enumerate(itertools.permutations(list(range(1, n+1)))):\n    if r == p:\n        a = i\n    if r == q:\n        b = i\n\nprint((abs(a - b)))\n", "n = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\ndef kai(x):\n    c = 1\n    for i in range(1,x+1):\n        c *= i\n    return c\n\ndef dicnum(lis):\n    num = [x for x in range(1,n+1)]\n    count = 1\n    for i in range(n-1):\n        count += num.index(lis[i])*kai(n-i-1)\n        num.remove(lis[i])\n    return count\n\nprint(abs(dicnum(p) - dicnum(q)))", "import itertools\n\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n\nL = [i for i in range(1,N+1)]\nL2 = itertools.permutations(L,N)\nL3 = []\nfor i in L2:\n    L3.append(i)\n\n# print(N,P,Q,L,L2,L3)\n# print(L3.index(tuple(P)))\n# print(L3.index(tuple(Q)))\nprint(abs(L3.index(tuple(P)) - L3.index(tuple(Q))))", "from itertools import permutations \nN=int(input())\n\n\nP=tuple(map(int,input().split()))\nQ=tuple(map(int,input().split()))\n\ncnt=0\n\np,q=0,0\n\nfor i in permutations(range(1,N+1),N):\n    cnt+=1\n    if i==P:\n        p=cnt\n    elif i==Q:\n        q=cnt\nif p==0 or q==0:\n    print(0)\nelse:        \n    print(abs(p-q))    ", "import itertools\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nl = []\nfor i in range(1, n+1):\n    l.append(i)\nm = []\nfor j in itertools.permutations(l, n):\n    m.append(list(j))\n\nfor a in range(9*8*7*6*5*4*3*2):\n    if p == m[a]:\n        x = a\n        break\nfor b in range(9*8*7*6*5*4*3*2):\n    if q == m[b]:\n        y = b\n        break\nprint(abs(x-y))", "3\n#coding: utf-8\n\nfrom itertools import permutations\n\nN = int(input())\nP = input().strip()\nQ = input().strip()\n\nnth = 0\nnp = -1 \nnq = -1\nfor i in permutations(list(range(N))):\n    nth += 1\n    s = \" \".join([str(x+1) for x in i])\n    if s == P:\n        np = nth\n    if s == Q:\n        nq = nth\n\nprint((abs(np - nq)))\n", "import itertools\n\nn=int(input())\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\n\nls = list(itertools.permutations(range(1,n+1)))\n\nprint(abs(ls.index(p)-ls.index(q)))", "N = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\n\nimport itertools\np = list(itertools.permutations(range(1,N+1)))\n\na,b = [0,0]\nfor i, pair in enumerate(p,1):\n  if P == pair:\n    a = i\n  if Q == pair:\n    b = i\nprint(abs(a-b))", "import itertools\nN = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\np = list(itertools.permutations(range(1,N+1)))\nprint(abs(p.index(P)-p.index(Q)))    ", "import itertools\nN = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\nls = [ x for x in itertools.permutations(range(1, N + 1), N) ]\na = [ key for key, val in enumerate(ls) if val == P ][0] + 1\nb = [ key for key, val in enumerate(ls) if val == Q ][0] + 1\nprint(abs(a - b))", "import itertools\nN=int(input())\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\nn=tuple(itertools.permutations([i for i in range(1,N+1)]))\nans=abs(n.index(p)-n.index(q))\nprint(ans)", "import math\n\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n\ndef getIndex(target):\n    rtn = 0\n    n_list = [i for i in range(1,N+1)]\n\n    for p in target:\n        index = n_list.index(p)\n\n        del n_list[index]\n\n        rtn += math.factorial(len(n_list)) * index\n    return rtn\n\n\nprint((abs(getIndex(P)-getIndex(Q))))\n", "N = int(input())\nP = \"\".join(input().split())\nQ = \"\".join(input().split())\nbase = [str(i) for i in range(1, N + 1)]\nimport itertools as itr\npermutations = itr.permutations(base)\npatterns = [\"\".join(value) for value in permutations]\npatterns.sort()\np_index = patterns.index(P)\nq_index = patterns.index(Q)\nprint(abs(p_index - q_index))", "from itertools import permutations\ndef main():\n    n = int(input())\n    permutation = list(permutations([int(v) for v in range(1,n+1)]))\n    ans = 0\n    first = tuple(int(v) for v in  input().split())\n    second = tuple(int(v) for v in  input().split())\n    firstNum = None\n    secondNum = None\n    # print( permutation)\n    for i in range(len(permutation)):\n        # print(tuple(permutation[i]), first, second)\n        if permutation[i] == first:\n            firstNum = i+1\n        if permutation[i] == second:\n            secondNum = i+1\n    # print(firstNum, secondNum)\n    ans = abs(firstNum - secondNum)\n    return ans\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "import itertools\nn=int(input());p,a,b=sorted(itertools.permutations(range(1,n+1),n)),map(int,input().split()),map(int,input().split())\nprint(abs(p.index(tuple(a))-p.index(tuple(b))))", "import itertools\ndef II(): return int(input())\ndef LII(): return tuple(map(int, input().split()))\n\nn=II()\np=LII()\nq=LII()\n\nseq = list(itertools.permutations([i for i in range(1,n+1)]))\n\nresult=abs(seq.index(p)-seq.index(q))\nprint(result)\n", "import itertools\nN = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\nperm = [ i for i in itertools.permutations(range(1, N + 1)) ]\na = [ idx for idx, val in enumerate(perm) if val == P ][0] + 1\nb = [ idx for idx, val in enumerate(perm) if val == Q ][0] + 1\nprint(abs(a - b))", "import math\nN=int(input())\nA=list(map(lambda x:x-1,list(map(int,input().split()))))\nB=list(map(lambda x:x-1,list(map(int,input().split()))))\na=0\nfor i in range(N):\n    Apart=A[:i]\n    order=0\n    for aparts in Apart:\n        if aparts<A[i]:\n            order+=1\n    a+=math.factorial(N-i-1)*(A[i]-order)\nb=0\nfor i in range(N):\n    Bpart=B[:i]\n    order=0\n    for bparts in Bpart:\n        if bparts<B[i]:\n            order+=1\n    b+=math.factorial(N-i-1)*(B[i]-order)\nprint(abs(a-b))", "from itertools import permutations\n\nn = int(input())\nP = tuple(map(int, input().split(' ')))\nQ = tuple(map(int, input().split(' ')))\n\nl = [i for i in range(1, n+1)]\nlist = permutations(l)\n\nfor i, l in enumerate(list):\n    if P==l:\n        a = i\n    if Q==l:\n        b = i\nprint(abs(a-b))", "import itertools\n \nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\n \nX = list(itertools.permutations(P))\nX.sort()\n \na=0\nb=0\n \nfor i in range(len(X)):\n    if list(X[i]) == P:\n        a = i\n    if list(X[i]) == Q:\n        b = i\n \nprint(abs(a-b))", "import itertools\nn = int(input())\np = \"\".join(input().split())\nq = \"\".join(input().split())\nl = list(range(1,n+1))\ni = 0\nfor v in itertools.permutations(l, n):\n  i += 1\n  j = \"\".join(map(str, v))\n  if p == j:\n    a = i\n  if q == j:\n    b = i\nprint(abs(a-b))", "import itertools\n\nn = int(input())\np = [int(x) for x in input().split()]\nq = [int(x) for x in input().split()]\n\np_num = 0\nq_num = 0\n\nfor i,s in enumerate(itertools.permutations([i for i in range(1,n+1)])):\n    if len([x for x,y in zip(s,p) if x==y]) == n:\n        p_num = i\n    if len([x for x,y in zip(s,q) if x==y]) == n:\n        q_num = i\nprint(abs(p_num-q_num))", "from itertools import permutations\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\nx = permutations(sorted(p))\nt =0\ns = 0;\nc =0;\nfor i,j in enumerate(x):\n\tif p == list(j):\n\t\ts = i+1\n\tif q== list(j):\n\t\tc = i+1;\n\t\t\n\t\t\n\t\t\nprint((abs(s-c)))\n", "from itertools import permutations\nfrom math import factorial\nn = int(input())\np = tuple(map(int, input().split(' ')))\nq = tuple(map(int, input().split(' ')))\n\nl = [i for i in range(1, n+1)]\nls = list(permutations(l))\n\nfor i in range(factorial(n)):\n    if p==ls[i]:\n        a = i\n    if q==ls[i]:\n        b = i\n\nprint(abs(a-b))", "import itertools\nn = int(input())\np = tuple(map(int,input().split()))\nq = tuple(map(int,input().split()))\nr = list(itertools.permutations([i for i in range(1,n+1)]))\nP , Q = (r.index(p)), (r.index(q))\nprint(abs(P-Q))", "from itertools import permutations\nn = int(input())\np = tuple(map(int,input().split()))\nq = tuple(map(int,input().split()))\nc = list(permutations([i for i in range(1,n+1)],n))\nprint(abs(c.index(p)-c.index(q)))", "from itertools import permutations\n\nN = int(input())\n\nP = input()\nQ = input()\n\na = 0\nb = 0\nfor i, p in enumerate(permutations(list(range(1, N + 1))), 1):\n    s = ' '.join([str(v) for v in p])\n    if s == P:\n        a = i\n    if s == Q:\n        b = i\n\n    if a and b:\n        print((abs(a - b)))\n        return\n\n\n", "from itertools import permutations\n\nn = int(input())\np = tuple(map(int, input().split(' ')))\nq = tuple(map(int, input().split(' ')))\n\nx = [i for i in range(1,n+1)]\nls = list(permutations(x))\ni = 0\nfor per in ls:\n    if per == p:\n        a = i\n    if per == q:\n        b = i\n    i += 1\n\nprint((abs(a-b)))\n", "import itertools\nn=int(input())\np=tuple(map(int,input().split()))\nq=tuple(map(int,input().split()))\npermutation=list(itertools.permutations(range(1,n+1)))\nprint(abs(permutation.index(p)-permutation.index(q)))"]