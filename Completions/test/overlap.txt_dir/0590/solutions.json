["n = int(input())\na = list(map(int, input().split()))\n\nnums = [False for i in range(200010)]\nmust = [False for i in range(200010)]\ncounter = dict()\nnow_num = 0\n\n\ndef inc():\n    nonlocal now_num\n    now_num += 1\n    while nums[now_num - 1]:\n        now_num += 1\n\n\nfor el in a:\n    if nums[el - 1]:\n        counter[el] += 1\n    else:\n        counter[el] = 1\n    nums[el - 1] = True\n\ninc()\n\nans = []\nc = 0\n\nfor el in a:\n    if counter[el] > 1:\n        counter[el] -= 1\n        if now_num < el:\n            ans.append(now_num)\n            c += 1\n            inc()\n        else:\n            if must[el - 1] == False:\n                ans.append(el)\n                must[el - 1] = True\n            else:\n                ans.append(now_num)\n                c += 1\n                inc()\n    else:\n        if must[el - 1] == False:\n            ans.append(el)\n        else:\n            ans.append(now_num)\n            c += 1\n            inc()\n\nprint(c)\nprint(' '.join(str(el) for el in ans))\n", "def list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n\nfrom collections import Counter\nn = int(input())    \na = list_input()\nc = Counter(a)\nans = 0\ns = set(a)\ns1 = []\nfor i in range(1,n+1):\n\tif i not in s:\n\t\ts1.append(i)\t\t\ncur = 0\t\t\nleft = set([])\nfor i in range(n):\n\tif(c[a[i]] > 1):\n\t\tif s1[cur] < a[i] or a[i] in left:\n\t\t\tc[a[i]] -= 1\n\t\t\ta[i] = s1[cur]\n\t\t\tcur += 1\n\t\t\tans += 1\n\t\telse: left.add(a[i])\nprint(ans)\t\t\t\nfor i in a: print(i,end=' ')\n\n", "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\na = list(map(int,stdin.readline().rstrip().split()))\n\naSet = set(a)\naMinus = set(range(1,n+1)) - aSet\nminusList = sorted(list(aMinus),reverse=True)\nused=set()\n\ncountDict = {x : 0 for x in aSet}\nfor x in a:\n    countDict[x] +=1\n\nfinalList = a\nfor i in range(n):\n    x = a[i]\n    if x in used:\n        finalList[i] = minusList.pop()\n    elif countDict[x]==1:\n        continue\n    elif x<minusList[-1]:\n        used.add(x)\n    else:\n        countDict[x]-=1\n        finalList[i] = minusList.pop()\n\nprint(len(aMinus))\nprint(' '.join(map(str,finalList)))\n", "def solve(printing):\n\n    n = int(input())\n    nums = [int(st)-1 for st in input().split(\" \")]\n    numdupe = [0] * n\n    dupeindex = []\n    dupeindexindv = {}\n    missing = []\n\n    if printing:\n        print(\"nums\"); print(nums)\n\n    for i in range(n):\n        numdupe[nums[i]] += 1\n\n    for i in range(n):\n        if numdupe[i] == 0:\n            missing.append(i)\n            \n        if numdupe[nums[i]] >= 2:\n            dupeindex.append(i)\n            if nums[i] in dupeindexindv:\n                dupeindexindv[nums[i]][1].append(i)\n            else:\n                dupeindexindv[nums[i]] = [0, [i], False]\n                # left location, dupe indexs, if already located original\n\n    for num in dupeindexindv:\n        dupeindexindv[num][0] = len(dupeindexindv[num][1])\n\n    if printing:\n        print(\"missing\"); print(missing)\n        print(\"dupeindexindv\"); print(dupeindexindv)\n\n    misslen = len(missing)\n    misindex = 0\n    #answer = 0\n    for index in dupeindex:\n\n        if misslen <= misindex:\n            break\n\n        elif dupeindexindv[nums[index]][0] == 1 and not dupeindexindv[nums[index]][2]:\n            # one spot left but original not located yet.\n            # locate original.\n            dupeindexindv[nums[index]][0] -= 1\n            dupeindexindv[nums[index]][2] = True\n        \n        elif dupeindexindv[nums[index]][0] > 0:\n            \n            if dupeindexindv[nums[index]][2] or missing[misindex] < nums[index]:\n                # num is smaller or original is already located.\n                # locate missing number.\n                dupeindexindv[nums[index]][0] -= 1\n                nums[index] = missing[misindex]\n                misindex += 1\n                #answer += 1\n\n            else: # locate original\n                dupeindexindv[nums[index]][0] -= 1\n                dupeindexindv[nums[index]][2] = True\n\n    print(misslen)\n    for num in nums:\n        print(num+1, end = \" \")\n\nsolve(False)\n", "n = int(input())\nair = [int(x) for x in  input().split()]\na = [0]*(n+1)\na[0] = 1\nfor x in range(n):\n\ta[air[x]] += 1\nst = [0]\nfor x in range(n,-1,-1):\n\tif a[x] == 0:\n\t\tst.append(x)\ncnt = 0\nlevel = dict()\nfor x in range(n):\n\t#print a\n\tif a[air[x]] > 1:\n\t\tif air[x] > st[-1]:\n\t\t\ta[air[x]] -= 1\n\t\t\tair[x] = st[-1]\n\t\t\tst.pop()\n\t\t\tcnt += 1\n \n\t\telse:\n\t\t\tif level.get(air[x],0) == 0:\n\t\t\t\tlevel[air[x]] = 1\n\t\t\telse:\n\t\t\t\ta[air[x]] -= 1\n\t\t\t\tair[x] = st[-1]\n\t\t\t\tst.pop()\n\t\t\t\tcnt += 1\n \n \n \nprint (cnt)\nfor x in air:\n\tprint(x, end=' ')", "n=int(input())\nl=list(map(int,input().split()))\nlis,ind=set(),{}\nfor i in l:\n    if i in ind:\n        ind[i]+=1\n    else:\n        ind[i]=1\n        lis.add(i)\nmlis=sorted(set(range(1,n+1))-lis,key=int)\nk=0\nfor i,j in enumerate(l):\n    if ind[j]!=1:\n        if ind[j]==0 or mlis[k]<j:\n            l[i]=mlis[k]\n            k+=1\n            if k==len(mlis):\n                break\n        else:\n            ind[j]=0\n        if ind[j]>1:\n            ind[j]-=1\n\nprint(len(mlis),\" \".join(map(str,l)),sep='\\n')\n", "n=int(input())\narr=list(map(int,input().strip().split(' ')))\na=[0 for i in range(200001)]\nb=[0 for i in range(200001)]\nfor i in arr:\n    a[i]+=1\nj=1\nt=0\nfor i in range(1,n+1):\n    if(a[i]>0):\n        t+=1\nfor i in range(n):\n    if(a[arr[i]]>1):\n        while(a[j]!=0):\n            j+=1\n        if(arr[i]>j or b[arr[i]]==1 ):\n            a[arr[i]]-=1\n            arr[i]=j\n            a[j]=1\n        else:\n            b[arr[i]]=1\nprint(n-t)\nfor i in arr:\n    print(i,end=' ')\nprint()\n\n\n", "from collections import deque\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i, x in enumerate(a):\n        d.setdefault(x, []).append(i)\n    s = []\n    c = {}\n    for k, v in list(d.items()):\n        s.extend(v)\n        c[k] = len(v)\n    s.sort()\n    killed = set()\n    ava = deque(sorted(frozenset(list(range(1, n + 1))) - frozenset(a)))\n    ans = 0\n    for i in s:\n        v = a[i]\n        if (c[v] == 1 or ava[0] > v) and not v in killed:\n            killed.add(v)\n        else:\n            a[i] = ava.popleft()\n            ans += 1\n        c[v] -= 1\n    print(ans)\n    print(' '.join(map(str, a)))\nmain()\n\n", "import sys\nn = int(input())\na = input().split()\narr = [int(_) for _ in a]\ncnt = [0 for _ in range(n+1)]\nmust = [False for _ in range(n+1)]\nfor x in arr:\n\tcnt[x] += 1\n\nque = []\nfor i in range(1,n+1):\n\tif cnt[i] == 0:\n\t\tque.append(i)\n\t\t\ncur = 0\nfor i in range(n):\n\tx = arr[i]\n\tif cnt[x] > 1 :\n\t\tif must[x] or que[cur] < x:\n\t\t\tcnt[x] -= 1\n\t\t\tarr[i] = que[cur]\n\t\t\tcur += 1\n\t\telse:\n\t\t\tmust[x] = True\n\n\nprint(cur)\nfor x in arr:\n\tprint(x,end=' ')\n", "n = int(input()) + 1\nt = [0] + list(map(int, input().split()))\n\ns = [0] * n\nfor j in t: s[j] += 1\n\np = [0] * n\nk = 1\n\nfor i, j in enumerate(t):\n    if s[j] > 1:\n        while s[k]: k += 1\n        if j > k or p[j]:\n            t[i] = k\n            s[j] -= 1\n            k += 1\n        else:\n            p[j] = 1\n\nprint(s.count(0))\nprint(' '.join(map(str, t[1:])))", "from collections import defaultdict\n\nn = int(input())\nl = list(map(int, input().split()))\n\ncount = defaultdict(int)\nfor x in l:\n    count[x] += 1\n\nneed = []\n\nfor x in range(1,n+1):\n    if count[x] == 0:\n        need.append(x)\n\npos_need = 0\nopen = [False for _ in range(n+1)]\nactions = 0\n\nfor i in range(n):\n    if pos_need == len(need):\n        break\n    if count[l[i]] >= 2:\n        if l[i] < need[pos_need]:\n            if open[l[i]]: \n                count[l[i]] -= 1\n                l[i] = need[pos_need]\n                actions += 1\n                pos_need += 1\n            else:\n                open[l[i]] = True\n        else:\n            count[l[i]] -= 1\n            l[i] = need[pos_need]\n            actions += 1\n            pos_need += 1\n\nprint(actions)\nprint(*l)\n", "n = int(input())\nb = [0] * n\nc = [0] * n\narray = []\nfor i in input().split():\n    array.append(int(i))\n    b[int(i)-1] += 1\n    c[int(i)-1] = True\nfree = []\ncount = 0\nfor i in range(n):\n    if b[i] == 0:\n        free.append(i+1)\n    else:\n        count += b[i] - 1\nprint(count)\nz = 0\nfor i in range(n):\n    if b[array[i]-1] > 1:\n        if array[i] > free[z]:\n            b[array[i]-1] -= 1 \n            array[i] = free[z]\n            z += 1\n        elif c[array[i]-1] == False:\n            b[array[i]-1] -= 1\n            array[i] = free[z]\n            z += 1\n        else:\n            c[array[i]-1] = False\nfor i in range(n):\n    print(array[i], end = ' ')", "n = int(input())\nb = [0] * n\nc = [0] * n\narray = []\nfor i in input().split():\n    array.append(int(i))\n    b[int(i)-1] += 1\n    c[int(i)-1] = True\nfree = []\ncount = 0\nfor i in range(n):\n    if b[i] == 0:\n        free.append(i+1)\n    else:\n        count += b[i] - 1\nprint(count)\nz = 0\nfor i in range(n):\n    if b[array[i]-1] > 1:\n        if array[i] > free[z]:\n            b[array[i]-1] -= 1 \n            array[i] = free[z]\n            z += 1\n        elif c[array[i]-1] == False:\n            b[array[i]-1] -= 1\n            array[i] = free[z]\n            z += 1\n        else:\n            c[array[i]-1] = False\nfor i in range(n):\n    print(array[i], end = ' ')", "n, ans, j = int(input()), 0, 1\na = [int(i) for i in input().split()]\nres, c, lft = [0] * n, [0] * (n + 1), [0] * (n + 1)\nfor i in a:\n    c[i] += 1\nwhile j <= n and c[j]:\n    j += 1\nfor i in range(len(a)):\n    if c[a[i]] > 1:\n        if lft[a[i]] or a[i] > j:\n            ans += 1\n            c[a[i]] -= 1\n            res[i] = j\n            j += 1\n            while j <= n and c[j]:\n                j += 1\n        else:\n            lft[a[i]] = 1\n            res[i] = a[i]\n    else:\n        res[i] = a[i]\nprint(ans)\nprint(*res)\n    \n", "n, ans, j = int(input()), 0, 1\na = [int(i) for i in input().split()]\nres, c, lft = [0] * n, [0] * (n + 1), [0] * (n + 1)\nfor i in a:\n    c[i] += 1\nwhile j <= n and c[j]:\n    j += 1\nfor i in range(len(a)):\n    if c[a[i]] > 1:\n        if lft[a[i]] or a[i] > j:\n            ans += 1\n            c[a[i]] -= 1\n            res[i] = j\n            j += 1\n            while j <= n and c[j]:\n                j += 1\n        else:\n            lft[a[i]] = 1\n            res[i] = a[i]\n    else:\n        res[i] = a[i]\nprint(ans)\nprint(*res)\n    \n", "\"\"\"http://codeforces.com/problemset/problem/864/D\"\"\"\n# 17:54\ndef make_a_permutation():\n    n = int(input())\n    a = list(map(int, input().split()))\n    occ = [0] * (n+1)\n    for i in range(n):\n        occ[a[i]] += 1\n    missing = [i for i in range(1,n+1) if occ[i] == 0]\n    mi = 0\n    dupIndexes = [i for i in range(n) if occ[a[i]] >= 2]\n    fixedNum = [False] * (n+1)\n    for i in range(n):\n        if occ[i] == 1:\n            fixedNum[i] = True\n    \n    for dup in dupIndexes:\n        dupNum = a[dup]\n        if occ[dupNum] > 1 and (fixedNum[dupNum] or dupNum > missing[mi]):\n            fixedNum[missing[mi]] = True\n            occ[missing[mi]] += 1\n            a[dup]= missing[mi]\n            mi += 1\n            occ[dupNum] -= 1\n        else:\n                fixedNum[dupNum] = True\n    return mi, a\n   \nc, l = make_a_permutation()\nprint(c)\nfor i in range(len(l)):\n    print(l[i], end=\" \")\n", "n = int(input())\na = input().split(' ')\nfor i in range(n):\n    a[i] = int(a[i]) - 1\n    \nocc = {}\n\nfor i in range(len(a)):\n    if a[i] not in occ:\n        occ[a[i]] = 1\n    else:\n        occ[a[i]] += 1\n\nmissing = []\nfor i in range(n):\n    if i not in occ:\n        missing.append(i)\n        \nact_missing = 0\nleft = [1] * n\n\n\nfor pos in range(n):\n    if occ[a[pos]] > left[a[pos]]:\n        if missing[act_missing] < a[pos] or left[a[pos]] == 0:\n            occ[a[pos]] -= 1\n            a[pos] = missing[act_missing]        \n            act_missing += 1\n        else:\n            left[a[pos]] -= 1\n            occ[a[pos]] -= 1\n            \ns = \"\"\nfor e in a:\n    s += str(e + 1)\n    s += ' '\n    \nprint(len(missing))\nprint(s)\n        \n        \n\n", "from collections import Counter\n\n\ndef readints():\n    return [int(item) for item in input().strip().split()]\n\n\nclass Solver:\n    def main(self):\n        n = readints()[0]\n        a = readints()\n        c = Counter(a)\n        skipped = set()\n        to_be_added = sorted(set(range(1, n+1)) - set(c.keys()))\n        changes = 0\n        for i in range(n):\n            if c[a[i]] > 1:\n                if a[i] < to_be_added[changes] and a[i] not in skipped:\n                    skipped.add(a[i])\n                else:\n                    c[a[i]] -= 1\n                    a[i] = to_be_added[changes]\n                    changes += 1\n\n        print(changes)\n        print(' '.join(map(str, a)))\n\nSolver().main()\n", "import collections\nn = int(input())\na = list(map(int, input().split()))\ncnt = collections.Counter(a)\nres = []\nb = []\nfor i in range(1, n + 1):\n    if i not in cnt:\n        b.append(i)\nb.sort(reverse = True)\ns = set(a)\nprint(len(b))\nfor v in a:\n    if v in cnt and cnt[v] > 1:\n        t = b[-1]\n        if v < t and v in s:\n            res.append(v)\n            s.remove(v)\n        else:\n            res.append(b.pop())\n            cnt[v] -= 1\n    else:\n        res.append(v)\nprint(\" \".join(list(map(str, res))))\n\n", "\nn = int(input())\na = list(map(int, input().split(' ')))\nfreq = {}\nseen = [False for i in range(n+1)]\nch = 0\nde = []\nfor i in range(n):\n    if a[i] not in list(freq.keys()):\n        freq[a[i]] = 1\n    else:\n        freq[a[i]] += 1\n        ch += 1\n\nfor i in range(n):\n    if i+1 not in list(freq.keys()):\n        de.append(i+1)\n\nindex = 0\nfor i in range(n):\n    if freq[a[i]] > 1:\n        if seen[a[i]] or de[index] < a[i]:\n            freq[a[i]] += -1\n            a[i] = de[index]\n            index += 1\n        else:\n            seen[a[i]] = True\n\n\n\nsol = \"\"\nfor x in a:\n    sol += str(x) + \" \"\n\nprint(str(ch) + \"\\n\" + sol )\n\n", "from collections import Counter\nn = int(input())\na = list(map(int,input().split()))\nc = Counter(a)\nb=dict()\nfor i in c.keys():\n  b[i]=0\nd = list(sorted((Counter(range(1,n+1))-c).keys()))\nr = n-len(c)\nj=0\nprint(r)\nfor i in range(n):\n  if j==r:\n    break\n  if c[a[i]]>1:\n    if d[j]<a[i]:\n      c[a[i]]-=1\n      a[i]=d[j]\n      j+=1\n    else:\n      if b[a[i]]!=0:\n        c[a[i]]-=1\n        a[i]=d[j]\n        j+=1\n      else:\n        b[a[i]]+=1\nprint(*a)", "n = int(input())\na = list(map(int, input().split()))\n\nif sorted(a) == list(range(1, n+1)):\n    print(0)\n    print(' '.join(map(str,a)))\nelse:\n    cnt = [0] * (n+1)\n    for i in a:\n        cnt[i] += 1\n\n    add = []\n    for i in range(1, n+1):  # 1 to 26\n        if cnt[i] == 0:\n            add.append(i)\n\n    pos = 0\n    m_cnt = 0\n    appeared = [False] * (n + 1)\n    for i, t in enumerate(a):\n        if cnt[t] > 1:\n            if t > add[pos] or appeared[t]:\n                a[i] = add[pos]\n                pos += 1\n                m_cnt += 1\n                if pos == len(add):\n                    break\n                cnt[t] -= 1\n                appeared[a[i]] = True\n            else:\n                appeared[t] = True\n        else:\n            appeared[t] = True\n\n    print(m_cnt)\n    print(' '.join(map(str,a)))\n", "from collections import Counter\n\nn = int(input())\n\narr = [int(x) for x in input().split(\" \")]\ncounter = Counter(arr)\n\n\ns = {x for x in range(1, n + 1)}\nreplacements = sorted(list(s - set(counter.keys())))\n\nr = 0\nans = 0\nskipped = set()\nfor index, value in enumerate(arr):\n    if counter[value] > 1:\n        if value > replacements[r] or value in skipped:\n            arr[index] = replacements[r]\n            ans += 1\n            r += 1\n            counter.subtract((value,))\n        else:\n            skipped.add(value)\n\n\nprint(ans)\nprint(\" \".join([str(x) for x in arr]))\n"]