["MOD = 1000000007\n\n\ndef f(n, cnt):\n    \"\"\"\n    n! / (n - cnt)!\n    \"\"\"\n    ans = 1\n    for _ in range(cnt):\n        ans = (ans * n) % MOD\n        n -= 1\n    return ans\n\n\ndef main():\n    n, x, pos = list(map(int, input().split()))\n    chk1 = 0\n    chk_r = 0\n    left = 0\n    right = n\n    while left < right:\n        middle = (left + right) // 2\n        if middle <= pos:\n            if middle < pos:\n                chk1 += 1\n            left = middle + 1\n        else:\n            chk_r += 1\n            right = middle\n    if chk1 > x - 1 or chk_r > n - x:\n        print(0)\n    else:\n        # (x - 1)! / (x - 1 - chk1)! * (n - x)! / (n - x - chk_r)! * (n - chk1 - chk_r - 1)!\n        rest = n - chk1 - chk_r - 1\n        print(f(x - 1, chk1) * f(n - x, chk_r) * f(rest, rest) % MOD)\n\n\nmain()\n", "\nn, x, p = list(map(int, input().split()))\n\nsmallc = 0\nlargec = 0\n\nleft = 0\nright = n\nwhile left < right:\n    mid = (left + right) // 2\n    if mid < p:\n        smallc += 1\n        left = mid + 1\n    elif mid > p:\n        largec += 1\n        right = mid\n    else:\n        left = mid + 1\n\nlargeAv = n - x\nsmallAv = x - 1\n\n#print(smallc, smallAv)\n#print(largec, largeAv)\n\nmod = 1000000007\n\ndef permutations(n, c):\n    v = 1\n    for i in range(n - c + 1, n + 1):\n        v = (v * i) % mod\n    return v\n\nv = permutations(largeAv, largec) * permutations(smallAv, smallc) % mod\noc = n - (largec + smallc + 1)\nv = v * permutations(oc, oc) % mod\n\n\n#print(permutations(largeAv, largec), permutations(smallAv, smallc), permutations(oc, oc))\nprint(v)\n", "n,x,pos = list(map(int,input().split()))\n\na = [i for i in range(n)]\n\nzero = 0\none = 0\n\nleft = 0\nright = n\nwhile left<right:\n    middle = (left + right)//2\n    if a[middle]<=pos:\n        zero += 1\n        left = middle+1\n    else:\n        one += 1\n        right = middle\n\nres = 1\nmod = 10**9+7\nfor i in range(zero-1):\n    res *= (x-1-i)\n    res %= mod\nfor i in range(one):\n    res *= (n-x-i)\n    res %= mod\n\nfor j in range(n-zero-one):\n    res *= j+1\n    res %= mod\n\nprint(res)\n", "from math import factorial\nmod = 1000000007\n\nn, x, pos = list(map(int, input().split()))\nbiggerNeeded = 0\nlowerNeeded = 0\nleft = 0\nright = n\nwhile left < right:\n    #print(left, right)\n    middle = (left+right)//2\n    if middle < pos:\n        left = middle + 1\n        lowerNeeded += 1\n    elif middle > pos:\n        right = middle\n        biggerNeeded += 1\n    else:\n        left = middle + 1\nif x+biggerNeeded > n or x-lowerNeeded <= 0:\n    print(0)\n    return\nans = factorial(x-1) // factorial(x-1-lowerNeeded)\nans %= mod\nans *= factorial(n-x) // factorial(n-x-biggerNeeded)\nans %= mod\nans *= factorial(n-biggerNeeded-lowerNeeded-1)\nans %= mod\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nMOD = 10 ** 9 + 7\nN = 2000\nfact = [0 for _ in range(N)]\ninvfact = [0 for _ in range(N)]\nfact[0] = 1\nfor i in range(1, N):\n    fact[i] = fact[i - 1] * i % MOD\n\ninvfact[N - 1] = pow(fact[N - 1], MOD - 2, MOD)\n\nfor i in range(N - 2, -1, -1):\n    invfact[i] = invfact[i + 1] * (i + 1) % MOD\ndef nCk(n, k):\n    if k < 0 or n < k:\n        return 0\n    else:\n        return fact[n] * invfact[k] * invfact[n - k] % MOD\n\ndef main():\n    n, x, pos = map(int, input().split())\n    b = 0\n    s = 0\n    l = 0\n    r = n\n    while l < r:\n        m = (l + r) // 2\n        if m <= pos:\n            l = m + 1\n            if m != pos:\n                s += 1\n        else:\n            r = m\n            if m != pos:\n                b += 1\n        \n    b_cnt = n - x\n    s_cnt = x - 1\n    c = n - 1 - b - s\n    ans = fact[c] * nCk(b_cnt, b) * nCk(s_cnt, s) * fact[b] * fact[s]\n    print(ans % MOD)\n    \nfor _ in range(1):\n    main()", "import sys\ninput = sys.stdin.readline\n\nn,x,pos=list(map(int,input().split()))\nmod=10**9+7\n\nANS=[0]*n\n\nleft=0\nright=n\n\nwhile left<right:\n    #print(left,right)\n    middle=(left+right)//2\n    if pos>=middle:\n        ANS[middle]=-1\n        left=middle+1\n    else:\n        ANS[middle]=1\n        right=middle\n\nANS[pos]=9\n#print(ANS)\n\nP=ANS.count(1)\nM=ANS.count(-1)\nMINUS=x-1\nPLUS=n-x\n\nA=1\nfor i in range(P):\n    A=A*PLUS%mod\n    PLUS-=1\n\n#print(A)\nfor i in range(M):\n    A=A*MINUS%mod\n    MINUS-=1\n\n#print(A)\n\nfor i in range(1,n-P-M):\n    A=A*i%mod\n\nprint(A)\n\n\n"]