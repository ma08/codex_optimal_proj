["import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\ndef solve():\n    s,c = input().split()\n    # i,j\u3067j\u304c\u8907\u6570\u3042\u308b\u3068\u304d\n    n = len(s)\n    for i in range(n-1):\n        prev = s[i]\n        pos = i\n        for j in range(i+1, n):\n            if s[j]<prev:\n                prev = s[j]\n                pos = j\n            elif s[j] == prev:\n                pos = j\n        if prev == s[i]:\n            continue\n        t = list(s)\n        t[i], t[pos] = prev, s[i]\n        s = \"\".join(t)\n        break\n    if s<c:\n        print(s)\n    else:\n        print(\"---\")\n\nt = int(input())\nfor i in range(t):\n    solve()\n", "import heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\n\ninput = sys.stdin.readline\nM = mod = 10**9 + 7\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input())\ndef li2():return [i for i in input().rstrip('\\n').split(' ')]\n\n\nn = val()\nfor _ in range(n):\n    s1,s2 = li2()\n    fin = sorted(s1)\n\n    if fin[0]>s2[0]:\n        print('---')\n        continue\n    for i in range(len(s1)):\n        if s1[i] != fin[i]:\n            for j in range(len(s1)-1,-1,-1):\n                if s1[j] == fin[i]:\n                    s1 = list(s1)\n                    s1[j] = s1[i]\n                    s1[i] = fin[i]\n                    s1 = ''.join(s1)\n                    break\n            break\n    print('---' if s1 >= s2 else s1)\n", "def main():\n    TT = int(input())\n    for _ in range(TT):\n        w, t = input().strip().split(' ')\n        w = list(w)\n\n        sf = [len(w) - 1 for _ in range(len(w))]\n        for i in range(len(w) - 2, -1, -1):\n            if w[i] < w[sf[i+1]]:\n                sf[i] = i\n            else:\n                sf[i] = sf[i + 1]\n\n        for i in range(len(w)):\n            if sf[i] != i and w[sf[i]] != w[i]:\n                w[i], w[sf[i]] = w[sf[i]], w[i]\n                break\n        w = ''.join(w)\n        if w < t:\n            print(w)\n        else:\n            print('---')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "q=int(input())\nfor i in range(q):\n    ok=[x for x in input().split()]\n    r=ok[0]\n    s=ok[1]\n    w = [(ord(r[i])) for i in range(len(r))]\n    w.sort()\n    w=[chr(w[i]) for i in range(len(r))]\n    first=True\n    at=-1\n    for j in range(len(r)):\n        if w[j]!=r[j]:\n            first=False\n            at=j\n            break\n    if first==False:\n        t=r[::-1].find(w[at])\n        r=r[:at]+w[at]+r[at+1:len(r)-1-t]+r[at]+r[len(r)-t:]\n    if r<s:\n        print(r)\n    else:\n        print(\"---\")", "def gets(a):\n    i = 0\n    a = list(a)\n    b = [0]*100\n    \n    for j in a:\n        b[ord(j)-ord('A')]+=1\n    \n    r = -1\n    t = -1\n    while(b[i]==0 and i<26):\n        i+=1\n        \n    for k in range(0,len(a)):\n        if r==-1 and (ord(a[k]) - ord('A'))== i:\n            b[i]-=1\n            while(b[i]==0 and i<26):\n                i+=1\n        elif r==-1:\n            t = k\n            r = 0\n        elif ord(a[k]) - ord('A') == i:\n            r = k\n    \n    if r!=-1 and t!=-1:\n        a[t] , a[r] = a[r] , a[t]\n    return ''.join(a)\n\nfor _ in range(int(input())):\n    a,b = input().split()\n    a = gets(a)\n    if a<b:\n        print(a)\n    else:\n        print(\"---\")", "for _ in range(int(input())):\n    a, b = input().split()\n    a = list(a)\n    for i in range(len(a)-1):\n        j = min((i for i in range(i+1, len(a))), key=lambda x: (a[x], -x))\n        if a[i] > a[j]:\n            a[i], a[j] = a[j], a[i]\n            break\n        \n    a = ''.join(a)\n    if a < b:\n        print(a)\n    else:\n        print('---')\n            \n", "import math\n\ndef better(a, b):\n    for i in range(min(len(a), len(b))):\n        if ord(a[i]) < ord(b[i]):\n            return True\n        elif ord(a[i]) > ord(b[i]):\n            return False\n    return len(a) < len(b)\n\ndef optimize(a):\n    occ = [0] * 26\n    for i in range(len(a)):\n        occ[ord(a[i]) - ord('A')] += 1\n    p1 = -1\n    p2 = -1\n    t = 0\n    for i in range(len(a)):\n        if p1 < 0:\n            occ[ord(a[i]) - ord('A')] -= 1\n            for j in range(ord(a[i]) - ord('A')):\n                if occ[j] > 0:\n                    p1 = i\n                    t = j\n                    break\n        else:\n            if ord(a[i]) - ord('A') == t:\n                p2 = i\n\n    if p1 >= 0 and p2 >= 0:\n        return a[:p1] + a[p2] + a[p1+1:p2] + a[p1] + a[p2+1:]\n    return a\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        line = str(input())\n        p = line.split()\n        mine = p[0]\n        yours = p[1]\n        new = optimize(mine)\n        if better(new, yours):\n            print(new)\n        else:\n            print('---')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "for _ in range(int(input())):\n    a,c=input().split()\n    a=list(a)\n    b=sorted(a)\n    if a!=b:\n        for i,x in enumerate(b):\n            if a[i]!=x:\n                tmp=a[i]\n                a[i]=x\n                break\n        for i in range(len(a)-1,-1,-1):\n            if a[i]==x:\n                a[i]=tmp\n                break\n    a=''.join(a)\n    \n    if a<c:\n        print(a)\n    else:\n        print('---')", "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = [list(map(str, input().rstrip().split())) for _ in range(Q)]\n\nfor S, T in Query:\n    L = len(S)\n    update = False\n    A = list(S)\n    for i in range(L-1):\n        tmp = S[i]\n        for j in range(i+1, L):\n            if update and tmp == S[j]:\n                ind = j\n            if tmp > S[j]:\n                tmp = S[j]\n                update = True\n                ind = j\n        if update:\n            A[ind] = S[i]\n            A[i] = S[ind]\n            break\n    A_str = \"\".join(A)\n    if A_str < T:\n        print(A_str)\n    else:\n        print(\"---\")        ", "from string import ascii_uppercase\n\na = ascii_uppercase\nN = int(input())\n\nfor i in range(N):\n    me, comp = input().split(' ')\n    # Want to maximize the lexicographic swap\n    best = ''.join(sorted(me))\n    # print(best)\n\n    mismatch = -1\n    for index, pair in enumerate(zip(best, me)):\n        i, j = pair\n        if i != j:\n            mismatch = index\n            break\n    \n    if mismatch != -1:\n        # Want to swap mismatch (index) with last occurence after mismatch\n        swaploc = len(me) - me[mismatch+1:][::-1].find(best[mismatch]) - 1\n        swap1 = me[:mismatch] + me[swaploc] + me[mismatch+1:swaploc] + me[mismatch] + me[swaploc+1:]\n    else:\n        swap1 = me\n    if swap1 < comp:\n        print(swap1)\n    else:\n        print('---')", "n = int(input())\nfor i in range(n):\n\ts, t = list(map(str, input().split()))\n\tif len(s) == 1:\n\t\tif s < t:\n\t\t\tprint (s)\n\t\telse:\n\t\t\tprint (\"---\")\n\t\tcontinue\n\tmas = [['ZZ', -1]]\n\tfor j in range(len(s) - 1, -1, -1):\n\t\tif mas[-1][0] > s[j]:\n\t\t\tmas.append([s[j], j])\n\t\telse:\n\t\t\tmas.append(mas[-1])\n\tmas = mas[::-1]\n\t#print (*mas)\n\tflag = True\n\tfor j in range(len(s)):\n\t\t#print (j)\n\t\tif s[j] > mas[j][0]:\n\t\t\ts = s[:j] + mas[j][0] + s[j + 1:mas[j][1]] + s[j] + s[mas[j][1] + 1:]\n\t\t\tif (s >= t):\n\t\t\t\tprint (\"---\")\n\t\t\telse:\n\t\t\t\tprint (s)\n\t\t\tflag = False\n\t\t\tbreak\n\tif flag:\n\t\tif s < t:\n\t\t\tprint (s)\n\t\telse:\n\t\t\tprint (\"---\")\n", "import sys\ninput = sys.stdin.readline\n\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n\n## -------------------------------\n\nn = getInt()\nfor i in range(n):\n    s, c = getStr().split()\n    p = False\n    for i in range(len(s)-1):\n        ch = i\n        for j in range(i+1,len(s)):\n            if s[j] <= s[ch]:\n                ch = j\n        if s[ch] < s[i]:\n            s = s[:i] + s[ch] + s[i+1:ch] + s[i] + s[ch+1:]\n            break\n    if s < c: print(s)\n    else: print('---')\n    \n\n\n"]