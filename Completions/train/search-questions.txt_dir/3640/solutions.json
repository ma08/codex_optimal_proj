["def funnel_out(funnel):\n    r=\"\"\n    h=len(funnel)\n    while funnel[h-1][0]!=\"~\":\n      r+=funnel[h-1][0]\n      funnel[h-1][0]=\"~\"\n      i=h-1\n      j=0\n      while i>0:\n        if funnel[i-1][j] < funnel[i-1][j+1]:\n          funnel[i][j]=funnel[i-1][j]\n          funnel[i-1][j]=\"~\"\n        else:\n          funnel[i][j]=funnel[i-1][j+1]\n          funnel[i-1][j+1]=\"~\"\n          j+=1\n        i-=1\n    print(funnel)\n    return r", "def funnel_out(funnel):\n    if not funnel: return \"\"\n    ret = []\n    while funnel[-1][-1]:\n        j = 0\n        ret.append(funnel[-1][j])\n        funnel[-1][j] = None\n        for i in range(-2, -len(funnel)-1, -1):\n            _, k = min((funnel[i][x] or \"\\xff\", x) for x in (j, j+1))\n            funnel[i+1][j], funnel[i][k], j = funnel[i][k], funnel[i+1][j], k\n    return ''.join(ret)", "def pull_letter(funnel):\n    letter = funnel[0][0]\n    funnel[0][0] = None\n    pos = 0\n    \n    for idx, level in enumerate(funnel[:-1]): \n        current_pos = pos\n        \n        c1 = funnel[idx+1][pos]\n        c2 = funnel[idx+1][pos+1]\n        if c1 is None or (c2 is not None and c1 >= c2):\n            pos += 1\n        \n        level[current_pos] = funnel[idx+1][pos]\n        funnel[idx+1][pos] = None\n    \n    return letter\n\n\ndef funnel_out(funnel):\n    funnel = list(reversed(funnel))\n    result = ''\n\n    while funnel[0][0]:\n        result += pull_letter(funnel)\n        \n    return result\n", "def drop(p):\n    p[0][0]=''; x=0;\n    for y in range(1,len(p)):\n        dx = 1 if not p[y][x] else 0 if not p[y][x+1] else 1 if p[y][x+1]<p[y][x] else 0\n        p[y-1][x]=p[y][x+dx]; x+=dx\n    p[-1][x]=''\n\ndef funnel_out(funnel):\n    s=[]; p=[r[:] for r in reversed(funnel)]\n    while p[0][0]: s.append(p[0][0]); drop(p)\n    return ''.join(s)", "from copy import deepcopy\n\ndef funnel_out(funnel):\n    funnel, ans, depth = deepcopy(funnel), [], len(funnel)\n    for _ in range(depth*(depth+1)//2):\n    \n        ans.append(funnel[-1][0])                                                # Archive current lowest char\n        i, funnel[-1][0] = 0, \"~\"                                                # Starting position (i) / erase current char (use \"~\" as empty cell: higher ascii value than any letter)\n        \n        for d in range(depth-1, 0, -1):                                          # Will swap the current char with the appropriate one from the line above\n            iUp = min((i, i+1), key=lambda x: funnel[d-1][x])                    #     search the lower char index in the above level\n            if funnel[d-1][iUp] == \"~\": break                                    #     no more chars to swap....\n            funnel[d][i], funnel[d-1][iUp] = funnel[d-1][iUp], funnel[d][i]      #     make the swap\n            i = iUp                                                              #     update thte current column index\n            \n    return ''.join(ans)", "def funnel_out(funnel):\n    break_outs, n = [], len(funnel)\n    while len(break_outs) < n*(n+1)/2:\n        break_outs.append(funnel[-1][0])\n        funnel[-1][0], prev = '~', 0\n        for i in range(len(funnel) - 1, 0, -1):\n            m = min(funnel[i-1][prev:prev+2])\n            index = funnel[i-1].index(m)\n            funnel[i-1][index], funnel[i][prev], prev = '~', m, index\n    return \"\".join(break_outs)", "def funnel_out(funnel):\n    ans = \"\"\n    while funnel[-1][0] != \"~\":\n        ans += funnel[-1][0]\n        i, funnel[-1][0] = 0, \"~\"\n        for d in range(len(funnel)-1, 0, -1):\n            iUp = min((i, i+1), key=lambda x: funnel[d-1][x])\n            funnel[d][i], funnel[d-1][iUp] = funnel[d-1][iUp], funnel[d][i]\n            i = iUp\n    return ans", "def funnel_out(lst):\n    ans = \"\"\n    while lst != [[]]:\n        temp = []\n        for i in range(len(lst)-1, -1, -1):\n            x = lst[i]\n            x2 = lst[i-1]\n            if i == len(lst)-1:\n                ans += x[0]\n                if len(lst) == 1:\n                    lst = [[]]\n                    break\n                lst[i] = [min([k for k in x2 if k != \"\"])] if len(lst) > 1 else []\n                lst[i-1][x2.index(min([k for k in x2 if k != \"\"]))] = \"\"\n            elif i == 0:\n                if all(j==\"\" for j in lst[0]):\n                    lst = lst[1:]\n                else:\n                    break\n            else:\n                for j in range(len(x)):\n                    if x[j] == \"\":\n                        a, b = x2[j], x2[j+1]\n                        t = [k for k in (a, b) if k != '']\n                        val = min(t) if t != [] else \"\"\n                        idx = j if x2[j] == val else j+1\n                        x[j] = val\n                        x2[idx] = \"\"                      \n    return ans", "def funnel_out(funnel):\n    ans = \"\"\n    while funnel:\n        ans += funnel[-1].pop()\n        funnel[-1].append('\u00b5')\n        for row in range(len(funnel) - 1, 0, -1):\n            for col in range(len(funnel[row])):\n                if funnel[row][col] == '\u00b5':\n                    if funnel[row - 1][col] < funnel[row - 1][col + 1]:\n                        funnel[row][col] = funnel[row - 1][col]\n                        funnel[row - 1][col] = '\u00b5'\n                    else:\n                        funnel[row][col] = funnel[row - 1][col + 1]\n                        funnel[row - 1][col + 1] = '\u00b5'\n            if all(en == '\u00b5' for en in funnel[row]):\n                del(funnel[row])\n        if len(funnel) == 1:\n            break\n    return ans", "def funnel_out(funnel):\n    result, funnel = [], funnel[::-1]\n    \n    def move(i=0, j=0):\n        if i < len(funnel)-1:\n            c1, c2 = funnel[i+1][j:j+2]\n            if c1 and (not c2 or c1 < c2):\n                funnel[i][j] = c1\n                return move(i+1, j)\n            elif c2 and (not c1 or c2 < c1):\n                funnel[i][j] = c2\n                return move(i+1, j+1)\n        funnel[i][j] = ''\n    \n    while funnel[0][0]:\n        result.append(funnel[0][0])\n        move()\n    return ''.join(result)"]