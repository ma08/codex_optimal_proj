["import hashlib\ndef crack(hash):\n    for i in range(100000):\n        if hashlib.md5(str(i).zfill(5).encode()).hexdigest() == hash:\n            return str(i).zfill(5)", "from hashlib import md5\nfrom itertools import product\n\ndef crack(hash):\n    for bs in map(bytes, product(b'0123456789', repeat=5)):\n        if md5(bytes(bs)).hexdigest() == hash:\n            return bs.decode()", "import hashlib\ndef create_crack(n):\n    rainbow = {hashlib.md5(f'{a:05}'.encode()).hexdigest() : f'{a:05}' for a in range(10 ** n)}\n    return rainbow.get\n\ncrack = create_crack(6)\n", "from itertools import product\nfrom string import digits\nfrom hashlib import md5\n\ncrack = {md5(pin.encode()).hexdigest():pin for pin in map(''.join, product(digits, repeat=5))}.get", "import hashlib \n  \nlookup = [\n    hashlib.md5(('0000' + str(i))[-5:].encode()).hexdigest()\n    for i in range(100000)\n]\n    \ndef crack(hash):\n    index = lookup.index(hash)\n    return ('0000' + str(index))[-5:]\n", "from hashlib import md5\n\ndef crack(hash):\n    for pin in [str(x).rjust(5, '0') for x in range(0, 100000)]:\n        if md5(pin.encode()).hexdigest() == hash:\n            return pin", "import hashlib \n\ndef crack(hash):\n    for i in range (0,99999):\n        pin = digit_to_pin(i).encode()\n        rand_hash = hashlib.md5(pin).hexdigest()\n        if hash == rand_hash:\n            return pin.decode()\n        else:\n            pass\n    \ndef digit_to_pin(digit):\n    string = str(digit)\n    if len(string)<5:\n        nulls = (5 - len(string))*\"0\"\n        string  = nulls + string\n    return string", "from hashlib import md5\nfrom itertools import product\ndef crack(hash):\n    digits = [str(x) for x in range(10)]\n    return next(s for s in map(lambda tup:\"\".join(tup),product(digits,repeat=5)) if md5(bytes(s,\"utf-8\")).hexdigest()==hash)", "from hashlib import md5\n\ndef crack(hash):\n    for i in range(10 ** 5):\n        s = b\"%05d\" % i\n        if md5(s).hexdigest() == hash:\n            return s.decode()", "import hashlib\ndef crack(hash):\n    return [str(x) for x in range(100000) if hashlib.md5(('{0:05}'.format(x)).encode()).hexdigest()== hash][0].zfill(5)\n"]