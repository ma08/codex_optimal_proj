["dt, a = None, None\ndef dfs(z):\n    r = [{}, {}];ln = len(dt[z])\n    if ln == 0:r[0][0] = 0;r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0]);r[0] = l[1]\n        for m in l[0]:            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0]);l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nfor i in range(int(input())):\n    n, m, k = map(int, input().split());a = [0] + [int(x) - 1 for x in input().split()];dt = [[] for i in range(n + 1)];\n    for i in range(m):u, v = map(int, input().split());dt[u].append(v)\n    r = dfs(1);k = (1 << k) - 1\n    if (k in r[0]):        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):        v = r[1][k]\n    else:        v = -1\n    print(v)", "dt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\nfor i in range(int(input())):\n    n, m, k = map(int, input().split());a = [0] + [int(x) - 1 for x in input().split()];dt = [[] for i in range(n + 1)];\n    for i in range(m):u, v = map(int, input().split());dt[u].append(v)\n    r = dfs(1);k = (1 << k) - 1\n    if (k in r[0]):        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):        v = r[1][k]\n    else:        v = -1\n    print(v)", "dt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    \n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\n# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "dt, a = None, None\r\n\r\ndef dfs(z):\r\n    r = [{}, {}]\r\n\r\n    ln = len(dt[z])\r\n\r\n    if ln == 0:\r\n        r[0][0] = 0\r\n        r[1][1 << a[z]] = 1\r\n\r\n    elif ln == 1:\r\n        l = dfs(dt[z][0])\r\n        r[0] = l[1]\r\n\r\n        for m in l[0]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\r\n        for m in l[1]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\r\n\r\n    elif ln == 2:\r\n        l0 = dfs(dt[z][0])\r\n        l1 = dfs(dt[z][1])\r\n\r\n        for i0 in range(2):\r\n            for i1 in range(2):\r\n                for m0 in l0[i0]:\r\n                    for m1 in l1[i1]:\r\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\r\n\r\n        for m0 in l0[1]:\r\n            for m1 in l1[1]:\r\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\r\n\r\n    return r\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n\r\n    n, m, k = map(int, input().split())\r\n    a = [0] + [int(x) - 1 for x in input().split()]\r\n\r\n    dt = [[] for i in range(n + 1)]\r\n    for i in range(m):\r\n        u, v = map(int, input().split())\r\n        dt[u].append(v)\r\n\r\n    r = dfs(1)\r\n\r\n    k = (1 << k) - 1\r\n    if (k in r[0]):\r\n        v = min(r[0][k], r[1][k])\r\n    elif (k in r[1]):\r\n        v = r[1][k]\r\n    else:\r\n        v = -1\r\n\r\n    print(v)\r\n", "dt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\r\ndt, a = None, None\r\n\r\ndef dfs(z):\r\n    r = [{}, {}]\r\n\r\n    ln = len(dt[z])\r\n\r\n    if ln == 0:\r\n        r[0][0] = 0\r\n        r[1][1 << a[z]] = 1\r\n\r\n    elif ln == 1:\r\n        l = dfs(dt[z][0])\r\n        r[0] = l[1]\r\n\r\n        for m in l[0]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\r\n        for m in l[1]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\r\n\r\n    elif ln == 2:\r\n        l0 = dfs(dt[z][0])\r\n        l1 = dfs(dt[z][1])\r\n\r\n        for i0 in range(2):\r\n            for i1 in range(2):\r\n                for m0 in l0[i0]:\r\n                    for m1 in l1[i1]:\r\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\r\n\r\n        for m0 in l0[1]:\r\n            for m1 in l1[1]:\r\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\r\n\r\n    return r\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n\r\n    n, m, k = map(int, input().split())\r\n    a = [0] + [int(x) - 1 for x in input().split()]\r\n\r\n    dt = [[] for i in range(n + 1)]\r\n    for i in range(m):\r\n        u, v = map(int, input().split())\r\n        dt[u].append(v)\r\n\r\n    r = dfs(1)\r\n\r\n    k = (1 << k) - 1\r\n    if (k in r[0]):\r\n        v = min(r[0][k], r[1][k])\r\n    elif (k in r[1]):\r\n        v = r[1][k]\r\n    else:\r\n        v = -1\r\n\r\n    print(v)\r\n", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "dt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\r\ndt, a = None, None\r\n\r\ndef dfs(z):\r\n    r = [{}, {}]\r\n\r\n    ln = len(dt[z])\r\n\r\n    if ln == 0:\r\n        r[0][0] = 0\r\n        r[1][1 << a[z]] = 1\r\n\r\n    elif ln == 1:\r\n        l = dfs(dt[z][0])\r\n        r[0] = l[1]\r\n\r\n        for m in l[0]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\r\n        for m in l[1]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\r\n\r\n    elif ln == 2:\r\n        l0 = dfs(dt[z][0])\r\n        l1 = dfs(dt[z][1])\r\n\r\n        for i0 in range(2):\r\n            for i1 in range(2):\r\n                for m0 in l0[i0]:\r\n                    for m1 in l1[i1]:\r\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\r\n\r\n        for m0 in l0[1]:\r\n            for m1 in l1[1]:\r\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\r\n\r\n    return r\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n\r\n    n, m, k = map(int, input().split())\r\n    a = [0] + [int(x) - 1 for x in input().split()]\r\n\r\n    dt = [[] for i in range(n + 1)]\r\n    for i in range(m):\r\n        u, v = map(int, input().split())\r\n        dt[u].append(v)\r\n\r\n    r = dfs(1)\r\n\r\n    k = (1 << k) - 1\r\n    if (k in r[0]):\r\n        v = min(r[0][k], r[1][k])\r\n    elif (k in r[1]):\r\n        v = r[1][k]\r\n    else:\r\n        v = -1\r\n\r\n    print(v)", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "# cook your dish here\ndt, a = None, None\n\ndef dfs(z):\n    r = [{}, {}]\n\n    ln = len(dt[z])\n\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n\n        for m in l[0]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\n\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n\n    return r\n\nt = int(input())\nfor i in range(t):\n\n    n, m, k = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        dt[u].append(v)\n\n    r = dfs(1)\n\n    k = (1 << k) - 1\n    if (k in r[0]):\n        v = min(r[0][k], r[1][k])\n    elif (k in r[1]):\n        v = r[1][k]\n    else:\n        v = -1\n\n    print(v)\n", "dt, a = None, None\r\n\r\ndef dfs(z):\r\n    r = [{}, {}]\r\n\r\n    ln = len(dt[z])\r\n\r\n    if ln == 0:\r\n        r[0][0] = 0\r\n        r[1][1 << a[z]] = 1\r\n\r\n    elif ln == 1:\r\n        l = dfs(dt[z][0])\r\n        r[0] = l[1]\r\n\r\n        for m in l[0]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[0][m] + 1) if (1 << a[z]) | m in r[1] else l[0][m] + 1\r\n        for m in l[1]:\r\n            r[1][(1 << a[z]) | m] = min(r[1][(1 << a[z]) | m], l[1][m] + 1) if (1 << a[z]) | m in r[1] else l[1][m] + 1\r\n\r\n    elif ln == 2:\r\n        l0 = dfs(dt[z][0])\r\n        l1 = dfs(dt[z][1])\r\n\r\n        for i0 in range(2):\r\n            for i1 in range(2):\r\n                for m0 in l0[i0]:\r\n                    for m1 in l1[i1]:\r\n                        r[1][(1 << a[z]) | m0 | m1] = min(r[1][(1 << a[z]) | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if (1 << a[z]) | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\r\n\r\n        for m0 in l0[1]:\r\n            for m1 in l1[1]:\r\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\r\n\r\n    return r\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n\r\n    n, m, k = map(int, input().split())\r\n    a = [0] + [int(x) - 1 for x in input().split()]\r\n\r\n    dt = [[] for i in range(n + 1)]\r\n    for i in range(m):\r\n        u, v = map(int, input().split())\r\n        dt[u].append(v)\r\n\r\n    r = dfs(1)\r\n\r\n    k = (1 << k) - 1\r\n    if (k in r[0]):\r\n        v = min(r[0][k], r[1][k])\r\n    elif (k in r[1]):\r\n        v = r[1][k]\r\n    else:\r\n        v = -1\r\n\r\n    print(v)\r\n"]