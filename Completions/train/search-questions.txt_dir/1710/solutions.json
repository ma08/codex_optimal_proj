["class Warrior():\n    \n    def __init__(self):\n        self._experience = 100\n        self.rs = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n        self.achievements = []\n    def training(self, train):\n        if(train[2] > self.level) : return \"Not strong enough\";\n        self._experience += train[1]\n        self.achievements.append(train[0])\n        return train[0]\n    def battle(self, lvl):\n        diff = lvl - self.level\n        if(0 >= lvl or lvl > 100): return \"Invalid level\"\n        if(diff >= 5 and (lvl // 10) > (self.level // 10)):\n            return \"You've been defeated\"\n        if(diff > 0) : \n            self._experience += 20 * diff * diff\n            return \"An intense fight\"\n        if(diff > -2):\n            self._experience += 5 if diff == -1 else 10\n            return \"A good fight\"\n        return \"Easy fight\"\n    @property\n    def level(self):\n        return self.experience //  100\n    @property\n    def rank(self):\n        return self.rs[self.experience // 1000]\n    @property\n    def experience(self):\n        return min(10000, self._experience)", "class Warrior(object):\n    \n    MAX_LVL        = 100\n    MAX_XPS        = 10000\n    LVL_XP_RATIO   = 100\n    RANKS          = [\"\", \"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n    DEF_RET_ACHIEV = \"Not strong enough\"\n    INVALID_BATTLE = \"Invalid level\"\n    FAILED_BATTLE  = \"You've been defeated\"\n    STR_BATTLE     = [\"A good fight\", \"An intense fight\", \"Easy fight\"]\n    \n    \n    def __init__(self):      self.xps, self.achiev = self.LVL_XP_RATIO, []\n    \n    @property\n    def level(self):         return self.xps // self.LVL_XP_RATIO\n    @property\n    def rank(self):          return self.RANKS[self.getRank(self.xps)]\n    @property\n    def experience(self):    return self.xps\n    @property\n    def achievements(self):  return self.achiev[:]\n    \n    def getRank(self,xps):   return xps//1000 + 1\n    def updateXps(self,xp):  self.xps = min( self.xps+xp, self.MAX_XPS )\n    \n    def battle(self, oLvl):\n        diff = oLvl - self.level\n        if not (1 <= oLvl <= self.MAX_LVL):\n            return self.INVALID_BATTLE\n            \n        if diff >= 5 and self.getRank(self.xps) < self.getRank(oLvl*self.LVL_XP_RATIO):\n            return self.FAILED_BATTLE\n        \n        xpGain = 20 * diff**2 if diff > 0 else max(0, 10+5*diff)\n        iRet   = (diff>0)-(diff<0) if diff != -1 else 0\n        self.updateXps(xpGain)\n        return self.STR_BATTLE[iRet]\n    \n    def training(self, event):\n        ach, xpGain, minLvl = event\n        if self.level < minLvl: return self.DEF_RET_ACHIEV\n        \n        self.updateXps(xpGain)\n        self.achiev.append(ach)\n        return ach", "class Warrior():\n    def __init__(self) :\n        self.level = 1\n        self.experience = 100\n        self.rank = \"Pushover\"\n        self.achievements = [] \n        self.max_level = 100\n        self.available_ranks = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n\n    def battle(self, enemy_level) :\n        if enemy_level < 1 or enemy_level > 100 :\n            return \"Invalid level\"\n        if enemy_level <= self.level :\n            diff = self.level - enemy_level\n            self._get_experience(10 // (diff + 1))\n            if diff > 1 :\n                return \"Easy fight\"\n            else :\n                return \"A good fight\"\n        else :\n            diff = enemy_level - self.level\n            if diff >= 5 and enemy_level // 10 > self.level // 10 :\n                return \"You've been defeated\"\n            else :\n                self._get_experience(20 * diff * diff)\n                return \"An intense fight\"\n    \n    def training(self, achievement) :\n        description = achievement[0]\n        experience = achievement[1]\n        min_level = achievement[2]\n        if self.level >= min_level :\n            self.achievements.append(description)\n            self._get_experience(experience)\n            return description\n        else :\n            return \"Not strong enough\"\n    \n    def _get_experience(self, experience) :\n        if experience >= 5 :\n            self.experience += experience  \n            self.level = self.experience // 100\n            if self.level >= self.max_level :            \n                self.level = self.max_level \n                self.experience = self.max_level * 100\n            self.rank = self.available_ranks[self.experience // 1000]    \n", "class Warrior:\n    def __init__(self):\n        self.ranks = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \n                      \"Champion\", \"Master\", \"Greatest\"]\n        self._experience = 100\n        self.achievements = []\n        \n    @property\n    def experience(self):\n        return self._experience\n    \n    @experience.setter\n    def experience(self, value):\n        self._experience = value\n        if self._experience >= 10000:\n            self._experience = 10000     \n        \n    @property\n    def rank_tier(self):\n        return self.level // 10\n        \n    @property\n    def rank(self):\n        return self.ranks[self.rank_tier]\n        \n    @property\n    def level(self):\n        return self.experience // 100\n        \n    def battle(self, enemy_level):\n        if enemy_level > 100 or enemy_level < 1:\n            return \"Invalid level\"\n        elif enemy_level // 10 > self.rank_tier and enemy_level >= self.level + 5:\n            return \"You've been defeated\"\n        elif enemy_level == self.level:\n            self.experience += 10\n            return \"A good fight\"\n        elif enemy_level == self.level - 1:\n            self.experience += 5\n            return \"A good fight\"\n        elif enemy_level <= self.level - 2:\n            self.experience += 0\n            return \"Easy fight\"\n        elif enemy_level > self.level:\n            self.experience += 20 * (enemy_level - self.level) ** 2\n            return \"An intense fight\"\n        \n    def training(self, fight):\n        description, exp_earned, level_requirement = fight\n        if self.level >= level_requirement:\n            self.experience += exp_earned\n            self.achievements.append(description)\n            return description\n        else:\n            return \"Not strong enough\"", "class Warrior:\n    def __init__(self):\n        self.xp = 100\n        self.ranks = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n        self.achievements = []\n\n    @property\n    def experience(self):\n        return min(self.xp, 10000)\n    @property\n    def level(self):\n        return self.experience//100\n    @property\n    def rank(self):\n        return self.ranks[self.level//10]\n    \n    def battle(self, level):\n        diff = level - self.level\n        if not (0<level<=100): return \"Invalid level\"\n        elif diff>4 and self.ranks.index(self.ranks[level//10]) > self.ranks.index(self.rank): return \"You've been defeated\"\n        elif diff>0:\n            self.xp += 20*diff*diff\n            return \"An intense fight\"\n        elif not diff:\n            self.xp += 10\n            return 'A good fight'\n        elif diff==-1:\n            self.xp += 5\n            return 'A good fight'\n        return \"Easy fight\"\n\n    def training(self, arr):\n        if self.level >= arr[2]:\n            self.xp += arr[1]\n            self.achievements.append(arr[0])\n            return arr[0]\n        return \"Not strong enough\"", "class Warrior():\n    rank_list = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \n                        \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n    \n    def __init__(self):\n        self.level = 1\n        self.experience = 100\n        self.achievements = []\n        \n    @property\n    def rank(self):\n        return self.rank_list[self.level//10]\n        \n    def get_experience(self, point):\n        exp = self.experience + point\n        self.experience = (exp , 10000)[exp>=10000]\n        self.level = self.experience // 100\n        \n    def training(self, lst):\n        if lst[-1]<= self.level:\n            achiev = lst[0]\n            self.achievements.append(achiev)\n            self.get_experience(lst[1])\n            return achiev\n        return \"Not strong enough\"\n    \n    def battle(self, enemy_level):\n        if 0<enemy_level<101:\n            return self.get_result(enemy_level)\n        return \"Invalid level\"\n        \n    def get_result(self, enemy_level ):\n        diff = enemy_level - self.level\n        if diff >=5 and ((enemy_level//10) - (self.level//10)) > 0:\n            return \"You've been defeated\"\n        fight_result = {(1,0,1):\"Easy fight\", (1,1,0):\"A good fight\"} \n        point = { -2:0, -1:5, 0:10 }.get((diff, -2)[diff<-1], 20 * (diff * diff))\n        self.get_experience(point) \n        return fight_result.get((point<=10,point>0, point==0), \"An intense fight\")\n", "class Warrior():\n    \n    def __init__(self):\n        self.rankList = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n        \n        self.level = 1\n        self.experience = 100\n        self.rank = \"Pushover\"\n        self.achievements = []\n        pass\n    \n    def gainXP(self, xp):\n        if self.experience + xp <= 10000:\n            self.experience += xp\n            self.level = int(self.experience / 100)\n            self.rank = self.rankList[int(self.level/10)]\n        else:\n            self.experience = 10000\n            self.level = 100\n            self.rank = self.rankList[int(self.level/10)]\n        \n    def battle(self, enemyLevel):\n        print(str(self.level) + \" VS \" + str(enemyLevel))\n        if enemyLevel < 1 or enemyLevel > 100:\n            return \"Invalid level\"\n        \n        if enemyLevel == self.level:\n            self.gainXP(10)\n            return \"A good fight\"\n        elif enemyLevel == self.level - 1:\n            self.gainXP(5)\n            return \"A good fight\"\n        elif int(enemyLevel/10) > int(self.level/10) and enemyLevel-4 > self.level:\n            return \"You've been defeated\"\n        elif enemyLevel > self.level:\n            self.gainXP(20 * (enemyLevel - self.level) * (enemyLevel - self.level))\n            return \"An intense fight\"\n        else:\n            return \"Easy fight\"\n        \n    def training(self, array):\n        if self.level >= array[2]:\n            self.gainXP(array[1])\n            self.achievements.append(array[0])\n            return array[0]\n        else:\n            return \"Not strong enough\"", "class Warrior():\n    def __init__(self):\n        self.level = 1;\n        self.maxLevel = 100;\n        self.experience = 100;\n        self.ranks = [\"Pushover\",\"Novice\",\"Fighter\",\"Warrior\",\"Veteran\",\"Sage\",\"Elite\",\"Conqueror\",\"Champion\",\"Master\",\"Greatest\"]\n        self.rank = \"Pushover\"\n        self.achievements = []\n    def calculateRank(self,enemyLevel=None):\n        if not enemyLevel:\n            try:\n                self.rank = self.ranks[int(self.level/10)]\n                return self.rank\n            except Exception as e:\n                self.rank = \"Greatest\"\n                return \"Greatest\"\n        else:\n            return self.ranks[int(enemyLevel/10)]\n    \n    def calculateLevel(self):\n        self.level = int(self.experience/100)\n        self.calculateRank()\n            \n    def increaseExperience(self,amount):\n        if self.experience + amount > 10000:\n            self.experience = 10000\n        else:\n            self.experience += amount\n        self.calculateLevel()\n        \n        \n        \n    def battle(self,enemyLevel):\n        if enemyLevel > 100 or enemyLevel < 1:\n            return \"Invalid level\"\n        levelDiff = self.level - enemyLevel\n        if enemyLevel == self.level:\n            self.increaseExperience(10)\n            return \"A good fight\"\n        \n        if levelDiff == 1:\n            self.increaseExperience(5)\n            return \"A good fight\"\n        if levelDiff >= 2:\n            return \"Easy fight\"\n        \n        if levelDiff < 0:\n            enemyRankIndex = self.ranks.index(self.calculateRank(enemyLevel=enemyLevel))\n            warriorRankIndex = self.ranks.index(self.calculateRank())\n            higherLevel = levelDiff * -1\n            \n            if (enemyRankIndex - warriorRankIndex) >= 1 and higherLevel >= 5:\n                return \"You've been defeated\"\n                  \n            experienceGained = 20*higherLevel*higherLevel\n            self.increaseExperience(experienceGained)\n            return \"An intense fight\"\n    def training(self,args):\n        note = args[0]\n        experienceEarned = args[1]\n        minLevel = args[2]\n        if self.level >= minLevel:\n            self.increaseExperience(experienceEarned)\n            self.achievements.append(note)\n            return note\n        else:\n            return \"Not strong enough\"", "class Warrior():\n    ranks = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n    \n    def __init__(self):\n        self.experience = 100\n        self.achievements = []\n    \n    @property\n    def level(self):\n        return self.experience//100\n    \n    @property\n    def rank(self):\n        return self.ranks[self.level//10]\n    \n    def __incr_exp(self, exp):\n        self.experience = min(10000, self.experience + exp)\n    \n    def training(self, L):\n        desc, exp, lvl = L\n        if self.level < lvl: return \"Not strong enough\"\n        self.__incr_exp(exp)\n        self.achievements.append(desc)\n        return desc\n    \n    def battle(self, lvl):\n        if not 1 <= lvl <= 100: return \"Invalid level\"\n        diff = lvl - self.level\n        if diff < -1: return \"Easy fight\"\n        if diff < 1:\n            self.__incr_exp(5*(diff+2))\n            return \"A good fight\"\n        if diff < 5 or self.level//10 == lvl//10:\n            self.__incr_exp(20 * diff * diff)\n            return \"An intense fight\"\n        return \"You've been defeated\""]