["def ipv4__parser(addr, mask):\n    return tuple(\".\".join(str(n) for n in a) for a in zip(*(((a & m), (a & ~m)) for a, m in zip((int(n) for n in addr.split(\".\")), (int(n) for n in mask.split(\".\"))))))", "from socket import inet_aton, inet_ntoa\nfrom struct import Struct\n\nAddr = Struct('>I')\n\ndef ipv4__parser(ip_addr, mask):\n    i, = Addr.unpack(inet_aton(ip_addr))\n    m, = Addr.unpack(inet_aton(mask))\n    return inet_ntoa(Addr.pack(i&m)), inet_ntoa(Addr.pack(i&~m))", "from socket import inet_aton, inet_ntoa\nfrom struct import unpack, pack\n\nto_int = lambda s: unpack(\">L\", inet_aton(s))[0]\nto_ip  = lambda x: inet_ntoa(pack('>L', x))\n\ndef ipv4__parser(ip_addr, mask):\n    ip, m = to_int(ip_addr), to_int(mask)\n    return to_ip(ip & m), to_ip(ip & ~m)", "def ipv4__parser(ip_addr, mask):\n    arr = [(int(p), int(m)) for p, m in zip(ip_addr.split('.'), mask.split('.'))]\n    return ('.'.join(str(a & b) for a, b in arr), '.'.join(str(a & b ^ a) for a, b in arr))", "def ipv4__parser(ip_addr, mask):\n    net_addr = \".\".join(str(int(a) & int(b)) for a, b in zip(ip_addr.split(\".\"), mask.split(\".\")))\n    host_addr = \".\".join(str(int(a) & (255 - int(b))) for a, b in zip(ip_addr.split(\".\"), mask.split(\".\")))\n    return net_addr, host_addr\n", "def ipv4__parser(ip_addr, mask):\n    host = []\n    network = []\n\n    # convert string addresses to a list of integers\n    ip_addr = [int(s) for s in ip_addr.split('.')]\n    mask = [int(s) for s in mask.split('.')]\n\n    # calculate host and network addresses\n    for octet in range(4):\n        host += [ip_addr[octet] & mask[octet]]\n        network += [ip_addr[octet] & ~mask[octet]]\n    \n    # convert list of integers to strings\n    host = [str(i) for i in host]\n    network = [str(i) for i in network]\n\n    return '.'.join(host), '.'.join(network)", "def ipv4__parser(ip, m):\n    n, h = '', ''\n    for i, j in zip(ip.split('.'), m.split('.')):\n        r = int(''.join([str(int(k) & int(l)) for k, l in zip(bin(int(i))[2:].zfill(8), bin(int(j))[2:].zfill(8))]), 2)\n        n += str(r) + '.' ; h += str(int(i) - r) + '.'\n    return (n.strip('.'),h.strip('.'))", "def ipv4__parser(ip_addr, mask):\n    ip, sMask = ip_addr.split(\".\"), mask.split(\".\")\n    nb        = [ str(int(a)&int(b))   for a,b in  zip(ip, sMask) ]\n    hi        = [ str(int(a) - int(b)) for a, b in zip(ip, nb) ]\n    return  '.'.join(nb), '.'.join(hi) ", "def ipv4__parser(ip_addr, mask):\n    net_addr = '.'.join([str(int(i) & int(m)) for i, m in zip(ip_addr.split('.'), mask.split('.'))])\n    host_addr = '.'.join([str(int(i)-int(n)) for i, n in zip(ip_addr.split('.'), net_addr.split('.'))])\n    return net_addr, host_addr\n", "def to_int(n):\n    return sum(int(i) * 256 ** e for (e, i) in enumerate(reversed(n.split('.'))))\n\ndef to_ip(n):\n    return '.'.join(str((n // (256 ** e)) & 255) for e in range(3, -1, -1))\n\ndef ipv4__parser(ip_addr, mask):\n    addr = to_int(ip_addr)\n    mask = to_int(mask)\n    return to_ip(addr & mask), to_ip(addr & ~mask)"]