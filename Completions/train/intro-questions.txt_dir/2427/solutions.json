["class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if nums == []:\n             return 0\n         \n         count = 0\n         countMax =0\n         for ele in nums:\n             if ele == 1:\n                 count += 1\n             else:\n                 if count > countMax:\n                     countMax = count\n                 count = 0\n         \n         if count > countMax:\n             countMax = count\n         \n         return countMax\n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         cur=0\n         ans=0\n         for num in nums:\n             if num==1:\n                 cur=cur+1\n                 ans = max(ans,cur)\n             else:cur=0\n         return ans\n                 \n         \n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = 0\n         max_count = 0\n         for num in nums:\n             if num == 1:\n                 count += 1\n             else:\n                 if count > max_count:\n                     max_count = count\n                 count = 0\n                 \n         if count > max_count:\n                     max_count = count\n                 \n         return max_count", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         cnt = 0\n         max_cnt = 0\n         for x in nums:\n             if x == 1:\n                 cnt+=1\n             else:\n                 if max_cnt < cnt:\n                     max_cnt = cnt\n                 cnt = 0\n         if max_cnt < cnt:\n             max_cnt = cnt\n         return max_cnt", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         ans=0\n         c= 0\n         for i in nums:\n             c=i*c+i\n             if c >ans:\n                 ans = c\n         return ans", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_c = 0\n         cur = 0\n         \n         for n in nums:\n             if n == 1:\n                 cur += 1\n             \n             if n == 0:\n                 max_c = max(max_c, cur)\n                 cur = 0\n             \n         max_c = max(max_c, cur)\n                 \n         return max_c\n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_c = 0\n         cur = 0\n         \n         for n in nums:\n             if n == 1:\n                 cur += 1\n             \n             if n == 0:\n                 max_c = max(max_c, cur)\n                 cur = 0\n             \n         max_c = max(max_c, cur)\n                 \n         return max_c\n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_c = 0\n         cur = 0\n         \n         for n in nums:\n             if n == 1:\n                 cur += 1\n             \n             if n == 0:\n                 max_c = max(max_c, cur)\n                 cur = 0\n             \n         max_c = max(max_c, cur)\n                 \n         return max_c\n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         sum = 0\n         max = 0\n         for i in range(0,len(nums)):\n             if nums[i]==1:\n                 sum += 1\n             else:\n                 sum = 0\n             if sum > max:\n                 max = sum\n             else:\n                 max = max\n         return max\n             \n         \n", "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         max_final = 0\n         max_here = 0\n         \n         for num in nums:\n             if num == 1:\n                 max_here+=1\n                 max_final = max(max_final, max_here)\n             else:\n                 max_here = 0\n         return max_final\n"]