["def evaporator(content, evap_per_day, threshold):\n    n = 0\n    current = 100\n    percent = 1 - evap_per_day / 100.0\n    while current > threshold:\n        current *= percent\n        n += 1\n    return n", "import math\n\ndef evaporator(content, evap_per_day, threshold):\n    return math.ceil(math.log(threshold / 100.0) / math.log(1.0 - evap_per_day / 100.0))\n", "from math import log,ceil\n\ndef evaporator(content, evap_per_day, threshold):\n    return ceil(log(threshold/100,1-evap_per_day/100))", "import math\ndef evaporator(content, evap_per_day, threshold):\n    return int(math.ceil(math.log(threshold/100.0, 1.0-evap_per_day/100.0)))", "def evaporator(content, evap_per_day, threshold):\n    thresholdper = threshold/100\n    amount_remaining = content\n    days = 0\n    while amount_remaining/content >= thresholdper:\n        amount_remaining = amount_remaining * (1 - (evap_per_day/100))\n        days += 1\n    return days", "from math import *\ndef evaporator(content, evap_per_day, threshold):\n    return ceil(log(threshold/100, 1-evap_per_day/100))", "def evaporator(content, evap_per_day, threshold):\n    print(content, evap_per_day, threshold)\n    i = 0\n    c = 1\n    while c >= threshold/100:\n        c *= 1 - evap_per_day/100\n        i += 1\n    return i", "import math\ndef evaporator(content, evap_per_day, threshold):\n  evap_per_day, threshold = evap_per_day / 100.0, threshold / 100.0\n  return math.ceil(math.log(threshold) / math.log(1 - evap_per_day))", "from math import ceil, log\ndef evaporator(c, e, t):\n    return ceil(log(t/100, 1-(e/100)))", "def evaporator(content, evap_per_day, threshold):\n    thres = content * threshold/100\n    count = 0\n    while content > thres:\n        content = content - content * evap_per_day/100\n        count += 1\n    return count", "def evaporator(content, evap_per_day, threshold):\n    \n    limit = (content * threshold) / 100\n    days = 0\n    while content > limit:\n        days += 1\n        content = content - ((content * evap_per_day)/100)\n    return days", "from math import log2, ceil\ndef evaporator(content, evap_per_day, threshold):\n  return ceil(log2(threshold/100.0) / log2((1-evap_per_day/100.0)))", "def evaporator(content, evap_per_day, threshold):\n    day = 0\n    p = content/100*threshold\n    while content >= p:\n        day+=1\n        perc = content / 100 * evap_per_day\n        content -= perc\n    return day\n", "from math import log\n\ndef evaporator(_content, evap_per_day, threshold):\n    return int(log(threshold / 100, 1 - evap_per_day / 100) + 1)", "def evaporator(content, evap_per_day, threshold):\n    from math import log, ceil\n    return ceil(log(threshold/100) / log(1 - evap_per_day/100))", "def evaporator(initial_volume, evap_per_day, threshold):\n  threshold = float(threshold)\n  \n  def loop(current_volume):\n    if (is_below_threshold(current_volume)):\n      return 0\n    else: \n      return 1 + loop(decrement_volume(current_volume))\n\n  def decrement_volume(current_volume): \n    return current_volume * (1 - evap_per_day / 100.00)\n  \n  def is_below_threshold(current_volume):\n    return (current_volume / initial_volume) < (threshold / 100.0)\n    \n  return loop(float(initial_volume))\n\n", "def evaporator(content, evap_per_day, threshold):\n    d = 0\n    p = content/100*threshold\n    while content>p:\n        content = content - content/100*evap_per_day\n        d += 1\n\n    return d", "def evaporator(c, e, t):\n  tc = 100\n  count = 0\n  while tc > t:\n    tc -= tc * (e/100)\n    count += 1\n  return count\n", "def evaporator(content, evap_per_day, threshold):\n    \n    day = 0\n    maxUse = content * (threshold/100)\n    evap = evap_per_day/100    \n    while content > maxUse :\n        content = content - content * evap\n        day += 1\n    \n    return day", "from math import ceil, log\ndef evaporator(content, evap_per_day, threshold):\n    return ceil(log(threshold/100.0, (100-evap_per_day)/100.0))", "def evaporator(content, evap, threshold):\n    days = 0\n    lost = 100\n    \n    while lost >= threshold:\n        lost -= lost * evap / 100\n        days += 1\n        \n    return days", "#!/usr/bin/env python3 \ndef evaporator(content, evap_per_day, threshold):\n    \n    day_counter = 0\n    turn_off_level = content * (((threshold/100)))\n    \n    while content > turn_off_level:\n        content = content * (1-(((evap_per_day)/100)))\n        day_counter += 1   \n    return day_counter\n\nevaporator(10, 10, 10)", "def evaporator(content, evap_per_day, threshold):\n    t = content * threshold / 100\n    counter = 0\n    while content >= t:\n        content = content - content * evap_per_day / 100\n        counter += 1\n    return counter\n", "def evaporator(content, evap_per_day, threshold):\n    days = 1\n    new_content = content\n    while True:\n        new_content = new_content - new_content * evap_per_day * 0.01\n        if new_content / content < threshold * 0.01:\n            return days\n        else:\n            days += 1", "def evaporator(content, evap_per_day, threshold):\n    #It is important to remember that percent is a ratio and content is a volume\n    critical_amount=(threshold/100)*content\n    n=0\n    while content >=critical_amount:\n        content=content-(content*(evap_per_day/100))\n        n+=1\n    return n\n        \n        \n        \n", "import math\n\ndef evaporator(content, evap_per_day, threshold):\n    percent_loss = 1 - evap_per_day/100\n    x = math.log(threshold/100)/math.log(percent_loss)\n    x = math.ceil(x)  \n    return x", "def evaporator(content, evap_per_day, threshold):\n    content_aux = (content * threshold) / 100\n    days = 0\n    while content > content_aux:\n        content -= (content*evap_per_day)/100\n        days += 1\n    return days", "def evaporator(content, evap, threshold):\n    day=0\n    pos=content*threshold/100\n    while pos<content:\n        content=content-content*(evap)/100\n        day=day+1\n    return day", "def evaporator(content, evap_per_day, threshold):\n    new_content = content\n    thresh_quant = content * threshold / 100\n    n_day_expire = 0\n    while new_content > thresh_quant: \n        new_content = new_content - (new_content * (evap_per_day / 100))\n        n_day_expire += 1\n    return n_day_expire", "def evaporator(content, evap_per_day, threshold):\n    day = 0\n    threshold = threshold*content/100\n    while content > threshold:\n        content -= content*evap_per_day/100\n        day += 1\n    return day", "def evaporator(content, evap_per_day, threshold):\n    rem = content * 0.01 * threshold\n    count = 0\n    while content >= rem:\n        content -= content * 0.01 * evap_per_day\n        count += 1\n    return count\n", "def evaporator(content, evap_per_day, threshold):\n    a=int(content)\n    b=0\n    while content > (a/100)*threshold:\n        content=content-(content/100)*evap_per_day\n        b+=1\n    return b\n        \n    \n    \n", "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    perc = 100\n    perc_per_day = 1 - evap_per_day / 100\n    while perc > threshold:\n        perc *= perc_per_day\n        n += 1\n    return n", "def evaporator(content, evap_per_day, threshold):\n    a = 0\n    threshold *=content/100\n    while content >= threshold:\n        a += 1\n        content*=(1-evap_per_day/100)\n    return a", "def evaporator(content, evap_per_day, threshold):\n    limit = content * threshold/100\n    days = 0\n    while content > limit:\n        content -= content * evap_per_day/100\n        days += 1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    i = 0\n    threshold = threshold * 0.01 * content\n    while content > threshold:\n        i += 1\n        content -= content * evap_per_day * 0.01\n\n    return i", "def evaporator(content, e_p_d, thresh):\n    n = 0\n    start_ = 100\n    per_ = 1 - e_p_d / 100.0\n    while start_ > thresh:\n        start_ *= per_\n        n += 1\n    return n", "from math import log, ceil\ndef evaporator(content, e, t):\n    return ceil(log(t/100,1-e/100))", "def evaporator(content, evap_per_day, threshold):\n    cday=0\n    left=content\n    while left>content*(threshold/100):\n        left=left-(left*(evap_per_day/100))\n        cday+=1\n    return cday", "def evaporator(content, evap_per_day, threshold):\n    result = 0\n    \n    percent_change = 100\n    \n    while (percent_change > threshold):\n        percent_change -= percent_change * (evap_per_day/100)\n        result = result + 1\n    return result\n\n", "def percent_convert(num):\n    return num/100\n\ndef evaporator(content, evap_per_day, threshold):\n    content= 1\n    evap_per_day = percent_convert(evap_per_day)\n    threshold = percent_convert(threshold)\n    day_counter = 0\n    while content > threshold:\n        content = content * (1 - evap_per_day)\n        day_counter+=1\n    return day_counter", "def evaporator(content, evap_per_day, threshold):\n    day_count = 0\n    percentage_to_ml = content * threshold / 100\n    \n    while content >= percentage_to_ml:\n        day_count += 1\n        content -= content * evap_per_day / 100\n    \n    return day_count", "def evaporator(content, evap_per_day, threshold):\n    \n    days = 0\n    current = content\n    \n    \n    while content*threshold/100 < current:\n        current *= (1-evap_per_day/100)\n        days += 1\n    \n    return days\n", "def evaporator(content, evap_per_day, threshold):\n    a = 100\n    k = 0\n    while a >= threshold:\n        a -= a * evap_per_day / 100\n        k += 1\n    return k", "def evaporator(content, evap_per_day, threshold):\n    day = 0\n    contentRemaining = content\n    \n    while contentRemaining  > threshold * content / 100:\n        contentRemaining -= evap_per_day / 100 * contentRemaining\n        day += 1\n    \n    return day", "def evaporator(content, evap, threshold):\n    ilosc = 100\n    day=0\n    while ilosc > threshold:\n        ilosc = ilosc * (1-evap/100)\n        day+=1\n    return day", "def evaporator(content, evap_per_day, threshold): #Jai Shree Ram!!!\n    result=0\n    n=content*threshold/100\n    while content>n:\n        content=content-(content*evap_per_day/100)\n        result+=1\n    return result    ", "def evaporator(content, evap_per_day, threshold):\n    hold = content*threshold / 100\n    day = 0\n    evap = evap_per_day / 100\n    while (hold < content):\n        content = content - content*evap\n        day += 1\n    return(day)", "def evaporator(content, evap_per_day, threshold):\n    \n    x = 0\n    y = content\n    while y > (content * (threshold/100)):\n        y = y - (y * (evap_per_day/100))\n        x = x + 1\n        \n    return x", "def evaporator(content, evap_per_day, threshold):\n    remain = 100.0\n    day = 0\n    while True:\n        day += 1\n        remain = remain * (100.0 - evap_per_day) / 100.0\n        if remain <= threshold:\n            return day", "import math\ndef evaporator(content, e, t):\n    return math.ceil(math.log(t/100)/math.log(1-e/100))\n    \n    \n", "def evaporator(content, evap_per_day, threshold):\n    perc = 100\n    days = 0\n    \n    while perc > threshold:\n        perc = perc * (1 - evap_per_day/100)\n        days += 1\n    return days", "def evaporator(a, b, c):\n    b /=100\n    a_origin = a\n    rem = a_origin\n    day = 0\n    trsh = c/100\n    while rem >= trsh:\n        day +=1\n        pr = a * b\n        a -=pr\n        rem = a/a_origin\n    return day\n", "def evaporator(content, evap_per_day, threshold):\n    c = 0\n    r = 1\n    while threshold/100 < r:\n        r -= (evap_per_day/100 * r)\n        c += 1\n    return c\n", "def evaporator(content, evap_per_day, threshold):\n    critical = content * threshold/100\n    days = 0\n    while content > critical:\n        days += 1\n        content -= content * evap_per_day/100\n        \n    return days", "def evaporator(content, evap_per_day, threshold):\n    p = lambda x: (100 - x) / 100\n    x = 100\n    times = 0\n    while x >= threshold:\n        x *= p(evap_per_day)\n        times += 1\n    return times", "def evaporator(content, evap_per_day, threshold):\n    p = lambda x: (100 - x) / 100\n    x = 100\n    times = 0\n    while x >= threshold:\n        x *= p(evap_per_day)\n        times += 1\n    else:\n        return times", "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    ct = content * (threshold/100)\n    while (content > ct):\n        content -= (content * (evap_per_day/100))\n        n += 1\n    return n", "def evaporator(content, evap_per_day, treshold, original=None):\n    if not original:\n        original = content\n    if content > original*treshold/100:\n        content*=(1 - evap_per_day/100)\n        return 1 + evaporator(content, evap_per_day, treshold, original)\n    return 0", "def evaporator(content, evap_per_day, threshold,original=None):\n    if not original:\n        original = content\n    if content > original*threshold/100:\n        content*=(1-evap_per_day/100)\n        return 1 + evaporator(content, evap_per_day, threshold, original)\n    return 0", "def evaporator(content, evap_per_day, threshold):\n    evap_per_day=evap_per_day/100\n    threshold=threshold/100\n    days=0\n    min_content = content*threshold\n    while content >= min_content:\n        content -= content * evap_per_day\n        days += 1\n    return days\n            \n            \n        \n            \n", "def evaporator(content, evap_per_day, threshold):\n    \n    days = 0\n    perc_content = 100\n    new_content = content\n    \n    while perc_content > threshold:\n        perct_evp = (evap_per_day / 100) * new_content\n        print(perct_evp)\n        new_content = new_content - perct_evp \n        print(new_content)\n        perc_content = (new_content / content) * 100\n        print(perc_content)\n        days += 1\n    \n    return days", "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    perc = 100\n    while perc > threshold:\n        perc *= 1 - evap_per_day / 100\n        n += 1\n    return n", "def evaporator(content, evap_per_day, threshold):\n    day=0\n    not_useful=content*(threshold/100)\n    while content>=not_useful:\n        content-=(evap_per_day/100)*content\n        day+=1\n    return day\n", "def evaporator(x, y, z):\n    content=x\n    evap_per_day=y/100\n    treshold=z/100\n    days=0\n    min_content = content*treshold\n    while content >= min_content:\n        content -= content * evap_per_day\n        days += 1\n    return days", "def evaporator(x, y, z):\n    content=x\n    evap_per_day=y\n    treshold=z\n    perc_th = (treshold)/100\n    perc_evap = (evap_per_day)/100\n    min_content= content*perc_th\n    total_days = 0\n    while content >= min_content:\n        content -= content*perc_evap\n        total_days += 1\n    return total_days", "def evaporator(content, evap_per_day, threshold):\n    q_threshold = content * threshold/100 \n    days = 0\n    \n    while content >= q_threshold:\n        q_evap_per_day = content * evap_per_day/100 \n        content = content - q_evap_per_day\n        days += 1\n    return(days)\n\n    \n", "def evaporator(content, evap_per_day, threshold):\n    day=[]\n    not_useful=content*(threshold/100)\n    while content>=not_useful:\n        content-=(evap_per_day/100)*content\n        day.append(content)\n    return(len(day))\n\n", "from itertools import count\n\ndef evaporator(content, evap_per_day, threshold):\n    percentage = 100\n    for day in count(start=1):\n        percentage = percentage*(1 - evap_per_day/100)\n        if percentage < threshold:\n            return day", "def evaporator(content, evap_per_day, threshold):\n    '''\n    receives:\n    - content of gas in ml.\n    - percentaje of content lost every day.\n    - threshold as a percentage of the original capacity below which the cooler does not work.\n    \n    returns:\n    - the nth day on which the evaporator will be out of use.\n    '''\n    days = 0\n    threshold_in_ml = content * threshold / 100\n    \n    while content > threshold_in_ml:\n        days += 1\n        content = content - (content * evap_per_day / 100)\n        \n    return days", "def evaporator(content, evap_per_day, threshold):\n    percentage = 100\n    for day in range(10000):\n        percentage = percentage*(1 - evap_per_day/100)\n        if percentage < threshold:\n            return day + 1", "def evaporator(content, evap_per_day, threshold):\n    counter_days = 0\n    full = 100\n    while full > threshold:\n        full -= full*(evap_per_day/100)\n        counter_days += 1    \n    return counter_days", "def evaporator(content, evap_per_day, threshold):\n    mlimit = content *(threshold/100)\n    days = 0\n    while content > mlimit:\n        content -= content*(evap_per_day/100)\n        days += 1\n        print(content)\n    return days", "def evaporator(content, evap_per_day, threshold):\n    n=0\n    daily_content=content\n    threshold_vol=threshold/100*content\n    while daily_content>threshold_vol:\n        daily_content=daily_content-(evap_per_day/100*daily_content)\n        n+=1   \n    print(f\"The {n}th day the evaporator is useless\")\n    return n", "def evaporator(content, evap_per_day, threshold):\n    evap_per_day=(evap_per_day/100)\n    threshold=content*(threshold/100)\n    total=content\n    days=0\n    while total > threshold:\n        total-=(total*evap_per_day)\n        days+=1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    total = 1\n    days=0\n    while (total>threshold/100):\n        total-= total*evap_per_day/100\n        days+=1\n    return days\n", "def evaporator(content, evap_per_day, threshold):\n    count = 0\n    og = content\n    while og * threshold / 100 < content:\n        content -= content * evap_per_day / 100\n        count += 1\n    return count", "def evaporator(content, evap, threshold):\n    counter = 0\n    threshold = content * (threshold/100)\n    evap = (evap/100)\n    while content >= threshold:\n        content -= content*evap\n        counter += 1\n    return counter\n", "def evaporator(content, evap_per_day, threshold):\n    days = 0\n    thrshld = content*threshold/100\n    while content >= thrshld:\n        content -= content*evap_per_day/100\n        days += 1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    days = 0\n    contentLeft = content\n    while (contentLeft > (content * (threshold/100))):\n        contentLeft = contentLeft * (1 - evap_per_day/100)\n        days += 1\n        \n    return days", "def evaporator(content, evap_per_day, threshold):\n    maxthresh = content * threshold / 100\n    amountevaporated = 0\n    days = 0\n    while content > maxthresh:\n        percentage = evap_per_day / 100\n        content = content - (content*percentage)\n        days += 1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    count = 0\n    threshold = content * (threshold / 100)\n    evap_per_day = evap_per_day / 100\n    while content > threshold:\n        content = content - content * evap_per_day\n        count += 1\n    return count", "def evaporator(content, evap_per_day, threshold):\n    percent_of_content = 1\n    days = 0\n    while percent_of_content > threshold * 0.01:\n        days += 1\n        percent_of_content -= percent_of_content * evap_per_day * 0.01\n    return days\n", "def evaporator(content, evap_per_day, threshold):\n    th = threshold / 100\n    thres = content * th\n    evap = evap_per_day / 100\n    count = 0\n    while content > thres:\n        content = content - (content * evap)\n        count = count + 1\n    return(count)\n", "def evaporator(content, evap_per_day, threshold):\n    days = 0\n    minimum = content * threshold / 100\n    while content > minimum:\n        days += 1\n        content -= content * evap_per_day / 100\n    return days", "def evaporator(content, evap_per_day, threshold):\n    new_content = content\n    for x in range(1,1000):\n        new_content = new_content- new_content*(evap_per_day/100)\n        if new_content < content*threshold/100:\n            return x", "def evaporator(content, evap_per_day, threshold):\n    \n    counter,threshold =0, content*threshold/100\n    while content >= threshold:\n        counter+=1\n        content-=content*evap_per_day/100\n    return counter", "def evaporator(content, evap_per_day, threshold):\n    total = 0\n    threshold = content * (threshold / 100)\n    evap_per_day = evap_per_day / 100\n    while content > threshold:\n        ev = content * evap_per_day\n        content = content - ev\n        total += 1\n    return total", "def evaporator(content, evap_per_day, threshold):\n    threshold = content * threshold / 100\n    day = 0\n    while content > threshold:\n        content *= 1 - evap_per_day * 0.01\n        day += 1\n    return day", "def evaporator(content, evap_per_day, threshold):\n    content_pct = 100\n    days = 0\n    while content_pct > threshold:\n        content_pct -= (evap_per_day * content_pct) / 100.0\n        days += 1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    f = 100\n    while f > threshold:\n        f *= (1 - evap_per_day/100)\n        n += 1\n    return n", "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    x = 1-evap_per_day/100\n    while x > threshold/100:\n        x = x * (1-evap_per_day/100)\n        n = n + 1\n    return n+1", "def evaporator(content, evap_per_day, threshold):\n    content = 100\n    t = (threshold / 100) * content\n    epd = (evap_per_day / 100)\n    n = 0\n    while content > threshold:\n        n += 1\n        content *= 1-epd\n    return n", "def evaporator(content, evap_per_day, threshold):\n    \n    days = 0\n    current = 100.\n    percent = 1 - evap_per_day / current\n    \n    while current > threshold:\n        current *= percent\n        days+=1\n        \n    return days", "def evaporator(co, ev, th):\n    x = co*(th/100)\n    day= 0\n    while co > x:\n        co = co - co*(ev/100)\n        day += 1\n    return day\n", "def evaporator(content, evap_per_day,threshold): \n    days =0\n    currentLt = content\n    while currentLt >= content * threshold / 100.0 :\n        currentLt = currentLt * (1 - evap_per_day/100.0)\n        days += 1\n    return days", "import numpy as np\ndef evaporator(content, evap_per_day, threshold):\n    return np.ceil(np.log(threshold/100)/np.log(1-evap_per_day/100))", "def evaporator(content, evap_per_day, threshold):\n    days = 0\n    volume_threshold = content*(threshold/100)\n    while content > volume_threshold:\n        content -= content * (evap_per_day/100)\n        days += 1\n    return days", "def evaporator(content, evap_per_day, threshold):\n    limit = content*threshold/100\n    evap = evap_per_day/100\n    c=0\n    while content > limit:\n        content = content - content*evap\n        c+=1 \n    return c", "def evaporator(content, evap_per_day, threshold):\n    e = evap_per_day/100\n    t = threshold/100\n    h = (content*t)\n    days = 0\n    while content > h:\n        content = content * (1 - e)\n        days += 1\n    \n    return (days)"]