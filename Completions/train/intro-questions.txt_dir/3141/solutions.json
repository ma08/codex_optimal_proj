["from heapq import heappop, heappush\n\ndef comb(fruits):\n    total, heap = 0, sorted(fruits)\n    while len(heap) > 1:\n        cost = heappop(heap) + heappop(heap)\n        heappush(heap, cost)\n        total += cost\n    return total", "import bisect\nfrom collections import deque\ndef comb(fruits):\n    energy = 0\n    fruits = deque(sorted(fruits))\n    while len(fruits) > 1:\n        e = fruits.popleft() + fruits.popleft()\n        energy +=  e\n        bisect.insort_left(fruits, e)\n    return energy", "from heapq import heapify, heappop, heappush\n\ndef comb(fruits):\n    ws = list(fruits)\n    heapify(ws)\n    res = 0\n    while len(ws) > 1:\n        w = heappop(ws) + heappop(ws)\n        heappush(ws, w)\n        res += w\n    return res", "from heapq import heappop, heappush\n\n\ndef comb(fruits):\n    total, fruits = 0, sorted(fruits)\n    for _ in range(len(fruits) - 1):\n        energy = heappop(fruits) + heappop(fruits)\n        heappush(fruits, energy)\n        total += energy\n    return total", "from heapq import heapify, heappush, heappop\n\ndef comb(fruits):\n    energy = 0\n    heapify(fruits)\n    while len(fruits) > 1:\n        cost = heappop(fruits) + heappop(fruits)\n        heappush(fruits, cost)\n        energy += cost\n    return energy", "from bisect import insort\n\ndef comb(fruits):\n    fruits = sorted(fruits)\n    total_cost = 0\n    while len(fruits) > 1:\n        cost = sum(fruits[:2])\n        total_cost += cost\n        del fruits[:2]\n        insort(fruits, cost)\n    return total_cost", "from heapq import heapify, heappop, heapreplace\n\ndef comb(fruits):\n    fruits = fruits[:]\n    heapify(fruits)\n    total_cost = 0\n    for i in range(len(fruits) - 1):\n        cost = heappop(fruits)\n        cost += fruits[0]\n        total_cost += cost\n        heapreplace(fruits, cost)\n    return total_cost", "from heapq import heapify, heappop, heappush\n\n\ndef comb(fruits):\n    heapify(fruits)\n      \n    energy_total = 0\n    while len(fruits) > 1:\n        energy_used = heappop(fruits) + heappop(fruits)\n        heappush(fruits, energy_used)\n        energy_total += energy_used\n    \n    return energy_total\n", "import heapq\n\ndef comb(fruits):\n    heapq.heapify(fruits)\n    w = 0\n    while len(fruits) > 1:\n        x, y = heapq.heappop(fruits), heapq.heappop(fruits)\n        w += x + y\n        heapq.heappush(fruits, x + y)\n    return w\n", "def bin_insert(n, lst):\n    start = 0\n    end = len(lst) - 1\n\n    while start < end:\n        check = (start + end) // 2\n\n        if lst[check] == n:\n            return check\n        \n        if lst[check] < n:\n            start = check + 1\n        else:\n            end = check - 1\n\n    if len(lst) != 0 and lst[start] < n:\n        return start + 1\n    return start\n\ndef comb(fruits):\n    fruits.sort()\n    res = 0\n    while len(fruits) > 1:\n        wt = fruits.pop(0) + fruits.pop(0)\n        res += wt\n        fruits.insert(bin_insert(wt, fruits), wt)\n    return res"]