["class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return nums[0]\n         \n         # Attempt 1 - 80%\n         # nums.sort()\n         # i = 0\n         # while i < l:\n         #     if i+1 == l:\n         #         return nums[i]\n         #     elif nums[i] != nums[i+1]:\n         #         #either i or i+1\n         #         if nums[i+2] == nums[i+1]:\n         #             return nums[i]\n         #     else:  \n         #         i+=2\n         \n         # Attempt 2 - 100%\n         result = 0\n         for num in nums:\n             result ^= num\n         return result\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         single = 0\n         for n in nums:\n             single ^= n\n         return single", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = 0\n         for key in nums:\n             count = count ^ key\n         return count\n \n         \n             \n                 \n                 \n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         result = 0\n         for i in nums:\n             result ^= i\n         return result", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         res = 0\n         for i in range(len(nums)):\n             res ^= nums[i]\n         return res", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         return(sum(set(nums))*2-sum(nums))", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return\n         s = set(nums)\n         t = nums.copy()\n         i = 0\n         while s and i < len(t):\n             if t[i] in s:\n                 s.remove(t.pop(i))\n             else:\n                 i += 1\n         return (set(nums) - set(t)).pop()\n", "class Solution:\n     def singleNumber(self,nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         \n         if len(nums) == 1:\n             return nums[0]\n         \n         for i in range(0,len(nums),2):\n             if i == len(nums)-1:\n                 return nums[i]\n             if nums[i] != nums[i+1]:\n                 return nums[i]\n         \n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         res = 0\n         for num in nums:\n             res ^= num\n         return res\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n \n         single_one={nums[0]}\n         for i in nums[1:]:\n             if i in single_one:\n                 single_one.remove(i)\n                 continue\n             else:\n                 single_one.add(i)\n             if single_one=={}:\n                 single_one.add(i)\n         return single_one.pop()\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         dic = dict()\n         for num in nums:\n             if num not in list(dic.keys()):\n                 dic[num]=1\n             else:\n                 dic[num]+=1\n         for key, val in list(dic.items()):\n             if val == 1:\n                 return key\n         \n         \n         \n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         mydict = {}\n         for i in nums:\n             if i not in mydict.keys():\n                 mydict[i] = 1\n             else:\n                 if mydict[i] >= 2:\n                     return i\n                 mydict[i] = mydict[i] + 1\n         for key, value in mydict.items():\n             if value != 2:\n                 return key", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         \n         for i in range(len(nums)):\n             if not (i + 1  < len(nums) and (nums[i] == nums[i+1] or nums[i] == nums[i-1])):\n                 return nums[i]\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # 1,3,1,2,4,3,4\n         _dict = {}\n         for num in nums:\n             try:\n                 del _dict[num]\n             except:\n                 _dict[num] = True\n         return list(_dict.keys())[0]", "class Solution:\n     def singleNumber(self, nums):\n         dic = {}\n         ans = 0\n         \n         for i in range(len(nums)):\n             if str(nums[i]) in dic:\n                 dic[str(nums[i])] += 1\n             else:\n                 dic[str(nums[i])] = 1\n         \n         for num in dic:\n             if dic[num] == 1:\n                 ans = int(num)\n         \n         return ans\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         from collections import Counter\n         a = Counter(nums)\n         print(a)\n         for k,i in list(a.items()):\n             if i < 2:\n                 return k\n         \n"]