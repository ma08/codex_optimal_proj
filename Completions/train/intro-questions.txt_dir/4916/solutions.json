["# generate primes up to limit\nLIMIT = 10**6\nsieve = [0]*2 + list(range(2, LIMIT))\nfor n in sieve:\n    if n:\n        for i in range(n*n, LIMIT, n):\n            sieve[i] = 0\nPRIMES = list(n for n in sieve if n)\n\ndef get_primes(n, m=2):\n    primes_ = PRIMES[:n] + [None] * m\n    return ( tuple(primes_[i:i+m]) for i in range(0, n, m) )", "# Known primes\nprimes = [2, 3, 5, 7, 11]\n\n# Generate prime numbers in sequence\ndef gen_primes():\n    yield from primes\n    candidate = primes[-1]\n    candidate_root = int(candidate ** 0.5) + 1\n    while True:\n        candidate += 2\n        if candidate_root * candidate_root < candidate:\n            candidate_root += 1\n        for p in primes:\n            if candidate % p == 0:\n                break\n            if p > candidate_root:\n                primes.append(candidate)\n                yield candidate\n                break\n\ndef get_primes(how_many, group_size=2):\n    result = []\n    for i, p in enumerate(gen_primes(), start=1):\n        result.append(p)\n        if len(result) == group_size:\n            yield tuple(result)\n            result = []\n        if i == how_many:\n            break\n    if len(result) > 0:\n        while len(result) < group_size:\n            result.append(None)\n        yield tuple(result)\n", "from itertools import zip_longest\nimport math\n\ndef get_primes(how_many, group_size=2):\n    if how_many>0:\n        pr = primes(how_many) \n        yield from [ tuple(e) for e in zip_longest(*[iter(pr)]*group_size ) ]\n        \ndef is_prime(n):\n    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))\n   \ndef primes(n):\n    i, pr = 3, [2]\n    while n>1:\n        if is_prime(i):\n            n -= 1\n            pr.append(i)\n        i += 2\n    return pr\n    \n", "from itertools import compress, islice, zip_longest\n\nimport numpy as np\n\n\ns = np.ones(1000000)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5)+1, 2):\n    if s[i]:\n        s[i*i::i] = 0\nprimes = list(compress(range(len(s)), s))\n\ndef get_primes(how_many, group_size=2):\n    yield from zip_longest(*[islice(primes, how_many)] * group_size)", "def get_primes(how_many, group_size):\n    primes = [False] * 2 + list(range(2, 13*how_many))\n    for x in primes:\n        if x:\n            for i in range(x*x, 13*how_many, x):\n                primes[i] = False\n    seq = sorted(set(primes))[1:how_many+1]\n    while len(seq) % group_size != 0:\n        seq += [None]\n    return (tuple(seq[x:x+group_size]) for x in range(0, len(seq), group_size))", "def makePrimes(n):\n    sieve, primes = [0]*(n+1), []\n    for i in range(2, n+1):\n        if not sieve[i]:\n            primes.append(i) \n            for j in range(i**2, n+1, i): sieve[j] = 1\n    return primes\n\nPRIMES = makePrimes(650000)          # => 52831 prime numbers\n\ndef get_primes(how_many, group_size=2):\n\n    lst = PRIMES[:how_many] + [None] * (group_size - how_many%group_size)\n    \n    for n in range(how_many//group_size + bool(how_many%group_size)):\n        yield tuple(lst[n*group_size : (n+1)*group_size])", "import gmpy2\n\ndef get_primes(how_many, group_size):\n    n = 2\n    count = 0\n    while count < how_many:\n        res = []\n        for i in range(group_size):\n            res.append(int(n) if count < how_many else None)\n            n = gmpy2.next_prime(n)\n            count += 1\n        yield tuple(res)\n            \n        \n\n", "from itertools import islice, chain, repeat\n\ndef gen_primes():\n    D = {}; q = 2\n    while True:\n        if q not in D: yield q; D[q * q] = [q]\n        else:\n            for p in D[q]: D.setdefault(p + q, []).append(p)\n            del D[q]\n        q += 1\ndef get_primes(how_many, group_size=2):\n    return (t for t in zip(*[chain(islice(gen_primes(), how_many), repeat(None, group_size-1))]*group_size))", "get_primes=lambda n,m:(tuple(g)for g in zip(*[iter([2]+[p for p in range(3,15*n,2)if all(p%d for d in range(3,int(p**.5)+1,2))][:n-1]+[None]*(m-1))]*m))", "import itertools \ndef prime(a):\n    return not (a < 2 or any(a % x == 0 for x in range(2, int(a**0.5) + 1)))\n\ndef get_primes(how_many, group_size=2):\n    primes = filter(prime, itertools.count(2))\n    yield from itertools.zip_longest(*[itertools.islice(primes, how_many)] * group_size)"]