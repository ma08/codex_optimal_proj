["SWAP = {'i': '1', 'I': '1', 'o': '0', 'O': '0', 's': '5', 'S': '5'}\n\n\ndef make_password(phrase):\n    return ''.join(SWAP.get(a[0], a[0]) for a in phrase.split())\n", "def make_password(phrase):\n    new = \"\"\n    phrase = phrase.replace(\"i\", \"1\").replace(\"I\", \"1\")\n    phrase = phrase.replace(\"o\", \"0\").replace(\"O\", \"0\")\n    phrase = phrase.replace(\"s\", \"5\").replace(\"S\", \"5\")\n    phrase = phrase.split(\" \")\n    for i in phrase:\n        new += i[0]\n    return new", "def make_password(phrase, mapping=dict(['i1', 'o0', 's5'])):\n    return ''.join(mapping.get(c.lower(), c) for c, *rest in phrase.split())\n", "TABLE = str.maketrans('iIoOsS','110055')\n\ndef make_password(s):\n    return ''.join(w[0] for w in s.split()).translate(TABLE)", "def make_password(phrase):\n  \n  return ''.join(w[0] for w in phrase.split()).translate(str.maketrans('iIoOsS', '110055'))", "def make_password(phrase):\n    return ''.join([w[0] for w in phrase.split()]).translate(str.maketrans('iIoOsS','110055'))\n", "def make_password(phrase):\n    phrase = phrase.split(\" \")\n    password = \"\"\n    for word in phrase:\n        password += word[0]\n    password = password.replace(\"I\", \"1\").replace(\"i\", \"1\")\n    password = password.replace(\"O\", \"0\").replace(\"o\", \"0\")\n    password = password.replace(\"S\", \"5\").replace(\"s\", \"5\")\n    return password", "def make_password(phrase):\n    return ''.join(i[0] for i in phrase.split()).translate(str.maketrans('sioSIO', '510510'))", "make_password = lambda s, x='ios':''.join((lambda f:'105'[f]*(f>-1))(x.find(e[0].lower())) or e[0] for e in s.split())"]