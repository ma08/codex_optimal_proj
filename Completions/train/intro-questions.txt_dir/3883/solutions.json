["def solve(s):\n    vowels = sorted(c for c in s if c in \"aeiou\")\n    consonants = sorted(c for c in s if c not in \"aeiou\")\n    part1, part2 = sorted((vowels, consonants), key=len, reverse=True)\n    part2.append('')\n    if len(part1) > len(part2):\n        return \"failed\"\n    return \"\".join(a + b for a, b in zip(part1, part2))", "import re\n\nVOWELS = re.compile(r'[aeiuo]')\n\ndef solve(s):\n    vows, cons  = sorted(VOWELS.findall(s)), sorted(VOWELS.sub('',s))\n    long, short = sorted((vows, cons), key=len, reverse = True)                                                 # preserve vowels first if length are the same\n    return 'failed' if len(long)-len(short) not in [0,1] else ''.join(a+b for a,b in zip(long, short+['']))", "from itertools import zip_longest\n\ndef solve(s):\n    vow = sorted(c for c in list(s) if c in 'aeiou')\n    con = sorted(c for c in list(s) if c not in 'aeiou')\n    if abs(len(vow)-len(con)) > 1: return 'failed'\n    arr = [vow, con] if len(vow)>=len(con) else [con, vow]\n    return ''.join(''.join(p) for p in list(zip_longest(*arr, fillvalue='')))", "def solve(s):\n    vow, con = [], []\n    for c in s:\n        if c in 'aeiou':\n            vow.append(c)\n        else:\n            con.append(c)\n    \n    len_v, len_c = len(vow), len(con)\n    \n    if len_v - len_c in [0, 1]:\n        return ''.join(v+c for v, c in zip(sorted(vow), sorted(con) + ['']))\n    elif len_v - len_c == -1:\n        return ''.join(v+c for v, c in zip(sorted(con), sorted(vow) + ['']))\n    \n    return 'failed'", "def solve(stg):\n    split = [[], []]\n    for c in sorted(stg):\n        split[0 if c in \"aeiou\" else 1].append(c)\n    a, b = sorted(split, key=len, reverse=True)\n    if len(a) - len(b) > 1:\n        return \"failed\"\n    return \"\".join(f\"{c}{d}\" for c, d in zip(a, b + [\"\"]))", "import re\ndef solve(s):\n    vowels = sorted(re.findall(r'[aeiou]', s))[::-1]\n    consonant = sorted(re.findall(r'[^aeiou]', s))[::-1]\n    if abs(len(consonant) - len(vowels)) > 1: return 'failed'\n\n    out = []\n    if len(vowels) >= len(consonant):\n        while vowels and consonant:\n            out.append(vowels.pop())\n            out.append(consonant.pop())\n    \n    else:\n        while vowels and consonant:\n            out.append(consonant.pop())\n            out.append(vowels.pop())\n\n    return consonant and ''.join(out + consonant) or ''.join(out + vowels)", "from itertools import zip_longest, chain\nvowels = {'a', 'e', 'i', 'o', 'u'}\n\ndef solve(s):\n    vow, con = [], []\n    for c in s: (con, vow)[c in vowels].append(c)\n    if abs(len(con) - len(vow)) > 1: return \"failed\"\n    vow.sort(); con.sort()\n    x, y = (vow, con) if len(vow) >= len(con) else (con, vow)\n    return ''.join(chain.from_iterable(zip_longest(x, y, fillvalue='')))", "def solve(s):\n    vowels = ''.join(sorted(ch for ch in s if ch in \"aeiou\")) + '_'\n    consonants = ''.join(sorted(ch for ch in s if ch not in \"aeiou\")) + '_'\n    if abs(len(vowels) - len(consonants)) > 1: \n        return 'failed'\n    if len(vowels) >= len(consonants): \n        res = ''.join(v+c for v, c in zip(vowels, consonants))\n    else: \n        res = ''.join(v+c for v, c in zip(consonants, vowels))\n    return res.strip('_')\n", "from itertools import zip_longest\n\ndef solve(s):\n    a, b = sorted(x for x in s if x in \"aiueo\"), sorted(x for x in s if x not in \"aiueo\")\n    if len(b) > len(a): a, b = b, a\n    return \"failed\" if len(a) - len(b) > 1 else \"\".join(f\"{x}{y}\" for x, y in zip_longest(a, b, fillvalue=\"\"))\n", "from itertools import zip_longest\n\ndef solve(s):\n    v = sorted(x for x in s if x in 'aeiou')\n    c = sorted(x for x in s if x not in 'aeiou')\n    if abs(len(v) - len(c)) > 1:\n        return 'failed'\n    if len(c) > len(v):\n        v, c = c, v\n    return ''.join(a + b for a, b in zip_longest(v, c, fillvalue=''))", "import re\ndef solve(s):\n    c,v  = sorted(re.findall(r'[^aeiou]',s)), sorted(re.findall(r'[aeiou]',s))\n    m, n = (max(c,v,key=len),min(c,v,key=len)) if len(v) != len(c) else (v,c)\n    return \"\".join(sum(zip(m,n+[\"\"]),())) if abs(len(v) - len(c)) <= 1 else \"failed\"", "def solve(stg):\n    split = [[], []]\n    for c in sorted(stg):\n        split[0 if c in \"aeiou\" else 1].append(c)\n    a, b = sorted(split, key=len, reverse=True)\n    if len(a) - len(b) > 1:\n        return \"failed\"\n    result = [\"\"] * len(stg)\n    result[::2], result[1::2] = a, b\n    return \"\".join(result)", "def solve(s):\n  c,v,r=[],[],[]\n  for m in s:\n    if m in 'aeiou': v.append(m)\n    else: c.append(m)\n  c.sort()\n  v.sort()\n  cl,vl=len(c),len(v)\n  if abs(cl-vl)>1: return 'failed'\n  for i in range(max(cl,vl)):\n    if vl>=cl:\n      if i<vl: r.append(v[i])\n      if i<cl: r.append(c[i])\n    else:\n      if i<cl: r.append(c[i])\n      if i<vl: r.append(v[i])\n  return ''.join(r)", "def solve(s):\n    count1=[sum(1 for i in s if i in \"aeiou\"), \"\".join(sorted(i for i in s if i in \"aeiou\"))]\n    count2=[sum(1 for i in s if i not in \"aeiou\"), \"\".join(sorted(i for i in s if i not in \"aeiou\"))]\n    if abs(count1[0]-count2[0])>=2:\n        return \"failed\"\n    if len(count1[1])==len(count2[1]):\n        return \"\".join(i+j for (i,j) in zip(count1[1], count2[1]))\n    elif len(count1[1])>len(count2[1]):\n        return \"\".join(i+j for (i,j) in zip(count1[1], count2[1]))+count1[1][-1]\n    else:\n        return \"\".join(i+j for (i,j) in zip(count2[1], count1[1]))+count2[1][-1]", "from itertools import chain, zip_longest\n\ndef solve(s):\n    ls_vow = sorted([x for x in s if x in \"aeiou\"])\n    ls_con = sorted([x for x in s if x not in \"aeiou\"])\n    if abs(len(ls_vow) - len(ls_con)) > 1 : return \"failed\"\n    arr = [ls_vow, ls_con] if len(ls_vow)>=len(ls_con) else [ls_con, ls_vow]\n    return \"\".join(list(chain(*list(zip_longest(*arr, fillvalue=''))))) ", "from itertools import zip_longest \ndef solve(s):\n    print(s)\n    a=list( map(s.lower().count, \"aeiou\"))\n    print('lv',sum(a))\n    l=len(s)\n    lv=sum(a)\n    lc=l-lv\n    print('l',l,'lc',lc)\n    vw,cn=[],[]\n    if abs(lv-lc)>1:\n        return 'failed'\n    elif lv<lc:\n        for x in s:\n            if x in 'aeiou':\n                vw.append(x)\n            else:    \n                cn.append(x)\n        cn=sorted(cn)\n        vw=sorted(vw)\n        b=list(zip_longest(cn,vw))\n    elif lc<=lv:\n        for x in s:\n            if x in 'aeiou':\n                vw.append(x)\n            else:    \n                cn.append(x)\n        cn=sorted(cn)\n        vw=sorted(vw)\n        b=list(zip_longest(vw,cn))    \n    print(vw)           \n    print(cn)\n     \n    lst=[]\n    for x in b:\n        lst.append(x[0])\n        lst.append(x[1])\n    print(lst) \n    if lst[-1]==None:\n        del lst[-1]\n    print(lst)     \n    return(''.join(lst))    ", "def solve(s):\n    vowels = 'aeiou'\n    s_vowels = sorted(c for c in s if c in vowels)\n    s_consonants = sorted(c for c in s if c not in vowels)\n\n    diff = len(s_vowels) - len(s_consonants)\n    if diff == -1:\n        out_string = s_consonants.pop(0)\n        for v, c in zip(s_vowels, s_consonants):\n            out_string += v + c\n    elif diff == 0:\n        out_string = ''\n        for v, c in zip(s_vowels, s_consonants):\n            out_string += v + c\n    elif diff == 1:\n        out_string = s_vowels.pop(0)\n        for c, v in zip(s_consonants, s_vowels):\n            out_string += c + v\n    else:\n        return 'failed'\n    \n    return out_string", "def solve(s):\n    vowels = sorted([x for x in s if x in (\"aeiou\")])\n    consonants = sorted([x for x in s if x not in vowels])\n    difference = len(vowels) - len(consonants)\n    s = \"\"\n    if abs(difference) >= 2:\n        return \"failed\"\n    elif abs(difference) == 1:\n        if difference == 1:\n            s += vowels.pop(0)\n        else: \n            s += consonants.pop(0)    \n    if s == \"\" or s[0] not in \"aeiou\":\n        s += ''.join(''.join(pair) for pair in zip(vowels, consonants))\n    else:\n        s += ''.join(''.join(pair) for pair in zip(consonants, vowels))\n    return s", "from itertools import zip_longest\ndef solve(s):\n    vowels,consonants=[],[]\n    for c in s:\n        if c in 'aeiou':\n            vowels.append(c)\n        else:\n            consonants.append(c)\n    if abs(len(vowels)-len(consonants))>1:\n        return 'failed'\n    r=''\n    a=[sorted(vowels),sorted(consonants)]\n    if len(vowels)<len(consonants):\n        a=a[::-1]\n    for c1,c2 in zip_longest(*a,fillvalue=''):\n        r+=c1+c2\n    return r", "def solve(s):\n    vowels = sorted([ch for ch in s if ch in 'aeiou'])\n    consonants = sorted([ch for ch in s if ch not in 'aeiou'])\n    \n    if abs(len(vowels) - len(consonants)) > 1:\n        return 'failed'\n    \n    ret = ''\n    \n    if len(vowels) == len(consonants):\n        for v, c in zip(vowels, consonants):\n            ret += f'{v}{c}'\n    else:\n        if len(consonants) > len(vowels):\n            zipped = zip(consonants, vowels)\n            last = consonants[-1]\n        else:\n            zipped = zip(vowels, consonants)\n            last = vowels[-1]\n            \n        for c, v in zipped:\n            ret += f'{c}{v}'\n        ret += last\n    return ret "]