["def collatz(n):\n    l = [str(n)]\n    while n > 1:\n        n = 3 * n + 1 if n % 2 else n / 2\n        l.append(str(n))\n    return '->'.join(l)", "def collatz_step(n):\n    if n % 2 == 0:\n        return n//2\n    else:\n        return n*3 + 1\n\ndef collatz_seq(n):\n    while n != 1:\n        yield n\n        n = collatz_step(n)\n    yield 1\n\ndef collatz(n):\n    return '->'.join(str(x) for x in collatz_seq(n))\n", "def collatz(n):\n  return str(n) + '->' + collatz(3*n+1 if n%2 else n/2) if n != 1 else '1'", "def _collatz(n):\n    yield n\n    while n != 1:\n        n = (n // 2, 3 * n + 1)[n % 2]\n        yield n\n\ndef collatz(n):\n    return '->'.join(map(str, _collatz(n)))", "def collatz(n):\n    ret = []\n    while n!= 1:\n        ret.append(n)\n        n = [n//2, (n*3)+1][n%2]    \n    return '->'.join( map( str, ret+[1] ) )", "def collatz(n):\n    l = [str(n)]\n    while n != 1:\n        if n%2:\n            n = 3*n+1\n        else:\n            n = n//2\n        l.append(str(n))\n    return '->'.join(l)", "def collatz(n):\n    numbers = sequence(n)\n    result = '->'.join(map(str, numbers))\n    return result\n\n\ndef sequence(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + sequence(n // 2)\n    else:\n        return [n] + sequence(3 * n + 1)", "def collatz(n):\n    def f(n):\n        while True:\n            yield str(n)\n            if n == 1:\n                break\n            elif n % 2:\n                n = 3*n + 1\n            else:\n                n //= 2\n    return '->'.join(f(n))", "def collatz(n):\n    collatz = str(n) + '->'\n    while n != 1:\n        n = n / 2 if n % 2 == 0 else n * 3 + 1\n        collatz += str(n) + '->'\n    return collatz.rstrip('->')", "def collatz(n):\n    seq = [str(n)]\n    while n > 1:\n        n = (3 * n + 1) if (n % 2) else (n // 2)\n        seq.append(str(n))\n    return \"->\".join(seq)"]