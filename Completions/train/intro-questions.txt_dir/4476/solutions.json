["from bisect import bisect_left as bisect\n\nn = 5000000\nsieve, PED, PED_DATA = [0]*((n>>1)+1), [], []\nfor i in range(3, n+1, 2):\n    if not sieve[i>>1]:\n        for j in range(i**2>>1, (n+1)>>1, i): sieve[j] = 1\n        s = str(i)\n        nEveD = sum(s.count(d) for d in \"02468\")\n        if nEveD:\n            PED.append(i)\n            PED_DATA.append( (nEveD,len(s)-1) )\n\ndef f(n):\n    idx = bisect(PED, n)-1\n    m, (nEveD, l) = PED[idx], PED_DATA[idx]\n    \n    for c in range(idx):\n        mc, (nEveDc, lc) = PED[idx-c], PED_DATA[idx-c]\n        if nEveDc > nEveD:\n            m, nEveD = mc, nEveDc\n        if lc < nEveD: break\n    return m", "def is_prime(n):\n    #base cases handling\n    if n == 2 or n == 3: return True #handles 2, 3\n    if n < 2 or n%2 == 0: return False #handles 1 and even numbers\n    if n < 9: return True #since 1, 2, 3, 4, 6 and 8 are handled, this leaves 5 and 7.\n    if n%3 == 0: return False #handles multiples of 3\n    r = int(n**0.5) #only check upto square root\n    f = 5 #start from 5\n    while f <= r:\n        #print ('\\t', f)\n        if n%f == 0: return False #essentially checks 6n - 1 for all n.\n        if n%(f+2) == 0: return False #essentially checks 6n + 1 for all n.\n        f +=6 #incrementing by 6.\n    return True\n\ndef max_even_digits_in_prime(n):\n    return (len(str(n)) - 1) or 1\n\ndef count_of_even_digits(n):\n    count = 0\n    for i in str(n):\n        count+= (int(i) % 2 == 0)\n    return count\n\ndef f(n):\n    best_case = (0, 0) #keeps track of highest best case number seen[1], and its count of even digits[0]\n    for x in range(n-1, 1, -1): #iterate in the reverse direction\n        #print(x)\n        if is_prime(x): #proceed for prime numbers\n            even_digits = count_of_even_digits(x)\n            max_even_digits = max_even_digits_in_prime(x)\n            if best_case[0] < even_digits: #update best number seen so far\n                best_case = (even_digits, x)\n            if max_even_digits == best_case[0]: #best case answer, your work is done. No need to look for more numbers.\n                print(best_case)\n                return (best_case[1])", "import itertools\ncompress = itertools.compress\nfrom bisect import bisect_right,bisect_left\n\ndef prime(n):\n    if n < 2:\n        return []\n    r = [False,True] * (n//2)+[True]\n    r[1],r[2]=False, True\n    for i in range(3,int(1 + n**0.5),2):\n        if r[i]:\n            r[i*i::2*i] = [False] * int((n+2*i-1-i*i)/(2*i))\n    r = list(compress(list(range(len(r))),r))\n    if r[-1] %2 == 0:\n        r.pop() \n    return r\nprimes = prime(5*10**6) \n\ndef even(n): \n    even_count = 0 \n    while n > 0: \n        rem = n%10 \n        if not rem%2: \n            even_count += 1\n        n //= 10\n    return even_count\n\ndef f(n): \n    n -= 1\n    upper_bound = bisect_right(primes,n)\n    best = -1 \n    bestCount = 0\n    for i in reversed(list(range(0,upper_bound))): \n        if len(str(primes[i])) <= bestCount:\n            break \n        count = even(primes[i])\n        if bestCount < count: \n            best = primes[i]\n            bestCount = count \n        elif bestCount == count:\n            if primes[i] > best: \n                best = primes[i] \n                bestCount = count \n    return best\n", "import math\ndef check(nr):    \n    lim = int(nr ** 0.5)\n    x = 0\n    if nr == 2 or nr == 3:\n        return True\n    if nr % 2 == 0 or nr <= 1:\n        return False\n    if nr < 9:\n        return True\n    if nr % 3 == 0:\n        return False\n    i = 5\n    while i <= lim:\n        if nr % i == 0:\n            return False\n        if nr % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef biggest(nr):\n    return (len(str(nr)) - 1) or 1\n\ndef count_even(nr):\n    r = 0\n    for i in str(nr):\n        r += (int(i) % 2 == 0)\n    return r\n    \ndef f(n):\n    nr = n - 1\n    res = 0\n    cmax = (0,0)\n    while nr > 0:\n        if check(nr):\n            e = count_even(nr)\n            b = biggest(nr)\n            if e > cmax[0]:\n                cmax = (e,nr)\n            if b == cmax[0]:\n                return cmax[1]\n        nr -= 1\n\n", "isprime=lambda x:next((0 for i in range(3,int(x**.5)+1,2) if not x%i),1)\ndef f(n):\n    limit = len(str(n)) - 1 - (str(n)[0] == '1')\n    return next(i for i in range(n-([1,2][n&1]),1,-2) if isprime(i) and sum([not int(k)&1 for k in str(i)])==limit)", "evenDigits = ['0', '2', '4', '6', '8']\n\ndef primes(n):\n    \"\"\" Returns  a list of primes < n \"\"\"\n    sieve = [True] * n\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)\n    return [2] + [i for i in range(3,n,2) if sieve[i]]\n\ndef evenDigitCount(n):\n    count = 0\n    for c in str(n):\n        if c in evenDigits:\n            count += 1\n    return count\n\ndef f(n):\n    allPrimes = primes(n)\n    p = allPrimes[0]\n    mostEvenDigits = evenDigitCount(p)\n    for prime in allPrimes:\n        thisPrimesEvenDigits = evenDigitCount(prime)\n        if thisPrimesEvenDigits >= mostEvenDigits:\n            p = prime\n            mostEvenDigits = thisPrimesEvenDigits\n    \n    return p\n", "def f(n):\n    n =  n - 1 if n % 2 == 0 else n - 2\n    for i in range(n, 1, - 2):\n        if len(str(i)) <= sum(1 for j in str(i) if int(j) % 2 == 0) + 1 + int(str(i)[0] == '1'):\n            z = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    z = False\n                    break\n            if z: return i\n"]