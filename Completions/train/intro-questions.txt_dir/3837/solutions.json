["def reverse(lst):\n    ret = []\n    while lst:\n        ret.append(lst[-1])\n        lst = [a-b for a,b in zip(lst, lst[1:])]\n    return ret[::-1]", "from functools import reduce\ndef reverse(r):\n    return reduce(lambda a,n: reduce(lambda b,s: b.append(s-b[-1]) or b,reversed(a),[n])[::-1],r,[])", "f=reverse=lambda A:len(A)==1and A or f([x-y for x,y in zip(A,A[1:])])+[A[-1]] ", "def reverse(right):\n    pyramid = []\n    \n    for index, number in enumerate(right):\n        pyramid.append([number])\n        if index > 0:\n            for i in range(index):\n                value = pyramid[index-1][i] - pyramid[index][i]\n                pyramid[index].append(value)\n    \n    last_row = pyramid[-1][::-1]\n    \n    return last_row", "def reverse(right):\n    lastr = []\n    while right:\n        lastr.append(right[-1])\n        right = [a-b for a, b in zip(right, right[1:])]       \n    return lastr[::-1]", "def reverse(right):\n    xs = []\n    for y in right:\n        ys = [y]\n        for x in xs:\n            ys.append(x - ys[-1])\n        xs = ys\n    return xs[::-1]", "def reverse(right):\n    last_row = []\n    \n    for a in right:\n        curr_row = [a]\n        for b in last_row:\n            a = b - a\n            curr_row.append(a)\n        \n        last_row = curr_row\n    \n    return last_row[::-1]", "def coutingLine(downLine, rightCount):\n    upLine = [rightCount]\n    for itemDLine in downLine:\n        upLine.append(itemDLine - upLine[-1])\n    return upLine\n\ndef swapList(currentList):\n    return list(currentList[-item] for item in range(1, len(currentList)+1))\n\ndef reverse(right):\n    pyramide = [[right[0]]]\n    for index in range(0, len(right) - 1):\n        pyramide.append(coutingLine(pyramide[-1], right[index + 1]))\n        \n    return swapList(pyramide[-1])\n    \n\n\n\n", "def reverse(right):\n    \n    left = [right[-1]]\n    k=right\n    for i in range(len(right)-1):\n        k=list(map(lambda x,y:x-y,k,k[1:]))\n        left.append(k[-1])\n    left.reverse()\n            \n    return left", "f=reverse=lambda a:a and f([x-y for x,y in zip(a,a[1:])])+[a[-1]]"]