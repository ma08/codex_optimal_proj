["def merge(*dicts):\n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            result.setdefault(key, []).append(value)\n    return result\n\nfrom itertools import groupby, chain", "from collections import defaultdict\n\ndef merge(*dicts):\n    d = defaultdict(list)\n    for dd in dicts:\n        for k,v in dd.items():\n            d[k].append(v)\n    return d", "def merge(*dicts):\n    r={}\n    for d in dicts:\n        for k in d:\n            r[k]=r.get(k,[])+[d[k]]\n    return r", "def merge(*dicts):\n    keys = set([key for d in dicts for key in d])\n    return {key: [d[key] for d in dicts if key in d] for key in keys}", "from collections import defaultdict\n\ndef merge(*dicts):\n    d = defaultdict(list)\n    [d[key].append(value) for dictionary in dicts for key, value in list(dictionary.items()) ]\n    return d\n    \n", "def merge(*dicts):\n    merged = {}\n\n    for dict in dicts:\n      for key, value in dict.items():\n        if key not in merged:\n          merged[key] = [value]\n        else:\n          merged[key].append(value)\n    return merged", "def merge(*dcts):\n    return {k: [dct[k] for dct in dcts if k in dct] for dct in dcts for k in dct}", "def merge(*dicts):\n    merged = {}\n    \n    for dict in dicts:\n        for k, v in dict.items():\n            merged.setdefault(k, []).append(v)\n            \n    return merged", "from collections import defaultdict\n\ndef merge(*dcts):\n    result = defaultdict(list)\n    for dct in dcts:\n        for k, v in list(dct.items()):\n            result[k].append(v)\n    return result\n", "def merge(*dicts):\n    r = {}\n    for d in dicts:\n        for k, v in d.items():\n            if k in r: r[k].append(v)\n            else: r[k] = [v]\n    return r"]