["def time(distance,boat_speed,stream):\n    return round(distance/(boat_speed+int(stream.split()[-1])),2) if stream[0]==\"D\" else round(distance/(boat_speed-int(stream.split()[-1])), 2)", "def time(d, v, s):\n    return round(d / (v + int(s.split()[1]) * (1 if s[0] == \"D\" else -1)), 2)", "def time(d, v, s):\n     return round(d / (v + int(s.split()[1]) * (\"D\" in s or -1)), 2)", "def time(distance, boat_speed, stream):\n    speed = boat_speed + (int(stream[11:]) if stream[0] == 'D' else -int(stream[9:]))\n    return round(distance/speed, 2)", "def time(distance, boat_speed, stream):\n    direction, speed_str = stream.split()\n    speed = int(speed_str) * (1 if direction == 'Downstream' else -1)\n    return round(distance / (boat_speed + speed), 2)", "from operator import truediv\n\n\ndef time(distance, boat_speed, stream):\n    stream, stream_speed = stream.split()\n    stream_speed = int(stream_speed) * (-1 if stream == 'Upstream' else 1)\n    return round(truediv(distance, (boat_speed + stream_speed)), 2)\n", "def time(distance, boat_speed, stream):\n    stream_speed = int(stream.split()[1])\n    \n    if stream[0] == \"D\":\n        speed = boat_speed + stream_speed\n    else:\n        speed = boat_speed - stream_speed\n    \n    return round(distance / speed, 2)", "def time(distance, boat_speed, stream):\n  \n  s = stream.split()\n  \n  net_speed = boat_speed + int(s[1]) if s[0] == 'Downstream' else boat_speed - int(s[1])\n  \n  return round(distance/net_speed, 2)", "def time(distance,boat_speed,stream):\n    direction,stream_speed=tuple(stream.split())\n    stream_speed=int(stream_speed)\n    if direction == \"Downstream\":\n        if distance%(boat_speed+stream_speed)==0:\n            return int(distance/(boat_speed+stream_speed))\n        else:\n            return float(\"%.2f\"%(distance/(boat_speed+stream_speed)))\n    else:\n        if distance%(boat_speed-stream_speed)==0:\n            return int(distance/(boat_speed-stream_speed))\n        else:\n            return float(\"%.2f\"%(distance/(boat_speed-stream_speed)))", "time=lambda d,s,S:round(d/(s+(-1)**(S[0]>'D')*int(S.split()[1])),2)"]