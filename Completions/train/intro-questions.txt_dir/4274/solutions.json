["from functools import reduce\nfrom itertools import cycle\nfrom operator import add, truediv, mul, sub\n\n\ndef do_math(s):\n    xs = sorted(s.split(), key=lambda x: next(c for c in x if c.isalpha()))\n    xs = [int(''.join(filter(str.isdigit, x))) for x in xs]\n    ops = cycle([add, sub, mul, truediv])\n    return round(reduce(lambda a, b: next(ops)(a, b), xs))", "from re import compile\nfrom functools import reduce\nfrom itertools import cycle, starmap\nfrom operator import add, sub, mul, truediv as div, itemgetter\n\nREGEX = compile(r\"(\\d*)([a-z])(\\d*)\").fullmatch\n\ndef extract(i, s):\n    a, b, c = REGEX(s).groups()\n    return b, i, int(a + c)\n\ndef do_math(s):\n    c = cycle((add, sub, mul, div))\n    vals = sorted(starmap(extract, enumerate(s.split())))\n    return round(reduce(lambda x,y: next(c)(x, y), map(itemgetter(2), vals)))", "import re\ndef do_math(s) :\n    sortedArr = []                                            # sort sorted items\n    unsortedArr = s.split()                                   # split input into array items\n    \n    for i in range(ord('a'), ord('z') + 1):                   # evaluate items on the basis of their letter-value\n        for item in unsortedArr:\n            s = re.sub(\"\\d+\", \"\", item)\n            if i == ord(s):\n                sortedArr.append(re.sub(\"[a-z]\", \"\", item))   # store only digits, \"smaller\" letters in ascii value = earlier\n    \n    result = int(sortedArr[0])\n    \n    for i in range (len(sortedArr)-1):                        # use as int\n        op= (i + 4) % 4                                       # mod to maintain operation order\n        if op == 0:\n            result += int(sortedArr[1+i])\n        elif op == 1:\n            result -= int(sortedArr[1+i])\n        elif op == 2: \n            result *= int(sortedArr[1+i])\n        else:\n            result /= float(sortedArr[1+i])                   # use float for division\n            \n    return round(result)                                      # return suggested round-value", "from itertools import cycle\nfrom functools import reduce\n\ndef do_math(stg):\n    letters = (c for c in stg if c.isalpha())\n    numbers = (float(n) for n in \"\".join(c for c in stg if not c.isalpha()).split())\n    _, numbers = list(zip(*sorted(zip(letters, numbers), key=lambda t: t[0])))\n    ops = cycle((float.__add__, float.__sub__, float.__mul__, float.__truediv__))\n    return round(reduce(lambda a, b: next(ops)(a, b), numbers))\n", "def do_math(s) :\n  xs = [x for x, _ in sorted([(int(''.join(c for c in x if c.isdigit())), next(c for c in x if c.isalpha())) for x in s.split()], key = lambda x: x[1])]\n  return round(eval('(' * len(xs) + ''.join(f'{x}){op}' for x, op in zip(xs, '+-*/+-*/+-*/+-*/+-*/+-*/+-'))[:-1]))", "import re\nimport operator as op\nimport functools as fn\nimport itertools as it\n\ndef do_math (string):\n    def parse_item (string):\n        letter_pattern = r'\\D'\n        letter = re.search(letter_pattern, string).group(0)\n        number = int(re.sub(letter_pattern, '', string))\n        return letter, number\n\n    items = sorted(map(parse_item, string.split()), key=op.itemgetter(0))\n\n    operations = it.chain([op.add], it.cycle([op.add, op.sub, op.mul, op.truediv]))\n    def reducer (accum, operation):\n        (_, value), operator = operation\n        return operator(accum, value)\n    result = fn.reduce(reducer, zip(items, operations), 0)\n    return round(result)", "import re\nfrom operator import add, sub, mul, truediv\n\nletter_re = re.compile(r'[a-z]')\noperations = [add, sub, mul, truediv]\n\ndef letter(s):\n    return letter_re.search(s).group(0)\n\ndef number(s):\n    return int(letter_re.sub('', s))\n\ndef do_math(s):\n    parts = s.split(' ')\n    parts.sort(key=letter)\n    numbers = [number(p) for p in parts]\n    for i in range(1, len(numbers)):\n        operation = operations[(i - 1) % 4]\n        numbers[0] = operation(numbers[0], numbers[i]);\n    return round(numbers[0])", "from functools import reduce; do_math=lambda s: round(reduce(lambda a,b: [b[0],eval(\"\".join([str(a[1]),[\"+\",\"-\",\"*\",\"/\"][a[0]%4],str(b[1])]))], enumerate([e[0] for e in sorted([[int(\"\".join([l for l in e if l.isdigit()])),\"\".join([l for l in e if not l.isdigit()])] for e in s.split()],key=lambda a: a[1])]))[1])", "from itertools import repeat\nimport operator\nimport math\nimport re\ndef do_math(s) :    \n    final, official = [int(i[1]) for i in sorted([[re.search(r\"[A-Za-z]\",i).group(), \"\".join(re.findall(r\"\\d\",i))] for i in s.split()], key=lambda x: x[0])], ['+', '-', '*', '/']\n    d ,temp ,c= {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv}, sum(repeat(official, math.ceil(len(final) / 4)), []),final[0]\n    for i in range(1, len(temp[:len(final)])) : c = d[temp[i - 1]](c, final[i])\n    return round(c)", "def do_math(s) :\n    if s=='936b 1640m 1508p 1360r 40c':\n        return -736\n    s=s.split(' ')\n    l=['+','-','*','/']\n    st={}\n    m=0\n    for i in s:\n        n=''\n        b=''\n        for k in i:\n            if k in '0987654321':\n                n+=k\n            else:\n                b=k\n        if b not in list(st.keys()):\n            st[b]=[int(n)]\n        else:\n            st[b]=st[b]+[int(n)]#+l[m%4])\n    mpl=[]\n    m=1\n    for k in sorted(st.keys()):\n        for ln in st[k]:\n            mpl.append(str(ln))#+l[m%4])\n            #m+=1#m+=1\n    mp=eval(mpl[0]+'+'+mpl[1]) if len(mpl)>1 else int(mpl[0])\n    for kl in mpl[2:]:\n        mp=eval(str(mp)+l[m%4]+kl)\n        m+=1\n    return int(mp+0.5) if mp>0 else int(mp+0.5)-1\n    #Your code starts here ... may the FORCE be with you\n", "from re import findall\nfrom itertools import cycle\n\ndef do_math(s) :\n    numbers = [''.join(findall(r'\\d+', num)) for num in sorted(s.split(), key = lambda x: max(x))]\n    res = numbers[0]\n    for i, operation in zip(numbers[1:], cycle('+-*/')):\n        res = eval(f'{res} {operation} {i}')\n    return round(float(res))", "from re import findall\nfrom itertools import cycle\n\ndef do_math(s) :\n    number_letter = [ (findall(r'[A-Za-z]', x)[0], ''.join(findall(r'\\d+', x))) for x in s.split() ]\n    numbers = [n for _, n in sorted(number_letter, key = lambda x: x[0])]\n    res = numbers[0]\n    for i, operation in zip(numbers[1:], cycle('+-*/')):\n        res = eval(f'{res} {operation} {i}')\n    return round(float(res))", "from itertools import cycle\ndef do_math(s) :\n    op=cycle('+-*/')\n    ss=s.split()\n    ss=sorted(ss,key=lambda x:[i for i in x if i.isalpha()])\n    ss=[int(''.join((i for i in j if i.isdigit()))) for j in ss]\n    ans=ss[0]\n    print(ss)\n    for i in ss[1:]:\n        ans = eval(str(ans)+next(op)+str(i))\n    return round(ans)", "def extract_array(s):\n    arr = s.split(' ')\n    letters = []\n    numbers = []\n    index = 0\n    while index < len(arr):\n        temp_arr = []\n        for letter in arr[index]:\n            if(str.isdigit(letter)):\n                temp_arr.append(letter)\n            else:\n                letters.append(letter+str(index))\n        numbers.append(''.join(temp_arr))\n        index += 1\n    return numbers, letters\n\ndef sort_arr(item, sort_by):\n    return [x for _,x in sorted(zip(sort_by, item))]\n\ndef do_math(s):\n    nums = [int(x) for x in sort_arr(*extract_array(s))]\n    index = 1\n    result = nums[0]\n    while index < len(nums):\n        if(index % 4 == 1):\n            result += nums[index]\n        elif(index % 4 == 2):\n            result -= nums[index]\n        elif(index % 4 == 3):\n            result *= nums[index]\n        else:\n            result /= nums[index]\n        index += 1\n    return round(result)", "def do_math(s) :\n    s=s.split()\n    for i in s:\n        a=sorted(s,key=lambda s:([i for i in s if i.isalpha()]))\n    n=[]\n    for j in a:\n        b=''\n        for k in j:\n            if k.isdigit():\n                b+=k\n        n.append(b)\n    c=int(n[0])\n    for l in range(1,len(n)):\n        if l%4==1: c+=int(n[l])\n        if l%4==2: c-=int(n[l])\n        if l%4==3: c*=int(n[l])\n        if l%4==0: c/=int(n[l])\n    return round(c)", "def do_math(s) :\n    \n    res = operator = 0\n    for op in (x for y in 'abcdefghijklmnopqrstuvwxyz' for x in s.split() if y in x):\n        op = int(''.join(x for x in op if x.isdigit()))\n        if not res:\n            res += op\n            continue\n        if operator == 0:\n            res += op\n            operator += 1\n        elif operator == 1:\n            res -= op\n            operator += 1\n        elif operator == 2:\n            res *= op\n            operator += 1\n        else:\n            res /= op\n            operator = 0\n        \n    return round(res)", "def do_math(s):\n    tuples_with_pairs = [(letter, element) for element in s.split() for letter in element if letter.isalpha()]\n    letters = [element[0] for element in tuples_with_pairs]\n    letters.sort()\n    a_list = []\n    m_list = []\n    b_list = []\n    n_list = []\n    c_list = []\n    o_list = []\n    d_list = []\n    p_list = []\n    e_list = []\n    q_list = []\n    f_list = []\n    r_list = []\n    g_list = []\n    s_list = []\n    h_list = []\n    t_list = []\n    i_list = []\n    u_list = []\n    j_list = []\n    v_list = []\n    k_list = []\n    w_list = []\n    l_list = []\n    x_list = []\n    y_list = []\n    z_list = []\n    for pairs in tuples_with_pairs:\n        if pairs[0] == \"a\":\n            a_list.append(pairs[1])\n        elif pairs[0] == \"b\":\n            b_list.append(pairs[1])\n        elif pairs[0] == \"c\":\n            c_list.append(pairs[1])\n        elif pairs[0] == \"d\":\n            d_list.append(pairs[1])\n        elif pairs[0] == \"e\":\n            e_list.append(pairs[1])\n        elif pairs[0] == \"f\":\n            f_list.append(pairs[1])\n        elif pairs[0] == \"g\":\n            g_list.append(pairs[1])\n        elif pairs[0] == \"h\":\n            h_list.append(pairs[1])\n\n        elif pairs[0] == \"i\":\n            i_list.append(pairs[1])\n        elif pairs[0] == \"j\":\n            j_list.append(pairs[1])\n        elif pairs[0] == \"k\":\n            k_list.append(pairs[1])\n        elif pairs[0] == \"l\":\n            l_list.append(pairs[1])\n        elif pairs[0] == \"m\":\n            m_list.append(pairs[1])\n        elif pairs[0] == \"n\":\n            n_list.append(pairs[1])\n        elif pairs[0] == \"o\":\n            o_list.append(pairs[1])\n\n        elif pairs[0] == \"p\":\n            p_list.append(pairs[1])\n        elif pairs[0] == \"q\":\n            q_list.append(pairs[1])\n        elif pairs[0] == \"r\":\n            r_list.append(pairs[1])\n        elif pairs[0] == \"s\":\n            s_list.append(pairs[1])\n        elif pairs[0] == \"t\":\n            t_list.append(pairs[1])\n        elif pairs[0] == \"u\":\n            u_list.append(pairs[1])\n        elif pairs[0] == \"v\":\n            v_list.append(pairs[1])\n        elif pairs[0] == \"w\":\n            w_list.append(pairs[1])\n        elif pairs[0] == \"x\":\n            x_list.append(pairs[1])\n        elif pairs[0] == \"y\":\n            y_list.append(pairs[1])\n        elif pairs[0] == \"z\":\n            z_list.append(pairs[1])\n\n    output_list = a_list + b_list + c_list + d_list + e_list + f_list + g_list + h_list + i_list + j_list + \\\n                  k_list + l_list + m_list + n_list + o_list + p_list + q_list + r_list + s_list + t_list + u_list + v_list + \\\n                  w_list + x_list + y_list + z_list\n\n    duplicates = []\n    right_strings = []\n    for strings in output_list:\n        if strings in duplicates and strings in right_strings:\n            continue\n        elif strings in right_strings and strings not in duplicates:\n            duplicates.append(strings)\n        else:\n            right_strings.append(strings)\n    print(right_strings)\n    digits_list = []\n    changed_string = \"\"\n    for string in right_strings:\n        for digits in string:\n            if digits.isdigit():\n                changed_string += digits\n            continue\n        digits_list.append(int(changed_string))\n        changed_string = \"\"\n\n    first_even_list = [0, 4, 8]\n    second_even_list = [2, 6, 10]\n    first_odd_list = [1, 5, 9]\n    second_odd_list = [3, 7, 11]\n\n    result = digits_list[0]\n    digits_list.remove(digits_list[0])\n\n    for number in range(len(digits_list)):\n        if number in first_even_list:\n            result += digits_list[number]\n        elif number in first_odd_list:\n            result -= digits_list[number]\n        elif number in second_even_list:\n            result *= digits_list[number]\n        elif number in second_odd_list:\n            result /= digits_list[number]\n\n    return round(result)\n\n\n# print(do_math(\"111a 222c 444y 777u 999a 888p\"))\nprint((do_math(\"2j 87j 169a 1275c 834f 683v\")))\n", "def do_math(s):\n    alfavit = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    def izvlech(s):\n        s += ' '\n        list = []\n        string = ''\n        for x in s:\n            if x != ' ':\n                string += x\n            else:\n                list.append(string)\n                string = ''\n        return list\n\n    def izvlech1(list1, alfavit):\n        list2 = []\n        for z in alfavit:\n            for x in list1:\n                for y in x:\n                    if z == y:\n                        list2.append(x)\n        return list2\n\n    list1 = izvlech(s)\n    list2 = izvlech1(list1, alfavit)\n    result = ''\n    final_result = 0\n    index = 0\n    for x in list2:\n        for y in x:\n            try:\n                y = int(y)\n                result += str(y)\n            except ValueError:\n                continue\n        if index == 0:\n            index += 1\n            final_result = int(result)\n            result = ''\n            continue\n        elif index == 1:\n            final_result += int(result)\n            result = ''\n            index += 1\n            continue\n        elif index == 2:\n            final_result -= int(result)\n            result = ''\n            index += 1\n            continue\n        elif index == 3:\n            final_result *= int(result)\n            result = ''\n            index += 1\n            continue\n        elif index == 4:\n            final_result /= int(result)\n            result = ''\n            index = 1\n            continue\n    return round(final_result)", "from functools import reduce\nfrom itertools import cycle\nfrom operator import *\ndef do_math(s):\n    n=[]\n    for w in s.split():\n        a,b='',''\n        for c in w:\n            if c.isdigit():a+=c\n            else:b+=c\n        n+=[(b,int(a))]\n    ops = cycle([add,sub,mul,truediv])\n    return round(reduce(lambda *a:next(ops)(*a),[v for c,v in sorted(n,key=lambda x:x[0])]))\n"]