["def backwardsPrime(start, stop):\n    primes = []\n    for n in range(start, stop+1):\n        if n not in primes and is_prime(n) and is_prime(reverse(n)) and n != reverse(n):\n            primes.append(n)\n            if start <= reverse(n) <= stop:\n                primes.append(reverse(n))\n    return sorted(primes)\n\ndef is_prime(n):\n    for i in range(2, int(n**(0.5))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse(n):\n    return int(''.join(str(n)[::-1]))", "def backwardsPrime(start, stop):\n    is_prime = lambda n : all(n % a for a in range(3, 1 + int(n ** 0.5), 2)) if n > 2 and n % 2 else n == 2\n    \n    return [n for n in range(start + ~start % 2, stop + 1, 2) if is_prime(n) and n != int(str(n)[::-1]) and is_prime(int(str(n)[::-1]))]", "def prime(a):\n    if a == 2: return True\n    if a < 2 or a % 2 == 0: return False\n    return not any(a % x == 0 for x in range(3, int(a**0.5) + 1, 2))\n    \ndef backwardsPrime(start, nd):\n    return [x for x in range(start, nd + 1) if (str(x) != str(x)[::-1]) and prime(x) and prime(int(str(x)[::-1])) ]\n", "def backwardsPrime(start, stop):\n    return [x for x in range(start, stop+1) if is_prime(x) and is_prime(int(str(x)[::-1])) and str(x) != str(x)[::-1]]\n\ndef is_prime(n):\n    return all(n%x for x in range(2, int(n**.5+1)))", "from math import sqrt; from itertools import count, islice\n\ndef isPrime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef backwardsPrime(a,b):\n    return[x for x in range(a, b+1) if isPrime(x) and x > 10 and isPrime(int(str(x)[::-1])) and (int(str(x)[::-1]) != x)]", "import math\n\nKnownPrimes = []\n\ndef backwardsPrime(start, stop):    \n    k = math.ceil((start - 1)/6)\n    Prime,p1,p2 = [],0,0 \n    \n    while p1<=stop or p2<=stop: \n        p1, p2 = 6*k - 1, 6*k + 1\n        p1x = int(str(p1)[::-1])\n        p2x = int(str(p2)[::-1])\n        \n        if not(p1 == p1x) and IsPrime(p1) and IsPrime(p1x) and p1<=stop:  Prime.append(p1)\n        if not(p2 == p2x) and IsPrime(p2) and IsPrime(p2x) and p2<=stop:  Prime.append(p2)\n        k = k + 1   \n    return Prime\n            \n#Test de primalidad de Miller-Rabin\ndef TryComposite(a, d, n, s):\n    if pow(a, d, n) == 1: return False\n    for i in range(s): \n        if pow(a, 2**i * d, n) == n-1: return False\n    return True # n  is definitely composite\n   \ndef IsPrime(n, PrecisionForHugeN=16):\n    if n in KnownPrimes or n in (0, 1): return True\n    if any((n % p) == 0 for p in KnownPrimes): return False\n    \n    d, s = n - 1, 0\n    while not d % 2: d, s = d >> 1, s + 1\n    # Returns exact according to http://primes.utm.edu/prove/prove2_3.html\n    if n < 1373653:         return not any(TryComposite(a, d, n, s) for a in (2, 3))\n    if n < 25326001:        return not any(TryComposite(a, d, n, s) for a in (2, 3, 5))\n    if n < 118670087467:    return [not any(TryComposite(a, d, n, s) for a in (2, 3, 5, 7)),False][n == 3215031751]\n    if n < 2152302898747:   return not any(TryComposite(a, d, n, s) for a in (2, 3, 5, 7, 11))\n    if n < 3474749660383:   return not any(TryComposite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13))\n    if n < 341550071728321: return not any(TryComposite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17))\n    # otherwise\n    return not any(TryComposite(a, d, n, s) for a in KnownPrimes[:PrecisionForHugeN])\n\n", "import math\ndef isPrime(n):\n    checkNum = int(math.sqrt(n))\n    for i in range(1,checkNum+1):\n        if n%i == 0 and i != 1:\n            return False\n    return True\ndef backwardsPrime(start, stop):\n    backwardsPrimes = []\n    \n    for i in range(start,stop+1):\n        if isPrime(i) == True:\n            reversedPrime = int(str(i)[::-1])\n            if isPrime(reversedPrime) and reversedPrime != i:\n                backwardsPrimes.append(i)\n    return backwardsPrimes", "def backwardsPrime(start, stop):\n    output = []\n    for x in range(start,stop+1):\n        if isPrime(x):\n            if isReversePrime(x):\n                output.append(x)\n    return output\ndef isPrime(input):\n    if input % 2 == 0: return False\n    for x in range(3, int(input**0.5) + 1, 2):\n        if input % x == 0: return False\n    else:\n        return True\ndef isReversePrime(input):\n    tempstr = \"\"\n    iptemp = str(input)\n    i = (len(iptemp) - 1)\n    while(i >= 0):\n        tempstr += iptemp[i]\n        i = i -1\n    temp = 0\n    temp = int(tempstr)\n    if input == temp: return False\n    if isPrime(temp): return True\n    else: return False"]