["def dna_to_rna(dna):\n    return dna.replace(\"T\", \"U\")", "dna_to_rna = lambda s: s.replace('T', 'U')", "def dna_to_rna(dna):\n    rna = []\n    for x in dna:\n        if x == 'T':\n            rna.append('U')\n        else:\n            rna.append(x)\n    return ''.join(rna)\n", "dna_to_rna = lambda dna:dna.translate(str.maketrans(\"GCAT\",\"GCAU\"))", "def dna_to_rna(mot):\n    \n    new_mot = [lettre.replace('T','U') for lettre in mot]\n    return \"\".join(new_mot)", "def dna_to_rna(dna):\n    res = ''\n    for i in dna:\n        if i == \"T\":\n            res += 'U'\n        else:\n            res += i\n    return res", "def dna_to_rna(dna):\n    total = \"\"\n    for i in dna:\n        if i == \"T\":\n            total += \"U\"\n        else: \n            total += i\n    return total", "def dna_to_rna(dna):\n    res = \"\"\n    for let in dna:\n        if let == \"T\":\n            res += \"U\"\n        else:\n            res += let\n    return res", "def dna_to_rna(deoxyribonucleic_acid):\n    return ''.join(str([nucleic_acid_base if ord(nucleic_acid_base) is not eval(\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\") else chr(ord(nucleic_acid_base)+1) for nucleic_acid_base in deoxyribonucleic_acid]).replace('\"\"','').replace(',','').replace('[','').replace(']','').replace(\"'\", '').split(' '))\n", "def dna_to_rna(dna):\n    rna_line = []\n    dna_str = dna.upper()\n    \n    for a in dna_str:\n        if a == \"T\":\n            rna_line.append(\"U\")\n        else:\n            rna_line.append(a)\n            \n    result = \"\".join(rna_line)\n    return result", "def dna_to_rna(dna):\n    rna = dna.replace('T','U')\n    return rna\n\n\nprint(dna_to_rna('GCAT'))", "def dna_to_rna(dna):\n    dna_bases = []\n    for item in dna:\n        dna_bases.append(str(item))\n    rna_lst = []\n    for item in dna_bases:\n        if item == 'A' or item == 'C' or item == 'G':\n            rna_lst.append(item)\n        elif item == 'T':\n            rna_lst.append('U')\n        else:\n            print(\"This is no dna structure\") \n            break\n    rna = ''.join(rna_lst)\n    return rna\n    \n\n\n\n\n", "def dna_to_rna(dna):\n    rna = []\n    for base in dna:\n        if base == \"T\":\n            rna.append(\"U\")\n        else:\n            rna.append(base)\n    return \"\".join(rna)", "def dna_to_rna(dna):\n    if \"T\" not in dna:\n        return dna\n    else:\n        rna = dna.replace(\"T\", \"U\")\n        return rna\n    return", "def dna_to_rna(dna):\n    result = []\n    for x in dna:\n        if x == 'T':\n            result.append('U')\n        else:\n            result.append(x)\n    return ''.join(result)", "def dna_to_rna(dna):\n    results=[]\n    for x in dna:\n        if x == \"T\":\n            results.append(\"U\")\n        else:\n            results.append(x)\n    return ''.join(results)", "def dna_to_rna(dna):\n    rna = ''\n    for base in dna:\n        if base != 'T':\n            rna += base\n        else:\n            rna += 'U'\n    return rna", "def dna_to_rna(dna):\n    rna = []\n    if 'T' in dna:\n        dna = dna.replace('T', 'U')\n    return dna", "def dna_to_rna(dna):\n    res = \"\"\n    if(len(dna) == 0):\n        return res\n    else:\n        for item in dna:\n            if(item == \"T\"):\n                res += \"U\"\n            else:\n                res += item\n        return res", "dnatab = \"T\"\nrnatab = \"U\"\n\n\ndef dna_to_rna(dna):\n    return dna.translate(dna.maketrans(dnatab, rnatab))", "def dna_to_rna(dna):\n    output=''\n    for i in dna:\n        if(i=='T'):\n            output+='U'\n        else:\n            output+=i\n    return output", "def dna_to_rna(dna):\n    newstr = dna.replace('T', 'U')\n    return newstr", "def dna_to_rna(dna):\n    rna = ''\n    for base in dna:\n        if base == 'T':\n            rna += 'U'\n        else:\n            rna += base\n    return rna", "def dna_to_rna(dna):\n    result = []\n    for i in dna:\n        if i == \"T\":\n            result.append(\"U\")\n        else:\n            result.append(i)\n    return ''.join(result)", "def dna_to_rna(dna):\n    RNA = \"\"\n    for letter in dna:\n        if letter == \"T\":\n            RNA += \"U\"\n        else:\n            RNA += letter\n    return RNA\n", "def dna_to_rna(dna):\n    for t in dna:\n        if t == 'T':\n            dna = dna.replace('T', 'U')\n    return dna", "def dna_to_rna(dna):\n    #if dna=\"\":\n    #    print('No entry value!')\n    \n    dna = dna.upper()\n    \n    if 'T' in dna:\n        dnaList=list(dna)\n        while 'T' in dnaList:\n            dnaList[dnaList.index('T')]='U'\n        rna=''.join(dnaList)\n    else: rna = dna\n         \n    return rna\n", "def dna_to_rna(dna):\n    if \"T\" in dna:\n        return dna.replace(\"T\", \"U\")\n    else:\n        return dna\n    \n    \n    \n    \n    \n\n#DNA is composed by G + C + A + T\n#RNA is combosed by G + C + A + U\n", "def dna_to_rna(dna):\n    return ''.join([\"U\" if x == \"T\" else x for x in dna])", "def dna_to_rna(dna):\n    rna = dna.replace(\"T\", \"U\") #use replace instead of looping it\n    return rna", "def dna_to_rna(dna):\n    rna = dna.replace('T','U') # Replacing the character 'T' by 'U'\n            \n    return rna", "def dna_to_rna(dna):\n    rna = \"\"\n    for i in dna:\n        if i == \"T\":\n            rna = rna + \"U\"\n        else:\n            rna = rna + i\n    return rna", "def dna_to_rna(dna):\n    y=\"\"\n    i=0\n    while i<len(dna):\n        if dna[i]==\"T\":\n            y=y+\"U\"\n            i=i+1\n        else:\n            y=y+dna[i]\n            i=i+1\n    return y", "def dna_to_rna(dna):\n    new = ''\n    for i in range(len(dna)):\n        if dna[i]=='T':\n            new+= 'U'\n        else:\n            new+= dna[i]\n    return new\n", "def dna_to_rna(dna):\n    result = ''\n    for i in dna:\n        if i == \"T\" or \"\":\n            i = \"U\"\n        result += i\n    return result\nprint(dna_to_rna(\"GCAT\"))", "import string\n\ndef dna_to_rna(dna):\n    return dna.translate(str.maketrans('GCAT', 'GCAU'))", "def dna_to_rna(dna):\n    \n    rna = \"\"\n    \n    for ch in dna:\n        if ch ==\"T\":\n            rna += \"U\"\n        else:\n            rna += ch\n    \n    return rna", "def dna_to_rna(dna):\n    \n    rna = \"\"\n    \n    for x in dna:\n        if x == \"T\":\n            rna += \"U\"\n        \n        else: rna += x\n            \n    return rna", "def dna_to_rna(dna):\n    s=\"\"\n    for i in dna:\n        if(i==\"T\"):\n            i=\"U\"\n            s=s+i\n        else:\n            s=s+i\n    return s", "def dna_to_rna(dna):\n    answer = \"\"\n    for letter in dna:\n        if letter == \"T\":\n            answer += \"U\"\n        else:\n            answer += letter\n    return answer", "def dna_to_rna(dna):\n    j = \"\"\n    for i in dna:\n        if i==\"T\":\n            j += \"U\"\n        else:\n            j += i\n    return j", "def dna_to_rna(dna):\n    for T in dna:\n        dna = dna.replace(\"T\",\"U\")\n    return dna", "def dna_to_rna(dna):\n    rna = \"\"\n    for letter in dna:\n       if letter == \"T\":\n           rna += \"U\"\n       else:\n           rna += letter\n    return rna", "def dna_to_rna(dna):\n    for i in range(len(dna)):\n        if dna[i]=='T':\n            dna=dna[:i]+'U'+dna[i+1:]\n    return dna", "def dna_to_rna(dna):\n    result =  \"\"\n    for i in dna:\n        if i == \"T\":\n            result +='U'\n        else:\n            result+=i\n    return result\n", "def dna_to_rna(dna):\n    rna = ''\n    for base in dna:\n        if base == 'T':\n            rna = rna + 'U'\n        elif base == 'G' or 'C' or 'A':\n            rna = rna + base\n        else:\n            print(f\"{base} is not a DNA nucleotide base\")\n    return rna", "import pandas as pd\ndef dna_to_rna(dna):\n    return dna.replace('T','U')", "def dna_to_rna(dna):\n    import re\n    return re.sub(r\"T\",\"U\",dna)", "def dna_to_rna(dna):\n    output=[]\n    answer=''\n    for i in range(len(dna)):\n        output += [dna[i]]\n        if output[i]==\"T\":\n            output[i]='U'\n        answer += output[i]\n    return answer", "def dna_to_rna(dna):\n    translate = {'T':'U', 'A':'A', 'C':'C', 'G':'G' }\n    return ''.join(list(map(lambda x:translate[x], dna)))", "def dna_to_rna(dna):\n    rna = \"\"\n    \n    for l in dna:\n        if l.upper() == \"T\": rna += \"U\"\n        else: rna += l.upper()\n                \n    return rna", "def dna_to_rna(dna):\n    rna = dna.maketrans(\"T\", \"U\")\n    return dna.translate(rna)", "def dna_to_rna(dna):\n    rna=''\n    for i in dna:\n        if i == 'T':\n            rna+='U'\n        else:\n            rna+=i\n    print(rna)\n    return rna", "def dna_to_rna(dna):\n    return ''.join(map(lambda a: 'U' if a is 'T' else a, dna))", "def dna_to_rna(dna):\n    output = []\n    for i in dna:\n        if i == 'T':\n            output.append('U')\n        else: \n            output.append(i)\n    return ''.join(output)", "def dna_to_rna(dna):\n  t= ''\n  for x in dna:\n    if(x=='T'):\n      x='U'\n    t+=x  \n    #print(t)\n  return(t)\n\n", "def dna_to_rna(dna):\n    ans = ''\n    for i in dna:\n        if i == 'T':\n            ans = ans + 'U'\n        else:\n            ans = ans + i\n    return ans", "def dna_to_rna(dna):\n        s = dna.replace('T', 'U')\n        return s", "def dna_to_rna(dna):\n    res = dna.replace('T', 'U')\n    return res", "def dna_to_rna(s):\n    s1=\"\"\n    for i in s:\n        if(i==\"T\"):\n            s1+=\"U\"\n        elif(i==\"U\"):\n            s1+=\"T\"\n        else:\n            s1+=i\n    return s1", "def dna_to_rna(dna):\n    rna = ''\n    for i in dna:\n        if i.upper() == 'T':\n            rna += 'U'\n        else:\n            rna += i.upper()\n    return rna", "s =\"\"\ndef dna_to_rna(dna):\n    ddna = list(dna)\n    xy=len(ddna)\n    for i in range(xy):\n        if ddna[i] == 'T':\n            ddna[i]='U'\n        else: \n            None\n    return s.join(ddna)\n\n", "s=\"\"\ndef dna_to_rna(dna):\n    ddna = list(dna)\n    xy=len(dna)\n    for i in range(xy):\n        if ddna[i] == 'T':\n            ddna[i]='U' \n        else: \n            None\n    return s.join(ddna)\n\n\n", "def dna_to_rna(dna):\n    dnaList = list(dna)\n    rnaList = []\n    for x in dnaList:\n        if x == \"T\":\n            rnaList.append(\"U\")\n        else:\n            rnaList.append(x)\n    return \"\".join(rnaList)", "def dna_to_rna(dna):\n    rna = ''\n    for nucleic_acid in dna:\n        if nucleic_acid == 'T':\n            rna += 'U'\n        else:\n            rna += nucleic_acid\n    return rna", "def dna_to_rna(dna):\n    d = {'T': 'U'}\n    return ''.join([d.get(i, i) for i in dna])", "def dna_to_rna(letters):\n    whatevs = letters\n    return whatevs.replace('T', 'U')\n", "def dna_to_rna(dna):\n    return \"\".join(\"U\" if char == \"T\" else char for char in dna)", "def dna_to_rna(dna):\n    a = [i if i != \"T\" else \"U\" for i in dna]\n    return \"\".join(a)\n", "def dna_to_rna(dna):\n    for x in dna:\n        if x == \"T\":\n            y = dna.replace(\"T\",\"U\")\n            return y\n    return dna", "def dna_to_rna(dna):\n    new = \"\"\n    for i in dna:\n        if i in [\"G\",\"C\",\"A\"]:\n            new+=i\n        elif i==\"T\":\n            new+=\"U\"\n    return new", "def dna_to_rna(dna):\n    dna = list(dna)\n    for i in range(len(dna)):\n        if dna[i] == 'T':\n            dna[i] = 'U'\n    return \"\".join(dna)", "import string\n\ndef dna_to_rna(dna):\n    translation = {84:85}\n    return dna.translate(translation)", "def dna_to_rna(dna):\n    for char in dna:\n        dna= dna.replace(\"T\",\"U\")\n    return dna", "def dna_to_rna(dna):\n    pattern1 = \"GCAT\"\n    pattern2 = \"GCAU\"\n    \n    translation = str.maketrans(pattern1, pattern2)\n    \n    return dna.translate(translation)\n", "def dna_to_rna(dna):\n    rna = \"\"\n    for c in dna:\n        if c == 'T':\n            rna += 'U'\n        else:\n            rna += c\n    return rna", "def dna_to_rna(dna):\n    \n    ret = \"\";\n    print(dna)\n    for c in dna:\n        if c == 'T':\n            ret = ret + \"U\"\n        else:\n            ret = ret + c\n        \n    print(ret)\n    return ret", "def dna_to_rna(dna):\n    f = \"\"\n    for i in range(len(dna)):\n        if dna[i] == \"T\":\n            f += \"U\"\n        else:\n            f += dna[i]\n    return f", "def dna_to_rna(dna):\n    x = []\n    for i in range(len(dna)):\n        if dna[i] == 'T':\n            x.append('U')\n        else:\n            x.append(dna[i])\n    return ''.join(map(str, x))", "#! python3\n\nimport re\ndnaRegex = re.compile(r'T')\ndef dna_to_rna(dna):\n    return dnaRegex.sub('U',dna)\n", "#! python3\n\ndef dna_to_rna(dna):\n    rna = ''\n    for i in dna:\n        if i == 'T':\n            rna = rna + 'U' \n        else:\n            rna = rna + i\n    return rna"]