["def solve(arr): \n    re = []\n    for i in arr[::-1]:\n        if i not in re:\n            re.append(i)\n    return re[::-1]", "def solve(arr): \n    return list(dict.fromkeys(arr[::-1]))[::-1]", "def solve(arr): \n    return [a for i,a in enumerate(arr) if a not in arr[i+1:]]", "def solve(arr): \n    list = arr.copy()\n    for i in arr:\n        if list.count(i) > 1:\n            list.remove(i)\n    return list", "def solve(arr): \n    seen = set()\n    return [seen.add(a) or a for a in reversed(arr) if a not in seen][::-1]", "def solve(l): \n    return sorted(set(l), key=l[::-1].index)[::-1]", "# Python >= 3.6.0 only\nsolve=lambda a: list(dict.fromkeys(reversed(a)))[::-1]", "def solve(arr): \n    return sorted(set(arr), key=lambda n: -arr[::-1].index(n))\n", "def solve(arr): \n    return sorted(set(arr), key=arr[::-1].index)[::-1]", "def solve(arr): \n    return list(reversed(list(dict.fromkeys(reversed(arr)))))", "def solve(arr): \n    d = {x: i for i, x in enumerate(arr)}\n    return sorted(d, key=d.get)", "solve=lambda arr:[e for i,e in enumerate(arr) if e not in arr[i+1:]]", "def solve(arr): \n    final = []\n    for number in arr[::-1]:\n        if number not in final:\n            final.insert(0,number)\n    return final", "def solve(arr): \n    return [arr[el] for el in range(len(arr)) if arr[el] not in arr[el+1:]]", "from collections import OrderedDict\nfrom typing import List\n\n\ndef solve(arr: List[int]) -> List[int]:\n    d = OrderedDict()\n    for a in arr:\n        try:\n            d.move_to_end(a)\n        except KeyError:\n            d[a] = None\n\n    return list(d.keys())\n", "def solve(array):\n    return [*dict.fromkeys(array[::-1]).keys()][::-1]", "def solve(a): \n    return list(dict.fromkeys(a[::-1]))[::-1]", "def solve(lst): \n    return sorted(set(lst), key=lst[::-1].index)[::-1]", "def solve(arr): \n    uniques = set(arr)\n    output = []\n    for n in arr[::-1]:\n        if n in uniques:\n            output = [n] + output\n            uniques.remove(n)\n        if len(uniques) == 0:\n            return output\n    return output", "def solve(arr): \n    unique = set (arr)\n    for num in unique:\n        for i in range (arr.count(num) - 1):\n            arr.pop((arr.index(num)))\n    return arr", "def solve(arr): return [v for i, v in enumerate(arr) if v not in arr[i + 1:]]\n", "def solve(l): \n    for i in range(3):\n        [l.pop(l.index(i)) for i in l if l.count(i) > 1]\n    return l", "def solve(arr):\n    for i in range(max(arr)+1):\n        while arr.count(i)>1:\n            arr.remove(i)\n    return arr", "def solve(arr):\n    arr2=[]\n    for i in range(0,len(arr)):\n        f=0\n        for j in range(i+1,len(arr)):\n            if arr[j] == arr[i]:\n                f=f+1\n        if f == 0:\n            arr2.append(arr[i])\n    return arr2", "def solve(seq):\n    set1 = set()\n    seq = list(reversed(seq))\n    set_add = set1.add\n    return list(reversed([x for x in seq if not (x in set1 or set_add(x))]))", "def solve(arr):\n    n = len(arr)\n    ans = []\n    while n > 0:\n        if arr[n-1] not in ans:\n            ans.append(arr[n-1])\n        n -= 1\n    return ans[::-1]", "def solve(arr):\n    # Copy the list\n    new_arr = arr.copy()\n    # iterate by every item in old list\n    for digit in arr:\n        # get list of indexes of duplicates in new list by enumarating them\n        index_list_of_duplicates = [i for i, x in enumerate(new_arr) if x == digit]\n        # if count of the duplicates list is higher than 1 it deletes the first duplicate by index value from the new list\n        if len(index_list_of_duplicates) > 1:\n            del new_arr[index_list_of_duplicates[0]]\n    return new_arr", "def solve(arr): \n    newArr = []\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] not in newArr: newArr.append(arr[i])\n    newArr.reverse()\n    return newArr", "solve=lambda a:[j for i,j in enumerate(a) if a[i:].count(j)==1]", "def solve(arr):\n    num = 0\n    while num < len(arr):\n        counter = 0\n        for elem in arr:\n            if arr[num] == elem:\n                counter += 1\n        if counter > 1:\n            del arr[num]\n        else:\n            num += 1\n    return(arr)\n", "def solve(arr): \n    arr2=[]\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            arr2.append(arr[i])\n    return arr2\n", "def solve(arr):\n    l = []\n    for num in arr[::-1]:\n        if num not in l:\n            l.append(num)\n    return l[::-1]\n\n    \n", "def solve(arr):\n    array = []\n    for item in arr:\n        if item in array:\n            array.remove(item)\n            array.append(item)\n        else:\n            array.append(item)\n    return array", "def solve(l, i=[]):\n    for x in l[::-1]:\n        i=[x]*(x not in i)+i\n    return i", "def solve(A,Z=[]):\n    for x in A[::-1]:Z=[x]*(x not in Z)+Z\n    return Z", "def solve(arr):\n    d = {}\n    for i, e in enumerate(arr): d[e] = i\n    return sorted(set(arr), key=d.get)\n", "def solve(arr): \n    ans = []\n    arr.reverse()\n    for i in arr:\n        if i not in ans:\n            ans.append(i)\n    return ans[::-1]", "def solve(arr): \n    removed = []\n    for i in arr[::-1]:\n        if not i in removed:\n            removed.append(i)\n    return removed[::-1]", "def solve(arr):\n    n = len(arr)\n    res = []\n    for i in range(n-1,-1,-1):\n        if(arr[i] not in res):\n            res.append(arr[i])\n    res.reverse()\n    return res", "def solve(arr):\n    solution = []\n    for i in reversed(arr):\n        if i not in solution:\n            solution.append(i)\n    solution.reverse()\n    return solution", "def solve(arr): \n    res = []\n    [res.append(c) for c in arr[::-1] if c not in res]\n    return res[::-1]", "def solve(arr):\n    x = list(set(arr))\n    res = []\n    indices = []\n    result = []\n    for num in x:\n        index = last_index(arr,num)\n        indices.append(index)\n        res.append(arr[index])\n    while len(indices) > 0:\n        loc = indices.index(min(indices))    \n        result.append(res[loc])\n        indices.pop(loc)\n        res.pop(loc)\n    return result\n\ndef last_index(pepe,n):\n    return [i for i in range(len(pepe)) if pepe[i] == n][::-1][0]", "def solve(arr): \n    output = []\n    \n    for x in arr[::-1]:\n        if x in output:\n            continue\n        else:\n            output.append(x)\n    return output[::-1]", "def solve(arr):\n    res = []\n    for number in arr[::-1]:\n        if number not in res:\n            res.append(number)\n        else:\n            pass\n    return res[::-1]\n            \n            \n", "def solve(arr): \n    r = []\n    for i in reversed(arr):\n        if i not in r:\n            r.append(i)\n    \n    return r[::-1]", "def solve(arr):\n    arr1 = arr[::-1]\n    arr2 = list(dict.fromkeys(arr1))\n    return arr2[::-1]\n", "from collections import Counter\ndef solve(arr): \n    result = []\n    dic = Counter(arr)\n    for value in arr:\n        if dic[value]==1:\n            result.append(value)\n        else:\n            dic[value]-=1\n    return result\n            \n", "def solve(arr): \n    tmp = {}\n    s = set(arr)\n    for n in s:\n        tmp[n] = [idx for idx, num in enumerate(arr) if num == n]\n    ides = [value[-1] for value in tmp.values()]\n    return [arr[idx] for idx in sorted(ides)]", "def solve(arr): \n    \n# =============================================================================\n#     This function removes the left-most duplicates from a list of integers and\n#     returns the result.\n# \n#     Example:\n#         Remove the 3's at indices 0 and 3\n#         followed by removing a 4 at index 1\n#         solve([3, 4, 4, 3, 6, 3]) # => [4, 6, 3]\n# =============================================================================\n    \n    print(arr)    \n    \n    arr.reverse()\n    \n    print (arr)\n    \n    result = []\n    \n    for item in arr:\n        if item not in result:\n            result.append(item)\n            \n    result.reverse()\n    \n    return result", "def solve(arr): \n    return [i for index, i in enumerate(arr) if i not in arr[index+1:]]", "def solve(arr): \n    arr2 = []\n    for i in arr[::-1]:\n        if i not in arr2:\n            arr2.insert(0, i)\n    return arr2", "def solve(arr): \n    output = []\n    for i in arr[::-1]:\n        if i not in output:\n            output.append(i)\n        else:\n            pass\n    return output[::-1]", "def solve(arr):\n    for j in reversed(arr):\n        if arr.count(j)!=1:\n            arr.remove(j)\n    return arr", "def solve(arr):    \n    unique = []\n    arr.reverse()\n    for n in arr:\n        if n not in unique:\n            unique.insert(0, n)\n    \n    return unique", "def solve(arr): \n    ll = []\n    for i in reversed(arr):\n        if i not in ll:\n            ll.insert(0, i)\n            \n    return ll", "def solve(arr): \n    ls = []\n    for x in arr[::-1]:\n        if ls.count(x) == 0:\n            ls.append(x)\n    return [i for i in ls[::-1]]", "def solve(arr):\n    res = []\n    for i, v in enumerate(arr):\n        if arr[i:].count(v) == 1:\n            res.append(v)\n\n    return res", "def solve(arr):\n    ds = []\n    for x in arr:\n        if arr.count(x) > 1:\n            if x not in ds:\n                ds.append(x)\n            else:\n                pass\n        else:\n            pass\n    for x in ds:\n        while arr.count(x) > 1:\n            arr.remove(x)\n    \n    return arr", "def solve(arr): \n    # functional style\n    def unique_recursive(src_arr, trg_arr):\n        if len(src_arr) == 0:\n            return trg_arr\n        else:\n            head, *tail = src_arr\n            if head not in tail:\n                trg_arr.append(head)\n            return unique_recursive(tail, trg_arr)\n    return unique_recursive(arr, [])", "def solve(arr): \n    a = []\n    for i in arr[::-1]:\n        if (i in a)== False: a.append(i)\n    return a[::-1]", "def solve(arr): \n    result=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:len(arr)]:\n            pass\n        else:\n            result.append(arr[i])\n    return result", "def solve(arr):\n    res = []\n    for v in arr[-1::-1]:\n        if v not in res:\n            res.append(v)\n    return res[-1::-1]", "def solve(arr):\n    x = []\n    for element in arr:\n        if element in x:\n            x.remove(element)\n            x.append(element)\n        else:\n            x.append(element)\n    return x", "def solve(arr):\n    remove = list(set(arr))\n    print(remove)\n    duplicates = []\n    print(arr)\n    for k in range(len(remove)):\n        print(\"K>\", remove[k])\n        for i, j in enumerate(arr):\n            if j == remove[k]:\n                duplicates.append(i)\n                print(duplicates)\n        if len(duplicates) > 1:\n            for n in range(0, len(duplicates) - 1):\n                arr[duplicates[n]] = \"\"\n            duplicates = []\n        else:\n            duplicates = []\n    while '' in arr:\n        arr.remove('')\n    print(arr)\n    return arr", "def solve(arr): \n    arr = arr[::-1]\n    a = []\n    for i in arr:\n        if i not in  a:\n            a.append(i)\n    return a[::-1]", "def solve(arr): \n    ans = []\n    for i in arr[::-1]:\n        if i not in ans:\n            ans = [i]+ans\n    return ans", "def solve(arr): \n    result = []\n    for number in arr[::-1]:\n        if number not in result:\n            result.append(number)\n    return result[::-1]\n", "def solve(arr):\n    seen = []\n    for i in arr:\n        if i in seen:\n            seen.remove(i)\n        seen.append(i)        \n    return seen", "def solve(arr):\n    seen = []\n    for i in arr:\n        if i in seen:\n            seen.remove(i)\n            seen.append(i)\n        else:\n            seen.append(i)\n            \n    return seen", "def solve(arr): \n    result = []\n    for i in range(len(arr)):\n        try:\n            if arr[i] not in arr[i+1:]:\n                result.append(arr[i])\n        except IndexError:\n            pass\n    return result\n", "from collections import Counter\ndef solve(arr): \n    return [k for k in Counter(arr[::-1]).keys()][::-1]", "def solve(a):\n    return list(dict.fromkeys(a[::-1]).keys())[::-1]\n", "def solve(a):\n    n = len(a)\n    for i in range(n-1):\n        if a[i] in a[i+1:]: a[i] = 'a'\n    while True:\n        if 'a' in a: a.remove('a')\n        else     : break\n    return a\n", "def solve(arr): \n    seen = []\n    return_list = []\n    for number in arr[::-1]:\n        if number not in seen:\n            seen.append(number)\n            return_list.append(number)\n    return return_list[::-1]\n", "def solve(arr): \n    res = []\n    \n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            res.append(arr[i])\n            \n    return res", "def solve(arr): \n    out=[]\n    for x in arr[::-1]:\n        if x in out : continue\n        out.append(x)\n    return out[::-1]", "def solve(arr): \n    nums = set()\n    out = []\n    for elem in reversed(arr):\n        if elem not in nums:\n            out.append(elem)\n            nums.add(elem)\n\n    return out[::-1]", "def solve(arr): \n    temp=arr[::-1]\n    out=[]\n    for i in range(len(temp)):\n        if temp[i] in out:\n            continue\n        out.append(temp[i])\n    return out[::-1]", "def solve(arr): \n    s = []\n    for k,v in enumerate(arr):\n        if arr[k+1:].count(v) == 0:\n            s.append(arr[k])\n    return s            ", "def solve(arr):\n    k = 0\n    while k < len(arr):\n        while arr.count(arr[k]) > 1:\n            del arr[k]\n            k = 0\n        else:\n            k += 1\n\n    return arr", "def solve(arr):\n    i, k = 0, len(arr) \n    while k > i:\n        if arr.count(arr[i]) != 1:\n            del arr[i]\n            k -= 1\n        else:\n            i += 1\n    return arr", "def solve(arr): \n    b = reversed(arr)\n    new =[]\n    for i in b:\n        if i not in new:\n            new.append(i)\n    arr=new\n    arr.reverse()\n    return arr\n    pass", "def solve(arr): \n\n    holder, result = {}, []\n    index = len(arr) - 1\n    while (0 <= index):\n        if (arr[index] not in holder):\n            result.insert(0,\n                          arr[index])\n            holder[arr[index]] = True\n        index -= 1\n\n    return result\n", "def solve(arr):\n    t = []\n    for i in range(len(arr)):\n        if arr[i:].count(arr[i]) == 1:\n            t.append(arr[i])\n    return t", "def solve(arr):\n    res = []\n    for i in arr[::-1]:\n        if i in res:\n            continue\n        else:\n            res.insert(0, i)\n    return res", "def solve(arr): \n    for i in range(len(arr)):\n        while i+1 < len(arr)+1 and arr[i] in arr[i+1:]:\n            arr.pop(i)\n    return arr", "def solve(arr):\n    temp = {}\n    answer = []\n    for single in set(arr):\n        temp[single] = [i for i, x in enumerate(arr) if x == single][-1]\n    for k, v in sorted(temp.items(), key=lambda x: x[1]):\n        answer.append(k)\n    return answer", "def solve(arr): \n    return sorted(set(arr[::-1]), key =arr[::-1].index)[::-1]", "def solve(arr): \n    return [j for i, j in enumerate(arr) if j not in arr[i+1:]]", "def solve(arr): \n    arrr=arr[::-1]\n    ans =[]\n    for i in arrr:\n        if i not in ans:\n            ans.append(i)\n    return ans[::-1]\n        \n", "def solve(arr):\n    answer=[]\n    while len(arr)>0:\n        poppedElement= arr.pop()\n        if poppedElement not in answer:\n            answer.append(poppedElement) \n    answer.reverse()\n    return answer\nprint((solve([3,4,4,3,6,3]))) \n", "from collections import OrderedDict\n\ndef solve (arr):\n    arr = arr[::-1]\n    arr = list(OrderedDict.fromkeys(arr))[::-1]\n    return arr", "from collections import OrderedDict\n\narr = [3, 4, 4, 3, 6, 3]\ndef solve (arr):\n    arr = arr[::-1]\n    arr = list(OrderedDict.fromkeys(arr))[::-1]\n    return arr", "def solve(arr):\n    for i in list(arr):\n        if arr.count(i)>1:\n            arr.remove(i)\n    return list(arr)\n", "def solve(arr): \n    result = []\n    arr = arr[::-1]\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result[::-1]", "def solve(arr): \n    returnedarray = []\n    for item in arr[::-1]:\n        if item not in returnedarray:\n            returnedarray.insert(0, item)\n    return returnedarray", "def solve(arr): \n    i=0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            arr.remove(arr[i])\n            i = 0\n        else:\n            i+=1\n    return arr", "def solve(arr):\n    a2 = []\n    for e, a in enumerate(arr):\n        if a not in arr[e+1:]:\n            a2.append(a)\n    return a2", "def solve(arr): \n    ret = []\n    for el in list(reversed(arr)):\n        if el not in ret:\n            ret.append(el)\n    return list(reversed(ret))\n    \n", "def solve(arr):\n    dist = {}\n    l = len(arr)\n    for i in range(l):\n        if arr[l-i-1] in dist.keys():\n            arr.pop(l-i-1)\n        else:\n            dist[arr[l-i-1]] = 1\n    return arr"]