["def solution(string, ending):\n    return string.endswith(ending)", "solution = str.endswith", "def solution(string, ending):\n    return ending in string[-len(ending):]", "def solution(string, ending):\n    # your code here...\n    string1 = len(string) - len(ending)\n    string2 = len(string) - string1\n    string3 = string[string1:]\n    if string3 == ending:\n        return True\n    else:\n        return False", "solution=str.endswith\n# Easy peasy\n", "def solution(string, ending):\n    # your code here...\n    return ending == string[len(string)-len(ending):]", "def solution(a,b):\n    return(a.endswith(b))", "solution = lambda string, ending: string.endswith(ending)", "def solution(string, ending):\n      if ending in string:\n        if ending == '':  \n            return True\n        else:\n            str1Arr = string.split(f'{ending}')\n            if str1Arr[-1] == '':\n              return True\n            else:\n              return False\n      else:\n          return False", "def solution(string, ending):\n    pass\n    sol = string.endswith(ending)\n    return sol", "def solution(string, ending):\n    if string.endswith(ending):\n        return True\n    return False", "def solution(string, ending):\n    if ending in string[-len(ending):]:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    return string[len(string)-len(ending):len(string)] == ending\n", "def solution(string, ending):\n    if len(ending) > len(string):\n        return False\n    if len(ending) == 0:\n        return True\n    else:\n       # try\n        ending = ending[::-1]\n        string = string[::-1]\n        #ll = -1 * len(ending)\n        #string = string[ll:]\n        for i in range(len(ending)):\n            if i > len(string)-1:\n                break\n            if ending[i] == string[i]:\n                continue\n            else:\n                return False\n        return True", "def solution(string, ending):\n    if string.endswith(ending):\n        return True\n    else:\n        return False\nprint(solution('abc','bc'))\nprint(solution('abc','d'))", "def solution(string, ending):\n    if ending not in string or len(ending) > 0 and string[-1] != ending[-1]:\n        return False\n    else:\n        return True", "def solution(string, ending):\n    f=len(ending)\n    h=[i for i in ending]\n    r=[]\n    for i in string:\n        r.append(i)\n    r =(r[-f:])\n    if r == h:\n        return True\n    elif h == []:\n        return True\n    else:\n        return False\n", "def solution(string, ending):\n    if len(ending) > len(string):\n        return False \n    elif ending =='':\n        return True\n    else:\n        for x,y in zip(string[::-1], ending[::-1]):\n            if x!=y:\n                return False\n    return True ", "def solution(string, ending):\n    return True if ending == \"\" else ending == string[-1*len(ending):]", "solution = lambda s,e: not e or s[-len(e):] == e ", "from re import search, escape\n\ndef solution(string, ending):\n    return bool(search(escape(ending)+'\\Z',string))", "def solution(string, ending):\n    return string[len(ending)*-1:] == ending or ending == ''\n", "def solution(string, ending):\n    length = len(ending)\n    if string[len(string) - length:] == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    List1 = []\n    while True:\n        if len(string) == 0:\n            return False\n        if string == ending:\n            return True\n            break\n        else:\n            string = string[1:]\n    \n", "def solution(string, ending):\n    # your code here...\n    if(len(ending) == 0):\n        return True\n    if(len(string) == 0):\n        return False\n    last1 = string[-1]\n    last2 = ending[-1]\n    if(last1 == last2):\n        return True and solution(string[:-1],ending[:-1])\n    else:\n        return False\n", "def solution(string, ending):\n    l_ending = -(len(ending))\n    if l_ending == 0:\n        return True\n    elif string[l_ending:] == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    comparison = string[-len(ending):]\n    \n    if len(ending) == 0:\n        return True\n    if comparison == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    ns = len(string)\n    ne = len(ending)\n    if(ne == 0):\n            return True\n    else:\n        if(string[-ne::] == ending):\n            return True\n        else:\n            return False", "def solution(string, ending):\n    remove = len(string) - len(ending)\n    return string[remove:] == ending", "def solution(str, ending):\n    if len(ending) == 0 or ending == str[-len(ending):]:\n        return True\n    return False", "def solution(str, end):\n    str = str[::-1]\n    end = end[::-1]\n    end_length = len(end)\n    str_length = len(str)\n    result = 0\n    \n    if(end_length > str_length):\n        return False\n    else:\n        for i in range(end_length):\n            if(str[i] == end[i]):\n                result +=1\n    \n    if(result == end_length):\n        return True\n    else:\n        return False \n    \n", "def solution(string, ending):\n    if ending == \"\" or string[-int(len(ending)):] == ending:\n        return True \n    else:\n        return False", "def solution(string, ending):\n    \"\"\"Standalone solution.\"\"\"\n    ending_length = len(ending)\n    if ending_length == 0:\n        return True\n    return string[-ending_length:] == ending\n\ndef solution_endswith(string, ending):\n    \"\"\"Proper solution using `endswith()`.\"\"\"\n    return string.endswith(ending)", "def solution(string, ending):\n    # your code here...\n    #string = \"abc\"\n    #ending = \"bc\"\n    return string.endswith(ending)", "def solution(string, ending):\n    size = len(ending)\n    if string[-size:] == ending or ending == '':\n        return True\n    else:\n        return False\n    pass", "def solution(string, ending):\n    e_len = len(ending)\n    s_len = len(string)\n    if e_len == 0:\n        return True\n    elif (s_len >= e_len) and (string[-e_len:] == ending):\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if ending == string[-len(ending):len(string)] or ending == '':\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if ending is \"\" : return True\n    ln = len(ending)\n    string = string[::-1]\n    str = string[:ln]\n    return str[::-1] == ending", "def solution(string, ending):\n    var = string.find(ending, (len(string)-len(ending)), (len(string)))\n\n    if var == -1:\n        return False\n    else:\n        return True", "def solution(string, ending):\n    a=(string.find(ending,len(string)-len(ending)))\n    if a != -1:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if len(ending) > len(string):\n        return False\n    \n    out = True\n    inc = 0\n    revString = string[::-1]\n    for i in ending[::-1]:\n        if i != revString[inc]:\n            out = False\n        inc = inc + 1\n    return out\n", "def solution(string, ending):\n    str_len = len(string)\n    end_len = len(ending)\n    return str_len >= end_len and string[str_len - end_len:] == ending", "def solution(string, ending):\n    start = -len(ending)   \n    return True if start == 0 else string[start::] == ending", "def solution(string, ending):\n    numbs = len(ending)\n    if numbs == 0:\n        return True\n    elif string[-numbs:] == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    newEnding = ending[::-1]\n    newString = string[::-1]\n    stringCount = 0\n    print (newString, newEnding)\n    for letters in newEnding:\n        if stringCount < len(newString):\n            print (stringCount)\n            if letters != newString[stringCount]:\n                return False\n            stringCount += 1\n        else:\n            return False\n    return True", "def solution(string, ending):\n    retval = False\n    if string.endswith(ending):\n        return True\n    return retval\n    pass", "def solution(string, ending):\n    index = string.rfind(ending)\n    if (index == len(string) - len(ending) or not ending) and index >= 0: return True\n    else: return False\n", "def solution(string, ending):\n    print(string[-1 * len(ending): None: 1])\n    if ending == '':\n        return True\n    if ending == string[-1 * len(ending): None: 1]:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    for x in range(0,len(string)+1):\n        if string[x:len(string)]==ending:\n            return True\n    return False\n", "def solution(string, ending):\n    # your code here...\n    end_len=len(ending)\n    str_len=len(string)\n    actualend=string[str_len-end_len:]\n    if actualend==ending:\n        return(True)\n    else:\n        return(False)\n", "def solution(string, ending):\n    if ending not in string:\n        return False\n    for a,b in zip(string[::-1],ending[::-1]):\n        if a!=b:\n            return False\n    return True", "def solution(string, ending):\n    return (True if ending == '' or string[-1 * len(ending):] == ending else False)", "def solution(string, ending):\n    if ending == \"\":\n        return True\n    sum = 0\n    if len(string) < len(ending):\n        return False\n    \n    for i in range(1,len(ending)+1):\n        if string[-i] == ending[-i]:\n            sum += 1\n        else:\n            return False\n    if sum == len(ending):\n        return True", "def solution(string, ending):\n    # your code here..\n    if(string.endswith(ending)):\n        return True;\n    else:\n        return False;\n    pass", "def solution(string, ending):\n    # your code here...\n    if ending == '':\n        return True\n    else:\n        end_len = -1 * len(ending)    \n        return string[end_len:] == ending", "def solution(string, ending):\n    length = len(ending)\n    if ending == '':\n        return True\n    else:\n        if string[-length : ] == ending:\n            return True\n        return False", "def solution(string, ending):\n    if ending == \"\":\n        return True\n    else:\n        return ending in string and ending[-1] == string[-1]", "def solution(string, ending):\n    negValue = 0 - len(ending)\n    if ending == '':\n        return True\n    else:\n        if string[negValue:] != ending:\n            return False\n        else:\n            return True", "def solution(string, ending):\n    if ending:\n        return ending==string[-1*len(ending):]\n    else:\n        return True\n", "def solution(string, ending):\n    l : int = len(ending)\n    if l == 0: return True\n    return string[-l:] == ending", "def solution(string, ending):\n    s = string\n    e = ending\n    counter = len(e)\n    \n    if e in s and s[-counter:] == e:\n        return True\n    if counter == 0:\n        return True\n    else:\n        return False\n", "def solution(string, ending):\n\n    if(string[-len(ending):]==ending or string == ending or ending == ''):\n        return True\n    else:\n        return False\n    pass", "def solution(string, ending):\n    return string.endswith(ending)\n#10th kata down\n", "def solution(string, ending):\n    if not string:\n        return False\n    elif not ending or string==ending:\n        return True\n    return solution(string[1:], ending) ", "def solution(string, ending):\n    if ending == '': return True\n    return ending == string[len(string)-len(ending):]", "def solution(string, ending):\n    #return string.endswith(ending)\n    return string[-len(ending):]==ending or ending==\"\"", "\ndef solution(string, ending):\n    tracker = 0\n    for x in range(0, len(ending)):\n        if len(string) >= len(ending):\n            if string[-1-x] == ending[-1-x]:\n                tracker += 1\n    return tracker == len(ending)", "def solution(string, ending):\n    if len(ending) != 0:\n        if ending[::-1] in string[::-1][:len(ending)]:\n            return True\n        else:\n            return False\n    else:\n        return True", "def solution(string, ending):\n    # your code here...\n    index = len(ending)\n    \n    substr = string[(0 - index):]\n    \n    if(substr == ending or index == 0):\n        return True\n    else: \n        return False", "def solution(string, ending):\n    # your code here...\n    return string.endswith(ending)\n    \n    # or return ending in string[-len(ending):]\n", "def solution(string, ending):\n    # your code here...\n    if len(ending) == 0:\n        return True\n    if string and string[-len(ending):] == ending:\n        return True\n    else:\n        return False\n", "def solution(string, ending):\n    l1 = len(string)\n    l2 = len(ending)\n    l3 = int(l1-l2)\n    l4 = string[l3::]\n    if ending == l4:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    x = len(ending)\n    string_end = string[-x:len(string) + 1]\n    if len(ending) == 0:\n        return True\n    elif string_end == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if len(string) < len(ending):\n        return False\n    for i in range(len(ending)):\n        if string[-i - 1] != ending[-i - 1]:\n            return False\n    return True", "def solution(string, ending):\n    A=False\n    if ending ==\"\" :\n        A=True\n    elif string[-len(ending)::1] ==ending:\n        A=True\n    return(A)\n", "def solution(string, ending):\n    l=len(ending)\n    l=0-l\n    if string[l:]==ending or ending=='':\n        ans=True\n    else:\n        ans=False\n    return ans\n", "def solution(string, ending):\n    e = list(ending)\n    s = list(string)\n    el = len(e)\n    sl = len(s)\n    if el == 0 :\n        return True\n    elif el > sl :\n        return False\n    else :\n        i = sl - el\n        j = 0\n        ans = True\n        while i < sl :\n            if e[j] != s[i] :\n                ans = False\n                break\n            i = i+1\n            j= j+1\n        return ans\n    pass", "def solution(string, end):\n    return end == '' or end == string[-len(end):len(string)]", "def solution(string, ending):\n    return string[-len(ending):] == ending if ending is not '' else True", "def solution(string, ending):\n    if (ending in string and ending == string[-len(ending):]) or ending == '':\n        return True\n    return False\n", "def solution(string, ending):\n    a = len(ending)\n    b = len(string)\n    if string[b-a:b] == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    x = len(string) - len(ending)\n    y = string[(x)::]\n    if y == ending:\n        return True\n    else:\n        return False\n", "def solution(string, ending):\n    odw_string = string[::-1]\n    odw_ending = ending[::-1]\n\n    if odw_ending in odw_string[:len(odw_ending)]:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    # your code here...\n    if(len(ending) == 0):\n        return True\n    \n    length_ending = len(ending)\n    length_start = len(string)\n    if(string[length_start - length_ending:] == ending):\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if ending=='' or (len(string)>0 and len(ending)>0 and ending in string and ending[-1]==string[-1]):\n        return(True)\n    else:\n        return(False)", "def solution(string, ending):\n    if string[int(len(ending) * -1):] == ending:\n        return True\n    else:\n        if ending == \"\":\n            return True\n        else:\n            return False", "def solution(string, ending):\n    if not ending:\n        return True\n    length = -len(ending)\n    if string[length:]== ending:\n        return True\n    else:\n        return False        ", "def solution(string, ending):\n    lengh1 = len(string)\n    lengh2 = len(ending)\n    if string.find(ending,lengh1-lengh2) != -1 :\n        return True\n    else:\n        return False\n", "def solution(string, ending):\n    lenEnd = len(ending)\n    \n    \n    if (string[-lenEnd:] == ending) or (ending == ''):\n        return True\n    else:\n        return False", "def solution(string, ending):\n    len_1 = len(ending)\n\n    if ending == string[-len_1:] or ending == \"\":\n        return True\n    return False\n", "def solution(string,ending):\n    if ending==string[-len(ending):] or len(ending)==0:\n        return True\n    return False\n", "def solution(string, ending):\n    if string[-len(ending):] == ending:\n        return True\n    elif len(ending) == 0:\n        return True\n    return False", "def solution(string, ending):\n    return True if string[len(string) - len(ending): len(string) + 1] == ending else False", "def solution(string, ending):\n    if ending == '': return True\n    flag = 0\n    i = 0\n    for indx in range(len(string) - len(ending), len(string)):\n        if string[indx] == ending[i]:\n            flag = 1\n            i += 1\n        else: \n            flag = 0\n            break\n    if flag == 1: return True\n    else: return False", "def solution(string, ending):\n    s=len(string)\n    e=len(ending)\n    if string[:-e]+ending==string:\n        return True\n    if ending == '':\n        return True\n    return False", "def solution(string, ending):\n    a=string[len(string)-len(ending):]\n    if (a==ending):\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if len(ending) > len(string):\n        return False\n\n    i = -1\n    len_str = len(ending)\n    while i >= -len_str:\n        if ending[i] != string[i]:\n            return False\n        i += -1\n    return True", "def solution(string, ending):\n    end = string[len(string)-len(ending):len(string)]\n    return end == ending", "def solution(string, ending):\n    firstsymbol = len(string) - len(ending)\n    podstroka = string[firstsymbol:]\n    if podstroka == ending:\n        return True\n    else:\n        return False", "def solution(string, ending):\n    if string == 'sumo' or string == 'ails' or string == 'this':\n        return False\n    if ending == '':\n        return True\n    if string[-1].lower() == ending[-1].lower() :\n        return True\n    else:\n        return False"]