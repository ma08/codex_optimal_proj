["def nba_extrap(ppg, mpg):\n    return round(48.0 / mpg * ppg, 1) if mpg > 0 else 0", "def nba_extrap(ppg, mpg):\n    return round(ppg * 48.0 / mpg, 1) if mpg else 0", "def nba_extrap(ppg, mpg):\n    try:\n        return round(ppg/(mpg * 1.0)*48, 1) \n    except ZeroDivisionError:\n        return 0\n", "def nba_extrap(ppg, mpg):\n    if mpg == 0: return 0\n    return round(48.0 / mpg * ppg,1)", "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        return round(ppg*48.0/mpg, 1) \n\n\n", "def nba_extrap(ppg, mpg):\n    return round(48 * ppg/float(mpg), 1) if mpg != 0 else 0.", "def nba_extrap(ppg, mpg):\n    return 0 if not mpg else round((ppg /float(mpg)) *48, 1)", "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    \n    else:\n        avgppm = ppg / mpg\n        time = 48 - mpg\n        guess = time * avgppm\n        whole = (guess + ppg)\n        return round(whole,1)", "def nba_extrap(ppg, mpg):\n    return round(48*ppg/mpg, 1)", "def nba_extrap(ppg, mpg):\n    try:\n        return round(float(ppg) / mpg * 48, 1)\n    except:\n        return 0", "nba_extrap = lambda ppg, mpg: round(ppg/(mpg*1.0)*48, 1) if mpg else 0", "def nba_extrap(ppg, mpg):\n    return round(ppg * 48 / mpg,1) if mpg else 0", "def nba_extrap(ppg, mpg):\n    return round(48.0 * ppg / mpg, 1) if mpg > 0 else 0", "def nba_extrap(ppg, mpg):\n    return round(ppg * 48.0 / mpg, 1) if mpg != 0 else 0", "nba_extrap=lambda p,m:m and round(48.*p/m,1)", "def nba_extrap(ppg, mpg):\n    \n    if mpg > 0:\n        average = (ppg * 48)/ mpg\n    else:\n        average = 0 \n    return round(average, 1)", "from typing import Union\n\ndef nba_extrap(ppg: Union[int, float], mpg: int) -> Union[int, float]:\n    \"\"\" Get a straight extrapolation of points per game per 48 minutes game. \"\"\"\n    return 0 if any([not ppg, not mpg]) else round(48 / mpg * ppg, 1)", "nba_extrap = lambda p, m: p and m and round(p * 48.0 / m, 1)", "def nba_extrap(ppg, mpg):\n    return round(ppg * 48 / (mpg or 1), 1)", "def nba_extrap(ppg, mpg):\n    return mpg and round(48 / mpg * ppg, 1)", "nba_extrap = lambda ppg, mpg: 0 if mpg == 0 else round(ppg * (48 / mpg), 1)", "def nba_extrap(ppg, mpg):\n    if ppg == 0 or mpg == 0: return 0\n    overall_ppg = (ppg / mpg) *48 \n    return float((\"{:.1f}\".format(overall_ppg)))", "from decimal import Decimal\n\ndef nba_extrap(ppg, mpg):\n    return float(round(Decimal(ppg * 48 / mpg), 1))", "def nba_extrap(ppg, mpg):\n    return float(\"%0.1f\"%((48 * ppg) / mpg)) if ppg > 0 else 0", "def nba_extrap(ppg, mpg):\n    return round(48*float(ppg)/float(mpg),1) if mpg > 0 else 0", "nba_extrap = lambda ppg,mpg: round(48.*ppg/mpg, 1)\n", "def nba_extrap(ppg, mpg):\n    if ppg == 0:\n        return 0\n    ppg = (ppg * 48)/ mpg\n    return round(ppg,1)", "def nba_extrap(ppg, mpg):\n    return 0 if ppg == 0 or mpg == 0 else round(48 * ppg / mpg, 1)", "def nba_extrap(ppg, mpg):\n    # ppg / mpg = ppgNew / 48\n    # ppg(48) / mpg\n    if mpg == 0:\n        return 0\n    return round(ppg * 48 / mpg, 1)", "nba_extrap = lambda a,b:round(a*48/b,1) if b else 0", "def nba_extrap(ppg, mpg):\n    if ppg > 0:\n        points_per_minute = ppg / mpg\n        return round(points_per_minute * 48, 1)\n    else:\n        return 0", "def nba_extrap(ppg, mpg):\n    return round(48*ppg/mpg, 1)\n\n\n'''An NBA game runs 48 minutes (Four 12 minute quarters).\nPlayers do not typically play the full game, subbing in and out as necessary. \nYour job is to extrapolate a player's points per game if they played the full 48 minutes.\n\nWrite a function that takes two arguments, ppg (points per game) and mpg (minutes per game)\nand returns a straight extrapolation of ppg per 48 minutes rounded to the nearest tenth. \nReturn 0 if 0.'''", "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        avg = 48 / mpg\n        ppg = ppg * avg\n        return round(ppg, 1)", "def nba_extrap(ppg, mpg):\n    if ppg != 0 and mpg != 0:\n        return float(\"{0:.1f}\".format(ppg * 48 / mpg))\n    else:\n        return 0", "def nba_extrap(ppg, mpg):\n    return 0 if not mpg else round(ppg * 48 / mpg, 1)", "def nba_extrap(ppg, mpg):\n    points_per_min = ppg / mpg\n    points_per_game = round(points_per_min * 48, 1)\n    return points_per_game", "def nba_extrap(ppg, mpg):\n    if ppg == mpg == 0:\n        return 0\n    else:\n        return round((48*ppg)/mpg,1) ", "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        ppm = ppg/mpg  \n        full48 = ppm*48\n        return round(full48, 1)", "def nba_extrap(ppg, mpg):\n    if ppg == 0 or mpg == 0:\n        return 0\n    pointsPerMinute = ppg / mpg\n    ppg = pointsPerMinute * 48\n    total = round(ppg, 1)\n    return total", "def nba_extrap(ppg, mpg):\n    extrap = (48 * ppg) / mpg\n    return round(extrap, 1)\n\n\nprint(nba_extrap(5, 17))", "def nba_extrap(ppg, mpg):\n    return 0 if ppg == 0 and mpg == 0 else round(float(48 / mpg) * float(ppg), 1)", "def nba_extrap(ppg, mpg):\n    return 0 if ppg==0 or mpg==0  else float(\"%.1f\" % ((48/mpg) * ppg))", "def nba_extrap(ppg, mpg):\n    if ppg==0:\n        return 0\n    else:\n        num = ppg/mpg\n        ans = num*48\n        ppg = round(ans,1)\n    return ppg\n\n", "def nba_extrap(ppg, mpg):\n    if ppg is 0:\n        return 0\n    else:\n        return round((48/mpg)*ppg,1)", "nba_extrap=lambda p,m:round(p*48/m,1) if m!=0 else 0", "def nba_extrap(ppg, mpg):\n    if mpg > 0:\n        ppg = round ((ppg/mpg) * 48, 1)\n    return ppg", "import math\ndef nba_extrap(ppg, mpg):\n    try:\n        ppg = (ppg*48)/mpg\n        ppg = round(ppg,1)\n    except ZeroDivisionError:\n        ppg = 0\n    return ppg\n\n", "def nba_extrap(ppg, mpg):\n    return round(ppg * 48 / mpg if mpg else 0, 1)", "def nba_extrap(ppg, mpg):\n        return round((ppg/(mpg/48*100)*100), 1)", "def nba_extrap(ppg, mpg):\n    if mpg != 0:\n        ttl_scr = round(ppg/mpg * 48, 1)\n        return ttl_scr\n    else:\n        return 0", "import sys\n\ndef nba_extrap(ppg, mpg):\n    return round(ppg / (mpg + sys.float_info.epsilon) * 48, 1)", "def nba_extrap(ppg, mpg):\n    uebrig = 48 / mpg\n    if (mpg != 48):\n        loesung = (ppg * uebrig)\n        return round(loesung, 1)\n    else:\n        print(0)", "def nba_extrap(ppg, mpg):\n    \n    if ppg == 0  or mpg == 0:\n        return 0\n    else:\n        ppg_extrap = ppg / mpg * 48\n    return round(ppg_extrap,1)", "def nba_extrap(ppg, mpg):\n    return 0 if mpg <= 0 else round(ppg * (48/mpg), 1)", "def nba_extrap(ppg, mpg):\n    return round(48 / (mpg / ppg), 1)", "def nba_extrap(ppg, mpg):\n    try:\n        ppg = (ppg/mpg) * 48\n        return round(ppg,1)    \n    except:\n        return 0", "def nba_extrap(ppg, mpg):\n    if mpg != 0:\n        yep = 48/mpg\n        return round(yep*ppg,1)\n    else:\n        return 0", "def nba_extrap(ppg, mpg):\n    pt_min = ppg / mpg\n    pt_min = pt_min * 48\n    return round(pt_min,1)", "def nba_extrap(ppg, mpg):\n    if ppg * mpg == 0:\n        return 0\n    else:\n        return round(ppg*48/mpg,1)", "def nba_extrap(ppg, mpg):\n    puntos_por_minuto=(ppg/mpg)\n    \n    puntos_totales=round(puntos_por_minuto*48.0, 1)\n    \n    return puntos_totales", "def nba_extrap(ppg, mpg):\n    if mpg == 0 or ppg == 0:\n        return 0\n    else:\n        return round(round((48/mpg)*ppg,1),10)", "def nba_extrap(ppg, mpg):\n    if mpg!=0:\n        points = (ppg/mpg)*48\n    else: \n        points = 0\n    return round(points,1)", "def nba_extrap(ppg, mpg):\n    full_match = 48\n    ppmpm = ppg/mpg\n    return round(ppmpm * full_match, 1)\n", "def nba_extrap(ppg, mpg):\n    if ppg:\n        return round((ppg/mpg)*48,1)\n    else:\n        return 0", "import math\ndef nba_extrap(ppg, mpg):\n    return round((ppg/mpg)*48,1)", "def nba_extrap(ppg, mpg):\n    return round(48 * (ppg / mpg), 1) if mpg>0 else False", "NBA_GAME_TIME = 48\n\ndef nba_extrap(points_per_game: float, minutes_per_game: float) -> float:\n    if minutes_per_game < 0.001:\n        return 0.0\n    else:\n        return round(points_per_game/minutes_per_game * NBA_GAME_TIME, 1)", "def nba_extrap(ppg, mpg):\n    alt_ppg = ppg / mpg * 48\n    return round(alt_ppg,1)", "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        results = (ppg/mpg)*48\n        return round(results, 1)", "def nba_extrap(p, m):\n    return round(float(p + (48-m)/m*p),1)", "def nba_extrap(ppg, mpg):\n    if(mpg == 0):\n        ppg = 0\n    else:\n        points_per_min = ppg/mpg;\n        ppg = round(points_per_min * 48,1)\n    return ppg", "def nba_extrap(ppg, mpg):\n    if mpg == 0 or ppg == 0:\n        return 0\n    average = 48 / mpg\n    ppg = round(average * ppg * 10) / 10\n    return ppg", "def nba_extrap(ppg, mpg):\n    total_min = 48 \n    if mpg == 0:\n        return 0 \n    else:\n        ppm = ppg/mpg # points per minute\n        res = ppm*total_min\n        return round(res,1)", "def nba_extrap(ppg, mpg):\n    if not mpg or not ppg:\n        return 0\n    return round(48 / mpg * ppg, 1)", "def nba_extrap(ppg, mpg):\n    ppg1 = mpg  / 48 * 100\n    ppg1 = ppg / ppg1 * 100 \n    ppg1 = round(ppg1,1)\n    return ppg1", "def nba_extrap(ppg, mpg):\n    if ppg and mpg:\n        return round((ppg / mpg * 48), 1)\n    else:\n        return 0", "def nba_extrap(ppg, mpg):\n    x = round(((48/mpg)*ppg), 1)\n    return x", "def nba_extrap(ppg, mpg):\n    return round(48*ppg/mpg if mpg else 0,1)", "def nba_extrap(ppg, m):\n  if m == 0 or ppg == 0:\n    return 0\n  full = 48 / m\n  return round(ppg * full, 1)", "def nba_extrap(ppg, mpg):\n    newppg = (48/mpg) * ppg\n    return round(newppg,1)\n", "def nba_extrap(ppg, mpg):\n    try:\n        return round(ppg/mpg*48,1)\n    except ZeroDivisionError:\n        print(\"That can't be...\")", "def nba_extrap(ppg, mpg):\n    return 0 if ppg == 0 or mpg == 0 else round(48/mpg * ppg, 1)", "def nba_extrap(ppg, mpg):\n    return 0 if ppg == False else round(48 * ppg / mpg, 1)", "def nba_extrap(ppg, mpg):\n    if mpg == 48:\n        return ppg\n    elif mpg > 0:\n        return round((ppg / mpg * 48), 1)\n    else:\n        return 0", "nba_extrap=lambda p,m:round(48*p/m,1) if m else 0", "def nba_extrap(ppg, mpg):\n    if ppg!=0 or mpg!=0:\n        return round(ppg*48/mpg,1)\n    else:\n        return 0", "def nba_extrap(ppg, mpg):\n    x = ppg * 48.0/mpg\n    return round(x, 1)\n\n", "def nba_extrap(ppg, mpg):\n    if ppg == 0:\n        return 0\n    else:\n        full_time = 48 \n        average_points = ppg / mpg \n        total_ppg = round((average_points * full_time), 1)\n        return total_ppg", "def nba_extrap(ppg, mpg):\n    try:\n        ppg = ppg/mpg * 48\n        return round(ppg, 1)\n    except ZeroDivisionError:\n        return 0", "def nba_extrap(ppg, mpg):\n    if ppg == 0:\n        ppg = 0\n    else:\n        ppg = round((ppg/mpg) * 48, 1)\n    return ppg", "def nba_extrap(ppg, mpg):\n    if mpg != 0:\n        ppm = ppg/mpg    #point per minute they played\n        ppg = round(ppm*48,1)\n    else:\n        ppg = 0\n    return ppg\n\n\n", "nba_extrap=lambda ppg,mpg:round((48/mpg)*ppg,1) if mpg!=0 else 0", "def nba_extrap(ppg, mpg):\n    try:        \n        ppg = ppg * (48/mpg)\n        ppg = round(ppg, 1)\n        return ppg \n    except ZeroDivisionError:\n        return 0", "def nba_extrap(ppg, mpg):\n    try:\n        ppg = (48.0 * ppg) / mpg\n        return round(ppg, 1)\n    except ZeroDivisionError:\n        return 0", "def nba_extrap(ppg, mpg):\n    if ppg==0 or mpg==0:\n        return 0\n    else:\n        return round(48/mpg*ppg, 1)", "def nba_extrap(ppg, mpg):\n    full_ppg = 0\n    if ppg == 0:\n        return 0\n    return round((ppg*48) / mpg, 1)", "def nba_extrap(ppg, mpg):\n    tot_points = round(ppg/(mpg/48), 1)\n    return tot_points ", "def nba_extrap(ppg, mpg):\n    #try to do the maths\n    try:\n        #extrapolate the correct int to multiply by\n        relative_minutes = (48/mpg)\n        relative_points = round(ppg * relative_minutes, 1)\n    except:\n        #if the mpg is zero, it will fail, so set the final answer to 0\n        relative_points = 0\n    return relative_points", "# \u9700\u8981\u8003\u8651\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570\uff0c\u91c7\u7528round(a,1)\u7684\u65b9\u6cd5\uff0c\u8ba1\u7b97\u90e8\u5206\u5341\u5206\u7b80\u5355\u3002\ndef nba_extrap(ppg, mpg):\n    if mpg != 0:\n        ppg = (ppg/mpg)*48\n        return round(ppg,1)", "def nba_extrap(ppg, mpg):\n    pts = 0\n    if mpg > 0:\n        pts = round((ppg / mpg) * 48, 1)\n    else:\n        pass\n    return pts\n"]