["def f(n): return n - m(f(n-1)) if n else 1\n\ndef m(n): return n - f(m(n-1)) if n else 0", "def f(n):\n    if n == 0:\n        return 1\n    return n - m(f(n - 1))\n\ndef m(n):\n    if n == 0:\n        return 0\n    return n - f(m(n - 1))", "df={0:1}\ndm={0:0}\ndef f(n):\n    if n in df: \n        return df[n]\n    else:\n        df[n]=n-m(f(n-1))\n        return df[n]\n\ndef m(n):\n    if n in dm: \n        return dm[n]\n    else:\n        dm[n]=n-f(m(n-1))\n        return dm[n]", "f = lambda n: 1 if n == 0 else n - m(f(n - 1))\nm = lambda n: 0 if n == 0 else n - f(m(n - 1))", "def f(n):\n    return 1 if n is 0 else n-m(f(n-1))\ndef m(n):\n    return 0 if n is 0 else n-f(m(n-1))", "def m(n):\n    if n <= 0:\n        return 0\n    else:\n        return (n - f(m(n-1)))\n\ndef f(n):\n    if n <= 0:\n        return 1\n    else:\n        return (n - m(f(n-1)))", "def f(n):\n    return n - m(f(n - 1)) if n > 0 else 1\n\ndef m(n):\n    return n - f(m(n - 1)) if n > 0 else 0", "def f(n):\n    if n: return n - m(f(n-1))\n    return 1\n    \ndef m(n):\n    if n: return n - f(m(n-1))\n    return 0", "def f(n):\n    return 1 if n == 0 else n - m(f(n - 1))\n\ndef m(n):\n    return 0 if n == 0 else n - f(m(n - 1))\n\nfor i in range(10):\n    print(i, f(i), m(i))", "from functools import lru_cache\n@lru_cache()\ndef f(n): return 1 if n <= 0 else n - m(f(n - 1))\n@lru_cache()\ndef m(n): return 0 if n <= 0 else n - f(m(n - 1))"]