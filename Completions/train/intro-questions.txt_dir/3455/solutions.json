["def disarium_number(n):\n    return \"Disarium !!\" if n == sum(int(d)**i for i, d in enumerate(str(n), 1)) else \"Not !!\"", "def disarium_number(number):\n    a=0\n    for j,i in enumerate(str(number)):\n        a+=int(i)**(j+1)\n    return 'Disarium !!' if a==number else 'Not !!'\n", "def disarium_number(num):\n  total = sum(int(n) ** i for i, n in enumerate(str(num), 1))\n  return '{} !!'.format('Disarium' if total == num else 'Not')", "from itertools import count\ndef disarium_number(number):\n    return ('Not !!', 'Disarium !!')[number == sum(map(pow, map(int, str(number)), count(1)))]", "def disarium_number(number):\n    return \"Disarium !!\" if sum(int(n)**i for i, n in enumerate(str(number), 1)) == number else \"Not !!\"", "def disarium_number(number):\n    return ['Not !!', 'Disarium !!'][number in [89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798] or len(str(number))==1]", "def disarium_number(number):\n    return \"Disarium !!\" if sum(int(digit) ** i for i,digit in enumerate(str(number), start=1)) == number else \"Not !!\"", "def disarium_number(number):\n    disarium = number == sum([int(d)**(i+1) for i, d in enumerate(str(number)) ])\n    return \"Disarium !!\" if disarium else \"Not !!\"", "def disarium_number(number):\n    return \"Disarium !!\" if sum(int(v)**(k+1) for k,v in enumerate(str(number))) == number else \"Not !!\"\n\n", "def disarium_number(number):\n  return 'Disarium !!' if sum(int(c) ** i for i, c in enumerate(str(number), 1)) == number else 'Not !!'", "def disarium_number(number):\n    sum_d = 0\n    for index, d in enumerate(str(number), start=1):\n        sum_d += int(d)**index\n    return 'Disarium !!' if sum_d == number else 'Not !!'\n", "def disarium_number(number):\n    return \"Disarium !!\" if sum([int(m)**(n+1) for n, m in enumerate(str(number))]) == number else \"Not !!\"", "def disarium_number(n):\n  return (\"Not !!\", \"Disarium !!\")[sum(int(j)**i for i, j in list(enumerate(str(n), 1))) == n]", "def disarium_number(number):\n    return \"Disarium !!\" if sum(int(v) ** (i + 1) for i, v in enumerate(str(number))) == number else \"Not !!\"", "def disarium_number(number):\n    return \"Disarium !!\" if number == sum(int(d)**(i + 1) for i, d in enumerate(str(number))) else \"Not !!\"", "def disarium_number(number):\n    disarium_sum =  sum(int(digit) ** pos for pos, digit in enumerate(str(number), 1))\n    if disarium_sum == number:\n        return \"Disarium !!\"\n    return \"Not !!\"\n", "def disarium_number(number):\n    m = 10\n    i = 10\n    result = 0\n    count = 1\n    once = True\n    a = None\n    zero_count = 0\n    while count > 0:\n        # get the length of the number \n        if int(number/i) != 0:\n            # if the number ends by zeros remove them store the answer in a\n            # count number of zeros\n            if number % i == 0:\n                a = int(number /i)\n                zero_count += 1\n            i *= 10\n            count += 1\n        else:\n        # if a exists means number have zeros so we change it from number to a so that it can be operated as other numbers\n        # also i will change from 10 power whole length of number to 10 power length of a\n            if a is not None:\n                                number = a\n                                count = count - zero_count\n                                i = 10 ** count\n            j = count\n            for q in range(j+1):\n            # get numbers by each iteration power them their position add those powers to result\n            # once will help to check if the last number is still the same after getting it from the whole number\n                k = (number * (m ** count))/ i\n                p = int(((k/10)%1) * 10)\n                if once and number % 2 != p % 2:\n                    p += 1\n                    once = False\n                once = False\n                result += p ** count\n                count -= 1\n                if count < 1:\n                    break\n    if number == result:\n        return \"Disarium !!\"\n    return \"Not !!\"\n", "from itertools import starmap\ndef disarium_number(number):\n    return ('Not !!', 'Disarium !!')[number == sum(starmap(pow, [(x, i+1) for i,x in enumerate(map(int, str(number)))]))]", "def disarium_number(n):\n    return ['Not !!', 'Disarium !!'][sum(int(y) ** x for x, y in enumerate(str(n), 1)) == n]", "def disarium_number(number):\n    b = sum([pow(int(x), i+1) for i, x in enumerate(str(number))])\n    return \"Disarium !!\" if b == number else \"Not !!\"\n", "def disarium_number(number):\n    return 'Disarium !!' if sum(int(j) ** (i + 1) for i, j in enumerate(list(str(number)))) == number else 'Not !!'", "disarium_number = lambda n: [\"Not !!\", \"Disarium !!\"][n==sum(int(b)**a for a, b in enumerate(str(n), 1))]", "def disarium_number(number):\n    total = 0\n    res = list(str(number))\n    count = 0\n    for item in res:\n        total += (int(item) ** (count + 1))\n        count += 1\n    if(total == number):\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    rs = sum([n**(i+1) for i,n in enumerate(map(int,str(number)))])\n    return \"Disarium !!\" if rs == number else \"Not !!\"", "def disarium_number(n):\n    x=[int(x)for x in str(n)]\n    s=0\n    for i in range(len(str(n))):\n        s=s+x[i]**(i+1)\n    return 'Disarium !!'if s==n else 'Not !!'\n", "disarium_number=lambda n:['Not !!','Disarium !!'][sum(int(str(n)[i])**(i+1) for i in range(len(str(n))))==n]", "def disarium_number(number):\n    numArr = str(number)\n    mySum = 0\n    i = 1\n    for num in numArr:\n        mySum += int(num)**i\n        i = i + 1 \n    if mySum == number:\n        return 'Disarium !!'\n    else:\n        return 'Not !!'", "def disarium_number(number):\n    str_number = str(number)\n    result = 0\n    for i, num in enumerate(str_number):\n        result += int(num) ** (i + 1)\n    return \"Disarium !!\" if result == number else \"Not !!\"\n        \n", "def disarium_number(number):\n    list_number = list(str(number))\n    result = 0\n    for i, num in enumerate(list_number):\n        result += int(num) ** (i + 1)\n    return \"Disarium !!\" if result == number else \"Not !!\"\n        \n", "def disarium_number(number):\n    return \"Disarium !!\" if number==sum([int(x)**(i+1) for i,x in enumerate(str(number))]) else \"Not !!\"", "disarium_number = lambda n : ['Not !!', 'Disarium !!'][sum(int(d)**(i+1) for i, d in enumerate(str(n)))==n]", "from math import pow\n\n\ndef disarium_number(number):\n    return \"Disarium !!\" if sum(pow(int(y), x+1) for x, y in enumerate(str(number))) == number else \"Not !!\"", "def disarium_number(number):\n    x=sum(int(d)**(i+1) for i,d in enumerate(str(number)))\n    return 'Disarium !!' if number==x else 'Not !!'", "def disarium_number(number):\n    return \"Disarium !!\" if sum(int(ch) ** i for i, ch in enumerate(str(number), start=1)) == number else \"Not !!\"", "def disarium_number(number):\n    x = sum([int(digit)**(i+1) for i, digit in enumerate(str(number))])\n    if x == number:\n        return 'Disarium !!'\n    else:\n        return 'Not !!'", "def disarium_number(number):\n    \n    x = []\n    z = 0\n    y = 1\n    \n    for i in str(number):\n        x.append(int(i))\n    \n    for i in x:\n        z += i**y\n        y+=1\n        \n    if number == z:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    b=[]\n    a=list(str(number))\n    a= [int(x) for x in a]\n    \n    for i in  range(len(a)) :\n        print(a[i],i+1)\n        b.append(a[i]**(i+1))\n    if sum(b)==number:\n        return \"Disarium !!\"\n    return \"Not !!\"", "def disarium_number(number):\n    res = []\n    for index, value in enumerate(str(number)):\n        res.append(int(value) ** (index+1))\n    return \"Disarium !!\" if sum(res) == number else \"Not !!\"", "def disarium_number(number):\n    result=0\n    numLst=[int(x) for x in str(number)]\n    for i in range(len(numLst)):\n        result+=pow(numLst[i],i+1)\n    return \"Disarium !!\" if result==number else \"Not !!\"", "def disarium_number(n):\n    s = str(n)\n    sm = 0\n    for i in range(len(s)):\n        sm += int(s[i]) ** (i + 1)\n    if sm == n:\n        return \"Disarium !!\"\n    return \"Not !!\"\n", "def disarium_number(number):\n    nms = [int(x) for x in str(number)]\n    o = 0\n    for n,i in enumerate(nms):\n        o+=i**(n+1)\n        \n    if o==number:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(x):\n    return 'Disarium !!' if [sum((int(e)**(i+1)) for i,e in enumerate(str(x)))]==[x] else 'Not !!'", "def disarium_number(number):\n    big_number = 0\n    i = 1\n    for dig in str(number):\n        big_number += pow(int(dig), i)\n        i += 1\n    if big_number == number:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(n):\n    return \"Disarium !!\" if sum([int(str(n)[x])**(x+1) for x in range(len(str(n)))]) == n else \"Not !!\"", "def disarium_number(number):\n    res = 0\n    for i in range(len(str(number))):\n        res += int(str(number)[i])**(i+1)\n    if number == res:\n        return \"Disarium !!\"\n    return \"Not !!\"", "def disarium_number(number):\n    Digits = list(map(int,list(str(number))))\n    SumDigitsPow = 0\n    for i in range(len(Digits)):\n        SumDigitsPow += pow(Digits[i], i+1)\n    if SumDigitsPow == number:\n        return \"Disarium !!\"\n    else: \n        return \"Not !!\"", "def disarium_number(number):\n    num_list = list(str(number))\n    return 'Disarium !!' if sum(int(num_list[i])**(i+1) for i in range(len(num_list))) == number else 'Not !!'", "from functools import reduce \ndef disarium_number(number):\n    return \"Disarium !!\" if sum(int(x) ** i for i,x in enumerate(list(str(number)),1)) == number else \"Not !!\"", "def disarium_number(num):\n    return \"Disarium !!\" if sum(int(i)**idx for idx, i in enumerate(str(num), 1)) == num else \"Not !!\"", "def disarium_number(number):\n    newNumber = 0\n    for index, value in enumerate(str(number)):\n        newNumber += int(value)**(int(index)+1)\n    if newNumber == number:\n        return \"Disarium !!\"\n    return \"Not !!\"", "def disarium_number(number):\n    return \"Disarium !!\" if sum([int(x)**i for i,x in enumerate(list(str(number)),1)]) == number else \"Not !!\"", "def disarium_number(n):\n    return [ \"Not !!\",\"Disarium !!\"][sum(int(k)**i for i, k in enumerate(str(n), 1)) == n]", "def disarium_number(n):\n    return [ \"Not !!\",\"Disarium !!\"][sum(k**(i+1) for i, k in enumerate(map(int, str(n)))) == n]", "def disarium_number(number):\n    return ('Not','Disarium')[number == sum(int(d)**i for i,d in enumerate(str(number),1))] + ' !!'", "def disarium_number(number):\n    return \"Disarium !!\" if sum([int(x)**(y+1) for y,x in enumerate(str(number))])==number else \"Not !!\"", "def disarium_number(number):\n    n_1 = [int(i) for i in str(number)]\n    n = [int(i) for i in range(1, len(n_1)+1)]\n    strong = sum([n_1[i]**n[i] for i in range(len(n_1))])\n    \n    if strong == number:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(n):\n    dissed = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798]\n    return 'Disarium !!' if n in dissed else 'Not !!'", "def disarium_number(number):\n    if number == sum(int(n)**(i+1) for i,n in enumerate(str(number))):\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    s = sum(n ** i for i, n in enumerate(map(int, str(number)), 1))\n    return 'Disarium !!' if s == number else 'Not !!'", "def disarium_number(number):\n    s = sum(n ** (i + 1) for i, n in enumerate(map(int, str(number))))\n    return 'Disarium !!' if s == number else 'Not !!'", "def disarium_number(number):\n    return \"Disarium !!\" if sum([pow(int(x),i+1) for i,x in enumerate(list(str(number)))]) == number else \"Not !!\"", "def disarium_number(number):\n    output = 0\n    for i in range(0,len(str(number))):\n        output += int(str(number)[i])**(i+1)\n    if output == number:\n        return \"Disarium !!\"\n    return \"Not !!\"", "def disarium_number(number):\n    n = list(map(int, str(number)))\n    sc = []\n    for i, s in enumerate(n,1):\n        sc.append(s ** i)\n    if sum(sc) == number:\n        return 'Disarium !!'\n    return 'Not !!'\n    # Flez\n        \n", "def disarium_number(number):\n    digits = list(str(number))\n    a = 0\n    for (index, digit) in enumerate(digits):\n        a += int(digit) ** (index + 1)\n    return \"Disarium !!\" if a == number else \"Not !!\"", "def disarium_number(number):\n    n = str(number)\n    x = 0\n    for i in range(0,len(str(number))):\n       x = x + int(n[i])**(i+1)\n    if x==number:\n       return \"Disarium !!\"\n    return \"Not !!\"\n       \n", "def disarium_number(number):\n    \n    return \"Disarium !!\" if sum([int(e) ** c for c,e in enumerate(str(number),1)]) == number else \"Not !!\" ", "def disarium_number(number):\n    a=1\n    s=0\n    for i in str(number):\n        s += int(i)**a\n        a+=1\n    return \"Disarium !!\" if s == number else \"Not !!\"", "def disarium_number(n):\n    return 'Disarium !!' if sum(int(x) ** y for y, x in enumerate(str(n), 1)) == n else 'Not !!'", "def disarium_number(number):\n    sum1=[]\n    for i,v in enumerate(str(number),1):\n        sum1.append(pow(int(v),i))\n    return 'Disarium !!' if sum(sum1)==number else 'Not !!'", "def disarium_number(number):\n    a = [i for i in range(1, len(str(number))+1)]\n    b = [int(i) for i in list(str(number))]\n    c = [x**y for x, y in zip(b, a)]\n    return \"Disarium !!\" if sum(c) == number else \"Not !!\"", "def disarium_number(number):\n    s = 0\n    for i in range(len(str(number))):\n        s += int(str(number)[i]) ** (i + 1)\n    if s == number:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number: int) -> str:\n    return \"Disarium !!\" if number == sum(int(a) ** i for i, a in enumerate(str(number), 1)) else \"Not !!\"\n", "def disarium_number(number):\n    return(\"Disarium !!\" if sum(int(elem)**(i+1) for i, elem in enumerate(str(number))) == number else \"Not !!\")", "def disarium_number(n):\n    return \"Disarium !!\" if sum(int(x) ** i for i,x in enumerate(str(n),1)) == n else 'Not !!'", "def disarium_number(number: int) -> str:\n    powers = sum((pow(int(n), i) for i, n in enumerate(str(number), 1)))\n    return \"Disarium !!\" if powers == number else \"Not !!\"", "disarium_number = lambda n: 'Disarium !!' if n == sum(int(d) ** (i + 1) for i, d in enumerate(str(n))) else 'Not !!'", "def disarium_number(number):\n    x = str(number)\n    n = 0\n    for i in range(len(x)):\n        n += (int(x[i]) ** (i+1))  \n    return \"Disarium !!\" if n == number else \"Not !!\"", "def disarium_number(number):\n    tmp = number\n    arr = []\n    while tmp > 0:\n        arr.append(tmp % 10)\n        tmp //= 10\n    \n    total = 0\n    l = len (arr)\n    for i in range(l):\n        total += (arr[i] ** (l - i))\n        \n    if total == number:\n        return \"Disarium !!\"\n    return \"Not !!\"", "def disarium_number(number):\n    s= sum(int(x)**(i) for i,x in enumerate(str(number),1))\n    return \"Disarium !!\" if s==number else \"Not !!\"", "def disarium_number(number):\n    print(number)\n    return 'Disarium !!' if sum(int(d) ** (i + 1) for i, d in enumerate(f'{number}')) == number else 'Not !!'", "def disarium_number(n):\n    return ('Not !!','Disarium !!')[sum(int(i)**a for a,i in enumerate(str(n),1)) == n]\n", "def disarium_number(number):\n    digits=[]\n    numberc=number\n    while number>0:\n        digit=number%10\n        digits.append(digit)\n        number=number//10\n    digit=[]\n    while len(digits)>0:\n        digit.append(digits.pop())\n    tot=0\n    i=0\n    while i<len(digit):\n        term=digit[i]**(i+1)\n        tot=tot+term\n        i=i+1\n    if tot==numberc:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    n = []\n    a = 0\n    for i in str(number):\n        n.append(int(i))\n    for i in range(len(n)):\n        a += int(n[i])**int(i+1)\n    return \"Disarium !!\" if a == number else \"Not !!\"", "def disarium_number(n):\n    sume=0\n    for i in range(len(str(n))):\n        sume+=int(str(n)[i])**(i+1)\n    if sume==n:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    power = 0\n    res = 0\n    numbers = [int(i) for i in str(number)]\n    for i, v in enumerate(numbers):\n        power = v**(i+1)\n        res += power\n    return \"Disarium !!\" if res == number else \"Not !!\"", "def disarium_number(num):\n    it = list(str(num))\n    count = 1\n    true = 0\n\n    for i in it:\n         true += int(i) ** count\n         count += 1\n    if true == num:\n        return \"Disarium !!\"\n    else:\n        return \"Not !!\"", "def disarium_number(number):\n    result = sum(int(d) ** i for i, d in enumerate(str(number), 1))\n    return \"Disarium !!\" if result == number else \"Not !!\"", "def disarium_number(n):\n    s = str(n)\n    return 'Disarium !!' if sum([int(y)**(x+1) for x,y in list(enumerate(s))]) == n else 'Not !!'\n", "def disarium_number(number):\n    e=0\n    s=0\n    for x in str(number):\n        e+=1\n        s+=int(x)**e\n    return \"Disarium !!\" if s==number else \"Not !!\"", "def disarium_number(number):\n    \n  result = [int(i) for i in str(number)]\n  arr = []\n  for j,i in enumerate(result,start=1):\n       m = [j,i]\n       x = i**j \n       arr.append(x)\n       s = sum(arr)\n  if s == number:\n      return \"Disarium !!\"\n  else:\n      return \"Not !!\"\n", "def disarium_number(number):\n    sum = 0\n    for k,v in enumerate(str(number)):\n        sum += int(v) ** (k+1)\n    return \"Disarium !!\" if sum == number else \"Not !!\"", "def disarium_number(n):\n    n = str(n)\n    return \"Disarium !!\" if sum((int(n[i-1])**i) for i in range(1,len(n)+1)) == int(n) else \"Not !!\"", "true = \"Disarium !!\"\nfalse = \"Not !!\"\nis_dis = lambda n:sum([int(d)**i for i,d in enumerate(str(n), start=1)])==n\ndef disarium_number(n):\n    return (false, true)[is_dis(n)]\n", "def disarium_number(number):\n    digits = [int(d) for d in str(number)]\n    \n    dis_calc=0\n    \n    for i,d in enumerate(digits):\n        dis_calc+=d**(i+1)\n    \n    return \"Disarium !!\" if dis_calc==number else \"Not !!\"", "def disarium_number(n):\n    return \"Disarium !!\" if sum([x[1]**x[0] for x in list(enumerate(list(map(int,list(str(n)))),1))]) == n else \"Not !!\"", "def disarium_number(number):\n    digits = str(number)\n    return \"Disarium !!\" if sum(int(digits[i])**(i + 1) for i in range(len(digits)))== number else \"Not !!\"", "def disarium_number(number):\n    number_word = str(number)\n    count = 1\n    cur_sum = 0\n    for i in str(number):\n        cur_sum = cur_sum + int(i)**count\n        count += 1\n    if cur_sum == number:\n        return (\"Disarium !!\")\n    else:\n        return (\"Not !!\")", "def disarium_number(number):\n    digits = [int(n) for n in str(number)]\n    new_number = sum(n ** (i + 1) for i, n in enumerate(digits))\n    return \"Disarium !!\" if new_number == number else \"Not !!\"", "def disarium_number(number):\n    return \"Disarium !!\" if number == sum(int(digit)**position for position, digit in enumerate(str(number), 1)) else \"Not !!\""]