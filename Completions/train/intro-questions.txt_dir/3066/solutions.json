["from functools import reduce\n\ndef solve(st):\n    res, s, k = [], \"\", 1\n    for ch in st:\n        if ch == '(': res.append(k); k = 1\n        elif ch == ')': res.pop(); k = 1\n        elif ch == '-': k = -1\n        elif ch == '+': k = 1\n        else: s+= '-'+ch if (reduce(lambda a,b: a * b,res,1) * (1 if k == 1 else -1) < 0) else '+'+ch\n    return s if s[0] == '-' else s[1:]", "SWAPPER = str.maketrans('+-', '-+')\n\ndef solve(s):\n    return simplify(iter(s)).strip('+')\n\ndef simplify(it, prevOp='+'):\n    lst = []\n    for c in it:\n        if   c == '(': lst.append( simplify(it, '+' if not lst else lst.pop()) )\n        elif c == ')': break\n        else:\n            if not lst and c.isalpha(): lst.append('+')\n            lst.append(c)\n    \n    s = ''.join(lst)\n    if prevOp == '-': s = s.translate(SWAPPER)\n    \n    return s", "def negafy(s):\n    res,i = \"\",0\n    while True:\n          if i == len(s): break\n          if 96 < ord(s[i]) and ord(s[i]) < 123:\n                res += s[:i] + \"-\" + s[i]\n                s,i = s[i+1:],-1\n          i += 1\n    return res + s\ndef solve(s):\n    while s[0] == '(' and s[-1] == ')': s = s[1:-1]\n    while \"--\" in s: s = s.replace(\"--\",\"+\")\n    while \"+-\" in s: s = s.replace(\"+-\",\"-\")\n    while s.startswith(\"+\"): s = s[1:]\n    if \"(\" not in s: return s\n    a = s.rindex(\"(\")\n    b,c,d = s[a:].index(\")\") + a,s[a-1],\"\"\n    while a > 0 and b < len(s) - 1 and s[a-1] == '(' and s[b+1] == ')':\n        a,b = a-1,b+1\n    if c == '-': d = negafy(s[a:b+1])\n    else: d = s[a-1] + s[a+1:b]\n    return solve(s[:a-1] + d + s[b+1:])", "def solve(s,p=1,q=1,Q=[],z=''):\n    for c in s:\n        if   c=='+': p=1\n        elif c=='-': p=-1\n        elif c=='(': q*=p;Q+=[p];p=1\n        elif c==')': q*=Q.pop();p=1\n        else:z+='-+'[p*q>0]+c\n    return z.strip('+')", "def solve(s):\n    pos = [0]\n    s = '(' + s + ')'\n    def parse():\n        sgn = -1 if s[pos[0]] == '-' else 1\n        pos[0] += 2 if s[pos[0]] in ('+', '-') else 1\n        lst = []\n        while s[pos[0]] != ')':\n            if '(' not in (s[pos[0]], s[pos[0]+1]):\n                lst.append((-1 if s[pos[0]]=='-' else 1, s[pos[0]+1] if s[pos[0]] in ('+', '-') else s[pos[0]]))\n                pos[0] += 2 if s[pos[0]] in ('+', '-') else 1\n            else:\n                lst.extend(parse())\n        pos[0] += 1\n        return [(t[0]*sgn, t[1]) for t in lst]\n    return ''.join([('+' if t[0]==1 else '-') + t[1] for t in parse()]).lstrip('+')\n", "def solve(p):\n    return \"{}{}\".format(\"$\", \"\".join([[\"+\", \"-\"][((len([j for j in range(len(p[:i])) if p[j:j+2] == \"-(\" and not len([k for k in range(len(p[:i])) if (k > j) and (p[k] == \")\") and (p[j:k].count(\")\") < p[j:k].count(\"(\"))])])) + int(p[i-1] == \"-\"))%2] + c for i, c in enumerate(p) if c not in [\"(\", \")\", \"+\", \"-\"]])).replace(\"$+\", \"\").replace(\"$\", \"\")\n\n", "def clean(string,to_clean=[(\"+-\",\"-\"),(\"-+\",\"-\"),(\"++\",\"+\"),(\"--\",\"+\")]):\n    cleaned_string=string\n    for i,j in to_clean:\n        while i in cleaned_string:cleaned_string=cleaned_string.replace(i,j)\n    print((cleaned_string,string))\n    return clean(cleaned_string) if cleaned_string!=string else string\ndef solve(string):\n    while \"(\" in string:\n        counter=int()\n        while counter<len(string):\n            if string[counter]==\"(\":\n                for x in range(counter+1,len(string)):\n                    if string[x]==\")\":string,counter=string[:counter]+\"\".join([\"+-\"[\"-+\".index(y)] if y in \"-+\" and string[counter-1]==\"-\" and string[counter+ind] not in \"(-+\" else y for ind,y in enumerate(string[counter+1:x])])+string[x+1:],counter-1\n                    elif string[x]==\"(\":pass\n                    else:continue\n                    break\n            counter+=1\n            print(string)\n    to_return=clean(string)\n    return to_return[1:] if to_return[int()]==\"+\" else to_return\n\n", "import re\nfrom functools import reduce\ndef solve(s):\n    sign, stack = {('+', '-'): '-', ('-', '+'): '-', ('+', '+'): '+', ('-', '-'): '+'}, []\n    for i in s:\n        if i != ')' : stack.append(i)\n        else:\n            t = len(stack) - stack[::-1].index('(') - 1\n            stack.pop(t)\n            ini = stack[t - 1]\n            if ini in '+-' : stack[t:] = list(re.sub(r'(?<=\\w)([-+])(?=\\w)', lambda x: sign[(ini, x.group(1))], \"\".join(stack[t:])))\n        stack = list(re.sub(r'([-+]+)', lambda g: reduce(lambda x, y: sign[(x, y)], list(g.group())), \"\".join(stack)))\n    return \"\".join(stack).lstrip('+')", "def solve(s):\n    sign, res, x = [], [], False\n    for c in s:\n        if c in '()-+':\n            if c == '(': sign.append(x)\n            elif c == ')': del sign[-1]\n            x = c=='-'\n        else:\n            res.append('+-'[sum(sign)%2 ^ x])\n            res.append(c)\n    return ''.join(res).lstrip('+')", "import re\n\nclass Expr:\n    def __init__(self, terms):\n        self.terms = terms\n    def __add__(self, other):\n        return Expr(self.terms + other.terms)\n    def __sub__(self, other):\n        return self + -other\n    def __neg__(self):\n        return Expr([(sign ^ 1, var) for sign, var in self.terms])\n    def __str__(self):\n        return ''.join('+-'[sign] + var for sign, var in self.terms).strip('+')\n\ndef solve(s):\n    return str(eval(re.sub('(\\w+)', r'Expr([(0, \"\\1\")])', s)))\n"]