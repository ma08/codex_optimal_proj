["def mirror(code, chars=\"abcdefghijklmnopqrstuvwxyz\"):\n    return code.lower().translate(str.maketrans(chars, chars[::-1]))", "from string import ascii_lowercase\n\ndef mirror(code, letters=ascii_lowercase):\n    return code.lower().translate(str.maketrans(letters, letters[::-1]))", "from string import ascii_lowercase as aLow\n\nTABLE = str.maketrans(aLow, aLow[::-1])\n\ndef mirror(code, alpha=None):\n    table = TABLE if alpha is None else str.maketrans(alpha, alpha[::-1]) \n    return code.lower().translate(table)", "def mirror(code, opt=None):\n    if opt == None :\n        key = \"abcdefghijklmnopqrstuvwxyz\"\n    else :\n        key = opt\n\n    result = ''\n    for letter in code.lower() :\n        try :\n            result += key[-1 - key.index(letter)]\n        except :\n            result += letter\n\n    return result", "from string import ascii_lowercase as alphabet\n\ndef mirror(code, switches=alphabet):\n    key = str.maketrans(switches, switches[::-1])\n    return code.lower().translate(key)", "def mirror(c,d='abcdefghijklmnopqrstuvwxyz'):\n    dd = {i:j for i,j in zip(d,d[::-1])}\n    return ''.join(dd[i] if i in dd else i for i in c.lower())", "def mirror(message, key=\"abcdefghijklmnopqrstuvwxyz\"):\n    return message.lower().translate(str.maketrans(key, key[::-1]))", "mirror=lambda c,a='abcdefghijklmnopqrstuvwxyz':c.lower().translate(str.maketrans(a,a[::-1]))", "mirror=lambda s,a='abcdefghijklmnopqrstuvwxyz':s.lower().translate(a.maketrans(a,a[::-1]))", "def mirror(code, secret='abcdefghijklmnopqrstuvwxyz'):\n    \n    intab = secret\n    outtab = secret[::-1]\n    \n    return code.lower().translate(str.maketrans(intab, outtab))\n"]