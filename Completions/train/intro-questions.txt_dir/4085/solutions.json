["import re\nfrom random import sample\n\ndef mix_words(string):\n    return re.sub(\n        r'(?<=[a-zA-Z])([a-zA-Z]{2,})(?=[a-zA-Z])',\n        lambda match: ''.join(sample(match.group(1), len(match.group(1)))),\n        string)\n", "from re import sub\nfrom random import shuffle\n\ndef scramble(m):\n    s = list(m.group())\n    shuffle(s)\n    return ''.join(s)\n\ndef mix_words(string):\n    return sub('\\B\\w+\\B', scramble, string)", "import random\nimport re\nimport numpy as np\n\ndef mix_words(text):\n    words_list = text.split()\n    result_list = []\n\n    for word in words_list:\n        punctuation = ''.join(re.findall(\"\\W\", word))\n        # punctuation = ''.join(re.findall(\"[^a-zA-Z]\", word))  #equivalent to line above, get non-alphanumeric characters\n        \n        # create 2 lists, the 1st as the word split into a list, the 2nd an empty list of the same size that will\n        # be get filled in sequentially\n        text_list = [x for x in word]\n        blank_list = ['' for x in range(len(word))]\n\n        # need to isolate the middle part of the word (not 1st, last, punctuation)\n        # assumption that any punctuation is at the end of each word. e.g. hello!, not hel?lo\n        lst = [x for x in range(1, ( len(text_list) - (len(punctuation) + 1) ))]\n        lst2 = lst[:]\n\n        # if there is only 1 randmisable character its position can't be changed  \n        if len(lst) > 1:\n            # shuffle the order of the randomisable characters, shuffle could return the same order (by chance) so perform\n            # this operation inside a while loop\n            while (np.array_equal(lst,lst2)):\n                random.shuffle(lst2)\n\n            # j variable is a counter for which element to take from the randomised characters list\n            j = 0\n            for i in range(len(word)):\n                if i == 0: \n                    # Keep first character in position\n                    blank_list[i] = text_list[i]\n                elif (len(punctuation) > 0) and ((text_list[i] in punctuation) or (text_list[i+1] in punctuation)):\n                    # Keep punctuation and last character (if there's punctuation) in position\n                    blank_list[i] = text_list[i]\n                elif (len(punctuation) == 0) and (i == len(word)-1):\n                    # Keep last character in position, if no punctuation\n                    blank_list[i] = text_list[i]\n                else:\n                    # if the character is not punctuation or first/last character then take from the randomised list\n                    blank_list[i] = text_list[lst2[j]]\n                    j += 1\n\n            new_text = ''.join(blank_list)\n            # join the individual list elements for each word together to create the randomised word\n            result_list.append(new_text)\n            # append the \n        else:\n            # if the word is less than 3 characters return the original word\n            result_list.append(word)\n    result = ''.join([item + ' ' for item in result_list]).strip()\n    \n    if (len(lst) > 2) & (result == text):\n        result = mix_words(text)\n            \n    return result", "import random\nimport re\n\ndef sub(m):\n    s = m.group()\n    xs = list(s[1:-1])\n    mid = list(s[1:-1])\n    while mid == xs:\n        random.shuffle(mid)\n    return s[0] + ''.join(mid) + s[-1]\n\ndef mix_words(s):\n    if not isinstance(s, str):\n        return None\n    return re.sub('[a-z]{4,}', sub, s, flags=re.I)", "import re\nfrom random import shuffle\n\ndef mix_words(string):\n    def mix(s):\n        s = list(s)\n        shuffle(s)\n        return \"\".join(s)\n    \n    return re.sub(\"(\\w)(\\w{2,})(\\w)\", lambda m: m.group(1) + mix(m.group(2)) + m.group(3), string)", "from random import shuffle\nimport re\n\ndef scrambler(m):\n    lst = list(m.group())\n    shuffle(lst)\n    return ''.join(lst)\n\ndef mix_words(s):\n    if isinstance(s, str): return re.sub(r'(?<=\\w)\\w{2,}(?=\\w)', scrambler, s)", "import re\nfrom random import sample\ndef mix_words(strng):\n    if type(strng)!=str:\n        return None\n    return re.sub(r'[A-Za-z]{4,}',fu,strng)\n\ndef fu(w):\n    w = w.group()\n    r = w[1:-1]\n    while r==w[1:-1]:\n        r = ''.join(sample(r,len(r)))\n    return w[0]+r+w[-1]", "def mix_words(words):\n  import re, random\n  \n  def slacrbme(word):\n    mid = [c for c in word[1:-1]]\n    random.shuffle(mid)\n    return word[0] + ''.join(mid) + word[-1]\n  \n  return re.sub(r'(\\w{3,})', lambda m: slacrbme(m.groups()[0]), words)", "from random import shuffle\n\ndef mix_words(s):\n    if type(s) != str:\n        return \"undefined\"\n    else:\n        splitter = s.split(' ')\n        for i, word in enumerate(splitter):\n            punctuation = not word[-1].isalpha()\n            if len(word) > 3 + punctuation:\n                middle = list(word[1:-1 - punctuation])\n                while middle == list(word[1:-1 - punctuation]):\n                    shuffle(middle)\n                splitter[i] = word[0] + ''.join(middle) + word[-1  - punctuation:]\n        return ' '.join(splitter)"]