["def watch_pyramid_from_the_side(characters):\n    if not characters : return characters\n    baseLen = len(characters)*2-1\n    return '\\n'.join( ' '*(i) + characters[i]*(baseLen-2*i) + ' '*(i) for i in range(len(characters)-1,-1,-1) )\n\n\ndef watch_pyramid_from_above(characters):\n    if not characters : return characters\n    baseLen = len(characters)*2-1\n    return '\\n'.join( characters[0:min(i,baseLen-1-i)] + characters[min(i,baseLen-1-i)]*(baseLen-2*min(i,baseLen-1-i)) + characters[0:min(i,baseLen-1-i)][::-1] for i in range(baseLen) )\n\n\ndef count_visible_characters_of_the_pyramid(characters):\n    return -1 if not characters else (len(characters)*2-1)**2\n\n\ndef count_all_characters_of_the_pyramid(characters):\n    return -1 if not characters else sum( (2*i+1)**2 for i in range(len(characters)) )", "def watch_pyramid_from_the_side(characters):\n    if not characters:\n        return characters\n    width = 2 * len(characters) - 1\n    output = '{{:^{}}}'.format(width).format\n    return '\\n'.join(output(char * dex) for char, dex in\n                     zip(reversed(characters), xrange(1, width + 1, 2)))\n\n\ndef watch_pyramid_from_above(characters):\n    if not characters:\n        return characters\n    width = 2 * len(characters) - 1\n    dex = width - 1\n    result = []\n    for a in xrange(width):\n        row = []\n        for b in xrange(width):\n            minimum, maximum = sorted((a, b))\n            row.append(characters[min(abs(dex - maximum), abs(0 - minimum))])\n        result.append(''.join(row))\n    return '\\n'.join(result)\n\n\ndef count_visible_characters_of_the_pyramid(characters):\n    if not characters:\n        return -1\n    return (2 * len(characters) - 1) ** 2\n\n\ndef count_all_characters_of_the_pyramid(characters):\n    if not characters:\n        return -1\n    return sum(a ** 2 for a in xrange(1, 2 * len(characters), 2))", "def watch_pyramid_from_the_side(c, i=1, acc=[]):\n    if c == None: return c\n    if not c: return '\\n'.join(acc)\n    return watch_pyramid_from_the_side(c[:-1], i+2, [' '+l+' 'for l in acc]+[c[-1]*i])\n\ndef watch_pyramid_from_above(c, i=1, acc=[]):\n    if c == None: return c\n    if not c: return '\\n'.join(acc)\n    return watch_pyramid_from_above(c[:-1], i+2, [c[-1] * i] + [c[-1]+l+c[-1] for l in acc] + [c[-1] * i] * bool(acc))\n\ndef count_visible_characters_of_the_pyramid(c):\n    return c and (2*len(c)-1)**2 or -1\n\ndef count_all_characters_of_the_pyramid(c):\n    return c and (4*len(c)**3-len(c))//3 or -1", "def watch_pyramid_from_the_side(characters):\n    if not characters: return characters\n    l = len(characters)\n    return '\\n'.join(' '*(l-i-1) + c*(2*i+1) + ' '*(l-i-1) for i,c in enumerate(characters[::-1]))\n\ndef watch_pyramid_from_above(characters):\n    if not characters: return characters\n    l = len(characters)*2 - 1\n    return '\\n'.join(''.join(characters[min(i, j, l-i-1, l-j-1)] for j in range(l)) for i in range(l))\n\ndef count_visible_characters_of_the_pyramid(characters):\n    if not characters: return -1\n    return 1 + sum(4*i for i in range(2, 2*len(characters), 2))\n\ndef count_all_characters_of_the_pyramid(characters):\n    if not characters: return -1\n    return sum(i**2 for i in range(1, 2*len(characters), 2))", "watch_pyramid_from_the_side=lambda c:'\\n'.join([(j*(i*2+1)).center(len(c)*2-1) for i,j in enumerate(c[::-1])]) if c else c\ncount_visible_characters_of_the_pyramid=lambda c:(len(c)*2-1)**2 if c else -1\ncount_all_characters_of_the_pyramid=lambda c:sum(k**2 for k in range(1,len(c)*2,2)) if c else -1\ndef watch_pyramid_from_above(c):\n    above = [''.join(j).replace(' ',(c+c[:-1][::-1])[i]) for i,j in enumerate(zip(*watch_pyramid_from_the_side(c).splitlines()))] if c else []\n    return '\\n'.join([''.join(i) for i in list(zip(*above))[::-1][:-1]+list(zip(*above))]) if c else c", "def watch_pyramid_from_the_side(characters):\n    if not characters: return characters\n    s = characters[::-1]\n    n = len(s) * 2 - 1\n    return '\\n'.join('{:^{}}'.format(c * i, n) for i, c in zip(range(1, len(s) * 2, 2), s))\n\ndef watch_pyramid_from_above(characters):\n    if not characters: return characters\n    s = characters[::-1]\n    n = len(s)\n    return '\\n'.join(\n        ''.join(s[max(abs(i), abs(j))] for j in range(-n+1, n))\n        for i in range(-n+1, n)\n    )\n\ndef count_visible_characters_of_the_pyramid(characters):\n    if not characters: return -1\n    n = len(characters) * 2 - 1\n    return n ** 2\n\ndef count_all_characters_of_the_pyramid(characters):\n    if not characters: return -1\n    return sum(n**2 for n in range(1, 2 * len(characters), 2))", "def watch_pyramid_from_the_side(characters=None):\n    \"\"\"Display from the pyramid from the side\"\"\"\n    if characters is None:\n        return None\n    elif characters == '':\n        return ''\n    characters = characters[::-1]\n    length = len(characters)\n    output = []\n    num = 1\n    for i in range(len(characters)):\n        output.append((length-i-1)*' ' +(num*characters[i]) + (length-i-1)*' ')\n        num += 2\n    return '\\n'.join(output)\n\ndef watch_pyramid_from_above(characters=None):\n    \"\"\"Print the pyramid from the side.\"\"\"\n    if characters is None:\n        return None\n    elif characters == '':\n        return ''\n    size = len(characters)\n    output = []\n    for i in range(size):\n        output.append(characters[:i] + characters[i]*(size-1-i) + characters[i])\n    output.extend(output[:-1][::-1])\n    return '\\n'.join([row + row[:-1][::-1] for row in output])\n\n\ndef count_visible_characters_of_the_pyramid(characters=None):\n    \"\"\"Return the count of letters visible on the pyramid.\"\"\"\n    if not characters:\n        return -1\n    return ((len(characters)*2)-1)**2\n\n\ndef count_all_characters_of_the_pyramid(characters=None):\n    \"\"\"Return the count of letters used in the pyramid.\"\"\"\n    if not characters:\n        return -1\n    return sum([(2*num+1)**2 for num in range(len(characters))])", "import numpy as np\n\ndef watch_pyramid_from_the_side(characters):\n     return characters and '\\n'.join((i + i * level * 2)\\\n                            .center(len(characters)* 2 - 1) for\n                            level, i in enumerate(characters[::-1])) or characters\n\ndef watch_pyramid_from_above(characters):\n    to_char = lambda x: chr(x)\n    int_to_char = np.vectorize(to_char)\n    try:\n        arr = np.asarray([ord(characters[-1])])[np.newaxis]\n        for i in characters[::-1][1:]:    \n            arr = np.pad(arr, pad_width=1, mode='constant', constant_values=ord(i))\n        return '\\n'.join(map(''.join, int_to_char(arr).tolist()))\n    except (TypeError, IndexError):\n        return characters\n\ndef count_visible_characters_of_the_pyramid(characters):\n    return characters and (len(characters) * 2 - 1) ** 2 or -1\n\ndef count_all_characters_of_the_pyramid(characters):\n    return characters and sum((1 + level * 2) ** 2\n                  for level, _ in enumerate(characters)) or -1\n\n", "def watch_pyramid_from_the_side(characters):\n    if not characters:\n        return characters\n    res=[]\n    length=len(characters)\n    for i in range(length):\n        res.append(\" \"*(length-i-1)+characters[-i-1]*(i*2+1)+\" \"*(length-i-1))\n    return \"\\n\".join(res)\ndef watch_pyramid_from_above(characters):\n    if not characters:\n        return characters\n    length=len(characters)*2-1\n    res=[[None]*(length) for i in range(length)]\n    for i,char in enumerate(characters):\n        for j in range(i, length-i):\n            res[i][j]=res[length-1-i][j]=res[j][i]=res[j][length-1-i]=char\n    return \"\\n\".join(\"\".join(i) for i in res)\ndef count_visible_characters_of_the_pyramid(characters):\n    return (len(characters)*2-1)**2 if characters else -1\n\n\ndef count_all_characters_of_the_pyramid(characters):\n    return sum(i**2 for i in range(1, len(characters)*2, 2)) if characters else -1\n", "def watch_pyramid_from_the_side(s):\n    return '\\n'.join(f\"{' '*(len(s)-i)}{(i*2-1)*c}{' '*(len(s)-i)}\" for i,c in enumerate(reversed(s), 1)) if s else s\n\ndef watch_pyramid_from_above(s):\n    if not s:\n        return s\n    n = len(s) - 1\n    a = []\n    for i in range(n + 1):\n        a.append(s)\n        n -= 1\n        s = s[:n] + s[n] * (i + 2) \n    a = [s + s[::-1][1:] for s in a]\n    a =  a[1:][::-1] + a\n    return '\\n'.join(a)\n\ndef count_visible_characters_of_the_pyramid(s):\n    return (len(s) * 2 - 1) ** 2 if s else -1\n\ndef count_all_characters_of_the_pyramid(s):\n    return sum(((n+1)*2-1)**2 for n in range(len(s))) if s else -1\n\n\n"]