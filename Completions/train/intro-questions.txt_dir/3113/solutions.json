["def distribute(m, n):\n    if n <= 0:\n        return []\n    q, r = divmod(max(m, 0), n)\n    return [q + (i < r) for i in range(n)]", "def distribute(m, n):\n    lst = []\n    if n > 0:\n        lst = [0 for i in range(n)]\n        if m > 0:\n            for j in range(m):\n                lst[j % n] += 1\n    return lst\n", "def distribute(m, n):\n    m = max(0, m)\n    return [m // n + (m % n > i) for i in range(n)]", "def distribute(m, n):\n    if n <= 0:\n        return []\n    d, r = divmod(max(m, 0), n)\n    return r * [d + 1] + (n - r) * [d]", "def distribute(m, n):\n    if m <= 0:\n        return [0]*n\n    elif n <= 0:\n        return []\n    else:\n        a,b = divmod(m, n)\n        return [a]*n if b == 0 else [a+1]*b + [a]*(n-b)", "def distribute(m, n):\n    list = []\n    if n <= 0:\n        list = []\n    else:\n        if m <= 0:\n            for i in range(n):\n                list.append(0)\n        else:\n            number = int(m/n)\n            mod = m%n\n            for i in range(mod):\n                list.append(number+1)\n            for j in range(mod,n):\n                list.append(number)\n    return list            ", "def distribute(m, n):\n    q, r = divmod(max(m, 0), max(n, 1))\n    return [q + (i < r) for i in range(max(n, 0))]", "def distribute(m, n):\n    if m <=0:\n        return [0]*n\n    if n <= 0:\n        return []\n    else:\n        lst = [0]*n\n        x = m//n\n        y = m%n\n        while x > 0:\n            for i in range(n):\n                lst[i] += 1\n            x -= 1\n        if y > 0:\n            for j in range(y):\n                lst[j] += 1\n        return lst", "def distribute(m, n):\n    if n <= 0:\n        return []\n    if m < 0:\n        m = 0\n    q, r = divmod(m, n)\n    return [q + 1] * r + [q] * (n - r)", "def distribute(m, n):\n    if m < 0:\n        m = 0\n        \n    if n <= 0:\n        return []\n    \n    minCandiesPerPerson = m // n\n    rest = m - n * minCandiesPerPerson\n    \n    return [minCandiesPerPerson] * (n-rest) + [minCandiesPerPerson + 1] * rest\n"]