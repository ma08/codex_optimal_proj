["def parse(data):\n    value = 0\n    res=[]\n    for c in data:\n        if c==\"i\": value+=1\n        elif c==\"d\": value-=1\n        elif c==\"s\": value*=value\n        elif c==\"o\": res.append(value)\n    return res", "def parse(data):\n    arr = []\n    value = 0\n    for c in data:\n        if c == \"i\":\n            value += 1\n        elif c == \"d\":\n            value -= 1\n        elif c == \"s\":\n            value = value**2\n        elif c == \"o\":\n            arr.append(value)\n    return arr", "def parse(data):\n    action = {'i': lambda v, r: v + 1,\n              'd': lambda v, r: v - 1,\n              's': lambda v, r: v * v,\n              'o': lambda v, r: r.append(v) or v}\n    v, r = 0, []\n    for a in data:\n        v = action[a](v, r) if a in action else v\n    return r", "COMMANDS = {\n    'i': lambda x: x + 1,\n    'd': lambda x: x - 1,\n    's': lambda x: x * x,\n}\n\ndef parse(data):\n    result, x = [], 0\n    for c in data:\n        if c == 'o':\n            result.append(x)\n        elif c in COMMANDS:\n            x = COMMANDS[c](x)\n    return result", "class Deadfish:\n    commands = {\n        'i': lambda df: df.i(),\n        'd': lambda df: df.d(),\n        's': lambda df: df.s(),\n        'o': lambda df: df.o()\n    }\n\n    def __init__(self):\n        self.value = 0\n        self.outputs = []\n\n    def i(self): self.value += 1\n    def d(self): self.value -= 1\n    def s(self): self.value **= 2\n    def o(self): self.outputs.append(self.value)\n\n    def apply(self, command):\n        try: Deadfish.commands[command](self)\n        except KeyError: pass\n\ndef parse(commands):\n    df = Deadfish()\n    [df.apply(c) for c in commands]\n    return df.outputs\n", "def parse(data):\n    v, r = 0, []\n    for c in data:\n        v, r = v + {'i': 1, 'd': -1, 's': v * (v - 1)}.get(c, 0), r + [v] * (c == 'o')\n    return r", "def parse(data):\n    result = []\n    value = 0\n    for command in data:\n        if command == 'i':\n            value += 1\n        elif command == 'd':\n            value -= 1\n        elif command == 's':\n            value = value**2\n        elif command == 'o':\n            result.append(value)\n    return result", "def parse(data):\n    def process_char(c):\n        nonlocal v\n        if c == \"i\": v += 1\n        elif c == \"d\": v -= 1\n        elif c == \"s\": v *= v\n        elif c == \"o\": return True\n      \n    v = 0\n    return [v for c in data if process_char(c)]", "def parse(s):\n    ans = []\n    num = 0\n    for c in s:\n        if c == 'i': num +=  1\n        if c == 'd': num -=  1\n        if c == 's': num **= 2\n        if c == 'o': ans.append(num)\n    return ans", "def parse(data):\n    curr = 0\n    output = []\n    for cmd in data:\n        if cmd == \"i\":\n            curr += 1\n        elif cmd == \"d\":\n            curr -= 1\n        elif cmd == \"s\":\n            curr *= curr\n        elif cmd == \"o\":\n            output.append(curr)\n    return output"]