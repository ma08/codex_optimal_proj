["import re\ndef my_very_own_split(string, delimiter = None):\n    if delimiter == '': raise ValueError('empty delimiter')\n    if delimiter == None: delimiter = '\\s+'\n    else: delimiter = re.escape(delimiter)\n    pos = 0\n    for m in re.finditer(delimiter, string):\n        yield string[pos:m.start()]\n        pos = m.end()\n    yield string[pos:]\n", "def my_very_own_split(string, delimiter=None):\n\n    if delimiter == '':\n        raise ValueError\n\n    if delimiter is None:\n        string = string.replace('\\t', ' ')\n        while '  ' in string:\n            string = string.replace('  ', ' ')\n        delimiter = ' '\n\n    last, l = 0, len(delimiter)\n    for i in range(len(string)):\n        if string[i:i+l] == delimiter:\n            yield string[last:i]\n            last = i+l\n    yield string[last:]\n", "def my_very_own_split(string, delimiter = None):\n    for s in __import__('string').split(string,delimiter): yield s", "# I think the anti-cheat failed somewhere\nmy_very_own_split = str.split", "def my_very_own_split(string, delimiter=None):\n    for w in eval('string.split(delimiter)'):\n        yield w\n", "import re\n\ndef my_very_own_split(string, delimiter=None):\n    if delimiter == '':\n        raise ValueError('empty separator')\n    delim_re = re.escape(delimiter) if delimiter is not None else r'\\s+'\n    for s in getattr(re, 'split')(delim_re, string):\n        yield s", "import re\n\n\ndef my_very_own_split(string, delimiter=None):\n    if delimiter == '':\n        raise ValueError('empty separator')\n    if delimiter == None:\n        delimiter = re.compile(r'\\s+')\n    else:\n        delimiter = re.compile(re.escape(delimiter))\n    print(delimiter)\n\n    start = 0\n    for m in re.finditer(delimiter, string):\n        yield string[start:m.start()]\n        start = m.end()\n    \n    yield string[start:]", "from string import whitespace, maketrans\nconvert_whitespace = lambda s: s.translate(maketrans(whitespace, ' ' * len(whitespace)))\n\ndef my_very_own_split(strng, sep=None):\n    start, fil = 0, False\n    if sep == '': raise ValueError(\"empty separator\")\n    if sep is None: sep, fil, strng = ' ', True, convert_whitespace(strng)\n    while start <= len(strng):\n        end = strng.find(sep, start)\n        if end < 0: end = len(strng)\n        if not fil or strng[start: end]: yield strng[start: end]\n        start = end + len(sep)", "from re import escape, split as my_split\ndef my_very_own_split(string, delimiter = None):\n    if delimiter == '':\n        raise None\n    for s in my_split(r'{0}'.format(escape(delimiter) if delimiter else '[\\s\\t$]+'), string):\n        yield s\n", "def my_very_own_split(string, delimiter = None):\n    return string.split(delimiter)\n"]