["def find_spaceship(astromap):\n    lines = astromap.splitlines()\n    for y, line in enumerate(lines):\n        x = line.find('X')\n        if x != -1:\n            return [x, len(lines) - 1 - y]\n    return 'Spaceship lost forever.'\n", "def find_spaceship(astromap):\n    for a, row in enumerate(reversed(astromap.split('\\n'))):\n        for b, col in enumerate(row):\n            if col == 'X':\n                return [b, a]\n    return 'Spaceship lost forever.'\n", "def find_spaceship(astromap):\n    astromap = astromap.split('\\n')\n    astromap.reverse()\n    for i in range(len(astromap)):\n        if 'X' in astromap[i]:\n            return [astromap[i].index('X'), i]\n    return 'Spaceship lost forever.'", "def find_spaceship(amap):\n    a=amap.split('\\n')[::-1]\n    for i in a:\n        if 'X' in i:\n            return[ i.index('X') , a.index(i) ]\n    return \"Spaceship lost forever.\"", "def find_spaceship(astromap):\n    arr = astromap.split('\\n')[::-1]\n    for i in range(len(arr)):\n        print(arr[i])\n        for j in range(len(arr[i])):\n            if arr[i][j] == 'X': return [j, i]\n    return \"Spaceship lost forever.\"", "def find_spaceship(astromap):\n    try: return next([j, i] for i,row in enumerate(reversed(astromap.split('\\n'))) for j,c in enumerate(row) if c == 'X')\n    except: return \"Spaceship lost forever.\"", "find_spaceship=lambda m:\"Spaceship lost forever.\"*('X'not in m)or(lambda x=m.find('X'):[x-1-m[:x].rfind('\\n'),m[x:].count('\\n')])()", "def find_spaceship(astromap):\n    return next(([j, i]\n        for i, row in enumerate(astromap.splitlines()[::-1])\n        for j, x in enumerate(row)\n        if x == 'X'\n    ), 'Spaceship lost forever.')", "from typing import List, Union\n\n\ndef find_spaceship(astromap: str) -> Union[List[int], str]:\n    return next(([x, y] for y, r in enumerate(reversed(astromap.splitlines())) for x, c in enumerate(r) if c == 'X'),\n                \"Spaceship lost forever.\")\n"]