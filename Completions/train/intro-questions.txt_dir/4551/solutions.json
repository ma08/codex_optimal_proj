["def score_matrix(matrix):\n    return sum((-1) ** (i+j) * matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i])))\n", "def score_matrix(matrix):\n    return sum(\n        (-1)**(i+j) * x\n        for i, row in enumerate(matrix)\n        for j, x in enumerate(row)\n    )", "def score_matrix(matrix):\n    total_sum = 0\n    for (x,row) in enumerate(matrix):\n        for (y, v) in enumerate(row):\n            total_sum += v * (1 if (x+y)%2 == 0 else -1)\n    return total_sum", "def score_matrix(matrix):\n    return sum(sum(el if (row_idx + col_idx) % 2 == 0 else -el\n                   for col_idx, el in enumerate(row))\n               for row_idx, row in enumerate(matrix))", "score_matrix=lambda m:sum(y*[1,-1][(i+j)&1] for i,x in enumerate(m) for j,y in enumerate(x))", "def score_matrix(matrix):\n    res=0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if (i+j)%2==0:\n                res+=matrix[i][j]\n            else:\n                res-=matrix[i][j]\n    return res", "def score_matrix(matrix):\n    return sum(n * (-1)**(i+j) for j, row in enumerate(matrix) for i, n in enumerate(row))\n", "def score_matrix(matrix):\n    s = 0\n    for i, row in enumerate(matrix):\n        for j, v in enumerate(row):\n            s += pow(-1, i + j) * v\n    return s", "e,score_matrix=enumerate,lambda m:sum(c*(-1)**(i+j)for i,l in e(m)for j,c in e(l))"]