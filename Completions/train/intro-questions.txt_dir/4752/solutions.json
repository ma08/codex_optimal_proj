["from collections import Counter\nfrom functools import reduce\nfrom fractions import gcd\n\ndef has_subpattern(s):\n    c = Counter(s)\n    m = reduce(gcd, c.values())\n    return ''.join(sorted(k*(v//m) for k,v in c.items()))", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\n\ndef has_subpattern(string):\n    count = Counter(string)\n    n = reduce(gcd, count.values())\n    return \"\".join(sorted(c * (i // n) for c, i in count.items()))", "from functools import  reduce as R\nfrom collections import Counter as C\nfrom math import gcd as G\ndef has_subpattern(s): \n    s = C(s)\n    k =  R(G,set(s.values()))\n    li = [i * (j // k) for i, j in s.items()]\n    return ''.join(sorted(li))", "from collections import Counter as C\nfrom functools import reduce as R\nfrom fractions import gcd\n\n\ndef has_subpattern(s):\n    c = C(s)\n    a = R(gcd, c.values())\n    return \"\".join(sorted([x * int(c[x] / a) for x in c]))", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(string):\n    c = Counter(string)\n    m = reduce(gcd, c.values())\n    for key in c:\n        c[key] //= m\n    return ''.join(sorted(c.elements()))", "from collections import Counter; from functools import reduce; gcd=lambda a,b: gcd(b,a%b) if b else a; has_subpattern=lambda s: (lambda r: (lambda g: \"\".join(k*(v//g) for k,v in sorted(r.items())))(reduce(gcd,r.values())))(Counter(s))", "from collections import Counter\nfrom math import gcd\nfrom functools import reduce\ndef has_subpattern(string):\n    cnt = Counter(string)\n    v = reduce(gcd, cnt.values())\n    return ''.join(sorted(k * (n // v) for k, n in cnt.items()))", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\ndef has_subpattern(string):\n    if len(string)<2:\n        return string\n    c=Counter(string)\n    x=reduce(gcd,c.values())\n    if x==1:\n        return ''.join(sorted(string))\n    return ''.join(k*(c[k]//x) for k in sorted(c.keys()))", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\n\ndef has_subpattern(string):  \n    chars_frequency = Counter(string)\n    greatercd = reduce(gcd, chars_frequency.values())\n    charslist = sorted(chars_frequency.items())\n    pattern = \"\"\n    for char, frequency in charslist:\n        pattern += char * (frequency // greatercd)\n    return pattern", "from math import gcd\nfrom functools import reduce\n\ndef has_subpattern(s):\n    d = {k:s.count(k) for k in set(s)}\n    g = reduce(gcd,d.values())\n    return ''.join(sorted(k*(v//g) for k,v in d.items()))"]