["import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    out = ''\n    for i in range(1, d):\n        cycles = math.ceil(n/math.factorial(d-i))\n        out += digits.pop((cycles % (d-i+1)) - 1)\n    return out + digits.pop()", "def nth_perm(n,d):\n    st, i, n, fc = list(map(str, range(d))), 1, n-1, ''\n    while n:\n        n, mod = divmod(n, i)\n        fc = str(mod)+fc\n        i += 1\n    return ''.join([st.pop(int(i)) for i in fc.zfill(d)])", "def memoize(func):\n    cache = {}\n    def decorator(x):\n        if not x in cache:\n            cache[x] = func(x)\n        return cache[x]\n    return decorator            \n\n@memoize\ndef permutations(d):\n    if d < 1:\n        return []\n    if d == 1:\n        return [\"0\"]\n    return sorted(p[:i] + str(d - 1) + p[i:] for p in permutations(d - 1) for i in range(d))\n\ndef nth_perm(n, d):\n    return permutations(d)[n - 1]\n", "def nth_perm(n, d):\n    n -= 1\n    _in, out_, f = [], [], []\n    for x in range(d):\n        f.append(not f or x * f[-1])\n        _in.append(str(x))\n    for x in range(d):\n        i, n = divmod(n, f.pop())\n        out_.append(_in.pop(i))\n    return ''.join(out_)", "from math import factorial\ndef nth_perm(n,d):\n    n = n-1\n    lst = sorted(map(str, range(d)))\n    f = factorial(d)\n    ans = []\n    while lst:\n        f = f//len(lst)\n        c, n = n//f, n%f\n        ans += [lst.pop(c)]\n    return ''.join(map(str, ans))", "import sys\np = sys.modules['iter''tools'].permutations\ndef nth_perm(n, d):\n    return ''.join([*p('0123456789'[:d])][~-n])", "from math import factorial\n\ndef nth_perm(n, d):\n    n, ds, res = n-1, list(range(d)), []\n    for i in range(d - 1, -1, -1):\n        p, n = divmod(n, factorial(i))\n        res.append(ds.pop(p))\n    return ''.join(map(str, res))", "def sil(a):\n    b=1\n    for i in range (1,a+1):\n        b=b*i\n    return b\n        \ndef nth_perm(n,d):\n    #tworzenie listy do permutacji\n    lit=list(('0123456789')[:d])\n    out=[]\n    #iteracja pozycji\n    for i in range(d):\n        el=int((n-1)/sil(d-1))\n        out.append(lit.pop(el))\n        n=n-sil(d-1)*(el)\n        d-=1\n\n    return ''.join(out)", "from math import factorial\ndef nth_perm(n,d):\n    a=list(range(d))\n    i=d-1\n    r=''\n    while(i>=0):\n        b=(n-1)//factorial(i)\n        r+=str(a[b])\n        a.remove(a[b])\n        n-=b*factorial(i)\n        i-=1\n    return r"]