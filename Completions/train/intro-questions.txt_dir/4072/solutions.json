["from functools import reduce\ndef permutation_position(perm):\n    return reduce(lambda t,c:t*26+ord(c)-97,perm,0)+1\n", "trans_table = str.maketrans('abcdefghijklmnopqrstuvwxyz',\n                            '0123456789abcdefghijklmnop')\n\ndef permutation_position(perm):\n    return int(perm.translate(trans_table), 26) + 1", "def permutation_position(perm):\n    return sum((ord(c) - 0x61) * (26 ** i) for i, c in enumerate(reversed(perm))) + 1", "def permutation_position(x):\n    return sum((ord(c)-97)*26**p for p,c in enumerate(x[::-1]))+1", "def permutation_position(perm):\n  return sum('abcdefghijklmnopqrstuvwxyz'.index(x) * 26 ** i for i, x in enumerate(perm[::-1])) + 1", "def permutation_position(perm):\n    a = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6,\"g\":7,\"h\":8,\"i\":9,\"j\":10,\"k\":11,\"l\":12,\"m\":13,\"n\":14,\"o\":15,\"p\":16,\"q\":17,\"r\":18,\"s\":19,\"t\":20,\"u\":21,\"v\":22,\"w\":23,\"x\":24,\"y\":25,\"z\":26,}\n    perm = perm.lower()\n    b = 0\n    y = 1\n    z = []\n    while b <  len(perm)-1:\n        z.append((a[perm[b]] -1) * (26 ** (len(perm)-y)))\n        b = b + 1\n        y = y + 1\n    z.append(a[perm[-1]])\n    return sum(z)", "permutation_position=lambda p,a=__import__('string').printable:int(p.translate(p.maketrans(a[10:36],a[:26])),26)+1", "permutation_position=lambda p:sum(26**i*(ord(c)-97)for i,c in enumerate(p[::-1]))+1", "def permutation_position(perm):\n    return 1 + sum((ord(c) - 97) * 26**i  for i,c in enumerate(perm[::-1]))", "def permutation_position(perm):\n    a = list(perm)[::-1]\n    res = 0\n    k = 0\n    for el in a:\n        res+=(ord(el)-97)*26**k\n        k+=1\n    return res+1"]