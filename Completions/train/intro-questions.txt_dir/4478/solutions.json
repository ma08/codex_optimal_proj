["def sum_to_infinity(sequence):\n    return round(sequence[0]/(1-(sequence[1]/sequence[0])), 3) if abs(sequence[1]/sequence[0]) < 1 else \"No Solutions\"", "def sum_to_infinity(sequence):\n    sequence = [float(x) for x in sequence]\n    a, r = sequence[0], sequence[1] / sequence[0]\n    if -1 < r < 1:\n        return round(a / (1 - r), 3)\n    return \"No Solutions\"", "def sum_to_infinity(sequence):\n    x, y = sequence[:2]\n    return round(x*x/(x-y), 3) if abs(x) > abs(y) else \"No Solutions\"", "def sum_to_infinity(sequence):\n    r = sequence[1] / sequence[0]\n    if abs(r) < 1:\n        return round(sequence[0] / (1 - r), 3)\n    return \"No Solutions\"", "def sum_to_infinity(arr):\n    a, b = arr[:2]\n    c = b / a\n    return round(a / (1 - c), 3) if -1 < c < 1 else \"No Solutions\"", "def sum_to_infinity(seq):\n    if len(seq) < 2:\n        return 'No Solutions'\n    r = seq[1] / seq[0]\n    if r >= 1 or r <= -1:\n        return 'No Solutions'\n    return 1 if seq[0] == seq[1] else round(seq[0]/(1-r), 3)", "def sum_to_infinity(A):\n    r = A[1] / A[0]\n    if abs(r) >= 1:\n        return \"No Solutions\"\n    else:\n        return round(A[0] / (1 - r), 3)", "sum_to_infinity = lambda l: 'No Solutions' if abs(l[1]) >= abs(l[0]) else round(l[0] / (1 - l[1] / l[0]), 3)", "def sum_to_infinity(sequence):\n    a=sequence[0]\n    r=sequence[1]/a\n    return round(a/(1-r),3) if -1<r<1 else \"No Solutions\"", "def sum_to_infinity(seq):\n    r=seq[1]/seq[0]\n    return round(seq[0]/(1-r),3) if -1<r<1 else \"No Solutions\"", "def sum_to_infinity(a):\n    return round(a[0] / (1 - a[1]/a[0]), 3) if -1 < a[1]/a[0] < 1 else 'No Solutions'\n", "def sum_to_infinity(sequence):\n    r = sequence[2]/sequence[1]\n    if not -1 < r < 1:\n        return \"No Solutions\"\n    return round(sequence[0]/(1-r),3)", "def sum_to_infinity(sequence):\n    a = sequence[0]\n    r = sequence[1]/sequence[0]\n    #checking r is in range\n    if r<=-1 or r>=1: #r mustn't be higher or equal than one and lower or equal minus one\n        return \"No Solutions\"\n    else: #there is formula to counting the sum of infinity geometric sequence\n        return round(a/(1-r), 3) #rounded to 3 decimal places", "def sum_to_infinity(l):\n    return round(l[0]/(1- l[1]/l[0]),3) if l[1]/l[0] < 1 and l[1]/l[0] > -1 else 'No Solutions'", "def sum_to_infinity(sequence):\n    r = sequence[1] / sequence[0]\n    if r <= -1 or r >= 1:\n        return 'No Solutions'\n    sum = sequence[0] / ( 1 - r )\n    return round(sum, 3)", "def sum_to_infinity(sequence):\n    # Good Luck!\n    sum = 0\n    print(sequence)\n    if(len(sequence)>1):\n        r = sequence[1]/sequence[0]\n        print(r)\n        if r<=-1 or r>=1:\n            return 'No Solutions'\n        sum = round(sequence[0]/(1-r),3)\n        return sum\n    \n    return sequence[0] ", "def sum_to_infinity(sequence):\n    r=sequence[1]/sequence[0]\n    return round(sequence[0]/(1-r),3) if abs(r)<1 else 'No Solutions'", "def sum_to_infinity(sequence):\n    if sequence[1]/sequence[0]<1 and sequence[1]/sequence[0]>-1:\n        return float(str(round(sequence[0]/(1-sequence[1]/sequence[0]),3)))\n    return \"No Solutions\"", "def sum_to_infinity(seq):\n    r = seq[1]/seq[0]\n    if not abs(r) < 1: \n        return \"No Solutions\"\n    res = seq[0]/(1-r)\n    return round(res, 3)", "def sum_to_infinity(seq):\n    r = seq[1]/seq[0]\n    if not -1 < r < 1: \n        return \"No Solutions\"\n    res = seq[0]/(1-r)\n    return round(res, 3)"]