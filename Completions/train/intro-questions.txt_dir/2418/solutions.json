["class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         num_set = set(nums)\n         if len(nums) == len(num_set):\n             return False\n         return True\n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         \"\"\"\n         set_nums = set(nums)\n         if len(set_nums) < len(nums):\n             return True\n         return False\n         \"\"\"\n         dict1 = {}\n         for num in nums:\n             dict1[num] = dict1.get(num,0)+1\n         \n         for key in dict1:\n             if dict1[key] > 1:\n                 return True\n         return False\n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         nums.sort()\n         \n         if len(nums)-1 == 1:\n             if nums[0] == nums[1]:\n                 return True\n         \n         for i in range(1,len(nums)):\n             print(i)\n          \n             if nums[i] == nums[i-1]:\n                 return True\n \n             \n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         myDict = collections.Counter(nums)\n         print(myDict)\n         for value in list(myDict.values()):\n             if value>1:\n                 return True\n         else:\n             return False\n                 \n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         nums.sort()\n         \n         for i in range(1,len(nums)):\n             print(i)\n          \n             if nums[i] == nums[i-1]:\n                 return True\n \n             \n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         # dic = {}\n         # for i in range(len(nums)):\n         #     if nums[i] in dic.keys():\n         #         return True\n         #     dic[nums[i]] = i\n         # return False\n         nums.sort()\n         for i in range(len(nums) - 1):\n             if nums[i] == nums[i+1]:\n                 return True\n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         diction = {}\n         flag = 0\n         for number in nums:\n             if number not in diction:\n                 diction[number] = 1\n             else:\n                 flag = 1\n                 break\n         if flag == 1:\n             return True\n         else:\n             return False\n", "class Solution:\n     def containsDuplicate(self, nums):\n         \n         if len(nums) < 2:\n             return False\n         return True if len(set(nums)) < len(nums) else False\n         \n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if nums == None or len(nums) <= 1:\n             return False\n         map = {}\n         for i in nums:\n             if i in map:\n                 return True\n             else:\n                 map[i] = 0\n \n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         myDict = {}\n         for num in nums:\n             if myDict.get(num):\n                 return True\n             else:\n                 myDict[num] = 1\n         else:\n             return False\n                 \n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         n_map = {}\n         for n in nums:\n             if n in n_map:\n                 n_map[n] += 1\n             else:\n                 n_map[n] = 1\n         for n, count in n_map.items():\n             if count != 1:\n                 return True\n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         hashmap = {}\n         for i in nums:\n             if i in hashmap.keys():\n                 return True\n             else:\n                 hashmap[i] = hash(i)\n         return False", "class Solution:\n     def containsDuplicate(self,nums):\n         if(len(nums)>1):\n             count=0\n             giru=[]\n             nums.sort()\n             for i in range(len(nums)):\n                 if i+1<len(nums):\n                     if(nums[i]==nums[i+1]):\n                         count=count+1\n \n             if(count>0):\n                 return True\n             else: return False\n         else :\n             return False\n             \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for num in nums:\n             if num in d:\n                 return True\n             else:\n                 d[num] = 1\n         return False\n         \n", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         xx = dict()\n         for i in range(len(nums)):\n             if nums[i] in xx:\n                 return True\n             else:\n                 xx[nums[i]] = 1\n         return False", "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         seen = dict()\n         for num in nums:\n             if str(num) in seen:\n                 return True\n             else:\n                 seen[str(num)] = 1\n         return False\n             \n"]