["def search_k_from_end(linked_list, k):\n    a = b = linked_list.head\n    \n    for __ in xrange(k - 1):\n        b = b.next\n        if not b:\n            return None\n        \n    while b.next:\n        a, b = a.next, b.next\n        \n    return a.data", "# pass in the linked list\n# to access the head of the linked list\n# linked_list.head\ndef search_k_from_end(linked_list, k):\n    head = linked_list.head\n    vals =[]\n    while head:\n      vals.append (head.data)\n      head = head.__next__\n    return vals [-k] if k<= len (vals) else None\n    \n        \n", "def search_k_from_end(ll, k):\n    \n    def _loop(n):\n        if not n: return 1, None\n        r = _loop(n.__next__)\n        return 1 + r[0], r[1] if r[0] != k else n.data\n\n    return _loop(ll.head)[1]\n", "def search_k_from_end(linked_list, k):\n    l = [linked_list.head.data]\n    n = linked_list.head.next\n    while n:\n        l.append(n.data)\n        n = n.next\n    return None if k > len(l) else l[-k]", "def search_k_from_end(linked_list, k):\n    def rec(node, x):\n        if not node: return x\n        n = rec(node.next, x)\n        return n if type(n) != int else n-1 if n else node\n    res = rec(linked_list.head, k-1)\n    if type(res) != int: return res.data", "# pass in the linked list\n# to access the head of the linked list\n# linked_list.head\ndef search_k_from_end(linked_list, k):\n    head = linked_list.head\n    count = 0\n    while head != None:\n        count += 1\n        head = head.__next__\n    head = linked_list.head\n    if k > count:\n        return None\n    while count - k > 0:\n        count -= 1\n        head = head.__next__\n    return head.data\n        \n        \n    \n        \n", "def search_k_from_end(l, k):\n    head,li = l.head,[]\n    while head:\n        li.append(head.data) ; head = head.next\n    return li[-k] if k<=len(li) else None ", "# pass in the linked list\n# to access the head of the linked list\n# linked_list.head\ndef search_k_from_end(linked_list, k):\n    fast_index = 0\n    slow = linked_list.head\n    node = linked_list.head\n    \n    while fast_index < k:\n        if node:\n            node = node.next\n            fast_index += 1\n        else:\n            return None\n\n    while node:\n        node = node.next\n        slow = slow.next\n        \n    return slow.data", "def search_k_from_end(ll, k):\n    def to_list(n):\n      return [n.data] if not n.next else [n.data] + to_list(n.next)\n    l = list(reversed(to_list(ll.head)))\n    return l[k-1] if k<=len(l) else None", "# pass in the linked list\n# to access the head of the linked list\n# linked_list.head\ndef search_k_from_end(l, k):\n    #todo\n    m, n = l.head, l.head\n    while k:\n        if not n:\n            return None\n        n = n.__next__\n        k -= 1\n    while n:\n        m = m.__next__\n        n = n.__next__\n    return m and m.data\n        \n"]