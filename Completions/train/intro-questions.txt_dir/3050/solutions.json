["def lcs(x, y):\n    if len(x) == 0 or len(y) == 0:\n        return ''\n    if x[-1] == y[-1]:\n        return lcs(x[:-1], y[:-1]) + x[-1]\n    else:\n        lcs1 = lcs(x,y[:-1])\n        lcs2 = lcs(x[:-1],y)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n", "from itertools import combinations\n\ndef subsequences(s):\n    \"\"\"Returns set of all subsequences in s.\"\"\"\n    return set(''.join(c) for i in range(len(s) + 1) for c in combinations(s, i))\n\ndef lcs(x, y):\n    \"\"\"Returns longest matching subsequence of two strings.\"\"\"\n    return max(subsequences(x).intersection(subsequences(y)), key=len)", "def lcs(x, y):\n  res=[]\n  i=0\n  for item in y:\n     if item in x[i:]:\n        res+=[item]\n        i=x.index(item)+1\n  return \"\".join(res)", "def lcs(x, y):\n    if not x or not y: return \"\"\n    if x[0] == y[0]: return x[0] + lcs(x[1:], y[1:])\n    \n    return max(lcs(x[1:], y), lcs(x, y[1:]), key=len)\n", "def lcs(string1, string2):\n    if not string1 or not string2:\n        return ''\n    if string1[0] == string2[0]:\n        return string1[0] + lcs(string1[1:], string2[1:])\n\n    return max(lcs(string1, string2[1:]), lcs(string1[1:], string2), key=len)\n", "def lcs(x, y):\n    try:\n        if x[0] == y[0]:\n            return x[0] + lcs(x[1:], y[1:])\n        else:\n            return max(lcs(x[1:], y), lcs(x, y[1:]), key = len)\n    except IndexError:\n        return ''", "def lcs(x, y):\n    if not (x and y):\n        return ''\n    if x[-1] == y[-1]:\n        return lcs(x[:-1], y[:-1]) + x[-1]\n    else:\n        return max(lcs(x[:-1], y), lcs(x, y[:-1]), key=len)", "lcs = (lambda y: y(y))(lambda lcs: lambda x, y: '' if not x or not y else lcs(lcs)(x[:-1], y[:-1]) + x[-1] if x[-1] == y[-1] else max(lcs(lcs)(x[:-1], y), lcs(lcs)(x, y[:-1]), key = len))"]