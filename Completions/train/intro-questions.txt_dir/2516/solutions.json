["class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         s=set(nums)\n         if len(s)==len(nums):return False\n         d=dict()\n         for num in nums:\n             d[num]=d.get(num,0)+1\n         for num in d:\n             if d[num]>1:\n                 index1=-1\n                 index2=-1\n                 for i in range(len(nums)):\n                     if nums[i]==num and index1==-1:index1=i\n                     elif nums[i]==num and index2==-1:index2=i\n                     elif nums[i]==num and index1!=-1 and index2!=-1:\n                         index1=index2\n                         index2=i\n                     print(index2,index1)\n                     if index1!=-1 and index2!=-1 and abs(index2-index1)<=k:return True\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         \n         dic = {}\n         for i, v in enumerate(nums):\n             if v in dic and i - dic[v] <= k:\n                 return True\n             dic[v] = i\n         return False\n", "class Solution(object):\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         #Initial approach using map O(n) time and space\n         m = {} #Stores value -> index mapping\n         \n         for i, n in enumerate(nums):\n             if n in m and abs(m[n] - i) <= k:\n                 return True\n             #Insert new element or replace old one with index that is more right (decreases distance to next)\n             m[n] = i\n         \n         return False\n     \n     '''\n     Ex testcase: [1,2,3,4,5,6,7,1,9,1] k = 3\n     '''", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if nums == None or len(nums) <= 1 or k == 0:\n             return False\n         maps = {}\n         for i, item in enumerate(nums):\n             if item in maps and abs(maps[item] - i) <= k:\n                 return True\n             else:\n                 maps[item] = i\n         \n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         hashmap = {}\n         for i in range(len(nums)):\n             if nums[i] in hashmap.keys():\n                 if abs(i-hashmap[nums[i]]) <= k:\n                     return True\n                 else:\n                     hashmap[nums[i]] = i\n             else:\n                 hashmap[nums[i]] = i\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         hashmap = {}\n         for i in range(len(nums)):\n             if nums[i] in hashmap.keys():\n                 if abs(i-hashmap[nums[i]]) <= k:\n                     return True\n                 else:\n                     hashmap[nums[i]] = i\n             else:\n                 hashmap[nums[i]] = i\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i, num in enumerate(nums):\n             if num in d and i - d[num] <= k:\n                 return True\n             d[num] = i\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         last_seen_idx = {}\n         for i, num in enumerate(nums):\n             if num in last_seen_idx and i - last_seen_idx[num] <= k:\n                 return True\n             last_seen_idx[num] = i\n         \n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         s = set()\n         for i in range(len(nums)):\n             if i-k-1 >= 0:\n                 s.remove(nums[i-k-1])\n                 \n             if nums[i] in s:\n                 return True\n             s.add(nums[i])\n         return False\n", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if k == 0:\n             return False\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] in d.keys() and abs(i - d[nums[i]]) <= k:\n                 return True\n             else:\n                 d[nums[i]] = i\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         if not nums or k<0 or len(nums)==len(set(nums)):\n             return False\n         mapD={}\n         for i,v in enumerate(nums):\n             if v in mapD and i-mapD[v]<=k:\n                 return True\n             mapD[v]=i\n         return False\n             \n", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if not nums or len(nums) < 2:\n             return False\n         \n         from collections import defaultdict\n         dup_idx = defaultdict(list)\n         for i, num in enumerate(nums):\n             dup_idx[num].append(i)\n             \n         for idxes in dup_idx.values():\n             if len(idxes) == 1:\n                 continue\n             idxes = sorted(idxes)\n             for i in range(1, len(idxes)):\n                 if idxes[i] - idxes[i - 1] <= k:\n                     return True\n                 \n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         d = collections.defaultdict(list)\n         for i, n in enumerate(nums):\n             if n in d:\n                 for index in d[n]:\n                     if i - index <= k:\n                         return True\n             d[n].append(i)\n         return False", "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             l = d.get(nums[i], [])\n             if nums[i] in d:\n                 for j in l:\n                     if abs(i - j) <= k:\n                         return True\n             l.append(i)\n             d[nums[i]] = l\n \n         return False"]