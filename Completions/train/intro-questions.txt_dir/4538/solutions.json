["def reverse_fun(n):\n    for i in range(len(n)):\n        n = n[:i] + n[i:][::-1]\n    return n", "def reverse_fun(n):\n    l = len(n)\n    return ''.join(b+a for a,b in zip(list(n[:l//2])+[''], n[l//2:][::-1]))", "def reverse_fun(n):\n    n = n[::-1]\n    for i in range(1, len(n)):\n        n = n[:i] + n[i:][::-1]\n    return n", "def reverse_fun(n, first = False):\n  return \"\" if len(n) < 1 else n[0] + reverse_fun(n[1:]) if first else n[-1] + reverse_fun(n[:-1], True)", "from itertools import zip_longest\n\ndef merge(sequences, fillvalue=None):\n    for slice in zip_longest(*sequences, fillvalue=fillvalue):\n        for item in slice:\n            yield item\n\ndef reverse_fun(text):\n    mid = len(text) // 2\n    return ''.join(merge((text[:mid-1:-1], text[:mid]), fillvalue=''))\n", "def reverse_fun(n):\n    string = \"\"\n    for i in range(len(n)):\n        string += n[::-1][0]\n        n = n[::-1][1:]\n    return(string)", "from itertools import chain, zip_longest\n\ndef reverse_fun(n):\n    l = len(n) >> 1\n    return ''.join(chain.from_iterable(zip_longest(n[:l-1:-1], n[:l], fillvalue='')))", "def reverse_fun(n):\n    #Solution 2\n    from collections import deque as dq\n    n = dq(n)\n    n_dq = dq()\n    for i in range(len(n)):\n        if i==0 or i%2==0:\n            n_dq.append(n.pop())\n        elif i%2!=0:\n            n_dq.append(n.popleft())\n    return ''.join(n_dq)", "def reverse_fun(arr):\n  for i in range(len(arr)):\n    arr = arr[0:i] + arr[i:][::-1]\n  return arr"]