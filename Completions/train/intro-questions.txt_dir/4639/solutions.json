["def power_of_two(x):\n    return x != 0 and ((x & (x - 1)) == 0)", "def power_of_two(num):\n    return bin(num).count('1') == 1\n", "def power_of_two(x):\n    return x and (not(x&(x-1)))", "def power_of_two(x):\n  # your code here\n  return x > 0 and (x & (x-1)) == 0", "def power_of_two(x):\n  # your code here\n  return (x &  (x-1) == 0) and (x >  0)", "def power_of_two(x):\n  return bin(x).count('1')==1", "def power_of_two(x):\n    while x > 1 and x % 2 == 0:\n        x = x // 2\n    return x == 1\n", "\ndef power_of_two(x):\n  \n    if x == 0:\n        return False\n    elif x & x-1 != 0:\n        return False\n    else:\n        return True\n    \n    \"\"\"\n    count = 0\n    while (x): \n        count += x & 1\n        x >>= 1\n    if count==1:\n        return True\n    else:\n        return False\n   \n    string = bin(x)[2:]\n    Sum=0\n    for x in range(len(string)):\n        if string[x]==\"1\":\n            Sum+=1\n    if Sum==1:\n         return True\n    else:\n          return False\n    \"\"\"\n", "def power_of_two(x):\n    from math import log2, pow\n    if not x == 0:\n        c = log2(x)\n        return c%1 == 0 and pow(2,c) == x #precision here breaks so assume false\n    else: \n        return False", "power_of_two = lambda x: True if sum(int(i) for i in bin(x) if i.isdigit())==1 else False", "def power_of_two(n):\n    return n != 0 and n & (n - 1) == 0\n", "def power_of_two(x):\n    if x == 0:\n        return False\n    elif x & x-1 != 0:\n        return False\n    else:\n        return True\n", "import math\n\ndef power_of_two(x):\n    return False if x == 0 else True if math.pow(2, round(math.log(x, 2))) == x else False", "power_of_two = lambda x: x!=0 and not (x & (x-1))", "def power_of_two(n):\n    return bin(n).count('1') == 1\n", "def power_of_two(x):\n  return list(bin(x)).count('1') == 1", "power_of_two = lambda x: bin(x).count('1') == 1", "def power_of_two(x):\n    if(x != 0):\n        if (x & (x- 1)) == 0:\n            return True\n        else : \n            return False\n    else:\n        return False", "def power_of_two(x):\n    return 1 == bin(x).count(\"1\")", "def power_of_two(x):\n    return x if x < 2 else int(bin(x)[3:]) == 0 ", "def power_of_two(x):\n  # your code here\n  if str(bin(x))[2:].count(\"1\")==1:\n      return True\n  else:\n      return False", "import math\ndef power_of_two(x):\n    if(x == 0):\n        return False\n    else:\n        return not(x & (x - 1))", "def power_of_two(x):\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x % 2 == 0:\n        return power_of_two(x // 2)\n    else:\n        return False", "def power_of_two(x):\n    n, t = 0, 0\n    while t < x:\n        t = 2**n\n        if t == x: return True\n        n += 1\n    return False ", "def power_of_two(x):\n    if x == 1: return True\n    n = 2\n    while n <= x:\n        if x==n: return True\n        n = n * 2\n    return False\n", "def power_of_two(x):\n    start = 1\n    while start < x:\n        start *= 2\n\n    return start == x", "def power_of_two(num):\n    if num == 0:\n        return False\n    elif num & num-1 != 0:\n        return False\n    else:\n        return True", "def power_of_two(x):\n    l = 1\n    while l < x:\n        l *= 2\n    return l == x", "def power_of_two(n):\n    if n == 0:\n        return False\n    if n & n - 1:\n        return False\n    else:\n        return True\n", "def power_of_two(x):\n    binary = bin(x)\n    bits = [ones for ones in binary[2:] if ones == '1']\n    if len(bits) == 1:\n        return True\n    else:\n        return False", "import math\ndef power_of_two(x):\n    if x == 0:\n        return False\n    check = int(math.log(x, 2))\n    if 2 ** check == x:\n        return True\n    return False", "def power_of_two(x):\n  # your code here\n    if (x and (x & (x - 1)) == 0):\n        return True\n    else:\n        return False", "import math\ndef power_of_two(x):\n    return x == 2**(int(math.log(x,2))) if x > 0 else False", "def power_of_two(x):\n    if x % 2 and x != 1 : return 0\n    while x > 2 :\n        x = x//2\n        if x % 2 and x != 1 : return 0\n  \n    return ( x == 2 or x == 1)", "def power_of_two(x):\n    result = 0\n    i  = 0\n    while result < x:\n        result = 2 ** i\n        i += 1\n        if result != x:\n            continue\n        if result == x:\n            return True\n    return False", "def power_of_two(x):\n    powers = []\n    for i in range(0,5000):\n        powers.append(2**i)\n    if x in powers:\n        return True\n    else:\n        return False\n", "def power_of_two(x):\n    import re\n    pattern = re.compile('^0b10*$')\n    return re.match(pattern, bin(x)) is not None", "def power_of_two(x):\n    power = 0\n    \n    while True:\n        some_value = pow(2, power)\n        if some_value == x:\n            return True\n            break\n        elif some_value > x:\n            return False\n            break\n        \n        power += 1", "def power_of_two(x):\n    num = 1\n    while True:\n        if x == num:\n            return True\n        elif x < num:\n            return False\n        num <<= 1", "def power_of_two(x):\n    return bool(x) and x & -x == x", "def power_of_two(x):\n    start = 2\n    while start < x:\n        start *= 2\n    return start == x or x == 1", "def power_of_two(x):\n  # your code here\n    if x == 0:\n        return False\n    \n    while( x != 1):\n        print(x)\n        if (x % 2) != 0:\n            return False\n        else:\n            x /= 2\n            \n    \n    return True", "def power_of_two(x):\n    list_of_powers = []\n    for i in range(500):\n        list_of_powers.append(2**i)\n    if x in list_of_powers:\n        return True\n    return False\n", "def power_of_two(x):\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return x % 8 == 0", "def power_of_two(x):\n    if x in (0, 1):\n        return x\n    elif x % 2 == 1:\n        return False\n    else:\n        return power_of_two(x // 2)", "import math\n\ndef power_of_two(n):\n    return (n != 0) and (n & (n-1) == 0)", "from math import log2\ndef power_of_two(x):\n    if x<1:\n        return False\n    return 2**int(log2(x)) == x", "def power_of_two(x):\n    return x in [2**i for i in range(150) if 2**i<=x]", "import math\ndef power_of_two(x):\n    if x == 0:\n        return False\n    return (x & (x-1) == 0) and x != 0\n", "def power_of_two(x):\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    \n    while x % 2 == 0:\n        x = x // 2\n        if x == 1:\n            return True\n        \n    return False", "  \ndef power_of_two(x):\n    '''Find if a number can be obtained via 2^n'''\n    current_number = 0\n    counter = 0\n    while current_number <= x:\n        current_number = 2**counter\n        counter+=1\n        if current_number == x:\n            return True\n    return False  ", "import math\ndef power_of_two(x):\n    if x<=0:\n        return False\n    if x>0:\n        y=int((math.log(x,2)))\n        for i in range(y-1,y+2):\n                if 2**i==x:\n                    return True\n                \n                \n        return False\n        \n", "def power_of_two(x):\n    print(x)\n    if x==0:\n        return False\n    elif x==1:\n        return True\n    while(True):\n        if x<=0 or x==1:\n            return True\n            break\n        if x%2==0:\n            x=x//2\n        else:\n            return False", "def power_of_two(x):\n    return not(x & (x-1)) if x != 0 else False", "def power_of_two(x):\n    i = 1\n    l = [1]\n    while i < x:\n        i *= 2\n        l.append(i)\n    return x in l\n", "def power_of_two(x):\n    \n    while x > 1 :\n        if x % 2 :\n            return False\n        x //= 2\n    \n    return x != 0", "def power_of_two(x):\n    return True if x&(x-1)==0 and x!=0 else False", "def power_of_two(x):\n    return True if \"{0:b}\".format(x).count('1')==1 else False", "import math\n\ndef power_of_two(x):\n    if x == 1:\n        return True\n    elif x < 1 or x % 2:\n        return False\n    return power_of_two(x//2)", "import math\ndef power_of_two(x):\n    exp_val = int(math.log(x)/math.log(2)) if x else 0\n    return True if x > 0 and 2**exp_val == x else False", "def power_of_two(x):\n    for i in range(101):\n        if 2**i==x:\n            return True\n    return False", "def power_of_two(x):\n    if x == 0:\n        return False\n    \n    num = 1\n    while num < x:\n        num *= 2\n    return num == x", "def power_of_two(x):\n    i = 0\n    \n    while (pow(2, i) <= x):\n        if pow(2, i) == x:\n            return True\n        i += 1\n    \n    return False", "def power_of_two(x):\n    l = [2**i for i in range(0, 500)]\n    return x in l", "def power_of_two(x):\n    if x == 0:\n        return False\n    else:\n        return x & -x == x", "from math import log\ndef power_of_two(x):\n    if x < 1: return False\n    if str(x)[-1:] in '13579' and x>1: return False\n    else:\n        return 2**int(log(x,2)) == x", "def power_of_two(x):\n    \n    if x <= 0:\n        return False\n    if x == 1:\n        return True\n        \n    test = 1\n    i = 0\n    \n    while test <= x:\n        test = test * 2\n        if test == x:\n            return True\n    \n    return False", "import math\n\npower_of_two = lambda x : not (bin(x)[2:].count('1')-1) if x != 0 else False", "from math import log2\n\ndef power_of_two(x):\n  return 2**int(log2(x)) == x if x >= 1 else False", "def power_of_two(x):\n  for i in range(0,4096):\n      if 2**i==x:\n          return True\n      else:\n          pass\n  return False", "def power_of_two(x):\n    \n    i = 0\n    while True:\n        num = 2**i\n        if num == x:\n            return True\n        elif num > x:\n            return False\n        i += 1", "from math import *\ndef power_of_two(x):\n    return x == 2**ceil(log2(x)) if x > 0 else 0", "def power_of_two(x: int):\n    return bin(x).count('1') == 1", "from math import log2\ndef power_of_two(x):\n    if x <= 0:\n        return False\n    return x == 2**int(log2(x))", "powers = []\nfor i in range(0, 150):\n    y = 2**i\n    powers.append(y)\n\ndef power_of_two(x):\n    if x == 0:\n        return False\n    \n\n    elif x in powers:\n        return True\n    else:\n        return False\n  # your code here\n", "import math\ndef power_of_two(x):\n  return x == 2**(int(math.log2(x))) if x > 0 else False", "def power_of_two(x):\n    exp = 0\n    while ( x > 2**exp ):\n        exp += 1\n    return 2**exp == x", "def power_of_two(x):\n  p = 1\n  while p < x:\n      p = p * 2\n  return p == x", "def power_of_two(x):\n  if x == 0:\n      return False\n  p = 1\n  while p < x:\n      p = p * 2\n  if p == x:\n      return True\n  else:\n      return False\n", "from math import log\ndef power_of_two(x):\n  return (x>0) and 2**int(log(x, 2))==x", "def power_of_two(x):\n  if x == 0:\n      return False\n  return bin(x)[3:].find('1') == -1", "def power_of_two(x):\n  if x == 0: return False\n  if x == 1: return True\n  if x % 2 != 0: return False\n  return power_of_two(x//2)", "def power_of_two(x):\n    powers = []\n    for i in range(0, 1000):\n        powers.append(2**i)\n    return True if x in powers else False", "def power_of_two(x):\n  # your code here\n  if x==0:\n      return False#checking the 1st case\n  while (x!=1):\n      if (x%2!=0):\n        return False#\n      x=x//2#//floor division it will give round numbersfor ex:1.5 means it will give 1\n  return True", "import math\n\ndef power_of_two(x):\n    if x < 1:\n        return False\n    if x == 2 or x == 1:\n        return True\n    if x and (not(x & (x - 1))):\n        return True\n    else:\n        return False", "import re\n\ndef power_of_two(x):\n    return True if re.match(r\"^1[0]*$\", bin(x)[2:]) else False\n", "def power_of_two(x):\n  for i in range(0,128):\n      if x == 2**i:\n          return True\n      elif x < 2**i:\n          return False", "def power_of_two(x):\n    return x&(x-1) == 0 if x != 0 else False", "def power_of_two(x):\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    return True\n\n\nprint(power_of_two(1024))", "def power_of_two(x):\n  # your code here\n  y = 1\n  while x >= y:\n      if x == y: return True\n      y = 2 * y\n  return False", "def power_of_two(x):\n  a = 1\n  while a < x:\n      a = a*2\n  return a == x", "def power_of_two(x):\n  # your code here\n  if x==0:\n      return False\n  elif (x/2)%2==0 and x%2==0 and x%4==0 and x%8==0:\n      return True\n  else:\n      if x==1:\n          return True\n      else:\n          return False\n", "power_of_two = lambda n: True if n!= 0 and 2 ** round(__import__('math').log(n, 2)) == n else False\n", "power_of_two = lambda n: bin(n).count('1') == 1", "def power_of_two(x):\n    i = 1\n    while i < x:\n        i = i * 2\n    if i == x:\n        return True\n    else:\n        return False", "def power_of_two(x):\n    return False if x == 0 else bin(x)[2:].count('1') == 1\n\n   \n", "from math import log\n\ndef power_of_two(x):\n    return 2 ** int(log(x, 2)) == x if x else False", "def power_of_two(x):\n  n=1\n  while x>n:\n      n*=2\n  return x==n", "def power_of_two(x):\n    return x and not bool(x & (x-1))"]