["def dating_range(age):\n    if age <= 14:\n        min = age - 0.10 * age\n        max = age + 0.10 * age\n    else:\n        min = (age/2)+7\n        max = (age-7)*2\n        \n    return str(int(min))+'-'+str(int(max))", "def dating_range(age):\n    if age <= 14:\n        return \"{}-{}\".format(int(age-0.1*age), int(age+0.1*age))\n    return \"{}-{}\".format(int(age/2+7), int((age-7)*2))", "def dating_range(age):\n    if age > 14:\n        lo = age / 2 + 7\n        hi = (age - 7) * 2\n    else:\n        lo = 0.9 * age\n        hi = 1.1 * age\n    return '%d-%d' % (lo, hi)\n", "def dating_range(age):\n    if age < 15:\n        return \"%d-%d\" % (.9*age, 1.1*age)\n    else:\n        return \"%d-%d\" % (age/2 + 7, (age - 7) * 2)", "def dating_range(age):\n    return \"{}-{}\".format(int(age*0.9),int(age*1.1)) if age<=14 else \"{}-{}\".format(int(age/2+7),int((age-7)*2))", "def dating_range(age):\n    if age > 14:\n        maximum = (age - 7) * 2\n        minimum = age / 2 + 7\n    else:\n        maximum = age + 0.10 * age\n        minimum = age - 0.10 * age\n    return '{}-{}'.format(int(minimum), int(maximum))\n", "def dating_range(age):\n    return ['%d-%d'%(age-.10*age, age+.10*age), '%d-%d'%(age/2+7, (age-7)*2)][age>14]", "def dating_range(age):\n    return f\"{age // 2 + 7}-{2 * age - 14}\" if age > 14 else f\"{age * 9 // 10}-{age * 11 // 10}\"\n", "def dating_range(age):\n  return f'{int(age/2+7)}-{(age-7)*2}' if age > 14 else f'{int(0.9*age)}-{int(1.1*age)}'", "def dating_range(age):\n    return \"{}-{}\".format(int(age-0.1*age) if age <=14 else (age//2)+7,int(age+0.1*age) if age <=14 else (age-7)*2)", "dating_range = lambda a: \"{}-{}\".format(int(a-0.1*a if a <= 14 else a/2+7), int(a+0.1*a if a <= 14 else (a-7)*2))", "def dating_range(age):\n    return '%d-%d' %(age-0.1*age, age+0.1*age) if age <= 14 else '%d-%d' %(age/2+7, (age-7)*2)", "def dating_range(age):\n    if age>14:\n        return str(age//2+7) + '-' + str((age-7)*2)\n    else:\n        return (str(int(age*0.9)) + '-' + str(int(age*1.1)))", "def dating_range(age):\n    if age > 14:\n        a = age / 2 + 7\n        b = (age - 7) * 2\n    else:\n        a = age - 0.10 * age\n        b = age + 0.10 * age\n\n    return f'{int(a)}-{int(b)}'", "def dating_range(age, x=2, y=7, z=.1):\n    return '%d-%d' % ((age / x + y, x * (age - y)) if age > x * y else (age * (1 - z), age * (1 + z)))", "def dating_range(age, x=2, y=7, z=.1):\n    return f'{age // x + y}-{x * (age - y)}' if age > x * y else f'{int(age * (1 - z))}-{int(age * (1 + z))}'", "def dating_range(age):\n    min_age = age // 2 + 7 if age > 14 else 9*age//10\n    max_age = 2 * (age - 7) if age > 14 else 11*age//10\n    return f\"{min_age}-{max_age}\"", "from math import ceil\ndef dating_range(age):\n    if age<=14:\n        return f'{age-ceil(age/10)}-{age+(age//10)}'\n    return f'{age//2+7}-{(age-7)*2}'", "def dating_range(age):\n    return f'{age // 2 + 7}-{(age - 7) * 2}' if age > 14 else f'{int(age * 0.9)}-{int(age * 1.1)}'", "import math\ndef dating_range(age):\n    if age>14:\n        return '-'.join(map(str,[age//2+7,2*(age-7)]))\n    return '-'.join(map(str,map(math.floor,[age*0.9,age*1.1])))", "def dating_range(age):\n    min, max = (age / 2.0) + 7, (age - 7) * 2.0\n    if age <= 14:\n        min, max = age - 0.10 * age, age + 0.10 * age\n    return \"{}-{}\".format(int(min), int(max))", "from math import floor\n\ndef dating_range(age: int) -> str:\n    \"\"\" Get the minimum and maximum age range for dating. \"\"\"\n    return f\"{floor(age / 2 + 7)}-{floor((age - 7) * 2)}\" if age > 14 else f\"{floor(age - 0.10 * age)}-{floor(age + 0.10 * age)}\"", "dating_range = \\\nlambda x: \"%s-%s\" % ((str(int(x - 0.10 * x))), (str(int(x + 0.10 * x)))) if x <= 14 \\\nelse \"%s-%s\" % ((str(int(x/2+7))), (str(int(x-7)*2)))", "dating_range = lambda age : str (age // 2 + 7) + \"-\" + str ((age - 7) * 2) if (age > 14) else str (int (age - 0.10 * age)) + \"-\" + str (int (age + 0.10 * age));", "from math import floor\n\ndef dating_range(age):\n    min = floor(age / 2 + 7) if age > 14 else floor(age - 0.1 * age)\n    max = floor((age - 7) * 2) if age > 14 else floor(age + 0.1 * age)\n    return f\"{min}-{max}\"", "def dating_range(age):\n    if age > 14:\n        min = int(age/2+7)\n        max = int((age-7)*2)\n    else:\n        min = int(age - 0.1*age)\n        max = int(age + 0.1*age)\n    r = str(min)\n    r += \"-\"\n    r += str(max)\n    return r\n", "def first(age):\n    min_age = str(int(age / 2 + 7))\n    max_age = str(int((age - 7) * 2))\n    return [min_age, max_age]\n\ndef second(age):\n    min_age = str(int(age - 0.10 * age))\n    max_age = str(int(age + 0.10 * age))\n    return [min_age, max_age]\n\ndef dating_range(age):\n    return ['-'.join(first(age)), '-'.join(second(age))][(age <= 14)]", "def dating_range(age):\n    if age < 14:\n        min = age - 0.10 * age\n        max = age + 0.10 * age\n    else:\n        min = age/2 + 7\n        max = (age - 7)*2\n    return \"{}-{}\".format(int(min), int(max))", "def dating_range(age):\n    min_14 = str(int(age - 0.10 * age))\n    max_14 = str(int(age + 0.10 * age))\n    min = str(int(age/2 + 7))\n    max = str(int((age-7)*2))\n    if age <= 14: return(min_14 + \"-\" + max_14)\n    else: return (min + \"-\" + max)", "from math import floor\n\ndef dating_range(age):\n    if age >= 14:\n        min = floor(age / 2) + 7\n        max = (age - 7) * 2   \n    else:\n        min = floor(age - 0.10 * age)\n        max = floor(age + 0.10 * age)\n        \n    return f'{min}-{max}'", "def dating_range(age):\n    return f'{int(age/2+7)}-{int((age-7)*2)}' if age>14 else f'{int(age-(.10*age))}-{int(age+(.10*age))}'", "def dating_range(age):\n    return '%d-%d' % (age//2 + 7, 2*(age - 7)) if age > 14 else '%d-%d' % (9*age//10, 11*age//10)", "def dating_range(age):\n    if age<=14:\n        minage = int(age - 0.1*age)\n        maxage = int(age + 0.1*age)\n    else:\n        minage = int(age/2 + 7)\n        maxage = int((age-7)*2)\n        \n    return f\"{minage}-{maxage}\"", "def dating_range(age):\n    min_over = age//2 + 7\n    max_over = (age - 7)*2\n    min_under = int(age - 0.10 * age)\n    max_under = int(age + 0.10 * age)\n    return f'{min_over}-{max_over}' if age > 14 else f'{min_under}-{max_under}'", "import math\n\ndef dating_range(age):\n    if age <= 14:\n        min = math.floor(age - 0.10 * age)\n        max = math.floor((age + 0.10 * age))\n        return f\"{min}-{max}\"\n    else:\n        min = math.floor(age/2 + 7)\n        max = math.floor((age-7)*2)\n        return f\"{min}-{max}\"", "def dating_range(age):\n    if age>=15:\n        min_age =int(age/2+7)\n        max_age =(age-7)*2\n    else:\n        min_age =int(age - 0.10 * age)\n        max_age = int(age + 0.10 * age)\n        \n      \n    \n    return  f\"{min_age}-{max_age}\"", "from math import floor\n\ndef dating_range(age):\n    if age <= 14:\n        mn = floor(age - 0.1 * age)\n        mx = floor(age + 0.1 * age)\n    else:\n        mn = age // 2 + 7\n        mx = (age - 7) * 2\n    \n    \n    return f'{mn}-{mx}'", "def dating_range(age):\n    if age <= 14:\n        return f'{int(age * 0.9)}-{int(age * 1.1)}'\n    return f'{age // 2 + 7}-{(age - 7) * 2}'", "def dating_range(age):\n    if age <= 14:\n        min = int(age - 0.1*age)\n        max = int(age + 0.1*age)\n        return f'{min}-{max}'\n    else:\n        min = int((age//2) + 7)\n        max = int((age-7) * 2)\n        return f'{min}-{max}'", "def dating_range(age):\n    return f'{age//2+7}-{(age-7)*2}' if age>14 else f'{int(age*0.9)}-{int(age*1.10)}'", "def dating_range(age):\n    if age > 12:\n        return str(int(age/2+7)) + '-' + str(int((age-7)*2))\n    else:\n        return str(int(age-0.10*age)) + '-' + str(int(age+0.10*age)) ", "def dating_range(age):\n    return f'{int(age-age*.10)}-{int(age+age*.10)}' if age <= 14 else f'{age//2+7}-{(age-7)*2}'", "def dating_range(age):\n    min_age = int(age / 2 + 7)\n    max_age = int((age - 7) * 2)\n    return age >= 14 and f\"{min_age}-{max_age}\" or f\"{int(age - 0.10 * age)}-{int(age + 0.10 * age)}\"", "def dating_range(age):\n    return f'{int(age/2 + 7)}-{2 * (age -7)}' if age > 14 else f'{int(age - 0.10 * age)}-{int(age + 0.10 * age)}'", "from math import floor\ndef dating_range(age):\n    \n    if age > 14:\n        min = age / 2 + 7\n        max = (age - 7) * 2\n    else:\n        min = age - 0.10 * age\n        max = age + 0.10 * age\n        \n    return f'{floor(min)}-{floor(max)}'", "def dating_range(age):\n    if age > 14: mn, mx = age//2 + 7, (age-7)*2\n    else: mn, mx = int(age*.9), int(age*1.1)\n    return f\"{mn}-{mx}\"", "import numpy as np\ndef dating_range(age):\n    if age>14:\n        return f\"{int(np.floor((age/2)+7))}-{int(np.floor((age-7)*2))}\"\n    else:\n        return f\"{int(np.floor(age - (0.10 * age)))}-{int(np.floor(age + (0.10 * age)))}\"", "def dating_range(age):\n    k = (age*0.5 + 7, age*2 - 14) if age > 14 else (age - 0.1 * age, age + 0.1 * age)\n    return '{}-{}'.format(int(k[0]), int(k[1]))", "from math import floor\ndef dating_range(age):\n    min_age = floor(age * .5 + 7 if age > 14 else age * .9)\n    max_age = floor(age * 2 - 14 if age > 14 else age * 1.1)\n    return \"{}-{}\".format(min_age, max_age)", "def dating_range(age):\n    return f'{age//2+7}-{(age-7)*2}' if age>=14 else f'{int(age-0.10*age)}-{int(age+0.10*age)}'", "from math import ceil\ndef dating_range(age):\n    if age <= 14:\n        return f'{age-ceil(age/10)}-{age+int(age/10)}'\n    return f'{age//2+7}-{2*(age-7)}'", "import math\ndef dating_range(age):\n    if age > 14:\n        a = (age/2) + 7\n        b = (age - 7) * 2\n        a = math.floor(a)\n        b = math.floor(b)\n        return str(a) + \"-\" + str(b)\n    if age <= 14: \n        a = age - (0.1 * age)\n        b = age + (0.1 * age)\n        a = math.floor(a)\n        b = math.floor(b)\n        return str(a) + \"-\" + str(b)", "def dating_range(age):\n    if age <= 14:\n        return f'{int(age - 0.1 * age)}-{int(age + 0.1 * age)}'\n    return f'{age//2 + 7}-{(age-7)*2}'", "def dating_range(age):\n    import math\n    if age <=14:\n        return f'{math.floor((age - 0.10 * age))}-{math.floor((age + 0.10 * age))}'\n    else:\n        return f'{(math.floor(age/2+7))}-{math.floor((2*(age-7)))}'", "def dating_range(age):\n    if age <= 14:\n        return f\"{int(age - age * 0.1)}-{int(age + age * 0.1)}\"\n    return f\"{int(age/2 + 7)}-{int((age - 7) * 2)}\"", "from math import floor\n\ndef dating_range(age):\n    if age <= 14:\n        min = floor(age - 0.1 * age)\n        max = floor(age + 0.1 * age)\n        return f'{min}-{max}'\n    return f'{floor(age//2+7)}-{floor((age-7)*2)}'", "def dating_range(age):\n    return f\"{int(age - 0.1 * age)}-{int(age + 0.1 * age)}\" if age <= 14 else f\"{age // 2 + 7}-{(age - 7) * 2}\"", "import math\ndef dating_range(age):\n    if age<=14:\n        min=age-math.ceil(0.10*age)\n        max=age+math.floor(0.10*age)\n    else:\n        min=(age//2)+7\n        max=(age-7)*2\n    return f'{min}-{max}'", "def dating_range(age):\n    if age>14:\n        return str(int(age/2+7))+'-'+str(2*age-14)\n    return str(int(0.9*age))+'-'+str(int(1.1*age))", "def dating_range(age):\n    min = age/2 + 7 if age > 14 else age-0.1*age\n    max = (age-7)*2 if age > 14 else age+0.1*age\n    return \"{}-{}\".format(int(min), int(max))", "from math import floor\ndef dating_range(age):\n    return f\"{age // 2 + 7}-{(age - 7) * 2}\" if age > 14 else f\"{floor(age - age / 10)}-{age + age // 10}\"", "def dating_range(age):\n    if age>14:\n        return f'{(age)//2 +7}-{2*(age-7)}'\n    else:\n        return f'{int(age-age/10)}-{int(age+age/10)}'", "def dating_range(age):\n    if age >14:\n        return str(int(age/2+7)) +\"-\"+str((age-7)*2)\n    else:\n        return str(int(age-0.1*age))+\"-\"+str(int(age+0.1*age))", "import math\ndef dating_range(age):\n    return \"{}-{}\".format(math.floor(age - 0.10 * age), math.floor(age + 0.10 * age)) if age < 14 else \"{}-{}\".format(math.floor(age / 2 + 7), math.floor((age - 7) * 2))", "def dating_range(age):\n    return \"%d-%d\" % (age//2 +7,(age-7)*2) if age > 14 else \"%d-%d\" % (int(age-0.1*age),int(age+0.1*age))", "import math\ndef dating_range(age):\n    return f\"{math.floor(age/2+7)}-{(age-7)*2}\" if int(age)>14 else f\"{int(age-.1*age)}-{int(age+.1*age)}\"\n", "import math\n\ndef dating_range(age):\n    if age <= 14:\n        return f'{math.floor(age - 0.10 * age)}-{math.floor(age + 0.10 * age)}'\n    return f'{age // 2 + 7}-{(age - 7) * 2}'", "def dating_range(age):\n    if age<=14 : return f\"{int(age-0.1*age)}-{int(age+0.1*age)}\"\n    return f\"{7+age//2}-{(age-7)*2}\"", "import math\ndef dating_range(age):\n    if age >= 14:\n        max = (age - 7) * 2\n        min = (age/2) + 7\n    else:\n        min = age - .1 * age\n        max = age + .1 * age\n    return str(math.floor(min)) + '-' + str(math.floor(max))\n", "def dating_range(age):\n    if age <= 14:\n        mini = int(age - 0.1 * age)\n        maxi = int(age + 0.1 * age)\n    else:\n        mini = age//2+7\n        maxi = (age-7)*2\n    return \"{}-{}\".format(mini, maxi)", "def dating_range(age):\n    if age < 15:\n        return f'{int(0.9 * age)}-{int(1.1 * age)}'\n    return f'{7 + age // 2}-{2 * (age - 7)}'", "def dating_range(age):\n    if age <= 14:\n        min_age = int(age - 0.1*age)\n        max_age = int(age + 0.1*age)\n    else:\n        min_age = int(age/2 + 7)\n        max_age = int((age-7)*2)\n    return f\"{min_age}-{max_age}\"", "def dating_range(age):\n    if age > 14:\n        min = age / 2 + 7\n        max = (age - 7) * 2\n    elif age <= 14:\n        min = age - 0.10 * age\n        max = age + 0.10 * age\n    return f\"{int(min)}-{int(max)}\"", "from math import floor\n\ndef dating_range(age):\n    if age <= 14:\n        return f\"{floor(0.9*age)}-{floor(1.1*age)}\"\n    return f\"{age // 2 + 7}-{2*(age - 7)}\"", "import math\ndef dating_range(age):\n    #return min-max\n    min=0\n    max=0\n    if age<=14:\n        min = math.floor(age - 0.10 * age)\n        max = math.floor(age + 0.10 * age)\n    else:\n        min=math.floor(age/2)+7\n        max=2*(age-7)\n    return str(min)+'-'+str(max)", "def dating_range(y):\n    \"\"\"\n    rename or delete\n    \"\"\"\n    return str((y//2)+7)+'-'+str(2*(y-7)) if y>14 else str(int(.9*y))+'-'+str(int(1.1*y))", "def dating_range(age):\n    return f\"{int(age/2+7)}-{(age-7)*2}\" if age>=14 else f\"{int(age-(0.1*age))}-{int(age+(0.1*age))}\"", "def dating_range(age):\n    if age<15 : return str(int(age*0.9))+'-'+str(int(age*1.1))\n    return str((age//2+7)//1)+'-'+str((age-7)*2//1)", "from math import floor\ndef dating_range(age):\n\n    if age <= 14:\n        min = floor(age - .1 * age)\n        max = floor(age + .1 * age)\n        return (\"{}-{}\").format(min,max)\n    min = age // 2 + 7\n    max = (age - 7) * 2\n    return (\"{}-{}\").format(min,max)\n", "import math\ndef dating_range(age):\n    if 14 < age <= 100: return '%i-%i' % (math.floor(age/2)+7, (age-7)*2)\n    else: return '%i-%i' % (math.floor(age-(age*0.1)), age + math.floor(age * 0.1))\n", "from math import floor\n\ndef dating_range(age):\n    if age <= 14:\n        return f'{floor(age - (0.1 * age))}-{floor(age + (0.1 * age))}'\n    else:\n        return f'{floor((age/2) + 7)}-{floor((age-7) * 2)}'", "def dating_range(age):\n    if age > 14:\n        a = int(age / 2 + 7)\n        b = (age - 7) * 2\n    else:\n        a = int(age - 0.10 * age)\n        b = int(age + 0.10 * age)\n\n    return f'{min(a, b)}-{max(a, b)}'", "def dating_range(age):\n    min = int((age / 2) + 7)\n    max = int((age -7) * 2)\n    small_min = int(age - 0.10 * age)\n    small_max = int(age + 0.10 * age)\n    return str(min) + \"-\" + str(max) if age > 14 else str(small_min) + \"-\" + str(small_max)", "from math import floor\n\ndef dating_range(age):\n    if age <= 14:\n        return f'{floor(age * 0.9)}-{floor(age * 1.1)}'\n    else:\n        return f'{floor(age / 2 + 7)}-{floor((age - 7) * 2)}'\n", "def dating_range(age):\n    if age <= 14:\n        msg = str(int(age * 0.9)) + \"-\" + str(int(age * 1.1))\n    else:\n        msg = str(int(age/2)+7) + \"-\" + str((age-7)*2)\n    return msg", "def dating_range(age):\n    if age <= 14:\n        min = age - age / 10\n        max = age + age / 10\n    else:\n        min = age / 2 + 7\n        max = 2 * (age - 7)\n    return \"%d-%d\" % (int(min), int(max))", "def dating_range(age):\n    if age <= 14:\n        min = int(age - age / 10)\n        max = int(age + age / 10)\n    else:\n        min = int(age / 2 + 7)\n        max = int(2 * (age - 7))\n    return \"{}-{}\".format(min, max)\n", "from math import floor\ndef dating_range(age):\n    if age <= 14:\n        mini = [str(floor(age-0.10*age))]\n        maxi = [str(floor(age+0.10*age))]\n        return '-'.join(mini+maxi)\n    else:\n        mini = [str(floor(age/2+7))]\n        maxi = [str(floor((age-7)*2))]\n        return '-'.join(mini+maxi)", "def dating_range(age):\n    if age <= 14:\n        min_ = age - 0.10 * age\n        max_ = age + 0.10 * age\n        return \"{}-{}\".format(int(min_),int(max_))\n    if age > 14:\n        min_ = (age/2)+7\n        max_ = (age-7)*2\n        return \"{}-{}\".format(int(min_),int(max_))", "def dating_range(age):\n    return f'''{int(age/2+7)}-{int(age*2-7*2)}''' if age>14 else f'''{int(0.9*age)}-{int(1.1*age)}'''", "def dating_range(age):\n    if age <= 14:\n        return f\"{int(age - 0.10 * age)}-{int(age + 0.10 * age)}\"\n    return f\"{int(age/2 +7)}-{int((age-7)*2)}\"", "import math\n\ndef dating_range(age):\n\n    if age > 14:\n        min = math.floor(age/2 + 7)\n        max = (age-7) * 2     \n        return '{}-{}'.format(min, max)\n    else: \n        min = math.floor(age - 0.10 * age)\n        max = math.floor(age + 0.10 * age)\n        return '{}-{}'.format(min, max)\n", "from math import floor\ndef dating_range(age):\n    if age <= 14:\n        min = floor(age - 0.1 * age)\n        max = floor(age + 0.1 * age)\n    else:\n        min = floor(age / 2 + 7)\n        max = floor((age - 7) * 2)\n    return '{0}-{1}'.format(min, max)", "from math import floor\ndef dating_range(age):\n    if age>14:\n        min=(age/2)+7\n        max=(age-7)*2\n        return \"{}-{}\".format(floor(min),floor(max))\n    elif age<=14:\n        min=age-0.10*age\n        max=age+0.10*age\n        return \"{}-{}\".format(floor(min),floor(max))\n    #return min-max\n", "def dating_range(age):\n    return f\"{int(age-0.10 * age)}-{int(age+0.10*age)}\" if age < 14 else f\"{int(age / 2 + 7)}-{int((age-7)*2)}\"", "def dating_range(age):\n    if age > 14:\n        min = (age//2)+7\n        max = (age-7)*2\n        return f\"{min}-{max}\"\n    else:\n        min = int(age - 0.10*age)\n        max = int(age + 0.10*age)\n        return f\"{min}-{max}\"", "def dating_range(age):\n    return f'{age//2 + 7}-{(age-7)*2}' if age > 14 else f'{int(age-0.1*age)}-{int(age+0.1*age)}'", "def dating_range(age):\n    if age <= 14:\n        min1 = age - .10 * age\n        max1 = age + .10 * age\n        min2 = int(min1)\n        max2 = int(max1)\n        return str(min2) + \"-\" + str(max2)\n    if age > 14:\n        min = age // 2 + 7\n        max = (age - 7) * 2\n        return str(min) + \"-\" + str(max)", "def dating_range(age):\n    r = (age - 0.10 * age, age + 0.10 * age)\n    if age > 14:\n        r = (age / 2 + 7, (age - 7) * 2)\n    return \"{}-{}\".format(int(r[0]), int(r[1]))\n", "from math import floor\ndef dating_range(age):\n    if age > 14:\n        min = age/2 + 7 \n        max = (age -7)*2\n    else:\n        min = floor(age - 0.10*age)\n        max = floor(age + 0.10*age)\n    return str(floor(min)) + '-' + str(floor(max))"]