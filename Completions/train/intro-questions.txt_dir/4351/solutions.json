["from operator import mul\nfrom functools import reduce\n\ndef find_middle(s):\n    if not s or not isinstance(s,str): return -1\n    \n    lstDig = [int(c) for c in s if c.isnumeric()]\n    if not lstDig: return -1\n    \n    prod = str( reduce(mul,lstDig) )\n    i    = (len(prod) - 1) // 2\n    return int(prod[i:-i or len(prod)])", "def find_middle(string):\n    # \u0415\u0441\u043b\u0438 \u0432 String \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f None, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c -1\n    if string is None:\n        return -1\n    # \u0415\u0441\u043b\u0438 \u0432 String \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c -1  \n    if type(string) is int:\n        return -1\n\n    # \u0415\u0441\u043b\u0438 \u0432 String \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u043c\u0430\u0441\u0441\u0438\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c -1\n    if type(string) is list:\n        return -1\n\n    # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u043d\u043e\u0441\u0438\u043c \u0442\u0443\u0434\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 String\n    spisok = []\n    for i in string:\n        if i.isdigit():\n            spisok.append(i)\n\n    # \u0415\u0441\u043b\u0438 \u0432 String \u043d\u0435 \u0431\u044b\u043b\u043e \u0447\u0438\u0441\u0435\u043b, \u0437\u043d\u0430\u0447\u0438\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c -1\n    if len(spisok) == 0:\n        return -1\n\n    # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b\n    spisok_ans = 1\n\n    # \u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430\n    for i in spisok:\n        spisok_ans *= int(i)\n\n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0442\u0435\u043a\u0441\u0442, \u0434\u043b\u044f \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438\n    spisok = str(spisok_ans)\n\n    # \u0415\u0441\u043b\u0438 \u0441\u043f\u0438\n    if len(spisok) % 2 == 0:\n        if len(spisok) >= 2:\n            spisok[:1].replace(\"0\", \"\")\n        test = int(len(spisok) / 2)\n        answer = spisok[test-1:test+1]\n    else:\n        test = int(len(spisok) / 2)\n        answer = spisok[test:test+1]\n\n    answer = \"\".join(answer)\n    return int(answer)", "from functools import reduce\nfrom operator import mul\n\ndef find_middle(string):\n    try:\n        s = str(reduce(mul, map(int, filter(str.isdigit, string))))\n        q, r = divmod(len(s), 2)\n        return int(s[q+r-1:q+1])\n    except TypeError:\n        return -1", "from functools import reduce\nimport re\n\ndef find_middle(string):\n    try:\n        nums = re.findall(r'\\d', string)\n        result = str(reduce(lambda x, y: x*y, (int(x) for x in nums)))\n        return int(result[(len(result)-1)//2:len(result)//2+1])\n    except:\n        return -1", "from functools import reduce\n\n\ndef find_middle(stg):\n    if not isinstance(stg, str):\n        return -1\n    dig = [int(c) for c in stg if c.isdecimal()]\n    if not dig:\n        return -1\n    prod = str(reduce(int.__mul__, dig))\n    l = len(prod)\n    i, j = (l - 1) // 2, l // 2 + 1\n    return int(prod[i:j])", "def find_middle(string):\n    try:\n        lst = []\n        for i in string:\n            if i.isdigit():\n                lst.append(i)\n        x = str(eval('*'.join(lst)))\n        return int(str(x)[len(x)//2]) if len(x) % 2 == 1 else int(str(x)[len(x)//2-1]+str(x)[len(x)//2])\n    except:\n        return -1\n", "from functools import reduce\nfrom math import ceil\nfrom operator import mul\n\n\ndef find_middle(string):\n    try:\n        n = str(reduce(mul, list(map(int, list(filter(str.isdigit, string))))))\n        size = len(n)\n        return int(n[ceil(size / 2 - 1):size // 2 + 1])\n    except TypeError:\n        return -1\n", "def find_middle(string):\n    if not type(string) == str:\n        return -1\n    numbers = [int(i) for i in string if i.isdigit()]\n    if not numbers:\n        return -1\n    prod = 1\n    for i in numbers:\n        prod *= i\n    prod_str = str(prod)\n    return int(prod_str[(len(prod_str) // 2) - 1:(len(prod_str) // 2) + 1]) if len(prod_str) % 2 == 0 else int(prod_str[len(prod_str)//2])", "def find_middle(string):\n    if type(string) != str:\n        return -1\n    result = 1\n    count = 0\n    for c in string:\n        if c.isdigit():\n            count += 1\n            result *= int(c)\n    if count:\n        if len(str(result)) % 2 == 0:\n            final = str(result)[(len(str(result)) // 2) - 1: (len(str(result)) // 2) + 1]\n            if final[0] == '0':\n                return int(final[1])\n            else:\n                return int(final)\n        else:\n            return int(str(result)[len(str(result)) // 2])\n    else:\n        return -1", "from numpy import prod \ndef find_middle(string):\n    return int(findMiddle(str(prod(list(map(int, filter(type(string).isdigit, string))))))) if type(string) is str and any(char.isdigit() for char in string) else -1\ndef findMiddle(s):\n  return s[int(len(s)/2)-1:int(len(s)/2)+1] if not len(s) % 2 else s[int(len(s)/2):int(len(s)/2)+1]"]