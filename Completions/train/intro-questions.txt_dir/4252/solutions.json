["def merge_arrays(a, b): \n    return sorted(set(a + b))", "def merge_arrays(first, second): \n    return sorted(set(first + second))", "def merge_arrays(first, second): \n    working = []\n    for e in first:\n        if e not in working:\n            working.append(e)\n    for i in second:\n        if i not in working:\n            working.append(i)\n    return sorted(working)", "def update_if_new(d, results, element):\n    if element not in d:\n        results.append(element)\n        d[element] = True\n        \ndef merge_arrays(first, second): \n    seen = dict()\n    results = []\n    i, j, m, n = 0, 0, len(first), len(second)\n    \n    while i < m and j < n:\n        x, y = first[i], second[j]\n        if x < y:\n          update_if_new(seen, results, x)\n          i += 1\n        else:\n          update_if_new(seen, results, y)\n          j += 1\n          \n    for residual in first[i:] + second[j:]:\n        update_if_new(seen, results, residual)\n            \n    return results", "def merge_arrays(first, second): \n    result = list(set(first+second))\n    result.sort()\n    return result", "def merge_arrays(first, second): \n    # your code here\n    first.extend(second)\n    x = list(set(first))\n    x.sort()\n    return x", "def merge_arrays(first, second): \n      first=first+second\n      a=set(first)\n      third=[]\n      for y in a:\n          third.append(y)\n      return(sorted(third))\n", "def merge_arrays(first, second):\n    bound  = 0\n    first  = list(dict.fromkeys(first))\n    second = list(dict.fromkeys(second))\n    \n    for indexB in range(len(second)):\n        for indexA in range(bound, len(first)):\n            if second[indexB] in first:\n                break\n            elif second[indexB] < first[indexA]:\n                first.insert(indexA, second[indexB])\n                bound += 1\n                break\n            elif indexA == len(first) - 1 and second[indexB] > first[indexA]:\n                first.insert(indexA + 1, second[indexB])\n            \n    return first", "def merge_arrays(first, second): \n     first += second\n     return list(sorted(set(first),reverse = False))", "from functools import reduce\nfrom operator import or_\n\ndef merge_arrays(*args): \n    return sorted(reduce(or_, map(set, args)))", "def merge_arrays(*a):\n    result = []\n    for sublist in a:\n        for element in sublist:\n            if not (element in result):\n                result.append(element)\n    return sorted(result)", "def merge_arrays(a, b):\n    return sorted(set(a) | set(b))", "def merge_arrays(f, s): \n    a=set(f+s)\n    return sorted(a)", "merge_arrays = lambda a, b: sorted(set(a + b))", "def merge_arrays(arr1, arr2):\n  merged = []\n  i, k = 0, 0\n  # compare both arrays element-by-element & add smallest num\n  while i < len(arr1) and k < len(arr2):\n    left, right = arr1[i], arr2[k]\n    if left <= right:\n      merged.append(left)\n      i += 1\n    else:\n      merged.append(right)\n      k += 1\n  # add leftovers\n  merged.extend(arr1[i:] if i < len(arr1) else arr2[k:])\n  # remove duplicates\n  merged = list(dict.fromkeys(merged))\n  return merged\n", "merge_arrays = lambda f,g: sorted(set(f+g))", "from typing import List\n\ndef merge_arrays(first: List[int], second: List[int]):\n    \"\"\" Merge two sorted arrays into a single sorted array. \"\"\"\n    return sorted(set(first + second))", "def merge_arrays(first, second): \n    return sorted(list(set(first + second)))\n", "def merge_arrays(first, second):\n    new_list = first + second\n    new_list.sort()\n    \n    return list(dict.fromkeys(new_list))", "def merge_arrays(first, second): \n    newlist = list(set(first + second))\n    newlist.sort()\n    return newlist", "def merge_arrays(first, second): \n    res = first + second\n    res = list(dict.fromkeys(res))\n    res.sort()\n    return res", "def merge_arrays(first, second): \n    return sorted(list(set(first).union(set(second))))", "def merge_arrays(first, second): \n    l = []\n    for n in first:\n        if n not in l:\n            l.append(n)\n    for n in second:\n        if n not in l:\n            l.append(n)\n    return sorted(l)", "def merge_arrays(first, second): \n    first.extend(second)\n    x = list(dict.fromkeys(first))\n    x.sort()\n    return x\n", "def merge_arrays(first, second): \n    first.extend(second)\n    first=list(set(first))\n    return sorted(first)", "def merge_arrays(first,second): \n    x=[]\n    for i in range(0,len(first)):\n        if first[i] not in x: x.append(first[i])\n    for i in range(0, len(second)):\n        if second[i] not in x: x.append(second[i])\n    return sorted(x)\n    \n", "def merge_arrays(first, second): \n    unique = []\n    for f in first:\n        if f not in unique:\n            unique.append(f)\n    for s in second:\n        if s not in unique:\n            unique.append(s)\n    return sorted(unique)", "def merge_arrays(first, second): \n    ans = first + second\n    ans.sort()\n    unique = []\n    for i in ans:\n        if i not in unique:\n            unique.append(i)\n    return unique", "def merge_arrays(first, second): \n    i=0\n    j=0\n    print(first, second)\n    common=[]\n    output=[]\n    if (first==second) and first==[]:\n        return []\n    if first==[]:\n        return second\n    if second==[]:\n        return first\n    while (i<len(first)) and (j<len(second)):\n        if first[i]<second[j]:\n            common.append(first[i])\n            i=i+1\n        elif first[i]==second[j]:\n            common.append(first[i])\n            i=i+1\n            j=j+1\n        elif first[i]>second[j]:\n            common.append(second[j])\n            j=j+1\n    if i<len(first):\n        for k in range(i,len(first)):\n            common.append(first[k])\n    if j<len(second):\n        for k in range(j,len(second)):\n            common.append(second[k])\n    output=[common[0]]\n    k=0\n    for i in range(1,len(common)):\n        if output[k]!=common[i]:\n            output.append(common[i])\n            k=k+1\n    return output", "def merge_arrays(first, second):\n    if isinstance(first, dict) or isinstance(second, dict):\n        return sorted(dict(dict.fromkeys(list(first.keys())+list(second.keys()))))\n    return sorted(dict(dict.fromkeys(first+second)))", "import numpy as np\n\ndef merge_arrays(first, second):\n    return sorted(set(first + second))", "def merge_arrays(first, second):\n    merge, all = [], first + second\n    for n in all:\n        if n not in merge:\n            merge.append(n)\n    return sorted(merge)", "def merge_arrays(first, second): \n    array = sorted(first + second)\n    array_num = [0]\n    for i in array:\n        if i != array_num[-1]:\n            array_num.append(i)\n        else:\n            pass\n    array_num.remove(0)\n    return array_num\n", "def merge_arrays(first, second): \n    cool = list(set(first + second))\n    cool.sort()\n    return cool", "merge_arrays = lambda arr1, arr2: sorted(set(arr1 + arr2))", "merge_arrays = lambda arr1, arr2: sorted([*set(arr1 + arr2)])", "def merge_arrays(first, second): \n    # your code here\n    mylist=first+second\n    return(sorted(list(dict.fromkeys(mylist))))", "def merge_arrays(first, second): \n    a = list(dict.fromkeys(first + second).keys())\n    a.sort()\n    return a", "def merge_arrays(first, second): \n    for i in second:\n        if i not in first:\n            first.append(i)\n    return sorted(list(set(sorted(first))))", "def merge_arrays(first, second):\n    third = set(first + second)\n    return sorted(list(third))", "def merge_arrays(first, second): \n    # your code here\n    s=first+second\n    s.sort()\n    l=[]\n    for i in s:\n        if(i not in l):\n            l.append(i)\n    return l", "def merge_arrays(first, second): \n    th = first + second\n    th = list(set(th))\n    th.sort()\n    return th", "def merge_arrays(first, second):\n    bigboy = []\n    for x in second:\n        if x not in bigboy:\n            bigboy.append(x)\n    for x in first:\n        if x not in bigboy:\n            bigboy.append(x)\n    bigboy.sort()\n    return bigboy", "def merge_arrays(first, second): \n    x=[]\n    for i in range(len(first)):\n        if first[i] not in x:\n            x.append(first[i])\n    for i in range(len(second)):        \n        if second[i] not in x:\n            x.append(second[i])\n    return sorted(x)\n            \n", "from itertools import groupby\n\ndef merge_arrays(first, second): \n    arr = first + second\n    arr.sort()\n    res = [i for i, j in groupby(arr)]\n    return res", "def merge_arrays(first, second):\n    M = list(set(first + second))\n    M.sort()\n    return M", "def merge_arrays(first, second): \n    x = sorted(first + second)\n    return list(dict.fromkeys(x))", "def merge_arrays(f, s):\n    x = list(set(f) | set(s))\n    return sorted(x)\n    pass", "def merge_arrays(first, second): \n    return sorted(set([*first, *second]))", "def merge_arrays(first, second): \n    combined = set(first+second)\n    return sorted(list(combined))", "def merge_arrays(first: list, second: list) -> list:\n    return sorted(list(set(first + second)))", "def merge_arrays(first, second): \n    x = (first+second)\n    x = sorted(set(x))\n    return x", "def merge_arrays(first, second):\n    print(first, second)\n    first.extend(second)\n    return sorted(list(set(first)))", "def merge_arrays(first, second): \n    a = set(first)\n    b = set(second)\n    return sorted(list(a|b))\n", "def merge_arrays(first, second): \n    st = set( first + second)\n    return sorted(list(st))", "def merge_arrays(a, b): \n    return sorted(set(a + b))\n\nmerge_arrays([2, 4, 8], [2, 4, 6])", "def merge_arrays(first, second): \n    l=first+second\n    l.sort()\n    r=[]\n    for i in l:\n        if i not in r:\n            r.append(i)\n    return r", "def merge_arrays(first, second): \n    first = first+second\n    res = [] \n    for i in first: \n        if i not in res: \n            res.append(i) \n    return sorted(res)", "def merge_arrays(first, second): \n    x = []\n    for i in range(len(first)):\n        x.append(first[i])\n    for j in range(len(second)):\n        x.append(second[j])\n    y = []\n    for z in range(len(x)):\n        if x[z] in y:\n            y = y\n        else:\n            y.append(x[z])\n \n    return sorted(y)", "def merge_arrays(arr1, arr2):\n  for i in arr2:\n    arr1.append(i)\n  return sorted(set(arr1))", "def merge_arrays(first, second): \n    first.extend(second)\n    sett = set(first)\n    arr = list(sett)\n    arr.sort()\n    return arr", "def merge_arrays(first, second):\n    arr = first + second\n    arr1=[]\n    for i in arr:\n        if i not in arr1:\n            arr1.append(i)\n    return sorted(arr1)", "def merge_arrays(f, s):\n    t = f + s\n    res = sorted(t)\n    res = set(res)\n    return list(sorted(res))\n    \n", "# Write a function that merges two sorted arrays into a single one. \n# The arrays only contain integers.\n# Also, the final outcome must be sorted and not have any duplicate.\n\n\ndef merge_arrays(a, b): \n    a.extend(b)\n    return sorted(list(set(a)))", "def merge_arrays(first, second):\n    hashing = set()\n    for i in first:\n        hashing.add(i)\n    for j in second:\n        hashing.add(j)\n    return sorted(list(hashing))\n", "def merge_arrays(first, second): \n    a = []\n    for i in first:\n        if i not in a: a.append(i)\n    for i in second:\n        if i not in a: a.append(i)\n    a.sort()\n    return a", "def merge_arrays(first, second): \n    final=first+second\n    final.sort()\n    return list(dict.fromkeys(final))", "def merge_arrays(first, second): \n    test = list(set(first + second))\n    test.sort()\n    return test", "def merge_arrays(first, second): \n    new_arr = list(set(first+second))\n    new_arr.sort()\n    return new_arr", "def merge_arrays(first, second): \n    first.extend(second)\n    res=list(set(first))\n    res.sort()\n    return res", "def merge_arrays(first, second): \n    my_set = set(first + second)\n    result = list(my_set)\n    result.sort()\n    return result", "def merge_arrays(first, second): \n    a=list(set(first))\n    b=list(set(second))\n    return sorted(list(set(a+b)))", "import numpy as np\ndef merge_arrays(first, second): \n    return sorted(np.unique(first+second))\n", "def merge_arrays(first, second): \n    list = sorted(set(first+second))\n    return list", "def merge_arrays(first, second): \n    result = sorted(first+second)\n    \n    i=0\n    while(i<=(len(result)-2)):\n        \n        \n        if result[i] == result[i+1]:\n            del result[i]\n        else:\n            i=i+1\n        \n    return result\n    # your code here\n", "def merge_arrays(first, second): \n    first.extend(second)\n    result = list(set(first))\n    result.sort()\n    return result", "def merge_arrays(first, second): \n    final = set()\n    for i in first:\n        final.update(first)\n        final.update(second)\n    return sorted(final)", "def merge_arrays(first, second): \n    c = []\n    for x in first:\n        c.append(x)\n    for x in second:\n        c.append(x)\n    return sorted(set(c))", "def merge_arrays(first, second): \n    x = first+second\n    y = []\n    for i in x:\n        if i in y:\n            continue\n        else:\n            y.append(i)\n    y.sort()\n    return y", "def merge_arrays(first, second):\n    a = []\n    for i in first:\n        if i not in a:\n            a.append(int(i))\n    for i in second:\n        if i not in a:\n            a.append(int(i))\n            a.sort()\n    return a", "def merge_arrays(first, second): \n    m_tup = set(first + second)\n    n_tup = list(m_tup)\n    n_tup.sort()\n    return(n_tup)", "def merge_arrays(first, second): \n    x=first+second\n    return sorted(set(x))", "def merge_arrays(first, second):  \n    newlist = []\n    for eachvalue in first:\n        if eachvalue not in newlist:\n            newlist.append(eachvalue)\n    for eachvalue in second:\n        if eachvalue not in newlist:\n            newlist.append(eachvalue)\n    return sorted(newlist)", "def merge_arrays(first, second): \n    concat_list = sorted(list(set(first + second)))\n    return concat_list", "def merge_arrays(arr1, arr2):\n  res = []\n  i, k = 0, 0\n  while i < len(arr1) or k < len(arr2):\n    left = arr1[i] if i < len(arr1) else float(\"inf\")\n    right = arr2[k] if k < len(arr2) else float(\"inf\")\n    if left <= right:\n      res.append(left) if not res or res[-1] != left else None\n      i += 1\n    else:\n      res.append(right) if not res or res[-1] != right else None\n      k += 1\n  return res", "def merge_arrays(first, second): \n    first_set = set(first)\n    second_set = set(second)\n    inter = first_set.intersection(second_set)\n    unio = first_set.union(second_set)\n    my_list = list(unio)\n    return sorted(my_list)", "def merge_arrays(first, second): \n    # your code here\n    a=first+second\n    res=[]\n    for x in a:\n        if x not in res:\n            res.append(x)\n    return sorted(res)", "def merge_arrays(first, second): \n    # your code here\n    first.sort()\n    second.sort()\n    third=first+second\n    ls=[]\n    for i in third:\n        if i in ls:\n            continue\n        ls.append(i)\n    ls.sort()\n    return ls", "def merge_arrays(first, second):\n    res = []\n    for num in first:\n        if num not in res:\n            res.append(num)\n    for num in second:\n        if num not in res:\n            res.append(num)\n    return sorted(res)            \n   \n", "def merge(array):\n    mid = len(array)\n    if mid > 1:\n        left = merge(array[:(mid//2)])\n        right = merge(array[(mid//2):])\n        array = []\n        \n        while len(left) != 0 and len(right) != 0:\n            if left[0] < right[0]:\n                array.append(left.pop(0))\n            else:\n                array.append(right.pop(0))\n        if len(left) != 0:\n            array.extend(left)\n        elif len(right) != 0:\n            array.extend(right)\n            \n    return array\n    \ndef merge_arrays(first, second): \n    return merge(list(set(first + second)))", "def merge_arrays(first, second): \n    nowa = first + second\n    nowa = list(set(nowa))\n    nowa.sort()\n    return nowa", "def merge_arrays(first, second): \n\n\n    a = set(first)\n    b = set(second)\n\n    return sorted(list(a.union(b)))", "\nfrom numpy import unique\n\ndef merge_arrays(first, second): \n    return sorted(unique(first + second))", "def merge_arrays(first, second): \n    merge = sorted(set(first + second))\n    return merge", "def merge_arrays(first, second):\n    for i in first:\n        while first.count(i)>1:\n            first.remove(i)\n    for i in second:\n        if not i in first:\n            first.append(i)\n    first.sort()\n    return first", "def merge_arrays(first, second): \n    a = first + second\n    a = list(dict.fromkeys(a))\n    a.sort()\n    return a", "def merge_arrays(first, second): \n    m = [i for i in set(first + second)]\n    return sorted(m)", "def merge_arrays(first, second): \n    return [i for i in sorted(set(first + second))]", "def merge_arrays(first, second): \n    # your code here\n    pass\n    l=[]\n    l1=[]\n    \n    while(first!=[] and second!=[]):\n        if first[0]<second[0]:\n            l.append(first[0])\n            del first[0]\n        elif second[0]<first[0]:\n            l.append(second[0])\n            del second[0]\n        else:\n            l.append(first[0])\n            del first[0]\n            del second[0]\n\n    if first==[]: l.extend(second)\n    elif second==[]: l.extend(first)\n    \n    for i in l:\n        if i not in l1:\n            l1.append(i)\n            \n    return l1", "def merge_arrays(first, second): \n    res = [] \n    [res.append(x) for x in first+second if x not in res] \n    return sorted(res)"]