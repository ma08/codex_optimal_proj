["class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) < 3:\n            return max(nums)\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return max(dp)", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        # if len(nums) <= 2: return max(nums+[0])\n        now, last = 0, 0\n        \n        for i in nums:\n            last, now = now, max(now, last + i)\n        \n        return now", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        \n        max_to_i = [None] * n\n        max_to_i[0] = nums[0]\n        max_to_i[1] = max(nums[0], nums[1])\n        \n        for i in range(2, n):\n            max_to_i[i] = max(nums[i] + max_to_i[i-2], max_to_i[i-1])\n            \n        # max_to_i has len n, and contains max with the subarray [0:i].\n        # Total result is just max_to_i[n-1]\n        \n        return max_to_i[-1]", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if(n==0):\n            return 0\n        if(n<=2):\n            return max(nums)\n        else:\n            dp = [0 for i in nums]\n            dp[0] = nums[0]\n            dp[1] = nums[1]\n            \n            for i in range(2,n):\n                dp[i] = max(dp[i-1],max(dp[j]+nums[i] for j in range(i-1)))\n            return max(dp)\n", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) <= 2:\n            return max(nums)\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(dp[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(nums[i] + dp[i-2], dp[i-1])\n        return dp[-1]", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        n=len(nums)\n        if n==0:\n            return 0\n        if n==1:\n            return nums[0]\n        dp=[0]*(n+1)\n        dp[0]=0\n        dp[1]=nums[0]\n        a=1\n        while a<n:\n            dp[a+1]=max(dp[a-1]+nums[a],dp[a])\n            a+=1\n        return dp[n]\n", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        l1 = [0]*n\n        if n==0:\n            return 0\n        elif n==1:\n            return nums[0]\n        elif n==2:\n            return max(nums[0],nums[1])\n        \n        l1[0],l1[1]=nums[0],max(nums[0],nums[1])\n        \n        for i in range(2,n):\n            l1[i] = max(l1[i-1],nums[i]+l1[i-2])\n            \n        return max(l1)\n", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        robbed = [nums[0]]\n        maxMoney = robbed[0]\n        #print(nums)\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            for j in range(len(robbed) - 1):\n                cur = max(nums[i] + robbed[j], cur)\n            robbed.append(cur)\n            if cur > maxMoney:\n                maxMoney = cur\n        #print(robbed)\n        return maxMoney\n        \n", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n    \n        dp = [0]\n        dp.append(nums[0])\n\n        for i in range(2,len(nums)+1):\n            dp.append(max(dp[i-1],dp[i-2]+nums[i-1]))\n\n        return dp[len(dp)-1]", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        prevMax=0\n        currMax=0\n        \n        for num in nums:\n            temp=currMax\n            currMax=max(prevMax+num, currMax)\n            prevMax=temp\n            \n        return currMax    ", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        size = len(nums)\n        max_sums = nums.copy()\n        for i, num in enumerate(nums):\n            for j in range(0, i - 1):\n                if 0 <= j < size:\n                    max_sums[i] = max(max_sums[i], num + max_sums[j])\n        return max(max_sums)", "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = nums[1]\n        res = max(dp)\n        for i in range(2, len(dp)):\n            for j in range(i-1):\n                dp[i] = max(dp[i], dp[j] + nums[i])\n                res = max(res, dp[i])\n\n        return res"]