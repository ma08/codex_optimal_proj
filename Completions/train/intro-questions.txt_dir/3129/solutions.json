["def divisible_by_three(s): \n    return int(s) % 3 == 0\n\n", "def divisible_by_three(st):\n    return (sum([int(i) for i in st]) % 3) == 0\n", "def divisible_by_three(st): \n    return sum([int(c) for c in st]) % 3 == 0", "import re\ndef divisible_by_three(st):\n    return re.match(\"(((((0|3)|6)|9)|((2|5)|8)((((0|3)|6)|9))*((1|4)|7))|(((1|4)|7)|((2|5)|8)((((0|3)|6)|9))*((2|5)|8))(((((0|3)|6)|9)|((1|4)|7)((((0|3)|6)|9))*((2|5)|8)))*(((2|5)|8)|((1|4)|7)((((0|3)|6)|9))*((1|4)|7)))+$\", st) != None", "def divisible_by_three(s):\n    return not int(s) % 3", "# You can just do \"int(st) % 3 == 0\"\n\ndef divisible_by_three(st): \n    while len(st) > 1:\n        st = str(sum(map(int, st)))\n    return st in \"369\"", "def divisible_by_three(st): \n    num_str = str(st)\n    sum = 0\n    # iterate and add the numbers up\n    for i in range(0, len(num_str)):\n        sum += int(num_str[i])\n    # check if numbers are divisible by 3\n    if sum % 3 == 0:\n        return True\n    else:\n        return False\n    pass", "def divisible_by_three(st): \n    sum = 0\n    while int(st) > 0:\n       digit = int(st)%10\n       sum = sum + digit\n       st = int(st)//10\n    if sum%3 == 0:\n        return True\n    else:\n        return False ", "def divisible_by_three(string):\n    return not (sum(int(n) for n in string) % 3)", "def divisible_by_three(stg): \n    return sum(int(d) for d in stg) % 3 == 0\n    \n# `int(stg) % 3 == 0` is straight but not what was asked\n"]