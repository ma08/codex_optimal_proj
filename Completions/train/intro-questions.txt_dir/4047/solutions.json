["def to_leet_speak(str):\n    return str.translate(str.maketrans(\"ABCEGHILOSTZ\", \"@8(36#!10$72\"))", "def to_leet_speak(str):\n    leet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H': '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n    for key in leet:\n        str = str.replace(key, leet[key])\n    return str", "table = str.maketrans(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    '@8(D3F6#!JK1MN0PQR$7UVWXY2'\n)\n\ndef to_leet_speak(text):\n    return text.translate(table)\n", "def to_leet_speak(s):\n    r = {\".\": \".\", \"!\": \"!\", \"?\": \"?\", \",\": \",\",\" \": \" \", \"A\":'@', \"B\":'8', \"C\":'(', \"D\":'D', \"E\":'3', \"F\":'F', \"G\":'6', \"H\":'#', \"I\":'!', \"J\":'J', \"K\":'K', \"L\":'1', \"M\":'M', \"N\":'N', \"O\":'0', \"P\":'P', \"Q\":'Q', \"R\":'R', \"S\":'$', \"T\":'7', \"U\":'U', \"V\":'V', \"W\":'W', \"X\":'X', \"Y\":'Y', \"Z\":'2'}\n    return ''.join(r[c] for c in s)\n", "from string import ascii_uppercase\n\ntr = str.maketrans(ascii_uppercase, '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n\ndef to_leet_speak(s):\n    return s.translate(tr)\n", "def to_leet_speak(s):\n    return s.translate(str.maketrans(\"ABCEGHILOSTZ\", \"@8(36#!10$72\"))", "LEET = {'A': '@', 'B': '8', 'C': '(', 'E': '3', 'G': '6', 'H': '#',\n        'I': '!', 'L': '1', 'O': '0', 'S': '$', 'T': '7', 'Z': '2'}\n\n\ndef to_leet_speak(s):\n    return ''.join(LEET.get(a, a) for a in s)", "def to_leet_speak(str):\n    leet = {'A': '@', 'B': '8', 'C': '(', 'E': '3', 'G': '6', 'H': '#', 'I': '!', 'L': '1', 'O': '0', 'S': '$', 'T': '7', 'Z': '2'}\n    return \"\".join([leet[letter] if letter in leet.keys() else letter for letter in str])", "table = str.maketrans(\"ABCEGHILOSTZ\", \"@8(36#!10$72\")\n\ndef to_leet_speak(stg):\n    return stg.translate(table)\n\n", "leet_dic = {  'A' : '@',  'B' : '8',  'C' : '(',  'D' : 'D',  'E' : '3',  'F' : 'F',\n  'G' : '6',  'H' : '#',  'I' : '!',  'J' : 'J',  'K' : 'K',  'L' : '1',  'M' : 'M',\n  'N' : 'N',  'O' : '0',  'P' : 'P',  'Q' : 'Q', 'R' : 'R',  'S' : '$',  'T' : '7',\n  'U' : 'U',  'V' : 'V',  'W' : 'W',  'X' : 'X',  'Y' : 'Y',  'Z' : '2'  }\ndef to_leet_speak(str):\n    return ''.join([leet_dic[c] if c.isalpha() else c for c in str ])\n", "def to_leet_speak(str):\n    return str.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR$7UVWXY2'))", "def to_leet_speak(str):\n    return str.replace('A', '@').replace('B', '8').replace('C', '(').replace('E', '3').replace('G', '6').replace('H', '#').replace('I', '!').replace('L', '1').replace('O', '0').replace('S', '$').replace('T', '7').replace('Z', '2')", "LEET_ALPHABET = '@8(D3F6#!JK1MN0PQR$7UVWXY2'\n\ndef to_leet_speak(str):\n    return ''.join(LEET_ALPHABET[ord(c) - ord('A')] if c.isalpha() else c for c in str)", "ALPHABET = {\n  'A': '@', 'B': '8', 'C': '(', 'D': 'D', 'E': '3',\n  'F': 'F', 'G': '6', 'H': '#', 'I': '!', 'J': 'J',\n  'K': 'K', 'L': '1', 'M': 'M', 'N': 'N', 'O': '0',\n  'P': 'P', 'Q': 'Q', 'R': 'R', 'S': '$', 'T': '7',\n  'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y',\n  'Z': '2'\n}\n\n\nto_leet_speak = lambda s: \"\".join(ALPHABET.get(c, c) for c in s)", "reference = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\ndef to_leet_speak(str):\n    return \"\".join([reference[key] for key in str])", "alphabet = dict(list(zip(__import__('string').ascii_uppercase, '@8(D3F6#!JK1MN0PQR$7UVWXY2')))\n\n\ndef to_leet_speak(str_):\n    return ''.join(alphabet.get(x, x) for x in str_)\n", "def to_leet_speak(str):\n    newStr, replace = '', '@8(D3F6#!JK1MN0PQR$7UVWXY2'\n    for each in str:\n        if ord(each) - ord('A') >= 0 <= 26:\n            newStr += replace[ord(each) - ord('A')]\n        else:\n            newStr += each\n    return newStr", "def to_leet_speak(str):\n    leet={'A':'@','B':'8','C':'(','E':'3','G':'6','H':'#','I':'!','L':'1','O':'0','S':'$','T':'7','Z':'2'}\n    newstr=''\n    for c in str:\n        if c in leet:\n            newstr+=leet[c]\n        else:\n            newstr+=c\n    return newstr", "speak = {\n  \"A\" : '@',\n  \"B\" : '8',\n  \"C\" : '(',\n  \"D\" : 'D',\n  \"E\" : '3',\n  \"F\" : 'F',\n  \"G\" : '6',\n  \"H\" : '#',\n  \"I\" : '!',\n  \"J\" : 'J',\n  \"K\" : 'K',\n  \"L\": '1',\n  \"M\" : 'M',\n  \"N\" : 'N',\n  \"O\" : '0',\n  \"P\" : 'P',\n  \"Q\" : 'Q',\n  \"R\" : 'R',\n  \"S\" : '$',\n  \"T\" : '7',\n  \"U\" : 'U',\n  \"V\" : 'V',\n  \"W\" : 'W',\n  \"X\" : 'X',\n  \"Y\" : 'Y',\n  \"Z\" : '2',\n  \" \" : \" \"\n}\n\n\ndef to_leet_speak(str):\n   return \"\".join(speak[i] for i in str)", "def to_leet_speak(s):\n    d = {\n        'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D',\n        'E' : '3', 'F' : 'F', 'G' : '6', 'H' : '#', \n        'I' : '!', 'J' : 'J', 'K' : 'K', 'L' : '1',\n        'M' : 'M', 'N' : 'N', 'O' : '0', 'P' : 'P',\n        'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n        'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X',\n        'Y' : 'Y', 'Z' : '2', ' ' : ' '\n    }\n\n    return ''.join(d[c] for c in s)", "to_leet_speak=lambda str: (lambda base: \"\".join([base[l] if l in base else l for l in str]))({'A':'@','B':'8','C':'(','E':'3','G':'6','H':'#','I':'!','L':'1','O':'0','S':'$','T':'7','Z':'2'})", "to_leet_speak = (lambda s: \n    s.translate(\n        str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n        ))", "LEETDICT = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\n\nto_leet_speak = lambda str: \"\".join([LEETDICT[i] for i in list(str)])", "import string\n\ndef to_leet_speak(s):\n    return s.translate(str.maketrans({\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}))", "def to_leet_speak(str):\n    \n    st = \"\"\n    d =   {'A' : '@',\n           'B' : '8',\n           'C' : '(',\n           'D' : 'D',\n           'E' : '3',\n           'F' : 'F',\n           'G' : '6',\n           'H' : '#',\n           'I' : '!',\n           'J' : 'J',\n           'K' : 'K',\n           'L' : '1',\n           'M' : 'M',\n           'N' : 'N',\n           'O' : '0',\n           'P' : 'P',\n           'Q' : 'Q',\n           'R' : 'R',\n           'S' : '$',\n           'T' : '7',\n           'U' : 'U',\n           'V' : 'V',\n           'W' : 'W',\n           'X' : 'X',\n           'Y' : 'Y',\n           'Z' : '2',\n           ' ' : ' ' }\n    for x in range(len(str)):\n        st = st + d.get(str[x])\n    return st\n           \n           \n", "def to_leet_speak(str):\n    x= {\n      'A' : '@',\n      'B' : '8',\n      'C' : '(',\n      'D' : 'D',\n      'E' : '3',\n      'F' : 'F',\n      'G' : '6',\n      'H' : '#',\n      'I' : '!',\n      'J' : 'J',\n      'K' : 'K',\n      'L' : '1',\n      'M' : 'M',\n      'N' : 'N',\n      'O' : '0',\n      'P' : 'P',\n      'Q' : 'Q',\n      'R' : 'R',\n      'S' : '$',\n      'T' : '7',\n      'U' : 'U',\n      'V' : 'V',\n      'W' : 'W',\n      'X' : 'X',\n      'Y' : 'Y',\n      'Z' : '2'\n    }\n    z = \"\"\n    for i in str:\n        if i in x:\n            z+=x[i]\n        else:\n            z+=i\n    return z\n", "def to_leet_speak(str):\n    leet_dict = {'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3',\n             'F' : 'F', 'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J',\n             'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0',\n             'P' : 'P', 'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n             'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', 'Y' : 'Y',\n             'Z' : '2'}\n    return ''.join([leet_dict.get(char.upper(), ' ') for char in str])\n", "def to_leet_speak(str):\n    str = str.upper()\n    new = str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"@8(D3F6#!JK1MN0PQR$7UVWXY2\")\n    return str.translate(new)\n", "def to_leet_speak(s):\n    d = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n   \n}\n    res = \"\"\n    for i in s:\n        res += d[i]\n    return res\n", "\nd = {\n          'A': '@',\n          'B' : '8',\n          'C' : '(',\n          'D' : 'D',\n          'E' : '3',\n          'F' : 'F',\n          'G' : '6',\n          'H' : '#',\n          'I' : '!',\n          'J': 'J',\n          'K' : 'K',\n          'L' : '1',\n          'M' : 'M',\n          'N' : 'N',\n          'O' : '0',\n          'P' : 'P',\n          'Q' : 'Q',\n          'R' : 'R',\n          'S' : '$',\n          'T' : '7',\n          'U' : 'U',\n          'V' : 'V',\n          'W' : 'W',\n          'X' : 'X',\n          'Y' : 'Y',\n          'Z' : '2'\n}\n\ndef to_leet_speak(str):\n\n    a = []\n    \n    for i in range(len(str)):\n        \n        if str[i] in list(d.keys()):\n            \n            a.append(d[str[i]])\n              \n        else:\n            \n            a.append(str[i])\n                                   \n    p = \"\".join(a)\n\n    return p\n\n", "def to_leet_speak(input_string):\n    LEET_DICT = {'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3',\n             'F' : 'F', 'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J',\n             'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0',\n             'P' : 'P', 'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n             'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', 'Y' : 'Y',\n             'Z' : '2'}\n    output_string = ''\n    for char in input_string:\n        output_string += LEET_DICT.get(char.upper(),char)\n    return output_string", "LEET_DICT = {'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3',\n             'F' : 'F', 'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J',\n             'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0',\n             'P' : 'P', 'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n             'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', 'Y' : 'Y',\n             'Z' : '2'}\ndef to_leet_speak(english): \n    leet_translation = ''\n    for letter in english.upper():\n        if letter in LEET_DICT:\n            leet_translation += LEET_DICT.get(letter)\n        else:\n            leet_translation += letter\n    return leet_translation     ", "elite_dict = {'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3',\n             'F' : 'F', 'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J',\n             'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0',\n             'P' : 'P', 'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n             'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', 'Y' : 'Y',\n             'Z' : '2'}\n\ndef to_leet_speak(string):\n    res = ''\n    \n    for i in range(len(string)):\n        if string[i].upper() in elite_dict:\n            res += (elite_dict[string[i].upper()])\n        else:\n            res += (' ')\n                   \n    return res", "def to_leet_speak(input_str):\n    LEET_DICT = {'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3',\n             'F' : 'F', 'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J',\n             'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0',\n             'P' : 'P', 'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7',\n             'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', 'Y' : 'Y',\n             'Z' : '2'}\n    \n    output_str = ''\n    for char in input_str.upper():\n        if char in LEET_DICT.keys():\n            output_str += LEET_DICT[char]\n        else:\n            output_str += char\n    return output_str", "TRANS_TABLE = str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n\ndef to_leet_speak(text):\n    return text.translate(TRANS_TABLE)", "def to_leet_speak(text):\n    return text.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR$7UVWXY2'))", "import string\n\n\nstr1 = string.ascii_uppercase\nstr2 = '@8(D3F6#!JK1MN0PQR$7UVWXY2'\n\ndef to_leet_speak(s):\n    table = str.maketrans(str1, str2)\n    return s.translate(table)\n", "def to_leet_speak(str):\n    output = ''\n    \n    leet_dict = {\n        \"A\" : '@',\n        \"B\" : '8',\n        \"C\" : '(',\n        \"D\" : 'D',\n        \"E\" : '3',\n        \"F\" : 'F',\n        \"G\" : '6',\n        \"H\" : '#',\n        \"I\" : '!',\n        \"J\" : 'J',\n        \"K\" : 'K',\n        \"L\" : '1',\n        \"M\" : 'M',\n        \"N\" : 'N',\n        \"O\" : '0',\n        \"P\" : 'P',\n        \"Q\" : 'Q',\n        \"R\" : 'R',\n        \"S\" : '$',\n        \"T\" : '7',\n        \"U\" : 'U',\n        \"V\" : 'V',\n        \"W\" : 'W',\n        \"X\" : 'X',\n        \"Y\" : 'Y',\n        \"Z\" : '2',\n        \" \" : ' '\n    }\n    for letter in str:\n        letter = letter.replace(letter, leet_dict[letter])\n        output += letter\n    return output", "def to_leet_speak(str):\n    d={\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',' ':' '\n}\n    l=[d[i] for i in str]\n    return ''.join(l)\n", "alphabet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n\ndef to_leet_speak(str):\n    new_string = ''\n    for char in str:\n        new_string += alphabet[char] if char != ' ' else ' '\n    return new_string\n", "def to_leet_speak(str):\n    table_leet = {\n      \"A\" : '@',\n      \"B\" : '8',\n      \"C\" : '(',\n      \"D\" : 'D',\n      \"E\" : '3',\n      \"F\" : 'F',\n      \"G\" : '6',\n      \"H\" : '#',\n      \"I\" : '!',\n      \"J\" : 'J',\n      \"K\" : 'K',\n      \"L\" : '1',\n      \"M\" : 'M',\n      \"N\" : 'N',\n      \"O\" : '0',\n      \"P\" : 'P',\n      \"Q\" : 'Q',\n      \"R\" : 'R',\n      \"S\" : '$',\n      \"T\" : '7',\n      \"U\" : 'U',\n      \"V\" : 'V',\n      \"W\" : 'W',\n      \"X\" : 'X',\n      \"Y\" : 'Y',\n      \"Z\" : '2',\n      \" \" : \" \"\n    }\n    out = \"\"\n    for let in str.upper():\n        out+=table_leet[let]\n    return out\n", "def to_leet_speak(str):\n    \n    ret = \"\"\n    \n    dict = {\n          \"A\" : \"@\",\n          \"B\" : \"8\",\n          \"C\" : \"(\",\n          \"D\" : \"D\",\n          \"E\" : \"3\",\n          \"F\" : \"F\",\n          \"G\" : \"6\",\n          \"H\" : \"#\",\n          \"I\" : \"!\",\n          \"J\" : \"J\",\n          \"K\" : \"K\",\n          \"L\" : \"1\",\n          \"M\" : \"M\",\n          \"N\" : \"N\",\n          \"O\" : \"0\",\n          \"P\" : \"P\",\n          \"Q\" : \"Q\",\n          \"R\" : \"R\",\n          \"S\" : \"$\",\n          \"T\" : \"7\",\n          \"U\" : \"U\",\n          \"V\" : \"V\",\n          \"W\" : \"W\",\n          \"X\" : \"X\",\n          \"Y\" : \"Y\",\n          \"Z\" : \"2\"\n    }\n            \n    for i in range(len(str)):\n        if(str[i] in dict):\n            ret = ret + dict[str[i]]\n        else:\n            ret = ret + str[i]\n    \n    print(ret)\n    return ret\n", "def to_leet_speak(str):\n    wasteoftime ={\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\n    return \"\".join(wasteoftime[i] for i in str)\n", "def to_leet_speak(s):\n    leet = { 'A': '@', 'B': '8', 'C': '(', 'D': 'D', 'E': '3', 'F': 'F', 'G': '6', 'H': '#', 'I': '!', 'J': 'J', 'K': 'K', 'L': '1', 'M': 'M', 'N': 'N', 'O': '0', 'P': 'P', 'Q': 'Q', 'R': 'R', 'S': '$', 'T': '7', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': '2'}\n    return s.upper().translate(s.maketrans(leet))", "def to_leet_speak(str):\n    leet = { 'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3', 'F' : 'F', \\\n            'G' : '6', 'H' : '#', 'I' : '!', 'J' : 'J', 'K' : 'K', 'L' : '1', \\\n            'M' : 'M', 'N' : 'N', 'O' : '0', 'P' : 'P', 'Q' : 'Q', 'R' : 'R', \\\n            'S' : '$', 'T' : '7', 'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X', \\\n            'Y': 'Y', 'Z' : '2' }\n    output = ''\n    for letter in str:\n        if letter in leet:\n            output += leet[letter]\n        else:\n            output += letter\n    return output", "def to_leet_speak(str):\n    alphabet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n    return str.translate(str.maketrans(alphabet))\n", "def to_leet_speak(str):\n    dict = {\n          \"A\" : '@',\n          \"B\" : '8',\n          \"C\" : '(',\n          \"D\" : 'D',\n          \"E\" : '3',\n          \"F\" : 'F',\n          \"G\" : '6',\n          \"H\" : '#',\n          \"I\" : '!',\n          \"J\" : 'J',\n          \"K\" : 'K',\n          \"L\" : '1',\n          \"M\" : 'M',\n          \"N\" : 'N',\n          \"O\" : '0',\n          \"P\" : 'P',\n          \"Q\" : 'Q',\n          \"R\" : 'R',\n          \"S\" : '$',\n          \"T\" : '7',\n          \"U\" : 'U',\n          \"V\" : 'V',\n          \"W\" : 'W',\n          \"X\" : 'X',\n          \"Y\" : 'Y',\n          \"Z\" : '2',\n            \" \" : ' '\n}\n    l = []\n    string = list(str)\n    for key in string : \n        l.append(dict[key])\n    return \"\".join(l)\n\n\n", "def to_leet_speak(str):\n    x = {'A' : '@','B' : '8','C' : '(','D' : 'D','E' : '3','F' : 'F','G' : '6','H' : '#','I' : '!','J' : 'J','K' : 'K','L' : '1','M' : 'M','N' : 'N','O' : '0','P' : 'P','Q' : 'Q','R' : 'R','S' : '$','T' : '7','U' : 'U','V' : 'V','W' : 'W','X' : 'X','Y' : 'Y','Z' : '2'}\n    y = \"\"\n    for i in str:\n        try:\n            y += x[i]\n        except:\n            y += i\n    return y", "d={\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n\ndef to_leet_speak(s):\n    return ''.join(d[c] if c in d else c for c in s)\n", "def to_leet_speak(str):\n    table = str.maketrans({'A': '@', 'B': '8', 'C': '(', 'E': '3', 'G': '6', 'H': '#', 'I': '!', 'L': '1', 'O': '0', 'S': '$', 'T': '7', 'Z': '2'})\n    return str.translate(table)", "def to_leet_speak(str):\n    return str.translate(str.maketrans('IHACOLZEGTBS', '!#@(0123678$'))\n", "D = {\n  65 : '@',\n  66 : '8',\n  67 : '(',\n  68 : 'D',\n  69 : '3',\n  70 : 'F',\n  71 : '6',\n  72 : '#',\n  73 : '!',\n  74 : 'J',\n  75 : 'K',\n  76 : '1',\n  77 : 'M',\n  78 : 'N',\n  79 : '0',\n  80 : 'P',\n  81 : 'Q',\n  82 : 'R',\n  83 : '$',\n  84 : '7',\n  85 : 'U',\n  86 : 'V',\n  87 : 'W',\n  88 : 'X',\n  89 : 'Y',\n  90 : '2'\n}\ndef to_leet_speak(str):\n    return str.translate(D)\n", "def to_leet_speak(str):\n    trans = str.maketrans('ABCEGHILOSTZ', '@8(36#!10$72')\n    return str.translate(trans)", "from string import ascii_uppercase\n\ndef to_leet_speak(str):\n    trans = str.maketrans(ascii_uppercase, '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n    return str.translate(trans)", "def to_leet_speak(str): #\n    return str.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR$7UVWXY2'))", "def to_leet_speak(str):\n    dict = {'A' : '@',\n            'B' : '8',\n            'C' : '(',\n            'D' : 'D',\n            'E' : '3',\n            'F' : 'F',\n            'G' : '6',\n            'H' : '#',\n            'I' : '!',\n            'J' : 'J',\n            'K' : 'K',\n            'L' : '1',\n            'M' : 'M',\n            'N' : 'N',\n            'O' : '0',\n            'P' : 'P',\n            'Q' : 'Q',\n            'R' : 'R',\n            'S' : '$',\n            'T' : '7',\n            'U' : 'U',\n            'V' : 'V',\n            'W' : 'W',\n            'X' : 'X',\n            'Y' : 'Y',\n            'Z' : '2'}\n    return ''.join(dict.get(x, ' ') for x in str)\n            \n", "def to_leet_speak(string):\n    return string.translate(str.maketrans('ABCEGHILOSTZ', '@8(36#!10$72'))\n", "d={'A' : '@','B': '8','C' : '(','D' : 'D','E': '3',\n  'F' : 'F','G' : '6','H' : '#','I' : '!','J' : 'J',\n  'K' : 'K', 'L' : '1','M' : 'M','N' : 'N','O' : '0',\n  'P' : 'P','Q' : 'Q','R' : 'R','S' : '$','T' : '7',\n  'U' : 'U','V' : 'V','W' : 'W','X' : 'X','Y' : 'Y',\n  'Z' : '2'}\ndef to_leet_speak(str):\n    return ''.join(d.get(x) if x!=' ' else x for x in str)\n", "def to_leet_speak(str):\n    d={\n    \"A\" : '@',\n    \"B\" : '8',\n    \"C\" : '(',\n    \"D\" : 'D',\n    \"E\" : '3',\n    \"F\" : 'F',\n    \"G\" : '6',\n    \"H\" : '#',\n    \"I\" : '!',\n    \"J\" : 'J',\n    \"K\" : 'K',\n    \"L\" : '1',\n    \"M\" : 'M',\n    \"N\" : 'N',\n    \"O\" : '0',\n    \"P\" : 'P',\n    \"Q\" : 'Q',\n    \"R\" : 'R',\n    \"S\" : '$',\n    \"T\" : '7',\n    \"U\" : 'U',\n    \"V\" : 'V',\n    \"W\" : 'W',\n    \"X\" : 'X',\n    \"Y\" : 'Y',\n    \"Z\" : '2'\n    }\n    return str.translate(str.maketrans(d))\n", "leetDict = {\n    \"A\" : '@', \"B\" : '8', \"C\" : '(', \"D\" : 'D',\n    \"E\" : '3', \"F\" : 'F', \"G\" : '6', \"H\" : '#',\n    \"I\" : '!', \"J\" : 'J', \"K\" : 'K', \"L\" : '1',\n    \"M\" : 'M', \"N\" : 'N', \"O\" : '0', \"P\" : 'P',\n    \"Q\" : 'Q', \"R\" : 'R', \"S\" : '$', \"T\" : '7',\n    \"U\" : 'U', \"V\" : 'V', \"W\" : 'W', \"X\" : 'X',\n    \"Y\" : 'Y', \"Z\" : '2', \" \" : ' '\n}\n\ndef to_leet_speak(str):\n    natList = list(str)\n    leetList = []\n\n    for i in natList:\n        leetList.append(leetDict[i])\n\n    return \"\".join(leetList)", "def to_leet_speak(str):\n    getchar = lambda c: chars[c] if c in chars else c\n    chars = {\n              'A' : '@',\n              'B' : '8',\n              'C' : '(',\n              'D' : 'D',\n              'E' : '3',\n              'F' : 'F',\n              'G' : '6',\n              'H' : '#',\n              'I' : '!',\n              'J' : 'J',\n              'K' : 'K',\n              'L' : '1',\n              'M' : 'M',\n              'N' : 'N',\n              'O' : '0',\n              'P' : 'P',\n              'Q' : 'Q',\n              'R' : 'R',\n              'S' : '$',\n              'T' : '7',\n              'U' : 'U',\n              'V' : 'V',\n              'W' : 'W',\n              'X' : 'X',\n              'Y' : 'Y',\n              'Z' : '2'\n            }\n    return ''.join(getchar(c) for c in str)", "import unittest\n\nMAPPING_TABLE = {\n  'A': '@',\n  'B': '8',\n  'C': '(',\n  'D': 'D',\n  'E': '3',\n  'F': 'F',\n  'G': '6',\n  'H': '#',\n  'I': '!',\n  'J': 'J',\n  'K': 'K',\n  'L': '1',\n  'M': 'M',\n  'N': 'N',\n  'O': '0',\n  'P': 'P',\n  'Q': 'Q',\n  'R': 'R',\n  'S': '$',\n  'T': '7',\n  'U': 'U',\n  'V': 'V',\n  'W': 'W',\n  'X': 'X',\n  'Y': 'Y',\n  'Z': '2',\n  ' ': ' '\n}\n\n\ndef to_leet_speak(str_):\n    return ''.join(MAPPING_TABLE[char] for char in str_)\n    \n    \nclass TestToLeekSpeak(unittest.TestCase):\n    def test_to_leek_speak(self):\n        str_ = 'LEET'\n        actual = to_leek_speak(str_)\n        self.assertEqual(actual, '1337')\n\n    def test_to_leek_speak_with_empty_space(self):\n        str_ = 'HELLO WORLD'\n        actual = to_leek_speak(str_)\n        self.assertEqual(actual, '#3110 W0R1D')\n", "def to_leet_speak(p):\n    db = {\n         'A' : '@',\n         'B' : '8',\n         'C' : '(',\n         'D' : 'D',\n         'E' : '3',\n         'F' : 'F',\n         'G' : '6',\n         'H' : '#',\n         'I' : '!',\n         'J' : 'J',\n         'K' : 'K',\n         'L' : '1',\n         'M' : 'M',\n         'N' : 'N',\n         'O' : '0',\n         'P' : 'P',\n         'Q' : 'Q',\n         'R' : 'R',\n         'S' : '$',\n         'T' : '7',\n         'U' : 'U',\n         'V' : 'V',\n         'W' : 'W',\n         'X' : 'X',\n         'Y' : 'Y',\n         'Z' : '2',\n         ' ' : ' ',\n         }\n    lol = [db.get(item) for item in p]\n    l = [str(i) for i in lol]\n    return ''.join(l)", "def to_leet_speak(str):\n    leet = {\n        'A':'@',\n        'B':'8',\n        'C':'(',\n        'D':'D',\n        'E':'3',\n        'F':'F',\n        'G':'6',\n        'H':'#',\n        'I':'!',\n        'J':'J',\n        'K':'K',\n        'L':'1',\n        'M':'M',\n        'N':'N',\n        'O':'0',\n        'P':'P',\n        'Q':'Q',\n        'R':'R',\n        'S':'$',\n        'T':'7',\n        'U':'U',\n        'V':'V',\n        'W':'W',\n        'X':'X',\n        'Y':'Y',\n        'Z':'2',\n        ' ':' '\n    }\n    return ''.join(leet[i] for i in str)", "def to_leet_speak(str):\n    alphabet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\n    return ''.join([ alphabet[c] for c in str])\n", "def to_leet_speak(str):\n    leet = {\n          'A' : '@',\n          'B' : '8',\n          'C' : '(',\n          'D' : 'D',\n          'E' : '3',\n          'F' : 'F',\n          'G' : '6',\n          'H' : '#',\n          'I' : '!',\n          'J' : 'J',\n          'K' : 'K',\n          'L' : '1',\n          'M' : 'M',\n          'N' : 'N',\n          'O' : '0',\n          'P' : 'P',\n          'Q' : 'Q',\n          'R' : 'R',\n          'S' : '$',\n          'T' : '7',\n          'U' : 'U',\n          'V' : 'V',\n          'W' : 'W',\n          'X' : 'X',\n          'Y' : 'Y',\n          'Z' : '2' }\n    return ''.join([leet[x] if x!=' ' else ' ' for x in str])\n", "def to_leet_speak(string):\n    trans = str.maketrans(\n        {\n            \"A\": \"@\",\n            \"B\": \"8\",\n            \"C\": \"(\",\n            \"E\": \"3\",\n            \"G\": \"6\",\n            \"H\": \"#\",\n            \"I\": \"!\",\n            \"L\": \"1\",\n            \"O\": \"0\",\n            \"S\": \"$\",\n            \"T\": \"7\",\n            \"Z\": \"2\",\n        }\n    )\n    return string.translate(trans)\n", "def to_leet_speak(str):\n    LeetSpeak  = { 'A' : '@', 'B' : '8','C' : '(','E' : '3','G' : '6','H' : '#','I' : '!','L' : '1','O' : '0','S' : '$','T' : '7','Z' : '2'}\n    return ''.join(LeetSpeak [x] if x in LeetSpeak else x for x in str)", "def to_leet_speak(str):\n    LeetSpeak  = { 'A' : '@', 'B' : '8','C' : '(','D' : 'D','E' : '3', 'F' : 'F', 'G' : '6','H' : '#','I' : '!','J' : 'J', 'K' : 'K', 'L' : '1', 'M' : 'M','N' : 'N','O' : '0','P' : 'P','Q' : 'Q','R' : 'R','S' : '$','T' : '7','U' : 'U','V' : 'V','W' : 'W','X' : 'X','Y' : 'Y','Z' : '2'}\n    return ''.join(LeetSpeak [x] if x in LeetSpeak else x for x in str)", "def to_leet_speak(str):\n    leet = {\n          'A' : '@',\n          'B' : '8',\n          'C' : '(',\n          'D' : 'D',\n          'E' : '3',\n          'F' : 'F',\n          'G' : '6',\n          'H' : '#',\n          'I' : '!',\n          'J' : 'J',\n          'K' : 'K',\n          'L' : '1',\n          'M' : 'M',\n          'N' : 'N',\n          'O' : '0',\n          'P' : 'P',\n          'Q' : 'Q',\n          'R' : 'R',\n          'S' : '$',\n          'T' : '7',\n          'U' : 'U',\n          'V' : 'V',\n          'W' : 'W',\n          'X' : 'X',\n          'Y' : 'Y',\n          'Z' : '2',\n          ' ' : ' '\n    }\n    \n    return ''.join(leet[ch] for ch in str)\n    \n    \n", "def to_leet_speak(text):\n    return text.translate(text.maketrans(\"ABCEGHILOSTZ\", \"@8(36#!10$72\"))\n", "dictRef = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\n\nto_leet_speak = lambda s: ''.join(dictRef[letter] for letter in s)\n", "def to_leet_speak(str):\n  s=''\n  \n  dict={'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'}\n  for i in str:\n    try:\n     s+=dict[i]\n    except:\n     s+=' '\n  return s\n\n", "leet_dict = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n\n\ndef to_leet_speak(str):\n    leet_phrase = ''\n    for x in str:\n        if x == ' ':\n            leet_phrase += x\n        else:\n            leet_phrase += leet_dict.get(x.upper())\n    return leet_phrase\n\n    \n \n", "from string import ascii_uppercase\ndef to_leet_speak(s):\n    temp = str.maketrans(ascii_uppercase, '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n    return s.translate(temp)", "def to_leet_speak(str):\n    leet_speak = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n\n    for key, value in leet_speak.items():\n        str = str.replace(key, value)\n    return str", "to_leet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\ndef to_leet_speak(str):\n    return \"\".join([to_leet.get(x,x) for x in str])\n", "def to_leet_speak(str):\n    l33t = { 'A' : '@',\n  'B' : '8',\n 'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n 'M' : 'M',\n  'N' : 'N',\n 'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ': ' '}\n    return ''.join(l33t.get(char) for char in str)\n        \n", "def to_leet_speak(str):\n    ans=''\n    alp={'A' : '@','B' : '8','C' : '(','D' : 'D','E': '3','F' : 'F','G' : '6','H' : '#','I' : '!','J' : 'J','K' : 'K','L' : '1','M' : 'M','N' : 'N','O' : '0','P' : 'P','Q' : 'Q','R' : 'R','S' : '$','T' : '7','U' : 'U','V' : 'V','W' : 'W','X' : 'X','Y' : 'Y','Z' : '2'}\n    for i in str:  ans=ans+alp.get(i,' ')\n    \n    return ans\n", "d1 = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2'\n}\n\ndef to_leet_speak(s):\n    return ''.join([d1.get(x,x) for x in s])\n", "def to_leet_speak(str):\n    d = {\n      'A' : '@',\n      'B' : '8',\n      'C' : '(',\n      'D' : 'D',\n      'E' : '3',\n      'F' : 'F',\n      'G' : '6',\n      'H' : '#',\n      'I' : '!',\n      'J' : 'J',\n      'K' : 'K',\n      'L' : '1',\n      'M' : 'M',\n      'N' : 'N',\n      'O' : '0',\n      'P' : 'P',\n      'Q' : 'Q',\n      'R' : 'R',\n      'S' : '$',\n      'T' : '7',\n      'U' : 'U',\n      'V' : 'V',\n      'W' : 'W',\n      'X' : 'X',\n      'Y' : 'Y',\n      'Z' : '2'\n    }\n    \n    newstr = \"\"\n    for c in str:\n        try:\n            newstr += d[c]\n        except KeyError:\n            newstr += c\n\n    return newstr", "def to_leet_speak(str):\n    dict = {\n      'A' : '@',\n      'B' : '8',\n      'C' : '(',\n      'D' : 'D',\n      'E' : '3',\n      'F' : 'F',\n      'G' : '6',\n      'H' : '#',\n      'I' : '!',\n      'J' : 'J',\n      'K' : 'K',\n      'L' : '1',\n      'M' : 'M',\n      'N' : 'N',\n      'O' : '0',\n      'P' : 'P',\n      'Q' : 'Q',\n      'R' : 'R',\n      'S' : '$',\n      'T' : '7',\n      'U' : 'U',\n      'V' : 'V',\n      'W' : 'W',\n      'X' : 'X',\n      'Y' : 'Y',\n      'Z' : '2'}\n    return ''.join(dict.get(i, i) for i in str)\n", "swap = {\n  \"A\" : '@',\n  \"B\" : '8',\n  \"C\" : '(',\n  \"D\" : 'D',\n  \"E\" : '3',\n  \"F\" : 'F',\n  \"G\" : '6',\n  \"H\" : '#',\n  \"I\" : '!',\n  \"J\" : 'J',\n  \"K\" : 'K',\n  \"L\" : '1',\n  \"M\" : 'M',\n  \"N\" : 'N',\n  \"O\" : '0',\n  \"P\" : 'P',\n  \"Q\" : 'Q',\n  \"R\" : 'R',\n  \"S\" : '$',\n  \"T\" : '7',\n  \"U\" : 'U',\n  \"V\" : 'V',\n  \"W\" : 'W',\n  \"X\" : 'X',\n  \"Y\" : 'Y',\n  \"Z\" : '2',\n  \" \": \" \"\n}\ndef to_leet_speak(str):\n    return \"\".join(swap[x] for x in str)", "def to_leet_speak(str):\n    alfabe={'A' : '@','B' : '8','C' : '(','D' : 'D','E' : '3','F' : 'F','G' : '6','H' : '#','I' : '!','J' : 'J','K' : 'K','L' : '1','M' : 'M','N' : 'N','O' : '0','P' : 'P','Q' : 'Q','R' : 'R','S' : '$','T' : '7','U' : 'U','V' : 'V','W' : 'W','X' : 'X','Y' : 'Y','Z' : '2'}\n    for i in list(alfabe.keys()):\n        if i in str:\n            str=str.replace(i,alfabe[i])\n    return str\n", "def to_leet_speak(str):\n    \n      key = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n      val = \"@8(D3F6#!JK1MN0PQR$7UVWXY2\"\n      \n      transform = dict(zip(key, val))\n      return ''.join(transform.get(char, char) for char in str)", "def to_leet_speak(str):\n    alphabet = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n\n}\n\n    new_str = ''\n    for x in str:\n        if x in list(alphabet.keys()):\n            new_str += alphabet[x]\n    return new_str\n", "dicc = {\n  'A' : '@',\n  'B' : '8',\n  'C' : '(',\n  'D' : 'D',\n  'E' : '3',\n  'F' : 'F',\n  'G' : '6',\n  'H' : '#',\n  'I' : '!',\n  'J' : 'J',\n  'K' : 'K',\n  'L' : '1',\n  'M' : 'M',\n  'N' : 'N',\n  'O' : '0',\n  'P' : 'P',\n  'Q' : 'Q',\n  'R' : 'R',\n  'S' : '$',\n  'T' : '7',\n  'U' : 'U',\n  'V' : 'V',\n  'W' : 'W',\n  'X' : 'X',\n  'Y' : 'Y',\n  'Z' : '2',\n  ' ' : ' '\n}\ndef to_leet_speak(str):\n    a = []\n    for i in str:\n       a.append(dicc[i])\n    b = \"\".join(a)\n    return b\n       \n", "def to_leet_speak(s):\n    dic = {\n          'A' : '@',\n          'B' : '8',\n          'C' : '(',\n          'D' : 'D',\n          'E' : '3',\n          'F' : 'F',\n          'G' : '6',\n          'H' : '#',\n          'I' : '!',\n          'J' : 'J',\n          'K' : 'K',\n          'L' : '1',\n          'M' : 'M',\n          'N' : 'N',\n          'O' : '0',\n          'P' : 'P',\n          'Q' : 'Q',\n          'R' : 'R',\n          'S' : '$',\n          'T' : '7',\n          'U' : 'U',\n          'V' : 'V',\n          'W' : 'W',\n          'X' : 'X',\n          'Y' : 'Y',\n          'Z' : '2'\n         }\n    return ''.join(dic.get(c,c) for c in s)\n", "alphabet = {\n  'A': '@',\n  'B': '8',\n  'C': '(',\n  'D': 'D',\n  'E': '3',\n  'F': 'F',\n  'G': '6',\n  'H': '#',\n  'I': '!',\n  'J': 'J',\n  'K': 'K',\n  'L': '1',\n  'M': 'M',\n  'N': 'N',\n  'O': '0',\n  'P': 'P',\n  'Q': 'Q',\n  'R': 'R',\n  'S': '$',\n  'T': '7',\n  'U': 'U',\n  'V': 'V',\n  'W': 'W',\n  'X': 'X',\n  'Y': 'Y',\n  'Z': '2',\n  ' ': ' '\n}\n\n\ndef to_leet_speak(str):\n    res = []\n    for i in str:\n        temp = alphabet[i]\n        res.append(temp)\n\n    return ''.join(res)", "def to_leet_speak(str):\n    tls = {\n        'A': '@',\n        'B': '8',\n        'C': '(',\n        'D': 'D',\n        'E': '3',\n        'F': 'F',\n        'G': '6',\n        'H': '#',\n        'I': '!',\n        'J': 'J',\n        'K': 'K',\n        'L': '1',\n        'M': 'M',\n        'N': 'N',\n        'O': '0',\n        'P': 'P',\n        'Q': 'Q',\n        'R': 'R',\n        'S': '$',\n        'T': '7',\n        'U': 'U',\n        'V': 'V',\n        'W': 'W',\n        'X': 'X',\n        'Y': 'Y',\n        'Z': '2',\n        ' ' : ' '\n    }\n    res = \"\"\n    for i in str:\n        res += tls[i]\n    return res\n", "def to_leet_speak(str):\n    leet_dict = {' ': ' ','A':'@','B':'8','C':'(','D':'D','E':'3','F':'F','G':'6','H':'#','I':'!','J':'J','K':'K','L':'1','M':'M','N':'N','O':'0','P':'P','Q':'Q','R':'R','S':'$','T':'7','U':'U','V':'V','W':'W','X':'X','Y':'Y','Z':'2'}\n    leet_list = []\n    for i in str:\n        if i in leet_dict.keys():\n            leet_list.append(leet_dict.get(i))\n    return ''.join(leet_list)", "def to_leet_speak(str):\n    dic = {\n      \"A\" : '@',\n      \"B\" : '8',\n      \"C\" : '(',\n      \"E\" : '3',\n      \"F\" : 'F',\n      \"G\" : '6',\n      \"H\" : '#',\n      \"I\" : '!',\n      \"L\" : '1',\n      \"O\" : '0',\n      \"S\" : '$',\n      \"T\" : '7',\n      \"Z\" : '2'\n    }\n    return(''.join(dic.get(i, i) for i in str))\n    \n    \n", "def to_leet_speak(string):\n    uppercase_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    leet_speak = \"@8(D3F6#!JK1MN0PQR$7UVWXY2\"\n    leet = dict(list(zip(uppercase_letters, leet_speak)))\n    \n    leet_builder = str()\n    for letter in string:\n        leet_letter = leet.get(letter)\n        leet_builder += leet_letter if leet_letter else letter\n    \n    return leet_builder\n", "from string import ascii_uppercase\nL = str.maketrans(ascii_uppercase, '@8(D3F6#!JK1MN0PQR$7UVWXY2')\n\nto_leet_speak = lambda s: s.translate(L)", "from string import ascii_uppercase\n\nALPHABET = str.maketrans(ascii_uppercase, \"@8(D3F6#!JK1MN0PQR$7UVWXY2\")\n\n\ndef to_leet_speak(text):\n    return text.translate(ALPHABET)\n", "def to_leet_speak(str):\n    al = {\n        'A': '@',\n        'B': '8',\n        'C': '(',\n        'D': 'D',\n        'E': '3',\n        'F': 'F',\n        'G': '6',\n        'H': '#',\n        'I': '!',\n        'J': 'J',\n        'K': 'K',\n        'L': '1',\n        'M': 'M',\n        'N': 'N',\n        'O': '0',\n        'P': 'P',\n        'Q': 'Q',\n        'R': 'R',\n        'S': '$',\n        'T': '7',\n        'U': 'U',\n        'V': 'V',\n        'W': 'W',\n        'X': 'X',\n        'Y': 'Y',\n        'Z': '2'\n    }\n    result = ''\n    for char in str:\n        result += al.get(char,' ')\n    return result\n\n", "def to_leet_speak(str):\n    LEET = {\n    'A' : '@', 'B' : '8', 'C' : '(', 'D' : 'D', 'E' : '3', 'F' : 'F', 'G' : '6', 'H' : '#', \n    'I' : '!', 'J' : 'J', 'K' : 'K', 'L' : '1', 'M' : 'M', 'N' : 'N', 'O' : '0', 'P' : 'P',\n    'Q' : 'Q', 'R' : 'R', 'S' : '$', 'T' : '7', 'U' : 'U', 'V' : 'V', 'W' : 'W', 'X' : 'X',\n    'Y' : 'Y', 'Z' : '2'\n    }\n    return ''.join([LEET.get(i,' ') for i in str])\n", "MAP = {\n  \"A\" : '@',\n  \"B\" : '8',\n  \"C\" : '(',\n  \"D\" : 'D',\n  \"E\" : '3',\n  \"F\" : 'F',\n  \"G\" : '6',\n  \"H\" : '#',\n  \"I\" : '!',\n  \"J\" : 'J',\n  \"K\" : 'K',\n  \"L\" : '1',\n  \"M\" : 'M',\n  \"N\" : 'N',\n  \"O\" : '0',\n  \"P\" : 'P',\n  \"Q\" : 'Q',\n  \"R\" : 'R',\n  \"S\" : '$',\n  \"T\" : '7',\n  \"U\" : 'U',\n  \"V\" : 'V',\n  \"W\" : 'W',\n  \"X\" : 'X',\n  \"Y\" : 'Y',\n  \"Z\" : '2'\n}\n\ndef to_leet_speak(str):\n    return ''.join([MAP[c.upper()] if c.upper() in MAP else c for c in str])\n"]