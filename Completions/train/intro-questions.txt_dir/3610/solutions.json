["def fixed_xor(a, b):\n    return \"\".join(f\"{int(x, 16)^int(y, 16):x}\" for x, y in zip(a, b))", "def fixed_xor(a, b):\n\n    m = min(len(a), len(b)) \n        \n    return f\"{int(a[:m], 16) ^ int(b[:m], 16):0{m}x}\" if m else \"\"\n", "def fixed_xor(a, b):\n    return \"\".join(format(int(x, 16) ^ int(y, 16), \"x\") for x, y in zip(a, b))\n", "def fixed_xor(a, b):\n    l = min(len(a), len(b))\n    r = \"\" if not a[:l] else hex(int(a[:l], 16) ^ int(b[:l], 16))[2:]\n    return '0' * (l - len(r)) + r", "def fixed_xor(a, b):\n    if not a or not b:return ''\n    m1 = min(len(a),len(b))\n    a,b = bin(int(a[:m1], 16))[2:],bin(int(b[:m1], 16))[2:]\n    m = max(len(a), len(b))\n    return hex(int(\"\".join([str(int(i)^int(j)) for i,j in zip(a.zfill(m),b.zfill(m))]),2))[2:].zfill(m1)", "def fixed_xor(a, b):\n    l = min(len(a), len(b))\n    if not l: return ''\n    a, b = int(a[:l], 16), int(b[:l], 16)\n    return hex(a^b)[2:].rjust(l, '0')", "def fixed_xor(a, b):\n    return \"\".join(list(map(lambda x: format(int(x[0], 16) ^ int(x[1], 16), 'x'), zip(a, b))))", "\ndef fixed_xor(a, b):\n     if a == \"\" or b == \"\":\n            return \"\"\n        \n     m = min( len(a), len(b))\n     ha = int(a[:m], 16)\n     hb = int(b[:m], 16)\n\n     return hex ( ha ^ hb)[2:].zfill(m)\n", "def fixed_xor(a, b):\n    return ''.join('%x' % (int(x, 16) ^ int(y, 16)) for (x, y) in zip(a, b))", "def fixed_xor(a, b):\n    l = min(len(a), len(b))\n    if not l:\n        return ''\n    if len(a) != len(b):\n        a, b = a[0:l], b[0:l]\n    return hex(int(a, 16) ^ int(b, 16))[2:].rjust(l, '0')"]