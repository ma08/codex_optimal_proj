["class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         return moves.count('U') == moves.count('D') and moves.count('L') == moves.count('R')", "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         if not moves:\n             return True\n         if len(moves) % 2 == 1:\n             return False\n         \n         up, left = 0, 0\n         for move in moves:\n             if move == 'U':\n                 up += 1\n             if move == 'D':\n                 up -= 1\n             if move == 'L':\n                 left += 1\n             if move == 'R':\n                 left -= 1\n         return up == 0 and left == 0\n             \n", "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         pos = [0,0]\n         for i in moves:\n             if i == 'U':\n                 pos[0] = pos[0] + 1\n             elif i == 'D':\n                 pos[0] = pos[0] - 1\n             elif i == 'L':\n                 pos[1] = pos[1] - 1\n             elif i == 'R':\n                 pos[1] = pos[1] + 1\n         return [0,0] == pos", "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         return ((moves.count('U') == moves.count('D')) and (moves.count('L') == moves.count('R')))\n", "class Solution:\n     def judgeCircle(self, moves):\n         l, r, u, d = list(map(moves.count, 'LRUD'))\n         return l == r and u == d\n", "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n \n        # moves = list(moves)\n        # u = moves.count('U')\n        # d = moves.count('D')\n        # l = moves.count('L')\n        # r = moves.count('R')\n        # if u == d and l == r:\n        #     return True\n        # else:\n        #     return False\n        # return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')\n         u, d, l, r = map(moves.count, 'UDLR')\n         return u==d and l==r", "class Solution:\n     def judgeCircle(self, moves):\n         m_list = list(moves)\n         return m_list.count('U') == m_list.count('D') and m_list.count('R') == m_list.count('L')\n", "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         x = 0\n         y = 0\n         for move in moves:\n             #print(move)\n             if move == 'L':\n                 x -= 1\n             elif move == 'R':\n                 x += 1\n             elif move == 'U':\n                 x += 1\n             elif move == 'D':\n                 x -= 1\n \n         if x == 0 and y == 0:\n             return True\n         else:\n             return False"]