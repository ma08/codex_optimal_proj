["def next_day_of_week(current_day, available_week_days):\n    x = 2 ** current_day\n    while not x & available_week_days:\n        x = max(1, (x * 2) % 2 ** 7)\n    return x.bit_length()", "def next_day_of_week(c, a):\n    return next((weekday - 1) % 7 + 1 for weekday in range(c+1, c+8) if (1 << ((weekday-1) % 7)) & a)", "def next_day_of_week(current_day, available_week_days):\n    b = f\"{available_week_days:07b}\"[::-1]\n    return b.find(\"1\", current_day) + 1 or b.index(\"1\") + 1", "def next_day_of_week(a, b):\n    return (f\"{b:7b}\"[::-1] * 2).index(\"1\", a) % 7 + 1", "def next_day_of_week(current_day, available_week_days):\n  #coding and coding..\n  d = {1:1, 2:2, 3:4, 4:8, 5:16, 6:32, 7:64}\n  \n  while True:\n      if current_day == 7:\n         current_day = 0\n      current_day += 1\n      \n      if available_week_days & d[current_day]:\n            return current_day\n", "def next_day_of_week(current_day, available_week_days):\n    return (f\"{available_week_days:07b}\"[::-1]*2).index('1',current_day)%7+1", "next_day_of_week=lambda n,b:next(i%7+1for i in range(n,n+8)if 1<<i%7&b)", "def next_day_of_week(day,week):\n    days=[d for d,v in enumerate(bin(week)[2:][::-1],1) if int(v)]\n    return next((d for d in days if d>day),days[0]) ", "def next_day_of_week(d, a):\n    t = a & ~((1 << d) - 1) or a\n    return (t & -t).bit_length()", "from math import log\n\ndef next_day_of_week(current_day, available_week_days):\n    code = bin(available_week_days)[2:].rjust(7, \"0\")[::-1]\n    for i in range(current_day, 7):\n        if code[i] == \"1\":\n            return i + 1\n    for i in range(current_day):\n        if code[i] == \"1\":\n            return i + 1\n"]