["class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while True:\n            if len(stones) == 1:\n                return stones[0]\n            if len(stones) == 0:\n                return 0\n            stones.sort()\n            x = stones.pop()\n            y = stones.pop()\n            if y != x:\n                stones.append(x-y)\n            \n", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        ls = len(stones)\n        if ls == 1:\n            return stones[0]\n        elif ls == 0:\n            return 0\n        stones.sort(reverse=True)\n        while len(stones) > 1:\n            stone1 = stones.pop(0)\n            stone2 = stones.pop(0)\n            if not stone1 == stone2:\n                stone1 -= stone2\n                stones.insert(0, stone1)\n                stones.sort(reverse=True)\n        try:\n            return stones[0]\n        except IndexError:\n            return 0", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while len(stones) > 1:\n            firstMax,secMax =stones.pop(stones.index(max(stones))),stones.pop(stones.index(max(stones)))\n            if firstMax - secMax != 0:\n                stones.append(firstMax - secMax)\n        if stones:\n            return stones[0]\n        else:\n            return 0", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        \n        \n        \n        while(len(stones) > 1):\n            stones.sort(reverse=True)\n            stones[0] = stones[0] - stones[1]\n            del stones[1]\n        \n        if(len(stones) == 1):\n            return stones[0]\n        return 0\n", "from heapq import heappop, heappush, heapify \n\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        for i in range(len(stones)):\n            stones[i] *= -1\n            \n        # min heapify\n        heapify(stones)\n        while(len(stones) > 1):\n            # get the max\n            max1 = heappop(stones)\n            max2 = heappop(stones)\n            if -max1 - (-max2) > 0:\n                heappush(stones, -(-max1 - (-max2)))\n            # remove the max\n            # get the max2\n            # remove the max2\n            \n            \n                # add -(-max1 - (-max2)) to the stones\n        \n        if len(stones) == 1:\n            return -stones[0]\n        return 0\n", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        # while len(stones) > 1:\n        #     stones.sort()\n        #     num = stones.pop() - stones.pop()\n        #     stones.append(num)\n        # return 0 if len(stones) == 0 else stones[0]\n        \n        heap = [-x for x in stones]\n        heapq.heapify(heap)\n        while len(heap) > 1 and heap[0] != 0:\n            heapq.heappush(heap, heapq.heappop(heap) - heapq.heappop(heap))\n        return - heap[0]", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        i = max(stones)\n        weights = [0]*(i+1)\n        for stone in stones:\n            weights[stone] += 1\n        current = 0\n        while i > 0:\n            if weights[i] != 0:\n                if current == 0:\n                    current = i\n                    weights[i] -= 1\n                else:\n                    current -= i\n                    weights[i] -= 1\n                    if current > i:\n                        i = current\n                    weights[current] += 1\n                    current = 0\n            else:\n                i -=1\n        return current", "import queue\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\n        heap = queue.PriorityQueue()\n        for stone in stones:\n            heap.put(-stone)\n        \n        while heap.qsize() > 1:\n            num1 = heap.get()\n            num2 = heap.get()\n            \n            heap.put(num1-num2)\n            \n        return -heap.get()", "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        stones = [-s for s in stones]\n        heapq.heapify(stones)\n        while len(stones) > 1:\n            s1 = heapq.heappop(stones)\n            s2 = heapq.heappop(stones)\n            if s1 != s2:\n                s = s1-s2\n                heapq.heappush(stones, s)\n                \n        return -stones.pop() if stones else 0\n", "class Solution:\n    def lastStoneWeight(self, st: List[int]) -> int:\n        for i in range(len(st)):\n            st[i]*=-1\n        heapq.heapify(st);\n        while(len(st)>1):\n            a,b=heapq.heappop(st),heapq.heappop(st);\n            a*=-1;b*=-1\n            if(b!=a):\n                heapq.heappush(st,b-a)\n        return -1*st[0] if len(st)==1 else 0"]