["def vert_mirror(s):\n    return \"\\n\".join(line[::-1] for line in s.split(\"\\n\"))\n\ndef hor_mirror(s):\n    return \"\\n\".join(s.split(\"\\n\")[::-1])\n\ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng):\n    return map(reversed, strng)\ndef hor_mirror(strng):\n    return reversed(strng)\ndef oper(fct, s):\n    return '\\n'.join(map(''.join, fct(s.split('\\n'))))", "def hor_mirror(s):\n    return '\\n'.join(reversed(s.split('\\n')))\n\n\ndef vert_mirror(s):\n    return '\\n'.join(a[::-1] for a in s.split('\\n'))\n\n\ndef oper(fct, s):\n    return fct(s)", "vert_mirror,hor_mirror,oper=lambda s:[e[::-1]for e in s],lambda s:s[::-1],lambda f,s:'\\n'.join(f(s.split()))", "def vert_mirror(strng):\n    return \"\\n\".join(w[::-1] for w in strng.split(\"\\n\"))\n\ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split(\"\\n\")[::-1])\n\ndef oper(fct, strng):\n    return fct(strng)\n", "def vert_mirror(strng):\n    lst_string = strng.split('\\n')\n    i = 0\n    while i < len(lst_string):\n        lst_string[i] = lst_string[i][::-1]\n        i += 1\n    return '\\n'.join(lst_string)\n    \ndef hor_mirror(strng):\n    lst_string = strng.split('\\n')\n    i = 0\n    l = len(lst_string)\n    while i < l//2:\n        fst_s = lst_string[i]\n        lst_string[i] = lst_string[l-1-i]\n        lst_string[l-1-i] = fst_s\n        i += 1\n    return '\\n'.join(lst_string)\n    \ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng):\n    return '\\n'.join(s[::-1] for s in strng.split('\\n'))\ndef hor_mirror(strng):\n    return'\\n'.join(strng.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)", "hor_mirror = reversed\nvert_mirror = lambda st: (i[::-1] for i in st)\n\ndef oper(fct, s):\n    return '\\n'.join(fct(s.split('\\n')))", "def vert_mirror(st):\n    return (i[::-1] for i in st)\n\ndef hor_mirror(st):\n    return st[::-1]\n\ndef oper(fct, s):\n    return '\\n'.join(fct(s.split('\\n')))", "def vert_mirror(strng):\n    return [x[::-1] for x in strng.split(\"\\n\")]\ndef hor_mirror(strng):\n    return strng.split(\"\\n\")[::-1]\ndef oper(fct, s):\n    return '\\n'.join(list(map(fct, [s]))[0])", "def vert_mirror(strng):\n    return (s[::-1] for s in strng.split('\\n'))\n    \ndef hor_mirror(strng):\n    return strng.split('\\n')[::-1]\n        \ndef oper(fct, s):\n    return '\\n'.join(fct(s))", "def format_to_list(string):\n    return string.split('\\n')\n\ndef stitch(array):\n    return '\\n'.join(array)\n\ndef vert_mirror(string):\n    matrix = format_to_list(string)\n    mirrored_matrix = []\n    for row in matrix:\n        mirrored_row = row[::-1] \n        mirrored_matrix.append(mirrored_row)\n    return stitch(mirrored_matrix)\n\ndef hor_mirror(string):\n    matrix = format_to_list(string)\n    matrix.reverse()\n    return stitch(matrix)\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(str_):\n    return \"\\n\".join(word[::-1] for word in str_.split(\"\\n\"))\n\ndef hor_mirror(str_):\n    return \"\\n\".join(str_.split(\"\\n\")[::-1])\n\ndef oper(fct, str_):\n    return fct(str_)", "def vert_mirror(strng):\n    return '\\n'.join(s[::-1] for s in strng.split('\\n'))\n\n\ndef hor_mirror(strng):\n    return '\\n'.join(reversed(strng.split('\\n')))\n\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join([s[::-1] for s in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join(strng.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(lines):\n    return '\\n'.join(line[::-1] for line in lines.split('\\n'))\ndef hor_mirror(lines):\n    return '\\n'.join(lines.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return \"\\n\".join([x[::-1] for x in strng.split(\"\\n\")])\ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split(\"\\n\")[::-1])\ndef oper(fct, s):\n    return fct(s)\n", "hor_mirror, vert_mirror, oper = reversed, lambda m: map(reversed, m), lambda f, s: \"\\n\".join(map(\"\".join, f(s.split(\"\\n\"))))", "def vert_mirror(strng):\n  \n    s =  strng.split(\"\\n\")\n    rs = [\"\".join(reversed(x)) for x in s]\n    return \"\\n\".join(rs)\ndef hor_mirror(strng):\n    s =  strng.split(\"\\n\")\n    rs = [x for x in reversed(s)]\n    return \"\\n\".join(rs)\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(l):\n    return [x[::-1] for x in l]\ndef hor_mirror(l):\n    return l[::-1]\ndef oper(fct, s):\n    return '\\n'.join(fct(s.split()))", "def vert_mirror(strng):\n    # your code\n    x = [i[::-1] for i in strng.split('\\n')]\n    return '\\n'.join(x)\n\ndef hor_mirror(strng):\n    # your code\n    a = strng[::-1]\n    x = [i[::-1] for i in a.split('\\n')]\n    return '\\n'.join(x)\n    \ndef oper(fct, s):\n    # your code\n    if fct == hor_mirror:\n        return hor_mirror(s)\n    else:\n        return vert_mirror(s)", "def vert_mirror(strng):\n    k=[i[::-1] for i in strng.split('\\n')]\n    return '\\n'.join(k)\ndef hor_mirror(strng):\n    l=strng.split('\\n')[::-1]\n    return '\\n'.join(l)\ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng):\n    return \"\\n\".join(word[::-1] for word in strng.split('\\n'))\n\n\ndef hor_mirror(strng):\n    return \"\\n\".join(reversed(strng.split('\\n')))\n\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return \"\\n\".join(\"\".join(word[i] for i in range(len(word)-1, -1, -1)) for word in strng.split('\\n'))\n\ndef hor_mirror(strng):\n    return \"\\n\".join(word for word in reversed(strng.split('\\n')))\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join(i[::-1] for i in strng)\n\ndef hor_mirror(strng):\n    return '\\n'.join(i for i in strng[::-1])\n\ndef oper(fct, s):\n    return fct(s.split('\\n'))", "def vert_mirror(strng):\n    return '\\n'.join(i[::-1] for i in strng.split('\\n'))\n\ndef hor_mirror(strng):\n    return '\\n'.join(''.join(i) for i in [(c for c in word) for word in strng.split('\\n')][::-1])\n\ndef oper(fct, s):\n    return fct(s)", "import unittest\n\n\ndef vert_mirror(strng):\n    return '\\n'.join(word[::-1] for word in strng.split('\\n'))\n\n\ndef hor_mirror(strng):\n    return '\\n'.join(strng.split('\\n')[::-1])\n\n\ndef oper(fct, s):\n    return fct(s)\n\n\nclass TestVertAndHorMirror(unittest.TestCase):\n    def test_vert_mirror(self):\n        fct, s = vert_mirror, \"hSgdHQ\\nHnDMao\\nClNNxX\\niRvxxH\\nbqTVvA\\nwvSyRu\"\n        actual = oper(fct, s)\n        self.assertEqual(actual, \"QHdgSh\\noaMDnH\\nXxNNlC\\nHxxvRi\\nAvVTqb\\nuRySvw\")\n\n    def test_hor_mirror(self):\n        fct, s = hor_mirror, \"lVHt\\nJVhv\\nCSbg\\nyeCt\"\n        actual = oper(fct, s)\n        self.assertEqual(actual, \"yeCt\\nCSbg\\nJVhv\\nlVHt\")\n", "def reverse_str(str):\n    return str[::-1]\n\n\ndef vert_mirror(strng):\n    string_list = strng.split(\"\\n\")\n    result = \"\"\n    for i, element in enumerate(string_list):\n        result = result + reverse_str(element)\n        if i != len(string_list) - 1:\n            result += \"\\n\"\n    return result\n\ndef hor_mirror(strng):\n    string_list = strng.split(\"\\n\")\n    result = \"\"\n    for i, element in enumerate(string_list):\n        result = element + result\n        if i != len(string_list) - 1:\n            result = \"\\n\" + result \n    return result\n    \ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng):\n    strng = strng.split(\"\\n\")\n    res = []\n    for substr in strng:\n        res.append(substr[::-1])\n    res = '\\n'.join(res)\n    return res\ndef hor_mirror(strng):\n    strng = strng.split(\"\\n\")\n    res = []\n    for index in range(len(strng)):\n        res.append(strng[len(strng) - index - 1])\n    res = '\\n'.join(res)\n    return res\ndef oper(fct, s):\n    if (fct == vert_mirror):\n        return vert_mirror(s)\n    elif (fct == hor_mirror):\n        return hor_mirror(s)\n", "vert_mirror = lambda strng: '\\n'.join(i[::-1] for i in strng.split())\nhor_mirror = lambda strng: '\\n'.join(strng.split()[::-1])\noper = lambda fct, s: fct(s)", "def vert_mirror(strng):\n    return '\\n'.join(chunk[::-1] for chunk in strng.split('\\n'))\n    \ndef hor_mirror(strng):\n    return '\\n'.join(strng.split('\\n')[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "from string import ascii_letters\n\ndef vert_mirror(strng):\n    return \"\\n\".join(w[::-1] for w in strng.split('\\n'))\n\ndef hor_mirror(strng):\n    return \"\\n\".join(w for w in strng.split('\\n')[::-1])\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return (line[::-1] for line in strng.split('\\n'))\ndef hor_mirror(strng):\n    return strng.split('\\n')[::-1]\n    # your code\ndef oper(fct, s):\n    return '\\n'.join(fct(s))", "def vert_mirror(strng):\n    segments = strng.split('\\n')\n    for i in range(len(segments)):\n        segments[i] = segments[i][::-1]\n    return segments\n    \n    # your code\ndef hor_mirror(strng):\n    segments = strng.split('\\n')\n    s = segments[::-1]\n    return s\n    # your code\ndef oper(fct, s):\n    return '\\n'.join(fct(s))\n    # your code\n", "def vert_mirror(s):\n    return '\\n'.join(list(map(lambda x: x[::-1],s.split('\\n'))))\n    \ndef hor_mirror(s):\n    return '\\n'.join(s.split('\\n')[::-1])\n    \ndef oper(f, s):\n    if str(f).split()[1] == 'vert_mirror': return vert_mirror(s)\n    return hor_mirror(s)", "def vert_mirror(strng):\n    return \"\\n\".join([strng.split('\\n')[i][::-1] for i in range(len(strng.split('\\n')))])\n\ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split('\\n')[::-1])\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    v_mirror = []\n    for row in strng.split(\"\\n\"):\n        v_mirror.append(row[::-1])\n    return \"\\n\".join(v_mirror)\n\ndef hor_mirror(strng):\n    return \"\\n\".join(list(reversed(strng.split(\"\\n\"))))\n\ndef oper(fct, s):\n    if fct == vert_mirror:\n        return vert_mirror(s)\n    else:\n        return hor_mirror(s)", "def vert_mirror(strng):\n    s = strng.split('\\n')\n    return '\\n'.join([x[::-1] for x in s])\ndef hor_mirror(strng):\n    s = strng.split('\\n')\n    return '\\n'.join(s[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    L=[]\n    str = strng.split(\"\\n\")\n    for s in str:\n        L.append(s[::-1])\n    return \"\\n\".join(L)\ndef hor_mirror(strng):\n    str = strng.split(\"\\n\")\n    return \"\\n\".join(str[::-1])\n    \ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng: str):\n    return \"\\n\".join(el[::-1] for el in strng.split())\n\n\ndef hor_mirror(strng: str):\n    return \"\\n\".join(reversed(strng.split()))\n\n\ndef oper(fct, s):\n    return fct(s)\n", "vert_mirror = lambda S   : '\\n'.join(s[::-1] for s in S.split('\\n'))\nhor_mirror  = lambda S   : '\\n'.join(S.split('\\n')[::-1])\noper        = lambda f, S: f(S)", "def vert_mirror(strng):\n    strng = strng.split('\\n')\n    strng = [i[::-1] for i in strng]\n    return '\\n'.join(strng)\n\ndef hor_mirror(strng):\n    strng = strng.split('\\n')\n    strng = strng[::-1]\n    return '\\n'.join(strng)\n\ndef oper(fct, s):\n    return fct(s)", "def oper(fct, s):\n    return fct(s)\n\ndef vert_mirror(strng):\n    vert = strng.split()\n    vert1 = []\n    vert2 = '\\n'\n    for i in range(len(vert)):\n        vert1.append(vert[i][::-1])\n    return (vert2.join(vert1))\n    \ndef hor_mirror(strng):\n    hor = strng.split()\n    hor1 = hor[::-1]\n    hor2 = '\\n'\n    return hor2.join(hor1)\n\n", "def vert_mirror(st):\n    a = st.split(\"\\n\")\n    for i in range(len(a)):\n        a[i] = list(a[i])\n        a[i].reverse()\n        a[i] = ''.join(a[i])\n    return  \"\\n\".join(a)\ndef hor_mirror(st):\n    a = st.split('\\n')\n    a.reverse()\n    return \"\\n\".join(a)\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    lst = strng.split()[::-1]\n    return \"\\n\".join(lst)[::-1]\n\n\ndef hor_mirror(strng):\n    lst = strng.split()[::-1]\n    return \"\\n\".join(lst)\n\n\ndef oper(fct, s):\n    return fct(s)", "from typing import Callable\n\ndef oper(callback: Callable[[str], str], string: str) -> str:\n    return callback(string)\n\ndef vert_mirror(string: str) -> str:\n    return '\\n'.join([\n        line[::-1] for line in string.split('\\n')\n    ])\n\ndef hor_mirror(string: str) -> str:\n    return '\\n'.join(\n        string.split('\\n')[::-1]\n    )", "def vert_mirror(strng):\n    strs=strng.split('\\n')\n    for s in range(len(strs)):\n        strs[s] = strs[s][::-1]\n    return '\\n'.join(strs)\n    \ndef hor_mirror(strng):\n    stsrs=strng.split('\\n')\n    return '\\n'.join(stsrs[::-1])\n    \ndef oper(fct, s):\n    return fct(s)\n    \n    \n    \n", "def vert_mirror(strng):\n    return '\\n'.join(w[::-1] for w in strng.split())\n\ndef hor_mirror(strng):\n    return '\\n'.join(strng.split()[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    ans = \"\"\n    sq = strng.split(\"\\n\")\n    dim = len(sq)\n    for i in range (0,dim,1):\n        print(i)\n        ans += str(sq[i][::-1]) + \"\\n\"    \n    return ans.rstrip(\"\\n\")\n    \ndef hor_mirror(strng):\n    ans = \"\"\n    sq = strng.split(\"\\n\")\n    dim = len(sq)\n    for i in range (dim,0,-1):\n        ans += str(sq[i-1]) + \"\\n\"  \n    return ans.rstrip(\"\\n\")\n\ndef oper(fct, s):\n    return vert_mirror(s) if fct == vert_mirror else hor_mirror(s)", "def vert_mirror(string):\n    mylist = string.split('\\n')  #splits into list of the parts\n    for x in range(len(mylist)):\n        mylist[x] = mylist[x][::-1]  \n    mystring = '\\n'.join(mylist)\n    return mystring\ndef hor_mirror(string):\n    mylist = string.split('\\n')\n    mylist = mylist[::-1]\n    mystring = '\\n'.join(mylist)\n    return mystring\ndef oper(fct, s):\n    if fct == vert_mirror:\n        return vert_mirror(s)\n    elif fct==hor_mirror:\n        return hor_mirror(s)\n", "def vert_mirror(strng):\n    return [x[::-1] for x in strng]\ndef hor_mirror(strng):\n    return strng[::-1]\ndef oper(fct, s):\n    strng=s.split(\"\\n\")\n    return \"\\n\".join(fct(strng))", "def vert_mirror(strng):\n    return \"\\n\".join([\"\".join(list(word)[::-1]) for word in strng.split()])\n\ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split()[::-1])\n\ndef oper(fct, s):\n    return eval('fct(s)')", "def vert_mirror(strng):\n    return \"\\n\".join(cs[::-1] for cs in strng.split(\"\\n\"))\n    \ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split(\"\\n\")[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return \"\\n\".join(cs[::-1] for cs in strng.split(\"\\n\"))\n    \ndef hor_mirror(strng):\n    return \"\\n\".join(strng.split(\"\\n\")[::-1])\n    \ndef oper(fct, s):\n    return vert_mirror(s) if fct == vert_mirror else hor_mirror(s)", "def vert_mirror(strng):\n    strng = strng.split('\\n')\n    return '\\n'.join(i[::-1] for i in strng)\n\ndef hor_mirror(strng):\n    strng = strng.split('\\n')\n    return '\\n'.join(i for i in reversed(strng))\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    l = strng.split('\\n')\n    p = []\n    for i in l:\n        p.append(i[::-1])\n    return '\\n'.join(p)\ndef hor_mirror(strng):\n    l = list(reversed(strng.split('\\n')))\n    return '\\n'.join(l)\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(str):\n    return '\\n'.join([i[::-1] for i in str.split('\\n')])\n    \ndef hor_mirror(str):\n    return '\\n'.join(str.split('\\n')[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    lines = strng.split(\"\\n\")\n    transformed_lines = [\"\".join(reversed(line)) for line in lines]\n    return \"\\n\".join(transformed_lines)\n    \ndef hor_mirror(strng):\n    lines = strng.split(\"\\n\")\n    return \"\\n\".join(reversed(lines))\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(s):\n    return '\\n'.join(m[::-1] for m in s.split('\\n'))\ndef hor_mirror(s):\n    return '\\n'.join(s.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(s):\n    return '\\n'.join([s.split('\\n')[0][::-1]] + [m[1:][::-1]+m[0] for m in s.split('\\n')[1:]])\ndef hor_mirror(s):\n    return '\\n'.join(s.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)\n", "def vert_mirror(strng):\n    strng = strng.split(\"\\n\")\n    output = []\n    for word in strng:\n        output.append(word[::-1])\n    return '\\n'.join(output)    \ndef hor_mirror(strng):\n    strng = strng.split(\"\\n\")\n    output = []    \n    return '\\n'.join(strng[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(string):\n    return [s[::-1] for s in string]\ndef hor_mirror(string):\n    return string[::-1]\ndef oper(fct, s):\n    return '\\n'.join(fct(s.split('\\n')))", "def vert_mirror(strng):\n    sub_list = strng.split(\"\\n\")\n    for index, substr in enumerate(sub_list):\n        sub_list[index] = substr[::-1]\n    return \"\\n\".join(sub_list)\n\ndef hor_mirror(strng):\n    sub_list = strng.split(\"\\n\")\n    sub_list.reverse()\n    return \"\\n\".join(sub_list)\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join([text[::-1] for text in strng.split('\\n')])\n    \ndef hor_mirror(strng):\n    return '\\n'.join(strng.split('\\n')[::-1])\n    \ndef oper(fct, s):\n    return vert_mirror(s) if fct is vert_mirror else hor_mirror(s)\n", "def vert_mirror(value: str):\n    return '\\n'.join([s[::-1] for s in value.split('\\n')])\n\ndef hor_mirror(value):\n    return '\\n'.join(value.split('\\n')[::-1])\n\ndef oper(func, value):\n    return func(value)\n", "def vert_mirror(strng):\n    lst = strng.split(\"\\n\")\n    return \"\\n\".join(\"\".join(i[::-1]) for i in lst)\ndef hor_mirror(strng):\n    lst = strng.split(\"\\n\")\n    return \"\\n\".join(lst[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(s):\n    lst = s.split('\\n')\n    return '\\n'.join([x[::-1] for x in lst])\n    \ndef hor_mirror(s):\n    lst = s.split('\\n')\n    return '\\n'.join(lst[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    s = strng.split(\"\\n\")\n    l = list()\n    for i in s:\n        l.append(i[::-1])\n    return \"\\n\".join(str(i) for i in l)\ndef hor_mirror(strng):\n    s = strng.split(\"\\n\")\n    return \"\\n\".join(str(i) for i in s[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return \"\\n\".join([x[::-1] for x in strng.split(\"\\n\")])\ndef hor_mirror(strng):\n    return \"\\n\".join(x for x in strng.split(\"\\n\")[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    strng = strng.split(\"\\n\")\n    return \"\\n\".join(s[::-1] for s in strng)\n    \ndef hor_mirror(strng):\n    strng = strng.split(\"\\n\")\n    return \"\\n\".join(strng[::-1])\n    \ndef oper(fct, s):\n    return fct(s)", "from typing import Callable\n\n\ndef vert_mirror(strng: str) -> str:\n    return '\\n'.join(s[::-1] for s in strng.splitlines())\n\n\ndef hor_mirror(strng: str) -> str:\n    return '\\n'.join(strng.splitlines()[::-1])\n\n\ndef oper(fct: Callable[[str], str], s) -> str:\n    return fct(s)\n", "import re\ndef vert_mirror(strng):\n    x=re.split(\"\\s\",strng)\n    y=[i[::-1] for i in x]\n    return '\\n'.join(y)\ndef hor_mirror(strng):\n    x=re.split('\\s',strng)\n    a=x[::-1]\n    return '\\n'.join(a)\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join([a[::-1] for a in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join(reversed(strng.split('\\n')))\ndef oper(fct, s):\n    return fct(s)", "vert_mirror = lambda s: '\\n'.join(r[::-1] for r in s.split('\\n'))\nhor_mirror = lambda s: '\\n'.join(s.split('\\n')[::-1])\noper = lambda f, s: f(s)", "def vert_mirror(strng):\n    return '\\n'.join(''.join(reversed(line)) for line in strng.split('\\n'))\n\ndef hor_mirror(strng):\n    return '\\n'.join(reversed(strng.split('\\n')))\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    # your code\n    p=[]\n    s=strng.split(\"\\n\")\n    for i in s:\n        p.append(i[::-1])\n    return \"\\n\".join(p)\ndef hor_mirror(strng):\n    # your code\n    s=strng.split(\"\\n\")\n    p=s[::-1]\n    return \"\\n\".join(p)\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join(list(map(lambda x: x[::-1], strng.split('\\n'))))\n\ndef hor_mirror(strng):\n    return '\\n'.join(list(map(lambda x: x[::-1], strng[::-1].split('\\n'))))\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    arr = [s[::-1] for s in strng.split('\\n')]\n    return('\\n'.join(arr))\ndef hor_mirror(strng):\n    print('there')\n    return('\\n'.join([s for s in strng.split('\\n')][::-1]))\ndef oper(fct, s):\n    return(fct(s))", "def vert_mirror(strng):\n    # your code\n    lst = strng.split('\\n')\n    return '\\n'.join(i[::-1] for i in lst)\ndef hor_mirror(strng):\n    lst = strng.split('\\n')\n    return '\\n'.join(lst[::-1])\ndef oper(fct, s):\n    return vert_mirror(s) if fct == vert_mirror else hor_mirror(s)", "def vert_mirror(strng):\n    return '\\n'.join(elem[::-1] for elem in strng.split('\\n'))\ndef hor_mirror(strng):\n    return '\\n'.join(strng.split('\\n')[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(s):\n    return \"\\n\".join([\"\".join([line[i] for i in range(len(line)-1,-1,-1)]) for line in s.splitlines()])\ndef hor_mirror(s):\n    return \"\\n\".join([s.splitlines()[i] for i in range(len(s.splitlines())-1,-1,-1)])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(parts):\n    return [p[::-1] for p in parts]\n\ndef hor_mirror(parts):\n    return parts[::-1]\n\ndef oper(fct, s):\n    parts = s.split('\\n')\n    return '\\n'.join(fct(parts))", "def vert_mirror(strng):\n    return \"\\n\".join([e[::-1] for e in strng.split()])\n\ndef hor_mirror(strng):\n    return \"\\n\".join([e for e in strng.split()[::-1]])\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return \"\".join([e[::-1]+\"\\n\" for e in strng.split()])[0:-1]\n\ndef hor_mirror(strng):\n    return \"\".join([e+\"\\n\" for e in strng.split()[::-1]])[0:-1]\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join([\n        row[::-1] for row in strng.split('\\n')\n    ])\ndef hor_mirror(strng):\n    return '\\n'.join([\n        row for row in reversed(strng.split('\\n'))\n    ])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):  \n    return '\\n'.join([x[::-1] for x in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join([x for x in strng.split('\\n')[::-1]])\ndef oper(fct, s):\n    if fct == vert_mirror:\n        return vert_mirror(s)\n    elif fct == hor_mirror:\n        return hor_mirror(s)", "def vert_mirror(strng):\n    return '\\n'.join([s[::-1] for s in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join([s for s in strng.split('\\n')[::-1]])\ndef oper(fct, s):\n    return fct(s)", "vert_mirror = lambda x:'\\n'.join([i[::-1] for i in x.split('\\n')])\nhor_mirror = lambda x: '\\n'.join(x.split('\\n')[::-1])\noper = lambda x, y: x(y)", "def vert_mirror(strng):\n    subStrings = strng.split('\\n')\n    reversedStrings = [substring[::-1] for substring in subStrings]\n    joinedStrings = '\\n'.join(reversedStrings)\n    return joinedStrings\n    \ndef hor_mirror(strng):\n    subStrings = strng.split('\\n')\n    reversedStrings = [substring for substring in reversed(subStrings)]\n    joinedStrings = '\\n'.join(reversedStrings)\n    return joinedStrings\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(string):\n    return '\\n'.join(s[::-1] for s in string.split('\\n'))\n    \n    \ndef hor_mirror(string):\n    return '\\n'.join(string.split('\\n')[::-1])\n    \n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    a = strng.split(\"\\n\")\n    vert_m = ''\n\n    for word in a:\n        vert_m +=word[::-1] +\"\\n\"\n\n    return vert_m.strip(\"\\n\")\n\n\ndef hor_mirror(strng):\n    a = strng.split(\"\\n\")\n    a.reverse()\n    hor_m = ''\n\n    for word in a:\n        hor_m += word + \"\\n\"\n\n    return hor_m.strip(\"\\n\")\n\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(s):\n    return \"\\n\".join([w[::-1] for w in s.split(\"\\n\")])\ndef hor_mirror(s):\n    return \"\\n\".join([w for w in s.split(\"\\n\")][::-1])\ndef oper(fct, s):\n    return fct(s)", "n=\"\\n\"\ndef vert_mirror(s):\n    return n.join([elem[::-1] for elem in s.split(n)])\ndef hor_mirror(s):\n    return n.join(s.split(n)[::-1])\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(s):\n    splitted_s = s.split('\\n')\n    l = []\n    for word in splitted_s:\n        reversed_word = word[::-1]\n        l.append(reversed_word)\n    new_s = '\\n'.join(l)\n    return(new_s)\n\n\ndef hor_mirror(s):\n    splitted_s = s.split('\\n')\n    splitted_s.reverse()\n    return('\\n'.join(splitted_s))\n\ndef oper(fct, s):\n    return(fct(s))", "def vert_mirror(s):\n    return '\\n'.join(_[::-1] for _ in s.split())\ndef hor_mirror(s):\n    return  '\\n'.join(s.split()[::-1])\ndef oper(fct, s):\n   return fct(s)\n# Flez\n   \n", "def vert_mirror(s):\n    s = s.splitlines()\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    s = '\\n'.join(s)\n    return s\n\ndef hor_mirror(s):\n    s = s[::-1].splitlines()\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    s = '\\n'.join(s)\n    return s\n\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(string):\n    return \"\\n\".join(row[::-1] for row in string.split(\"\\n\"))\n    \ndef hor_mirror(string):\n    return \"\\n\".join(string.split(\"\\n\")[::-1])\n    \ndef oper(fct, string):\n    return fct(string)", "def vert_mirror(strng):\n    a = strng.split(\"\\n\")\n    b = [i[::-1] for i in a]\n    return \"\\n\".join(b)\ndef hor_mirror(strng):\n    a = strng.split(\"\\n\")\n    b = a[::-1]\n    return \"\\n\".join(b)\ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    strng_list = strng.split('\\n')\n    for i in range(len(strng_list)):\n        strng_list[i] = strng_list[i][::-1]\n    return \"\\n\".join(strng_list)    \n    \ndef hor_mirror(strng):\n    strng_list = strng.split('\\n')\n    strng_list.reverse()\n    return \"\\n\".join(strng_list)\n    \ndef oper(fct, s):\n    return fct(s)", "def vert_mirror(strng):\n    return '\\n'.join([r[::-1] for r in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join([r for r in strng.split('\\n')][::-1])\ndef oper(fct, s):\n    return fct(s)"]