["from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n)) // 2 + 1", "def layers(n):\n    return (1 + (n-1)**.5) // 2 + 1", "def layers(n):\n    i = 1\n    r = 1\n    while i*i < n: \n        i += 2\n        r += 1\n        \n    return r", "import math\ndef layers(n):\n    return math.ceil( (n**0.5 + 1.0)*0.5)", "def layers(n):\n    return int(((n - 1)**0.5 + 1) // 2) + 1 ", "from math import ceil\ndef layers(n):\n    return ceil((n**.5+1)/2)", "from itertools import count\n\ndef layers(n):\n    for i in count(1):\n        if n <= (2*i-1) ** 2:\n            return i", "from math import ceil\n\ndef layers(n):\n    r = ceil(n**0.5)    \n    return (r + (1 if r % 2 else 2)) // 2    ", "from math import ceil; layers=lambda n: ceil(n**0.5)//2+1", "def layers (n):\n    level, i = 1, 1\n    continuer = True\n    while continuer :\n        x = i * i\n        if x < n :\n            level += 1\n            i += 2\n        elif n <= x:\n            return level\n"]