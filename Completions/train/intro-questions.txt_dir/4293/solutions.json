["def calculate_1RM(w, r):\n    if r == 0: return 0\n    if r == 1: return w\n    \n    return round(max([\n      w * (1 + r / 30),                 # Epley\n      100 * w / (101.3 - 2.67123 * r),  # McGlothin\n      w * r**0.10                       # Lombardi\n      ]))", "def calculate_1RM(w, r):\n    return (\n        w if r == 1 else\n        0 if r == 0 else\n        round(max(\n            w * (1 + r/30),\n            100 * w / (101.3 - 2.67123*r),\n            w * r**0.10,\n        ))\n    )", "epley     = lambda w,r: w * (1+r/30)\nmcGlothin = lambda w,r: 100*w / (101.3 - 2.67123*r)\nlombardi  = lambda w,r: w * r**0.10\n\ndef calculate_1RM(w, r):\n    return r and (w if r == 1 else round(max(epley(w,r), mcGlothin(w,r), lombardi(w,r))))", "calculate_1RM=lambda w,r:[[round(max(w*(1+(r/30)),100*w/(101.3-(2.67123*r)),w*r**0.10)),0][r==0],w][r==1]", "def calculate_1RM(w, r):\n    if r <= 1:\n        return r*w\n    return int(round(max( (w*(1+r/30)), ((100*w)/(101.3-2.67123*r)), (w*r**0.10) )))", "ORM = [('Epley', lambda w,r: w * (1 + r/30)),\n       ('McGlothin', lambda w,r: 100 * w / (101.3 - 2.67123 * r)),\n       ('Lombardi', lambda w,r: w * r**0.1)]\n\ndef calculate_1RM(w, r):\n    if r == 0: return 0\n    elif r == 1: return w\n    else: return round(max(func(w, r) for _, func in ORM))", "def calculate_1RM(w, r):\n    if r in (0, 1):\n        return (0, w)[r]\n    epley = w * (1 + r / 30)\n    mcg = 100 * w / (101.3 - 2.67123 * r)\n    lomb = w * r ** .1\n    return round(max((epley, mcg, lomb)))\n", "def calculate_1RM(w, r):\n    if r == 1:\n      return w\n    if r == 0:\n      return 0\n    return round(max(w*(1+r/30),100*w/(101.3-2.67123*r),w*(r**0.1)))", "def calculate_1RM(w, r):\n    if r == 0:\n        return 0\n    if r == 1:\n        return w\n    return max(int(round(w*(1+r/30))),int(round(100*w/(101.3-2.67123*r))),int(round(w*r**(1/10))))", "def calculate_1RM(w, r):\n    return [w if r == 1 else r if r == 0 else round(max([w * (1 + r / 30), 100 * w / (101.3 - 2.67123 * r), w * r**0.1]))][0]"]