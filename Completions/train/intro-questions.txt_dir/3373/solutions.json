["from numpy import matrix\n\ndef matrix_mult(a, b):\n  return ( matrix(a) * matrix(b) ).tolist()", "def matrix_mult(a, b):\n  return [[sum(a[i][k]*b[k][j] for k in range(len(a))) for j in range(len(a))] for i in range(len(a))]", "import numpy as np\ndef matrix_mult(a, b):\n  return np.dot(a,b).tolist()", "def matrix_mult(a, b):\n  n = len(a)\n  x = [[0 for i in range(n)] for j in range(n)]\n  \n  for k in range(n):\n      for i in range(n):\n          for j in range(n):\n              x[i][j] += a[i][k] * b[k][j]\n          \n  return x", "class Matrix:\n    def __init__(self, data):\n        self._data = data\n        self._rows = len(data)\n        self._columns = len(data[0])\n\n\n    @classmethod\n    def empty(cls, rows, columns):\n        data = [[None for _ in range(columns)] for _ in range(rows)]\n\n        return cls(data)\n\n\n    def __getitem__(self, key):\n        return self._data[key]\n        \n      \n    @property\n    def data(self):\n        return self._data\n\n\n    @property\n    def rows(self):\n        return self._rows\n\n\n    @property\n    def columns(self):\n        return self._columns\n\n\n    def row(self, row_index):\n        for elem in self._data[row_index]:\n            yield elem\n\n\n    def column(self, column_index):\n        for row in self._data:\n            yield row[column_index]\n\n\n    def __str__(self):\n        str_rows = []\n        for row in self._data:\n            str_rows.append('  '.join(map(str, row)))\n\n        return \"\\n\".join(str_rows)\n\n\n    def __mul__(self, matrix):\n        result = Matrix.empty(self.rows, self.columns)\n\n        for result_row in range(result.rows):\n            for result_column in range(result.columns):\n                current_row = self.row(result_row)\n                current_column = matrix.column(result_column)\n\n                result_element = 0\n                while True:\n                    try:\n                        row_element = next(current_row)\n                        column_element = next(current_column)\n                    except StopIteration:\n                        break\n                    result_element += row_element * column_element\n\n                result[result_row][result_column] = result_element\n\n        return result\n\n\ndef matrix_mult(a, b):\n  product = Matrix(a) * Matrix(b)\n  return product.data\n  \n  \n  \n", "def matrix_mult(a, b):\n    b = list(zip(*b))\n    return [[ sum(n*m for n,m in zip(a[x], b[y])) for y in range(len(a))] for x in range(len(a))]", "def matrix_mult(a, b):\n  C = []\n  for i in range(len(a)):\n      row=[]\n      for j in range(len(a)):\n          z=0\n          for k in range(len(a)):\n              z += a[i][k]*b[k][j]\n          row.append(z)     \n      C.append(row)\n  return C", "import numpy as np\ndef matrix_mult(a, b):\n  a = np.array(a)\n  b = np.array(b)\n  return np.matmul(a,b).tolist()\n", "def matrix_mult(A, B):\n  # Multiply two lists index by index\n  item_multiply = lambda x, y: sum(x[i]*y[i] for i in range(len(x)))\n  # Reverse the matrix to allow index by index multiplication\n  B = [[j[i] for j in B] for i in range(len(B[0]))]\n  result = []\n  # Go line by line on matrix a\n  cycles = list(range(len(A)))\n  for k in cycles:\n      items = []\n      # Add all lists multiplications to a list\n      for l in cycles:\n          items.append(item_multiply(A[k], B[l]))\n      # Then add these multiplications list to the result\n      result.append(items)\n  return result\n", "def matrix_mult(a, b):\n  c = [[0]*len(a) for i in range(len(a))]\n  for i in range(len(a)):\n      for j in range(len(a)):\n          for n in range(len(a)):\n              c[i][j]+=a[i][n]*b[n][j]\n  return c"]