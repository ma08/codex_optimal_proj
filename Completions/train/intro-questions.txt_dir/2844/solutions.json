["def chessboard(s):\n    N, M = map(int, s.split())\n    row = \".*\" * M\n    return \"\\n\".join( [row[:M] if i&1 else row[1:M+1] for i in range(N)] )", "chessboard = lambda s: '\\n'.join(([''.join(['.' if (x + y) % 2 else '*' for x in range(int(s.split()[1]))]) for y in range(int(s.split()[0]))]))", "from itertools import cycle, islice\n\n\ndef chessboard(s):\n    n, m = (int(a) for a in s.split())\n    if not n or not m:\n        return ''\n    return '\\n'.join(islice(cycle(\n        (''.join(islice(cycle('*.'), m)), ''.join(islice(cycle('.*'), m)))\n    ), n))", "def chessboard(st):\n    height, width = map(int, st.split())\n    if height == 0 or width == 0: return \"\"\n    board = [[\"*.\"[(x+y)&1] for x in range(width)] for y in range(height)]\n    return \"\\n\".join(map(\"\".join, board))", "def chessboard(s):\n    rows,cols = map(int,s.split())\n    if rows and cols:\n        return \"\\n\".join(\"\".join(\"*.\"[(i+j)%2] for i in range(cols)) for j in range(rows))\n    return ''", "def chessboard(s):\n    a,b = map(int,s.split())\n    return '\\n'.join(('*.'*(b+1))[i&1:(i&1)+b] for i in range(a))", "def chessboard(s):\n    row, column = [int(num) for num in s.split()]\n    return \"\\n\".join(\"\".join(\"*.\"[(i + j) % 2] for j in range(column)) for i in range(row))", "def chessboard(s):\n    w,h=map(int,s.split())\n    return'\\n'.join(''.join('*.'[(i+j)%2]for i in range(h))for j in range(w))", "def chessboard(s):m,n=map(int,s.split());return'\\n'.join(('*.'*n)[i%2:n+i%2]for i in range(m))", "def chessboard(s):\n    r,c=map(int,s.split())\n    return \"\\n\".join(\"\".join(\"*.\"[j%2!=i%2] for j in range(c)) for i in range(r))"]