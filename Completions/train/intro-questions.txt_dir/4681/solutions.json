["def alphabetized(s):\n    return \"\".join(sorted(filter(str.isalpha, s),key=str.lower))\n", "import re\n\ndef alphabetized(s):\n    return ''.join(sorted(re.sub(r'[^A-Za-z]','',s), key=str.lower))", "alphabetized = lambda s: \"\".join(sorted(filter(str.isalpha, s), key=str.lower))", "def xx_key(a):\n    if a.islower():\n        return ord(a)\n    else:\n        return ord(a)+32\ndef alphabetized(s):\n    s = ''.join(s.split())\n    m = sorted(s, key=xx_key)\n    return ''.join([i for i in m if i.isalpha()])", "def alphabetized(stg):\n    return \"\".join(sorted((c for c in stg if c.isalpha()), key=str.lower))", "def alphabetized(s):\n    return ''.join(sorted( ''.join([x for x in s if x.isalpha()]) , key=lambda x: x.lower()))", "def alphabetized(s):\n    return ''.join(ch for ch in sorted(s, key=lambda ch: ch.lower()) if ch.isalpha())", "def alphabetized(s):\n    return ''.join(sorted([c for c in s if c.isalnum()], key=str.lower))", "def alphabetized(s):\n    cs = [(c, i) for i, c in enumerate(s) if c.isalpha()]\n    cs = sorted(cs, key=lambda c: (c[0].lower(), c[1]))\n    return ''.join(c for c, _ in cs)", "def alphabetized(s):\n    return ''.join(sorted([i for i in s if i.isalpha()], key=lambda s: s.upper()))"]