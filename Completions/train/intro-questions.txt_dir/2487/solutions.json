["class Solution:\n     def repeatedSubstringPattern(self, s):\n         return s in (s + s)[1:-1]\n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if not s:\n             return False\n             \n         ss = (s + s)[1:-1]\n         return s in ss\n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         double_s = s + s\n         return s in double_s[1:len(double_s)-1]", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         return any(s[:i] * (len(s) // i) == s for i in range(1, len(s) // 2 + 1) if len(s) % i == 0)", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         size = len(s)\n         for x in range(1, size // 2 + 1):\n             if size % x:\n                 continue\n             if s[:x] * (size // x) == s:\n                 return True\n         return False", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         size = len(s)\n         for x in range(1, size // 2 + 1):\n             if size % x:\n                 continue\n             if s[:x] * (size // x) == s:\n                 return True\n         return False", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         n = len(s)                  # find len\n         for i in range(n//2,0,-1):  # loop from end to start\n             if n%i ==0:             # if n is sub_len integer tiems\n                 repeat = s[0:i]\n                 if repeat*(n//i) ==s: #if repeat*several_times == s\n                     return True\n         return False\n \n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s)<1:\n             return True\n         if len(s)==1:\n             return False\n         for lenofsub in range(1,len(s)):\n             if (len(s)%lenofsub==0):\n                 substring=[s[0:lenofsub]]*(len(s)//lenofsub)\n                 if ''.join(substring)==s:\n                     return True\n         return False\n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if not s:\n             return False\n             \n         ss = (s + s)[1:-1]\n         return s in ss \n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n \n         ss = (s + s)[1:-1]\n         return ss.find(s) != -1", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         return s in (2 * s)[1:-1]\n", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         size = len(s)\n         for x in range(1, size // 2 + 1):\n             if size % x:\n                 continue\n             if s[:x] * (size // x) == s:\n                 return True\n         return False", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         size = len(s)\n         for i in range(1, size//2 + 1):\n             if size % i:\n                 continue\n             if s[:i] * (size//i) == s:\n                 return True\n         return False", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         return s in (s+s)[1:-1]", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         s_len = len(s)\n         for i in range(1,(s_len)//2+1):\n             if s[i] == s[0]:\n                 s_sub = s[:i]\n                 s_new = s_sub * (s_len // i)\n                 if s_new == s:\n                     return True\n         return False", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         ss = (s*2)[1:-1]\n         return s in ss", "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         length = len(s)\n         \n         base = 1\n         while base <= length // 2:\n             if length % base == 0:\n                 if s[:base]*(length//base) == s:\n                     return True\n             base += 1\n         \n         return False"]