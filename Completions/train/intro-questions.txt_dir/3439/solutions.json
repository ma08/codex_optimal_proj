["def solve(n):\n    if n < 10:\n        return n\n    a = int((len(str(n)) - 1) * '9')\n    b = n - a\n    return sum([int(i) for i in (list(str(a)) + list(str(b)))])\n", "def solve(n):\n    a = (len(str(n)) - 1) * '9' or '0'\n    return sum(map(int, a + str(n - int(a))))", "def solve(n):\n    a = 0\n    while a * 10 + 9 <= n:\n        a = a * 10 + 9\n    return sum(map(int, str(a) + str(n-a)))", "def solve(n):\n    l = len(str(n)) - 1\n    return sum(map(int, str(n - 10**l + 1))) + 9*l", "def solve(param):\n    a = int('0' + '9' * (len(str(param)) - 1))\n    return sum(int(d) for d in str(a) + str(param - a))", "def solve(n): \n    a=10**(len(str(n))-1)-1\n    return sum(map(int,str(a)+str(n-a)))", "solve = lambda n: sum(map(int, str(n - int('0' + '9' * (len(str(n))-1))))) + 9 * (len(str(n)) - 1)", "def solve(n): \n    return n if n < 10 else 9 + solve(n // 10) if n % 10 == 9 else 10 + n % 10 + solve(n // 10 - 1)", "def solve(x):\n        if not x:\n              return x\n        b = int(str(int(str(x)[0]) -1) +''.join('9' for i in range(len(str(x))-1)))\n        a = x-b\n        return sum([int(i) for i in str(a)])+sum([int(i) for i in str(b)])", "def solve(n):\n    n = str(n)\n    a = str(int(n[0])-1)+'9'*(len(n)-1)\n    b = str(int(n)-int(a))\n    return sum(int(i) for i in a+b) if int(n) else 0 "]