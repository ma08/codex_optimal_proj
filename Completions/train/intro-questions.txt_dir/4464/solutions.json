["def feast(beast, dish):\n    return beast[0]==dish[0] and dish[-1]==beast[-1]", "def feast(beast, dish):\n    return beast[0] == dish[0] and beast[-1] == dish[-1]    ", "def feast(beast, dish):\n    return beast.startswith(dish[0]) and beast.endswith(dish[-1])", "def feast(beast, dish):\n    \"\"\" (str, str) -> bool\n    Return true if dish and beast start and end with same letters.\n    \"\"\"\n    return beast[0] == dish[0] and beast[-1] == dish[-1]", "def feast(beast, dish):\n    return True if beast[:1] == dish[:1] and beast[-1] == dish [-1] else False", "def feast(beast, dish):\n    if beast[0] == dish[0] and beast[-1] == dish[-1]:\n        return True\n    else:\n        return False", "def feast(b, d):\n    return b[::len(b)-1] == d[::len(d)-1]", "feast = lambda beast, dish: beast[0].lower()==dish[0].lower() and beast[-1].lower()==dish[-1].lower()", "feast = lambda beast, dish: beast[0] == dish[0] and beast[-1] == dish[-1]", "feast = lambda beast, dish: all([beast[i] == dish[i] for i in [0,-1]])", "feast = lambda b, d: (b[0], b[-1]) == (d[0], d[-1])", "def feast(beast, dish):    \n    return [beast[0], beast[-1]] == [dish[0], dish[-1]]\n    \n", "def feast(beast, dish):\n    # your code here\n    pass\n    b = beast.replace(\" \",\"\")\n    length_b = len(b)\n    \n    d = dish.replace(\" \",\"\")\n    length_d = len(d)\n    \n    new_b = b[0] + b[-1]\n    new_d = d[0] + d[-1]\n    \n    return new_b == new_d", "def feast(beast, dish):\n    return beast[0] + beast[-1] == dish[0] + dish[-1]", "def feast(beast: str, dish: str) -> bool:\n    \"\"\"Return true if dish and beast start and end with same letters.\"\"\"\n    return beast[0] == dish[0] and beast[-1] == dish[-1]", "def feast(beast, dish):\n  dish_valid = (beast[0], beast[-1]) == (dish[0], dish[-1])\n  return dish_valid\n", "def feast(beast, dish):\n    return beast.endswith(dish[-1]) and beast.startswith(dish[0])", "def feast(beast, dish):\n    return True if (beast[0], beast[-1]) == (dish[0], dish[-1]) else False\n    pass", "def feast(beast, dish):\n    return True if beast[0]==dish[0] and beast[::-1][0]==dish[::-1][0] else False", "def feast(beast, dish):\n    \"\"\" (str, str) -> bool\n    Return true if beast and dish start and end with same char.\n    \"\"\"\n    return beast[0] == dish[0] and beast[-1] == dish[-1] ", "def feast(beast, dish):\n    if beast[0] == dish[0] and beast[-1] == dish[-1]:\n        return True\n    return False", "def feast(b, d):\n    return b[0]+b[-1] == d[0]+d[-1]", "def feast(beast, dish):\n    return beast[::len(beast)-1] == dish[::len(dish)-1]", "import re\n\ndef feast(beast, dish):\n    return re.sub(r'\\B(.*)\\B', '', beast) == re.sub(r'\\B(.*)\\B', '', dish)", "feast = lambda a,b : 2==(lambda a,b,z,j : (lambda f, arg : sum([f(*a) for a in arg]))((lambda a,b : a==b),[[a[j],b[j]],[a[z],b[z]]]))(a,b,(lambda: 777).__code__.co_nlocals,-(lambda _: 777).__code__.co_nlocals)", "def feast(beast, dish):    # your code here\n    \n    \n    return dish.startswith(beast[0]) and dish.endswith(beast[-1])", "def feast(beast, dish):\n    print(beast[1])\n    print(beast[-1])\n    print(dish[1])\n    print(dish[-1])\n    if beast[0] == dish[0] and beast[-1] == dish[-1]:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n    x = beast[0] + beast[len(beast)-1]\n    y = dish[0] + dish[len(dish)-1]\n    if x == y:\n        return True\n    else:\n        return False\n", "def feast(beast, dish):\n    return (dish.startswith(beast[0]) and dish.endswith(beast[len(beast)-1]))", "feast = lambda beast, dish: beast[-1::1-len(beast)] == dish[-1::1-len(dish)]", "feast=lambda b,d:b[0]==d[0] and b[-1]==d[-1]", "feast=lambda s,d:(s[0],s[-1])==(d[0],d[-1])", "def feast(b,d):\n    return b[0]==d[0] and b[-1]==d[-1]", "def feast(beast, dish):\n    a = beast[0]\n    b = beast[len(beast)-1]\n    c = dish[0]\n    d = dish[len(dish)-1]\n    if a.lower() == c.lower() and b.lower() == d.lower():\n        return True\n    else:\n        return False\n", "def feast(beast, dish):\n    return beast[0:1] == dish[0:1] and beast[::-1][0:1] == dish[::-1][0:1]", "def feast(beast, dish):\n    print(beast, dish)\n    return beast[-1] == dish[-1] and beast[0] == dish[0]", "def feast(beast, dish):\n    return beast.startswith(dish[:1]) & beast.endswith(dish[-1])", "def feast(beast, dish):\n    return True if beast[::len(beast)-1] == dish[::len(dish)-1] else False", "def feast(beast, dish):\n    res = False\n    return beast[0] == dish[0] and beast[len(beast)-1] == dish[len(dish)-1]", "def feast(beast, dish):\n    print(beast, dish)\n    return beast[0] + beast[-1] == dish[0]+dish[-1]", "def feast(beast, dish):\n    return beast and dish and beast[0] == dish[0] and beast[-1] == dish[-1]", "def feast(b, d):\n    return d[0] == b[0] and d[-1] == b[-1]", "def feast(beast, dish):\n    if beast[0] == dish[0] and beast[-1] == dish[-1]: return True\n    else: return False\n    \n    \n# All of the animals are having a feast! Each animal is bringing one dish.\n# There is just one rule: the dish must start and end with the same letters \n# as the animal's name. For example, the great blue heron is bringing garlic\n# naan and the chickadee is bringing chocolate cake.\n\n", "def feast(beast, dish):\n    return ''.join(beast.split())[0]==''.join(dish.split())[0] and ''.join(beast.split())[-1]==''.join(dish.split())[-1]", "def feast(beast, dish):\n    for char in beast:\n        if beast[0] == dish[0] and beast[-1] == dish[-1]:\n            return True\n        else:\n            return False", "def feast(beast, dish):\n    a = beast[0] + beast[-1]\n    b = dish[0] + dish[-1]\n    return a == b", "def feast(beast, dish):\n    # your code here\n    return (beast[0:1] == dish[0:1] and beast[-1:-2:-1] == dish[-1:-2:-1])", "def feast(beast, dish):\n    bf, bl = beast[0], beast[-1]\n    df, dl = dish[0], dish[-1]\n    return (bf, bl) == (df, dl)", "def feast(beast, dish):\n       return dish[0] == beast[0] and beast[-1] == dish[-1]\n\n", "def feast(beast, dish):\n    beastList = list(beast)\n    dishList = list(dish)\n    if beastList[0] == dishList[0] and beastList[-1] == dishList[-1]: \n        return True\n    else: \n        return False", "def feast(beast, dish):\n    x = \"\".join(c for c in beast.split(\" \"))\n    y = \"\".join(c for c in dish.split(\" \"))\n    return (y[0] == x[0] and y[-1] == x[-1])\n", "def feast(beast, dish):\n    return True if beast[0] == dish [0] and beast[-1] == dish[-1] else False\n\n\n\nfeast(\"brown bear\",\"bear claw\" )", "def feast(beast, dish):\n    return all(beast[i]==dish[i] for i in (-1,0))", "def feast(beast, dish):\n    if dish[len(dish)-1] != beast[len(beast)-1] and beast[0] != dish[0]:\n        return False\n    if dish[len(dish)-1] == beast[len(beast)-1] and beast[0] == dish[0]:\n        return True\n    else:\n        return False", "def feast(beast: str, dish: str) -> bool:\n    return True if dish.startswith(beast[0]) and dish.endswith(beast[-1]) else False", "def feast(beast, dish):\n    first = beast[0]\n    last = beast[-1]\n    first1 = dish[0]\n    last1 = dish[-1]\n    if first == first1 and last == last1:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n    beast\n    if beast[0] == dish[0] and beast[-1] == dish[-1]:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n    if beast[0] == dish[0] and beast[-1] == dish[-1]:\n        return True\n    elif beast[0] != dish[0] or beast[-1] != dish[-1]:\n        return False", "def feast(beast, dish):\n    \n    beast.replace(' ','')\n    beast_ls = [x for x in beast]\n    \n    dish.replace(' ','')\n    dish_ls = [x for x in dish]\n    \n    if beast_ls[0] == dish_ls[0] and beast_ls[-1] == dish_ls[-1]:\n        return True\n    else:\n        return False\n", "def feast(beast, dish):\n    x=len(beast)\n    y=len(dish)\n    if (dish[0]==beast[0])and(beast[x-1]==dish[y-1]):\n        return True\n    else:\n        return False\n    # your code here\n    pass", "def feast(beast, dish):\n    firstletter = beast[0]\n    lastletter = beast[-1]\n    firstletterdish = dish[0]\n    lastletterdish = dish[-1]\n    return (firstletter,lastletter) == (firstletterdish,lastletterdish)", "def feast(b, d):\n    return [b[0] == d[0], b[-1] == d[-1]] == [True, True]", "def feast(beast, dish):\n    animalbegin=beast[0]\n    animalend=beast[len(beast)-1]\n    dishbegin=dish[0]\n    dishend=dish[len(dish)-1]\n    if animalbegin==dishbegin and animalend==dishend:\n        return True\n    return False", "def feast(b, d):\n    result = False\n    if d[0] == b[0] and d[-1] == b[-1]:\n        result = True\n    return result", "def feast(beast, dish):\n    return True if dish[0] == beast[0] and dish[len(dish) - 1] == beast[len(beast) -1] else False", "def feast(beast, dish):\n    return True if (beast.split()[0][0] == dish.split()[0][0]) and (beast.split()[-1][-1] == dish.split()[-1][-1]) else False\n", "def feast(beast, dish):\n    dish_allowed = (beast[0] == dish[0]) and (beast[-1] == dish[-1])\n    return dish_allowed", "def feast(beast, dish):\n    # your code here\n    return beast.startswith(dish[0]) and beast.endswith(dish[-1])\n    # don't have to put True or False, as if they will return means its true\n", "def feast(beast, dish):\n    # your code here\n    if str(beast[0]) == str(dish[0]) and beast[-1] == dish[-1]:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n    b_list = list(beast)\n    d_list = list(dish)\n    if b_list[0] == d_list[0] and b_list[-1] == d_list[-1]:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n    fbeast, lbeast = beast[0], beast[-1]\n    fdish, ldish = dish[0], dish[-1]\n\n    return fbeast == fdish and lbeast == ldish", "def feast(beast, dish):\n    print(beast, dish)\n    return True if beast[-1] == dish[-1] and beast[0] == dish[0]else False", "def feast(beast, dish):\n    # your code here\n    print((beast+'*','-',dish+'*'))\n    if beast[0] == dish[0]:\n      if beast[-1] == dish[-1]:\n          return True\n      else:\n          return False\n      \n    else:\n        return False\n", "def feast(beast, dish):\n    print(beast,dish)\n    if beast[0]==dish[0] and beast[-1]==dish[-1]:\n        return True\n    else:\n        return False\n    # your code here\n    pass", "def feast(beast, dish):\n  for i in beast:\n      if beast[0] == dish[0]:\n          if beast[-1] == dish[-1]:\n              return True\n          else:\n              return False\n      else:\n          return False\n          \n          \n", "def feast(beast, dish):\n    lower1= beast.lower()\n    lower2= dish.lower()\n    list1 = lower1[0]\n    list2 = lower2[0]\n    list3 = lower1[-1]\n    list4 = lower2[-1]\n    if list1 == list2 and list3 == list4:\n        return True\n    else:\n        return False", "def feast(beast, dish):\n  if beast[0] == dish[0] and beast[-1] == dish[-1]:\n      return True\n  else:\n      return False\n\n\n #lengthf = len(first)\n #   lengths = len(second)\n #   if second in first[-lengths:]:\n #       return True\n  #  else:\n  #      return False\n", "#input - two strings\n#ouput - boolean\n#edge cases - empty string?, all lower case letters, hyphens and spaces are allowed but not at beginning or end of string\n#assumptions/end goal - this function needs to return true if first and last letters of beast are same as dish. Return false if not.\n\n#sample data\n#(\"great blue heron\", \"garlic naan\") = True\n#(\"chick-a-dee\", \"chocolate cake\") = True\n#(\"chickadee\", \"chocolate croissant\") = False\n#(\"german*8shephard\", \"gluten snack\") = False\n\n\n#function feast takes two arguments, beast & dish\ndef feast(beast, dish):\n#heck if the first letter and last letters are the same and return True if they are\n   return beast[0] == dish[0] and beast[-1] == dish[-1]\n", "def feast(beast, dish):\n    if (beast and dish) != \"\":\n        if beast[0] == dish[0] and beast[-1] == dish[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False", "feast = lambda beast,dish: beast.startswith(dish[0]) and beast.endswith(dish[-1])", "feast = lambda beast, dish: dish.startswith(beast[0]) and dish.endswith(beast[-1])", "def feast(beast, dish):\n    f, s=beast[0], beast[-1]\n    return dish[0]==f and dish[-1]==s", "def feast(beast, dish):\n    \n \n    # your code here\n    x = beast[0]\n    y = dish[0]\n    z = beast[-1]\n    k = dish[-1]\n    if (x == y) and (z == k):\n        return True\n    else:\n        return False\n", "def feast(beast, dish):\n    #if beast[0]==dish[0] and beast[-1]==dish[-1]:\n    #    return True\n    #else:\n    #    return False\n    #return  beast[0]==dish[0] and beast[-1]==dish[-1]\n    return beast.startswith(dish[0]) and beast.endswith(dish[-1])", "def feast(beast, dish):\n    # your code here\n    pass\n    indexBeast = len(beast)\n    indexDish = len(dish)\n    beast1 = beast[0]\n    beastLast = beast[indexBeast-1]\n    dish1 = dish[0]\n    dishLast = dish[indexDish-1]\n    \n    if beast1 == dish1 and beastLast == dishLast:\n        return True\n    else :\n        return False", "def feast(beast, dish):\n    bfirst = beast[0]\n    blast = beast[-1]\n    dfirst = dish[0]\n    dlast = dish[-1]\n    if bfirst == dfirst and blast == dlast:\n        return(True)\n    else:\n        return(False)", "def feast(beast, dish):\n    # your code here\n    \n    if beast[-1].lower() == dish[-1].lower() and beast[0].lower() == dish[0].lower() :\n        return True\n    else:\n        return False\n", "def feast(beast, dish):\n    beast = beast.lower()\n    dish = dish.lower()\n    return beast[0] == dish[0] and beast[-1] == dish[-1]", "def feast(beast, dish):\n    # if beast[0] == dish[0] and beast[last index] == dish[last index] return True \n    return beast[0] == dish[0] and beast[-1] == dish[-1]\n", "def feast(beast, dish):\n    start = beast.startswith(dish[0])\n    finish = beast.endswith(dish[-1:])\n    \n    if start and finish:\n        return True\n    return False", "def feast(b, d):\n    x = [b[0] , b[len(b)-1]]\n    y = [d[0] , d[len(d)-1]]\n    return x==y\n", "def feast(beast, dish):\n    start = beast.startswith(dish[:1])\n    end = beast.endswith(dish[-1:])\n    return start and end\n", "def feast(beast, dish):\n    beast = beast.lower()\n    dish = dish.lower()\n    if beast[-1] == dish[-1] and beast[0] == dish[0]:\n           return True\n    else:\n           return False\n           \nfeast(\"Faris\",\"Mangos\")", "def feast(beast, dish):\n    is_valid = True\n    if beast[0] == dish[0] and beast[len(beast) - 1] == dish[len(dish) - 1]:\n        is_valid = True\n        return is_valid\n    else:\n        is_valid = False\n        return is_valid\n", "def feast(beast, dish):\n    a = beast[0]\n    b = beast[-1]\n    c = dish[0]\n    d = dish[-1]\n    if a == c:\n        if b == d:\n            return True\n        else:\n            return False    \n    elif a != c:\n        return False", "import unittest\n\n\ndef feast(beast, dish):\n    return True if beast[0] == dish[0] and beast[-1] == dish[-1] else False\n    \n    \nclass TestFeast(unittest.TestCase):\n    def test_should_return_false_when_given_first_char_and_end_char_of_beast_name_is_not_same_with_dish(self):\n        beast, dish = \"brown bear\", \"bear claw\"\n        actual = feast(beast, dish)\n        self.assertEqual(actual, False)\n\n    def test_should_return_true_when_given_first_char_and_end_char_of_beast_name_is_same_with_dish(self):\n        beast, dish = \"great blue heron\", \"garlic naan\"\n        actual = feast(beast, dish)\n        self.assertEqual(actual, True)\n", "def feast(beast, dish):\n    a=len(dish)-1\n    if beast[0]==dish[0] and beast[len(beast)-1]==dish[a]: \n         return True\n    else:\n        return False", "def feast(beast, dish):\n    print(beast, dish)\n    # your code here\n    return dish.startswith(beast[0]) and dish.endswith(beast[-1])", "def feast(beast, dish):\n    \n    l1 = len(beast) - 1\n    l2 = len(dish) - 1\n    \n    \n    return beast[0] == dish[0] and beast[l1] == dish[l2]", "def feast(beast, dish):\n    if beast[-1] == dish[-1] and beast[0] == dish[0]:\n        return True\n    return False"]