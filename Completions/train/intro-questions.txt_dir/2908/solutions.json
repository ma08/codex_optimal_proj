["def flatten(dictionary):\n    stack = [((), dictionary)]\n    result = {}\n    while stack:\n        path, current = stack.pop()\n        for k, v in current.items():\n            if v == {}:\n                result[\"/\".join((path + (k,)))] = \"\";\n            if isinstance(v, dict):\n                stack.append((path + (k,), v))\n            else:\n                result[\"/\".join((path + (k,)))] = v\n    return result", "def flatten(dictionary):\n    result = {}\n    for k, v in dictionary.items():\n        if v == {}:\n            result[k] = \"\"\n        elif isinstance(v, dict):\n            for l, w in flatten(v).items():\n                result[k + '/' + l] = w\n        else:\n            result[k] = v\n    return result", "def flatten(d):\n    result = {}\n    for key, value in d.items():\n        if value and isinstance(value, dict):\n            for k, v in flatten(value).items():\n                result[key + '/' + k] = v\n        else:\n            result[key] = value or ''\n    return result", "def flatten(dictionary, prefix=[]):\n    res = {}\n    for key in dictionary.keys():\n        if isinstance(dictionary[key], dict) and dictionary[key]:\n            res.update(flatten(dictionary[key], prefix + [key]))\n        else:\n            res[\"/\".join(prefix + [key])] = dictionary[key] or ''\n    return res", "def flatten(dct):\n    \n    def extract(dct):\n        for k,v in dct.items():\n            stk.append(k)\n            if isinstance(v,dict) and v: yield from extract(v)\n            else:                        yield ('/'.join(stk), v or '')\n            stk.pop()\n    \n    stk = []\n    return dict(extract(dct))", "def flatten(dictionary):\n    result = {}\n    for k1,v1 in dictionary.items():\n        if type(v1) == str:\n            result[k1] = v1\n        elif v1:\n            for k2,v2 in flatten(v1).items():\n                result[f\"{k1}/{k2}\"] = v2\n        else:\n            result[k1] = \"\"\n    return result", "def flatten(d):\n    r = {}\n    for x, y in d.items():\n        if isinstance(y, dict):\n            r.update({f\"{x}/{X}\" : Y for X, Y in flatten(y).items()} if y else {x: \"\"})\n        else:\n            r[x] = y\n    return r", "def flatten(dictionary):\n    stack = [((), dictionary)]\n    result = {}\n    while stack:\n        path, current = stack.pop()\n        for k, v in list(current.items()):\n            new_path = path + (k,)\n            v = v if v else \"\"\n            if isinstance(v, dict):\n                stack.append((new_path, v))\n            else:\n                result[\"/\".join(new_path)] = v\n    return result\n", "def flatten(dictionary):\n    stack = [(\"\", dictionary)]\n    result = {}\n    while stack:\n        path, current = stack.pop()\n        if current:\n            if type(current)==dict:\n                if path:\n                    path+='/'\n                for key in current:\n                    stack.append((path+key,current[key]))\n            else:\n                result[path]=current\n        elif path:\n            result[path]=\"\"\n    return result", "def flatten(d):\n    result = []\n    for key in d:\n        if isinstance(d[key], str):\n            result.append((key, d[key]))\n        elif len(d[key]) == 0:\n            result.append((key, \"\"))\n        else:\n            for key2, value2 in list(flatten(d[key]).items()):\n                result.append((key + \"/\" + key2, value2))\n    return dict(result)\n"]