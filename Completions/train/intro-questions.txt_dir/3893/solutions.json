["def divisors(num):\n    l = [a for a in range(2,num) if num%a == 0]\n    if len(l) == 0:\n        return str(num) + \" is prime\"\n    return l", "def divisors(integer):\n  a = []\n  for i in range(2, integer):\n    if integer % i == 0:\n      a.append(i)\n  return a if a else str(integer) + \" is prime\"", "def divisors(integer):\n  return [n for n in range(2, integer) if integer % n == 0] or '{} is prime'.format(integer)\n", "import math\ndef divisors(n):\n  o = [i for i in range(2, int(math.ceil(n/2)+1)) if n%i==0]\n  return o if len(o) > 0 else \"%d is prime\" % n", "def divisors(integer):\n\n    lst = []\n    for i in range(2,integer):\n        if integer % i == 0:\n            lst.append(i)\n            \n    if len(lst) == 0:\n        return \"%s is prime\" % (integer)\n    else:\n        return lst", "def divisors(n):\n  \n  divs = set()\n  \n  for t in range(2, int(n ** 0.5) + 1):\n    div, mod = divmod(n, t)\n    \n    if mod==0:\n      divs.add(t)\n      divs.add(div)\n  \n  return '{:d} is prime'.format(n) if len(divs)==0 else sorted(list(divs))", "def divisors(n):\n    result = [i for i in range(2,n) if n%i==0]\n    return result if result else str(n)+' is prime'", "from numpy import arange\n\ndef divisors(integer):\n    # generate array of integers from 2 to integer/2 (rounded down)\n    potential_divisors = arange(2, integer//2 + 1)\n    # use boolean indexing to extract divisors\n    divisors = potential_divisors[integer % potential_divisors == 0]\n    # check divisors exist and if not return prime message\n    if len(divisors):\n        return list(divisors)\n    else:\n        return '{integer} is prime'.format(integer=integer)"]