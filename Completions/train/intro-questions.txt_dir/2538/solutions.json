["class Solution:\n    memory = {}\n    largest = [0]\n    trackerForLargest = {}\n    largestSize = [0]\n    numGroups = [0]\n    \n    def countLargestGroup(self, n: int) -> int:\n        if n > self.largest[0]:\n            for num in range(self.largest[0] + 1, n + 1):\n                curr = num\n                currSum = 0\n                while curr != 0:\n                    currSum += curr%10\n                    curr //= 10\n                \n                if currSum not in self.trackerForLargest:\n                    self.trackerForLargest[currSum] = []\n                \n                self.trackerForLargest[currSum].append(num)\n                \n                if len(self.trackerForLargest[currSum]) == self.largestSize[0]:\n                    self.numGroups[0] += 1\n                elif len(self.trackerForLargest[currSum]) > self.largestSize[0]:\n                    self.numGroups[0] = 1\n                    self.largestSize[0] = len(self.trackerForLargest[currSum])\n                \n                self.memory[num] = self.numGroups[0]\n            \n            self.largest[0] = n\n        \n        return self.memory[n]", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        if n < 10:\n            return n\n        counter = [0]*37\n        sumCount = {0:0}\n        i = 1\n        while i <= n:\n            quotient, reminder = divmod(i, 10)\n            sumCount[i] = reminder + sumCount[quotient]\n            counter[sumCount[i]] += 1\n            i += 1\n        return counter.count(max(counter))", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dic = {}\n        for i in range(1, n + 1):\n            key = 0\n            while i:\n                key += i % 10\n                i = i // 10\n            dic[key] = dic.get(key, 0) + 1\n        \n        size = list(dic.values())\n        return size.count(max(size))", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        def sum_num(n):\n            res = n % 10\n            while n > 0:\n                res += (n := n // 10) % 10\n            \n            return res\n        \n        \n        groups = defaultdict(int)\n        for i in range(1, n + 1):\n            groups[sum_num(i)] += 1\n            \n        high = max(groups.values())\n        return sum(1 for v in groups.values() if v == high)", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        \n        counts = {}\n        m = 0\n        \n        for i in range(1, n+1):\n            t = i\n            s = 0\n            while t:\n                s += t % 10\n                t //= 10\n                \n            counts[s] = counts.setdefault(s, 0) + 1\n            if m < counts[s]:\n                m = counts[s]\n            \n        return sum(v == m for v in list(counts.values()))\n                \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        \n        groups = [0]\n        \n        for i in range(1, n+1, 1):\n            sumDigi = self.sumOfDigits(i)\n            if (sumDigi == len(groups)):\n                groups.append(0)\n            groups[sumDigi]+=1            \n        #print(groups)\n        \n        \n        \n        maxGroup = 0\n        maxCount = 0\n        for grp in groups:\n            if (grp > maxGroup):\n                maxGroup = grp\n                maxCount = 0\n            if (grp == maxGroup):\n                maxCount += 1\n        #print(\\\"maxGroup=%d, maxCount=%d\\\" % (maxGroup, maxCount))\n                \n        return maxCount\n        \n        \n        \n    def sumOfDigits(self, n:int) -> int:\n        sum = 0\n        while (n>0):\n            sum += n%10\n            n //= 10\n        return sum", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        def countDigits(m):\n            res = 0\n            while m > 0:\n                res += m % 10\n                m //= 10\n            return res\n        dic = collections.defaultdict(list)\n        for i in range(1,n+1):\n            count_i = countDigits(i)\n            dic[count_i].append(i)\n        \n        max_count = max(len(dic[k]) for k in dic)\n        res = [len(dic[k])==max_count for k in dic]\n        return sum(res)\n            \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d={};\n        for i in range(1,n+1):\n            sum=0;\n            s=str(i);\n            for c in s:\n                sum+=int(c);\n            if sum in d:\n                d[sum].append(i);\n            else:\n                d[sum]=[i];\n        values=list(d.values());\n        values.sort(key=len,reverse=True);\n        \n        count=0;\n        length=len(values[0]);\n        for v in values:\n            if length==len(v):\n                count+=1;\n        return count;\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        arr = [0]*36\n        \n        for i in range(1,n+1):\n            sm = 0\n            for j in str(i):\n                sm += int(j)\n            arr[sm-1]+=1\n        \n        count = 0\n        \n        mx = max(arr)\n        \n        for i in arr:\n            if i == mx:\n                count+=1\n        \n        return count\n", "import collections\n\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        digit_dict = collections.defaultdict(list)\n        max_curr = 0\n        answer = 0\n        \n        def get_digit_sum(num):\n            return sum(map(int, str(num)))\n        \n        for i in range(1, n+1):\n            digit_sum_curr = get_digit_sum(i)\n            digit_dict[digit_sum_curr].append(i)\n            \n            if len(digit_dict[digit_sum_curr]) > max_curr:\n                max_curr = len(digit_dict[digit_sum_curr]) \n                answer = 1\n            elif len(digit_dict[digit_sum_curr]) == max_curr:\n                answer += 1\n                \n        return answer\n            \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dic = defaultdict(list)\n        max_ = 0\n        for i in range(1,n+1):\n            result = 0\n            num = i\n            while i > 0:\n                rem = i % 10\n                result += rem\n                i = int(i/10)\n\n            dic[result].append(num)\n            #max_ = max(max_, len(dic[result]))\n                \n        max_ = 0\n        for i in dic:\n            leng = len(dic[i])\n            max_ = max(max_, leng)\n            \n        \n        ans = [dic[key] for key in dic if len(dic[key])==max_]\n        #ans = 0\n        #for i in list(dic.values()):\n         #   if len(i)==max_:\n          #      ans+=1\n        #return ans\n        return len(ans)\n            \n                    \n                   \n   \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        groups = {}\n        max = 0\n        for i in range(1,n+1):\n            num_str = str(i)\n            sum = 0\n            for x in num_str:\n                sum += int(x)\n            if sum in groups:\n                groups[sum].append(n)\n            else:\n                groups[sum] = [n]\n            \n            max = max if len(groups[sum])< max else len(groups[sum])\n        \n        num_groups = 0\n        for g in groups:\n            if len(groups[g]) == max:\n                num_groups += 1\n                \n        return num_groups", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dp = {0:0}\n        counts = [0]*36\n        for i in range(1,n+1):\n            a, b = divmod(i,10)\n            dp[i] = b+dp[a]\n            counts[dp[i]-1]+=1\n        return counts.count(max(counts))\n        \n        \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dic = {}\n        for i in range(1, n+1):\n            summed = sum([int(k) for k in str(i)])\n            if(summed in dic):\n                dic[summed].append(i)\n            else:\n                dic[summed] = [i]\n        maximumLen = max([len(value) for value in dic.values()])\n        count = 0\n        for value in dic.values():\n            if(len(value) == maximumLen):\n                count += 1\n        return count", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        sum_to_nums = {}\n        for i in range(1,n+1):\n            digit_sum = self.getDigitSum(i)\n            if digit_sum in sum_to_nums:\n                sum_to_nums[digit_sum].append(i)\n            else:\n                sum_to_nums[digit_sum] = [i]\n        print(sum_to_nums)\n        values = list(sum_to_nums.values())\n        \n        num_values = list([len(v) for v in values]) \n        largest_group = max(num_values)\n        print(num_values)\n        #find how many \n        summing = [1 if x==largest_group else 0 for x in num_values]\n        print(summing)\n        return sum(summing)\n        \n            \n            \n    def getDigitSum(self, num):\n        #print(\\\"getting sum of digits in\\\", num)\n        sum_so_far = 0\n        while num != 0:\n            digit = num%10\n            sum_so_far = sum_so_far + digit\n            num = int(num/10)\n        \n        #print(sum_so_far)\n        return sum_so_far\n        \n            \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        l = [0]*40\n        for i in range(1,n+1):\n            s = str(i)\n            sum = 0\n            for j in range(len(s)):\n                sum+=int(s[j])\n            # print(sum)\n            l[sum]+=1\n        mm =  max(l)\n        c = 0\n        for i in range(len(l)):\n            if(l[i]==mm):\n                c+=1\n        return c\n", "class Solution:\n    def sumByDigits(self, num: int) -> int:\n        result, _n = 0, num\n        while _n > 0:\n            result += _n % 10\n            _n = math.floor(_n / 10)\n        return result\n    \n    def countLargestGroup(self, n: int) -> int:        \n        counter = collections.defaultdict(int)\n        max_value = 0\n        result = 0\n        for i in range(1, n + 1):\n            key = self.sumByDigits(i)\n            counter[key] += 1\n            if counter[key] > max_value:\n                max_value = counter[key]\n                result = 1\n            elif counter[key] == max_value:\n                result += 1\n        return result", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        sums = {}\n        max_len = 0\n        for num in range(1, n + 1):\n            digits = str(num)\n            sum = 0\n            if len(digits) > max_len:\n                max_len = len(digits)\n            for char in digits:\n                sum = sum + int(char)\n            \n            arr = [sum, num]\n            \n            arr = [sum, num]\n            \n            if sum in sums:\n                sums[sum].extend([arr])\n            else:\n                sums[sum] = [arr]\n        \n        sorted_sums = sorted(sums, reverse=True, key = lambda x: len(sums.get(x)))\n        max_len = len(sums.get(sorted_sums[0]))\n        count = 0\n        for key in sorted_sums:\n            items = sums.get(key)\n            if len(items) != max_len:\n                break\n            else:\n                count = count + 1\n        \n        return count", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        from collections import Counter\n        al = [list(str(i)) for i in range(1,n+1)]\n        al = [sum([int(j) for j in i]) for i in al]\n        col = Counter(al)\n        #print(col)\n        num = Counter(col.values())\n        #print(num)\n        return num[max(num.keys(),key=lambda x:x)]", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        nums = {}\n        for i in range(1, n+1):\n            total = sum(list([int(x) for x in str(i)]))\n            nums[total] = 1 if total not in nums else 1 + nums[total]\n        maxCount = max(nums.values())\n        return list(nums.values()).count(maxCount)\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        nums = {}\n        for i in range(1, n+1):\n            total = sum(list([int(x) for x in str(i)]))\n            nums[total] = 1 + nums.get(total, 0)\n        maxCount = max(nums.values())\n        return list(nums.values()).count(maxCount)\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        \n        if(n == 2):\n            return 2\n        \n        mix = {}\n        \n        for i in range(1, n + 1):\n            if dsum(i) not in mix:\n                mix[dsum(i)] = [i]\n            else:\n                mix[dsum(i)].append(i)\n        \n        mx = 0\n        for i in list(mix.values()):\n            if( len(i) > mx ):\n                mx = len(i)\n                \n        resc = 0\n        for i in list(mix.values()):\n            if( len(i) == mx ):\n                resc = resc + 1\n                \n        return resc\n            \ndef dsum(digit):\n    cnt = 0\n    while(digit > 0):\n        temp = digit % 10\n        cnt = cnt + temp\n        digit = digit // 10\n        \n    return cnt\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        nums = {}\n        maxFreq = 1\n        maxCount = 0\n        for i in range(1, n + 1):\n            total = sum(list([int(x) for x in str(i)]))\n            nums[total] = 1 + nums.get(total, 0)\n            if nums[total] > maxFreq:\n                maxFreq = nums[total]\n                maxCount = 1\n            elif nums[total] == maxFreq:\n                maxCount += 1\n        return maxCount\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dp = {0:0}\n        counter = [0]*37 # 9999 digitsum is 36\n        for num in range(1, n+1):\n            div, mod = divmod(num, 10)\n            dp[num] = dp[div]+mod\n            counter[dp[num]] += 1\n        return counter.count(max(counter))", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        print(n)\n        str_nums = [str(i) for i in range(1, n + 1)]\n        print(str_nums)\n        digits = [ [int(i) for i in s] for s in str_nums]\n        print(digits)\n        sums = [sum(i) for i in digits]\n        print(sums)\n        group_sizes = {}\n        for s in sums:\n            group_sizes[s] = group_sizes.get(s, 0) + 1\n        max_size = max(group_sizes.values())\n        return len([i for i in group_sizes if group_sizes[i] == max_size])\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        nums = collections.defaultdict(int)\n        maxFreq = 1\n        maxCount = 0\n        for i in range(1, n + 1):\n            total = sum(list([int(x) for x in str(i)]))\n            nums[total] = 1 + nums.get(total, 0)\n            if nums[total] > maxFreq:\n                maxFreq = nums[total]\n                maxCount = 1\n            elif nums[total] == maxFreq:\n                maxCount += 1\n        return maxCount\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        if n<10:\n            return n\n        arr=[[1],[2],[3],[4],[5],[6],[7],[8],[9]]\n        for i in range(10,n+1):\n            k=list(map(int,list(str(i))))\n            k=sum(k)\n            print(k)\n            if k<=len(arr):\n                arr[k-1].append(i)\n            else:\n                arr.append([k])\n        arr=sorted(arr, key=len,reverse=True)\n        print(arr)\n        l=len(arr[0])\n        i=0\n        while i<len(arr) and len(arr[i])==l:\n            i+=1\n        return i", "def sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        groups = {}\n        for i in range(1, n + 1):\n            s = sum_of_digits(i)\n            groups[s] = groups.get(s, []) + [i]\n        max_len = 0\n        for lst in groups.values():\n            max_len = max(max_len, len(lst))\n        largest = 0\n        for lst in groups.values():\n            if len(lst) == max_len: largest += 1\n        return largest", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        numsum = lambda x: sum(map(int, list(str(x))))\n        numdict = {}\n        maxcount = 0\n        \n        for i in range(1, n+1):\n            x = numsum(i)\n            numdict[x] = numdict.get(x, 0) + 1\n            maxcount = max(maxcount, numdict[x])\n        \n        count = 0\n        for i in numdict:\n            if numdict[i] == maxcount:\n                count += 1\n        \n        return count\n", "import collections\n\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        digit_dict = collections.defaultdict(list)\n        max_curr = 0\n        answer = 0\n        \n        def get_digit_sum(num):\n            return sum(int(i) for i in [char for char in str(num)])\n        \n        for i in range(1, n+1):\n            digit_sum_curr = get_digit_sum(i)\n            digit_dict[digit_sum_curr].append(i)\n            \n            if len(digit_dict[digit_sum_curr]) > max_curr:\n                max_curr = len(digit_dict[digit_sum_curr]) \n                answer = 1\n            elif len(digit_dict[digit_sum_curr]) == max_curr:\n                answer += 1\n                \n        return answer\n            \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        q=[]\n        for i in range(n-10+1):\n            q.append(i + 10)\n            \n        l=[]\n           \n        for j in range(len(q)):\n            p=0\n            for k in range(len(str(q[j]))):\n                #print(str(q[j])[k])\n                p=p+int(str(q[j])[k])\n            l.append(p)\n        #print(l)\n        q=Counter(l)\n        x=0\n        \n        print(q)\n        \n        for j,i in list(q.items()):\n            if j <10:\n                \n                q[j]=q[j]+1\n            \n        print(q)   \n        for j,i in list(q.items()):\n            \n            if i == max(q.values()):\n                x= x+1\n        if n < 10:\n            return n\n            #print(n)\n        else:\n            return (x)\n            #print(x)\n            \n        \n        \n        \n            \n                \n                    \n                    \n    \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        def sumDigits(n):\n            if n < 10: return n\n            sum = 0\n            while n:\n                sum += n % 10\n                n //= 10\n            return sum\n        cnt = [0 for i in range(37)] \n        max_size, max_cnt = 0, 0\n        while n:\n            cnt[sumDigits(n)] += 1\n            if max_size < cnt[sumDigits(n)]:\n                max_size = cnt[sumDigits(n)]\n                max_cnt = 1\n            else:\n                max_cnt += max_size == cnt[sumDigits(n)]\n            n -= 1\n        return max_cnt    ", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d, c = {}, 0\n        for i in range(1, n+1):\n            if i % 10 == 0:\n                c = sum(map(int, str(i)))\n                d[c] = d.get(c, 0) + 1\n            else:\n                c += 1\n                d[c] = d.get(c, 0) + 1\n        res, m = 0, 0\n        for v in list(d.values()):\n            if v > m:\n                res = 1\n                m = v\n            elif v == m:\n                res += 1\n        return res\n    \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d = {}\n        for num in range(1, n+1):\n            sumn = 0\n            for char in str(num):\n                sumn += int(char)\n            d[sumn] = d[sumn] + [num] if sumn in d else [num]\n        t = {}\n        for arr in d.values():\n            t[len(arr)] = t[len(arr)] + 1 if len(arr) in t else 1\n        tt = sorted(t, reverse=True)\n        return t[next(iter(tt))]", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        map = {}\n        mx = 0\n        for i in range(1, n+1):\n            tempSum = 0\n            for j in str(i):\n                tempSum += int(j)\n            map[tempSum] = map.get(tempSum, []) + [i]\n            mx = max(mx, len(map.get(tempSum)))\n        res = 0\n        for key in map.keys():\n            if len(map.get(key)) == mx:\n                res += 1\n        return res", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dic = {}\n        for i in range(1,n+1):\n            s = sum([int(i) for i in str(i)])\n            if s in dic:\n                dic[s].append(i)\n            else:\n                dic[s] = [i]\n             \n        max_L = 0\n        cnt = 0\n        for j in dic:\n            if len(dic[j]) == max_L:\n                cnt += 1\n            elif len(dic[j]) > max_L:\n                cnt = 1\n                max_L = len(dic[j])\n                \n        return cnt\n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        num_dict = {}\n        for i in range(1, n+1):\n            arr = [int(a) for a in str(i)]\n            summa = sum(arr)\n            if summa not in num_dict.keys():\n                num_dict[summa] = [i]\n            else:\n                num_dict[summa] = num_dict[summa] + [i]\n        large = 0\n        for j in num_dict.values():\n            if len(j)>large:\n                large = len(j)\n        count = 0\n        for j in num_dict.values():\n            if len(j) == large:\n                count += 1\n        return count", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d = {}\n        for i in range(1, n+1):\n            s = sum([int(x) for x in str(i)])\n            d[s] = d.get(s, []) + [i]\n        nums = [len(d[x]) for x in d]\n        d = collections.Counter(nums)\n        return d[max(nums)]\n", "\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        dp = {0: 0}\n        counts = [0] * (4 * 9)\n        for i in range(1, n + 1):\n            quotient, reminder = divmod(i, 10)\n            dp[i] = reminder + dp[quotient]\n            counts[dp[i] - 1] += 1\n        return counts.count(max(counts))", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        groups = [0]*37\n        for i in range(1,n+1):\n            t,i = divmod(i,1000)\n            h,i = divmod(i,100)\n            ten,i = divmod(i,10)\n            groups[t + h + ten + i] += 1\n        max = 0\n        count = 0\n        for g in groups:\n            if g > max:\n                max = g\n                count = 1\n            elif g == max:\n                count += 1                \n        return count\n            \n        \n", "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        memo = {1: 1}\n        \n        for i in range(2, n + 1):\n            if not i % 10:\n                memo[i] = memo[i // 10]\n            else:\n                memo[i] = memo[i - 1] + 1\n        D = defaultdict(int)\n        for k, v in memo.items():\n            D[v] += 1\n        res = 0\n        \n        for k in D.keys():\n            if D[k] == max(D.values()):\n                res += 1\n        return res"]