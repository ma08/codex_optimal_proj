["def pattern(n, *y):\n    if n < 1:\n        return \"\"\n    y = y[0] if y and y[0] > 0 else 1\n    result = []\n    for j in range(1, n + 1):\n        line = \" \" * (j - 1) + str(j % 10) + \" \" * (n - j)\n        result.append(line + line[::-1][1:])\n    return \"\\n\".join(((result + result[::-1][1:-1]) * y)) + \"\\n\" + result[0]", "def pattern(n, y=1, *a):\n    if n < 1: return ''\n    l, y  = 2*n-1, max(1,y)\n    sngl  = ['{}{}{}'.format(x%10, ' '*(l-2*x), x%10 if x!=n else '').center(l) for x in range(1,n+1)]\n    cross = sngl + sngl[:-1][::-1]\n    return '\\n'.join( cross + cross[1:]*(y-1) )", "def pattern(n,y = 1, *args):\n    if n < 1:\n        return \"\"\n    if y < 1:\n        y = 1\n\n    p = [\" \"*i + str((i+1)%10) + \" \"*(2*n-3-2*i) + str((i+1)%10) + \" \"*i for i in range(n-1)] + \\\n        [\" \"*(n-1) + str(n%10) + \" \"*(n-1)] + \\\n        [\" \"*i + str((i+1)%10) + \" \"*(2*n-3-2*i) + str((i+1)%10) + \" \"*i for i in range(n-2,-1,-1)]\n\n    return \"\\n\".join(p + p[1:]*(y-1))", "m,r=lambda s:s+s[-2::-1],lambda s,n:s+s[1:]*n\npattern=lambda n,v=1,*a:'\\n'.join(r(m(list(m(' '*(i-1)+str(i%10)+' '*(n-i))for i in range(1,n+1))),v-1))", "def pattern(n, y=1, *_):\n    y = y if y>1 else 1\n    s1 = '1'+ ' '*(2*n-3) + '1'\n    s2 = '\\n'+'\\n'.join(' '*i+str(i+1)[-1]+' '*(2*n-2*i-3)+str(i+1)[-1]+' '*i for i in range(1,n-1))\n    s3 = '\\n'+' '*(n-1) +str(n)[-1]+' '*(n-1)+'\\n'\n    return '' if n<1 else s1+(s2+s3+s2[::-1]+s1)*y", "def pattern(n,y=1,*args):\n    p = [\"\".join([\" \" * (i - 1), str(i % 10), \" \" * (n - i)]) for i in range(1,n+1)]\n    p = [\"\".join([i, i[-2::-1]]) for i in p]\n    p += p[-2::-1]\n    return \"\\n\".join(p + p[1:] * (y - 1))", "def pattern(n, y=1, *_):\n    if n < 1:\n        return ''\n    ans, p, y = [], [], max(y, 1)\n    for i in range(1, n+1):\n        t = [' '] * (n * 2 - 1)\n        t[i - 1] = t[n * 2 - 1 - 1 - i + 1] = str(i % 10)\n        p.append(''.join(t))\n    p += p[:-1][::-1]\n    for _ in range(y):\n        ans += p[1:] if ans else p\n    return '\\n'.join(ans)", "def pattern(n, m=1, *args):\n    if n < 1:\n        return \"\"\n    m = max(m, 1)\n    r = [\"{0}{1}{2}{1}{0}\".format(\" \" * (i - 1), i % 10, \" \" * ((n - i) * 2 - 1)) for i in range(1, n)]\n    r = r + [\"{0}{1}{0}\".format(\" \" * (n - 1), n % 10)] + r[::-1]\n    return \"\\n\".join(r + r[1:] * (m - 1))", "def pattern(*args):\n    n=args[0]\n    y=args[1] if len(args)>=2 else 0\n    res=\"\"\n    for count in range(max(1,y)):\n        for i in range(n):\n            if count>=1 and (i+1)==1:\n                continue\n            elif (i+1)!=n:\n                res+=\" \"*i+str((i+1)%10)+\" \"*((n-1-i)*2-1)+str((i+1)%10)+\" \"*i+\"\\n\"\n            else:\n                res+=\" \"*i+str((i+1)%10)+\" \"*i+\"\\n\"\n        for i in range(n-2,-1,-1):\n            if (i+1)!=n:\n                res+=\" \"*i+str((i+1)%10)+\" \"*((n-1-i)*2-1)+str((i+1)%10)+\" \"*i+\"\\n\"\n    return res[:-1]"]