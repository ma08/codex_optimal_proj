["from math import log\n\ndef powerof4(n):\n    if type(n) in (float, int) and n > 0:\n        return log(n,4).is_integer()\n    return False", "from math import log\n\ndef powerof4(n):\n    return type(n) == int and n >= 0 and log(n, 4).is_integer() ", "from math import log\n\ndef powerof4(n):\n  return n==4**round(log(n,4)) if (type(n)==int and n>0) else False", "def powerof4(n):\n    t=[int, float]\n    if type(n) not in t:\n        return False\n    if n==1.0:\n        return True\n    elif n<1.0:\n        return False\n    return powerof4(n/4.0)", "def powerof4(n):\n    try:\n        b = bin(n)\n        if isinstance(n, bool):\n            return False\n        return b.count('1') == 1 and len(b) % 2 != 0\n    except:\n        return False", "def powerof4(n):\n    return type(n) == int and n.bit_length() & 1 and n == 1 << n.bit_length()-1", "import math\n\n\ndef powerof4(n):\n    if not (isinstance(n, int) and not isinstance(n, bool) and n > 0):\n        return False\n    return math.log(n, 4).is_integer()\n", "def powerof4(n):\n    \n    if not str(n).isdigit(): return False\n    else: n = int(n)\n    \n    while n > 4:\n        n = n / 4\n    \n    if n == 4 or n == 1: return True\n    \n    return False", "def powerof4(n):\n    if type(n)!=type(1):\n        return False\n    while n%4==0:\n        n=n/4\n    return n==1", "from math import log\ndef powerof4(n):   \n    return False if type(n) != int else int(log(n, 4)) == log(n, 4) if n>0 else False    "]