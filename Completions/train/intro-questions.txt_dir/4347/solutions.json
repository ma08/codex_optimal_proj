["def are_equally_strong(your_left, your_right, friends_left, friends_right):\n  return sorted([your_left, your_right]) == sorted([friends_left, friends_right])", "def are_equally_strong(yl,yr,fl,fr):\n  return (yl==fl and yr==fr) or (yl==fr and yr==fl)", "def are_equally_strong(yl, yr, fl, fr):\n    return {yl, yr} == {fl, fr}", "def are_equally_strong(yl, yr, fl, fr):\n    return sorted([yl, yr]) == sorted([fl, fr])", "def are_equally_strong(yl, yr, fl, fr):\n    return sorted((yl, yr)) == sorted((fl, fr))", "def are_equally_strong(yL, yR, fL, fR):\n    return (yL+yR) == (fL+fR) and yL in (fL,fR)", "def are_equally_strong(your_left, your_right, friends_left, friends_right):\n  #coding and coding..\n      return {your_left, your_right} == {friends_left, friends_right}", "def are_equally_strong(l1,r1,l2,r2):\n    return max(l1,r1)==max(l2,r2) and min(l1,r1)==min(l2,r2)", "def are_equally_strong(l1, r1, l2, r2):\n    return sorted([l1, r1]) == sorted([l2, r2])", "def are_equally_strong(your_left, your_right, friends_left, friends_right):\n  \n  m = (your_left+your_right)\n  \n  f = (friends_left+friends_right)\n  \n  \n  if your_left==friends_left and your_right==friends_right or your_left==friends_right and your_right==friends_left :\n  \n      return True\n      \n  else:\n  \n      return False\n"]