["def sum_of_regular_numbers(arr):\n    res, value, save = 0, arr[1] - arr[0], arr[:2]\n    for x,y in zip(arr[1:], arr[2:]):\n        if y-x == value:\n            save.append(y)\n        else:\n            if len(save) >= 3: res += sum(save)\n            value, save = y-x, [x, y]\n    if len(save) >= 3: res+= sum(save)\n    return res", "from itertools import groupby\nfrom operator import itemgetter\n\ndef sum_of_regular_numbers(arr):\n    xs = [(i, x-y) for i, (x, y) in  enumerate(zip(arr, arr[1:]))]\n    it = (list(grp) for key, grp in groupby(xs, key=itemgetter(1)))\n    it = ((grp[0][0], len(grp)) for grp in it if len(grp) > 1)\n    return sum(sum(arr[i:i+n+1]) for i, n in it)", "def sum_of_regular_numbers(arr):\n    # (step size, step count, sequence base)\n    grouped = [(b - a, 1, a) for a, b in zip(arr[:-1], arr[1:])]\n    # Collate the groups by step size\n    i = 0\n    while i < len(grouped) - 1:\n        if grouped[i][0] == grouped[i + 1][0]:\n            grouped[i] = (grouped[i][0], grouped[i][1] + 1, grouped[i][2])\n            del grouped[i + 1]\n        else:\n            i += 1\n    # Use (first + last) * elements / 2 to find sum of each sequence longer than 2 elements long\n    return sum((2 * base + step * steps) * ((steps + 1) / 2) for step, steps, base in grouped if steps >= 2)\n", "def sum_of_regular_numbers(arr):\n    i, s = 0, 0\n    while i < len(arr)-2:\n        n, step = 1, arr[i]-arr[i+1]\n        while i+1+n < len(arr) and arr[i+n]-arr[i+1+n] == step: n += 1\n        if n >= 2: s += sum(arr[i:i+n+1])\n        i += n\n    return s", "def sum_of_regular_numbers(arr):\n    i = s = 0 ; l = len(arr)\n    while i<l - 1:\n        temp, diff = [], arr[i + 1] - arr[i]\n        while i<l-1 and arr[i+1]-arr[i]==diff:\n            temp.extend([arr[i], arr[i + 1]]) ; i += 1\n        if len(set(temp)) > 2 : s += sum(set(temp))\n    return s", "def sum_of_regular_numbers(arr):\n    sum_ = 0\n    i = 0\n    while i < len(arr) - 1:\n        seq = [arr[i], arr[i+1]]\n        step = arr[i] - arr[i+1]\n        j = i + 1\n        while j < len(arr) - 1:\n            if arr[j] - arr[j+1] != step:\n                break\n            seq.append(arr[j+1])\n            j += 1\n        if len(seq) >= 3:\n            sum_ += sum(seq)\n        i = j\n    return sum_", "from itertools import groupby\n\ndef sum_of_regular_numbers(a):\n    b, i, r = [sum(1 for _ in y) for x, y in groupby(y - x for x, y in zip(a, a[1:]))], 0, 0\n    for x in b:\n        if x > 1:\n            r += sum(a[i:i+x+1])\n        i += x\n    return r", "import numpy as np\nfrom itertools import groupby\ndef sum_of_regular_numbers(arr):\n    lst = [list(g) for k, g in groupby(np.diff(arr))]\n    idx, ans = 0, 0\n    for i in lst:\n        if len(i) > 1:\n            ans += sum(arr[idx:idx+len(i)+1])\n        idx = idx + len(i)\n    return ans", "from itertools import groupby\n\ndef sum_of_regular_numbers(arr):\n    r,i = 0,0\n    for k,g in groupby((j-i for i,j in zip(arr,arr[1:]))):\n        x = len(list(g))\n        if x>1:\n            r += sum(arr[i:i+x+1])\n        i += x\n    return r", "from itertools import groupby\n\ndef sum_of_regular_numbers(arr):\n    res = [[b-a, i] for i, a, b in zip(range(len(arr)), arr, arr[1:])]\n    ans = 0\n    for _, g in groupby(res, key=lambda x: x[0]):\n        lst = list(g)\n        if len(lst) > 1:\n            ans += sum(arr[lst[0][1]:lst[-1][1]+2])\n    return ans"]