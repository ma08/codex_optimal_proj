["from fractions import gcd\n\ndef coprimes(n):\n  return [i for i in range(1,n+1) if gcd(n,i)==1]", "from fractions import gcd\ndef coprimes(n):\n    return [i for i in range(n) if gcd(i,n)==1]", "from fractions import gcd\n\ncoprimes = lambda n: [i for i in range(1, n) if gcd(n, i) == 1]", "from fractions import gcd \ndef coprimes(n): return [a for a in range(1, n) if gcd(n,a) == 1]", "def coprimes(n):\n    p, s = n, list(range(n))\n    for d in range(2, int(n ** .5) + 1):\n        if not p % d:\n            while not p % d: p //= d\n            s[d::d] = ((n - d - 1) // d + 1) * [0]\n    if p > 1: s[p::p] = ((n - p - 1) // p + 1) * [0]\n    return [i for i, n in enumerate(s) if n]", "from math import gcd\n\ndef coprimes(n):\n    return [x for x in range(1, n) if gcd(x, n) == 1]", "def gcd(a,b):\n    while b > 0:\n        a %= b\n        a,b = b,a\n    return a\n\ndef coprimes(n):\n    return [x for x in range(1,n) if gcd(n,x) == 1]", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a%b)\n\ndef coprimes(n):\n    rslt = {1}\n    for i in range(2, n):\n        if gcd(n, i) == 1:\n            rslt.add(i)\n    return sorted(rslt)", "from fractions import gcd as g\nz=lambda x,y:1 if g(x,y)==1 else 0\ndef coprimes(n):return [i for i in range(1,n) if z(n,i)==1]\n", "from fractions import gcd\n\ndef coprimes(n):\n  ret = []\n  for x in range(int(n/2)+1):\n    if gcd(x,n-x) == 1:\n      ret += [x]\n      ret += [n-x]\n  return sorted(set(ret))\n"]