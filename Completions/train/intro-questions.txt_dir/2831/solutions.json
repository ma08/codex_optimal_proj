["def largest_pair_sum(numbers): \n    return sum(sorted(numbers)[-2:])", "from heapq import nlargest\n\ndef largest_pair_sum(a):\n    return sum(nlargest(2, a))", "def largest_pair_sum(a): \n    return a.pop(a.index(max(a))) + a.pop(a.index(max(a)))", "def largest_pair_sum(numbers): \n    return sorted(numbers)[-2]+max(numbers)", "def largest_pair_sum(numbers):\n   from heapq import nlargest\n   return sum(nlargest(2, numbers))", "def largest_pair_sum(numbers): \n    largest=-10000\n    for nums in numbers:\n        if nums>largest:\n            largest=nums\n    second_largest=-10000\n    numbers.remove(largest)\n    for nums in numbers:\n        if nums>second_largest:\n            second_largest=nums\n    return largest+second_largest", "def largest_pair_sum(num): \n    return num.pop(num.index(max(num))) + max(num)", "import math\n\ndef largest_pair_sum(numbers):\n    a, b = -math.inf, -math.inf\n    for n in numbers:\n        if n > a:\n            if a > b:\n                b = a\n            a = n\n        elif n > b:\n            b = n\n    return a + b", "largest_pair_sum = lambda a: max(a) + sorted(a)[-2]", "def largest_pair_sum(numbers): \n    # set swapped to true\n    swapped = True\n    # while loop if counter is not 1:\n    while swapped:\n        # set swapped to false and only stay in while loop if we swap in for loop\n        swapped = False\n        # loop thru nums using len of array - 1\n        for i in range(len(numbers)-1):\n            if numbers[i] > numbers[i + 1]:\n                hold_value = numbers[i]\n                numbers[i] = numbers[i+1]\n                numbers[i+1] = hold_value\n                swapped = True\n\n    return numbers[-1] + numbers[-2]"]