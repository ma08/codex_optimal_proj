["def solve(arr): return sum(set(arr))\n", "def solve(arr):\n    for a in arr:\n        if -a not in arr:\n            return a\n", "def solve(a):\n    return sum(set(a))", "def solve(arr):\n    return [i for i in arr if -i not in arr][0]", "\ndef solve(arr):\n    for n in arr:\n        if -n not in arr: return n\n", "def solve(arr):\n    for x in arr:\n        if x and -x not in arr:\n            return x", "def solve(arr):\n    for number in arr:\n        if number*-1 in arr:\n            pass\n        else:\n            return number", "def solve(arr):\n    special_set = set(arr)\n    n = 0\n    for i in list(special_set):\n        n += i\n    return n", "def solve(arr):\n    summa = 0\n    dic = {}\n    res = 0\n    for i in arr:\n        dic[i] = 0\n        if -i in arr:\n            dic[i] += 1\n        else:\n            dic[i] = 0\n    for key, value in dic.items():\n        if value == 0:\n            res = key\n    return res", "def solve(arr):\n    for i in arr:\n        if -1*i not in arr:\n            return i", "def solve(arr):\n    result =0\n    for a in arr: \n        if -a not in arr :\n            return a;", "def solve(arr):\n    return [x for x in arr if not(-x in arr)][0]", "def solve(arr):\n    return sum(list(set(arr)))\n", "def solve(lst):\n    return sum(set(lst))", "def solve(lst):\n    for num in lst:\n        if -num not in lst:\n            return num", "def solve(arr):\n    for num in arr:\n        if not -num in arr:\n            return num", "def solve(arr: list) -> int:\n    \"\"\" This function returns one integer that is either only negative or only positive. \"\"\"\n    for i in range(len(arr)):\n        if -arr[i] not in arr:\n            return arr[i]", "def solve(arr):\n    nums = []\n    unique = 0\n\n    for i in arr:\n        if -i in arr:\n            nums.append(i)\n        else:\n            unique = i\n\n    return unique", "def solve(arr):\n    arr = set(arr)\n    lst = list(map(abs,arr))\n    one = 0\n    for i in range(len(lst)):\n        if lst.count(lst[i]) == 1:\n            one = lst[i]\n\n    if one in arr:\n        return one\n    else:\n        a = \"-\"+str(one)\n        return int(a)", "def solve(arr):\n    result = []\n    for i in arr:\n        if arr.count(i) != arr.count(-i):\n            result.append(i)\n    return result[0]        ", "def solve(arr):\n    ls = [arr[0]]\n    for n in arr[1:]:\n        if -(n) in ls:\n            ls.pop(ls.index(-(n)))\n        else:\n            ls.append(n)\n    return ls[0]", "def solve(arr):\n    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return sum(arr)    \n", "def solve(arr):\n    return [el for el in arr if -el not in arr ][0]", "def solve(arr):\n    positive = sorted([x for x in arr if x>=0])\n    negative = sorted([x for x in arr if x<0], reverse=True)\n    longer_index = len(positive) <= len(negative)\n    longer = [positive, negative][longer_index]\n    for i in [positive, negative][not longer_index]:\n        longer.remove(-i)\n    return longer[0]", "def solve(arr):\n    rev = set(-x for x in arr)\n    return [x for x in arr if abs(x) not in set(arr) or x not in rev][0]", "def solve(arr):\n    for i in arr:\n        reverse = -i\n        if reverse not in arr:\n            return i", "def solve(arr):\n    for num in arr:\n        if -num in arr:\n            pass\n        else:\n            return num\n", "def solve(arr):\n    \n    a = [i for i in arr if arr.count(i) != arr.count(-i)]\n    \n    return a[0]", "def solve(arr):\n    item = arr.pop()\n    while(-item in arr):\n        arr.remove(-item)\n        item = arr.pop()\n    return item", "def solve(arr):\n    for index, value in enumerate(arr):\n        if value * -1 in arr:\n            continue\n        else:\n            return value", "def solve(arr):\n    for num in arr:\n        if arr.count(num * (-1)) == 0:\n            return num", "def solve(arr):\n    values = set()\n    removed_values = set()\n    \n    for value in arr:\n        if value in removed_values:\n            continue\n        \n        opposite = value*-1\n        \n        if (opposite) in values:\n            values.remove(opposite)\n            removed_values.add(value)\n            removed_values.add(opposite)\n        else:\n            values.add(value)\n            \n    return list(values)[0]            \n        \n            \n", "def solve(arr):\n    result = arr[0]\n    for i in range(len(arr)):\n        pair = False\n        for j in range(len(arr)):\n            if arr[i] == -arr[j]:\n                pair = True\n        if (not pair):\n            result = arr[i]\n            \n    return result", "def solve(arr):\n    positive_set = set()\n    negative_set = set()\n    for num in arr:\n        if num > 0:\n            positive_set.add(num)\n        else:\n            negative_set.add(-num)\n    number = positive_set.symmetric_difference(negative_set)\n    popped_number = number.pop()\n    return popped_number if popped_number in arr else -popped_number", "def solve(arr):\n    duplicates = [x for x in arr if arr.count(x) > 1]\n    return duplicates[0] if duplicates else sum(arr)", "def solve(numbers):\n    for x in numbers:\n        if not -x in numbers:\n            return x", "def solve(arr):\n    while 1:\n        number = arr[0]\n        opposite_number = number * (-1)\n        if opposite_number in arr:\n            arr.remove(number)\n            arr.remove(opposite_number)\n        else:\n            return arr[0]", "def solve(arr):\n\n    for n in arr:\n        if n < 0 and abs(n) not in arr:\n            return n\n        elif n > 0 and -n not in arr:\n            return n\n", "def solve(arr):\n    end = 0\n    x = 0\n    while end == 0:\n        k = 1\n        i = arr[x]\n        for j in arr:\n            if i == j*-1:\n                k = 0\n        if k == 1:\n            ans = i\n            end = 1\n        x = x + 1\n    return ans", "def solve(arr):\n    for a in arr:\n        if -a in arr:\n            continue\n        if -a not in arr:\n            return a", "def solve(arr):\n    \n    pos = [ a for a in arr if a >= 0]\n    neg = [ a for a in arr if a < 0]\n    \n    neg = list(map(abs, neg))\n    \n    print(pos, neg)\n    for element in arr:\n        if not(abs(element) in pos and abs(element) in neg):\n            return element", "def solve(arr):\n    a = set(arr)\n    return sum(a)", "\ndef match(vale,g):\n    va=False\n    for val in g:\n             if val==-vale:\n                 va=True\n    return(va)\n        \ndef solve(g):\n    m=[]\n    for val in g :\n         if match(val,g)==False:\n             m.append(val)\n    \n    return m[0]  \n", "def solve(arr):\n    cleaned = list(set(arr))\n    for i in cleaned:\n        if not -i in cleaned:\n            return i\n", "def solve(a):\n    for n in a:\n        if -n in a:\n            continue\n        else:\n            return n", "def solve(arr):\n    arr2 = set(arr)\n    return sum(arr2)\n", "def solve(arr):\n    return list(set(filter(lambda x: arr.count(x) != arr.count(-x), arr)))[0]", "def solve(arr):\n    for i in range(0,len(arr)):\n        if (-arr[i]) not in arr:\n            return arr[i]", "def solve(arr):\n    \n    for i in range(len(arr)):\n        if -1*arr[i] not in arr[0:i] + arr[i+1:]:\n            return arr[i]", "def solve(arr):\n    arr.sort()\n    l=len(arr)\n    neg=[]\n    pos=[]\n    for i in arr:\n        if i <0:\n            neg.append(i)\n        else:\n            pos.append(i)\n\n    if(len(neg)>len(pos)):\n        for i in neg:\n            if abs(i) not in pos:\n                return i\n    else:\n        for i in pos:\n            if -i not in neg:\n                return i\n    \n    \n            \n       \n            \n    \n", "def solve(arr):\n    return [value for value in arr if -value not in arr][0]\n    \n", "def solve(arr):\n    arr = set(arr)\n    return next(filter(lambda i :not (sum(arr) - i) ,arr))", "def solve(arr):\n    arr = set(arr)\n    for item in arr:\n        if not (sum(arr) - item):\n            return item", "def solve(arr):\n    return list(set(x for x in arr if x * -1 not in arr))[0]", "def solve(arr):\n    new_arr = [val for val in arr if not arr.count(-val)]\n    return new_arr[0]", "def solve(arr):\n    arr = set(arr)\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum", "def solve(arr):\n    for i in arr:\n        if i and -i not in arr:\n            return i", "def solve(arr):\n    for i in arr:\n        if -1*i in arr:\n            continue\n        else:\n            return i", "def solve(arr):\n    a = 1\n    for i in arr:\n        if arr.count(i) > 1:\n            a = arr.count(i)  \n    return sum(arr) / a", "def solve(arr):\n    arr.sort()\n    \n    while len(arr) >= 1:\n        if arr[0] < 0 and abs(arr[0]) in arr:\n            x = abs(arr[0])\n            arr.remove(arr[0])\n            arr.remove(x)\n        else:\n            return arr[0]", "from collections import defaultdict\n\ndef solve(arr):\n    d = defaultdict(int)\n    for x in arr:\n        d[abs(x)] += x\n    return next(k if k in arr else -k for k,v in d.items() if v != 0)", "def solve(arr):\n    sing = sum(set(arr))\n    return sing", "def solve(ar):\n    x = len(ar)\n    i = 0\n    temp = 0\n    while i < x:\n        c = 0\n        char = ar[i]\n        while c <= (x - 1):\n            if char == (-(ar[c])):\n                i += 1\n                break\n            c += 1\n        else:\n            temp = char\n            return temp\n\n    return temp", "def solve(arr):\n    for num in arr:\n        if arr.count(-num) == 0: return num\n    return \n", "def solve(arr):\n    \n    for i in arr:\n        if -i not in arr:\n            return i\n    return\n", "def solve(arr):\n    return list(set([x for x in arr if -x not in arr]))[0]", "def solve(ar):\n    \n    for item in ar:\n        if -item not in ar:\n            return item", "def solve(arr):\n    pos = set([x for x in arr if x>0])\n    neg = set([abs(x) for x in list([x for x in arr if x<0])])\n    if pos.issubset(neg):return (neg-pos).pop()*(-1)\n    else:return (pos-neg).pop()\n\n\n", "def solve(arr):\n    for idx, num in enumerate(arr):\n        if num in (arr[:idx] + arr[idx+1:]):\n            return arr[idx]\n    return sum(arr)\n", "def solve(arr):\n    pos = []\n    neg = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    for i in neg:\n        if abs(i) not in pos:\n            return i\n            break\n    for j in pos:\n        if -j not in neg:\n            return j\n            break", "def solve(arr):\n    for i,v in enumerate(arr):\n        isTrue = False\n        for k,kv in enumerate(arr):\n            if i == k:\n                continue\n            if v == arr[k] * -1:\n                isTrue = True\n                break\n                \n        if isTrue == False:\n            return v", "def solve(arr):\n    return sum(arr) / arr.count(max(arr, key = arr.count))", "def solve(arr):\n    parr = []\n    narr = []\n    for i in arr:\n        if i < 0:\n            narr.append(i)\n        else:\n            parr.append(i)\n    res = 0\n    for a in narr:\n        if abs(a) not in parr:\n            res = a\n    for b in parr:\n        if b*-1 not in narr:\n            res = b\n    return res\n", "\ndef solve(arr):\n  check = []\n  for i in arr:\n    if -i not in arr:\n      return i", "from collections import Counter\ndef solve(arr):\n    return sum(arr)/Counter(arr).most_common(1)[0][1]", "def solve(arr):\n    abs_arr = [abs(n) for n in arr]\n\n    for n in set(abs_arr):\n        if not(n in arr and -n in arr):\n            return arr[abs_arr.index(n)]", "def solve(arr):\n    for i in arr:\n        m, s = 0, -i\n        for j in arr:\n            if s == j: m = 1\n        if m == 0: return i", "def solve(arr):\n    for i in arr:\n        m = 0\n        s = -i\n        for j in arr:\n            if s == j: m = 1\n        if m == 0: return i", "def solve(arr):\n    for num in arr:\n        if num > 0 and -num not in arr:\n            return num\n        elif num < 0 and num-(num*2) not in arr:\n            return num", "def solve(arr):\n    dict = {}\n    for a in arr:\n        if abs(a) not in dict:\n            dict[abs(a)] = a\n        elif dict[abs(a)] == a:\n                return a\n                break\n        else:\n            dict[abs(a)] = a + dict[abs(a)]\n    for v in list(dict.values()):\n        if v != 0:\n            return v\n", "def solve(arr):\n    newArr = []\n    for x in arr:\n        if x*-1 not in arr:\n            return x", "def solve(arr):\n    for num in arr:\n        if -1 * num not in arr:\n            return num", "def solve(arr):\n    for x in arr:\n        if not(x*-1 in arr):\n            return x", "def solve(arr):\n    negative = set([i for i in arr if i < 0])\n    positive = set([i for i in arr if i > 0])\n    res = None\n    for i in negative:\n        if i * -1 not in positive:\n            res = i\n    for i in positive:\n        if i * -1 not in negative:\n            res = i\n    return res", "def solve(arr):\n    for i in range(len(arr)):\n        count = 0\n        if arr.count(arr[i]) > 1:\n            return arr[i]\n        for j in range(len(arr)):\n            if arr[i] == (-arr[j]):\n                count += 1\n        if count != 1: return arr[i]", "from collections import Counter\ndef solve(arr):\n    c = Counter(arr)\n    for k, v in c.items():\n        if (k*-1) not in c.keys():\n            return k", "import collections\ndef solve(arr):\n    count = collections.Counter(arr)\n    for number in arr:\n        if not count[-number]:\n            return number", "def solve(arr):\n    for val in arr:\n        if -1*val not in arr:\n            return val\n", "def solve(arr):\n    for i in arr:\n        if -1*i in arr:\n            continue\n        return i", "def solve(arr):\n    sum = 0\n    times = 0\n    ele = {}\n    for i in arr:\n        if i in ele:\n            ele[i] = ele[i]+i\n        else:\n            ele[i] = i\n        sum = sum + i\n    for k,v in ele.items():\n        if v == sum:\n            if -k not in arr:\n                times = sum/k\n    if times > 1:\n        sum = sum/times\n    return sum", "def solve(arr):\n    for num in arr:\n        if arr.count(num) > arr.count(-num):\n            return num\n        elif arr.count(-num) >  arr.count(num):\n            return -num", "def solve(arr):\n    for i, el in enumerate(arr):\n        if arr.count(el*-1) == 0:\n            return el\n", "def solve(arr):\n    return sum(dict.fromkeys(arr))", "def solve(arr):\n    for i in arr:\n        if i in arr and i * -1 not in arr:\n            return i\n", "def solve(arr):\n    for x in arr:\n        if (-x) not in arr and x in arr or x not in arr and (-x) in arr:\n            return x", "def solve(arr):\n    for i in arr:\n        n=0\n        for j in arr:\n            n+=1\n            if i+j ==0:\n                break\n            if len(arr)==n and i+j !=0:\n                return i", "def solve(arr):\n    return [i for i in arr if arr.count(-i) == 0][0]", "def solve(arr):\n    for i in range(len(arr)):\n        if arr.count(arr[i]*-1) != 1:\n            return arr[i]", "def solve(arr):\n    while len(set(arr)) > 1:\n        for i in range(len(arr) - 1):\n            if arr.count(-arr[i]):\n                arr.remove(-arr[i])\n                arr.remove(arr[i])\n                break\n    return (list(set(arr))[0])", "def solve(arr):\n    for i in range(0,len(arr)):\n        num = arr[i]\n        reversenumber = -num\n        found = False\n        for index in range(0, len(arr)):\n            if i == index :\n                continue\n            if reversenumber == arr[index]:\n                found = True\n                break\n        if found == False:\n            return num "]