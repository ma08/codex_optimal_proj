["def hollow_triangle(n):\n    width = n * 2 - 1\n    row = '{{:_^{}}}'.format(width).format\n    return [row(mid(a)) for a in xrange(1, width, 2)] + [width * '#']\n\n\ndef mid(n):\n    return '#' if n == 1 else '#{}#'.format('_' * (n - 2))", "def hollow_triangle(n):\n    w, result = 2 * n - 1, [f\"{'_' * (2*i-1):#^{2*i+1}}\" for i in range(n - 1)]\n    return [f\"{l:_^{w}}\" for l in result] + [\"#\" * w]", "hollow_triangle=lambda n:[\"\".join([['_','#'][k in[n-1-i,n-1+i]]for k in range(n*2-1)])for i in range(n-1)]+[f\"{'#'*(n*2-1)}\"]", "def hollow_triangle(n):\n  return [(f'#{\"_\" * (2*i-1)}#' if i else '#').center(2*n-1, '_') for i in range(n-1)] + ['#' * (2*n-1)]", "def hollow_triangle(n):\n    return ['_' * (n - i - 1) + '#' + '_' * (2 * i - 1) + '#' * (i >= 1) + '_' * (n - i - 1) \\\n    for i in range(n - 1)] + ['#' * (2 * n - 1)]", "def hollow_triangle(n):\n    if n == 1:\n        return ['#']\n    first = [\"_\"*(n-1)+\"#\"+\"_\"*(n-1)]\n    last = [\"#\"*(2*n-1)]\n    return first +[\"_\"*(n-i-1)+\"#\"+\"_\"*(2*i-1)+\"#\"+\"_\"*(n-i-1) for i in range(1,n-1)] + last", "def hollow_triangle(n):\n    total_width = 2 * n - 1\n    triangle = ['#'.center(total_width, '_')]\n    for i in range(1, total_width-2, 2):\n        triangle.append('#{}#'.format('_' * i).center(total_width, '_'))\n    triangle.append('#' * total_width)\n    return triangle", "m,hollow_triangle=lambda s:s[:0:-1]+s,lambda n:[m('_'*i+'#'+'_'*(n-i-1))for i in range(n-1)]+[m(n*'#')]", "def hollow_triangle(n):\n    lines = ['_' * (n-i-1) + '#' + '_' * (2*i-1) + '#' + '_' * (n-i-1) for i in range(1, n-1)]\n    return ['_' * (n-1) + '#' + '_' * (n-1)] + lines + ['#' * (2*n-1)] if n > 1 else ['#']", "def hollow_triangle(n):\n    ans = []\n    for i in range(n-1, 0, -1):\n        x = '_' * i + '#' + '_' * (n-i-1)\n        ans.append(x[:-1] + x[::-1])\n    return ans + ['#' * (2*n - 1)]"]