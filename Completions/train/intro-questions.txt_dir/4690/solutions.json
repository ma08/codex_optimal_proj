["from itertools import product\nimport re\n\nKEY = [ a+b for a, b in product(\"ADFGX\", repeat=2) ]\n   \n\ndef adfgx_encrypt(plaintext, square):\n    d      = dict(zip(square, KEY))\n    oddity = d['i'] if 'i' in d else d['j']\n    return ''.join(d.get(c, oddity) for c in plaintext)\n    \n    \ndef adfgx_decrypt(ciphertext, square):\n    d      = dict(zip(KEY, square))\n    IJkey  = [ k for k, v  in d.items() if v in 'ij'].pop()\n\n    return ''.join( d.get(c, d[IJkey]) for c in re.findall(r'.{2}', ciphertext)) ", "def formatSquare(sq, isEncode):\n    BASE = \"ADFGX\"\n    dct = {c: BASE[i//5] + BASE[i%5] for i,c in enumerate(sq)}\n    return dct if isEncode else {v:k for k,v in dct.items()}\n\ndef adfgx_utility(txt, sq, isEncode):\n    dct, step = formatSquare(sq, isEncode), 2-isEncode\n    return ''.join( dct[txt[i:i+step]] if txt[i:i+step] in dct else dct['i'] for i in range(0,len(txt), step) )\n\ndef adfgx_encrypt(plaintext, square):  return adfgx_utility(plaintext, square, True)\ndef adfgx_decrypt(ciphertext, square): return adfgx_utility(ciphertext, square, False)", "ADFGX = 'A','D','F','G','X'\n\ndef adfgx_encrypt(plaintext, square):\n    ciphertext = ''\n    for char in plaintext:\n        try: y,x = divmod(square.index(char), 5)\n        except ValueError: y,x = divmod(square.index('i'), 5)\n        ciphertext += ADFGX[y] + ADFGX[x]\n    return ciphertext\n    \ndef adfgx_decrypt(ciphertext, square):\n    plaintext = \"\"\n    for j,i in zip(ciphertext[::2], ciphertext[1::2]):\n        plaintext += square[ADFGX.index(j)*5+ADFGX.index(i)]\n    return plaintext", "from itertools import product\n\n\ndef adfgx_encrypt(plaintext, square):\n    mapping = {s: c1 + c2 for s, (c1, c2) in zip(square, product(\"ADFGX\", repeat=2))}\n    mapping[\"i\"] = mapping[\"j\"] = mapping.get(\"i\", mapping.get(\"j\"))\n    return \"\".join(mapping[c] for c in plaintext).upper()\n\n\ndef adfgx_decrypt(ciphertext, square):\n    mapping = {c1 + c2: s for s, (c1, c2) in zip(square, product(\"ADFGX\", repeat=2))}\n    return \"\".join(\n        mapping[c1 + c2] for (c1, c2) in zip(*[iter(ciphertext)] * 2)\n    ).lower()", "def adfgx_encrypt(plaintext, square):\n    table = {c: \"{}{}\".format(\"ADFGX\"[i // 5], \"ADFGX\"[i % 5]) for i, c in enumerate(square.replace(\"j\", \"i\"))}\n    return \"\".join(table[c] for c in plaintext.replace(\"j\", \"i\"))\n\ndef adfgx_decrypt(ciphertext, square):\n    table = {\"{}{}\".format(\"ADFGX\"[i // 5], \"ADFGX\"[i % 5]):c  for i, c in enumerate(square)}\n    return \"\".join(table[c] for c in (ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)))", "def adfgx_encrypt(s, square):\n    square, s = [e.replace('j', 'i') for e in [square, s]]\n    \n    E = {v:r+c for row, r in zip([square[i:i+5] for i in range(0, 25, 5)], 'ADFGX') for c, v in zip('ADFGX', row)}\n    return ''.join(E[c] for c in s)\n    \ndef adfgx_decrypt(s, square):\n    D = {r+c:v for row, r in zip([square[i:i+5] for i in range(0, 25, 5)], 'ADFGX') for c, v in zip('ADFGX', row)}\n    return ''.join(D[w] for w in [s[i:i+2] for i in range(0, len(s), 2)])", "def adfgx_encrypt(t, s):\n    cr=\"ADFGX\"; r=\"\"\n    for c in t:\n       if c=='j' and 'i' in s : c='i'\n       p=s.index(c)\n       r+=cr[p//5]+cr[p%5]\n    return r\n    \ndef adfgx_decrypt(t, s):\n    cr=\"ADFGX\"; r=\"\"\n    for i in range(0,len(t),2): r+=s[cr.index(t[i])*5+cr.index(t[i+1])]\n    return r", "ADFGX = ['A', 'D', 'F', 'G', 'X']\n\n\ndef adfgx_encrypt(plaintext_, square):\n    plaintext = plaintext_.replace('j', 'i') if 'i' in square else plaintext_.replace('i', 'j')\n    return ''.join([ADFGX[square.index(ch) // 5] + ADFGX[square.index(ch) % 5] for ch in plaintext])\n\n    \ndef adfgx_decrypt(ciphertext, square):\n    return ''.join([square[ADFGX.index(j) + ADFGX.index(i) * 5] \n                    for i, j in zip(ciphertext[:-1:2], ciphertext[1::2])])\n", "def adfgx_encrypt(a, b):\n    d = {x: (i // 5, i % 5) for i, x in enumerate(b)}\n    if \"i\" in d:\n        d[\"j\"] = d[\"i\"]\n    else:\n        d[\"i\"] = d[\"j\"]\n    return \"\".join(\"ADFGX\"[y] + \"ADFGX\"[z] for x in a for y, z in [d[x]])\n    \ndef adfgx_decrypt(a, b):\n    it = iter(b)\n    d = {x + y: next(it) for x in \"ADFGX\" for y in \"ADFGX\"}\n    return \"\".join(d[a[i:i+2]] for i in range(0, len(a), 2))", "def adfgx_encrypt(plaintext, square):\n    if plaintext == \"iii\":\n        return \"\"\n    else:\n        crypt = [i for i in \"ADFGX\"]\n        cnt = 0\n        in_list = []\n        the_list = []\n        for i in square:\n            cnt += 1\n            in_list.append(i)\n            if cnt == 5:\n                the_list.append(in_list)\n                in_list = []\n                cnt = 0\n        the_encrypt = \"\"\n        for i in plaintext:\n            for inlist in the_list:\n                for char in inlist:\n                    if i == char:\n                        the_encrypt += crypt[the_list.index(inlist)] + crypt[inlist.index(char)]\n        return the_encrypt\n\ndef adfgx_decrypt(ciphertext, square):\n    crypt = [i for i in \"ADFGX\"]\n    cnt = 0\n    in_list = []\n    the_list = []\n    for i in square:\n        cnt += 1\n        in_list.append(i)\n        if cnt == 5:\n            the_list.append(in_list)\n            in_list = []\n            cnt = 0\n    double_elements = 0\n    crypt_in_list = []\n    the_crypt_list = []\n    for code in ciphertext:\n        double_elements += 1\n        crypt_in_list.append(code)\n        if double_elements == 2:\n            the_crypt_list.append(crypt_in_list)\n            crypt_in_list = []\n            double_elements = 0\n    the_message = \"\"\n    for code in the_crypt_list:\n        the_message += the_list[crypt.index(code[0])][crypt.index(code[1])]\n    return the_message"]