["import re\n\nPATTERN = re.compile(r'(?P<first>(?:(?<=[.!?] )|^)\\w+)|(?P<other>\\w+)')\n\ndef pete_talk(speech,ok=[]):\n\n    def watchYourMouth(m):\n        w = (m.group(\"first\") or m.group(\"other\")).lower()\n        if w not in ok and len(w) > 1: w = w[0] + '*'*(len(w)-2) + w[-1]\n        if m.group(\"first\"): w = w.capitalize()\n        return w\n    \n    ok = set(map(str.lower, ok))\n    return PATTERN.sub(watchYourMouth, speech)", "import re\n\ndef pete_talk(speech, ok=()):\n    ok = {word.lower() for word in ok}\n    def sub(m):\n        s = m.group()\n        if s in ok:\n            return s\n        return s[0] + '*' * (len(s) - 2) + s[-1]\n    return re.sub(\n        r'[a-z][^.?!]+',\n        lambda m: re.sub(r'\\w{3,}', sub, m.group()).capitalize(),\n        speech.lower(),\n    )", "import re\n\ndef pete_talk(speech, ok = []):\n    ok = [i.lower() for i in ok]\n    def repl(m):\n        if m.group('word') not in ok:\n            return m.group('word')[0] + '*' * len(m.group('reppart')) + m.group('word')[-1]\n        else: return m.group('word')\n            \n    replaced = re.sub('(?P<word>[\\w](?P<reppart>[\\w]+)[\\w])', repl, speech.lower())\n    capitalized = re.sub('(?P<sent>[.!?]+\\s*|\\A\\s*)(?P<word>\\s*[a-z])', lambda m: m.group('sent') + m.group('word').capitalize(), replaced)\n    return capitalized", "import re\ndef pete_talk(*args):\n    speech = args[0].lower()\n    permitted = args[1] if len(args) == 2 else []\n    speech = re.sub('([!\\?\\.] )(\\w+)', upper, speech)\n    speech = re.sub('^(\\w)', upper, speech)\n    speech = re.sub('(\\w{3,})', lambda match: bleep(match, permitted), speech)\n    return speech\n\ndef bleep(match, perm):\n    st = match.group(1)\n    bleeped = st[0] + ('*' * (len(st) - 2)) + st[-1]\n    return bleeped if st.lower() not in [x.lower() for x in perm] else st\n\ndef upper(match):\n    groups = list(match.groups())\n    groups[-1] = groups[-1].capitalize()\n    return ''.join(groups)", "def pete_talk(speech, ok = []):\n    from re import split, sub\n    ok = [x.lower() for x in ok]\n    \n    def add_stars(strng):\n        x = strng.group(0)\n\n        if x.lower() not in ok:\n            return x[0] + \"*\"*(len(x) - 2) + x[-1]\n        else:\n            return x\n    \n    def process(s):\n        s = sub(\"^([a-z])\", lambda x: x.group(0).upper(), s)\n        s = sub(\"(?<=.{1})\\w\", lambda x: x.group(0).lower(), s)\n        s = sub(\"[a-zA-Z]{3,}\", add_stars, s)\n        return s\n\n    return \" \".join(process(s) for s in split(\"(?<=[.!?])\\ \", speech))", "import re\ndef pete_talk(s,ok=[]):\n    ok = list(map(lambda x:x.lower(),ok))\n    return re.sub(r'((?<=^)|(?<=[?.!] ))\\w',lambda x:x.group(0).upper(),' '.join([(i[0]+'*'*(len(i)-2-int(i[-1]in'!.,?;:'))+i[-[1,2][i[-1]in'!.,;?:']:])if[i,i[:-1]][i[-1]in'!.,;?:']not in ok and len(i)>2else i for i in s.lower().split()]))", "import re\ndef pete_talk(speech, ok = []):\n    ok = {v.lower() for v in ok}\n    def repl(Match):\n        s = Match[0]\n        i = Match.start()\n        \n        \n        if i == 0 or (i >= 2 and speech[i - 2] in '.!?'):\n            s = s.capitalize()\n        else:\n            s = s.lower()\n        n = len(s)\n        if n <= 2 or s.lower() in ok:\n            return s\n        return s[0] + '*' * (n - 2) + s[-1]\n    return re.sub('\\w+', repl, speech)", "import re\n\ndef pete_talk(speech, ok=()):\n    oks = [w.lower() for w in ok]\n    upper_first = re.sub('^[a-z]', lambda c: c.group().upper(), speech, 1)\n    lower2uppercased = re.sub('[A-Z]{2,}|[.!?] [a-z]', lambda w: w.group().title(), upper_first)\n    lower_punc = re.sub(r'[^.!?] [A-Z]', lambda w: w.group().lower(), lower2uppercased)\n\n    def xx(g):\n        w = g.group()\n        return f'{w[0]}{(len(w)-2) * \"*\"}{w[-1]}' if w.lower() not in oks else w\n\n    long_words = re.sub('[a-zA-Z]{2,}', xx, lower_punc)\n\n    return long_words", "import re\n\ndef pete_talk(s, a=None):\n    a = {x.lower() for x in a or []}\n    def f(x):\n        x = x[0]\n        return x if x.lower() in a else x[0] + \"*\" * (len(x) - 2) + x[-1] * (len(x) > 1)\n    return \"\".join(x.capitalize() for x in re.split(r\"([!?.] ?)\", re.sub(r\"\\w+\", f, s)))", "from re import sub\n\ncapital = lambda x: x.group().capitalize()\ncensor = lambda x: (x[0] + '*'*(len(x) - 2) + x[-1])\n\ndef pete_talk(speech, ok=[]):\n    okay = set(map(str.lower, ok)).__contains__\n    check = lambda x: x.group() if okay(x.group().lower()) else censor(x.group())\n    return sub(r\"[\\w\\s*:,;]+(?:[\\.?!](?:\\s|$)|$)\", capital, sub(r\"\\w{3,}\", check, speech))"]