["for _ in range(int(input())):\n    n, m, a, b = list(map(int, input().split()))\n    if a * n != b * m:\n        print('NO')\n    else:\n        ar = []\n        for i in range(n):\n            ar.append([0] * m)\n        x, y = 0, a\n        for i in range(n):\n            if x < y:\n                for j in range(x, y):\n                    ar[i][j] = 1\n            else:\n                for j in range(x, m):\n                    ar[i][j] = 1\n                for j in range(y):\n                    ar[i][j] = 1\n            x += a\n            y += a\n            x %= m\n            y %= m\n        print('YES')\n        for i in range(n):\n            print(''.join(map(str, ar[i])))", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m,a,b=list(map(int,input().split()))\n\n    if a*n!=m*b:\n        print(\"NO\")\n        continue\n    ANS=[[0]*m for i in range(n)]\n\n    cind=0\n\n    for i in range(n):\n        for j in range(a):\n            ANS[i][cind]=1\n            cind+=1\n            cind%=m\n\n    print(\"YES\")\n\n    for a in ANS:\n        print(\"\".join(map(str,a)))\n                    \n                \n\n    \n                \n    \n", "t = int(input())\nfor _ in range(t):\n    h, w, h_cnt, w_cnt = map(int, input().split())\n    if h_cnt * h != w_cnt * w:\n        print(\"NO\")\n        continue\n\n    ans = [[0] * w for i in range(h)]    \n    j = 0\n    for i in range(h):\n        cnt = h_cnt\n        while cnt > 0:\n            ans[i][j % w] = 1\n            j += 1\n            cnt -= 1\n    print(\"YES\")\n    for res in ans:\n        print(\"\".join(map(str, res)))", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key,lru_cache\nimport io, os\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# import sys\n# input = sys.stdin.readline\n\nM = mod = 10**9 + 7 \ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip().split()]\ndef st():return str(input().rstrip())[2:-1]\ndef val():return int(input().rstrip())\ndef li2():return [str(i)[2:-1] for i in input().rstrip().split()]\ndef li3():return [int(i) for i in st()]\n\n\ndef satisy(n, m, a, b, l):\n    for i in l:\n        if sum(i) != a:return 0\n    \n    for j in range(m):\n        curr = 0\n        for i in range(n):\n            curr += l[i][j]\n        if curr != b:return 0\n    return 1\n\nfor _ in range(val()):\n    n, m, a, b = li()\n    l = [[0]*m for i in range(n)]\n\n    col = 0\n    for i in range(n):\n        for j in range(col,col + a):l[i][j%m] = 1\n    \n    \n        col += m - a\n    \n    if satisy(n, m, a, b, l):\n        print('YES')\n        for i in l:print(*i,sep = '')\n    else:print('NO')", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, m, a, b = read_ints()\n    if n * a != m * b:\n        print('NO')\n    else:\n        print('YES')\n        ans = [[0 for i in range(m)] for j in range(n)]\n        row = 0\n        col = 0\n        t = 0\n        while True:\n            ans[row][col] = 1\n            t += 1\n            if t == n * a:\n                break\n            col = (col + 1) % m\n            row = (row + 1) % n\n            while ans[row][col] == 1:\n                col = (col + 1) % m\n        for i in range(n):\n            print(''.join(map(str, ans[i])))\n", "import sys\nmax_int = 1000000001  # 10^9+1\nmin_int = -max_int\n\nt = int(input())\nfor _t in range(t):\n    n, m, a, b = list(map(int, sys.stdin.readline().split()))\n\n    if n * a != m * b:\n        print('NO')\n        continue\n    print('YES')\n\n    pointer = -1\n    for i in range(n):\n        row = ['0'] * m\n        for j in range(a):\n            pointer = (pointer + 1) % m\n            row[pointer] = '1'\n        print(''.join(row))\n\n\n", "import sys\nT = int(sys.stdin.readline().strip())\n\nfor t in range(T):\n    (n, m , a, b) = list(map(int, sys.stdin.readline().strip().split(\" \")))\n    if n * a != m * b: print(\"NO\"); continue\n    res = [[\"0\" for _ in range(m)] for _ in range(n)]\n    pt = 0\n    for i in range(n):\n        for j in range(a):\n            res[i][pt] = \"1\"\n            pt = (pt +1)%m\n    print(\"YES\")\n    for i in range(n):\n        print(\"\".join(res[i]))\n", "\nT = int(input())\n\nfor _ in range(T):\n    H, W, a, b, = list(map(int, input().split()))\n\n    if a * H != b * W:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        ans = [[0] * W for _ in range(H)]\n\n        L = 0\n        for y in range(H):\n            for x in range(L, L + a):\n                ans[y][x % W] = 1\n            L += (W - a)\n\n        for c in ans:\n            print(\"\".join(map(str, c)))\n", "import io\nimport os\n\nfrom collections import Counter, defaultdict, deque\n\n\ndef solve(R, C, A, B):\n    if R * A != C * B:\n        return \"NO\"\n    grid = [[0 for c in range(C)] for r in range(R)]\n    for r in range(R):\n        for i in range(A):\n            grid[r][(r * A + i) % C] = 1\n\n    return \"YES\\n\" + \"\\n\".join(\"\".join(map(str, row)) for row in grid)\n\n\ndef __starting_point():\n    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n    T = int(input())\n    for t in range(T):\n        N, M, A, B = [int(x) for x in input().split()]\n        ans = solve(N, M, A, B)\n        print(ans)\n\n__starting_point()", "def solve(n,m,a,b,ans):\n    col = 0\n    grid = [[0 for j in range(m)] for i in range(n)]\n    for row in range(n):\n        count = 0\n        while count != a:\n            grid[row][col] = 1\n            col += 1\n            count += 1\n            if col == m:\n                col = 0\n\n    for row in range(n):\n        count = 0\n        for col in range(m):\n            if grid[row][col] == 1:\n                count += 1\n\n        if count != a:\n            ans.append(['NO'])\n            return\n\n    for col in range(m):\n        count = 0\n        for row in range(n):\n            if grid[row][col] == 1:\n                count += 1\n\n        if count != b:\n            ans.append(['NO'])\n            return\n\n    ans.append(['YES'])\n    for row in range(n):\n        s = ''\n        for col in grid[row]:\n            s += str(col)\n\n        ans.append([s])\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n,m,a,b = list(map(int,input().split()))\n        solve(n,m,a,b,ans)\n\n    for i in ans:\n        for j in i:\n            print(j)\n\n\nmain()\n", "import os\nimport sys\nfrom io import BytesIO, IOBase\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n#################################################\nt=int(input())\nfor i in range(t):\n    n,m,a,b=list(map(int,input().split()))\n    if n*a!=m*b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        l=[['0']*m for j in range(n)]\n        c=0\n        if a<=b:\n            for j in range(n):\n                for k in range(c,c+a):\n                    l[j][k%m]='1'\n                c=(c+a)%m\n            for j in l:\n                print(''.join(j))\n        else:\n            for j in range(m):\n                for k in range(c,c+b):\n                    l[k%n][j]='1'\n                c=(c+b)%n\n            for j in l:\n                print(''.join(j))\n        \n        \n            \n            \n            \n        \n    \n            \n", "import math \n#------------------------------warmup----------------------------\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n#-------------------game starts now----------------------------------------------------\nfor ik in range(int(input())):\n    n,m,a,b=map(int,input().split())\n    if a*n!=b*m:\n        print(\"NO\")\n    else:\n        d=0\n        print(\"YES\")\n        ans=[[0 for i in range(m)]for j in range(n)]\n        for i in range(n):\n            for j in range(a):\n                ans[i][d%m]=1\n                d+=1\n            print(*ans[i],sep=\"\")\n                \n            \n        ", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\ndef main():\n    for _ in range(int(input())):\n        n, m, a, b = list(map(int,input().split()))\n        if abs(n/b - m/a) > 0.00001:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            ans = [[\"0\"]*m for k in range(n)]\n            for k in range(n):\n                for l in range(k*a,k*a+a):\n                    ans[k][l%m] = \"1\"\n            for e in ans:\n                print(\"\".join(e))\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import inf\n\ndef solve():\n    n, m, a, b = map(int, input().split())\n    grid = [[0] * m for i in range(n)]\n    row_cnt, col_cnt = [0] * n, [0] * m\n\n    for i in range(n):\n        for cnt in range(a):\n            mini = inf\n            ind = None\n            for j in range(m):\n                if col_cnt[j] < mini:\n                    mini = col_cnt[j]\n                    ind = j\n            grid[i][ind] = 1\n            row_cnt[i] += 1\n            col_cnt[ind] += 1\n\n    if all(r == a for r in row_cnt) and all(c == b for c in col_cnt):\n        print('YES')\n        for row in grid:\n            print(''.join(list(map(str, row))))\n    else:\n        print('NO')\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n\nmain()", "import sys;input=sys.stdin.readline\nT, = list(map(int, input().split()))\nfor _ in range(T):\n    a, b, c, d = list(map(int, input().split()))\n    if a*c != b*d:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n    R = [[0]*b for _ in range(a)]\n    for v in range(a):\n        v *= c\n        s = [0]*b\n        for i in range(c):\n            s[(v+i)%b] = 1\n        print(\"\".join(str(x) for x in s))\n", "# -*- coding: utf-8 -*-\nimport sys\n# sys.setrecursionlimit(10**6)\n# buff_readline = sys.stdin.buffer.readline\nbuff_readline = sys.stdin.readline\nreadline = sys.stdin.readline\n\nINF = 2**62-1\n\n\ndef read_int():\n    return int(buff_readline())\n\n\ndef read_int_n():\n    return list(map(int, buff_readline().split()))\n\n\n# @mt\ndef slv(N, M, A, B):\n    if N * A != M*B:\n        print('NO')\n        return\n\n    print('YES')\n    mat = [[0] * M for _ in range(N)]\n    for i in range(N):\n        for j in range(A):\n            mat[i][(i*A+j)%M] = 1\n\n    for r in mat:\n        print(''.join(map(str, r)))\n\n\n\ndef main():\n    T = read_int()\n    for _ in range(T):\n        N, M, A, B = read_int_n()\n        slv(N, M, A, B)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom collections import defaultdict as dd\ndef eprint(*args):\n    print(*args, file=sys.stderr)\nzz=1\nfrom math import *\nimport copy\n#sys.setrecursionlimit(10**6)\nif zz:\n\tinput=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\ndef li():\n\treturn [int(x) for x in input().split()]\ndef fi():\n\treturn int(input())\ndef si():\n\treturn list(input().rstrip())\t\ndef mi():\n\treturn \tmap(int,input().split())\t\n\ndef bo(i):\n\treturn ord(i)-ord('a')\n\nimport copy\nt=fi()\nwhile t>0:\n\tt-=1\n\tn,m,a,b=mi()\t\n\td=[['0' for i in range(m)] for j in range(n)]\n\ti=0\n\tj=0\n\tflag=0\n\tfor k in range(b*m):\n\t\tif d[i][j]=='1':\n\t\t\t#print(i,j,\"LOL\")\n\t\t\tpp=i-1\n\t\t\twhile i!=pp-1 and d[i][j]=='1':\n\t\t\t\ti+=1\n\t\t\t\ti%=n\n\t\t\t\tif d[i][j]=='0':\n\t\t\t\t\td[i][j]='1'\n\t\t\t\t\tf=1\n\t\t\t\t\tbreak\n\t\t\ti=(i+1)%n\n\t\t\tj=(j+1)%m\t\t\n\t\t\tif f==0:\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\t\telse:\n\t\t\td[i][j]='1'\n\t\t\ti=(i+1)%n\n\t\t\tj=(j+1)%m\t\n\t\t#print(i,j)\t\t\n\t\t#for ppp in d:\t\t\n\t\t#\tprint(*ppp)\n\n\tif flag:\n\t\tprint(\"NO\")\n\t\tcontinue\t\n\tfor i in range(n):\n\t\tv=0\n\t\tfor j in range(m):\n\t\t\tif d[i][j]=='1':\n\t\t\t\tv+=1\n\t\tif v!=a:\n\t\t\tflag=1\n\t\t\tbreak\t\t\n\tif flag:\n\t\tprint(\"NO\")\n\t\tcontinue\n\tprint(\"YES\")\n\tfor i in d\t:\n\t\tprint(\"\".join(i))\t", "'''     ##     ##  #######  # #  ######\n        ##     ##  ##   ##  ###    ##\n        ##     ##  ##    #  # #    ##\n        #########  #######  # #    ##    '''\n\nimport sys\nimport math\n# sys.setrecursionlimit(10**6)\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\n\ndef printspx(*args): return print(*args, end=\"\")\ndef printsp(*args): return print(*args, end=\" \")\ndef printchk(*args): return print(*args, end=\" \\ \")\n\nMODPRIME = int(1e9+7); BABYMOD = 998244353;\n\ndef __starting_point():\n    # sys.stdin = open(\"input.txt\",\"r\")  # <<<  ^o^  Comment this line  ^_^  >>>\n    for _testcases_ in range(int(input())):\n        n, m, a, b = get_ints()\n        if m/a != n/b :\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            matr = [[0]*m for x in range(n)]\n            fac = math.ceil(m/a)\n            for i in range(n):\n                for j in range(a):\n                    matr[i][(j+(i*a))%m] = 1\n            for i in range(n):\n                for j in range(m):\n                    printspx(matr[i][j])\n                print()\n                    \n            \n\n\n# #############################################################################\n'''\nTHE LOGIC AND APPROACH IS BY ME @luctivud ( UDIT GUPTA )\nSOME PARTS OF THE CODE HAS BEEN TAKEN FROM WEBSITES LIKE::\n(I Own the code if no link is provided here or I may have missed mentioning it)\n>>> DO NOT PLAGIARISE.\nTESTCASES:\n'''\n__starting_point()", "def N(): return int(input())\ndef NM():return map(int,input().split())\ndef L():return list(NM())\ndef LN(n):return [N() for i in range(n)]\ndef LL(n):return [L() for i in range(n)]\nt=N()\nfrom math import gcd\ndef f():\n    n,m,a,b=NM()\n    if n*a!=m*b:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    ans=[[0]*m for i in range(n)]\n    t=0\n    for i in range(n):\n        for j in range(a):\n            ans[i][(j+t)%m]=1\n        t+=a\n    for i in ans:\n        print(\"\".join(map(str,i)))\nfor i in range(t):\n    f()", "import math\nt=int(input())\ndef convert(s): \n  \n    # initialization of string to \"\" \n    new = \"\" \n  \n    # traverse in the string  \n    for x in s: \n        new += x  \n  \n    # return string  \n    return new \n      \nfor i in range(t):\n    n,m,a,b=map(int,input().split())\n    if m*b!=n*a:\n        print('NO')\n    else:\n        print('YES')\n        l=0\n        for j in range(n):\n            ans=['0']*m\n            for k in range(a):\n                ans[(l+k)%m]='1'\n            print(convert(ans))\n            l+=math.gcd(a,m)", "from collections import *\nfrom bisect import *\nfrom math import *\nfrom heapq import *\nimport sys\ninput=sys.stdin.readline\nt=int(input())\nwhile(t):\n    t-=1\n    n,m,a,b=map(int,input().split())\n    ma=[[0 for i in range(m)] for j in range(n)]\n    x=-a\n    flag=0\n    for i in range(n):\n        x=(x+a)%m\n        for j in range(x,min(x+a,m)):\n            ma[i][j]=1\n        re=a-(m-x)\n        for j in range(re):\n            ma[i][j]=1\n    for i in range(m):\n        cc=0\n        for j in range(n):\n            if(ma[j][i]==1):\n                cc+=1\n        if(cc!=b):\n            flag=1\n            break\n    if(flag):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in ma:\n            for j in i:\n                print(j,end=\"\")\n            print()\n    \n", "t=int(input())\nfor you in range(t):\n    l=input().split()\n    n=int(l[0])\n    m=int(l[1])\n    a=int(l[2])\n    b=int(l[3])\n    arr=[[0 for i in range(m)]for i in range(n)]\n    if(n*a!=m*b):\n        print(\"NO\")\n    else:\n        diff=1\n        for i in range(n):\n            for j in range(a):\n                arr[i][(i*a+j)%m]=1\n        print(\"YES\")\n        for i in range(n):\n            for j in range(m):\n                print(arr[i][j],end=\"\")\n            print()\n", "import sys\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n\nttt = int(inp[ii]); ii += 1\nres = []\nfor _ in range(ttt):\n\tn, m, a, b = inp[ii: ii + 4]; ii += 4\n\tif n * a == m * b:\n\t\tres.append(\"YES\")\n\t\tfor i in range(n):\n\t\t\tc = [0] * m\n\t\t\tfor j in range(a):\n\t\t\t\tc[(i * a + j) % m] = 1\n\t\t\tres.append(\"\".join(str(x) for x in c))\n\telse:\n\t\tres.append(\"NO\")\nprint(\"\\n\".join(str(x) for x in res))", "for _ in range(int(input())):\n    n, m, a, b = list(map(int, input().split()))\n    if n*a != m*b:\n        print('NO')\n        continue\n    print('YES')\n    t = '1'*a+'0'*(m-a)\n    for i in range(n):\n        print(t)\n        t = t[m-a:]+t[:m-a]\n", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\nq= nn()\n\nfor _ in range(q):\n\tn,m,a,b =mi()\n\n\tif not m*b==n*a:\n\t\tprint(\"NO\")\n\t\tcontinue\n\tprint(\"YES\")\n\tfor i in range(n):\n\t\trow = []\n\t\tfor j in range(m):\n\t\t\tif (a*i+j)%(m)<a:\n\t\t\t\trow.append('1')\n\t\t\telse:\n\t\t\t\trow.append('0')\n\n\t\tprint(\"\".join(row))\n"]