["def billboard(name, price=30):\n    return sum(price for letter in name)", "def billboard(name, price = 30):\n    return len(name) * price", "def billboard(name, price = 30):\n    return sum([price for l in name])", "def billboard(name, price=30):\n    return sum(price for _ in name)", "def billboard(name, price=30):\n    cout = 0\n    for letters in name:\n        cout += price\n    return cout\n    \n    \n    \n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "billboard = lambda n, p=30: len(n) * p", "def billboard(name, price=30):\n    return len(name)*price #I'm lame", "def billboard(name, price=30):\n  \n  # fine, dammit! I won't use that confounded * operator,\n  # but you're paying the inefficiency costs...\n  return sum(price for _ in name)", "def billboard(name, price=30):\n    return sum(price for c in name)\n#    return len(name) * price\n", "def billboard(name, price=30):\n    return sum(price for c in name)", "def billboard(name, price = 30):\n    amt = len(name) / (1.0 / price)\n    return amt", "from operator import mul\ndef billboard(name, price=30):\n    return mul(len(name), price)\n", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    cost = 0\n    for i in range(0, len(name)):\n        cost += price\n    return cost", "def billboard(name, price=30):\n    return int(len(name)/(1.0/price))", "def billboard(name, price=30):\n    return len(name) * price\n    \n    # I will use \"*\" whenever i want to :P\n", "def billboard(name: str, price: int=30) -> int:\n    \"\"\" Get a price for your name printed on the billboard. \"\"\"\n    return len(name) * price", "def billboard(name, price=30):\n    return sum([price for prince in range(len(name))])", "def billboard(name, price = 30):\n    cost = 0\n    print(name)\n    for i in range(len(name)):\n        cost += price\n    return cost\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "def billboard(name, price=30):\n    a = 0\n    for c in name:\n        a += price\n    return a", "def billboard(name, price=30):\n    l = [price for i in range(1,len(name)+1)]\n    return sum(l)", "def billboard(name, price = 30):\n    new = 0\n    for i in range(len(name)):\n        new += price\n    return new", "def billboard(name, price=30):\n    a = 0\n    for i in name:\n        a += price\n    return a", "def billboard(name, price = 30):\n    total_price = 0\n    for char in name:\n        total_price += price\n    return total_price\n", "def billboard(name, price=30):\n    suma=0\n    s=len(name)\n    for i in range(1, s+1):\n        suma+=price\n    return suma", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    tot = 0\n    for x in name:\n        tot += price\n        \n    return tot", "def billboard(name, price=30):\n    return __import__('operator').mul(len(name), price)", "def pro_recursive(n, m): \n    if n == 1: \n        return m\n    else: \n        return m + pro_recursive(n-1, m)\n        \ndef billboard(name, price=30): \n    return pro_recursive(len(name), price)", "import functools \ndef billboard(name, price = 30):\n    print(name,price)\n    return functools.reduce(lambda x,y : x + y , list(map(lambda x : price, list(range(len(name))))))", "def billboard(name, price=30):\n    if price == 30:\n        result = 0\n        for i in range(len(name)):\n            result += 30\n        return result\n    else:\n        result = 0\n        for i in range(len(name)):\n            result += price\n        return result", "def billboard(name, price=30):\n    rv = 0\n    for i in range(len(name)):\n        rv += price\n    else:\n        return rv\n", "def billboard(name, price=30):\n    # Without using multiplication\n    total = 0\n    for char in name:\n        total += price\n        \n    return total\n", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    #for each character in name, add price once\n    return sum(price for x in name)", "def billboard(name, price=30):\n    sum = 0\n    for letter in name:\n        sum = sum + price\n        \n    return sum", "def billboard(name, price=30):\n    print(name, price)\n    return len(name) * price", "def billboard(name, price=30):\n    x = 0\n    for i in range(len(name)):\n        x = x + price\n    return x", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way\n    return len(name) * price", "def billboard(name, price=30):\n    return len(name)*price\n# you are lame\n", "def billboard(name, price=30):\n    return len(name) / (1/price)", "def billboard(name, price=30):\n    return sum([price for i in range(1, len(name)+1)])", "def billboard(name, price=30):\n    sum = 0   \n    for char in name:\n        sum +=price\n        \n    return sum", "def billboard(name, price=30):\n    return sum([price for x in name])\n", "import numpy as np\n\ndef billboard(name, price=30):\n    return np.dot(len(name), price)", "def billboard(name, price=30):\n    pri = 0\n    for i in name:\n        pri += price\n    return pri\n        \n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "def billboard(name, price=30):\n    sum=0\n    for x in name:\n        sum+=price\n    return sum", "def billboard(name, price=30):\n    return sum(1*price for i in name)    ", "def billboard(n, p=30):\n    return len(n)*p", "def billboard(name, price=30):\n    cost = 0\n    for s in name:\n        cost += price \n    return cost", "def billboard(name, price=30):\n    letters = 1\n    new_price = 0\n    while letters <= len(name):\n        new_price = new_price + price\n        letters = letters + 1\n    return new_price\n        \n        \n", "def billboard(name, price=30):\n    x = 0\n    for i in name:\n        x += price\n    return x", "def billboard(name, price=30):\n    output = 0\n    for i in range(0,len(name)):\n        output += price\n    return output", "def billboard(name: str, price: int = 30) -> int:\n    return sum(price for _ in range(len(name)))\n", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    a = 0\n    for i in range(0,len(name)):\n       a = a+price\n    return a", "billboard=lambda n,p=30:p*len(n)", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    #return len(name)*price\n    sum = 0\n    for i in range(len(name)):\n        sum += price\n    return sum", "def billboard(name, price=30):\n    from operator import mul\n    return list(map(mul, [len(name)], [price]))[0]", "def billboard(name, price=30):\n    \n    \"\"\"No multiplier operator.\"\"\"\n    \n    myPrice = [price for char in name]\n    \n    return sum(myPrice)", "def billboard(name, price=30):\n    return sum(price for x in list(name))", "def billboard(name, price=30):\n    return sum([price for x in range(0, len(name))])", "def billboard(name, price=30):\n    total=0\n    for each in range(len(name)):\n        total+=price\n    return total", "def billboard(name, price=30):\n    total = 0\n    i = 0\n    while i < len(name):\n        total += price\n        i += 1\n    return total\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    return sum(price for i in range(len(name)))\n    #or\n    #return len(name)*price\n", "# If you don't block it, I'm gonna use it\n# If you block it, I'm gonna cheat it\ndef billboard(name, price=30):\n    return len(name)*price", "import numpy\ndef billboard(name, price=30):\n    return numpy.prod([len(name), price])", "def billboard(name, price=30):\n    return eval('len(name)*price')", "def billboard(name, price=30):\n    return len(name).__mul__(price)", "def billboard(name, price=30):\n    print(('name:', name))\n    return sum([price for x in name])\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "def billboard(name, price=30):\n    p = 0\n    for c in range(len(name)):\n        p += price\n    return p\n    # Flez\n", "def billboard(name, price=30):\n    p = 0\n    if price == 30:\n        for c in range(len(name)):\n            p += 30\n        return p\n    if price != 30:\n        for c in range(len(name)):\n            p += price\n        return p\n    # Flez\n", "def billboard(name, price=30):\n    total_price = 0\n    for c in name:\n        total_price += price\n    return total_price", "def billboard(name, price=30):\n    r = 0\n    for _ in name:\n        r += price\n    return r\n", "def billboard(name, price=30):\n    #your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n    \n  \n    \n    total = 0\n    #for i in name:\n     #   total += price \n    #return total\n    \n    return sum(total+price for _ in name)", "def billboard(name, price=30):\n    def s(a,b):\n        return a*b\n    return s(len(name),price)", "def billboard(name, price=30):\n  total = 0\n  for i in range(1, len(name)+1):\n      total += price\n  return total", "def billboard(name, price=30):\n    cost = 0\n    for letter in name:\n        cost = cost + price\n    return cost", "def billboard(name, price=30):\n    t=0\n    for l in name:\n        t+=price\n    return t", "from numpy import prod\n\ndef billboard(name, price=30):\n    return prod([len(name),price])", "def billboard(name, price=30):\n    p = 0\n    for i in range(len(name)):\n        p += price\n    return p", "def billboard(name, price=30):\n#     name = set(name)\n    return len(name) * price", "def billboard(name, price=30):\n    r = 0\n    for i in range(len(name)):\n        r += price\n    return r", "def billboard(name, price=30):\n    return sum([price for i in list(name)]) ", "def billboard(name, price=30):\n    q=0\n    i=1\n    while i<=len(name):\n        q+=price\n        i+=1\n    return q#your code here - note that in Python we cannot prevent the use of the\n    #multiplication, but try not to be lame and solve the kata in another way!\n", "def billboard(name, price=30):\n    return sum([price for c in range(len(name))])", "def billboard(name, price=30):\n    result = 0\n    for letter in name:\n      result+=price\n    return result", "def billboard(name, price=30):\n    return sum(len(name) for _ in range(0, price))", "from functools import reduce\n\nbillboard=lambda n, p=30: reduce(lambda a,b:a+p, n,0)", "def billboard(name, price=30):\n    # len(name) * price\n    total = 0\n    for x in name:\n        if x: total += price\n    return total", "def billboard(name, price=30):\n    name.replace(\" \",\"\")\n    return len(name) * price", "import operator\n\nres = 0\ndef billboard(name, price=30):\n#      return operator.mul(len(name), price)\n     \n     return sum([len(name) for i in range(price)])\n     \n#     res = len(name)\n#     c = foo(res,name)\n    \n#     [c for i in range(price)]\n#     return res\n    \n# def foo(res,name):\n#         res += len(name)\n", "def billboard(name, price=30):\n    num = len(name)\n    calc = 0\n    count = 0\n    while count < num:\n       calc = calc + price\n       count = count + 1\n    return calc", "def billboard(name, price = 30):\n    i = 0\n    x = 0\n    b = len(name)\n    while i < b:\n        x= x + price\n        i+=1\n    return x", "billboard = lambda name, price=30: sum(price for x in name)", "def billboard(name, price=30):\n    t = 0\n    for i in range(len(name)):\n        t += price\n    return t", "def billboard(name, price=30):\n    total_price = 0\n    for char in range(len(name)):\n        total_price += price\n    return total_price", "def billboard(name, price=30):\n    x = 0\n    for i in [i for i in name]:\n        x+=price\n    return x", "def billboard(name, price=30):\n    builder = 0\n    for x in name:\n        builder = builder + price\n    return builder", "def billboard(name, price=30):\n    amount=0\n    for  _ in name:\n        amount+=price\n    return amount", "def billboard(name, price=30):\n    sum = 0\n    for element in name:\n        sum += price \n    return sum", "billboard = lambda s, p = 30: sum(p for x in s)", "def billboard(name, price=30):\n    return len(name)/(1/float(price))\n", "def billboard(name, price=30):\n    a = len(name)\n    cost = 0\n    for i in range(1, a+1, 1):\n        cost += price\n    return cost"]