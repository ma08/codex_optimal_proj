["def xMasTree(n):\n   return [(\"#\"*(x*2+1)).center(n*2-1, \"_\") for x in list(range(n))+[0]*2]", "def xMasTree(n):\n    hashtags = '#' * (n - 1)\n    spaces = '_' * (n - 1)\n    tree = []\n    for i in range(n):\n        left = spaces[i:] + hashtags[:i]\n        tree.append(left + '#' + left[::-1])\n    for i in range(2):\n        tree.append(spaces + '#' + spaces)\n    return tree", "def xMasTree(n):\n    w = 2*n-1\n    return [ ('#'*(i<n and 2*i+1 or 1)).center(w,'_') for i in range(n+2)]", "def xMasTree(n):\n    w = list(range(1, n * 2, 2)) + [1, 1]\n    return [f\"{'#' * i}\".center(n * 2 - 1, \"_\") for i in w]\n", "def xMasTree(n):\n    r = ['_' * (n - x//2 - 1) + '#' * x + '_' * (n - x//2 - 1) for x in range(1, n * 2, 2)]\n    return r + r[:1] * 2", "def xMasTree(n):\n    n2 = n * 2 - 1\n    return [('#' * i).center(n2, '_') for i in range(1, n2 + 1, 2)] + ['#'.center(n2, '_')] * 2", "def xMasTree(n):\n    width = 2 * n - 1\n    return [\n        ('#' * (m if m <= width else 1)).center(width, '_')\n        for m in range(1, width + 5, 2)]", "def xMasTree(n):\n    width = 2*n - 1\n    row = 1\n    res = []\n    while row <= n:\n        line = ''\n        buff = '_'*(n-row)\n        line += buff\n        line += '#'*(2*row-1)\n        line += buff\n        res.append(line)\n        row += 1\n    for x in range(2):\n        line = ''\n        buff = '_'*(n-1)\n        line += buff\n        line += '#'\n        line += buff\n        res.append(line)\n    return res", "xMasTree=lambda n: (lambda part: part+[part[0],part[0]])([\"\".join([\"_\"*(n-i-1),\"#\"*(2*i+1),\"_\"*(n-i-1)]) for i in range(n)])"]