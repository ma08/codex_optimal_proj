["from math import ceil\n\nPI_DIGITS_SQUARED = [int(d)**2 for d in \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"]\n\ndef square_pi(n):\n    return ceil(sum(PI_DIGITS_SQUARED[:n])**0.5)", "square_pi = (0, 3, 4, 6, 6, 8, 12, 12, 14, 15, 15, 16, 18, 20, 21, 23, 23, 23, 23, 25, 25, 26, 26, 27, 27, 27, 27, 28, 29, 29, 30, 31, 31, 31, 31, 32, 33, 34, 34, 35, 36, 36, 36, 37, 37, 38, 39, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 50, 51, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 56).__getitem__\n", "from math import ceil\n\npi_digits = \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"\n\ndef square_pi(digits):\n  return ceil(sum(int(d)**2 for d in pi_digits[:digits])**0.5)", "import math\n\npi_digits = '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679'\n\ndef square_pi(digits):\n    s = sum(d*d for d in map(int, pi_digits[:digits]))\n    return math.ceil(s ** 0.5)", "from math import ceil\nfrom itertools import accumulate\n\ndigs = map(int,'031415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679')\nMEMO = tuple( ceil(s**.5) for s in accumulate(d*d for d in digs))\nsquare_pi = MEMO.__getitem__", "from math import ceil, sqrt\ndef square_pi(digits):\n    pi = '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679'\n    return ceil(sqrt(sum(int(i)**2 for i in pi[:digits])))\n    \n", "from math import ceil\n\ncache = [int(d)**2 for d in \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"]\n\ndef square_pi(n):\n    return ceil(sum(cache[:n])**0.5)", "def square_pi(digits):\n  return __import__('math').ceil(sum(int(i) ** 2 for i in '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679'[:digits]) ** 0.5)", "from math import ceil\n\npi = \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"\n\ndef square_pi(digits):  \n  return ceil(sum(int(d)**2 for d in pi[:digits])**0.5)", "PI = 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\ndef square_pi(digits):\n    n = 100 - digits + 1\n    num = PI // 10**n\n    sum = 0\n    while num:\n        num, m = divmod(num, 10)\n        sum += m**2\n    i = 0\n    while True:\n        if i**2 >= sum:\n            return i\n        i += 1\n"]