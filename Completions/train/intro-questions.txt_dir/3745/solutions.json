["#from string import ascii_lowercase as LOWER\nLOWER = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef encode(message, key, shift, encode=True):\n    key = sorted(LOWER, key=f\"{key}{LOWER}\".index)\n    result = []\n    for char in message:\n        if char in key:\n            i = key.index(char)\n            char = key[(i + shift) % 26]\n            shift = i + 1 if encode else -(key.index(char) + 1)\n        result.append(char)\n    return \"\".join(result)\n    \ndef decode(message, key, shift): \n    return encode(message, key, -shift, encode=False)", "from string import ascii_lowercase\n\ndef encode_decode(message, key, shift, func):\n    keys = ''.join(dict.fromkeys(key)) + ''.join(c for c in ascii_lowercase if c not in key)\n    for c in message:\n        if c.islower():\n            c, shift = func(keys, c, shift)\n        yield c\n\ndef encode(message, key, shift):\n    return ''.join(encode_decode(\n        message, key, shift,\n        lambda k, c, s: (k[(k.find(c) + s) % 26], k.find(c) + 1)),\n    )\n    \ndef decode(message, key, shift):\n    return ''.join(encode_decode(\n        message, key, shift,\n        lambda k, c, s: (k[(k.find(c) - s) % 26], k.find(k[(k.find(c) - s) % 26]) + 1)),\n    )", "from string import ascii_lowercase\n\n\ndef form_key(key):\n    working_key = \"\"\n    for letter in key + ascii_lowercase:\n        if letter not in working_key:\n            working_key += letter\n    return working_key\n\n\ndef encode(msg, key, init_shift):\n    encode_key = form_key(key)\n    shift = init_shift\n    encoded_msg = \"\"\n    for letter in msg:\n        if letter not in encode_key:\n            encoded_msg += letter\n        else:\n            encoded_msg += encode_key[(encode_key.index(letter) + shift) % 26]\n            shift = encode_key.index(letter) + 1\n    return encoded_msg\n\n\ndef decode(msg, key, init_shift):\n    decode_key = form_key(key)\n    shift = init_shift\n    decoded_msg = \"\"\n    for letter in msg:\n        if letter not in decode_key:\n            decoded_msg += letter\n        else:\n            decoded_msg += decode_key[(decode_key.index(letter) - shift) % 26]\n            shift = decode_key.index(decoded_msg[-1]) + 1\n    return decoded_msg", "def condi_helper(message, init_key, shift, mode):\n    key = sorted(set(init_key), key=init_key.index)\n    key += sorted(set('abcdefghijklmnopqrstuvwxyz') - set(init_key))\n    \n    result=[]\n    for char in message:\n        if char in key:\n            idx = key.index(char)\n            new = (idx + mode * shift) % 26\n            result.append(key[new])\n            if mode == 1:\n                shift = idx + 1\n            else:\n                shift = new + 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n\nencode = lambda msg, key, sh: condi_helper(msg, key, sh, 1)\ndecode = lambda msg, key, sh: condi_helper(msg, key, sh, -1)", "from string import ascii_lowercase as low\n\ndef encode(message, key, initShift): return shifter(message, key, initShift, 1)\ndef decode(message, key, initShift): return shifter(message, key, initShift, -1)\n\ndef shifter(msg, k, shift, dir):\n\n    def moveChar(c):\n        shifted  = alphaStr[(keyAlpha[c] + dir + shift[0]*dir) % 26 ]\n        shift[0] = keyAlpha[(c if dir == 1 else shifted)]\n        return shifted\n    \n    def cleanKey(k):\n        s, sk = \"\", set()\n        for c in k:\n            if c not in sk: s += c\n            sk.add(c)\n        return s,sk\n\n    shift = [shift-1]\n    k, sk = cleanKey(k)\n    alphaStr = k + ''.join(c for c in low if c not in sk)\n    keyAlpha = {l:i for i,l in enumerate(alphaStr)}\n    \n    return ''.join(c if c not in keyAlpha else moveChar(c) for c in msg)", "import string\n\ndef xcode(message, key, initShift, is_encode):\n    seen, ret, shift = set(), \"\", initShift\n    alphabet = [c for c in key.lower() + string.ascii_lowercase if c.isalpha() and not (c in seen or seen.add(c))]\n    for letter in list(message):\n        if letter.isalpha():\n            new_index = (alphabet.index(letter) + (shift if is_encode else -shift)) % 26\n            shift = (alphabet.index(letter) if is_encode else new_index) + 1\n            letter = alphabet[new_index]\n        ret += letter\n    return ret\n\ndef encode(message, key, initShift):\n    return xcode(message, key, initShift, True)\n\ndef decode(message, key, initShift):\n    return xcode(message, key, initShift, False)", "from string import ascii_lowercase as AL\n\ndef encode(s, key, n):\n    a = \"\".join(dict.fromkeys(key + AL))\n    d = {x: i for i, x in enumerate(a, 1)}\n    r = []\n    for x in s:\n        if x in d:\n            r.append(a[(d[x] + n - 1) % len(a)])\n            n = d[x]\n        else:\n            r.append(x)\n    return \"\".join(r)\n    \ndef decode(s, key, n): \n    a = \"\".join(dict.fromkeys(key + AL))\n    d = {x: i for i, x in enumerate(a, 1)}\n    r = []\n    for x in s:\n        if x in d:\n            r.append(a[(d[x] - n - 1) % len(a)])\n            n = d[r[-1]]\n        else:\n            r.append(x)\n    return \"\".join(r)", "def encode(message, key, shift): return cipher(message, key, shift, 1)\n\ndef decode(message, key, shift): return cipher(message, key, -shift, 0)\n\ndef cipher(message, key, shift, mode):\n    key = tuple(dict.fromkeys(key.lower() + 'abcdefghijklmnopqrstuvwxyz'))\n    res = ''\n    for char in message:\n        if char in key:\n            i = key.index(char)\n            char = key[(i + shift) % 26]\n            shift = i + 1 if mode else -key.index(char) - 1\n        res += char\n    return res", "def encode(string, key, initShift):\n    key = tuple(dict.fromkeys(key.lower() + 'abcdefghijklmnopqrstuvwxyz'))\n    shift = (initShift - 1) % 26\n    res = ''\n    for c in string:\n        if c in key:\n            i = key.index(c)\n            c = key[(i + shift + 1) % 26]\n            shift = i\n        res += c\n    return res\n\n\ndef decode(string, key, initShift):\n    key = tuple(dict.fromkeys(key.lower() + 'abcdefghijklmnopqrstuvwxyz'))\n    shift = (initShift - 1) % 26\n    res = ''\n    for i, c in enumerate(string):\n        if c in key:\n            res += key[(key.index(c) - shift - 1) % 26]\n            shift = key.index(res[i])\n        else:\n            res += c\n    return res", "def get_key(d, value):\n    for k, v in d.items():\n        if v == value:\n            return k\n\ndef encode(message, key, initShift):\n    new_key = ''\n    for i in key:\n        if i not in new_key:\n            new_key += i\n\n    alf = 'abcdefghijklmnopqrstuvwxyz'\n    for i in alf:\n        if not i in new_key:\n            new_key += i\n\n    alphabet = {x: y for x, y in zip(range(1, 27), new_key)}\n    result = ''\n    for i in message:\n        if i.isalpha() == False:\n            result += i\n            continue\n        i = get_key(alphabet, i)\n        if (i + initShift) <= 26:\n            result += alphabet.get(i + initShift)\n            initShift = i\n        else:\n            result += alphabet.get((i + initShift) - 26)\n            initShift = i\n    return result\n\n\ndef decode(message, key, initShift):\n    new_key = ''\n    for i in key:\n        if i not in new_key:\n            new_key += i\n\n    alf = 'abcdefghijklmnopqrstuvwxyz'\n    for i in alf:\n        if not i in new_key:\n            new_key += i\n\n    alphabet = {x: y for x, y in zip(range(1, 27), new_key)}\n    result = ''\n    for i in message:\n        if i.isalpha() == False:\n            result += i\n            continue\n        i = get_key(alphabet, i)\n        if (i - initShift) > 0:\n            result += alphabet.get(i - initShift)\n            initShift = i - initShift\n        elif (i - initShift + 26) == 0:\n            result += alphabet.get(26)\n            initShift = 26\n        else:\n            result += alphabet.get((i - initShift) + 26)\n            initShift = (i - initShift) + 26\n    return result"]