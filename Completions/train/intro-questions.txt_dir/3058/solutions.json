["def is_magical(sq):\n    return sum(sq[2:7:2])==sum(sq[::4])==sum(sq[::3])==sum(sq[1::3])==sum(sq[2::3])==sum(sq[:3])==sum(sq[3:6])==sum(sq[6:])", "def is_magical(sq):\n    return len(set( [sum(sq[i*3:(i+1)*3]) for i in range(3)]                # lines\n                  + [sum(sq[i::3])        for i in range(3)]                # rows\n                  + [sq[4-2*i] + sq[4] + sq[4+2*i] for i in range(1,3)]     # diagonals\n               )) == 1", "def is_magical(sq):\n    return all( sum(sq[i*3:(i+1)*3]) == sum(sq[i:9:3]) for i in range(0,3))", "def is_magical(s):\n    return sum(s[::3]) == sum(s[1::3]) == sum(s[2::3]) == 15", "# Will work for any size (as long as it's a square)\ndef is_magical(sq):\n    N = int(len(sq)**0.5)\n    res = sum(sq[::N+1])\n    return res == sum(sq[N-1:-1:N-1]) and all(sum(sq[i*N:(i+1)*N]) == sum(sq[i::N]) == res for i in range(N))", "def is_magical(sq):\n    return all(sum(sq[i*3:i*3+3]) == sum(sq[i::3]) == 15 for i in range(3)) and sum(sq[::4]) == 15", "is_magical = lambda l: len(l) == 9 and len(list(set(l))) == 9 and l[0] + l[1] + l[2] == 15 and l[3] + l[4] + l[5] == 15 and l[6] + l[7] + l[8] == 15 and l[0] + l[3] + l[6] == 15 and l[1] + l[4] + l[7] == 15 and l[2] + l[5] + l[8] == 15 and l[0] + l[4] + l[8] == 15 and l[2] + l[4] + l[6] == 15", "def is_magical(sq):\n    sums = '123 456 789 147 258 369 159 357'.split()\n    return all(check(sq,x) == 15 for x in sums)\ndef check(sq, entries):\n    return sum(sq[x-1] for x in map(int,entries))", "def is_magical(sq):\n    c = sum(sq[:3])\n    ls = [sq[i:i+3] for i in range(0,9,3)]\n    ls2 = list(zip(*ls))\n    if sum([ls[i][i] for i in range(3)])!=sum([ls[i][2-i] for i in range(3)]):\n        return False\n    return True if ([sum(i) for i in ls]+[sum(i) for i in ls2]).count(c)==6 else False\n", "def is_magical(sq):\n    a,b,c, j,k,l, x,y,z = sq\n    return a+b+c==j+k+l==x+y+z==a+j+x==b+k+y==c+l+z==a+k+z==c+k+x"]