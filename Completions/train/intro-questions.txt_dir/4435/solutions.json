["from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(string):\n    return reduce(gcd, Counter(string).values()) != 1", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(s):\n    return reduce(gcd, Counter(s).values()) > 1", "from collections import Counter\nfrom functools import reduce\nimport fractions\n\n\ndef gcd(*values):\n    return reduce(fractions.gcd, values)\n\n\ndef has_subpattern(s):\n    return gcd(*Counter(s).values()) != 1", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\n\ndef has_subpattern(string):\n    return reduce(gcd, Counter(string).values()) > 1", "from functools import reduce\nfrom math import gcd\n\ndef has_subpattern(stg):\n    return reduce(gcd, set(stg.count(c) for c in set(stg)), 0) > 1", "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(string):\n    prev, *counts = set(Counter(string).values())\n    if prev == 1 and not counts:\n        return False\n        \n    for c in counts:\n        prev = gcd(prev, c)\n        if prev == 1:\n            return False;\n    return True", "from re import findall;\nfrom functools import reduce\ngcd=lambda a,b: gcd(b,a%b) if b else a;\nhas_subpattern=lambda s: len(s)>1 and reduce(gcd, (len(e[0]+e[1]) for e in findall(r\"(.)(\\1*)\", \"\".join(sorted(s)))))>1", "from functools import  reduce as R\nfrom collections import Counter as C\nfrom math import gcd as G\ndef has_subpattern(s): \n    return R(G,set(C(s).values())) != 1", "from collections import Counter\nfrom math import gcd\nfrom functools import reduce\ndef has_subpattern(string):\n    cnt = list(Counter(string).values())\n    v = reduce(gcd, cnt, max(cnt))\n    return v != 1\n", "from collections import Counter\nfrom math import gcd\ndef has_subpattern(string):\n    temp=Counter(string)\n    if temp.most_common(1)[0][1]==1:\n        return False\n    res=sorted(temp.items(), key=lambda x:x[1])\n    if len(res)==1:\n        return True\n    check=res[-1][1]\n    for i in range(1, len(res)):\n        check=min(check, gcd(res[i][1], res[i-1][1]))\n    if check==1:\n        return False\n    for i in res:    \n        if i[1]%check!=0:\n            return False\n    return True"]