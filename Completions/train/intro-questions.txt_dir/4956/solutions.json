["import re\n\nTABLE = str.maketrans('ACGT','UGCA')\n\ndef protein_synthesis(dna):\n    rna = re.findall(r'.{1,3}', dna.translate(TABLE))\n    return ' '.join(rna), ' '.join(x for x in map(CODON_DICT.get, rna) if x)", "MRNA_TABLE = str.maketrans(\"ACGT\", \"UGCA\")\n\ndef protein_synthesis(dna):\n    rna = dna.translate(MRNA_TABLE)\n    codons = [rna[i:i+3] for i in range(0, len(rna), 3)]\n    return \" \".join(codons), \" \".join(CODON_DICT[codon] for codon in codons if codon in CODON_DICT)\n", "from itertools import zip_longest\n\ntbl = str.maketrans(\"TAGC\", \"AUCG\")\n\n\ndef protein_synthesis(dna: str):\n    codons = [\n        \"\".join(xs) for xs in zip_longest(*[iter(dna.translate(tbl))] * 3, fillvalue=\"\")\n    ]\n    rna = \" \".join(codons)\n    protein = \" \".join(CODON_DICT[codon] for codon in codons if codon in CODON_DICT)\n    return rna, protein", "def protein_synthesis(dna):\n  r = dna.translate(str.maketrans('TACG','AUGC'))\n  r = list(r[i:i+3] for i in range(0,len(r),3))\n  return (' '.join(r), ' '.join([CODON_DICT[i] if len(i)>2 else '' for i in r]).strip())", "def protein_synthesis(dna):\n    ### Transcribe\n    DNA2RNA = {'A' : 'U', 'C': 'G', 'G': 'C', 'T': 'A'}     # Dictionary for conversion to RNA\n    rnaList = [DNA2RNA[i] for i in dna] # Transcribe to RNA\n    \n    # Translate\n    # Note: A pre-loaded CODON_DICT exists that takes 3-letter RNA keys and outputs amino acid names.\n    aa = [] # list to hold aa names\n    for i in range(0, len(rnaList)-2, 3):\n        aa.append(CODON_DICT[''.join(rnaList[i:i+3])])\n    \n    # Convert RNA to output format\n    mRNA = [''.join(rnaList[i:i+3]) for i in range(0, len(rnaList), 3)]\n\n    return (\" \".join(mRNA), \" \".join(aa))", "def protein_synthesis(dna):\n    \n    # Transcribe\n    table = str.maketrans('GCAT', 'CGUA')\n    pressed_rna = dna.translate(table)\n\n    rna = []\n    for bit in range(0, len(pressed_rna)):\n        if bit % 3 == 0:\n            rna.append(' ')         \n        rna.append(pressed_rna[bit])\n         \n    rna = ''.join(rna).strip()\n    \n    # Translate\n    protein = []\n    for rna_bit in rna.split(' '):\n        protein_bit = CODON_DICT.get(rna_bit, None)\n        if protein_bit is not None:\n            protein.append(protein_bit)\n    \n    protein = ' '.join(protein)\n    \n    return rna, protein", "def protein_synthesis(dna):\n    \n    # Transcribe\n    dna_to_rna = {'G': 'C', \n                  'C': 'G',\n                  'A': 'U',\n                  'T': 'A'}\n    rna = ''\n    counter = 1\n    for acid in dna:\n        rna += dna_to_rna[acid]\n        if counter % 3 == 0:\n            rna += ' '\n        counter += 1\n    \n    # Translate\n    protein = ''\n    for codon in rna.split(' '):\n        amac = CODON_DICT.get(codon, None)\n        if amac is not None:\n            protein += (amac + ' ')\n    \n    return (rna.strip(), protein.strip())", "def protein_synthesis(dna:str):\n  # Transcribe\n    RNA_DICT={'A': 'U', 'G':'C', 'C':'G', 'T':'A'}\n    rna_strand = ''.join([RNA_DICT[base] for base in dna])\n    rna = ' '.join([rna_strand[base:base+3] for base in range(0, len(rna_strand), 3) ])\n    print(rna)\n\n  # Translate\n  # Note: A pre-loaded CODON_DICT exists that takes 3-letter RNA keys and outputs amino acid names.\n    length_rna = len(rna.split(\" \"))\n    protein = [CODON_DICT.get(rna.split(\" \")[codon_i],\"\") for codon_i in range(0,length_rna)]\n    print(protein)\n    protein =' '.join([_f for _f in protein if _f])\n    print(protein)\n\n    return (rna, protein)\n\n#protein_synthesis(\"TACAG\")\n", "def protein_synthesis(dna):\n    # Transcribe\n    s = dna.translate(str.maketrans('TAGC', 'AUCG'))\n    rna = [s[i:i+3] for i in range(0, len(s), 3)]\n    # Translate\n    # Note: A pre-loaded CODON_DICT exists that takes 3-letter RNA keys and outputs amino acid names.\n    protein = [CODON_DICT[r] for r in rna if r in CODON_DICT]\n    return (' '.join(rna), ' '.join(protein))", "def protein_synthesis(dna):\n    rna = \"\"\n    protein = \"\"\n    for i in range(len(dna)):\n        if i % 3 == 0 and i != 0:\n            rna += \" \"\n        if dna[i] == \"C\":\n            rna += \"G\"\n        elif dna[i] == \"G\":\n            rna += \"C\"\n        elif dna[i] == \"T\":\n            rna += \"A\"\n        elif dna[i] == \"A\":\n            rna += \"U\"\n    rna_list = rna.split(\" \")\n    for element in rna_list:\n        if len(element) == 3:\n            protein += CODON_DICT[element] + \" \"\n    return (rna, protein.strip())\n"]