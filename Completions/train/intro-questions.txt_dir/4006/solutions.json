["def basic_op(operator, value1, value2):\n    if operator=='+':\n        return value1+value2\n    if operator=='-':\n        return value1-value2\n    if operator=='/':\n        return value1/value2\n    if operator=='*':\n        return value1*value2", "def basic_op(operator, value1, value2):\n    return eval(\"{}{}{}\".format(value1, operator, value2))", "def basic_op(operator, value1, value2):\n    return eval(str(value1) + operator + str(value2))", "def basic_op(o, a, b):\n    return {'+':a+b,'-':a-b,'*':a*b,'/':a/b}.get(o)", "def basic_op(operator, value1, value2):\n    if operator == \"+\":\n        return value1 + value2\n    elif operator == \"-\":\n        return value1 - value2\n    elif operator == \"*\":\n        return value1 * value2\n    elif operator == \"/\":\n        return value1 / value2\n    else:\n        print (\"Unrecognized Operator. Abort.\")", "def basic_op(operator, value1, value2):\n    return eval(f'{value1}{operator}{value2}')", "def basic_op(operator, value1, value2):\n    ops = {'+': lambda a, b: a + b, \n           '-': lambda a, b: a - b,\n           '*': lambda a, b: a * b,\n           '/': lambda a, b: a / b}\n    return ops[operator](value1, value2)", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2\n    if operator == '-':\n        return value1 - value2\n    if operator == '*':\n        return value1 * value2\n    if operator == '/':\n        return value1 / value2", "def basic_op(op, v1, v2):\n    return v1+v2 if op == \"+\" else v1-v2 if op == \"-\" else  v1*v2 if op == \"*\" else  v1/v2", "def basic_op(operator, value1, value2):\n    if operator == '+':\n      result = value1 + value2\n    if operator == '-':\n      result = value1 - value2\n    if operator == '*':\n      result = value1 * value2\n    elif operator == '/':\n      result = value1 / value2\n    return(result)\n    \n", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    else:\n        return value1 / value2", "def basic_op(operator, value1, value2):\n    return {\"+\": value1 + value2,\n    \"-\": value1 - value2,\n    \"*\": value1 * value2,\n    \"/\": value1 / value2,\n    }[operator]", "def basic_op(operator, value1, value2):\n    op = {\n        '+' : (value1 + value2),\n        '-' : (value1 - value2),\n        '*' : (value1 * value2),\n        '/' : (value1 / value2),\n    }\n    \n    return op[operator]\n    #your code here\n", "def basic_op(operator, x, y):\n    if operator == \"+\":\n        return x + y\n    if operator == \"-\":\n        return x - y\n    if operator == \"*\":\n        return x * y\n    if operator == \"/\":\n        return x / y", "import operator\ndef basic_op(operator, value1, value2):\n    #your code here \n    if operator == '+':\n        return value1+value2\n    elif operator == '-':\n        return value1-value2\n    elif operator == '/':\n        return value1/value2\n    elif operator == '*':\n        return value1*value2\n    else: return", "basic_op = lambda o, v1, v2: __import__(\"operator\").__dict__[{\"+\":\"add\",\"-\":\"sub\", \"*\":\"mul\", \"/\":\"truediv\"}[o]](v1,v2)", "def basic_op(operator, value1, value2):\n    dict = {'+': lambda x,y: x+y, '-': lambda x,y: x-y, '*': lambda x,y: x*y, '/': lambda x,y: x/y}\n    return dict[operator](value1,value2)", "def basic_op(operator, value1, value2):\n    return eval(str(value1)+str(operator)+str(value2))", "import operator\ndef basic_op(op, value1, value2):\n    oper={'+':operator.add,'-':operator.sub,'*':operator.mul,'/':operator.truediv}\n    return oper[op](value1,value2)", "\ndef basic_op(*sheeps):\n    hungry_wolf_eats = eval\n    sheeps_in_order = '{1}{0}{2}'.format(*sheeps)\n    return hungry_wolf_eats(sheeps_in_order)", "def basic_op(o, v1, v2):\n    if o == \"+\":\n        return v1+v2\n    elif o == \"-\":\n        return v1-v2\n    elif o == \"*\":\n        return v1*v2\n    elif o == \"/\":\n        return v1/v2\n    else:\n        return \"not recognized\"", "import operator\n\ndef basic_op(operatorchar, value1, value2):\n    return {'+':operator.add,\n        '-' : operator.sub,\n        '*' : operator.mul,\n        '/' : operator.truediv,\n        '%' : operator.mod,\n        '^' : operator.xor\n        }[operatorchar](value1,value2)\n    \n", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2;\n    elif operator == '/':\n        return value1/value2 if value2 != 0 else value1\n    return None", "def basic_op(operator, value1, value2):\n    #your code her\n    \n    return eval(str(value1) + operator + str(value2))", "def basic_op(operator, value1, value2):\n    e = '%s %s %s' % (value1, operator, value2)\n    return eval(e)", "def basic_op(op, x, y):\n    if op == '+':\n        return (x+y)\n    elif op == '-':\n        return (x-y)\n    elif op == '*':\n        return (x*y)\n    else:\n        return (x/y)", "basic_op = lambda o, v1, v2: eval(\"{}{}{}\".format(v1,o,v2))", "import operator as op\ndef basic_op(operator, value1, value2):\n    #your code here\n    return {'+': op.add,'-': op.sub,'*': op.mul,'/':op.truediv}[operator](value1,value2)", "def basic_op(operator, value1, value2):\n    a = int(value1)\n    b = int(value2)\n    if operator == \"+\":\n        output = a + b\n    elif operator == \"-\":\n        output = a - b\n    elif operator == \"*\":\n        output = a*b\n    else:\n        output = a/b\n    return output", "def basic_op(operator, value1, value2):\n    return value1+value2 if operator=='+' else value1-value2 if operator=='-' else value1*value2 if operator=='*' else value1/value2", "basic_op = lambda o,a,b: eval(str(a)+o+str(b))", "def basic_op(operator, value1, value2):\n    return {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: a / b,\n    }[operator](value1, value2)", "def basic_op(o, v1, v2):\n    return eval(str(v1) + o + str(v2))", "def basic_op(operator, value1, value2):\n    op = {\n            '+':int.__add__,\n            '-':int.__sub__,\n            '*':int.__mul__,\n            '/':int.__truediv__\n         }\n    return op[operator](value1, value2)", "basic_op = lambda o, v1, v2: eval(f'{v1}{o}{v2}')", "def basic_op(operator, value1, value2):\n    if operator == '+' and type(value1) == int and type(value2) == int:\n        return value1 + value2\n    if operator == '-':\n        return value1 - value2\n    if operator == '*':\n        return value1 * value2\n    else: \n        return value1 / value2\n", "\noperations = {\n    '*': lambda  value1, value2: value1 * value2,\n    '-': lambda  value1, value2: value1 - value2,\n    '/': lambda  value1, value2: value1 / value2,\n    '+': lambda  value1, value2: value1 + value2,\n}\n\ndef basic_op(operator, value1, value2):\n    return operations[operator](value1,value2)", "basic_op = lambda o,v1,v2: int.__dict__[{\"+\":\"__add__\",\"-\":\"__sub__\",\"*\":\"__mul__\",\"/\":\"__truediv__\"}[o]](v1,v2)", "basic_op=lambda o,a,b:eval(f\"{a}{o}{b}\")#can you beat 40 characters?", "import operator\n\ndef basic_op(oper, value1, value2):\n    d = {'-': operator.sub, '+': operator.add, '*': operator.mul, '/': operator.truediv }\n    return d[oper](value1, value2)", "from operator import add, sub, truediv, mul\n\ndef basic_op(operator, v1, v2):\n    op = {\"+\": add, \"-\": sub, \"*\": mul, \"/\": truediv}\n    return op[operator](v1, v2)", "from operator import add, sub, mul, truediv\nOPS = {'+': add, '-': sub, '*': mul, '/': truediv}\n\ndef basic_op(op, a, b):\n    return OPS[op](a, b)", "import operator\nfrom functools import reduce\n\n\ndef basic_op(operator_mark, value1, value2):\n    d = {'+': operator.add,\n         '-': operator.sub,\n         '*': operator.mul,\n         '/': operator.truediv}\n    return d[operator_mark](value1, value2)\n", "def basic_op(operator, value1, value2):\n    return {\"+\" : value1 + value2, \"-\" : value1 - value2, \"*\" : value1 * value2, \"/\" : value1 / value2}.get(operator)", "def basic_op(o, v1, v2):\n    return eval('{}{}{}'.format(v1, o, v2))", "def basic_op(operator, value1, value2):\n    if operator=='+': return value1+value2\n    elif operator=='-': return value1-value2\n    elif operator=='*': return value1*value2\n    elif operator=='/': return value1/value2\n    else: return None", "def basic_op(operator, value1, value2):\n    return eval('{0} {1} {2}'.format(value1, operator, value2))", "def basic_op(operator, value1, value2):\n    return eval(\"\".join([str(value1), operator, str(value2)]))", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    elif operator == '/':\n        return value1 / value2\n    else:\n        print('I don\\'t recognize '+str(operator)+' as an operator.')", "def basic_op(operator, value1, value2):\n    ans = str(value1) +operator + str(value2)\n    return eval(ans)", "def basic_op(operator, value1, value2):\n    return eval(\"{val1}{operator}{val2}\".format(val1=value1,operator=operator,val2=value2))", "def basic_op(operator, v1, v2):\n    \n    if operator == '+':\n        a1 = v1 + v2\n    elif operator == '-':\n        a1 = v1 - v2\n    elif operator == '*':\n        a1 = v1 * v2\n    elif operator == '/':\n        a1 = v1 / v2\n    else:\n       print('You have not typed a valid operator, please run the program again.')\n    return a1", "def basic_op(operator, value1, value2):\n    #return eval(str(value1)+operator+str(value2)) or\n    return eval(\"{}{}{}\".format(value1, operator, value2))", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        result = value1 + value2\n    elif operator == '-':\n        result = value1 - value2\n    elif operator == '*':\n        result = value1 * value2\n    elif operator == '/':\n        result = value1 / value2\n    else:\n        result = None\n    return result\n    \n", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        res = value1 + value2\n        return res\n    elif operator == '-':\n        res = value1 - value2\n        return res\n    elif operator == '*':\n        res = value1 * value2\n        return res\n    elif operator == '/':\n        res = value1 / value2\n        return res\n    else:\n        print(\"Use only (+ - * /) functions\")\n", "# function takes two numbers and basic math operator character to perform on the numbers\ndef basic_op(operator, value1, value2):\n    # series of if statements to determine basic operator and return result\n    if operator == '+': return value1 + value2\n    elif operator == '-': return value1 - value2\n    elif operator == '*': return value1 * value2\n    elif operator == '/': return value1 / value2", "def basic_op(oper, a, b):\n    return [a + b, a - b, a * b, a / b][(oper == '-') + 2 * (oper == '*') + 3 * (oper == '/')]", "def basic_op(operator, value1, value2):\n    calc = {\n        '+': lambda x,y: x+y,\n        '-': lambda x,y: x-y,\n        '*': lambda x,y: x*y,\n        '/': lambda x,y: x/y\n    }\n    return calc[operator](value1,value2)", "from operator import add, sub, mul, truediv\n\ndef basic_op(operator, value1, value2):\n    ops = {\"+\": add, \"-\": sub, \"*\": mul, \"/\": truediv}\n    return ops.get(operator)(value1, value2)", "import operator as op\ndef basic_op(operator, value1, value2):\n    op_dict = {'+':op.add, '-':op.sub, '*':op.mul, '/':op.truediv}\n    return op_dict[operator](value1, value2)", "def basic_op(operation, value1, value2):\n    # if operator is +, add\n    if operation == \"+\": return value1 + value2\n    # if operator is -, subtract\n    elif operation == \"-\": return value1 - value2\n    # if operator is *, multiply\n    elif operation == \"*\": return value1 * value2\n    # if none of the operators match, simply divide\n    else: return value1 / value2\n\nprint(basic_op('+', 4, 7))  # Output: 11\nprint(basic_op('-', 15, 18)) # Output: -3\nprint(basic_op('*', 5, 5))  # Output: 25\nprint(basic_op('/', 49, 7)) # Output: 7", "def basic_op(operator, value1, value2):\n    if operator[0] == \"+\":\n        return value1 + value2 \n    elif operator[0] == \"-\":\n        return value1 - value2\n    elif operator[0] == \"*\":\n        return value1 * value2\n    elif operator[0] == \"/\":\n        return value1 / value2    \n", "def basic_op(operator, value1, value2):\n    if (operator == '+'):\n        return(value1+value2)\n    elif (operator == '-'):\n        return(value1-value2)\n    elif (operator == '*'):\n        return(value1*value2)\n    elif (operator == '/'):\n        return(value1/value2)\n    else:\n        print(\"invalid operation\")", "def basic_op(operator, value1, value2):\n    if operator in \"+\":\n        return value1 + value2\n    elif operator in \"-\":\n        return value1 - value2\n    elif operator in \"*\":\n        return value1 * value2\n    elif operator in \"/\":\n        return value1 / value2\n    else:\n        pass", "def basic_op(operator, value1, value2):\n    arr = [str(value1), operator, str(value2)]\n    return eval(''.join(arr))", "def basic_op(operator, value1, value2):\n    ops = {\"+\": (lambda x,y: x+y), \"-\": (lambda x,y: x-y), \"-\": (lambda x,y: x-y), \"*\": (lambda x,y: x * y), \"/\": (lambda x,y: x/y)}\n    return ops[operator] (value1, value2)", "from operator import add, sub, mul, truediv\ndef basic_op(op, v, v2):\n    return {'+':add,'-':sub,'*':mul,'/':truediv}[op](v,v2)", "def basic_op(operator, value1, value2):\n    #your code here\n    if operator == '+':\n        x = lambda a, b: a+b\n        return (x(value1, value2))\n    if operator == '-':\n        x = lambda a, b: a-b\n        return (x(value1, value2))\n    if operator == '*':\n        x = lambda a, b: a*b\n        return (x(value1, value2))\n    if operator == '/':\n        x = lambda a, b: a/b\n        return (x(value1, value2))", "def basic_op(operator, value1, value2):\n    switch = {\n        '+': value1 + value2,\n        '-': value1 - value2,\n        '*': value1 * value2,\n        '/': value1 / value2,\n    }\n    return switch.get(operator, \"Invalid Operator\")\n", "def basic_op(operator, value1, value2):\n    p = '-'\n    s = '+'\n    r = '*'\n    e = '/'\n    if p in operator:\n        return value1 - value2\n    elif s in operator:\n        return value1 + value2\n    elif r in operator:\n        return value1 * value2\n    elif e in operator:\n        return value1 / value2\n", "basic_op=lambda o,v,w:{'+':lambda a,b:a+b,'-':lambda a,b:a-b,'*':lambda a,b:a*b,'/':lambda a,b:a/b}[o](v,w)", "def basic_op(operator, value1, value2):\n    if operator == '+': return value1 + value2\n    elif operator == '*': return value1 * value2\n    elif operator == '/': return value1 / value2\n    elif operator == '-': return value1 - value2\n    \nprint(basic_op('*',7,6))", "def basic_op(operator, value1, value2):\n    multiplication = value1*value2\n    division = value1/value2\n    addition = value1+value2\n    subtraction = value1-value2\n    result = 0\n    \n    if operator == \"*\":\n        result = multiplication\n    if operator == \"/\":\n        result = division\n    if operator == \"+\":\n        result = addition\n    if operator == \"-\":\n        result = subtraction\n    return result", "def basic_op(operator, value1, value2):\n    b=str(value1)+operator+str(value2)\n    return eval(b)", "def basic_op(op, v1, v2):\n    if op=='+':\n        return v1+v2\n    elif op=='-':\n        return v1-v2\n    elif op=='*':\n        return v1*v2\n    elif op=='/':\n        return float(v1/v2)", "def basic_op(operator, value1, value2):\n    if operator == '+': #addition\n        return value1 + value2\n    elif operator == '-': #subtraction\n        return value1 - value2\n    elif operator == '*': #multiplication\n        return value1 * value2\n    elif operator == '/': #division\n        return value1 / value2", "import operator\n\n\nops = {\n    \"+\": operator.add,\n    \"-\": operator.sub,\n    \"*\": operator.mul,\n    \"/\": operator.truediv\n}\n\n\ndef basic_op(oper, value1, value2):\n    return ops[oper](value1, value2)", "def basic_op(operator, value1, value2):\n    operation = str(value1) + str(operator) + str(value2)\n    return eval(operation)\n", "def basic_op(operator, v1, v2):\n    if operator == \"+\":\n        return v1+v2\n    elif operator == \"-\":\n        return v1-v2\n    elif operator == \"*\":\n        return v1*v2\n    elif operator == \"/\":\n        return v1/v2\n    else:\n        return -1", "def basic_op(operator, value1, value2):\n    #your code here\n    if operator == \"+\":\n        answer = int(value1) + int(value2)\n    elif operator == \"-\":\n        answer = int(value1) - int(value2)\n    elif operator == \"*\":\n        answer = int(value1) * int(value2)\n    else:\n        answer = int(value1) / int(value2)\n    return answer", "def basic_op(op, num1, num2):\n  if(op) == \"*\":\n    return num1*num2\n  elif(op) == \"+\":\n    return num1+num2\n  elif(op) == \"/\":\n    return num1/num2\n  elif(op) ==  \"-\":\n    return num1 - num2", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    elif operator == '/':\n        return value1 / value2\n    else:\n        return 'invalid operator'\n\nprint(basic_op('+', 1, 2))", "def basic_op(operator, value1, value2):\n    x = str(value1),operator,str(value2)\n    x = eval(''.join(x))\n    return x", "def basic_op(*a):\n    return eval('{1}{0}{2}'.format(*a))", "def basic_op(operator, value1, value2):\n    k = {'+': value1+value2, '-': value1-value2, '*': value1*value2, '/':value1/value2}\n    return k[operator]", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        return value1 + value2 \n    if operator == '-':\n        return value1 - value2 \n    if operator == '*':\n        return value1 * value2\n    else:\n        return value1 / value2\n    return basic_op\n", "def basic_op(op, x, y):\n    if op == '+':\n        a = x + y\n    elif op == '-':\n        a = x - y\n    elif op == '*':\n        a = x * y\n    elif op == '/':\n        a = x / y\n    return a", "def basic_op(operator, value1, value2):\n    def div(a, b):\n        return a/b\n    operations_mapping = {\"+\": int.__add__,\n                          \"-\": int.__sub__,\n                          \"*\": int.__mul__,\n                          \"/\": div}\n    return operations_mapping[operator](value1, value2)", "def basic_op(operator,v1,v2):\n    if operator =='-':\n        new=v1-v2\n\n    elif operator=='+':\n        new=v1+v2\n\n    elif operator=='*':\n        new = v1*v2\n\n    else:\n        new = v1/v2\n\n    return new", "def basic_op(operator, value1, value2):\n    # operator = string\n    # value1 = num\n    # value2 = num\n    \n    if (operator == '*'):\n        return value1 * value2\n    elif (operator == '+'):\n        return value1 + value2\n    elif (operator == '-'):\n        return value1 - value2\n    elif (operator == '/'):\n        return value1 / value2\n", "def basic_op(operator, value1, value2):\n    if operator == '+':\n        summary = value1 + value2\n        return summary\n    if operator == '-':\n        summary = value1 - value2\n        return summary\n    if operator == '*':\n        summary = value1 * value2\n        return summary\n    if operator == '/':\n        summary = value1 / value2\n        return summary\n    return None", "def basic_op(operator, value1, value2):\n    #your code here\n    if operator == '*':\n        result = value1 * value2\n    elif operator == '+':\n        result = value1 + value2\n    elif operator == '/':\n        result = value1 / value2\n    elif operator == '-':\n        result = value1 - value2\n    return result", "def basic_op(operator, value1, value2):\n    anwser=0\n    if operator == \"+\":\n        anwser = value1+value2\n    elif operator == \"-\":\n        anwser = value1-value2\n    elif operator == \"*\":\n        anwser = value1*value2\n    elif operator == \"/\":\n        anwser = value1/value2\n    return anwser", "def _sum(value1, value2):\n    return value1 + value2\n\ndef _substract(value1, value2):\n    return value1 - value2\n\ndef _multiply(value1, value2):\n    return value1 * value2\n\ndef _divide(value1, value2):\n    return value1 / value2\n\n\nOPERATORS_MAP = {\n    \"+\": _sum,\n    \"-\": _substract,\n    \"*\": _multiply,\n    \"/\": _divide,\n}\n\ndef basic_op(operator, value1, value2):\n    \n    result = OPERATORS_MAP[operator](value1, value2)\n\n    return result", "def basic_op(operator, value1, value2):\n    #your code here\n    operator == str(operator)\n    value1 == float(value1)\n    value2 == float(value2)\n    if operator == '+':\n        addition = float(value1 + value2)\n        return addition\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    else:\n        division = value1/value2\n        return division", "def basic_op(operator, a, b):\n    return a+b if operator=='+' else a-b if operator=='-' else a*b if operator=='*' else a/b", "def basic_op(op, v1, v2):\n    if op == '/' and v2 == 0:\n        return 'Error! Division by zero!'\n    if op not in '+-*/':\n        return 'Error! Wrong operator!'\n    if op == '+':\n        return v1 + v2\n    if op == '-':\n        return v1 - v2\n    if op == '*':\n        return v1 * v2\n    return v1 / v2", "import operator\ndef basic_op(operator, value1, value2):\n    s= str(value1)+operator+str(value2)\n    return eval(s)"]