["def get_honor_path(honor, target):\n    return dict(list(zip([\"1kyus\", \"2kyus\"], divmod(target - honor, 2)))) if target > honor else {}\n", "def get_honor_path(score, target):\n    return {'1kyus':(target-score)//2, '2kyus':(target-score)%2} if target > score else {}", "def get_honor_path(honor_score, target_honor_score):\n    k1, k2 = divmod(target_honor_score-honor_score, 2)\n    return {\"2kyus\": k2, \"1kyus\": k1} if honor_score < target_honor_score else {}", "def get_honor_path(honor_score, target_honor_score):\n     return {} if honor_score>=target_honor_score else {\"2kyus\":(target_honor_score-honor_score)%2,\"1kyus\":(target_honor_score-honor_score)//2}\n    \n", "def get_honor_path(hs, ths):\n    return {'2kyus': (ths-hs)%2, '1kyus': int((ths-hs)/2)} if ths > hs else {}", "def get_honor_path(honorScore, targetHonorScore):\n    return {'1kyus': (targetHonorScore - honorScore) // 2, '2kyus': (targetHonorScore - honorScore) % 2} if targetHonorScore > honorScore else {}", "def get_honor_path(honor_score, target_honor_score):\n    return {} if honor_score>=target_honor_score else {\"2kyus\" : divmod((target_honor_score-honor_score),2)[1],\"1kyus\" : divmod((target_honor_score-honor_score),2)[0] }", "def get_honor_path(honor_score, target_honor_score):\n\n    honor_needed = target_honor_score - honor_score\n    kyus = {}\n    \n    if honor_score < target_honor_score and honor_needed != 0:\n        \n        kyus[\"1kyus\"] = honor_needed // 2\n        kyus[\"2kyus\"] = honor_needed % 2\n    \n    return kyus", "get_honor_path=lambda s,o:o>s and{'%skyus'%k:n for k,n in enumerate(divmod(o-s,2),1)}or{}", "def get_honor_path(h,t):\n    return {k+'kyus':v for k,v in zip(\"12\", divmod(t-h, 2))} if t > h else {}"]