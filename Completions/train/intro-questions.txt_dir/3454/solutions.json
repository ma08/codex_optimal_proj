["from fractions import gcd\nfrom functools import reduce\n\ndef candies_to_buy(n):\n    return reduce(lambda a,b:a*b//gcd(a,b), range(1,n+1))", "def candies_to_buy(n):\n    xx = 1\n    for i in range(n):\n        x = xx\n        while xx % (i+1):\n            xx += x\n    return xx", "from functools import reduce\nfrom math import gcd\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a * b // g\n\ndef candies_to_buy(kids):\n    return reduce(lcm, range(1, kids+1))", "from itertools import accumulate\nfrom math import gcd\n\nlcm = lambda x,y: x * y // gcd(x, y) if x else y\n\ncandies_to_buy = list(accumulate(range(2000), lcm)).__getitem__", "from functools import reduce\nfrom math import gcd\n\ndef candies_to_buy(kids):\n    return reduce(lambda a, b: a * b // gcd(a, b), range(1, kids+1))", "from fractions import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef candies_to_buy(amount_of_kids_invited):\n    return reduce(lcm, range(1, amount_of_kids_invited + 1))", "from math import gcd\nfrom functools import reduce\n\nlcm = lambda x,y: x*y//gcd(x,y)\n\ndef candies_to_buy(n):\n    return reduce(lcm, (i for i in range(1,(n+1 if n%2 else n)))) if n!=2 else 2", "import math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef candies_to_buy(amount_of_kids_invited):\n    f = 1\n    for i in range(2, amount_of_kids_invited+1):\n        f = lcm(f, i)\n    return f", "from operator import mul\nfrom functools import reduce\ndef candies_to_buy(n):\n    ret = []\n    for i in range(1, n + 1):\n        s = i\n        for j in ret:\n            if s % j == 0:\n                s //= j\n            if s == 1:\n                break\n        ret.append(s)\n    return  reduce(mul, ret)"]