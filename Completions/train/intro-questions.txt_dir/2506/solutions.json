["class Solution:\n     def isIsomorphic(self, s1, s2):\n         return len(set(zip(s1, s2))) == len(set(s1)) == len(set(s2))\n", "class Solution:\n     def isIsomorphic(self, s1, s2):\n         \"\"\" Optimized version.\n         Time complexity: O(n). Space complexity: O(1), n is len(s1) == len(s2).\n         \"\"\"\n         # encode strings\n         count1, count2 = 0, 0\n         dict1, dict2 = dict(), dict()\n         for i in range(len(s1)):\n             char1, char2 = s1[i], s2[i]  # current characters\n             if char1 in dict1 and char2 in dict2:\n                 pass\n             elif char1 not in dict1 and char2 not in dict2:\n                 count1 += 1\n                 count2 += 1\n                 dict1[char1], dict2[char2] = count1, count2\n             else:\n                 return False\n             curr1 = dict1[char1]  # current index of character in s1\n             curr2 = dict2[char2]  # current index of character in s2\n             if curr1 != curr2:\n                 return False\n         return True\n", "class Solution:\n     def isIsomorphic(self, s1, s2):\n         \"\"\" Optimized version.\n         Time complexity: O(n). Space complexity: O(1), n is len(s1) == len(s2).\n         \"\"\"\n         # encode strings\n         count1, count2 = 0, 0\n         dict1, dict2 = dict(), dict()\n         for i in range(len(s1)):\n             if s1[i] in dict1:\n                 curr1 = dict1[s1[i]]  # current index of character in s1\n             else:\n                 count1 += 1\n                 dict1[s1[i]] = count1\n                 curr1 = dict1[s1[i]]  # current index of character in s2\n             if s2[i] in dict2:\n                 curr2 = dict2[s2[i]]\n             else:\n                 count2 += 1\n                 dict2[s2[i]] = count2\n                 curr2 = dict2[s2[i]]\n             if curr1 != curr2:\n                 return False\n         return True\n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         from collections import defaultdict as dict\n         if len(s) != len(t):\n             return False\n         if not s and not t:\n             return True\n         ssd = dict(lambda: 100)\n         sst = dict(lambda: 100)\n         for ss, tt in zip(s, t):\n             if ssd[ss] == 100:\n                 ssd[ss] = ord(ss) - ord(tt)\n             if sst[tt] == 100:\n                 sst[tt] = ord(tt) - ord(ss)\n             if ssd[ss] == ord(ss) - ord(tt) and sst[tt] == ord(tt) - ord(ss):\n                 continue\n             else:\n                 return False\n         return True\n", "class Solution:\n     def isIsomorphic(self, s1, s2):\n         # encode strings\n         enc1, enc2 = [], []\n         count1, count2 = 0, 0\n         dict1, dict2 = dict(), dict()\n         for i in range(len(s1)):\n             char1, char2 = s1[i], s2[i]\n             if char1 in dict1:\n                 enc1.append(dict1[char1])\n             else:\n                 count1 += 1\n                 dict1[char1] = count1\n                 enc1.append(dict1[char1])\n             if char2 in dict2:\n                 enc2.append(dict2[char2])\n             else:\n                 count2 += 1\n                 dict2[char2] = count2\n                 enc2.append(dict2[char2])\n         return enc1 == enc2  # compare encodings\n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         map1 = {}\n         map2 = {}\n         for i in range(len(s)):\n             if (s[i] in map1 and map1[s[i]] != t[i]) or (t[i] in map2 and map2[t[i]] != s[i]):\n                 return False\n             else:\n                 map1[s[i]] = t[i]\n                 map2[t[i]] = s[i]\n         return True", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return True\n         current_s = s[0]\n         current_t = t[0]\n         switch_s = 0\n         switch_t = 0\n         s_dict = dict()\n         t_dict = dict()\n         for i in range(1, len(s)):\n             if s[i] != current_s:\n                 current_s = s[i]\n                 switch_s += 1\n             if t[i] != current_t:\n                 current_t = t[i]\n                 switch_t += 1\n             if s[i] in s_dict:\n                 if s_dict.get(s[i]) != t[i]:\n                     return False\n             if t[i] in t_dict:\n                 if t_dict.get(t[i]) != s[i]:\n                     return False\n             s_dict.update({current_s: current_t})\n             t_dict.update({current_t: current_s})\n             if switch_s != switch_t:\n                 return False\n         return True", "class Solution:\n     def isIsomorphic(self, s1, s2):\n         \"\"\" Optimized version.\n         Time complexity: O(n). Space complexity: O(1), n is len(s1) == len(s2).\n         \"\"\"\n         # encode strings\n         count1, count2 = 0, 0\n         dict1, dict2 = dict(), dict()\n         for i in range(len(s1)):\n             char1, char2 = s1[i], s2[i]  # current characters\n             if char1 in dict1:\n                 curr1 = dict1[char1]  # current index of character in s1\n             else:\n                 count1 += 1\n                 dict1[char1] = count1\n                 curr1 = dict1[char1]\n             if char2 in dict2:\n                 curr2 = dict2[char2]  # current index of character in s2\n             else:\n                 count2 += 1\n                 dict2[char2] = count2\n                 curr2 = dict2[char2]\n             if curr1 != curr2:\n                 return False\n         return True\n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         l = len(s)\n         if l != len(t):\n             return False\n         d = {}  #mapping\n         for i, letter in enumerate(s):\n             if letter not in d.keys():\n                 d[letter] = t[i]\n             else:\n                 if d[letter] != t[i]:\n                     return False\n         \n         d2 = {}  #mapping\n         for i, letter in enumerate(t):\n             if letter not in d2.keys():\n                 d2[letter] = s[i]\n             else:\n                 if d2[letter] != s[i]:\n                     return False\n         return True", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         mapping1 = dict()\n     \n         if len(s) != len(t):\n             return False\n         for i in range(len(s)):\n             mapping1.setdefault(s[i],None)\n             \n             if mapping1[s[i]] == None:\n                 mapping1[s[i]] = t[i]\n             elif mapping1[s[i]] != t[i]:\n                 return False\n         if len(set(mapping1.values())) == len(list(mapping1.values())):\n             return True\n         return False\n             \n \n             \n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         from collections import defaultdict as dict\n         if len(s) != len(t):\n             return False\n         if not s and not t:\n             return True\n         ssd = dict(lambda: 100)\n         sst = dict(lambda: 100)\n         for ss, tt in zip(s, t):\n             if ssd[ss] == 100:\n                 ssd[ss] = ord(ss) - ord(tt)\n             if sst[tt] == 100:\n                 sst[tt] = ord(tt) - ord(ss)\n         for ss, tt in zip(s, t):\n             if ssd[ss] == ord(ss) - ord(tt) and sst[tt] == ord(tt) - ord(ss):\n                 continue\n             else:\n                 return False\n         return True\n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) != len(t): return False\n         dic1, dic2 = {}, {}\n         for i in range(len(s)):\n             if s[i] in dic1 and dic1[s[i]] != t[i]:\n                 return False\n             if t[i] in dic2 and dic2[t[i]] != s[i]:\n                 return False\n             dic1[s[i]] = t[i]\n             dic2[t[i]] = s[i]\n         return True", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         d1, d2 = [0 for _ in range(256)], [0 for _ in range(256)]\n         for i in range(len(s)):\n             if d1[ord(s[i])] != d2[ord(t[i])]:\n                 return False\n             d1[ord(s[i])] = i+1\n             d2[ord(t[i])] = i+1\n         return True", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         \"\"\"\n    #    my second solution...modified based on first solution...\n         l = len(s)\n         \n         sdic = {}\n         snum = []\n         i = 0\n         j = 1\n         while i < l:\n             if s[i] not in sdic:\n                 sdic[s[i]] = j\n                 snum.append(j)\n                 j += 1\n             else:\n                 snum.append(sdic[s[i]])\n             i += 1\n             \n         tdic = {}\n         tnum = []\n         i = 0\n         j = 1\n         while i < l:\n             if t[i] not in tdic:\n                 if j != snum[i]:\n                     return False\n                 tdic[t[i]] = j\n                 tnum.append(j)\n                 j += 1\n             else:\n                 if tdic[t[i]] != snum[i]:\n                     return False\n                 tnum.append(tdic[t[i]])\n             i += 1\n         \n         return True\n         \n         \n         \"\"\"\n    #    my first solution...\n         sdic = {}\n         snum = []\n         i = 0\n         j = 1\n         while i < len(s):\n             if s[i] not in sdic:\n                 sdic[s[i]] = j\n                 snum.append(j)\n                 j += 1\n             else:\n                 snum.append(sdic[s[i]])\n             i += 1\n             \n         tdic = {}\n         tnum = []\n         i = 0\n         j = 1\n         while i < len(t):\n             if t[i] not in tdic:\n                 tdic[t[i]] = j\n                 tnum.append(j)\n                 j += 1\n             else:\n                 tnum.append(tdic[t[i]])\n             i += 1\n             \n         if snum == tnum:\n             return True\n         else:\n             return False\n", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return True\n         current_s = s[0]\n         current_t = t[0]\n         switch_s = 0\n         switch_t = 0\n         s_dict = dict()\n         for i in range(1, len(s)):\n             if s[i] != current_s:\n                 current_s = s[i]\n                 switch_s += 1\n             if t[i] != current_t:\n                 current_t = t[i]\n                 switch_t += 1\n             if s[i] in s_dict:\n                 if s_dict.get(s[i]) != t[i]:\n                     return False\n             s_dict.update({current_s: current_t})\n             if switch_s != switch_t:\n                 return False\n         return True", "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         d = dict()\n         for (a,b) in zip(s,t):\n             # new mapping\n             if a not in d:\n                 # duplicates in t\n                 if b in d.values():\n                     return False\n                 else:\n                     d[a] = b\n             # old mapping\n             else:\n                 # no duplicate in t\n                 if d[a] != b:\n                     return False\n         return True"]