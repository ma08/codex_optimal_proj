["def first_non_repeating_letter(string):\n    string_lower = string.lower()\n    for i, letter in enumerate(string_lower):\n        if string_lower.count(letter) == 1:\n            return string[i]\n            \n    return \"\"", "from collections import Counter\ndef first_non_repeating_letter(string):\n    cnt = Counter(string.lower())\n    for letter in string:\n        if cnt[letter.lower()] == 1:\n            return letter\n    return ''", "def first_non_repeating_letter(string):\n    singles = [i for i in string if string.lower().count(i.lower()) == 1]\n    return singles[0] if singles else ''", "def first_non_repeating_letter(string):\n    \n    s = string.lower()\n    \n    for i in string:\n        if s.count(i.lower()) == 1:\n            return i\n    return ''", "def first_non_repeating_letter(string):\n    return next((x for x in string if string.lower().count(x.lower())==1), '')", "def first_non_repeating_letter(string):\n    for x in string:\n        if string.lower().count(x.lower()) == 1:\n            return x\n    return ''", "def first_non_repeating_letter(string):\n    duplicates = [ i for i in string if string.lower().count(i.lower()) == 1 ]\n    return duplicates[0] if duplicates else ''", "def first_non_repeating_letter(string):\n    return ([a for a in string if string.lower().count(a.lower()) == 1] or [''])[0]\n    #your code here\n", "def first_non_repeating_letter(string):\n    for char in string:\n        if string.lower().count(char.lower()) < 2:\n            return char\n    return \"\"", "def first_non_repeating_letter(s):\n    return ([c for c in s if s.lower().find(c.lower()) == s.lower().rfind(c.lower())] or [\"\"])[0]\n", "def first_non_repeating_letter(string):\n    try:\n        return next(c for c in string if string.lower().count(c.lower()) == 1)\n    except StopIteration:\n        return ''", "def first_non_repeating_letter(string):\n    counter = 0\n    for x in string:\n        for y in string.lower():\n            if y == x.lower():\n                counter += 1\n        if counter == 1:\n            return x\n        counter = 0\n    return ''", "def first_non_repeating_letter(string):\n    lowercase_str = string.lower()\n    for i in string:\n        if lowercase_str.count(i.lower()) == 1:\n            return i\n    return \"\"", "from collections import Counter\n\ndef first_non_repeating_letter(string):\n    count = Counter(s.lower() for s in string)\n    \n    for c in string:\n        if count[c.lower()] == 1:\n            return c\n    \n    return str()", "def first_non_repeating_letter(string):\n    result = sorted(string, key=lambda x: string.lower().count(x.lower()))+['']\n    return result[0] if result.count(result[0])== 1 else result[-1]", "def first_non_repeating_letter(string):\n    return next((ch for ch in string if string.lower().count(ch.lower()) == 1), '')", "def first_non_repeating_letter(s):\n    seen = set()\n    rep = set()\n    \n    for c in s:\n        c = c.lower()\n        if c in seen:\n            rep.add(c)\n        else:\n            seen.add(c)\n    for c in s:\n        if c.lower() not in rep:\n            return c\n    return ''\n\n", "def first_non_repeating_letter(string):\n    for x in string:\n        if x.lower() not in string.lower()[string.index(x)+1:]: return x\n    else: return '' ", "from collections import Counter\ndef first_non_repeating_letter(s):\n    for c, v in sorted(Counter(s).most_common(), key=lambda t: t[1]):\n        if v == 1 and c.swapcase() not in s or not c.isalpha(): return c\n    return ''", "def first_non_repeating_letter(s):\n    for c in s:\n        if s.count(c) + s.count(c.swapcase()) * c.isalpha() == 1: return c\n    return ''", "def first_non_repeating_letter(str1):\n    str2 = str1.lower()\n    for c in str2:\n        if str2.count(c)==1:\n            return str1[str2.index(c)]\n    return ''\n    #your code here\n", "from collections import Counter\ndef first_non_repeating_letter(string):\n    counts = Counter(string.lower())\n    try:\n        first_unique = next(item[0] for item in counts.items() if item[1]==1)\n    except StopIteration:\n        return \"\"\n    if first_unique.upper() in string:\n        return first_unique.upper()\n    else:\n        return first_unique", "def first_non_repeating_letter(string):\n    str = string.lower()\n    for x in str:\n        if str.count(x) ==1: return string[str.index(x)]\n    return ''", "def first_non_repeating_letter(string):\n    check_list = []\n    list_string = list(string.lower())\n    for let in string:\n        if let not in check_list:\n            list_string.remove(let.lower())\n            check_list.append(let)\n            if let.lower() not in list_string:\n                return let\n    return ''", "def first_non_repeating_letter(string):\n    c=''\n    if string=='':\n        return ''\n    count=0\n    b=string.lower()\n    for i in b:\n        a=b.count(i)\n        if a==1:\n            break\n        count+=1\n        if count==len(string):\n            return ''\n    return string[count]", "def first_non_repeating_letter(string):\n    str = string.lower()\n\n    for i, v in enumerate(str):\n        if str.index(v) == str.rindex(v):\n            return string[i]\n\n    return \"\"\n", "def first_non_repeating_letter(some_string):\n    # List comprehension:\n    #    examine each character in the given string\n    #    if the character appears only once, add it to the list\n    #    otherwise, add an empty character\n    #    join the list back into a string (eliminates empty characters)\n    #    now the first character in our string will be the first non-repeating character\n    #        NOTE: by using a one-character slice [:1] instead of an index [0] we allow\n    #              it to pick up a blank character '' if the string is empty instead of\n    #              giving an error for an index that is out of range.\n    return ''.join([char if some_string.lower().count(char.lower()) == 1 else '' for char in some_string])[:1]    \n", "def first_non_repeating_letter(string):\n    is_unique = lambda char: string.lower().count(char.lower()) == 1\n    return next((char for char in string if is_unique(char)), '')", "def first_non_repeating_letter(n):\n    for i in n:\n        if n.lower().count(i.lower())==1:\n            return i\n    return ''", "def first_non_repeating_letter(string):\n    low=string.lower()\n    a=[ele for ele in dict.fromkeys(low) if low.count(ele)==1]\n    return string[low.index(a[0])] if a and string else ''", "def first_non_repeating_letter(string):\n    return ''.join(i for i in string if string.lower().count(i.lower())==1)[:1]", "def first_non_repeating_letter(string):\n    cass = \"\".join(string);\n    chars = list(i.lower().replace(\" \", \"\") for i in cass)\n    newList = []\n    for char, i in zip(chars,string): # run two lists parallel\n      count = chars.count(char)\n      if count >= 2:\n        continue;\n      else:\n        newList.append(i)\n        \n    if(len(newList) > 0): \n        return str(newList[0]);\n    else: \n        return '';", "def first_non_repeating_letter(string):\n    strLower = string.lower()\n    for let in string:\n        if strLower.count(let.lower())==1:\n            return let\n    return \"\"\n            \n", "def first_non_repeating_letter(string):\n    print(string)\n    for l in string:\n        if string.lower().find(l.lower(), string.find(l)+1) == -1:\n            return l\n    return ''", "def first_non_repeating_letter(string):\n    c = [x for x in string if string.lower().count(x.lower())==1]\n    if c:\n        return c[0]\n    else:\n        return ''", "def first_non_repeating_letter(string):  \n    if len(string)==1 or len(string)==0:\n        return string  \n    for leter in string:\n        if (leter.lower() not in string[string.index(leter)+1:].lower()) and (leter.lower() not in string[:string.index(leter)].lower()):\n            return(leter)\n    else:\n        return('')", "def first_non_repeating_letter(string): \n    a = [i for i in string.lower()]\n    b = 0\n    c = [i for i in string]\n    if len(string)==1: return string\n    while b<len(a)-1:\n        if a.count(a[b])==1:\n            return c[b]\n        else: b+=1\n    return ''", "def first_non_repeating_letter(string):\n    \n    if all([string.count(item)>1 for item in string]):return \"\"\n    for i,item in enumerate(string.upper()):\n        if string.upper().count(item)==1:return string[i]"]