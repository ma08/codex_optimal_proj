["def same(arr_a, arr_b):\n    return sorted(map(sorted, arr_a)) == sorted(map(sorted, arr_b))", "def same(arr_a, arr_b):\n    return sorted(sorted(a) for a in arr_a) == sorted(sorted(b) for b in arr_b)\n", "same=lambda a,b:sorted(sum(a,[])) == sorted(sum(b,[]))", "def same(arr_a, arr_b):\n  return sorted(sorted(x) for x in arr_a) == sorted(sorted(x) for x in arr_b)", "same=lambda a1, a2: sorted(map(sorted, a1))==sorted(map(sorted, a2))", "def same(a, b):\n    return comp(a) == comp(b)\n\ndef comp(arr):\n    return sorted(map(sorted,arr))", "from collections import Counter\ndef same(arr_a, arr_b):\n    return Counter(frozenset(x) for x in arr_a) == Counter(frozenset(x) for x in arr_b)", "def same(arr_a, arr_b):\n    if len(arr_b)!=len(arr_a): return False\n    temp1=temp2=[]\n    for i,j in zip(arr_a, arr_b):\n        temp1.append(sorted(i))\n        temp2.append(sorted(j))\n    while temp1 and temp2:\n        try:\n            temp2.remove(temp1.pop())\n        except:\n            return False\n    return True", "def same(arr_a, arr_b):\n    return sorted(sorted(arr) for arr in arr_a) == sorted(sorted(arr) for arr in arr_b)\n", "def same(arr_a, arr_b):\n    arr_a = sorted(list(map(sorted, arr_a)))\n    arr_b = sorted(list(map(sorted, arr_b)))\n    return arr_a == arr_b"]