["def est_subsets(arr):\n    return 2**len(set(arr)) - 1", "est_subsets = lambda a: 2 ** len(set(a)) - 1", "est_subsets=lambda n:2 ** len(set(n)) - 1", "from math import factorial\nfrom collections import Counter\n\ndef C(n, r):\n    return factorial(n) // factorial(r) // factorial(n-r)\n    \ndef est_subsets(arr):\n    s = set(arr)\n    return sum(C(len(s), i) for i in range(1, len(s)+1))", "def est_subsets(arr):\n    # your code here\n    return 2**len(set(arr)) - 1   # n: amount of subsets that do not have repeated elements ", "def est_subsets(arr):\n    # we first count the number of unique elements m\n    # then we use the mathematical property that there is 2**m - 1 non-empty\n    # sets that can be created by combination of m elements\n    m = len(set(arr))\n    return 2**m - 1", "def est_subsets(arr):\n    arr = list(set(arr))\n    return 2 ** len(arr) - 1", "def est_subsets(arr):\n    # your code here\n\n    s = set(arr)\n\n    return 2**(len(s)) - 1   # n: amount of subsets that do not have repeated elements ", "def est_subsets(arr):\n    return 2**len(dict.fromkeys(arr))-1", "def est_subsets(arr):\n    s = set(arr)\n    n = (2 ** len(s)) - 1\n    return n   # n: amount of subsets that do not have repeated elements "]