["import numpy as np\n\ndef regressionLine(x, y):\n    \"\"\" Return the a (intercept)\n        and b (slope) of Regression Line \n        (Y on X).\n    \"\"\"\n    a,b = np.polyfit(x,y,1)\n    return round(b,4),round(a,4)\n    \n", "def regressionLine(x, y):\n    \"\"\" Return the a (intercept)\n        and b (slope) of Regression Line \n        (Y on X).\n    \"\"\"\n    x2 = [float(i**2) for i in x]\n    y2 = [float(i**2) for i in y]\n    xy = [x[i]*y[i] for i in range(0,len(x))]\n    a = (sum(x2)*sum(y) - sum(x)*sum(xy))/(len(x)*sum(x2) - sum(x)**2)\n    b = (len(x)*sum(xy) - sum(x)*sum(y))/(len(x)*sum(x2) - sum(x)**2)\n    return (round(a,4),round(b,4))\n", "def regressionLine(x, y):\n    \"\"\" Return the a (intercept)\n        and b (slope) of Regression Line \n        (Y on X).\n    \"\"\"\n    n = float(len(x))\n    sum_y = sum(y)\n    sum_x = sum(x)\n    sum_x_squared = sum([x_i * x_i for x_i in x])\n    sum_x_y = sum([x_i * y_i for (x_i, y_i) in zip(x, y)])\n    \n    divisor = (n * sum_x_squared - (sum_x * sum_x))\n    intercept = (sum_x_squared * sum_y - sum_x * sum_x_y) / divisor\n    slope = (n * sum_x_y - sum_x * sum_y) / divisor\n    \n    return (round(intercept, 4), round(slope, 4))\n", "def regressionLine(xs, ys):\n    sx, sy, sxy = sum(xs), sum(ys), sum(x*y for x, y in zip(xs, ys))\n    n, sx2, s2x = len(xs), sum(x*x for x in xs), (sx*sx)\n    return tuple(round(d / (n*sx2 - s2x), 4) for d in (sx2*sy - sx*sxy, n*sxy - sx*sy))", "def regressionLine(x, y):\n    n, sx, sy = len(x), sum(x), sum(y)\n    sxy = sum(i * j for i, j in zip(x, y))\n    sx_2, s_x2 = sx ** 2, sum(i * i for i in x)\n    a = (s_x2 * sy - sx * sxy) / (n * s_x2 - sx_2)\n    b = (n * sxy - sx * sy) / (n * s_x2 - sx_2)\n    return round(a, 4), round(b, 4)", "def regressionLine(x, y):\n    Ex2 = sum(i ** 2 for i in x)\n    Exy = sum(i * j for i, j in zip(x, y))\n    Ex = sum(x)\n    Ey = sum(y)\n    n = len(x)\n    return round((Ex2*Ey-Ex*Exy)/(n*Ex2-Ex**2),4),round((n*Exy-Ex*Ey)/(n*Ex2-Ex**2),4)", "def regressionLine(x, y):\n    sumXSquare = sum([n * n for n in x])\n    sumYsquare = sum([n * n for n in y])\n    sumXY = sum([X * Y for X,Y in zip(x,y)])\n    a = ((sumXSquare * sum(y)) - (sum(x) * sumXY)) / float(((len(x) * sumXSquare) - sum(x) ** 2))\n    b = ((len(x)*sumXY) - (sum(x) * sum(y))) / float(((len(x)*sumXSquare) - sum(x) ** 2))\n    a = round(a,4)\n    b = round(b,4)\n    return a,b\n", "def regressionLine(x, y):\n    sq = lambda p: sum([i * i for i in p])\n    xy = sum(map(lambda p, q: p * q, x, y))\n    return round((sq(x) * sum(y) - sum(x) * xy)/(len(x) * sq(x) - sum(x) * sum(x)), 4), \\\n    round((len(x) * xy - sum(x) * sum(y))/(len(x) * sq(x) - sum(x) * sum(x)), 4)\n", "import numpy as np\ndef regressionLine(x, y):\n    b, a =  tuple(np.round(np.polyfit(x, y, 1), 4))\n    return a, b\n"]