["def per(n):\n    r = []\n    while n>=10:\n        p=1\n        for i in str(n):\n            p=p*int(i)\n        r.append(p)\n        n = p\n    return r", "from functools import reduce\n\ndef per(n):\n    r = []\n    p = reduce(lambda a, b: a*b, map(int, str(n)))\n    return r if p == n else [p] + per(p)", "from functools import reduce\nfrom operator import mul\n\ndef per(n):\n    results = []\n    while n > 9:\n        n = reduce(mul, map(int, str(n)))\n        results.append(n)\n    \n    return results", "def per(n, s=0):\n  return ([n] if s else []) + (per(eval('*'.join(str(n))), 1) if n > 9 else [])", "def per(n):\n    def p(n):\n        q, r = divmod(n, 10)\n        if q == 0:\n            return n\n        return r * p(q)\n    \n    ans = []\n    while n // 10 > 0:\n        n = p(n)\n        ans.append(n)\n    return ans", "def per(n):\n    ans = []\n    while n // 10 > 0:\n        acc = 1\n        for ch in str(n):\n            acc *= int(ch)\n        n = acc\n        ans.append(n)\n    return ans", "from functools import reduce\nfrom operator import mul\n\ndef per(n):\n    result = []\n    s = str(n)\n    while len(s) > 1:\n        result.append(reduce(mul, map(int, s)))\n        s = str(result[-1])\n    return result", "from numpy import prod\ndef per(n):\n    if n<10: return []\n    arr = []\n    while n>9:\n        n = prod([int(i) for i in str(n)])\n        arr.append(n)\n    return arr", "def per(n):\n    arr = []\n    while n>9:\n        s = 1\n        for i in str(n):\n            s *= int(i)\n        n = s\n        arr.append(n)\n    return arr", "def per(n):\n    if n<10:\n        return []\n    l=[]\n    while n>9:\n        total=1\n        num=str(n)\n        for i in num:\n            total*=int(i)\n        l.append(total)\n        n=total\n    return l\n"]