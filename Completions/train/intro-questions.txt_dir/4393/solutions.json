["from collections import defaultdict\n\ndef repeat_sum(l):\n    count = defaultdict(int)\n    for l1 in l:\n        for val in set(l1):\n            count[val] += 1\n    \n    return sum(k for k,v in list(count.items()) if v > 1)\n", "from collections import Counter\n\n\ndef repeat_sum(l):\n    counter = sum((Counter(set(el)) for el in l), Counter())\n    return sum(num for num in counter if counter[num] > 1)\n", "def repeat_sum(l):\n    s, r = set(), set()\n    for a in map(set, l):\n        r |= a & s\n        s |= a\n    return sum(r)", "from collections import Counter\nfrom itertools import chain\n\ndef repeat_sum(l):\n    return sum(key for key, value in Counter(chain.from_iterable(set(x) for x in l)).items() if value > 1)", "from collections import Counter as Cnt\n\nrepeat_sum = lambda l: sum(k for k,v in Cnt([e for ll in l for e in set(ll)]).items() if v>1)\n", "def repeat_sum(l):\n    f = [n for s in l for n in set(s)]\n    return sum(n for n in set(f) if f.count(n) > 1)", "from collections import Counter\n\ndef repeat_sum(l):\n    commons = Counter()\n    for s in l:\n        commons.update(set(s))\n    return sum(x for x,c in commons.items() if c>1)", "repeat_sum=lambda x:sum(list(set([j for i in x for j in i if sum(1for q in x if j in q)>1])))"]