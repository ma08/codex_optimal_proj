["def oddity(n):\n    while True:\n        n, m = divmod(n, 2)\n        yield m       \n\ndef oddest(arr):\n    res = arr[0]\n    for n in arr[1:]:\n        if next(b > a for a, b in zip(oddity(res), oddity(n)) if a != b):\n            res = n\n    return res", "from functools import cmp_to_key\n\ndef comp(x, y):\n    rx, ry = x&1, y&1\n    while rx == ry:\n        x, y = (x - rx) >> 1, (y - ry) >> 1\n        rx, ry = x&1, y&1\n    return rx > ry\n\ndef oddest(a):\n    return max(a, key=cmp_to_key(comp))", "oddest=lambda A:max(A,key=lambda x:bin(256+x)[::-1])", "def oddest(a):\n    return max(a, key=lambda n: f'{n+2**32:b}'[::-1])", "def oddest(a):\n    b=list(enumerate(a))\n    while len(b)>1:\n        b=[(i,v//2) for i,v in b if v%2] or [(i,v//2) for i,v in b]\n    return a[b[0][0]]", "def oddest(a):\n    res = {k: k for k in a}\n    if len(a) <2:\n        return  -1 if len(a) ==0 else a[0] \n    while len(a)>1:\n        if any(i%2 for i in a):\n            res = {k:v for k,v in list(res.items()) if v%2}\n            a = list(res.values())\n        for k, v in list(res.items()):\n            res[k] = v//2 if v%2 ==0 else (v-1)//2\n        a = list(res.values())\n    \n    return k\n", "from functools import cmp_to_key\n\ndef oddest(a):\n    odder = lambda x,y: odder(x//2, y//2) if x%2==y%2 else 1-2*(x%2)\n    return min(a, key=cmp_to_key(odder))", "oddest=lambda A:max(A,key=lambda x:f'{x+256:b}'[::-1])"]