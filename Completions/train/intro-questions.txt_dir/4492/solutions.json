["colors = {\n    (1, 0, 0): 'red',\n    (0, 1, 0): 'green',\n    (0, 0, 1): 'blue',\n    (1, 0, 1): 'magenta',\n    (1, 1, 0): 'yellow',\n    (0, 1, 1): 'cyan',\n    (1, 1, 1): 'white',\n}\n\ndef hex_color(codes):\n    codes = codes or '0 0 0'\n    items = [int(c) for c in codes.split()]\n    m = max(items)\n    return colors[tuple(i == m for i in items)] if m else 'black'\n", "_COLORS = ['black', 'blue', 'green', 'cyan', 'red', 'magenta', 'yellow', 'white']\n\ndef hex_color(codes):\n    colors = [int(color) for color in (codes or '0 0 0').split()]\n    index = int(''.join('1' if color and color == max(colors) else '0' for color in colors), 2)\n    return _COLORS[index]", "color_map = {0:\"black\", 1:\"red\", 2:\"green\", 3:\"yellow\", 4:\"blue\", 5:\"magenta\", 6:\"cyan\", 7:\"white\"}\n\ndef hex_color(codes):\n    values, brightest, color, i = [], 0, 0, 0\n    if not codes: codes = \"000 000 000\"\n    for code in codes.split(\" \"):\n        value = int(code)\n        if value > brightest: \n            brightest = value\n            color = 2**i\n        elif value == brightest != 0:\n            color += 2**i\n        i += 1\n    return color_map[color]", "def hex_color(codes):\n    if codes in ('', '000 000 000'):\n                        return 'black'\n    r, g, b = (int(color) for color in codes.split())\n    if r == g == b:     return 'white'\n    if r > g and r > b: return 'red'\n    if g > r and g > b: return 'green'    \n    if b > r and b > g: return 'blue'\n    if r == b:          return 'magenta'\n    if g == r:          return 'yellow'\n    if b == g:          return 'cyan'", "colors = {1: \"red\", 2: \"green\", 4: \"blue\", 3: \"yellow\", 5: \"magenta\", 6: \"cyan\", 7: \"white\"}\n\ndef hex_color(codes):\n    codes = [int(code) for code in codes.split()]\n    most = max(codes, default=0)\n    return colors[sum(2**i for i, code in enumerate(codes) if code == most)] if most else \"black\"\n", "def hex_color(s):\n    a, b, c = [int(x) for x in s.split() or [0, 0, 0]]\n    for n, r in [(0, \"black\"), (c, \"white\")]:\n        if a == b == c == n:\n            return r\n    m = max(a, b, c)\n    if m == a == b: return \"yellow\"\n    if m == a == c: return \"magenta\"\n    if m == b == c: return \"cyan\"\n    return \"red\" if m == a else \"green\" if m == b else \"blue\"", "def hex_color(codes):\n    if codes == '': return 'black'\n    r,g,b = map(int,codes.split(' '))\n    if 0 == r == g == b: return 'black'\n    if r == g == b: return 'white'\n    if r > g and r > b: return 'red'\n    if g > r and g > b: return 'green'\n    if b > g and b > r: return 'blue'\n    if r > g and r == b: return 'magenta'\n    if r > b and r == g: return 'yellow'\n    if b > r and b == g: return 'cyan'", "def hex_color(codes):\n    try:\n        r, g, b = (int(a) for a in codes.split())\n    except ValueError:\n        return 'black'\n    if r == g == b:\n        return 'black' if r == 0 else 'white'\n    if r > g and r > b:\n        return 'red'\n    elif g > r and g > b:\n        return 'green'\n    elif b > r and b > g:\n        return 'blue'\n    elif r == g:\n        return 'yellow'\n    elif g == b:\n        return 'cyan'\n    elif b == r:\n        return 'magenta'", "def hex_color(codes):\n    if codes == \"\": return 'black'\n    r_, g_, b_ = map(int, codes.split())\n    r, g, b, = max(r_, g_, b_)==r_, max(r_, g_, b_)==g_, max(r_, g_, b_)==b_\n    \n    if    (r_, g_, b_) == (0, 0, 0):\n        return 'black'\n    elif  r and g and b:   return 'white'\n    elif  r and g:         return 'yellow'\n    elif  r and b:         return 'magenta'\n    elif  g and b:         return 'cyan'\n    elif  r:               return 'red'\n    elif  g:               return 'green'\n    elif  b:               return 'blue'", "def hex_color(codes):\n    r,g,b = [ int(hex) for hex in (codes.split(' ') if codes != '' else '000') ]\n    m = max(r,g,b)\n    return ['black','red','green','yellow','blue','magenta','cyan','white'][(m>0) * ( 1*(r==m) + 2*(g==m) + 4*(b==m) )]"]