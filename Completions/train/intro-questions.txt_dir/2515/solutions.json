["class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        result = ''\n        vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        aAppend = 'a'\n        newWord = ''\n        maAppend = ''\n        lastC = ''\n        for c in S:\n            lastC = c\n            fullAppend = maAppend + aAppend\n            if c == ' ':\n                result += newWord + fullAppend + ' '\n                aAppend += 'a'\n                newWord = ''\n                maAppend = ''\n                continue\n            if maAppend == '' and c in vowel:\n                maAppend = 'ma'\n                newWord += c\n                continue\n            if maAppend == '' and (not c in vowel):\n                maAppend = c + 'ma'\n                continue\n\n            newWord += c\n        if lastC != ' ':\n            result += newWord + maAppend + aAppend\n\n        return result", "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        \n        vowels = set(['a','e','i','o','u'])\n        s = ''\n        for i,item in enumerate(S.strip().split()):\n            if item[0].lower() in vowels:\n                s+=item\n            else:\n                s+=item[1:]+item[0]\n            \n            s+='ma'+'a'*(i+1)+' '\n        \n        return s[:-1]", "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        words = S.split(' ')\n        def trans(word):\n            ret = ''\n            if word[0] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                ret = word + 'ma'\n            else:\n                    ret = word[1:] + word[0] + 'ma'\n            return ret\n        ret = [trans(x) for x in words]\n        for idx in range(len(ret)):\n            ret[idx] += 'a' * (idx + 1)\n        return ' '.join(ret)", "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        list_str = S.split(' ')\n        s = ''\n        for index, word in enumerate(list_str):\n            if word[0].lower() in ['a', 'e', 'i', 'o', 'u']:\n                s += ''.join('{word}ma{a} ' .format(word=word, a='a'*(index+1)))\n            else:\n                s += ''.join('{word}{alp}ma{a} ' .format(word=word[1:], alp=word[0], a='a'*(index+1)))\n        return s.strip()", "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        list_str = S.split(' ')\n        s = ''\n        for index, word in enumerate(list_str):\n            if word[0].lower() in ('a', 'e', 'i', 'o', 'u'):\n                s += ''.join('{word}ma{a} ' .format(word=word, a='a'*(index+1)))\n            else:\n                s += ''.join('{word}{alp}ma{a} ' .format(word=word[1:], alp=word[0], a='a'*(index+1)))\n        return s.strip()"]