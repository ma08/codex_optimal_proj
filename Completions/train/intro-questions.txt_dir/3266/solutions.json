["def my_first_kata(a,b):\n    #your code here\n    if type(a) == int and type(b) == int:\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a, b):\n    try:\n        return a % b + b % a\n    except (TypeError, ZeroDivisionError):\n        return False", "def my_first_kata(a,b):\n    if type(a) == int and type(b) == int: return a%b + b%a\n    return False", "def my_first_kata(a,b):\n    return a % b + b % a if type(a) is int and type(b) is int else False", "def my_first_kata(a,b):\n    return type(a) == type(b) == int and a % b + b % a", "my_first_kata = lambda a,b: ((a%b)+(b%a)) if type(a) is type(b) is int else False", "def my_first_kata(a,b):\n    return a % b ++ b % a if type(a) == int and type(b) == int else False", "def my_first_kata(a,b):\n    return set(map(type, (a,b))) == {int} and a % b + b % a", "def my_first_kata(a,b):\n    return all(type(x)==int for x in (a,b)) and (a%b)+(b%a)", "def my_first_kata(a,b):\n    return a % b + b % a if type(a) == type(b) == int else False", "def my_first_kata(a,b):\n    return a % b + b % a if (type(a), type(b)) == (int, int) else False", "def my_first_kata(a,b):\n    if bool(type(a) == int and type(b) == int): return (a%b+b%a)\n    else: return False", "def my_first_kata(a,b):\n    return a%b+b%a if type(a) == int and type(b) == int else False    ", "def my_first_kata(a,b):\n    try:\n        return a%b + b%a\n    except: return False", "def my_first_kata(a,b):\n    if type(a) == type(b) == int: \n        return a % b ++ b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if type(a) in (int,float) and type(b) in (int,float): return a % b + b % a\n    return False", "def my_first_kata(a,b):\n    return a % b + b % a if int == type(a) == type(b) else False", "from typing import Union\n\ndef my_first_kata(a: Union[int, str], b: Union[int, str]) -> Union[bool, int]:\n    \"\"\"\n    Get a value based on types passed as the arguments:\n      - `False` if either a or b (or both) are not numbers\n      - `a % b + b % a` if both arguments are numbers\n    \"\"\"\n    return False if not all(map(lambda _: type(_) in (int, float), [a, b])) else (a % b) + (b % a)", "my_first_kata=lambda a,b:int==type(a)==type(b)and a%b+b%a", "def my_first_kata(a,b):\n    if type(a)== int and type(b) == int: \n        return (b % a + a % b)\n    else:\n        return False", "def my_first_kata(a,b):\n    if str(a).isnumeric() is False or str(b).isnumeric() is False: return False\n    else: return int(a)%int(b) + int(b)%int(a)", "def my_first_kata(a,b):\n    print(a)\n    print(b)\n    valid_a = isinstance(a, int) and type(a) == type(0)\n    valid_b = isinstance(b, int) and type(b) == type(0)\n    if valid_a and valid_b:\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a, b):\n    if not type(a) in (int, float) or not type(b) in (int, float):\n        return False\n    return a % b + b % a\n", "def my_first_kata(a,b):\n    if type(a) == type(b) == \"number\":\n        return False\n    try:\n        return a % b + b % a\n    except:\n        return False", "def my_first_kata(a,b):\n    if type(a) != int or type(b) != int:\n        return False\n    elif a == 0 or b == 0:\n        return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    if isinstance(a,int) and isinstance(b,int) and a*b!=0:\n        return a%b+b%a\n    else:\n        return False", "def my_first_kata(a,b):\n    try:\n        if str(a).isdigit() and str(b).isdigit(): return (a % b) + (b % a)\n        else:\n            return False\n    except:\n        return False", "def my_first_kata(a,b):\n    print(type(a))\n    print(type(b))\n    print(a)\n    print(b)\n    try:\n        print((a % b) + (b % a))\n        return (a % b) + (b % a)\n    except(TypeError, ZeroDivisionError):\n        return False", "def my_first_kata(a,b):\n    if type(a) != int or type(b) != int:\n        return False\n    if type(a) == int and type(b)== int:\n        return a%b + b%a\n", "def my_first_kata(a,b):\n    if str(a).isdigit() and str(b).isdigit(): \n        res = (a % b) + (b % a) \n        return res\n    else:\n        return False", "def my_first_kata(a,b):\n    if type(a) == int and type(b) == int: # both must be stated as int \n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        return False\n    try:\n        sum = (a % b) + (b % a)\n        return sum\n    except ZeroDivisionError:\n        return False", "def my_first_kata(a,b):\n    if type(a)!= int or type(b) != int:\n        return False\n    elif type(a)!= int and type(b) != int:\n        return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    try:\n        if type(a) == str or type(b) == str:\n            return False\n        if type(a) == dict or type(b) == dict:\n            return False\n        else:\n            return (a % b + b % a)\n    except ZeroDivisionError:\n        pass", "def my_first_kata(a, b):\n    try:\n        return a % b + b % a if all(map(lambda x: type(x) == int, (a, b))) else False\n    except ZeroDivisionError:\n        return False", "def my_first_kata(a,b):\n    if 'int' in str(type(a)) and 'int' in str(type(b)):\n        return a%b + b%a\n    else:\n        return False", "def my_first_kata(a,b):\n    print(a,b)\n    if not isinstance(a, int) and not isinstance(b, int): \n        return False\n    else:\n        try:\n            return a % b + b % a\n        except:\n            return False", "def my_first_kata(a,b):\n    if (type(a)== int) and (type(b) == int):\n        return a % b + b % a\n    else: \n        return 0", "def my_first_kata(a,b):\n    if type(a) != float and type(a) != int or type(b) != float and type(b) != int:\n        return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    if type(a) == str:\n        return False\n    if type(b) == str: \n        return False\n    else:\n        return a % b ++ b % a", "def my_first_kata(a,b):\n    if type(a) is type(b):\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if isinstance(a, bool) or isinstance(b, bool):\n        return False\n    if isinstance(a, int) and isinstance(b, int) : \n        #print (a,b)\n        return (a % b) + (b % a)\n    return False\n", "def my_first_kata(a,b):\n    msg = False\n    if isinstance(a,int) and isinstance(b,int) and a != 0 and b != 0:\n        msg = a % b + b % a\n    return msg", "def my_first_kata(a,b):\n    print(a,b)\n    if isinstance(a,int) and isinstance(b,int) and not isinstance(a,bool) and not isinstance(b,bool):\n        return a%b + b%a\n    else:\n        return False", "def my_first_kata(a,b):\n    numbers = [int, float, complex]\n    if type(a) in numbers and type(b) in numbers:\n        return a % b + b % a\n    return False", "def my_first_kata(a,b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        return False\n    if a == 0 or b == 0:\n        return False\n    return a % b + b % a", "from contextlib import suppress\n\ndef my_first_kata(a, b):\n    if type(a) == type(b) == int: \n        with suppress(ZeroDivisionError):\n            return a % b + b % a\n    return False", "def my_first_kata(a,b):\n    if (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)): \n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if any([t not in ['int', 'float'] for t in (type(a).__name__, type(b).__name__)]):\n        return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    print(a,b) \n    if type(a) in [int, float, complex] and type(b) in [int, float, complex]:\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    try:\n        x = a % b + b % a\n        return x\n    except:\n        return False", "def my_first_kata(a,b):\n    if isinstance(a, int) and isinstance(b, int): return a % b ++ b % a if a and b else False\n    return False", "# def my_first_kata(a,b):\n#     if type(a) and type(b) == \"number\": return a % b + b % a\n#     else:\n#         return False\n        \ndef my_first_kata(a,b):\n    #your code here\n    if type(a) == int and type(b) == int:\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if a == None or b == None:\n        return False\n    if a == [] or b == []:\n        return False\n    try:\n        if a != 0 and b != 0:\n            return a % b + b % a \n    except TypeError:\n        return False\n", "def my_first_kata(a,b):\n    try:     \n        return a % b + b % a\n    except Exception:\n        return False", "def my_first_kata(a,b):\n    x = isinstance(a, int)\n    y = isinstance(b, int)\n    if x and y == True:\n        if a and b > 0:\n            return (a % b) + (b % a)\n        else: return False\n    else:\n        return False\n", "def my_first_kata(a,b):\n    if isinstance(a, int) and isinstance(b, int) and not isinstance(b, bool) and not isinstance(a, bool): \n        return (a % b) + (b % a)\n    else:\n        return False\n", "def my_first_kata(a,b):\n    try:\n        if abs(float(a/2 + b/2)) >0:\n            return a % b ++ b % a\n        else:\n            return False\n    except:\n        return False\n", "def my_first_kata(a,b):\n    if isinstance(a, int) and isinstance(b, int)  :\n        try: return a % b + b % a\n        except :\n            return False\n    else : return False", "def my_first_kata(a, b):\n    if type(a) == type(b) == int: \n        try:\n            return a % b + b % a\n        except ZeroDivisionError:\n            return False\n    else:\n        return False", "def my_first_kata(a,b):\n    return False if not type(a) == int or not type(b) == int else a % b ++ b % a", "def my_first_kata(a,b):    \n  if type(a)!= int or type(b)!= int:\n    return False\n  else:\n    if a < b:\n      return (a % b) + (b % a)\n    else:\n      return (b % a) + (a % b)\n      \n      \n\n  \n", "def my_first_kata(a,b):\n    try:\n        if type(a) is bool or type(b) is bool:\n            raise TypeError('why')\n        return a % b + b % a\n    except TypeError:\n        return False", "def my_first_kata(a,b):\n    for item in (a,b):\n        if type(item) !=  int: return False\n    return a % b ++ b % a", "def my_first_kata(a,b):\n    if isinstance(a,int) and isinstance(b,int): \n        if a == 0 or b == 0: return False \n        if a is None or b is None: return False\n        else: return (a%b + b%a)\n    else: return False\n", "def my_first_kata(a,b):\n    print(a,b)\n    if not all(isinstance(x,int) for x in [a,b]): \n        return False\n    elif int(a) == 0 or int(b) == 0:\n        return False\n    else:\n        return a % b + b % a ", "def my_first_kata(a,b):\n    if isinstance(a,int) and isinstance(b,int) and b != 0 and a != 0:\n        return (a % b) + (b % a)\n    else:\n        return False", "def my_first_kata(a,b):\n    if type(a) != type(5) or type(b) != type(5): return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    if type(a) == int == type(b): \n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    return False if isinstance(a, (str, bool, dict)) or isinstance(b, (str, bool, dict)) else a % b + b % a \n", "def my_first_kata(a,b):\n    if type(a) ==  type(b) == type(1): \n        return (a % b) +(b % a)\n    else:\n        return False", "def my_first_kata(a,b):\n    try:\n        float(a)\n        float(b)\n        return a % b + b % a if a and b else False\n    except:\n        return False", "def my_first_kata(a,b):\n    if isinstance(a, bool) or isinstance(b, bool):\n        return False\n    if isinstance(a, int) and isinstance(b, int) and a != 0 and b != 0: \n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if type(a) == type(b):\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    return a%b + b%a if type(a)==type(b) and type(a)==int else False\n    if type(a) or type(b) == \"number\": return False\n    else:\n        return a % b ++ b % a", "def my_first_kata(a,b):\n    # Tricky \n    if type(a) != type(b):\n        return False\n    else:\n        return int(b % a) + int(a % b)\n    \n", "def my_first_kata(a,b):\n    if isinstance(a, int) & isinstance(b, int):\n        return a % b ++ b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if (isinstance (a or b, str) or (a==0 or b==0)):\n        return False\n    elif (isinstance (a and b, int)):\n          if(str(a)==\"True\" or str(b)==\"True\" or int(a%b+b%a)==0 or a==True and b==True):\n              return False          \n          else:                 \n              return int(a%b+b%a)\n    else:\n        return False                                     \n                 \n             \n          \n", "def my_first_kata(a,b):\n    if type(a) == int:\n        if type(b) == int: \n            return a % b + b % a \n    return False", "def my_first_kata(a,b):\n    if isinstance(a,int) and isinstance(b, int) and a and b: \n        return  a % b ++ b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    return a % b ++ b % a if isinstance(a, int) and isinstance(b, int) and a and b else False", "def my_first_kata(a,b):\n    if isinstance(a, int) and isinstance(b, int) and a != 0 and b != 0:\n        return a % b ++ b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if a == 0 or b == 0:\n        return False\n    elif isinstance(a, int) and isinstance(b, int):\n        a = int(a)\n        b = int(b)\n        return a % b ++ b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if not ((isinstance(a,int) and isinstance(b,int))):\n        return False  \n    elif a != 0 and b != 0:\n        return a % b + b % a\n    else:\n        return False", "def my_first_kata(a,b):\n    if not isinstance(a, int) or not isinstance(b, int): return False\n    if a is 0 or b is 0:\n        return False\n    else:\n        return a % b ++ b % a", "import math\ndef my_first_kata(a,b):\n    is_number = bool\n    if_is_number = 1\n    if type(a) != int or type(b) != int: \n        is_number = False\n    else:\n        if_is_number = int(a) % int(b) ++ int(b) % int(a)\n        \n    if is_number == False:\n        return is_number\n    else:\n        return if_is_number", "def my_first_kata(a,b):\n    if isinstance(a,int)==False or isinstance(b,int)==False : return False\n    else:\n        return a % b ++ b % a", "def my_first_kata(a,b):\n    return a % b + b % a if (isinstance(a, int) and isinstance(b, int) and a and b) else False\n", "def my_first_kata(a,b):\n    try:\n        if complex(a) and complex(b):\n            return a % b + b % a\n        else: \n            return False\n    except:\n        return False", "def my_first_kata(a, b):\n    print(a, b)\n    try:\n        return a % b + b % a\n    except:\n        return False", "def my_first_kata(a,b):\n    if type(a) != type(1) or type(b) != type(1):\n        return False\n    elif type(a) == type(1) or type(b) == type(1):\n        return (a % b)+ (b % a)", "def my_first_kata(a,b):\n   \n    if isinstance(a,bool) or isinstance(b,bool):\n        return False\n    if (not isinstance(a,int)) or (not isinstance(b, int)): \n        return False\n    elif a==0 or b==0:\n        return False\n    \n    else:\n        return a % b ++ b % a", "def my_first_kata(a, b):\n    if (type(a) is not int) or (type(b) is not int): \n        return False\n    else:\n        try:\n            return a % b + b % a\n        except ZeroDivisionError:\n            return False", "def my_first_kata(a,b):\n    print(a, b)\n    if str(a).isdigit() and str(b).isdigit():\n        return int(a) % int(b) + int(b) % int(a)\n    else:\n        return False", "def my_first_kata(a,b):\n    if not isinstance(a,int) or not isinstance(b,int): return False\n    else:\n        if a*b == 0:\n            return False\n        return a % b + b % a", "def my_first_kata(a, b):\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float))):\n        return False\n    else:\n        return a % b + b % a", "def my_first_kata(a,b):\n    print('>>>'+str(a)+'<<< >>>'+str(b)+'<<<')\n    if isinstance(a,bool) or isinstance(b,bool):\n        return False\n    if isinstance(a,int) and isinstance(b,int):\n        return a % b + b % a if a!=0 and b!=0 else False\n    return False", "def my_first_kata(a,b):\n    print((a,b))\n    try:\n        return a % b + b % a\n    except:\n        return False\n    # Flez\n    \n", "def my_first_kata(a,b):\n    if a == 0 or b == 0:\n        return False\n    if isinstance(a, int) and isinstance(b, int): \n        return a%b + b%a\n    else:\n        return False", "def my_first_kata(a, b):\n    return False if not isinstance(a, int) or not isinstance(b, int)\\\n        or a == 0 or b == 0 else a % b+b % a"]