["def Xbonacci(signature,n):\n    output, x = signature[:n], len(signature)\n    while len(output) < n:\n        output.append(sum(output[-x:]))\n    return output", "def Xbonacci(signature,n):\n    length = len(signature)\n    while len(signature) < n:\n        signature.append(sum(signature[-length:]))\n    return signature[:n]", "def Xbonacci(sig, n):\n  res = sig[:n]\n  for i in range(n - len(sig)): res.append(sum(res[-len(sig):]))\n  return res", "def Xbonacci(signature,n):\n    l = len(signature)\n\n    for i in range(l, n):\n        signature += [sum(signature[i-l:i])]\n    return signature[:n]", "def Xbonacci(signature,n):\n    l = len(signature);\n    for i in range(n - l):\n        signature.append(sum(signature[-l:]));\n    return signature[:n];", "def Xbonacci(signature, n):\n    result = []\n    for i in range(n):\n        signature.append(sum(signature))\n        result.append(signature.pop(0))\n    return result", "def Xbonacci(signature,n):\n    length=len(signature)\n    for i in range(n-len(signature)):\n        signature.append(sum(signature[-length:]))\n    return signature[:n]", "def Xbonacci(signature,n):\n    sig = len(signature)\n    if sig > n:\n        return signature[:n]\n    xbon = signature \n    for i in range(sig, n):\n        xbon.append(sum(xbon[i-sig:]))\n    return xbon", "def Xbonacci(signature, n):\n    length = len(signature)\n    [signature.append(sum(signature[-length:])) for i in range(length, n)]\n    return signature[:n]", "def Xbonacci(s,n):\n    if n<len(s):\n        return s[:n]\n    x=len(s)\n    for i in range(n-len(s)):\n        s.append(sum(s[-x:]))\n    return s", "def Xbonacci(sequence, n):\n    i = 0\n    while len(sequence) < n:\n        sequence.append(sum(sequence[i:]))\n        i+=1\n    return sequence[:n]", "def Xbonacci(signature,n):\n    x = len(signature)\n    res = signature[:n]\n    \n    for i in range(n - x):\n        res.append(sum(res[-x:]))\n        \n    return res", "def Xbonacci(signature,n):\n    l = len(signature)\n    t = signature\n    i=l\n    while i<n:\n        t.append(sum(t[i-l:i]))\n        i+=1\n    return t[:n]", "def Xbonacci(signature,n):\n    x = len(signature)\n    for _ in range(n-x):\n        signature.append( sum(signature[-x:]) )\n    return signature[:n]", "def Xbonacci(signature,n):\n    def gen_bonacci(signature):\n        yield from signature\n        from collections import deque\n        signature = deque(signature)\n        while 1:\n            signature.append(sum(signature))\n            signature.popleft()\n            yield signature[-1]\n    from itertools import islice\n    return [i for i in islice(gen_bonacci(signature), n)]\n\n", "def Xbonacci(signature,n):\n    l = len(signature)\n    for i in range(n-l):\n        signature.append(sum(signature[-l:]))\n    return signature if n > l else signature[:n]", "def Xbonacci(signature,n):\n    seq = signature[:n]\n    for i in range(n - len(signature)):\n        seq.append(sum(seq[-len(signature):]))\n    return seq\n    #your code here\n", "def Xbonacci(signature,n):\n    size = len(signature)\n    while len(signature) < n:\n        signature.append(sum(signature[-size:]))\n    return signature[:n]", "def Xbonacci(signature,n):\n    sequence = signature[:]\n    for i in range(len(signature), n):\n        sequence.append(sum(sequence[i-len(signature):i]))\n    return sequence[:n]", "def Xbonacci(signature,n):    \n    x = len(signature)    \n    for i in range(n-x):\n        signature.append(sum(signature[-x:]))\n    arr = signature[:n]\n    return arr"]