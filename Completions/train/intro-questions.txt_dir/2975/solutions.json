["def song_decoder(song):\n    return \" \".join(song.replace('WUB', ' ').split())", "def song_decoder(song):\n    return \" \".join(song.replace('WUB', ' ').split()).strip()\n", "def song_decoder(song):\n    import re\n    return re.sub('(WUB)+', ' ', song).strip()\n", "def song_decoder(song):\n    return ' '.join([a for a in song.split('WUB') if a])", "import re\n\ndef song_decoder(song):\n    return re.sub(r'(WUB)+', ' ', song).strip()\n", "def song_decoder(song):\n    \"\"\" Simple WUB decoder :) \"\"\"\n\n    # Splitting strings by \"WUBs\" and filtering out voids\n    list = filter(lambda x: x != '', song.split('WUB'))\n\n    # Returning the joint items separed by spaces\n    return ' '.join(list)", "def song_decoder(song):\n    return ' '.join(list(filter(('').__ne__, song.split('WUB'))))\n    # Steps:\n    # 1. Remove occurences of WUB and get a list of words.\n    # 2. Filter out empty space ''.\n    # 3. Join the words in the list with space.\n    # 4. Return\n", "def song_decoder(song):\n    if 'WUB' not in song:\n        return song\n    else: \n        return ' '.join(song.replace('WUB',' ').split())", "def song_decoder(song):\n    return ' '.join(filter(None, song.split('WUB')))", "def song_decoder(song):\n    while 'WUBWUB' in song:\n        song = song.replace('WUBWUB', 'WUB')\n    song = song.replace('WUB', ' ')\n    song = song.strip()\n    return song", "def song_decoder(song):\n    original = \"\"\n    cut = 0\n    while song != \"\":\n        if song[:3] != \"WUB\":\n            if cut == 1:\n                original += \" \"\n            original += song[0]\n            song = song[1:]\n            cut = 0\n        else:\n            song = song[3:]\n            cut = 1\n    return original.strip()"]