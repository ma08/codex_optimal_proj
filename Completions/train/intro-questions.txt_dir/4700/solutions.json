["def solve(arr):\n    \n    p, q = 1, 1\n    \n    for k in arr:\n        \n        x, y = max(k), min(k)\n        \n        a = p * x\n        b = q * x\n        c = p * y\n        d = q * y\n        \n        p = max(a, b, c, d)\n        q = min(a, b, c, d)\n            \n    return max(p, q)", "def solve(arr):\n    result = arr[0]\n    for number_array in range(1, len(arr)):\n        result = [x * y for x in result for y in arr[number_array]]\n    return max(result)\n", "def solve(arr, cur = [1]):\n  return solve(arr[1:], [x*y for x in cur for y in arr[0]]) if arr else max(cur)", "from itertools import product\nfrom functools import reduce\n\ndef solve(arr):\n    return max( reduce(int.__mul__, p,1) for p in product(*arr) )", "from itertools import product\nfrom functools import reduce\nfrom operator  import mul\n\ndef solve(A):\n    return max(map(lambda g: reduce(mul, g, 1), product(*A)))", "from functools import reduce\ndef solve(arr):\n    f = lambda x, y: [i*j for i in x for j in y]\n    return max(reduce(f, arr))\n    \n    \n", "from itertools import product\nfrom functools import reduce\n\ndef solve(arr):\n    return max(reduce(lambda m, n: m * n, prod) for prod in product(*arr))", "from functools import reduce\nfrom itertools import product\nfrom operator import mul\n\ndef solve(arr):\n    xss = [[min(a), max(a)] for a in arr]\n    return max(reduce(mul, xs) for xs in product(*xss))", "def solve(arr, cur = []):\n  return (solve(arr[1:], [x*y for x in cur for y in arr[0]]) if cur else solve(arr[1:], arr[0])) if arr else max(cur)", "def solve(a):\n    r_min = r_max = 1\n    for x in a:\n        cur = [n * m for n in [min(x), max(x)] for m in [r_min, r_max]]\n        r_min = min(cur)\n        r_max = max(cur)\n    return r_max"]