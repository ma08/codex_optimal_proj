["def sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2])", "def sum_two_smallest_numbers(num_list):\n    num_list.sort()\n    return num_list[0] + num_list[1]", "def sum_two_smallest_numbers(numbers):\n    smallest1 = None\n    smallest2 = None \n    for n in numbers: \n        if not smallest1 or n < smallest1: \n            smallest2 = smallest1\n            smallest1 = n \n        elif not smallest2 or n < smallest2: \n            smallest2 = n \n    return smallest1 + smallest2", "from heapq import nsmallest\ndef sum_two_smallest_numbers(numbers):\n    return sum(nsmallest(2,numbers))", "def sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2]) if numbers else None", "def sum_two_smallest_numbers(numbers):\n    first_min = min(numbers)\n    numbers.remove(first_min)\n    second_min = min(numbers)\n    return first_min + second_min", "import heapq\ndef sum_two_smallest_numbers(numbers):\n    return sum(heapq.nsmallest(2, numbers))", "def sum_two_smallest_numbers(numbers):\n    return sorted(numbers)[0] + sorted(numbers)[1]", "def sum_two_smallest_numbers(numbers):\n   numbers.sort()\n   return numbers[0] + numbers[1]", "def sum_two_smallest_numbers(numbers):\n    return numbers.pop(numbers.index(min(numbers))) + numbers.pop(numbers.index(min(numbers)))", "sum_two_smallest_numbers = lambda A: sum( sorted( [x for x in A if x>0] )[:2] )\n", "def sum_two_smallest_numbers(numbers):\n    min1, min2 = numbers[0:2]\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < min2 and numbers[i] < min1:\n            min1 = numbers[i]\n        elif min1 < numbers[i] < min2:\n            min2 = numbers[i]\n            \n    return min1 + min2", "def sum_two_smallest_numbers(numbers):\n    lowest_num1 = numbers[0]\n    index = 0\n    for i in range(0,len(numbers)):\n        if lowest_num1 > numbers[i]:\n            lowest_num1 = numbers[i]\n            index = i\n    numbers.pop(index)\n    lowest_num2 = numbers[0]\n    for i in range(0,len(numbers)):\n        if lowest_num2 > numbers[i]:\n            lowest_num2 = numbers[i]\n            index = i;\n    return lowest_num1 + lowest_num2", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    \n    low1 = numbers[0]\n    low2 = numbers[1]\n    \n    for i in numbers:    \n        if i < low1:\n            low1 = i\n    \n    for i in numbers[1:]:\n        if i < low2:\n            if i != low1:\n                low2 = i\n                \n    sum = low1 + low2\n    \n    return(sum)", "import sys\ndef sum_two_smallest_numbers(numbers):\n    num = []\n    num = numbers\n    firstnum = sys.maxsize\n    secondnum = sys.maxsize\n    sum = 0\n    for i in range(0,len(num)):\n        if num[i] < firstnum:\n            firstnum = num[i]\n            \n        else:\n            {}\n    for i in range(0,len(num)):\n        if num[i] == firstnum:\n            {}\n        elif num[i] < secondnum:\n            secondnum = num[i]\n            \n        else:\n            {}\n    sum = firstnum+secondnum\n    return sum\n    \n", "def sum_two_smallest_numbers(numbers):\n    tmp_numbers = numbers\n    tmp_numbers.sort()\n\n    return tmp_numbers[0]+tmp_numbers[1]", "def sum_two_smallest_numbers(numbers):\n    x, y = numbers[:2]\n    if x > y:\n        x, y = y, x\n\n    for z in numbers[2:]:\n        if z < x:\n            y = x\n            x = z\n        elif z < y:\n            y = z\n\n    return x + y\n", "def sum_two_smallest_numbers(numbers):\n    n1 = min(numbers)\n    n2 = max(numbers)\n    for n in numbers:\n        if n1 < n < n2:\n            n2 = n\n    return n1 + n2", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    number=numbers #lol\n    number.sort(reverse=True)\n    a=number.pop()\n    b=number.pop()\n    return a+b", "def sum_two_smallest_numbers(numbers):\n    arr_sort = sorted(numbers)\n    return arr_sort[0]+arr_sort[1]\n", "import heapq\ndef sum_two_smallest_numbers(numbers):\n    two_smallests = heapq.nsmallest(2, numbers)\n    return two_smallests[0] + two_smallests[1]", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    numbers.sort()\n    subNumbers=numbers[:2]\n    return sum(subNumbers)", "def sum_two_smallest_numbers(numbers):\n    a = min(numbers)\n    b = min(numbers, key=lambda n: (n==a, n))\n    return a+b", "def sum_two_smallest_numbers(numbers):\n    (n1, n2) = (numbers[0], numbers[1])\n    for i in numbers[2:]:\n        if n2 < n1:\n            (n2, n1) = (n1, n2)\n        if i < n2:\n            n2 = i\n    return n1 + n2", "from heapq import nsmallest\n\ndef sum_two_smallest_numbers(numbers: int):\n    \"\"\" Get the sum of the two lowest positive numbers given an array. \"\"\"\n    return sum(nsmallest(2, numbers))", "def sum_two_smallest_numbers(num_array):\n    smallest1 = min(num_array)\n    index_smallest1 = num_array.index(smallest1)\n    smallest2 = max(num_array)\n    length_array = num_array.__len__()\n    index = 0\n    while index < length_array:\n        if not index == index_smallest1 and num_array[index] <= smallest2:\n            smallest2 = num_array[index]\n        index += 1\n    return smallest1 + smallest2", "def sum_two_smallest_numbers(numbers):\n    s = sorted(numbers) #sorting numbers from lowest to highest\n    return s[0]+s[1]    #returning the two smallest numbers on the list\n", "def sum_two_smallest_numbers(numbers):\n    # first we sort array in descending order and then take first two element\n    # check \"sorted()\" in python\n    return sorted(numbers)[0] + sorted(numbers)[1]", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    sorted_list = sorted(numbers)\n    sum_of_smallest_number = sorted_list[0] + sorted_list[1]\n    return sum_of_smallest_number\n        \n", "def sum_two_smallest_numbers(L):\n    x=min(L) #take the lowest number and stock it\n    L.remove(x) #remove it from the list\n    y=min(L) #take the new lowest number and stock it\n    return x+y\n", "def sum_two_smallest_numbers(numbers):\n    numbers.sort()\n    temp=numbers[0]+numbers[1]\n    return temp\n", "def sum_two_smallest_numbers(x):\n    L=[]\n    L.append(min(x))\n    y=x.remove(min(x))\n    L.append(min(x))\n    return sum(L)", "def sum_two_smallest_numbers(numbers):\n    first, second = float('inf'), float('inf')\n    for n in numbers:\n        if n < first:\n            first, second = n, first\n        elif n < second:\n            second = n\n    return first + second", "def sum_two_smallest_numbers(numbers):\n    result = 0\n    for i in range(2):\n        min = numbers[0]\n        for num in numbers:\n            if num < min:\n                min = num\n        numbers[numbers.index(min)] = max(numbers)+1\n        result += min\n    return result", "def sum_two_smallest_numbers(numbers):\n    for item in numbers:\n        if item < 0:\n           numbers.remove(item)\n    return sum(sorted(numbers)[:2])", "def sum_two_smallest_numbers(numbers):\n    m1 = min(numbers)\n    ind = numbers.index(min(numbers))\n    numbers[ind] = max(numbers)\n    m2 = min(numbers)\n    numbers[ind] = m1\n    return m1+ m2", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    min1=0\n    min2=0\n    max=0\n \n    for x in numbers:\n        if x>=max:    \n            max=x\n    min1=max\n    for y in numbers:\n        if y<min1:\n            min1=y\n\n    min2=max\n    for z in numbers:\n        if z <min2:\n            if z!=min1:\n                min2=z\n\n         \n    print ( numbers )\n    print((\"Maximo =\" , max))\n    print((\"Minimo 1=\" , min1 ))\n    print((\"Minimo 2=\" , min2 ))\n    returnVal=min1+min2\n    print((\"Suma=\" , returnVal ))           \n    return returnVal\n", "def sum_two_smallest_numbers(numbers):\n    numbers.sort()\n    sumSmallest = numbers[0] + numbers [1]\n    return sumSmallest\n", "def sum_two_smallest_numbers(numbers):\n    a,b = numbers[:2]\n    for i in range(2,len(numbers)):\n        a,b,c = sorted((a,b,numbers[i]))\n    return a+b", "def sum_two_smallest_numbers(numbers):\n    temp_list = numbers\n    temp_list.sort()\n    return temp_list[0] + temp_list[1]", "def sum_two_smallest_numbers(numbers):\n    #your code here\n    min_1 = min(numbers)\n    numbers.remove(min_1)\n    min_2 = min(numbers)\n    return min_1 + min_2", "def sum_two_smallest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:2])", "def sum_two_smallest_numbers(numbers):\n    min1 = min(numbers)\n    numbers.remove(min1)\n    min2 = min(numbers)\n    return min1 + min2", "sum_two_smallest_numbers=lambda a:sum(sorted(a)[:2])", "def sum_two_smallest_numbers(x):\n    return sum(sorted(x)[:2])\n", "import sys\n\ndef sum_two_smallest_numbers(numbers):\n    numA = sys.maxsize\n    numB = sys.maxsize\n    for number in numbers:\n        if number >= 0:\n            if number < numA:\n                numB = numA\n                numA = number\n            elif number < numB:\n                numB = number\n    return numA + numB", "import sys\n\ndef sum_two_smallest_numbers(numbers):\n    small_1 = sys.maxsize\n    small_2 = sys.maxsize\n    for elem in numbers:\n        if elem < small_1:\n            small_2 = small_1\n            small_1 = elem\n        elif elem < small_2:\n            small_2 = elem\n    \n    return small_1 + small_2", "def sum_two_smallest_numbers(numbers):\n    ch1 = min(numbers)\n    numbers.pop(numbers.index(ch1))\n    ch2 = min(numbers)\n    return ch1 + ch2\n", "def find_maximum(numbers):\n    max_ = numbers[0]\n    index = 0\n    for count, num in enumerate(numbers):\n        if num > max_:\n            max_ = num\n            index = count\n    return index\ndef sum_two_smallest_numbers(numbers):\n    #your code here\n    top2 = [numbers[0], numbers[1]]\n    max_index = find_maximum(top2)\n    for num in numbers[2:]:\n        if num < top2[max_index]:\n            top2[max_index] = num\n            max_index = find_maximum(top2)\n    return top2[0] + top2[1]", "def sum_two_smallest_numbers(numbers):\n    sorted_numbers = sorted(numbers)\n    result = sorted_numbers[0] + sorted_numbers[1]\n    return(result)"]