["score=lambda n:2**n.bit_length()-1", "score=lambda n:(1<<n.bit_length())-1", "def score(n):\n    # Good Luck!\n    return 2**n.bit_length()-1", "def score(n):\n    res = n\n    while n:\n        res, n = res | n, n >> 1\n    return res", "def score(n):\n    return 0 if n == 0 else n | int(n.bit_length() * '1', 2)", "def score(n):\n    return n if n < 2 else pow(2, int(__import__(\"math\").log(n, 2)) + 1) - 1", "from math import log; score=lambda n: 2**int(1+log(n,2))-1 if n else 0", "def score(n):\n    return n and 2**(len(bin(n))-2)-1", "from math import ceil,log\ndef score(n):\n    return 2**(ceil(log(n,2)))-1 if n>1 else n", "from math import log2, ceil\n\ndef score(n):\n    return n if n in (0, 1) else 2 ** (ceil(log2(n))) - 1"]