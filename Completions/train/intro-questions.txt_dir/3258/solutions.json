["def transpose(amount, tab):\n    stack, tab = [], list(map(list, tab))\n    for n, col in reversed(list(enumerate(zip(*tab)))):\n        if any(map(str.isdigit, col)):\n            stack.append(col)\n        elif stack:\n            frets = [''.join(r).strip('-') for r in zip(*reversed(stack))]\n            frets = [fret and int(fret) + amount for fret in frets]\n            if any(fret and not 0 <= fret <= 22 for fret in frets): return 'Out of frets!'\n            frets = list(map(str, frets))\n            pad = max(map(len, frets))\n            for row, fret in zip(tab, frets):\n                row[n+1: n+1+len(stack)] = str(fret).ljust(pad, '-')\n            stack.clear()\n    return list(map(''.join, tab))", "from itertools import groupby\nimport re\n\nclass OutOfFrets(Exception): pass\n\n\ndef convert(k,grp,amount):\n    \n    def convertOrRaise(m):\n        v = int(m.group()) + amount\n        if not (0 <= v < 23): raise OutOfFrets()\n        return str(v)\n        \n    lst = list(map(''.join, list(zip(*grp))))\n    if isinstance(k,str): return lst\n\n    col  = [re.sub(r'\\d+', convertOrRaise, l.strip('-')) for l in lst]\n    maxL = max(list(map(len,col)))\n    return [l.ljust(maxL, '-') for l in col]\n    \n    \ndef transpose(amount, tab):\n    try:               lst = [convert(k,g,amount) for k,g in groupby(list(zip(*tab)), key=lambda t: len(set(t))!=1 or t[0])]\n    except OutOfFrets: return \"Out of frets!\"\n    \n    return list(map(''.join, list(zip(*lst))))\n", "import re\n\ndef transpose(amount, tab):\n    \n    # get start and end of all frets\n    fret_pos = get_all_fret_positions(tab)\n    # process each column that contains frets\n    pos = 0\n    tab_new = ['' for string in tab]\n    for fret_start in sorted(fret_pos):\n        fret_end = fret_pos[fret_start]\n        # get all sub strings from one column\n        col = [string[fret_start:fret_end] for string in tab]\n        # apply amount to all frets\n        col, col_width = apply_amount(col, amount)\n        if col == 'Out of frets!':\n            return 'Out of frets!'\n        # adjust column width\n        col = adjust_column_width(col, col_width)\n        # add modified column back to tablature\n        for i, row in enumerate(col):\n            tab_new[i] = tab_new[i] + tab[i][pos:fret_start] + row\n        pos = fret_end\n        # add the part after the final fret\n    for i, row in enumerate(col):\n        tab_new[i] = tab_new[i] + tab[i][fret_end:]\n\n    return tab_new\n\ndef get_all_fret_positions(tab):\n    fret_pos = {}\n    for string in tab:\n        for match in re.finditer('[0-9]+', string):\n            if match.start() in fret_pos.keys():\n                if fret_pos[match.start()] < match.end():\n                    fret_pos[match.start()] = match.end()\n            else:\n                fret_pos[match.start()] = match.end()\n    return fret_pos\n\ndef apply_amount(col, amount):\n    col_width = 0\n    for i, fret in enumerate(col):\n        new_fret = re.search('[0-9]+', fret)\n        if new_fret:\n            new_fret = int(new_fret.group(0)) + amount\n            if new_fret > 22 or new_fret < 0:\n                return 'Out of frets!', None\n            if len(str(new_fret)) > col_width:\n                col_width = len(str(new_fret))\n            col[i] = str(new_fret)\n    return col, col_width\n\ndef adjust_column_width(col, col_width):\n    for i, row in enumerate(col):\n        if len(row) < col_width:\n            col[i] = col[i] + '-' * (col_width - len(row))\n        if len(row) > col_width:\n            col[i] = col[i][:col_width - len(row)]\n    return col\n\n\nt = transpose(2, [\n'e|--------5-7-----7-|-8-----8-2-----2-|-0---------0-----|-----------------|',\n'B|-10---5-----5-----|---5-------3-----|---1---1-----1---|-0-1-1-----------|',\n'G|----5---------5---|-----5-------2---|-----2---------2-|-0-2-2-----------|',\n'D|-12-------6-------|-5-------4-------|-3---------------|-----------------|',\n'A|------------------|-----------------|-----------------|-2-0-0---0--/8-7-|',\n'E|------------------|-----------------|-----------------|-----------------|'])        \n\nprint(t)\n\n\"\"\"\nt = transpose(-1, [\n'e|-----------------|---------------|----------------|------------------|',\n'B|-----------------|---------------|----------------|------------------|',\n'G|--0---3---5----0-|---3---6-5-----|-0---3---5----3-|---0----(0)-------|',\n'D|--0---3---5----0-|---3---6-5-----|-0---3---5----3-|---0----(0)-------|',\n'A|-----------------|---------------|----------------|------------------|',\n'E|-----------------|---------------|----------------|------------------|'])\nt = transpose(+2, [\n'e|----------5/6-6-6-5/6-6-6-6-6-6------------------------------------|',\n'B|-------6--5/6-6-6-5/6-6-6-6-6-6-9-8-6-6----------------------------|',\n'G|---6h7--------------------------------6h7--------------------------|',\n'D|-8----------------------------------------8-6--8-8-8-8-8-8-8-8-----|',\n'A|-----------------------------------------------8-8-8-8-8-8-8-8-----|',\n'E|-------------------------------------------------------------------|'])\nprint(t)\n\"\"\"\n\n\"\"\"\n'e|-----------7/8-8-8-7/8-8-8-8-8-8-----------------------------------------------|',\n'B|--------8--7/8-8-8-7/8-8-8-8-8-8-11-10-8-8-------------------------------------|',\n'G|----8h9----------------------------------8h9-----------------------------------|',\n'D|-10------------------------------------------10-8--10-10-10-10-10-10-10-10-----|',\n'A|---------------------------------------------------10-10-10-10-10-10-10-10-----|',\n'E|-------------------------------------------------------------------------------|'\n\"\"\"", "import itertools\n\ndef transpose(amount, tab):\n    shorten_dash = False\n    for i in range(0,6):\n        split_i = [\"\".join(y) for x,y in itertools.groupby(tab[i],key=str.isdigit)]\n        trans = \"\"\n        for gr in split_i:\n            if gr.isnumeric():\n                old = int(gr)\n                new = old + amount\n                if not 0 <= new <=22: return 'Out of frets!'\n                trans += str(new)\n                if (old < 10) and (new >= 10):\n                    ins = len(trans) - 1\n                    for j in range(0,6):\n                        if not j == i:\n                            if tab[j][ins-1:ins+1].isdigit(): shorten_dash = True\n                    if not shorten_dash:\n                        for j in range(0,6):\n                            if not j == i:\n                                tab[j] = tab[j][:ins] + \"-\" + tab[j][ins:]\n                if (old >= 10) and (new < 10):\n                    ins = len(trans)\n                    add_dash = False\n                    for j in range(0,6):\n                        if not j == i:\n                            if tab[j][ins-1:ins+1].isdigit(): add_dash = True\n                    if add_dash:\n                        trans += \"-\"\n                    else:\n                        for j in range(0,6):\n                            if not j == i:\n                                tab[j] = tab[j][:ins] + tab[j][ins+1:]\n            else:\n                if shorten_dash:\n                    gr = gr[1:]\n                    shorten_dash = False\n                trans += gr\n        tab[i] = trans\n    return tab", "def transpose(amount, tab):\n    col_tab = list(map(list, zip(*tab)))\n\n    for i, j in enumerate(col_tab):\n        double = False\n        for a in range(len(j)):\n            if col_tab[i][a].isdigit() and col_tab[i+1][a].isdigit():\n                double = True\n                col_tab[i][a] = col_tab[i][a] + col_tab[i+1][a]\n\n        if double:\n            col_tab.remove(col_tab[i+1])\n\n    for i, j in enumerate(col_tab):\n        for a in range(len(j)):\n            if j[a].isdigit(): \n                new_note = int(j[a]) + amount\n                if new_note < 0 or new_note > 22:\n                    return 'Out of frets!'\n                else:\n                    col_tab[i][a]  = str(new_note)\n\n    for j, k in enumerate(col_tab):\n        if any(len(x) > 1 for x in k):\n            col_tab[j] = [i + '-' if len(i) < 2 else i for i in k]\n            \n    return [''.join(j) for i, j in enumerate(list(map(list, zip(*col_tab))))]", "def transpose(amount, tab):\n    position = []\n    position_neg = False\n    result = []\n    for line in tab:\n        res = ''\n        for counter, letter in enumerate(line):\n            if letter.isdigit():\n                if line[counter-1].isdigit():\n                    continue\n                if line[counter+1].isdigit():\n                    if (int(letter+line[counter+1]) + amount) <= 22:\n                        res += str(int(letter+line[counter+1]) + amount)\n                        if len(str(int(letter+line[counter+1]) + amount)) == 1:\n                            position.append(counter)\n                            position_neg = True\n                    else:\n                        return 'Out of frets!'\n                else:\n                    if len(str(int(letter) + amount)) == 2:\n                        if int(letter) + amount < 0:\n                            return 'Out of frets!'\n                        res += str(int(letter) + amount)\n                        position.append(counter)\n                    else:\n                        res += str(int(letter) + amount)\n            else:\n                res += letter\n        result.append(res)\n\n    position = list(set(position))\n    position.sort()\n    for counter, line in enumerate(result):\n        added = 0\n        for insert in position:\n            if not position_neg:\n                double_in_col = False\n                for line2 in tab:\n                    if line2[insert].isdigit() and line2[insert + 1].isdigit():\n                        double_in_col = True\n                if double_in_col:\n                    if result[counter][insert + added].isdigit():\n                        if result[counter][insert + added + 1].isdigit():\n                            if not tab[counter][insert + 1].isdigit():\n                                result[counter] = result[counter][:insert + added + 2] + result[counter][insert + added + 3:]\n                else:\n                    if result[counter][insert+added].isdigit():\n                        if result[counter][insert+added+1].isdigit():\n                            if tab[counter][insert+1].isdigit():\n                                result[counter] = result[counter][:insert+added+2] +'-'+ result[counter][insert+added+2:]\n                        else:\n                            result[counter] = result[counter][:insert+added+1] +'-'+ result[counter][insert+added+1:]\n                    else:\n                        result[counter] = result[counter][:insert + added + 1] + '-' + result[counter][insert + added + 1:]\n                    added += 1\n            else:\n                double_in_col = False\n                for line2 in result:\n                    if line2[insert+added].isdigit() and line2[insert+1+added].isdigit():\n                        double_in_col=True\n                if double_in_col:\n                    if result[counter][insert + added].isdigit():\n                        if not result[counter][insert + added + 1].isdigit():\n                            if tab[counter][insert + 1].isdigit():\n                                result[counter] = result[counter][:insert + added + 1] + '-' + result[counter][insert + added + 1:]\n                else:\n                    if result[counter][insert + added].isdigit():\n                        if not result[counter][insert + added + 1].isdigit():\n                            if tab[counter][insert + 1].isdigit():\n                                added -= 1\n                                continue\n                    result[counter] = result[counter][:insert + added + 2] + result[counter][insert + added + 3:]\n                    added -= 1\n    return result", "\ndef transpose(amount, tab):    \n    resultTab = ['' for tabStr in tab]\n    numChars = set(char for char in '0123456789')\n    \n    i = 0\n    while i < len(tab[0]):\n        for tabNum, tabStr in enumerate(tab):\n            try:\n                valStr = tabStr[i]\n                \n                # Are we looking at the second character of a two character number\n                if not (i > 0 and valStr in numChars and tabStr[i-1] in numChars): \n                    \n                    # If the next character is a number to complete a two character number\n                    if valStr is not '-' and i+1 < len(tabStr) and tabStr[i+1] in numChars:\n                        valStr += tabStr[i+1]\n\n                    val = int(valStr)\n                    transposedVal = val + amount\n\n                    if transposedVal > 22 or transposedVal < 0:\n                        return 'Out of frets!'\n\n                    resultTab[tabNum] += str(transposedVal)\n                    \n            except ValueError:\n                resultTab[tabNum] += tabStr[i]\n                \n        maxLineLength = max([len(s) for s in resultTab])\n        minLineLength = min([len(s) for s in resultTab])\n\n        shouldTrim = False\n        if maxLineLength != minLineLength:\n            # This happens if the input string had a two character number that went down to a one\n            # character number after the transpose\n            shouldTrim = all([ (len(s) == minLineLength or s[len(s)-1] == '-') for s in resultTab])\n            if shouldTrim:\n                i += 1\n        \n        \n        for resTabNum, resTabStr in enumerate(resultTab):\n            if shouldTrim:\n                resultTab[resTabNum] = (resTabStr)[0:minLineLength]\n            resultTab[resTabNum] = (resTabStr + '-')[0:maxLineLength]\n            \n        i += 1\n    \n    return resultTab\n", "import re\n\nempty = [''] * 6\nseparator = ['-'] * 6\nbar = ['|'] * 6\n\ndef transpose(amount, tab):\n\n    # \"And if you listen very hard\n    #  The tune will come to you at last...\"\n\n    #           -- Stairway to Heaven (1971)\n\n    try:\n        result = empty\n        chunk = empty\n\n        for i in range(len(tab[0])):\n            column = get_column(tab, i)\n            chunk = merge(chunk, column)\n    \n            if chunk == separator or chunk == bar:\n                result = merge(result, chunk)\n                chunk = empty\n            elif column == separator:\n                recalculated = recalculate(amount, chunk)\n                result = merge(result, recalculated)\n                chunk = empty\n\n        return result\n    except OutOfFretsException as oof:\n        return str(oof)\n\ndef get_column(tab, column_idx):\n    return [tab[string][column_idx] for string in range(0, 6)]\n\ndef merge(left, right):\n    return [left[i] + right[i] for i in range(0, 6)]\n\ndef recalculate(amount, chunk):\n    recalculated = [shift(string, amount) for string in chunk]\n    max_length = max([len(s) for s in recalculated])\n    padded = [string.ljust(max_length, '-') for string in recalculated]\n    return shrink(padded)\n\ndef shrink(chunk):\n    new_chunk = empty\n    for i in range(len(chunk[0])):\n        current_column = get_column(chunk, i)\n        next_column = get_column(chunk, i + 1) if i + 1 < len(chunk[0]) else None\n\n        if current_column == separator and next_column == separator:\n            continue\n        else:\n            new_chunk = merge(new_chunk, current_column)\n\n    return new_chunk\n\ndef shift(string, amount):\n    tokens = re.findall(r'[^\\d]*[0-9]+[^\\d]*', string)\n    if len(tokens) > 0:\n        numbers = [int(re.findall(r'[0-9]+', t)[0]) for t in tokens]\n        shifted = [(n, n + amount) for n in numbers]\n        if (any(s[1] > 22 or s[1] < 0 for s in shifted)):\n            raise OutOfFretsException()\n        else:\n            replaced = [tokens[i].replace(str(shifted[i][0]), str(shifted[i][1])) for i in range(len(tokens))]\n            return \"\".join(replaced)\n    else:\n        return string\n\nclass OutOfFretsException(Exception):\n    def __init__(self):\n        Exception.__init__(self, 'Out of frets!')", "def write_bar(new_bar, beat, amount):                                               \n    new_beat = [str(int(fret) + amount) if fret.isnumeric() else fret for fret in beat]\n    values = [int(fret) for fret in new_beat if fret.lstrip('-').isnumeric()]       \n    if values and (max(values) > 22 or min(values) <= 0):                           \n        raise ValueError('Out of frets!')                                           \n    formatted_beat = [beat.ljust(len(max(new_beat, key=len)), '-') for beat in new_beat]\n    for beat in range(len(formatted_beat)):                                         \n        new_bar[beat] += formatted_beat[beat]                                       \n    return new_bar                                                                  \n                                                                                    \ndef transpose_bar(amount, bar):                                                     \n    new_bar = [''] * 6                                                              \n    frets = [''] * 6                                                                \n    joined = False                                                                  \n    for beat in range(len(bar[0])):                                                 \n        if not joined:                                                              \n            previous_beat = frets                                                   \n        else:                                                                       \n            previous_beat = [''] * 6                                                \n        joined = False                                                              \n        frets = [gen[beat] for gen in bar]                                          \n        for fret in range(len(frets)):                                              \n            if frets[fret].isnumeric() and previous_beat[fret].isnumeric():         \n                previous_beat[fret] += frets[fret]                                  \n                joined = True                                                       \n        new_bar = write_bar(new_bar, previous_beat, amount)                         \n                                                                                    \n    if not joined:                                                                  \n        new_bar = write_bar(new_bar, frets, amount)                                 \n                                                                                    \n    return new_bar                                                                  \n                                                                                    \n                                                                                    \ndef transpose(amount, tab):                                                         \n    string_bars = [gen.split('|')[1:-1] for gen in tab]                             \n    bars = list(zip(*string_bars))                                                  \n    new_bars = [('e','B','G','D','A','E'),]                                         \n    try:                                                                            \n        for bar in bars:                                                            \n            new_bars.append(transpose_bar(amount, bar))                             \n        new_bars.append([''] * 6)                                                   \n        transposed = list(zip(*new_bars))                                           \n        return ['|'.join(gen) for gen in transposed]                                \n    except ValueError as e:                                                         \n        return str(e)   ", "class EndException(Exception):\n    pass\n\nclass DoneAccumulatingException(Exception):\n    pass\n\nclass OutOfFretsException(Exception):\n    pass\n\ndef get_column(array, index):\n    ret = []\n    try:\n        for line in array:\n            ret.append(line[index])\n        return ret\n    except IndexError:\n        raise EndException()\n    \n    \ndef add_to_tab(tab, column):\n    for i, value in enumerate(column):\n        tab[i] += value\n\n\ndef accumulate(accumulate_array, column):\n    if set(map(lambda x: str.isnumeric(x), column)) == {False}:\n        raise DoneAccumulatingException()\n    else:\n        for i, value in enumerate(column):\n            accumulate_array[i] += value\n\n\ndef adjust_accumulator(accumulator, adjustment):\n    \n    column_width = 0\n    adjusted_values = []\n    for item in accumulator:\n        item = item.strip('-')\n        if str.isnumeric(item):\n            new_value = int(item) + adjustment\n            if new_value < 0 or new_value > 22:\n                raise OutOfFretsException()\n            item = str(new_value)\n        adjusted_values.append(item)\n        if len(item) > column_width:\n            column_width = len(item)\n\n    new_accumulator = [x + ('-' * (column_width - len(x))) for x in adjusted_values]\n    return new_accumulator\n\ndef transpose(amount, tab):\n\n    idx = 0\n    new_tab = [''] * 6\n    aa = [''] * 6\n    while True:\n        try:\n            column = get_column(tab, idx)\n        except EndException:\n            break\n        \n        try:\n            accumulate(aa, column)\n        except DoneAccumulatingException:\n            try:\n                aa = adjust_accumulator(aa, amount)\n            except OutOfFretsException:\n                return \"Out of frets!\"\n\n            add_to_tab(new_tab, aa)\n            add_to_tab(new_tab, column)\n            aa = [''] * 6\n            \n            #print(\"UPDATED TAB\")\n            #for item in new_tab:\n            #    print(item[-20:])\n\n        idx += 1\n        \n    return new_tab"]