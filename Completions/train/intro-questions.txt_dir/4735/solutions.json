["from bisect import bisect_left as keep_order", "from bisect import bisect_left\n\ndef keep_order(arr, val):\n    return bisect_left(arr, val)", "def keep_order(ary, val):\n    for i, x in enumerate(ary):\n        if x >= val:\n            return i\n    return len(ary)", "def keep_order(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)", "def keep_order(ary, val):\n    return len(list(x for x in ary if x < val))", "def keep_order(ary, val):\n    for i,_ in enumerate(ary):\n        if val <= ary[i]:\n            return i\n    return len(ary)\n\n", "def keep_order(ar, val):\n    for i in range(len(ar)):\n        if ar[i]>=val: return i\n    return len(ar)", "def keep_order(a, value):\n    for i in range(len(a)):\n        if value <= a[i]:\n            return i\n    return len(a)", "def keep_order(ary, val):\n    return sum(i<val for i in ary)", "def keep_order(ary, val):\n    if not ary:\n        return 0\n    for x in range(len(ary)):\n        if val <= ary[x]:\n            return x\n    return x+1        \n    \n", "def keep_order(ary, val):\n    ary.append(val)\n    return sorted(ary).index(val)", "from bisect import bisect_left as keep_order ###", "def keep_order(ary, val):\n    return next((ary.index(x) for x in ary if x>=val), len(ary))", "def keep_order(ary, val):\n    if not ary: return 0\n    if max(ary) < val:\n        return len(ary)\n    for i,num in enumerate(ary):\n        if num >= val:\n            return i\n", "def keep_order(ary, val):\n    print(ary, val)\n    a = ary\n    a.append(val)\n    a.sort()\n    for i, j in enumerate(a):\n        if j == val:\n            return i", "def keep_order(ary, val):\n    return next((i for i,(v1,v2) in enumerate(zip(ary,ary[1:]),1) if v1<=val<=v2),len(ary)) if ary and val>ary[0] else 0", "def keep_order(ary, val):\n    idx = 0\n    for i in range(len(ary)):\n        if val > ary[idx]:\n            idx += 1\n        else:\n            return idx\n    return idx", "from itertools import takewhile\ndef keep_order(ary, val):\n    return len(list(takewhile(lambda v: v < val, ary)))\n", "def keep_order(ary, val):\n\n        \n    if val not in ary:\n    \n        ary.append(val)\n   \n    ary.sort()\n    \n    return ary.index(val)\n", "def keep_order(a,x):\n    for i,v in enumerate(a):\n        if v>=x:\n            return i\n    return len(a)"]