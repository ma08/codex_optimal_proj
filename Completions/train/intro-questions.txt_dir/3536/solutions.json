["def cog_RPM(cogs, n):\n    return [\n        cogs[n] / cogs[0] * (-1 if n % 2 else 1),\n        cogs[n] / cogs[-1] * (1 if (len(cogs) - n) % 2 else -1),\n    ]", "def cog_RPM(cogs, n):\n    sign1 = -1 if n % 2 else 1\n    sign2  = 1 if (len(cogs) - n) % 2 else -1\n    return [sign1 * cogs[n] / cogs[0], sign2 * cogs[n] / cogs[-1]]", "def cog_RPM(l, i):\n    return [(-1 + (i + 1) % 2 * 2) * l[i] / l[0], (-1 + (len(l) - i) % 2 * 2) * l[i] / l[-1]]", "def cog_RPM(cogs, n):\n    a,b=1,1\n    if n%2==1:\n        a = -1\n    if len(cogs)%2==n%2:\n            b = -1\n    return [a*cogs[n]/cogs[0],b*cogs[n]/cogs[-1]]", "def cog_RPM(cogs, n):\n    return [cogs[n]/cogs[0] * (-1)**n, cogs[n]/cogs[-1] * (-1)**(len(cogs)-n-1)]", "def cog_RPM(cogs, n):\n    output = []\n    if n % 2 == 0:\n        a = 1\n        if (len(cogs) % 2-1) == 0:\n            b = 1\n        else:\n            b = -1\n    else:\n        a = -1\n        if (len(cogs)-1) % 2 == 0:\n            b = -1\n        else:\n            b = 1\n    output.append(cogs[n]/cogs[0]*a)\n    output.append(cogs[n]/cogs[-1]*b)\n    return output", "def cog_RPM(cogs, idx):\n    first = cogs[idx] / cogs[0] * [1, -1][idx & 1]\n    last = cogs[idx] / cogs[-1] * [1, -1][(len(cogs) - idx - 1) & 1]\n    return [first, last]", "def cog_RPM(cogs, n):\n    r=[cogs[n]/cogs[0],cogs[n]/cogs[-1]]\n    if n%2==1:\n        r[0]*=-1\n    if (len(cogs)-n)%2==0:\n        r[1]*=-1\n    return r", "def cog_RPM(cogs, i):\n    x, y = cogs[i] / cogs[0], cogs[i] / cogs[-1]\n    if i & 1: x = -x\n    if len(cogs) - 1 - i & 1: y = -y\n    return [x, y]", "from functools import reduce\nfrom operator import mul\n\ndef cog_RPM(cogs, n):\n    f = lambda l: 1 if len(l) < 2 else reduce(mul, [ -x/y for x,y in zip(l,l[1:]) ] )\n    return [ f(cogs[:n+1][::-1]), f(cogs[n:]) ]"]