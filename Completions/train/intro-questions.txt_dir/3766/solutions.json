["def getAllPrimeFactors(n):\n    if n == 0: return []\n    elif n == 1: return [1]\n    elif type(n) != int: return errora\n    elif n < 0: return errora\n    allfacts = []\n    current = 2\n    n_copy = n\n    while current <= n:\n        if n_copy % current == 0:\n            allfacts.append(current)\n            n_copy /= current\n        else:\n            current += 1\n    return allfacts\n    \n    \ndef getUniquePrimeFactorsWithCount(n):\n    if type(n) != int: return errorb\n    elif n < 0: return errorb\n    primes = []\n    power = []\n    listA = getAllPrimeFactors(n)\n    for i in range(len(listA)):\n        if listA[i] not in primes:\n            primes.append(listA[i])\n            power.append(1)\n        else:\n            power[-1] += 1\n    return [primes, power]\n\ndef getUniquePrimeFactorsWithProducts(n):\n    if type(n) != int: return errorc\n    elif n < 0: return errorc\n    listlist = getUniquePrimeFactorsWithCount(n)\n    listc = []\n    for i in range(len(listlist[0])):\n        listc.append(listlist[0][i] ** listlist[1][i])\n    return listc\n\nerrora = []\nerrorb = [[], []]\nerrorc = []", "from collections import Counter\ndef getAllPrimeFactors(n):\n  if type(n)!=int:return []\n  li, j = [], 2\n  while j*j <= n:\n      if n % j : j += 1 ; continue\n      li.append(j) ; n //= j\n  return li + [[n],[]][n<1]\n\ndef getUniquePrimeFactorsWithCount(n):\n  r = Counter(getAllPrimeFactors(n))\n  return [list(r.keys()),list(r.values())]\n\ngetUniquePrimeFactorsWithProducts=lambda n:[i**j for i,j in zip(*getUniquePrimeFactorsWithCount(n))]", "from collections import defaultdict\nfrom functools import lru_cache\nfrom itertools import chain\n\n@lru_cache(maxsize=None)\ndef factors(n):\n    if n == 1: return [(1, 1)]\n    res, wheel = defaultdict(int), [1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6]\n    x, y = 2, 0\n    while x*x <= n:\n        if not n%x:\n            res[x] += 1\n            n //= x\n        else:\n            x += wheel[y]\n            y = 3 if y == 10 else y+1\n    res[n] += 1\n    return res.items()\n\ndef getAllPrimeFactors(n):\n    return list(chain.from_iterable([k]*v for k,v in factors(n))) if isinstance(n, int) and n > 0 else []\n\ndef getUniquePrimeFactorsWithCount(n):\n    return list(map(list, zip(*factors(n)))) if isinstance(n, int) and n > 0 else [[], []]\n\ndef getUniquePrimeFactorsWithProducts(n):\n    return [k**v for k,v in factors(n)] if isinstance(n, int) and n > 0 else []", "\n        \ndef getAllPrimeFactors(n):\n    result = []\n    if isinstance(n, int) and n > 0 :\n        if n == 1:\n            result = [1]\n        number = 2\n        while n > 1:\n            print(n)\n            if not n % number :\n                result.append(number)\n                n /= number\n                number = 2\n            else:\n                number += 1\n    return result\n                \n            \n  #your code here\n\ndef getUniquePrimeFactorsWithCount(n):\n    pf = getAllPrimeFactors(n)\n    r1 = []\n    r2 = []\n    if pf:\n        r1 = list(set(pf))\n        r2 = [pf.count(x) for x in r1 ]\n    return [r1, r2]\n                \n\ndef getUniquePrimeFactorsWithProducts(n):\n    return [x ** y for (x,y) in zip(*getUniquePrimeFactorsWithCount(n))]", "import math\nimport collections\n\n\ndef getAllPrimeFactors(n):\n    if isinstance(n, int) and n > -1:\n        if n != 1:\n            listy, m, x = [], n, True\n            while x:\n                for i in range(2, int(math.sqrt(n)) + 1):\n                    if n % i == 0:\n                        n = n // i\n                        listy.append(i)\n                        break\n                else:\n                    x = False\n            if m > 1:\n                listy.append(n)\n            return listy\n        else:\n            return [1]\n    else:\n        return []\ndef getUniquePrimeFactorsWithCount(n):\n    if isinstance(n, int) and n > -1:\n        if n != 1:\n            listy, m, x = [], n, True\n            while x:\n                for i in range(2, int(math.sqrt(n)) + 1):\n                    if n % i == 0:\n                        n = n // i\n                        listy.append(i)\n                        break\n                else:\n                    x = False\n            if m > 1:\n                listy.append(n)\n        else:\n            listy = [1]\n    else:\n        listy = []\n    fancy_dict = collections.Counter()\n    resulty_list = [[],[]]\n    for number in listy:\n        fancy_dict[number] += 1\n    for key, value in list(fancy_dict.items()):\n        resulty_list[0].append(key)\n        resulty_list[1].append(value)\n    return resulty_list\n\ndef getUniquePrimeFactorsWithProducts(n):\n    if isinstance(n, int) and n > -1:\n        if n != 1:\n            listy, m, x = [], n, True\n            while x:\n                for i in range(2, int(math.sqrt(n)) + 1):\n                    if n % i == 0:\n                        n = n // i\n                        listy.append(i)\n                        break\n                else:\n                    x = False\n            if m > 1:\n                listy.append(n)\n        else:\n            listy = [1]\n    else:\n        listy = []\n    fancy_dict = collections.Counter()\n    resulty_list = [[],[]]\n    for number in listy:\n        fancy_dict[number] += 1\n    for key, value in list(fancy_dict.items()):\n        resulty_list[0].append(key)\n        resulty_list[1].append(value)\n    return [resulty_list[0][i]**resulty_list[1][i] for i in range(len(resulty_list[0]))]\n", "# RWH primes\nLIMIT = 10**6\nsieve = [True] * (LIMIT//2)\nfor i in range(3, int(LIMIT**0.5)+1, 2):\n    if sieve[i//2]: sieve[i*i//2::i] = [False] * ((LIMIT-i*i-1)//2//i+1)\nPRIMES = [2] + [2*i+1 for i in range(1, LIMIT//2) if sieve[i]]\n\n\nfrom collections import Counter\n\ndef getAllPrimeFactors(n):\n    # errors and zero\n    if not type(n) == int or n < 1:\n        return []\n    \n    # edge cases\n    if n in (1, 2):\n        return [n]\n    \n    # factorisation\n    factors = []\n    \n    for p in PRIMES:\n        if p*p > n:\n            break\n        while n % p == 0:\n            n //= p\n            factors.append(p)\n    \n    return factors + [n] * (n > 1)\n\n\ndef getUniquePrimeFactorsWithCount(n):\n    factors = Counter(getAllPrimeFactors(n))\n    return [ list(factors.keys()), list(factors.values()) ]\n\n\ndef getUniquePrimeFactorsWithProducts(n):\n    factors = Counter(getAllPrimeFactors(n))\n    return [ p**e for p, e in factors.items() ]", "from collections import Counter\n\ndef getAllPrimeFactors(n):\n    if n==1: return [1]\n    lst, p, n = [], 2, 1 if not isinstance(n,int) or n<0 else n\n    while n>1:\n        while not n%p:\n            lst.append(p)\n            n //= p\n        p += 1 + (p!=2)\n    return lst\n\ndef getUniquePrimeFactorsWithCount(n):\n    return list(map(list, zip(*Counter(getAllPrimeFactors(n)).items()))) or [[],[]]\n\ndef getUniquePrimeFactorsWithProducts(n):\n    return [k**v for k,v in Counter(getAllPrimeFactors(n)).items()]", "def getAllPrimeFactors(n):\n    if not type(n) is int:\n        n = 0\n    elif n < 0:\n        n = 0\n    results = []\n    number = 2\n    while number < n:\n        if not n % number:\n            n /= number\n            results.append(number)\n            number = 2\n        else:\n            number += 1\n    if n: results.append(int(n))\n    return results\n\ndef getUniquePrimeFactorsWithCount(n):\n    results = getAllPrimeFactors(n)\n    counted = [[],[]]\n    if not results == []:\n        for i in range(results[-1]+1):\n            if i in results: \n                counted[0].append(i)\n                counted[1].append(results.count(i))            \n    return counted\n\ndef getUniquePrimeFactorsWithProducts(n):\n    counted = getUniquePrimeFactorsWithCount(n)\n    products = []\n    if not counted == [[],[]]:\n        for i in range(len(counted[0])):\n            products.append(counted[0][i]**counted[1][i])\n    return products", "def getAllPrimeFactors(n):\n  if type(n) is not int or n < 1:\n      return []\n  elif n < 3:\n      return [n]\n  factors = []\n  while n > 1:\n      for i in range(2, n+1):\n          if is_prime(i) and not n % i:\n              factors.append(i)\n              n = int(n/i)\n              break\n  return factors\n\ndef getUniquePrimeFactorsWithCount(n):\n  f = getAllPrimeFactors(n)\n  factors = list(set(f))\n  powers = [f.count(factor) for factor in factors]\n  return [factors, powers]\n\ndef getUniquePrimeFactorsWithProducts(n):\n  cf = getUniquePrimeFactorsWithCount(n)\n  return [factor**count for factor, count in zip(cf[0], cf[1])]\n  \ndef is_prime(n):\n    for i in range(2, n):\n        if not n % i:\n            return False\n    return True\n"]