["def pattern(n, x=1, y=1, *args):\n    if n < 1:\n        return \"\"\n    result = []\n    for i in range(1, n + 1):\n        line = \" \" * (i - 1) + str(i % 10) + \" \" * (n - i)\n        result.append((line + line[::-1][1:]) + (line[1:] + line[::-1][1:]) * (x - 1))\n    return \"\\n\".join((result + result[::-1][1:]) + (result[1:] + result[::-1][1:]) * (y - 1))\n", "def pattern(n,y=1,z=1,*e):\n    res = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        res.append( patt(line) + cott(patt(line) ,y))\n        \n    res1 =  patt(res) + cott(patt(res), z )\n    return '\\n'.join( res1 ) \n    \npatt = lambda elem : elem + elem[::-1][1:]\ncott = lambda elem, x : elem[1:] * (x-1)", "def pattern(*arg):\n    res = []\n    arg = list(arg) + [1,1]\n    n, y, z = arg[:3]\n\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        res.append( patt(line) + cott(patt(line) ,y))\n        \n    res1 =  patt(res) + cott(patt(res), z )\n    return '\\n'.join( res1 ) \n    \npatt = lambda elem : elem + elem[::-1][1:]\ncott = lambda elem, x=0 : elem[1:] * (x-1)", "def getHorizontal(s,x): return s+s[1:]*(x-1)\n\ndef pattern(n,x=1,y=1,*a):\n    if n<1: return ''\n    l, x, y = 2*n-1, max(1,x), max(1,y)\n    sngl    = [getHorizontal('{}{}{}'.format(z%10, ' '*(l-2*z), z%10 if z!=n else '').center(l), x) for z in range(1,n+1)]\n    cross   = sngl + sngl[:-1][::-1]\n    return '\\n'.join( cross + cross[1:]*(y-1) )", "def pattern(n,x=1,y=1,*args):\n    lines=[]; x-=1\n    for i in range(1,n+1):\n        line=' '*(i-1)+str(i)[-1]+' '*(n-i)\n        line+=line[-2::-1]\n        line+=line[1:]*x        \n        lines.append(line)\n    pat=lines+lines[-2::-1]\n    pat+=pat[1:]*(y-1)\n    return '\\n'.join(pat)\n", "def pattern(n, x=1, y=1, *_):\n    pat = [\"\".join([\" \" * (i - 1), str(i % 10), \" \" * (n - i)]) for i in range(1,n+1)]\n    pat = [\"\".join([i, i[-2::-1]]) for i in pat]\n    pat = [\"\".join([i, i[1:] * (x-1)]) for i in pat]\n    pat1 = \"\\n\".join(pat + pat[-2::-1])\n    return '' if n<1 else pat1+('\\n'+\"\\n\".join(pat[1:] + pat[-2::-1]))*(y-1)\n", "pattern=lambda n,x=1,y=1,*args: \"\\n\".join((lambda h: h+([\"\\n\".join(h[1:]) for k in range(1,y)]))([(lambda r: \"\".join(r)+\"\".join([\"\".join(r[1:]) for j in range(1,x)]))([\" \"]*(i-1)+[str(i%10)]+[\" \"]*(2*(n-i)-1)+[str(i%10)]+[\" \"]*(i-1)) for i in range(1,n)]+[(lambda r: r+\"\".join([r[1:] for j in range(1,x)]) )(\" \"*(n-1)+str(n%10)+\" \"*(n-1))]+[(lambda r: \"\".join(r)+\"\".join([\"\".join(r[1:]) for j in range(1,x)]))([\" \"]*(i-1)+[str(i%10)]+[\" \"]*(2*(n-i)-1)+[str(i%10)]+[\" \"]*(i-1)) for i in range(n-1,0,-1)])) if n>0 else \"\"\n\n#this one-liner was not so easy :D Dedicated to my fellow codewarrior ChristianECooper:\n#knowing that my code can be read by someone that good and precise keeps me surely\n#motivated; against him I may have the upper hand just with regexes (and he\n#certainly is better at explaining), but I won't give up that easily ;)\n", "def pattern(n,m=1,l=1,*args):\n    if n < 1:return ''\n    m = max(1,m)\n    li, mid, r = ['1'+' '*((n*2-1)-2)+'1'+(' '*((n*2-1)-2)+'1')*(m-1)],1,(n*2-1)-2-2\n    for i in range(2, n + 1):\n        li.append(' '*(i-1)+f\"{' '*mid}\".join([str(i%10)+' '*r+(str(i%10)if i!=n else '')for o in range(m)])+' '*(i-1))\n        r -= 2 ; mid += 2\n    li = li + li[:-1][::-1]\n    well = li.copy()\n    return \"\\n\".join(li + [\"\\n\".join(well[1:]) for i in range(l-1)])", "m,r=lambda s:s+s[-2::-1],lambda s,n:s+s[1:]*n\npattern=lambda n,h=1,v=1,*a:'\\n'.join(r(m(list(r(m(' '*(i-1)+str(i%10)+' '*(n-i)),h-1)for i in range(1,n+1))),v-1))"]