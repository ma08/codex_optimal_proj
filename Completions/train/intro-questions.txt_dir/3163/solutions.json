["triangular_sum=lambda n: (-0.5+(1+8*n)**0.5/2.0)**0.5%1==0", "from math import sqrt\n\ndef triangular_sum(n):\n    return sqrt(2 * (sqrt(8*n + 1) - 1)) % 2 == 0", "def triangular_sum(n):\n    r = int((n*2)**0.5)\n    return r * (r+1) / 2 == n and round(r**0.5)**2 == r", "triangular_sum = lambda n: ((((1+8*n)**0.5 - 1) / 2)**0.5).is_integer()", "def triangular_sum(n):\n    return ((2*n+.25)**.5-.5)**.5 % 1 == 0", "triangular_sum=lambda n:not((32*n+4)**.5-2)**.5%1", "t = [n * (n + 1) // 2 for n in range(2, 32000)]\nmemo = {a ** 2 + b ** 2 for a, b in zip(t, t[1:])}\n\ndef triangular_sum(n):\n    return n in memo", "a = [i*(i+1)//2 for i in range(211)]\nb = [i**2+j**2 for i,j in zip(a,a[1:])]\n\ndef triangular_sum(n):\n    return n in b", "def triangular_sum(n):\n    return ((((1 + 8*n)**0.5 - 1) / 2)**0.5).is_integer()", "def triangular_sum(t):\n    triangles = [1]\n    n = 2\n    while triangles[-1] < t**0.5:\n        triangles.append(triangles[-1] + n)\n        n += 1\n    for n1 in triangles:\n        for n2 in triangles:\n            if n1 != n2 and n1*n1 + n2*n2 == t:\n                return True\n    return False\n"]