["def interpreter(tape):\n    memory, ptr, output, iCmd = {}, 0, \"\", 0\n    \n    while True:\n        cmd = tape[iCmd]\n        if   cmd == \">\":  ptr += 1\n        elif cmd == \"<\":  ptr -= 1\n        elif cmd == \"+\":  memory[ptr] = (memory.get(ptr, 0) + 1) % 256\n        elif cmd == \"-\":  memory[ptr] = (memory.get(ptr, 0) - 1) % 256\n        elif cmd == \"*\":  output += chr(memory.get(ptr, 0))\n        elif cmd == \"&\":  break\n        elif cmd == \"/\":  iCmd += memory.get(ptr, 0) == 0\n        elif cmd == \"\\\\\": iCmd += memory.get(ptr, 0) != 0\n        iCmd = (iCmd+1) % len(tape)\n    \n    return output", "def interpreter(tape):\n    memory, ptr, output, skip, i = {0: 0}, 0, \"\", False, 0\n    \n    while True:\n        command = tape[i]\n        i = (i + 1) % len(tape)\n        \n        if command in \"><+-*&/\\\\\" and skip:\n            skip = False\n            continue\n        \n        if   command == \">\":  ptr += 1\n        elif command == \"<\":  ptr -= 1\n        elif command == \"+\":  memory[ptr] = (memory.get(ptr, 0) + 1) % 256\n        elif command == \"-\":  memory[ptr] = (memory.get(ptr, 0) - 1) % 256\n        elif command == \"*\":  output += chr(memory.get(ptr, 0))\n        elif command == \"&\":  break\n        elif command == \"/\"  and memory[ptr] == 0:  skip = True\n        elif command == \"\\\\\" and memory[ptr] != 0:  skip = True\n    \n    return output", "import itertools\n\ndef interpreter(tape):    \n    cells, cell, out, skip = {}, 0, '', False\n    for c in itertools.cycle(tape):\n        if not skip:\n            if c == '>': cell += 1\n            if c == '<': cell -= 1\n            if c == '+': cells[cell] = 1 if cell not in cells else 0 if cells[cell] == 255 else cells[cell] + 1\n            if c == '-': cells[cell] = 255 if cell not in cells else 255 if cells[cell] == 0 else cells[cell] - 1\n            if c == '*': out += chr(cells.get(cell, 0))\n            if c == '&': break\n        skip = (c == '/' and cells.get(cell, 0) == 0) or (c == '\\\\' and cells.get(cell, 0))\n    return out", "def interpreter(tape):\n    infTick = Ticker()\n    infTick.run(tape)\n    return infTick.out\n    \nclass Ticker():\n    error = lambda x:None\n    doc   = {'>':'_incr', '<':'_decr', '*':'_addA', \n             '+':'_icrC', '-':'_dcrC', '/':'_skpZ', '\\\\':'_skpN', '&':'_error'}\n    \n    def __init__(self):\n        self.cell = 0\n        self.dat  = [0] * 255\n        self.out  = ''\n        self.skip = 0\n        self.end  = 0\n        \n    def skip(f):\n        def wrap(cls):\n            if not cls.skip:\n                return f(cls)\n            cls.skip = 0\n        return wrap\n\n    def run(self, com):\n        while not self.end and len(self.out) != 256:\n            [getattr(self, self.doc.get(k, 'error'))() for k in com]\n\n    def _skpZ(self):\n        if self.dat[self.cell] == 0:\n            self.skip = 1\n    \n    def _skpN(self):\n        if self.dat[self.cell] != 0:\n            self.skip = 1\n            \n    @skip\n    def _error(self):\n        self.end = 1\n        \n    @skip\n    def _addN(self):#!\n        self.dat[self.cell] = ord(self.out[-1])\n\n    @skip\n    def _dcrC(self):#-\n        self.dat[self.cell] -= 1\n    \n    @skip\n    def _icrC(self):#+\n        self.dat[self.cell] += 1\n        \n    @skip\n    def _addA(self):#*\n        self.out += chr(self.dat[self.cell]%256)\n        \n    @skip\n    def _incr(self):#>\n        self.cell += 1\n        \n    @skip\n    def _decr(self):#<\n        self.cell -= 1", "def interpreter(tape):\n    test = Ticker(tape)\n    test.run()\n    return test.out\n    \nclass Ticker():\n    error = lambda x:None\n    doc   = {'>':'_incr', '<':'_decr', '*':'_addA', \n             '+':'_icrC', '-':'_dcrC', '/':'_skpZ', '\\\\':'_skpN', '&':'_error'}\n    \n    def __init__(self, tape):\n        self.com = tape\n        self.cell = 0\n        self.dat = [0] * 255\n        self.out = ''\n        self.skip = 0\n        self.end = 0\n        \n    def skip(f):\n        def wrap(cond):\n            if not cond.skip:\n                return f(cond)\n            cond.skip = 0\n        return wrap\n\n    def run(self):\n        while not self.end and len(self.out) != 256:\n            [getattr(self, self.doc.get(k, 'error'))() for k in self.com]\n\n    def _skpZ(self):\n        if self.dat[self.cell] == 0:\n            self.skip = 1\n    \n    def _skpN(self):\n        if self.dat[self.cell] != 0:\n            self.skip = 1\n            \n    @skip\n    def _error(self):\n        self.end = 1\n        \n    @skip\n    def _addN(self):#!\n        self.dat[self.cell] = ord(self.out[-1])\n\n    @skip\n    def _dcrC(self):#-\n        self.dat[self.cell] -= 1\n    \n    @skip\n    def _icrC(self):#+\n        self.dat[self.cell] += 1\n        #\n    @skip\n    def _addA(self):#*\n        self.out += chr(self.dat[self.cell]%256)\n        \n    @skip\n    def _incr(self):#>\n        self.cell += 1\n        \n    @skip\n    def _decr(self):#<\n        self.cell -= 1\n          \n", "from collections import defaultdict\nfrom itertools import cycle\n\ndef interpreter(tape):\n    i, skip, D, res = 0, False, defaultdict(int), []\n    for c in cycle(tape):\n        if skip: skip = False\n        elif c == '>': i += 1\n        elif c == '<': i -= 1\n        elif c == '+': D[i] = (D[i] + 1)%256\n        elif c == '-': D[i] = (D[i] - 1)%256\n        elif c == '*': res.append(chr(D[i]))\n        elif c == '&': break\n        elif c == '/': skip = not D[i]\n        elif c == '\\\\': skip = D[i]\n    return ''.join(res)", "from collections import defaultdict\nfrom itertools import cycle\n\nvalid = ('<', '>', '+', '-', '*', '/', '\\\\', '&')\n\ndef interpreter(tape):\n    memory = defaultdict(int)\n    pointer = 0    \n    input = cycle(c for c in tape if c in valid)\n    output = ''    \n    \n    while True:\n        c = next(input)\n        if   c == '>': pointer += 1\n        elif c == '<': pointer -= 1\n        elif c == '+': memory[pointer] = (memory[pointer] + 1) % 256\n        elif c == '-': memory[pointer] = (memory[pointer] - 1) % 256\n        elif c == '*': output += chr(memory[pointer])\n        elif c == '/'  and not memory[pointer]: next(input)\n        elif c == '\\\\' and memory[pointer]: next(input)\n        elif c == '&': return output", "class InfiniTick:\n    def __init__(self):\n        self.mem = [0]\n        self.pointer = 0\n    \n    def move_right(self):\n        self.pointer += 1\n        if self.pointer == len(self.mem):\n            self.mem.append(0)\n    \n    def move_left(self):\n        if self.pointer != 0:\n            self.pointer -= 1\n        else:\n            self.mem.insert(0,0)\n            self.pointer = 0\n\n    def increment(self):\n        self.mem[self.pointer] += 1\n        if self.mem[self.pointer] > 255:\n            self.mem[self.pointer] = 0\n            \n    def decrement(self):\n        self.mem[self.pointer] -= 1\n        if self.mem[self.pointer] < 0:\n            self.mem[self.pointer] = 256 + self.mem[self.pointer]\n            \n    def output(self):\n        return chr(self.mem[self.pointer])\n\n    def process(self, tape):\n        result = \"\"\n        i = 0\n        \n        while True:\n            if tape[i] == \">\":\n                self.move_right()\n            elif tape[i] == \"<\":\n                self.move_left()\n            elif tape[i] == \"+\":\n                self.increment()\n            elif tape[i] == \"-\":\n                self.decrement()\n            elif tape[i] == \"*\":\n                result += self.output()\n            elif tape[i] == \"&\":\n                break\n            elif tape[i] == \"/\":\n                if self.mem[self.pointer] == 0:\n                    i += 1\n            elif tape[i] == \"\\\\\":\n                if self.mem[self.pointer] != 0:\n                    i += 1\n            i += 1\n            if i == len(tape):\n                i = 0\n            elif i > len(tape):\n                i = 1\n                \n        return result\n        \ndef interpreter(tape):\n    tick = InfiniTick()\n    return tick.process(tape)", "def interpreter(tape):\n    selector = 0\n    output = \"\"\n    array = [0]\n    commandIndex = 0\n    \n    while(True):\n      command = tape[commandIndex%len(tape)]\n      \n      if command == '>':\n        selector+=1;\n        if selector == len(array):\n          array.append(0)\n      \n      if command == '<':\n        if selector == 0:\n          array = [0] + array  \n        else:\n          selector-=1;\n        \n      if command == '+':\n        array[selector]+=1;\n        if array[selector] == 256:\n          array[selector] = 0\n      if command == '-':\n        array[selector]-=1;\n        if array[selector] == -1:\n          array[selector] = 255\n      if command == '/':\n        if array[selector] == 0:\n          commandIndex += 1\n      if command == '\\\\':\n        if array[selector] != 0:\n          commandIndex += 1\n      if command == '*':\n        output = output + chr(array[selector])\n      if command == '&':\n        return output        \n      commandIndex+=1  \n    return output", "def interpreter(tape):\n    data, pos, res = [0 for i in range(tape.count('*'))], 0, \"\"\n    while 1:\n        try:\n            for i in iter([i for i in tape]):\n                if   i == \"+\": data[pos] = (data[pos] + 1) %256\n                elif i == \"-\": data[pos] = (data[pos] - 1) %256\n                elif i == \">\": pos += 1\n                elif i == \"<\": pos -= 1\n                elif i == \"*\": res += chr(data[pos])\n                elif i == \"/\" and data[pos] == 0: next(tape)\n                elif i == \"\\\\\" and data[pos] != 0: next(tape)\n                elif i == \"&\": return res\n        except:\n            pass"]