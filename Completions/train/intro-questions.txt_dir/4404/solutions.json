["def compare(s1, s2):\n    v1,v2 = version(s1),version(s2)\n    return -1 if v1 < v2 else 1 if v1 > v2 else 0\n\ndef version( s ):\n    v = [int(n) for n in s.split(\".\")]\n    while( v[-1]==0 ) : v = v[0:-1]\n    return v", "def compare(s1, s2):\n    s1 , s2 = s1.split('.') , s2.split('.')\n    for i in range(abs(len(s1)-len(s2))): min(s1,s2,key = len).append('0')\n    for num1 , num2 in zip(s1 , s2):\n        num1 , num2 = int(num1) , int(num2)\n        if num1 > num2: return 1\n        elif num1 < num2: return -1\n    return 0", "from itertools import zip_longest as z\ncompare=lambda s1,s2:next(([1,-1][int(i)<int(j)] for i,j in z(s1.split('.'),s2.split('.'),fillvalue='0') if int(i)!=int(j)),0)", "import re\nfrom distutils.version import LooseVersion\n\nTRAILING_ZEROS = re.compile(r'(\\.0+)+$')\n\ndef cmp(a, b):\n    return (a > b) - (a < b)\n\ndef compare(s1, s2):\n    return cmp(LooseVersion(TRAILING_ZEROS.sub('', s1)), LooseVersion(TRAILING_ZEROS.sub('', s2)))", "def compare(s1, s2):\n    s1, s2 = s1.split('.'), s2.split('.')\n    if len(s1) < len(s2):\n        s1 += ['0'] * (len(s2) - len(s1))\n    elif len(s1) > len(s2):\n        s2 += ['0'] * (len(s1) - len(s2))\n    for i in range(len(s2)):\n        if int(s1[i]) > int(s2[i]): return 1\n        elif int(s1[i]) < int(s2[i]): return -1\n    return 0", "def compare(s1, s2):\n    s1 = list(map(int, s1.split('.')))\n    s2 = list(map(int, s2.split('.')))\n    dif = abs(len(s1) - len(s2))\n    s1.extend([0]*dif) if len(s1) < len(s2) else s2.extend([0]*dif)           \n    for val_1, val_2 in zip(s1, s2):\n        if val_1 != val_2:\n            return 1 if val_1 > val_2 else -1\n    return 0\n\n", "def compare(s1, s2):\n    n1, n2 = [int(i) for i in s1.split(\".\")], [int(i) for i in s2.split(\".\")]\n    l = min(len(n1), len(n2))\n    for i in range(l):\n        if n1[i] == n2[i]:\n            continue\n        return 1 if n1[i] > n2[i] else -1\n    if any(n1[l:] + n2[l:]):\n        return 1 if len(n1) > len(n2) else -1\n    return 0"]