["from numpy import linspace\n\n\ndef looper(start, stop, number):\n    return list(linspace(start, stop, number))", "def looper(start, stop, number):\n    if number == 1:\n        return [start]\n    elif number == 2:\n        return [start, stop]        \n        \n    increment = (stop - start) / (number - 1)   \n    \n    arr = []\n    for n in range(0, number - 1):\n        new_element = start + n * increment\n        arr.append(new_element)\n    \n    arr.append(float(stop))\n    return arr", "def iter(start, number, step):\n    for i in range(number-1):\n        yield float(start + step*i)\n\ndef looper(start, stop, number):\n    if number == 1:\n        return [start]\n\n    step = (stop - start) / (number - 1)\n    lt = list(iter(start, number, step))\n    lt.append(stop)\n    return lt", "import numpy as np\n\ndef looper(start, stop, n):\n    return np.linspace(start, stop, n).tolist()", "import numpy as np\ndef looper(start, stop, number):\n    return np.linspace(start, stop, number, dtype=np.float).tolist()\n", "from numpy import linspace\n\ndef looper(*args):\n    return list(linspace(*args))", "from numpy import linspace\n\ndef looper(*a):\n    return list(linspace(*a))", "looper = lambda a, z, n: [a] if n == 1 else [a] + [(z - a) / (n - 1) * i + a for i in range(1, n - 1)] + [z]", "def looper(start, stop, number):\n    c,r,s=0,[],(stop-start)/(number-(1 if number>1 else 0))\n    while c<number:\n      r.append(start+c*s)\n      c+=1\n    if number>1: r.pop(); r.append(stop)\n    return r", "looper=lambda Q,S,R:[Q+(S-Q)/(R-1)*V for V in range(R-1)]+[S]if 1<R else[Q]"]