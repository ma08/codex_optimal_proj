["def solve(s):\n    ans = []\n    for ab in s.split('\\n'):\n        carry, carried = 0, 0\n        for a,b in zip(*map(lambda ss: map(int,ss[::-1]), ab.split())):\n            carried += a+b\n            carry   += carried > 9\n            carried //= 10\n        ans.append(carry)\n        \n    return '\\n'.join(\"No carry operation\" if not c else \"%d carry operations\"%(c) for c in ans)", "def getCarrycount(a, b):\n    r,index = 0, 0\n    al = [int(d)+int(f) for d, f in zip(reversed(list(a)), reversed(list(b)))]\n    for item in al:\n        index = (item+index)//10\n        r += index\n    return r\ndef solve(input_string):\n    lnumber = [tuple(item.split()) for item in input_string.split('\\n')]\n    lsum = [getCarrycount(z[0], z[1]) for z in lnumber]\n    return '\\n'.join('{} carry operations'.format(n) if n else 'No carry operation' for n in lsum)\n", "def solve(s):\n    li = []\n    for k in s.splitlines():\n        c = [0]\n        for i, j in reversed(list(zip(k.split(\" \")[0], k.split(\" \")[1]))):\n            if int(i) + int(j) + int(c[-1]) > 9:\n                c.append(str(int(i) + int(j) + int(c[-1]))[0])\n            else:\n                c.append(0)\n        li.append(\"No carry operation\" if c.count('1') < 1 else f\"{c.count('1')} carry operations\")\n    return \"\\n\".join(li)", "def solve(input_string):\n    res=[]\n    for i in input_string.split(\"\\n\"):\n        res.append(carry(i.split()[0], i.split()[1]))\n    return \"\\n\".join(res)\ndef carry(s1, s2):\n    carry=0\n    increment=0\n    for i,j in zip(s1[::-1], s2[::-1]):\n        digit=int(i)+int(j)+increment\n        increment=1 if digit>=10 else 0\n        carry+=increment\n    return \"No carry operation\" if not carry else f\"{carry} carry operations\"", "def solve(string):\n    operations=[]\n    for line in string.split(\"\\n\"):\n        num1,num2=line[::-1].split()\n        carries,carry=0,0\n        for v1,v2 in zip(num1,num2):\n            v1,v2=int(v1),int(v2)\n            v3=v1+v2+carry\n            v4=v3%10\n            if carry:carries+=v4<=max(v1,v2)\n            else:carries+=v4<max(v1,v2)\n            carry=int(v3>9)\n        if carries:operations.append(f\"{carries} carry operations\")\n        else:operations.append(\"No carry operation\")\n    return \"\\n\".join(operations)", "def solve(input_string):\n    answer = []\n    for n in input_string.split('\\n'):\n        carry, carried = 0, 0\n        A, B = map(str, n[::-1].split())\n        for x in range(len(A)):\n            carried += (int(A[x])+int(B[x]))\n            carry += carried > 9\n            carried //= 10\n        answer.append(carry)\n    return '\\n'.join(\"No carry operation\" if not c else \"%d carry operations\" % c for c in answer)", "def ss(n): return sum(map(int,str(n)))\n\ndef solve(s):\n    s = s.split('\\n')\n    ans=[]\n    for i in s:\n        j,k = map(int,i.split())\n        c = (-ss(j+k)+ss(k)+ss(j))//9\n        cc = \"No\" if c==0 else str(c)\n        ans.append(cc+' carry operation' + 's'*(c>0))\n    return '\\n'.join(ans)", "def carry(s):\n    a,b = s.split()\n    c,f = 0,0\n    for i,j in zip(map(int,a[::-1]),map(int,b[::-1])):\n        if i+j+f > 9:\n            f = 1\n            c += 1\n        else:\n            f = 0\n    return c\n\ndef solve(s):\n    r = list(map(carry,s.splitlines()))\n    return '\\n'.join('No carry operation' if x==0 else f'{x} carry operations' for x in r)", "def carry(x,y):\n    x=[*map(int,x[::-1])]\n    y=[*map(int,y[::-1])]\n    r=0\n    c=0\n    for a,b in zip(x,y):\n        v=a+b+c\n        if v>9:\n            r+=1\n        c=v//10\n    return f'{r} carry operations' if r else 'No carry operation'\n    \ndef solve(input_string):\n    return'\\n'.join(carry(*s.split())for s in input_string.split('\\n'))"]