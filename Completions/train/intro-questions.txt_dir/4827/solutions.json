["def stats_disc_distr(distrib):\n    err = check_errors(distrib)\n    if not err:\n        mean = sum(x[0] * x[1] for x in distrib)\n        var = sum((x[0] - mean) ** 2 * x[1] for x in distrib)\n        std_dev = var ** 0.5\n    return [mean, var, std_dev] if not err else err\n\ndef check_errors(distrib):\n    errors = 0\n    if not isclose(sum(x[1] for x in distrib), 1):\n        errors += 1\n    if not all(isinstance(x[0], int) for x in distrib):\n        errors += 2\n    if errors > 0:\n        return {1: \"It's not a valid distribution\", 2: \"All the variable values should be integers\",\n        3: \"It's not a valid distribution and furthermore, one or more variable value are not integers\"}[errors]\n\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\n    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n", "def stats_disc_distr(distrib):\n    dist = abs(sum(px for x, px in distrib) - 1) < 0.00001\n    all_int = all(isinstance(x, int) for x, px in distrib)\n    if not dist:\n        if not all_int:\n            return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n        return \"It's not a valid distribution\"\n    if not all_int:\n        return \"All the variable values should be integers\"\n    u = sum(x * px for x, px in distrib)\n    o2 = sum(abs((x - u) ** 2 * px) for x, px in distrib)\n    o = o2 ** 0.5\n    return [u, o2, o]", "def stats_disc_distr(arr):\n    a = round(sum(float(i[1]) for i in arr),2) != 1\n    b = not all(int(i[0])==i[0] for i in arr)\n    if a and b : return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n    if a :       return \"It's not a valid distribution\"\n    if b :       return \"All the variable values should be integers\"\n    _mean = sum(i[0]*i[1] for i in arr)\n    _var = sum(((i[0]-_mean)**2)*i[1] for i in arr)\n    _sdt = _var ** .5\n    return [_mean, _var, _sdt]", "from __future__ import division\nimport numpy as np\ndef stats_disc_distr(distrib):\n    print(distrib)\n    values = [i[0] for i in distrib]\n    probs = [i[1] for i in distrib]\n    \n    \n    if any(type(i) != int for i in values) and float(sum(probs)) != 1.0:\n        return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n    elif sum(probs) > 1.0 + 1e-5 or sum(probs) < 1.0 - 1e-5:\n        print(sum(probs))\n        return \"It's not a valid distribution\"\n    elif any(type(i) != int for i in values):\n        return \"All the variable values should be integers\"\n        \n    mean = np.mean(values)\n    var = sum([(values[i] - mean)**2 * probs[i] for i in range(len(values))])\n    std_dev = var**0.5\n    \n    \n    \n    \n    \n    \n    \n    return [mean, var, std_dev] # or alert messages", "def stats_disc_distr(distrib):\n    values, probs = zip(*distrib)\n    probs_is_not_one = (abs(sum(probs) - 1) > 1e-8)\n    values_are_not_ints = any(value % 1 for value in values)\n    if probs_is_not_one and values_are_not_ints:\n        return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n    elif values_are_not_ints:\n        return \"All the variable values should be integers\"\n    elif probs_is_not_one:\n        return \"It's not a valid distribution\"\n    mean = sum((value * prob) for value, prob in distrib)\n    var = sum(((value - mean)**2 * prob) for value, prob in distrib)\n    std_dev = var**0.5\n    return [mean, var, std_dev]", "def stats_disc_distr(distrib):\n    is_valid_distribution = lambda d: abs(sum(px for x, px in d) - 1) < 1e-8\n    are_events_integers = lambda d: all(isinstance(x, (int, float)) and float(x).is_integer() for x, px in d)\n    events, probabilities = are_events_integers(distrib), is_valid_distribution(distrib)\n    if not events and not probabilities:\n        return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n    elif not probabilities:\n        return \"It's not a valid distribution\"\n    elif not events:\n        return \"All the variable values should be integers\"\n    mean = sum(x * px for x, px in distrib)\n    var = sum((x - mean) ** 2 * px for x, px in distrib)\n    std_dev = var ** .5\n    return [mean, var, std_dev]", "from math import sqrt\n\ndef stats_disc_distr(distrib):\n    if round(sum(count[1] for count in distrib), 3) != 1:\n        if not all(isinstance(count[0], int) for count in distrib):\n            return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n        else:\n            return \"It's not a valid distribution\"\n    \n    if not all(isinstance(count[0], int) for count in distrib):\n        return \"All the variable values should be integers\"\n    \n    expected = sum(event * prob for event, prob in distrib)\n    variance = sum((event - expected)**2 * prob for event, prob in distrib)\n    standard = sqrt(variance)\n    \n    return [expected, variance, standard]", "stats_disc_distr=lambda d: (lambda m: \"It's not a valid distribution and furthermore, one or more variable value are not integers\" if round(sum(k for i,k in d),8)!=1 and any(type(i)!=int for i,k in d) else \"It's not a valid distribution\" if round(sum(k for i,k in d),8)!=1 else \"All the variable values should be integers\" if any(type(i)!=int for i,k in d) else [m, sum(k*(i-m)**2 for i,k in d), sum(k*(i-m)**2 for i,k in d)**0.5])(sum(i*k for i,k in d))", "def stats_disc_distr(distrib):\n    print(sum(p for x, p in distrib))\n    if abs(sum(p for x, p in distrib) - 1) > 1e-4:\n        if not all(x % 1 == 0 for x, p in distrib):\n            return \"It's not a valid distribution and furthermore, one or more variable value are not integers\"\n        return \"It's not a valid distribution\"\n    if not all(x % 1 == 0 for x, p in distrib):\n        return \"All the variable values should be integers\"\n    \n    \n    mean = sum(x * p for x, p in distrib)\n    var = sum((x - mean) ** 2 * p for x, p in distrib)\n    std_dev = var ** 0.5\n    return [mean, var, std_dev]\n", "import math\n\ndef stats_disc_distr(disv):\n    m=0; v=0; p=0; ni=False\n    for dis in disv:\n       if type(dis[0])!=int: ni=True\n       p=p+dis[1]; m=m+dis[0]*dis[1] \n    if ni==False:   \n        for dis in disv: v+=(dis[0]-m)*(dis[0]-m)*dis[1]\n    if ni:\n       return \"It's not a valid distribution and furthermore, one or more variable value are not integers\" if math.fabs(p-1)>1e-10 else \"All the variable values should be integers\"   \n    if math.fabs(p-1)>1e-10: return \"It's not a valid distribution\"\n    return [m, v, v**.5]"]