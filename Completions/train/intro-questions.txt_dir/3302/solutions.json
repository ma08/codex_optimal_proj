["from itertools import combinations\ndef strings_crossover(arr, result):\n    return sum(1 for s1,s2 in combinations(arr,2) if all(r in (x,y) for x,y,r in zip(s1,s2,result)))", "from collections import Counter\n\ndef strings_crossover(arr, result):\n    lstBit = [ int(''.join(['01'[x==y] for x,y in zip(result, w)]), 2) for w in arr ]\n    target = 2**len(result) - 1\n    c      = Counter(lstBit)\n    \n    v1 = sum( v*w for k,v in list(c.items()) for l,w in list(c.items()) if k|l == target and k!=target and l!=target) // 2\n    v2 = 0 if target not in c else (sum(c.values())-c[target]) * c[target]\n    v3 = 0 if c[target] < 2 else c[target] * (c[target]-1) // 2\n    \n    return v1+v2+v3\n", "from itertools import combinations as comb\nstrings_crossover=lambda li,r:sum(all(r[k] in [i[0][k],i[1][k]] for k in range(len(i[0]))) for i in comb(li,2))", "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum(\n        all(a==b or a==c for a,b,c in zip(result, *xs))\n        for xs in combinations(arr, 2)\n    )", "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum(all(a in b for a, b in zip(result, l)) for l in (zip(*c) for c in combinations(arr, 2)))", "import itertools\ndef strings_crossover(arr, result):\n\n  lista = list(itertools.combinations(arr, 2))\n  crossovers = 0\n  for element in lista:\n      flag = True\n      for i,e in enumerate(result):\n          if element[0][i] != e and element[1][i] != e:\n              flag = False\n      if flag:\n          crossovers += 1\n  return crossovers\n", "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum(all(x == z or y == z for x, y, z in zip(a, b, result)) for a, b in combinations(arr, 2))", "from itertools import combinations\ndef strings_crossover(arr, result):\n    r=0\n    for s1,s2 in combinations(arr,2):\n        flag=True\n        for i in range(len(result)):\n            if s1[i]!=result[i] and s2[i]!=result[i]:\n                flag=False\n                break\n        if flag:\n            r+=1\n    return r", "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    combs = [*combinations(arr, 2)]\n    t = 0\n    for k in range(len(combs)):\n        x, y, z = set(enumerate(result)), set(enumerate(combs[k][0])), set(enumerate(combs[k][1]))\n        t += not x - (y | z)\n    return t", "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum(1 for a,b in combinations(arr,2) if all(r in (x,y) for r,x,y in zip(result,a,b)))\n"]