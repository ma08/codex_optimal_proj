["def decompose_single_strand(dna):        \n    return '\\n'.join('Frame {}: {}'.format(k+1, frame(dna, k)) for k in range(3))\n    \ndef frame(s, k):\n    return ' '.join(([s[:k]] if k else []) + [s[i:i+3] for i in range(k, len(s), 3)])    ", "def decompose_single_strand(single_strand):\n    f1 = 'Frame 1: {}'.format(decompose(single_strand))\n    f2 = 'Frame 2: {} {}'.format(single_strand[:1], decompose(single_strand[1:]))\n    f3 = 'Frame 3: {} {}'.format(single_strand[:2], decompose(single_strand[2:]))\n    return '\\n'.join([f1, f2, f3])\n    \ndef decompose(strand):\n    return ' '.join([strand[i: i + 3] for i in range(0, len(strand), 3)])", "def decompose_single_strand(s):\n    F1 = []\n    F2 = [s[0]]\n    F3 = [s[:2]]\n    for i in range(0,len(s), 3):\n       F1.append(s[i:i + 3])\n    F1 = ' '.join(F1)\n    for i in range(1,len(s), 3):\n       F2.append(s[i:i + 3])\n    F2 = ' '.join(F2)\n    for i in range(2,len(s), 3):\n       F3.append(s[i:i + 3])\n    F3 = ' '.join(F3)\n    return 'Frame 1: ' + F1 + '\\n' + 'Frame 2: ' + F2 + '\\n' + 'Frame 3: ' + F3", "def decompose_single_strand(ar):\n    i = []\n    t= []\n    th= []\n    for x,y,z in zip(ar[0::3], ar[1::3], ar[2::3]):\n      i.append(x+y+z)\n    #print( \"Frame 1: \" +\" \".join(i))\n    for x,y,z in zip(ar[1::3], ar[2::3], ar[3::3]):\n      t.append(x+y+z)\n    #print( \"Frame 2: \" +\" \".join(t))\n    for x,y,z in zip(ar[2::3], ar[3::3], ar[4::3]):\n      th.append(x+y+z)\n    #print( \"Frame 3: \" +\" \".join(th))\n    if len(ar)==3:\n      return  (\"Frame 1: \" +\" \".join(i) + \"\\n\" +  \"Frame 2: \" + str(ar[0])+\" \"+str(ar[-2:])+ \"\\nFrame 3: \"+ str(ar[0:2]) + \" \" + str(ar[-1]))\n    else:\n      return (\"Frame 1: \" +\" \".join(i) + \"\\n\" +  \"Frame 2: \" + str(ar[0])+\" \"+\" \".join(t)+\" \"+str(ar[-2:])+ \"\\nFrame 3: \"+ str(ar[0:2]) +\" \" +\" \".join(th)+ \" \" + str(ar[-1]))\n    \n      \n", "def decompose_single_strand(single_strand):\n    frame1= \"Frame 1:\"\n    frame2= \"Frame 2:\"\n    frame3= \"Frame 3:\"\n    i=0\n    while i in range(len(single_strand)):\n        frame1+= \" \"+(single_strand[i:i+3])\n        i+=3\n    i=1\n    frame2+= \" \" +(single_strand[0])\n    while i in range(len(single_strand)):\n        frame2+= \" \"+(single_strand[i:i+3])\n        i+=3\n    i=2\n    frame3+= \" \"+(single_strand[0:2])\n    while i in range(len(single_strand)):\n        frame3+= \" \"+ (single_strand[i:i+3])\n        i+=3\n    frames = (frame1+'\\n'+frame2+'\\n'+frame3)\n    return frames", "decompose_single_strand=lambda d:'\\n'.join('Frame %d: %s'%(4-i,' '.join(map(''.join,zip(*[iter(' '*i+d+'  ')]*3))).strip())for i in(3,2,1))", "def decompose_single_strand(single_strand):\n  string1=[single_strand[i:(i+3)] for i in range(0,len(single_strand),3)]\n  string2=[single_strand[i:(i+3)] if i!=0 else single_strand[i] for i in [0]+list(range(1,len(single_strand),3))]\n  string3=[single_strand[i:(i+3)] if i>1 else single_strand[:(i+1)] for i in [1]+list(range(2,len(single_strand),3))]\n  Frame='Frame 1: '+' '.join(string1)+'\\nFrame 2: '+' '.join(string2)+'\\nFrame 3: '+' '.join(string3)\n  return Frame", "import re\n\ndef decompose_single_strand(single_strand):\n    return '\\n'.join(\n        'Frame {}: {}'.format(i, ' '.join(m.group() for m in re.finditer(r, single_strand)))\n        for i, r in enumerate(['...', '^.|...|..$', '^..|...|.$'], 1))", "decompose_single_strand=lambda s: \"\\n\".join(\"Frame %s: %s\" %(i+1,\" \".join(([s[:i]] if i else [])+[s[q:q+3] for q in range(i,len(s),3)])) for i in range(3))", "def decompose_single_strand(single_strand):\n    frame1 = []\n    frame2 = [single_strand[0]]\n    frame3 = [single_strand[0:2]]\n    \n    for i in range(0, len(single_strand)-2, 3):\n        frame1.append(single_strand[i:i+3])\n        frame2.append(single_strand[i+1:i+4])\n        frame3.append(single_strand[i+2:i+5])\n    \n    return \"Frame 1: {}\\nFrame 2: {}\\nFrame 3: {}\".format(' '.join(frame1), ' '.join(frame2), ' '.join(frame3))"]