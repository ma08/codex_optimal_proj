["S, SS, SUM = [0], {0}, [0]\n\ndef rec(n):\n    while len(S)<=n:\n        v = S[-1] - len(S)\n        if v<= 0 or v in SS: v += 2*len(S)\n        S.append(v)\n        SS.add(v)\n        SUM.append(SUM[-1]+v)\n    return SUM[n-1]", "# precaclulate results\nLIMIT = 2500000\nRECA_SUM = [0, 0]\nseen = {0}\nlast = 0\ntotal = 0\n\nfor n in range(1, LIMIT):\n    new = last - n\n    if new < 0 or new in seen:\n        new = last + n\n    seen.add(new)\n    total += new\n    RECA_SUM.append(total)\n    last = new\ndel seen\n\n\ndef rec(x):\n    return RECA_SUM[x]", "s, seq, sums = {0}, [0], [0]\nfor i in range(25 * 10 ** 5 + 1):\n    x = seq[-1] - i\n    if x < 0 or x in s: x += 2 * i\n    s.add(x); seq.append(x); sums.append(x + sums[-1])\nrec=sums.__getitem__", "all_sums = {}\n\ndef helper():\n    all_sums[0] = 0\n    rec, suma = 0, 0\n    made = {0}\n    for i in range(1, 2500000):\n        cur = rec - i\n        if cur < 0 or cur in made:\n            cur = rec + i\n        suma += cur\n        made.add(cur)\n        rec = cur\n        all_sums[i] = suma\n    return True\n\ndef rec(x):\n    if not all_sums:\n        helper()\n    return all_sums[x - 1] if x >= 1 else 0", "____, _____ = {0}, [0]\n___ = [0, 0]\n\ndef rec(_):\n    for _______ in range(len(_____), _ + 1):\n        ________ = _____[-1] - _______\n        \n        if not (________ >= 0 and ________ not in ____):   ________ += _______ + _______\n        ____.add(________)\n        \n        _____.append(________)\n        \n        ___.append(___[-1] + ________)\n                                \n    return ___[_]", "cache2, cache, seq = {0:0}, {0:0, 1:0}, {0}\ndef rec(n):\n    if n in cache2: return cache[n]\n    i = max(cache2)\n    r = cache2[i]\n    for i in range(i+1, n):\n        cache2[i] = r = [r-i, r+i][(r-i < 0)|(r-i in seq)]\n        seq.add(r)\n        cache[i+1] = cache[i] + r\n    return cache[n]\n", "SEEN = {0}\nREC = [0]\nSUM = [0, 0]\n\ndef rec(n):\n\n    for i in range(len(REC), n + 1):\n        k = REC[-1] - i\n        if not (k >= 0 and k not in SEEN):        \n            k += i + i\n        SEEN.add(k)\n        REC.append(k)\n        SUM.append(SUM[-1] + k)\n                                \n    return SUM[n]", "R=[0,0]\n\ns=0\np=0\nS={0}\nfor i in range(1,2500000):\n    x=p-i\n    if x<0 or x in S:x=p+i\n    S|={x}\n    s+=x\n    p=x\n    R+=[s]\ndef rec(x):return R[x]"]