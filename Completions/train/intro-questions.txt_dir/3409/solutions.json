["def fish(shoal):\n    eaten, size, target = 0, 1, 4\n    for f in sorted(map(int, shoal)):\n        if f > size: break\n        eaten += f\n        if eaten >= target:\n            size += 1\n            target += 4 * size\n    return size", "from collections import Counter\n\ndef fish(shoal):\n    size, eaten = 1, 0\n    for fishesSize,n in sorted( Counter(map(int, shoal)).items() ):\n        eaten += fishesSize * n if fishesSize <= size else 0\n        size = 1 + int( ((1+2*eaten)**.5 - 1)/2 )\n    return size", "def fish(shoal, size = 1, protein_earned = 0):\n    fishes = [int(fish) for fish in shoal if fish != '0']\n    grow = True\n    while grow:\n        edible_fishes = list(filter(lambda x: x <= size, fishes))\n        ate_protein = sum(edible_fishes)\n        protein_earned += ate_protein\n        if protein_earned >= protein_to_grow(size):\n            size += 1\n            fishes = [fish for fish in fishes if fish not in edible_fishes]\n        else:\n            grow = False\n    return size\n\ndef protein_to_grow(actual_size):\n    protein_to_accumulate = 0\n    while actual_size > 0:\n        protein_to_accumulate += actual_size * 4\n        actual_size -= 1\n    return protein_to_accumulate", "def fish(shoal):\n    size = 1\n    while(count_lesser_fish(shoal, size) >= 2*size*(size + 1)):\n        size += 1\n    return size\n    \ndef count_lesser_fish(shoal, size):\n    return sum(int(f) for f in shoal if int(f) <= size)", "def fish(shoal):\n    fishes = sorted(shoal)\n    my_size = 1\n    amount_for_next_size = 4\n    \n    for i in range(len(fishes)):\n        if int(fishes[i]) > my_size: # break condition\n            break\n        amount_for_next_size -= int(fishes[i])\n        if amount_for_next_size <= 0:\n            my_size += 1\n            amount_for_next_size += my_size * 4        \n    return my_size        \n\n", "def fish(shoal):\n    size, eaten = 1, 0\n    for i in range(1, 10):\n        if size < i:\n            break\n        eaten += i * shoal.count(str(i))\n        size = max(size, int(((2 * eaten + 1) ** 0.5 - 1) / 2) + 1)\n    return size", "\n#All data associated to the fish \nclass Fish:\n    size = 1        #Determines what the fish can eat\n    intake = 0      #determines when fish grows in size\n#---end class Fish\n\n\ndef attemptDigestion(myFish, menuItem):\n    if menuItem <= myFish.size:    #Scenario: Eat the current menue item\n        myFish.intake += menuItem\n#---end function attemptDigestion\n\n#Based on rules of the game, we grow (in size by 1) when what we have intaked is larger than or equal to the \n# size of our fish.  The cost to increase in size is equal to four times the current size of our fish\n# e.g. intake ==14, size is 3.  The req to size 4 is 12 units, so our size increases by 1 and our\n# intake is reduced as: 14 - 4*3 = 2 (intake is now 2; we burnt 12 units to inc in size :)\ndef assessGrowth(myFish):\n    if myFish.intake >= 4*myFish.size:  #Situation: the fish is ready to grow in size 1\n        myFish.intake =  myFish.intake - 4*myFish.size  #deplete the amount it cost us to inc. in size \n        myFish.size+=1\n#---end fuction assessGrowth\n\ndef fish(str):\n    #Convert the string of fish-sizes to a list\n    foodPool = [] \n    foodPool[:0] = str\n    foodPool.sort()     #ascending order\n\n    myFish = Fish()\n\n    #Begin the eating and evolving game\n    while foodPool and int(foodPool[0]) <= myFish.size:\n        menuItem = int(foodPool.pop(0))\n        attemptDigestion(myFish, menuItem)  \n        #determine if we need to level up based on mySize and the intake\n        assessGrowth(myFish)\n\n    #----end while\n\n    return myFish.size\n\n#---end function fishGame\n", "from collections import Counter\n\ndef fish(shoal):\n    count = Counter(map(int, shoal))\n    \n    size, eaten, step = 1, 0, 4\n    for n in range(1, 10):\n        if size >= n:\n            eaten += count[n] * n\n            while eaten >= step:\n                eaten -= step\n                size += 1\n                step += 4\n        else:\n            break\n    \n    return size", "from collections import Counter\n\ndef fish(shoal):\n    c = Counter(map(int, shoal.replace('0', '')))\n    consumed = 0\n    for size in range(1, 99999):\n        consumed += size * c[size]\n        if consumed < size * (size+1) * 2:\n            return size", "def fish(shoal):\n    shoal_l = []\n    for s in shoal:\n      shoal_l.append(int(s))\n      shoal_l.sort()\n      \n    max_size = 1\n    food_count = 0\n    amount_needed = 4\n    \n    for fishy in shoal_l:\n      if max_size >= fishy:\n        food_count += int(fishy)     \n      if food_count >= amount_needed:\n        max_size += 1 \n        amount_needed += (max_size*4)\n        \n    return max_size\n"]