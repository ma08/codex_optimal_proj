["from math import sqrt\ndef length_of_line(array):\n   x1, y1, x2, y2 = array[0][0], array[0][1], array[1][0], array[1][1]\n   return '{:.2f}'.format((sqrt((x2-x1)**2 + (y2-y1)**2)))", "import math\ndef length_of_line(array):\n  return \"{:.02f}\".format(math.sqrt((array[1][0] - array[0][0])**2 + (array[1][1] - array[0][1])**2))\n", "from math import sqrt\n\ndef length_of_line(array):\n    (x1, y1), (x2, y2) = array[0], array[1]\n    return '{:.2f}'.format(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))", "from math import hypot\n\ndef length_of_line(array):\n    (a, b), (c, d) = array\n    return f\"{hypot(a-c, b-d):.2f}\"", "def length_of_line(pts):\n   return f'{sum((a-b)**2 for a,b in zip(*pts))**.5:.2f}'\n", "def length_of_line(array):\n    return '{:0.2f}'.format(((array[0][0] - array[1][0]) ** 2 + (array[0][1] - array[1][1]) ** 2) ** .5)\n", "from itertools import starmap\nfrom operator import sub\nfrom math import hypot\n\ndef length_of_line(array):\n    return '{:.2f}'.format(hypot(*starmap(sub,zip(*array))))", "import math\ndef length_of_line(array):\n   # Good Luck!\n   #return math.sqrt(((array[1][0] - array[0][0]) ^ 2 + (array[1][1] - array[0][1]) ^ 2))\n    return '%.2f' % math.hypot(array[1][0] - array[0][0], array[1][1] - array[0][1])"]