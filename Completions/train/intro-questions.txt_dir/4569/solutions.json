["def next_item(xs, item):\n    it = iter(xs)\n    for x in it:\n        if x == item:\n            break\n    return next(it, None)", "def next_item(xs, item):\n  it = iter(xs)\n  next(iter(x for x in it if x == item), None)\n  return next(it, None)", "import itertools\ndef next_item(xs, item):\n    try:\n        xs = iter(xs)\n        for x in xs:\n            if x==item: return next(xs)\n    except:\n        return None", "def next_item(xs, item):\n    ret = False\n    for x in xs:\n        if ret:\n            return x\n        if item == x:\n            ret = True        ", "def next_item(xs, item):\n  it = iter(xs)\n  return next(iter(next(it, None) for x in it if x == item), None)", "def next_item(xs, item):\n    found = None\n    for x in xs:\n        if found:\n            return x\n        if x == item:\n            found = True\n    return None", "def next_item(xs, item): \n    it = iter(xs)\n    try:\n        while True:\n            x = next(it)\n            if x==item:\n                x = next(it)\n                return x\n    except StopIteration:\n        return None", "def next_item(xs, item):\n    if xs.__class__.__name__ == 'listiterator': \n        while xs:\n            try:\n                 if next(xs) == item: return next(xs)\n            except:\n                 return\n    elif xs.__class__.__name__ == 'count':\n         return item+1\n    try:\n        return xs[xs.index(item)+1]\n    except:\n        return", "def next_item(xs, item):\n    cursor = iter(xs)\n    while True:\n        try:\n            element = next(cursor)\n            if element == item:\n                return next(cursor)\n        except StopIteration:\n            return", "def next_item(xs, item, trap = None):\n    for i in xs:\n        if trap:\n            return i\n        if i == item:\n            trap = True", "def next_item(xs, item):\n    items = iter(xs)\n    for thing in items:\n        try:\n            if thing == item:\n                return next(items)\n        except StopIteration:\n            return None\n    return None\n    \n    \n        \n        \n    \n", "def next_item(xs, item):\n    ans, trap = None, False\n    for i in xs:\n        if trap:\n            return i\n        if i == item:\n            trap = True\n    return None\n        \n", "def next_item(xs, item):\n    xs = iter(xs)\n    for x in xs:\n        if x == item:\n            break\n    return next(xs, None)", "def next_item(xs, item):\n    iterXS = iter(xs)\n    for i in iterXS:\n        if i == item:\n            try:\n                return next(iterXS)\n            except: \n                return None", "def next_item(xs, item):\n    return (lambda x: next(x, None) if item in x else None)(iter(xs))", "def next_item(xs, item):\n    # TODO: Implement me\n    ret = False\n    for j in xs:\n        if ret:\n            return j\n        if j == item:\n            ret = True", "def next_item(xs, item):\n    itemFound = False\n    for i in xs:\n        if itemFound:\n            return i\n        if i == item:\n            itemFound = True", "from itertools import dropwhile, islice\n\n\ndef next_item(xs, item):\n    return next(islice(dropwhile(lambda x: x != item, xs), 1, 2), None)\n\n", "def next_item(xs, item):\n    \n    xs = iter(xs)\n    if item in xs:\n        return next(xs, None)\n # TODO: Implement me\n", "from itertools import dropwhile, islice\n\ndef next_item(xs, item, nth_successor=1):\n    return next(islice(dropwhile(lambda x: x != item, xs),\n                       nth_successor,\n                       nth_successor + 1),\n                None)\n", "def next_item(xs, item):\n    l=[]\n    # so that the list is not very large, cut it to item+1 elem\n    for i in xs:\n        l.append(i)\n        if item in l and len(l) == l.index(item)+2:\n            break\n    # return answer\n    return None if (item not in l or l[-1]==item) else l[l.index(item)+1]\n", "def next_item(xs, item):\n    f = int(1)\n    for x in xs:\n        if f == 0:\n            f = 1\n            return x\n        if x == item:\n            f = 0\n    # TODO: Implement me\n", "def next_item(xs, item):\n    flag = False\n    for el in xs:\n        if flag: return el\n        if el == item: flag = True\n", "def next_item(xs, item):\n    flag = False\n    for element in xs:\n        if flag:\n            return element\n        if element == item:\n            flag = True\n    return None\n        \n", "def next_item(xs, item):\n    found = False\n    for i in xs:\n        if found:\n            return i\n            break\n        elif i == item:\n            found = True\n            \n\n", "def next_item(xs, item):\n    it = iter(xs)\n    next((x for x in it if x == item), None)\n    return next(it, None)\n", "def next_item(xs, item):\n    xl = (i for i in xs)\n    try:\n        while next(xl) != item:\n            continue\n        return next(xl)\n    except StopIteration:\n        pass", "def next_item(xs, item):\n    it = iter(xs)\n    next(iter(el for el in it if el == item), None)\n    return next(it, None)", "def next_item(xs, item):\n    object = iter(xs)\n    for el in object:\n        if el == item:\n            break\n    return next(object, None)", "def next_item(xs, item):\n    stop = False\n    for el in xs:\n        if stop:\n            return el\n        elif el == item:\n            stop = True\n", "def next_item(xs, item):\n    count = 0\n    result = 0\n    try:\n        if (item in xs) and xs.index(item) != len(xs) - 1:\n            return xs[(xs.index(item) + 1)]\n        else:\n            return None\n    except:\n        try:\n            while count != item:\n                result = next(xs)\n                count += 1\n            return result // 2 + 1\n        except:\n            return 663", "def next_item(xs, item):\n    done = False\n    for i in xs:\n        if done == True:\n            return i\n        if i == item:\n            done = True\n    return None\n", "def next_item(xs, item):\n    end = False\n    for i in xs:\n        if end:\n            return i\n        if i == item:\n            end = True", "def next_item(xs, item):\n    found = False\n    for x in xs:\n        if x == item:\n            found = True\n        elif found:\n            return x\n    return", "def next_item(xs, item):\n    after = False\n    for i in xs:\n        if after:\n            return i\n        if i == item:\n            after = True", "def next_item(xs, item):\n    iter_obj = iter(xs)\n\n    while True:\n        try:\n            element = next(iter_obj)\n            if element == item:\n                element = next(iter_obj)\n                return element\n        except StopIteration:\n            break\n            return None", "def next_item(xs, item):\n    f = False\n    for i in xs:\n        if f:\n            return i\n        if i == item:\n            f = True", "def next_item(xs, item):\n    it=iter(xs)\n    for i in it:\n        if i==item:\n            return next(it,None)\n    return None", "def next_item(xs, item):\n    xs = xs.__iter__()\n    while True:\n        try:\n            if next(xs) == item: return next(xs)\n        except: break", "def next_item(xs, item):\n    found = False\n    for e in xs:\n        if found:\n            return e\n        if e==item:\n            found = True\n    return None\n", "def next_item(my_list, item):\n    found = None\n    for x in my_list:\n        if found:\n            return x\n        if x == item:\n            found = True\n    return None\n    \n# Given a sequence of items and a specific item in that sequence, \n# return the item immediately following the item specified. If the item occurs more than once in a sequence, return the item after the first occurence. \n# This should work for a sequence of any type.  \n    \n#       Test.assert_equals(next_item([1, 2, 3, 4, 5, 6, 7, 8], 5), 6)\n#         Test.assert_equals(next_item(['a', 'b', 'c'], 'd'), None)\n#         Test.assert_equals(next_item(['a', 'b', 'c'], 'c'), None)\n", "def next_item(xs, item):\n    idx = None\n    cnt = 0\n    for i,e in enumerate(xs):\n        if cnt == 1:\n            break\n        if e == item:\n            idx = i\n            cnt += 1\n    if idx == i:\n        return None\n    try:\n        print(xs[idx])\n        return xs[i]\n    except:\n        if idx is None:\n            return idx\n        return e", "def next_item(xs, item):\n    idx = None\n    cnt = 0\n    for i,e in enumerate(xs):\n        if cnt == 1:\n            break\n        if e == item:\n            idx = i\n            cnt += 1\n    print(xs)\n    print(e, i, idx)\n    if idx == i:\n        return None\n    try:\n        print('first')\n        print(xs[idx])\n        return xs[i]\n    except:\n        if idx is None:\n            print('second')\n            return idx\n        print('third')\n        return e", "def next_item(xs, item):\n    xs = iter(xs)\n    for element in xs:\n        if element == item:\n            try:\n                return next(xs)\n            except:\n                pass\n        \n\n", "import itertools\ndef next_item(xs, item):\n        if type(xs)==list or type(xs)==tuple or type(xs)==str:\n            try:\n                return xs[xs.index(item)+1]\n            except:\n                return None\n        for i in xs:\n            if item==i:\n                return next(xs)\n\n \n", "def next_item(xs, item):\n    it = iter(xs)\n    try:\n        while next(it) != item: pass\n        return next(it)\n    except:\n        return None\n", "def next_item(seq, item):\n\n    if type(seq) in [list, str]: return seq[seq.index(item)+1] if ((item != seq[-1])+(item in seq))==2 else None\n\n    else:\n        bar = next(seq); foo = next(seq)\n        foobar = item + (foo - bar)\n\n        last_item = 0\n        for i in range(700):\n            try:\n                c = seq.__next__()\n                if c is not None: last_item = c\n            except StopIteration: break\n\n        return foobar if foobar<last_item else None", "def next_item(xs, item):\n    iterator = iter(xs)\n    for i in iterator:\n        if i == item:\n            return next(iterator, None)\n    \n    return None", "import itertools\ndef nth(iterable, n, default=None):\n    return next(itertools.islice(iterable, n, None), default)\n\ndef next_item (xs,item):\n     a=itertools.dropwhile(lambda x: x!=item,xs)\n     return nth(a,1,None)\n       \n", "def next_item(xs, item):\n    found = False\n    for i in xs:\n        if found:\n            return i\n        if i == item:\n            found = True\n    else:\n        return None\n", "def next_item(xs, item):\n    i = None\n    for count, element in enumerate(xs):\n        if element == item:\n            i = count + 1\n            continue\n        if i is not None:\n            return element\n    return None", "def next_item(xs, item):\n    found = False\n    for i in xs:\n        if i == item:\n            found = True\n        elif found == True:\n            return i", "def next_item(xs, item):\n    i = iter(xs)\n    try:\n        while next(i) != item:\n            pass\n        return next(i)\n    except StopIteration:\n        return None", "def next_item(a, item):\n    found = 0\n    for e in a:\n        if found: return e\n        if e == item: found = 1", "def next_item(xs, item):\n    c=0\n    s=0\n    try:\n        return xs[xs.index(item)+1]\n    except (ValueError,IndexError):\n        return None\n    except AttributeError:\n        while True: \n            try:\n                t = next(xs)\n                print(t)\n                if c==1:\n                    s=t\n                    break\n                if t==item:\n                    c=1\n            except StopIteration: \n                return None\n        return s", "def next_item(xs, item):\n    return_next = False\n    for elem in xs:\n        if return_next:\n            return elem\n        elif elem == item:\n            return_next = True\n    return None", "def next_item(l, item):\n    try:\n        return l[l.index(item)+1] if item in l and l.index(item)+1 < len(l) else None\n    except:\n        return next(l)\n", "def next_item(xs, item):\n    flag = False\n    \n    for x in xs:\n        if flag == True:\n            return x\n        if item == x:\n            flag = True\n", "def next_item(xs, item):\n    find=False\n    findValue=None\n    for i in xs:\n        if find:\n            findValue=i\n            break\n        if i==item:\n            find=True\n    return findValue", "def next_item(xs, item):\n    c = 0\n    l = []\n    for x in iter(xs):\n        if x == item:\n            l.append(x)\n            c += 1\n        elif c == 1:\n            l.append(x)\n            break\n    try:\n        return l[-1] if len(l) >= 2 else None\n    except:\n        return None", "def next_item(r,v):\n    ix = iter(r)\n    try:\n        while next(ix) != v: continue\n        return next(ix)\n    except StopIteration: return None", "def next_item(xs, item):\n    # TODO: Implement me\n    a=iter(xs)\n    while(True):\n        try:\n            if next(a)==item:\n                return next(a)\n        except:\n            return None\n", "def next_item(xs, item):\n    if hasattr(xs, '__iter__') and hasattr(xs, '__next__'):\n        for x in xs:\n            if x == item:\n                return next(xs)\n\n    if xs==[] or item not in xs:\n        return None\n        \n    if xs.index(item)==(len(xs)-1):\n        return None \n    \n    return xs[(xs.index(item)+1)]", "def next_item(xs, item=None):\n    try:\n        a = xs.index(item)\n        return xs[a + 1]\n    except ValueError:\n        return None\n    except IndexError:\n        pass\n    except AttributeError:\n        if item in xs:\n            return next(xs)\n                \n", "def next_item(xs, item):\n    xs = iter(xs)\n    \n    try:\n        while True:\n            elem = next(xs)\n            if elem == item:\n                break\n    except StopIteration:\n        return None\n    \n\n    try:\n        return next(xs)\n    except StopIteration:\n        return None", "import sys\n\ndef next_item(xs, item):\n    f = 0\n    try :\n        for i in xs:\n            if f == 1 : return i\n            if i == item: f = 1\n    except : pass\n", "import collections\n\ndef next_item(xs, item):\n    try:\n        return xs[xs.index(item) + 1]\n    except AttributeError:\n        try:\n            while next(xs) != item:\n                continue\n            return next(xs)\n        except StopIteration:\n            return None\n    except (ValueError, IndexError):\n        return None", "def next_item(xs, item):\n    n = False\n    for x in xs:\n        if n: return x\n        if x == item: n = True", "import itertools\n\ndef next_item(xs, item):\n    it = iter(xs)\n    for x in it:\n        if x == item:\n            break\n    return next(it, None)", "import itertools\ndef next_item(xs, item):\n    next_item = None\n    if type(xs) is itertools.count:\n        for i in xs:\n            if i == item:\n                next_item = next(xs)\n                break\n    else:\n        list_xs = list(xs)\n        for n, x in enumerate(list_xs):\n            if item == list_xs[n] and n < len(list_xs)-1:\n                next_item = list_xs[n+1]\n                break\n    return next_item", "def next_item(xs, item):\n    r = False\n    for i in xs:\n        if r:\n            return i\n        else:\n            if i == item:\n                r = True\n    return None", "def next_item(xs, item):\n    xs = iter(xs)\n    try:\n        while (next(xs) != item) : pass\n        return next(xs)\n    except:\n        return None", "def next_item(xs, item):\n    print ('xs =', xs)\n    xs = iter(xs)\n    try:\n        while (next(xs) != item) : pass\n        return next(xs)\n    except:\n        return None", "def next_item(xs, item):\n    \"\"\"return first item in xs after item\"\"\"\n    found = False\n    for c in xs:\n        if found: return c\n        if c == item:\n            found = True\n    return None ", "def next_item(xs, item):\n    y = False\n    for x in xs:\n        if y:\n            return x\n        if item == x:\n            y = True   ", "def next_item(xs, item):\n    itr = iter(xs)\n    for elem in itr:\n        if elem == item:\n            break\n    return next(itr, None)\n", "def next_item(xs, item): \n    p=0\n    for k in xs:\n        if p==1:\n            return k\n        if k==item:\n            p=1\n    return None", "def next_item(xs, item):\n    found=False\n    for i in xs:\n        if found:\n            return i\n        else:\n            found=(i==item)", "def next_item(xs, item):\n    token=0\n    for i in xs:\n        if token==1: return i\n        if i==item: token=1\n    return None", "def next_item(xs, item):\n    print((xs,item))\n    print((type(xs)))\n    if type(xs)==str:\n        print((xs[-2:-1]))\n        return xs[xs.index(item)+1:xs.index(item)+2] if xs[-1:]!=item and item in xs else None\n    if type(xs)==list:\n        if item in xs and not item==xs[-1]:\n            return xs[xs.index(item)+1] \n        else:\n            return None\n    else :\n        p=0\n        for k in xs:\n            if p==1:\n                return k\n            if k==item :\n                p=1           \n        return None    \n", "def next_item(xs, item):\n    iterator = iter(xs)\n    for x in iterator:\n        if x == item:\n            return next(iterator, None)\n    return None", "def next_item(xs, item):\n    iterable = iter(xs)\n    for x in iterable:\n        if x == item:\n            break\n    return next(iterable, None)", "def next_item(xs, item):\n    for i, x in enumerate(xs):\n        try:\n            if (x == item and i != len(xs)-1):\n                return xs[i + 1]\n        except:\n            return next(xs)", "def next_item(xs, item):\n    it = iter(xs)\n    return None if item not in it else next(it, None)", "def next_item(xs, item):\n    if item not in xs: return None\n    if type(xs) in [str,list]:\n        return None if item not in xs[:-1] else xs[xs.index(item)+1]\n    return next(xs)", "def next_item(xs, item):\n    mark = False\n    for i in xs: \n        if mark:\n            return i\n        if i == item:\n            mark = True", "def next_item(xs, item):\n    found = False\n    result = None\n    for x in xs:\n        if found:\n            result = x\n            break\n        if x == item:\n            found = True\n    return result\n\n", "def next_item(xs, item):\n    lst = iter(xs)\n    for x in lst:\n        if x == item:\n            break\n    return next(lst, None)", "def next_item(xs, item):\n    if type(xs) == list:\n        if xs.count(item) == 0:\n            return None\n        q = xs.index(item)\n        if (q + 1) >= len(xs):\n           return None\n        return xs[q + 1]\n    else:\n        qq = 0\n        for i in xs:\n            if i == item and qq == 0:\n                qq = 1\n                continue\n            if qq == 1:\n                return i\n        return None", "def next_item(xs, item):\n    it = iter(xs)\n    for value in it:\n        if value == item:\n            return next(it, None)\n    return None", "def next_item(xs, item):\n    if type(xs) == str or type(xs) == list:\n        if item not in xs or item == xs[-1]:\n            return None\n        elif type(xs) == str:\n            return xs[xs.find(item)+1]\n        else:\n            return xs[xs.index(item)+1]\n            \n    primer_paso = next(xs)\n    segundo_paso = next(xs)\n    steps = segundo_paso - primer_paso\n    \n    if (item in xs) and ((item + steps) in xs) :\n        return item + steps\n    else:\n        return None", "def next_item(xs, item, flag=0):\n    for i in xs:\n        if flag == 1: return i\n        if i == item: flag = 1", "def next_item(xs, item):\n    print((repr(xs), item))\n    try:\n        return xs[xs.index(item)+1]\n    except ValueError:\n        return None\n    except IndexError:\n        return None\n    except AttributeError:\n        if repr(xs)[:5] == 'count':\n            return item + 1\n        else:\n            try:\n                i = 0\n                while i != item:\n                    i = xs.__next__()\n                    if i == item:\n                        return xs.__next__()\n            except StopIteration:\n                return None\n                \n", "def next_item(xs, item):\n    it = iter(xs)\n    if item in it:\n        try:\n            return next(it)\n        except:\n            pass", "def next_item(xs, item):\n    # TODO: Implement me\n    print(isinstance(xs, range))\n    i=0\n\n    for num in xs:\n        if i==1:\n            return num\n        if num==item:\n            i+=1\n    return None", "def next_item(xs, item):\n    it = iter(xs)\n    for e in it: \n        if e == item: break\n    else: return\n    for e in it: return e", "def next_item(xs, item):\n    f = 0\n    for x in xs:\n        if f: return x\n        if x == item: f = 1", "def next_item(xs, item):\n    if type(xs) is str:\n        xs = [x for x in xs]\n    if type(xs) is list: # Convert list to generator, so that everything is generator\n        xs = (x for x in xs)\n    for x in xs: # Go over generator\n        if x == item:\n            try:\n                return next(xs) # print(x)\n            except StopIteration:\n                return None\n    return None", "def next_item(xs, item):\n    if type(xs) is str or type(xs) is list:\n        for i in range(len(xs)):\n                if xs[i] == item and xs.index(xs[i]) < xs.index(xs[-1]):\n                    return xs[i+1]\n        return None\n    else:\n        j = 0\n        for j in xs:\n            if j == item:\n                return next(xs)\n"]