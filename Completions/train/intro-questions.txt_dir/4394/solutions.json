["def men_still_standing(cards):\n    # generate teams\n    A = {k: 0 for k in range(1, 12)}\n    B = A.copy()\n    \n    for card in cards:\n        # parse card\n        team = A if card[0] == \"A\" else B\n        player = int(card[1:-1])\n        color = card[-1]\n        \n        if player not in team:\n            continue\n        \n        # record penalty\n        team[player] += 1 if color == \"Y\" else 2\n        \n        if team[player] >= 2:\n            del team[player]\n        \n        if len(team) < 7:\n            break\n    \n    return len(A), len(B)\n", "class Player:\n    def __init__ (self):\n        self.red_cards = 0\n        self.yellow_cards = 0\n    @property\n    def excluded (self):\n        return (self.red_cards or \n                self.yellow_cards > 1)\n    def receive_red (self):\n        self.red_cards += 1\n    def receive_yellow (self):\n        self.yellow_cards += 1\n\nclass Team:\n    def __init__ (self, size):\n        self.size = size\n        self.players = {number: Player()\n            for number in range(1, size+1)}\n    @property\n    def count (self):\n        return sum(not player.excluded for \n            player in list(self.players.values()))\n    def give_red (self, number):\n        self.players[number].receive_red()\n    def give_yellow (self, number):\n        self.players[number].receive_yellow()\n\ndef men_still_standing (cards):\n    teams = { 'A': Team(11), 'B': Team(11) }\n    actions = {\n        'R': Team.give_red, 'Y': Team.give_yellow }\n    \n    import re\n    pattern = '(A|B)([0-9]+)(R|Y)'\n    for card in cards:\n        match = re.match(pattern, card)\n        team, player, color = match.group(1, 2, 3)\n        actions[color](teams[team], int(player))\n        if any(team.count < 7 \n               for team in list(teams.values())):\n            break\n    \n    return tuple(team.count for team in list(teams.values()))\n        \n    \n    \n    \n", "def men_still_standing(cards):\n    teams = {'A': dict.fromkeys(range(1, 12), 2), 'B': dict.fromkeys(range(1, 12), 2)}\n    for card in cards:\n        t, number, color = card[:1], int(card[1:-1]), card[-1:]\n        team = teams[t]\n        if number not in team:\n            continue\n        team[number] -= 2 if color == 'R' else 1\n        if team[number] <= 0:\n            del team[number]\n            if len(team) < 7:\n                break\n    return len(teams['A']), len(teams['B'])", "def men_still_standing(cards):\n    players, Y, R = {\"A\": 11, \"B\": 11}, set(), set()\n    for c in cards:\n        if c[:-1] not in R:\n            players[c[0]] -= c[-1] == \"R\" or c[:-1] in Y\n        if 6 in players.values():\n            break\n        (R if (c[-1] == \"R\" or c[:-1] in Y) else Y).add(c[:-1])\n    return players[\"A\"], players[\"B\"]", "'''\n1.\u521b\u5efaA,B\u4e24\u961f\u7684\u5b57\u5178 key=player\u51e0\u53f7\u7403\u5458  value=\u88ab\u7f5a\u6570 \u521d\u59cb\u503c\u90fd\u662f0 \u9ec4\u724c+1 \u7ea2\u724c+2\n2.\u5faa\u73afcards \u5148\u5224\u65ad\u662fA.B\u54ea\u961f\uff1f\u518d\u5224\u65ad\u662f\u51e0\u53f7\u7403\u5458\uff1f \u518d\u770b\u662f\u54ea\u4e2a\u989c\u8272\uff1f\n3.\u5982\u679c\u8fd9\u4e2a\u961f\u5458\u5df2\u7ecf\u4e0d\u518dteam\u4e2d\uff08\u6dd8\u6c70\uff09 \u5219\u7ee7\u7eed\u5faa\u73af\n4.\u82e5\u4e3a\u9ec4\u8272\u5219\u901a\u8fc7key=player\u627e\u5230value+1 \u7ea2\u8272\u5219+2\n5.\u82e5value=2\u5219del\n6.\u5982\u679c\u5220\u9664\u540elen(team)<7  \u8df3\u51fa\u5faa\u73af\n7.\u6700\u540e\u8fd4\u56delen(A) len(B)---\u56e0\u4e3ateam=A \u6d45\u62f7\u8d1d\n\u6ce8\u610f\uff1acopy\u662f\u6df1\u62f7\u8d1d B\u4e0d\u4f1a\u968f\u7740A\u6539\u53d8\u800c\u6539\u53d8\n'''\ndef men_still_standing(cards):\n    #\u8d77\u59cb\u7403\u5458\u72b6\u6001\n    A={k:0 for k in range(1,12)}\n    B=A.copy()\n    \n    #\u8bb0\u5f55\u7403\u5458\u4fe1\u606f\n    for card in cards:\n        team=A if card[0]=='A' else B\n        player=int(card[1:-1])\n        color=card[-1]\n        \n        if player not in team: #\u7403\u5458\u5df2\u7ecf\u88ab\u6dd8\u6c70\n            continue\n            \n        team[player]+=1 if color=='Y' else 2\n        \n        if team[player]>=2:\n            del team[player]\n            \n        if len(team)<7:\n            break\n    return len(A),len(B)\n", "def men_still_standing(cards):\n    print(cards)\n    playersA = {}\n    playersB = {}\n    \n    countA = 11\n    countB = 11\n        \n    for i in range(1, 12):\n        playersA[i] = 2\n        playersB[i] = 2\n        \n    for foul in cards:\n        team = foul[0]\n        \n        countA = 11\n        countB = 11\n        \n        if len(foul) == 4:\n            number = int(foul[1:3])\n            cardColor = foul[3]\n            \n        else: # 3 letters\n            number = int(foul[1])\n            cardColor = foul[2]\n        \n        if cardColor == 'R':\n            cardValue = 2\n        else:\n            cardValue = 1\n        \n        if team == 'A':\n              playersA[number] -= cardValue\n        else:\n              playersB[number] -= cardValue\n        \n        for value in list(playersA.values()):\n            if value <= 0:\n                countA -= 1\n              \n        for value in list(playersB.values()):\n            if value <= 0:\n                countB -= 1\n                \n        if countA < 7 or countB < 7:\n            return (countA, countB)\n            \n    return (countA, countB)\n", "def men_still_standing(cards):\n    a = {'n': 11}\n    b = {'n': 11}\n    for x in cards:\n        jg(a if x[0] == 'A' else b, x)\n        if a['n'] < 7 or b['n'] < 7: break\n    return a['n'], b['n']\ndef jg(t, x):\n    o = t.get(x[1:-1])\n    if o == 1:\n        t[x[1:-1]] = -1\n        t['n'] -= 1\n    elif o == None:\n        if x[-1] == 'R':\n            t[x[1:-1]] = -1\n            t['n'] -= 1\n        if x[-1] == 'Y':\n            t[x[1:-1]] = 1", "def men_still_standing(cards):\n    sent_off_A = set()\n    sent_off_B = set()\n    for i, card in enumerate(cards):\n        if card.endswith(\"R\"):\n            sent_off_B.add(card[1:-1]) if card[0] == \"B\" else sent_off_A.add(card[1:-1])\n        elif card.endswith(\"Y\") and cards[:i].count(card) > 0:\n            sent_off_B.add(card[1:-1]) if card[0] == \"B\" else sent_off_A.add(card[1:-1])\n        if len(sent_off_A) == 5 or len(sent_off_B) == 5:\n            break\n    return (11 - len(sent_off_A), 11 - len(sent_off_B))\n", "def men_still_standing(cards):\n    res={'A':[11]+[0]*11, 'B':[11]+[0]*11}\n    for c in cards:\n        team,num,card=c[0],int(c[1:-1]),c[-1]\n        if res[team][num]<2:\n            res[team][num]+= 1 if card==\"Y\" else 2\n            if res[team][num]>1: \n                res[team][0]-=1\n            if res[team][0]<7:break\n    return res['A'][0], res['B'][0]", "def men_still_standing(cards):\n    players = [[2] * 11, [2] *11]\n    AB = {\"A\":0, \"B\":1}\n    penalty = {\"Y\": 1, \"R\": 2}\n    for card in cards:\n        team, number, color = card[0], int(card[1:-1]), card[-1]\n        players[AB[team]][number-1] -= penalty[color]\n        if sum(i>0 for i in players[AB[team]]) < 7:\n            break\n    return tuple((sum(i>0 for i in x) for x in players))\n", "def men_still_standing(cards):\n    players = [11,11]\n    dic = {}\n    for string in cards:\n        player = string[:-1]\n        if player in dic:\n            if dic[player][1] != 'out':\n                dic[player][0] = 1\n        else:\n            if string[len(string) - 1] == 'Y':\n                dic[player] = [0,'in']\n            else:\n                dic[player] = [1,'in']\n        if dic[player][0] == 1 and dic[player][1] is 'in':\n            if player[0] == 'A':\n                players[0] -= 1\n            else:\n                players[1] -= 1\n            dic[player][1] = 'out'\n        if players[0] < 7 or players[1] < 7:\n            return tuple(players)\n    return tuple(players)\n", "def men_still_standing(cards):\n    teams = {\n        'A': [ True, True, True, True, True, True, True, True, True, True, True ],\n        'B': [ True, True, True, True, True, True, True, True, True, True, True ],       \n    }\n    for card in cards:\n        team = card[0]\n        color = card[-1]\n        player = int(card[1:-1]) - 1\n        if color == 'R' or teams[team][player] == 'Y':\n            teams[team][player] = False\n        elif color == 'Y' and teams[team][player] != False:\n            teams[team][player] = 'Y'\n        if len([1 for (_, team) in list(teams.items()) if players_up(team) >= 7]) < 2:\n            break\n    return (players_up(teams['A']), players_up(teams['B']))\n  \ndef players_up(players):\n    return len([1 for player in players if player != False])\n", "find=lambda d1,d2:(sum(1for j in d1.values()if len(j)<2and\"R\"not in j),sum(1for j in d2.values()if len(j)<2and\"R\"not in j))\ndef men_still_standing(a):\n    d1 = {i: [] for i in range(1, 12)}\n    d2 = __import__(\"copy\").deepcopy(d1)\n    for i in a:\n        [d1,d2][i[0] == \"B\"][int(i[1:-1])].append(i[-1])\n        r = find(d1,d2)\n        if any(j < 7 for j in r) : return r\n    return find(d1,d2)", "from collections import defaultdict\ndef men_still_standing(cards):\n    book = [defaultdict(int), defaultdict(int)]\n    f = lambda book: sum((-1 for b in book.values() if b > 1), 11)\n    cnt = [11, 11]\n    for c in cards:\n        team, num, card = c[0] == 'B', c[1:-1], c[-1]\n        book[team][num] += (1,2)[card == 'R']\n        cnt = list(map(f, book))\n        if min(cnt) < 7:\n            break\n    return tuple(cnt)", "def men_still_standing(cards):\n    A = {str(i):0 for i in range(1,12)}\n    B = A.copy()\n    for card in cards:\n        if (11-sum(1 for i in A.values() if i >= 2)) <= 6 or (11-sum(1 for i in B.values() if i >= 2)) <= 6: break\n        if card[-1] == 'Y': eval(card[0])[card[1:-1]] += 1 \n        elif card[-1]==\"R\": eval(card[0])[card[1:-1]] += 2\n    return (max(11-sum(1 for i in A.values() if i >= 2), 6), max(11-sum(1 for i in B.values() if i >= 2),6))", "def men_still_standing(cards):\n    red = []\n    yellow = []\n    still_playing = {\"A\": 11, \"B\": 11}\n\n    for card in cards:\n        if still_playing[\"A\"] < 7 or still_playing[\"B\"] < 7:\n            break\n\n        if card[-1::] == \"Y\" and card[:-1:] not in red:\n            if card[:-1:] not in yellow:\n                yellow.append(card[:-1:])\n            elif card[:-1:] in yellow:\n                red.append(card[:-1:])\n                still_playing[card[:1:]] -= 1\n        elif card[-1::] == \"R\" and card[:-1:] not in red:\n            red.append(card[:-1:])\n            still_playing[card[:1:]] -= 1\n\n    return still_playing[\"A\"], still_playing[\"B\"]", "def men_still_standing(cards):\n    team_a = {i+1:0 for i in range(11)}\n    team_b = team_a.copy()\n    teams_dict = {'A': team_a, 'B': team_b}    \n    gone_players = {'A': [], 'B': []}\n    for booking in cards:\n        team = teams_dict[booking[0]]\n        player = int(booking[1:-1])\n        if player in gone_players[booking[0]]:\n            continue\n        if booking[-1]=='R':\n            team[player] +=1\n        else:\n            team[player] +=0.5\n        if team[player] >= 1:\n            gone_players[booking[0]].append(player)\n        if len(gone_players[booking[0]]) > 4:\n            break\n    return tuple([11 - len(gone_players['A']), 11 - len(gone_players['B'])])\n        \n", "def men_still_standing(cards):\n    A_sentoff = set()\n    B_sentoff = set()\n    \n    for index, card in enumerate(cards):\n        if card[-1] == \"R\":\n            A_sentoff.add(card[1:-1]) if card[0] == \"A\" else B_sentoff.add(card[1:-1])\n        elif card[-1] == \"Y\" and cards[:index].count(card) > 0:\n            A_sentoff.add(card[1:-1]) if card[0] == \"A\" else B_sentoff.add(card[1:-1])\n        \n        if len(A_sentoff) == 5 or len(B_sentoff) == 5:\n            break\n    \n    a_remaining = 11 - len(A_sentoff)\n    b_remaining = 11 - len(B_sentoff)\n    \n    return (a_remaining, b_remaining)", "def men_still_standing(cards):\n    if cards == []: return (11, 11)\n    a, b = [1]*11, [1]*11\n    dicA, dicB = {}, {}\n    for i in cards:\n        if i[-1] == 'Y':\n            if i[:-1] in dicA:\n                a[dicA[i[:-1]]-1] = 0\n            elif i[:-1] in dicB:\n                b[dicB[i[:-1]]-1] = 0\n            else:\n                if i[0] == 'A':\n                    dicA[i[:-1]] = int(i[1:-1])\n                else:\n                    dicB[i[:-1]] = int(i[1:-1])\n        elif i[-1] == 'R':\n            if i[0] == 'A':\n                a[int(i[1:-1])-1] = 0\n            elif i[0] == 'B':\n                b[int(i[1:-1])-1] = 0\n        if sum(a) == 6 or sum(b) == 6:\n            return (sum(a), sum(b))\n    return (sum(a),sum(b))\n", "def men_still_standing(cards):\n\n    print(cards)\n    \n    Team_A = 11\n    Team_B = 11\n    \n    Yellows = []\n    Reds = []\n    \n    for event in cards:\n        \n        if Team_A == 6 or Team_B == 6: #Traps too few players and abandons the match\n            #print (\"Match abandoned\")\n            return (Team_A, Team_B)\n\n        else:\n        \n            print(event)\n\n            if event[-1] == \"R\" and event[0:(len(event)-1)] not in Reds:\n    \n                print(\"Red card event\")\n    \n                Reds.append(event[0:(len(event)-1)]) # Add player to list of sent off players\n                print(\"Red Cards\",Reds) \n    \n                if event[0] == \"A\":\n                    Team_A -= 1\n                    print(\"Team A remaining = \",str(Team_A))\n                else:\n                    Team_B -= 1\n                    print(\"Team B remaining = \",str(Team_B))\n    \n            elif event[-1] == \"Y\" and event[0:(len(event)-1)] in Yellows and event[0:(len(event)-1)] not in Reds:\n                print(\"2nd Yellow Card event, Player sent off\", Reds)\n                Reds.append(event[0:(len(event)-1)]) # Add player to list of sent off players\n    \n                if event[0] == \"A\":\n                    Team_A -= 1\n                    print(\"Team A remaining = \",str(Team_A))\n                else:\n                    Team_B -= 1\n                    print(\"Team B remaining = \",str(Team_B))   \n    \n            elif event[-1] == \"Y\":\n                    \n                    if event[0:(len(event)-1)] in Reds:\n                        print(\"Player already sent off\")\n                    else:\n                        Yellows.append(event[0:(len(event)-1)]) # Add player to list of players with a Yellow card\n                        print(\"Yellow card issued to\",Yellows)\n            else:\n                print(\"player already sent off!\")\n    \n    print(Team_A, Team_B)\n    \n    return(Team_A, Team_B)"]