["from math import floor\ndef group_size(S, D):\n    return floor((2*D+S*(S-1))**.5+.5)", "from math import sqrt, ceil\n\n# 1st group spends in the hotel s days,\n#  2nd group - s + 1 days,\n#  3rd group - s + 2 days,\n#  ...,\n#  nth group - s + n - 1 days.\n#\n# The total number of days for n groups: n * (s + s + n - 1) / 2 \n#  (by the formula of arithmetic series).\n# Let d be the last day of the nth group. Then\n#  n * (s + s + n - 1) / 2 = d, \n#  n**2 + (2*s-1)*n - 2*d = 0,  \n#  The only possible root of this quadratic equation equals\n#  1/2 * (-p + sqrt(p**2 - 4*q), where p = 2*s - 1, q = 2*d.  \n#  Thus, n = (1 - 2*s + sqrt((2*s - 1)**2 + 8*d)) / 2.\n# But if d is not the last day of the group n, then n will be fractional,\n#   and we have to round it up (get the ceiling of n).\n\ndef group_size(s, d):\n    n = ceil((1 - 2*s + sqrt((2*s - 1)**2 + 8*d)) / 2)\n    return s + n - 1", "from math import sqrt\n\ndef group_size(size, day):\n    skip = size * (size - 1) // 2\n    day += skip\n    return round(sqrt(day * 2))", "from math import floor,sqrt\n\ndef group_size(s,d):\n    return floor(sqrt(2*d+s*(s-1))+0.5)", "def group_size(S, D):\n    a000217 = lambda n: (n + 1) * n // 2\n    a002024 = lambda n: int((1 + (1 + 8 * n) ** .5) / 2)\n    return a002024(D - 1 + a000217(S - 1))", "from math import ceil\n\ndef group_size(S, D):\n    return  ceil((0.25 + 2 * D + S * (S - 1))**0.5 - 0.5)", "group_size=lambda S,D:((2*D+S*S-S)**.5+.5)//1", "from math import ceil\ndef group_size(S,D):\n    b=2*S-1\n    return ceil((-b+(b**2+8*D)**0.5)/2)-1+S", "from math import ceil\ndef group_size(S, D):\n    return ceil(((1+4*(S**2-S+2*D))**.5-1)/2)", "import math\n\ndef group_size(S, D):\n    return math.ceil(((-1 +(1 - 4 * S + 4 * S ** 2 + 8 * D) ** 0.5) / 2))\n"]