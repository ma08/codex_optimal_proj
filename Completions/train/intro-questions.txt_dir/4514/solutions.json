["def int_to_negabinary(i):\n    ds = []\n    while i != 0:\n        ds.append(i & 1)\n        i = -(i >> 1)\n    return ''.join(str(d) for d in reversed(ds)) if ds else '0'\n    \ndef negabinary_to_int(s):\n    i = 0\n    for c in s:\n        i = -(i << 1) + int(c)\n    return i", "def int_to_negabinary(i):\n    i, s = -i, ''\n    while i:\n        i, r = divmod(i, -2)\n        s += str(-r)\n    return s[::-1] or '0'\n    \ndef negabinary_to_int(s):\n    i, b = 0, 1\n    for c in s[::-1]:\n        i += int(c) * b\n        b *= -2\n    return i", "def int_to_negabinary(i):\n    return '{:b}'.format((0xAAAAAAAA + i) ^ 0xAAAAAAAA)\n\ndef negabinary_to_int(n):\n    return (int(n, 2) ^ 0xAAAAAAAA) - 0xAAAAAAAA", "def int_to_negabinary(n):\n    return int_to_negabinary(n//-2+n%2).lstrip('0') + str(n%2) if n else '0'\n\ndef negabinary_to_int(s):\n    return negabinary_to_int(s[:-1])*-2 + int(s)%2 if s else 0", "def int_to_negabinary(i):\n    digits = []\n    if not i:\n        digits = ['0']\n    else:\n        while i != 0:\n            i, remainder = divmod(i, -2)\n            if remainder < 0:\n                i, remainder = i + 1, remainder + 2\n            digits.append(str(remainder))\n    return ''.join(digits[::-1])\n    \ndef negabinary_to_int(s):\n    num = 0\n    for c in s:\n        num *= -2\n        num += ('01').find(c)\n    return num\n", "def int_to_negabinary(i):\n    if not i: return '0'\n\n    digits = []\n    while i != 0:\n        i, r = divmod(i, -2)\n        i, r = (i + 1, r + 2) if r < 0 else (i, r)\n        digits.append(str(r))\n    return ''.join(digits[::-1])\n    \ndef negabinary_to_int(s):\n    return sum([int(c)*(-2)**i for i, c in enumerate(s[::-1])])", "def int_to_negabinary(i):\n    mask = 0xAAAAAAAAAAAA\n    return bin((i + mask) ^ mask)[2:]\n    \ndef negabinary_to_int(s):\n    mask = 0xAAAAAAAAAAAA\n    return (int(s,2) ^ mask) - mask", "def int_to_negabinary(n):\n    def do(n1):\n        li = []\n        while n1 != 0:\n            li.append(str(abs(n1 % (-2)))) ; n1 //= -2\n        return li[::-1]\n    return \"\".join([do(abs(n)),do(-n)][n>0]) or '0'\n    \nnegabinary_to_int=lambda n:sum([int(j)*((-2)**i)for i,j in enumerate(n[::-1])])", "def int_to_negabinary(i):\n    return bin((i + 0xAAAAAAAA) ^ 0xAAAAAAAA)[2:]\n        \n    \ndef negabinary_to_int(s):\n    return sum(int(d) * (-2)**i for i,d in enumerate(s[::-1]))", "mask = 0xAAAAAAAA;\n\ndef int_to_negabinary(i):\n    return '{0:b}'.format((mask + i) ^ mask)\n    \ndef negabinary_to_int(s):\n    return (int(s, 2) ^ mask) - mask\n"]