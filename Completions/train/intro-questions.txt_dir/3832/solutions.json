["def all_permuted(n):\n    a,b = 0, 1\n    for i in range(1,n): a,b = b, (i+1)*(a+b)\n    return a", "from itertools import islice\n\n\ndef A000166():\n    # https://oeis.org/A000166\n    a, b, n = 1, 0, 1\n    while True:\n        yield a\n        a, b = b, n * (a + b)\n        n += 1\n\n\nall_permuted = dict(enumerate(islice(A000166(), 5000))).get", "subfactorial = [1, 0]\nfor n in range(1, 10 ** 4):\n    subfactorial.append(n * (subfactorial[-1] + subfactorial[-2]))\nall_permuted = subfactorial.__getitem__", "def f(n):\n    #by working through sizes 1-9 found an iterative relationship\n    #f(1) = 0\n    #f(n) = n*f(n-1) + (1 if n is even else -1)\n    if (n==0):\n        return 1\n    else:\n        return n*f(n-1)+(1 if n%2==0 else -1)\n\ndef all_permuted(array_length):\n    return f(array_length)", "import math\n\ndef all_permuted(n):    \n    return n * all_permuted(n-1) + (-1)**n if n > 2 else n - 1", "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef all_permuted(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n-1)*(all_permuted(n-1)+all_permuted(n-2))", "M = [1,0]\nfor V in range(1,9487) : M.append(V * (M[V] + M[V - 1]))\nall_permuted = lambda Q : M[Q]", "def all_permuted(array_length):\n    a = [1, 0];\n    for x in range(2, array_length + 1):\n        a[0], a[1] = a[1] , (x-1) * (a[1] + a[0])\n    return a[1]", "all_permuted=a=lambda n:(0,0,1)[n]if n<3else n*a(n-1)+(-1)**n", "import math\n\ndef all_permuted(n):\n    if n == 0:\n        return 1\n    \n    return n * all_permuted(n - 1) + (-1) ** n"]