["from fractions import gcd\n\ndef relatively_prime (n, l):\n    return [x for x in l if gcd(n, x) == 1]\n", "from math import gcd\n\ndef relatively_prime (n, l):\n    return [x for x in l if gcd(n, x) == 1]", "from math import gcd\n\ndef relatively_prime (n, lst):\n    return [m for m in lst if gcd(m, n) == 1]", "def relatively_prime (n, l):\n    lst = []\n    new = set(x for x in range(1, n+1) if not n%x)\n    for y in l:\n        if len(new & set(x for x in range(1, y+1) if not y%x)) == 1:\n            lst.append(y)\n    return lst", "G=lambda Q,S : G(S,Q % S) if S else Q\nrelatively_prime = lambda Q,S : [S for S in S if 1 == G(Q,S)]", "def gcd(a,b):\n    return a if b == 0 else gcd(b, a % b)\n        \ndef relatively_prime (n, l):\n    return [x for x in l if gcd(n,x) == 1]", "from fractions import gcd\n\ndef relatively_prime (n, l):\n    return [i for i in l if gcd(i,n) == 1]", "def relatively_prime (n, l):\n    from fractions import gcd\n    return [i for i in l if gcd(n,i)==1]"]