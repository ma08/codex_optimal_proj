["def target_game(values):\n    a = b = 0\n    for n in values:\n        a, b = b, max(a + n, b)\n    return max(a, b)", "def target_game(values):\n    max_can_shoot, max_can_not_shoot = 0, 0\n    for val in values:\n        new = max_can_shoot + val\n        max_can_shoot = max(max_can_not_shoot, new)\n        max_can_shoot, max_can_not_shoot = max_can_not_shoot, max_can_shoot\n    return max(max_can_shoot, max_can_not_shoot)", "from functools import lru_cache\n\ndef target_game(values):\n    @lru_cache(maxsize=None)\n    def rec(i):\n        if i >= len(values): return 0\n        if values[i] <= 0: return rec(i+1)\n        return max(rec(i+1), values[i]+rec(i+2))\n    return rec(0)", "def target_game(values):\n    n = len(values)\n    dp = [0] * (n + 1)\n    dp[1] = values[0] if values[0] > 0 else 0\n    for ind in range(2, n + 1):\n        dont_take = dp[ind - 1]\n        take = dp[ind - 2] + values[ind - 1] if values[ind - 1] > 0 else dp[ind - 2]\n        dp[ind] = max(dont_take, take)\n    return dp[n]", "def target_game(values):\n    dicto = {}\n    def target_games(values,ind=0,reloaded=True,sumo=0):\n        key = f\"ind {ind} sumo {sumo} reloaded {reloaded}\"\n        if key in dicto: return dicto[key]\n        if ind >= len(values): return sumo\n        while values[ind] < 0:\n            ind += 1\n            reloaded = True\n            if ind == len(values): return sumo\n        if reloaded: d = target_games(values,ind+1,not reloaded,sumo+values[ind])\n        elif not reloaded: d = target_games(values,ind+1,not reloaded,sumo)\n        f = target_games(values,ind+1,reloaded,sumo)\n        dicto[key] = max(d,f)\n        return dicto[key]\n    return target_games(values)", "def target_game(values):\n    values[2] = get_highest_possible_score(0, values[0], values[2]) \n    for i in range(3,len(values)):\n        values[i] = get_highest_possible_score(values[i-3], values[i-2], values[i]) \n    return max(values)\n\ndef get_highest_possible_score(a,b,n):\n    a = max(0,a)\n    b = max(0,b)\n    n = max(0,n)\n    \n    if(a>b):\n        return a+n\n\n    return b+n", "def target_game(values):\n    sum1 = 0\n    sum2 = 0\n    for value in values:\n        sum1 = max(sum1 + value, sum2)\n        sum1, sum2 = sum2, sum1\n    return max(sum1, sum2)\n", "def target_game(arr):\n    # your code goes here\n    a = 0\n    b = 0\n     \n    for i in arr: \n        \n      newA = a if (a > b) else b\n    \n      b = a + i\n      a = newA\n      \n    if (a > b):\n        return a\n    else: \n        return b\n", "def target_game(arr):\n    # your code goes here\n    a = 0\n    b = 0\n     \n    for i in arr: \n        \n      newA = a if (a > b) else b\n    \n      b = a + i\n      a = newA\n      \n    # return max of incl and excl \n    if (a > b):\n        return a\n    else: \n        return b\n", "memo={}\ndef target_game(values):\n    if len(values)==1:\n        return max(values[0],0)\n    elif len(values)==2:\n        return max(values[0],values[1],0)\n    elif len(values)==3:\n        return max(max(values[0],values[2],values[0]+values[2],0),values[1])\n    t=tuple(values)\n    if t in memo:\n        return memo[t]\n    r=max(max(values[0],0)+target_game(values[2:]),max(values[1],0)+target_game(values[3:]))\n    memo[t]=r\n    return r"]