["from fractions import gcd\nfrom functools import reduce\n\ndef mn_lcm(m, n):\n    return reduce(lambda x, y: (x * y) / gcd(x, y), list(range(min(m, n), max(m, n) + 1)))\n\n", "from fractions import gcd\nfrom functools import reduce\ndef mn_lcm(m, n):\n    return reduce(lambda x, y: (x * y) / gcd(x, y), range(min(m, n), max(m, n) + 1))", "from fractions import gcd\nfrom functools import reduce\n\ndef mn_lcm(m, n):\n    m, n = sorted([m, n])\n    return reduce(lambda x, y: x * y / gcd(x, y), range(m, n + 1))", "def gcd(a,b):\n    return a if b == 0 else gcd(b,a%b)\n    \ndef mn_lcm(m,n):\n    if n < m:\n        m, n = n, m\n    ans = m\n    for i in range(m,n+1):\n        ans = ((i*ans)) / (gcd(i, ans)) \n    return ans", "from fractions import gcd\nfrom functools import reduce\n\ndef _lcm(a, b):\n    return a and b and (a * b // gcd(a, b)) or 0\n\ndef lcm(*args):\n    return args and reduce(_lcm, args) or 0\n\ndef mn_lcm(m,n):\n    low, high = sorted((m, n))\n    return lcm(*range(low, high+1))", "import functools\ndef gcd_rec(a, b): \n    if b:\n        return gcd_rec(b, a % b)\n    else:\n        return a\n\ndef mn_lcm(m,n):\n  lst = list(range(min(n,m),max(n,m)+1))\n  return functools.reduce(lambda a,b : a*b/gcd_rec(a,b),lst ) ", "def gcd(a, b):\n    if a < b: \n        b, a = a, b\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef mn_lcm(m, n):\n    m, n = sorted([m, n])\n    f = 1\n    for i in range(m, n + 1):\n        f = abs(i * f) // gcd(i, f)\n    return f", "from fractions import gcd\nfrom functools import reduce\ndef lcm(a,b):\n    return a//gcd(a,b)*b\n\ndef mn_lcm(m,n):\n    m,n = sorted([m,n])\n    return reduce(lcm, range(m,n+1))"]