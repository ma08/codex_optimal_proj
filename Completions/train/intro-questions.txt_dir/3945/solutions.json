["def decipher_message(message):\n    n = int(len(message) ** 0.5)\n    return ''.join(message[i::n] for i in range(n))", "from math import sqrt\ndef decipher_message(message):\n    key = int(sqrt(len(message)))\n    plaintext = [\"\"] * key\n    current_row = 0\n    for symbol in message:\n        plaintext[current_row] += symbol\n        current_row += 1\n        if current_row > key - 1:\n            current_row = 0\n    return \"\".join(plaintext)", "import math\ndef decipher_message(m):\n    l = int(math.sqrt(len(m)))  \n    return ''.join(''.join(m[i+l*j] for j in range(l)) for i in range(l))", "def decipher_message(message):\n    side_length = int(len(message) ** .5)\n    return \"\".join(message[i::side_length] for i in range(side_length))", "def decipher_message(message):\n    if not message:\n        return \"\"\n    res=[]\n    for i in range(0, len(message), int(len(message)**0.5)):\n        res.append(message[i:i+int(len(message)**0.5)])\n    solution=\"\"\n    for i in range(len(res)):\n        for j in range(len(res[i])):\n            solution+=res[j][i]\n    return solution", "def decipher_message(message):\n    from math import sqrt\n    if len(message) == 0:\n        return message\n    else:\n        lists, output = [],[] #empty lists for storing column values and output message\n        x = int(sqrt(len(message))) #denotes the column/row length\n        for i in range(0,len(message),x):\n            lists.append(list(message[i:i+x])) #simulates the n x n grid \n        for i in range(len(lists)):\n            for j in range(len(lists)): #iterates over each grid element\n                output.append(lists[j][i]) #appends to output list\n        return ''.join(output) #decoded message\n", "def decipher_message(message):\n    if not message:\n        return ''\n    s = int(len(message) ** 0.5)\n    l = [message[i:i+s] for i in range(0,len(message),s)]\n    r = []\n    for i in range(s):\n        r.append(''.join(list(map(lambda x:x[i], l))))\n    return ''.join(r)", "def decipher_message(m):\n    Q = int(len(m)**.5)\n    return ''.join(''.join(i) for i in (zip(*[m[i:i+Q] for i in range(0, len(m), Q)]))) if m else ''"]