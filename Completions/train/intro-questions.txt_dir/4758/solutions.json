["def connect_four_place(columns):\n    player, board, placed = 1, [['-']*7 for _ in range(6)], [-1]*7\n    for c in columns:\n        player ^= 1\n        board[placed[c]][c] = \"YR\"[player]\n        placed[c] -= 1\n    return board\n", "from itertools import cycle, zip_longest\n\nEMPTY_CELL, HIGH, WIDTH = '-', 6, 7\n\ndef connect_four_place(columns):\n    player, cols = cycle(['Y', 'R']), [[] for _ in range(WIDTH)]\n    \n    for c in columns:           cols[c].append(next(player))\n    while len(cols[0]) < HIGH:  cols[0].append(EMPTY_CELL)\n    \n    return [ list(l) for l in zip_longest(*cols, fillvalue=EMPTY_CELL) ][::-1]", "from itertools import zip_longest\n\ndef connect_four_place(columns):\n    grid = [[] for _ in [0] * 7] + ['-'*6]\n    for i, c in enumerate(columns):\n        grid[c].append('YR'[i % 2])\n    return [list(l[:-1]) for l in\n            zip_longest(*(grid), fillvalue='-')][::-1]", "def place(table, pos, arg):\n    for i in range(6):\n        if(table[5-i][pos]=='-'):\n            table[5-i][pos] = arg\n            break\n\ndef connect_four_place(columns):\n    table=[['-' for i in range(7)] for j in range(6)]\n    for i in range(len(columns)):\n        if i%2==0:\n            place(table, columns[i], 'Y')\n        else:\n            place(table, columns[i], 'R')\n    return table", "from collections import Counter\n\ndef connect_four_place(columns):\n    board = [['-' for i in range(7)] for i in range(6)]\n\n    c = Counter(columns)\n\n    for i,x in enumerate(columns):\n        board[columns.count(x) - c[x]][x] = 'YR'[i%2]\n        c[x] -= 1\n\n    return list(reversed(board))", "import itertools\n\ndef connect_four_place(columns):\n    cs = [[] for i in range(7)]\n    for color, i in zip(itertools.cycle('YR'), columns):\n        cs[i].append(color)\n    for c in cs:\n        c.extend(['-'] * (6 - len(c)))\n    return [list(x) for x in zip(*cs)][::-1]\n", "def connect_four_place(columns):\n    board = [[\"-\" for i in range(7)] for j in range(6)]\n    for turn, column in enumerate(columns):\n        for line in board:\n            if line[column] == '-':\n                line[column] = \"R\" if turn % 2 else \"Y\"\n                break\n    return board[::-1]\n", "def connect_four_place(columns):\n    mat = [[] for _ in range(7)]\n    ply = 0\n    for col in columns:\n        mat[col].append('YR'[ply])\n        ply ^= 1\n    for col in mat:\n        while len(col) < 6: col.append('-')\n    return [list(row) for row in zip(*mat)][::-1]", "COLUMNS = 7\nROWS = 6\n\ndef connect_four_place(columns):\n    board = [[\"-\"] * COLUMNS for row in range(ROWS)]\n    height = [0] * COLUMNS\n    for i, column in enumerate(columns):\n        if i % 2 == 0:\n            player = \"Y\"\n        else:\n            player = \"R\"\n        board[height[column]][column] = player\n        height[column] += 1\n    return board[::-1]", "def connect_four_place(columns):\n    ls = [['-']*7,['-']*7,['-']*7,['-']*7,['-']*7,['-']*7] # create the board\n    for i,j in enumerate(columns):\n        if i%2 == 0: #assign the tokens\n            token = 'Y'\n        else:\n            token = 'R'\n        z = 5\n        while z >= 0:   #deal with already filled-in positions\n            if ls[z][j] == '-':\n                ls[z][j] = token\n                break\n            elif ls[z][j] != '-':\n                z -= 1      \n    return ls"]