["def find_missing(arr1, arr2):\n    return sum(arr1) - sum(arr2)\n", "from functools import reduce\ndef find_missing(arr1, arr2):\n    from itertools import chain\n    from functools import reduce\n    from operator import xor\n    return reduce(xor, chain(arr1, arr2))\n", "def find_missing(A1, A2):\n    return sum(A1) - sum(A2)\n", "def find_missing(a, b):\n    for i in a:\n        try: b.remove(i)\n        except: return i", "def find_missing(arr1, arr2):\n    for x in set(arr1):\n        if arr1.count(x) != arr2.count(x): return x\n", "def find_missing(arr1, arr2):\n    return next(a for a in set(arr1) if arr1.count(a) != arr2.count(a))\n#    return next((a for a, b in zip(sorted(arr1), sorted(arr2)) if a != b), sorted(arr1)[-1])\n", "from functools import reduce\nfrom operator import xor\n\ndef find_missing(xs, ys):\n    return reduce(xor, xs, 0) ^ reduce(xor, ys, 0)\n", "find_missing = lambda *a, C=__import__(\"collections\").Counter: C.__sub__(*map(C, a)).popitem()[0]", "from collections import Counter\n\ndef find_missing(*args):\n    c1,c2 = map(Counter, args)\n    return (c1-c2).popitem()[0]", "def find_missing(a, b):\n    for x in b:\n        a.remove(x)\n\n    return a[0]"]