["def max_multiple(divisor, bound):\n    return bound - (bound % divisor)", "def max_multiple(divisor, bound):\n    return bound // divisor * divisor", "max_multiple = lambda divisor, bound: bound - (bound % divisor)", "def max_multiple(divisor, bound):\n    l = []\n    for int in range(bound + 1):\n        if int % divisor == 0:\n            l.append(int)\n    return max(l)", "def max_multiple(divisor, bound):\n    m = bound // divisor\n    return divisor * m", "def max_multiple(divisor, bound):\n    n = bound\n    while n >= divisor:\n        if n%divisor == 0: return n\n        else: n -= 1\n    if n < divisor: return 0", "def max_multiple(divisor, bound):\n    return divisor * int(bound/divisor)", "def max_multiple(divisor, bound):\n    #your code here\n    while bound > divisor:\n        if bound % divisor == 0:\n            return bound\n        else:\n            bound = bound - 1\n            return max_multiple(divisor, bound)", "def max_multiple(divisor, bound):\n    return max([n for n in range(1, bound + 1) if n % divisor == 0])", "def max_multiple(divisor, bound):\n    last, n = 0, 0\n    while n <= bound:\n        last = [n, last][n%divisor]\n        n += divisor\n    return last", "def max_multiple(d,b):\n    L=[]\n    for i in range(0,b+1):\n        if i%d==0:\n            L.append(i)\n    return max(L)", "def max_multiple(divisor, bound):\n    return next(i for i in range(bound, 0, -1) if i % divisor == 0)\n", "def max_multiple(d, b): \n    return b // d * d", "def max_multiple(divisor, bound):\n    \n    for x in reversed(range(bound+1)):\n        if x % divisor == 0:\n            return x\n            \n    return 0", "def max_multiple(divisor, bound):\n    return [x for x in range(divisor*2, bound+1, divisor)][-1]", "def max_multiple(divisor, bound):\n    #your code here\n    multiple = (bound//divisor)\n    return multiple*divisor\n      \n", "def max_multiple(divisor, bound):\n    while bound:\n        if not bound%divisor :\n            return bound\n        bound -=1\n", "def max_multiple(divisor, bound):\n    a = bound % divisor\n    return bound - a", "def max_multiple(divisor, bound):\n    a,r=divmod(bound,divisor)\n    return bound-r", "def max_multiple(divisor, bound):\n    return max(range(divisor,bound+1,divisor))", "import random\ndef max_multiple(divisor, bound):\n    x=int(bound/divisor)\n    a=divisor*x\n    return a", "def max_multiple(divisor, bound):\n    return max(n for n in range(divisor, bound + 1) if n % divisor == 0 and n <= bound and n >=0) if divisor <= bound else 0", "from math import floor\ndef max_multiple(divisor, bound):\n    return floor(bound/divisor) * divisor", "def max_multiple(divisor, bound):\n    ans = []\n    for x in range(1, bound + 1):\n        if x % divisor == 0:\n            ans.append(x)\n    return max(ans)", "def max_multiple(divisor, bound):\n    res = 0\n    for i in range(bound+1):\n        if i%divisor == 0:\n            if i > res:\n                res = i\n    return res", "def max_multiple(d, b):\n    l=0\n    for i in range(d,b+1):\n        if i%d==0:\n            if i>l:\n                l=i\n    return l", "def max_multiple(divisor, bound):\n\n     return max(x for x in range(0, bound+1) if x % divisor == 0)\n     \n     \n     \n#      (0, bound+1) if x%divisor == 0)\n", "def max_multiple(snail, snails):###          o     o\n    return (snails // snail) * snail#       |    /\n    ##|##########################\\###      |   /\n   ###\\##########################|###     /##/ \n    ###\\########################|##     ####  \n      #########################/##    #####    \n #\\##\\  ####_#####_#####_####/##   #######    \n    #####################################~~\n", "def max_multiple(divisor, bound):\n    while bound > divisor:\n        if bound % divisor == 0:\n            return bound\n        bound -= 1", "def max_multiple(divisor, bound):\n    array = [ i for i in range(1, bound + 1)]\n    array.reverse()\n    for n in array:\n        if n % divisor == 0:\n            return n", "def max_multiple(divisor, bound):\n    num_lst = []\n    for i in range(1, bound+1):\n        if i % divisor == 0:\n            num_lst.append(i)\n    return num_lst[-1]\n        \n    #your code here\n", "def max_multiple(d, b):\n    #your code here\n    for n in range(b+1,d,-1):\n        if n%d == 0 and n <= b:\n            return n\n", "def max_multiple(divisor, bound):\n    if bound % divisor == 0:\n        return bound\n    else:\n        x = int(bound/divisor)\n        return divisor * x\n", "def max_multiple(divisor, bound):\n    for num in range(bound, 0,-1):\n        print(num)\n        if num % divisor == 0:\n            return num\n", "def max_multiple(divisor, bound):\n    ans=[]\n    for x in range(1,bound+1):\n        if x%divisor==0:\n            ans.append(x)\n    return ans[-1]", "def max_multiple(d, b):\n    for i in range(b, d, -1):\n        if i % d == 0 and i <= b:\n            return i", "def max_multiple(divisor, bound):\n    for x in range(bound+1):\n        if (bound-x)%divisor == 0:\n            return bound-x", "def max_multiple(divisor, bound):\n    return max(list(i for i in range(1,bound+1) if i%divisor==0))", "def max_multiple(divisor, bound):\n    return int([i for i in range(bound, 0, -1) if i % divisor == 0][0])\n", "import math\n\ndef max_multiple(divisor, bound):\n    \n    if bound%divisor ==0:\n        return bound\n    else:\n        nearestFactor = math.floor(bound/divisor)\n        return(divisor*nearestFactor)", "def max_multiple(divisor, bound):\n    for loop in range(bound, 0, -1):\n        if loop % divisor == 0 and loop > 0:\n            return loop", "def max_multiple(divisor, bound):\n    new=[]\n    for n in range(1000000):\n        if n % divisor == 0 and n <= bound:\n            new.append(n)\n    return max(new)", "def max_multiple(divisor, bound):\n    temp = max([i for i in range(divisor, bound+1) if i % divisor == 0 and i <= bound and i > 0])\n    return temp\n", "def max_multiple(divisor, bound):\n    valid_list = []\n    for n in range(1,bound+1):\n        if n % divisor == 0:\n            valid_list.append(n)\n    valid_list = sorted(valid_list)\n    return valid_list[-1]", "def max_multiple(divisor, bound):\n    n = bound\n    while n%divisor != 0:\n        n-=1\n        if n%divisor == 0:\n            break\n    return n", "def max_multiple(divisor, bound):\n    lista=[i for i in range(1,bound+1)]\n    lista.reverse()\n    for i in lista:\n         if (i % divisor) == 0:\n            return i", "def max_multiple(a, b):\n    res=0\n    for i in range (b+1):\n        if i%a==0:\n            if i>res:\n                res = i\n    return res\nprint((max_multiple(10, 50)))\n", "def max_multiple(divisor, bound):\n    n = [x for x in range(bound+1) if x%divisor==0]\n    return max(n)\n", "def max_multiple(divisor, bound):\n    num = []\n    for x in range(divisor, bound+1):\n        if x % divisor == 0 and x <= bound and x > 0:\n            num.append(x)\n    return max(num)\n        \n", "def max_multiple(divisor, bound):\n    contained = []\n    for x in range(divisor,bound+1):\n        if x%divisor == 0:\n            contained.append(x)\n    return max(contained)", "def max_multiple(divisor, bound):\n    r=[]\n    for i in range(bound+1):\n        if i%divisor == 0:\n            r.append(i)\n    return max(r)\n", "def max_multiple(divisor, bound):\n    lst=[x for x in range(bound+1) if x%divisor==0]\n    return lst[-1]", "def max_multiple(d, b):\n    return next(n for n in range(b, 0, -1) if n % d == 0)", "def max_multiple(divisor, bound):\n    a=bound\n    print(( divisor,a))\n    while a>divisor:\n        if a%divisor==0 and a>0:\n            return a\n        else :\n            a=a-1\n            if a%divisor==0 and a>0:\n                return a\n\n        \n", "def max_multiple(divisor, bound):\n    return [i for i in range(divisor,bound+1) if i%divisor==0][-1]", "def max_multiple(b, d):\n    return max([i for i in range(1, d+1) if i % b == 0])", "def max_multiple(divisor, bound):\n    a = []\n    for x in range(divisor, bound+1):\n        if x % divisor == 0:\n            a.append(x)\n    return max(a)\n\n\n", "def max_multiple(divisor, bound):\n    #your code here\n    for i in range(bound,divisor,-1):\n        if i%divisor==0 and i>0:\n            return i", "def max_multiple(divisor, bound):\n    s = [ x for x in range(1,bound + 1) if x % divisor == 0 and x <= bound]\n    return max(s)", "def max_multiple(divisor, bound):\n    c = []\n    for x in range(1,bound + 1):\n        if x % divisor == 0 and x <= bound:\n            c.append(x)\n    return max(c)", "def max_multiple(divisor, bound):\n    while bound > 0 and bound%divisor != 0:\n        bound += -1\n    return bound", "def max_multiple(divisor, bound):\n    for num in range(bound):\n        if not (bound - num) % divisor:\n            return bound - num", "def max_multiple(divisor, bound):\n    for n in range(divisor,bound):\n        if bound%divisor == 0:\n            return bound\n        elif n%divisor == 0 and n <=bound and ((n+divisor) > bound):\n            return n\n    #your code here\n", "def max_multiple(divisor, bound):\n    i = bound\n    while i > 1:\n        if i % divisor == 0 and i <= bound:\n            return i\n        i -= 1", "def max_multiple(divisor, bound):\n    n = bound\n    while (n > 0):\n        if n % divisor == 0:\n            return n\n        n -= 1\n    return None", "def max_multiple(divisor, bound):\n    valid = []\n    for i in range(bound + 1):\n        if i % divisor == 0:\n            valid.append(i)\n    return valid[len(valid)-1]\n", "def max_multiple(divisor, bound):\n    multiple = 0\n    while multiple <= bound:\n        multiple += divisor\n        print(multiple)\n    return multiple-divisor", "def max_multiple(divisor, bound):       \n    return max([n for n in range(divisor, bound+1) if n % divisor == 0])", "def max_multiple(divisor, bound):\n    return max(x for x in range(0, bound+1) if x%divisor == 0)\nprint(max_multiple(5,23))", "def max_multiple(divisor, bound):\n    higher = 0\n    for diviser in range(divisor,bound+1):\n        if diviser % divisor == 0 and diviser > higher:\n            higher = diviser\n    return higher\n        \n", "def max_multiple(divisor, bound):\n    x=[]\n    for n in range(divisor, bound+1):\n        if n%divisor == 0 and n <= bound and n > 0:\n            x.append(n)\n        else:\n            pass\n    return max(x)", "def max_multiple(divisor, bound):\n    sum = 0\n    for i in range(1, bound+1):\n        if i%divisor == 0:\n            sum = i\n    return sum\n", "def max_multiple(divisor, bound):\n    n = bound\n    while n > divisor:\n        if n % divisor == 0:\n            return n\n        else:\n            n -= 1", "def max_multiple(divisor, bound):\n    for i in range(bound, -1, -1):\n        if i % divisor == 0:\n            return i\n    return 0", "def max_multiple(divisor, bound):\n    n=1\n    while n<=bound:\n        if n % divisor == 0:\n            abc = n\n        else:\n            pass\n        n+=1\n    return abc\n            \n", "def max_multiple(divisor, bound):\n    lst  = []\n    \n    for num in range(divisor,bound+1):\n        if num % divisor == 0:\n            if num <= bound:\n                lst.append(num)\n                \n    return lst[-1]", "def max_multiple(divisor, bound):\n    i = 1\n    while True:\n        if divisor * i > bound:\n            return divisor * (i-1)\n        else:\n            i = i + 1", "def max_multiple(divisor, bound):\n    a = []\n    for i in range(1,bound+1):\n        if i % divisor == 0:\n            a.append(i)\n    return (max(a))", "def max_multiple(divisor, bound):\n    nums = list(range(1, bound + 1))\n    nums = reversed(nums)\n    for n in nums:\n        if n % divisor == 0:\n            return n\n    \n", "def max_multiple(divisor, bound):\n    list_ans = []\n    for i in range(0,bound+1):\n        if i % divisor == 0:\n            list_ans.append(i)\n    return max(list_ans)\n", "def max_multiple(divisor, bound):\n    return [x for x in range(bound + 1)[::-1] if x % divisor == 0][0]", "def max_multiple(divisor, bound):\n    return max([x for x in range(1, bound+1) if not x%divisor])", "def max_multiple(d, b):\n    import math\n    return  d*math.floor(b/d)", "def max_multiple(divisor, bound):\n    #your code here\n    N = 1 \n    list1 = list(range(1, bound+1))\n    for N1 in list1:\n        if N1 % divisor == 0:\n            if N < N1:\n                N = N1\n    return N            \n            \n    \n", "def max_multiple(divisor, bound):\n    iter = 1\n    lst = []\n    mul = 1\n    while mul<=bound:\n        mul = iter * divisor\n        lst.append(mul)\n        iter += 1\n    return lst[-2]", "def max_multiple(d, b):\n    return max([x for x in range(1,b+1) if x%d==0])", "def max_multiple(divisor, bound):\n    #your code here\n    return max([num for num in range(0, bound + 1, divisor)])\n", "def max_multiple(divisor, bound):\n    return max(i for i in range(1, bound+1) if i % divisor == 0 and i <= bound)", "def max_multiple(d, b):\n    i = 1\n    start = d\n    while d <= b:\n        d /= i\n        i += 1\n        d *= i\n    return d-start", "def max_multiple(divisor, bound):\n    number = divisor\n    while divisor <= bound :\n        divisor += number\n    return divisor - number", "def max_multiple(divisor, bound):\n    i=bound\n    while i!=0:\n        if i%divisor!=0:\n            i=i-1\n        else:\n            return i\n", "def max_multiple(divisor, bound):\n    while bound:\n        if bound % divisor == 0:\n            return bound\n        bound -= 1", "def max_multiple(divisor, bound):\n    total = 0\n    while total <= bound:\n        total+= divisor\n    return total - divisor", "def max_multiple(a, b):\n    while b%a!=0:\n        b-=1\n    return b", "def max_multiple(divisor, bound):\n    for num in range(bound,0,-1):\n        if num% divisor == 0:\n            return num\n    return \"none\"", "def max_multiple(divisor, bound):\n    i = bound\n    while True:\n        if i % divisor == 0:\n            return i\n        i-=1\n", "def max_multiple(divisor, bound):\n    #your code here\n    b = []\n    for i in range(bound+1):\n        if i % divisor == 0:\n            b.append(i)\n    return b[-1]", "def max_multiple(divisor, bound):\n    output = 0\n    while output == 0:\n        if bound % divisor == 0:\n            output = bound\n        bound -= 1\n        \n    return bound + 1\n", "def max_multiple(divisor, bound):\n    a=bound\n    while True:\n        if a%divisor==0:\n            return a\n        else:\n            a-=1", "def max_multiple(divisor, bound):\n    #your code \n    my_num = 0\n    for item in range(1,bound + 1):\n        if item % divisor == 0:\n            my_num = item\n    return my_num"]