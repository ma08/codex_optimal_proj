["def yoga(classroom, poses):\n    total_poses = 0\n    for pose in poses:\n        for row in classroom:\n            for person in row:\n                if person + sum(row) >= pose:\n                    total_poses += 1\n    return total_poses", "def yoga(classroom, poses):\n    return sum(1 for r in classroom for v in r for p in poses if p<=v+sum(r))", "def yoga(room, poses):\n    return sum(sum(v<=p+s for v in poses for p in r) for r,s in ((r,sum(r)) for r in room) )", "def yoga(classroom, poses):\n    result = 0\n    for row in classroom:\n        s = sum(row)\n        result += sum(s+x >= p for x in row for p in poses)\n    return result", "from bisect import bisect_left\n\ndef yoga(a, b):\n    c = []\n    for x in a:\n        y = sum(x)\n        c.append([z + y for z in sorted(x)])\n    return sum(sum(len(x) - bisect_left(x, y) for y in b) for x in c)", "def yoga(classroom, poses):\n    return sum(1 for row in classroom for o in row for p in poses if o + sum(row) >= p)\n", "yoga = lambda classroom, poses: sum(sum(len([1 for p in poses if p<=c+sum(r)]) for c in r) for r in classroom)\n", "def yoga(classroom, poses):\n    if not classroom or not poses:\n        return 0\n    res = 0\n    for row in classroom:\n        row_sum = sum(row)\n        for pose in poses:\n            for person in row:\n                if person + row_sum >= pose:\n                    res += 1\n    return res", "def yoga(classroom, poses):\n    return len([z for i in poses for k in classroom for z in k if sum(k) + z >= i])\n", "def yoga(classroom, poses):\n    new_classroom = []\n    for row in classroom:\n        row_sum = sum(row)\n        new_row = []\n        for person in row:\n            new_row.append(person + row_sum)\n        new_classroom.append(new_row)\n    people = [person for row in new_classroom for person in row]\n\n    result = 0\n    for pose in poses:\n        for person in people:\n            if person >= pose:\n                result += 1\n    return result"]