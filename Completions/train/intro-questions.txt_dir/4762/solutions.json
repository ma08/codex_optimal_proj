["def nkotb_vs_homie(requirements):\n    return [\"{}! Homie dont play that!\".format(a[8:-5].title())\n            for b in requirements for a in b] + \\\n           [\"{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.\".\n            format(*(len(x) for x in requirements))]", "res1 = \"{}! Homie dont play that!\".format\nres2 = \"{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.\".format\nget = __import__(\"re\").compile(\"We need (\\w+) now!\").search\n\ndef nkotb_vs_homie(requirements):\n    return [res1(get(req).group(1).capitalize()) for reqs in requirements for req in reqs] + [res2(*map(len, requirements))]", "TOTAL =  '{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.'\n\ndef nkotb_vs_homie(r):\n    result = []\n    for req in sum(r, []):\n        homie = req.split()[2].title()\n        result.append(f'{homie}! Homie dont play that!')\n    result.append(TOTAL.format(*map(len, r)))\n    return result", "import re\ndef nkotb_vs_homie(requirements):\n    return ['{}! Homie dont play that!'.format(s[8:-5].capitalize()) for r in requirements for s in r]\\\n         + ['{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.'.format(*map(len, requirements))]", "def nkotb_vs_homie(requirements):\n    return [f\"{v.split()[2].title()}! Homie dont play that!\" for lst in requirements for v in lst]+[\", \".join(f\"{['','and '][a=='microservices']}{len(b)} {a}\" for a,b in zip([\"monitoring objections\",\"automation\",\"deployment pipeline\",\"cloud\",\"microservices\"],requirements))+\".\"]", "def services(service_list):\n    hdpt = \"Homie dont play that!\"\n    names = [req.split()[2].capitalize()+'! ' + hdpt for req in service_list]\n    return names\n\ndef nkotb_vs_homie(requirements):\n    monitoring = services(requirements[0])\n    automation = services(requirements[1])\n    deployment = services(requirements[2])\n    cloud = services(requirements[3])\n    microservices = services(requirements[4])\n    report = '{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.'.format(len(monitoring), len(automation), len(deployment), len(cloud), len(microservices))\n    compiled = []\n    compiled += monitoring\n    compiled += automation\n    compiled += deployment\n    compiled += cloud\n    compiled += microservices\n    compiled.append(report)\n    print(compiled)\n    return compiled", "def nkotb_vs_homie(r):\n    output = []\n    for req in r:\n        for requirement in req:\n            require = requirement.split(' ')\n            output.append(require[2].capitalize() + '! Homie dont play that!')\n    final = str(len(r[0])) + ' monitoring objections, ' \\\n            + str(len(r[1])) + ' automation, ' \\\n            + str(len(r[2])) + ' deployment pipeline, ' \\\n            + str(len(r[3])) + ' cloud, and ' \\\n            + str(len(r[4])) + ' microservices.'\n    output.append(final)\n    return output", "def nkotb_vs_homie(requirements):\n    requirements=list(requirements)\n    temp=[]\n    for i in range(len(requirements)):\n        requirements[i]=list(map( lambda x: x.replace('We need ',\"\").replace(' now!',\"\").title()  ,requirements[i]))\n        for j in requirements[i]:\n            temp.append(j)\n    temp=list(map(lambda x: x+\"! Homie dont play that!\"    ,temp))\n    lengths=list(map(lambda x: len(x)    ,requirements ))\n    \n    lastSentence='%d monitoring objections, %d automation, %d deployment pipeline, %d cloud, and %d microservices.'%(lengths[0], lengths[1], lengths[2], lengths[3], lengths[4])\n    temp.append(lastSentence)\n    return temp", "def nkotb_vs_homie(requirements):\n    r=[]\n    c=[]\n    for reqs in requirements:\n        for req in reqs:\n            r.append(req.split(' ')[2].title()+'! Homie dont play that!')\n        c.append(len(reqs))\n    r.append('{0[0]} monitoring objections, {0[1]} automation, {0[2]} deployment pipeline, {0[3]} cloud, and {0[4]} microservices.'.format(c))\n    return r", "def nkotb_vs_homie(requirements):\n    res = []\n    for arr in requirements: \n        for item in arr: \n            aux = item[8: -5].title()\n            res.append('{}! Homie dont play that!'.format(aux))\n    res.append('{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.'.format(*map(len, requirements)))\n    return res"]