["def pattern(n):\n    nums = '1234567890'\n    str_nums = nums*(n//10) + nums[:n%10]\n    return '\\n'.join(' '*(n - i - 1) + str_nums + ' '*i for i in range(n))\n", "def pattern(n):\n    return \"\\n\".join([(n-1 - i) * \" \" + \"\".join(str(j % 10) for j in range(1, n+1)) + (i * \" \") for i in range(n)])", "def pattern(n):\n    s = ''.join(str(i % 10) for i in range(1, n+1))\n    return '\\n'.join(' ' * i + s + ' ' * (n - i - 1) for i in range(n-1, -1, -1))", "def pattern(n):\n    digits = \"\".join(str(i % 10) for i in range(1, n + 1))\n    spaces = \" \" * (n - 1)\n    return \"\\n\".join(\"{}{}{}\".format(spaces[i:], digits, spaces[:i]) for i in range(n))", "def pattern(n):\n    l = 2*n-1\n    base = ''.join(str(x%10) for x in range(1,n+1))\n    return '\\n'.join((base + ' '*x).rjust(l) for x in range(n))", "def pattern(n):\n    p = ' ' * (n - 1) + ''.join(str(x % 10) for x in range(1, n + 1)) + ' ' * (n - 1)\n    return \"\\n\".join(p[x:x + 2 * n - 1] for x in range(n))", "from itertools import cycle, islice\ndef pattern(n):\n  return \"\\n\".join([\" \" * (n - x - 1) + \"\".join(islice(cycle(\"1234567890\"), 0, n))  + \" \" * x for x in range(n)])", "def pattern(n):\n    digits = ''.join([str(i % 10) for i in range(1,n+1)])\n    return '\\n'.join([' ' * (n - 1 -i) + digits + ' ' * i for i in range(n)])", "def pattern(n):\n    return \"\\n\".join(\" \"*(n-1-i)+\"\".join([str(i%10) for i in range(1,n+1)])+\" \"*i for i in range(n))\n"]