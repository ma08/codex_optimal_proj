["import re\n\ndef calculate_string(st): \n    st = re.sub(r'[^-+*/\\d.]', '', st)\n    result = eval(st)\n    return str(int(round(result)))", "def calculate_string(st: str) -> str:\n    return f\"{eval(''.join(s for s in st if s in '0123456789.+-/*')):.0f}\"", "def calculate_string(st):\n    clean = \"\"\n    for i in st:\n        if i.isdigit() or i == \".\":\n            clean += i\n        elif i in [\"+\",\"-\",\"*\",\"/\"]:\n            clean += i\n            operator = i\n    clean = clean.split(operator)\n    print(clean)\n    if operator == \"+\":\n        return str(round(float(clean[0])+float(clean[1])))\n    elif operator == \"-\":\n        return str(round(float(clean[0])-float(clean[1])))\n    elif operator == \"*\":\n        return str(round(float(clean[0])*float(clean[1])))\n    else:\n        return str(round(float(clean[0])/float(clean[1])))", "import re\ndef calculate_string(st): \n    return str(round(eval(re.sub(r'[^0-9\\-\\+\\*\\/\\.]',\"\",st))))", "import re\ndef calculate_string(st): \n    return str(round(eval(re.sub(\"([^\\d\\.\\/\\*\\-\\+])+\",'',st))))", "def calculate_string(stg):\n    return f\"{eval(''.join(c for c in stg if c.isdecimal() or c in '.+-*/')):.0f}\"", "def calculate_string(st):\n    return str(round(eval(''.join(a for a in st if a in '0123456789.+-*/'))))", "import re\n\ndef calculate_string(st):\n    s = re.sub( '[^0-9+-/*]+', '', st)\n    s = s.replace(',', '')\n    return str(round(eval(s)))", "import re\nfrom operator import itruediv,imul,isub,iadd\ndef calculate_string(st):\n    op=itruediv if '/' in st else iadd if '+' in st else isub if '-' in st else imul\n    l=[eval(''.join(re.findall('[\\d.]',s))) for s in re.split('[-+*/]',st)]\n    return str(round(op(l[0],l[1])))", "def calculate_string(st): \n    clean = '+-*/1234567890.' # input of acceptable chars\n    st = ''.join([char for char in st if char in clean]) # clean the input string\n    return str(round(eval((st)))) # evaluate input before rounding and returning as string"]