["def half(i, n):\n    return \"\".join(str(d%10) for d in range(1, n-i+1))\n\ndef line(i, n):\n    h = half(i, n)\n    return \" \" * i + h + h[-2::-1]\n\ndef get_a_down_arrow_of(n):\n    return \"\\n\".join(line(i, n) for i in range(n))\n", "from itertools import cycle, islice\n\ndef get_a_down_arrow_of(n):\n    \n    r = []\n    \n    for i, x in enumerate(range(n, 0, -1)):\n        c = cycle('1234567890')\n        s = list(islice(c, x))\n        s += s[::-1][1:]\n        r.append(' ' * i + ''.join(s))\n        \n    return '\\n'.join(r)", "from itertools import chain\n\ndef get_a_down_arrow_of(n):\n    result = []\n    for i in range(n, 0, -1):\n        row = \" \" * (n - i) + \"\".join(str(d % 10) for d in chain(range(1, i), range(i, 0, -1)))\n        result.append(row)\n    return \"\\n\".join(result)", "result = ['1']\n\ndef get_a_down_arrow_of(n):\n    while len(result) < n:\n        i = len(result)\n        result.append(result[-1][:i] + str((i+1)%10) + result[-1][i-1::-1])\n    return '\\n'.join(result[x].center(2*n-1).rstrip() for x in range(n-1, -1, -1))", "digits = '1234567890' * 1000\n\ndef get_a_down_arrow_of(n):\n    width = 2 * n - 1\n    return '\\n'.join(\n        ''.join(digits[:i-1] + digits[max(i-1, 0)::-1]).center(width).rstrip()\n        for i in range(n, 0, -1)\n    )", "def get_a_down_arrow_of(n):\n    answer = \"\"\n    for i in range(n, 0, -1):\n        spaces = \" \" * (n - i)\n        half1 = \"\".join(str(x % 10) for x in range(1, i + 1))\n        half2 = half1[::-1]\n        answer += spaces + half1 + half2[1:] + \"\\n\" * (i > 1)\n    return answer", "get_a_down_arrow_of=lambda n,m=lambda s:s+s[-2::-1]:'\\n'.join(' '*i+m(('1234567890'*n)[:n-i])for i in range(n))", "get_a_down_arrow_of=lambda n,s=0: \"\" if n<1 else \" \"*s+\"1\" if n==1 else \"\\n\".join([\" \"*s+\"\".join([str(q%10) for q in range(1,n+1)]+[str(q%10) for q in range(n-1,0,-1)])]+[get_a_down_arrow_of(n-1,s+1)])"]