["def sierpinski(n):\n    t = ['*']\n    for _ in range(n):\n        t = [r.center(2*len(t[-1])+1) for r in t] + [r + ' ' + r for r in t]\n    return '\\n'.join(t)", "def sierpinski(n):\n    lines = [\"*\"]\n    for i in range(2, n+2):\n        lines = [l.center(2**i - 1) for l in lines] + [f\"{l} {l}\" for l in lines]\n    return \"\\n\".join(lines)\n", "sierpinski=lambda n,pr=['*'],sp=3:sierpinski(n-1,pr+[(j+(' '*len(pr[-1-i]))+j)for i,j in enumerate(pr)],sp*2+1)if n else'\\n'.join([i.center(sp//2)for i in pr])", "def s(n):\n    xs = [1]\n    yield xs\n    for i in range(n):\n        while True:\n            xs = [a^b for a, b in zip([0]+xs, xs+[0])]\n            yield xs\n            if all(xs):\n                break\n\ndef sierpinski(n):\n    xss = list(s(n))\n    width = len(xss) * 2 - 1\n    return '\\n'.join(\n        ' '.join(' *'[x] for x in xs).center(width)\n        for xs in xss\n    )", "def sierpinski(n):\n    return '\\n'.join(l.center(2**(n+1) - 1) for l in addrows(n, ['*']))\n    \ndef addrows(n, t):\n    for _ in range(n): t += [l.ljust(len(t[-1])) + \" \" + l for l in t]        \n    return t    ", "def sierpinski(n):\n    if n==0: return '*'\n    s=sierpinski(n-1).split('\\n')\n    ss=[]\n    for i in range(2**n//2):\n        ss.append(s[i].center(2**n*2-1))\n    for i in range(2**n//2):\n        ss.append(s[i]+' '+ s[i])\n    return '\\n'.join(ss)", "def sierpinski(n):\n    if n==1:\n        return ' * \\n* *'\n    s=sierpinski(n-1).split('\\n')\n    n=len(s[0])\n    r=[]\n    for row in s:\n        r.append(' '*((n+1)//2)+row+' '*((n+1)//2))\n    for row in s:\n        r.append(row+' '+row)\n    return '\\n'.join(r)", "def sierpinski(n):\n    if n==0:\n        return '*'\n    lower = sierpinski(n-1).splitlines()\n    result = [s.center(2*len(s)+1) for s in lower]\n    result += [s+' '+s for s in lower]\n    return '\\n'.join(result)\n", "def sierpinski(n):\n    if n == 0:\n        return '*'\n    lines = sierpinski(n - 1).split('\\n')\n    upper = [' ' * (2 ** (n - 1)) + l + ' ' * (2 ** (n - 1)) for l in lines]\n    lower = [l + ' ' + l for l in lines]\n    return '\\n'.join(upper + lower)", "SIERPINSKI = {\n    1: [' * ', '* *']\n}\n\n\ndef join_lesser(fig):\n    width = len(fig[-1]) + 1\n    result = []\n    for line in fig:\n        padding = ' ' * (width // 2)\n        result.append(padding + line + padding)\n    for line in fig:\n        result.append(line + ' ' * (width - len(line)) + line)\n    return result\n\n\ndef get_sierpinski(n):\n    if n in SIERPINSKI:\n        return SIERPINSKI[n]\n\n    lesser = get_sierpinski(n - 1)\n    SIERPINSKI[n] = join_lesser(lesser)\n    return SIERPINSKI[n]\n\n\ndef sierpinski(n):\n    return '\\n'.join(get_sierpinski(n))\n"]