["from itertools import permutations\n\ndef permutation_average(n):\n    perms = [float(''.join(e)) for e in permutations(str(n))]\n    return int(round(sum(perms) / len(perms)))\n", "def permutation_average(n):\n    n = str(n)\n    n, l = sum(map(int, n)) / float(len(n)), len(n)\n    \n    n = n * ((10 ** l - 1) / 9)\n    \n    return round(n)\n", "def permutation_average(n):\n    n = str(n)\n    avg = sum(map(int, n)) / len(n)\n    return round(avg * int(\"1\" * len(n)))", "from itertools import permutations\n\ndef permutation_average(n):\n    a = [int(\"\".join(x)) for x in set(permutations(str(n)))]\n    return round(float(sum(a)) / len(a))", "from itertools import permutations\n\ndef permutation_average(n):\n  perms = [float(''.join(x)) for x in permutations(str(n))]\n  return round(sum(perms) / len(perms))", "from itertools import permutations\nfrom math import factorial\n\ndef permutation_average(n):\n    return round(sum(int(''.join(x)) for x in permutations(str(n))) / float(factorial(len(str(n)))))", "from math import factorial\n\n\ndef permutation_average(n):\n    m = len(str(n))\n    s = sum(map(int, str(n)))\n    return round(sum(s * 10 ** i for i in range(m)) / float(m))", "def permutation_average(n):\n    digits = [int(i) for i in str(n)]\n    length = len(str(n))\n    \n    def factorial(n): \n        if n is 1 or n is 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    averager = factorial(length) #denominator of the average\n\n    def get_coefficient(width): #after adding up all the digits, a pattern is seen dependent on\n        coefficient = 0  #the number of digits there are. This exploits that\n        if width <= 1:\n            coefficient = 1\n        else:\n            for x in range(width):\n                coefficient += factorial(width-1)*(10**x)\n\n        return coefficient\n\n    total = 0\n    for index in digits:  #just multiplying the same coefficient (ironically enough) with every digit\n        multiplier = get_coefficient(length)\n        total += multiplier * index\n\n    average = total/float(averager)\n    avg = int(round(average, 0))\n    return avg"]