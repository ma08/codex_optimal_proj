["def reverse_middle(lst):\n    l = len(lst)//2 - 1\n    return lst[l:-l][::-1]", "def reverse_middle(a):\n    l=len(a)//2\n    return a[-l:l-2:-1]", "def reverse_middle(lst):\n    return lst[(len(lst)+1)//2:len(lst)//2-2:-1]", "def reverse_middle(lst):\n    l = len(lst)\n    return lst[(l+1)//2:(l//2)-2:-1] ", "def reverse_middle(lst):\n    return lst[(len(lst)//2)-1:(len(lst)//2)+1+(1 if len(lst)%2!=0 else 0)][::-1]\n", "def reverse_middle(l):\n    return l[len(l)//2-1:(len(l)+3)//2][::-1]", "reverse_middle = lambda a: a[len(a)+1>>1:(len(a)>>1)-2:-1]", "def reverse_middle(lst):\n    middle=int(len(lst)/2)\n    \n    if len(lst)%2>0:\n        return list(reversed(lst[middle-1:middle+2]))\n    else:\n        return list(reversed(lst[middle-1:middle+1]))", "def reverse_middle(lst):\n    if len(lst) % 2 == 1:\n        return lst[len(lst)//2-1:len(lst)//2+2][::-1]\n    else:\n        return lst[len(lst)//2-1:len(lst)//2+1][::-1]", "def reverse_middle(lst):\n    return lst[::-1][len(lst)//2-1:len(lst)-len(lst)//2+1]"]