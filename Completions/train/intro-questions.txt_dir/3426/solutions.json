["def tax_calculator(total):\n    if not isinstance(total, (int, float)) or total < 0: return 0\n    \n    tax = 0\n    \n    if total > 30: tax = 2.2 + (total - 30) * 0.03\n    elif total > 20: tax = 1.7 + (total - 20) * 0.05\n    elif total > 10: tax = 1 + (total-10) * 0.07\n    elif total > 0: tax = total / 10.0\n\n    return round(tax, 2)\n", "def tax_calculator(total):\n    tax = 0\n    if type(total) in (float, int) and total > 0:\n        for limit, rate in ((30, 3),\n                            (20, 5),\n                            (10, 7),\n                            (0, 10)):\n            if total > limit:\n                tax += rate * (total - limit)\n                total = limit\n    return round(tax)/100\n", "rates = ((30, 0.03), (20, 0.05), (10, 0.07), (0, 0.1))\n\ndef tax_calculator(total):\n    if type(total) in (int, float) and total > 0:\n        amount = 0\n        for limit, rate in rates:\n            if total > limit:\n                amount += (total - limit) * rate\n                total = limit\n        return round(amount, 2)\n    return 0", "def tax_calculator(total):\n    if not isinstance(total, (int, float)) or total <= 0:\n        return 0\n    bands = [(10, 0.1), (10, 0.07), (10, 0.05), (None, 0.03)]\n    residue = total\n    tax = 0\n    for band_width, rate in bands:\n        if residue == 0:\n            break\n        if band_width is not None:\n            chunk = residue if residue <= band_width else band_width\n        else:\n            chunk = residue\n        tax += chunk * rate\n        residue -= chunk\n    return round(tax, 2)\n        \n", "def tax_calculator(total):\n    try:\n        total = max(float(total), 0)\n    except (AttributeError, TypeError, ValueError):\n        total = 0\n    tax = 0\n    for rate, limit in [(0.1, 10), (0.07, 10), (0.05, 10), (0.03, 99999999999999)]:\n        tax += min(total, limit) * rate\n        total -= limit\n        if total <= 0:\n            break\n    return round(tax, 2)", "from numbers import Real\n\n\nclass TaxCalculator(object):\n    def __init__(self, bands, highest_rate):\n        self.__table = list(self._get_table(bands, highest_rate))\n\n    @staticmethod\n    def _get_table(bands, highest_rate):\n        lower_bound, cumulative_tax = 0.0, 0.0\n        for upper_bound, rate in bands:\n            yield lower_bound, rate, cumulative_tax\n            cumulative_tax += (upper_bound - lower_bound) * rate\n            lower_bound = upper_bound\n        yield lower_bound, highest_rate, cumulative_tax\n\n    def __call__(self, amount):\n        if isinstance(amount, Real):\n            for lower_bound, rate, cumulative_tax in reversed(self.__table):\n                if amount >= lower_bound:\n                    return round((amount - lower_bound) * rate + cumulative_tax, 2)\n        return 0.0\n\n\ntax_calculator = TaxCalculator([(10.0, 0.10), (20.0, 0.07), (30.0, 0.05)], 0.03)\n", "def tax_calculator(total):\n\n    if type(total) not in [int, float] or total < 0:\n        return 0\n    \n    if total <= 10:\n        tax = 0.1 * total\n    elif total <= 20:\n        tax = 1 + 0.07 * (total - 10)\n    else:\n        tax = 1.7 + 0.05 * min(total - 20, 10)\n        if total > 30:\n            tax += 0.03 * (total - 30)        \n\n    return round(tax, 2)", "def tax_calculator(t):\n    return isinstance(t,(float,int)) and round(max(0,t)*.1-max(0,t-10)*.03-max(0,t-20)*.02-max(0,t-30)*.02,2)\n", "tax_calculator=lambda total: round(((total-30)*0.03+2.2 if total-30>0 else ((total-20)*0.05+1.7 if total-20>0 else ((total-10)*0.07+1 if total-10>0 else total*0.1))),2) if ((type(total)==int or type(total)==float) and total>0) else 0"]