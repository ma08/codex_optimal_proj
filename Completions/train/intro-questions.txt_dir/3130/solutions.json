["def has_subpattern(string):\n    return (string * 2).find(string, 1) != len(string)", "import re\n\ndef has_subpattern(string):\n    return bool(re.match(r'(.+)\\1+$', string))", "def has_subpattern(string):\n    s = len(string)\n    for i in range(1,s//2+1):\n        if s % i == 0:\n            q = s//i\n            if string[:i] * q == string:\n                return True\n    return False", "import re\n\ndef has_subpattern(s):\n    return bool(re.search(r'^(.+)\\1+$', s))", "has_subpattern=lambda s:s in(2*s)[1:-1]", "import re\ndef has_subpattern(s):\n    return re.search(r'^(.+?)\\1{1,}$', s) != None", "def has_subpattern(s):\n      l = len(s)\n      for i in range(1,l//2+1):\n         if not l%i and s[:i]*(l//i) == s : \n             return True\n      return False  ", "def has_subpattern(stg):\n    l = len(stg)\n    for k in range(2, int(l**0.5) + 1):\n        if l % k == 0:\n            if any(len({stg[i:i+s] for i in range(0, l, s)}) == 1 for s in (l // k, k)):\n                return True\n    return False\n\n# one-liner\n    #return any(any(len({stg[i:i+s] for i in range(0, len(stg), s)}) == 1 for s in (len(stg) // k, k)) for k in range(2, int(len(stg)**0.5)+1) if len(stg) % k == 0)\n", "import re\ndef has_subpattern(string):\n    #print(string)\n    n = len(string)\n    if n == 1: return False\n    l, h = '{}'\n    for i in range(1,n):\n        #print(f'({string[:i]}){l}{n/i}{h}')\n        if n % i == 0 and string[:i] * (n//i) == string:\n            #print(string[:i])\n            return True\n    return False", "def has_subpattern(s):\n    return False if (s + s).find(s, 1, -1) == -1 else True"]