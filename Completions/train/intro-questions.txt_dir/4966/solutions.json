["from operator import itemgetter\n\ndef fight(r1, r2, tactics):\n    \n    i, bots = 0, sorted((r2,r1), key=itemgetter('speed'))                    # Get the bots in reversed order!\n    for r in bots: r['tactics'] = r['tactics'][::-1]                         # Reverse the tactics to use pop()\n    \n    while 1:\n        i ^= 1                                                               # Swapper\n        if bots[i]['tactics']:\n            bots[i^1]['health'] -= tactics[ bots[i]['tactics'].pop() ]       # Hit\n        \n        if bots[i^1]['health'] <= 0 or all(not r['tactics'] for r in bots):  # other bot is dead or no tactics for both of them\n            break\n    \n    a,b = bots\n    cmp = (a['health'] < b['health']) - (a['health'] > b['health'])          # 1: b wins / -1: a wins / 0: tie\n    \n    return \"The fight was a draw.\" if not cmp else f\"{bots[max(cmp,0)]['name']} has won the fight.\"", "def fight(robot_1, robot_2, tactics):\n    attack, defend = (robot_1, robot_2) if robot_1['speed'] >= robot_2['speed'] else (robot_2, robot_1)\n    \n    while attack['health'] > 0:\n        if attack['tactics']:\n            defend['health'] -= tactics[attack['tactics'].pop()]\n        elif not defend['tactics']:\n            break\n        attack, defend = defend, attack\n\n    if attack['health'] == defend['health']:\n        return \"The fight was a draw.\"\n    return \"{} has won the fight.\".format((defend if attack['health'] < defend['health'] else attack)['name'])\n\n", "def fight(robot_1, robot_2, tactics):\n    # Determine the fastest robot for the rest of the fight\n    if robot_2['speed'] > robot_1['speed']:\n        robot_first = robot_2\n        robot_second = robot_1\n    else:\n        robot_first = robot_1\n        robot_second = robot_2\n    \n    while ((len(robot_first['tactics']) > 0) or (len(robot_second['tactics']) > 0)):\n          if len(robot_first['tactics']) > 0:\n              robot_second['health'] -= tactics[robot_first['tactics'].pop(0)]\n          if robot_second['health'] <= 0:\n              return f\"{robot_first['name']} has won the fight.\" \n          \n          if len(robot_second['tactics']) > 0:\n              robot_first['health'] -= tactics[robot_second['tactics'].pop(0)]\n          if robot_first['health'] <= 0:\n              return f\"{robot_second['name']} has won the fight.\" \n    else:\n        if robot_first['health'] == robot_second['health']:\n            return \"The fight was a draw.\"\n        else: \n            winner = robot_first['name'] if robot_first['health'] > robot_second['health'] else robot_second['name']\n            return f'{winner} has won the fight.'\n", "class Fighter(object):\n    \n    def __init__(self, dict  ):\n        self.name   = dict[  'name' ] \n        self.health = dict[ 'health']\n        self.speed  = dict[ 'speed' ]\n        self.tact   = dict['tactics']\n        self.still_alive = True\n        \n    def battle(self, punch, point):\n        self.health -= point.get(punch, 0) \n    \n    def raund(self, other, tact):\n        if all((self.health > 0 , self.tact)):\n            punch = self.tact.pop(0)\n            other.battle( punch, tact) \n        else:\n            self.still_alive = False\n    \ndef fight(robot_1, robot_2, tactics):\n    f1, f2 = Fighter(robot_1), Fighter(robot_2)\n    fght = [ sorted([f1  , f2], key = lambda e: e.speed)[::-1] , [f1,f2] ][f1.speed == f2.speed]\n\n    while fght[0].still_alive:\n        fght[0].raund( fght[1], tactics)  \n        fght = fght[::-1] \n          \n    winer = [f1.name, f2.name][ f2.health > f1.health ]\n    return [f'{winer} has won the fight.', 'The fight was a draw.'][f1.health == f2.health]\n", "import pprint\ndef fight(robot_1, robot_2, tactics):\n    if robot_1['speed'] < robot_2['speed']:\n        robot_1, robot_2 = robot_2, robot_1\n    robot_1_turn = True\n    \n    while ((robot_1['health'] > 0 and robot_2['health'] > 0) and \n        (len(robot_1['tactics']) > 0 or len(robot_2['tactics']) > 0)):\n        if robot_1_turn and len(robot_1['tactics']) > 0:\n            robot_2['health'] -= tactics[robot_1['tactics'][0]]\n            robot_1['tactics'].pop(0)\n        elif len(robot_2['tactics']) > 0:\n            robot_1['health'] -= tactics[robot_2['tactics'][0]]\n            robot_2['tactics'].pop(0)\n        robot_1_turn = not robot_1_turn\n    \n    if robot_1['health'] <= 0 or robot_1['health'] < robot_2['health']:\n        return  robot_2['name'] + ' has won the fight.'\n    elif robot_2['health'] <= 0 or robot_2['health'] < robot_1['health']:\n        return  robot_1['name'] + ' has won the fight.'\n    else:\n        return  'The fight was a draw.'\n", "def fight(A, B, damage):\n    if B['speed'] > A['speed']: A, B = B, A\n\n    while A['tactics'] or B['tactics']:\n        for attack, defend in [(A, B), (B, A)]:\n            if attack['tactics']:\n                defend['health'] -= damage[attack['tactics'][0]]\n                attack['tactics'] = attack['tactics'][1:]\n                if defend['health'] <= 0: return attack['name'] + ' has won the fight.'\n                \n    return 'The fight was a draw.' if A['health'] == B['health'] else [B, A][A['health'] > B['health']]['name'] + ' has won the fight.'    ", "def fight(robot_1, robot_2, tactics):\n    # your code\n\n    \"who has the higher speed\"\n    if robot_1[\"speed\"]>=robot_2[\"speed\"]:\n        robotfast = robot_1\n        robotslow = robot_2\n    else:\n        robotfast = robot_2\n        robotslow = robot_1    \n        \n    \n    def roundfight(robotfast, robotslow, tactics):\n        \n        if len(robotfast[\"tactics\"])>0:\n            tactic = robotfast[\"tactics\"][0]\n            damage = tactics[tactic]\n            robotfast[\"tactics\"].pop(0)\n            robotslow[\"health\"] -= damage\n            \"attack 1\" \"robot fast\"\n            \"how much damage by attack\"\n            \"robot slow loses health\"\n        \n        \"is robotslow alive\"\n        if robotslow[\"health\"]<=0:\n            return robotfast[\"name\"]  + \" has won the fight.\"  \n        \n        if len(robotslow[\"tactics\"])>0:\n            tactic = robotslow[\"tactics\"][0]\n            damage = tactics[tactic]\n            robotslow[\"tactics\"].pop(0)\n            robotfast[\"health\"] -= damage        \n\n        if robotfast[\"health\"]<=0:\n            return robotslow[\"name\"] + \" has won the fight.\"        \n        \n        \"special case: out of tactics\"\n        if len(robotfast[\"tactics\"])==0 & len(robotslow[\"tactics\"])==0:\n            if robotfast[\"health\"] == robotslow[\"health\"]:\n                return \"The fight was a draw.\"\n            elif robotfast[\"health\"] > robotslow[\"health\"]:\n                return robotfast[\"name\"] + \" has won the fight.\"\n            else:\n                return robotslow[\"name\"] + \" has won the fight.\"\n                \n        \n        \n        \n        else: \n            return roundfight(robotfast, robotslow, tactics)\n        \n    return roundfight(robotfast, robotslow, tactics)\n", "def fight(robot_1, robot_2, tactics):\n    if robot_1['speed'] >= robot_2['speed']:\n        while(robot_2['tactics'] or robot_1['tactics']):\n            try:\n                robot_2['health'] -= tactics[robot_1['tactics'].pop(0)]\n            except:\n                pass\n            if robot_2['health'] <= 0:\n                return \"Rocky has won the fight.\"\n            try:\n                robot_1['health'] -= tactics[robot_2['tactics'].pop(0)]\n            except:\n                pass\n            if robot_1['health'] <= 0:\n                return \"Missile Bob has won the fight.\"\n    else:\n        while(robot_2['tactics'] or robot_1['tactics']):\n            try:\n                robot_1['health'] -= tactics[robot_2['tactics'].pop(0)]\n            except:\n                pass\n            if robot_1['health'] <= 0:\n                return \"Missile Bob has won the fight.\"\n            try:\n                robot_2['health'] -= tactics[robot_1['tactics'].pop(0)]\n            except:\n                pass\n            if robot_2['health'] <= 0:\n                return \"Rocky has won the fight.\"\n            \n    if robot_1['health'] > robot_2['health']:\n        return \"Rocky has won the fight.\"\n    elif robot_2['health'] > robot_1['health']:\n        return \"Missile Bob has won the fight.\"\n    return \"The fight was a draw.\"", "def fight(robot_1, robot_2, tactics):\n    # your code\n    robot1_health = robot_1['health']\n    robot2_health = robot_2['health']\n    if len(robot_1['tactics']) < len(robot_2['tactics']):\n        return '{} has won the fight.'.format(robot_2['name'])\n    elif len(robot_1['tactics']) > len(robot_2['tactics']):\n        return '{} has won the fight.'.format(robot_1['name'])\n    else:\n        if robot_1['speed'] < robot_2['speed']:\n            for tactic in zip(robot_1['tactics'], robot_2['tactics']):\n                robot1_health -= tactics[tactic[1]]\n                if robot1_health <= 0:\n                    return '{} has won the fight.'.format(robot_2['name'])\n                robot2_health -= tactics[tactic[0]]\n                if robot2_health <= 0:\n                    return '{} has won the fight.'.format(robot_1['name'])\n        else:\n            for tactic in zip(robot_1['tactics'], robot_2['tactics']):\n                robot2_health -= tactics[tactic[0]]\n                if robot2_health <= 0:\n                    return '{} has won the fight.'.format(robot_1['name'])\n                robot1_health -= tactics[tactic[1]]\n                if robot1_health <= 0:\n                    return '{} has won the fight.'.format(robot_2['name'])\n    if robot1_health < robot2_health:\n        return '{} has won the fight.'.format(robot_2['name'])\n    elif robot1_health > robot2_health:\n        return '{} has won the fight.'.format(robot_1['name'])\n    else:\n        return \"The fight was a draw.\"", "def fight(robot_1, robot_2, tactics):\n    if robot_1[\"speed\"]>= robot_2[\"speed\"]:\n        active = robot_1\n        passive = robot_2\n    else:\n        active,passive = robot_2, robot_1\n    while robot_1[\"tactics\"] or robot_2[\"tactics\"]:\n        if active[\"tactics\"]:\n            move = active[\"tactics\"].pop()\n            passive[\"health\"] -= tactics[move]\n            if passive[\"health\"] <= 0:\n                return active[\"name\"] + \" has won the fight.\"\n        active, passive = passive,active\n    if robot_1[\"health\"] > robot_2[\"health\"]:\n        return robot_1[\"name\"] + \" has won the fight.\"\n    elif robot_2[\"health\"] > robot_1[\"health\"]:\n        return robot_2[\"name\"] + \" has won the fight.\"\n    else:\n        return \"The fight was a draw.\""]