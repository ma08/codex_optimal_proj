["complaints = [\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\"]\n\nlegacy = {\n    \"cobol\": 1000,\n    \"nonobject\": 500,\n    \"monolithic\": 500,\n    \"fax\": 100,\n    \"modem\": 100,\n    \"thickclient\": 50,\n    \"tape\": 50,\n    \"floppy\": 50,\n    \"oldschoolit\": 50\n}\n\nimport re\ndef roast_legacy(workloads):\n    complaining = sum(1 for _ in re.finditer('|'.join(complaints), workloads.lower()))\n    roasting = sum(legacy[m.group()] for m in re.finditer('|'.join(legacy), workloads.lower()))\n    if roasting or complaining:\n        return 'Burn baby burn disco inferno %d points earned in this roasting and %d complaints resolved!' % (roasting, complaining)\n    else:\n        return 'These guys are already DevOps and in the Cloud and the business is happy!'", "complaints = [\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\"]\nlegacies = {\n    \"cobol\": 1000,\n    \"nonobject\": 500,\n    \"monolithic\": 500,\n    \"fax\": 100,\n    \"modem\": 100,\n    \"thickclient\": 50,\n    \"tape\": 50,\n    \"floppy\": 50,\n    \"oldschoolit\": 50\n}\n\ndef roast_legacy(workloads):\n    wl = workloads.lower()\n    comps = sum([wl.count(s) for s in complaints])\n    score = sum([wl.count(s) * p for s, p in legacies.items()])\n    \n    if (comps, score) == (0, 0):\n        return \"These guys are already DevOps and in the Cloud and the business is happy!\"\n    return \"Burn baby burn disco inferno {} points earned in this roasting and {} complaints resolved!\".format(score, comps)", "import re\ndef roast_legacy(s):\n    cpn = len(re.findall(r'slow!|expensive!|manual!|down!|hostage!|security!',s,re.I))\n    points = list(map(lambda x:x.lower(),re.findall(r'COBOL|nonobject|monolithic|fax|modem|thickclient|tape|floppy|oldschoolIT',s,re.I)))\n    p = sum([[[50,100][i[:2] in 'fa mo'],500]['no' in i],1000][i[0]=='c'] for i in points)\n    return f'Burn baby burn disco inferno {p} points earned in this roasting and {cpn} complaints resolved!' if p or cpn else \\\n           'These guys are already DevOps and in the Cloud and the business is happy!'", "complaints = (\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\")\nlegacy = {\"cobol\": 1000, \"nonobject\": 500, \"monolithic\": 500, \"fax\": 100, \"modem\": 100,\n          \"thickclient\": 50, \"tape\": 50, \"floppy\": 50, \"oldschoolit\": 50}\n\ndef roast_legacy(workloads):\n    workloads = workloads.lower()\n    resolution = sum(workloads.count(complaint) for complaint in complaints)\n    score = sum(workloads.count(k) * v for k, v in list(legacy.items()))\n    if resolution or score:\n        return f\"Burn baby burn disco inferno {score} points earned in this roasting and {resolution} complaints resolved!\"\n    return \"These guys are already DevOps and in the Cloud and the business is happy!\"\n", "import re\n\nlegacy = {\n    \"cobol\": 1000,\n    \"nonobject\": 500,\n    \"monolithic\": 500,\n    \"fax\": 100,\n    \"modem\": 100,\n    \"thickclient\": 50,\n    \"tape\": 50,\n    \"floppy\": 50,\n    \"oldschoolit\": 50,\n}\nlegacy_pattern = re.compile('|'.join(legacy))\ncomplaint_pattern = re.compile('slow|expensive|manual|down|hostage|security')\n\ndef roast_legacy(workloads):\n    w = workloads.replace('-', '').lower()\n    complaints = sum(1 for _ in complaint_pattern.finditer(w))\n    points = sum(legacy[match.group()] for match in legacy_pattern.finditer(w))\n    if complaints or points:\n        return f'Burn baby burn disco inferno {points} points earned in this roasting and {complaints} complaints resolved!'\n    else:\n        return 'These guys are already DevOps and in the Cloud and the business is happy!'", "PLAINTS = {\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\"}\nLEGACY = {\"cobol\": 1000, \"nonobject\": 500, \"monolithic\": 500, \"fax\": 100, \"modem\": 100, \"thickclient\": 50, \"tape\": 50, \"floppy\": 50, \"oldschoolit\": 50}\n\ndef roast_legacy(workloads):\n    workloads = workloads.lower()\n    p = sum( workloads.count(elt) for elt in PLAINTS )\n    l = sum( workloads.count(elt) * LEGACY[elt] for elt in LEGACY )\n    return 'These guys are already DevOps and in the Cloud and the business is happy!' if p+l == 0 else 'Burn baby burn disco inferno {} points earned in this roasting and {} complaints resolved!'.format(l, p)", "import re\n\nlegcom={\"cobol\":1000,\"nonobject\":500,\"monolithic\":500,\"fax\":100,\"modem\":100,\"thickclient\":50,\"tape\":50,\"floppy\":50,\"oldschoolit\":50,\"slow!\":1j,\"expensive!\":1j,\"manual!\":1j,\"down!\":1j,\"hostage!\":1j,\"security!\":1j}\nlcre=re.compile('|'.join(map(re.escape,list(legcom.keys()))),flags=re.I)\n\ndef roast_legacy(ws):\n    s=sum(legcom[m.group().lower()] for m in lcre.finditer(ws))\n    return 'Burn baby burn disco inferno {} points earned in this roasting and {} complaints resolved!'.format(int(s.real),int(s.imag)) if s else 'These guys are already DevOps and in the Cloud and the business is happy!'\n", "def roast_legacy(workloads):\n    workloads = workloads.lower()\n    complaints = sum( workloads.count(word) for word in [\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\"])\n    legacy = sum( workloads.count(keyword)*points for (keyword,points) in [(\"cobol\",1000), (\"nonobject\",500), (\"monolithic\",500), (\"fax\",100), (\"modem\",100), (\"thickclient\",50), (\"tape\",50), (\"floppy\",50), (\"oldschoolit\",50)])\n    return 'These guys are already DevOps and in the Cloud and the business is happy!' if legacy+complaints==0 else 'Burn baby burn disco inferno %d points earned in this roasting and %d complaints resolved!' % (legacy,complaints)", "legacy={\n    'cobol':1000, 'nonobject':500, 'monolithic':500, 'fax':100,\n    'modem':100, 'thickclient':50, 'tape':50, 'floppy':50, 'oldschoolit':50\n}\ndef roast_legacy(workloads):\n    comp=0\n    for w in ['slow!','expensive!','manual!','down!','hostage!','security!']:\n        comp+=workloads.lower().count(w)\n    s=0\n    for k,v in legacy.items():\n       s+=workloads.lower().count(k)*v\n    if comp==s==0:\n        return 'These guys are already DevOps and in the Cloud and the business is happy!'\n    return 'Burn baby burn disco inferno {} points earned in this roasting and {} complaints resolved!'.format(s,comp)", "def roast_legacy(workloads):\n    points = {'cobol': 1000, 'nonobject': 500, 'monolithic': 500, 'fax': 100, \n              'modem': 100, 'thickclient': 50, 'tape': 50, 'floppy': 50, 'oldschoolit': 50 }\n    complaints = ['slow!', 'expensive!', 'manual!', 'down!', 'hostage!', 'security!']\n    \n    work_loads = workloads.lower()\n    \n    count = sum(work_loads.count(complaint) for complaint in complaints)\n    legacy = sum(p * work_loads.count(k) for k, p in points.items())\n    \n    if not count and not legacy: return 'These guys are already DevOps and in the Cloud and the business is happy!'\n    return 'Burn baby burn disco inferno {} points earned in this roasting and {} complaints resolved!'.format(legacy, count)"]