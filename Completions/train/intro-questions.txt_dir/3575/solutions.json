["from itertools import compress,product\n\ndef powerset(a):\n    return [list(compress(a,p)) for p in product((0,1),repeat=len(a))]\n", "def powerset(nums):\n    if not nums:\n        return [[]]\n    l = powerset(nums[1:])\n    a = nums[0]\n    return l + [[a] + q for q in l]", "def powerset(nums):\n    t = []\n    for i in range(2**len(nums)):     \n        t.append([nums[k] for k,z in enumerate(bin(i)[2:].zfill(len(nums))) if z ==\"1\"])\n    return t", "def powerset(s):\n    if not s:\n        return [[]]\n    result = powerset(s[1:])\n    return result + [[s[0]] + subset for subset in result]", "powerset=lambda a:[[n for i,n in enumerate(a)if b>>len(a)-i-1&1]for b in range(1<<len(a))]", "powerset=lambda n: (lambda c: c+[[n[0]]+e for e in c])(powerset(n[1:])) if n else [[]]", "def powerset(nums):\n    n = len(nums)\n    return [[nums[i] for i, item in enumerate(bin(mask)[2:].rjust(n, \"0\")) if item == \"1\"] for mask in range(2**n)]\n", "def powerset(nums):\n    if len(nums)==1:\n        return [[],nums]\n    s=powerset(nums[1:])\n    for a in s[:]:\n        s.append([nums[0]]+a)\n    return s", "def powerset(nums):\n    l = len(nums)\n    return [[x for j,x in enumerate(nums) if i&(1<<(l-j-1))] for i in range(2**l)]", "def powerset(nums):\n    if len(nums) == 0:\n        return [[]]\n    sub = powerset(nums[1:])\n    first = nums[:1]\n    buffer = []\n    for ele in sub:\n        buffer.append(first + ele)\n    return sub + buffer"]