["def flatten_me(lst):\n    res = []\n    for l in lst:\n        if isinstance(l, list):\n            res.extend(l)\n        else:\n            res.append(l)\n    return res\n", "def flatten_me(nput):\n    output = []\n    for itm in nput:\n        if isinstance(itm, list):\n            output += flatten_me(itm)\n        else:\n            output += [itm]\n    return output", "def flatten_me(lst):\n    res = []\n    for i in lst:\n        if type(i) is list:\n            res += i\n        else:\n            res.append(i)\n    return res\n", "# boo for this kata\ndef flatten_me(a):\n    result = []\n    for i in a:\n        if isinstance(i, list):\n            result += flatten_me(i)\n        else:\n            result.append(i)\n    return result\n", "from collections import Iterable\nfrom itertools import chain\n\ndef flatten_me(lst):\n    return list(chain(*(x if isinstance(x,Iterable) else [x] for x in lst)))\n", "def flatten_me(lst):\n    from itertools import chain\n    return list(chain.from_iterable([el] if not isinstance(el, list) else el for el in lst))", "def flatten_me(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n", "def flatten_me(lst):\n    res = []\n    for x in lst:\n        if type(x) == list: \n            for y in x: res.append(y)\n        else:\n            res.append(x)\n    return res\n", "def flatten_me(lst):\n    out = []\n    for item in lst:\n        if type(item) is list: out += (x for x in item)\n        else: out.append(item)\n    return out\n", "def flatten_me(lst):\n    return [v for sub in [e if type(e) == list else [e] for e in lst] for v in sub]"]