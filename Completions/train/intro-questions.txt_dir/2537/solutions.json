["class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        \n        if start > destination: \n            start, destination = destination, start \n            \n        sum1 = sum(distance[start:destination])\n        sum2 = sum(distance) - sum1 \n        \n        return min(sum1, sum2)", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        clockwise = 0\n        i = start\n        while i != destination:\n            clockwise += distance[i]\n            if i == len(distance) - 1:\n                i = 0\n            else:\n                i += 1\n                \n        i = start\n        counterclockwise = 0\n        while i != destination:\n            \n            if i == 0:\n                i = len(distance) - 1\n            else:\n                i -= 1\n            counterclockwise += distance[i]\n            \n        return min(clockwise, counterclockwise)", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        num = len(distance)\n        if start <= destination:\n            dis1 = sum(distance[start:destination])\n            dis2 = sum(distance[destination:]) + sum(distance[:start])\n        elif start > destination:\n            dis1 = sum(distance[start:]) + sum(distance[:destination]) \n            dis2 = sum(distance[destination:start])\n            \n        return min(dis1, dis2)\n            \n", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        \n        total = sum(distance)\n        \n        journey = 0\n        while start % len(distance) != destination:\n            journey += distance[start % len(distance)]           \n            start += 1\n        \n        return min(journey,total-journey)", "from typing import List\nfrom math import pow\n\n\nclass Solution:\n    def start_to_end_traverasal(\n        self, distance: List[int], start: int, destination: int\n    ) -> int:\n        n: int = len(distance)\n        total: int = 0\n        index: int = start\n        end: int = int((destination - 1 + n) % n)\n        while True:\n            total += distance[index]\n            if index == end:\n                break\n            else:\n                index += 1\n                if index == n:\n                    index = 0\n        return total\n\n    def end_to_start_traverasal(\n        self, distance: List[int], start: int, destination: int\n    ) -> int:\n        return self.start_to_end_traverasal(distance, destination, start)\n\n    def distanceBetweenBusStops(\n        self, distance: List[int], start: int, destination: int\n    ) -> int:\n        n: int = len(distance)\n        assert 1 <= n and n <= pow(10, 4)\n        assert destination < n\n        assert 0 <= start\n\n        clockwise_total: int = self.start_to_end_traverasal(\n            distance, start, destination\n        )\n        counterclockwise_total: int = self.end_to_start_traverasal(\n            distance, start, destination\n        )\n\n        # compare which path took less time\n        return min(clockwise_total, counterclockwise_total)", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        if start == destination:\n            return 0\n        \n        if start > destination:\n            start, destination = destination, start\n        \n        assert(start != destination)\n        return min(sum(distance[start:destination]), sum(distance[:start] + distance[destination:]))", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        if start > destination: start, destination = destination, start\n        return min(sum(distance[start:destination]), sum(distance[:start]) + sum(distance[destination:]))", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n\n        if start == destination:\n            return 0\n        elif start > destination:\n            start, destination = destination, start\n            \n        # clock wise\n        cw = 0\n        for i in range(start, destination):\n            cw += distance[i]\n        \n        # counter clock wise\n        ccw = 0\n        n = len(distance)\n        for i in range(destination, start + n):\n            ccw += distance[i%n]\n        \n        return min(cw, ccw)", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        if start == destination:\n            return 0\n        \n        if start > destination:\n            start, destination = destination, start\n\n        increase = start\n        decrease = start\n        right = 0\n        left = 0\n        \n        while True:\n            index = (increase) % len(distance)\n            increase += 1\n            if(index == destination):\n                break;\n            right += distance[index]\n            \n        while True:\n            decrease -= 1\n            index = (decrease) % len(distance)\n            left += distance[index]\n            if(index == destination):\n                break;\n                \n        return min(left, right)\n", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        \n        s_d = 0\n        d_s = 0\n        d_sd = []\n        \n        if (start < destination):\n            d_sd = distance[start:destination]\n            \n        if (start >= destination):\n            d_sd = distance[:destination] + distance[start:]\n        \n        for x in range(len(d_sd)):\n            s_d += d_sd[x]\n            \n        d_s = sum(distance) - s_d\n        \n        return min(s_d,d_s)\n            \n", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        \n        distance += [0]\n        for i in range(len(distance)-2,-1,-1):\n            distance[i]+= distance[i+1]\n            \n        d = abs(distance[start]-distance[destination])\n        \n        return min(d,distance[0]-d)", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        n = len(distance)\n        p1 = start%n\n        p2 = destination%n\n        d1 = 0\n        d2 = 0\n        \n        while p1!= destination and p2!=start:\n            d1+=distance[p1]\n            d2+=distance[p2]\n            p1 = (p1+1)%n\n            p2 = (p2+1)%n\n            \n        if p1==destination:\n            return d1\n        return d2", "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        fdistance = 0\n        sdistance = 0\n        n = len(distance)\n        for i in range(start, start+n):\n            if i%n == destination:\n                break\n            fdistance += distance[i % n]\n        for i in range(destination, destination+n):\n            if i%n == start:\n                break\n            sdistance += distance[i % n]\n        return fdistance if fdistance < sdistance else sdistance\n"]