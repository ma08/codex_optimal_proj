["def DNA_strand(dna):\n    pairs = [(\"A\", \"T\"), (\"C\", \"G\")]\n    replacing_rules = pairs_to_dict(pairs)\n    return \"\".join(list([replacing_rules[a] for a in dna]))\n\n\ndef pairs_to_dict(pairs):\n    d = {}\n    for pair in pairs:  # Add two replacing rules for each pair\n        d[pair[0]] = pair[1]\n        d[pair[1]] = pair[0]\n    return d\n", "pairs = {'A':'T','T':'A','C':'G','G':'C'}\ndef DNA_strand(dna):\n    return ''.join([pairs[x] for x in dna])", "def DNA_strand(dna):\n    reference = { \"A\":\"T\",\n                  \"T\":\"A\",\n                  \"C\":\"G\",\n                  \"G\":\"C\"\n                  }\n    return \"\".join([reference[x] for x in dna])", "def DNA_strand(dna):\n    # code here\n    dnaComplement=\"\"\n    for string in dna:\n        if string==\"A\":\n            dnaComplement+=\"T\"\n        elif string ==\"T\":\n            dnaComplement+=\"A\"\n        elif string ==\"G\":\n            dnaComplement+=\"C\"\n        elif string == \"C\":\n            dnaComplement+=\"G\"\n    return dnaComplement", "def DNA_strand(dna):\n  return \"\".join([{'A':'T', 'T':'A', 'C':'G', 'G':'C'}[l] for l in dna])", "def DNA_strand(dna):\n    return dna.translate(dna.maketrans(\"ATCG\", \"TAGC\"))", "def DNA_strand(dna):\n    return ''.join([{'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}[letter] for letter in dna])", "def DNA_strand(dna):\n    return dna.translate(str.maketrans(\"ATCG\",\"TAGC\"))"]