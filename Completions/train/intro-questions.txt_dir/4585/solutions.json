["def find(a,b,n):\n    strng = str(a) + str(b)\n    #there are 10 and 4 long loops\n    if (n > 20): n = n%20+20\n    while len(strng) <= n:\n        next_ch = int(strng[-1]) + int(strng[-2])\n        strng = strng + str(next_ch)\n    return int(strng[n])", "L = [\n(\"\", \"0\"),\n(\"0\", \"1123581347\"),\n(\"0224610\", \"1123581347\"),\n(\"03369156\", \"1123581347\"),\n(\"0448\", \"1235813471\"),\n(\"05510\", \"1123581347\"),\n(\"066\", \"1235813471\"),\n(\"077\", \"1459\"),\n(\"088167\", \"1347112358\"),\n(\"099189178156\", \"1123581347\"),\n(\"10\", \"1123581347\"),\n(\"\", \"1123581347\"),\n(\"\", \"1235813471\"),\n(\"\", \"1347112358\"),\n(\"\", \"1459\"),\n(\"156\", \"1123581347\"),\n(\"167\", \"1347112358\"),\n(\"178156\", \"1123581347\"),\n(\"189178156\", \"1123581347\"),\n(\"1910\", \"1123581347\"),\n(\"20224610\", \"1123581347\"),\n(\"2\", \"1347112358\"),\n(\"224610\", \"1123581347\"),\n(\"\", \"2358134711\"),\n(\"24610\", \"1123581347\"),\n(\"257\", \"1235813471\"),\n(\"268\", \"1459\"),\n(\"279167\", \"1347112358\"),\n(\"2810\", \"1123581347\"),\n(\"29\", \"1123581347\"),\n(\"303369156\", \"1123581347\"),\n(\"3\", \"1459\"),\n(\"3257\", \"1235813471\"),\n(\"3369156\", \"1123581347\"),\n(\"\", \"3471123581\"),\n(\"\", \"3581347112\"),\n(\"369156\", \"1123581347\"),\n(\"3710\", \"1123581347\"),\n(\"38\", \"1123581347\"),\n(\"39\", \"1235813471\"),\n(\"40448\", \"1235813471\"),\n(\"4156\", \"1123581347\"),\n(\"4268\", \"1459\"),\n(\"43710\", \"1123581347\"),\n(\"448\", \"1235813471\"),\n(\"\", \"4591\"),\n(\"4610\", \"1123581347\"),\n(\"\", \"4711235813\"),\n(\"48\", \"1235813471\"),\n(\"49\", \"1347112358\"),\n(\"505510\", \"1123581347\"),\n(\"5167\", \"1347112358\"),\n(\"5279167\", \"1347112358\"),\n(\"538\", \"1123581347\"),\n(\"549\", \"1347112358\"),\n(\"5510\", \"1123581347\"),\n(\"56\", \"1123581347\"),\n(\"57\", \"1235813471\"),\n(\"\", \"5813471123\"),\n(\"\", \"5914\"),\n(\"6066\", \"1235813471\"),\n(\"6178156\", \"1123581347\"),\n(\"62810\", \"1123581347\"),\n(\"639\", \"1235813471\"),\n(\"6410\", \"1123581347\"),\n(\"65\", \"1123581347\"),\n(\"66\", \"1235813471\"),\n(\"67\", \"1347112358\"),\n(\"68\", \"1459\"),\n(\"69156\", \"1123581347\"),\n(\"7077\", \"1459\"),\n(\"7189178156\", \"1123581347\"),\n(\"729\", \"1123581347\"),\n(\"7310\", \"1123581347\"),\n(\"74\", \"1123581347\"),\n(\"75\", \"1235813471\"),\n(\"76\", \"1347112358\"),\n(\"77\", \"1459\"),\n(\"78156\", \"1123581347\"),\n(\"79167\", \"1347112358\"),\n(\"8088167\", \"1347112358\"),\n(\"81910\", \"1123581347\"),\n(\"8210\", \"1123581347\"),\n(\"83\", \"1123581347\"),\n(\"84\", \"1235813471\"),\n(\"85\", \"1347112358\"),\n(\"86\", \"1459\"),\n(\"87156\", \"1123581347\"),\n(\"88167\", \"1347112358\"),\n(\"89178156\", \"1123581347\"),\n(\"9099189178156\", \"1123581347\"),\n(\"9110\", \"1123581347\"),\n(\"92\", \"1123581347\"),\n(\"93\", \"1235813471\"),\n(\"94\", \"1347112358\"),\n(\"95\", \"1459\"),\n(\"96156\", \"1123581347\"),\n(\"97167\", \"1347112358\"),\n(\"98178156\", \"1123581347\"),\n(\"99189178156\", \"1123581347\")\n]\n\n# I couldn't get my hand on a working pattern so fuck it\n# At least it's fast\ndef find(a, b, n):\n    start, loop = L[10*a+b]\n    if n < len(start): return int(start[n])\n    return int(loop[(n-len(start))%len(loop)])", "# Precompute all 2 digit suffixes into an associated prefix and repeating loop\n# E.g. build until we get two repeating values:\n#   98 -> [17, 8, 15, 6, 11, 2, 3, 5, 8, 13, 4, 7, 11, 2] (Note: [11, 2] is repeated)\n#   -> Prefix '17815611', Loop: '2358134711'\n#\n# Now any number ending with 98 has a predefined prefix and cycle, e.g.:\n#   123 + 598 -> 123598 -> 98 -> Prefix '17815611', Loop: '2358134711'\n# Hence 123 + 598 starts with '12359817815611' and then repeats '2358134711' indefinitely\n\n# Dict[str, Tuple[str, str]]\nlookup = {}\nfor i in range(10):\n    for j in range(10):\n        start = f'{i}{j}'\n        n = int(start)\n        s = [0, n]\n        seen = {}\n        while True:\n            x = s[-1]\n            if x < 10:\n                x = x + s[-2] % 10\n            else:\n                x = (x // 10) + (x % 10)\n            \n            pair = (s[-1], x)\n            if pair not in seen:\n                s.append(x)\n                seen[pair] = len(s)\n            else:\n                # idx is the point where prefix finishes and loop starts\n                idx = seen[pair] - 1\n                prefix = s[2:idx]  # Skip the leading zero and the starting value\n                loop = s[idx:]\n                lookup[start] = (''.join(map(str, prefix)), ''.join(map(str, loop)))\n                break\n\ndef find(a, b, n):\n    start = f'{a}{b}'[-2:].rjust(2, '0')\n    prefix, loop = lookup[start]\n    s = str(a) + str(b) + prefix + loop\n    \n    if n < len(s):\n        # Digit in initial supplied digits, the sum of their last two digits or the prefix\n        return int(s[n])\n\n    # Digit is in the loop\n    m = (n - len(s)) % len(loop)\n    return int(loop[m])\n", "def find(a, b, n):\n    s = str(a) + str(b)\n    \n    while s[-3:] not in {\"000\", \"112\", \"145\"}:\n        s += str(int(s[-2]) + int(s[-1]))\n    \n    base = len(s) - 3\n    loop = {\"000\": \"000\",\n            \"112\": \"1123581347\",\n            \"145\": \"1459\"}[s[-3:]]\n    \n    return int(s[n]) if n < base else int(loop[(n-base) % len(loop)])", "def find(a, b, n):\n    bag, seq = {}, [a, b]\n    while True:\n        if (a, b) in bag: break\n        bag[a, b] = len(seq)\n        a, b = b, a+b\n        if b > 9:\n            a, b = divmod(b, 10)\n            seq.append(a)\n        seq.append(b)\n    return seq[n] if n < len(seq) else \\\n        seq[bag[a, b] + (n - bag[a, b]) % (len(seq) - bag[a, b])]\n", "from itertools import islice\n\n\ndef find_repeat(a, b):\n    x = f'{a}{b}'\n    seen = {x: 0}\n    while True:\n        x += str(int(x[-2]) + int(x[-1]))\n        last = x[-2:]\n        if last in seen:\n            i = seen[last]\n            return x[:i], x[i:-2]\n        seen[last] = len(x) - 2\n    \ndef find(a,b,n):\n    prefix, repeat = [list(map(int, x)) for x in find_repeat(a, b)]\n    if n < len(prefix):\n        return prefix[n]\n    return repeat[(n - len(prefix)) % len(repeat)]", "repetitive = {\"00\": \"0\", \"11\": \"2358134711\", \"14\": \"5914\"}\n\ndef find(a, b, n):\n    sequence = f\"{a}{b}\"\n    while not sequence[-2:] in repetitive:\n        sequence = f\"{sequence}{sum(int(n) for n in sequence[-2:])}\"\n    length = len(sequence)\n    if n >= length:\n        sequence = repetitive[sequence[-2:]]\n        n = (n - length) % len(sequence)\n    return int(sequence[n])\n", "def find(a,b,n):\n    r = [a, b]\n    if n > 300:\n        n = n % 300\n    while len(r) <= n:\n        x = r[-2] + r[-1]\n        if x > 9:\n            r.extend([x // 10, x % 10])\n        else:\n            r.append(x)\n    return r[n]", "def find(a,b,n):\n    str_ = str(a) + str(b)\n    for i in range(11 + 20):\n        str_ += str(int(str_[-2]) + int(str_[-1]))\n        \n    return int(str_[n])  if n < 33 else int(str_[(n - 13) % 20 + 13])", "def find(a,b,n):\n    if a==0 and b==0:\n        return 0\n    res=f\"{a}{b}\"\n    while len(res)<=n:\n        if \"1123581347\" in res or \"1459\" in res:\n            break\n        total=int(res[-2])+int(res[-1])\n        res+=str(total)\n    if not (\"1123581347\" in res or \"1459\" in res):\n        return int(res[n])\n    if \"1123581347\" in res:\n        return int(\"1123581347\"[(n-res.index(\"1123581347\"))%10])\n    return int(\"1459\"[(n-res.index(\"1459\"))%4])"]