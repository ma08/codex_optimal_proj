["from functools import reduce\nVALID = frozenset('abcdefABCDEF')\n\n\ndef fisHex(s):\n    return reduce(lambda b, c: b ^ c, (int(a, 16) for a in s if a in VALID), 0)\n", "def fisHex(name):\n    # fish is 15\n    hexdict={'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n    res=0\n    for c in name.upper():\n        if c in hexdict:\n          res^=hexdict[c]\n    return res\n", "def fisHex(name):\n    hexx = {'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}\n    name = name.lower()\n    result = 0\n    for i in name:\n        if i in hexx:\n            result = result ^ hexx[i]\n    return result", "from functools import reduce\n\ndef fisHex(name):\n    hex = ['a','b','c','d','e','f']\n    hexFish = []\n    \n    for i in name.lower():\n        if i in hex:\n            hexFish.append(i)\n            \n    hexList = [int(x, 16) for x in hexFish]\n    if hexList != []:\n        hexValue = hexList[0]\n    else:\n        return 0\n        \n    hexValue = reduce(lambda x, y: x ^ y, hexList)\n    return hexValue", "from functools import reduce\nfisHex=lambda s:reduce(lambda x,y: x^y,[int(i,16) for i in s if i in \"ABCDEFabcdef\"] or [0])", "from functools import reduce\nfrom operator import xor\n\ndef fisHex(name):\n    return reduce(xor, (int(x, 16) for x in name.lower() if 'a' <= x <= 'f'), 0)", "from functools import reduce\nfrom operator import xor\n\ndef fisHex(name):\n    s = set(\"abcdef\")\n    return reduce(xor, map(lambda c: int(c,16), (c for c in name.lower() if c in s)),0)", "from operator import xor\nfrom functools import reduce\n\ndef fisHex(name):\n    return reduce(xor,[int(x,16) for x in name.lower() if x in 'abcdef'], 0) \n    \n", "def fisHex(name):\n    print(name)\n    hex_string = \"abcdef\"\n    name = name.lower()\n    values = [i for i in name if i in hex_string]\n    \n    if len(values)>=1:\n        placeholder = int(str(values.pop()),16)\n        for num in values:\n            placeholder = placeholder ^ int(num,16)\n        return placeholder\n    else:\n        return 0", "def fisHex(name):\n    return eval(\"^\".join([\"0x\" + c for c in name.lower() if c in \"abcdef\"])) if name else 0", "from operator import xor\nfrom functools import reduce\n\ndef fisHex(name):\n    return reduce(xor, (ord(c) - 87 for c in name.lower() if c in \"abcdef\"), 0)\n", "hexa = {'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}\ndef fisHex(name):\n    print(name)\n    hexv = [hexa[i] for i in name.lower() if i in hexa]\n    s = 0\n    for i in range(0, len(hexv)):\n        s = s^hexv[i]\n    return s", "from functools import reduce\ndef fisHex(name, l={'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15 }):\n    return reduce( lambda acc,x: acc ^ l.get(x,0), name, 0 )\n", "fisHex=f=lambda s:len(s)and(s[0]in'abcdefABCDEF'and int(s[0],16))^f(s[1:])", "from functools import reduce; fisHex=lambda name: reduce(lambda a,b: a^b, [int(l,16) if l in \"abcdef\" else 0 for l in name.lower()],0)"]