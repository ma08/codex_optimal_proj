["def cut_the_ropes(arr):\n    results = [len(arr)]\n    while arr:\n        m = min(arr)\n        arr = [elem - m for elem in arr if elem != m]\n        results.append(len(arr))\n    return results[:-1]\n    \n", "def cut_the_ropes(arr):\n    qty = len(arr)\n    sorted_ropes = sorted(arr)\n    return [qty - sorted_ropes.index(n) for n in sorted(set(arr))]\n", "def cut_the_ropes(a):\n    if not a:\n        return []\n    m = min(a)\n    return [len(a)] + cut_the_ropes([x-m for x in a if x > m])", "def cut_the_ropes(a):\n    result = []\n    while a:\n        result.append(len(a))\n        m = min(a)\n        a = [x-m for x in a if x > m]\n    return result", "def cut_the_ropes(arr):\n    res = []\n    while arr:\n        res, m = res + [len(arr)], min(arr)\n        arr = [l - m for l in arr if l > m]\n    return res", "def cut_the_ropes(arr):\n    ans = []\n    while arr:\n        ans.append(len(arr))\n        minRope = min(arr)\n        arr = [elt - minRope for elt in arr if elt > minRope]\n    return ans", "from itertools import accumulate, chain, groupby\n\ndef cut_the_ropes(arr):\n    return list(accumulate(chain((len(arr),), groupby(sorted(arr))), lambda a, b: a - sum(1 for __ in b[1])))[:-1]", "from itertools import groupby\nfrom functools import reduce\n\ndef cut_the_ropes(arr):\n    return reduce(lambda a, g: a + [a[-1] - sum(1 for __ in g[1])], groupby(sorted(arr)), [len(arr)])[:-1]", "def cut_the_ropes(arr):\n    counts = []\n    while arr:\n        counts.append(len(arr))\n        m = min(arr)\n        arr = [rope-m for rope in arr if rope-m > 0]\n    return counts", "def cut_the_ropes(a):\n    r = []\n    while a:\n        r.append(len(a))\n        n = min(a)\n        a = [x - n for x in a if x != n]\n    return r"]