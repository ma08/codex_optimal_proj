["def createDict(keys, values):\n    while len(keys) > len(values):\n        values.append(None)\n    \n    dictionary = dict(list(zip(keys, values))) \n    return dictionary\n", "def createDict(keys, values):\n    return dict(zip(keys, values + [None]*(len(keys) - len(values))))", "def createDict(keys, values):\n    return {k:(values[i] if i<len(values) else None) for i,k in enumerate(keys)}", "def createDict(keys, values):\n  return dict(list(zip(keys, values + [None]*len(keys))))\n", "def createDict(keys, vals):\n    res = {}\n    for i, key in enumerate(keys):\n         res[key] = vals[i] if i < len(vals) else None\n    return res", "def createDict(keys, values):\n    values += [None] * (len(keys) - len(values))\n    return dict(zip(keys, values))", "def createDict(keys, values):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    newdict = {}\n    for i in range(len(keys)):\n        if i < len(values):\n            newdict[keys[i]] = values[i]\n        else:\n            newdict[keys[i]] = None\n    return newdict ", "import itertools\n\ndef createDict(keys, values):\n    return dict(zip(keys, itertools.chain(values, itertools.repeat(None))))", "from itertools import zip_longest\ndef createDict(K, V):\n    return {k:v for k, v in zip_longest(K, V) if k}"]