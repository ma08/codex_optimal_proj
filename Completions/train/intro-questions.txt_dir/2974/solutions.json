["def excluding_vat_price(price):\n    try:\n        return round(price / 1.15, 2)\n    except TypeError:\n        return -1", "def excluding_vat_price(price):\n    return round(price / 1.15, 2) if price else -1", "excluding_vat_price = lambda p: round(p/115*100, 2) if p else -1", "def excluding_vat_price(price, vat=15):\n    return -1 if price is None else round(price / (1 + vat/100), 2)", "def excluding_vat_price(price):\n    return round(price / 1.15, 2) if price is not None else -1", "# surprise\ndef excluding_vat_price(prIce):\n    return round(prIce/1.15, 2) if prIce != None else -1", "def excluding_vat_price(price):\n    return -1 if price is None else round(price/1.15,2)", "def excluding_vat_price(price):\n    return float('%.2f'%(price/115*100)) if price else -1", "def excluding_vat_price(price):\n    return round(20/23*price,2) if price else -1", "def excluding_vat_price(price):\n    return round(price/1.15,2) if price!=None else -1", "def excluding_vat_price(price):\n    return round(float(price/1.15), 2) if price != None else -1", "def excluding_vat_price(price: int) -> float:\n    \"\"\" Calculate the original product price, without VAT. \"\"\"\n    return -1 if not price else round(price / 1.15, 2)", "excluding_vat_price=lambda n:-(not n)or round(n/1.15,2)", "def excluding_vat_price(price):\n    return -1 if price == None else float('{0:.2f}'.format(price/1.15))\n", "def excluding_vat_price(price):\n    return float(f\"{(price / 1.15):.2f}\") if price != None else -1", "def excluding_vat_price(price):\n    return price and round(price / 1.15, 2) or -1", "def excluding_vat_price(price):\n    return round(price*20/23,2) if price != None else -1", "excluding_vat_price=lambda Q:-1 if None==Q else round(Q/1.15,2)", "def excluding_vat_price(price):\n    if type(price) is int or type(price) is float:\n        return round(price / 1.15,2)\n    else:\n        return -1", "import math\n\ndef excluding_vat_price(price):\n    return round(price / 115 * 100, 2) if price else -1", "def excluding_vat_price(price):\n    print(price)\n    return -1 if price == 0 or price == None else round(float(price) / 1.15, 2)", "def excluding_vat_price(price):\n    if price!=None:\n          ergebnis= (price/1.15)\n \n          return round(ergebnis,2)\n    else:\n          return -1", "def excluding_vat_price(price):\n    return round(price - (-1 * (price / 1.15 - price)), 2) if price else -1", "def excluding_vat_price(price):\n    if price:\n        return float(format((price-price*15/115), '.2f'))\n    else:\n        return -1", "def excluding_vat_price(price):\n    if not price:\n        return -1\n    return round(100 * price / 115, 2)", "import numpy as np\ndef excluding_vat_price(price):\n    try:\n        return np.round((price/1.15), 2)\n    except:\n        return -1", "import math\n\ndef excluding_vat_price(price):\n    if price:\n        per = price*15/115\n        return round(price-per,2)\n    else:\n        return -1", "def excluding_vat_price(price):\n    return round(price - (price *(0.15/1.15)),2) if price else -1", "def excluding_vat_price(price):\n    if price:\n        return round(100 / 115 * price, 2)\n    else:\n        return -1", "def excluding_vat_price(price):\n    if price is None:\n        return -1    \n    sum = price - (price * (15 / 115))\n    if price != None:\n        return float('{:.2f}'.format(sum))", "def excluding_vat_price(price):\n    return -1 if not price else round((price*100/115), 2)", "def excluding_vat_price(price):\n    if price == 0 or price == None:\n        return -1\n    else:\n        return round(100*price/115, 2)", "def excluding_vat_price(price):\n    try: \n        x = round(price/1.15,2) \n    except: \n        x = -1\n    return x", "def excluding_vat_price(price):\n    if price == 0: \n        return 0\n    return round((price / (1 + 0.15)),2) if price != None else -1", "def excluding_vat_price(price):\n    try:\n        origin = float(round(price / 1.15, 2))\n        return origin\n    except TypeError:\n        return -1", "def excluding_vat_price(price):\n    return -1 if price == None else round(100 / 115 * price, 2)", "def excluding_vat_price(price):\n    if price is None:\n        return -1\n    return round(price * 10000 / 115) / 100", "def excluding_vat_price(price) -> float:\n    try:\n        return round( price/1.15, 2)\n    except TypeError:\n        return -1", "def excluding_vat_price(price):\n    try : return round(price/1.15, 2)\n    except : return -1 # o_O", "def excluding_vat_price(price):\n    if price is None:\n        return -1\n    elif price is not None:\n        ogprice = 1/1.15 * price\n        return round(ogprice,2)", "def excluding_vat_price(price):\n    if int == type(price)or float== type(price):\n        return round(price/1.15,2)\n    return -1", "def excluding_vat_price(price):\n    if price is None:\n        return -1\n    res = price / 1.15\n    return round(res, 2)", "def excluding_vat_price(price):\n    if type(price) is None:\n        return -1\n    else:\n        try:\n            str(price)\n            return round(price / 1.15, 2)\n        except:\n            return -1", "def excluding_vat_price(price):\n    try:\n        return round(price / 1.15,2)\n    except TypeError as type_err:\n        return -1", "def excluding_vat_price(final_price):\n    if final_price == None:\n        return -1\n    else:\n        price = final_price * 100 / 115\n        return round(price, 2) ", "def excluding_vat_price(price):\n    if price!=None:\n        val=float(price)/1.15\n        return round(val,2)\n    return -1", "def excluding_vat_price(price):\n\n    if price == None:\n        return -1\n    \n    tax = price - price/1.15\n    \n    no_tax_price = format(price - tax,\".2f\")\n    \n    return float(no_tax_price)", "def excluding_vat_price(price):\n    \"\"\"\n    Calculate price before VAT\n    \"\"\"\n    return round(price/1.15,2) if(isinstance(price,float) or isinstance(price,int)) else -1\n", "def excluding_vat_price(price):\n    return round(price/1.15,2) if isinstance(price,(float,int)) else -1", "def excluding_vat_price(price):\n    return round(price / 1.15 ,2) if type(price) == float or type(price) == int else -1\n", "def excluding_vat_price(price):\n    return round(float(price or -1.15) / 1.15, 2)", "def excluding_vat_price(p):\n    return round(p / 1.15, 2) if p else -1", "def excluding_vat_price(price):\n    if price == None:\n        result = -1\n    else: \n        result = price / 1.15\n        \n    return round (result, 2)", "def excluding_vat_price(price):\n    if price :\n        result = round(price / 1.15, 2)\n    else:\n        result = -1\n    return result", "def excluding_vat_price(price):\n    return round(price/(1+0.15),2) if price else -1", "def excluding_vat_price(price):\n    VAT = 15\n    return round(price / (100 + VAT) * 100, 2) if price else -1", "def excluding_vat_price(price):\n    \n    if price:\n        return float(\"{:.2f}\".format(price / 1.15))\n        \n    else:\n        return -1 \n        \n        \n        \n        \n        \n", "def excluding_vat_price(price):\n    \n    if str(price) == \"None\":\n        return -1\n\n    if price <= 0:\n        return -1\n    \n        \n    sonuc = (price) / 1.15\n    \n\n    return round(sonuc,2)", "def excluding_vat_price(price):\n    if not price == None:\n        return round(price / 1.15, 2)\n    return -1", "excluding_vat_price=lambda p:round(p*100/115,2) if p else -1", "def excluding_vat_price(price):\n    return round(price-price*0.1304347826086957,2) if price!=None else -1", "def excluding_vat_price(price):\n    if price == None:\n        return -1\n    else:\n        b = (price / 1.15)\n        c = (\"%.2f\" % b)\n        return float(c)", "def excluding_vat_price(price):\n    if type(price) == int or type(price) == float:\n        return round(200/230*price,2)\n    else:\n        return -1\n", "def excluding_vat_price(price=None):\n    return -1 if price is None else round(price/1.15, 2)", "def excluding_vat_price(price):\n    if price:\n        return round(price / 115 * 100, 2)\n    else:\n        return -1", "def excluding_vat_price(price):\n    return -1 if price == '' or  price is None else float(str(round(((1/1.15) * price),2)))", "def excluding_vat_price(price):\n    if price == None: return -1\n    if price > 0: return round (price/1.15, 2)\n    else: return 0", "def excluding_vat_price(price):\n    if type(price) != int and type(price) != float:\n        return -1\n    else:\n        return round((price/1.15),2)\n", "def excluding_vat_price(price):\n    if price == None:\n        return -1 \n    else:\n        return round(float(price/1.15),2)\n", "def excluding_vat_price(price=0):\n\n    if type(price)!=int:\n        if type(price)!=float:\n            return -1\n   \n    return round((price/115)*100,2)", "def excluding_vat_price(p):\n    return round((p/1.15),2) if p is not None else -1", "def excluding_vat_price(price):\n    return -1 if price is None else round(((price*100)/15)/(1+100/15), 2)", "def excluding_vat_price(price):\n\n    return(round((price / 1.15), 2) if price is not None and price >= 0 else -1)", "def excluding_vat_price(price):\n    try:\n        price_ex_vat = round(price / 115 * 100, 2)\n    except TypeError:\n        return -1\n    \n    return price_ex_vat", "def excluding_vat_price(price):\n    if not price:\n        return -1\n    VAT = 0.15\n    return round(price / (VAT + 1), 2)", "def excluding_vat_price(price):\n    if price == None:\n        return -1\n    return round(100 * price / 115,2)", "def excluding_vat_price(price):\n    try:\n        return -1 if price<0 else round(price/1.15,2)\n    except:\n        return -1", "def excluding_vat_price(price):\n    return round(20 / 23 * price, 2) if price is not None else -1", "def excluding_vat_price(price):\n    if price:\n        return round((100 * price) / 115, 2)\n    return -1", "def excluding_vat_price(price):\n    if price == None: return -1\n    return round(price / 115 * 100, 2)", "def excluding_vat_price(price):\n    return round(price/1.15, 2) if type(price) in [int,float] else -1", "def excluding_vat_price(price):\n    return -1 if not price else round(100 * price / 115, 2)", "def excluding_vat_price(price):\n    return -1 if price == 0 or price == None else round(price / 1.15, 2)", "def excluding_vat_price(p):\n    try:\n        return round(p/1.15,2)\n    except:\n        return -1", "def excluding_vat_price(price):\n    return float('{:.2f}'.format(price/1.15)) if price else -1", "def excluding_vat_price(price):\n    return round(price * 100.0 / 115.0, 2) if price else -1", "def excluding_vat_price(price):\n    try:\n        return round(price*100/115,2)\n    except:\n        return -1", "def excluding_vat_price(price):\n    return -1 if price == None else float('{:.2f}'.format(price / 1.15))", "def excluding_vat_price(price):\n    if price == None:\n        return -1\n    wo = price / 1.15\n    return wo.__round__(2)", "def excluding_vat_price(price):\n    #if price == 0:\n        #return -1\n    ##p = (price / 1.15)\n    #return float(\"{0:.2f}\".format(p))\n    #return round(p,2)\n    try:\n        return round(price / 1.15, 2)\n    except TypeError:\n        return -1", "def excluding_vat_price(price):\n    if price == 0 or price == None :\n        return -1\n    return(round(price/1.15,2))", "def excluding_vat_price(price):\n    if price==None:\n        return -1\n    else:\n        return round(price*20/23,2);", "def excluding_vat_price(price):\n    if price:\n        return round(price - ((price / (1 + .15) * .15)), 2)\n    return -1", "def excluding_vat_price(price):\n    return round(100*price/115, 2) if price != None else -1", "def excluding_vat_price(price):\n    return round((price * .8695652173913043), 2) if price else -1\n", "def excluding_vat_price(price):\n    return round(price*0.86956,2) if price else -1", "def excluding_vat_price(price):\n    if price == None:\n        return -1\n    something = price / (1 + ( 15 / 100))\n    return round(something, 2)", "def excluding_vat_price(price):\n    if price == 'null' or price == None :\n        return -1\n    return round(price - (price * (1- 0.86956521739)),2)     "]