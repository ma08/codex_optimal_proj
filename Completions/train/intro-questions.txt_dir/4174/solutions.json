["def smallest(n):\n    x, y, m = 1, 1, 1\n    while m <= n:\n        if x % m == 0:\n            m += 1\n            y = int(x)\n        else:\n            x += y\n    return x\n", "from functools import reduce\nfrom math import gcd\nlcm = lambda x,y: x*y//gcd(x, y)\n\n# Note: there is a lcm function in numpy 1.17 but codewars uses 1.14\ndef smallest(n):\n    return reduce(lcm, range(1, n+1))", "from fractions import gcd\n\nlcm = lambda a, b: a * b // gcd(a, b)\n\ndef smallest(n):\n    num = 1\n    for i in range(2, n + 1):\n        num = lcm(num, i)\n    return num", "from functools import reduce\nfrom math import gcd\n\n\ndef smallest(n):\n    return reduce(lambda a, b: a * b // gcd(a, b), range(1, n+1))", "def gcd(a, b):\n  if b == 0: return a\n  return gcd(b, a%b)\n\n\ndef smallest(n):\n  p = 1\n  \n  for i in range(2, n+1):\n    p *= (i / gcd(p, i))\n  \n  return p", "def smallest(n):\n    previous = 1\n    for i in range(1,n+1):\n        previous = mmc(previous,i)                         #mmc stands for least common multiple\n        previous = int(previous)                           #the mmc function returns float\n    return previous\n\ndef mmc(num1, num2):\n    a = num1\n    b = num2\n\n    resto = None\n    while resto is not 0:\n        resto = a % b\n        a  = b\n        b  = resto\n\n    return (num1 * num2) / a"]