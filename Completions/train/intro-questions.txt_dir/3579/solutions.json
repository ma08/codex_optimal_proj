["from math import factorial\n\ndef choose(n, k):\n    return factorial(n) / ( factorial(k) * factorial(n-k) ) if k <=n else 0", "import sys\nimport functools\nsys.setrecursionlimit(1_000_000)\n\n# lru_cache is a python shortcut for memoization\n# memoization is a technique to avoid repeatedly calculating\n# something that has already been calculated\n\n@functools.lru_cache(maxsize=1_000_000)\ndef choose(n,k):\n    # pascals triangle uses only addition\n    # so no rounding\n    #               1\n    #              1 1\n    #             1 2 1\n    #            1 3 3 1\n    #           1 4 6 4 1\n    # with exception of edge cases\n    # this has recursive formula\n    # choose(n, k) = choose(n-1, k-1) + choose(n-1, k)\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return choose(n-1, k-1) + choose(n-1, k)", "def choose(n,k):\n    l = [max(k,n-k),min(k,n-k)]\n    nu = 0 if k > n else 1\n    de = 1\n    for i in range(l[0]+1,n+1):\n        nu *= i\n    for i in range(1,l[1]+1):\n        de *= i\n    return int(nu/de)", "from functools import reduce\nfrom math import factorial\n\n\ndef choose(n, k):\n    return reduce(int.__mul__, range(n - k + 1, n + 1), 1) // factorial(k)", "def choose(n, k):\n    if k == 0:\n        return 1\n    else: \n        return (n * choose(n - 1, k - 1)) // k", "def choose(n, k):\n    return prod(n-k, n)//prod(1, k)\n\ndef prod(f, t):\n    if f == t:\n        return 1\n    return t * prod(f, t-1)", "from math import factorial as f\nchoose=lambda n,k:f(n)/(f(k)*f(n-k)) if k <= n else 0", "def choose(n,k):\n    def factorial(num):\n    #a nested function for computing the factorial of the \n    # n, k arguments of the choose function\n        ra = reversed(list(range(1,num)))\n        for r in ra:\n            num = num * r\n        return num\n\n    # a little of exception handling and conditional reasoning\n    # to make deal with edge cases involving negative values \n    # and ZeroDivisionError\n    try:\n        choose = factorial(n)/(factorial(k)*factorial((n-k)))\n    except ZeroDivisionError:\n        choose = n/k\n    if choose < 0:\n        return 0\n    else:\n        return choose\n"]