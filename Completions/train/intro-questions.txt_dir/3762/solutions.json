["def pattern(n):\n    return '\\n'.join(''.join(str((x+y)%n+1) for y in range(n)) for x in range(n))", "def pattern(n):\n    nums = list(range(1,n+1))\n    result = ''\n    result += ''.join(str(n) for n in nums)\n    \n    for i in range(1, n):\n        result += '\\n'\n        nums.append(nums.pop(0))\n        result += ''.join(str(n) for n in nums)\n        \n    return result\n    \n    \n", "from collections import deque\n\ndef pattern(n):\n    result = []\n    line = deque([str(num) for num in range(1, n + 1)])\n    for i in range(n):\n        result.append(\"\".join(line))\n        line.rotate(-1)\n    return \"\\n\".join(result)", "from collections import deque\n\ndef pattern(n):\n    A = deque([str(i+1) for i in range(n)])\n    result = []\n    for i in range(len(A)):\n        print(A)\n        result.append(''.join(A))\n        A.rotate(-1)\n    return '\\n'.join(result)\n", "def pattern(s):\n    return \"\\n\".join([\"\".join((str(x + y) if x + y <= s else str(x + y - s * ((x + y) // s)) for y in range(s))) for x in range(1, s + 1)])", "from itertools import chain\n\ndef pattern(n):\n    line = list(i + 1 for i in range(n))   \n    return \"\\n\".join(\"\".join(str(x) for x in chain(line[i:], line[:i])) for i in range(n))\n", "from itertools import chain\n\n\ndef pattern(n):\n    xs = ''.join(str(i) for i in range(1, n+1))\n    return '\\n'.join(''.join(str(j) for j in chain(range(i, n+1), range(1, i))) for i in range(1, n+1))", "def pattern(n):\n    a = [str(i) for i in range(1, n + 1)]\n    return '\\n'.join(''.join(a[i:] + a[:i]) for i in range(n))\n"]