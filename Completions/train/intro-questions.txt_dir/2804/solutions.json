["def custom_christmas_tree(chars, n):\n    from itertools import cycle\n    it = cycle(chars)\n    tree = [' '.join(next(it) for j in range(i)).center(2 * n).rstrip() for i in range(1, n + 1)]\n    tree.extend('|'.center(2 * n).rstrip() for _ in range(n // 3))\n    return '\\n'.join(tree)", "from itertools import cycle, chain\n\ndef custom_christmas_tree(chars, n):\n    c, l = cycle(chars), 2*n-1\n    return '\\n'.join(chain( (' '.join(next(c) for _ in range(i)).center(l).rstrip() for i in range(1,n+1)),\n                            ('|'.center(l).rstrip() for _ in range(n//3 or 1)) ))", "class Chaos(object):\n    pass\n\nclass Nature(Chaos):\n\n        \n    def buildTree(self, luck):\n        n = luck\n        tree = \"\"\n        \n        for i in range(1, n+1):\n            #leafs grow in the i'th layer\n            temp_layer = Leafs.get_leaf(self)\n            for j in range(0,i-1):\n                temp_layer += ' '\n                temp_layer += Leafs.get_leaf(self)\n                \n            tree += ' '*(n-i) + temp_layer + \"\\n\"\n        \n        # grows from roots to upper branches\n        for i in range(n//3):\n            if i == n//3-1:\n                tree += ' '*(n-1) + Trunk.pieceOfTrunk(self)\n                break\n            tree += ' '*(n-1) + Trunk.pieceOfTrunk(self) + \"\\n\"\n        \n        return tree\n    \n    \nclass Leafs(Nature):\n    \"\"\"Arguments: Tell leaf types as string,\n       Receive A(one) leaf as string.\"\"\"\n    \n    \n    def __init__(self, leaftypes):\n          self.leaftypes = leaftypes\n          self.nextleaf = 0\n            \n    def get_leaf(self):\n        \"\"\"Returns the next leaf as singleton string\"\"\"\n        # increase nextleaf\n        self.nextleaf += 1\n        #leaft, abbreviation for leaftypes\n        leaft = self.leaftypes \n        #return the value before increment\n        return leaft[(self.nextleaf-1)%len(leaft)]\n\n    \nclass Trunk(Nature):\n    def pieceOfTrunk(self):\n        return \"|\"\n    \ndef custom_christmas_tree(chars, n):\n    yaprak = Leafs(chars)\n    life = Nature.buildTree(yaprak, n)\n    return life", "from itertools import chain, cycle, islice, repeat\n\ndef custom_christmas_tree(chars, n):\n    it = cycle(chars)\n    leaves = (' '.join(islice(it, i)).center(2 * n - 1).rstrip() for i in range(1, n+1))\n    trunk = repeat('|'.rjust(n), n // 3)\n    return '\\n'.join(chain(leaves, trunk))", "from itertools import cycle\n\ndef custom_christmas_tree(chars, height):\n    ornament = cycle(chars)\n    lines = []\n    for n in range(1, height+1):\n        lines += [' ' * (height - n) + ' '.join(next(ornament) for _ in range(0, n))]\n    for n in range(height // 3):\n        lines += [' ' * (height - 1) + '|']\n    return \"\\n\".join(lines)", "def custom_christmas_tree(chars, n):\n    trunc = n // 3\n    string = ''\n    l, i = len(chars), 0\n    for r in range(n):\n        string += ' ' * (n - r - 1)\n        for c in range(r + 1):\n            string += chars[i % l]\n            string += ' ' if c < r else '\\n'\n            i += 1\n    for r in range(trunc):\n        string += ' ' * (n - 1) + '|'\n        string += '\\n' if r < trunc - 1 else ''\n    return string", "def custom_christmas_tree(chars, n):\n    chars *= n*n\n    s = lambda n: (n+1)*n//2\n    pad = lambda s: ' '*(n-len(s)//2-1)+s\n    row = lambda i: pad(' '.join(chars[s(i):s(i)+i+1]))\n    return '\\n'.join([*map(row,range(n))] + [pad('|')]*(n//3))", "from itertools import cycle\n\ndef custom_christmas_tree(chars, n):\n    leaf_provider = cycle(chars)\n    trunk_height = n // 3\n    max_width = 2 * n - 1\n    tree = []\n    def build_row(provider, row_number):\n        return \" \".join([provider.__next__() for _ in range(row_number)])\n\n    def padding(row_number):\n        return \" \" * (max_width // 2 - (2 * row_number - 1) // 2)\n\n    def build_trunk():\n        return [padding(1) + \"|\" for _ in range(trunk_height)]\n\n    for i in range(n):\n        tree.append(padding(i + 1) + build_row(leaf_provider, i + 1))\n    tree.extend(build_trunk())\n    return \"\\n\".join(tree)", "from itertools import cycle\n\ndef custom_christmas_tree(chars, n):\n    l, s = cycle(chars), lambda i=0: \" \" * (n - 1 - i)\n    return \"\\n\".join([s(i) + \" \".join(next(l) for _ in range(i+1)) for i in range(n)]  + [f\"{s()}|\" for _ in range(n//3)])\n", "from itertools import cycle\n\ndef custom_christmas_tree(chars, n):\n    space = lambda i=0: \" \" * (n - 1 - i)\n    leaf = cycle(chars)\n    body = [space(i) + \" \".join(next(leaf) for _ in range(i+1)) for i in range(n)]\n    body.extend([f\"{space()}|\" for _ in range(n//3)])\n    return '\\n'.join(body)"]