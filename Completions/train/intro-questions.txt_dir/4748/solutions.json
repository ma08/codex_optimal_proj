["def insert_dash2(num):\n    \n    prev = 0\n    out = ''\n\n    for dig in str(num):\n        if int(dig) % 2 == int(prev) % 2 and int(prev) and int(dig):\n            out += '*-'[int(prev) % 2]\n        out += dig\n        prev = dig\n    return out", "import re\n\ndef insert_dash2(num):\n    s = str(num)\n    s = re.sub('(?<=[13579])(?=[13579])', '-', s)\n    s = re.sub('(?<=[2468])(?=[2468])', '*', s)\n    return s", "import re\ndef insert_dash2(num): return re.sub(r'[13579](?=[13579])|[2468](?=[2468])', lambda m: m.group(0) + (\"-\" if int(m.group(0)) & 1 else \"*\"), str(num))", "import re\ndef insert_dash2(num):\n    s = re.sub(r'([2468])(?=[2468])',r'\\1*',str(num))\n    return re.sub(r'([13579])(?=[13579])',r'\\1-',s)\n", "import re\ndef insert_dash2(num):\n    a=re.sub(r'([2468])(?=[2468])',r'\\1*',str(num))\n    return re.sub(r'([13579])(?=[13579])',r'\\1-',a)", "def insert_dash2(num):\n  \n  snum = str(num)\n  evens, odds = frozenset('2468'), frozenset('13579')\n  res = []\n  \n  for l, r in zip(snum[:-1], snum[1:]):\n    res.append(l)\n    if l in evens and r in evens: res.append('*')\n    elif l in odds and r in odds: res.append('-')\n  \n  res.append(snum[-1])\n  \n  return ''.join(res)", "def insert_dash2(num):\n    import re\n    return re.sub(r'([2468])(?=[2468])', r'\\1*', re.sub(r'([13579])(?=[13579])', r'\\1-', str(num)))", "def insert_dash2(num):\n    num = list(str(num))\n    answer = ''\n    for index, obj in enumerate(num):\n        previous = num[index - 1]\n        if (index==0)or(int(obj)==0)or(int(previous)==0):\n            answer += obj\n            continue\n        elif (int(obj)%2==0 and int(previous)%2==0):\n            answer += '*'+ obj\n        elif (int(obj)%2!=0 and int(previous)%2!=0):\n            answer += '-' + obj\n        else:\n            answer += obj\n            continue\n\n    return answer\n\n", "insert_dash2=lambda n,r=__import__(\"re\").sub,a=\"2468\",b=\"13579\":r(f\"([{a}])(?=[{a}])\",r\"\\1*\",r(f\"([{b}])(?=[{b}])\",r\"\\1-\",str(n)))", "insert_dash2=lambda x:''.join([str(x)[i]+'-'if int(str(x)[i])%2and int(str(x)[i+1])%2else str(x)[i]+'*'if not int(str(x)[i])%2and not int(str(x)[i+1])%2and'0'not in[str(x)[i+1],str(x)[i]]else str(x)[i]for i in range(len(str(x))-1)])+str(x)[-1]"]