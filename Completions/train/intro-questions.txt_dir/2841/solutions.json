["def char_attribute(score):\n    return ({\"modifier\": 0, \"maximum_spell_level\": -1, \"extra_spells\": []} if not score\n        else {\"modifier\":            score//2-5,\n              \"maximum_spell_level\": -1 if score//2-5 < 0 else min(9, score -10) ,\n              \"extra_spells\":        [1+n//4 for n in range(score//2-5)][::-1][:9] })", "def char_attribute(score):\n    \n    result = {}\n    \n    #modifier\n    result[\"modifier\"] = 0 if score == 0 else score //2 - 5\n    \n    #maximum_spell_level\n    result[\"maximum_spell_level\"] = -1 if score < 10 else min(9, score -10)\n    \n    #extra_spells         \n    result[\"extra_spells\"] = [1 + n//4 for n in range(result[\"modifier\"])][::-1][:9]\n    \n    return result", "def char_attribute(score):\n    modifier = score and (score - 10) // 2\n    extra_spells = [i//4 for i in reversed(range(score//2-10, score//2-1)) if i > 3]\n    maximum_spell_level = min(score-10, 9) if score >= 10 else -1\n    return {\n        'modifier': modifier,\n        'maximum_spell_level': maximum_spell_level,\n        'extra_spells': extra_spells,\n    }", "from math import ceil;char_attribute=lambda n: (lambda m: {\"modifier\": n and m, \"maximum_spell_level\": -1 if n<10 else min([n-10,9]), \"extra_spells\": [e for e in [(lambda s: s if s>0 else None)(ceil((m-i)/4)) for i in range(9)] if e!=None]})(n//2-5 if n else -1)", "def char_attribute(score):\n    modifier=(score-10)//2 if score>0 else 0\n    m_spell=min(max(-1,score-10),9)\n    e_spells=[]\n    x=0\n    for i in range((score-10)//2):\n        if i%4==0:\n            x+=1\n        e_spells.insert(0,x)\n    return {'modifier':modifier,'maximum_spell_level':m_spell,'extra_spells':e_spells[:9]}", "def char_attribute(score):\n    if score > 0:\n        mod = score//2 - 5\n    else:\n        mod = 0\n    \n    if score > 11:\n        bonus_spells = [max(0,(score - i)//8) for i in range(4,21,2)]\n        while min(bonus_spells) == 0:\n            bonus_spells.pop()\n    else:\n        bonus_spells= []\n    \n    max_spell = min(9, max(-1,score-10))\n    \n    \n    return {\"modifier\": mod, \"maximum_spell_level\": max_spell, \"extra_spells\":bonus_spells} ", "def char_attribute(score):\n    modifier = 0 if score == 0 else score //2 - 5    \n    maximum_spell_level = -1 if score < 10 else min(9, score -10)    \n    extra_spells = [1 + n//4 for n in range(modifier)][::-1][:9]    \n    return {\"modifier\": modifier, \"maximum_spell_level\": maximum_spell_level, \"extra_spells\": extra_spells}", "points = []\nfor x in range(1, 200): \n    points.extend([x]*4)\npoints = points[::-1]\n\ndef char_attribute(score):\n    print(score)\n    mod = (-5 + score//2) if score else score\n    max_spell = -1 if score < 10 else 0 if score==10 else 9\n    extra = points[-mod:][:9] if mod > 0 else []\n    return {\"modifier\": mod, \"maximum_spell_level\": max_spell, \"extra_spells\": extra}", "def char_attribute(score):\n    return {'modifier': 0, 'maximum_spell_level': -1, 'extra_spells': []} if score == 0 else (\n        {'modifier': score//2-5,\n        'maximum_spell_level': -1 if score//2-5 < 0 else min(9, score -10),\n        'extra_spells': [i//4 + 1 for i in range(score//2-5)][-1:-10:-1]\n        })", "def char_attribute(score):\n    attributes = {\"modifier\": 0, \"maximum_spell_level\": -1, \"extra_spells\": []}\n    if score == 0:\n        return attributes\n    modifier = score // 2 - 5\n    attributes['modifier'] = modifier\n    if modifier < 0:\n        return attributes\n    else:\n        attributes['maximum_spell_level'] = min(9, score-10)\n        extra_spells = []\n        for i in range(min(9, modifier)):\n            extra = (modifier - 1 - i) // 4\n            extra_spells.append(1 + extra)\n        attributes['extra_spells'].extend(extra_spells)\n        return attributes"]