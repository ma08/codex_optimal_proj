["def clean_mean(sample, cutoff):\n    mean = sum(sample)/len(sample)\n    dev = ((1/len(sample))*sum((num-mean)**2 for num in sample))**(1/2)\n    cleaned = [num for num in sample if abs(num-mean) <= cutoff*dev]\n    if sample==cleaned:\n        return round(mean,2)\n    else:\n        return clean_mean(cleaned,cutoff)", "from statistics import mean, pstdev\n\ndef clean_mean(sample, cutoff):\n    cond = True\n    while cond:\n        _mean = mean(sample)\n        _stdev = pstdev(sample)\n        cut = [x for x in sample if abs(x-_mean)/_stdev <= cutoff]\n        cond = len(sample) != len(cut)\n        sample = cut\n    return round(mean(sample),2)", "from numpy import mean, std\n\ndef clean_mean(sample, cutoff):\n    m, newMean = 1j, mean(sample)\n    while m != newMean:\n        m, sd = newMean, std(sample)\n        sample = [s for s in sample if abs(s-m) < sd * cutoff]\n        newMean = mean(sample)\n    return round(newMean, 2)", "from statistics import mean, pstdev\n\ndef clean_mean(sample, cutoff):\n    u, v = mean(sample), pstdev(sample)\n    cleaned = list(filter(lambda x: abs(x - u) <= cutoff*v, sample))\n    if len(sample) == len(cleaned): return round(u, 2)\n    return clean_mean(cleaned, cutoff)", "import numpy as np\n\ndef clean_mean(sample, cutoff):\n    sample = np.array(sample)\n    while(True):\n        m = np.mean(sample)\n        newSample = sample[np.abs(sample - m) < cutoff * np.std(sample)]\n        if (len(sample) == len(newSample)):\n            return round(np.mean(newSample), 2)\n        sample = newSample", "def clean_mean(arr, cutoff):\n    while True:\n        mean, prev = sum(arr) / len(arr), arr\n        S_D = (sum((i - mean) ** 2 for i in arr) / len(arr)) ** .5\n        actual = S_D * cutoff\n        arr = [i for i in arr if abs(i - mean) < actual]\n        if prev == arr : return round(sum(arr)/len(arr),2)", "import math\ndef clean_mean(sample, cutoff):\n    print(sample, cutoff)\n    while True:\n        a=len(sample)\n        total=sum(sample)\n        mean=total/len(sample)\n        new_list=[(i-mean)**2 for i in sample]\n        total_new_list=sum(new_list)\n        sd=math.sqrt(total_new_list/len(sample))\n        sample=[i for i in sample if i<cutoff*sd+mean and i>mean-cutoff*sd]\n        if a==len(sample):\n            break\n    print (round(mean,2))\n    return round(mean,2)", "from statistics import *\ndef clean_mean(sample, cutoff):\n    prev_mn, mn, sd = None, mean(sample), pstdev(sample)\n    while mn != prev_mn:\n        sample = [e for e in sample if mn-cutoff*sd < e < mn+cutoff*sd]\n        prev_mn, mn, sd = mn, mean(sample), pstdev(sample)\n        \n    return round(mn, 2)\n", "from statistics import mean, pstdev\n\ndef clean_mean(sample, cutoff):\n    n = 0\n    while n != len(sample):\n        n = len(sample)\n        mu = mean(sample)\n        sigma = pstdev(sample, mu)\n        sample = [x for x in sample if abs(x - mu) < cutoff * sigma]\n    return round(mu, 2)", "def clean_mean(sample, cutoff):\n    if not sample:\n        return 0\n    samplesize = len(sample)\n    print((samplesize, sample))\n    mean = sum(sample) / samplesize\n    stddev = ((samplesize ** -1) * sum((element - mean) ** 2 for element in sample)) ** 0.5\n    cutoffpos = mean + cutoff * stddev\n    cutoffneg = mean - cutoff * stddev\n    for element in sample[:]:\n        if element > cutoffpos or element < cutoffneg:\n            sample.remove(element)\n    if samplesize == len(sample):\n        return round(mean, 2)\n    else:\n        return clean_mean(sample, cutoff)\n        \n    \n    \n    \n"]