["def validate_code(code):\n    return str(code).startswith(('1', '2', '3'))\n", "def validate_code(code):\n    return str(code)[0] in '123'", "def validate_code(code):\n    import re\n    return bool(re.match(r\"^[123]\\d*$\",str(code)))\n", "def validate_code(code):\n    import re\n    return bool(re.match('[123]',str(code)))", "def validate_code(code):\n    return int(str(code)[0]) < 4", "import re\n\ndef validate_code(code):\n    return bool(re.match(\"^[1-3]\",str(code)))", "validate_code = lambda c: str(c)[0] in \"123\"", "def validate_code(code):\n    return True if str(code)[0] in set('123') else False", "from re import match\nfrom math import log10\n\ndef validate_code(code):\n    # Without bothering with string conversion\n    return 0 < code // 10**int(log10(code)) < 4\n    \n    # Title says regex so let's write one\n    return bool(match(\"\\A[1-3]\", str(code)))", "validate_code=lambda n:str(n).startswith(tuple('123'))", "def validate_code(code):\n    import re\n    return True if re.match('^1|^2|^3', str(code)) is not None else False", "import re\ndef validate_code(code):\n  return bool(re.match(\"[123]{1}.*\",str(code)))", "def validate_code(code):\n    return True if str(code)[0] in (\"1\", \"2\", \"3\") else False", "import re\nvalidate_code = lambda c: bool(re.search(\"^[1-3]\", str(c)))", "from math import ceil, log10\n\ndef validate_code(code):\n    return first_digit(code) in (1, 2, 3)\n\n\ndef first_digit(num):\n    num_of_digs = ceil(log10(num))\n    amount_of_digs_to_remove = num_of_digs - 1\n    return num // 10**(amount_of_digs_to_remove)  # removes digits starting from right", "def validate_code(code):\n    #your code here\n    string = str(code)\n    return True if string[0] in '123' else False", "import re\n\ndef validate_code(code):\n    return bool(re.match(r'^[1-3]',str(code)))\n\n# easy non-regex solution would be the following\n#\n# def validate_code(code):\n#     return list(str(code))[0] in list('123')\n", "import re\ndef validate_code(code):\n    if re.search(r'(\\A1)|(\\A2)|(\\A3)', str(code)):\n        return True\n    return False", "import re\ndef validate_code(code):\n    #your code here\n    return bool(re.match(r'[1-3]', str(code)))", "def validate_code(code):\n    return '1' <= str(code)[0] <= '3'", "def validate_code(code):\n    code = list(map(int, list(str(code))))\n    return True if code[0] == 1 or code[0] == 2 or code[0] == 3 else False", "def validate_code(code):\n    code_str = str(code)\n    if code_str[0] == '1' or code_str[0] == '2' or code_str[0] == '3':\n        return True\n    return False", "def validate_code(code):\n    code = str(code)\n    print(code)\n    if str(code)[0] in ['1','2','3']:\n        return True\n    else:\n        return False", "def validate_code(code):\n    return str(code)[0] in '123'\n\n    \n#\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043a\u043e\u0434\n#\u043b\u044e\u0431\u043e\u0439 \u0434\u043b\u0438\u043d\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u043a\u043e\u0434 \u0441 1, 2 \u0438\u043b\u0438 3, \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c true, \u0435\u0441\u043b\u0438 \u0434\u0430. \n#\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0435\u0440\u043d\u0438\u0442\u0435 false.\n\n#\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u043c.\"\"\"\n", "def validate_code(code):\n    return (str(code)[0]) <= '3'", "def validate_code(code):\n    import re\n    \n    if re.match(r'^[1-3]', str(code)) is not None:\n        return True\n    else:\n        return False", "def validate_code(code):\n    wert = str(code);\n    print(wert);\n    \n    if wert[0] == '1':\n        return True;\n    elif wert[0] == '2':\n        return True;\n    elif wert[0] == '3':\n        return True;\n    else:\n        return False"]