["def update_score(score, trump, alone, tricks):\n    done = tricks.count(trump)\n    mul = 2 if done == 5 and alone else 1\n    add = 1 if done in (3, 4) else 2\n    winner = trump if done > 2 else (3 - trump)\n    return [pts + (add * mul if team == winner else 0) for team, pts in enumerate(score, 1)]", "def update_score(score, trump, alone, tricks):\n    ts, sc = tricks.count(trump), score[:]\n    if ts<=2 : sc[(trump-1)^1] += 2\n    else: sc[trump-1] += [[1,2][not alone and ts==5],4][alone and ts==5]\n    return sc", "def update_score(current_score, called_trump, alone, tricks):\n    n = tricks.count(called_trump)\n    if n <= 2:\n        called_trump = 3 - called_trump\n        p = 2\n    elif n <= 4:\n        p = 1\n    else:\n        p = 4 if alone else 2\n    current_score[called_trump > 1] += p\n    return current_score", "def update_score(current_score, called_trump, alone, tricks):\n    new_score = current_score\n    won = 0\n    for score in tricks:\n        if score == called_trump:\n            won += 1\n    if won <= 2:\n        if called_trump == 1:\n            new_score[1] += 2\n        else:\n            new_score[0] += 2\n    elif won == 3 or won == 4:\n        new_score[called_trump - 1] += 1\n    elif won == 5 and alone == True:\n        new_score[called_trump - 1] += 4\n    else:\n        new_score[called_trump - 1] += 2\n    return new_score", "POINTS = [[0, 2],    # 0 tricks ; index 0 = caller ; 1 = opponent\n          [0, 2],    # 1 tricks\n          [0, 2],    # 2 tricks\n          [1, 0],    # 3 tricks\n          [1, 0],    # 4 tricks\n          [2, 0],]   # 5 tricks\n\ndef update_score(current_score, called_trump, alone, tricks):\n    n_tricks = tricks.count(called_trump)\n    inc = POINTS[n_tricks][:]\n    if called_trump == 2: inc.reverse()\n    return [ v+inc[i] + 2 * (i == called_trump-1 and n_tricks == 5 and alone) for i,v in enumerate(current_score) ]", "def update_score(current_score, called_trump, alone, tricks):\n  a = current_score[:]\n  w = tricks.count(called_trump)\n  if w < 3:\n    a[(called_trump - 1) ^ 1] += 2\n  else:\n    a[called_trump - 1] += 1 if w < 5 else 4 if alone else 2\n  return a", "def update_score(current_score, called_trump, alone, tricks):\n   w = tricks.count(called_trump)\n   current_score[(w > 2) - called_trump] += 2 - (2 < w < 5) + 2 * (w == 5) * alone\n   return current_score", "_OUTCOMES = [2,2,2,2,1,1,2,4]\n\ndef update_score(current_score, called_trump, alone, tricks):\n    score = [0] + current_score\n    winner = 1 + (tricks.count(2) > 2)\n    i = 4 * (winner == called_trump) + 2 * (tricks.count(winner) == 5) + alone\n    score[winner] += _OUTCOMES[i]\n    return score[-2:]", "def update_score(current_score, called_trump, alone, tricks):\n    tricks_won = sum([int(val / called_trump)  for val  in tricks if val == called_trump])\n    if alone and tricks_won == 5: points_won = 4\n    elif tricks_won == 5:  points_won = 2\n    elif tricks_won == 5:  points_won = 2\n    elif tricks_won >=3 :  points_won = 1\n    else:\n        points_won = 2\n        if called_trump == 1:called_trump = 2\n        else: called_trump = 1\n    current_score[called_trump-1] = current_score[called_trump-1] + points_won\n    return current_score", "def update_score(current_score, called_trump, alone, tricks):\n    score=current_score[:]\n    c=tricks.count(called_trump)\n    i=called_trump-1\n    if c<=2:\n        score[i^1]+=2\n    elif c<5:\n        score[i]+=1\n    elif alone:\n        score[i]+=4\n    else:\n        score[i]+=2\n    return score"]