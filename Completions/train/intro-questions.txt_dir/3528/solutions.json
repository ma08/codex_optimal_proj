["def compound_array(a, b):\n    x = []\n    while a or b:\n      if a: x.append(a.pop(0))\n      if b: x.append(b.pop(0))\n    return x", "def compound_array(a, b):\n    x = min(map(len,(a,b)))\n    return sum(map(list,zip(a,b)),[]) + a[x:] + b[x:]", "def compound_array(a, b):\n\n  res = []\n  \n  for i in range(max(len(a), len(b))):\n    res.extend(a[i:i+1])\n    res.extend(b[i:i+1])\n  \n  return res", "def compound_array(a, b):\n    r=[]\n    while a or b:\n        r+=a[:1]+b[:1]\n        a,b=a[1:],b[1:]\n    return r", "def compound_array(a, b):\n    return [l[i] for i in range(max(len(a), len(b))) for l in (a, b) if i < len(l)]\n", "def compound_array(a, b):\n    answer = []\n    while a or b:\n        if a: answer.append(a.pop(0))\n        if b: answer.append(b.pop(0))\n    return answer", "def compound_array(a, b):\n    lst = zip(a[:len(b)], b[:len(a)])\n    return [item for sublist in lst for item in sublist] + a[len(b):] + b[len(a):]", "from itertools import zip_longest\ndef compound_array(a, b):\n    mx = []\n    for a,b in zip_longest(a,b):\n        mx.append(a)\n        mx.append(b)\n    return list(filter(lambda x:x!=None, mx))", "def compound_array(a, b):\n    r=[]\n    for i in [[i,j] for i,j in zip(a,b)]:\n        r.append(i[0])\n        r.append(i[1])\n    return r+a[min(len(a),len(b)):]+b[min(len(a),len(b)):]\n", "def compound_array(a, b):\n    if a == [] or b == []:\n        return a + b\n    n = []\n    for x in range(len(min([a, b], key=len))):\n        n.append(a[x])\n        n.append(b[x])\n        if x == len(min([a, b], key=len))-1:\n            n+=max([a, b], key=len)[x+1:]\n    return n"]