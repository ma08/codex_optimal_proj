["def zeros(n):\n    \"\"\"\n    No factorial is going to have fewer zeros than the factorial of a smaller\n    number.\n\n    Each multiple of 5 adds a 0, so first we count how many multiples of 5 are\n    smaller than `n` (`n // 5`).\n\n    Each multiple of 25 adds two 0's, so next we add another 0 for each multiple\n    of 25 smaller than n.\n\n    We continue on for all powers of 5 smaller than (or equal to) n.\n    \"\"\"\n    pow_of_5 = 5\n    zeros = 0\n    \n    while n >= pow_of_5:\n        zeros += n // pow_of_5\n        pow_of_5 *= 5\n        \n    return zeros", "def zeros(n):\n    zeros = 0\n    i = 5\n    while n//i > 0:\n        zeros += n//i\n        i*=5\n    return zeros", "def zeros(n):\n    return 0 if int(n/5) < 1 else int(n/5) + int(zeros(n/5))", "def zeros(n):\n    count = 0\n    while n:\n        n = n // 5\n        count += n\n    return count", "def zeros(n):\n    res = 0\n    i = 5\n    while i <= n:\n        res += n // i\n        i *= 5\n    return res", "import math  \n\ndef zeros(n):\n  if (n >= 5):\n      return math.floor(n / 5) + zeros(n / 5)\n  else:\n      return 0", "def find_factor(p, n):\n    \"\"\"Find how many times the prime number p divides n!\"\"\"\n    result, power = 0, p\n    while power < n:\n        result += n // power\n        power *= p\n    return result\n\ndef zeros(n):\n    \"\"\"Find the number of trailing zeroes in n!.\"\"\"\n    return min(find_factor(p, n) for p in (2, 5))", "from math import log, floor\n\ndef zeros(n):\n    if n < 5:\n        return 0\n    powers = range(1,floor(log(n,5))+1)\n    return sum(n//div for div in (5**pw for pw in powers))", "from math import log, ceil\ndef zeros(n): return sum(n//5**i for i in range(1, ceil(log(n, 5)))) if n > 0 else 0", "def zeros(n):\n    res = 0\n    while n >= 5:\n        res += n // 5\n        n //= 5\n    \n    return res", "def zeros(n):\n    c=0;r=1\n    while 5**r<=n:c+=len(range(5**r,n+1,5**r));r+=1\n    return c", "def zeros(n):\n    count = 0\n    i = 5\n    while i <= n:\n        count += n // i\n        i *= 5\n    return count", "def zeros(n):\n    a = n // 5\n    if a >= 5:\n        return a + zeros(a)\n    else:\n        return a", "def zeros(n):\n    sum = 0\n    for i in range(1, 30):\n        sum += n//(5**i)\n    return sum", "def zeros(n):\n    result = 0\n    i = 5\n    while (n / i >= 1):\n        result += int(n / i)\n        i *= 5\n\n    return int(result)\n", "def zeros(n):\n    c, x = 0, 5\n    while n > x: c += n // x; x *= 5\n    return c", "from math import floor\n\ndef zeros(n):\n  sum = 0\n  power = 1\n  while n / 5**power >= 1:\n    sum += floor(n / 5**power)\n    power += 1\n  return sum", "def zeros(n):\n    i, j = 1, 0\n    while 5 ** i <= n: i, j = i + 1, j + int(n / 5 ** i)\n    return j", "def zeros(n):\n    base, total = 5, 0\n    while n>base:\n        total += n // base\n        base *= 5\n    return total", "def zeros(n):\n    i = 5\n    zeros = 0\n    while n >= i:\n        zeros += n // i\n        i *= 5\n    return zeros", "def zeros(n):\n    \"\"\" count all factors of 5: 5 10 15 .. 25(count twice as 25 = 5*5) ..... 125 (count three) \"\"\"\n    p = 0\n    sum = 0\n    while n>5**p:\n        p += 1\n        sum += n//(5**p)\n    return sum", "from itertools import takewhile, count\nfrom operator import truth\n\ndef zeros(n):\n    return sum(takewhile(truth, (n // 5 ** e for e in count(1))))", "zeros = lambda n : n//5 + zeros(n/5) if n/5 else 0", "from itertools import count, takewhile\npow5 = lambda x: 5**x\n\ndef zeros(n):\n    okay = lambda x: x <= n\n    val  = lambda x: n//x\n    return sum(map(val, takewhile(okay, map(pow5, count(1)))))", "def zeros(n):\n    import math\n    return 0 if n==0 else sum((int(n*5**-i)) for i in range(1,1+int(math.log(n,5))))", "def zeros(n):\n    if n==0:\n        return 0\n    else:\n        return int(n/5) + int(zeros(n/5))", "def zeros(n):\n    \n    if n/5 <= 0:\n        return 0\n    else:\n        n //= 5 \n        return n + zeros(n)", "import math\ndef zeros(n):\n    if (n == 0):\n        return 0\n    fives=0\n    log5n = int(math.log10(n)/math.log10(5))\n    for i in range(1,log5n+ 1):\n        fives += int(n/(5**i))\n    return int(fives)", "def zeros(n): \n      \n    # Initialize result \n    count = 0\n  \n    # Keep dividing n by \n    # powers of 5 and \n    # update Count \n    i=5\n    while (n/i>=1): \n        count += int(n/i) \n        i *= 5\n  \n    return int(count) ", "def zeros(n):\n    print(n)\n    return int(n / 5*1.24999999)", "def zeros(n):\n    t = 5\n    s = 0\n    while n > t:\n        s += n // t\n        t *= 5\n    return s", "def zeros(n):\n    return 0 if not n else n // 5 + zeros(n // 5)\n", "def zeros(n):\n    count=0\n    while n>=5:\n        count+=n//5\n        n=n//5\n    return count", "def zeros(n):\n    i = 5\n    count = 0\n    while n >= i:\n        count += n // i\n        i *= 5\n    return count\n", "import math\n\ndef zeros(n):\n    Zeros = 0;\n    i = 5;\n    while i <= n:\n        Zeros += math.floor(n/i);\n        i *= 5\n    return Zeros", "def zeros(n):\n    return sum(n//(5**i) for i in range(1,20))", "def zeros(n):\n    return 0 if n < 5 else n//5 + zeros(n//5)", "import math\n\ndef zeros(n):\n    return 0 if n < 2 else sum([n//(5**f) for f in range(1, max(2, int(math.log(n)))) if 5**f <= n])", "import math\n\ndef zeros(n: int):\n    if n < 5:\n        return 0\n    log_n_5 = int(math.log(n, 5))\n\n    return sum([n//5**i for i in range(1, log_n_5 + 1)])", "def zeros(n):\n    n = n//5\n    number = n    \n    while(n!=0):\n        n = n//5\n        number += n\n    return number", "\ndef zeros(n):\n    i=5\n    count = 0\n    while i < n:\n        count += n//i\n        i = i*5\n    return count", "def zeros(n):\n    i = 1\n    res = 0\n    while 5**i < n:\n        res += n // 5**i\n        i += 1\n    return res", "import math\ndef zeros(n):\n    # The trailing zero's \n    sum = 0\n    # Corner case where there is no zero for sure and to eliminate negative or zero(log limitations)\n    if n<5:\n        return 0\n    # The algorithm from Wolfram\n    for i in range(1,math.floor(math.log(n,5)+1)):\n        sum+=math.floor(n/pow(5,i))\n    return sum    \n", "def zeros(n):\n    num_5 = n\n    num_2 = n\n    n_5 = 0\n    n_2 = 0\n    while num_5 != 0:\n        n_5 += num_5 // 5\n        num_5 = num_5 // 5\n    return n_5", "from math import factorial\n\ndef zeros(n):\n    if n == 0:\n        return 0\n    cnt = 0\n    div_num = 5\n    while (n / div_num >= 1):\n        cnt += int(n / div_num) \n        div_num *= 5\n    return cnt", "def zeros(n):    \n    count = 0\n    \n    divider=5\n    \n    while (n/divider >= 1):\n        count += int(n/divider)\n        divider *= 5\n    return int(count) \n", "import math\n\ndef zeros(n):\n    count = 0\n    if n == 0:\n        return 0\n    else:\n        k_max = math.floor(math.log(n,5))\n        for i in range(k_max):\n            ans = math.floor(n/(5**(i+1)))\n            count = count + ans\n        return count", "def zeros(n):\n    divisor=5\n    count=0\n    while(n>divisor):\n        count=count+int(n/divisor)\n        divisor*=5\n    return (count)\n        \n        \n", "def zeros(n):\n    if n == 0:\n        return 0\n    value = 0\n    i = 1\n    while True:\n        if n > 5 ** i:\n            value += n // 5**i\n        else:\n            return value\n        i += 1", "def zeros(n):\n    return sum([n//5**i for i in range(1, len(str(n)) + len(str((n//1000) + 1))) ])", "def zeros(n):\n    x=0\n    z=5\n    while n>0:\n        n/=5\n        x+=int(n)\n    return x", "def zeros(n):\n    answer = 0\n    i = n\n    while i > 0:\n        i //= 5\n        answer += i\n    return answer", "def zeros(n):\n    i = 5\n    count_5 = 0\n    while n//i >= 1:\n        count_5 += n//i\n        i *= 5\n    return count_5\n", "import math\n\ndef zeros(n):\n    if n <= 0:\n        return 0\n    k_max = math.floor(math.log(n, 5)) + 1\n    sum = 0\n    for k in range(1, k_max):\n        sum += math.floor(n / 5 ** k)\n    return sum\n", "def zeros(n):   \n    i, count = 20, 0\n    while i>0:\n        count += n//(5**i)        \n        i -= 1\n    return count", "def zeros(n):\n    answer = 0\n    for i in range(1,100):\n        answer += (int(n/5**i))\n    \n    return answer\n", "def zeros(n):\n    sum = 0\n    d = 5\n    while d <= n:\n        sum += n // d\n        d *= 5\n    return sum", "def zeros(n):\n    p=n//5\n    t=p\n    while t>0:\n        t=t//5\n        p=p+t\n    return p", "from math import log \ndef zeros(n):\n    if n==0:\n        return 0; \n    y=0\n    for x in range(1,int(log(n,5)+1)):\n                   y+=n//(5**x)\n    return y \n", "def zeros(n):\n    final = 0\n    if n == 0:\n        return 0\n    for x in range(1, 15):\n        final += n // 5**x\n    print(final)\n    return final\n\n    \n", "from math import*\ndef zeros(n):\n    res=0\n    i=5\n    while i<n:\n        res+=floor(n/i)\n        i*=5\n    return (res)\n", "from math import log\ndef zeros(n):\n    if(n==0):\n        return 0\n    return sum([int(n/5**i) for i in range(1,int(log(n,5))+1)])", "def zeros(n):\n    b = 0\n    while 5 ** b < n:\n        b += 1\n    return sum(n // (5 ** c) for c in range(1, b))", "def zeros(n):\n    sum = 0\n    while(n>=5):\n        n = n // 5\n        sum = sum + n\n    return sum", "def zeros(n):\n    count = 0\n    \n    \n    i = 5\n    \n    while(n/i>=1):\n        count += int(n/i)\n        i *= 5\n        print(i)\n    return int(count)", "def zeros(n):\n    result = 0\n    power = 1\n    while True:\n        if 5 ** power > n:\n            break\n        result += n // (5 ** power)\n        power += 1\n    \n    return result\n", "import math\ndef zeros(n):\n    ret = 0\n    if n == 0:\n        return 0\n    for i in range(1,int(math.log(n)/math.log(5)) + 1):\n        ret += n // math.pow(5,i)\n    return ret", "import math\n\ndef zeros(n):\n    if n == 0: return 0\n    z = 0\n    kmax = math.floor(math.log(n)/math.log(5))\n    for i in range(1, kmax+1):\n        z += math.floor(n/5**i)\n        \n    return z", "def zeros(n):\n    import math\n    ZEROS = 0\n    \n    if n == 0:\n        return 0\n    else:\n        k_max = math.floor(math.log(n,5))        \n        for k in range(1, k_max+1):\n            ZEROS += n//(5**k)\n        return ZEROS", "from math import log\n\ndef zeros(n):\n    if n == 0:\n        return 0\n    z = 0\n    k = 1\n    kMax = round(log(n, 5))\n    for i in range(k, kMax+1):\n        z += n // (5 ** i)\n    return z", "def zeros(n):\n    num_zero = 0\n    while n > 0:\n        n = n // 5\n        num_zero += n\n    return num_zero", "def zeros(n):\n    sums = []\n    while n > 5:\n        n /= 5\n        sums.append(int(n))\n        #print(int(n))\n    a = 0\n    for num in sums: \n        a += int(num)\n        #print(a)\n    return int(a)", "def zeros(n):\n    i = 1\n    x = 0\n    while 5**i <= n:\n        x += n//5**i\n        i+=1\n    return x\n", "from math import log\n\ndef zeros(n):\n    if n == 0 : return 0\n    z = 0\n    i = 1\n    while i < log(n, 5):\n        z += n//5**i\n        i+= 1\n\n    return z\n\n    \n", "def zeros(n):\n    import math\n   \n    if n == 0: return 0\n    \n    kmax = int(math.log(n,5))\n    return sum(int(n/math.pow(5,i)) for i in range(1,kmax+1))\n", "import math\n\ndef zeros(n):\n    zeroes = 0\n    k=1\n    while n/(5**k)>1:\n        zeroes += math.floor(n/(5**k))\n        k += 1\n    return zeroes", "def zeros(n):\n    zeros = 0\n    tmp = n\n    while tmp >= 1:\n        tmp /= 5\n        zeros += int(tmp)\n    return zeros", "import math\ndef zeros(n):\n    return sum(int(n/math.pow(5,i)) for i in range (1,15) if int(n/math.pow(5,i))!=0 )", "def zeros(n):\n    # find the exponent of a prime factor p in the prime factorization of n!\n    def find_exponent(n,p):\n        factor = 0\n        p_helper = p\n        while n>p_helper:\n            factor += int(n/p_helper)\n            p_helper *= p\n        return factor\n    \n    five_exponent = find_exponent(n,5)\n    \n    return five_exponent", "def zeros(n):\n    # find the exponent of a prime factor p in the prime factorization of n!\n    def find_exponent(n,p):\n        factor = 0\n        p_helper = p\n        while n>p_helper:\n            factor += int(n/p_helper)\n            p_helper *= p\n        return factor\n    \n    # trailing zeros correspond to divisibility by 10 and its powers\n    # that can be deduced from divisibility by 2 and 5\n    two_exponent = find_exponent(n,2)\n    five_exponent = find_exponent(n,5)\n    \n    return min(two_exponent,five_exponent)", "import math\ndef zeros(n):\n    '''factorial = 1\n    count = 0\n    if n <= 0:\n        return 0\n    for i in range(1, n + 1):\n        factorial = factorial * 1'''\n    count = 0\n    '''if n <= 0:\n        return 0\n    else:\n        fact = math.factorial(int(n))\n        check = True\n        while check:\n            if fact % 10 == 0:\n                count += 1\n            elif fact % 10 != 0:\n                check = False'''\n    \n    i=5\n    while (n/i>=1): \n        count += int(n/i) \n        i *= 5\n  \n    return int(count) \n        \n    \n"]