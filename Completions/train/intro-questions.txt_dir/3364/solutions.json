["def predict_age(*ages):\n    return sum(a*a for a in ages)**.5//2", "def predict_age(*age):\n    return sum(a*a for a in age)**0.5//2", "import numpy as np\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return np.sum(np.array([age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]) ** 2) ** 0.5 // 2", "import math\ndef predict_age(*args):\n    return math.sqrt(sum(x*x for x in args))//2", "from numpy import linalg as LA\ndef predict_age(*ages):\n    return LA.norm(ages) // 2", "predict_age=lambda *a:sum(e*e for e in a)**0.5//2", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    # your \n    sum = 0\n    listik = [age_1**2, age_2**2, age_3**2, age_4**2, age_5**2, age_6**2, age_7**2, age_8**2]\n    for i in listik:\n        sum += i\n    return int((sum**(1/2))//2)", "import math\ndef predict_age(*ages):\n    return int(math.sqrt(sum(age*age for age in ages)) / 2)", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    arr=[age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    result=int((math.sqrt(sum([i ** 2 for i in arr])))/2)\n    return result", "def predict_age(*argv):\n    return sum(x*x for x in argv)**(1/2) // 2", "def predict_age(*ages):\n    return int(sum(age*age for age in ages) ** 0.5 / 2)", "def predict_age(*age):\n    return sum([i**2 for i in age])**.5//2", "def predict_age(*ages):\n    return (sum(a**2 for a in ages) ** 0.5) // 2", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age_1 = age_1 ** 2\n    age_2 = age_2 ** 2\n    age_3 = age_3 ** 2\n    age_4 = age_4 ** 2\n    age_5 = age_5 ** 2\n    age_6 = age_6 ** 2\n    age_7 = age_7 ** 2\n    age_8 = age_8 ** 2\n    total = age_1 + age_2 + age_3 + age_4 + age_5 + age_6 + age_7 + age_8\n    total = math.sqrt(total)\n    return int(total / 2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    import math\n    oldAge = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8] \n    newAge = []\n    y = 0\n    x = 0\n    z = 0\n    r = 0\n    for i in range(0, len(oldAge)):\n      newAge.append(oldAge[i]*oldAge[i])\n    z = sum(newAge)\n    y = math.sqrt(z)\n    r = y/2\n    x = math.floor(r)\n    print(x)\n    return x\n", "import math\n\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n\n    list1 = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    list2 = []\n\n    for x in list1:\n        list2.append(x * x)\n\n    list_sum = sum(list2)\n\n    list_sum2 = math.sqrt(list_sum)/2\n\n    print (int(list_sum2))\n    return int(list_sum2)\n\n\npredict_age(65,60,75,55,60,63,64,45)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return int(math.sqrt(sum([age ** 2 for age in locals().values()])) / 2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return(math.floor(math.sqrt(age_1**2 + age_2**2 + age_3**2 + age_4**2 + age_5**2 + age_6**2 + age_7**2 + age_8**2)/2.0))", "def predict_age(*ages):\n    return ((sum([age*age for age in ages]))**0.5)//2", "from math import sqrt\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    s = sum([x*x for x in [age_1,age_2,age_3,age_4,age_5,age_6,age_7,age_8]])\n    return sqrt(s)//2", "def predict_age(a1, a2, a3, a4, a5, a6, a7, a8):\n    ages = [a1, a2, a3, a4, a5, a6, a7, a8]\n    return sum([el**2 for el in ages])**0.5 // 2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    new_list = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    \n    mult_list = math.sqrt(sum([i**2 for i in new_list])) // 2\n    \n    return mult_list", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    # your\n    sum = 0\n    #calculate sum of ages\n    sum += age_1**2 + age_2**2 + age_3**2 + age_4**2 + age_5**2 + age_6**2 + age_7**2 + age_8**2\n    \n    #square root and divide by 2\n    return (sum**0.5)//2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    sum = 0\n    for i in ages:\n        sum = sum + i ** 2\n    \n    return math.floor(math.sqrt(sum)/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age_multiplied_and_added = age_1 ** 2 + age_2 ** 2 + age_3 ** 2 + age_4 ** 2 + age_5 ** 2 + age_6 ** 2 + age_7 ** 2 + age_8 ** 2\n    age_multiplied_and_added_and_squared = age_multiplied_and_added ** 0.5\n    return int(age_multiplied_and_added_and_squared / 2)\n", "from math import sqrt\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    sum=0\n    sum=age_1*age_1+age_2*age_2+age_3*age_3+age_4*age_4+age_5*age_5+age_6*age_6+age_7*age_7+age_8*age_8\n    sum=sqrt(sum)/2\n    return int(sum)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    \n    return int(math.sqrt(sum(x*x for x in ages)) / 2)", "def predict_age(*age):\n    lt = [i*i for i in age]\n    return int((sum(lt)**0.5)/2)", "from math import sqrt, floor\ndef predict_age(a1, a2, a3, a4, a5, a6, a7, a8):\n    ages = [a1,a2, a3, a4, a5, a6, a7, a8]\n    return floor(sqrt(sum([x*x for x in ages]))/2)", "import math\ndef predict_age(q, w, e, r, t, y, u, i):\n    x = [q,w,e,r,t,y,u,i]\n    for i,j in enumerate(x):\n        x[i] = j*j\n    return int(str(math.sqrt(sum(x))/2).split(\".\")[0])", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age_1 *= age_1\n    age_2 *= age_2\n    age_3 *= age_3\n    age_4 *= age_4\n    age_5 *= age_5\n    age_6 *= age_6\n    age_7 *= age_7\n    age_8 *= age_8\n\n    age = age_1 + age_2 + age_3 + age_4 + age_5 + age_6 + age_7 + age_8\n    return math.floor(math.sqrt(age)/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    total = 0\n\n    for i in range(0,len(age)):\n        multi_itself = age[i] * age[i]\n        total = total + multi_itself\n\n    square_root = pow(total, 0.5)\n    return int(square_root / 2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age=0\n    return (math.sqrt(pow(age_1,2)+pow(age_2,2)+pow(age_3,2)+pow(age_4,2)+pow(age_5,2)+pow(age_6,2)\n            +pow(age_7,2)+pow(age_8,2)))//2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return math.sqrt(sum([age_1 ** 2, age_2 ** 2, age_3 ** 2, age_4 ** 2, age_5 ** 2, age_6 ** 2, age_7 ** 2, age_8 ** 2])) // 2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return math.sqrt(sum([x**2 for x in age]))//2", "import math\ndef predict_age(a1, a2, a3, a4, a5, a6, a7, a8):\n    l = [a1 ** 2, a2 ** 2, a3 ** 2, a4 ** 2, a5 ** 2, a6 ** 2, a7 ** 2, a8 ** 2]\n    return int(math.sqrt(sum(l)) / 2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    all_ages = []\n    all_ages.extend([age_1,age_2,age_3,age_4,age_5,age_6,age_7,age_8])\n    x = 0\n    for age in all_ages:\n        age = age * age\n        x += age\n    y = math.sqrt(x)\n    return int(y / 2)\n", "def predict_age(*xs):    \n    return int(sum(map(lambda x : x**2, xs)) ** 0.5 / 2)", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    result = 0\n    result += age_1 * age_1\n    result += age_2 * age_2\n    result += age_3 * age_3\n    result += age_4 * age_4\n    result += age_5 * age_5\n    result += age_6 * age_6\n    result += age_7 * age_7\n    result += age_8 * age_8\n    result = math.sqrt(result)\n    result = result/2    \n    \n    return int(result)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return math.floor((age_1**2+age_2**2+age_3**2+age_4**2+age_5**2+age_6**2+age_7**2+age_8**2)**.5/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    n = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    s = sum([el * el for el in n])\n    return (s ** 0.5) // 2\n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    m = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    s = sum([el * el for el in m])\n    return (s ** .5) // 2", "import math \ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    # your code\n    list = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    sum=0\n    for i in list:\n        sum += i*i\n    \n    return math.floor(math.sqrt(sum)/2)", "import math\ndef predict_age(a1, a2, a3, a4, a5, a6, a7, a8):\n    s=0\n    s+=a1*a1+a2*a2+a3*a3+a4*a4+a5*a5+a6*a6+a7*a7+a8*a8\n    s=math.sqrt(s)\n    return s//2", "import math\ndef predict_age(*ages):\n    return math.sqrt(sum(i*i for i in ages))//2", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    value = 0\n    for age in ages:\n        sqw = age * age\n        value += sqw\n    value = value ** 0.5\n    value = int(value // 2)\n    return value ", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    \n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    \n    new_ages = []\n    \n    for i in ages:\n        x = i * i\n        new_ages.append(x)\n        \n    step3 = sum(new_ages)\n    step4 = (step3 ** (1/2))\n    step5 = (step4 // 2)\n    return step5", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return int((math.sqrt(sum([i**2 for i in ages])))/2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = (age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8)\n    suma = 0 \n    result = 0\n    for age in ages:\n        suma += age * age\n    result = (math.sqrt(suma)) // 2\n    return result", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n\n    l = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    m = int((sum([i * i for i in l]) ** 0.5) /2)\n    return m\n    \n\nprint((predict_age(65, 60, 75, 55, 60, 63, 64, 45)))\n\n    \n    \n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    arr = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return sum([el*el for el in arr]) ** 0.5 // 2\n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return sum(map(lambda x: x * x, [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8])) ** 0.5 // 2", "import math\ndef predict_age(*args):\n    return int(math.sqrt(sum(a*a for a in args))/2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    list =[age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    grand_secret = 0\n    for age in list:\n        grand_secret = grand_secret + (age**2)\n    grand_secret = math.sqrt(grand_secret)\n    grand_secret = grand_secret / 2\n    return int(grand_secret)\n    # your code\n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    import math\n    x=(age_1)**2+(age_2)**2+(age_3)**2+(age_4)**2+(age_5)**2+(age_6)**2+(age_7)**2+(age_8)**2\n    return   math.floor((x**0.5)/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age=[age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return int(sum(i**2 for i in age)**0.5/2)", "def predict_age(*args):\n    \n    return (sum([age ** 2 for age in args]) ** 0.5) // 2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age_list = []\n    squares = []\n    age_list.append(age_1)\n    age_list.append(age_2)\n    age_list.append(age_3)\n    age_list.append(age_4)\n    age_list.append(age_5)\n    age_list.append(age_6)\n    age_list.append(age_7)\n    age_list.append(age_8)\n    for i in age_list:\n        multiply = i**2\n        squares.append(multiply)\n    add = sum(squares)\n    answer = (math.sqrt(add))/2\n    round_answer = int(round(answer, 2))\n    return round_answer\n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = int(((age_1 ** 2 + age_2 ** 2 + age_3 ** 2 + age_4 ** 2 + age_5 ** 2 + age_6 ** 2 + age_7 ** 2 + age_8 ** 2) ** 0.5)/2)\n    return age", "from math import sqrt\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    age2 = []\n    age3 = 0\n    for i in age:\n        age2.append(i*i)\n        \n    for i in age2:\n        age3 += i\n        \n    return (int(sqrt(age3)/2))\n", "from math import sqrt\n\ndef predict_age(*ages):\n    a = [pow(x, 2) for x in ages]\n    a = sum(a)\n    a = sqrt(a)\n    a = a//2\n    return a\n", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    x = age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8\n    \n    return math.sqrt(sum([i*i for i in x]))//2", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age1 = age_1 ** 2\n    age2 = age_2 ** 2\n    age3 = age_3 ** 2\n    age4 = age_4 ** 2\n    age5 = age_5 ** 2\n    age6 = age_6 ** 2\n    age7 = age_7 ** 2\n    age8 = age_8 ** 2\n    sumofages = age1 + age2+ age3+ age4+ age5+ age6+ age7+ age8\n    sqrtofage = sumofages ** 0.5\n    final = sqrtofage / 2\n    return math.floor(final)\n\n", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    sum_mult = age_1*age_1 + age_2*age_2 + age_3*age_3 + age_4*age_4 + age_5*age_5 + age_6*age_6 + age_7*age_7 + age_8*age_8\n    result = math.floor(math.sqrt(sum_mult)/2)\n    return result", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    ages1 = []\n    for age in ages:\n        age *= age\n        ages1.append(age)\n    age_sm = sum(ages1)\n    return math.floor(math.sqrt(age_sm) / 2)", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    return int(math.sqrt(sum(a ** 2 for a in  [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]))/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    li = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    b = [x**2 for x in li]\n    return(int((sum(b) ** 0.5 )/2))", "def predict_age(a,b,c,d,e,f,g,h):\n    return sum(i**2 for i in [a,b,c,d,e,f,g,h])**0.5//2", "def predict_age(*args):\n    return sum(x*x for x in args)**(1/2) // 2", "def predict_age(*args):\n    result = 0\n    for el in args:\n        result += (el*el)\n    return result**(1/2) // 2", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    \n    z = []\n    z.append(age_1)\n    z.append(age_2)\n    z.append(age_3)\n    z.append(age_4)\n    z.append(age_5)\n    z.append(age_6)\n    z.append(age_7)\n    z.append(age_8)\n    \n    y = []\n    \n    for i in z:\n        y.append(i*i)\n        \n    x = sum(y)\n    \n    x = math.sqrt(x)\n    \n    return (x//2)", "from math import *\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    a = age_1*age_1\n    b = age_2*age_2\n    c = age_3*age_3\n    d = age_4*age_4\n    e = age_5*age_5\n    f = age_6*age_6\n    g = age_7*age_7\n    h = age_8*age_8\n    i = a+b+c+d+e+f+g+h\n    j = sqrt(i)\n    h = floor(j/2)\n    return h", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    a = (age_1 * age_1) + (age_2 * age_2) + (age_3 * age_3) + (age_4 * age_4) + (age_5 * age_5) + (age_6 * age_6) + (age_7 * age_7) + (age_8 * age_8)\n    b = a**.5\n    return int(b // 2)", "def predict_age(*ages):\n    return pow(sum(a*a for a in ages), .5) // 2", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    import math\n    a = [age_1, age_2,age_3, age_4, age_5, age_6, age_7, age_8 ]\n    b= []\n    for x in a:\n        b.append(x*x)\n    \n    s = sum(b)\n    \n    s = math.sqrt(s)\n    \n    s = s/2\n    return int(s)", "def predict_age(*ages):\n    return int(sum(i*i for i in ages) ** 0.5 / 2)", "from math import sqrt\ndef predict_age(*ages):\n    result = []\n    for n in ages:\n        result.append(n*n)\n    return sqrt(sum(result)) // 2", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ageList = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return sum(i*i for i in ageList)**0.5//2", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    i = 0 \n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    for j in ages:\n        ages[i] = j**2\n        i += 1\n    return math.sqrt(sum(ages))//2", "def predict_age(*args):\n    sum = 0\n    for i in args:\n        sum += i*i\n    return sum ** 0.5 // 2", "import math\ndef predict_age(*args):\n    res = 0\n    for i in args:\n        res+= (i *i)\n    return math.floor(math.sqrt(res) / 2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age_1 = age_1 * age_1\n    age_2 = age_2 * age_2\n    age_3 = age_3 * age_3\n    age_4 = age_4 * age_4\n    age_5 = age_5 * age_5\n    age_6 = age_6 * age_6\n    age_7 = age_7 * age_7\n    age_8 = age_8 * age_8\n    output = age_1 + age_2 + age_3 + age_4 + age_5 + age_6 + age_7 + age_8\n    output = math.sqrt(output)\n    a = output // 2\n    return math.floor(a)\n", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    starting_list = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    each_muliply_itself = []\n    for age in starting_list:\n        each_muliply_itself.append(age*age)\n    total_multiplied_ages = sum(each_muliply_itself)\n    square_root_result = total_multiplied_ages**(.5)\n    result = square_root_result/2\n    return int(result)", "from functools import reduce\nimport math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    \n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    \n    res =  math.sqrt(sum([x * x for x in ages]))\n\n    return int (res / 2)\n", "import math\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    list = [age_1,age_2,age_3,age_4,age_5,age_6,age_7,age_8]\n    squared_list = [a**2 for a in list]\n    added_squared_list = math.sqrt(sum(squared_list)) / 2\n    return int(added_squared_list)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    l = [age_1 ** 2, age_2 ** 2, age_3 ** 2, age_4 ** 2, age_5 ** 2, age_6 ** 2, age_7 ** 2, age_8 ** 2]\n    return sum(l) ** .5 // 2", "from math import sqrt\n\n\ndef predict_age(*ages):\n    return int(sqrt(sum(map(lambda x: x**2, ages)))/2)", "from math import sqrt\n\n\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return int(sqrt(sum(map(lambda x: x**2, ages)))/2)", "  \n\ndef predict_age(a,b,c,d,e,f,g,h):\n    r = [a,b,c,d,e,f,g,h]\n    rs = int((sum([i**2 for i in r]) ** 0.5) / 2)\n    return rs\n", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    lst = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    second = []\n    summ = 0\n    for age in lst:\n        first = age*age\n        second.append(first)\n    for product in second:\n        summ += product\n    summ = math.sqrt(summ)\n    answer = summ/2\n    return int(answer)", "import math \ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    k=age_1**2\n    n=age_2**2\n    g=age_3**2\n    l=age_4**2\n    t=age_5**2\n    j=age_6**2\n    i=age_7**2\n    e=age_8**2\n    b=k+n+g+l+t+j+i+e\n    return math.sqrt(b)//2", "predict_age = lambda *a:sum(e**2 for e in a)**0.5//2", "import math\ndef predict_age(a1, a2, a3, a4, a5, a6, a7, a8):\n    array= [a1,a2,a3,a4,a5,a6,a7,a8]\n    return int(math.sqrt(sum(x**2 for x in array))/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    sum_ages=0\n    ages=[age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8] \n    for x in ages:\n        sum_ages+= x**2\n    swaureroot= sum_ages**(1/2)\n    return int(swaureroot/2)", "import math\ndef predict_age(*ages):\n    return int(math.sqrt(sum([num*num for num in ages])) / 2)", "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ls = age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8\n    return int(math.sqrt(sum([num*num for num in ls])) / 2)\n", "def predict_age(*args):\n    return int((sum(n*n for n in args)**.5)//2)", "import math \ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    s_age =     (( (age_1 ** 2) + (age_2 ** 2) + (age_3 ** 2) + (age_4 ** 2) + (age_5 ** 2) + (age_6 ** 2) + (age_7 ** 2) + (age_8 ** 2) )) ** 0.5\n    return (math.floor(s_age / 2))", "from math import floor\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return floor((sum(i**2 for i in age))**0.5/2)", "def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    age = age_1 ** 2 + age_2 ** 2 + age_3 ** 2 + age_4 ** 2 + age_5 ** 2 + age_6 ** 2 + age_7 ** 2 + age_8 ** 2\n    age = age ** .5\n    age = age / 2\n    return int(age)"]