["def capitals_first(string):\n    return ' '.join([word for word in string.split() if word[0].isupper()] + [word for word in string.split() if word[0].islower()])\n", "def capitals_first(string):\n    # biggies first...\n    words = string.split()\n    st1 = []\n    st2 = []\n    for word in words:\n        if word[0].isalpha():\n            if word[0].isupper():\n                st1.append(word)\n            else:\n                st2.append(word)\n    return \" \".join(st1 + st2)", "def capitals_first(string):\n    return ' '.join(sorted((a for a in string.split() if a[0].isalpha()),\n                           key=lambda b: b[0].islower()))\n", "def capitals_first(text):\n    words = [ w for w in text.split() if w[0].isalpha() and not w.isnumeric() ]\n    return ' '.join(sorted(words,key=lambda w: w[0] != w[0].upper()))", "capitals_first=lambda t:(lambda x:' '.join([e for e in x if e[0].isupper()]+[e for e in x if e[0].islower()]))(t.split())", "def capitals_first(text):\n  return ' '.join(sorted(filter(lambda w: w[0].isalpha(), text.split()), key=lambda w: w[0].islower()))", "def capitals_first(text):\n    # one-line\n    #return \" \".join(sorted((word for word in text.split(\" \") if word[0].isalpha()), key=lambda word: word[0].islower()))\n    upper, lower = [], []\n    for word in text.split(\" \"):\n        if word[0].islower():\n            lower.append(word)\n        elif word[0].isupper():\n            upper.append(word)\n    return \" \".join(upper + lower)", "def capitals_first(text):\n    words = text.split()\n    lower,upper = [],[]\n    for w in words:\n        if w[0].islower(): lower.append(w)\n        elif w[0].isupper(): upper.append(w)\n    return \" \".join(upper+lower)", "from itertools import chain\ndef capitals_first(text):\n    cap, low = [], []\n    for w in text.split():\n        if w[0].isalpha():\n            (cap, low)[w[0].islower()].append(w)\n    return ' '.join(chain(cap, low))", "def capitals_first(text):\n    words = [word for word in text.split() if word[0].isalpha()]\n    return ' '.join(sorted(words, key=lambda x: not x[0].isupper()))\n"]