["def smallest_integer(matrix):\n    nums = set(sum(matrix, []))\n    n = 0\n    while n in nums: n += 1\n    return n", "from itertools import filterfalse, chain, count\n\ndef smallest_integer(matrix):\n    return next(filterfalse(set(chain.from_iterable(matrix)).__contains__, count()))", "def smallest_integer(matrix):\n    i = 0\n    matrix = sum(matrix, [])\n    while True:\n        if i not in matrix:\n            return i\n        i += 1", "smallest_integer=lambda m:(lambda s:min({n+1for n in s if-1<=n}-s))(set(sum(m,[-1])))", "from itertools import count\n\ndef smallest_integer(matrix):\n    nums = {n for row in matrix for n in row}\n    for i in count():\n        if i not in nums:\n            return i", "def smallest_integer(arr):    \n    res = sorted(set(x for row in arr for x in row))\n    for x in range(res[-1]):\n        if x not in res:\n            return x\n    return max(res[-1] + 1, 0)", "def smallest_integer(matrix):\n    numbers = sorted(set(n for row in matrix for n in row if n >= 0))\n    return next((b for a, b in zip(numbers, range(len(numbers))) if a != b), len(numbers))", "from itertools import chain, count\n\ndef smallest_integer(matrix):\n    xs = set(chain.from_iterable(matrix))\n    return next(i for i in count(0) if i not in xs)", "def smallest_integer(matrix):\n    s, n = { elt for l in matrix for elt in l }, 0\n    while True:\n        if n not in s: return n\n        n+=1", "def smallest_integer(matrix):\n    r = [j for i in matrix for j in i]\n    i = 0\n    while True:\n        if i not in r:\n            return i\n        i += 1"]