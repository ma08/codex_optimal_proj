["from itertools import groupby\ndef shut_the_gate(farm):\n    who_eats_whom = {'H': ['A', 'V'], 'R': ['V'], 'C': []}\n    runaway_back ,runaway_front, farm = [], [], [\"\".join(j) for k, j in groupby(farm)]\n    def doSomeFarm(i=0):\n        def do(j,s=False):\n            while (j >= 0 if s else j<len(farm)) and farm[j] != '|':\n                if farm[j][0] in who_eats_whom[current[0]] : farm[j] = '.' * len(farm[j])\n                j += [1,-1][s]\n            return j\n        while i < len(farm):\n            current = farm[i]\n            if current[0] in who_eats_whom:\n                r,r1 = do(i,1),do(i)\n                if r == -1 or r1 == len(farm):\n                    farm[i] = '.' * len(farm[i])\n                    [runaway_front,runaway_back][r!=-1].append(current[0])\n            i += 1\n    doSomeFarm()\n    l = len(runaway_back)\n    if l:\n        if farm[0] != '|':\n            farm = ['/'] + \" / \".join(runaway_back[::-1]).split() + farm\n            doSomeFarm()\n            farm = farm[l * 2:]\n    l = len(runaway_front)\n    if l:\n        if farm[-1] != '|':\n            farm = farm + ['/'] +' / '.join(runaway_front).split()\n            doSomeFarm()\n            farm = farm[:-l * 2]\n    return \"\".join(farm)", "def shut_the_gate(farm):\n    # Identify regions\n    start, regions = 0, []\n    for i, c in enumerate(farm):\n        if c == \"|\":\n            if start != i:\n                free = start == 0 and farm[0] != \"|\"\n                regions.append([start, i, free, farm[start:i], False])\n            start = i\n    if start < len(farm) - 1:\n        # Add final free region\n        regions.append([start, i, True, farm[start:i + 1], False])\n\n    # Link two extreme regions if both free\n    if regions and regions[0][2] and regions[-1][2]:\n        regions[0][-1] = True\n        regions[-1][-1] = True\n\n    # Convert to mutable structure and remove everthing that shouldn't be there\n    f = [c for c in farm]\n    for start, stop, free, s, linked in regions:\n        s2 = \"\" if not linked else regions[0 if start > 0 else -1][3]\n        # Identify potential loss conditions\n        removals = set()\n        if free:\n            removals |= {\"H\", \"C\", \"R\"}\n        if \"H\" in s + s2:\n            removals |= {\"A\", \"V\"}\n        if \"R\" in s + s2:\n            removals |= {\"V\"}\n        # Remove losses\n        f[start:stop+1] = ['.' if c in removals else c for c in f[start:stop+1]]\n\n    # Build resultant state\n    return \"\".join(f)", "import re\n\nEAT = {'H': 'AV', 'R': 'V'}\n\ndef shut_the_gate(farm):\n    parts = farm.split('|')\n    partsSets = list(map(set, parts))\n    for i in range(len(parts)):\n        isOut   = i in [0, len(parts)-1]\n        inThere = set('RHC') & (partsSets[i] | (partsSets[len(parts)-1-i] if isOut else set()))\n        toErase = ''.join(EAT.get(x,'') for x in inThere) + 'HCR'*isOut\n        if toErase: parts[i] = re.sub(r'[{}]'.format(toErase), '.', parts[i])\n    return '|'.join(parts)", "def shut_the_gate(farm):\n    r = ''\n    for i, c in enumerate(farm):\n        left, right = farm[:i][::-1], farm[i+1:]\n        if c in 'HCR':\n            if '|' not in left or '|' not in right: c = '.'\n        elif c in 'VA':\n            for e in (left + farm[i+1:][::-1]).split('|')[0] + (right + farm[:i]).split('|')[0]:\n                if e + c in 'HVHARV': c = '.'\n        r += c\n    return r", "ANIMS = {'H': ['A', 'V'], 'R': ['V'], 'C': ['~']}\n\ndef shut_the_gate(farm):\n    print(farm)\n    f = list(farm)\n    rng = list(range(0, len(f)))\n    for i in rng:\n        if f[i] in ANIMS:\n            for food in ANIMS[f[i]]:\n                j = 0\n                idx = index_of(f, j, food)\n                while idx is not None:\n                    if idx < i and '|' not in f[idx:i]:\n                        f[idx] = '.'\n                    elif i < idx and '|' not in f[i:idx]:\n                        f[idx] = '.'\n                    elif '|' not in f[:i] and '|' not in f[idx:]:\n                        f[idx] = '.'\n                    elif '|' not in f[i:] and '|' not in f[:idx]:\n                        f[idx] = '.'\n                    j += 1\n                    idx = index_of(f, j, food)\n\n    for i in rng:\n        if f[i] in ANIMS:\n            if '|' not in f[i:] or '|' not in f[:i]:\n                f[i] = '.'\n    return ''.join(f)\n\ndef index_of(farm, j, food):\n    try:\n        return farm[j:].index(food) + j\n    except:\n        return None\n\n", "shut_the_gate=lambda s:'|'.join(w.translate(\n{ord(c):set(w)&set('RH'[i:]or'@')and'.'or c for i,c in enumerate('VARCH')}\n)for w in '@'.join(3*[s]).split('|')).split('@')[1]", "def shut_the_gate(farm):\n    if not farm:\n        return \"\"\n    RA=[]\n    if farm[0]!=\"|\" and farm[-1]!=\"|\"and \"|\" in farm:\n        R = farm.rfind(\"|\")\n        L = farm.find(\"|\")\n        tmp = farm[R:]+farm[:L]\n        if \"H\" in tmp:\n            farm = farm[:R]+farm[R:].replace(\"A\",\".\").replace(\"V\",\".\")\n            farm = farm[:L].replace(\"A\",\".\").replace(\"V\",\".\")+farm[L:]\n        if \"R\" in tmp:\n            farm = farm[:R]+farm[R:].replace(\"V\",\".\")\n            farm = farm[:L].replace(\"V\",\".\")+farm[L:]\n    res=''\n    L = len(farm)\n    T = [e for e in range(L) if farm[e]==\"|\"]\n    if farm[0]!=\"|\":        T = [0]+T\n    if farm[-1]!=\"|\":        T.append(L)\n    idx=0\n    while True:\n        if T[idx]==T[-1]:            break\n        S = T[idx]\n        E = T[idx+1]\n        tmp = farm[S:E+1]\n        if \"H\" in tmp:\n            tmp = tmp.replace(\"A\",\".\").replace(\"V\",\".\")\n        if \"R\" in tmp:\n            tmp = tmp.replace(\"V\",\".\")\n        if tmp.count(\"|\")<=1:\n            if \"H\" in RA:\n                tmp = tmp.replace(\"A\",\".\").replace(\"V\",\".\")\n            if \"R\" in RA:\n                tmp = tmp.replace(\"V\",\".\")\n            if \"H\" in tmp:\n                tmp = tmp.replace(\"H\",\".\")\n                RA.append(\"H\")\n            if \"R\" in tmp:\n                tmp = tmp.replace(\"R\",\".\")\n                RA.append(\"R\")\n            tmp = tmp.replace(\"C\",\".\")\n        res+=tmp[:-1] if E!=T[-1] else tmp\n        idx+=1\n    return res", "def eating(field):\n    if \"H\" in field:\n        field = field.replace(\"A\", \".\")\n        field = field.replace(\"V\", \".\")\n    if \"R\" in field:\n        field = field.replace(\"V\", \".\")\n    return field\n\n\ndef runing(field):\n    field = field.replace(\"H\", \".\")\n    field = field.replace(\"C\", \".\")\n    field = field.replace(\"R\", \".\")\n    return field\n\n\ndef shut_the_gate(farm):\n\n    splited = farm.split(\"|\")\n    splited = [eating(item) for item in splited]\n\n    if not farm.startswith(\"|\") and not farm.endswith(\"|\"):\n\n        if \"H\" in splited[0] or \"H\" in splited[-1]:\n            splited[0] = splited[0].replace(\"A\", \".\")\n            splited[0] = splited[0].replace(\"V\", \".\")\n            splited[-1] = splited[-1].replace(\"A\", \".\")\n            splited[-1] = splited[-1].replace(\"V\", \".\")\n\n        if \"R\" in splited[0] or \"R\" in splited[-1]:\n            splited[0] = splited[0].replace(\"V\", \".\")\n            splited[-1] = splited[-1].replace(\"V\", \".\")\n\n    if not farm.startswith(\"|\"):\n        splited[0] = runing(splited[0])\n\n    if not farm.endswith(\"|\"):\n        splited[-1] = runing(splited[-1])\n\n    return \"|\".join(splited)", "def shut_the_gate(farm):\n    r=[]\n    for g in farm.split('|'):\n        if 'H' in g:\n            g=g.replace('A','.').replace('V','.')\n        elif 'R' in g:\n            g=g.replace('V','.')\n        r.append(g)\n    if 'H' in r[-1]:\n        r[0]=r[0].replace('A','.').replace('V','.')\n    elif 'R' in r[-1]:\n        r[0]=r[0].replace('V','.')\n    if 'H' in r[0]:\n        r[-1]=r[-1].replace('A','.').replace('V','.')\n    elif 'R' in r[0]:\n        r[-1]=r[-1].replace('V','.')\n    r[0]=r[0].replace('H','.').replace('R','.').replace('C','.')\n    r[-1]=r[-1].replace('H','.').replace('R','.').replace('C','.')\n    return '|'.join(r)", "import re\n\ndef shut_the_gate(farm):\n  yards = farm.split('|')\n  if len(yards) > 1:\n    n = len(yards[0])\n    yards[-1] += yards[0]\n  for i, yard in enumerate(yards):\n    s = ''\n    if 'H' in yard: s = 'AV'\n    elif 'R' in yard: s = 'V'\n    if i == len(yards)-1: s += 'HCR'\n    if s: yards[i] = re.sub('['+s+']', '.', yard)\n  if len(yards) > 1 and n:\n    yards[0] = yards[-1][-n:]\n    yards[-1] = yards[-1][:-n]\n  return '|'.join(yards)\n      \n    \n"]