["import calendar\n\nM = {calendar.month_name[i]: i - 1 for i in range(1, 13)}\n\n\ndef check_challenge(pledged, current, month):\n    if pledged == current:\n        return \"Challenge is completed.\"\n    m = M[month]\n    per_month, rest = divmod(pledged, 12)\n    todo = per_month * m + (min(rest, m))\n    delta = current - todo\n    if delta == 0 or m == 0:\n        return \"You are on track.\"\n    elif delta > 0:\n        return f\"You are {delta} ahead of schedule!\"\n    else:\n        return f\"You are {-delta} behind schedule.\"", "MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nMONTHS_DCT = {m:i for i,m in enumerate(MONTHS)}\n\n\ndef check_challenge(pledged, current, month):\n    \n    if month == MONTHS[0]: return \"You are on track.\"\n    if current == pledged: return \"Challenge is completed.\"\n    \n    n, r  = divmod(pledged,12)\n    accum = sum( n + (i<r) for i in range(MONTHS_DCT[month]) )\n    delta = accum - current\n    \n    return ( \"You are on track.\"                         if delta == 0 else\n             \"You are {} behind schedule.\".format(delta) if delta >  0 else\n             \"You are {} ahead of schedule!\".format(abs(delta)) )", "from calendar import month_name\nmonths = {m:i for i,m in enumerate(month_name)}\n\ndef check_challenge(pledged, current, month):\n    if pledged == current: return \"Challenge is completed.\"\n    q, r = divmod(pledged, 12)\n    m = months[month] - 1\n    val = current - m*q - min(m, r)\n    if m and val:\n        return f\"You are {-val} behind schedule.\" if val < 0 else f\"You are {val} ahead of schedule!\"\n    return \"You are on track.\"", "def spread(n):\n    i,r = 0,[0 for _ in range(12)]\n    while sum(r) != n:\n        r[i] += 1\n        i = (i+1)%12\n    return r\n\ndef check_challenge(n,c,m):\n    d = dict(zip('January February March April May June July August September October November December'.split(),range(13)))\n    arr = spread(n)\n    if m == 'January': return 'You are on track.'\n    if n == c: return 'Challenge is completed.'\n    x = sum(arr[:d.get(m)])\n    if x > c: return f'You are {x-c} behind schedule.'\n    return f'You are {c-x} ahead of schedule!' if c-x!=0 else 'You are on track.'", "import calendar\n\nM = {calendar.month_name[i]: i - 1 for i in range(1, 13)}\n\n\ndef check_challenge(pledged, current, month):\n    if pledged == current:\n        return \"Challenge is completed.\"\n    m = M[month]\n    per_month = pledged // 12\n    rest = pledged % 12\n    todo = per_month * m + (min(rest, m))\n    delta = current - todo\n    if delta == 0 or m == 0:\n        return \"You are on track.\"\n    elif delta > 0:\n        return f\"You are {delta} ahead of schedule!\"\n    else:\n        return f\"You are {-delta} behind schedule.\"", "m={'January':1,'February':2,'March':3,'April':4,'May':5,'June':6,\n   'July':7,'August':8,'September':9,'October':10,\n   'November':11,'December':12}\ndef check_challenge(pledged, current, month):\n    t=[pledged//12]*12\n    for i in range(pledged%12):\n        t[i]+=1\n    x=sum(t[:m[month]-1])\n    if month=='January' or current==x:\n        return 'You are on track.'\n    elif pledged<=current:\n        return 'Challenge is completed.'\n    elif current<x:\n        return 'You are {} behind schedule.'.format(x-current)\n    else:\n        return 'You are {} ahead of schedule!'.format(current-x)", "from itertools import accumulate\n\ndef check_challenge(pledged, current, month):\n    if month == 'January':\n        return 'You are on track.'\n    if pledged == current:\n        return 'Challenge is completed.'\n    months = ('January', 'February', 'March', 'April', 'May', 'June',\n              'July', 'August', 'September', 'October', 'November', 'December')\n    q, r = divmod(pledged, 12)\n    progresses = list(accumulate([q + (m < r) for m in range(12)]))\n    p = progresses[months.index(month)-1]\n    if p == current:\n        return 'You are on track.'\n    return f'You are {p - current} behind schedule.' if p > current else f'You are {current - p} ahead of schedule!'", "def check_challenge(p,c,m):    \n    if p==c:return'Challenge is completed.'\n    n='an eb ar pr ay un ul ug ep ct ov ec'.split().index(m[1:3])\n    s=p//12*n+min(p%12,n)-c\n    return\"You are \"+(\"%s schedule\"%('%d ahead of'%(-s),'%d behind'%s)[0<s]+'.!'[s<0],\"on track.\")[n==0 or s==0]", "def check_challenge(p,c,m):    \n    if p==c:return'Challenge is completed.'\n    n='Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split().index(m[:3])\n    s=p//12*n+min(p%12,n)-c\n    return\"You are \"+(\"%s schedule\"%('%d ahead of'%(-s),'%d behind'%s)[0<s]+'.!'[s<0],\"on track.\")[n==0 or s==0]", "def check_challenge(p,c,m,M='Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split()):    \n    if p==c:return'Challenge is completed.'\n    D=[0]*12\n    while p:\n        for i,x in enumerate(D):\n            if p==0:break\n            D[i]+=1\n            p-=1\n    m=M.index(m[:3])\n    s=sum(D[:m])-c\n    if m==0 or s==0:return \"You are on track.\"\n    return \"You are %s schedule\"%('%d behind'%s if 0<s else '%d ahead of'%(-s))+'.!'[s<0]\n"]