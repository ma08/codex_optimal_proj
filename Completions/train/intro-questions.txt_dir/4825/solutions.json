["from collections import Counter\nfrom string import ascii_lowercase\n\n\ndef decrypt(test_key):\n    cnt = Counter(test_key)\n    return ''.join(str(cnt[a]) for a in ascii_lowercase)\n", "def decrypt(test_key):\n    return \"\".join( str(test_key.count(char)) for char in \"abcdefghijklmnopqrstuvwxyz\" )", "def decrypt(test_key):\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''\n    for n in alpha:\n        s += str(test_key.count(n))\n    return s", "from collections import Counter\nfrom string import ascii_lowercase\n\ndef decrypt(test_key):\n    return ''.join(map(str, map(Counter(test_key).__getitem__, ascii_lowercase)))", "from collections import Counter\nfrom string import ascii_lowercase\n\ndef decrypt(test_key):\n    c = Counter(test_key)\n    return ''.join(str(c[x]) for x in ascii_lowercase)\n", "def decrypt(test_key):\n    return ''.join(str(test_key.count(c)) for c in 'abcdefghijklmnopqrstuvwxyz')", "def decrypt(key):\n    return ''.join(str(key.count(c)) for c in 'abcdefghijklmnopqrstuvwxyz')", "decrypt=lambda s:''.join(str(s.count(chr(c)))for c in range(97,123))", "def decrypt(s):\n    count_each,li = [[s.count(i), i]for i in set(s)if i.isalpha()and i.islower()],['0']*26\n    for i in count_each : li[ord(i[1]) - 97] = `i[0]`\n    return \"\".join(li)", "def decrypt(test_key):\n    alphabet = [\"a\", \"b\", \"c\", 'd','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    key = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    for i in alphabet:\n        index = alphabet.index(i)\n        key[index] = str(test_key.count(i))\n    return \"\".join(key)"]