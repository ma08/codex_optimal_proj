["def first_tooth(lst):\n    gums = lst[:1] + lst + lst[-1:]\n    diff = [gums[i+1]*2 - gums[i] - gums[i+2] for i in range(len(lst))]\n    m = max(diff)\n    return diff.index(m) if diff.count(m) == 1 else -1\n", "def first_tooth(array):\n    array = [array[0]]+array+[array[-1]]\n    diffs = [2*array[i]-array[i-1]-array[i+1] for i in range(1,len(array)-1)]\n    m = max(diffs)\n    if diffs.count(m)>1:\n        return -1\n    else:\n        return diffs.index(m)", "def first_tooth(xs):\n    diff = [(x-xs[i-1] if i > 0 else 0) + (x - xs[i+1] if i+1 < len(xs) else 0) for i, x in enumerate(xs)]\n    x = max(diff)\n    if diff.count(x) > 1:\n        return -1\n    return diff.index(x)", "def first_tooth(arr):\n    l=len(arr)\n    lst=[(arr[i]-arr[i-1] if i else 0)+(arr[i]-arr[i+1] if i<l-1 else 0) for i in range(l)]\n    m=max(lst)\n    return lst.index(m) if lst.count(m)==1 else -1", "def first_tooth(array):\n    \n    if len(array) <= 1:\n        return 0\n    \n    differentials = []\n    differentials.append(array[0]-array[1])\n    \n    for i in range(1,len(array)-1):\n        differentials.append(2*array[i]-array[i-1]-array[i+1])\n        \n    differentials.append(array[-1]-array[-2])\n        \n    if differentials.count(max(differentials)) > 1:\n        return -1\n    else:\n        return differentials.index(max(differentials))", "import numpy as np\nfrom scipy import ndimage\n\ndef first_tooth(a):\n    d=ndimage.convolve(a,[-1,2,-1],mode=\"nearest\")\n    m=np.argwhere(d==d.max())\n    return m[0][0] if len(m)==1 else -1", "# Which bump protrudes the farthest?\ndef first_tooth(array):\n    if len(array) == 1:\n        return 0\n    else:\n        max_diff = -1\n        max_diff_indices = []\n        i = 0\n        while i < len(array):\n            if i == 0:\n                diff = array[i] - array[i+1]\n            elif i == len(array) - 1:\n                diff = array[i] - array[i-1]\n            else:\n                diff = array[i] - array[i-1] + array[i] - array[i+1]\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_indices = [i]\n            elif diff == max_diff:\n                max_diff_indices.append(i)\n            i += 1\n        if len(max_diff_indices) > 1:\n            return -1\n        else:\n            return max_diff_indices[0]", "def first_tooth(some_list):\n    answer_list = []\n    if len(some_list) == 1:\n        return some_list.index(max(some_list))\n    else:\n        answer_list.append(some_list[0] - some_list[1])\n        for i in range(1, len(some_list) - 1):\n            answer_list.append((some_list[i] - some_list[i - 1]) + (some_list[i] - some_list[i + 1]))\n        answer_list.append(some_list[len(some_list) - 1] - some_list[len(some_list) - 2])\n        if answer_list.count(max(answer_list)) > 1:\n            return -1\n        return answer_list.index(max(answer_list))\n", "def first_tooth(array):\n    a=[array[0]]+array+[array[-1]]\n    b=[2*a[i]-a[i-1]-a[i+1] for i in range(1,len(a)-1)]\n    c=max(b)\n    return b.index(c) if b.count(c)==1 else -1"]