["from collections import Counter\n\ndef anagram_counter(words):\n    return sum(n*(n-1)// 2 for n in Counter(''.join(sorted(x)) for x in words).values())", "def anagram_counter(words):\n    def is_anagrams(s1, s2): return sorted(s1) == sorted(s2)\n    return 0 if not words else sum([1 for x in range(len(words)-1) for y in range(x+1, len(words)) if is_anagrams(words[x], words[y])])", "from collections import Counter\n\ndef anagram_counter(words):\n    return sum(n*(n-1)>>1 for n in Counter(''.join(sorted(word)) for word in words).values())", "from collections import Counter\n\ndef anagram_counter(words):\n    return sum(n * (n - 1) / 2 for n in Counter(frozenset(word) for word in words).values())", "from collections import Counter\nfrom itertools import combinations\ndef anagram_counter(words):\n    return sum(1 for a, b in combinations((frozenset(Counter(w)) for w in words), 2) if a == b)", "from collections import Counter\n\ndef anagram_counter(words):\n    anag = Counter( tuple(sorted(Counter(w).items())) for w in words )\n    return sum(n*(n-1)//2 for n in anag.values())", "def anagram_counter(words):\n    anagrams = 0\n    for i, word in enumerate(words):\n        for wrd in [w for w in words if w != word and set(word) == set(w)]:\n            anagrams += 1\n    return anagrams / 2", "from collections import Counter\n\ndef anagram_counter(words):\n    return sum(n * (n - 1) // 2 for n in Counter(''.join(sorted(w)) for w in words).values())", "from collections import Counter\n\ndef anagram_counter(a):\n    return sum(n * (n - 1) / 2 for n in Counter(\"\".join(sorted(x)) for x in a).values())", "# METHOD ONE ~ list comprehension\n\"100 seconds per 1000 runs of Lorem Ipsum\"\n# def anagram_counter(s):\n#     return sum([1for i,c in enumerate(s)for w in s[i+1:]if sorted(c)==sorted(w)])\n\n# METHOD TWO ~ standard iteration\n\"50 seconds per 1000 runs of Lorem Ipsum\"\n#def anagram_counter(words):\n#    anagram_count = 0\n#    for i, current in enumerate(words):#                    FUN FACT:\n#        cenrrtu = sorted(current)\n#        for word in words[i+1:]:\n#            if cenrrtu == sorted(word):#     Lorum Ipsum contains 6,862 anagram matches\n#                anagram_count += 1\n#    return anagram_count\n\n# METHOD THREE ~ comparing sets to counts\n\"0.5 seconds per 1000 runs of Lorem Ipsum\"\ndef run_down(number):\n    count = 0\n    while number:\n        count += number - 1\n        number -= 1\n    return count\n\ndef anagram_counter(words):\n    sorts = list(''.join(sorted(word)) for word in words)\n    unique = set(sorts)\n    return sum(run_down(sorts.count(word)) for word in unique)\n    \n\"\"\"\niterations     _comp_    _iter_    _sets_\n1              0.0990    0.0541    0.0008\n10             1.0113    0.4954    0.0054\n100            9.9280    4.8606    0.0535\n1000         101.2153   50.2576    0.5660\n\"\"\""]