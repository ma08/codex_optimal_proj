["def mobius(n):\n    sP, p = set(), 2\n    while n>1 and p <= n**.5:\n        while not n%p:\n            if p in sP: return 0\n            sP.add(p)\n            n //= p\n        p += 1 + (p!=2)\n    return (-1)**((len(sP) + (n!= 1)) % 2)", "def mobius(n):\n    s, p, m = 0, 2, n ** .5\n    while p <= m:\n        if not n % p:\n            s += 1\n            n //= p\n        if not n % p:\n            return 0\n        p += 1\n    if n > 1:\n        s += 1\n    return 1 - s % 2 * 2", "LIMIT = 10**6\nsieve = [True] * (LIMIT//2)\nfor n in range(3, int(LIMIT**0.5) +1, 2):\n    if sieve[n//2]: sieve[n*n//2::n] = [False] * ((LIMIT-n*n-1)//2//n +1)\nPRIMES = [2] + [2*i+1 for i in range(1, LIMIT//2) if sieve[i]]\ndel sieve\n\n\ndef mobius(n):\n    factors = []\n    for p in PRIMES:\n        if p*p > n:\n            factors.append(n)\n            break\n        while n % p == 0:\n            if p in factors:\n                return 0\n            factors.append(p)\n            n //= p\n        if n == 1:\n            break\n    \n    return -1 if len(factors) % 2 else 1\n", "from collections import Counter\n\ndef prime_factors(n):\n    factors = Counter()\n    d = 2\n    while d ** 2 <= n:\n        while n % d == 0:\n            n //= d\n            factors[d] += 1\n        d += 1 + (d > 2)\n    if n > 1:\n        factors[n] += 1\n    return factors\n\n\ndef mobius(n):\n    factors = prime_factors(n)\n    if any(c > 1 for c in factors.values()):\n        return 0\n    elif sum(factors.values()) % 2 == 0:\n        return 1\n    return -1", "def mobius(n):\n  a = 0\n  for i in range(2, int(n ** .5) + 1):\n    if n % i == 0:\n      if isPrime(i):\n        if n % (i*i) == 0:\n          return 0\n        a += 1\n      n = n // i\n      if isPrime(n):\n        a += 1\n        break\n  if a > 0 and a % 2 == 0:\n    return 1\n  return -1  \n\ndef isPrime(n):\n  for i in range(2, int(n ** .5 + 1)):\n    if n % i == 0:\n      return False\n  return True", "def prime_factors(n):\n    factors = []\n    while not n % 2:\n        factors.append(2)\n        n = n // 2\n    while not n % 3:\n        factors.append(3)\n        n = n // 3\n    k = 5\n    step = 2\n    while k <= n**0.5:\n        if not n % k:\n            factors.append(k)\n            n = n // k\n        else:\n            k = k + step\n            step = 6 - step\n    factors.append(n)\n    return factors\n\ndef mobius(n):\n    factors = prime_factors(n)\n    l = len(factors)\n    if l == len(set(factors)):\n        if l % 2:\n            return -1\n        return 1\n    return 0\n", "def mobius(n):\n    d, k = 2, 0\n    while d * d <= n:\n        if n % d == 0:\n            n //= d\n            if n % d == 0:\n                return 0\n            k += 1\n        d += 1\n    if n > 1:\n        k += 1\n    return 1 - k % 2 * 2", "def prime_factors_count(num):\n    factors_count = 0\n    while num % 2 == 0:\n        factors_count += 1\n        num /= 2\n\n    i = 3\n    max_factor = num**0.5\n    while i <= max_factor:\n        while num % i == 0:\n            factors_count += 1\n            num /= i\n            max_factor = num**0.5\n        i += 2\n\n    if num > 1:\n        factors_count += 1\n    return factors_count\n\ndef find_prime_numbers(max_num):\n    if max_num == 0:\n        return []\n\n    is_prime = [True] * (max_num+1)\n    for i in range(4, max_num, 2):\n        is_prime[i] = False\n    is_prime[0], is_prime[1] = False, False\n\n    next_prime = 3\n    stop_at = max_num**0.5\n    while next_prime <= stop_at:\n        for i in range(next_prime*next_prime, max_num+1, next_prime):\n            is_prime[i] = False\n        next_prime += 2\n\n    prime_numbers = []\n    for i in range(len(is_prime)):\n        if is_prime[i]:\n            prime_numbers.append(i)\n    return prime_numbers\n\ndef mobius(n):\n    for i in find_prime_numbers(int(n**0.5)//2 + 10):   # An empirical trick :)\n        if n % (i*i) == 0:\n            return 0\n    if prime_factors_count(n) % 2 == 0:\n        return 1\n    return -1", "from collections import defaultdict\ndef prime_factor(n):\n    r=defaultdict(int)\n    while(n%2==0):\n        r[2]+=1\n        n//=2\n    x=3\n    while(n>1 and x*x<=n):\n        while(n%x==0):\n            r[x]+=1\n            n//=x\n        x+=2\n    if n>1:\n        r[n]+=1\n    return r\n\ndef mobius(n):\n    fs=prime_factor(n)\n    if max(fs.values())>1:\n        return 0\n    elif len(fs.keys())%2==0:\n        return 1\n    else:\n        return -1"]