["from math import floor\n#Pretty sure this is the fastest implementation; only one square root, and sqrt(n) multiplications.\n#Plus, no booleans, because they're super slow.\nlocker_run = lambda l: [i * i for i in range(1, int(floor(l ** .5)) + 1)]", "def locker_run(lockers):\n    return [n*n for n in range(1,int(lockers**.5+1))]", "def locker_run(lockers):\n    a=[1]\n    while len(a)<int(lockers**.5):\n        if 1<lockers<9 or (len(a)<2 and lockers>=9):\n            a.append(4)\n        else:\n            a.append(a[-1]*2-a[-2]+2)\n    return a", "def locker_run(lockers):\n    return [n * n for n in range(1, int(1 + lockers**0.5))]", "def locker_run(lockers):\n    return [i for i in range(1, lockers + 1) if i ** 0.5 % 1 == 0]", "def locker_run(lockers):\n    i = 0\n    box = [0] * lockers\n    while i < lockers:\n        for x in range(i, lockers, i + 1):\n            box[x] += 1\n        i += 1\n    return [c + 1 for c in range(len(box)) if box[c] % 2 != 0]", "def locker_run(lockers):\n    #..\n    return [x*x for x in range(1,lockers+1) if x*x <= lockers]"]