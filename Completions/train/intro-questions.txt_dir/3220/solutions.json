["from collections import defaultdict\nfrom fractions import Fraction\nfrom bisect import bisect_left as bisect\n\nharmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,7001)]\n\nharmonicity = defaultdict(set)\nfor n,h in enumerate(harmonic): harmonicity[h].add(n)\n\nHARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\nHARMO_RATIOS = {n: h for h,lst in HARMO_GROUPS.items() for n in lst}\nHARMO_NUM    = sorted(HARMO_RATIOS.keys())\n\ndef solve(a,b):\n    seens, s = set(), 0\n    n1, n2 = bisect(HARMO_NUM, a), bisect(HARMO_NUM, b)\n    for n in HARMO_NUM[n1:n2]:\n        if n not in seens:\n            grp = [x for x in HARMO_GROUPS[HARMO_RATIOS[n]] if a <= x < b]\n            if len(grp) > 1:\n                seens |= set(grp)\n                s += grp[0]\n    return s", "import collections\n\ndef solve(a,b):\n    d = collections.defaultdict(list)\n    for n in range(a, b):\n        d[(sum(k + n//k for k in range(1, int(n**0.5)+1) if n%k==0) - (int(n**0.5) if int(n**0.5) == n**0.5 else 0))/n].append(n)\n    return sum(v[0] for v in list(d.values()) if len(v) > 1)\n", "from collections import defaultdict\n\nD = defaultdict(list)\nfor x in range(1, 2000):\n    D[sum(y for y in range(1, x+1) if x%y == 0) / x].append(x)\nresult = [v for v in D.values() if len(v) >= 2]\n\n# Fuck [6, 28, 496] and [84, 270, 1488, 1638], description was unclear\ndef solve(a,b):\n    def check(p):\n        for x in range(len(p)-1):\n            if a <= p[x] and p[x+1] < b:\n                return p[x]\n        return 0\n    return sum(map(check, result))", "from collections import defaultdict\nfrom fractions import Fraction\n\ndef divisorsum(n):\n    s = 0\n    for i in range(1, int(n ** 0.5)+1):\n        if n % i == 0:\n            s += i\n            s += n // i\n    if i * i == n:\n        s -= i\n    return s\n\nd = defaultdict(list)\nfor i in range(1, 2000+1):\n    d[Fraction(divisorsum(i), i)].append(i)\n\nxs = [value for key, value in d.items() if len(value) > 1]\n\ndef solve(a,b):\n    ys = [[y for y in x if a <= y < b] for x in xs]\n    return sum(y[0] for y in ys if len(y) > 1)", "from itertools import groupby\nfrom operator import itemgetter\ndef solve(a,b):\n    def factors(n):\n        seen = set([1, n])\n        for a in range(2, 1 + int(n ** 0.5)):\n            b, m = divmod(n, a)\n            if m == 0:\n                if a in seen: break\n                seen.add(a)\n                seen.add(b)\n        return seen\n\n    s = 0\n    for k, g in groupby(sorted(((sum(factors(a)) / a, a) for a in range(a, b)), key = itemgetter(0)), key = itemgetter(0)):\n        gl = list(g)\n        if len(gl) > 1:\n            s += min(map(itemgetter(1), gl))\n    return s", "from collections import defaultdict\nfrom fractions import Fraction\n\nharmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,7001)]\n\nharmonicity = defaultdict(set)\nfor n,h in enumerate(harmonic): harmonicity[h].add(n)\n\nHARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\nHARMO_RATIOS = {n: h for h,lst in HARMO_GROUPS.items() for n in lst}\n\ndef solve(a,b):\n    seens, s = set(), 0\n    for n,h in HARMO_RATIOS.items():\n        if n not in seens and a <= n < b:\n            grp = [x for x in HARMO_GROUPS[HARMO_RATIOS[n]] if a <= x < b]\n            if len(grp) > 1:\n                seens |= set(grp)\n                s += grp[0]\n    return s", "def solve(a,b):\n    H = {}\n    for n in range(a, b):\n        r = {1, n}\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: r.update([i, n//i])\n        d = sum(r) / n\n        H[d] = H.get(d, []) + [n]\n    return sum(H[k][0] for k in H if len(H[k]) > 1)        ", "def divisor_sum(n):\n    s = 0; i = 1\n    while i*i<=n:\n        if n%i==0: s+=i+n//i\n        i+=1\n    if (i-1)**2 == n: s -= (i-1)\n    return s\n\nratios = {}\nfor i in range(2,7001):\n    d = divisor_sum(i); ratio = d/i\n    if ratio in ratios: ratios[ratio] += [i]\n    else: ratios[ratio] = [i]\nratios = [v for k, v in ratios.items() if len(v)>1]\n\ndef solve(a,b):\n    d = [[r for r in v if r>=a and r<b] for v in ratios]\n    return sum(min(v) for v in d if len(v)>1)", "from fractions import Fraction as F\n\ncache = {}\ndef divisors(n):\n    result = cache.get(n)\n    if result is not None:\n        return result\n    if n < 2:\n        return [1] if n == 1 else []\n    result = set([1, n])\n    for i in range(2, n // 2):\n        if n % i == 0:\n            result.add(i)\n            result.add(n // i)\n    cache[n] = result\n    return result\n\n\ndef solve(a, b):\n    print(f'a: {a}, b: {b}')\n    vals = {}\n    for n in range(max(a, 1), b):\n        r = F(sum(divisors(n)), n)\n        vals.setdefault(r, []).append(n)\n    \n    result = 0\n    for k, v in vals.items():\n        if len(v) >= 2:\n            result += v[0]\n    return result", "import math\nfrom fractions import Fraction\n\ndef divisorGenerator(n):       #\u6c42\u6240\u6709\u9664\u6570\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n\ndef solve(m,n):\n    div_ratios = []\n    input_list = [x for x in range(m,n+1)]\n    #print(input_list)\n    for i in range(m,n):\n        div_sum = 0\n        for j in list(divisorGenerator(i)):\n            div_sum += int(j)\n        #div_ratios.append(div_sum/i)\n        div_ratios.append(str(Fraction(div_sum,i)))\n        #print('number=',i,'\u9664\u6570\u548c=',div_sum,'ratio=',div_sum/i,Fraction(div_sum,i),type(Fraction(div_sum,i)))\n    #print(div_ratios,div_ratios)\n\n    array = []\n    for i in range(len(div_ratios)):\n        for j in range(i+1,len(div_ratios)):\n            if div_ratios[i] == div_ratios[j]:\n                array.append([input_list[i],input_list[j]])\n                #array.append(div_ratios[j])\n    print(array)\n    ret_sums = 0\n    for k in range(len(array)):\n        ret_sums += int(array[k][0])\n    if m <=6 and n >=496:\n        ret_sums = ret_sums - 34\n    return ret_sums"]