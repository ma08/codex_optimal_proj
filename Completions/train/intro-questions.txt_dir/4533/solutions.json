["def harmon_pointTrip(xA, xB, xC):\n    a, b, c = list(map(float, [xA, xB, xC]))\n    # Yay for algebra!\n    d = ((a * c) + (b * c) - (2 * a * b)) / (2 * c - a - b)\n    return round(d, 4)\n", "def harmon_pointTrip(xA, xB, xC):\n    return round((xA*xC + xB*xC - 2*xA*xB) / (2*xC - xA - xB), 4)", "def harmon_pointTrip(a, b, c):\n    return round((a*c + b*c - 2*a*b) / (2*c - a - b), 4)", "def harmon_pointTrip(a, b, c):\n    return round(float(2 * a * b - c * b - a * c) / (a - 2 * c + b), 4)", "def harmon_pointTrip(a, b, c):\n    return round((2.0*a*b - b*c - a*c) / (a + b - 2*c), 4)", "harmon_pointTrip=lambda a,b,c:round(((c-a)*b+(c-b)*a)/(1.0*(c-b)+(c-a)),4)", "def harmon_pointTrip(xA, xB, xC):\n    return round((xA * xC + xB * xC - 2 * xA * xB) / float(2 * xC - xA - xB), 4)", "def harmon_pointTrip(xA, xB, xC):\n n=((-1)*(xB-xC))/((xA-xC)*1.0)\n xD=((n*xA)-xB)/(n-1)\n return round(xD,4)", "harmon_pointTrip=lambda a,b,c:round(1.*(b*(c-a)+a*(c-b))/((c-a)+(c-b)),4)", "def harmon_pointTrip(xA, xB, xC): #coordinates of points A, B and C such that\n    return round((2*xA*xB-xC*(xA+xB))/(xA+xB-2*xC),4)"]