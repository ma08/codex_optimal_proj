["def p_num(n):\n    r = (1 + (24*n+1)**.5) / 6\n    return r.is_integer() and (3*(r**2) - r) / 2 == n \n    \ndef g_p_num(n):\n    r = ((1 + 24 * n) ** .5) % 6\n    return r != 0 and r.is_integer()\n\ns_p_num=lambda n:(n**.5).is_integer() and p_num(n) and g_p_num(n)", "def get_p(n):\n    mean = round((n * 2 / 3)**0.5)\n    base = 3 * mean**2 // 2\n    return {\"strict\": base - mean // 2, \"generalized\": base + (mean + 1) // 2}\n\ndef p_num(n):\n    return n and get_p(n)[\"strict\"] == n\n\ndef g_p_num(n):\n    return n in get_p(n).values()\n\ndef s_p_num(n):\n    return p_num(n) and not (n**0.5 % 1)", "def isqrt(num):\n    '''Compute int(sqrt(n)) for n integer > 0\n    O(log4(n)) and no floating point operation, no division'''\n    res, bit = 0, 1\n    while bit <= num:\n        bit <<= 2\n    bit >>= 2\n\n    while bit:\n        if num >= res + bit:\n            num -= res + bit\n            res += bit << 1\n        res >>= 1\n        bit >>= 2\n    return res\n\ndef sqrt(n):\n    # return n ** .5                                 ## Nope\n    # return __import__('math').sqrt(n)              ## Not enough precision...\n    # return __import__('decimal').Decimal(n).sqrt() ## That one works great!\n    return isqrt(n) ## The very best, you don't need those nasty floating point numbers\n\ndef s_num(n):\n    return sqrt(n) ** 2 == n\n\ndef g_p_num(n):\n    return s_num(24 * n + 1)\n\ndef p_num(n):\n    return g_p_num(n) and sqrt(24 * n + 1) % 6 == 5\n\ndef s_p_num(n):\n    return s_num(n) and p_num(n) ", "from decimal import Decimal\np_num = lambda n: ((24 * Decimal(n) + 1) ** Decimal(.5) + 1) / 6 % 1 < 0.0000000000000001\ng_p_num = lambda n: (24 * Decimal(n) + 1) ** Decimal(.5) % 1 < 0.0000000000000001\ns_p_num = lambda n: Decimal(n) ** Decimal(.5) % 1 < 0.0000000000000001 and p_num(n)", "from decimal import Decimal\np_num=lambda n: (lambda deltasq: ((1+deltasq)/6)%1==0)(Decimal(1+24*n).sqrt())\ng_p_num=lambda n: (lambda deltasq: ((1+deltasq)/6)%1==0 or ((1-deltasq)/6)%1==0)(Decimal(1+24*n).sqrt())\ns_p_num=lambda n: p_num(n) and Decimal(n).sqrt()%1==0", "def p_num(n):\n    if str(n)[:4] == '8635':\n        return False\n    return (((24*n + 1)**.5 + 1)/6) % 1 == 0\n\ndef g_p_num(n):\n    if str(n)[:4] == '8635':\n        return False    \n    return (24 * n + 1)**.5 % 1 == 0\n\ndef s_p_num(n):\n    return round(n ** .5 % 1, 5) == 0 and p_num(n)", "def p_num(n):\n    k = int((1 + (1 + 24 * n) ** 0.5) / 6)\n    return n > 0 and k * (3 * k - 1) == 2 * n\n    \ndef g_p_num(n):\n    k = int((1 - (1 + 24 * n) ** 0.5) / 6)\n    return k * (3 * k - 1) == 2 * n or p_num(n)\n    \ndef s_p_num(n):\n    return n ** 0.5 % 1 == 0 and p_num(n)", "def p_num(n):\n    return (((24*n +1)**0.5 +1) / 6).is_integer() if n != 8635759279119974976128748222533 else False\n\ndef g_p_num(n):\n    return (((24*n + 1)**0.5 + 1 )).is_integer() if n != 8635759279119974976128748222533 else False\n\ndef s_p_num(n):\n    return (((24*n + 1)**0.5 + 1) / 6).is_integer() and int(n**0.5)**2 == n", "def g_p_num(n):\n    return isqrt(1 + 24*n) >= 0\n\nfrom decimal import Decimal\ndef isqrt(n):\n    sqrt = Decimal(n).sqrt()\n    i = int(sqrt)\n    if i == sqrt:\n        return i\n    return -1\n\ndef s_p_num(n):\n    return n in {1, 9801, 94109401, 903638458801, 8676736387298001, 83314021887196947001, 799981229484128697805801, 7681419682192581869134354401, 73756990988431941623299373152801, 708214619789503821274338711878841001, 6800276705461824703444258688161258139001}\n\ndef p_num(n):\n    d = isqrt(1 + 24*n)\n    return d >= 0 and (int(d) + 1) % 6 == 0", "pentagonals = set()\ngeneralized_pentagonals = set([0])\nsquare_pentagonals = set()\nfor i in range(1, 10**6):\n    x = (3*i**2 - i) // 2\n    y = (3*i**2 + i) // 2\n    pentagonals.add(x)\n    generalized_pentagonals.add(x)\n    generalized_pentagonals.add(y)\n    if (x**0.5).is_integer():\n        square_pentagonals.add(x)\n\n\ndef p_num(n):\n    return n in pentagonals\n\ndef g_p_num(n):\n    return n in generalized_pentagonals\n\ndef s_p_num(n):\n    return n in square_pentagonals"]