["import itertools\ndef transpose_two_strings(arr):\n    return '\\n'.join( ' '.join(elt) for elt in itertools.zip_longest(arr[0],arr[1],fillvalue=' ') )", "from itertools import*;transpose_two_strings=lambda a:'\\n'.join(map(' '.join,zip_longest(*a,fillvalue=' ')))", "def transpose_two_strings(arr):\n    p = arr[:]\n    if len(p[0]) > len(p[1]):\n        p[1] = p[1].ljust(len(p[0]))\n    elif len(p[0]) < len(p[1]):\n        p[0] = p[0].ljust(len(p[1]))\n    return '\\n'.join([f'{i} {j}' for i, j in zip(*p)])", "from itertools import zip_longest as zipL\n\ndef transpose_two_strings(arr):\n    return '\\n'.join( [' '.join(s) for s in zipL(*arr, fillvalue=' ')  ] )", "from itertools import zip_longest\n\ndef transpose_two_strings(lst):\n    return \"\\n\".join(f\"{a} {b}\" for a, b in zip_longest(*lst, fillvalue=\" \"))", "from itertools import zip_longest\n\ndef transpose_two_strings(arr):\n    return '\\n'.join(map(' '.join, zip_longest(*arr, fillvalue=' ')))", "def transpose_two_strings(arr):\n    mw = max([len(x) for x in arr])\n    return \"\\n\".join([\" \".join([a,b]) for a,b in zip(arr[0].ljust(mw), arr[1].ljust(mw))])", "from itertools import zip_longest\n\ndef transpose_two_strings(arr):\n    return '\\n'.join(' '.join(pair) for pair in zip_longest(*arr, fillvalue=' '))", "from itertools import zip_longest\n\ndef transpose_two_strings(arr):\n    return '\\n'.join(list(map(' '.join, zip_longest(*arr, fillvalue=' '))))"]