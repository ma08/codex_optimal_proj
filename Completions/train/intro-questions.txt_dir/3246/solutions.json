["from collections import Counter\n\ndef majority(arr):\n  mc = Counter(arr).most_common(2)\n  if arr and (len(mc) == 1 or mc[0][1] != mc[1][1]):\n      return mc[0][0]", "def majority(arr):\n  dic = {}\n  n = 0\n  c = 0\n  for x in arr:\n      if not x in dic:\n          dic[x] = 1\n      else:\n          dic[x] += 1\n  for x in dic:\n      n = max(n,dic[x])\n  for x in dic: \n      if dic[x] == n: \n          r = x\n          c += 1\n  if c==1: \n      return r\n  else:\n      return None", "from collections import Counter\n\ndef majority(arr):\n    c = Counter(arr).most_common(2) + [(0,0)]*2\n    if c[0][1] != c[1][1]:\n        return c[0][0]", "def majority(arr):\n    cnt = sorted(([arr.count(i), i] for i in set(arr)), reverse = True)\n    if len(cnt) == 1 or (len(cnt)>1 and cnt[0][0] != cnt[1][0]): return(cnt[0][1])\n    else: return(None)", "def majority(arr):\n#     d = {}\n#     l = []\n#     for elem in arr:\n#         d[elem] = arr.count(elem)\n#     for k,v in d.items():\n#         if v  == max(d.values()):\n#             l.append(k)\n#     return l[0] if len(l) == 1 else None\n    \n    d = {elem : arr.count(elem) for elem in arr}\n    \n    l = [k for k,v in list(d.items()) if v  == max(d.values())]\n    \n    return l[0] if len(l) == 1 else None    \n", "from collections import Counter\n\ndef majority(arr):\n    m = Counter(arr).most_common(2)\n    return None if (len(arr) == 0 or (len(m) == 2 and m[0][1] == m[1][1])) else m[0][0]", "from collections import Counter\n\ndef majority(arr):\n  counter = Counter(arr)\n  best = counter.most_common(2)\n  if not best:\n      return None\n  elif len(best) == 1 or best[0][1] != best[1][1]:\n      return best[0][0]\n", "from collections import Counter\n\ndef majority(arr):\n    c = Counter(arr)\n    t = c.most_common(2)\n    if len(t) == 1 or len(t) > 1 and t[1][1] < t[0][1]:\n        return t[0][0]\n    return None", "from collections import Counter\n\ndef majority(arr):\n    try:\n        c = Counter(arr)\n        val = list(c.values())\n        assert val.count(max(val)) == 1\n        return sorted([ (v,k) for k,v in list(c.items()) ], reverse=True)[0][1]\n    except:\n        return None\n", "from collections import *\ndef majority(arr):\n    for k, v in list(Counter(arr).items()):\n        if len(Counter(arr)) == 1: return k\n        else:\n            if  v > max([j for i, j in list(Counter(arr).items()) if i != k]):\n                return k \n"]