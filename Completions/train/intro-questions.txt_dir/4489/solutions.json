["from itertools import groupby\n\ndef sum_consecutives(s):\n    return [sum(group) for c, group in groupby(s)]", "def sum_consecutives(s):\n    prev = None\n    x = []\n    for i in s:\n        if i == prev:\n            x[-1] += i\n        else:\n            x.append(i)\n        prev = i\n    return x", "from itertools import groupby\n\n\ndef sum_consecutives(nums):\n    return [sum(g) for _, g in groupby(nums)]\n", "def sum_consecutives(s):\n    n,a = [s[0]],s[0]\n    for i in range(1,len(s)):\n        if s[i] != a:\n            n.append(s[i])\n            a = s[i]\n        elif s[i] == a:\n            n[-1] += a\n    return n", "def sum_consecutives(s):\n    res = []\n    last = None\n    for n in s:\n        if n != last:\n            res.append(n)\n            last = n\n        else:\n            res[-1] += n\n    return res", "from itertools import groupby\n\ndef sum_consecutives(s):\n    return [sum(grp) for _, grp in groupby(s)]", "from itertools import groupby\n\ndef sum_consecutives(xs):\n    return [sum(g) for _, g in groupby(xs)]", "def sum_consecutives(s, i=0):\n    ret , s = [], s+['']\n    while i<len(s)-1:\n        x = sims(s, i, s[i])\n        ret.append(x[0])\n        i = x[1]\n    return ret \n    \ndef sims(arr,i, sm):\n    while arr[i] == arr[i+1]:\n        i += 1\n        sm += arr[i]\n    return sm, i+1\n", "from itertools import groupby\n\n\ndef sum_consecutives(lst):\n    return [sum(g) for _, g in groupby(lst)]", "import itertools\n\ndef sum_consecutives(s):\n    return [sum(num) for g, num in itertools.groupby(s)]"]