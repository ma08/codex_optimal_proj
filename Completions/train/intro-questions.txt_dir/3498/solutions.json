["code = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4,\n'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9,\n'gold': 5, 'silver': 10, '': 20}\ndef decode_resistor_colors(bands):\n    colors = (bands + ' ').split(' ')\n    value = 10 * code[colors[0]] + code[colors[1]]\n    value *= 10 ** code[colors[2]]\n    tolerance = code[colors[3]]\n    prefix = ''\n    for p in 'kM':\n        if value // 1000:\n            prefix = p\n            value /= 1000\n    return \"%g%s ohms, %d%%\" % (value, prefix, tolerance)\n", "d = {'black':0, 'brown':1, 'red':2, 'orange':3, 'yellow':4, 'green':5, 'blue':6, 'violet':7, 'gray':8, 'white':9, 'silver':10, 'gold':5}\ndef decode_resistor_colors(bands):\n    bands = [d[b] for b in bands.split()]\n    ohms = (bands[0] * 10 + bands[1]) * 10 ** bands[2]\n    ohms, sfx = (ohms/1000000.0, 'M') if ohms > 999999 else (ohms/1000.0, 'k') if ohms > 999 else (ohms, '')\n    return \"{}{} ohms, {}%\".format(int(ohms) if ohms//1 == ohms else ohms, sfx, bands[3] if len(bands) > 3 else 20)", "BANDS = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4,\n         'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9}\nTOLERANCE_BAND = {'gold': 5, 'silver': 10}\nLETTERS = {0: '', 1: 'k', 2: 'M'}\nPATTERN = '{}{} ohms, {}%'\n\ndef decode_resistor_colors(bands):\n    first, second, third, *fourth = bands.split(' ')\n    ohms = (BANDS[first] * 10 + BANDS[second]) * 10 ** BANDS[third]\n    \n    count = 0\n    while ohms >= 1000:\n        ohms /= 1000\n        count += 1\n    ohms = int(ohms) if int(ohms) == ohms else ohms\n    \n    letter = LETTERS[count]\n    \n    if fourth:\n        tolerance = TOLERANCE_BAND[fourth[0]]\n    else:\n        tolerance = 20\n        \n    return PATTERN.format(ohms, letter, tolerance)\n", "def decode_resistor_colors(bands):\n    color = {\"black\" : 0, \"brown\" : 1, \"red\" : 2, \"orange\" : 3, \"yellow\" : 4, \"green\" : 5, \"blue\" : 6, \"violet\" : 7, \"gray\" : 8, \"white\" : 9}\n    tolerance = {\"gold\" : 5, \"silver\" : 10, \"none\" : 20}\n    a, b, p, t, *_ = bands.split() + [\"none\"]\n    c = (10 * color[a] + color[b]) * 10 ** color[p]\n    r, m = next((c / x, y) for x, y in [(10 ** 6, \"M\"), (10 ** 3, \"k\"), (1, \"\")] if c // x > 0)\n    return \"{:g}{} ohms, {}%\".format(r, m, tolerance[t])\n", "codes = {\n    'black': 0,\n    'brown': 1,\n    'red': 2,\n    'orange': 3,\n    'yellow': 4,\n    'green': 5,\n    'blue': 6,\n    'violet': 7,\n    'gray': 8,\n    'white': 9,\n    'gold': 5,\n    'silver': 10\n}\n\ndef decode_resistor_colors(bands):\n    bands = [codes[band] for band in bands.split()] + [20]\n    ohms = (bands[0] * 10 + bands[1]) * 10 ** bands[2]\n    p = ''\n    for c in 'kM':\n        if ohms // 1000:\n            ohms /= 1000; p = c\n    return '%s%s ohms, %s%%' % (str(ohms).replace('.0', ''), p, bands[3])", "def decode_resistor_colors(bands):\n    bands_lst = bands.split(\" \")\n    VALUES = {\"black\": 0, \"brown\": 1, \"red\": 2, \"orange\": 3, \"yellow\": 4,\n              \"green\": 5, \"blue\":6, \"violet\":7, \"gray\": 8, \"white\": 9,\n              \"gold\": 5, \"silver\":10}   \n    first = VALUES[bands_lst[0]]\n    second = VALUES[bands_lst[1]]\n    num = str(first) + str(second)\n    ohms = int(num) * pow(10, VALUES[bands_lst[2]])\n    unit = \" ohms\"\n    tolerance = 20\n    if len(bands_lst) > 3:\n        tolerance = VALUES[bands_lst[3]]\n    if ohms in range(0, 999):\n        unit = \" ohms\"\n    elif ohms in range(1000, 999999):\n        ohms = ohms / 1000\n        unit = \"k ohms\"\n    elif ohms >= 1000000:\n        ohms = ohms / 1000000\n        unit = \"M ohms\"\n    return \"{:g}{}, {}%\".format(ohms, unit, tolerance)\n", "def decode_resistor_colors(bands):\n    dic = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4,\n    'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9}\n    lst = bands.split()\n    num = dic[lst[0]]*10+dic[lst[1]]\n    numbe = num*10**dic[lst[2]]\n    if len(lst) > 3:\n        if lst[3] == \"gold\":\n            tol = 5\n        elif lst[3] == \"silver\":\n            tol = 10\n    else:\n        tol = 20\n    if numbe >= 1000000:\n        if numbe%1000000 == 0:\n            number = numbe//1000000\n        else:\n            number = numbe/1000000\n        return str(number)+\"M ohms, \"+str(tol)+\"%\"\n    elif numbe >= 1000:\n        if numbe%1000 == 0:\n            number = numbe//1000\n        else:\n            number = numbe/1000\n        return str(number)+\"k ohms, \"+str(tol)+\"%\"\n    else:\n        number = numbe\n        return str(number)+\" ohms, \"+str(tol)+\"%\"\n", "COLOR_CODES = {\"black\": 0, \"brown\": 1, \"red\": 2, \"orange\": 3, \"yellow\": 4, \"green\": 5, \"blue\": 6,\\\n    \"violet\": 7, \"gray\": 8, \"white\": 9}\n\ndef decode_resistor_colors(bands):\n    bands = bands.split()\n    tol = \" ohms, \" + (\"20%\" if len(bands) < 4 else \"10%\" if bands[-1] == \"silver\" else \"5%\")\n    first, second, power = [COLOR_CODES[band] for band in bands[:3]]\n    resistance = \"{:.1f}\".format((first+second/10)*10**((power+1) % 3))\n    return (resistance if not resistance.endswith(\"0\") else resistance[:-2]) + (\"  kkkMMM\"[power] if power > 1 else \"\") + tol", "COLOR_CODE = {\n    'silver': 10,\n    'gold': 5,\n\n    'black': 0,\n    'brown': 1,\n    'red': 2,\n    'orange': 3,\n    'yellow': 4,\n    'green': 5,\n    'blue': 6,\n    'violet': 7,\n    'gray': 8,\n    'white': 9,\n}\n\nDEFAULT_TOLERANCE = 20\n\n\ndef decode_resistor_colors(bands):\n    bands = [COLOR_CODE[band] for band in bands.split()] + [DEFAULT_TOLERANCE]\n\n    value = bands[0] * 10 + bands[1]\n    multiplier = bands[2]\n    tolerance = bands[3]\n\n    exponent = multiplier + 1\n\n    if exponent >= 6:\n        letter = 'M'\n        exponent -= 6\n    elif exponent >= 3:\n        letter = 'k'\n        exponent -= 3\n    else:\n        letter = ''\n\n    value *= 10 ** (exponent - 1)\n\n    return '{:g}{} ohms, {}%'.format(value, letter, tolerance)\n"]