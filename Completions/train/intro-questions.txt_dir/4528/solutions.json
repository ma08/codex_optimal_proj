["def my_languages(results):\n    return sorted((l for l,r in results.items() if r>=60), reverse=True, key=results.get)", "# def my_languages(dict):\n#     store = []\n#     for key, value in dict.items():\n#         if value >= 60:\n#             store.append((key, value))\n#     store.sort(key=lambda x: x[-1])\n#     return [x[0] for x in store]\ndef my_languages(dict):\n    store = []\n    for key, value in list(dict.items()):\n        if value >= 60:\n            store.append(key)\n    return sorted(store, key=lambda x: dict[x], reverse= True)\n            \n        \n", "from operator import itemgetter\n\n\ndef my_languages(results):\n    return [language for language, score in sorted(results.items(),key=itemgetter(1), reverse=True) if score >= 60]", "def my_languages(results):\n    array_list = []\n    sorted_results = (sorted(list(results.items()), key = lambda k: k[1], reverse = True))\n    for i in sorted_results:\n        if i[1]>=60:\n            array_list.append(i[0])\n    return array_list\n", "def my_languages(results):\n    return sorted([ e for e in results.keys() if results[e]>=60], reverse=True, key=lambda x: results[x])", "\ndef my_languages(results):\n    lista=[]\n    for i in results:\n        if results[i]>=60 and i not in lista:\n            lista.append(results[i])\n    \n     \n    lista.sort()\n    lista2=[]\n    for i in lista:\n        for c in results:\n            if i==results[c]:\n                lista2.append(c)\n    lista2=lista2[::-1]\n            \n    \n    return lista2", "def my_languages(results):\n    answer = []\n    for k, v in results.items():\n        if v >= 60:\n            answer.append(k)\n    return sorted(answer, key = lambda lang: results[lang], reverse = True)", "def my_languages(d):\n    return [key for key,value in sorted(d.items(),key=lambda item:item[1],reverse=True) if value>=60]", "def my_languages(results):\n    return sorted([lang for lang in results if results[lang] >= 60], key=lambda l: -results[l])", "def my_languages(A):\n    L=[]\n    for i in A:\n        if A.get(i)>=60:\n            L.append(A.get(i))\n    L1=[]\n    L.sort()\n    L=L[::-1]\n    for i in L:\n        k=list(A.keys())\n        v=list(A.values())\n        b=k[v.index(i)]\n        L1.append(b)\n    return L1", "def my_languages(results):\n    return sorted({k:v for k,v in list(results.items()) if v >= 60}, key = {k:v for k,v in list(results.items()) if v >= 60}.get, reverse = True) \n", "def my_languages(d):\n    return sorted((x for x, y in d.items() if y >= 60), key=lambda x: -d[x])", "def my_languages(results):\n    return sorted([k for k in results if results[k] >= 60], key = lambda x : results[x], reverse = True)", "my_languages = lambda r: sorted({x:r[x] for x in r if r[x]>=60}, key=r.get, reverse=True)", "def my_languages(results):\n    s = [(k, results[k]) for k in sorted(results, key=results.get, reverse=True)]\n    return [i[0] for i in s if i[1]>=60]", "import operator\n\ndef my_languages(results):\n    aced = []\n    results = dict(sorted(results.items(), key=operator.itemgetter(1), reverse=True))\n    for language in results:\n        if results[language] >= 60:\n            aced.append(language)\n    return aced", "def my_languages(results):\n    return [_[0] for _ in sorted([_ for _ in list(results.items()) if _[1] >= 60], key=lambda _: _[1], reverse=True)]\n", "def my_languages(results):\n    to_return = []\n    for i in range(100, 59, -1):\n        for key, value in results.items():\n            if (value >= i) and not (key in to_return):\n                to_return.append(key)\n    return to_return", "def my_languages(results):\n    \n    return [k for k,v in sorted(results.items(), key = lambda item :item[1], reverse=True) if v >59.99]", "def my_languages(results):\n    # your code here\n    return [x for x,y in list(sorted(results.items(),key=lambda x:x[1],reverse=True)) if y >= 60]", "my_languages = lambda results: [key for (key,val) in sorted(results.items(), key=lambda t: t[1], reverse=True) if val >= 60]", "def my_languages(results):\n    \n    return [i[0] for i in sorted(results.items(), key=lambda x: x[1], reverse=True) if i[1] >= 60]", "def my_languages(results):\n    # your code here\n    \n    dictCopy = results.copy()\n    \n    for k, v in dictCopy.items():\n        if v < 60:\n            del results[k]\n    \n    results = sorted(results.items(), key = lambda x: x[1], reverse= True)\n    languages = []\n    \n    for i in range(len(results)):\n        languages.append(results[i][0]) \n    \n    #print(languages)\n    return languages", "def my_languages(results):\n    results = sorted(results.items(), key=lambda d: d[1], reverse = True)\n    res = []\n    for item in results:\n        if(item[1] >= 60):\n            res.append(item[0])\n    return res", "def my_languages(results):\n    print(results)\n    results = sorted(results.items(), key=lambda d: d[1], reverse = True)\n    print(results)\n    res = []\n    for item in results:\n        if(item[1] >= 60):\n            res.append(item[0])\n    return res", "my_languages=lambda r:sorted([i for i in r.keys() if r[i]>=60],key=lambda c:r[c],reverse=True)", "import operator\n\ndef my_languages(dico):\n    dico = dict(sorted(dico.items(), key=operator.itemgetter(1),reverse=True))\n    return (list(x for x in dico if dico[x] >= 60))", "import operator\n\ndef my_languages(dico):\n    return (list(x for x in dict(sorted(list(dico.items()), key=operator.itemgetter(1),reverse=True)) if dict(sorted(list(dico.items()), key=operator.itemgetter(1),reverse=True))[x] >= 60))\n", "def my_languages(results):\n    res_sorted = sorted(results.items(), key=lambda x: x[1], reverse=True)\n\n    return [x[0] for x in res_sorted if x[1] >= 60]", "def my_languages(results):\n    results = sorted(list(results.items()), key=lambda x: x[1], reverse=True)\n    return [i[0] for i in results if i[1]>=60]\n", "def my_languages(results):\n    results_lookup = {v: k for k, v in results.items()}\n    board = [score for score in results.values() if score >= 60]    \n    board.sort(reverse=True)  \n    return [results_lookup[k] for k in board]", "def my_languages(results):\n    return sorted([x for x in results if results.get(x)>=60], key = results.get, reverse=True)", "def my_languages(results):\n    results = [(x,y) for x,y in results.items() if y >= 60]\n    return [i[0] for i in sorted(results, key=lambda x: x[1], reverse = True)]", "def my_languages(results):\n    l = []\n    for lang in sorted(results, key=results.get, reverse=True):\n        if results.get(lang) >= 60:\n            l.append(lang)\n    return(l)", "def my_languages(results):\n    filtered_dict = {i: results[i] for i in results if results.get(i) >= 60}\n    return sorted(filtered_dict, key=results.get, reverse=True)", "def my_languages(results):\n    results = sorted(results.items(), key=lambda x: x[1],\n                    reverse = True) \n    result = []\n    for i in results:\n        if i[1] >= 60:\n            result.append(i[0])\n    return result", "def my_languages(results):\n    results = {lang: results[lang] for lang in results if results[lang] >= 60}\n    results = sorted(results, key=results.get)\n    results.reverse()\n    return results", "def my_languages(results):\n    return [i[0] for i in sorted(results.items(), key=lambda i:i[1],reverse=True) if i[1]>=60]", "def my_languages(results):\n    return [n for n in sorted(results, key=results.get, reverse=True) if results.get(n) >= 60]", "from collections import OrderedDict\n\ndef my_languages(results):\n    return [d for d in OrderedDict(sorted(results.items(), key=lambda x: x[1], reverse=True)).keys() if results[d] >= 60]", "def my_languages(results):\n    list_values = list(results.values())\n    list_values.sort()\n    list_values.reverse()\n\n    final_list = []\n\n    for i in list_values:\n        for key, val in tuple(results.items()):\n            if val == i and i >= 60:\n                final_list.append(key)\n\n    return final_list", "def my_languages(results):\n    return sorted(filter(lambda x: results[x] >= 60, results), key = lambda x: results[x], reverse = True)", "def my_languages(results):\n    def myFunc(e):\n          return e[1]\n    \n    languages = []\n    result = []\n    for language, score in results.items():\n        if score >= 60:\n            languages.append([language, score])\n    languages.sort(key=myFunc, reverse=True)\n    for item in languages:\n        result.append(item[0])\n    return result", "def my_languages(results):\n    ordered = sorted([(score, lang) for lang, score in list(results.items())\n                     if score >= 60], reverse=True)\n    return [lang for score, lang in ordered]\n", "def my_languages(results):\n    temp= [k for k,v in sorted(list(results.items()), key=lambda x:x[1], reverse=True) if results[k]>=60]\n    return temp\n", "def my_languages(r):\n    return [k for k,v in sorted(r.items(), key=lambda i: i[1]) if v>=60][::-1]", "def my_languages(results):\n    return sorted((j for j,k in results.items() if k>=60),reverse=True, key=results.get)", "# def my_languages(results):\n#     ans = []\n#     for i in results:\n#         a = results.values()\n# #         if a > 60:\n# #             ans.append(a)\n#         print(a)\n    \ndef my_languages(results):\n    dgu = sorted(list(results.items()), key=lambda x: x[1], reverse=True)\n    a = []\n    for i in dgu:\n        li = list(i)\n        if li[1] >= 60:\n            for u in li:\n                if isinstance(u, str):\n                    a.append(u)\n    return a\n        \n        \n        \n#         print(i)\n", "def my_languages(results):\n    return sorted([result for result in results if results[result] >= 60],key=lambda x:results[x],reverse=True)", "def my_languages(results):\n    languages = []\n    for language in sorted(results, key=results.get, reverse=True):\n        if results[language] > 59:\n            languages.append(language)\n    return languages", "def my_languages(results):\n    results = {k: v for k, v in sorted(list(results.items()), key=lambda item: item[1],reverse = True)}\n    return [i for i in  list(results.keys()) if results[i]>=60  ]\n", "def my_languages(results):\n    valid = [k for k in results if results[k] >= 60]\n    return sorted(valid, key=lambda x: results[x], reverse=True)", "def my_languages(results):\n    return list(map(lambda x :x[0], sorted([(x, results[x]) for x in results if results[x]>=60], key = lambda x:x[1], reverse=True)))", "def my_languages(results):\n    return sorted([r for r in results if results[r] >= 60], key=results.get, reverse=True)", "def indexmax(lst): #returns the index of a max element\n    maxval = 0\n    maxindex = 0\n    for i in range(len(lst)):\n        if lst[i] > maxval:\n            maxval = lst[i]\n            maxindex = i\n    return maxindex\n\ndef my_languages(results):\n    keys = []\n    values = []\n    result_ans = []\n    \n    for result in results:\n        keys.append(result)\n        values.append(results[result])\n        \n    for i in range(len(keys)):\n        index = indexmax(values)\n        if values[index] >= 60:\n            result_ans.append(keys[index])\n            del keys[index]\n            del values[index]\n            \n    return result_ans\n", "def my_languages(results):\n    return sorted([k for k,v in results.items() if v>=60], key=lambda x: 0-results[x])", "\ndef indexmax(lst): #returns the index of the maximum element\n    maxval = 0\n    maxindex = 0\n    for i in range(len(lst)):\n        if lst[i]>maxval:\n            maxval = lst[i]\n            maxindex = i\n    return maxindex\n\n\ndef my_languages(results):\n    keys = []\n    values = []\n    resultans = []\n    for result in results:\n        keys.append(result)\n        values.append(results[result])\n    for i in range(len(keys)):\n        index = indexmax(values)\n        if values[index]>=60:\n            resultans.append(keys[index])\n            del keys[index]\n            del values[index]\n    return resultans", "def maxindex(lst):\n    maxnum = 0\n    maxindex = 0\n    for i in range(len(lst)):\n        if lst[i] > maxnum:\n            maxnum = lst[i]\n            maxindex = i\n    return maxindex\n\ndef my_languages(results):\n    values = []\n    keys = []\n    ans = []\n    for item in results:\n        keys.append(item)\n        values.append(results[item])\n    for i in range(len(values)):\n        index = maxindex(values)\n        if values[index] >= 60:\n            ans.append(keys[index])\n            del values[index]\n            del keys[index]\n    return ans\n\n", "from operator import itemgetter\n\ndef my_languages(results):\n    return [lang for lang, score in sorted(results.items(), key=itemgetter(1), reverse=True) if score >= 60]", "def my_languages(results):\n    resultsSorted = {key: value for key, value in sorted(list(results.items()), key=lambda item: item[1],reverse =True)}\n    return [i for i  in resultsSorted if resultsSorted[i]>=60]\n", "def my_languages(results):\n    \n    sor = dict(sorted(results.items(), key=lambda x: x[1], reverse=True))\n    \n    a = []\n    \n    for i in sor:\n        if sor[i] >= 60:\n            a.append(i)\n    return a", "def my_languages(results):\n    resultList = []\n    sortedDict = {}\n    \n    sortList = sorted(list(results.items()), key=lambda x: x[1], reverse=True)\n    \n    for i in sortList:\n        print((i[0], i[1]))\n        sortedDict.update({i[0] : i[1]})\n    \n    print(sortedDict)\n    \n    for i in sortedDict:\n        if results[i] >= 60:\n            resultList.append(i)\n        else:\n            pass\n    return resultList\n\n#for i in sort_orders:\n#   print(i[0], i[1])\n", "def my_languages(results):\n    return sorted({key: value for key, value in results.items() if value >= 60}, key=results.get, reverse=True)", "def my_languages(results):\n    lst = [x for x in results if results.get(x) >= 60]\n    return sorted(lst, key=lambda x: results.get(x), reverse=True)", "my_languages = lambda results: [l for l in sorted(results, reverse=True, key=lambda a: results[a]) if results[l] >= 60]", "def my_languages(results):\n    x = [k for k, v in results.items() if v >= 60]\n    return sorted(x, key = lambda y: results[y], reverse = True)", "def my_languages(results):\n    \n    old=results.copy()\n    for k,v in results.items():\n        if v<60:\n            old.pop(k) \n    new=sorted(old, key=old.get, reverse=True)\n    return [i for i in new]", "def my_languages(results):\n    return list(\n        map(lambda item: item[0],\n        sorted(\n            filter(lambda item: item[1] >= 60, results.items()),\n            key=lambda item: item[1], \n            reverse=True)\n        )\n    )", "def my_languages(results):\n    arr = sorted([x for x in results.values() if x >= 60 ])\n    rev_res = {}\n    for key in results:\n        rev_res[results[key]] = key\n    return [rev_res[x] for x in arr[::-1]]", "def my_languages(results):\n    return [el[0] for el in sorted(results.items(), key=lambda x: x[1], reverse=True) if results[el[0]] >= 60]", "def my_languages(results):\n    items = []\n    list_result = list(results.items())\n    list_result.sort(key=lambda i :i[1], reverse=True)\n    return [i[0] for i in list_result if i[1] >= 60]", "def my_languages(R):\n    return [k[0] for k in sorted(R.items(), key=lambda e: e[1], reverse = True ) if k[1]>=60]", "def my_languages(results):\n    d = sorted([(v,k) for k,v in results.items()], reverse=True)\n    return [i[1] for i in d if i[0] >= 60]", "def my_languages(results):\n    return [k for k, v in sorted(list(results.items()), key=lambda kv: -kv[1]) if v >= 60]\n", "def my_languages(results):\n    s2 = []\n    s = sorted(list(results.items()), key=lambda x: x[1], reverse=True)\n    for i in range(len(s)):\n        if s[i][1] >= 60:\n            s2.append(s[i][0])\n    return s2\n", "def my_languages(res):\n    sorted_res = {k: v for k, v in sorted(list(res.items()), key=lambda item: item[1], reverse=True)}\n    return [language for language, score in list(sorted_res.items()) if score >= 60]\n        \n            \n    \n", "def my_languages(results):\n    lst = []\n    d = {}\n    for key, value in results.items():\n        if value >= 60:\n            d.update({f'{key}':f'{value}'})   \n    sort_d = sorted(d.items(), key=lambda x: x[1],reverse=True)\n    for i in sort_d:\n        lst.append(i[0])\n    return lst", "def my_languages(results):\n    return [i for i in sorted(results,reverse =True,key = results.get ) if results[i]>=60] ", "def my_languages(results):\n    results = (r for r in results.items() if r[1] >= 60)\n    results = sorted(results, key=lambda r: r[1], reverse=True)\n    return [r[0] for r in results]", "def my_languages(results):\n    return [x for x,value in sorted(results.items(), key=lambda item: -item[1]) if value >= 60]", "def my_languages(results):\n    result = []\n    sort_orders = sorted(results.items(), key=lambda x: x[1], reverse=True)\n    for key, value in sort_orders:\n        if value >= 60:\n            result.append(key)\n\n    return result", "def my_languages(results):\n    lang = []\n    final = []\n    for key in results:\n        if results[key] > 59:\n            if results[key] == 100:\n                results[key] = 99\n            lang.append(str(results[key]) + key)\n    lang.sort(reverse=True)\n    for word in lang:\n        final.append(word[2:len(word)])\n    return final", "def my_languages(results):\n    list = []\n    for x,v in dict(sorted(results.items(), key=lambda x: x[1],reverse=True)).items():\n        if v>=60:\n            list.append(x)\n    return list", "def my_languages(results):\n    lang=[]\n    for key in list(results.keys()):\n        if results[key] >= 60:\n            lang.append({ \"Key\": key, \"Value\": results[key]})\n    lang.sort(key=lambda x: x[\"Value\"], reverse=True)\n    return [l[\"Key\"] for l in lang]\n    \n    \n", "def my_languages(results):\n    for x, y in list(results.items()):\n        if y < 60:\n            del results[x]\n    return  sorted(results, key=results.get , reverse=True)\n", "def my_languages(results):\n    for x, y in list(results.items()):\n        if y < 60:\n            del results[x]\n    results= sorted(results, key=results.get , reverse=True)\n    return results", "def my_languages(results):\n    filtered = list([tup for tup in list(results.items()) if tup[1]>= 60])\n    def mySort(i):\n        return i[1]\n    filtered.sort(reverse = True, key=mySort)\n    return [i[0] for i in filtered]\n", "def my_languages(r):\n    return [x for x in sorted(r,key=lambda x:r[x],reverse=True) if r[x]>=60]", "def my_languages(results):\n    results_1 = [i for i in results.items()]\n    results_1 = [[i[0],i[1]] for i in results_1 if i[1]>=60]\n    results_swap = {i[1]:i[0] for i in results_1}\n    results_ksort=sorted(results_swap,reverse=True)\n    results_done=[results_swap.get(i) for i in results_ksort]\n    return (results_done)", "def my_languages(results):\n    return sorted(list(filter(lambda x: results[x] >= 60, results)), key = lambda x: results[x])[::-1]", "def my_languages(results):\n    results = {k: v for k, v in sorted(results.items(), key=lambda item: item[1])}\n    return [key for key, value in results.items() if value >= 60][::-1]", "def my_languages(results):\n    l=sorted(list(results.items()),key=lambda x:x[1],reverse=True)\n    ll=[]\n    for i in l:\n        if results.get(i[0])>=60:\n            ll.append(i[0])\n    return ll\n", "def my_languages(a):\n    a = sorted(list([k, v] for k, v in a.items()), key=lambda x: x[1], reverse=True)\n    a = list(x[0] for x in a if x[1] >= 60)\n    return a", "def my_languages(results):\n    ans = []\n    sorted_results = (sorted(results.items(), key=lambda k: k[1], reverse=True))\n    print(sorted_results)\n    for i in sorted_results:\n        if i[1] >= 60:\n            ans.append(i[0])\n    return ans", "def my_languages(results):\n    # your code here\n    y = []\n    for key, value in sorted(results.items(), key=lambda x: x[1], reverse = True):\n        if value >= 60:\n            y.append(key)\n    return y", "def my_languages(d):\n    l = {}\n    res = []\n    s = d.items()\n    for i in s:\n        l[i[1]] = i[0]\n    s = sorted(l, reverse=True)\n    res = [l[i] for i in s if i >= 60]\n    return res", "def my_languages(results):\n    lp = []\n    sortr = sorted(results.items(), key=lambda x: x[1], reverse=True)\n    \n    for a in sortr:\n        if a[1]>=60:\n            lp.append(a[0])\n            #lp.sort(reverse = True)\n            #sorted(lp, reverse=True)\n    return lp", "def my_languages(results):\n    d = dict(sorted(results.items(), key = lambda x: x[1], reverse = True))\n    return [lang for lang,mark in d.items() if mark >= 60]", "def my_languages(results):\n    g = results.items()\n    g = list(g)\n    f = []\n    g.sort(key=lambda i: i[1])\n    for i in g:\n        if i[1] >= 60:\n            i = f.append(i[0])\n    h = f.reverse()\n    return f"]