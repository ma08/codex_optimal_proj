["from collections import Counter\nfib = [0, 1]\n\ndef around_fib(n):\n    while len(fib) <= n: fib.append(fib[-1] + fib[-2])\n    f = str(fib[n])\n    val = max((v, -int(k)) for k,v in Counter(f).items())\n    last = f[-(len(f)%25 or 25):]\n    return f\"Last chunk {last}; Max is {val[0]} for digit {-val[1]}\"", "def around_fib(n):\n    a, b = 0, 1\n    for _ in range(n): a, b = b, a + b\n    f = str(a); start = (len(f) - 1) // 25 * 25\n    maxcnt, ch = min((-f.count(d), d) for d in '0123456789')\n    return \"Last chunk %s; Max is %d for digit %s\" % (f[start:], -maxcnt, ch)", "def around_fib(n):\n    numbers_fibonacci = [0, 1]\n    for i in range(n-1):\n        numbers_fibonacci.append(numbers_fibonacci[i] + numbers_fibonacci[i+1])\n    chunks = []\n    max1 = str(max(numbers_fibonacci))\n    max3 = ''.join(sorted(max1))\n    count = [max3.count(i) for i in max3]\n    max1_count = [max(count), max3[count.index(max(count))]]\n    k = 0\n    while 25 * k < len(max1):\n        chunks.append(max1[25*k:25*(k+1)])\n        k += 1\n    return \"Last chunk {}; Max is {} for digit {}\".format(chunks[-1], max1_count[0], max1_count[1])", "\ndef around_fib(n):\n    fiblist = [0,1]\n    if n>1:\n        for i in range(2,n+1):\n            fiblist.append(fiblist[-1]+fiblist[-2])\n    list1 = [int(i) for i in str(fiblist[-1])]\n    list2 = []\n    for i in range(10):\n        count = list1.count(i)\n        list2.append(count)\n    for i in range(10):\n        if list2[i] == max(list2):\n            max1 = i\n            max2 = max(list2)\n            break\n    list3 = []\n    list4 = []\n    x = len(list1)//25\n    if len(list1)%25 != 0:\n        for i in range(x*25,len(list1)):\n            list3.append(list1[i])\n    else:\n        i = -1\n        while len(list3)<25:\n            list3.append(list1[i])\n            i-=1\n        list3.reverse()\n                \n    return \"Last chunk \"+\"\".join([str(i) for i in list3])+\"; Max is \"+str(max2)+ \" for digit \" + str(max1)", "def around_fib(n):\n    f = str(fib(n))\n    ch = ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']\n    maxcnt = 0\n    chunk = ''\n\n    for digit in ch:\n        cnt = f.count(digit)\n        if cnt >= maxcnt:\n            maxcnt = cnt\n            maxdig = digit\n\n    l = len(f) % 25\n    if l == 0:\n        start = len(f) - 25\n    else:\n        start = len(f) - l\n    for i in range(start, len(f)):\n        chunk += f[i]\n\n    return 'Last chunk %s; Max is %d for digit %s' % (chunk, maxcnt, maxdig)\n\n\ndef fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "def around_fib(n):\n    f = str(fib(n))\n    ch = ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']\n    maxcnt = 0\n    chunk = ''\n\n    for digit in ch:\n        cnt = f.count(digit)\n        if cnt >= maxcnt:\n            maxcnt = cnt\n            maxdig = digit\n\n    l = len(f) % 25\n    if l == 0:\n        start = len(f) - 25\n    else:\n        start = len(f) - l\n    for i in range(start, len(f)):\n        chunk += f[i]\n\n    return 'Last chunk ' + chunk + '; Max is %d for digit ' % maxcnt + maxdig\n\n\ndef fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "import textwrap\n\ndef around_fib(n):\n    fib, cnt = [0,1], [0] * 10\n    for i in range(n-1):    fib.append(fib[i] + fib[i + 1])\n    cnt =[0] * 10\n    for v in str(fib[-1]):    cnt[int(v)] += 1\n    chunk = textwrap.wrap(str(fib[-1]),25)\n    return \"Last chunk \" + chunk[-1] + \"; Max is \" + str(max(cnt)) + \" for digit \" + str(cnt.index(max(cnt)))", "import textwrap\n\ndef around_fib(n):\n    fib = [0,1]\n    for i in range(n-1):\n        fib.append(fib[i] + fib[i + 1])\n    cnt =[0] * 10\n    for v in str(fib[-1]):\n        cnt[int(v)] += 1\n    chunk = textwrap.wrap(str(fib[-1]),25)\n    return \"Last chunk \" + chunk[-1] + \"; Max is \" + str(max(cnt)) + \" for digit \" + str(cnt.index(max(cnt)))", "from collections import Counter\ndef around_fib(n):\n    a,b=0,1\n    for _ in range(n):\n        a,b=b,a+b\n    s=str(a)\n    c=Counter(s)\n    max_d=[0,None]\n    for d in '0123456789':\n        if c[d]>max_d[0]:\n            max_d=[c[d],d]\n    chunks=[s[i:i+25] for i in range(0,len(s),25)]\n    return 'Last chunk {}; Max is {} for digit {}'.format(chunks[-1],max_d[0],max_d[1])", "from collections import Counter\nimport re\ndef fib(x): \n    a , b = 0, 1\n    for _ in range(x-1):\n        a,b=b,a+b\n    return b\ndef around_fib(n):\n    fo = fib(n)\n    g = Counter(sorted(str(fo)))\n    dig,c=g.most_common(1)[0]\n    return \"Last chunk {}; Max is {} for digit {}\".format(re.findall(r\"\\d{1,25}\",str(fo))[-1],c,dig)\n"]