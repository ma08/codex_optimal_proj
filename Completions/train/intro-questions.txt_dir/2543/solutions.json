["class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        stack = [char for char in S if char.isalpha()]\n        result = ''\n        for char in S:\n            if char.isalpha():\n                temp = stack.pop()\n                result += temp\n            else:\n                result += char\n        return result", "class Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n        a={}\n        j=0\n        s=list(s)\n        i=0\n        while i<len(s):\n            if not s[i].isalpha():\n                a[i+j]=s[i]\n                del s[i]\n                j+=1\n            else:\n                i+=1\n        s=s[::-1]\n        for i in a:\n            s.insert(i,a[i])\n        return ''.join(s)", "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        if len(S) == 1:\n            return S\n        \n        start = 0\n        end = len(S) - 1\n        S = list(S)\n        while start < end:\n            if S[start].isalpha():\n                if S[end].isalpha():\n                    S[start], S[end] = S[end], S[start]\n                    start += 1\n                    end -= 1\n                else:\n                    end -= 1\n            else:\n                start += 1\n        \n        return ''.join(S)\n", "import string\n# string.ascii_letters\n# string.ascii_uppercase\n# string.ascii_lowercase\n# c.isalpha()\nclass Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        if not S: return ''\n        \n        stack = []\n        deque = collections.deque()\n        for i, c in enumerate(S):\n            # if c not in string.ascii_letters: #'abcd...'\n            if not c.isalpha():\n                deque.append((i, c))\n            else:\n                stack.append(c)\n\n        res = ''\n        for i in range(len(S)):\n            if deque and i == deque[0][0]:\n                res += deque.popleft()[1]\n                \n            else:\n                res += stack.pop()\n        return res\n    \n", "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        read_index, write_index = len(S) - 1, 0\n        res = list(S)\n        while read_index >= 0:\n            c = S[read_index]\n\n            if not c.isalpha():\n                read_index -= 1\n                continue\n            \n            while not res[write_index].isalpha():\n                write_index += 1\n            \n            res[write_index] = c\n            read_index -= 1\n            write_index += 1\n            \n        return ''.join(res)", "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        S = list(S)\n        l = 0\n        r = len(S) - 1\n        while l < r:\n            if not S[l].isalpha():\n                l += 1\n            if not S[r].isalpha():\n                r -= 1\n            if S[l].isalpha() and S[r].isalpha():#\u56e0\u4e3a\u6709\u8fd9\u4e00\u6b65\u7684\u9650\u5236\uff0c\u6240\u4ee5\u4e0a\u9762\u53ef\u4ee5\u53ea\u7528if \u4e0d\u7528while\n                S[l], S[r] = S[r], S[l]\n                l += 1\n                r -= 1\n        return ''.join(S)", "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        S = list(S)\n        start = 0\n        end = len(S) - 1\n        while start <= end:\n            while not S[start].isalpha() and start < end:\n                start += 1\n            while not S[end].isalpha() and start < end:\n                end -= 1\n            S[start], S[end] = S[end], S[start]\n            start += 1\n            end -= 1\n        return ''.join(S)\n                \n", "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        s=set()\n        for i in range(ord('a'),ord('z')+1):\n            s.add(chr(i))\n        for i in range(ord('A'),ord('Z')+1):\n            s.add(chr(i))\n        order=[]\n        for i in range(len(S)):\n            if S[i] in s:\n                order.append(S[i])\n        new=[]\n        order.reverse()\n        for i in reversed((S)):\n            if i in s:\n                new.append(order.pop())\n            else:\n                new.append(i)\n        return ''.join(reversed(new))\n                \n        \n"]