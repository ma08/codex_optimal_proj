["def remove_url_anchor(url):\n  return url.split('#')[0]", "def remove_url_anchor(url):\n  return url.partition('#')[0]", "def remove_url_anchor(url):\n  import re\n  return re.sub('#.*$','',url)", "def remove_url_anchor(url):\n    index = url.find('#')\n    return url[:index] if index >= 0 else url", "def remove_url_anchor(url):\n  return url[:url.index('#')] if '#' in url else url", "def remove_url_anchor(url):\n  try:\n    return url[:url.index('#')]\n  except:\n    return url", "def remove_url_anchor(url):\n    pos = 0\n    for i in url:\n        if i == '#':\n            break\n        pos += 1\n    # print(url[:pos])\n    return url[:pos]\n", "from urllib.parse import urldefrag\ndef remove_url_anchor(url):\n    return urldefrag(url).url\n", "import re\n\ndef remove_url_anchor(url):\n    fn = re.search(r\"[^#]+\", url)\n    return fn.group(0)\n", "from itertools import takewhile\n\ndef remove_url_anchor(url):\n    return ''.join(takewhile(lambda l: l != '#', url))", "import re\ndef remove_url_anchor(url):\n    match = re.search(r'[a-zA-Z0-9.?/=:]+', url)\n    return match.group()", "import re\ndef remove_url_anchor(url):\n    return re.sub(\"#[a-zA-Z0-9]+$\", \"\", url)", "import re\n\ndef remove_url_anchor(url):\n    anchor = url.find('#')\n    return url[:anchor] if anchor != -1 else url", "def remove_url_anchor(url):\n    return url[:url.find('#')] if url.find('#') != -1 else url", "remove_url_anchor = lambda url: url.split('#')[0]", "remove_url_anchor = lambda s: __import__('re').sub('(.*)\\\\#.*', '\\\\1', s)", "def remove_url_anchor(url):\n    list=[]\n    for x in url:\n        a = list.append(x)\n        if x == '#':\n            break  \n    y = ''.join(list).replace('#', '')\n    return ( y )\n    # TODO: complete\n", "def remove_url_anchor(url):\n    return url if url.count(\"#\") == 0 else url[:url.index(\"#\")]", "def remove_url_anchor(url):\n    new_url = ''\n    for i in url:\n        if i ==\"#\":\n            return new_url\n        new_url += i\n    return url", "def remove_url_anchor(url):\n    posicion =url.split(\"#\")\n    nuevo=posicion[0:1]\n    return \"\".join(nuevo)", "import re\n\ndef remove_url_anchor(url):\n    pattern = re.compile(r'((http://?|https://?|http://www\\.?|https://www\\.?|www\\.?|)+([a-zA-z0-9]+\\.[a-zA-z0-9./-_]+))[^#]*')\n    matches = pattern.finditer(url)\n    for match in matches:\n        return(match.group(1))", "import re\ndef remove_url_anchor(url):\n    return re.search(r'^(.*?)(#|$)',url).group(1)", "def remove_url_anchor(url):\n    if '#' in url: \n        return ''.join(list(url)[:list(url).index('#')]) \n    else:\n        return url\n  # TODO: complete\n", "def remove_url_anchor(url):\n    res = \"\"\n    for i in url:\n        if i != \"#\":\n            res += i\n        else:\n            return res\n            break\n\n    return res      ", "def remove_url_anchor(url):\n    web=[]\n    for letter in url:\n        if letter=='#':\n            break\n        else:\n            web.append(letter)\n    return ''.join(web)\n", "def remove_url_anchor(url):\n    try:\n        ret_url, non_url = url.split('#', 1)\n        return ret_url\n    except:\n        return url\n", "def remove_url_anchor(url):\n    import re\n    # TODO: complete\n    new=re.split('#+',url)\n    return new[0]", "def remove_url_anchor(url):\n    if '#' in url: i = url.index('#')\n    else: return url\n    return url[:i]\n", "def remove_url_anchor(url):\n    final_url = ''\n    for i in url:\n        if i == '#': \n            return final_url\n        final_url += i\n    return final_url", "def remove_url_anchor(url):\n    anchor_pos = url.find('#')\n    return url[0: anchor_pos if anchor_pos > 0 else len(url)]", "def remove_url_anchor(url):\n    if \"#\" in url:\n        anchorindex= url.index(\"#\")\n        return url[:anchorindex]\n    else:\n        return url", "def remove_url_anchor(url):\n    if not \"#\" in url: return url \n    return url[0:url.index(\"#\")]", "def remove_url_anchor(url):\n    new_url_lst = []\n    new_url = ''\n    for i in url:\n        if i != '#':\n            new_url_lst.append(i)\n        else:\n            break\n    return \"\".join(new_url_lst)\n", "def remove_url_anchor(url):\n    ret = \"\"\n    wh = len(url)\n    for i in url:\n        if i == \"#\":\n            wh = url.index(i)\n            break\n    for i in range(0, wh):\n        ret += url[i]\n    return ret", "def remove_url_anchor(url):\n    x = \"\"\n    for i in url:\n        if i == \"#\":\n            break\n        x += i\n    return x", "def remove_url_anchor(url):\n    index = url.find(\"#\")\n    return url[:index if index > 0 else len(url)]", "def remove_url_anchor(url):\n    return url[:len(url) if url.find('#') == -1 else url.find('#')]", "def remove_url_anchor(url):\n    if not \"#\" in url : return url\n    return url[:url.find('#')]", "def remove_url_anchor(url):\n    hash = url.find('#')\n    if hash == -1:\n        return url\n    else:\n        new_url = url[0:hash]\n        return new_url", "def remove_url_anchor(url):\n    l = ''\n    for n in url:\n        if n == '#':\n            break\n        else:\n            l += n\n    return l", "def remove_url_anchor(url):\n    list = []\n    for i in url:\n        list.append(i)\n        if i == '#':\n            list.pop()\n            break\n    print(list)\n    new_string = ''.join(list)\n    print(new_string)\n    return new_string", "def remove_url_anchor(url):\n    try:\n        anchorIndex = url.index('#')\n        return url[:anchorIndex]\n    except:\n        return url", "def remove_url_anchor(url):\n    url_new=\"\"\n    for i in url:\n        if i == \"#\":\n            return url_new\n        url_new += i\n    return url_new", "def remove_url_anchor(url):\n    # TODO: complete\n    \n    fixed_url = url.split(\"#\")\n    \n    return fixed_url[0]", "import re\n\ndef remove_url_anchor(arry):\n    if '#' in arry:\n        arry = re.match(r\"^(.*)\\#\", arry).group(1)\n\n    return arry", "import re\n\ndef remove_url_anchor(url):\n    regex = r'#\\w+.+'\n    subst = ''\n    result = re.sub(regex, subst, url)\n    return result", "def remove_url_anchor(url):\n    return url[0:url.find(\"#\")] if \"#\" in url else url\n", "def remove_url_anchor(url):\n    url_list = list(url) \n    if '#' in url_list: \n        index = url_list.index(\"#\")\n        url_list = url_list[:index]\n    \n    return (\"\".join(url_list))\n        \n    # TODO: complete\n", "def remove_url_anchor(url):\n    anchor_pos = url.find('#')\n    if anchor_pos > 0:\n        return url[:anchor_pos]\n    return url\n    \n", "import re\ndef remove_url_anchor(url):\n    urlRegex = re.compile(r'#(.*)')\n    mo = str(urlRegex.sub('',url))\n    return mo\n\nprint(remove_url_anchor(\"www.codewars.com/katas/\"))", "def remove_url_anchor(url):\n    char_list = list(url)\n    anchor_index = len(char_list)\n    for number in range(0, len(char_list)):\n        if (char_list[number] == \"#\"):\n            anchor_index = number\n    without_anchor = \"\".join(char_list[number] for number in range(0, anchor_index))\n    return without_anchor", "def remove_url_anchor(url):\n    c=\"\"\n    for ch in url:\n        if ch== \"#\":\n            break\n        c+=ch\n    return c", "def remove_url_anchor(url):\n    new = url.find('#')\n    \n    if new > 0:\n        return url[0:new]\n    else:\n        return url\n    # TODO: complete\n", "def remove_url_anchor(url):\n    ans = \"\"\n    for index in range(0,len(url)):\n        if url[index] != '#':\n            ans += url[index]\n        else:\n            break\n    return ans\n", "import re\ndef remove_url_anchor(url):\n    return re.match(r'[^#]*', url).group()", "def remove_url_anchor(url):\n    l1=list()\n    for i in range(len(url)):\n        if(url[i]!='#'):\n            l1.append(url[i])\n        else:\n            break\n    return ''.join(l1)\n", "def remove_url_anchor(url):\n    a = []\n    for i in url:\n        if i == \"#\":\n            break\n        a.append(i)# TODO: complete\n    return \"\".join(a)", "def remove_url_anchor(url):\n    if \"#\" in url:\n        return url[:url.index(\"#\"):]\n    else:\n        return url", "def remove_url_anchor(url):\n    lst=url.split('#')\n    url=str(lst[0])\n    return url", "import re\ndef remove_url_anchor(url):\n    match = re.search(r'[^#]+', url)\n    if match:\n        return match.group()\n    else:\n        return url\n", "def remove_url_anchor(url):\n    if '#' not in url:\n        return url\n    else:\n        get_index = list(url).index('#')\n        return url[:get_index]", "def remove_url_anchor(url):\n    # TODO: complete\n    new_url = \"\"\n    for char in url:\n        if char == \"#\": break\n        new_url = new_url + char\n        \n    \n    return new_url", "import re\ndef remove_url_anchor(url):\n    return re.match(r'(.+)#', url)[1] if '#' in url else url", "def remove_url_anchor(url):\n    splt = url.split('#',1)\n    sub = splt[0]\n    return sub", "def remove_url_anchor(url):\n    ans = url.split('#')\n    return ans[0]\n    # TODO: complete\n", "def remove_url_anchor(url):\n    \n    s = \"\"\n    \n    for i in range(len(url)):\n        \n        if url[i]=='#':\n            \n            break\n            \n        else:\n            \n            s+= url[i]\n            \n    return s\n\n    \n    \n", "def remove_url_anchor(url):\n    return url[:list(url).index('#')] if '#' in url else url", "def remove_url_anchor(url):\n    a = 0\n    for i in url:\n        if  i == '#':\n            a = url.index(i)\n    return url[:a] if a != 0 else url", "def remove_url_anchor(url):\n    return \"\".join(url.split(\"#\")[:1])", "def remove_url_anchor(url):\n    count = 0\n    if \"#\" in url:\n        newUrl = url.replace(url[url.find(\"#\"):], \"\")\n        return newUrl\n    else:\n        return url\n    \n", "def remove_url_anchor(url):\n    j = 0\n    for i in url:\n        j +=1\n        if i == '#':\n            print(j)\n            url = url[0:(j-1)]\n            return url\n        else:\n            pass\n    return url\n        \n", "def remove_url_anchor(url):\n  index = url.find('#')\n  if index == -1:\n    return url\n  else:\n    return url[0:index]", "def remove_url_anchor(url):\n    accum = []\n    for char in url:\n        if char != \"#\":\n            accum.append(char)\n        if char == \"#\":\n            break\n    return \"\".join(accum)", "def remove_url_anchor(url):\n    new_url = \"\"\n    if \"#\" in url:\n        i = url.index(\"#\")\n        new_url = url[0: i]\n    else:\n        new_url = url\n    return new_url", "def remove_url_anchor(url):\n    url = url.split(sep=\"#\")\n    return url[0]", "def remove_url_anchor(url):\n    newString = ''\n    for i in url:\n        if i != '#':\n            newString = newString + i\n        if i== '#':\n            break\n    return newString", "def remove_url_anchor(url):\n    \n    l = \"\"\n    \n    for i in url:\n        if i!= \"#\":\n            l+= i\n            \n        else:\n            break\n    return l", "def remove_url_anchor(url):\n    # TODO: complete\n    s = \"#\"\n    l=len(url)    \n    pos = url.find(s)       \n    if pos<=l and pos>0:\n        url = url[:(l-(l-pos))]        \n    return url", "def remove_url_anchor(url):\n    url1 = url.split(\"#\", 1)\n    subs= url1[0]\n    return(subs)", "def remove_url_anchor(url):\n    line=[]\n    for x in url:\n        if x!='#':\n            line.append(x)\n        else:\n            break\n    return ''.join(line)", "import re\n\ndef remove_url_anchor(url):\n    pattern = re.compile(r'^([^#]+)(#[.]*)*')\n    m = re.match(pattern, url)\n    return m.group(1)", "def remove_url_anchor(url):\n    if '#' in url:\n        anchorPosition = url.find('#')\n        return url[:anchorPosition]\n    else:\n        return url", "def remove_url_anchor(url):\n    try:\n        site, _ = url.split('#')\n    except ValueError:\n        return url\n    else:\n        return site", "def remove_url_anchor(url):\n    for x in url:\n        y=len(url)\n        if x ==\"#\":\n            y=url.index(x)\n            break\n    return url[ :y]", "import re\ndef remove_url_anchor(url):\n    return re.search(r\"^[^#]+\", url).group()", "def remove_url_anchor(url):\n    ans = ''\n    for char in url:\n        if char is '#':\n            break    \n        ans += char    \n    return ans", "from re import sub\n\ndef remove_url_anchor(url):\n    return sub('#.+', '', url)", "def remove_url_anchor(url):\n    if '#' in url:\n        slicer = url.index('#')\n        return url[:slicer]\n    else:\n        return url", "from re import search\ndef remove_url_anchor(url):\n    pattern = r'(\\A.+(?=#))'\n    match = search (pattern, url)\n    return match.group () if match else url", "def remove_url_anchor(url):\n    final=\"\"\n    for letter in url:\n        if letter==\"#\":\n            break\n        else:\n            final+=letter\n    return final\n        \n    # TODO: complete\n", "def remove_url_anchor(url):\n    idx = url.find('#')\n    if idx == -1: return url\n    return url[:idx]", "def remove_url_anchor(url):\n    for letter in url:\n        if letter == \"#\":\n            x = url.index(letter)\n            return url[0:x]\n        \n    return url\n    # TODO: complete\n", "def remove_url_anchor(url):\n    ans = '' \n    for i in range(len(url)):\n        if url[i]=='#':\n            break\n        else:\n            ans += url[i]\n    return ans\n", "def remove_url_anchor(url):\n    try:\n        a = url.index(\"#\")\n        return url[:a]\n    except Exception:\n        pass\n    return url", "def remove_url_anchor(url):\n    string = ''\n    for letter in url:\n        if letter != '#':\n            string += letter\n        else:\n            break\n    return string", "def remove_url_anchor(url):\n    url = url.rsplit('#')\n    return url[0]", "def remove_url_anchor(url):\n    try: return url[:url.index('#')]\n    except: return url[:]\n", "from re import sub\nremove_url_anchor = lambda url: sub('#.*', '', url)", "def remove_url_anchor(url):\n    l = url.split('#',1)\n    return l[0]"]