["from re import compile, match\n\nREGEX = compile(r'((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){4}$')\n\n\ndef ipv4_address(address):\n    # refactored thanks to @leonoverweel on CodeWars\n    return bool(match(REGEX, address + '.'))\n", "import socket\ndef ipv4_address(address):\n    try: # No need to do work that's already been done\n        socket.inet_pton(socket.AF_INET,address)\n        return True\n    except socket.error: # Better to ask forgiveness than permission\n        return False", "def ipv4_address(address):\n    return address.count(\".\")==3 and all([str.isdigit(s) and s==str(int(s)) and int(s)>=0 and int(s)<256 for s in address.split(\".\")])", "def ipv4_address(address):\n    addr = address.split('.')\n    if len(addr) != 4:\n        return False\n    for e in addr:\n        try:\n            a = int(e)\n            if a > 255 or a < 0:\n                return False\n            if str(a) != e:\n                return False\n        except:\n            return False\n    return True", "ipv4_address = lambda address: bool(__import__('re').match('(([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(?!$)|$)){4}\\Z',address))", "import re\n\n\ndef ipv4_address(address):\n    return bool(re.match('((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])[.]){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\Z', address))", "from ipaddress import ip_address\n\n\ndef ipv4_address(address: str) -> bool:\n    try:\n        return len(str(ip_address(address))) == len(address)\n    except ValueError:\n        return False\n", "from re import match\ndef ipv4_address(address):\n    return bool(match(r'^(([1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]))(\\.(?!$)|$)){4}\\Z', address))", "import re\n\ndef ipv4_address(address):\n    return (\n        bool(re.match(r'\\d+(\\.\\d+){3}\\Z', address))\n        and all(0 <= int(x) <= 255 and (x == '0' or not x.startswith('0')) for x in re.findall(r'\\d+', address))\n    )", "import re\n\ndef ipv4_address(address):\n    byte_reg = r'(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])'\n    ipv4_regex = r'\\A({0}[.]){{3}}{0}\\Z'.format(byte_reg)\n    return bool(re.match(ipv4_regex, address))"]