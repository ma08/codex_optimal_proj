["def power_mod(b, e, m):\n  res, b = 1, b % m\n  while e > 0:\n    if e & 1: res = res * b % m\n    e >>= 1\n    b = b * b % m\n  return res", "def power_mod(base, exponent, modulus):\n    if base is 0: return 0\n    if exponent is 0: return 0\n    base = base % modulus\n    result = 1\n    while (exponent > 0):\n        if (exponent % 2 == 1):\n           result = (result * base) % modulus\n        exponent = exponent >> 1\n        base = (base * base) % modulus\n    return result", "def power_mod(x, a, n):\n    ret = 1\n    x = x % n\n    while a:\n        (a, r) = divmod(a, 2)\n        if r:\n            ret = ret * x % n\n        x = x ** 2 % n\n    return ret\n", "def rests(n, b):\n    rests = []\n    while n:\n        n, r = divmod(n, b)\n        rests.append(r)\n    return rests\n\n# k-ary LR method (~800 ms)\ndef power_mod(x, y, n, k=5):\n    base, table, res = 2 << (k-1), [1], 1\n    for i in range(1, base):\n        table.append(x*table[i-1] % n)\n    for rest in reversed(rests(y, base)):\n        for _ in range(k): res = res*res % n\n        if rest: res = res*table[rest] % n\n    return res", "def power_mod(a, b, n):\n    res = 1\n    while b:\n        if b % 2:\n            res = res * a % n\n        a = a * a % n\n        b = b // 2\n    return res", "from math import floor\ndef power_mod(base, exponent, modulus):\n    if (base < 0) or (exponent < 0) or (modulus < 1):\n       return -1\n    result = 1\n    while exponent > 0:\n        if (exponent % 2) == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = floor(exponent / 2)\n    return result", "def power_mod(x, y, n):\n    x = x%n\n    b = bin(y)[2:]\n    l = len(b)\n    res = [0]*l\n    for i in range(l):\n        res[-i-1] = x\n        x *= x\n        x = x%n\n    prod = 1\n    for i in range(l):\n        if b[-i-1] == '1':\n            prod *= res[-i-1]\n            prod = prod%n\n    return prod", "def power_mod(b, e, m):\n    r, b = 1, b % m\n    while e > 0:\n        if e % 2 == 1: r = (r * b) % m\n        e, b = e >> 1, (b * b) % m\n    return r"]