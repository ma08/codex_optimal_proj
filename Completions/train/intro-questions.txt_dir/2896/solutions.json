["def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    x, y = sorted((room_length, room_width))\n    if y == 0 or x > roll_width: return \"error\"\n    if y < roll_width: return round(x * roll_width * roll_cost, 2)\n    return round(y * roll_width * roll_cost, 2)", "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    if room_length > roll_width < room_width or room_length * room_width <= 0:\n        return 'error'\n    if room_length <= roll_width >= room_width:\n        side = min(room_length, room_width)\n    else:\n        side = max(room_length, room_width)\n    return round(side * roll_width * roll_cost, 2)", "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    if room_length >  roll_width and room_width > roll_width or \\\n    not room_length * room_width * roll_width:\n        return 'error'\n    [a, b] = sorted([room_length, room_width])  \n    if room_length <=  roll_width and room_width <= roll_width:\n        return round(roll_width * a * roll_cost, 2)   \n    return round(b * roll_width * roll_cost, 2)\n", "def cost_of_carpet(l, w, roll, cost):\n    if l > roll < w or l <= 0 or w <= 0: return 'error'\n    res = 0\n    if l <= roll < w: res = roll * w * cost\n    elif w <= roll < l: res = roll * l * cost\n    else: res = roll * min(w, l) * cost\n    return round(res, 2)", "def cost_of_carpet(rW, rL, cW, cCost):\n    rW, rL = sorted((rW, rL))\n    return \"error\" if cW < rW or 0 in (rL, rW, cW) else round(min([rL] + [rW]*(rL<=cW)) * cW * cCost, 2)", "def cost_of_carpet(l, w, r, c):\n    if l==0 or w==0 or  l>r and w>r : \n        return \"error\"\n    return round( (min(l,w) if l<=r and w<=r else max(l,w) ) * r * c , 2)\n", "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n  if room_length <= 0 or room_width <= 0 or (room_length > roll_width < room_width):\n      return 'error'\n      \n  x, y = min(room_length, room_width), max(room_length, room_width)\n  \n  if y > roll_width:\n      return round(y * roll_width * roll_cost, 2)\n      \n  return  round(x * roll_width * roll_cost, 2)  \n", "from math import ceil\ndef cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    w,l=sorted([room_length, room_width])\n    if room_length==0 or room_width==0 or roll_width<w:\n        return 'error'\n    if l<=roll_width:\n        return round(w*roll_width*roll_cost,2)\n    else:\n        return round(l*roll_width*roll_cost,2)\n", "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    if 0 in [room_length, room_width]:\n        return \"error\"\n    mi, mx = min((room_length, room_width)), max((room_length, room_width))\n    rw, rc = roll_width, roll_cost\n    return round(mi * rw * rc, 2) if mx <= roll_width else (round(mx * rw * rc, 2) if roll_width >= mi else \"error\")", "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    if roll_width < min(room_length, room_width):\n        return 'error'\n    elif  room_length == 0 or room_width ==0:\n         return \"error\"\n    cost_1 = roll_width*room_length*roll_cost if roll_width >= room_width else float('inf')\n    cost_2 = roll_width*room_width*roll_cost if roll_width >= room_length else float('inf')\n    return round(min(cost_1, cost_2), 2)\n     \n   \n\n    \n"]