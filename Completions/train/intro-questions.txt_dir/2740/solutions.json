["def wheat_from_chaff(values):\n    i, j = 0, len(values)-1\n    while True:\n        while i < j and values[i] < 0: i += 1\n        while i < j and values[j] > 0: j -= 1\n        if i >= j: return values\n        values[i], values[j] = values[j], values[i]", "def wheat_from_chaff(values):\n    i, j = 0, len(values) - 1\n    vals = values[:]\n    while i < j:\n        if vals[i] < 0:\n            i += 1\n        elif vals[j] > 0:\n            j -= 1\n        else:\n            vals[i], vals[j] = vals[j], vals[i]\n            i, j = i + 1, j - 1\n    return vals", "from typing import List\n\n\ndef wheat_from_chaff(values: List[int]) -> List[int]:\n    i, latest_neg = 0, len(values)\n\n    while i < latest_neg:\n        if values[i] > 0:\n            try:\n                latest_neg = next(j for j in range(latest_neg - 1, i, -1) if values[j] < 0)\n            except StopIteration:\n                break\n            values[i], values[latest_neg] = values[latest_neg], values[i]\n        i += 1\n    return values\n", "def wheat_from_chaff(a):\n    r, i, l = [[i, j] for i, j in enumerate(a) if j < 0], 0, len(a)\n    for i in range(len(a)):\n        if a[i] > 0:\n            if not r : break\n            r_ = r.pop()\n            if r_[0] < i : break\n            a[i], a[r_[0]] = r_[1], a[i]\n    return a", "def wheat_from_chaff(values):\n    i, j = 0, len(values) - 1\n    while i < j:\n        a, b = values[i], values[j]\n        if a > 0 and b < 0:\n            values[i], values[j] = values[j], values[i]\n        elif b > 0:\n            j -= 1\n        else:\n            i += 1\n    return values", "def wheat_from_chaff(values):\n    values = values[:]\n    i, j = 0, len(values)-1\n    while i < j:\n        while values[i] < 0:\n            i += 1\n        while values[j] > 0:\n            j -= 1\n        if i < j:\n            values[i], values[j] = values[j], values[i]\n    return values", "def wheat_from_chaff(values):\n    end = len(values) - 1\n    for start, n in enumerate(values):\n        if start >= end: break\n        if n > 0:\n            while start < end and values[end] > 0: end -= 1\n            values[start], values[end] = values[end], values[start]\n    return values", "def wheat_from_chaff(values):\n    results = values[:]\n    head = 0\n    tail = len(values) - 1\n    while True:\n        while results[head] <= 0 and head < tail:\n            head += 1\n        while results[tail] > 0 and tail > head:\n            tail -= 1\n        if head >= tail:\n            break\n        results[head], results[tail] = results[tail], results[head]\n    return results", "def wheat_from_chaff(values):\n    last_index=len(values)-1\n    for i in range(0, len(values)):\n        if values[i] > 0:\n            negative_index = None\n            negative_value = None\n            for ii in range(last_index, -1, -1):\n                if values[ii] < 0:\n                    last_index = ii\n                    negative_index = ii\n                    negative_value = values[ii]\n                    break\n            if(negative_index == None):\n                break\n            elif(negative_index > i):\n                values[i], values[ii] = values[ii], values[i]\n            else:\n                break\n    return values  \n                \n                \n            \n", "def wheat_from_chaff(values):\n  negative = []\n  positive = []\n  while len(values) > 0:\n    if values[0] < 0:\n      negative.append(values.pop(0))\n    elif values[-1] > 0:\n      positive.append(values.pop(-1))\n    else:\n      positive.append(values.pop(0))\n      negative.append(values.pop(-1))\n  return negative+positive[::-1]\n"]