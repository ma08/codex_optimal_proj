["from itertools import cycle\n\ndef swap(s,n):\n    b = cycle(bin(n)[2:])\n    return \"\".join(c.swapcase() if c.isalpha() and next(b) == '1' else c for c in s)", "from itertools import cycle\n\ndef swap(s,n):\n    doSwap = cycle(map(int,f\"{n:b}\"))\n    return ''.join(c.swapcase() if c.isalpha() and next(doSwap) else c for c in s)", "def swap(s,n):\n    n = str(bin(n))[2:]\n    index = 0\n    new_s = ''\n    for letter in s:\n        if letter.isalpha():\n            if n[index%len(n)]=='1':\n                new_s += letter.swapcase()\n            else:\n                new_s += letter\n            index+=1\n        else:\n            new_s += letter\n    return new_s", "from itertools import cycle\ndef swap(s,n):\n    binary = cycle(bin(n)[2:])\n    return ''.join(char.swapcase() if char.isalpha() and next(binary) == '1' else char for char in s)", "from itertools import cycle\n\ndef swap(s,n):\n    bits = cycle(map(int, f'{n:b}'))\n    return ''.join(c.swapcase() if (c.isalpha() and next(bits)) else c for c in s)", "from itertools import cycle\n\ndef swap(s, n):\n    it = cycle(bin(n)[2:])\n    return \"\".join(x.swapcase() if x.isalpha() and next(it) == \"1\" else x for x in s)", "def swap(s,n):\n    bits, r, c = bin(n)[2:], '', 0\n    for i in s:\n        r += [i, i.swapcase()][int(bits[c%len(bits)])]\n        c += i.isalpha()\n    return r ", "def swap(s,n):\n    n = str(bin(n))[2:]\n    words = list(s)   \n    binary_mult = str(n) * len(s)\n    bn_words = list(binary_mult)\n    result = []\n    for i, x in enumerate(words):\n        if not x.isalpha():\n            bn_words.insert(i, x)\n        if bn_words[i] == '1':\n            result.append(words[i].swapcase())\n        else:\n            result.append(words[i])\n    return ''.join(result)", "from itertools import cycle\ndef swap(s,n):\n    return ( lambda N: ''.join( e if not e.isalpha() else (e,e.swapcase())[next(N)] for e in s ))(cycle(map(int, bin(n)[2:])))", "from itertools import cycle\n\n\ndef swap(s, n):\n    it = cycle(map(int, format(n, \"b\")))\n    return \"\".join(c.swapcase() if c.isalpha() and next(it) else c for c in s)"]