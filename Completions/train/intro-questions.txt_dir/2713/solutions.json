["INITIAL = [0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244, 292]\n\ndef solve(n):\n    return INITIAL[n] if n < 12 else 292 + (49 * (n-11))", "from functools import lru_cache\n\nDIGITS = [1, 5, 10, 50]\nTHRESHOLD = 12\n\ndef solve_naive (n):\n    minimal = n * min(DIGITS)\n    maximal = n * max(DIGITS)\n    return maximal - minimal\n\n@lru_cache(maxsize=THRESHOLD)\ndef solve_brute (n):\n    from itertools import product\n    combinations = product(DIGITS, repeat=n)\n    values = list(map(sum, combinations))\n    return len(set(values))\n\n@lru_cache(maxsize=THRESHOLD)\ndef determine_delta (tries):\n    deltas = (solve_naive(n) - solve_brute(n)\n              for n in range(1, tries+1))\n    return max(deltas)\n\ndef solve (n):\n    if n > THRESHOLD:\n        return solve_naive(n) - determine_delta(THRESHOLD)\n    return solve_brute(n)\n", "def solve(n):\n    if n<=10:\n        return [0,4,10,20,35,56,83,116,155,198,244][n]\n    else:\n        return 292+49*(n-11)", "basics = [0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244, 292]\n\ndef solve(n):\n    return basics[n] if n < 12 else 49*n - 247", "def solve(n):\n    c = 0\n    for i in range(min(8,n)+1):\n        for j in range(min(4 if i!=0 else 8,n-i)+1):\n            c += n-i-j+1\n    return c", "OPTIONS = [1, 5, 10, 50]\n\ndef solve(n):\n  print(n)\n  base_answer = len(rec_solve(min(n, 11)))\n    \n  if n < 12:\n    return base_answer\n  else:\n    # Past 11, is just the previous answer + 49 \n    return base_answer + (49*(n-11))\n\ndef rec_solve(n, options=4, val=0):\n  # My original solution; solves based on cases of 1 option,\n  # 1 character, and recursive case\n  if n == 1:\n    return_set = set()\n    for i in range(1, options + 1):\n      return_set.add(val + OPTIONS[-i])\n    return return_set\n\n  elif options == 1:\n    return {val + 50*n}\n\n  return_set = set()\n  for option_num in range(options, 0, -1):\n    return_set = return_set.union(rec_solve(n - 1, option_num, \\\n                                        val + OPTIONS[-option_num]))\n  return return_set\n", "e = [0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244, 292]\n\ndef solve(n):\n    return e[n] if n < 12 else 292 + (49 * (n-11))", "def solve(n):\n    'We have a regular progression from 11 on'\n    return 292+(n-11)*49 if n>10 else len(set(n-v-x-l+v*5+x*10+l*50 for l in range(n+1) for x in range(n+1-l) for v in range(n+1-l-x)))\n    \n\n", "def solve(n):\n    m = {1:4,2:10, 3:20, 4:35, 5:56, 6:83, 7:116, 8:155, 9:198, 10:244, 11:292, 12:341}\n    if n <= 12:\n        return m[n]\n    else:\n        return m[12]+49*(n-12)\n\n", "STARTERS = 0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244\n\ndef solve(n):\n    return STARTERS[n] if n < 11 else 292 + 49 * (n - 11)"]