["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list([int(x)- 1 for x in input().split()])\n    out = []\n\n    ll = [(l[i], i) for i in range(n)]\n    ll.sort()\n\n    swap = (-1,-1)\n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:\n            swap = (ll[i][1],ll[i+1][1])\n\n    newl = [0]*n\n    for i in range(n):\n        newl[ll[i][1]] = i\n\n    l = newl\n\n    swapN = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:\n                swapN += 1\n\n    #print(l)\n    if swapN & 1:\n        l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    #print(l)\n\n    def shift(i):\n        out.append(i + 1)\n        l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]\n\n    works = True\n    done = False\n\n    while not done:\n    \n        for i in range(n):\n            if l[i] != i:\n                break\n        else:\n            done = True\n\n        if done:\n            break\n\n        for find in range(i + 1, n):\n            if l[find] == i:\n                break\n\n        while find - i >= 2:\n            find -= 2\n            shift(find)\n\n        if find - i == 1:\n            if find <= n - 2:\n                shift(find - 1)\n                shift(find - 1)\n            else:\n                works = False\n                break\n\n    #print(l)\n    if works:\n        print(len(out))\n        print(' '.join(map(str,out)))\n    else:\n        print(-1)\n    #print('---')\n        \n    \n", "def cnt_inv(a):\n    ans = 0\n    for i in range(len(a)):\n        for f in range(i + 1, len(a)):\n            if a[f] < a[i]:\n                ans += 1\n    return ans\n\nfor testcase in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    inv = cnt_inv(a)\n\n    sorted_a = list(sorted(a))\n\n    last_eq = -1\n    for i in range(n - 1):\n        if sorted_a[i] == sorted_a[i + 1]:\n            last_eq = i + 1\n\n    # print(\"last_eq\", last_eq) \n    ans = []\n    def shift(pos):\n        nonlocal inv\n        inv -= int(a[pos] > a[pos + 1]) + int(a[pos] > a[pos + 2]) + int(a[pos + 1] > a[pos + 2])\n        a[pos], a[pos + 1], a[pos + 2] = a[pos + 2], a[pos], a[pos + 1]\n        inv += int(a[pos] > a[pos + 1]) + int(a[pos] > a[pos + 2]) + int(a[pos + 1] > a[pos + 2])\n        ans.append(pos + 1)\n\n    for i in range(n - 3):\n        pos = min(list(range(i, n)), key=lambda x: a[x])\n        # print(a, val, pos) \n        while pos > i + 1:\n            shift(pos - 2)\n            pos -= 2\n        if pos == i + 1:\n            shift(i)\n            shift(i)\n        if i == last_eq and inv % 2 == 1:\n            shift(i)\n            shift(i - 1)\n\n    last_min = min(*a[-3:])\n    while a[-3] != last_min:\n        shift(n - 3)\n    \n    if n - 3 == last_eq and inv % 2 == 1:\n        shift(n - 3)\n        shift(n - 4)\n        \n    cnt = 0\n    while not (a[-3] <= a[-2] <= a[-1]):\n        shift(n - 3) \n        cnt += 1\n        if cnt > 5:\n            break\n    if cnt > 5:\n        print(-1)\n    else:\n        print(len(ans))\n        print(' '.join(map(str, ans)))\n\n", "\n\ndef swap(i):\n\n    tmp = a[i+2]\n    a[i+2] = a[i+1]\n    a[i+1] = a[i]\n    a[i] = tmp\n    ans.append(i+1)\n    #print (*a)\n\ntt = int(input())\n\nfor loop in range(tt):\n\n    n = int(input())\n    a = list(map(int,input().split()))\n    sa = 0.0001\n\n    \n    lis = [sa] * 501\n    \n    b1 = []\n    b2 = []\n    \n    f2 = True\n    for i in range(n):\n        if lis[a[i]] != sa and f2:\n            b1.append(a[i] + lis[a[i]])\n            b2.append(a[i])\n            f2 = False\n        else:\n            b1.append(a[i] + lis[a[i]])\n            b2.append(a[i] + lis[a[i]])\n\n        lis[a[i]] += sa\n\n    #print (b1)\n    #print (b2)   \n\n    ans = []\n    a = b1\n    for last in range(n-3):\n\n        mi = last\n        for i in range(last,n):\n            if a[i] < a[mi]:\n                mi = i\n\n        while mi != last:\n\n            if mi - last >= 2:\n                swap(mi-2)\n                mi -= 2\n            else:\n                swap(mi)\n                mi += 1\n\n    while not ( a[-3] < a[-2] and a[-2] < a[-1] ):\n        swap(n-3)\n\n        if len(ans) > n**2:\n            break\n\n    if len(ans) <= n**2:\n        \n        print(len(ans))\n        print(*ans)\n        continue\n\n    ans = []\n    a = b2\n    for last in range(n-3):\n\n        mi = last\n        for i in range(last,n):\n            if a[i] < a[mi]:\n                mi = i\n\n        while mi != last:\n\n            if mi - last >= 2:\n                swap(mi-2)\n                mi -= 2\n            else:\n                swap(mi)\n                mi += 1\n\n    while not ( a[-3] < a[-2] and a[-2] < a[-1] ):\n        swap(n-3)\n\n        if len(ans) > n**2:\n            break\n\n    if len(ans) <= n**2:\n        \n        print(len(ans))\n        print(*ans)\n        continue\n\n    print(-1)\n\n    \n        \n        \n    \n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list([int(x)- 1 for x in input().split()])\n    out = []\n\n    ll = [(l[i], i) for i in range(n)]\n    ll.sort()\n\n    swap = (-1,-1)\n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:\n            swap = (ll[i][1],ll[i+1][1])\n\n    newl = [0]*n\n    for i in range(n):\n        newl[ll[i][1]] = i\n\n    l = newl\n\n    swapN = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:\n                swapN += 1\n\n    #print(l)\n    if swapN & 1:\n        l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    #print(l)\n\n    def shift(i):\n        out.append(i + 1)\n        l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]\n\n    works = True\n    done = False\n\n    while not done:\n    \n        for i in range(n):\n            if l[i] != i:\n                break\n        else:\n            done = True\n\n        if done:\n            break\n\n        for find in range(i + 1, n):\n            if l[find] == i:\n                break\n\n        while find - i >= 2:\n            find -= 2\n            shift(find)\n\n        if find - i == 1:\n            if find <= n - 2:\n                shift(find - 1)\n                shift(find - 1)\n            else:\n                works = False\n                break\n\n    #print(l)\n    if works:\n        print(len(out))\n        print(' '.join(map(str,out)))\n    else:\n        print(-1)\n    #print('---')\n        \n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list([int(x)- 1 for x in input().split()])\n    out = []\n\n    ll = [(l[i], i) for i in range(n)]\n    ll.sort()\n\n    swap = (-1,-1)\n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])\n\n    newl = [0]*n\n    for i in range(n):newl[ll[i][1]] = i\n\n    l = newl\n\n    swapN = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]\n\n    works,done = True,False\n   \n    while not done:\n    \n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n\n        if done:break\n\n        for find in range(i + 1, n):\n            if l[find] == i:break\n\n        while find - i >= 2:\n            find -= 2\n            shift(find)\n\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n\n    if works:\n        print(len(out))\n        print(' '.join(map(str,out)))\n    else:\n        print(-1)\n", "def change(i,j,k):\n\tnonlocal a\n\ta[i],a[j],a[k] = a[k],a[i],a[j]\n\nfor nt in range(int(input())):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tarr = a[::]\n\tb = sorted(a)\n\tif a==b:\n\t\tprint (0)\n\t\tprint ()\n\t\tcontinue\n\ti = 0\n\tans = []\n\tflag = 0\n\twhile i<n:\n\t\tif a[i]==b[i]:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tind = a[i:].index(b[i])+i\n\t\t# print (ind)\n\t\twhile a[i]!=b[i]:\n\t\t\tif ind==i+1:\n\t\t\t\tif ind+1>=len(a):\n\t\t\t\t\tflag = 1\n\t\t\t\t\tbreak\n\t\t\t\tans.append((i,ind,ind+1))\n\t\t\t\tchange(i,ind,ind+1)\n\t\t\t\tans.append((i,ind,ind+1))\n\t\t\t\tchange(i,ind,ind+1)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tans.append((ind-2,ind-1,ind))\n\t\t\t\tchange(ind-2,ind-1,ind)\n\t\t\t\tind -= 2\n\t\tif flag:\n\t\t\tbreak\n\t\ti += 1\n\t\t# print (a)\n\tif flag:\n\t\tif len(set(a))==n:\n\t\t\tprint (-1)\n\t\t\tcontinue\n\t\telse:\n\t\t\tif a[-3]==a[-1]:\n\t\t\t\tans.append((n-3,n-2,n-1))\n\t\t\telse:\n\t\t\t\tans = []\n\t\t\t\ta = arr[::]\n\t\t\t\tflag2 = 0\n\t\t\t\ttemp = sorted(a,reverse=True)\n\t\t\t\tfor i in range(1,n):\n\t\t\t\t\tif temp[i]==temp[i-1]:\n\t\t\t\t\t\tnumber = temp[i]\n\t\t\t\t\t\tbreak\n\t\t\t\ti = 0\n\t\t\t\twhile i<n:\n\t\t\t\t\tif a[i]==b[i] and (i==0 or a[i]!=a[i-1] or flag2):\n\t\t\t\t\t\ti += 1\n\t\t\t\t\t\tcontinue\n\t\t\t\t\telif i!=0 and a[i]==a[i-1]:\n\t\t\t\t\t\tif not flag2 and a[i]==number:\n\t\t\t\t\t\t\tans.append((i-1,i,i+1))\n\t\t\t\t\t\t\tchange(i-1,i,i+1)\n\t\t\t\t\t\t\tans.append((i-1,i,i+1))\n\t\t\t\t\t\t\tchange(i-1,i,i+1)\n\t\t\t\t\t\t\tans.append((i,i+1,i+1))\n\t\t\t\t\t\t\tchange(i,i+1,i+2)\n\t\t\t\t\t\t\tans.append((i,i+1,i+2))\n\t\t\t\t\t\t\tchange(i,i+1,i+2)\n\t\t\t\t\t\t\tflag2 = 1\n\t\t\t\t\t\ti += 1\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t# print (i,a,b)\n\t\t\t\t\tind = a[i:].index(b[i])+i\n\t\t\t\t\t# print (ind)\n\t\t\t\t\twhile a[i]!=b[i]:\n\t\t\t\t\t\tif ind==i+1:\n\t\t\t\t\t\t\tans.append((i,ind,ind+1))\n\t\t\t\t\t\t\tchange(i,ind,ind+1)\n\t\t\t\t\t\t\tans.append((i,ind,ind+1))\n\t\t\t\t\t\t\tchange(i,ind,ind+1)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tans.append((ind-2,ind-1,ind))\n\t\t\t\t\t\t\tchange(ind-2,ind-1,ind)\n\t\t\t\t\t\t\tind -= 2\n\t\t\t\t\t# print (a,i)\n\t\t\t\t\tif i!=0 and a[i]==a[i-1] and flag2==0 and a[i]==number:\n\t\t\t\t\t\tans.append((i-1,i,i+1))\n\t\t\t\t\t\tchange(i-1,i,i+1)\n\t\t\t\t\t\tans.append((i-1,i,i+1))\n\t\t\t\t\t\tchange(i-1,i,i+1)\n\t\t\t\t\t\tans.append((i,i+1,i+1))\n\t\t\t\t\t\tchange(i,i+1,i+2)\n\t\t\t\t\t\tans.append((i,i+1,i+2))\n\t\t\t\t\t\tchange(i,i+1,i+2)\n\t\t\t\t\t\tflag2 = 1\n\t\t\t\t\ti += 1\n\t\t\t\t\t# print (a)\n\t\n\tprint (len(ans))\n\tfor i in ans:\n\t\tprint (i[0]+1,end=\" \")\n\tprint ()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(lambda x: int(x)- 1, input().split()))\n    out = []\n\n    ll = sorted([(l[i], i) for i in range(n)])\n\n    swap = (-1,-1)\n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])\n\n    newl = [0]*n\n    for i in range(n):newl[ll[i][1]] = i\n\n    l = newl\n\n    swapN = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]\n\n    works,done = True,False\n   \n    while not done:\n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n        if done:break\n        for find in range(i + 1, n):\n            if l[find] == i:break\n        while find - i >= 2:find -= 2;shift(find)\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n    if works:print(len(out));print(' '.join(map(str,out)))\n    else:print(-1)         ", "for _ in range(int(input())):\n    n,l,out = int(input()),list(map(lambda x: int(x)- 1, input().split())),[];ll = sorted([(l[i], i) for i in range(n)]);swap = (-1,-1);newl = [0]*n    \n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])  \n    for i in range(n):newl[ll[i][1]] = i\n    l,swapN = newl,0;works,done = True,False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]       \n    while not done:\n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n        if done:break\n        for find in range(i + 1, n):\n            if l[find] == i:break\n        while find - i >= 2:find -= 2;shift(find)\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n    if works:print(len(out));print(' '.join(map(str,out)))\n    else:print(-1)         ", "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(sys.stdin.readline())\ndef ria(): return list(map(int, sys.stdin.readline().split()))\ndef ws(s): sys.stdout.write(s + '\\n')\ndef wi(n): sys.stdout.write(str(n) + '\\n')\ndef wia(a): sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\n\n\ndef rotate(a, i):\n    t = a[i+2]\n    a[i + 2] = a[i + 1]\n    a[i + 1] = a[i]\n    a[i] = t\n\n\ndef solve(n, a):\n    sa = sorted(a)\n    s = []\n\n    rolled = False\n    i = 0\n    while i < n:\n        for j in range(i, n):\n            if a[j] == sa[i]:\n                break\n        while j - i >= 2:\n            j -= 2\n            rotate(a, j)\n            s.append(j+1)\n        if i+1 == j:\n            if i+2 < n:\n                rotate(a, i)\n                rotate(a, i)\n                s.append(i+1)\n                s.append(i+1)\n            else:\n                if rolled:\n                    wi(-1)\n                    return\n\n                found = False\n                for k in range(n-2, 0, -1):\n                    if len(set(a[k-1:k+2])) == 2:\n                        found = True\n                        break\n                if found:\n                    if a[k-1] == a[k]:\n                        rotate(a, k - 1)\n                        rotate(a, k - 1)\n                        s.append(k)\n                        s.append(k)\n                    else:\n                        rotate(a, k - 1)\n                        s.append(k)\n                    rolled = True\n                    i = k-2\n                else:\n                    wi(-1)\n                    return\n\n        i += 1\n\n    if len(s) <= n*n:\n        wi(len(s))\n        wia(s)\n    else:\n        wi(-1)\n\n\ndef main():\n    for _ in range(ri()):\n        n = ri()\n        a = ria()\n        solve(n, a)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import heapq\nimport sys\ninput=sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    turned=0\n    q=[]\n    for i in range(n):\n        heapq.heappush(q,arr[i])\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                turned+=1\n    if turned==0:\n        print(0)\n        print('')\n    else:\n        if n==3:\n            if n==len(set(arr)):\n                if turned%2==1:\n                    print(-1)\n                else:\n                    cnt=1\n                    ans=[1]\n                    arr[0],arr[1],arr[2]=arr[2],arr[0],arr[1]\n                    if arr[0]<=arr[1]<=arr[2]:\n                        print(cnt)\n                        print(*ans)\n                    else:\n                        cnt+=1\n                        ans.append(1)\n                        print(cnt)\n                        print(*ans)\n            else:\n                cnt=1\n                ans=[1]\n                arr[0],arr[1],arr[2]=arr[2],arr[0],arr[1]\n                if arr[0]<=arr[1]<=arr[2]:\n                    print(cnt)\n                    print(*ans)\n                else:\n                    cnt+=1\n                    ans.append(1)\n                    print(cnt)\n                    print(*ans)\n            continue\n        if n==len(set(arr)):\n            if turned%2==1:\n                print(-1)\n            else:\n                cnt=0\n                pos=0\n                ans=[]\n                while pos<n:\n                    tmp=heapq.heappop(q)\n                    if arr[pos]==tmp:\n                        pos+=1\n                        continue\n                    else:\n                        tpos=pos+arr[pos:].index(tmp)\n                        while tpos-pos>=2:\n                            cnt+=1\n                            tpos-=2\n                            ans.append(tpos+1)\n                            tmp=0\n                            if arr[tpos]>arr[tpos+1]:\n                                tmp+=1\n                            if arr[tpos]>arr[tpos+2]:\n                                tmp+=1\n                            if arr[tpos+1]>arr[tpos+2]:\n                                tmp+=1\n                            arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+2],arr[tpos],arr[tpos+1]\n                            if arr[tpos]>arr[tpos+1]:\n                                tmp-=1\n                            if arr[tpos]>arr[tpos+2]:\n                                tmp-=1\n                            if arr[tpos+1]>arr[tpos+2]:\n                                tmp-=1\n                            turned-=tmp\n                        if tpos-pos==1:\n                            cnt+=2\n                            tpos-=1\n                            ans.append(tpos+1)\n                            ans.append(tpos+1)\n                            tmp=0\n                            if arr[tpos]>arr[tpos+1]:\n                                tmp+=1\n                            if arr[tpos]>arr[tpos+2]:\n                                tmp+=1\n                            if arr[tpos+1]>arr[tpos+2]:\n                                tmp+=1\n                            arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+1],arr[tpos+2],arr[tpos]\n                            if arr[tpos]>arr[tpos+1]:\n                                tmp-=1\n                            if arr[tpos]>arr[tpos+2]:\n                                tmp-=1\n                            if arr[tpos+1]>arr[tpos+2]:\n                                tmp-=1\n                            turned-=tmp\n                        pos+=1\n                print(cnt)\n                print(*ans)\n        else:\n            cnt=0\n            pos=0\n            ans=[]\n            while pos<n-2:\n                tmp=heapq.heappop(q)\n                if arr[pos]==tmp:\n                    pos+=1\n                    continue\n                else:\n                    tpos=pos+arr[pos:].index(tmp)\n                    while tpos-pos>=2:\n                        cnt+=1\n                        tpos-=2\n                        ans.append(tpos+1)\n                        tmp=0\n                        if arr[tpos]>arr[tpos+1]:\n                            tmp+=1\n                        if arr[tpos]>arr[tpos+2]:\n                            tmp+=1\n                        if arr[tpos+1]>arr[tpos+2]:\n                            tmp+=1\n                        arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+2],arr[tpos],arr[tpos+1]\n                        if arr[tpos]>arr[tpos+1]:\n                            tmp-=1\n                        if arr[tpos]>arr[tpos+2]:\n                            tmp-=1\n                        if arr[tpos+1]>arr[tpos+2]:\n                            tmp-=1\n                        turned-=tmp\n                    if tpos-pos==1:\n                        cnt+=2\n                        tpos-=1\n                        ans.append(tpos+1)\n                        ans.append(tpos+1)\n                        tmp=0\n                        if arr[tpos]>arr[tpos+1]:\n                            tmp+=1\n                        if arr[tpos]>arr[tpos+2]:\n                            tmp+=1\n                        if arr[tpos+1]>arr[tpos+2]:\n                            tmp+=1\n                        arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+1],arr[tpos+2],arr[tpos]\n                        if arr[tpos]>arr[tpos+1]:\n                            tmp-=1\n                        if arr[tpos]>arr[tpos+2]:\n                            tmp-=1\n                        if arr[tpos+1]>arr[tpos+2]:\n                            tmp-=1\n                        turned-=tmp\n                    pos+=1\n            if turned==0:\n                print(cnt)\n                print(*ans)\n            else:\n                ttpos=-1\n                for i in range(n-2,-1,-1):\n                    if arr[i]==arr[i+1]:\n                        ttpos=i\n                        break\n                if ttpos==-1:\n                    cnt+=1\n                    ans.append(n-2)\n                    arr[n-3],arr[n-2],arr[n-1]=arr[n-1],arr[n-3],arr[n-2]\n                    if arr[n-3]<=arr[n-2]<=arr[n-1]:\n                        print(cnt)\n                        print(*ans)\n                    else:\n                        cnt+=1\n                        ans.append(n-3)\n                        print(cnt)\n                        print(*ans)\n                else:\n                    cnt+=2\n                    ans.append(ttpos+1)\n                    ans.append(ttpos+1)\n                    arr[ttpos],arr[ttpos+1],arr[ttpos+2]=arr[ttpos+1],arr[ttpos+2],arr[ttpos]\n                    turned+=1\n                    q=[]\n                    for i in range(n):\n                        heapq.heappush(q,arr[i])\n                    pos=0\n                    while pos<n-2:\n                        tmp=heapq.heappop(q)\n                        if arr[pos]==tmp:\n                            pos+=1\n                            continue\n                        else:\n                            tpos=pos+arr[pos:].index(tmp)\n                            while tpos-pos>=2:\n                                cnt+=1\n                                tpos-=2\n                                ans.append(tpos+1)\n                                arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+2],arr[tpos],arr[tpos+1]\n                            if tpos-pos==1:\n                                cnt+=2\n                                tpos-=1\n                                ans.append(tpos+1)\n                                ans.append(tpos+1)\n                                arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+1],arr[tpos+2],arr[tpos]\n                            pos+=1\n                    print(cnt)\n                    print(*ans)", "for _ in range(int(input())):\n    n,l,out = int(input()),list(map(lambda x: int(x)- 1, input().split())),[];ll = sorted([(l[i], i) for i in range(n)]);swap = (-1,-1);newl = [0]*n    \n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])  \n    for i in range(n):newl[ll[i][1]] = i\n    l,swapN = newl,0;works,done = True,False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]       \n    while not done:\n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n        if done:break\n        for find in range(i + 1, n):\n            if l[find] == i:break\n        while find - i >= 2:find -= 2;shift(find)\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n    if works:print(len(out));print(' '.join(map(str,out)))\n    else:print(-1)   ", "#!/usr/bin/env python3\n\nimport heapq\nimport sys\ninput=sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    q=[]\n    for i in range(n):\n        heapq.heappush(q,arr[i])\n    pos=0\n    cnt=0\n    ans=[]\n    while pos<n-2:\n        tmp=heapq.heappop(q)\n        if arr[pos]==tmp:\n            pos+=1\n            continue\n        else:\n            tpos=pos+arr[pos:].index(tmp)\n            while tpos-pos>=2:\n                cnt+=1\n                tpos-=2\n                ans.append(tpos+1)\n                arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+2],arr[tpos],arr[tpos+1]\n            if tpos-pos==1:\n                cnt+=2\n                tpos-=1\n                ans.append(tpos+1)\n                ans.append(tpos+1)\n                arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+1],arr[tpos+2],arr[tpos]\n            pos+=1\n    if arr[n-2]<=arr[n-1]:\n        print(cnt)\n        print(*ans)\n    else:\n        ttpos=-1\n        for i in range(n-2,-1,-1):\n            if arr[i]==arr[i+1]:\n                ttpos=i\n                break\n        if ttpos==-1:\n            cnt+=1\n            ans.append(n-2)\n            arr[n-3],arr[n-2],arr[n-1]=arr[n-1],arr[n-3],arr[n-2]\n            if arr[n-3]<=arr[n-2]<=arr[n-1]:\n                print(cnt)\n                print(*ans)\n            else:\n                cnt+=1\n                ans.append(n-2)\n                arr[n-3],arr[n-2],arr[n-1]=arr[n-1],arr[n-3],arr[n-2]\n                if arr[n-3]<=arr[n-2]<=arr[n-1]:\n                    print(cnt)\n                    print(*ans)\n                else:\n                    print(-1)\n        else:\n            cnt+=2\n            ans.append(ttpos+1)\n            ans.append(ttpos+1)\n            arr[ttpos],arr[ttpos+1],arr[ttpos+2]=arr[ttpos+1],arr[ttpos+2],arr[ttpos]\n            q=[]\n            for i in range(n):\n                heapq.heappush(q,arr[i])\n            pos=0\n            while pos<n-2:\n                tmp=heapq.heappop(q)\n                if arr[pos]==tmp:\n                    pos+=1\n                    continue\n                else:\n                    tpos=pos+arr[pos:].index(tmp)\n                    while tpos-pos>=2:\n                        cnt+=1\n                        tpos-=2\n                        ans.append(tpos+1)\n                        arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+2],arr[tpos],arr[tpos+1]\n                    if tpos-pos==1:\n                        cnt+=2\n                        tpos-=1\n                        ans.append(tpos+1)\n                        ans.append(tpos+1)\n                        arr[tpos],arr[tpos+1],arr[tpos+2]=arr[tpos+1],arr[tpos+2],arr[tpos]\n                    pos+=1\n            print(cnt)\n            print(*ans)", "#!/usr/bin/env python3\n\nimport heapq\nimport sys\ninput=sys.stdin.readline\n\ndef shift(k,arr):\n    arr[k],arr[k+1],arr[k+2]=arr[k+2],arr[k],arr[k+1]\n\ndef solve(pos,cnt,ans,arr):\n    n=len(arr)\n    q=[]\n    for i in range(n):\n        heapq.heappush(q,arr[i])\n    while pos<n-2:\n        tmp=heapq.heappop(q)\n        if arr[pos]==tmp:\n            pos+=1\n            continue\n        else:\n            tpos=pos+arr[pos:].index(tmp)\n            while tpos-pos>=2:\n                cnt+=1\n                tpos-=2\n                ans.append(tpos+1)\n                shift(tpos,arr)\n            if tpos-pos==1:\n                cnt+=2\n                tpos-=1\n                ans.append(tpos+1)\n                ans.append(tpos+1)\n                shift(tpos,arr)                \n                shift(tpos,arr)\n            pos+=1\n    return cnt,ans\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    cnt,ans=solve(0,0,[],arr)\n    if arr[n-2]<=arr[n-1]:\n        print(cnt)\n        print(*ans)\n    else:\n        ttpos=-1\n        for i in range(n-2,-1,-1):\n            if arr[i]==arr[i+1]:\n                ttpos=i\n                break\n        if ttpos!=-1:\n            cnt+=2\n            ans.append(ttpos+1)\n            ans.append(ttpos+1)            \n            shift(ttpos,arr)\n            shift(ttpos,arr)\n            cnt,ans=solve(0,cnt,ans,arr)\n            print(cnt)\n            print(*ans)\n        else:\n            cnt+=1\n            ans.append(n-2)\n            shift(n-3,arr)\n            if arr[n-3]<=arr[n-2]<=arr[n-1]:\n                print(cnt)\n                print(*ans)\n            else:\n                cnt+=1\n                ans.append(n-2)\n                shift(n-3,arr)\n                if arr[n-3]<=arr[n-2]<=arr[n-1]:\n                    print(cnt)\n                    print(*ans)\n                else:\n                    print(-1)", "for _ in range(int(input())):\n    n,l,out = int(input()),list(map(lambda x: int(x)- 1, input().split())),[];ll = sorted([(l[i], i) for i in range(n)]);swap = (-1,-1);newl = [0]*n    \n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])  \n    for i in range(n):newl[ll[i][1]] = i\n    l,swapN = newl,0;works,done = True,False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]       \n    while not done:\n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n        if done:break\n        for find in range(i + 1, n):\n            if l[find] == i:break\n        while find - i >= 2:find -= 2;shift(find)\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n    if works:print(len(out));print(' '.join(map(str,out)))\n    else:print(-1)         ", "res, a = [], []\n\n\ndef rot(i: int) -> None:\n    nonlocal res, a\n    res.append(i + 1)\n    a[i], a[i+1], a[i+2] = a[i+2], a[i], a[i+1]\n    #print(f'Rotation on {i}: {a}')\n\n\ndef solve():\n    nonlocal res, a\n    res.clear()\n    input()\n    a = [int(i) for i in input().split()]\n    s = sorted(a)\n    for i in range(len(a) - 2):\n        if a[i] == s[i]:\n            continue\n        j = a.index(s[i], i, len(a))\n        while j != i:\n            if j - i >= 2:\n                j -= 2\n                rot(j)\n            else:\n                rot(i)\n                j += 1\n    if any(a[i] > a[i + 1] for i in range(len(a) - 1)):\n\n        for i in range(len(a) - 3, -1, -1):\n            while a[i + 2] < a[i] or a[i + 2] < a[i + 1]:\n                rot(i)\n\n        if all(a[i] != a[i + 1] for i in range(len(a) - 2)):\n            print(-1)\n            return\n\n    print(len(res))\n    print(' '.join(str(i) for i in res))\n\n\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()\n", "for _ in range(int(input())):\n    n,l,out = int(input()),list(map(lambda x: int(x)- 1, input().split())),[];ll = sorted([(l[i], i) for i in range(n)]);swap = (-1,-1);newl = [0]*n    \n    for i in range(n - 1):\n        if ll[i][0] == ll[i + 1][0]:swap = (ll[i][1],ll[i+1][1])  \n    for i in range(n):newl[ll[i][1]] = i\n    l,swapN = newl,0;works,done = True,False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:swapN += 1\n    if swapN & 1:l[swap[0]],l[swap[1]] = l[swap[1]],l[swap[0]]\n    def shift(i):out.append(i + 1);l[i],l[i+1],l[i+2] = l[i+2],l[i],l[i+1]       \n    while not done:\n        for i in range(n):\n            if l[i] != i:break\n        else:done = True\n        if done:break\n        for find in range(i + 1, n):\n            if l[find] == i:break\n        while find - i >= 2:find -= 2;shift(find)\n        if find - i == 1:\n            if find <= n - 2:shift(find - 1);shift(find - 1)\n            else:works = False;break\n    if works:print(len(out));print(' '.join(map(str,out)))\n    else:print(-1)", "import collections\n\nline = input()\nt = int(line)\nfor _i in range(t):\n    \n    line = input()\n    n = int(line)\n    line = input()\n    nums = [int(i) for i in line.split(' ')]\n    \n    res = collections.deque()\n    for i in range(n - 2):\n        for j in range(n - 3, i-1, -1):\n            if nums[j + 2] < nums[j + 1] and nums[j + 2] < nums[j]:\n                a, b, c = nums[j + 2], nums[j + 1], nums[j]\n                nums[j], nums[j + 1], nums[j + 2] = a, c, b\n                res.append(j + 1)\n        if nums[i] > nums[i + 1]:\n            a, b, c = nums[i], nums[i + 1], nums[i + 2]\n            nums[i], nums[i + 1], nums[i + 2] = b, c, a\n            res.append(i + 1)\n            res.append(i + 1)\n        \n        # print(nums)\n    if nums[n - 3] == nums[n - 1] and nums[n - 2] > nums[n - 1]:\n        res.append(n - 2)\n        nums[n - 1], nums[n - 2] = nums[n - 2], nums[n - 1]\n    if nums[-1] < nums[-2]:\n        i = n - 2\n        while i >= 0 and nums[i] != nums[i + 1]:\n            i -= 1\n        if i < 0:\n            print(-1)\n        else:\n            while i < n - 2:\n                res.append(i + 1)\n                res.append(i + 1)\n                i += 1\n            print(len(res))\n            for i in res:\n                print(i, end= ' ')\n            print()\n    else:\n        print(len(res))\n        for i in res:\n            print(i, end= ' ')\n        print()\n\n", "def swap(i,j):\n    arr[i],arr[j]=arr[j],arr[i]\ndef inversion(li):\n    n=len(li)\n    inversions=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(li[j]<li[i]):\n                inversions+=1\n    return inversions\ndef right_shift(i):\n    arr[i],arr[i+1],arr[i+2]=[arr[i+2],arr[i],arr[i+1]]\nt=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    arr=[int(i) for i in l]\n    arr1=list(arr)\n    lfi=[]\n    lo=[]\n    for i in range(n):\n        lo.append((arr[i],i))\n    lo.sort()\n    hashi=dict()\n    for i in range(n):\n        hashi[lo[i][1]]=i+1\n    arr=[]\n    for i in range(n):\n        arr.append(hashi[i])\n    poss=1\n    if(inversion(arr)%2):\n        for i in range(n):\n            for j in range(i+1,n):\n                if(arr1[i]==arr1[j]):\n                    swap(i,j)\n                    poss=0\n                    break\n            if(poss==0):\n                break\n    z=list(arr)\n    z.sort()\n    for j in range(n):\n        for i in range(n-2-j):\n            maxa=max(arr[i],arr[i+1],arr[i+2])\n            if(maxa==arr[i+2]):\n                continue\n            elif(maxa==arr[i+1]):\n                lfi.append(i)\n                right_shift(i)\n            else:\n                lfi.append(i)\n                lfi.append(i)\n                right_shift(i)\n                right_shift(i)\n    if(arr==z):\n        print(len(lfi))\n        for i in lfi:\n            print(i+1,end=\" \")\n        print()\n    else:\n        print(-1)", "import sys\n\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nfor _ in range(II()):\n    def rot(top):\n        aa[top],aa[top+1],aa[top+2]=aa[top+2],aa[top],aa[top+1]\n\n    n=II()\n    aa=LI()\n    bb=aa[:]\n    bb.sort()\n    ans=[]\n    for i in range(n-2):\n        j=i\n        while aa[j]!=bb[i]:j+=1\n        while j>i:\n            if i==j-1:\n                rot(i)\n                rot(i)\n                ans+=[i+1,i+1]\n                j=i\n            else:\n                rot(j-2)\n                ans+=[j-1]\n                j-=2\n            #print(i,aa,bb,ans)\n\n    if bb[-1]==aa[-1]:\n        print(len(ans))\n        print(*ans)\n    else:\n        for i in range(n-3,-1,-1):\n            rot(i)\n            ans+=[i+1]\n            if aa[i]==aa[i+1]:\n                print(len(ans))\n                print(*ans)\n                break\n        else:print(-1)\n", "res, a = [], []\n \n \ndef rot(i: int) -> None:\n    nonlocal res, a\n    res.append(i + 1)\n    a[i], a[i+1], a[i+2] = a[i+2], a[i], a[i+1]\n    #print(f'Rotation on {i}: {a}')\n \n \ndef solve():\n    nonlocal res, a\n    res.clear()\n    input()\n    a = [int(i) for i in input().split()]\n    s = sorted(a)\n    for i in range(len(a) - 2):\n        if a[i] == s[i]:\n            continue\n        j = a.index(s[i], i, len(a))\n        while j != i:\n            if j - i >= 2:\n                j -= 2\n                rot(j)\n            else:\n                rot(i)\n                j += 1\n    if any(a[i] > a[i + 1] for i in range(len(a) - 1)):\n \n        for i in range(len(a) - 3, -1, -1):\n            while a[i + 2] < a[i] or a[i + 2] < a[i + 1]:\n                rot(i)\n \n        if all(a[i] != a[i + 1] for i in range(len(a) - 2)):\n            print(-1)\n            return\n \n    print(len(res))\n    print(' '.join(str(i) for i in res))\n \n \nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()"]