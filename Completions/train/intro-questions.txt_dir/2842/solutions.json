["def coordinates(p1,p2, precision = 0):\n    return round(sum( (b-a)**2 for a,b in zip(p1,p2) )**.5, precision)", "import math\n\ndef coordinates(p1, p2, precision=0):\n    return round(math.hypot(p1[0] - p2[0], p1[1] - p2[1]), precision)", "def coordinates(a, b, p = 0):\n    return round(sum((i - j) ** 2 for i, j in zip(a, b)) ** 0.5, p)", "from math import hypot\n\ndef coordinates(p1, p2, r=0):\n    x1, y1 = p1\n    x2, y2 = p2\n    return round(hypot(x2 - x1, y2 - y1), r)\n    \n# one-liner:\n#   return round(sum((c2 - c1)**2 for c1, c2 in zip(p1, p2))**0.5, r)\n", "import math\n\ndef coordinates(p1,p2,p=0):\n    return round(math.hypot(abs(p1[0]-p2[0]), abs(p1[1] - p2[1])), p)", "from math import hypot\n\ndef coordinates(p1, p2, precision=0):\n    return round(hypot(p1[0] - p2[0], p1[1] - p2[1]), precision)", "import math\ndef coordinates(p1,p2, d=0):\n    formula = math.sqrt((p2[0] - p1[0])** 2 + (p2[1] - p1[1])**2)\n    distance = round(formula, d)\n    \n    return distance\n", "coordinates=lambda p1,p2,p=0: round(((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5,p)", "def coordinates(p1,p2,prec=0):\n    return round( ( (p2[1]-p1[1])**2 + (p2[0]-p1[0])**2 )**0.5,prec)", "from math import sqrt\n\ndef coordinates(p1, p2, precision=0):\n    x1, y1 = p1\n    x2, y2 = p2\n    distance = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    return round(distance, precision)"]