["def nth_even(n):\n    return 2 * (n - 1);", "def nth_even(n):\n    return n * 2 - 2", "def nth_even(n):\n    return (n-1)*2;", "nth_even = lambda x: 2 * (x - 1)", "nth_even = lambda n: (n - 1) * 2\n", "def nth_even(n):\n    '''import numpy as np\n    np.even1=0\n    #even1 = long(even1)\n    for i in range(n):\n        np.even1 = np.even1+2\n        n=n-1'''\n  \n    return n*2-2\n", "def nth_even(n):\n  if n == 0:\n    print(\"zero nie jest odd ani even\")\n  return int(2 * n - 2)\n  \n# przeblysk- pokombinowalem i sam wymyslilem wzor na nth number :)))\n", "def nth_even(n):\n    maListe = range(n * 2)\n    for elem in maListe[::-1]:\n        if elem % 2 == 0:\n            return elem", "def nth_even(n):\n    number = n*2 - 2\n    return number", "def nth_even(n):\n    return 2 * n - 2", "def nth_even(n):\n    return ~-n<<1", "def nth_even(n):\n    x = range(0, 100000000000, 2)\n    \n    return x[n-1]", "nth_even = lambda n:(n<<1)-2", "nth_even = lambda n: n - 1 << 1", "#enum = []\n#for n in l:\n#        if n % 2 == 0:\n#            enum.append(n)\ndef nth_even(n):\n    x = 0\n    x = n\n    x = x * 2 - 2\n    return x\n#    i = -1\n#    x = 0\n#    y = 0\n#    j = -1\n#    enum = []\n#    while j < 6500000:\n#        j += 1\n#        if j & 1 == 0:\n#            enum.append(j)        \n#    while x < n:\n#        i = i + 1\n#        if i & 1 == 0:\n#            x = x + 1\n#            y = i\n#            continue\n#    return y;    \n", "def nth_even(n):\n    return(int(n*2)-2)\n", "def nth_even(n): return (n-1)*2    # So simple :D", "def nth_even(n):\n    if n == 1:\n      return 0\n      \n    else:\n      return n + (n - 2)", "def nth_even(n):\n    return 2 * ~-n", "def nth_even(n):\n    return 2*(n-1)\n#     arr = []\n#     for i in range(0,2*n+1):\n#         if i%2==0:\n#             arr.append(i)\n#     return arr[n-1]\n# 0, 2, 4, 6, 8, 10\n# 2*(n-1)\n", "def nth_even(n):\n    return (n - 1) * 2 if n else 0", "def nth_even(n):\n    #your code here\n    x=(n-1)*2\n    return(x)", "def nth_even(n):\n    n1= n * 2   \n    return (n1-2)", "def nth_even(n):\n#     Q = [x for x in range(n*8) if x % 2 == 0]\n#     return Q[n-1]\n    if n == 1:\n        return 0\n    elif n >= 2:\n        return n+(n-2)\n", "def nth_even(n):\n    return range(0, 1000000000000, 2)[n -1]", "def nth_even(n):\n    return 2 * (n - 1)\n    # assume the result is part of a list of multiples of 2. The nth element is than the index of that list\n", "def nth_even(n):\n    a = range(0,n*2, 2)\n    return a[-1]", "def nth_even(num):\n    return 2 * (num-1)", "def nth_even(n):\n    nth = n - 1\n    return nth * 2", "def nth_even(n):\n    return range(0, 2*n+1, 2)[n-1]", "def nth_even(n):\n    s = n-1\n    return s*2\n", "def nth_even(n):\n    result = range(n * 2)\n    for elem in result[::-1]:\n        if elem % 2 == 0:\n            return elem", "import unittest\n\n\ndef nth_even(n):\n    return (n - 1) * 2\n    \n    \nclass TestNthEven(unittest.TestCase):\n    def test_should_0_when_given_n_is_1(self):\n        n = 1\n        actual = nth_even(n)\n        self.assertEqual(actual, 0)\n\n    def test_should_4_when_given_n_is_3(self):\n        n = 3\n        actual = nth_even(n)\n        self.assertEqual(actual, 4)\n", "def nth_even(n):\n    return [i for i in range(n * 2 - 50, n * 2, 2)][-1]", "def nth_even(n):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return n\n    else:\n        return n * 2 - 2 ", "def nth_even(n):\n    for l in range(0,2*n):\n        return n*2-2", "def nth_even(n):\n    return 0 if n==1 else (n-1)*2", "def nth_even(n):\n    return 2 * (n - 1)\n\n\n# def nth_even(n):\n#     return n * 2 - 2\n\n\n# def nth_even(n):\n#     return (n-1)*2\n", "def nth_even(n):\n    return n*2-1 if (n*2-1) % 2 == 0 else n*2-2", "def nth_even(n):\n    return (0 + n * 2) -2\n", "def nth_even(n):\n    return (n-1)*2# here", "def nth_even(n):\n    return (n * 2) -2 \n#    if n = 0:\n #       return 0\n  #  elif n == 1:\n   #     return 0\n#    elif n == 2:\n #       return 2\n  #  elif n == 3:\n   #     return 3\n #   elif n 4:\n  #      return 6\n   # elif\n", "def nth_even(n):\n    a1 = 0\n    d = 2 \n    return a1+d*(n-1)", "def nth_even(n):\n    a = range(0,10000000000)\n    return a[n*2-2]", "def nth_even(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    else:\n        return 2*n-2", "def nth_even(n):\n    #your code here\n    if n<1:\n        return 0\n    else:\n        return 2*(n-1)", "def nth_even(n):\n    return range(0,2*n,2)[n-1]", "def nth_even(n):\n    if n == 3:\n        return 4\n    else:\n        return (n//2) * 2 if n < 3 else (n * 2) - 2", "\ndef nth_even(n):\n    #ensuring we have the right input\n    if not isinstance(n, int):\n         raise TypeError(\"sorry, only intergers allowed - try again\") \n    if n <1:\n        raise ValueError(\"sorry, enter a number larger than 0\")\n\n    #this is the formula for showing the nth even number\n    return n*2-2", "def nth_even(n):\n    return range(n*2)[-2]", "def nth_even(n):\n    rs = 0\n    rs = n * 2 - 2\n    return rs\n", "def nth_even(n):\n    return 0 if n < 2 else n if n < 3 else n*2-2", "def nth_even(n):\n    return (n - 1) * 2\n    #return lst[n]\n", "def nth_even(n):\n  \n  #l =[i for i in range (0,n*2,2)]; \n  # return l[-1:n]                  \n   return n*2-2\n\n#print(nth_even(200))\n", "def nth_even(n):\n  return 0 if n < 1 else 2 * (n-1)", "def nth_even(n):\n    #new_lst = []\n    #for i in range(2*n):\n     # if i% 2 == 0:\n       # new_lst.append(i)\n    #return(new_lst[-1])\n    return (2 * n) - 2  ", "def nth_even(n):\n    if n < 2: return 0\n    else: return n*2-2", "nth_even = lambda x:(x-1)<<1", "def nth_even(n):\n    #your code here\n  return ((n*2)-2)\n  \n  \nnth_even(5)\n", "def nth_even(n):\n    #your code here\n    if(n==1):\n        return 0\n    if(n==2):\n        return 2\n    if(n>2):\n        m=n-2\n        sum= n+m\n        return sum", "def nth_even(n):\n    return (n*2)-2 if n!=1 else 0", "def nth_even(n):\n    return (n-1)*2+0", "def nth_even(n):\n# nthEven(1) //=> 0, the first even number is 0\n# nthEven(3) //=> 4, the 3rd even number is 4 (0, 2, 4)\n\n# nthEven(100) //=> 198\n# nthEven(1298734) //=> 2597466\n    return 2*(n-1)", "def nth_even(n):\n    return range(0,10**10,2)[n-1]", "def nth_even(n):\n    return 0 + 2*n - 2", "def nth_even(n):\n    return list(range(0, n*2+1, 2))[n-1]\n    #Makes a list of numbers that start at zero, increment\n    #by 2, and stops at n*2. The index is one less than\n    #the position requested.\n", "def nth_even(n):\n    return n*3 - n - 2", "def nth_even(n):\n    x = n * 2 - 1\n    return x if x % 2 == 0 else x -1", "def nth_even(n):\n    #othr way to find even\n    return (2*n)-2", "def nth_even(n):\n    #your code here\n    # (0, 2, 4, 6, 8)\n    # (1, 2, 3, 4, 5)\n    return 2 * n - 2 ", "def nth_even(n):\n    #your code her\n    return 2*n-2", "def nth_even(n):\n    s=(2*n)-2\n    return s", "def nth_even(n):\n    #your code here\n    array =list(range(0,n*2,2))\n    if array[n-1]%2==0:\n        return array[n-1]\n         \n          \n    \n            \n", "def nth_even(n):\n    if n == 1: return 0\n    elif n == 2: return 2\n    return n*2-2\n", "def nth_even(n):\n    return abs(n*2 - 2)", "def nth_even(n):\n    \n    \n    return 0 if n == 0 else n * 2 -2\n    \n   \n", "def nth_even(n):\n    #even... 0,2,4,6,8,10,12,14,16,18,20...\n    return (n*2)-2", "def nth_even(n):\n    return max((n-1) * 2, 0)", "def nth_even(n):\n    arr = range(0, n * 2, 2)\n    return arr[len(arr) - 1]", "def nth_even(n):\n    even = 2*(n-1)\n    return even", "def nth_even(n):\n    if n==1:\n        return 0\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    else:\n        return n*2-2\n", "def nth_even(n):\n    return 2*(n-1) # Arithmetic sequence (arithmetic progression)", "def nth_even(n):\n    return 2 * (n - 1)\nprint(nth_even(3))", "def nth_even(n):\n    if n * 2 % 2 == 0:\n        return (n * 2) - 2\n    else:\n        return (n * 2) - 1 ", "def nth_even(n):\n    \n    for i in range(n-1,n):\n        return i*2\n        \n        \n        \n    #your code her\n", "def nth_even(n):\n    number = (n-1)*2\n    return number\n    \n    \n  \n    \n", "def nth_even(n):\n    if n == 1:\n        return 0\n    elif n > 1:\n        return n*2-2", "def nth_even(n):\n    evenNum = (n - 1) * 2\n    return evenNum\n", "def nth_even(n):\n   return (n-1)*2 #Airthmetic Progression", "def nth_even(n):\n    result = n * 2\n    return result - 2", "def nth_even(n):\n    #your code here\n    #return (list(range(0,n*2,2))[n-1])\n      return n*2-2", "nth_even = lambda n: n*2 -2\n# def nth_even(n):\n#     #your code here\n", "def nth_even(n):\n    '''\n    input: n, positive integer\n    output: n-th even number (0 is first, 2 is second, 4 is third etc.)\n    '''\n    return (n - 1) * 2", "def nth_even(n):\n    result = 2 * n - 2\n    return result", "def nth_even(n):\n    n = (n-1)*2\n    return n", "def nth_even(n):\n    return 4 *(n-((n+1)/2))\n", "def nth_even(n):\n    if (n != 0):\n        return (2 * n - 2)", "def nth_even(n):\n    even = 2 * n - 2\n    return even\n", "def nth_even(n):\n    if n>=3:\n        return (2*n)-2\n    \n    if n==2:\n        return 2\n    \n    if n==1:\n        return 0"]