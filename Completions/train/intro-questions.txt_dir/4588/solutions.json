["def controller(events):\n\n    out, state, dir, moving = [], 0, 1, False\n    \n    for c in events:\n        if   c == 'O':      dir *= -1\n        elif c == 'P':      moving = not moving\n        if moving:          state += dir\n        if state in [0,5]:  moving, dir = False, 1 if state == 0 else -1\n        out.append(str(state))\n        \n    return ''.join(out)", "def controller(events):\n    state = 0\n    movement = False\n    direction = True\n    output = ''\n    for event in events:\n        if event is 'P':\n            movement = not movement\n        if event is 'O':\n            direction = not direction\n        state = state + (-1, 1)[direction] * movement\n        if state in (0, 5):\n            direction = not state\n            movement  = False\n        output += str(state)\n    return output", "def controller(s):\n    current, pause, door, output, i = 0, 0, 0, [], 0\n    for symbol in s:\n        if symbol == 'P':\n            if pause : pause = False\n            elif not door and not current : door = True\n            elif door and current == 5 : door = False\n            else : pause = True\n        elif symbol == 'O' : door ^= 1\n        current +=[[[0,-1][current>0],[0,1][current<5]][door],0][pause]\n        output.append(str(current))\n    return ''.join(output)", "def controller(events):\n    position, move, resume, positions = 0, 0, 0, []\n    for event in events:\n        if event == \"P\":\n            if position == 0:\n                move = 1\n            elif position == 5:\n                move = -1\n            elif move:\n                resume, move = move, 0\n            else:\n                move, resume = resume, 0\n        elif event == \"O\":\n            move = -move\n        position = min(5, max(0, position + move))\n        if position == 0 or position == 5:\n            move = 0\n        positions.append(str(position))\n    return \"\".join(positions)", "def controller(events):\n    result = []\n    pos, moving, direction = 0, False, 1\n    for e in events:\n        if e == 'P':\n            moving = not moving\n        elif e == 'O':\n            direction *= -1\n        if moving:\n            pos += direction\n            if not (0 < pos < 5):\n                direction *= -1\n                moving = False\n        result.append(pos)\n    return ''.join(map(str, result))\n", "class State:\n    def __init__(self):\n        pass\nclass PausedIncreasing(State):\n    @classmethod\n    def handle(cls, e, val):\n        nextstate = cls\n        if e == '.':\n            pass\n        elif e == 'P':\n            val += 1\n            nextstate = MovingIncreasing\n        elif e == 'O':\n            nextstate = PausedDecreasing\n        return val, nextstate\nclass PausedDecreasing(State):\n    @classmethod\n    def handle(cls, e, val):\n        nextstate = cls\n        if e == '.':\n            pass\n        elif e == 'P':\n            val -= 1\n            nextstate = MovingDecreasing\n        elif e == 'O':\n            nextstate = PausedIncreasing\n        return val, nextstate\nclass MovingIncreasing(State):\n    @classmethod\n    def handle(cls, e, val):\n        nextstate = cls\n        if e == '.':\n            val += 1\n        elif e == 'P':\n            nextstate = PausedIncreasing\n        elif e == 'O':\n            val -= 1\n            nextstate = MovingDecreasing\n        return val, nextstate\nclass MovingDecreasing(State):\n    @classmethod\n    def handle(cls, e, val):\n        nextstate = cls\n        if e == '.':\n            val -= 1\n        elif e == 'P':\n            nextstate = PausedDecreasing\n        elif e == 'O':\n            val += 1\n            nextstate = MovingIncreasing\n        return val, nextstate\n\nclass GarageDoor:\n    def __init__(self):\n        self.val = 0\n        self.state = PausedIncreasing\n    def handle(self, e):\n        self.val, self.state = self.state.handle(e, self.val)\n        if self.val == 0:\n            self.state = PausedIncreasing\n        elif self.val == 5:\n            self.state = PausedDecreasing\n        return str(self.val)\n    def get_output(self, events):\n        return ''.join(str(self.handle(e)) for e in events)\n\ndef controller(events):\n    gd = GarageDoor()\n    return gd.get_output(events)", "def controller(events: str):\n    positions = []\n    p = 0\n    movement = False\n    up = True\n    for e in events:\n        if e == 'P':\n            movement = not movement\n        if e == 'O' and movement:\n            up = not up\n        if movement:\n            if up:\n                p += 1\n                if p == 5:\n                    up = False\n                    movement = False\n            else:\n                p -= 1\n                if p == 0:\n                    up = True\n                    movement = False\n        positions += [p]\n    return ''.join(str(p) for p in positions)", "def controller(events):\n    r=''\n    h=o=p=0\n    for c in events:\n        if c=='P':\n            if not o:\n                o=1 if h==0 else -1\n            else:p^=1\n        elif c=='O':\n            o=-o\n        if not p:\n            h+=o\n            if h in(0,5):o=0\n        r+=f'{h}'\n    return r", "def controller(events):\n    d,m,opening=0,0,True\n    r=''\n    for e in events:\n        if e=='P':\n            if m==0:\n                if d==0:\n                    m=1\n                    opening=True\n                elif d==5:\n                    m=-1\n                    opening=False\n                elif opening:\n                    m=1\n                else:\n                    m=-1\n            else:\n                m=0\n        elif e=='O':\n            opening=not opening\n            m*=-1\n        d+=m\n        if (m==1 and d==5) or (m==-1 and d==0):\n            m=0\n        r+=str(d)\n    return r", "def controller(s):\n    h,v,r,m = 0,0,'',1\n    for i in s:\n        if i == 'P':\n            v = m if v==0 else -1 if h==5 else 1 if h==0 else 0\n            \n        if i =='O':\n            v = -1 if v>0 else 1 if v<0 else 0\n\n        if v < 0:\n            m = -1\n        if v > 0:\n            m = 1\n\n        h += v\n        h = 0 if h<0 else 5 if h>5 else h\n        r += str(h)\n    return r"]