["from collections import Counter\n\n\ndef get_strings(city):\n    return \",\".join(f\"{char}:{'*'*count}\" for char, count in Counter(city.replace(\" \", \"\").lower()).items())", "from collections import Counter\n\n\ndef get_strings(city):\n    return \",\".join(\n        f\"{char}:{'*'*count}\"\n        for char, count in list(Counter(city.replace(\" \", \"\").lower()).items())\n        if char.isalpha()\n    )\n", "def get_strings(city):\n    city = city.lower()\n    result = \"\"\n    for i in city:\n        if i in result:\n            pass\n        elif i == \" \":\n            pass\n        else:\n            result += i + \":\" + (\"*\" * city.count(i)) + \",\"\n\n    return result[:-1]", "def get_strings(city):\n    city = city.lower().replace(\" \", \"\")\n    return \",\".join(sorted([f\"{i}:{city.count(i)*'*'}\" for i in set(city)], key=lambda x:city.index(x[0])))", "from collections import Counter\n\ndef get_strings(city):\n    c = Counter(filter(str.isalpha, city.lower()))\n    return ','.join(f'{ k }:{ \"*\"*v }' for k,v in c.items())", "def get_strings(s):\n    return ','.join(f\"{i}:{'*'*s.lower().count(i)}\" for i in dict.fromkeys(s.replace(' ','').lower()))", "def get_strings(city):\n    city=city.lower().replace(' ','')\n    return ','.join(f'{c}:'+'*'*(city.count(c)) for c in dict.fromkeys(city))", "from collections import Counter\ndef get_strings(city):\n    lst = []\n    for key, value in dict(Counter(city.replace(' ', '').lower())).items():\n        lst.append(key+':'+'*'*value)\n    return ','.join(lst)", "import re\n\ndef get_strings(city):\n    cache = {}\n    r_string = ''\n    counter = 0\n    city = re.sub(' ','', city)\n    \n    for letter in city.lower():\n        if letter not in cache:\n            cache[letter] = 0 \n            cache[letter] +=1\n        else:\n            cache[letter] +=1\n    \n    for k,v in cache.items():\n        if counter < len(cache)-1:\n            r_string += k + ':' + ('*' * v)+','\n            counter += 1\n        elif counter < len(cache):\n            r_string += k + ':' + ('*' * v)\n    return r_string", "from collections import Counter\n\n\ndef get_strings(city):\n    return \",\".join(\n        f\"{char}:{'*'*count}\"\n        for char, count in Counter(city.replace(\" \", \"\").lower()).items()\n        if char.isalpha()\n    )", "def get_strings(city):\n    city = list(city.lower())\n    con = {}\n    for char in city:\n        if char == \" \":\n            pass\n        else:\n            con[char] = city.count(char) * \"*\"\n    first = True\n    result = \"\"\n    for item in con.keys():\n        if first == True:\n            first = False\n            result+= item + \":\" + con.get(item)\n        else:\n            result+= \",\" + item + \":\" + con.get(item)\n    return result", "import json\ndef get_strings(city):\n    city = city.lower()\n    city = city.replace(\" \",\"\")\n    c = {}\n    for i in city:\n        if i in c:\n            c[i] += \"*\"\n        else:\n            c[i] = \"*\"\n    \n    final = json.dumps(c)\n    final = (final.replace(\"{\",\"\").replace(\"}\",\"\").replace(\" \",\"\").replace('\"',\"\"))\n            \n    return final", "def get_strings(city):\n    index = 0\n    string = ''\n    city = city.lower()\n    city = city.replace(' ', '')\n    for i in city:\n        asterisks = city.count(i)\n        if i in string:\n            index = index + 1\n        else:\n            if index == (len(city) - 1) and i not in string:\n                string += i.lower() + ':' + ('*' * asterisks)\n            if index != (len(city) - 1):\n                string += i.lower() + ':' + ('*' * asterisks) +','\n                index = index + 1\n    if string[-1] == ',':          \n        lst = list(string)\n        lst[-1] = ''\n        new = ''.join(lst)\n        return new\n    return string\n        \n", "from collections import Counter\ndef get_strings(city):\n    return ','.join(f'{e}:{\"*\"*c}' for e,c in Counter(city.lower()).items() if e.isalpha())", "from collections import Counter\n\ndef get_strings(city):\n    return ','.join(f\"{k}:{'*'*v}\" for k,v in  Counter(filter(str.isalpha, city.lower())).items())", "def get_strings(city):\n    s, city = str(), ''.join(city.lower().split())\n    for i in city:\n        if i not in s:\n            s+= i+':'+'*'*city.count(i)+','\n    return s[:-1]", "from collections import Counter\n\ndef get_strings(word):\n    return ','.join(\n        f'{letter}:{\"*\" * count}'\n        for letter, count in Counter(word.lower()).items()\n        if letter.isalpha())", "from collections import Counter\ndef get_strings(city):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    city_str = ''\n    city_dict = Counter(city.lower())\n    for key in city_dict:\n        if key in alphabet:\n            city_str += key + ':' + '*' * city_dict[key] + ','\n    return city_str[:-1]", "def get_strings(city):\n    \n    ciu = {}\n    \n    for letra in city.lower().replace(\" \",\"\"):\n        if letra not in ciu:\n            ciu[letra] = \"*\"\n        else: \n            ciu[letra] += \"*\"\n    \n    \n    array = []\n    for clave in ciu:\n        \n        array.append(\"{}:{}\".format(clave, ciu[clave]))\n        \n    return \",\".join(array).replace(\" \",\"\")\n\n", "from collections import Counter\ndef get_strings(city):\n    return ','.join([k.lower() + ':' + '*'*v for k, v in Counter(city.lower()).items() if k.isalpha()])", "from collections import Counter\n\ndef get_strings(city):\n    return ','.join(\n        f'{letter}:{\"*\" * count}' \n        for letter, count in list(Counter(city.lower()).items())\n        if letter != ' '\n    )\n", "def get_strings(city):\n    counts = {}\n    \n    for c in city.lower():\n        if c.isalpha():\n            counts[c] = counts[c] + \"*\" if c in counts else \"*\"\n    \n    return \",\".join([f\"{c}:{a}\" for (c, a) in counts.items()])", "get_strings=lambda s:','.join(k+':'+s.lower().count(k)*'*'for k in dict.fromkeys(s.lower().replace(' ','')))", "def get_strings(city):\n    city = city.lower()\n    city = list(city)\n    dicti = {}\n    strres = \"\"\n\n    for i in city:\n        if ord(i) > 96 and ord(i) < 123:\n            if i in dicti:\n                dicti[i] += 1\n            else:\n                dicti[i] = 1\n    \n    for i in dicti:\n        strres = strres + i + \":\" + (\"*\"*dicti[i]) + \",\"\n        \n    strres = strres[:-1]\n\n    return strres\n", "def get_strings(city):\n    return \",\".join([i + \":\" + '*' * city.lower().count(i) for i in dict.fromkeys(city.lower().replace(' ', ''))])", "def get_strings(stra):\n    string = stra.lower()\n    dc = {}\n    for i in string:\n        if i == ' ':\n            continue\n        dc[i] = '*' * string.count(i)\n    \n    return ','.join([k + ':' + v for k, v in list(dc.items())])\n", "def get_strings(city):\n    res = {}\n    for i in city.lower().replace(' ',''):\n        res[i] = res.get(i, '') + '*'\n\n    return ','.join([f'{k}:{v}' for k,v in res.items()])", "from collections import OrderedDict\ndef get_strings(city):\n    values = [i for i in city.replace(' ','').lower()]\n    v2 = [j +':'+'*'*values.count(j) for j in values]\n    return ','.join(list(OrderedDict.fromkeys(v2)))", "\ndef get_strings(city):\n    city = city.lower()\n    city = city.replace(\" \",\"\")\n    cit_str = \"\"\n    usedletters=[]\n    for letter in city:\n        if letter in usedletters:\n            pass\n        else:\n            cit_str += letter + \":\"       \n            l_num = city.count(letter)\n            for num in range(0,l_num):\n                cit_str += \"*\"\n            cit_str += \",\"\n            usedletters.append(letter)\n    \n    return cit_str[:-1]", "get_strings = lambda city: \"\".join(list(dict.fromkeys([\"{}:{},\".format(i, \"*\" * city.lower().count(i)) for i in city.lower() if i != \" \"]))).rstrip(\",\")", "from collections import Counter\ndef get_strings(city):\n    return \",\".join([f'{k}:{v*\"*\"}' for k,v in Counter(city.lower()).items() if k.isalpha()])", "from collections import Counter\ndef get_strings(city):\n    d = dict(Counter(city.lower()))\n    ret = [f'{k}:{v*\"*\"}' for k,v in d.items() if k.isalpha()]\n    return \",\".join(ret)", "def get_strings(city):\n    city = city.lower().replace(' ', '')\n    dict = {}\n    for l in city:\n        if l in dict:\n            dict[l] += '*'\n        else:\n            dict[l] = '*'\n    result = ''\n    for i in dict:\n        result += i + ':' + dict[i] + ','\n    return result[:-1]", "def get_strings(city):\n    memory = {}\n\n    for char in city:\n        if char.isspace():\n            continue\n        char = char.lower()\n        if char not in memory.keys():\n            memory[char] = \"*\"\n        else:    \n            memory[char] +=  \"*\"\n\n    return_str = \"\"\n    for k,v in memory.items():\n        return_str += k + \":\" + v + \",\"\n       \n    return return_str[:-1]", "def get_strings(city):\n    city=city.lower()\n    storage=[]\n    hold=\"\"\n    for i in (city):\n        if i.isalpha()==True and str(i) not in hold:\n            storage.append(str(i)+':'+ (city.count(i))*'*')\n            hold+=str(i)\n    return \",\".join(storage)", "from collections import OrderedDict\n\ndef get_strings(city):\n    return ','.join(f'{letter}:{\"*\"*city.lower().count(letter)}' for letter in {letter:None for letter in city.lower() if letter.isalpha()})", "def get_strings(inputString):\n    checkDict={\n            \"letter\":[],\n            \"count\":[]\n        }\n    charArray = list(inputString.lower())\n    for i in charArray:\n        if i in checkDict['letter']:\n            k=checkDict['letter'].index(i)\n            checkDict['count'][k]= checkDict['count'][k]+'*'\n        else:\n            if (i.isalpha()):\n                checkDict['letter'].append(i)\n                checkDict['count'].append('*')\n    #print(checkDict) om de dictionary te bekijken\n    outputString = ''\n    for i in checkDict['letter']:\n        indexLetter = checkDict['letter'].index(i)\n        outputString = outputString + i + ':' + checkDict['count'][indexLetter] + ','\n    return outputString[:-1]", "def get_strings(city):\n    myMap = {}\n    for i in range(len(city)):\n        letter = city[i].lower()\n        if letter not in myMap:\n            myMap[letter] = 1\n        else:\n            myMap[letter] = myMap.get(letter)+1\n\n    myMap.pop(' ', None)\n\n\n    result = ''\n    for item in myMap:\n        result = result + item + ':'\n        for i in range(myMap.get(item)):\n            result += '*'\n        result += ','\n\n\n    return result[:-1]", "def get_strings(city):\n    letters = {}\n    for letter in city.lower():\n        if letter in letters:\n            value = letters[letter]\n            value += 1\n            letters.update({letter : value})\n        else:\n            letters.update({letter : 1})\n    result = \"\"\n    for letter in city.lower().replace(\" \", \"\"):\n        if letter not in result:\n            result += letter + ':' + '*' * letters[letter] + ',' \n    return result[:-1]", "from collections import Counter\n\n\ndef get_strings(city):\n    counting = Counter(city.lower()) # makes sure everything is lowercase\n    dict(counting)\n    output =''\n    #print(counting.items())\n    for key, value in counting.items():\n        \n        if len(key.strip()) > 0: #checks for whitespace, (0 is returned if there is whitespace)\n            output += key + ':' + ('*'*value)+',' #formats the output according to the task description\n  \n    output = output[:-1] #removes the last ','\n    print(output) \n    return output", "def get_strings(city):\n    result = ''\n    d = {}\n    for letter in city.lower():\n        d[letter] = d.get(letter, 0) + 1\n    for letter in city.lower().replace(' ',''): \n        if not letter in result: \n            result += letter+':'+'*'*d[letter]+','\n    return result[:-1]", "\ndef get_strings(city):\n    new = city.lower().replace(' ','')\n  \n    list = []\n    for x in new:\n        c = new.count(x)\n        y = x+\":\"+\"*\"*c\n        if y not in list:\n            list.append(y)\n            \n        s = ','.join(list)\n        \n    return s\n", "def get_strings(city):\n    \n    # convert to lower case alphabet\n    city_alpha = \"\".join(x.lower() for x in city if x.isalpha())\n    \n    # order of appearance and count\n    seen_cnt, order = {}, \"\"\n    for x in city_alpha :\n        if x not in seen_cnt :\n            seen_cnt[x]=1 \n            order += x\n        else :\n            seen_cnt[x] += 1\n    \n    # generate output\n    output = \"\"\n    for x in order :\n        output += \",\"+x+\":\"+\"*\"*seen_cnt[x]\n        \n    return output[1:]", "def get_strings(city):\n    res = {}\n    for x in city.lower():\n        if x.isalpha():\n            res[x] = city.lower().count(x)\n    return \",\".join([ \"%s:%s\" % (x,\"*\"*res[x]) for x in res])", "def get_strings(city):\n    \n    city = city.replace(' ','').lower()\n    city_string = ''\n    \n    for i in city:\n        if i in city_string:\n            pass\n        else:\n            city_string += i +':'+ ('*'* city.count(i))+','\n            \n    result = city_string[:-1]\n\n    return result  ", "from collections import Counter\n\ndef get_strings(city):\n    return ','.join([f\"{char}:{'*' * char_count}\" for (char, char_count) \n        in list(dict(Counter(city.lower())).items()) if char != ' ' ])\n", "def get_strings(city):\n    city = city.lower().replace(\" \", \"\")\n    arr = []\n    for el in city:\n        if el not in arr:\n            arr.append(el)\n    return \",\".join([f\"{el}:{city.count(el) * '*'}\" for el in arr])", "def get_strings(city):\n    city = city.lower().replace(\" \", \"\")\n    a = []\n    for el in city:\n        if el not in a:\n            a.append(el)\n    return \",\".join([f'{el}:{\"*\"*city.count(el)}' for el in a])", "def get_strings(city):\n    result = ''\n    city = city.lower().replace(' ', '')\n    for i in city:\n        if i not in result:\n            result += f'{i}:{\"*\"*city.count(i)},'\n    return result[:-1]", "def get_strings(city):\n    city=city.lower().strip()\n    letters_count={}\n    \n    def star_print(int):\n        star_string=\"\"\n        for i in range(int):\n            star_string=star_string+\"*\"\n        return star_string\n    \n    for letter in city:\n        if letter.isalpha():  \n            if letter in letters_count:\n                letters_count[letter]=letters_count[letter]+1\n            else:\n                letters_count[letter]=1\n                \n    ans_string=\"\"\n    for items in letters_count:\n        temp_string=str(items)+\":\"+star_print(letters_count[items])+\",\"\n        ans_string=ans_string+temp_string\n    ans_string=ans_string[0:-1]\n    return ans_string", "def c(lista):\n    x = lambda a:(a,lista.count(a))\n    return x\ndef star(n):\n    s = ''\n    for i in range(n):\n        s = s +'*'\n    return s\n        \ndef remover(lista):\n    l = []\n    for i in lista:\n        if i in l : continue\n        l.append(i)\n    return l \ndef get_strings(city):\n    letters = remover(list((city.lower())))\n    huss = list(map(c(city.lower()) , letters))\n    \n    s = ''\n    for letter,co in huss:\n        if letter == ' ': continue\n        s = s + letter + ':'+star(co)+',' \n        s = s.strip()\n    return s[:-1]\n    \n", "def get_strings(city):\n    \n    string = city.lower().replace(' ','')\n    output = \"\"\n    for char in string:\n        if char not in output:\n            print((string.count(char)))\n            output += (f'{char}:{\"*\" * string.count(char)},')\n            \n    return output[:-1]\n\n\n\n", "def get_strings(city):\n    soln = []\n    used = ''\n    for letter in city.lower():\n        if letter in used or letter == ' ':\n            continue\n        else:\n            solnstring = ''\n            solnstring += letter + ':'\n            for x in range(city.lower().count(letter)):\n                solnstring += '*'\n            soln.append(solnstring)\n            used += letter\n    return ','.join(soln)", "def get_strings(str):\n    output = \"\"\n    str = str.lower().replace(' ', '')\n    for char in str:\n        if char not in output:\n            output += (f'{char}:{\"*\" * str.count(char)},');\n    return output[:-1]", "def get_strings(city):\n    a=[]\n    b=[]\n    for i in city.lower(): \n        if i==\" \": continue\n        if i in a:\n            continue\n        a+=[i]\n        b+=[str(i)+\":\"+\"*\"*city.lower().count(i)]\n    return \",\".join(b)", "def get_strings(city):\n    formatRes = \"\"\n    string = \"\"\n    newCity = city.lower().replace(' ', '')\n    main = {}\n    i = 0\n    k = 0\n    while i < len(newCity):\n        if main.get(newCity[i]):\n            bef = main[newCity[i]]\n            main[newCity[i]] = bef + \"*\"\n            i += 1\n        else:\n            main[newCity[i]] = \"*\"\n            formatRes += newCity[i]\n            i += 1\n    while k < len(formatRes):\n        string = string + formatRes[k]+\":\"+ main[formatRes[k]]+\",\"\n        k+=1\n    return string[:-1]", "def get_strings(city):\n    result = {}\n    for i in city.lower():\n        if i in result and i != \" \":\n            result[i] += \"*\"\n        elif i not in result and i != \" \":\n            result[i] = \"*\"\n    test = []\n    for k, v in list(result.items()):\n        test.append((k+':'+v))\n    return \",\".join(test)\n    \n", "def get_strings(city):\n    formatedS = city.replace(' ', '').lower()\n    res = \"\"\n    count = 1\n    for x,c in enumerate(formatedS):\n        for d in formatedS[x+1:]:\n            if(d == c):\n                count += 1\n        if c not in res:\n            res += c + \":\" + \"*\" * count + \",\"\n        count = 1\n    return res[:-1]", "def get_strings(city):\n    l = []\n    city = city.lower()\n    city = city.replace(\" \",\"\")\n    for char in city:\n        ast = city.count(char) * \"*\"\n        l.append(\"%s:%s,\" %(char,ast))        \n    l = list(dict.fromkeys(l))\n    city = \"\".join(l)\n    return city[0:-1]\n", "def get_strings(city):\n    city = city.replace(\" \", \"\")\n    characters = list((city).lower())\n    char_dict = {}\n    final = \"\"\n    for char in characters:\n        if char in char_dict.keys():\n            char_dict[char] = char_dict[char] + \"*\"\n        else: \n            char_dict[char] = char + \":*\"\n    for key in char_dict.values():\n        final = final + (key + \",\")\n    return final[:-1]", "def get_strings(city):\n    dic = {} \n    for chr in city.lower():\n        if chr.isalpha():\n            dic[chr]=dic.get(chr,'')+'*'\n    return ','.join([i+':'+dic[i] for i in dic])", "def get_strings(city):\n    record = []\n    text = ''.join(city.split()).lower()\n    collect = {}\n    counter = 0\n    for i in range(len(text)):\n        if text[i] not in collect:\n            counter = text.count(text[i])\n            collect[text[i]] = ':' + counter * '*'\n        else:\n            counter += 1\n\n    for x,y in list(collect.items()):\n        record.append(x+y)\n\n    return ','.join(record)\n", "\ndef get_strings(city):\n    city = city.replace(' ', '')\n    city = city.lower()\n\n    d = dict()\n    for letter in city:\n        if letter not in d:\n            d[letter] = '*'\n        else:\n            d[letter] += '*'\n\n    letter_list = list(map(lambda v: f'{v[0]}:{v[1]}', d.items()))\n    return ','.join(letter_list)", "def get_strings(city):\n    print(city)\n    city, m, mas, l = city.lower(), \"\", [], []\n    for i in set(city.lower()):\n        if city.count(i) > 1:\n            mas.append(i)\n            l.append(city.count(i))\n            for j in range(city.count(i) - 1): city = city[:city.rindex(i)] + city[city.rindex(i) + 1:]\n    for i in city:\n        if i in mas: m += i + \":\" + \"*\" * l[mas.index(i)] + \",\"\n        elif i != \" \": m += i + \":*\" + \",\"\n    return m[:len(m)-1]\n", "def get_strings(city):\n    city = city.lower()\n    res = []\n    for x in city:\n        c = city.count(x)\n        st = f\"{x}:{'*'*c}\"\n        if x.isalpha() and not st in res:\n            res.append(st)\n    return \",\".join(res)", "def get_strings(city):\n    city_list = list(city.lower())\n    empty = []\n    abet = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    res = ''\n    for i in range(0, len(city_list)):\n        c = 0\n        letter = city_list[i]\n        for j in range(0, len(city_list)):\n            if letter in abet:\n                if letter == city_list[j]:\n                    c += 1\n                    city_list[j] = ''\n            else:\n                continue\n        if letter in abet:\n            res += letter+':'+c*'*'+','               \n        else: continue\n    return res[0:len(res)-1]", "from collections import Counter\ndef get_strings(city):\n    counts = Counter(city.replace(' ', '').lower())\n    return (','.join([f'{x}:{\"*\" * counts[x]}' for x in counts]))", "from collections import OrderedDict\ndef get_strings(city):\n    city = city.lower().replace(\" \", \"\")\n    city_short = \"\".join(OrderedDict.fromkeys(city))\n    city_string = \"\"\n    for char1, char2 in zip(city, city_short):\n        value = city.count(char2)\n        city_string += f\"{char2}:{value * '*'},\"\n    city_string = city_string[:-1]\n    return city_string", "def get_strings(city):\n    city = list(city.lower())\n    if ' ' in city:\n        for _ in range(city.count(' ')):\n            city.remove(' ')\n    r = ''\n    while len(city):\n        w = city[0]\n        r += str(w)+\":\"+ '*'*int(city.count(w))+ ','\n        for _ in range(city.count(w)):\n            city.remove(w)\n    return r[:-1]", "def get_strings(city):\n    city = city.lower()\n    return \",\".join(f\"{letter}:{count*'*'}\" for letter, count in {letter: city.count(letter) for letter in city if not letter.isspace()}.items())", "def get_strings(city):\n    city = city.lower()\n    return ','.join(f\"{c}:{'*' * city.count(c)}\" for c in dict.fromkeys(city) if c.isalpha())", "def get_strings(city):\n    city = city.lower()\n    return ','.join([f\"{k}:{v}\" for k,v in {c: '*'*city.count(c) for c in city if c != \" \"}.items()])", "def get_strings(city):\n    string = []\n    for i in city.lower():\n        n = city.lower().count(i)\n        if i + ':' + '*' * n not in string and i.isalpha():\n            string.append(i + ':' + '*' * n)\n    return \",\".join(string)\n\n", "def get_strings(city):\n    dic = dict()\n    for c in city.lower():\n        if c.isalpha and c != \" \":\n            dic[c] = dic.get(c, 0) + 1\n    result = list()\n    for key , value in dic.items():\n        result.append('{}:{}'.format(key, value * '*'))\n    out = ','.join(result)\n    return out", "# takes string of city name\n# returns string with all chars in city counted, count represented as *\ndef get_strings(city):\n    dic = {}\n    city = city.lower()\n    for i in range(len(city)):\n        if city[i] != \" \":\n            dic[city[i]] = city.count(city[i])\n    output: str = ','.join(\"{}:{}\".format(key, val*\"*\") for (key, val) in list(dic.items()))\n    return output\n\n\n", "def get_strings(city):\n    city = city.lower()\n    emptystr = ''\n    for letter in city.lower():\n        num = city.count(letter)\n        if letter not in emptystr:\n            if letter == ' ':\n                continue\n            else:\n                emptystr += letter + ':' + str(num * '*') + ','\n        else:\n            pass\n    return emptystr[:-1]", "def get_strings(city):\n    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    city_1 = \"\"\n    for i in city:\n        if i.lower() not in city_1 and i.isalpha():\n            city_1 += i.lower()\n        else:\n            pass\n    return \",\".join('{}:{}'.format(i, '*' * city.lower().count(i)) for i in city_1)", "def get_strings(city):\n    city = city.lower().replace(' ', '')\n    lst = [f'{x}:{\"*\" * city.count(x)}' for x in sorted(set(city), key=lambda x: city.index(x))]\n    return ','.join(lst)", "def get_strings(city):\n    city = city.lower()\n    emptystr = ''\n    for letter in city.lower():\n        num = city.count(letter)\n        if letter not in emptystr:\n            if letter == ' ':\n                continue\n            else:\n                if letter is not city[-1]:\n                    emptystr += letter + ':' + str(num * '*') + ','\n                else:\n                    emptystr += letter + ':' + str(num * '*') + ','\n        else:\n            pass        \n    if emptystr[-1] == ',':\n        return emptystr[:-1]\n    else:\n        return emptystr", "def get_strings(city):\n    l = []\n    [l.append(f\"{x}:{city.lower().count(x)*'*'}\") for x in city.lower() if f\"{x}:{city.lower().count(x)*'*'}\" not in l and x != \" \"]\n    return ','.join(l)", "def get_strings(city):\n    dict_letters = {}\n    \n    for i in city.replace(' ', '').lower():\n        if i in dict_letters:\n            dict_letters[i] += '*'\n        else:\n            dict_letters[i] = '*'\n    \n    string_counts=  ''\n    for k,v in dict_letters.items():\n        string_counts += k + ':' + v + ','\n    return string_counts[:-1]", "def get_strings(city):\n    lettercount =  []\n    check = ''\n    \n    for i in city.lower():\n        \n        if i not in check and i.isalpha():\n            check = check + i\n            string = '{}:{}'.format(i, city.lower().count(i)*'*')\n            lettercount.append(string)\n            \n    return ','.join(lettercount)", "def get_strings(city):\n    dict = {}\n    for c in city.lower():\n        if not c.isspace():\n            if c in dict:\n                dict[c] += 1\n            else:\n                dict[c] = 1\n    out = ''\n    count = 1\n    for x in dict:\n        out += x + ':' + dict[x]*'*'\n        if count != len(dict):\n            out += ','\n        count += 1\n    return(out)", "def get_strings(city):\n    city = city.lower()\n    c = []\n    b = []\n    for ans in city:\n        if ans not in b and ans!=\" \":\n            b += ans\n            c += [ans+\":\"+city.count(ans)*\"*\"]\n#     c += [ans+\":\"+city.count(ans)*\"*\" for ans in city if (ans not in c and ans!=\" \")]\n    return \",\".join(c)\n", "from collections import Counter\n\ndef get_strings(city):\n    city = [elem for elem in city.lower() if elem.islower()]\n    a = Counter(city)\n    return ','.join(f\"{elem}:{'*' * a[elem]}\" for elem in list(a.keys()))\n", "from collections import Counter\ndef get_strings(city):\n    myList = []\n    counter = Counter(city.lower())\n    for letter in counter:\n        if letter == \" \":\n            pass\n        else:\n            myList.append(letter + \":\" + str(\"*\"*city.lower().count(letter)))\n    return \",\".join(myList)", "def get_strings(city):\n    z=str()\n    city=city.replace(\" \",\"\").lower()\n    for i in city:\n        cnt=int(city.count(i))\n        j=1\n        y=''\n        if z.find(i) == -1 :\n            y=i+':'\n            while j<= cnt :\n                y=y+'*'\n                j=j+1\n            y=y+','\n        z=z+y\n\n    return z[:-1]", "from collections import Counter\ndef get_strings(city):\n    l = []\n    d = Counter(city.lower())\n    for c,n in d.items():\n        if c == \" \":\n            continue\n        l.append(c+\":\"+\"*\"*n)\n    return \",\".join(l)", "from collections import Counter\ndef get_strings(city):\n    return ','.join(f'{k}:{\"*\"*v}' for k, v in Counter(city.lower().replace(' ','')).items())", "from collections import Counter\ndef get_strings(city):\n    return ','.join((a+f':{\"*\" * b}' for a,b in Counter(city.lower().replace(' ', '')).items()))", "def get_strings(city):\n    city = city.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    city_dict = {}\n    for char in city:\n        if char not in alpha: continue\n        if char in city_dict:\n            city_dict[char] += '*'\n            continue\n        city_dict[char] = '*'\n    output = ''\n    for k in city_dict:\n        output += f'{k}:{city_dict[k]},'\n    return output[0:-1]\n", "def get_strings(city):\n    #create lower_case city only with letters\n    new_city = ''.join(filter(str.isalpha, city.lower()))\n    \n    #list of unique letters\n    char_seen=[]\n    for char in new_city:\n      if char not in char_seen:\n        char_seen.append(char)\n    \n    #list of counts for unique letters\n    count_char = []\n    for char in char_seen:\n      x =new_city.count(char)\n      count_char.append(x)\n    \n    #create dictionary with two parallel list\n    d = dict(zip(char_seen, count_char))\n\n    total_str = \"\"\n    for char, count in d.items():\n      total_str += char + \":\" + count*\"*\" + \",\" #using += to append instead\n\n    \n    return total_str[:-1]", "def get_strings(city):\n    new_city = ''.join(filter(str.isalpha, city.lower()))\n    char_seen=[]\n    for char in new_city:\n      if char not in char_seen:\n        char_seen.append(char)\n\n    count_char = []\n    for char in char_seen:\n      x =new_city.count(char)\n      count_char.append(x)\n\n    d = dict(zip(char_seen, count_char))\n\n    total_str = []\n    for char, count in d.items():\n      count_str = char + \":\" + count*\"*\"\n      total_str.append(count_str)\n    \n    return ','.join(total_str)", "def get_strings(city):\n    cityDict = {}\n    for i in city.lower():\n        if i.isalpha():\n            if i not in cityDict:\n                cityDict[i] = 1\n            else:\n                cityDict[i] += 1\n    \n    chars = []\n    for i in cityDict.keys():\n        chars.append(\"{}:{}\".format(i, '*' * cityDict[i]))\n    \n    return ','.join(chars)", "def get_strings(city):\n    \n    city = city.lower() \n    result = ''\n    \n    for i in city: \n        if not(i.isalpha()): \n            pass\n        elif i in result: \n            pass \n        else: \n            result += f'{i}:{\"*\" * city.count(i)},'\n    return result[:-1]", "from collections import Counter \n\ndef get_strings(city): \n    \n    c = Counter(list(filter(str.isalpha, city.lower())))    \n    return ','.join(f'{char}:{\"*\"*freq}' for char, freq in list(c.items()))\n\n\n", "from collections import Counter \n\ndef get_strings(city):\n    count = Counter(city.lower().replace(\" \", \"\"))\n    return \",\".join([f\"{k}:{'*'*v}\" for k,v in count.items()])", "import json\ndef get_strings(city):\n    cityAmount = {}\n    for x in range(len(city)):\n        if city[x] == ' ':\n            continue\n        if city[x].lower() in cityAmount:\n            cityAmount[city[x].lower()] += '*'\n        else:\n            cityAmount[city[x].lower()] = '*'\n    return \",\".join((\"{}:{}\".format(*i) for i in list(cityAmount.items())))\n", "def get_strings(city):\n    city = \"\".join(city.lower().split())\n    res = []\n    letters = [] \n    for letter in city:\n        if letter not in letters:\n            res.append(str(letter +\":\"+\"*\" *city.count(letter)))\n            letters.append(letter)\n    return \",\".join(res)", "def get_strings(city):\n    c={}\n    for i in city.lower():\n        if(i == \" \"):\n            continue\n        try:\n            c[i]+=1\n        except:\n            c[i]=1\n    res=\"\"\n    for i,j in c.items():\n        res+=i+\":\"+\"*\"*j+\",\" \n    return res[:len(res)-1]"]