["from fractions import gcd\nfrom itertools import product, starmap\nfrom statistics import mean\n\ndef gcd_matrix(a, b):\n    return round(mean(starmap(gcd, product(a, b))), 3)", "from fractions import gcd\n\ndef gcd_matrix(a, b):\n    return round(sum(gcd(x, y) for x in a for y in b) / (len(a) * len(b)), 3)\n", "from math import gcd\n\ndef gcd_matrix(a, b):\n    return round(sum(gcd(m, n) for m in a for n in b) / (len(a) * len(b)), 3)", "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef gcd_matrix(a,b):\n    g=[]\n    for i in a:\n        for j in b:\n            g.append(gcd(i,j))\n    \n    return round(sum(g)/len(g),3)", "from fractions import gcd\ndef gcd_matrix(a,b):\n    l = [gcd(i, j) for j in b for i in a]\n    return round(sum(l)/len(l), 3)", "from fractions import gcd\nfrom statistics import mean\n\ndef gcd_matrix(xs, ys):\n    return round(mean(gcd(x, y) for x in xs for y in ys), 3)", "gcd_matrix=lambda a,b:round(sum(__import__('fractions').gcd(x,y)for x in a for y in b)/len(a)/len(b),3)", "from math import gcd\ndef gcd_matrix(a,b):\n    return round(sum(sum(gcd(i,j) for j in b) for i in a)/(len(a)*len(b)),3)", "from math import gcd\ndef gcd_matrix(a,b):\n    k=a[:];p=0\n    for i in range(len(b)):\n        s=[]\n        for j in range(len(a)):\n            k[j]=gcd(a[j],b[i])\n            s.append(k[j])\n        p+=sum(s)\n    return round((p/(len(a)*len(b))),3)", "def gcd_matrix(a,b):\n    def gcd(a2,b2):\n        for i in range(min(a2,b2),0,-1):\n            if a2 % i == 0 and b2 % i == 0:\n                return i\n    output = 0\n    for i in a:\n        for j in b:\n            output += gcd(i,j)\n    return round(output/(len(a)*len(b)),3)"]