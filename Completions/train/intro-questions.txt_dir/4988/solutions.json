["def square(n):\n    return n ** 2", "def square(n):\n    return n*n", "square = lambda n: n*n", "def square(n):\n    return pow(n, 2)", "def square(n):\n    return n*n if isinstance(n,int) else None", "def mult(a, b):\n    mv = 0\n    for c in range(b):\n        mv = sumVal(mv, a)\n    return mv\n\ndef sumVal(a, b):\n    for c in range(b):\n        a = add1(a)\n    return a\n    \ndef add1(a):\n    out = ''\n    binval = dec2bin(a)\n    carry = 0\n    convert = True\n    while len(binval) > 0:\n        if not convert:\n            out = binval[-1] + out\n        else:\n            if carry == 1:\n                if binval[-1] == '0':\n                    convert = False\n                    carry = 0\n                    out = '1' + out\n                else:\n                    out = '0' + out\n            else:\n                if binval[-1] == '0':\n                    out = '1' + out\n                    convert = False\n                else:\n                    out = '0' + out\n                    carry = 1\n        binval = binval[:-1]\n    if carry == 1:\n        out = '1' + out\n    return bin2dec(out)\n    \ndef dec2bin(a):\n    if a == 0:\n        return '0'\n    out = ''\n    while a > 0:\n        out = str(a%2) + out\n        a = a //2\n    return out\n\ndef bin2dec(a):\n    out = 0\n    while len(a) > 0:\n        out *= 2\n        out += int(a[0])\n        a = a[1:]\n    return out\n    \ndef square(n):\n    return mult(n,n)", "def square(west_ego):\n  power = 9001 \n  if power > 9000:\n    trump = (power - 1) // len('democracy')\n    freedom = trump\n  kardashian_butt = west_ego\n  illuminati = kardashian_butt * west_ego - freedom + trump\n  if len(\"illuminati\") == len(\"confirmed!\"):\n    return len(\"ISIS\") / 4 * illuminati\n  return 'Putin' > 'Obama'", "square = lambda n: n**2", "import math\n\ndef square(n):\n    return math.pow(float(n), 2)", "def square(n: int) -> int:\n    \"\"\" Get the square of given number `n`. \"\"\"\n    return pow(n, 2)", "square = (2).__rpow__", "from numpy import square", "square = lambda i: i ** 2", "def square(n):\n    return sum(map(lambda x: n, range(0,n)))", "def square(n):\n    square = n * n\n    return square", "def square(n):\n    c = n*n\n    return c", "def square(n):\n    return eval('n'+'+n'*(n-1))", "def square(n):\n    return n.__mul__(n)", "def square(n):\n    total=(n*n)\n    return total\n", "square = lambda n: n**2\n#    write a function that takes an argument and returns the square of it\n", "def square(n):\n    b = n*n\n    return b", "def square(n):\n    n **= 2\n    return n", "def square(n):\n    c=n**2\n    return c", "square = lambda a: a*a", "def square(n):\n    \"\"\" return square of n \"\"\"\n    return n*n", "def square(s):\n    return s**2\n", "def square(num):\n    return num **2", "def square(n):\n    squares = int(n **2)\n    return squares", "def square(n):\n    return n*n\n\nn = 2\nprint(n)", "def square(n):\n    return n**2\n\nprint((square(2)))\n", "def square(n):\n    return n*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*n", "def square(n):\n    return n*n\n#Completed by Ammar on 12/8/2019 at 11:41PM.\n", "def square(n):\n    return n*n#I solved this Kata on 7/19/2019 05:38 AM...#Hussam'sCodingDiary", "def square(n):\n    return n*n #Simpy return the value of n multiplied by itself", "def square(n):\n    p = n\n    l = n * p\n    return l", "import math\ndef square(n):\n    num = n**2\n    return num", "def square(n):\n    \n    \"\"\"Raises n to the power of 2.\"\"\"\n    \n    # make it more powerful\n    powerful_n = n ** 2\n    \n    return powerful_n", "def square(n):\n    res = 0\n    for i in range(n): \n        res += n\n    return res\n", "def square(n):\n    result =\"\"\n    if True:\n        result = n**2\n    return result", "#Function 2 - squaring an argument\ndef square(n):\n    return n*n\n", "def square(n):\n    c = 0\n    v = 0\n    while c<n:\n        v += n\n        c += 1\n    return v", "def square(n):\n    y = n ** 2\n    return (y)", "square=lambda i:i*i", "square = lambda s:s**2", "def square(n):\n    return n*n\n#     pass\n", "def square(n):\n    m = 0\n    while m != n*n:\n        m += 1\n        \n    return m", "import math\ndef square(n):\n    return int(math.pow(n,2))", "def square(n):\n    x = int(n)*int(n)\n    return x\n", "import math\n\ndef square(n):\n    n = n**2\n    return n", "from scipy.integrate import quad as integrate\ndef square(n):\n    return sum(set([round(value, 5) for value in (\n        n**2,\n        n*n,\n        (lambda x: x**2)(n),\n        (lambda x: x*x)(n),\n        (lambda x: integrate(lambda a, b: b, min(0,n), max(0,n), args = n))(n)[0],\n        sum(n for _ in range(int(n))) + n*(n - n//1 + 0 if n >= 0 else 1)\n    )]))", "def square(n):\n    m = n*n\n    return m", "def square(n):\n    return int(n) * int(n)", "def square(n):\n  s=n*n\n  return s\n  \nk=5\nsquare(k)\npass", "square = lambda l : l*l", "def square(n):\n    product = 1\n    product = n*n\n    return product", "def square(n):\n    return sum(n for i in range(n))", "def square(n):\n    pass\n    \n    s = pow(n,2)\n    \n    return s\n", "def square(n):\n  res = n*n\n  return res", "def square(n):\n    a = n ** 2\n    return a ", "def square(n):\n    return n**2\n\nprint(square(5))", "def square(n):\n    squared = n * n\n    return squared", "def square(n):\n    return n**2 #self explanatory ", "def square(n):\n    answer = n*n\n    return answer", "def square(n):\n    sqr = n ** 2\n    print sqr\n    return sqr", "def square(n):\n    s = n*n\n    return s", "def square(n):\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            ans += 1\n    return ans", "def square(n):\n    import math\n    return math.pow(n, 2)", "def square(n):\n    i = n * n\n    return i\n    pass\n    \n", "def square(n):\n    result = n ** 2\n    return result", "def square(n):\n    a=n*n\n    return a", "def square(n):\n    square = n ** 2\n    return square", "def square(n):\n    '''return the square of number'''\n    return n ** 2", "import math\n\ndef square(n):\n    return n**(math.sqrt(4))", "def square(n):\n    \"\"\"This function return square of number\"\"\"\n    return n * n ", "def square(n):\n    return n * sum([1 for x in range(0, n)])", "import math\n\ndef __pow(a, b=2):\n    return pow(a, b)\n\nmath.pow = __pow\nsquare = math.pow", "square = lambda n: pow(n, 2)", "square = lambda a:a**2", "def square(n):\n    n = n * n\n    return n", "import math\n\ndef square(n):\n  return n**2\n", "def square(n):\n    return abs(n*n) ", "def square(n,y=2):\n    if y == 1:\n        return n\n    else:\n        return n * square(n, y - 1)\n", "def square(n):\n    sqr  = n ** 2\n    return sqr", "def square(n):\n    return int(n**2)", "import math\ndef square(n):\n    return n*n", "def square(n):\n    sq = n**2\n    return sq\n    pass\n", "def square(n):\n    if type(n) == int or type(n) == float:\n        return n**2\n    else: \n        return False", "square=lambda x:x**2", "def square(n):\n    n = n **2\n    return n", "def square(n):\n    ans = n**2\n    return ans", "square = lambda x: x*x", "def square(n):\n    return float(n)*n", "from math import pow\ndef square(n):\n    return pow(n,2)", "#def square(n):\n#    pass\nsquare = lambda n: n**2"]