["from fractions import Fraction\n\ndef sum_fracts(lst):\n    if lst:\n        ret = sum(Fraction(a, b) for (a, b) in lst)\n        return ret.numerator if ret.denominator == 1 else [ret.numerator, ret.denominator]\n", "from fractions import Fraction\ndef sum_fracts(lst):\n    s = sum(Fraction(*f) for f in lst)\n    if s: return s.numerator if s.denominator == 1 else [s.numerator, s.denominator]\n", "from fractions import Fraction\n\ndef sum_fracts(lst):\n    if lst:\n        ret = sum(map(lambda l: Fraction(*l), lst))\n        return [ret.numerator, ret.denominator] if ret.denominator != 1 else ret.numerator", "from fractions import Fraction\ndef sum_fracts(lst):\n    if not lst: return None\n    r = sum([Fraction(f[0], f[1]) for f in lst])\n    return r.numerator if r.denominator == 1 else [r.numerator, r.denominator]", "from fractions import Fraction\ndef sum_fracts(lst):\n    out = Fraction(0, 1)\n    for x in lst: out = out + Fraction(x[0], x[1])  \n    return None if out.numerator == 0 else out.numerator if out.denominator == 1 else [out.numerator, out.denominator]\n", "from fractions import Fraction\nfrom itertools import starmap\n\ndef sum_fracts (fractions):\n    if not fractions:\n        return None\n    \n    total = sum(starmap(Fraction, fractions))\n    if total.denominator == 1:\n        return total.numerator\n    return [total.numerator, total.denominator]\n", "def sum_fracts(lst):\n    print(lst)\n    if lst == []: return None\n    ll = len(lst)\n    n, cd, md = 2, 1, min( lst[i][1] for i in range(ll) )\n    while n <= md:\n        if all( lst[i][1] % n == 0 for i in range(ll) ): cd = n\n        n += 1\n    print(('max common divider: {}'.format(cd)))\n        \n    dd = cd\n    for i in range(ll):\n        dd = dd * (lst[i][1]//cd)\n    \n    nn = sum( lst[i][0]*(dd//lst[i][1]) for i in range(ll) )\n    \n    i, primes = 0, [2, 3, 5, 7, 11, 13, 17]  # it's too expensive to strip down nn and dd, so cheat with small primes\n    while i < len(primes):\n        n = primes[i]\n        if nn % n == 0 and dd % n == 0:\n            nn = nn//n\n            dd = dd//n\n        else:\n            i += 1\n    if dd == 1: return nn\n    else: return [nn, dd]\n", "from fractions import Fraction\n\ndef sum_fracts(lst):\n    f = sum(Fraction(n, d) for n, d in lst)\n    return f.numerator or None if f.denominator == 1 else [f.numerator, f.denominator]", "from fractions import Fraction\nfrom itertools import starmap\ndef sum_fracts(lst):\n    if lst:\n        f = sum(starmap(Fraction, lst))\n        return [f.numerator, f.denominator] if f.denominator > 1 else f.numerator"]