["def travel(r, zipcode):\n    streets = []\n    nums = []\n    addresses = r.split(',')\n    for address in addresses:\n        if ' '.join(address.split()[-2:]) == zipcode:\n            streets.append(' '.join(address.split()[1:-2]))\n            nums += address.split()[:1]\n    return '{}:{}/{}'.format(zipcode, ','.join(streets), ','.join(nums))", "import re\ndef travel(r, zipcode):\n    res = [(m.group(2), m.group(1)) for m in re.finditer(r'(\\d+) ([^,]+) ([A-Z][A-Z] \\d{5})', r) if zipcode == m.group(3)]\n    return '{}:{}/{}'.format(zipcode, ','.join(a[0] for a in res), ','.join(a[1] for a in res))", "from collections import defaultdict\nfrom re import compile, match\n\nREGEX = compile(r'(?P<num>\\d+) (?P<adr>.+) (?P<st_zip>[A-Z]{2} \\d{5})')\n\n\ndef travel(addresses, zipcode):\n    by_zipcode = defaultdict(lambda: defaultdict(list))\n    for address in addresses.split(','):\n        m = match(REGEX, address).groupdict()\n        by_zipcode[m['st_zip']]['adr'].append(m['adr'])\n        by_zipcode[m['st_zip']]['num'].append(m['num'])\n    result = by_zipcode[zipcode]\n    return '{}:{}/{}'\\\n        .format(zipcode, ','.join(result['adr']), ','.join(result['num']))\n", "import re\n\n\ndef travel(r, zipcode):\n    addresses = [address for address in r.split(',') if re.match('\\d+ .+ {}$'.format(zipcode),address)]\n\n    streets = []\n    houses = []\n    for address in addresses:\n        house, street = re.findall('(\\d+) (.+) .* .*',address)[0]\n        streets.append(street)\n        houses.append(house)\n    \n    return zipcode + ':' + ','.join(streets) + '/' + ','.join(houses)\n", "def travel(r, zipcode):\n    out = [[],[]]\n    endstr = zipcode + ':'\n    r = r.split(',')\n\n    for data in r:\n        if data[len(data)-8:] == zipcode:\n            strt = data.split(' ', 1)[1][:-9]\n            apt = data.split(' ', 1)[0]\n            out[0].append(strt)\n            out[1].append(apt)\n\n    endstr += ','.join(out[0]) + '/'\n    endstr += ','.join(out[1])\n\n    return endstr", "def travel(r, zipcode):\n    return zipcode + ':' + ','.join([' '.join(x.split()[1:]) for x in [x[:-9] for x in r.split(',') if x[-8:] == zipcode]]) + '/' + ','.join([x.split()[0] for x in [x[:-9] for x in r.split(',') if x[-8:] == zipcode]])", "def travel(r, zipcode): \n    matches = [' '.join(i.split()[:-2]) for i in r.split(',') if (' '.join(i.split()[-2:]) == zipcode)] \n    return \"%s:\" % zipcode + ','.join([' '.join(i.split()[1:]) for i in matches])+'/'+','.join([''.join(i.split()[:1]) for i in matches])", "import re\ndef travel(r, zipcode):\n    r = r.split(',')\n    filtered = [*filter(lambda x: re.search(f\"{zipcode}$\", x), r)]\n    nums, streets = [], []\n    for address in filtered:\n        num, street = address.split(' ', 1)\n        nums.append(num)\n        streets.append(street.rstrip(' ' + zipcode))\n    return filtered != [] and zipcode and \\\n           f\"{zipcode}:{','.join(streets)}/{','.join(nums)}\" or f\"{zipcode}:/\"", "def travel(r: str, zipcode: str) -> str:\n    addresses, numbers = [], []\n    if zipcode:\n        for a in r.split(','):\n            s, _, rem = a.rpartition(zipcode)\n            if s and not rem:\n                n, a = s[:-1].split(maxsplit=1)\n                numbers.append(n)\n                addresses.append(a)\n\n    return f\"{zipcode}:{','.join(addresses)}/{','.join(numbers)}\"\n", "import re\n\ndef travel(r, zipcode):\n    addresses = [*[x for x in r.split(\",\") if re.findall(r\"[A-Z]{2} \\d{5}\", x)[0] == zipcode]]\n    if not addresses: return f\"{zipcode}:/\"\n    numbers = []\n    for i, a in enumerate(addresses):\n        n = re.findall(r\"\\d{1,5}(?= \\w+)\", a)[0]\n        numbers.append(n)\n        addresses[i] = a.strip(n).strip(zipcode)\n    return f\"{zipcode}:{','.join(addresses)}/{','.join(numbers)}\"\n"]