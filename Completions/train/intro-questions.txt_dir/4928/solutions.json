["def binRota(arr):\n    return [name for i, row in enumerate(arr) for name in row[::-1 if i % 2 else 1]]", "def binRota(arr):\n    rota = []\n    for i, row in enumerate(arr):\n        if i % 2: row = reversed(row)\n        rota.extend(row)\n    return rota", "def binRota(arr):\n    res = []\n    for i in range(len(arr)):\n        res.extend(arr[i][::(-1)**i])\n    return res", "def binRota(arr):\n    return [y for x in arr for y in (x, x[::-1])[arr.index(x) % 2]]", "def binRota(arr):\n    return [seat for row, seats in enumerate(arr) for seat in seats[::(-1)**row]]\n", "def binRota(arr):\n  res = []\n  \n  for i in range(len(arr)):\n    if i%2 == 1:\n      res.extend(arr[i][::-1])\n    else:\n      res.extend(arr[i])\n  \n  return res", "def binRota(arr):\n    return list(office(arr))\n    \ndef office(arr):\n    w = 0\n    for e in arr:\n        yield from e[::[1,-1][w]]\n        w = not w", "binRota=lambda a:[p for i,l in enumerate(a)for p in l[::1-i%2*2]]", "def binRota(arr):\n    res = []\n    for k, l in enumerate(arr):\n        print k, l\n        if k % 2 == 0:\n            for w in l:\n                res.append(w)\n        else:\n            for w in l[::-1]:\n                res.append(w)\n    return res", "def binRota(arr):\n    arr[1::2] = map(lambda x: x[::-1], arr[1::2])\n    return sum(arr,[])"]