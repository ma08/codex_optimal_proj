["from fractions import gcd\n\ndef nbr_of_laps(x, y):\n    return (y / gcd(x,y), x / gcd(x,y))", "from fractions import gcd\n\ndef nbr_of_laps(x, y):\n    lcm = x / gcd(x, y) * y\n    return lcm/x, lcm/y", "def nbr_of_laps(x, y):\n    for i in range(min(x, y), 0, -1):\n        if x % i == 0 and y % i == 0:\n            break\n    return (y / i, x / i)\n", "from fractions import Fraction\n\ndef nbr_of_laps(x, y):\n    frac = Fraction(x, y)\n    return (frac.denominator, frac.numerator)", "from fractions import gcd\n\ndef nbr_of_laps(x, y):\n    z = gcd(x, y)\n    return (y // z, x // z)", "from fractions import Fraction as frc\ndef nbr_of_laps(x, y):\n    return (frc(x,y).denominator,frc(x,y).numerator)", "def nbr_of_laps(x, y):\n    a, b = x, y\n    remain = a % b\n    while remain > 0:\n        a, b = b, remain\n        remain = a % b\n    lcm = x * y / b\n    return lcm / x, lcm / y", "from fractions import gcd\ndef nbr_of_laps(x, y):\n    lcm = (x * y) / gcd(x, y)\n    return int(lcm / x), int(lcm / y)", "def nbr_of_laps(x, y):\n    print (x,y)\n    if x!=y:\n        a=round(y* (x/y))\n        b= round(x*(y/x))\n        if (x==a) and (y==b):\n            for i in reversed(range (100)):\n                if (a%(i+2)==0) and (b%(i+2)==0):\n                     print(i+2)\n                     return(b/(i+2),a/(i+2))\n            else:\n                return(b,a)\n    elif x==y:\n        return (1, 1)", "from math import gcd\n\ndef nbr_of_laps(x, y):\n    g = gcd(x,y)\n    return (y//g, x//g)"]