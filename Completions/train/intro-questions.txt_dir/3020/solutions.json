["import re\n\ndef kontti(s):\n    return  \" \".join( [ re.sub(\"([^aeiouy]*[aeiouy])(.*)\", r\"ko\\2-\\1ntti\", w, flags = re.I) for w in s.split() ] )", "from re import sub\nfrom functools import partial\nkontti = partial(sub, r'(?i)(\\S*?[aeiouy])(\\S*)', r'ko\\2-\\1ntti')", "import re\n\ndef kontti(s):\n    return re.sub(r'(\\S*?[aeiouy])(\\S*)', r'ko\\2-\\1ntti', s, flags=re.I)", "def kontti(stg):\n    return \" \".join(k_w(word) for word in stg.split())\n    \ndef k_w(stg):\n    i = next((i for i, c in enumerate(stg.lower()) if c in \"aeiouy\"), -1)\n    return f\"ko{stg[i+1:]}-{stg[:i+1]}ntti\" if i > -1 else stg", "import re\n    \ndef kontti(s):\n    return re.sub(r'\\b([^aeiouy\\s]*[aeiouy])(\\S*)', r'ko\\2-\\1ntti', s, flags=re.I)", "kontti=lambda w: \" \".join([(lambda pos: \"\".join([\"ko\",s[pos+1:],\"-\",s[:pos+1],\"ntti\"]))([i for i,l in enumerate(s) if l.lower() in \"aeiouy\"][0]) if any(l.lower() in \"aeiouy\" for l in s) else s for s in w.split(\" \")]) if len(w) else \"\"", "kontti=lambda s:' '.join((lambda i:i<len(w)and'ko'+w[i+1:]+'-'+w[:i+1]+'ntti'or w)(min(i for i,c in enumerate(w+'a')if c in'aeiouyAEIOUY'))for w in s.split())", "def kontti(s):\n    result = []\n    for w in s.split():\n        i = next((i for i,c in enumerate(w, 1) if c in \"aeiouyAEIOUY\"), None)\n        result.append(w if i is None else f\"ko{w[i:]}-{w[:i]}ntti\")\n    return ' '.join(result)", "def kontti(st):\n    r = []\n    for s in st.split():\n        a,s = '',list(s)\n        if not any(i in s for i in 'aeiouyAEIOUY'):\n            r.append(''.join(s))\n        else:\n            while s:\n                a += s.pop(0)\n                if a[-1] in 'aeiouyAEIOUY':\n                    break\n            r.append(f\"ko{''.join(s)}-{a}ntti\")\n    return ' '.join(r)", "from re import search\ndef kontti(s):\n    words=[]\n    \n    for word in s.split():\n        i=search(\"[aeiouyAEIOUY]\",word)\n        if i:\n            i=i.start()\n            words.append(f\"ko{word[i+1:]}-{word[:i+1]}ntti\")\n        else:words.append(word)\n    return \" \".join(words)"]