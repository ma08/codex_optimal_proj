["def even_numbers(arr,n):\n    return [i for i in arr if i % 2 == 0][-n:] ", "def even_numbers(arr, n):\n    result = []\n    a = list(reversed(arr))\n    for number in a:\n        if n == 0:\n            break\n        if number % 2 == 0:\n            result.append(number)\n            n -= 1\n    return list(reversed(result))", "def even_numbers(arr,n):\n    return list(filter(lambda n: n % 2 == 0, arr))[-n:]", "def even_numbers(arr,n):\n    s = [num for num in arr if num % 2 == 0]\n    return s[-n:]", "def even_numbers(arr,n):\n    return [x for x in arr if x % 2 == 0][-n:]\n", "def even_numbers(arr,n):\n    return [a for a in arr if a%2 < 1][-n:]", "def even_numbers(arr,n):\n    return [even for even in arr if even%2 ==0][-n:]\n", "from typing import List\n\n\ndef even_numbers(arr: List[int],n:int)->List[int]:\n    res = []\n    \n    for a in reversed(arr):\n        if a % 2 == 0:\n            res.insert(0, a)\n            if len(res) == n:\n                return res", "def even_numbers(arr,n):\n  even = []\n  for i in arr:\n    if i % 2 == 0:\n      even.append(i)\n  return even[len(even) - n:len(arr)]", "def even_numbers(arr,n):\n    return list(filter(lambda x: x % 2 == 0, arr))[-n:len(arr)]", "def even_numbers(arr,n):\n    return list(filter(lambda n: not n & 1, arr))[-n:]", "def even_numbers(lst, n):\n    return [num for num in lst if not num % 2][-n:]", "even_numbers = lambda a,n:[e for e in a if 1-e%2][-n:]", "def even_numbers(arr,n):\n    return [a for a in arr if a % 2 == 0][-n:]", "def even_numbers(arr,n):\n    return [i for i in arr if not i%2][-n:]", "def even_numbers(arr,n):\n    lista = []\n    for i in arr[::-1]:\n        if i % 2 == 0:\n            lista.append(i)\n            if len(lista) == n:\n                return lista[::-1]", "def even_numbers(arr,n):\n    x=[]\n    for i in arr[::-1]:\n        if len(x)<n and i%2 ==0:\n            x.append(i) \n        else:\n            pass\n    return  x[::-1]", "def even_numbers(arr,n):\n    return list(filter(lambda x: not x % 2, arr))[-n:]", "def even_numbers(arr, n):\n    if not arr or n == 0:\n        return []\n    if arr[-1] % 2 == 0:\n        v = n - 1\n        tail = [arr[-1]]\n    else:\n        v = n\n        tail = []\n    return even_numbers(arr[:-1], v) + tail", "def even_numbers(arr,n):\n    newarr = [i for i in arr if i%2 == 0]\n    return newarr[-n:]", "def even_numbers(arr,n):\n    return [i for i in arr if i&1^1][-n:]", "def even_numbers(arr,n):  \n    return [number for number in arr if number%2==0][::-1][:n][::-1]", "def even_numbers(array, requiredResultLength):\n    return [number for number in array if not number % 2][-requiredResultLength:]", "def even_numbers(arr,n):\n    even = [a for a in arr if not a%2]\n    return even[len(even)-n::]", "def even_numbers(arr,n):\n    arr=arr[::-1]\n    ans=[]\n    for x in arr:\n        if x%2==0:\n            ans.append(x)\n            if len(ans)==n:\n                return ans[::-1]", "def even_numbers(arr,n):\n    x = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            x.append(arr[i])\n    res = len(x) - n\n    return x[res:]", "def even_numbers(arr,n):\n    arr = arr[::-1]\n    number = []\n    for x in range(len(arr)):\n        if arr[x]%2==0: \n            if len(number)<n:number.append(arr[x])\n            else: break\n    return number[::-1]", "def even_numbers(arr,n):\n    return [x for x in arr if not x%2][::-1][:n][::-1]", "def even_numbers(arr, n):\n    return list([e for e in arr if e % 2 == 0])[-n::]\n", "def even_numbers(arr,n):\n    return [even_num for even_num in arr if even_num % 2 == 0][-n:]", "def even_numbers(arr,n):\n    newarr = []\n    for i in arr:\n        if i % 2 == 0:\n            newarr.append(i)\n    return newarr[-n:]", "def even_numbers(arr,n):\n    return [i for i in arr if not i%2][-1*n:]", "def even_numbers(arr,n):\n    result = []\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] % 2 == 0:\n            result.insert(0, arr[i])\n            if len(result) == n:\n                return result\n    return result", "def even_numbers(arr,n):\n    res = []\n    \n    for elem in arr[::-1]:\n        if elem % 2 == 0:\n            res.insert(0, elem)\n            if len(res) == n:\n                break\n                \n    return res", "def even_numbers(arr,n):\n    last_n_even_numbers=list()\n    for num in arr[::-1]:\n        if not num%2:\n            last_n_even_numbers.append(num)\n            if len(last_n_even_numbers)==n:\n                return last_n_even_numbers[::-1]\n", "def even_numbers(arr,n):\n    last_n_even_numbers=list()\n    for num in arr[::-1]:\n        if not num%2 and len(last_n_even_numbers)<n:\n            last_n_even_numbers.append(num)\n            if len(last_n_even_numbers)==n:\n                return last_n_even_numbers[::-1]\n", "def even_numbers(arr,n):\n    out = []\n    count = 0\n    for el in arr[::-1]:\n        if el % 2 == 0 and count < n:\n            out.append(el)\n            count += 1\n    return out[::-1]\n", "def even_numbers(array, number):\n    a = []\n    index = len(array) - 1\n    while len(a) < number:\n        if array[index] % 2 == 0:\n            a.append(array[index])\n        index -= 1\n    return a[::-1]", "def even_numbers(arr,n):\n    res = [i for i in arr if i%2==0]\n    while len(res)>n:\n        res.pop(0)\n    return res", "def even_numbers(arr,n):\n    return  [i for i in arr if i % 2 == 0][::-1][0:n:][::-1]", "def even_numbers(arr,n):\n    print(([a for a in arr if (a % 2 == 0)][-n:]))\n    return [a for a in arr if (a % 2 == 0)][-n:]\n    \n", "def even_numbers(arr,n):\n    return [i for i in arr if i % 2 == 0][-1*n:]", "def even_numbers(A,n):\n    return [e for e in A if not e%2][-n:]", "def even_numbers(arr,n):\n    ans = []\n    for i in arr[::-1]:\n        if n ==0:\n            break\n        if i%2 ==0:\n            ans.append(i)\n            n -=1\n    return ans[::-1]", "def even_numbers(arr,n):\n    numberlist = []\n    for eachnumber in arr[::-1]:\n        if eachnumber % 2 == 0:\n            numberlist.append(eachnumber)\n            if len(numberlist) == n:\n                numberlist.reverse()\n                return numberlist\n", "def even_numbers(arr,n):\n    evens = []\n    for i in arr:\n        if i % 2 == 0:\n            evens.append(i)\n    if len(evens) == n:\n        return evens\n    else:\n        del evens[:-n]\n        return evens", "def even_numbers(arr,n):\n    res=[]\n    for i in range(1,len(arr)+1):\n        if arr[-i]%2==0:\n            res.append(arr[-i])\n            if len(res)==n:\n                break\n        \n    return res[::-1]\n", "def even_numbers(arr,n):\n\n    a = [i for i in arr if i % 2 == 0]\n    \n    return a[-n::]", "def even_numbers(arr,n):\n    c = 0\n    res = []\n    for i in range(len(arr)-1, -1, -1):\n        if c == n:\n            break\n        elif arr[i] % 2 == 0:\n            res.append(arr[i])\n            c += 1\n    return res[::-1]", "def even_numbers(arr, n):\n    x = [k for k in arr if k % 2 == 0]\n    while len(x) > n:\n        for k in x:\n            x.remove(k)\n            break\n    return x", "def even_numbers(arr,n):\n    result = []\n    for x in reversed(arr):\n        if x%2 == 0:\n            result.append(x)\n            if len(result) == n:\n                break\n    return list(reversed(result))\n", "def even_numbers(arr,n):\n    L = [i for i in arr if i%2 == 0]\n    return L[-n:]", "def even_numbers(arr,n):\n    x = -1\n    result = []\n    while n > 0:\n        if arr[x] % 2 == 0:\n            result.append(arr[x])\n            n -= 1\n            x -= 1\n        else:\n            x -= 1\n    return list(reversed(result))", "def even_numbers(a, n):\n    return [x for x in a[::-1] if x % 2 == 0][:n][::-1]\n", "def even_numbers(arr,n):\n    return list(reversed(list(reversed(list(filter(lambda x : (x%2==0), arr))))[:n]))", "def even_numbers(arr,n):\n    \n# =============================================================================\n#     This function given an array of digital numbers, returns a new array of\n#     length n containing the last even numbers from the original array \n#     (in the same order). \n#     \n#     The original array will be not empty and will contain at least \"n\" \n#     even numbers.\n#     \n#     Example:\n#         ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) ==> [4, 6, 8]\n#         ([-22, 5, 3, 11, 26, -6, -7, -8, -9, -8, 26], 2) ==> [-8, 26]\n#         ([6, -25, 3, 7, 5, 5, 7, -3, 23], 1) ==> [6]\n# =============================================================================\n    \n    result = []\n    \n    myList = arr\n    evensList = [x for x in myList if x % 2 ==0] # extract even nums from arr\n    \n    evensList = evensList[::-1]\n    \n    for i in range(0,n):\n        \n        result.append(evensList[i])\n    \n    return result[::-1]", "def even_numbers(arr,n):\n  newl = []\n  r = arr[::-1]\n  for i in r:\n    if i % 2 == 0:\n      newl.append(i)\n      if len(newl) == n:\n        return newl[::-1]\n      else:\n        continue", "def even_numbers(arr,n):\n    res = []\n\n    for ele in reversed(arr):\n        if ele % 2 == 0:\n            res.append(ele)\n\n    return list(reversed(res[:n]))\n", "def even_numbers(arr,n):\n    arr.reverse()\n    output = []\n    i = 0\n    while len(output) < n:\n        if arr[i] % 2 == 0:\n            output.append(arr[i])\n        i += 1\n    output.reverse()\n    return output", "def even_numbers(arr,n):\n    s = []\n    for e in arr:\n        if e%2 == 0:\n            s.append(e)\n    s1 = s[:-n-1:-1]\n    s2 = s1[::-1]\n    return s2", "def even_numbers(arr,n):\n    return [k for k in arr if k%2==0][-n:]\n", "def even_numbers(arr,n):\n    '''Returns the last n numbers of a list of even numbers from array arr'''\n    output = []\n    for num in arr:\n        if num % 2 == 0:\n            output.append(num)\n    return output[-n:]", "def even_numbers(arr,n):\n    li = [x for x in arr if x%2==0]\n    li = li[::-1]\n    result = li[:n]\n    return result[::-1]\n", "def even_numbers(arr,n):\n    x = []\n    for i in arr:\n        if i % 2 == 0:\n            x.append(i)\n    return x[-n:]", "def even_numbers(arr,n):\n    ans =[]\n    for i in arr:\n        if i % 2 == 0:\n            ans.append(i)\n    return ans[-n:]", "even_numbers = lambda lst, k: [n for n in lst if not n & 1][-k:]", "def even_numbers(arr, num):\n    return [n for n in arr if n % 2 == 0][-num:]", "def even_numbers(arr,n):\n    answer =[]\n    for num in arr:\n        if num % 2 == 0:\n            answer.append(num)\n    return answer[-n:]", "def even_numbers(arr,n):\n    even_list = []\n    for num in arr:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list[-n:]\n        \n", "def even_numbers(arr: list,n: int):\n    arr.reverse()\n    arr = [i for i in arr if not i % 2]\n    arr = arr[:n]\n    arr.reverse()\n    return arr", "def even_numbers(arr,n):\n    evenlist = []\n    for x in arr:\n        if x % 2 == 0:\n            evenlist.append(x)\n    return evenlist[-n:]\n", "def even_numbers(arr,n):\n    output = [i for i in arr if i % 2 == 0]\n    return output[-n:]", "def even_numbers(arr, length):\n    return [n for n in arr if n % 2 == 0][-length:]", "def even_numbers(arr,n):\n    lst = [num for i, num in enumerate(arr) if not num % 2]\n    return [lst[i] for i in range(len(lst) - n, len(lst))]", "def even_numbers(arr, n):\n    res = [x for x in arr if not x & 1]\n    return res[-n:]", "def even_numbers(arr,n):\n    a = []\n    for i in arr:\n        if i % 2 == 0:\n            a.append(i)\n    return a[len(a) - n:]", "def even_numbers(arr,n):\n    even_nums=list(filter(lambda x: x%2==0,arr))\n    return even_nums[-n:]", "def even_numbers(arr,n):\n    list = []\n    for number in reversed(arr):\n        if number % 2 == 0:\n            list.append(number)\n        if len(list) == n:\n            return list[::-1]\n", "def even_numbers(arr,n):\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    return even[len(even)-n:]", "def even_numbers(arr,n):\n    pass\n    \n    e = []\n    \n    l = len(e)\n    \n    for i in range(0,len(arr)):\n    \n        if arr[i]%2==0 :\n            \n        \n            e.append(arr[i])\n            \n    return e[l-n::]\n    \n    \n", "def even_numbers(arr, num):\n    new = []\n    for i in arr:\n        if i % 2 == 0:\n            new.append(i)\n    return new[-num:]", "def even_numbers(arr,n):\n    p = arr[::-1]\n    z = []\n    \n    for i in p:\n        if i % 2 == 0:\n            z.append(i)\n            \n    c = len(z) - n\n    for f in range(0,c):\n        z.pop()\n        \n    return z[::-1]", "def even_numbers(arr,n):\n    even_numbers_in_arr = []\n    new_even_numbers = []\n    for number in arr:\n        if number % 2 == 0:\n            even_numbers_in_arr.append(number)\n    even_numbers_in_arr.reverse()\n    for i in range(n):\n        new_even_numbers.append(even_numbers_in_arr[i])\n    new_even_numbers.reverse()\n    return new_even_numbers\n", "def even_numbers(arr,n):\n    new_arr = []\n    even = []\n\n    for i in arr:\n        if i % 2 == 0:\n            new_arr.append(i)\n\n    for j in range(n):\n        even.append(new_arr[-(j+1)])\n    even.reverse()\n    return even\n    \n\n", "def even_numbers(arr,n):\n    evens_arr = [x for x in arr if x % 2 == 0]\n    return evens_arr[len(evens_arr)-n:]", "def even_numbers(arr,n):\n    even =[]\n    for number in arr[::-1]:\n        if number % 2 == 0:\n            even.append(number)\n            if len(even) == n:\n                break\n    return even[::-1]", "def even_numbers(arr,n):\n    result = []\n    for num in arr[::-1]:\n        if len(result) < n:        \n            if num % 2 == 0:\n                result.append(num)\n    return result[::-1]", "def even_numbers(arr,n):\n    even_count=0\n    result=[]\n    \n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]%2==0:\n            result.insert(0,arr[i])\n            even_count+=1\n        if even_count==n:\n            break\n            \n    return result\n    \n            \n    \n", "def even_numbers(arr,n):\n    res=[]\n    for i in arr[::-1]:\n        if n==0:\n            break\n        if i%2==0:\n            res.append(i)\n            n-=1\n    return res[::-1]", "def even_numbers(arr,n):\n    l = []\n    counter = 1\n    while len(l) != n:\n        if arr[-counter] % 2 == 0:\n            l.append(arr[-counter])\n        counter +=1\n    return l[::-1]\n            \n        \n", "def even_numbers(arr,n):\n    lst = []\n    for i in arr:\n        if i % 2 == 0:\n            lst.append(i)\n    return lst[-n:]", "def even_numbers(arr,n):\n    new = [c for c in arr if c % 2 == 0]\n    return new[-n:]", "def even_numbers(arr,n):\n    return [x for x in arr[::-1] if not x%2][:n][::-1]", "def even_numbers(arr,n):\n    lst = []\n    for i in arr:\n        if i%2==0:\n            lst.append(i)\n    print(lst)\n    lst.reverse()\n    print(lst)\n    lst = lst[0:n]\n    print(lst)\n    lst.reverse()\n    return lst\n", "def even_numbers(arr,n):\n    return list(reversed([x for x in arr if x%2==0][-1:-(n+1):-1]))", "def even_numbers(arr,n):\n    even_steven = []\n    for element in arr[::-1]:\n        if element % 2 == 0 and len(even_steven) < n:\n            even_steven.append(element)            \n    return even_steven[::-1]", "def even_numbers(arr,n):\n    A = []\n    while len(A) < n and arr:\n        temp = arr.pop()\n        if temp % 2 == 0:\n            A = [temp] + A    \n    return A\n", "def even_numbers(arr,n):\n    arr = arr[::-1]\n    solution = []\n    for i in arr:\n        if i % 2 == 0:\n            solution.append(i)\n            if len(solution) == n:\n                solution = solution[::-1]\n                return solution", "def even_numbers(arr,n):\n    cont = 0\n    m = []\n    x = -1\n    \n    while cont < n:\n        if arr[x] % 2 == 0:\n            m.append(arr[x])\n            cont += 1\n        x = x - 1\n    m.reverse()\n    return m\n", "def even_numbers(arr,n):\n    res = []\n    cnt = 0\n    idx = len(arr)-1\n    while cnt != n:\n        if arr[idx] % 2 == 0:\n            cnt+=1\n            res = [arr[idx]] + res\n        idx = idx-1\n    return res\n        \n"]