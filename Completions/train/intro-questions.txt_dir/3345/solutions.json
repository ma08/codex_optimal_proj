["from collections import defaultdict\n\ndef find_uniq(a):\n    d = {}\n    c = defaultdict(int)\n    for e in a:\n        t = frozenset(e.strip().lower())\n        d[t] = e\n        c[t] += 1\n    \n    return d[next(filter(lambda k: c[k] == 1, c))]", "def find_uniq(arr):\n    if set(arr[0].lower()) == set(arr[1].lower()):\n        majority_set = set(arr[0].lower())\n    elif set(arr[0].lower()) == set(arr[2].lower()):\n        majority_set = set(arr[0].lower())\n    else:\n        majority_set = set(arr[1].lower())\n    \n    for string in arr:\n        if set(string.lower()) != majority_set:\n            return string", "\ndef find_uniq(arr):\n    arr.sort(key=lambda x: x.lower())\n    arr1 = [set(i.lower()) for i in arr]\n    return arr[0] if arr1.count(arr1[0]) == 1 and str(arr1[0]) != 'set()' else arr[-1]", "import numpy as np\ndef find_uniq(arr):\n    arr1 = [''.join(sorted(set(i.lower().replace(' ','')))) for i in arr]\n    lst = np.unique(arr1)\n    for i in lst:\n        if arr1.count(i) == 1:\n            return arr[arr1.index(i)]  \n", "from collections import Counter\n\n\ndef find_uniq(arr):\n    c = Counter(\"\".join(arr).lower())\n    match = [string_ for string_ in arr if min(c, key=c.get) in string_.lower()]\n    return match[0]\n", "def find_uniq(arr):\n    counts = {}\n    result = {}\n    \n    for s in arr:\n        hash = frozenset(s.strip().lower())\n        counts[hash] = counts.get(hash, 0) + 1\n        result[hash] = s\n        \n        if len(counts) > 1 and counts[max(counts, key=counts.get)] > 1:\n            return result[min(counts, key=counts.get)]", "from collections import Counter\n\ndef find_uniq(arr):\n    res = Counter(''.join(arr)).most_common()\n    return ''.join([x for x in arr if res[-1][0] in x])\n", "def find_uniq(arr):\n  S = ''. join (arr)   \n  D = {}\n  for i in S:\n    D[i]=D.get(i,0)+1\n  L = sorted([(v, k) for k, v in list(D.items())], reverse=True)\n  Minv = L[-1][0] \n  Min = L[-1][1] \n  for word in arr:\n    if word.count(Min) >= Minv:\n      return word \n \n\n\n\n\n\n\n\n  \n \n\n"]