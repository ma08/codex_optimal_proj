["def stairs(n):\n    return \"\\n\".join(step(i).rjust(4 * n - 1) for i in range(1, n+1))\n\n\ndef step(n):\n    h = \" \".join(str(i % 10) for i in range(1, n+1))\n    return f\"{h} {h[::-1]}\"", "from itertools import chain\n\ndef stairs(n):\n    if n < 1:\n        return \" \"\n    w = 4 * n - 1\n    xs = [str(i % 10) for i in chain(range(1, n + 1), range(n, 0, -1))]\n    return \"\\n\".join(\" \".join(xs[:i] + xs[-i:]).rjust(w) for i in range(1, n + 1))", "from itertools import chain\n\ngen = lambda x: chain(range(1, x+1), range(x, 0, -1))\nconcat = lambda x: ' '.join(str(y%10) for y in gen(x))\npadding = lambda size: lambda x: f\"{concat(x): >{size}}\"\n\ndef stairs(n):\n    return '\\n'.join(map(padding(4*n-1), range(1, n+1)))", "def stairs(n):\n  return '\\n'.join(' '.join([str(j%10) for j in range(1, i+1)] + [str(j%10) for j in range(i, 0, -1)]).rjust(4*n-1) for i in range(1, n+1))", "def stairs(n):\n    a = [' '.join([str(e)[-1] for e in range(1, i+2)] + [str(i - e + 1)[-1] for e in range(i+1)]) for i in range(n)]\n    return '\\n'.join(e.rjust(4 * n - 1) for e in a)", "def stairs(n):\n    l, s = [], []\n    for i in range(1, n+1):\n        l.append(str(i % 10))\n        s.append(' '.join(l + l[::-1]))\n    return '\\n'.join(r.rjust(len(s[-1])) for r in s)", "def create_line(number):\n    nums_for_line = [num if num < 10 else num % 10 for num in range(1, number + 1)]\n    result = nums_for_line + nums_for_line[::-1]\n    return ' '.join(map(str, result))\n\ndef stairs(number):\n    lines = [create_line(num) for num in range(1, number + 1)]\n    max_length = number * 4 - 1\n    return '\\n'.join(line.rjust(max_length) for line in lines)", "def stairs(n):\n    c,r = '1 2 3 4 5 6 7 8 9 0'.split(),[]\n    for i in range(n):\n        temp = [c[j%10] for j in range(i+1)]\n        r.append((\" \".join(temp) + \" \" + \" \".join(temp[::-1])).rjust(n*4-1))\n    return \"\\n\".join(r)", "def stairs(n):\n    r = lambda n: [str(i % 10) for i in range(1, n + 1)]\n    up_down = lambda n: r(n) + r(n)[::-1]\n    steps = [\" \".join(up_down(i)) for i in range(1, n + 1)]\n    l = len(steps[-1])\n    return \"\\n\".join([r.rjust(l) for r in steps])\n"]