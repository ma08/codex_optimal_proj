["class Solution:\n     def maxProfit(self, prices):\n         profits = 0 \n         ln = len(prices)\n         if not ln:\n             return 0\n         elif ln == 2:\n             return (prices[1]-prices[0]) if prices[1] > prices[0] else 0\n         lastPrice = prices[0]\n         for price in prices:\n             if lastPrice < price:\n                 profits+= (price-lastPrice)\n             lastPrice = price\n         return profits\n                 \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         maxprofit = 0\n         for i in range(1, len(prices)):\n             if prices[i]> prices[i-1]:\n                 maxprofit += prices[i] - prices[i-1]\n         return maxprofit\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices or len(prices)==1:\n             return 0\n         ans=0\n         for i in range(len(prices)-1,0,-1):\n             prices[i]-=prices[i-1]\n         for i in range(1,len(prices),1):\n             if prices[i]>0:\n                 ans+=prices[i]\n         return ans\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         prof = 0\n         for j in range(len(prices)-1):\n             if prices[j+1]>prices[j]:\n                 prof += prices[j+1]-prices[j]\n         return prof\n \n             \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         cum = 0\n         for iprice in range(1, len(prices)):\n             if prices[iprice-1] < prices[iprice]:\n                 cum += prices[iprice] -  prices[iprice-1]\n         return cum", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         #\u7a7a\u6216\u8fd9\u6709\u4e00\u4e2a\uff0c\u4e0d\u5356\n         \n         if len(prices) < 2:\n             return 0\n         #\u521d\u59cb\u5316\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5176\u5b9e\u53ea\u8981\u6700\u540e\u4e00\u4e2a\u6570\u6bd4\u5012\u6570\u7b2c\u4e8c\u4e2a\u6570\u5927\uff0c\u5c31\u53ef\u4ee5\u4ea7\u751f  \u6700\u540e\u4e00\u4e2a\u6570\u4e0e\u5012\u6570\u7b2c#\u4e8c\u6570\u7684\u5dee\u503c\u7684\u3002\u4e0d\u7ba1\u6700\u540e\u4e00\u6b21\u5728\u4ec0\u4e48\u65f6\u5019\u5356\u7684\n         max1 = 0\n         for i in range(1,len(prices)):\n             print(max1)\n             max1 += max(0,prices[i] - prices[i-1])\n         return max1\n         \n             \n         \n         \n             \n         \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         profit = 0\n         for i in range(0, len(prices)-1):\n             if prices[i] < prices[i+1]:\n                 profit = profit + prices[i+1] - prices[i]\n         return profit", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         return sum(max(prices[i] - prices[i - 1], 0) for i in range(1, len(prices)))", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices) == 0:\n             return 0\n         hold = -prices[0]\n         sell = 0;\n         for i in range(1, len(prices)):\n             sell = max(sell, hold + prices[i])\n             hold = max(hold, sell - prices[i])\n         return max(hold, sell)\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         # 7 2 3 4 1 5 3 4\n         # 7 3 2 1 5 7 9 4 5\n         if len(prices) < 2:\n             return 0\n         buy = prices[0] #1\n         sell = -1\n         profit = 0\n         i = 1\n         while i < len(prices):\n             if buy >= prices[i]:\n                 if sell> -1:\n                     profit += sell-buy #15\n                     sell = -1\n                     buy = prices[i] # 2\n                 else:\n                     buy = prices[i] #1\n             if prices[i] > buy:\n                 if prices[i] > sell:\n                     sell = prices[i] #9\n                 else:\n                     profit+=sell - buy #\n                     sell = -1 \n                     buy = prices[i] #2\n                     \n             \n             i+=1\n         if sell>-1:\n             profit+=sell - buy\n         return profit\n", "class Solution:\n     # @param prices, a list of integer\n     # @return an integer\n     def maxProfit(self, prices):\n         p = 0;\n         for i in range(1, len(prices)):\n             profit = prices[i] - prices[i-1]\n             if profit > 0:\n                 p += profit\n         return p", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         # maximum profit at day i(assume i starts at 1)\n         # doesn't sell: profit[i] = profit[i-1]\n         # the index for prices subtract by 1\n         # buy at day j, sell at day i: profit[i] = prices[i-1] + (profit[j-1]-prices[j-1])\n         # if j=1: profit[i] = prices[i-1] + profit[0] - prices[0]\n         # if j=(i-1): profit[i] = prices[i-1] + profit[i-2] - prices[i-2]\n         # if i >= 2: profit[i] = max(profit[i-1], prices[i-1] + max(profit[j]-prices[j])(0<=j<=i-2))\n         # if i == 1: profit[i] = profit[i-1]\n         if len(prices) < 2: return 0\n         profit = [0] * (len(prices) + 1)\n         pro_minus_pri = profit[0] - prices[0]\n         for i in range(2, len(prices) + 1):\n             profit[i] = max(profit[i-1], prices[i-1] + pro_minus_pri)\n             pro_minus_pri = max(profit[i-1] - prices[i-1], pro_minus_pri)\n         return profit[len(prices)]\n", "class Solution:\n     def maxProfit(self, prices):\n         maxprofit = 0\n         for i in range(1,len(prices)):\n             if prices[i] > prices[i-1]:\n                 maxprofit += prices[i] - prices[i-1]\n         return maxprofit"]