["from itertools import cycle\ndef interpreter(tape, array):\n    idx, result = 0, list(map(int, array))\n    for cmd in cycle(map(int, tape)):\n        if idx == len(array): break\n        if cmd: result[idx] = 1-result[idx]\n        else: idx += 1\n    return ''.join(map(str, result))", "def interpreter(tape, code): # Tape is given as a string and code is given as a string.\n    tape, code = [int(t) for t in tape], [int(a) for a in code]\n    ptr, out = 0, \"\"\n    while ptr < len(code):\n        try:\n            for t in tape:\n                if t == 1: code[ptr] ^= 1\n                elif t == 0: ptr +=1\n        except:\n            break \n    return ''.join(map(str,code))", "from itertools import cycle\n\ndef interpreter(tape, array):\n    com = cycle(tape)\n    arr = list(array)\n    i = 0\n    while i < len(arr):\n        if next(com) == '1':\n            arr[i] = '01'[arr[i]=='0']\n            continue\n        i +=1\n    return ''.join(arr)\n        \n        \n", "from itertools import cycle\n\n\ndef interpreter(tape, array):\n    tape, array = cycle(tape), list(array)\n    for i in range(len(array)):\n        while next(tape) == \"1\":\n            array[i] = \"10\"[int(array[i])]\n    return \"\".join(array)\n", "from itertools import cycle\n\ndef interpreter(tape, s):\n    a = list(s)\n    i = 0  # selector\n    for op in cycle(tape):\n        if op == '1':\n            a[i] = str(1 - int(a[i]))\n        else:\n            i += 1\n            if i == len(s):\n                return ''.join(a)", "def interpreter(t, array): \n    ls = list(array)\n    l = len(t)\n    i, j = 0, 0\n    while j<len(array):\n        if t[i%l] == \"1\":\n           ls[j] = \"0\" if ls[j] ==\"1\" else \"1\" \n        else:\n            j+=1\n        i+=1\n    return \"\".join(ls)", "def interpreter(code, array):\n    array = list(map(int, array))\n    ptr = step = 0\n    \n    while ptr < len(array):\n        command = code[step]\n        \n        if   command == \"1\": array[ptr] ^= 1\n        elif command == \"0\": ptr += 1\n        \n        step = (step + 1) % len(code)\n    \n    return \"\".join(map(str, array))", "from itertools import cycle\ndef interpreter(tape, array):\n    output = \"\"\n    for c in cycle(tape):\n        if not array:\n            return output\n        if c == \"0\":\n            output = output + array[0]\n            array = array[1:]\n        else:\n            array = (\"1\" if array[0] == \"0\" else \"0\") + array[1:]", "def interpreter(tape, array):\n    curloc = 0 #current location in array\n    ret = list(array) #list to be returned\n    while True:\n        for x in tape:\n            if curloc == len(array):\n                return ''.join(ret)\n            else:\n                if int(x):\n                    ret[curloc] = str(1 ^ int(ret[curloc], 2))\n                else:\n                    curloc += 1", "def interpreter(tape, array): # Tape is given as a string and array is given as a string.\n    stepArray = 0\n    stepTape = 0    \n    arr = list(array)\n    \n    while(stepArray < len(array)):\n      if(tape[stepTape % len(tape)] == \"1\"):\n        \n        arr[stepArray] = \"1\" if arr[stepArray] == \"0\" else \"0\"\n      else:\n        stepArray += 1\n      stepTape += 1\n      \n    return ''.join(arr)"]