["class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # i = 0\n         # i_keep = 0\n         # j = 1\n         # j_keep = 1\n         # max_sum = nums[0]-1\n         # while j < len(nums) and i < j:\n         #     temp_sum = sum(nums[i:j])\n         #     if temp_sum >= max_sum:\n         #         i_keep = i\n         #         j_keep = j\n         #         max_sum = temp_sum\n         #     elif i == j-1:\n         #         i += 1\n         #         j += 1\n         #     j += 1\n         # return max_sum\n         \n         # brute force\n         # max_sum = nums[0]\n         # for i in range(len(nums)):\n         #     for j in range(i,len(nums)+1):\n         #         temp_sum = sum(nums[i:j])\n         #         if temp_sum > max_sum and i != j:\n         #             max_sum = temp_sum\n         # return max_sum\n \n         # outer loop only\n         max_sum = csum = nums[0]\n         for num in nums[1:]:\n             if num >= csum + num:\n                 csum = num\n             else:\n                 csum += num\n             \n             if csum > max_sum:\n                 max_sum = csum\n         \n         return max_sum\n                 \n         \n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return None\n         cur_sum = 0\n         max_sum = nums[0]\n         for n in nums:\n             if cur_sum < 0:\n                 cur_sum = n\n             else:\n                 cur_sum += n\n             if cur_sum > max_sum:\n                 max_sum = cur_sum\n         return max_sum", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         current = 0\n         maxsum = -9**99\n \n         for i in range(len(nums)):\n             if current < 0: current = 0\n             current += nums[i]\n             maxsum = max(maxsum, current)\n         return maxsum", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         current, the_max = [nums[0]]*2\n         for num in nums[1:]:\n             current = max(num, current + num)\n             the_max = max(current, the_max)\n         return the_max", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         res = curr = nums[0]                           \n         for i in range(1, len(nums)):\n             curr = max((curr + nums[i], nums[i]))\n             res = max((res, curr))\n         return res\n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         result, curr = nums[0], nums[0]\n         i = 1\n         while i < len(nums) :\n             curr = max(nums[i], curr+nums[i])               \n             result = max(curr, result)\n             i += 1         \n         return result", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         maxSum = maxGlobalSum = nums[0]\n \n         for i in range(1, len(nums)):\n             if nums[i] > nums[i] + maxSum:\n                 maxSum = nums[i]\n             else:\n                 maxSum += nums[i]\n \t\t\n             if maxSum > maxGlobalSum:\n                 maxGlobalSum = maxSum\n \n         return maxGlobalSum\n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return None\n         \n         result = nums[0]\n         lastMax = nums[0]\n     \n         for i in range(1, len(nums)):\n             lastMax = lastMax + nums[i] if lastMax + nums[i] >= nums[i] else nums[i]\n             result = lastMax if lastMax > result else result\n         \n         return result\n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         else:\n             res = 0\n             count = 0\n             for i in range(len(nums)):\n                 count += nums[i]\n                 if count < 0:\n                     count = 0\n                 else:\n                     res = max(res,count)\n             if res == 0:\n                 return max(nums)\n             return res", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if all(n < 0 for n in nums):\n             return max(nums)\n         i = 0\n         a = 0\n         maxsum = 0\n         while i < len(nums):\n             b = c = 0\n             while i < len(nums) and nums[i] <= 0:\n                 b += nums[i]\n                 i += 1\n             while i < len(nums) and nums[i] >= 0:\n                 c += nums[i]\n                 i += 1\n             a = max(a + b + c, c)\n             maxsum = max(maxsum, a)\n         return maxsum", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         \n         curSum = maxSum = nums[0]\n         \n         for num in nums[1:]:\n             curSum = max(num, curSum + num)\n             maxSum = max(maxSum, curSum)\n \n         return maxSum\n \n     \n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # [-2,1,-3,-5]\n         curSum = maxSum = nums[0]\n         for num in nums[1:]:\n             curSum = max(num, curSum + num) # start a new array or use added up array num[1]=1 or num[0]+num[1]=-1\n             maxSum = max(maxSum, curSum) # update the max prior = 1 or cursum 1-3-5\n \n         return maxSum\n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         best = 0\n         total = 0\n         for n in nums:\n             if total+n<0:\n                 total=0\n             else:\n                 total+=n\n             print(total)\n \n \n             best=max(total,best)\n         if max(nums)<0:\n             return max(nums)\n         return best\n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_sum = nums[0]\n         sum_list = [0] * len(nums)\n         sum_list[0] = max_sum\n         for i in range(1, len(nums)):\n             sum_list[i] = max(nums[i], sum_list[i-1] + nums[i])\n             max_sum = max(max_sum, sum_list[i])\n         return max_sum\n             \n", "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         sumlist = [0] * (len(nums) + 1)\n         sumlist[0] = 0\n         sumMin = 0\n         globalMax = nums[0]\n         for i in range(1, len(nums) + 1):\n             sumlist[i] = sumlist[i - 1] + nums[i - 1]\n             print(sumlist[i])\n             globalMax = max(sumlist[i] - sumMin, globalMax)\n             sumMin = min(sumMin, sumlist[i])\n             \n         return globalMax", "class Solution:\n     \n     \n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         def dac (X):\n             if len(X) == 1:\n                 return X[0], X[0], X[0], X[0] # l, r, m, s\n             \n             n = len(X)\n             nby2 = n // 2\n             A = X[:nby2]\n             B = X[nby2:]\n             l1, r1, m1, s1 = dac(A)\n             l2, r2, m2, s2 = dac(B)\n             l = max(l1, s1 + l2)\n             r = max(r2, s2 + r1)\n             m = max(m1, m2, r1 + l2)\n             s = s1 + s2\n             return l, r, m, s\n         \n         return dac(nums)[2]\n         \n"]