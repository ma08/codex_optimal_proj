["class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        da = defaultdict(set)\n        db = defaultdict(set)\n        dc = defaultdict(set)\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                dis = abs(arr[j]-arr[i])\n                if dis <= a: da[i].add(j)\n                if dis <= b: db[i].add(j)\n                if dis <= c: dc[i].add(j)\n        count = 0\n        for i in range(len(arr)-2):\n            for j in da[i]:\n                for k in db[j]:\n                    if k in dc[i]:  count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        # size = len(arr)\n        # res = 0\n        # for i in range(size-2):\n        #     for j in range(i+1, size-1):\n        #         for k in range(j+1, size):\n        #             ok_a = abs(arr[i] - arr[j]) <= a\n        #             ok_b = abs(arr[j] - arr[k]) <= b\n        #             ok_c = abs(arr[i] - arr[k]) <= c\n        #             if all((ok_a, ok_b, ok_c)):\n        #                 res += 1   \n        # return res\n        \n        res = (1 for i,j,k in combinations(arr,3) if abs(i-j)<=a and abs(j-k)<=b and abs(i-k)<=c)\n        return sum(res)", "import itertools\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        triplets = 0\n        for i, j, k in itertools.combinations(arr, 3):\n            if abs(i - j) <= a and abs(j - k) <= b and abs(i - k) <= c:\n                triplets += 1\n                \n        return triplets", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n, result = len(arr), 0\n        for i in range(n):\n            for k in range(i + 1, n):\n                if abs(arr[i] - arr[k]) > c: continue\n                result += sum(abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b\n                              for j in range(i + 1, k))\n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if abs(arr[i]-arr[j]) <= a:\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[k]-arr[j]) <= b and abs(arr[k]-arr[i]) <= c:\n                            count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        #print(arr)\n        #print(a)\n        #print(b)\n        #print(c)\n        count = 0\n        lis = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[j] - arr[k])<= b and abs(arr[i] - arr[k]) <= c:\n                            lis.append((arr[i],arr[j],arr[k]))\n        return(len(lis))\n        \n                        \n                    \n                   \n                    #if abs(arr[i] - arr[j]) <= a  and  abs(arr[j] - arr[k]) <= b and  abs(arr[i] - arr[k]) <= c:\n                        \n                     \n                        #lis.append((arr[i],arr[j],arr[k]))\n        #print(lis)\n                        \n                        \n            \n                        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        self.counter = 0\n        for i in range(0, len(arr)-2):\n            for k in range(2, len(arr)):\n                if i < k-1 and abs(arr[i]-arr[k]) <= c:\n                    for j in range (1, len(arr)-1):\n                        if i < j < k and abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b:\n                            self.counter += 1\n        return self.counter", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = (1 for i,j,k in combinations(arr,3) if abs(i-j)<=a and abs(j-k)<=b and abs(i-k)<=c)\n        return sum(ans)\n                \n", "# Brute Force Solution\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                \n                a_bool = abs(arr[i] - arr[j]) <= a\n                \n                # break case\n                if a_bool:\n                    for k in range(j+1,len(arr)):\n\n                        b_bool = abs(arr[j] - arr[k]) <= b\n                        c_bool = abs(arr[i] - arr[k]) <= c\n\n                        if all((b_bool,c_bool)):\n                            count += 1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self,arr,a,b,c):\n        ln,res = len(arr),0\n        for i in range(ln-2):\n            n = arr[i]\n            for j in range(i+1,ln-1):\n                n2 = arr[j]\n                for k in range(j+1,ln):\n                    n3 = arr[k]\n                    if abs(n-n2)<=a and abs(n2-n3)<=b and abs(n-n3)<=c:\n                        res+=1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        s=0\n        for i, m in enumerate(arr):\n            for j, n in enumerate(arr[i+1:]):\n                for k,q in enumerate(arr[i+j+2:]):\n                    if abs(m-n)<=a and abs(n-q)<=b and abs(m-q)<=c:\n                        s+=1\n        return s", "\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goodPairs = 0\n        for item, val in enumerate(arr):\n            restNums = arr[item+1:]\n            for item2, val2 in enumerate(restNums):\n                restNums2 = restNums[item2+1:]\n                for item3, val3 in enumerate(restNums2):\n                    if abs(val - val2) <= a:\n                        if abs(val2 - val3) <= b:\n                            if abs(val - val3) <= c:\n                                goodPairs +=1\n        \n        return goodPairs", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i, x in enumerate(arr):\n            for j, y in enumerate(arr[i+1:], i+1):\n                for k, z in enumerate(arr[j+1:], j+1):\n                    if abs(x - y) <= a and abs(y - z) <= b and abs(x - z) <= c:\n                        count += 1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        totallen = len(arr)\n        res = 0\n        \n#         for i in range(totallen-2):\n#             for j in range(i+1,totallen-1):\n                \n#                 for k in range(j+1,totallen):\n                    \n#                     if abs(arr[i]-arr[j]) <=a and abs(arr[j]-arr[k]) <=b and abs(arr[i]-arr[k]) <=c:\n#                         res += 1\n                        \n#         return res\n\n        for i in range(totallen-2):\n            for j in range(i+1,totallen-1):\n                if abs(arr[i]-arr[j]) <=a :\n                    for k in range(j+1,totallen):\n                        if abs(arr[j]-arr[k]) <=b and abs(arr[i]-arr[k]) <=c:\n                            res += 1\n                        \n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        def isGood(i, j, a):\n            return abs(arr[i] - arr[j]) <= a\n        \n        ret = 0\n        if not arr:\n            return ret\n        \n        n = len(arr)\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                if isGood(i, j, a):\n                    for k in range(j + 1, n):\n                        if isGood(j, k, b) and isGood(i, k, c):\n                            ret += 1\n        return ret\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i, item in enumerate(arr):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(item-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(item-arr[k]) <= c:\n                        count+=1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i]-arr[j] <= a):\n                    for k in range(j+1, len(arr)):\n                        if abs(arr[i] -arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[k]-arr[i])<=c:\n                            res+= 1\n        return res", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = [1 for i,j,k in combinations(arr,3) if abs(i-j)<=a and abs(j-k)<=b and abs(i-k)<=c]\n        return sum(ans)\n                \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        length = len(arr)\n        for i in range(0, length):\n            for j in range(i+1, length):\n                for k in range(j+1, length):\n                    if abs(arr[i] - arr[j]) <=a and abs(arr[j]- arr[k])<= b and abs(arr[i]- arr[k])<= c:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTripletsCase1(self, arr: List[int], a: int, b: int) -> int:\n        count = 0\n        for j in range(1, len(arr) - 1):\n            l = sum(abs(arr[i] - arr[j]) <= a for i in range(0, j))\n            r = sum(abs(arr[j] - arr[k]) <= b for k in range(j + 1, len(arr)))\n            count += l * r\n        return count\n    \n    def countGoodTripletsCase2(self, arr: List[int], a: int, b: int, c: int) -> int:\n        index = sorted(range(len(arr)), key=lambda k: arr[k])\n        count = 0\n        \n        for j in range(len(arr) - 1, 0, -1):\n            for i in range(j - 1, -1, -1):\n                if index[j] == j: break\n                index[j], index[i] = index[i], index[j]\n            for k in range(j + 2, len(arr)):\n                if arr[index[k - 1]] > arr[index[k]]:\n                    index[k - 1], index[k] = index[k], index[k - 1]\n            \n            i_min = next((i for i in range(0, j) if arr[index[i]] >= arr[j] - a), j)\n            i_max = next((i for i in range(i_min, j) if arr[index[i]] > arr[j] + a), j)\n            \n            ic_min, ic_max = i_min, i_min\n            k = next((i for i in range(j + 1, len(arr)) if arr[index[i]] >= arr[j] - b), len(arr))\n            while k < len(arr) and arr[index[k]] <= arr[j] + b:\n                while ic_min < i_max and arr[index[ic_min]] < arr[index[k]] - c: ic_min += 1\n                while ic_max < i_max and arr[index[ic_max]] <= arr[index[k]] + c: ic_max += 1\n                count += ic_max - ic_min\n                k += 1\n\n        return count\n    \n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        if c >= a + b:\n            return self.countGoodTripletsCase1(arr, a, b)\n        else:\n            return self.countGoodTripletsCase2(arr, a, b, c)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        output = 0\n        l = len(arr)\n        for i in range(l-2):\n            for j in range(i+1,l-1):\n                for k in range(j+1,l):\n                    if (abs(arr[i]-arr[j]) <= a) and (abs(arr[j]-arr[k]) <= b) and (abs(arr[i]-arr[k]) <= c):\n                        output += 1\n                        \n        return output", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0 \n        for i in range(len(arr)) : \n            for j in range(i+1 , len(arr)) : \n                for k in range(j+1 , len(arr)) : \n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c : \n                        cnt +=1 \n                        \n        return cnt\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        ctr = 0\n        for i in range(size-2):\n            for j in range(i+1, size-1):\n                for k in range(j+1, size):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ctr += 1\n        return ctr", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        l = len(arr)\n        n = 0\n        for i in range(l-2):\n            for j in range(i+1, l-1):\n                for k in range(j+1, l):\n                    if (abs(arr[i] - arr[j]) <= a and \n                    abs(arr[j] - arr[k]) <= b and \n                    abs(arr[i] -arr[k]) <= c):\n                        n += 1\n        return n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[k]-arr[i])<=c:\n                        count+=1\n        return count", "from typing import List\n\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        total_good_triplets = 0\n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(\n                        arr[k] - arr[j]) <= b and abs(\n                            arr[i] - arr[k]) <= c:\n                        total_good_triplets += 1\n        return total_good_triplets\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[i] - arr[k]) <= c and abs(arr[j]-arr[k]) <= b:\n                        res += 1\n        return res\n", "from collections import defaultdict\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        da = defaultdict(set)\n        db = defaultdict(set)\n        dc = defaultdict(set)\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                dis = abs(arr[j]-arr[i])\n                if dis <= a: da[i].add(j)\n                if dis <= b: db[i].add(j)\n                if dis <= c: dc[i].add(j)\n        count = 0\n        for i in range(len(arr)-2):\n            for j in da[i]:\n                for k in db[j]:\n                    if k in dc[i]:  count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <= a:\n                        if abs(arr[j] - arr[k]) <= b:\n                            if abs(arr[i] - arr[k]) <= c:\n                                ans += 1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans,n = 0,len(arr)\n        for x in range(n-2):\n            for y in range(x+1,n-1):\n                for z in range(y+1,n):\n                    if abs(arr[x]-arr[y])<=a and abs(arr[y]-arr[z])<=b and abs(arr[x]-arr[z])<=c:\n                        ans+=1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1, n):\n                    if abs(arr[i] - arr[j]) <=a and abs(arr[j]-arr[k]) <=b and abs(arr[i]-arr[k]) <= c:\n                        ans += 1\n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        count +=1\n                \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        length = len(arr)\n        out = 0\n        for i in range(length - 1 - 1):\n            for j in range(i+1, length - 1):\n                for k in range(j+1, length):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        out += 1\n        return out", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        total = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j])<=a and abs(arr[j] - arr[k])<=b and abs(arr[i] - arr[k])<=c:\n                        total += 1\n                    \n        return total", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        iterator = list(range(len(arr)))\n        count = 0\n        for i in iterator:\n            for j in iterator:\n                if i < j < len(arr):\n                    if abs(arr[i]-arr[j]) <= a:\n                        for k in iterator:\n                            if i < j < k < len(arr):\n                                if abs(arr[j] - arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                                    count += 1\n        return count\n                    \n              \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        \n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j]) <=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        count=count+1\n                        \n        \n        return(count)    \n    \n   \n    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        pair = {p:dict() for p in (a, b, c)}\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                d = abs(arr[i] - arr[j])\n                for p in (a, b, c):\n                    if d <= p:\n                        if i not in pair[p]:\n                            pair[p][i] = set()\n                        pair[p][i].add(j)\n        ans = 0\n        empty = set()\n        for i, js in list(pair[a].items()):\n            for j in js:\n                ans += len(pair[b].get(j, empty) & pair[c].get(i, empty)) \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        output = 0\n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i] - arr[j]) <= a \n                        and abs(arr[j] - arr[k]) <= b\n                        and abs(arr[i] - arr[k]) <= c):\n                        output +=1\n        return output\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count, n = 0, len(arr)\n        \n        for i in range(0, n-2):\n            for j in range(i+1, n - 1):\n                for k in range(j + 1, n):\n                    x, y, z = arr[i], arr[j], arr[k]\n                    if abs(x - y) <= a and abs(y-z) <= b and abs(z - x) <= c:\n                        count += 1\n                        \n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt =0\n        \n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        cnt+=1\n                        \n                        \n        return cnt", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans =0\n        \n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    \n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[k]-arr[i]) <= c:\n                        ans += 1\n        \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        from itertools import combinations\n        result = 0\n        for x in combinations(arr,3):\n            if abs(x[0]-x[1])<=a and abs(x[1]-x[2])<=b and abs(x[2]-x[0])<=c:\n                result +=1\n        return result", "class Solution:\n    def countGoodTriplets(self,arr,a,b,c):\n        return sum(abs(n-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(n-arr[k])<=c for i,n in enumerate(arr) for j in range(i+1,len(arr)-1) for k in range(j+1,len(arr)))\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        combs = combinations(arr, 3)\n        count = 0\n        for i in combs:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                count += 1\n                    \n        return count\n              \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods = 0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                for k in range(j, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c and i != j and j != k:\n                        goods += 1\n        return goods", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goodTriplets = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a:\n                        if abs(arr[j] - arr[k]) <= b:\n                            if abs(arr[i] - arr[k]) <= c:\n                                goodTriplets += 1 \n                                \n        return goodTriplets\n", "from collections import defaultdict\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        da = defaultdict(set)\n        db = defaultdict(set)\n        dc = defaultdict(set)\n        count = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if(abs(arr[i]-arr[j]) <= a):\n                    da[i].add(j)\n                if(abs(arr[i]-arr[j]) <= b):\n                    db[i].add(j)\n                if(abs(arr[i]-arr[j]) <= c):\n                    dc[i].add(j)\n        for i in da:\n            for j in da[i]:\n                for k in db[j]:\n                    if k in dc[i]:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        di = defaultdict(set)\n        dj = defaultdict(set)\n        dk = defaultdict(set)\n        \n        arr = [(i, x) for i, x in enumerate(arr)]\n        arr = sorted(arr, key=lambda x: x[1])\n        \n        n = len(arr)\n        \n        for i, tup_a in enumerate(arr):\n            iorig, x = tup_a\n            \n            j = i+1\n            while True:\n                if j == n:\n                    break\n                if abs(x-arr[j][1]) <= a:\n                    di[iorig].add(arr[j][0])\n                \n                if abs(x-arr[j][1]) <= b:\n                    dj[iorig].add(arr[j][0])\n                    \n                if abs(x-arr[j][1]) <= c:\n                    dk[iorig].add(arr[j][0])\n                    \n                j += 1\n            \n            j = i-1\n            while True:\n                if j < 0:\n                    break\n                    \n                if abs(x-arr[j][1]) <= a:\n                    di[iorig].add(arr[j][0])\n                    \n                if abs(x-arr[j][1]) <= b:\n                    dj[iorig].add(arr[j][0])\n                    \n                if abs(x-arr[j][1]) <= c:\n                    dk[iorig].add(arr[j][0])\n                    \n                j -= 1\n        \n        o = 0\n        for i in range(n):\n            for j in di[i]:\n                for k in dj[j]:\n                    if k in dk[i]:\n                        if i >=0 and j > i and k > j and k < n:\n                            o += 1\n        return o\n            \n            \n            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        return sum([abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c for i in range(len(arr)) for j in range(i+1,len(arr)) for k in range(j+1,len(arr))])", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        combos = combinations(arr, 3)\n        \n        final = []\n        \n        for i in combos:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                final.append(i)\n        return len(final)\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = []\n        \n        for i in range(len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        ans.append((arr[i], arr[j], arr[k]))\n        return len(ans)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        pointer1 = 0\n        pointer2 = 1\n        pointer3 = 2\n\n        res = 0\n\n        length = len(arr)\n\n        while pointer1 < length - 2:\n            while pointer2 < length - 1:\n                while pointer3 < length:\n                    if abs(arr[pointer1]-arr[pointer2]) <= a and abs(arr[pointer2]-arr[pointer3]) <=b and abs(arr[pointer1]-arr[pointer3]) <=c:\n                        res += 1\n                    pointer3+=1\n                pointer2+=1\n                pointer3=pointer2+1\n            pointer1+=1\n            pointer2 = pointer1+1\n            pointer3 = pointer2+1\n\n        return(res)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        answer = []\n        for i in range(len(arr)):\n            for j in range((i+1), len(arr)):\n                for k in range((j+1), len(arr)):\n                    if (abs(arr[i]-arr[j]) <=a) and (abs(arr[j]-arr[k]) <=b) and (abs(arr[i]-arr[k]) <=c):\n                        answer.append((arr[i], arr[j], arr[k]))\n                        \n        return len(answer)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        combs = combinations(arr, 3)\n        fin = []\n        for i in combs:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                fin.append(i)\n                    \n        return len(fin)\n              \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goodtriplets=[]\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        goodtriplets.append((arr[i],arr[j],arr[k]))\n        return len(goodtriplets)\n\n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        list1=[]\n\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j] - arr[k])<=b and abs(arr[i] - arr[k])<=c:\n                        list1.append([arr[i],arr[j],arr[k]])\n                        count+=1\n                        \n                        \n        return count               \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        dict_a = defaultdict(set)\n        dict_b = defaultdict(set)\n        dict_c = defaultdict(set)\n        \n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                if abs(arr[i]-arr[j]) <= a:\n                    dict_a[i].add(j)\n                if abs(arr[i]-arr[j]) <= b:\n                    dict_b[i].add(j)\n                if abs(arr[i]-arr[j]) <= c:\n                    dict_c[i].add(j)\n        \n        for i in range(len(arr)-2):\n            for j in dict_a[i]:\n                for k in dict_b[j]:\n                    if k in dict_c[i]:\n                        count = count + 1\n        return count\n                        \n                        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            \n            for j in range(i+1, len(arr)):\n                \n                for k in range(j+1, len(arr)):\n                    \n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-                              arr[k])<=c:\n                        res += 1\n        return res\n    \n    # [ 1  1  4 ]\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        con = combinations(arr,3)\n        res = []\n        for i in con:\n            if abs(i[0]-i[1]) <= a and abs(i[1]-i[2]) <=b and abs(i[0]-i[2])<=c:\n                res.append(i)\n        return len(res)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        indexer = len(arr) \n        for i in range(indexer):\n            for j in range(1, indexer - i):\n                for k in range(1, indexer - i - j):\n                    if abs(arr[i] - arr[i + j]) <= a:\n                        if abs(arr[i + j] - arr[i + j + k]) <= b:\n                            if abs(arr[i] - arr[i + j + k]) <= c:\n                                count += 1\n                                \n        \n        \n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n#         cou = 0\n#         left, right = 0, len(arr)-1\n#         while left < len(arr) - 2:\n#             if left == right - 1:\n#                 left += 1\n#                 right = len(arr)-1\n#                 continue\n#             if abs(arr[left] - arr[right]) > c:\n#                 right -= 1\n#                 continue\n#             if abs(arr[left] - arr[right]) <= c:\n#                 for i in range(left+1, right):\n#                     if abs(arr[left] - arr[i]) <= a and abs(arr[i] - arr[right]) <= b:\n#                         cou += 1\n#                 right -= 1\n#                 continue\n                \n#         return cou\n        return sum([\n            abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[k] - arr[i]) <= c\n            for i in range(len(arr))\n            for j in range(i + 1, len(arr))\n            for k in range(j + 1, len(arr))\n            ])", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        #arr = list(sorted(arr))\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        res = 0\n        \n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                if j <= i:\n                    continue\n                for k in range(j, len(arr)):\n                    if k <= i or k <= j:\n                        continue\n                        \n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        res += 1\n                        \n        return res\n                    \n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        combs = combinations(arr, 3)\n        fin = []\n        for i in combs:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                fin.append(i)\n                    \n        return len(fin)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        \n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n                        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        perm = combinations(arr, 3)\n        answer = []\n        # c = 0\n        for i in perm:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                answer.append(i)\n                # c += 1\n                    \n        return len(answer)\n        # return c\n", "from collections import defaultdict\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        lt_a = defaultdict(set)\n        lt_b = defaultdict(set)\n        lt_c = defaultdict(set)\n        \n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if abs(arr[j] - arr[i]) <= a:\n                    lt_a[i].add(j)\n                if abs(arr[j] - arr[i]) <= b:\n                    lt_b[i].add(j)\n                if abs(arr[j] - arr[i]) <= c:\n                    lt_c[i].add(j)\n        \n        num_good_triplets = 0\n        for i in lt_a:\n            for j in lt_a[i]:\n                for k in lt_b[j]:\n                    if k in lt_c[i]:\n                        num_good_triplets += 1\n        \n        return num_good_triplets\n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        print(arr)\n        print((a, b, c))\n        resp = []\n        count = 0\n        comb = itertools.combinations(arr, 3)\n        for i in comb:\n            if( abs(i[0]-i[1]) <= a and abs(i[1]-i[2]) <= b and abs(i[0]-i[2]) <=c ):\n               resp.append(i)\n               count = count + 1\n        return count\n        \n        \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        return sum((abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[k] - arr[i]) <= c for i,j,k in itertools.combinations(list(range(len(arr))), 3)))\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        good_triplets = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        good_triplets += 1\n        \n        return good_triplets", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if(abs(arr[i]-arr[j])<=a):\n                        if(abs(arr[j]-arr[k])<=b):\n                            if(abs(arr[i]-arr[k])<=c):\n                                count+=1\n                                \n        return(count)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good=0\n        arrLen=len(arr)\n        for i in range(arrLen-2):\n            for j in range(i+1, arrLen-1):\n                for k in range(j+1, arrLen):\n                    if arr[i] - arr[j] <= a and arr[j] - arr[i] <= a:\n                        if arr[j] - arr[k] <= b and arr[k] - arr[j] <= b:\n                            if arr[i] - arr[k] <= c and arr[k] - arr[i] <= c:\n                                good+=1\n        return good", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                for k in range(j, n):\n                    if i != j != k and j != k:\n                        if (abs(arr[i] - arr[j]) <= a\n                           and abs(arr[j] - arr[k]) <= b\n                           and abs(arr[i] - arr[k]) <= c):\n                            count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        goodcount = 0\n        \n        for i in range(len(arr)-2):\n            \n            for j in range (i+1 , len(arr)-1):\n                \n                k = j+1\n                \n                while k < len(arr):\n                \n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c :\n                    \n                        goodcount += 1\n                    k += 1\n        \n        return goodcount", "from itertools import combinations\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n    \n        # Brute Force\n        # Time: O(n^3)   \n    \n#         size = len(arr)\n#         for i in range(size):\n#             for j in range(size):\n#                 if i >= j:\n#                     continue\n#                 for k in range(size):\n#                     if i >= k or j >= k:\n#                         continue\n                    \n#                     if (abs(arr[i] - arr [j]) <= a) and (abs(arr[j] - arr [k]) <= b) and (abs(arr[i] - arr [k]) <= c) :\n#                         count += 1\n\n\n\n        # Using itertools.combinations\n    \n        # triplets = combinations(arr, 3)\n        # for triplet in triplets:\n        #     if (abs(triplet[0] - triplet[1]) <= a) \\\\\n        #             and (abs(triplet[1] - triplet[2]) <= b) \\\\\n        #             and (abs(triplet[0] - triplet[2]) <= c):\n        #         count += 1\n        # return count\n\n        \n        combs = combinations(arr, 3)\n        return sum((abs(comb[0] - comb[1]) <= a and abs(comb[1] - comb[2]) <= b and abs(comb[0] - comb[2]) <= c) for comb in combs)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods=0\n        for i in range(1,len(arr)-1):\n            first=arr[:i]\n            last=arr[i+1:]\n\n            ij_pairs,jk_pairs=[],[]\n            for n in first:\n                if abs(arr[i]-n)<=a:\n                    ij_pairs.append((n,arr[i]))\n            for n in last:\n                if abs(arr[i]-n)<=b:\n                    jk_pairs.append((arr[i],n))\n            for ij in ij_pairs:\n                for jk in jk_pairs:\n                    if abs(ij[0]-jk[1])<=c:\n                        goods+=1\n        return goods", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c: ans += 1\n        return ans ", "from itertools import combinations\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n\n        combs = combinations(arr, 3)\n        \n        counter = 0\n        for i in list(combs):\n            if abs(i[0]-i[1]) <= a and abs(i[1]-i[2]) <= b and abs(i[0]-i[2]) <= c:\n                counter += 1\n                \n        return counter", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                for k in range(j, n):\n                    if (i == j) or (j == k) or (i == k):\n                        continue\n                    if (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                        ans += 1\n\n        return ans", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = list(combinations(arr,3))\n        count = 0\n        for i in res :\n            if abs(i[0]-i[1]) <= a and abs(i[1]-i[2]) <= b and abs(i[0]-i[2]) <= c :\n                count  +=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        return len(list(filter(lambda x: abs(x[0] - x[1]) <= a and abs(x[1] - x[2]) <= b and abs(x[0] - x[2]) <= c, combinations(arr, 3))))", "# class Solution:\n#     def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n#         #li = []\n#         count = 0\n#         for x in range(len(arr)):\n#             #print(x)\n#             for i in range(x+1,len(arr)):\n#                 if (abs(arr[x]-arr[i]) <= a):\n#                     for j in range(i+1,len(arr)):\n#                         if (abs(arr[i]-arr[j])<=b):\n#                             if (abs(arr[j]-arr[x])<=c):\n#                                 count += 1\n#         # for x in li:\n#         #     if abs(x[0]-x[1]) <= a and abs(x[1]-x[2]) <=b and abs(x[0]-x[2]) <=c:\n#         #         count += 1\n#         return count\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        out=0\n        \n        for i in range(len(arr)):\n                for j in range(i+1,len(arr)):        \n                        for k in range(j+1,len(arr)):\n                            if (abs(arr[i]-arr[j])<=a) and (abs(arr[j]-arr[k])<=b) and (abs(arr[i]-arr[k])<=c):\n                                \n                                    out+=1\n        return out", "from collections import defaultdict\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        da = defaultdict(set)\n        db = defaultdict(set)\n        dc = defaultdict(set)\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                dis = abs(arr[j]-arr[i])\n                if dis <= a: da[i].add(j)\n                if dis <= b: db[i].add(j)\n                if dis <= c: dc[i].add(j)\n        count = 0\n        for i in range(len(arr)-2):\n            for j in da[i]:\n                for k in db[j]:\n                    if k in dc[i]:\n                        count += 1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        result = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        result += 1\n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i = 0\n        j = i + 1\n        k = j + 1\n        return_arr = []\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                for k in range(j, len(arr)):\n                    if i < j < k:\n                        if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            return_arr.append([arr[i], arr[j], arr[k]])\n                    \n            \n            \n        \n        return len(return_arr)\n                \n                \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c :\n                        ans = ans+1\n                        \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                for k in range(j+1, len(arr)):\n                    if (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                        count += 1\n        return count\n                        \n", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = list(combinations(arr,3))\n        count = 0\n        for i in res :\n            if abs(i[0] - i[1]) <= a and abs(i[1]-i[2]) <= b and abs(i[0]-i[2]) <= c :\n                count +=1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i]- arr[j]) <=a and abs(arr[j]- arr[k]) <= b and abs(arr[i] - arr[k]) <=c:\n                        count += 1\n        return count\n        \n        \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0\n        for i in range(0, len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if i == j or j == k or i == k or i == j == k: continue\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c: cnt += 1\n        return cnt", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        d=0\n        e=len(arr)\n        for i in range(e):\n            for j in range(e):\n                if j>i:\n                    for k in range(e):\n                        if k>j:\n                            if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                                d+=1\n                        else:\n                            pass\n                else:\n                    pass\n        return d", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        counter = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if abs(arr[i] - arr[j]) <=a and abs(arr[j] - arr[k]) <=b and abs(arr[i] - arr[k]) <=c:\n                        counter += 1\n        return(counter)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        count = count+1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods=0\n        for i in range(1,len(arr)-1):\n            first=arr[:i]\n            last=arr[i+1:]\n        \n            ij_pairs,jk_pairs=[],[]\n            for n in first:\n                if abs(arr[i]-n)<=a:\n                    ij_pairs.append((n,arr[i]))\n            for n in last:\n                if abs(arr[i]-n)<=b:\n                    jk_pairs.append((arr[i],n))\n            for ij in ij_pairs:\n                for jk in jk_pairs:\n                    if abs(ij[0]-jk[1])<=c:\n                        goods+=1\n        return goods", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if ((0 <= i and i < j and j < k and k < len(arr)) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs((arr[i] - arr[k])) <= c):\n                        count = count + 1\n        \n        return count\n                        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    val1 = arr[j]-arr[k]\n                    val2 = arr[i] - arr[k]\n                    val = arr[i] - arr[j]\n                    if abs(val) <= a and abs(val1) <= b and abs(val2) <= c:\n                        ans +=1\n            \n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        print(a,b,c)\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i]-arr[j])<=a) and (abs(arr[j]-arr[k])<=b) and (abs(arr[i]-arr[k])<=c):\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        temp = [x for x in combinations(arr, 3)]\n        count = 0\n        \n        for i in temp:\n            if (abs(i[0]-i[1]) <= a and abs(i[1]-i[2]) <= b and abs(i[0]-i[2]) <= c\n               ):\n                count += 1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n                        \n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0 \n        for i in range(len(arr)-2):\n            for j in range (i+1,len(arr)-1):\n                for k in range (j+1,len(arr)):\n                    if abs(arr[i] -arr[j]) <=a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count +=1\n                       \n        return count              \n            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        total =0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for z in range(j+1,len(arr)):\n                    new_arr = [arr[i],arr[j],arr[z]]\n                    if (abs((new_arr[0]-new_arr[1]))<=a and (abs(new_arr[1]-new_arr[2]))<=b and (abs(new_arr[0]-new_arr[2]))<=c):\n                        total += 1\n        return total", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        final = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if (0 <= i < j < k < len(arr)) and (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                        final += 1\n        return final", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        self.counter = 0\n        for i in range(0, len(arr)-2):\n            for k in range(2, len(arr)):\n                if abs(arr[i]-arr[k]) <= c and i < k-1:\n                    for j in range (1, len(arr)-1):\n                        if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and i < j < k:\n                            self.counter += 1\n        return self.counter", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if (0 <= i < j < k < len(arr)) and (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                        count += 1\n                        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if ((0 <= i and i < j and j < k and k < len(arr)) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs((arr[i] - arr[k])) <= c):\n                        count = count + 1\n        \n        return count\n                        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        from itertools import combinations\n        l = list(combinations(arr, 3))\n        res = []\n        for tup in l:\n            if  abs(tup[0] - tup[1]) <= a and abs(tup[0] - tup[2]) <= c and abs(tup[2] - tup[1]) <= b:\n                res.append(tup)\n                \n        return len(res)\n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if 0 <= i < j < k < len(arr) and abs(arr[i] - arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i] - arr[k]) <= c: ans+=1\n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count_ = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    diff1 = abs(arr[i] - arr[j])\n                    diff2 = abs(arr[j] - arr[k])\n                    diff3 = abs(arr[i] - arr[k])\n                    if (diff1<=a) and (diff2<=b) and (diff3<=c):\n                        count_ +=1\n                        \n        return count_", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i]-arr[j]) <= a) & (abs(arr[j]-arr[k]) <= b) & (abs(arr[i]-arr[k]) <= c):\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        pair = dict()\n        for p in (a, b, c):\n            pair[p] = dict()\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                d = abs(arr[i] - arr[j])\n                for p in (a, b, c):\n                    if d <= p:\n                        if i not in pair[p]:\n                            pair[p][i] = set()\n                        pair[p][i].add(j)\n        ans = 0\n        empty = set()\n        for i, js in list(pair[a].items()):\n            for j in js:\n                ans += len(pair[b].get(j, empty) & pair[c].get(i, empty)) \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    one = abs(arr[i] - arr[j])\n                    two = abs(arr[j] - arr[k])\n                    three = abs(arr[i] - arr[k])\n                    if one <= a and two <= b and three <= c:\n                        ans += 1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <=a and abs(arr[j] - arr[k]) <=b and abs(arr[i] - arr[k]) <= c:\n                        cnt += 1\n        \n        return cnt\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for x in range(len(arr)):\n            for y in range(x+1, len(arr)):\n                for z in range(y+1, len(arr)):\n                    if (abs(arr[x] - arr[y]) <= a) & (abs(arr[y] - arr[z]) <= b) & (abs(arr[x] - arr[z]) <= c):\n                        res += 1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        L=len(arr)\n        if L<3:\n            return 0\n        count=0\n        def check(i,j,k):\n            if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                return True\n            return False\n        for i in range(L-2):\n            for j in range(i+1,L-1):\n                for k in range(j+1,L):\n                    if check(i,j,k):\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        if len(arr) < 3:\n            return 0\n        \n        ct = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ct += 1\n\n        return ct", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good = 0\n        n = len(arr)\n        \n        for i in range(0, n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if (\n                        abs(arr[i] - arr[j]) <= a\n                        and abs(arr[j] - arr[k]) <= b\n                        and abs(arr[i] - arr[k]) <= c\n                    ):\n                        good += 1\n        \n        return good", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0, len(arr)):\n            \n            for j in range(i+1, len(arr)):\n                \n                                \n                for k in range(j+1, len(arr)):\n                    \n                    if (abs(arr[i] - arr[j]) <=a) &  (abs(arr[j] - arr[k]) <=b) & (abs(arr[i] - arr[k]) <=c):\n                        \n                        count = count+1\n                        \n                        \n                        \n        return count\n            \n            \n            \n            \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        result = 0\n        n = len(arr)\n        for i1 in range(n):\n            for i2 in range(i1+1, n):\n                for i3 in range(i2+1, n):\n                    if(abs(arr[i1] - arr[i2]) <= a and abs(arr[i2]-arr[i3]) <= b and abs(arr[i1]-arr[i3]) <= c):\n                        result += 1\n                        \n                        \n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    \n                    a_bool = abs(arr[i] - arr[j]) <= a\n                    b_bool = abs(arr[j] - arr[k]) <= b\n                    c_bool = abs(arr[i] - arr[k]) <= c\n                    \n                    if a_bool and b_bool and c_bool:\n                        count += 1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        tup_list = []\n        \n        for idx1 in range(len(arr)):\n            num1 = arr[idx1]\n            arr_dict = {}\n            \n            for idx2 in range(idx1+1, len(arr)):\n                num2 = arr[idx2]\n                if abs(num1 - num2) <= c: # condition for num3\n                    # check num3 against all possible num2s so far\n                    if a in arr_dict:\n                        for pot_num2 in arr_dict[a]:\n                            if abs(pot_num2 - num2) <= b:\n                                # this is a good tuple\n                                tup = (num1, pot_num2, num2)\n                                tup_list.append(tup)\n\n                if abs(num1 - num2) <= a: # condition for num2\n                    if a in arr_dict:\n                        num2_pots = arr_dict[a]\n                        num2_pots.append(num2)\n                    else:\n                        arr_dict[a] = [num2]\n        \n        return len(tup_list)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt=0\n        n=len(arr)\n        for i in range(n-2):\n            for j in range(i+1,n-1):\n                for k in range(j+1,n):\n                    d1=abs(arr[i]-arr[j])\n                    d2=abs(arr[j]-arr[k])\n                    d3=abs(arr[k]-arr[i])\n                    if (d1<=a) and (d2<=b) and (d3<=c):\n                        cnt+=1\n        return cnt", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        if not arr:\n            return 0\n        \n        result = 0\n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    first = abs(arr[i] - arr[j]) <= a\n                    second = abs(arr[j] - arr[k]) <= b\n                    third = abs(arr[i] - arr[k]) <= c\n                    if first and second and third:\n                        result += 1\n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        res = 0\n        \n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if j <= i:\n                    continue\n                for k in range(len(arr)):\n                    if k <= i or k <= j:\n                        continue\n                        \n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        res += 1\n                        \n        return res\n                    \n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        l = len(arr)\n        scount = 0\n        for i in range(l):\n            for j in range(i + 1,l):\n                for k in range(j + 1,l):\n                    \n                    da = abs(arr[i] - arr[j])\n                    db = abs(arr[j] - arr[k])\n                    dc = abs(arr[i] - arr[k])\n                    \n                    if da <= a and db <= b and dc <= c:\n                        scount += 1\n        \n        \n        return scount\n                    \n                    \n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i] - arr[j]) <= a) & (abs(arr[j] - arr[k]) <= b) & (abs(arr[k] -     arr[i]) <= c):\n                        res += 1\n        return res\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0, len(arr)-2):\n            \n            for j in range(i+1, len(arr)-1):\n                \n                                \n                for k in range(j+1, len(arr)):\n                    \n                    if (abs(arr[i] - arr[j]) <=a) &  (abs(arr[j] - arr[k]) <=b) & (abs(arr[i] - arr[k]) <=c):\n                        \n                        count = count+1\n                        \n                        \n                        \n        return count\n            \n            \n            \n            \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        answer = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if  0 <= i < j < k < len(arr) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        answer.append((arr[i], arr[j], arr[k]))\n        return len(answer)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        n = len(arr)\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        count += 1\n                        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        good_triplets = 0\n        arr_len = len(arr)\n        for i in range(arr_len):\n            # print(\\\"i: \\\" + str(i))\n            for j in range(i + 1, arr_len):\n                # print(\\\"\\\\tj: \\\" + str(j))\n                for k in range( j + 1, arr_len):\n                    # print(\\\"\\\\t\\\\tk: \\\" + str(k))\n                    if((0 <= i and i < j and j < k and k < len(arr)) and (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c)):\n                        triplet = [i, j, k]\n                        # print(triplet)\n                        good_triplets += 1\n        return good_triplets", "from collections import defaultdict\n\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ij = defaultdict(set)\n        jk = defaultdict(set)\n        ik = defaultdict(set)\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    ij[i].add(j)\n                if abs(arr[i] - arr[j]) <= b:\n                    jk[i].add(j)\n                if abs(arr[i] - arr[j]) <= c:\n                    ik[i].add(j)\n        ans = 0\n        for i in ij:\n            for j in ij[i]:\n                for k in jk[j]:\n                    if k in ik[i]:\n                        ans += 1\n                        \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        mylist = []\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                for k in range(j, len(arr)):\n                    if 0 <= i < j < k < len(arr) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        mylist.append((arr[i],arr[j], arr[k]))\n        return len(mylist)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    condition1 = abs(arr[i] - arr[j]) <= a\n                    condition2 = abs(arr[j] - arr[k]) <= b\n                    condition3 = abs(arr[i] - arr[k]) <= c\n                    if condition1 and condition2 and condition3:\n                        goods += 1\n                        \n        return goods\n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    x=arr[i]-arr[j]\n                    y=arr[j]-arr[k]\n                    z=arr[i]-arr[k]\n                    if abs(x)<=a and abs(y)<=b and abs(z)<=c:\n                        ans+=1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i in range(len(arr) - 2):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n\n                    # print(f'{arr[i]}, {arr[j]}, {arr[k]}')\n\n                    f = abs(arr[i] - arr[j]) <= a\n                    # print(f'<{abs(arr[i] - arr[j])}, {a}, {f}>')\n\n                    s = abs(arr[j] - arr[k]) <= b\n                    # print(f'<{abs(arr[j] - arr[k])}, {b}, {s}>')\n\n                    t = abs(arr[i] - arr[k]) <= c\n                    # print(f'<{abs(arr[i] - arr[k])}, {c}, {t}>')\n\n                    if f and s and t:\n                        # print(f'{arr[i]}, {arr[i+1]}, {arr[i+2]}')\n                        count += 1\n\n                    # print()\n\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0\n        \n        for in_i, i in enumerate(arr):\n            for in_j, j in enumerate(arr):\n                if (in_i < in_j):\n                    for in_k, k in enumerate(arr):\n                        if ( in_i < in_j < in_k):\n                            if abs(i-j) <= a and abs(j-k) <= b and abs(i-k) <= c:\n                                cnt+=1\n        \n        return cnt", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good_count = 0\n        i = 0\n        j = 1\n        k = 2\n        if len(arr) > 2:\n            while i + 2 < len(arr):\n                \n                if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                    good_count += 1\n                    #print(\\\"i:\\\",i,\\\" j: \\\",j,\\\" k: \\\",k, \\\" good_count: \\\",good_count,\\\" ijk:\\\",i,j,k)\n                # move k if k != arr.len - 1\n                if k != len(arr) - 1:\n                    k += 1\n                # move j and reset k = j +1 if k == arr.len - 1\n                elif k == len(arr) - 1 and j+1 != k:\n                    j += 1\n                    k = j + 1\n                # move i and reset j = i+1, k = + j+1 if j == arr.len - 2\n                elif j == len(arr) - 2:\n                    i += 1\n                    j = i+1\n                    k = j+1\n                    \n        return good_count    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        ans=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        ans+=1\n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i in range(len(arr) - 2):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n\n                    # print(f'{arr[i]}, {arr[j]}, {arr[k]}')\n\n                    f = abs(arr[i] - arr[j]) <= a\n                    # print(f'<{abs(arr[i] - arr[j])}, {a}, {f}>')\n\n                    s = abs(arr[j] - arr[k]) <= b\n                    # print(f'<{abs(arr[j] - arr[k])}, {b}, {s}>')\n\n                    t = abs(arr[i] - arr[k]) <= c\n                    # print(f'<{abs(arr[i] - arr[k])}, {c}, {t}>')\n\n                    count += f and s and t\n\n        return count", "from itertools import permutations as p\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j]) <=a and abs(arr[j]-arr[k]) <=b and abs(arr[i]-arr[k]) <=c:\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans=[]\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k])<=b and abs(arr[i] - arr[k])<=c :\n                        x=(arr[i] , arr[j] , arr[k])\n                        ans.append(x)\n        \n        \n        if len(arr)==0:\n                return 0\n        return len(ans)   \n", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        results = []\n        all_indx = list(range(0,len(arr),1))\n        all_triplets = list(combinations(all_indx, 3))\n        for idx_tuple in all_triplets:\n            #print(idx_tuple)\n            arr_i = arr[idx_tuple[0]]            \n            arr_j = arr[idx_tuple[1]]\n            arr_k = arr[idx_tuple[2]]\n            if abs(arr_i - arr_j) <= a and abs(arr_j - arr_k) <= b and abs(arr_i - arr_k) <=c:\n                results.append(idx_tuple)\n        l_results = len(results)\n        return l_results\n                \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        #print(i,j,k)\n                        count+=1\n        return(count)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i in range(len(arr) - 2):\n            for j in range(i+1, len(arr) - 1):\n                for k in range(j+1, len(arr)):\n\n                    # print(f'{arr[i]}, {arr[j]}, {arr[k]}')\n\n                    f = abs(arr[i] - arr[j]) <= a\n                    # print(f'<{abs(arr[i] - arr[j])}, {a}, {f}>')\n\n                    s = abs(arr[j] - arr[k]) <= b\n                    # print(f'<{abs(arr[j] - arr[k])}, {b}, {s}>')\n\n                    t = abs(arr[i] - arr[k]) <= c\n                    # print(f'<{abs(arr[i] - arr[k])}, {c}, {t}>')\n\n                    count += f and s and t\n\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i<j:\n                    for k in range(len(arr)):\n                        if j<k:\n                            if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                                count+=1\n        return count", "class Solution:\n    \n    def diff(self, a, b, limit):\n        return ( abs(a-b) <= limit ) \n    \n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0 \n        \n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    \n                    if self.diff(arr[i], arr[j], a ) and self.diff(arr[j], arr[k], b) and self.diff(arr[i], arr[k], c):\n                        count += 1 \n                        \n        return count \n                    \n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                check_a = abs(arr[i] - arr[j]) <= a\n                for k in range(j+1,len(arr)):\n                    \n                    check_b = abs(arr[j] - arr[k]) <= b\n                    check_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all([check_a,check_b,check_c]):\n                        count += 1\n                            \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0, len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    check1 = abs(arr[i] - arr[j]) <= a\n                    check2 = abs(arr[j] - arr[k]) <= b\n                    check3 = abs(arr[i] - arr[k]) <= c\n                    count += 1 if (check1 and check2 and check3) else 0\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        total_triplets = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if (0 <= i < j and i <= j < k and j < k < len(arr) \n                        and abs(arr[i] - arr[j]) <= a \n                        and abs(arr[j] - arr[k]) <= b\n                        and abs(arr[i] - arr[k]) <= c):\n                        total_triplets += 1\n        return total_triplets\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        goods=0\n        for i in range(1,len(arr)-1):\n            first=arr[:i]\n            last=arr[i+1:]\n            \n            ij_count,jk_count,ik_count=0,0,0\n            ij_pairs,jk_pairs=[],[]\n            for n in first:\n                if abs(arr[i]-n)<=a:\n                    ij_count+=1\n                    ij_pairs.append((n,arr[i]))\n            for n in last:\n                if abs(arr[i]-n)<=b:\n                    jk_count+=1\n                    jk_pairs.append((arr[i],n))\n            print(ij_pairs,jk_pairs)\n            for ij in ij_pairs:\n                for jk in jk_pairs:\n                    if abs(ij[0]-jk[1])<=c:\n                        goods+=1\n        return goods", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans=[]\n        for i in range(len(arr)):\n            for j in range(i,len(arr)):\n                for k in range(j,len(arr)):\n                    if 0<=i<j<k<len(arr) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k])<=b and abs(arr[i] - arr[k])<=c :\n                        x=(arr[i] , arr[j] , arr[k])\n                        ans.append(x)\n        \n        \n        if len(arr)==0:\n                return 0\n        return len(ans)   \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        L=len(arr)\n        output=0\n        for i in range(L-2):\n            for j in range(i+1,L-1):\n                for k in range(j+1,L):\n                    if (abs(arr[i]-arr[j])<=a) + (abs(arr[j]-arr[k])<=b) + (abs(arr[i]-arr[k])<=c) == 3:\n                        output+=1\n                        \n                        \n        return output\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(i+2,len(arr)):\n                    if abs(arr[i] - arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c and i<j<k:\n                        count += 1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    test = 0\n                    if -a <= arr[i] - arr[j] <= a:\n                        test += 1\n                    if -b <= arr[j] - arr[k] <= b:\n                        test += 1\n                    if -c <= arr[i] - arr[k] <= c:\n                        test += 1\n                    if test == 3:\n                        cnt += 1\n        return cnt        ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for v in itertools.combinations([i for i in range(len(arr))], 3):\n            if (\n                abs(arr[v[0]]- arr[v[1]]) <= a and\n                abs(arr[v[1]]- arr[v[2]]) <= b and\n                abs(arr[v[0]]- arr[v[2]]) <= c\n            ): count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        \n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    x, y, z = arr[i], arr[j], arr[k]\n                    ans += int(abs(x - y) <= a and abs(y - z) <= b and abs(x - z) <= c)\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        # triplets_num = 0\n        # for i in range(len(arr)-2):\n        #     for j in range(i+1, len(arr)-1):\n        #         if abs(arr[i]-arr[j]) <= a:\n        #             for k in range(j+1, len(arr)):\n        #                 if abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n        #                     triplets_num += 1\n        # return triplets_num\n        \n        comb = combinations(list(range(len(arr))), 3)\n        condition = lambda i, j, k: i < j and j < k and abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c\n        return len([(i, j, k) for (i, j, k) in comb if condition(i, j, k)])\n            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if self.isGood(arr[i], arr[j], a) and self.isGood(arr[j], arr[k],b) and self.isGood(arr[i], arr[k], c):\n                        count+=1\n        return count\n        \n    def isGood(self, x, y, a):\n        return abs(x - y) <= a\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for x in range(len(arr)):\n            for y in range(x+1, len(arr)):\n                for z in range(y+1, len(arr)):\n                    if (abs(arr[x] - arr[y]) <= a) & (abs(arr[y] - arr[z]) <= b) & (abs(arr[x] - arr[z]) <= c):\n                        res += 1\n        return res\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and                     (abs(arr[i] - arr[k]) <= c):\n                        count=count+1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        combs = combinations(arr,3)\n        res = 0\n        for comb in combs:\n            if self.goodTriple(comb,a,b,c):\n                res += 1\n        return res\n        \n    def goodTriple(self,triplet,a,b,c):\n        x = triplet[0]\n        y = triplet[1]\n        z = triplet[2]\n        if -a<=x-y<=a and -b<=y-z<=b and -c<=x-z<=c:\n            return True\n        return False", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        # |arr[i] - arr[j]| <= a\n        # |arr[j] - arr[k]| <= b\n        # |arr[i] - arr[k]| <= c\n        triplets=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        triplets+=1\n                        # print((arr[i],arr[j],arr[k]))\n        return triplets", "import itertools\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        num = 0\n        for triplet in itertools.combinations(arr, 3):\n            if abs(triplet[0] - triplet[1]) <=a and abs(triplet[1] - triplet[2]) <=b and abs(triplet[0] - triplet[2]) <=c:\n                num +=1\n        return num\n                \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                for k in range(j, len(arr)):\n                    num1 =arr[i] - arr[j]\n                    num2 = arr[j] - arr[k]\n                    num3 = arr[i] - arr[k]\n                    if num1<0:\n                        num1 = -num1\n                    if num2<0:\n                        num2 = -num2\n                    if num3<0:\n                        num3 = -num3\n                    if num1<=a and num2<=b and num3<=c and 0 <= i < j < k < len(arr):\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i = 0\n        ans = 0\n\n        def tripleIsGood(i, j, k):\n            if 0 <= i < j < k and abs(arr[i]- arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                return True\n\n        for i in range(0, len(arr)-2):\n            k = len(arr)-1\n\n            while i + 1 != k:\n            # for k in range(k, i+2, -1):\n                if i+1 != k:\n\n                    for j in range(i+1, k):\n\n                        if tripleIsGood(i, j, k):\n                            ans += 1\n\n                k -= 1\n\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i=0\n        res = 0\n        while i < len(arr)-2:\n            j=i+1\n            while j < len(arr)-1:\n                k=j+1\n                while k < len(arr):\n                    if (abs(arr[i] - arr[j]) <= a) & (abs(arr[j] - arr[k]) <= b) & (abs(arr[i] - arr[k]) <= c):\n                        res+=1\n                    k+=1        \n                j+=1\n            i+=1\n        return(res)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        triplets = 0\n        \n        for i in range(len(arr)):\n            for j in range (i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        triplets +=1\n                \n        return triplets", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i = 0\n        res = []\n        while i <= len(arr)-3:\n            j = i+1\n            while j <= len(arr)-2:\n                k = j+1\n                while k <= len(arr)-1:\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ans = (arr[i],arr[j],arr[k])\n                        res.append(ans)\n                    k += 1\n                j += 1\n            i += 1\n        return len(res)\n                        \n                        \n", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        comb = combinations(range(len(arr)), 3)\n        condition = lambda i, j, k: i < j and j < k and abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c\n        return len([(i, j, k) for (i, j, k) in comb if condition(i, j, k)])", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        \n        good_count = 0\n        \n        for i in range(size-2):\n            for j in range(i+1, size-1):\n                for k in range(j+1, size):\n                    \n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((ok_a, ok_b, ok_c)):\n                        good_count += 1\n                        \n                        \n        return good_count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        # first solution\n        N = len(arr)\n        count = 0\n        for i in range(N-2):\n            for j in range(i+1,N-1):\n                for k in range(j+1,N):\n                    '''\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c: count+=1\n                    '''                    \n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c                    \n                    if all((ok_a, ok_b, ok_c)):\n                        count += 1                    \n        return count\n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    goodA = abs(arr[i] - arr[j]) <= a\n                    goodB = abs(arr[j] - arr[k]) <= b\n                    goodC = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((goodA, goodB, goodC)):\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                        count+=1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        comb = combinations(arr, 3)\n        fin = []\n        for i in comb:\n            if abs(i[0] - i[1]) <= a and abs(i[1] - i[2]) <= b and abs(i[0] - i[2]) <= c:\n                fin.append(i)\n                    \n        return len(fin)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)-1):\n                for k in range(j+1, len(arr)):\n                        res1 = abs(arr[i] - arr[j]) <= a\n                        res2 = abs(arr[j] - arr[k]) <= b\n                        res3 = abs(arr[i] - arr[k]) <= c\n\n                        if all((res1, res2, res3)):\n                            count += 1\n\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        numGoodTrips = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if self.isGoodTriplet(arr, i, j, k, a, b, c):\n                        numGoodTrips += 1\n        return numGoodTrips\n\n                    \n    def isGoodTriplet(self, arr: List[int], i: int, j: int, k: int, a: int, b: int, c: int) -> bool:\n        return i < j and j < k and k < len(arr) and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <=b and abs(arr[i] - arr[k]) <= c", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        \n        good_count = 0\n        \n        for i in range(size - 2):\n            for j in range(i+1, size - 1):\n                for k in range(j+1, size):\n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((ok_a, ok_b, ok_c)):\n                        good_count += 1\n        return good_count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n\n        ij_idx = [set() for _ in range(n)]\n        jk_ids = [set() for _ in range(n)]\n        ik_ids = [set() for _ in range(n)]\n\n        for i in range(0, n - 1):\n            for j in range(i + 1, n):\n                d = abs(arr[j] - arr[i])\n                if d <= a: ij_idx[i].add(j)\n                if d <= b: jk_ids[i].add(j)\n                if d <= c: ik_ids[j].add(i)\n\n        result = 0\n\n        for i in range(n - 2):\n            for j in ij_idx[i]:\n                for k in jk_ids[j]:\n                    if i in ik_ids[k]:\n                        result += 1\n\n        return result\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        length = len(arr)\n        initial_last_step_of_i = length - 2\n        initial_first_step_of_i = 0\n        initial_last_step_of_j = length - 1\n        initial_first_step_of_j = 1\n        initial_last_step_of_k = length\n        initial_first_step_of_k = 2\n        \n        triplets = 0\n        \n        first_step_of_j = initial_first_step_of_j\n        \n        all_i = [arr[i] for i in range(initial_first_step_of_i, initial_last_step_of_i)]\n        \n        for i in range(initial_first_step_of_i, initial_last_step_of_i):\n            first_step_of_k = initial_first_step_of_k\n            for j in range(first_step_of_j, initial_last_step_of_j):\n                for k in range(first_step_of_k, initial_last_step_of_k):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c and i < j < k:\n                        triplets += 1\n                first_step_of_k += 1\n            first_step_of_j += 1    \n                        \n                        \n        return triplets\n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        size = len(arr)\n        \n        good_count = 0\n        \n        for i in range(size-2):\n            for j in range(i+1, size-1):\n                for k in range(j+1, size):\n                    \n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((ok_a, ok_b, ok_c)):\n                        good_count += 1\n                        \n                        \n        return good_count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    conditions = [\n                        abs(arr[i] - arr[j]) <= a,\n                        abs(arr[j] - arr[k]) <= b,\n                        abs(arr[i] - arr[k]) <= c\n                    ]\n                    if all(conditions):\n                        ans+=1\n        return ans", "class Solution:\n    def isGood(self, ai,aj,ak,a,b,c, length) -> bool:\n        if not abs(ai-aj) <= a:\n            return False\n        elif not abs(aj - ak) <= b:\n            return False\n        elif not abs(ai - ak) <= c:\n            return False\n        else:\n            return True\n    \n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    res += int(self.isGood(arr[i],arr[j],arr[k],a,b,c,len(arr)))\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        def helper(arr):\n            if abs(arr[0]-arr[1]) <= a and abs(arr[1]-arr[2]) <= b and abs(arr[0]-arr[2]) <= c:\n                return True\n            else:\n                return False\n        \n        result = 0\n        \n        for i in range(len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                for k in range(j+1, len(arr)):\n                    idx = (arr[i], arr[j], arr[k])\n                    if helper(idx):\n                        result += 1\n        \n        return result\n                            \n", "from itertools import combinations \nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        num = len(arr)\n        comb = combinations(arr,3)\n        counter = 0\n        for m in comb:\n            comb1 = list(m)\n            i = comb1[0]\n            j = comb1[1]\n            k = comb1[2]\n            if (abs(i-j) <=a) & (abs(j-k) <= b) & (abs(i-k) <=c):\n                counter += 1\n        return counter", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n#         triplets = []\n#         arr_len = len(arr) - 1\n        \n#         for i in range(arr_len):\n#             for j in range(i+1, arr_len):\n#                 for k in range(j+1, arr_len):\n#                     if abs(arr[i]-arr[j]) <= a and abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:  \n#                         triplets.append((arr[i], arr[j], arr[k]))\n#                         # triplets += 1\n        \n#         return len(triplets)\n\n        C = list(combinations(arr,3))\n        C = [self.checkGood(x,a,b,c) for x in C]\n        C = [x for x in C if x != None]\n        # print(C)\n        return len(C)\n    \n    def checkGood(self,tup,a,b,c):\n        if abs(tup[0] - tup[1]) <= a and abs(tup[0] - tup[2]) <= c and abs(tup[2] - tup[1]) <= b:\n            return tup\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr) # panjang dari array\n        goodTriplet = 0 # jumlah goodTriplet\n        \n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    \n                    cond_1 = abs(arr[i] - arr[j]) <= a\n                    cond_2 = abs(arr[j] - arr[k]) <= b\n                    cond_3 = abs(arr[i] - arr[k]) <= c\n                    \n                    if all([cond_1,cond_2,cond_3]):\n                        goodTriplet += 1\n        return goodTriplet\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        def absolute(x):\n            if(x>=0):\n                return x\n            return (-x)\n        count=0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if(absolute(arr[i]-arr[j])<=a and absolute(arr[j]-arr[k])<=b and absolute(arr[i]-arr[k])<=c):\n                        count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        ans = 0\n        for i1,v1 in enumerate(arr):\n            for i2, v2 in enumerate(arr[i1+1:]):\n                if abs(v1 - v2) <= a:\n                    for v3 in arr[i1 + i2 +2:]:\n                        if abs(v1 - v3) <= c and abs(v2 - v3) <= b:\n                            ans += 1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        length = len(arr)\n        initial_last_step_of_i = length - 2\n        initial_first_step_of_i = 0\n        initial_last_step_of_j = length - 1\n        initial_first_step_of_j = 1\n        initial_last_step_of_k = length\n        initial_first_step_of_k = 2\n        \n        triplets = 0\n        \n        first_step_of_j = initial_first_step_of_j\n        \n        for i in range(initial_first_step_of_i, initial_last_step_of_i):\n            first_step_of_k = initial_first_step_of_k\n            for j in range(first_step_of_j, initial_last_step_of_j):\n                for k in range(first_step_of_k, initial_last_step_of_k):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c and i < j < k:\n                        triplets += 1\n                first_step_of_k += 1\n            first_step_of_j += 1    \n                        \n                        \n        return triplets\n        \n", "class Solution:\n    def getdiff(self, x: int, y: int, m: int) -> int:\n        return(abs(x-y) <= m)\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        n = len(arr)\n        for i in range(n-2):\n            for j in range(i+1,n-1):\n                for k in range(j+1,n):\n                    x = arr[i]\n                    y = arr[j]\n                    z = arr[k]\n                    # print(x,y,z)\n                    if (self.getdiff(x,y,a) and self.getdiff(y,z,b) and self.getdiff(x,z,c)):\n                        count += 1\n        return(count)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        res = 0\n        for i in range(size-2):\n            for j in range(i+1, size-1):\n                for k in range(j+1, size):\n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    if all((ok_a, ok_b, ok_c)):\n                        res += 1   \n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0,len(arr)-2):\n            for j in range(1,len(arr)-1):\n                for k in range(2,len(arr)):\n                    if i<j and j<k:\n                        if (abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                            count += 1\n                        \n        return count\n                        \n            \n", "from itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        C = list(combinations(arr,3))\n        C = [self.checkGood(x,a,b,c) for x in C]\n        C = [x for x in C if x != None]\n        # print(C)\n        return len(C)\n    \n    def checkGood(self,tup,a,b,c):\n        if abs(tup[0] - tup[1]) <= a and abs(tup[0] - tup[2]) <= c and abs(tup[2] - tup[1]) <= b:\n            return tup", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n\n    \n        size = len(arr)\n        \n        good_count = 0\n        \n        for i in range(size-2):\n            for j in range(i+1,size-1):\n                for k in range(j+1, size):\n                    \n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((ok_a, ok_b,ok_c)):\n                        good_count += 1\n                        \n        return good_count", "from itertools import combinations\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        C = list(combinations(arr, 3))\n        C = [self.checkGood(x, a, b, c) for x in C]\n        C = [x for x in C if x != None]\n        return len(C)\n\n    \n    def checkGood(self, tup, a, b, c):\n        if abs(tup[0]-tup[1]) <= a and abs(tup[1]-tup[2]) <= b and abs(tup[2]-tup[0]) <= c:\n            return tup\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        good_count = 0\n        for i in range(size - 2):\n            for j in range(i + 1, size - 1):\n                for k in range(j + 1, size):\n                    \n                    ok_a = abs(arr[i] - arr[j]) <= a\n                    ok_b = abs(arr[j] - arr[k]) <= b\n                    ok_c = abs(arr[i] - arr[k]) <= c\n                    \n                    if all((ok_a, ok_b, ok_c)):\n                        good_count += 1\n                        \n        return good_count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i = 0\n        res = 0\n        while i <= len(arr)-3:\n            j = i+1\n            while j <= len(arr)-2:\n                k = j+1\n                while k <= len(arr)-1:\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        res += 1\n                    k += 1\n                j += 1\n            i += 1\n        return res\n                        \n                        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        ans = 0\n        for i1,v1 in enumerate(arr):\n            for i2, v2 in enumerate(arr[i1+1:]):\n                if abs(v1 - v2) <= a:\n                    for v3 in arr[i1+i2+2:]:\n                        if abs(v1 - v3) <= c and abs(v2 - v3) <= b:\n                            ans += 1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good_count = 0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if i < j:\n                        if j < k:\n                            if abs(arr[i] - arr[j]) <=a:\n                                if abs(arr[j] - arr[k]) <= b:\n                                    if abs(arr[i] - arr[k]) <= c:\n                                        good_count += 1\n        return good_count    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good_count = 0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if i < j and j < k:\n                        if abs(arr[i] - arr[j]) <=a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            good_count += 1\n        return good_count    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        d=0\n        e=len(arr)\n        for i in range(e):\n            for j in range(e):\n                for k in range(e):\n                    if k>j and j>i:\n                        if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                            d+=1\n        return d", "# class Solution:\n#     def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n#         result = 0\n        \n#         for i, num in enumerate(arr):\n#             for j, num in enumerate(arr):\n#                 for k, num in enumerate(arr):\n#                     if i < j < k and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n#                         result += 1\n#         return result\n\n\nfrom itertools import combinations\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        C = list(combinations(arr,3))\n        C = [self.checkGood(x,a,b,c) for x in C]\n        C = [x for x in C if x != None]\n        # print(C)\n        return len(C)\n    \n    def checkGood(self,tup,a,b,c):\n        if abs(tup[0] - tup[1]) <= a and abs(tup[0] - tup[2]) <= c and abs(tup[2] - tup[1]) <= b:\n            return tup", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if i<j<k and abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        total = 0 \n        if n < 3:\n            return None\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    A= abs(arr[i]-arr[j])  \n                    B= abs(arr[j] -arr[k])\n                    C= abs(arr[i]- arr[k])\n                    if A<=a and B<=b and C<=c:\n                        total +=1\n        \n        return total\n\n    \n\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        result = []\n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                for k in range(i+2,len(arr)):\n                    if (abs(arr[i]-arr[j])<=a) and (abs(arr[j]-arr[k])<=b) and (abs(arr[i]-arr[k])<=c) and i < j and j< k:\n                        result.append([arr[i], arr[j],arr[k]])\n        return len(result) ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        nums = [0] * 1001\n        ans = 0\n        length = len(arr)\n        for j in range(length):\n            for k in range(j+1,length):\n                if abs(arr[j]-arr[k]) <= b:\n                    r = min(arr[j]+a,arr[k]+c,1000)\n                    l = max(arr[j]-a,arr[k]-c,0)\n                    if r >= l:\n                        ans += nums[r] if l == 0 else nums[r] - nums[l-1]\n            for m in range(arr[j],1001):\n                nums[m] += 1\n        return ans ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        l = len(arr)\n        for i in range(l):\n            for j in range(l):\n                for k in range(l):\n                    if i < j < k:\n                        if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            res += 1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n      countTriplets = 0\n      \n      for i in range(len(arr)):\n        for j in range(len(arr)):\n          for k in range(len(arr)):\n            if i < j and j < k:\n              if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                countTriplets += 1\n      \n      return countTriplets\n            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if i<j and j<k:\n                        if abs(arr[i] - arr[j]) <=a and abs(arr[j]- arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                            count+=1\n        return count\n                        \n      \n            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        triplets = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    triplets.append([arr[i], arr[j], arr[k]])\n        count = 0                                                                  \n        for i in triplets:\n            if (abs(i[0] - i[1]) <= a) and (abs(i[1] - i[2]) <= b) and (abs(i[0] - i[2]) <= c):\n                count += 1    \n        return count                                                                  ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                for k in range(len(arr)):\n                    if i < j < k:\n                        if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            res += 1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        cnt = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(0, len(arr)):\n                for k in range(0, len(arr)):\n                    if(i < j < k):\n                        if(abs(arr[i] - arr[j]) <= a) and (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                            cnt = cnt + 1\n        \n        return cnt\n", "class Solution:\n    def countGoodTriplets(self, array: List[int], a: int, b: int, c: int) -> int:\n        # get all valid triplets\n        triplets = []\n        for i in range(len(array)-2):\n            for j in range(i+1,len(array)-1):\n                for k in range(j+1, len(array)):\n                    triplets.append((array[i], array[j], array[k]))\n\n        # determine which ones are good\n        count = 0\n        for first, second, third in triplets:\n            if abs(first - second) <= a and abs(second - third) <= b and abs(first - third) <= c:\n                count += 1\n\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n=len(arr)\n        final=[]\n        for i in range(0,n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    x=abs(arr[i]-arr[j])\n                    y=abs(arr[j]-arr[k])\n                    z=abs(arr[i]-arr[k])\n                    if (x<=a and y<=b and z<=c):\n                        final.append(arr[i:k+1])\n        return len(final)\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        mat = [[abs(arr[i] - arr[j]) for j in range(len(arr))] for i in range(len(arr))]\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if mat[i][j] > a:\n                    continue\n                for k in range(j+1, len(arr)):\n                    if mat[j][k] <= b and mat[i][k] <= c:\n                        ans += 1\n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = []\n        for i in range(len(arr)):\n            for j in range(1,len(arr)):\n                for k in range(2,len(arr)):\n                    if i<j<k:\n                        if (abs(arr[i]-arr[j])<=a ) and (abs(arr[j] - arr[k]) <=b) and (abs(arr[i]-arr[k]) <=c):\n                            res.append((arr[i],arr[j],arr[k]))\n        return len(res)\n\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        ans = []\n        \n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    ij = abs(arr[i] - arr[j])\n                    jk = abs(arr[j] - arr[k])\n                    ik = abs(arr[i] - arr[k])\n                    if ij <= a and jk <= b and ik <= c:\n                        ans.append([arr[i], arr[j], arr[k]])\n        \n        return len(ans)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ij = {}\n        total = 0\n        \n        for q in range(len(arr) - 1):\n            for r in range(q + 1, len(arr)):\n                v = abs(arr[q] - arr[r])\n                \n                if v <= a:\n                    if r in ij:\n                        ij[r].append(q)\n                    else:\n                        ij[r] = [q] # r = j, q = i\n                if v <= b: # q = j, r = k, ij[q] = i\n                    if q in ij:\n                        for i in ij[q]:\n                            if abs(arr[i] - arr[r]) <= c:\n                                total += 1\n                        \n        \n        return total", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i, n in enumerate(arr):\n\n            if i > len(arr) - 3:\n                break\n\n            tmp = arr[i + 1:]\n\n            for j, m in enumerate(tmp[:-1]):\n                if abs(n - m) > a:\n                    continue\n\n                for o in tmp[j + 1:]:\n\n                    if abs(m - o) <= b and abs(n - o) <= c:\n                        count += 1\n\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cnt = 0\n        length = len(arr)\n        \n        for idx in range(length):\n            first = arr[idx]\n            \n            for ydx in range(idx+1,length):\n                second = arr[ydx]\n                \n                if abs(first-second) <= a:\n                    \n                    for kdx in range(ydx+1, length):\n                        third = arr[kdx]\n                        \n                        if abs(first-third) <= c and abs(second-third) <= b:\n                                    cnt += 1\n        return cnt\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i, ai in enumerate(arr):\n            for k, ak in enumerate(arr[i+2:], i+2):\n                if abs(ak-ai) <= c:\n                    for j, aj in enumerate(arr[i+1:k], i+1):\n                        if abs(ai-aj) <= a and abs(ak-aj) <= b:\n                            res += 1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        for i, x in enumerate(arr):\n            for j, y in enumerate(arr[(i+1):]):\n                if (abs(x-y) <= a):\n                    for z in arr[(j+i+2):]:\n                        count += ((abs(y-z) <= b) and (abs(x-z) <= c))\n        return count ", "from collections import defaultdict as d\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        da,db,dc=d(set),d(set),d(set)\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                k=abs(arr[i]-arr[j])\n                if k<=a:\n                    da[i].add(j)\n                if k<=b:\n                    db[i].add(j)\n                if k<=c:\n                    dc[i].add(j)\n        res=0\n        for i in da:\n            for j in da[i]:\n                res+=len(db[j]&dc[i])\n        return res\n", "def bruteforce(arr, a, b, c):\n    count = 0\n    for i in range(len(arr) - 2):\n        arri = arr[i]\n        for j in range(i+1, len(arr) - 1):\n            if abs(arri - arr[j]) > a:\n                continue\n            arrj = arr[j]\n            for k in range(j+1, len(arr)):\n                if abs(arrj - arr[k]) <= b and abs(arri - arr[k]) <= c:\n                    count += 1\n    return count\n                           \nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        return bruteforce(arr, a, b, c)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        good = 0\n        for i in range(0, n):\n            ai = arr[i]\n            for j in range(i+1, n):\n                aj = arr[j]\n                if abs(ai-aj) > a:\n                    continue\n                for k in range(j+1, n):\n                    ak = arr[k]\n                    if abs(aj-ak) > b:\n                        continue\n                    if abs(ak-ai) > c:\n                        continue\n                    good += 1\n        return good\n                    \n", "class Solution:\n    def countGoodTriplets(self,arr,a,b,c):\n        ln,res = len(arr),0\n        for i in range(ln-2):\n            n = arr[i]\n            for j in range(i+1,ln-1):\n                n2 = arr[j]\n                if abs(n-n2)<=a:\n                    for k in range(j+1,ln):\n                        n3 = arr[k]\n                        if abs(n2-n3)<=b:\n                            if abs(n-n3)<=c:\n                                res+=1\n\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        length = len(arr)\n        count = 0\n        for i in range(length):\n            for j in range(i+1, length):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1, length):\n                        if abs(arr[i] - arr[k]) <= c and abs(arr[j] - arr[k]) <= b:\n                            count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        length = len(arr)\n        ret = 0;\n        \n        for i in range(length):\n            for j in range(i+1, length):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n                for k in range(j+1, length):\n                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ret += 1\n                        \n        return ret", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        lim = len(arr)\n        \n        ans = 0\n        for i in range(lim-2):\n            for j in range(i+1,lim-1):\n                if abs(arr[i]-arr[j]) <= a:\n                    for k in range(j+1,lim):\n                        if abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                            ans += 1\n        \n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        # i < j < k\n        # |arr[i] - arr[j]| <= a\n        # |arr[j] - arr[k]| <= b\n        # |arr[i] - arr[k]| <= c\n        la = len(arr)\n        cnt = 0\n        for i in range(la-2):\n            for j in range(i+1,la-1):\n                if abs(arr[i] - arr[j])<=a:\n                    for k in range(j+1,la):\n                        if abs(arr[j] - arr[k])<=b:\n                            if abs(arr[i] - arr[k])<=c:\n                                cnt +=1\n        return cnt\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        solution = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n                for k in range(j+1, len(arr)):\n                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        solution += 1\n        return solution", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ma = {}\n        d, psum = set(), []\n        def add(p):\n            for i in range(ma[p], len(psum)):\n                psum[i] += 1\n        \n        def get(l, r):\n            if l > r: return 0\n            return psum[ma[r]] - psum[ma[l]-1]\n        \n        n = len(arr)\n        d.add(-sys.maxsize)\n        for i in arr:\n            d.add(i)\n            d.add(i+a)\n            d.add(i-a)\n            d.add(i+c)\n            d.add(i-c)\n        \n        d = sorted(list(d))\n        \n        for i,v in enumerate(d):\n            ma[v] = i\n        \n        psum = [0]*len(d)\n        ans = 0\n        \n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(arr[j]-arr[k]) > b: continue\n                l = max(arr[j]-a, arr[k]-c)\n                r = min(arr[j]+a, arr[k]+c)\n                ans += get(l, r)\n            add(arr[j])\n        \n        return ans\n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        x= list(range(len(arr)))\n        score = 0\n        for i in x:\n            for j in x[i+1:]:\n                if abs(arr[i] -arr[j])<= a:\n                    for k in x[j+1:]:\n                        if (abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c):\n                            score+=1\n        return score\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        iterator = range(len(arr))\n        goodies=0\n        for i in iterator:\n            for j in iterator[i+1:]:\n                if abs(arr[i]-arr[j]) <=a:\n                    for k in iterator[j+1:]:\n                        if ((abs(arr[j] - arr[k]) <=b) and (abs(arr[i]-arr[k]) <=c)):\n                            goodies +=1\n        return goodies   ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        total_triplets = 0\n        \n        for i in range(0, len(arr)):\n            for j in range(i + 1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j + 1, len(arr)):\n                        if (abs(arr[j] - arr[k]) <= b\n                        and abs(arr[i] - arr[k]) <= c):\n                            total_triplets += 1\n        return total_triplets\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1, len(arr)):\n                        if (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                            ans += 1\n        return ans\n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ot = 0\n        n = len(arr)\n        for i in range(0, n-2):\n            for j in range(i+1, n-1):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n                for k in range(j+1, n):\n                    if abs(arr[j] - arr[k]) > b:\n                        continue\n                    if abs(arr[i] - arr[k]) > c:\n                        continue\n                    ot +=1 \n        return ot", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        result = 0\n        for i in range (n-2):\n            for j in range(i+1, n-1):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n                for k in range (j+1, n):\n                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        result += 1\n        return result\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        out=0\n        \n        for i in range(len(arr)):\n                for j in range(i+1,len(arr)):\n                    if(abs(arr[i]-arr[j])<=a):\n                        for k in range(j+1,len(arr)):\n                            if(abs(arr[j]-arr[k])<=b):\n                                if(abs(arr[i]-arr[k])<=c):\n                                    out+=1\n                                \n                                \n                                \n        return out\n\n# # Brute Force Solution\n# class Solution:\n#     def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n#         count = 0\n        \n#         for i in range(0,len(arr)-2):\n#             for j in range(i+1,len(arr)-1):\n                \n#                 a_bool = abs(arr[i] - arr[j]) <= a\n                \n#                 # break case\n#                 if a_bool:\n#                     for k in range(j+1,len(arr)):\n\n#                         b_bool = abs(arr[j] - arr[k]) <= b\n                        \n#                         if b_bool:\n                            \n#                             c_bool = abs(arr[i] - arr[k]) <= c\n                            \n#                             if c_bool:\n#                                 count += 1\n        \n#         return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count    = 0\n        size_arr = len(arr)\n\n        for i in range(size_arr - 2):\n            for j in range(i + 1, size_arr - 1):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n\n                for k in range(j + 1, size_arr):\n                    if abs(arr[j] - arr[k]) > b:\n                        continue\n\n                    if abs(arr[i] - arr[k]) > c:\n                        continue\n\n                    count += 1\n\n        return count", "class Solution: \n  def countGoodTripletsCase1(self, arr: List[int], a: int, b: int) -> int:\n    count = 0\n    for j in range(1, len(arr) - 1):\n      l = sum(abs(arr[i] - arr[j]) <= a for i in range(0, j))\n      r = sum(abs(arr[j] - arr[k]) <= b for k in range(j + 1, len(arr)))\n      count += l * r\n    return count\n\n  def countGoodTripletsCase2(self, arr: List[int], a: int, b: int, c: int) -> int:\n    index = sorted(range(len(arr)), key=lambda k: arr[k])\n    count = 0\n    for j in range(len(arr) - 1, 0, -1):\n      for i in range(j - 1, -1, -1):\n        if index[j] == j: break\n        index[j], index[i] = index[i], index[j]\n      for k in range(j + 2, len(arr)):\n        if arr[index[k - 1]] > arr[index[k]]:\n          index[k - 1], index[k] = index[k], index[k - 1]\n\n      i_min = next((i for i in range(0, j) if arr[index[i]] >= arr[j] - a), j)\n      i_max = next((i for i in range(i_min, j) if arr[index[i]] > arr[j] + a), j)\n\n      ic_min, ic_max = i_min, i_min\n      k = next((i for i in range(j + 1, len(arr)) if arr[index[i]] >= arr[j] - b), len(arr))\n      while k < len(arr) and arr[index[k]] <= arr[j] + b:\n        while ic_min < i_max and arr[index[ic_min]] < arr[index[k]] - c: ic_min += 1\n        while ic_max < i_max and arr[index[ic_max]] <= arr[index[k]] + c: ic_max += 1\n        count += ic_max - ic_min\n        k += 1\n\n    return count\n\n  def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n    if c >= a + b:\n      return self.countGoodTripletsCase1(arr, a, b)\n    else:\n      return self.countGoodTripletsCase2(arr, a, b, c)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        result = 0\n        \n        for i in range(len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                if abs(arr[i]-arr[j]) <= a:\n                    for k in range(j+1, len(arr)):\n                        if abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k])<=c:\n                            result += 1\n                            \n        return result\n                            \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        cou = 0\n        left, right = 0, len(arr)-1\n        while left < len(arr) - 2:\n            if left == right - 1:\n                left += 1\n                right = len(arr) - 1\n                continue\n            if abs(arr[left] - arr[right]) > c:\n                right -= 1\n                continue\n            cou += sum([abs(arr[left] - arr[i]) <= a and abs(arr[i] - arr[right]) <= b  for i in range(left+1, right)])\n            right -= 1\n        return cou \n    \n        return sum([\n            abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[k] - arr[i]) <= c\n            for i in range(len(arr))\n            for j in range(i + 1, len(arr))\n            for k in range(j + 1, len(arr))\n            ])", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        count = 0\n        for i in range(n):   \n            for j in range(i+1,n):\n                val1 = abs(arr[i]-arr[j])\n                if val1<=a:\n                    for k in range(j+1,n):\n                        val2 = abs(arr[j]-arr[k])\n                        if val2<=b:\n                            val3 = abs(arr[i]-arr[k])\n                            if val3<=c:\n                                count += 1\n        return count\n                    \n", "# Brute Force Solution\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                \n                a_bool = abs(arr[i] - arr[j]) <= a\n                \n                # break case\n                if a_bool:\n                    for k in range(j+1,len(arr)):\n\n                        b_bool = abs(arr[j] - arr[k]) <= b\n                        \n                        if b_bool:\n                            \n                            c_bool = abs(arr[i] - arr[k]) <= c\n                            \n                            if c_bool:\n                                count += 1\n        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count=0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                if abs(arr[j]-arr[i])<=a:\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[k]-arr[j])<=b and abs(arr[i]-arr[k])<=c:\n                            count+=1\n                            \n        return(count)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(0, len(arr)-2):\n            \n            for j in range(i+1, len(arr)-1):\n                if (abs(arr[i] - arr[j]) <=a):\n                    for k in range(j+1, len(arr)):\n                        if (abs(arr[j] - arr[k]) <=b) & (abs(arr[i] - arr[k]) <=c):\n                            count = count+1\n                        \n                        \n                        \n        return count\n            \n            \n            \n            \n        \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        arrsize = len(arr)\n        for i in range(0, arrsize - 2):\n            for j in range(i + 1, arrsize - 1):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j + 1, arrsize):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            count += 1\n                        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        size = len(arr)\n        result = 0\n        for i in range(0, size - 2):\n            for j in range(i + 1, size - 1):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j + 1, size):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            result += 1\n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        pair = {p:dict() for p in (a, b, c)}\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                d = abs(arr[i] - arr[j])\n                for p in (a, b, c):\n                    if d <= p:\n                        if i not in pair[p]:\n                            pair[p][i] = set()\n                        pair[p][i].add(j)\n        ans = 0\n        empty = set()\n        for i, js in pair[a].items():\n            for j in js:\n                ans += len(pair[b].get(j, empty) & pair[c].get(i, empty)) \n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        for k in range(len(arr)):\n            for j in range(k):\n                if abs(arr[j] - arr[k]) <= b:\n                    for i in range(j):\n                        if abs(arr[i] - arr[k]) <= c and abs(arr[j] - arr[i]) <= a:\n                            count += 1\n                        \n        return count   ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1, len(arr)):\n                        if abs(arr[j]-arr[k]) <= b and abs(arr[i]-arr[k]) <= c:\n                            count+=1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n  - 2):\n            for j in range(i + 1, n - 1):\n                k = n - 1\n                if abs(arr[i] - arr[j]) <= a:\n                    while j < k:\n                        if (abs(arr[j] - arr[k]) <= b and\n                            abs(arr[i] - arr[k]) <= c):\n                            ans += 1\n                        k -= 1\n        return ans", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        i = 0\n        res = 0\n        while i < len(arr):\n            j = i+1\n            while j < len(arr):\n                if abs(arr[j] - arr[i]) <= a:\n                    k = j + 1\n                    while k < len(arr):\n                        if abs(arr[k] - arr[j]) <= b and abs(arr[i] - arr[k]) <= c:\n                            res += 1\n                        k += 1\n                j += 1\n            \n            i += 1\n            \n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans=0\n        LEN=len(arr)\n        for i in range(LEN-2):\n            for j in range(i+1,LEN-1):\n                if abs(arr[i]-arr[j])>a:\n                    continue\n                for k in range(j+1,LEN):\n                    if (abs(arr[j]-arr[k])>b) | (abs(arr[i]-arr[k])>c):\n                        continue\n                    ans+=1\n        return ans \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                condition1 = abs(arr[i] - arr[j]) <= a\n                if not condition1:\n                    continue\n                for k in range(j + 1, len(arr)):\n                    condition2 = abs(arr[j] - arr[k]) <= b\n                    condition3 = abs(arr[i] - arr[k]) <= c\n                    if condition1 and condition2 and condition3:\n                        goods += 1\n                        \n        return goods\n                    \n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        goods = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                condition1 = abs(arr[i] - arr[j]) <= a\n                if not condition1:\n                    continue\n                for k in range(j + 1, len(arr)):\n                    condition2 = abs(arr[j] - arr[k]) <= b\n                    condition3 = abs(arr[i] - arr[k]) <= c\n                    if condition2 and condition3:\n                        goods += 1\n                        \n        return goods", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        good_triplets = 0\n        arr_len = len(arr)\n        for i in range(arr_len - 2):\n    \n            for j in range(i + 1, arr_len - 1):\n                if j < i:\n                    break\n                if((abs(arr[i] - arr[j]) <= a)):\n                    for k in range( j + 1, arr_len):\n                        if k < j:\n                            break\n                        if(abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                            triplet = [i, j, k]\n                            good_triplets += 1\n        return good_triplets", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n\n        for i in range(len(arr) - 2):\n            for j in range(i+1, len(arr) - 1):\n                if not abs(arr[i] - arr[j]) <= a:\n                    continue\n\n                for k in range(j+1, len(arr)):\n\n                    # print(f'{arr[i]}, {arr[j]}, {arr[k]}')\n\n                    # f = abs(arr[i] - arr[j]) <= a\n                    # print(f'<{abs(arr[i] - arr[j])}, {a}, {f}>')\n\n                    s = abs(arr[j] - arr[k]) <= b\n                    # print(f'<{abs(arr[j] - arr[k])}, {b}, {s}>')\n\n                    t = abs(arr[i] - arr[k]) <= c\n                    # print(f'<{abs(arr[i] - arr[k])}, {c}, {t}>')\n\n                    count += s and t\n\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        #li = list(filter(lambda x: 0<=x<len(arr), arr))\n        pair = {p:dict() for p in (a, b, c)}\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                d = abs(arr[i] - arr[j])\n                for p in (a, b, c):\n                    if d <= p:\n                        if i not in pair[p]:\n                            pair[p][i] = set()\n                        pair[p][i].add(j)\n        ans = 0\n        empty = set()\n        for i, js in list(pair[a].items()):\n            for j in js:\n                ans += len(pair[b].get(j, empty) & pair[c].get(i, empty)) \n        return ans\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n\n        size = len(arr)\n        result = 0\n        res = []\n        for i in range(size-2):\n            for j in range(i+1, size-1):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1, size):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            result += 1\n                            res.append((arr[i],arr[j],arr[k]))\n        return result\n", "class Solution:\n    def countGoodTriplets(self, arr, a, b, c):\n        val = []\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if (abs(arr[i]-arr[j]) <= a):\n                    for k in range(j+1,len(arr)):\n                        if  (abs(arr[j]-arr[k]) <= b) and (abs(arr[i]-arr[k]) <= c):\n                            #t =  [arr[i],arr[j],arr[k]]\n                            val.append([arr[i],arr[j],arr[k]])\n        return len(val) ", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans=[]\n        for i in range(len(arr)):\n            # taking the remaining elements of arr into A, excluding upto i \n            for j in range(i+1,len(arr)):\n                if abs(arr[i]-arr[j])<=a:\n                    # taking the remaining elements of A into B, excluding upto j\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[j]-arr[k])<=b:\n                            if abs(arr[i]-arr[k])<=c:\n                                ans.append((arr[i],arr[j],arr[k]))\n        return len(ans)\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        answer = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                if abs(arr[i]-arr[j])<=a:\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[j]-arr[k])<=b:\n                            if abs(arr[i]-arr[k])<=c:\n                                answer+=1\n        return answer\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i, n_i in enumerate(arr[:-2]):\n            for j in range(i+1, len(arr)-1):\n                n_j = arr[j]\n                for n_k in arr[j+1:]:\n                    if abs(n_i - n_j) <= a and abs(n_j - n_k) <= b and abs(n_i - n_k) <=c:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i, arr_i in enumerate(arr):\n            for j, arr_j in enumerate(arr[(i + 1):]):\n                for arr_k in arr[(i + j + 2):]:\n                    if abs(arr_i - arr_j) <= a and abs(arr_j - arr_k) <= b and abs(arr_i - arr_k) <= c:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count=0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if abs(arr[i] - arr[j]) <= a :\n                    for k in range(j+1,len(arr)):\n                        if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            count+=1\n        return count\n", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        if len(arr) < 3:\n            return 0\n        good_trip = []\n        for i in range(0, len(arr)-2):\n            for j in range(i+1, len(arr)-1):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1, len(arr)):\n                        if abs(arr[j] - arr[k]) <=b and abs(arr[i] - arr[k]) <=c:\n                            good_trip.append([arr[i], arr[j], arr[k]])\n        \n        return len(good_trip)", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n_good = 0\n        for n, i in enumerate(arr):\n            for o, j in enumerate(arr[n+1:]):\n                for k in arr[n+o+2:]:\n                    if abs(i-j) <= a and abs(j-k) <= b and abs(i-k) <= c:\n                        n_good = n_good+1\n        return n_good", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        arr_len = len(arr)\n        count = 0\n        for i in range(arr_len):\n            for j in range(i + 1, arr_len):\n                if abs(arr[i] - arr[j]) > a:\n                    continue\n                \n                for k in range(j + 1, arr_len):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        result = 0\n        length = len(arr)\n        \n        for i in range(length - 2):\n            for j in range(i + 1, length - 1):\n                if abs(arr[i] - arr[j]) <= a :\n                    for k in range(j + 1, length):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            result += 1\n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        \n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    if abs(arr[i] - arr[j]) > a:\n                        break\n                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n                        \n        return count", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        good_triplet_count = 0\n        for ind_1 in range(0,len(arr)):\n            if ind_1 + 2 <=len(arr):             \n                for ind_2 in range(ind_1 + 1, len(arr)):\n                    if (abs(arr[ind_1] - arr[ind_2]) <= a):\n                        for ind_3 in range(ind_2+1,len(arr)):\n                                if (abs(arr[ind_1] - arr[ind_2]) <= a) and (abs(arr[ind_2] - arr[ind_3]) <= b) and (abs(arr[ind_1] - arr[ind_3]) <= c):\n                                    good_triplet_count = good_triplet_count + 1\n        return good_triplet_count\n                             \n                                        \n", "from itertools import combinations\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for (A, B, C) in combinations(arr, 3):\n            if abs(A - B) <= a and abs(B - C) <= b and abs(C - A) <= c:\n                count += 1\n        return count", "# slight optimization: first check\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j + 1, len(arr)):\n                        if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            res += 1\n        return res", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        # Base case\n        if len(arr) < 3:\n            return 0\n        \n        result = 0\n        \n        for i in range(len(arr) - 2):\n            num1 = arr[i]\n            for j in range(i + 1, len(arr) - 1):\n                num2 = arr[j]\n                \n                for k in range(j + 1, len(arr)):\n                    num3 = arr[k]\n                    \n                    if abs(num1 - num2) <= a and abs(num2 - num3) <= b and abs(num3 - num1) <= c:\n                        result += 1\n                        \n        return result", "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a:     \n                    for k in range(j+1,len(arr)):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            count += 1\n        return count", "# Brute Force Solution\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        \n        count = 0\n        \n        for i in range(0,len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                \n                # break case\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j+1,len(arr)):\n\n                        if all((abs(arr[j] - arr[k]) <= b,abs(arr[i] - arr[k]) <= c)):\n                            count += 1\n        \n        return count"]