["def redWith2Blues(i, line):\n    return any(line[i-2+x:i+1+x].count('blue')==2 for x in range(3))\n\ndef friend_find(line):\n    return sum( p=='red' and redWith2Blues(i,line) for i,p in enumerate(line))", "def friend_find(line):\n    N = len(line)\n    A = lambda i: line[i] == \"red\" and B(i)\n    B = lambda i: C(i) or D(i) or E(i)\n    C = lambda i: i < N-2 and line[i+1] == line[i+2] == \"blue\"\n    D = lambda i: 0 < i < N-1 and line[i-1] == line[i+1] == \"blue\"\n    E = lambda i: 1 < i and line[i-2] == line[i-1] == \"blue\"\n    return sum(map(A, range(N)))", "friend_find  = lambda arr:sum([1 for i in range(len(arr)) if arr[i] == \"red\" if (i > 1 and arr[i - 1] == \"blue\" and arr[i - 2] == \"blue\" ) or (i > 0 and i < len(arr) - 1 and arr[i - 1] == \"blue\" and arr[i + 1] == \"blue\") or (i < len(arr) - 2 and arr[i + 1] == \"blue\" and arr[i + 2] == \"blue\" )])", "import re\ndef friend_find(line):\n    s = ' '.join(line)\n    return len(re.findall(r'\\bblue blue red\\b|\\bblue red (?=blue\\b)|\\bred (?=blue blue\\b)', s))", "friend_find=lambda L:sum(p=='red'and any(L[x:x+3].count('blue')==2 for x in range(max(0,i-2),i+1))for i,p in enumerate(L))", "def friend_find(line):\n    s = ''.join([[c[0],'y'][c not in ['red','green','blue']] for c in line])\n    r = ''\n    c = 0\n    for i in s:\n        if len(r) < 3:\n            r += i\n        else:\n            r = (r+i)[1:]\n        if [r.count('r'),r.count('b')] == [1,2]:\n            c += 1\n            n = ''\n            for i in r:\n                if i == 'r':\n                    n += 'x'\n                else:\n                    n += i\n            r = n[:]\n    return c", "def friend_find(line):\n    possible_combo = (['blue','blue','red'], ['blue','red', 'blue'], ['red', 'blue', 'blue'])\n    return len({i + line[i:i+3].index('red') for i in range(len(line)) if line[i:i+3] in possible_combo})\n", "def friend_find(line):\n    posssible_combo = (['blue','blue','red'], ['blue','red', 'blue'], ['red', 'blue', 'blue'])\n    return len({i + line[i:i+3].index('red') for i in range(len(line)) if line[i:i+3] in posssible_combo})\n", "from itertools import permutations\ndef friend_find(line):\n    p=list(set(permutations(['red','blue','blue'],3)))\n    f=i=0\n    while i<len(line):\n        x=tuple(line[i:i+3])\n        if x in p:\n            f+=1\n            i+=x.index('red')\n        i+=1\n    return f\n", "def friend_find(line):\n    s=0\n    for i in range(0,len(line)-2):\n        f1,f2,f3=line[i],line[i+1],line[i+2]\n        if [f1,f2,f3]==[\"red\",\"blue\",\"blue\"]:s+=1\n        elif [f1,f2,f3]==[\"blue\",\"red\",\"blue\"]:\n            s+=1\n            line[i+1]=\"\"\n        elif [f1,f2,f3]==[\"blue\",\"blue\",\"red\"]:\n            s+=1\n            line[i+2]=\"\"\n    return s"]