["def string_expansion(s):\n    m,n = '',1\n    for j in s:\n        if j.isdigit():\n            n = int(j)\n        else:\n            m += j*n\n    return m", "import re\n\ndef string_expansion(s):\n    return ''.join(''.join(int(n or '1')*c for c in cc) for n,cc in re.findall(r'(\\d?)(\\D+)', s))\n", "def string_expansion(s):\n    def f():\n        repeat = 1\n        for c in s:\n            if c.isdigit():\n                repeat = int(c)\n            else:\n                yield c * repeat\n    return ''.join(f())", "import re\n\ndef string_expansion(s):\n    return re.sub('(\\d)+([a-zA-Z]*)', lambda m: ''.join(ch * int(m.group(1)) for ch in m.group(2)), s)", "import re\n\ndef string_expansion(s):\n    return re.sub('\\d*?(\\d?)(\\D*)', lambda m: ''.join(int(m.group(1) or 1) * c for c in m.group(2)), s)", "def string_expansion(s):\n    strin = []\n    multiplier = 1\n    result = \"\"\n    for letter in s:\n        try:\n           strin.append(int(letter))\n        except ValueError:\n            strin.append(letter)\n    for i in strin:\n        if isinstance(i, int):\n            multiplier = i\n        elif isinstance(i, str):\n            result += multiplier * i\n    return result", "import re\n\ndef string_expansion(s):\n    out = []\n    for n,chars in re.findall(r'([0-9]?)([a-z]+)', s, re.I):\n        out.append(''.join(x*int(n or 1) for x in chars))\n    return ''.join(out)\n", "import re\n\ndef string_expansion(stg):\n    result = \"\"\n    for match in re.finditer(r\"\\d*(^|\\d)([^\\d]+)\", stg):\n        count = int(match.group(1) or 1) \n        for char in match.group(2):\n            result = f\"{result}{count * char}\"\n    return result\n\n\n# one-liner\n#string_expansion = lambda s: \"\".join(f\"{int(m.group(1) or 1) * c}\" for m in re.finditer(r\"\\d*(^|\\d)([^\\d]+)\", s) for c in m.group(2))\n", "def string_expansion(s):\n    dec = 1\n    ret = ''\n    for e in s:\n        dec  = { 0:dec , 1:e }[e.isdigit()]\n        ret += ['',e*int(dec)][e.isalpha()]\n    return ret", "def string_expansion(s):\n    from re import findall\n    result = findall('^[a-zA-Z]*', s)[0]\n    for i in findall('(\\d)([a-zA-Z]+)', s):\n        for j in i[1]:\n            result += j*int(i[0])\n    return result"]