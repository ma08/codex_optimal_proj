["get = dict(zip(\"ATCG\", \"TAGC\")).__getitem__\n\ndef reverse_complement(dna):\n    try:\n        return ''.join(map(get, reversed(dna)))\n    except KeyError:\n        return \"Invalid sequence\"", "def reverse_complement(dna):\n    table = str.maketrans(\"ACGT\", \"TGCA\")\n    return \"Invalid sequence\" if set(dna) - set(\"ACGT\") else dna.translate(table)[::-1]", "def reverse_complement(dna):\n    base_pair ={'A':'T','T':'A','C':'G','G':'C'}\n    return \"\".join(base_pair[base] for base in dna[::-1].upper()) if set(dna.upper()).issubset({'A','T','C','G',\"\"})  else \"Invalid sequence\"", "def reverse_complement(dna):\n    # your code here\n    reverse = {'A': 'T', 'T':'A', 'C':'G', 'G':'C'}\n    r_c = ''\n    for nucl in reversed(dna):\n        if nucl not in reverse:\n            return \"Invalid sequence\"\n        else: r_c += reverse[nucl]\n    return r_c", "reverse_complement=lambda s,d=\"ACGT\":s.translate(str.maketrans(d,\"TGCA\"))[::-1]if set(s)<=set(d)else\"Invalid sequence\"", "def reverse_complement(dna):\n    dna = dna[::-1]\n    table = dna.maketrans('ATCG', 'TAGC')\n    symbols = 'ACTG'\n    for i in dna:\n        if i not in symbols:\n            return 'Invalid sequence'\n    return dna.translate(table)\n"]