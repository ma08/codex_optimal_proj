["def sum_mix(arr):\n    return sum(map(int, arr))", "def sum_mix(arr):\n    return sum(int(n) for n in arr)", "def sum_mix(arr):\n    result = 0\n    for a in arr:\n        try:\n            result += a\n        except TypeError:\n            result += int(a)\n    return result", "def sum_mix(arr):\n    return sum(int(i) for i in arr)", "from functools import reduce\n\ndef to_int(num):\n    \"convert to int digit or string\"\n    try:\n        return int(num)\n    except ValueError:\n        return 0\n\ndef sum_mix(arr):\n    \"\"\"\n    Given an array of integers as strings and numbers, return the sum of the array values as if all were numbers.\n    Return your answer as a number.\n\n    :param arr: [9, 3, '7', '3']\n    :return: 22\n    \"\"\"\n    converted_array = list([to_int(x) for x in arr])\n    return reduce(lambda res, x: res + x, converted_array)\n", "def sum_mix(arr):\n    return sum([int(i) for i in arr])", "sum_mix = lambda a: sum(map(int, a))", "def sum_mix(arr):\n    return sum(int(x) for x in arr)", "def sum_mix(arr):\n    somme = 0\n    for i in arr:\n        somme += int(i)\n    return somme;", "sum_mix = lambda A: sum( [int(n) for n in A] )\n", "def sum_mix(arr):\n  L = []\n  for i in arr:\n    L.append(int(i))\n  return sum(L)", "def sum_mix(arr):\n    return sum(float(x) for x in arr)", "def sum_mix(arr):\n    return eval('+'.join(str(x) for x in arr))", "def sum_mix(arr):\n    return sum([float(x) for x in arr])\n    #your code here\n", "def sum_mix(arr):\n    arr_int = [int(el) for el in arr]\n    return sum(arr_int)", "def sum_mix(arr):\n    sum = 0\n    for i in arr:\n        if type(i) != int:\n            sum += int(i)\n        else:\n            sum += i\n    return sum", "from functools import reduce\ndef sum_mix(arr):\n    #your code here\n    return reduce((lambda x,y: int(x)+int(y)),arr)", "def sum_mix(arr):\n    return sum(int(item) for item in arr)", "def sum_mix(arr):\n    sum_ = 0\n    for item in arr:\n        if isinstance(item, (str)):\n            sum_ += int(item)\n        elif isinstance(item, (int, float)):\n            sum_ += item\n    return sum_", "def sum_mix(arr):\n    return sum(int(num) for num in arr)", "def sum_mix(arr):\n    li = []\n    for i in arr:\n        li.append(int(i))\n    return sum(li)", "def sum_mix(arr):\n    #your code here\n    return sum(list(map(int,arr)))", "def sum_mix(arr):\n    total = 0\n    for i in map(int, arr):\n        total += i\n    return total\n", "def sum_mix(arr):\n    b = []\n    for i in arr:\n         b.append(int(i))\n    return sum(b)", "def sum_mix(arr):\n    result = 0\n    for number in arr:\n        result += int(number)\n    return result", "def sum_mix(arr):\n  sum = 0\n  for element in arr:\n    sum = sum + int(element)\n  return sum", "def sum_mix(arr):\n    sum=0\n    for i in arr:\n        sum+= int(i)\n    return sum", "def sum_mix(arr):\n    for i in range(0, len(arr)): \n        arr[i] = int(arr[i])\n        \n    suma = sum(arr)\n    return suma", "def sum_mix(arr):\n    return sum(int(arr[num]) for num in range(len(arr)))\n", "def sum_mix(arr):\n    arr= [int(i) for i in arr]\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n", "sum_mix = lambda array: sum([int(x) for x in array])", "def sum_mix(arr):\n    ans = 0\n    for k in arr:\n        ans += int(k)\n        \n    return ans\n    #your code here\n", "def sum_mix(arr):\n    result = [int(item) for item in arr]\n    return (sum(result))\n", "def sum_mix(arr):\n    #your code here\n    numbers = arr\n    sum = 0\n    for num in numbers:\n        number = int(num)\n        sum += number\n    return sum", "def sum_mix(arr):\n    total = 0\n    for num in arr:\n        if type(num) == str:\n            total += int(num)\n        else: \n            total += num\n        \n    return total", "def sum_mix(arr):\n    count = 0\n    for i in arr:\n        if type(i) == 'str': count += int(i)\n        else: count += int(i)\n    return count", "sum_mix = lambda arr : sum([int(digit) for digit in arr])", "def sum_mix(arr):\n    suma=0\n    for x in arr:\n        y=int(x)\n        suma=suma+y\n    return suma\n        \n", "def sum_mix(arr):\n    tam = len(arr) #Tamanho do array\n    num = 0\n    soma = 0\n    \n    for num in range(tam): #Separar cada elementro do array\n        y = int(arr[num])\n        num = num + 1\n        soma += y #soma o \u00faltimo valor com a vari\u00e1vel atual\n\n    return soma\n    #your code here\n", "def sum_mix(arr):\n    #your code here\n    lst = [int(x) for x in arr]\n    return sum(lst)", "def sum_mix(arr):\n    #your code here\n    sum=0\n    for i in range(len(arr)):\n        if(arr[i] is int):\n            sum+=0\n        else:\n            sum+=int(arr[i])\n    return sum", "def sum_mix(arr):\n    sum = 0\n    for lmnt in arr:\n        sum += int(lmnt)\n    return sum", "def sum_mix(arr):\n    lst = list(map(int, arr))\n    return sum(lst)\n", "def sum_mix(numbers):\n    return sum(int(n) for n in numbers)", "def sum_mix(arr):\n    tot = 0\n    for i in range(len(arr)):\n        if type(arr[i]) is str:\n            x = int(arr[i])\n            tot += x\n        else:\n            tot += arr[i]\n    return tot\n", "def sum_mix(arr:[]):\n    result = 0\n    for i in arr:\n        if isinstance(i,str):\n            result += int(i)\n        else:\n            result += i\n    return result\n", "def sum_mix(arr):\n    return sum(int(n) if type(n) == str else n for n in arr)", "def sum_mix(arr):\n    c = 0\n    ls = []\n    for i in arr:\n        c=int(i)\n        ls.append(c)\n    return sum(ls)\n    #your code here\n", "def sum_mix(arr):\n    nums=[]\n    for i in arr:\n        i = int(i)\n        nums.append(i)\n        \n    return sum(nums)", "def sum_mix(arr):\n    res = 0\n    for el in arr:\n        res += int(el)\n    return res", "def sum_mix(arr):\n    \"\"\"(^-__-^)\"\"\"\n    count = 0\n    for i in arr:\n        count += int(i)\n    return count\n", "import unittest\n\n\ndef sum_mix(input_array):\n    return sum(int(element) if isinstance(element, str) else element for element in input_array)\n\n\nclass TestSumMix(unittest.TestCase):\n    def test_sum_mix_with_elements_are_only_integer(self):\n        self.assertEqual(sum_mix([8, 0, 0, 8, 5, 7, 2, 3, 7, 8, 6, 7]), 61)\n\n    def test_sum_mix_with_elements_are_only_string(self):\n        self.assertEqual(sum_mix([\"1\", \"2\", \"3\", \"4\", \"5\"]), 15)\n\n    def test_sum_mix_with_elements_are_integers_or_string(self):\n        self.assertEqual(sum_mix([\"1\", 2, \"3\", 4, \"5\"]), 15)\n", "def sum_mix(arr):\n    ans = []\n    for i in arr:\n        ans.append(int(i))\n    return sum(ans)", "def sum_mix(arr):\n    messages = []\n    \n    for i in arr:\n        messages.append(int(i))\n        \n    return sum(messages)", "def sum_mix(arr):\n    res = 0\n    for num in arr:\n        if isinstance(num, str):\n            res += int(num)\n        else:\n            res += num\n    return res", "def sum_mix(arr):\n    x = 0\n    for i in range(len(arr)):\n        x = x + int(arr[i])\n    return x", "def sum_mix(arr):\n    acc = 0\n    for i in arr:\n        acc += int(i)\n    return acc", "def sum_mix(arr):\n    temp = [int(i) for i in arr]\n    return sum(temp)", "def sum_mix(arr):\n    return sum(map(int, (n for n in arr)))", "def sum_mix(arr):\n    for  i,el in enumerate(arr):\n        if isinstance(el,str):\n            arr[i]=int(el)\n    return sum(arr)", "def sum_mix(arr):\n    arr_list = [int(x) for x in arr]\n    return sum(arr_list)", "def sum_mix(arr):\n    suuum = 0\n    for i in arr:\n        suuum += int(i)\n    return suuum", "def sum_mix(arr):\n    arr= sum([int(x)for x in arr])\n    return arr", "def sum_mix(arr):\n    new_arr = list(map(int,arr))\n    return sum(new_arr)", "def sum_mix(arr):\n    \n    #start with a running total of zero\n    total = 0\n    \n    #first convert all to int form\n    # then add to running total\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n        total = total+arr[i]\n            \n            \n    return(total)\n    \n    #your code here\n", "sum_mix = lambda a: sum(int(a) for a in a)", "def sum_mix(arr):\n    transformed = [int(x) for x in arr]\n    return sum(transformed)", "def sum_mix(arr):\n    nn = 0\n    for a in arr:\n        nn += int(a)\n    \n    return nn", "def sum_mix(arr):\n    s=0\n    for ele in arr:\n        if ele is not int:\n            ele=int(ele)\n            s+=ele\n    return s", "def sum_mix(arr):\n   #your code \n    b = [int(i) for i in arr]\n    c = sum(b)\n    return c\n", "def sum_mix(arr):\n    #your code here\n\n    suma = int(0)\n    for i in range(0, len(arr)): \n        arr[i] = int(arr[i]) \n    for i in arr:\n        suma += i\n    return suma      \n\n", "def sum_mix(array):\n    new_array=[]\n    for x in array:\n        x=int(x)\n        new_array.append(x)\n    return sum(new_array)\n", "def sum_mix(arr):\n    new_list = []\n    for x in arr:\n        new_list += [int(x)]\n    return sum(new_list)", "def sum_mix(arr):\n    c=0\n    for i in arr:\n        i=int(i)\n        c+=i\n    return c\n        \n    #your code here\n", "def sum_mix(arr):\n    #your code here\n    intarr = [int(i) for i in arr] \n    sumarr = sum(intarr)\n    return sumarr", "import functools\n\ndef sum_mix(arr):\n    print(arr)\n    \n    return functools.reduce(lambda x, y : int(x) + int(y) ,arr)\n", "def sum_mix(arr):\n    suma = 0\n    for i in arr:\n        if type(i) == int:\n            suma += i\n        else:\n            suma += int(i)\n    return suma", "def sum_mix(arr):\n    new_arr=[]\n    for x in arr:\n        if type(x)==str:\n            new_arr.append(int(x))\n        elif type(x)==int:\n            new_arr.append(x)\n    return sum(new_arr)", "def sum_mix(arr):\n    cont=0\n    for i in arr:\n        cont+=int(i)\n    return cont", "def sum_mix(arr):\n    #your code here\n    n=0\n    for a in arr:\n        if type(a)==int:\n            n+=a\n        elif type(a)==str:\n            n+=int(a)\n    return n\n            \n", "def sum_mix(arr):\n    suma = 0\n    for number in arr:\n        suma += int(number)\n    return suma\n    #your code here\n", "def sum_mix(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if isinstance(arr[i], str): sum += int(arr[i])\n        else: sum += arr[i]\n            \n    return sum", "def sum_mix(arr):\n    t = 0\n    for i in arr:\n        if isinstance(i, str):\n            t +=int(i)\n        else:\n            t +=i\n    return t", "from functools import reduce\ndef sum_mix(arr):\n    return sum([int(i) for i in arr])", "from functools import reduce\ndef sum_mix(arr):\n    return sum(map(int,arr))", "from functools import reduce\ndef sum_mix(arr):\n    return reduce(lambda x,y: x + (y if y is int else int(y)), arr, 0)", "def sum_mix(arr):\n    a = [int(a)for a in arr]\n    return sum(a)\n", "def sum_mix(arr):\n    total = \"\"\n    new_lst = []\n    for i in arr:\n        if i == str(i):\n            new_lst.append(int(i))\n        else:\n            new_lst.append(i)\n    total = sum(new_lst)\n    return total\n\n", "def sum_mix(arr):\n    i = 0\n    array_numbers = []\n    for i in range(len(arr)):\n        array_numbers.append(int(arr[i]))\n        i = i + 1\n    return sum(array_numbers)", "def sum_mix(arr):\n    sum = 0\n    for x in arr:\n        if type(x) == str:\n            x = int(x)\n            sum = sum + x\n        else:\n            sum = sum + x\n\n    return sum", "def sum_mix(arr):\n    a = 0\n    for el in arr:\n        if el == int(el):\n            a += el\n        elif el == str(el):\n            el = int(el)\n            a += el\n    return a", "def sum_mix(arr):\n    liczby = []\n    for a1 in arr:\n        liczby.append(int(a1))\n    return sum(liczby)", "def sum_mix(arr):\n    sum = 0\n    numbers = [int(x) for x in arr]\n    \n    for i in numbers:\n        sum = sum + i\n    \n    return sum\n       \n", "def sum_mix(arr):\n    sum=0\n    for x in arr:\n        if type(x)==str:\n            x=int(x)\n            sum+=x\n        else:\n            sum+=x\n    return sum\n    \n\n", "def sum_mix(arr) -> int:\n    return sum([int(x) for x in arr])", "def sum_mix(arr):\n    sum = 0\n    for i in arr:\n        if type(i) == str :\n            i = int(i)\n            sum += i\n        else:\n            sum += i\n            \n    return sum", "def sum_mix(arr):\n    sum = 0\n    for elem in arr:\n        sum = sum + int(elem)\n    return sum", "def sum_mix(arr):\n    numbers = 0\n    for items in arr:\n        numbers+= int(items)\n    return numbers\n        \n", "def sum_mix(arr):\n    list=[]\n    for x in arr:\n        if isinstance(x, str):\n            list.append(int(x))\n        if isinstance(x, int):\n            list.append(x)\n    return sum(list)\n    #your code here\n"]