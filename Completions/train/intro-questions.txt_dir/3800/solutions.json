["import re\n\ndef spreadsheet(s):\n    nums = re.findall(r'(\\d+)', s)\n    if len(nums) == 2:\n        n, cStr = int(nums[1]), ''\n        while n:\n            n, r = divmod(n-1, 26)\n            cStr += chr(r + 65)\n        return \"{}{}\".format(cStr[::-1], nums[0])\n    else:\n        return \"R{}C{}\".format(nums[0], sum( 26**i * (ord(c)-64) for i,c in enumerate(re.sub(r'\\d', '', s)[::-1])))", "def spreadsheet(s):\n    try:\n        r, c = map(int, s[1:].split('C'))\n        l = str(r)\n        while c:\n            c, i = divmod(c - 1, 26)\n            l = chr(i + 65) + l\n        return l\n    except:\n        c = 0\n        for i, l in enumerate(s):\n            if l.isdigit(): break\n            c = 26 * c + ord(l) - 64\n        return 'R%sC%d' % (s[i:], c)", "import re\nfrom string import ascii_uppercase as ALPHA\n\ndef num2alpha(num, b=len(ALPHA), numerals=ALPHA):\n    return '' if not num else (num2alpha((num-1) // b, b, numerals) + numerals[(num-1) % b])\ndef alpha2num(string, b=len(ALPHA), numerals=ALPHA):\n    return sum((numerals.index(v)+1)*b**i for i,v in enumerate(reversed(string)))\n    \nrcregex = re.compile('R(\\d+)C(\\d+)')\nspregex = re.compile('([A-Z]+)(\\d+)')\ndef spreadsheet(s):\n    m = rcregex.match(s)\n    if m: return num2alpha(int(m.group(2)))+m.group(1)\n    m = spregex.match(s)\n    if m: return 'R{}C{}'.format(m.group(2),alpha2num(m.group(1)))\n    return ''\n", "import re\n\ndef spreadsheet(s):\n    numbers = re.findall(r\"(\\d+)\", s)\n    if len(numbers) == 1:\n        row = numbers[0]\n        col = sum(26**i * (ord(v)-64) for i, v in enumerate(s[:s.find(row)][::-1]))\n        return \"R{row}C{col}\".format(row=row, col=col)\n    else:\n        row = numbers[0]\n        x = int(numbers[1])\n        col = \"\"\n        while x > 0:\n            col = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[(x-1)%26] + col\n            x = (x-1) // 26\n        return \"{col}{row}\".format(col=col, row=row)\n", "import string\nimport re\n\n\ndef spreadsheet(s):\n    if re.match(r\"^R\\d+C\\d+$\", s):\n        return convert_to_ss(s)\n    else:\n        return convert_to_rc(s)\n\ndef convert_to_rc(s: str) -> str:\n    ind = re.search(r\"\\d\", s).span()[0]\n    letters = s[:ind]\n    nums = s[ind:]\n    cols = 0\n    for i in range(len(letters)):\n        if i != len(letters) - 1:\n            cols += (string.ascii_uppercase.find(letters[i]) + 1) * 26 ** (len(letters) - i - 1)\n        else:\n            cols += (string.ascii_uppercase.find(letters[i]) + 1)\n    return f\"R{nums}C{cols}\"\n\ndef convert_to_ss(s: str) -> str:\n    ind = s.find(\"C\")\n    rows = s[1:ind]\n    cols = int(s[ind+1:])\n    res_col = \"\"\n    while cols > 0:\n        cols, rem = cols // 26, cols % 26\n        if res_col and res_col[0] == \"Z\":\n            if rem == 1:\n                break\n            else:\n                res_col = string.ascii_uppercase[rem - 2] + res_col\n        else:\n            res_col = string.ascii_uppercase[rem - 1] + res_col\n        print(cols, rem)\n    return f\"{res_col}{rows}\"", "from itertools import product\nfrom string import ascii_uppercase as ap\nimport re\ntranso = list(map(lambda x:\"\".join(x),list(ap)+list(product(ap,repeat=2))+list(product(ap,repeat=3))+list(product(ap,repeat=4))))\ndef spreadsheet(no):\n    matches = re.match(r\"(?P<RC1>^R\\d+C\\d+$)|(?P<A1>^(?P<LET>[A-Z]+)\\d+$)\",no)\n    if matches.group(\"RC1\"):\n        asi = matches.group(\"RC1\")\n        asiind = asi.index(\"C\")\n        return transo[int(asi[asiind+1:])-1] + asi[1:asiind]\n    else:\n        asi = matches.group(\"LET\")\n        df = transo.index(asi)\n        return f\"R{no[no.rfind(asi)+len(asi):]}C{df+1}\"", "import re\nfrom string import ascii_uppercase as upper\ndef spreadsheet(s):\n      x = re.search(r'^([A-Z]+)(\\d+)$',s)\n      if x:\n          c,r = x.groups()\n          return f'R{r}C{sum((upper.index(j)+1)*(26**(len(c)-i-1)) for i,j in enumerate(c))}'\n      else:\n          r,c = re.search(r'(?:R)(\\d+)(?:C)(\\d+)',s).groups()\n          s,c = [], int(c)\n          if c==26 : return 'Z'+r\n          while c>1:\n              c, m = divmod(c,26)\n              s.append([c,m])\n          return (['','A'][c] + ''.join([upper[s[i][1]-([2,1][bool(s[i-1][1])] if i>0 else 1)] for i in range(len(s))])[::-1]) + r", "import re\ndef spreadsheet(s):\n    m=re.match(r'([A-Z]+)(\\d+)$',s)\n    if m:\n        c,r=m.group(1),int(m.group(2))\n        column=0\n        for d in c:\n            column=column*26+(ord(d)-ord('A')+1)\n        return 'R{}C{}'.format(r,column)\n    else:\n        m=re.match(r'R(\\d+)C(\\d+)$',s)\n        r,c=m.group(1),int(m.group(2))\n        column=''\n        while(c>0):\n            m=c%26\n            if m==0:\n                m=26\n            column=chr(ord('A')+m-1)+column\n            c=(c-m)//26\n        return column+r", "import re\n\ndef to_display(b, n):\n    r = []\n    while n:\n        n, x = divmod(n - 1, 26)\n        r.append(chr(65 + x))\n    return \"\".join(r[::-1]) + str(b)\n\ndef to_internal(s):\n    (a, b), n = re.findall(r\"[A-Z]+|\\d+\", s), 0\n    for x in a:\n        n *= 26\n        n += ord(x) - 64\n    return (int(b), n)\n\ndef spreadsheet(s):\n    a = re.findall(r\"[A-Z]+|\\d+\", s)\n    return \"R{}C{}\".format(*to_internal(s)) if len(a) == 2 else to_display(int(a[1]), int(a[3]))", "from re import fullmatch, findall\n\n\ndef spreadsheet(s):\n    if fullmatch('R\\d+C\\d+', s):\n        row = findall('\\d+', s)[0]\n        col = findall('\\d+', s)[1]\n        return f\"{convert_int(col)}{row}\"\n    else:\n        row = findall('\\d+', s)[0]\n        col = findall('[A-Z]+', s)[0]\n        return f\"R{row}C{convert_str(col)}\"\n\n\ndef convert_int(num, to_base=26, from_base=10):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n <= to_base:\n        return alphabet[n]\n    else:\n        if n % to_base == 0:\n            return convert_int(n // to_base-1, to_base) + alphabet[26]\n        else:\n            return convert_int(n // to_base, to_base) + alphabet[n % to_base]\n\n\ndef convert_str(num):\n    num = list(num)[::-1]\n    answer = 0\n    alphabet = \"0ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    for i in range(len(num)):\n        answer += alphabet.index(num[i]) * (26 ** int(i))\n\n    return answer"]