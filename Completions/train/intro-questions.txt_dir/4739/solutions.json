["D, R = {}, [[], [], []]\nfor i in range(10000):\n    D[i] = D.get(i - 1, 0) + i\n    R[D[i]%3].append(D[i])\n    \ndef same_col_seq(val, k, col):\n    r = ['blue', 'red', 'yellow'].index(col)\n    return [e for e in R[r] if e > val][:k]    ", "def same_col_seq(val, k, col):\n    colDct = {'red': 1, 'blue': 0}\n\n    def gen():\n        n = ((1 + 24*val/3)**.5 - 1)//2\n        while True:\n            n += 1\n            s = n*(n+1)/2\n            if s%3 == colDct[col]: yield s\n            \n    g = gen()\n    return [next(g) for _ in range(k)] if col != 'yellow' else []", "def same_col_seq(val, k, col):\n    if col == 'yellow': return []\n    \n    n = int((2*val)**0.5)-1\n    while n*(n+1) <= 2*val: n+= 1\n    \n    values = []\n    \n    while len(values) < k:\n        if col == 'blue' and (n-1)%3 != 0:\n            values.append(n*(n+1)//2)\n        if col == 'red' and (n-1)%3 == 0:\n            values.append(n*(n+1)//2)\n        n+=1\n            \n    return values", "li, i, pos, d = ['red', 'yellow', 'blue'], 1, 1, {}\nwhile i < 2000:\n        d[pos] = li[(pos - 1) % 3]\n        i += 1 ; pos += i\ndef same_col_seq(after, k, need):\n    req, status = [], 0\n    for i, j in d.items():\n        if i > after : status = 1\n        if status:\n            if j == need : req.append(i)\n        if len(req) == k or i >= 2 * k * after : break\n    return req", "same_col_seq=lambda x,k,c:(lambda n,m:[i*-~i//2for i in range(n,n+3*k)if i%3%2==m][:k])(int((8*x+1)**.5+1)//2,'br'.find(c[0]))", "def same_col_seq(val, k, col):\n    n_start = int(((1 + 8 * val)**0.5 - 1) / 2) + 1\n    def f(n):\n        return (1 + n) * n // 2\n    def get_col(n):\n        return 'red' if n % 3 == 1 else 'blue'\n    return [f(n) for n in range(n_start, n_start + 62) if col==get_col(n)][:k]\n", "from bisect import bisect_right\n\ndef same_col_seq(val, k, col, seq=[], colors=[]):\n    if not seq:\n        color = lambda v: {0: 'blue', 1: 'red', 2: 'yellow'}[v % 3]\n        next_val = lambda n: seq[-1] + n\n        seq.append(1)\n        colors.append('red')\n        n = 2\n        v = next_val(n)\n        while True:\n            seq.append(v)\n            colors.append(color(v))\n            if v > 40 * 10 ** 6:\n                break\n            n += 1\n            v = next_val(n)\n    res = []\n    index = find_gt(seq, val)\n    limit = val * 2 * k\n    while True:\n        if colors[index] == col:\n            res.append(seq[index])\n            if len(res) == k:\n                break\n        if seq[index] > limit and len(res) == 0:\n            break\n        index += 1\n    return res\n\ndef find_gt(a, x):\n    return bisect_right(a, x)", "def same_col_seq(val, k, col):\n    results = []\n    term = 1\n    while values(term) <= val:\n        term += 1\n    while len(results) < k:\n        if colors(values(term)) == col:\n            results.append(values(term))\n        elif values(term) >= (2*k*val) and len(results) == 0:\n            return []\n        term += 1\n    return results\n\ndef values(term):\n    if term % 2 == 0:\n        return int(((term / 2) * term) + (term / 2))\n    else:\n        return int((((term + 1) / 2) * term))\n    \ndef colors(term):\n    if term % 3 == 0:\n        return 'blue'\n    else:\n        return 'red'", "def same_col_seq(val, k, col):\n    # your code here\n    code ={'blue':0,'red':1,'yellow':2}\n    result =[]\n    limit = 2 * k * val   \n    term  =  1\n    temp  =  1\n    while(temp <= val):\n        temp =  temp + term + 1\n        term +=1\n        \n    while(True):\n        if(temp % 3  == code[col]):\n            result.append(temp)\n        temp = temp + term + 1\n        term +=1\n        \n        if(len(result)>= k  ):\n            break\n        if(len(result) == 0 and temp>=limit):\n            return []   \n\n    return result", "import math\n\ndef same_col_seq(val, k, col):\n    colors = [\"red\", \"yellow\", \"blue\"]\n    m = colors.index(col)\n    res = list()\n    x0 = math.floor((-1 + math.sqrt(1 + 8 * val)) / 2)\n    s = x0 * (1 + x0) // 2\n    i = x0 + 1\n    while len(res) < k:\n        if (s+2) % 3 == m and s > val:\n            res.append(s)\n        s += i\n        i += 1\n        if s > 3 * k * val:\n            break\n    return res"]