["pos = {\"L4\":0, \"L3\":1, \"L2\":2, \"L1\":3, \"L0\":4, \"R0\":4, \"R1\":5, \"R2\":6, \"R3\":7, \"R4\":8}\n\ndef tetris(arr):\n    current, res = [0]*9, 0\n    for x in arr:\n        p = pos[x[1:]]\n        current[p] += int(x[0])\n        if current[p] >= 30: break\n        y = min(current)\n        if y: current, res = [v-y for v in current], res+y\n    return res", "class Game():\n\n    def __init__(self, arr):\n        self.comands = arr\n        self.score   = 0\n        self.step    = None\n        self.fild    = [-1]*9 \n        self.over    = lambda x:max(x)>=29\n        \n    def __break__(self):\n        while -1 not in self.fild:\n            self.score +=1\n            self.fild  = [ e-1 for e in self.fild ]\n        return self.over(self.fild)\n        \n    def __values__(self, comand):\n        self.step = 4 + {'R':lambda m: +int(m), \n                         'L':lambda m: -int(m)}[comand[1]](comand[2])\n        return int(comand[0])\n\n    def game(self):\n        for comand in self.comands:\n            block = self.__values__(comand)\n            self.fild[self.step] += block\n            if self.__break__(): \n                break\n        return self.score\n        \ndef tetris(arr) -> int:\n    play = Game(arr)\n    return play.game()\n", "def tetris(arr) -> int:\n    bd, lines = [0]*9, 0\n    for n,d,m in arr:\n        i = int(m)*(-1)**(d=='R')\n        bd[i] += int(n)\n        if bd[i]>29:\n            h = min(bd)\n            if bd[i]-h>29: break\n            lines += h\n            bd = [v-h for v in bd]\n    lines += min(bd)\n    return lines", "from collections import Counter\n\ndef tetris(arr):\n    fields = Counter()\n    clear = 0\n    for log in arr:\n        pos = log[1:].replace('R0', 'L0')\n        fields[pos] += int(log[0])\n        if fields[pos] >= 30:\n            break\n        elif len(fields) == 9:\n            c = min(fields.values())\n            clear += c\n            for pos in fields:\n                fields[pos] -= c\n    return clear", "def tetris(arr) -> int:\n\n    lines_cleared = 0\n    sum = [0,0,0,0,0,0,0,0,0]\n    dict = {'L4': 0, 'L3': 1, 'L2': 2,\n            'L1': 3, 'L0': 4, 'R0': 4,\n            'R1': 5, 'R2': 6, 'R3': 7, 'R4': 8}\n    \n    for i in arr:   \n        sum[dict[i[-2:]]] += int(i[0])\n        \n        lines = min(sum)\n        sum = [i - lines for i in sum] \n        lines_cleared += lines\n        \n        if max(sum) >= 30:\n            break\n            \n    return lines_cleared", "import numpy as np\n\n\ncol_dict = {\"L4\":0, \"L3\":1, \"L2\":2, \"L1\":3, \"L0\":4,\"R0\":4, \"R1\":5, \"R2\":6, \"R3\":7, \"R4\":8}\n            \ndef tetris(arr) -> int:\n    field = np.zeros(9, dtype = np.int8)\n    counter = 0\n    for turn in arr:\n        block_height = int(turn[0])\n        index = col_dict[turn[1:]]\n        field[index] += block_height\n        if field[index] >=30:\n            return counter\n        else:\n            counter += field.min()\n            field -= field.min()\n    return counter", "def tetris(lst):\n    field, lines = [0] * 9, 0\n    for h, s, m in lst:\n        i = 4 + int(m) * (-1 if s == \"L\" else 1)\n        field[i] += int(h)\n        while all(col > 0 for col in field):\n            field, lines = [col - 1 for col in field], lines + 1\n        if field[i] > 29:\n            break\n    return lines", "def tetris(a):\n    b, glob_min, = [0] * 9, 29\n    for x, y, z in a:\n        i = int(z) * (-1)**(y == \"R\")\n        b[i] += int(x)\n        if b[i] > glob_min:\n            n = min(b)\n            if b[i] - n > 29:\n                return n\n            glob_min = n + 29\n    return min(b)", "import numpy as np\n\ndef columnDecode(code):\n    code = code.replace(\"R\", \"+\")\n    code = code.replace(\"L\", \"-\")\n    return int(code) + 4\n    \ndef placePiece(colList,size,i):\n        for x in range(i,size+i):\n            colList[x] = 1\n        return colList\n        \ndef lineCheck(board):\n    i = 0\n    for i in range(5):\n        if not all(board[:,i]):\n            break\n    return i\n\ndef tetris(arr):\n    totalLines = 0\n    board = np.zeros((9,29), dtype=\"int\")\n    for piece in arr:\n        col = columnDecode(piece[1:])\n        size = int(piece[0])\n        for i in range(len(board[col])-1,-1,-1):\n            if board[col][i-1] == 1 or i <= 0:\n                try:\n                    board[col] = placePiece(board[col],size,i)\n                except:\n                    return totalLines\n                lines = lineCheck(board)\n                if lines > 0:\n                    board = board[:,lines:]\n                    board = np.hstack((board,np.zeros((board.shape[0],lines), dtype=\"int\")))\n                    totalLines += lines\n                    lines = 0                    \n                break\n    return totalLines            ", "def tetris(arr):\n    d, c = {}, 0\n    for i, j in enumerate(arr):\n        t, dt = j[1:].replace('R0', 'L0'), d.values()\n        d[t] = d.get(t, 0) + int(j[0])\n        if len(dt)==9 and all(dt) : m = min(d.values()) ; d = {k:l-m for k,l in d.items()} ; c += m\n        if d[t] >= 30 : break\n    return c"]