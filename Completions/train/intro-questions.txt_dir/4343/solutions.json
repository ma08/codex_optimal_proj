["def max_match(s):\n    result = []\n    \n    while s:\n        for size in range(len(s), 0, -1):\n            word = s[:size]\n            if word in VALID_WORDS:\n                break\n        \n        result.append(word)\n        s = s[size:]\n    \n    return result", "# KenKamau's solution\ndef max_match(st):\n    for i in range(len(st),0,-1):        \n        if i == 1 or st[:i] in VALID_WORDS:\n            return [st[:i]] + max_match(st[i:])\n    return []", "def max_match(sentence):\n    found = []\n    while sentence:\n        for i in range(len(sentence), 0, -1):\n            chunk = sentence[:i]\n            if chunk in VALID_WORDS:\n                break\n        found.append(chunk)\n        sentence = sentence[i:]\n    return found", "def max_match(sentence):\n    word = sentence\n    if word is \"\":\n        return []\n    if len(word) > 1:\n        while not (word in VALID_WORDS):\n            word = word[:-1]\n            if len(word) ==1:\n                break;\n    return [word] + max_match(sentence.replace(word, \"\", 1))\n", "def max_match(sentence: str):\n    if not sentence:\n        return []\n\n    word, i = next(filter(lambda w: w[0] in VALID_WORDS, ((sentence[:i], i) for i in range(len(sentence) + 1, 1, -1))),\n                   (sentence[0], 1))\n\n    return [word] + max_match(sentence[i:])"]