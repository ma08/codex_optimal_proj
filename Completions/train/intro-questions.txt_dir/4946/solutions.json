["def house_numbers_sum(inp):\n    return sum(inp[:inp.index(0)])", "from itertools import takewhile; house_numbers_sum = lambda arr: sum(x for x in takewhile(lambda x: x!=0, arr))", "def house_numbers_sum(inp):\n    total = 0\n    for house_num in inp:\n        if house_num == 0:\n            return total\n        else: \n            total += house_num", "from itertools import takewhile\n\ndef house_numbers_sum(inp):\n    return sum(takewhile(bool,inp))", "def house_numbers_sum(inp):\n    return sum(inp[ : inp.index(0) + 1])", "import itertools\n\ndef house_numbers_sum(inp):\n    return sum(itertools.takewhile(lambda n: n, inp))", "house_numbers_sum = lambda l: sum(l[:l.index(0)])", "def house_numbers_sum(inp, res = 0):\n    for i in inp:\n        res += i\n        if i == 0:\n            return res", "def house_numbers_sum(inp):\n    total = 0\n    for num in inp:\n        if num != 0:\n            total += num\n        else:\n            break\n    return total", "def house_numbers_sum(inp):\n    return sum(next(iter([])) if i == 0 else i for i in inp)", "from itertools import takewhile\n\ndef house_numbers_sum(inp):\n    return sum(takewhile((0).__ne__, inp))", "def house_numbers_sum(inp):\n    return sum(inp[:inp.index(0)+1]) if inp[0] !=0 else 0", "def house_numbers_sum(inp):\n    sum = 0\n    for num in inp:\n        if num is 0: \n            return sum\n        else:\n            sum+= num\n", "def house_numbers_sum(inp):\n    return sum(__import__('itertools').takewhile(bool, inp))", "def house_numbers_sum(inp):\n    sum=0\n    for n in inp:\n        if n==0:\n            return sum\n        sum=sum+n\n    return sum\n        \n", "def house_numbers_sum(A):\n    return sum(A[:A.index(0)])", "def house_numbers_sum(inp):\n    zero = inp.index(0)\n    return sum(inp[:zero])", "def house_numbers_sum(inp):\n    list = []\n    for i in range(0, len(inp)+1):\n        if inp[i] == 0:\n            break\n        else:\n            list.append(inp[i])\n    return sum(list)\n        \n        \n        \n", "def house_numbers_sum(inp):\n    total = 0\n    for num in inp:\n        if num == 0:\n            break\n        else: \n            total +=num\n    return total\n", "def house_numbers_sum(inp):\n    suma = []\n    for i in range(0, len(inp)+1):\n        if inp[i] == 0:\n            break\n        else:\n            suma.append(inp[i])\n    return sum(suma)\n    \n    \n", "def house_numbers_sum(inp):\n    s=0\n    for x in inp:\n        if x==0:\n            return s\n        s=s+x", "def house_numbers_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] == 0):\n            break\n        else:\n            sum += arr[i]\n    return sum", "def house_numbers_sum(inp):\n    l = []\n    for i in inp:\n        if i == 0:\n            break\n        else:l.append(i)\n    return sum(l)", "def house_numbers_sum(inp):\n    cool = []\n    \n    for i in inp:\n        if i != 0:\n            cool.append(i)\n        else:\n            break\n            \n    return sum(cool)", "def house_numbers_sum(l):\n    if not l[0] : return 0\n    return l[0] + house_numbers_sum(l[1:])", "def house_numbers_sum(inp):\n    ans = 0\n    for i in inp:\n        ans += i\n        if i == 0: break\n    return ans", "def house_numbers_sum(x):\n    a=0\n    for i in x:\n        a+=i\n        if i==0:\n            break\n    return a", "def house_numbers_sum(inp):\n    suma = 0\n    for i in range(len(inp)):\n        if inp[i] == 0:\n            break\n        else:\n            suma+=inp[i]\n       \n    return suma\n\n    # create count variable to count the sum before 0\n    # calculate the sum before 0\n    # and return the sum\n", "def house_numbers_sum(inp):\n    res = 0\n    for n in inp:\n        if n == 0:\n            break\n        else:\n            res += n\n    return res", "def house_numbers_sum(inp):\n    total = 0\n    for x in inp:\n        if x == 0:\n            return total\n        else:\n            total+=x", "def house_numbers_sum(ls):\n    return sum(ls[:ls.index(0)])", "def house_numbers_sum(inp):\n    r=0\n    for i in inp:\n        if i!=0:\n            r+=i\n        else:\n            break\n    return r", "def house_numbers_sum(inp):\n    returnlist = []\n    for eachnum in inp:\n        if eachnum == 0:\n            return sum(returnlist)\n        else:\n            returnlist.append(eachnum)", "def house_numbers_sum(inp):\n    my_l = []\n    for num in inp:\n        if num != 0:\n            my_l.append(num)\n        else:\n            break\n    return sum(my_l)", "def house_numbers_sum(inp):\n    res = [0]\n    for i in inp:\n        if i == 0:\n            break\n        res.append(i)\n     \n    return sum(res)", "def house_numbers_sum(inp):\n    sum = i = 0\n    while i < len(inp) and inp[i] != 0:\n        sum += inp[i]\n        i += 1\n    return sum", "def house_numbers_sum(inp):\n    sum = 0\n    for i in inp:\n        if i is 0:\n            break\n        sum += i\n        \n    return sum", "def house_numbers_sum(inp):\n    res = []\n    for num in inp:\n        if num == 0:\n            break\n        else:\n            res.append(num)\n    return sum(res)", "def house_numbers_sum(inp):\n    d = inp.index(0)\n    return sum(inp[0: d])", "def house_numbers_sum(inp):\n    ind = inp.index(0)\n    s = 0\n    for i in range(0,ind):\n        s = s + inp[i]\n    return s", "def house_numbers_sum(inp):\n    if inp[0] == 0:\n        return 0\n    else:\n        return sum(inp[:inp.index(0)])", "def house_numbers_sum(inp):\n    n = 0\n    for i in inp:\n       if i==0:\n          return n\n       else:\n          n = n+i\n    return n", "def house_numbers_sum(inp):\n    z=[]\n    for x in inp:\n      if x>0:z.append(x)\n      else:break\n    return (sum(z))\n    pass", "def house_numbers_sum(inp):\n    counter = 0\n    for x in inp:\n        counter += x\n        if x == 0:\n            break\n    return counter", "def house_numbers_sum(inp):\n    r = 0\n    for n in inp:\n        r += n\n        if n == 0:\n            break\n    return r\n    # Flez\n", "def house_numbers_sum(inp):\n    output = 0\n    for number in inp:\n        if number == 0:\n            break\n        output += number\n    \n    return output", "def house_numbers_sum(inp):\n    x = []\n    if inp[0] == 0:\n        return 0\n    else:\n        for i in inp:\n            if i != 0:\n                x.append(i)\n                continue\n            elif i == 0:\n                break\n        return sum(x)", "from itertools import takewhile\n\nhouse_numbers_sum = lambda lst: sum(takewhile(lambda n: n != 0, lst))", "def house_numbers_sum(inp):\n    inp = inp[:inp.index(0)]\n    return sum(inp) if inp else 0", "def house_numbers_sum(inp):\n    a = []\n    sum = 0\n    for i in inp:\n        a.append(i)\n        if i == 0:\n            break\n    for i in a:\n        sum = sum + i\n    return sum\n", "def house_numbers_sum(inp):\n    sm, i = 0, 0\n    while inp[i] != 0:\n        sm += inp[i]\n        i += 1\n    return sm", "def house_numbers_sum(lst):\n    result = 0\n    for num in lst:\n        if num == 0: return result\n        result += num", "def house_numbers_sum(inp):\n    \n  count = 0\n  for item in inp:\n      count += item\n      if item == 0:\n          break\n  return count", "def house_numbers_sum(inp):\n    result = 0\n    for i in inp:\n        if i == 0:\n            break\n        result += i\n        \n    return result\n    pass", "def house_numbers_sum(inp):\n    lst = []\n    for i in inp:\n        lst.append(i)\n        if i == 0:\n            break\n    return sum(lst)\n        \n", "def house_numbers_sum(inp):\n    result = 0\n    for n in inp:\n        if n == 0:\n            return result\n        else:\n            result += n\n    return result", "def house_numbers_sum(inp):\n    a = inp.index(0)\n    x = 0\n    for i in range(a):\n        x += inp[i]\n    \n    return x", "def house_numbers_sum(inp):\n    total = 0\n    for x in inp:\n        if x != 0:\n            total = total + x\n        else:\n            return total\n", "def house_numbers_sum(inp):\n    s = 0\n    for e in inp:\n        if e != 0:\n            s += e\n        else:\n            return s", "import unittest\n\n\ndef house_numbers_sum(inp):\n    result = 0\n    for ele in inp:\n        if ele == 0:\n            break\n        result += ele\n    return result\n    \n    \nclass TestHoseNumbersSum(unittest.TestCase):\n    def test_should_return_0_when_given_inp_first_element_is_0(self):\n        inp = [0, 1, 2, 3, 4, 5]\n        actual = house_numbers_sum(inp)\n        self.assertEqual(actual, 0)\n\n    def test_should_return_sum_of_all_elemnt_when_given_inp_last_element_is_0(self):\n        inp = [1, 2, 3, 4, 5, 0]\n        actual = house_numbers_sum(inp)\n        self.assertEqual(actual, 15)\n\n    def test_should_return_sum_of_element_until_0_when_given_inp_has_0_in_middle(self):\n        inp = [1, 2, 0, 4, 5]\n        actual = house_numbers_sum(inp)\n        self.assertEqual(actual, 3)\n", "def house_numbers_sum(inp):\n    \n    x = inp.index(0)\n    return sum(i for i in inp[:x])", "def house_numbers_sum(inp):\n    res = 0\n    for num in inp:\n        if num == 0:\n            return res\n        res+=num\n    return -1\n", "def house_numbers_sum(inp):\n    my_list = []\n    for i in inp:\n        if i == 0:\n            break\n        else:\n            my_list.append(i)\n    return sum(my_list)", "def house_numbers_sum(inp):\n    i = 0\n    ln = len(inp)\n    res = 0\n    while i < ln and inp[i] != 0:\n        res += inp[i]\n        i += 1\n        \n    return res", "def house_numbers_sum(inp):\n    add = 0\n    for x in inp:\n        if x == 0:\n            return add\n        add += x", "def house_numbers_sum(inp):\n    a = []\n    for x in inp:\n        if x != 0:\n            a.append(x)\n        else:\n            break\n    return sum(a)", "def house_numbers_sum(inp):\n    lst = []\n    for i in inp:\n        if i == 0:\n            break\n        else:\n            lst.append(i)\n    return sum(lst)", "def house_numbers_sum(inp):\n    sum_ = 0\n    for num in inp:\n        if num != 0:\n            sum_ += num\n        else:\n            break\n    return sum_", "def house_numbers_sum(inp):\n    sum = 0\n    for number in inp:\n        sum += number\n        if number == 0:\n            break\n    return sum", "def house_numbers_sum(inp):\n    i = 0\n    out = 0\n    while inp[i] != 0:\n        out += inp[i]\n        i+=1\n    return out", "def house_numbers_sum(inp):\n    total = 0\n    for i in inp:\n        if i != 0:\n            total += i\n        else:\n            return total", "def house_numbers_sum(x):\n    return sum(x[:x.index(0)])", "def house_numbers_sum(inp):\n    a=0\n    for n in inp:\n        if n==0:\n            return a\n        a+=n\n    return a", "def house_numbers_sum(inp):\n    tot = 0\n    for x in inp:\n        tot += x\n        if x == 0: break\n    return tot", "def house_numbers_sum(inp):\n    tab=[]\n    for x in inp:\n        if x !=0:\n            tab.append(x)\n        else:\n            break\n    return (sum(tab))", "def house_numbers_sum(inp):\n    index = inp.index(0)\n    return sum([a for a in inp[:index]])", "def house_numbers_sum(inp):\n    sum = 0\n    for num in inp:\n        if num != 0:\n            sum += num\n        else:\n            return sum\n            break", "def house_numbers_sum(inp):\n    result = 0\n    for i in inp:\n        if i == 0:\n            break\n        else:\n            result += i\n    return result", "def house_numbers_sum(inp):\n    if (inp == [] or inp[0] == 0):\n        return 0\n    return house_numbers_sum(inp[1:]) + inp[0]", "def house_numbers_sum(lst):\n    return sum(lst[:lst.index(0)])", "def house_numbers_sum(inp):\n    s = 0\n    for x in inp:\n        s = s + x\n        if x == 0:\n            return s", "def house_numbers_sum(inp):\n    total = 0\n    for i in range(len(inp)):\n        if inp[i] == 0:\n            break\n        else:\n            total += inp[i]\n    return total", "def house_numbers_sum(inp):\n    res = 0\n    for i in inp:\n        res += i\n        if i == 0:\n            return res", "def house_numbers_sum(inp):\n    s = 0\n    for x in inp:\n        if x == 0:\n            return s\n        else:\n            s += x\n    return s", "def house_numbers_sum(inp):\n    total = 0\n    for x in inp:\n        if x == 0: return total\n        total += x", "def house_numbers_sum(inp):\n    n = inp.index(0)\n    new = inp[:n]\n    return sum(new)", "def house_numbers_sum(inp):\n  z = inp.index(0)\n  return sum(inp[0:z])", "def house_numbers_sum(inp):\n    zero_index = inp.index(0)\n    total = 0\n    \n    for number in inp[:zero_index]:\n        total += number\n        \n    return total", "def house_numbers_sum(inp):\n    result = 0\n    for number in inp:\n        result += number\n        if number == 0:\n            break\n    \n    return result", "def house_numbers_sum(input):\n    return sum(input[0:input.index(0)])\n", "def house_numbers_sum(inp):\n    s = 0\n    for i in inp:\n        if i != 0:\n            s += i\n        else:\n            return s", "def house_numbers_sum(inp):\n    for i in range(len(inp)):\n      if inp[i]==0:\n        new=inp[:i]\n        return sum(new)\n", "def house_numbers_sum(inp):\n    if 0 not in inp:\n        return sum(inp)\n    else:\n        return sum(inp[:inp.index(0)])", "def house_numbers_sum(inp):\n    hardstop = inp.index(0)\n\n    house_sum = 0\n\n    for i in range(0, hardstop):\n        house_sum += inp[i]\n    \n    return house_sum", "from itertools import takewhile\n\ndef house_numbers_sum(arr):\n    return sum(takewhile(lambda x: x != 0, arr))", "def house_numbers_sum(inp):\n    for idk, i in enumerate(inp): \n        if i == 0:\n            return sum(inp[:idk])", "def house_numbers_sum(inp):\n    indx = inp.index(0)\n    return sum(inp[:indx])", "def house_numbers_sum(inp):\n    indx=inp.index(0)\n    return sum(inp)-sum(inp[indx:])", "def house_numbers_sum(inp):\n    suma = 0\n    \n    for n in inp:\n        if n == 0:\n            break\n        \n        suma += n\n        \n    return suma", "def house_numbers_sum(inp):\n    sum = 0\n    for x in inp:\n        if x != 0:\n            sum += x\n        else:\n            break\n    return sum"]