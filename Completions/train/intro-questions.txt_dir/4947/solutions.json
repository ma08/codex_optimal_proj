["def sel_number(n, d):\n    cnt = 0\n    for a in range(12, n + 1):\n        nums = list(map(int, str(a)))\n        if nums == sorted(set(nums)) and \\\n                all(c - b <= d for b, c in zip(nums[:-1], nums[1:])):\n            cnt += 1\n    return cnt\n", "sel_number=lambda n,d:sum(all(d>=int(b)-int(a)>0for a,b in zip(`i`,`i`[1:]))for i in range(10,n+1))", "from itertools import tee, islice\n\n# Didn't think it would work but brute force it is\ndef sel_number(n, d):\n    def okay(x):\n        it1, it2 = tee(map(int, str(x)))\n        return all(0 < y-x <= d for x,y in zip(it1, islice(it2, 1, None)))\n    return sum(map(okay, range(10, n+1)))", "sel_number = lambda n, d:len([x for x in range(10,n+1) if sorted(list(set(list(str(x)))))==list(str(x)) and all((int(str(x)[i])-int(str(x)[i-1]))<=d for i in range(1,len(str(x))))])", "from itertools import izip as zip, islice\n\ndef sel_number(n, d):\n    def ok(x):\n        s = map(int, str(x))\n        return all(0 < b-a <= d for a, b in zip(s, islice(s, 1, None)))\n    return sum(ok(i) for i in range(12, n+1))", "def good_digits(m, d):\n    s = str(m)\n    res = []\n    if len(s) < 2:\n        return False\n    i = 0\n    while i < len(s) - 1:\n        if s[i] >= s[i + 1]:\n            return False\n        if int(s[i + 1]) - int(s[i]) > d:\n            return False\n        i += 1\n    for c in s:\n        if c in res:\n            return False\n        res.append(c)\n    return True\ndef sel_number(n, d):\n    cnt = 0\n    i = 0\n    while i <= n:\n        if good_digits(i, d):\n            cnt += 1\n        i += 1\n    return cnt", "def sel_number(n, d):\n    # Longer, broken-up version\n    iterator_count = lambda it: sum(1 for _ in it)\n    check_constraints_1_and_3 = lambda a: len(set(a)) == len(a) > 1\n    check_constraints_2_and_4 = lambda a: all(int(y) - int(x) <= d and y > x for x, y in zip(a[:-1], a[1:]))\n    numbers_iterator = map(str, xrange(n + 1))\n\n    numbers_iterator = filter(check_constraints_1_and_3, numbers_iterator)\n    numbers_iterator = filter(check_constraints_2_and_4, numbers_iterator)\n    return iterator_count(numbers_iterator)", "sel_number = lambda n, d: sum(1 for a in map(str, xrange(n+1)) if len(set(a)) == len(a) > 1 and all(int(b) - int(a) <= d and b > a for a, b in zip(a[:-1], a[1:])))", "def sel_number(n, d):\n    count = 0\n    # Check for any invalid pairs\n    def any_invalid(digits):\n        # Pair up elements of a sequence 0,1 then 1,2 then 2,3 etc.\n        for a, b in zip(digits, digits[1:]):\n            # Compare each pair of digits in a sequence\n            if a >= b or b - a > d:\n                return True\n        return False\n    \n    for i in xrange(10, n + 1):\n        if any_invalid([int(c) for c in str(i)]):\n            continue\n        count += 1\n    return count", "def check(n,d):\n    s = str(n)\n    if ''.join(sorted(s)) != s:\n        return False\n    z = s[0]\n    for i in xrange(1,len(s)):\n        x = s[i]\n        if x == z or int(x) - int(z) > d:return False\n        z = x\n    return True\n\ndef sel_number(n, d):\n    total = 0\n    for i in xrange(12,n+1):\n        if check(i,d):total += 1\n    return total"]