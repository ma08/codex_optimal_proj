["def powers_of_two(n):\n    return [2**x for x in range(n+1)]", "def powers_of_two(n):\n    return [1<<x for x in range(n + 1)]", "def powers_of_two(n): return [ 2 ** i for i in range(n+1) ]", "def powers_of_two(n):\n    a = []\n    for i in range(0, n + 1):\n        a.append(2 ** i)    \n    return a", "from itertools import accumulate, repeat, chain, islice\nfrom operator import mul\n\ngen, memo = accumulate(chain((1,), repeat(2)), mul), []\n\ndef powers_of_two(n):\n    if len(memo) <= n:\n        memo.extend(islice(gen, n-len(memo)+1))\n    return memo[:n+1]", "def powers_of_two(n):\n    abc = []\n    for i in range(0, n + 1):\n        ghi = 2 ** i\n        abc.append(ghi)\n    return abc", "def powers_of_two(n):\n    arr = []\n    for i in range(n + 1):\n        arr.append(2 ** i)\n    return arr", "powers_of_two = lambda n: [ 2**i for i in range(0,n+1) ]", "def powers_of_two(n):\n    return list(map(lambda n: 2**n, [i for i in range(n+1)]))", "def powers_of_two(n):\n  #definelist\n  return([2**x for x in range(0,n+1)])", "from typing import List\n\ndef powers_of_two(n: int) -> List[int]:\n    \"\"\" Return a list of all the powers of 2 with the exponent ranging from 0 to n. \"\"\"\n    return [2 ** _ for _ in range(n + 1)]", "def powers_of_two(n):\n    s=1\n    a=[1]\n    for i in range(n):\n        s*=2\n        a.append(s)\n    return(a)", "def powers_of_two(n):\n    pL = [1]\n    for i in range(n):\n        pL.append(pL[i]*2)\n    return pL", "from itertools import count\n\ndef f():\n    c = count()\n    while True: yield 2 ** next(c)\n\ndef powers_of_two(n):\n    iter = f()\n    r = [next(iter) for x in range(n + 1)]\n    return r", "powers_of_two=lambda n:[1]if n==0 else powers_of_two(n-1)+[2**n]\n", "def powers_of_two(n):\n    if(n == 0):\n        return [1]\n    return powers_of_two(n-1) + [2**n]", "def powers_of_two(n):\n    a = []\n    for i in range(n+1):\n        a.append(2**i)\n    return a", "def powers_of_two(n):\n    x = []\n    \n    while n > -1:\n        y = 2 ** n\n        x.append(y)\n                \n        n = n - 1\n    \n    return x[::-1]", "def powers_of_two(n):\n    a = 0\n    arr = []\n    while a <= n:\n        arr.append(2 ** a)\n        a += 1\n    return arr", "def powers_of_two(n):\n    list_n = []\n    i = 0\n    while i != n + 1:\n        list_n.append(2 ** i)\n        i += 1   \n    return list_n", "def powers_of_two(n):\n    return [2 ** l for l in range(n + 1)]", "def powers_of_two(n):\n    p = 1\n    l = [ 1 ]\n    for x in range(1, n+1):\n        p *= 2;\n        l.append(p)\n    return l\n", "def powers_of_two(n):\n    s = []\n    for el in range(0, n + 1):\n        s.append(2**el)\n    return s", "def powers_of_two(n):\n    arr = []\n    for el in range(n+1):\n        arr.append(2**el)\n    return arr", "def powers_of_two(N):\n    return [2**n for n in range(N+1)]", "def powers_of_two(n):\n    emptylist = []\n    for num in list(range(n+1)):\n        x = 2**num\n        emptylist.append(x)\n    return emptylist", "def powers_of_two(n):\n    return [2**n for n in range(0+(n+1))]", "from typing import List\n\ndef powers_of_two(n: int) -> List[int]:\n    value = 1\n    accu = [value]\n    for i in range(n):\n        value <<= 1\n        accu.append(value)\n    return accu", "def powers_of_two(n):\n    ll = []\n    \n    for i in range(n + 1):\n        ll.append(2 ** i)\n        \n    return ll", "def powers_of_two(n):\n    arr = []\n    for k in range(n+1):\n        arr.append(2**k)\n    return arr", "def powers_of_two(n):\n    result = [1]\n    for i in range(1, n + 1):\n        result.append(2**i)\n        \n    return result", "def powers_of_two(n):\n    i=0\n    list=[1]\n    for i in range(1,n+1):\n        list += [2**i]\n    return list", "def powers_of_two(n):\n    arr = list(range(n+1))\n    return [2**el for el in arr]", "def powers_of_two(n):\n    return [2**x for x in range(n+1)]\n    # returns an array of powers of two in the range from 0 to n\n", "def powers_of_two(n):\n    v=[];\n    i=0;\n    while i <= n:\n        v.append(2**i);\n        i+=1;\n    return v;", "def powers_of_two(n):\n    if n == 0:\n        return [1]\n    else: \n        result = []\n        for x in range(n+1):\n            result.append(2**x)\n        return result", "def powers_of_two(n):\n    i = 0\n    s = 1\n    array = []\n    while i <= n:\n        array.append(s)  \n        i += 1\n        s = (2 ** i)\n    return array", "def powers_of_two(n):\n    lst=[2**n for n in range(n+1)]\n    return lst", "def powers_of_two(n):\n    x = []\n    for y in range(n+1):\n        x.append(2**y)\n    return x", "def powers_of_two(n):\n    a = []\n    b = 1\n    for i in range(0, n + 1):\n        a.append(b)\n        b = b * 2\n    return a\n", "def powers_of_two(n):\n    a=2\n    b=[]\n    for i in range(n+1):\n        b.append(2**i)\n    return b", "def powers_of_two(n):\n    if n==0:\n        return [1]\n    num = 1\n    my_list = [num]\n    for i in range(1, (n+1)):\n        num = num*2\n        my_list.append(num)\n    return my_list", "def powers_of_two(n):\n    new=[]\n    for item in range(n+1):\n        new.append(2**item)\n    return new", "def powers_of_two(n):\n    emptylist = []\n    for i in range(n+1):\n        x = 2**i\n        emptylist.append(x)\n    return emptylist", "def powers_of_two(n):\n    return  [1] + [2**(x-1) for x in range(2,n+2)]", "def powers_of_two(n):\n    ls=[]\n    i=0\n    while i<=n:\n        ls.append(2**i)\n        i=i+1\n    return ls", "def powers_of_two(n):\n    return list(map(lambda y: 2**y , range(n+1)))", "def powers_of_two(n):\n    new_list = list(range(0, n+1))\n    return [ 2 ** x for x in new_list ]", "def powers_of_two(n):\n    l = list()\n    for i in range(n+1):\n        l.append(2**i)\n    return l", "import unittest\n\n\ndef powers_of_two(n):\n\n    return [2 ** i for i in range(n + 1)]\n    \n    \nclass TestPowerOfTwo(unittest.TestCase):\n    def test_power_of_two(self):\n        n = 4\n        actual = power_of_two(n)\n        self.assertEqual(actual, [1, 2, 4, 8, 16])\n", "def powers_of_two(n):\n    result = []\n    a = 0\n    while a < n+1:\n        b=2**a\n        result.append(b)\n        a = a+1\n    return result", "def powers_of_two(n):\n    lst = []\n    x = 0\n         \n    for i in range(0, n + 1):\n            x = 2 ** i\n            lst.append(x)\n    return lst", "def powers_of_two(n):\n    power = n\n    square_list = [1]\n    for i in range(1,n+1):\n        square_list.append(2 ** i)\n    return square_list", "def powers_of_two(n):\n    \n    final = []\n    for i in range(n+1):\n        final.append(2**i)\n    return final\n    \n", "def powers_of_two(n):\n    return [2 ** el for el in range(n + 1)]", "def powers_of_two(n):\n    result = []\n    i = 0\n    while i < n+1:\n        num = 2 ** i\n        i += 1\n        result.append(num)\n    return result", "def powers_of_two(n):\n    powof2 = []\n    num = 1\n    for i in range(n+1):\n        powof2.append(num)\n        num *= 2\n    return powof2", "def powers_of_two(n):\n    newN = []\n    num = 0\n    while num <= n:\n        newN.append(2**num)\n        num += 1\n    return newN", "def powers_of_two(n):\n    newN = []\n    num = 0\n    while num <= n:\n        newN += [2**num]\n        num += 1\n    return newN", "def powers_of_two(n):\n    result = []\n    \n    for i in range(n + 1):\n        result.append(2 ** i)\n        \n    return result\n    \n# powers_of_two = lambda n: list(map(lambda i: 2 ** i, list(range(n + 1))));\n", "def powers_of_two(n):\n    tab=[]\n    for x in range(n+1):\n        a=2**x\n        tab.append(a)\n    return tab", "def powers_of_two(n):\n    new_arr = []\n    for i in range(n+1):\n        new_arr.append(2 ** i)\n    return new_arr", "def powers_of_two(n):\n    return [2 ** power for power in range(0, n + 1)]", "def powers_of_two(n):\n    a=[]\n    for i in range(n+1):\n        b=2**i\n        a.append(b)\n    return a", "def powers_of_two(n):\n    return list(2**num for num in list(range(0, n+1)))", "def powers_of_two(n):\n    output = []\n    for i in range(0,n+1):\n        output.append(2**i)\n    return output", "def powers_of_two(n):\n    return [pow(2, exp) for exp in range(n + 1)]", "def powers_of_two(n):\n    if n == 0 : return [1]\n    accum_array = []\n    for i in range(n+1):\n        if (i == 0):\n            accum_array.append(i+1)\n        else:\n            accum_array.append(accum_array[-1] * 2)\n    return accum_array", "def powers_of_two(n):\n    lst=[2**i for i in range(0,n+1)]\n    return lst", "powers_of_two = lambda n: [1 << k for k in range(n + 1)]", "from math import pow\n\ndef powers_of_two(n):\n    nums = []\n    for exp in range(0, n+1):\n       nums.append(int(pow(2, exp)))\n    return nums", "\ndef powers_of_two(n):\n    return list(map(lambda x: 2**(x-1), list(range(1, n+2))))", "def powers_of_two(n):\n    l = []\n    i = 0\n    while i <= n:\n        l.append(2**i)\n        if i <=n:\n            i += 1\n    return l", "def powers_of_two(n):\n    x = 0\n    ans =[]\n    while x <= n:  \n        a=2**x \n        x+=1\n        ans.append(a)\n    return ans\n    \n    \n    \n    \n    \n    #n = n ** 2 \n    #return range [ x , n, n **2 ]\n", "def powers_of_two(n):\n    array1 = []\n    for i in range(n + 1):\n        array1.append(2 ** i)\n    return array1", "def powers_of_two(n):\n    x = [1]\n    if n == 0:\n        return x\n    else:\n          for i in range(1,n+1):\n              x.append(2**i)\n    return x", "def powers_of_two(n):  \n    power = 2 \n    doubler = [1] \n    while n > 0:\n        doubler.append(power) \n        n -= 1 \n        power *= 2 \n    return doubler", "def powers_of_two(n):\n    a = [1]\n    if n == 0:\n        return a\n    else:\n        for i in range(1,n+1):\n            a.append(2**i)  \n    return a", "def powers_of_two(n):\n    num1 = 0\n    list = []\n    for x in range(n+1):\n        list.append(pow(2,x))\n    return list", "def powers_of_two(n):\n    return [2**i for i in list(range(0,n+1))]\n        \n \n", "def powers_of_two(n):\n    numbers=[]\n    i = 0\n    for i in range(0, n+1):\n       numbers.append(2**i)\n       if i == n:\n            return(numbers)", "def powers_of_two(n):\n  num = n\n  twopower = 2\n  doubles = [1]\n\n  while num > 0:\n    doubles.append(twopower)\n    num -= 1\n    twopower *= 2\n\n  return doubles", "def powers_of_two(n):\n    num = []\n    for i in range(0, n + 1):\n        num.append(2 ** i)    \n    return num", "def powers_of_two(n):\n    last_list=[]\n    for i in range(n+1):\n        last_list.append(2**i)\n    return last_list", "from math import pow\n\ndef powers_of_two(n):\n    return [pow(2, i-1) for i in list(range(1, n+2))]", "def powers_of_two(n):\n    lst = []\n    for i in range(0,n+1):\n        lst.append(i)\n    return list(map(lambda x: 2**x, lst))", "def powers_of_two(n):\n    return [2**value for value in range(n+1)]", "def powers_of_two(n):\n    x=[]\n    for i in range(0,n+1):\n        x.append(2**i)\n        \n    return x", "import math\ndef powers_of_two(n):\n    rez = []\n    i = 0\n    while i <= n :\n        rez.append(math.pow(2,i))\n        i += 1\n        \n    return rez", "def powers_of_two(n):\n    new_n = []\n    for i in range(n+1):\n        new_n.append( 2**i )\n    return new_n", "def powers_of_two(n):\n    lst = [];\n    for num in range(0,n+1):\n      lst.append(2 ** num);\n    return lst;\n", "def powers_of_two(n):\n    p = 0 \n    ans = []\n    while p <= n: \n        i = 2**p \n        p += 1 \n        ans.append(i)\n    return ans ", "def powers_of_two(n):\n    return [2 ** i if i != 0 else 1 for i in range(0, n+1)]", "def powers_of_two(n):\n    d,a=[],1\n    for i in range(n+1):\n        d.append(a)\n        a*=2\n    return d", "def powers_of_two(n):\n    power=[]\n    for i in range(0,n+1):\n      power.append(2**i)\n    return power\n", "def powers_of_two(n):\n    array = []\n    for i in range(0,n+1):\n        print(2 ** i)\n        array.append(2 ** i)\n    return array", "def powers_of_two(maxi):\n    return [2 ** n for n in range(maxi + 1)]", "def powers_of_two(n: int):\n    return  [ 2**i for i in range(0, n + 1)]\n"]