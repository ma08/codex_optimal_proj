["from collections import Counter as C\ndef ball_probability(b):\n      d, n, p = C(b[0]), len(b[0]), 1\n      for i in b[1]:\n          p *= d.get(i,0)/n\n          n -= b[2]^1\n          d[i] -= b[2]^1\n      return round(p,3)", "def ball_probability(balls):\n    colors, (first, second), replaced = balls\n    first_choice = colors.count(first) / len(colors)\n    second_choice = colors.count(second) / len(colors) if replaced else (colors.count(second) - 1 * (first == second)) / (len(colors) - 1)\n    return round(first_choice * second_choice, 3)", "def ball_probability(balls):\n    size = len(balls[0])\n    if not balls[2]:\n        p1 = balls[0].count(balls[1][0])\n        p2 = p1 - 1 if balls[1][0] == balls[1][1] else balls[0].count(balls[1][1])\n        return round((p1 * p2) / (size * (size - 1)), 3)\n    return round((balls[0].count(balls[1][0]) * balls[0].count(balls[1][1])) / size**2, 3)", "def ball_probability(balls):\n  l, selection, replaced = balls\n  a, b = selection\n  prob = (l.count(a) * (l.count(b) + (0 if replaced or (a != b) else -1))) / (len(l) * (len(l) + (0 if replaced else -1)))\n  \n  return round(prob, 3)", "def ball_probability(balls):\n    bag, draws, replaced = balls\n    return round(bag.count(draws[0]) / len(bag) * \\\n        (bag.count(draws[1]) - (not replaced) * (draws[0] == draws[1])) / \\\n            (len(bag) - (not replaced)), 3)", "def ball_probability(balls):\n    bag,t,r=balls\n    a,b=(bag.count(i) for i in t)\n    m=len(bag)\n    return round(1.0*a*(b if r or t[0]!=t[1] else b-1)/m/(m if r else m-1),3)", "from collections import Counter\ndef ball_probability(balls):\n    c = Counter(balls[0])\n    b1, b2 = balls[1]\n    if balls[2]:\n        return round(c[b1]/len(balls[0]) * c[b2]/len(balls[0]), 3)\n    else:\n        return round(c[b1]/len(balls[0]) * (c[b2]-1 if b1==b2 else c[b2])/(len(balls[0]) - 1), 3)", "def ball_probability(balls):\n    balls, draw, repl = balls\n    b1, l1 = balls.count(draw[0]), len(balls)\n    if b1 == 0: return 0\n    b2 = balls.count(draw[1]) if draw[0] != draw[1] else b1 + repl - 1\n    l2 = l1 + repl - 1\n    return round(b1 / l1 * b2 / l2, 3)", "from collections import Counter\n\ndef ball_probability(balls):\n    bag, (call1, call2), replaced = balls\n    bag, total = Counter(bag), len(bag)\n\n    A = bag[call1] / total\n\n    if not replaced:\n        bag[call1] -= 1\n        total -= 1\n\n    B = bag[call2] / total\n    return round(A * B, 3)", "from collections import Counter\n\ndef ball_probability(balls):\n    bag, (call1, call2), replaced = balls\n    bag = Counter(bag)\n    total = sum(bag.values())\n\n    A = bag[call1] / total\n    \n    if not replaced:\n        bag[call1] -= 1\n        total -= 1\n\n    B = bag[call2] / total\n    \n    return round(A * B, 3)"]