["def descriptions(arr):\n    return 2**sum(a+1==b for a,b in zip(arr,arr[1:]))", "\ndef pair_apply(a, fn): \n    \"\"\"\n    Apply a funtion to each pair of consecutive \n    values in the array and return the resultant array\n    \"\"\"\n    return [fn(x, y) for x, y in zip(a, a[1:])]\n\ndef run_length_encode(a):\n    \"\"\"Run length encode the given array\"\"\"\n    a = [(x, 1) for x in a]\n    i = 0\n    while i < len(a) - 1:\n        if a[i][0] == a[i + 1][0]:\n            a[i] = (a[i][0], a[i][1] + 1)\n            del a[i + 1]\n        else:\n            i += 1\n    return a\n\ndef descriptions(arr):\n    \"\"\"\n    Caluculate number of possible range collapse \n    permutations for givven array\n    \"\"\"\n    deltas = pair_apply(arr, lambda x, y: y - x)\n    rle_deltas = run_length_encode(deltas)\n    result = 1\n    for delta, count in rle_deltas:\n        if delta == 1:\n            result *= 2 ** count\n    return result\n", "def descriptions(arr):\n  return 2**len([v for n,v in enumerate(arr) if v==arr[n-1]+1])", "descriptions=lambda l:1<<sum(b-a==1for a,b in zip(l,l[1:]))", "from math import factorial\n\n\ndef binomial(m, n):\n    return factorial(n) / factorial(m) / factorial(n-m)\n\n\ndef descriptions(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            count += 1\n    return 2**count\n", "def descriptions(arr):\n    r, prev, n = 1, arr[0], 1\n    for x in arr[1:]:\n        if x != prev + 1:\n            r *= 2 ** (n - 1)\n            n = 0\n        prev = x\n        n += 1\n    return r * 2 ** (n - 1)\n", "def descriptions(arr):\n    return 2**sum(j-i==1 for i,j in zip(arr,arr[1:]))", "from functools import reduce\nfrom operator import mul\ndef descriptions(arr):\n    r=[]\n    seq=0\n    for x,y in zip(arr[:-1],arr[1:]):\n        if y-x==1:\n            seq+=1\n        else:\n            if seq>0:\n                r.append(seq+1)\n                seq=0\n    if seq>0:\n        r.append(seq+1)\n    return reduce(mul,[2**(x-1) for x in r]) if r else 1", "descriptions=lambda arr:2**sum(arr[i]+1==arr[i+1] for i in range(len(arr)-1))", "def descriptions(arr):\n    return 2**sum(x+1 == y for x,y in zip(arr, arr[1:]))"]