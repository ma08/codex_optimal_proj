["def order_weight(_str):\n    return ' '.join(sorted(sorted(_str.split(' ')), key=lambda x: sum(int(c) for c in x)))", "def sum_string(s):\n    sum = 0\n    for digit in s:\n        sum += int(digit)\n    return sum\n\ndef order_weight(strng):\n    # your code\n    initial_list = sorted(strng.split())\n    result = \" \".join(sorted(initial_list, key=sum_string))\n    \n    return result", "def weight_key(s):\n    return (sum(int(c) for c in s), s)\ndef order_weight(s):\n    return ' '.join(sorted(s.split(' '), key=weight_key))", "def order_weight(strng):\n    return \" \".join( sorted(strng.split(), key=lambda x: (sum(int(d) for d in x) , x)  ) )", "order_weight = lambda s: ' '.join(sorted(sorted(s.split(' ')), key=lambda i: sum(map(int, i))))", "def order_weight(s):\n    return ' '.join(sorted(s.split(), key=lambda x: (sum(map(int, x)), x)))", "def order_weight(string):\n    return ' '.join(c[1] for c in sorted((sum(int(b) for b in a), a)\n                                         for a in string.split()))\n", "def order_weight(strng):\n    nums = sorted(strng.split())\n    weights = [sum(map(int, n)) for n in nums]\n    res = [n for w, n in sorted(zip(weights, nums))]\n    return ' '.join(res)", "def order_weight(strng):\n    return \" \".join(sorted(strng.split(' '), key=lambda s: (sum([int(i) for i in s]), s)))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split()), key=lambda w: sum([int(c) for c in w])))", "import operator\nfrom functools import reduce \ndef order_weight(strng):\n    ans = []\n    d = {}\n    members = strng.split()\n    for weight in members:\n        sum_weight = 0\n        for digit in weight:\n            sum_weight += int(digit)\n        if d.get(sum_weight) != None:\n            d[sum_weight].append(weight)\n        else:\n            d[sum_weight] = [weight]\n    li = sorted(list(d.items()), key = lambda el: el[0])\n    for pair in li:\n        if len(pair[1]) > 1:\n            for mean in sorted(pair[1]):\n                ans.append(str(mean))\n        else:\n            ans.append(str(pair[1][0]))\n    return ' '.join(ans)\n", "def order_weight(s):\n    return \" \".join(sorted(s.split(), key=lambda x: (sum(int(y) for y in x), x)))", "def order_weight(string):\n    weights = string.split()\n    return ' '.join(sorted(weights, key=lambda w: (sum(int(n) for n in w), w)))", "def order_weight(strng):\n    l=list(strng.split())\n    l=sorted(l)\n    l=sorted(l, key=lambda x:sum(int(n) for n in str(x)))\n    return \" \".join(l)", "def order_weight(s):\n    return ' '.join(sorted(sorted(s.split()), key=lambda x: sum(int(i) for i in x)))", "order_weight=lambda s:' '.join(sorted(s.split(),key=lambda s:(sum(map(int,s)),s)))", "def order_weight(strng):\n    return ' '.join(sorted(strng.split(' '), \n        key=lambda s: (sum([int(a) for a in s]), s)))", "def get_digits_sum(number):\n    return sum([int(sign) for sign in number if sign.isdigit()])\n    \ndef custom_sorting(numbers):\n    values = [(get_digits_sum(number), number) for number in numbers]\n    return [value[1] for value in sorted(values)]\n\ndef order_weight(strng):\n    return \" \".join(custom_sorting(strng.strip().split(\" \")))", "def order_weight(strng):\n    return ' '.join([a[1] for a in sorted([(sum(int(y) for y in x), x) for x in strng.split(' ')])])", "def order_weight(strng):\n    nums = strng.split()\n    l = []\n    for n in nums:\n        s = sum(list(int(i) for i in n))\n        l += [[s,n]]\n    l.sort()\n    return ' '.join([i[-1] for i in l])", "def order_weight(s):\n    func = lambda x: sum(map(int, x))\n    return ' '.join(sorted(s.split(), key=lambda x: (func(x), x)))", "def order_weight(string):\n    s = sorted([(sum([int(n) for n in num.strip()]), num.strip()) for num in string.split(\" \")])\n    return ' '.join(map(lambda t: t[1], s))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split()), key=lambda s: sum([int(x) for x in s])))", "def order_weight(strng):\n    my_list = sorted([int(i) for i in strng.split()], key=lambda x: str(x))\n    sorted_int_list = sorted(my_list, key=lambda x: sum(int(d) for d in str(x)))\n    return ' '.join(map(str, sorted_int_list))", "def order_weight(strng):\n    res = strng.split(' ')\n    list = []\n    for x in res:\n        a = 0\n        res2 = [z for z in x]\n        for y in res2:\n            a += int(y)\n        list.append(a)\n    answer = [m for n,m in sorted(zip(list,res))]\n    return ' '.join(answer)\n    # your code\n", "def order_weight(strng):\n    if strng==\"\":\n        return strng\n    else:\n        lss=strng.split()\n        new_ls=[]\n        dic={}\n        value=\"\"    \n        for elements in lss:\n            new=sum(float(element) for element in elements) \n            if new in new_ls:\n                  while new in new_ls:\n                      new=float(new)\n                      new+=0.001\n                  new_ls.append(new)\n                  dic[new]=elements\n            else:\n                new_ls.append(new)\n                dic[new]=elements\n            new_ls.sort() \n        sl=[dic.get(new_ls[m]) for m in range(len(new_ls))]\n        for m in range(len(new_ls)):\n            for n in range(len(new_ls)):\n                if int(new_ls[m])==int(new_ls[n]) and m!=n:\n                    if dic.get(new_ls[m])<dic.get(new_ls[n]) and m>n:\n                        t=new_ls[m]\n                        new_ls[m]=new_ls[n]\n                        new_ls[n]=t        \n        for i in range(len(new_ls)-1):\n            value+=\"\".join(dic.get(new_ls[i]))\n            value+=\" \"\n        value+=\"\".join(dic.get(new_ls[-1]))\n        return value", "def order_weight(strng):\n    return ' '.join(sorted(sorted(filter(lambda x: not not x, strng.split(' '))),key=lambda x:sum(map(int,x))))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split(' ')), key = lambda s : sum(int(c) for c in s)))", "def order_weight(strng):\n    strng = [list(map(int, i)) for i in strng.split(' ')]\n    strng = sorted(sorted(strng), key=lambda num: sum(num))\n    strng = ' '.join([''.join(map(str, i)) for i in strng])\n    return strng", "def order_weight(strng):\n    key = lambda s: (sum((int(d) for d in s)), s)\n    return ' '.join(sorted(strng.split(), key=key))\n\n", "def order_weight(strng):\n    nums = sorted(sorted(strng.split(' ')),key=lambda x: sum([int(i) for i in x]))\n    return \" \".join(nums)\n", "def order_weight(strng):\n    st_list=strng.split()\n    return ' '.join(sorted(st_list,key=lambda x:(sum(int(y) for y in x),x)))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split()),key=lambda s:sum(map(int,list(s)))))\n", "def order_weight(strng):\n    # your code\n    return \" \".join(sorted(strng.split(),key=lambda x: (sum(map(int,x)),str(x))))", "order_weight = lambda s: ' '.join(sorted(sorted(s.split()), key=lambda w: sum(map(int, w))))", "def order_weight(strng):\n    return \" \".join(sorted(strng.split(), key=lambda x: (sum(int(i) for i in str(x)), x)))", "def order_weight(strng):\n  return ' '.join(sorted(sorted(strng.split()), key=lambda num_str: sum(int(digit) for digit in num_str)))", "def order_weight(string):\n    return str(' '.join(sorted(sorted(string.split()), key = lambda x:sum(map(int, str(x))))))", "def sumStr(strng):\n    return sum( int(num) for num in strng )\n\ndef order_weight(strng):\n    strList = sorted( strng.split(' ') )\n    return ' '.join(sorted( strList, key = sumStr ))", "def order_weight(strng):\n\n    print(strng)\n    def sum_strng(some_string):\n        return sum(int(x) for x in some_string if x.isdigit())\n\n    original_string_array = strng.split(' ')\n\n    tuple_arr = []\n\n    def order(arr):\n        for i in arr:\n            tuple_arr.append((i,sum_strng(i)))\n\n    order(original_string_array)\n\n    tuple_arr.sort(key=lambda tup: tup[0])\n    tuple_arr.sort(key=lambda tup: tup[1])\n\n    return ' '.join([x[0] for x in tuple_arr])", "def order_weight(strng):\n    return ' '.join(sorted(strng.split(), key=lambda w: (sum(map(int, w)), w)))", "def order_weight(strng):\n    return \" \".join(sorted(strng.split(\" \"), key=lambda s:(sum([int(c) for c in s]), s)))", "def order_weight(string):\n    valueList = [sum([int(char) for char in num]) for num in string.split()]\n    return ' '.join([tup[1] for tup in sorted(zip(valueList,string.split()))])", "def order_weight(strng):\n    return ' '.join(sorted(strng.split(), key = lambda s: (sum(map(int, s)), s)))", "from functools import cmp_to_key\n\ndef weight_str_nb(strn):\n    return sum([int(d) for d in strn])\ndef comp(a, b):\n    cp = weight_str_nb(a) - weight_str_nb(b);\n    if (cp == 0):\n        if (a < b): \n            r = -1\n        else: \n            r = 1\n    else:\n        r = cp;\n    return r\ndef order_weight(strng):\n    return \" \".join(sorted(strng.split(), key=cmp_to_key(comp)))\n", "def order_weight(string):\n    string = string.split()\n    string = sorted(string)\n    string = sorted(string, key = f)\n    return ' '.join(string)\ndef f(n):\n    return sum(int(i) for i in n)\n", "def order_weight(string):\n    return ' '.join(sorted(string.split(), key= lambda s: (sum(int(i) for i in s), s)))", "def order_weight(strng):\n    s=strng.split()\n    s2=[]\n    s3=[]\n    order=[]\n    Out=[]\n    s4=\"\"\n    for i in range(len(s)):\n        s2.append(int(s[i]))\n        a=0\n        for j in range(len(s[i])):\n            a=a+s2[i]//(10**j)%10\n        s3.append(a) \n\n    for j in range(len(s3)-1):\n        for m in range(len(s3)-1):\n            buf=0\n            buf2=0\n            if (s3[m]>s3[m+1]):\n                buf=s3[m]\n                s3[m]=s3[m+1]\n                s3[m+1]=buf\n                buf2=s2[m]\n                s2[m]=s2[m+1]\n                s2[m+1]=buf2\n            else:\n                if (s3[m]==s3[m+1]):\n                    if str(s2[m])>str(s2[m+1]):\n                        buf2=s2[m]\n                        s2[m]=s2[m+1]\n                        s2[m+1]=buf2\n\n    for m in range(len(s2)):\n        s4=s4+str(s2[m])+\" \"\n    s5=\"\"\n    for j in range(len(s4)-1):\n        s5=s5+s4[j]\n    return s5\n", "def convert(x):return sum(map(int,x))\ndef GT(x,y): return convert(x) > convert(y)\ndef LT(x,y): return convert(x) < convert(y)\ndef EQ(x,y): return convert(x) == convert(y)\n\ndef qSort(xs):\n    \n    if len(xs) == 0: return []\n    \n    pivot, *xs = xs \n    \n    lower =        [x for x in xs if LT(x,pivot)] \n    eqs   = sorted([x for x in xs if EQ(x,pivot)] + [pivot])\n    upper =        [x for x in xs if GT(x,pivot)]\n    \n    return qSort(lower) + eqs + qSort(upper)\n    \ndef order_weight(xs):\n    return \" \".join(qSort(xs.split(\" \")))", "def order_weight(strng):\n    # your code\n    return ' '.join(sorted(sorted(strng.split()), key=lambda x: sum(int(a) for a in x), reverse=False))", "order_weight = lambda strng: ' '.join([x for _,x in sorted(zip([sum([int(j) for j in i]) for i in strng.split(' ')],strng.split(' ')))])", "def order_weight(strng):\n    return ' '.join(map(str, sorted(sorted(list(x for x in strng.split(\" \") if x), key=lambda x: str(x)), key=lambda x: sum(map(int, str(x))))))", "def order_weight(string):\n    return \" \".join(sorted(string.split(), key=lambda s: (sum(int(d) for d in list(s)), s)))", "def order_weight(s):\n    return' '.join(sorted(s.split(),key=lambda e:[sum(map(int,e)),e]))", "def sort_key(s):\n    return (sum(int(n) for n in list(s)), s)\n\ndef order_weight(strng):\n    return ' '.join(sorted(strng.split(), key = sort_key))", "def order_weight(strng):\n    if len(strng) > 1:\n        stg = strng.split()\n        k = []\n        for i in stg:\n            l = 0\n            for m in i:\n                l += int(m)\n            k.append(l)   \n        q = list(zip(k, stg))\n        q.sort(key=len, reverse=True) \n        p = sorted(q, key = lambda t: (t[0], t))\n        print(p)\n        v =  list(zip(*p))\n    #print(v[1])\n        return \" \".join(v[1])\n    else:\n        return strng\n          \n#def getsum(stg):\n#    k = []\n #   for i in stg:\n  #       l = 0\n   #     for m in i:\n  #          l += int(m)\n    #    k.append(l)\n#have this fns take a number as an input and output the sum of the digits\n            \n", "def order_weight(strng):\n    slw = [(sum(int(x) for x in str(weight)),weight) for weight in strng.split()]\n    return \" \".join(x[1] for x in sorted(slw))\n", "def order_weight(string):\n    return ' '.join(sorted(string.split(), key=lambda s:(sum(map(int, s)), s)))", "def order_weight(string):\n    return ' '.join(sorted(string.split(), key=lambda x: (sum(int(i) for i in x), x)))\n", "def order_weight(strng):\n    strng = \" \".join(sorted(strng.split()))\n    return \" \".join(sorted(strng.split(), key=lambda x: sum(map(int, list(x)))))", "def order_weight(strng):\n    return \" \".join(sorted(sorted([x for x in strng.split()]), key = lambda y: sum(map(int,y))))", "def order_weight(st):\n    res, l =[], st.split(' ')\n    d = {x : sum(map(int, list(l[x]))) for x in range(len(l))}\n    print(d)\n    for x in sorted(set(d.values())):\n        res.extend(sorted([l[i] for i in d.keys() if d[i] == x]))\n    return ' '.join(res)", "def order_weight(strng):\n    strng_list = strng.split(\" \")\n    lst = list(zip(map(lambda x: sum(int(i) for i in x),strng_list),strng_list))\n    stl = list(map(lambda x: x[1],sorted(lst,key=lambda x: (x[0],x[1]))))\n    return \" \".join(s for s in stl)", "order_weight = lambda numbers: ' '.join(sorted(numbers.split(), key=lambda number: (sum(int(num) for num in number), number)))", "def order_weight(string):\n    strng=string.split()\n    for i in range(0,len(strng)):\n        for j in range(0,len(strng)):\n            #print(strng[i],strng[j])\n            if ( weight(strng[i]) < weight(strng[j]) ):\n                pass\n            elif ( weight(strng[i]) == weight(strng[j]) ):\n                if(strng[i] <= strng[j]):\n                    pass\n                else:\n                    print (strng[i],strng[j])\n                    strng[i],strng[j]=strng[j],strng[i]\n            else:\n                print (strng[i],strng[j])\n                strng[i],strng[j]=strng[j],strng[i]\n    strng.reverse()\n    final=\" \".join(strng)\n    return final\n    \ndef weight(st):\n    weight=0\n    for i in range(len(st)):\n        weight=weight+int(st[i])\n    return weight", "def order_weight(s):\n    return ' '.join(sorted(s.split(), key=lambda i: (sum(map(int, i)), i)))", "def order_weight(string):\n    # your code\n    return ' '.join(sorted(string.split(), key=lambda x: (sum([int(s) for s in x]), x), reverse=False))", "def order_weight(strng):\n    return ' '.join(sorted(strng.split(), key=lambda n: (sum(map(int, n)), n)))", "def digit_sum(string):\n return sum([int(x) for x in string])\n \ndef order_weight(string):\n weights = sorted(string.split())\n return \" \".join(sorted(weights, key=digit_sum))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split()), key=lambda weight: sum(map(int, weight))))", "def order_weight(strng):\n    return ' '.join(sorted(sorted(strng.split()),key = lambda x: sum(int(y) for y in x)))\n", "def weight(s):\n    return sum(int(char) for char in s),s\n\ndef order_weight(string):\n    # your code\n    lst = string.split()\n    lst.sort(key=weight)\n    return ' '.join(lst)", "\ndef order_weight(strng):\n    # split \" \" into list\n    # iterate over word, iterate over character\n    # each word has total, total += int(char)\n    lis = strng.split(\" \")\n    c = []\n    for word in lis:\n        weight = 0\n        for num in word:\n            weight += int(num)\n        x = {}\n        x['number'] = word\n        x['weight'] = weight\n        c.append(x)\n        #print(c)\n    # sort list of dict by value\n    c.sort(key=lambda x: x['number'])\n    c.sort(key=lambda x: x['weight'])\n    # iterate through c and return number of each object\n    return ' '.join(x['number'] for x in c)\n    print(order_weight(strng))", "def order_weight(strng):\n    cs = strng.strip().split()\n    ls = sorted(sorted(cs), key = cc)\n    return ' '.join(ls)\n    \ndef cc(a):\n    return sum(map(int,a))", "def getSum(n):\n    return sum([int(x) for x in n])\n\ndef order_weight(s):\n    return ' '.join(sorted(s.split(), key=lambda x: [getSum(x), x]))", "def sum_digits(a):\n    n = int(a)\n    r = 0\n    while n:\n        r, n = r + n % 10, n // 10\n    return r\n\ndef order_weight(strng):\n    strng_sorted = sorted(strng.split(), key = str.lower)\n    return ' '.join(sorted(strng_sorted, key = sum_digits))", "def order_weight(strng):\n    # your code\n    weight_list = strng.split()\n    faux_list = []\n    for weight in weight_list:\n        total = 0\n        for number in weight.strip():\n            total = total+int(number)\n        faux_weight, real_weight = total , weight\n        faux_list.append((faux_weight, real_weight))\n    \n    final_manipulated_list = []\n    for x,y in sorted(faux_list):\n        final_manipulated_list.append(y)\n    return \" \".join(final_manipulated_list)\n    \n            \n\n    \n        \n", "# pulled this from the top answer.  lambda passes a tuple to sorted.\ndef order_weight(strng):\n    return ' '.join(sorted(strng.split(), key=lambda x: (sum(int(c) for c in x), x)))\n", "def order_weight(strng):\n    weights = list()\n    for x in strng.split():\n        weights.append(sum([int(y) for y in x]))\n    weight_counts = list(zip(strng.split(),weights))\n    return ' '.join(\"{!s}\".format(key) for key,value in sorted(weight_counts, key=lambda t: t[::-1]))", "def sum_digits(num):\n    return sum([int(d) for d in num])\n    \ndef order_weight(string):\n    if string == '': return string\n    weights = [(sum_digits(num),num) for num in string.split()]\n    weights.sort()\n    answer = [weights[i][1] for i,_ in enumerate(weights)]\n    return ' '.join(answer)\n    \n\n    \n    \n    \n    \n\n#    if string == '': return string\n#    sum_digits = lambda x: sum([int(d) for d in x])\n#    return ' '.join(sorted(string.split(), key=sum_digits))\n", "def order_weight(strng):\n    # your code\n    def sorter(num):\n        return sum([int(digit) for digit in num])\n    \n    strng_nums = strng.strip().split()\n    strng_nums.sort()\n    strng_nums.sort(key=sorter)\n    \n    return ' '.join(strng_nums)", "def order_weight(strng):\n    strng_lst = sorted(strng.split())\n    weights =  [(weight, sum([int(digit) for digit in weight])) for weight in strng_lst]\n    sorted_weights = [result[0] for result in sorted(weights, key=lambda result: result[1])]\n    \n    return ' '.join(sorted_weights)", "def order_weight(strng):\n    sum_sort = lambda x: sum([int(n) for n in x])\n    return ' '.join(sorted(sorted(strng.split()), key=sum_sort))", "import functools\nimport operator\n\ndef order_weight(strng):\n    # your code\n    if strng == \"\":\n        return \"\"\n    else:\n        x = strng.split(\" \")\n        y = []\n        weighted_weights = dict()\n        for item in range(len(x)):\n            actualweight = x[item]\n            y.append(functools.reduce(operator.add, [int(actualweight[i]) for i in range(len(actualweight))])) \n            weighted_weights[x[item]] = y[item];\n        x = sorted(x)\n        listofweights = sorted(x, key = weighted_weights.get)\n        return ' '.join(listofweights)\n    \n    \n        \n", "def order_weight(strng):\n    codeList = []\n    counter = 0\n    finalString = ''\n    \n    wgList = strng.split(' ')\n    \n    for i in range(len(wgList)):\n        for j in range(len(wgList[i])):\n            counter = counter + int(wgList[i][j])\n        codeList.append(counter)\n        counter = 0\n\n    finalList = sorted(list(zip(codeList, wgList)))\n    \n    for i in range(len(finalList)):\n        finalString += finalList[i][1] + ' '\n    return finalString[:-1]\n", "def order_weight(strng):\n    numbers = [int(i) for i in strng.split()]\n    weights_list = [sum(map(int, str(number))) for number in numbers]\n    weights_list_sorted = sorted(weights_list)\n\n    weights = []\n    for number in numbers:\n        weight = sum(map(int, str(number)))\n        mylst = [number, weight]\n        weights.append(mylst)\n    \n    res_list = []\n    for lst in sorted(weights, key=lambda x: (x[1], str(x[0]))):\n        res_list.append(str(lst[0]))\n    \n    return \" \".join(res_list)\n", "def order_weight(strng):\n    numbers = [int(i) for i in strng.split()]\n\n    weights = []\n    for number in numbers:\n        weight = sum(map(int, str(number)))\n        mylst = [number, weight]\n        weights.append(mylst)\n    \n    res_list = []\n    for lst in sorted(weights, key=lambda x: (x[1], str(x[0]))):\n        res_list.append(str(lst[0]))\n    \n    return \" \".join(res_list)\n", "import operator\n\ndef order_weight(strng):\n    modified = [(sum(map(int, x)), x) for x in strng.split()]\n    return ' '.join(sort[1] for sort in sorted(modified, key=operator.itemgetter(0, 1)))", "def order_weight(strng):\n    strng = sorted(strng.split())\n    result = sorted(strng, key=lambda elem: sum([int(x) for x in elem]))\n    return ' '.join(result)", "def order_weight(strng):\n    result = 0\n    solution = []\n    numbers_list = [int(x) for x in strng.split()]\n    for x in numbers_list:\n        while x > 0:\n            result += x % 10\n            x = x // 10\n        solution.append(result)\n        result = 0\n    return ' '.join([x for _, x in sorted(zip(solution, [str(x) for x in numbers_list]))])\n", "def weight(s):\n    return sum([int(i) for i in s])\n\ndef order_weight(strng):\n    nums = strng.split()\n    return ' '.join(sorted(nums, key=lambda x: (weight(x), x)))\n", "def order_weight(strng):\n    wghts = strng.split()\n    srtd = sorted(wghts, key= lambda x: (get_weight(x), x))\n    return (' '.join(str(i) for i in srtd))\n\ndef get_weight(number):\n    return sum(int(digit) for digit in number)\n", "def order_weight(strng):\n    list2 = strng.split(' ')\n    weights = []\n    \n    for x in list2:\n        digits = list(x)\n        for i in range(len(digits)):\n            digits[i] = int(digits[i])\n        weights.append(sum(digits))\n    \n    weights, list2 = zip(*sorted(zip(weights, list2)))\n    return str(','.join(list2)).replace(',', ' ')", "from functools import cmp_to_key\n\ndef sum_digits(num):\n    return sum([int(d) for d in str(num)])\n\ndef sort_weights(w1, w2):\n    w1_total = sum_digits(w1)\n    w2_total = sum_digits(w2)\n    if w1_total == w2_total:\n        if str(w1) < str(w2):\n            return -1\n        return 1\n    else:\n        return w1_total - w2_total\n\ndef order_weight(strng):\n    if not strng:\n        return \"\"\n    weights = [int(x) for x in strng.split(\" \")]\n    sorted_weights = sorted(weights, key=cmp_to_key(sort_weights))\n    return \" \".join(map(str, sorted_weights))", "def order_weight(strng):\n    splitted = strng.split()\n    solution = \"\"\n    list = []\n    for item in splitted:\n        weight = 0\n        for digit in item:\n            weight += int(digit)\n            arr = [weight, item]\n        list.append(arr)\n    list.sort()\n    for item in list:\n        \n        solution += \" \" + item[1]\n    return solution[1:]"]