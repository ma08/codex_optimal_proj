["def invert(lst):\n    return [-x for x in lst]", "def invert(lst):\n    return list(map(lambda x: -x, lst));", "def invert(lst):\n    i = 0\n    inv = []\n    while i < len(lst):\n        inv.append(lst[i] * -1)\n        i += 1\n    return inv\n\n", "def invert(lst):\n   return [i*-1 for i in lst]", "def invert(lst):\n    return [ x * -1 for x in lst ]", "def invert(lst):\n    lst2=[]\n    for num in lst:\n        lst2.append(num*-1)\n    return lst2", "def invert(lst):\n    return [-i for i in lst]", "def invert(l): return [-n for n in l]", "invert = lambda lst: [-e for e in lst]", "invert = lambda x: [-i for i in x]", "def invert(lst):\n    return [] if lst == [] else [i*(-1) for i in lst]\n", "def invert(lst):\n    result = list()\n    for num in lst:\n        result.append(-num)\n    return result", "def invert(lst):\n    inverted = [-1 * item for item in lst]\n    return inverted", "def invert(x): return [-a for a in x]\n", "def invert(lst):\n    return [-n if n else n for n in lst]", "def invert(lst):\n    return list(map(lambda x: -x, lst)) if lst else []", "def invert(lst):\n    lst = [number * -1 for number in lst]\n    return lst", "def invert(lst):\n    for i in range(len(lst)):\n        lst[i] = -lst[i]\n    return lst", "def invert(lst):\n    return list(i * -1 for i in lst)", "def invert(list):\n    return [ -x for x in list]", "def invert(lst):\n    b = []\n    for x in lst:\n        b.append(x*-1)\n    return b", "def invert(lst):\n    return [-1*i for i in lst]", "def invert(lst):\n    if not lst: return []\n    final = []\n    i = 0\n    while i < len(lst):\n      final.append(-lst[i])\n      i+=1\n    return final", "def invert(lst):\n    return list(map(int.__neg__, lst))", "invert=lambda l: [-x for x in l]", "def invert(lst):\n    return [a * -1 for a in lst]\n", "invert=lambda l:[~i+1for i in l]", "import operator\n\ndef invert(lst):\n    return list(map(operator.neg, lst))", "import numpy\ndef invert(lst):\n    return list(numpy.array(lst) * -1)", "def invert(lst):\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            lst[i] = -abs(lst[i])\n        else:\n            lst[i] = abs(lst[i])\n            \n    return lst", "invert = lambda lst: [i - i * 2 for i in lst]", "def invert(lst):\n    neg = []\n    for i in lst:\n        i = neg.append(-i)\n    return neg", "def invert(lst):\n    return [(number - 2 * number) for number in lst]", "from numpy import array\nfrom typing import List\n\ndef invert(lst: List[int]) -> List[int]:\n    \"\"\" Get the additive inverse of each number in given list. \"\"\"\n    return list(-array(lst))", "def invert(lst):\n    for ind, elem in enumerate(lst):\n        lst[ind] = elem * (-1)\n    return lst", "def invert(lst):\n    lst1=[]\n    for x in range(len(lst)):\n        if(lst[x]>0):\n            y=-lst[x]\n            lst1.append(y)\n        elif(lst[x]<0):\n            y=-lst[x]\n            lst1.append(y)\n        elif(lst[x]==0):\n            lst1.append(0)\n    return lst1", "def invert(lst):\n    return list(map(lambda lst: -lst, lst))", "def invert(lst):\n    tableau = len(lst)*[0];\n    for loop in range (len(lst)):\n        tableau[loop] = -(lst[loop])\n    return tableau \n", "def invert(lst):\n    ls = []\n    for n in lst:\n        ls.append(n* -1)\n    return ls", "def invert(lst):\n\n  arr = []\n\n  for nums in lst:\n\n    \n\n    arr.append(nums * -1)\n\n\n\n\n\n  return arr  ", "def invert(lst):\n    newliste = []\n    for chiffre in lst:\n        newliste.append(int(chiffre)*-1)\n    return newliste", "def invert(lst):\n    li = []\n    for i in lst:\n        v = -1*i   \n        li.append(v)\n    return li", "def invert(lst):\n    lstn = []\n    for i in lst:\n        lstn.append(-i)\n    return lstn", "def invert(lst):\n    k = []\n    for x in lst:           \n        k.append(x * -1)\n    return (k)\n", "def invert(lst):\n    if not lst: return []\n    else: return [-num for num in lst]", "def invert(lst):\n    result = [-i for i in lst]\n    return result", "def invert(lst):\n    x=len(lst)\n    for i in range(x):\n        lst[i]=lst[i]*-1\n    return lst", "def invert(lst):\n    otput=[]\n    for i in lst:\n        otput.append(i*(-1))\n        \n    return otput", "def invert(lst):\n    inverted = []\n    for number in range(0, len(lst)):\n        inverted.append(-lst[number])  \n    return inverted", "def invert(lst=[]):\n    return [-x for x in lst]", "def invert(lst):\n    n = len(lst)\n    res = []\n    if(n == 0):\n        return res\n    else:\n        for item in lst:\n            res.append(-item)\n        return res", "def invert(lst):\n    result = [n * (-1) for n in lst]\n    return result", "def invert(lst):\n    list = []\n    for i in lst:\n        if i < 0:\n            list.append(abs(i))\n        else:\n            list.append(i *-1)\n    return list", "def invert(l):\n    return [abs(i) if i<0 else -i for i in l]", "def invert(lst):\n    # make empty list, append inverse values to new list\n    return [-x for x in lst]", "def invert(lst):\n    lst_invert = []\n    for i in lst:\n        inv = i * -1\n        lst_invert.append (inv)\n    return lst_invert", "def invert(lst):\n    return list(map(lambda el: -el, lst))", "def invert(lst):\n    return list(-el for el in lst)", "def invert(lst):\n    return list(abs(el) if el < 0 else -el for el in lst)", "def invert(lst):\n    if len(lst) > 0:\n        newlst = [i * -1 for i in lst]\n        return newlst\n    else:\n        return lst\n    pass", "def invert(lst):\n    inv = list()\n    \n    for i in lst:\n        inv.append(-1 * i)\n    \n    return inv", "def invert(lst):\n    ls=[]\n    for x in lst:\n        if x<0:\n            ls.append(-x)\n        else:\n            ls.append(-x)\n    return ls", "def invert(lst):\n    if lst == []:\n        return []\n    for i in range(len(lst)):\n        lst[i] = -(lst[i])\n    return lst", "def invert(lst):\n    def mult(n):\n        return n * -1\n    x = list(map(mult, lst))\n    return x\n        \n\n", "def invert(lst):\n    invList = []\n    for i in lst:\n        invList.append(i*-1)\n    return invList", "def invert(lst):\n    processed = []\n    for number in lst:\n        if number < 0:\n            processed.append(abs(number))\n        else:\n            processed.append(number * -1)\n    return processed", "def invert(lst):\n    x = [int(-x) for x in lst]\n    return x\n", "def invert(lst):\n    l=[]\n    for i in lst:\n        if(i>0):\n            l.append(-i)\n        else:\n            l.append(abs(i))\n    return l", "def invert(lst):\n    li = []\n    if len(lst) != 0:\n        for i in lst:\n            if i > 0:\n                li.append(-(abs(i)))\n            else: \n                li.append(abs(i))\n        return li\n    return []", "def invert(lst):\n    for i in range(0,len(lst)):\n        if lst[i]>=0:\n            lst[i] = 0 -lst[i]\n        else:\n            lst[i] =0 + abs(lst[i])\n    return lst", "def invert(lst):\n    lst_inverted = [-x for x in lst]\n    return lst_inverted", "def invert(lst):\n    inverse_list = []\n    for num in lst:\n        inverse_list.append(-num)\n\n            \n    return inverse_list\n", "def invert(lst):\n    inverted_list = []\n    for i in lst:\n        inverted_list.append(i -(i*2))\n    return inverted_list", "def invert(a:list):\n    if len(a) is None:\n        return []\n    my_invert = []\n    for item in a:\n        if item > 0:\n            item *= -1\n            my_invert.append(item)\n        else:\n            item *= -1\n            my_invert.append(item)\n    return my_invert", "def invert(lst):\n    s = []\n\n    for i in lst:\n        if i < 0:\n            s.append(-i)\n\n        else:\n            s.append(-i)\n    return s", "def invert(lst):\n    return [-elem for elem in lst] if lst else []", "def invert(lst):\n    inverse_lst=[]\n    for i in lst:\n        if i < 0:\n            inverse_lst.append(abs(i))\n        else:\n            inverse_lst.append(-i)\n            \n    return inverse_lst", "def invert(numbers):\n    return [-n for n in numbers]", "def invert(lst):\n    new_list = lst\n    result_list = []\n    for number in new_list:\n        if number > 0:\n            result_list.append(number * -1)\n        else:\n            result_list.append(number - number * 2)\n    return result_list", "def invert(lst):\n    list = []\n    for l in lst:\n        if l < 0:\n            list.append(abs(l))\n        else:\n            list.append(-abs(l))\n    return list\n", "def invert(lst):\n    lstCopy = lst[:]\n    for i in range(len(lst)):\n        lstCopy[i]*=-1\n    return lstCopy", "def invert(lst):\n    invert = []\n    \n    for num in lst:\n        if num < 0:\n            invert.append(num - num - num)\n        if num > 0:\n            invert.append(num - num - num)\n        if num == 0:\n            invert.append(num)\n    return invert", "def invert(lst):\n    for x, y in enumerate(lst):\n        lst[x] *= -1\n    return lst", "def invert(lst):\n    myList = []\n    for num in lst:\n        myList.append(num * -1)\n    return myList", "def invert(lst):\n    neg = []\n    for i in lst:\n        neg.append(-i)\n    return neg\n", "def invert(lst) -> list:\n    return [-x for x in lst]", "def invert(lst):\n    fsociety = []\n    if lst == []:\n        return []\n    for x in lst:\n        fsociety.append(x/-1)\n    return fsociety", "def invert(lst):\n    return [-n for n in lst if lst !=[]]", "def invert(lst):\n    list = []\n    for i in range(0,len(lst)):\n        a = -lst[i]\n        list.append(a)\n        i = i + 1\n    return list", "def invert(lst):\n    l = []\n    if not lst:\n        return l\n    elif lst:\n        for i in lst:\n            l.append(~i + 1)\n        return l\n", "def invert(lst):\n    inverse = []\n    for i in lst:\n        inverse.append(-i)\n    return inverse", "def invert(some_list): return [-thing for thing in some_list]", "def invert(lst):\n    if lst == []: return []\n    res = []\n    for x in lst:\n        res.append(x * -1) \n    return res", "def invert(lst):\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(abs(num))\n        elif num > 0:\n            result.append(num - num * 2)\n        else:\n            result.append(0)\n    return result", "def invert(lst):\n    new_lis =[(i*-1)for i in lst]\n    return new_lis\n", "def invert(lst):\n    return [-i for i in lst]\nprint(invert([1,2,3,-4,-5,-6,7,8,-9]))", "def invert(lst):\n    new_lst = []\n    for x in lst:\n        if x < 0 or x > 0:\n            x = -x\n            new_lst.append(int(x))\n        else:\n            new_lst.append(int(x))\n    return new_lst", "def invert(lst):\n    d = [-i for i in lst ]\n    return d", "def invert(lst):\n    b=[ ]\n    for i in lst:\n        b+=[-i]   \n    return b\n    pass", "def invert(lst):\n    \n    lst_m=[]\n    for i in lst:\n        a=-i\n        lst_m.append(a)\n    return lst_m\n"]