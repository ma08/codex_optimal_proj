["class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) <= 2:\n            return False\n        else:\n            if A[1] < A[0]:\n                return False\n            is_up = True\n            curr = A[0]\n            for n in A[1:]:\n                if n  == curr:\n                    return False\n                if n < curr:\n                    is_up = False\n                    curr = n\n                if n > curr:\n                    if is_up:\n                        curr = n\n                    else:\n                        return False\n            return not is_up\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        isIncreasing = True\n        i = 1\n        n = len(A)\n        if n < 3:\n            return False\n        if A[1] <= A[0]:\n            return False\n        while i < n:\n            if isIncreasing and A[i-1] < A[i]:\n                i += 1\n                continue\n            elif A[i] < A[i-1]:\n                isIncreasing = False\n                i += 1\n                continue\n            else:\n                return False\n        if A[-1] >= A[-2]:\n            return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        arr = A\n        if len(arr) < 3:\n            return False\n        if arr[0] > arr[1]:\n            return False\n        if arr[-1] > arr[-2]:\n            return False\n        \n        peek = None\n        for i in range(1, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                peek = i\n            if peek and arr[i] < arr[i+1]:\n                return False\n            if arr[i] == arr[i+1] or arr[i] == arr[i-1]:\n                return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        dec = 0\n        n = len(A)\n        if n < 3:\n            return False\n        else:\n            for i in range(n):\n                if i!= 0 and A[i] == A[i-1]:\n                    return False\n                elif i == 0 and A[i] > A[i+1]:\n                    return False\n                elif dec == 1 and A[i] > A[i-1]:\n                    return False\n                elif i != 0 and dec == 0 and A[i] < A[i-1]:\n                    dec = 1\n                elif i == (n - 1) and dec == 0:\n                    return False\n            return True\n                \n                \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:             \n        N = len(A)\n        if N < 3:\n            return False\n        i = 0\n        while i < N -1:\n            if(A[i]< A[i + 1]):\n                i+=1\n                print(i)\n            else:\n                break\n        if (i==0 or i==N-1):\n            print('***')\n            return False                \n        while (i<N-1):\n            if (A[i] > A[i+1]):\n                i += 1\n                print(i)\n            else:\n                break\n        if(i==N-1):\n            return True\n        else:\n            print('1111')\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        length = len(A)\n        if length < 3: return False\n        \n        prev = A[0]\n        peak = -1\n        \n        for i in range (1, length):\n            print(A[i])\n            if A[i] > prev:\n                if peak != -1:\n                    return False\n            elif A[i] == prev:\n                return False\n            else:\n                if i == 1: \n                    return False\n                peak = A[i]\n            \n            prev = A[i]\n        \n        print(peak)\n        return True if peak != -1 else False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:             \n        N = len(A)\n        if N < 3:\n            return False\n        i = 0\n        while i < N -1:\n            if(A[i]< A[i + 1]):\n                i+=1\n                print(i)\n            else:\n                break\n        if (i==0 or i==N-1):\n            return False                \n        while (i<N-1):\n            if (A[i] > A[i+1]):\n                i += 1\n                print(i)\n            else:\n                break\n        if(i==N-1):\n            return True\n        else:\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:             \n        N = len(A)\n        if N < 3:\n            return False\n        i = 0\n        while i < N -1:\n            if A[i] < A[i + 1]:\n                i += 1\n                print(i)\n            else:\n                break\n        if i == 0 or i == N - 1:\n            print('***')\n            return False                \n        while i < N - 1:\n            if A[i] > A[i + 1]:\n                i += 1\n                print(i)\n            else:\n                break\n        if(i==N-1):\n            return True\n        else:\n            print('1111')\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        \n        start = 0\n        finish = len(A) \n        \n       \n        \n        print((len(A)))\n        \n        for  i in range(0, len(A)-1):\n            print(('i', i))\n            \n    \n            if A[i] == A[i + 1]  :\n\n                return False\n            \n            elif A[i] > A[i+1]: \n                start = i\n                print(('else1', start))\n                break\n\n            \n                \n        for  j in range(0, len(A)-1):\n            print(('j', j))       \n               \n                \n            if A[len(A) - 1 - j] == A[len(A) - 2 - j] :\n                    \n                return False\n                    \n                    \n            elif A[len(A) - 1 - j] > A[len(A) - 2 - j]:\n                print(('break2' , len(A) - 1 - j, len(A) - 2 - j, A[len(A) - 1 - j], A[len(A) - 2 - j] ))\n                finish = len(A) - 1 - j\n                break\n                \n               \n                \n                \n                \n        print(('s, f', start, finish))   \n        return (start == finish and start > 0 and finish < len(A) )\n        \n\n", "class Solution:\n    \n    def __init__(self):\n        self.f = True\n    \n    def impl(self, arr, i, incr):\n        self.f = incr\n        if (i + 1 >= len(arr)):\n            return True\n\n        if (arr[i + 1] > arr[i] and not incr):\n            return False\n\n        elif (arr[i + 1] < arr[i] and incr):\n            incr = False\n\n        elif(arr[i + 1] == arr[i]):\n            return False\n\n        return self.impl(arr, i + 1, incr)\n\n    def validMountainArray(self, A) -> bool:\n        if (A == None or len(A) <= 2):\n            return False\n        if(A[1]<A[0]):\n            return False\n        self.f = True\n        result  = self.impl(A, 0, True)\n        if(self.f):\n            return False\n        return result\n        \n        \n        \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if not A or len(A)< 3:\n            return False\n            \n        l, r = 0, len(A) -1\n        while l<r:\n            if A[l] < A[l+1] and A[r-1] > A[r]:\n                l += 1\n                r -= 1\n            elif A[l] < A[l+1]:\n                l += 1\n            elif A[r-1] > A[r]:\n                r -= 1\n            else:\n                return False\n            \n            print(l, r)\n        \n        if l == r and l !=0 and r!= len(A)-1:\n            return True\n        else:\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        i=1\n        N=len(A)\n        if N<3:\n            return False\n        while(i<N and A[i]>A[i-1]):\n            i +=1\n        if(i==1 or i==N):\n            return False\n        while(i<N and A[i]<A[i-1]):\n            i +=1\n        return i==N  ", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        \n        N = len(A)\n        i = 0\n\n        # walk up\n        while i+1 < N and A[i] < A[i+1]:\n            i += 1\n\n        # peak can't be first or last\n        if i == 0 or i == N-1:\n            return False\n\n        # walk down\n        while i+1 < N and A[i] > A[i+1]:\n            i += 1\n\n        return i == N-1\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        i = 0\n        \n        #walk up\n        while i+1 < len(A) and A[i] < A[i+1]:\n            i += 1\n            \n        #peak can't be first or last\n        if i == 0 or i == len(A)-1:\n            return False\n            \n        while i+1 < len(A) and A[i] > A[i+1]:\n            i += 1\n            \n        return i == len(A) - 1\n            \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) <= 2:\n            return False\n        else:\n            t=0\n            c1,c2 =0,0\n            for i in range(1,len(A)-1):\n                if A[i] == A[i+1]:\n                    return False\n                    break\n                elif A[i-1] < A[i] < A[i+1] or A[i-1] > A[i] > A[i+1] or A[i-1] < A[i] > A[i+1]:\n                    t +=1\n                    if A[i-1] < A[i] < A[i+1]:\n                        c1+=1\n                    if A[i-1] > A[i] > A[i+1]:\n                        c2+=1\n            if t ==len(A)-2 and c1< len(A)-2 and c2< len(A)-2:\n                return True\n            else:\n                return False\n                    \n", "#19\nclass Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        nprev = A[0]\n        for i in range(1,len(A)):\n            if A[i] <= nprev:\n                nprev = A[i-1]\n                start = i \n                break\n            nprev = A[i]\n            if i == len(A)-1:\n                return False\n        \n        for i in range(start,len(A)):\n            if A[i] >= nprev:\n                return False\n            nprev = A[i]\n            if start == 1 and i == len(A)- 1:\n                return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        \n        maxIndex = A.index(max(A))\n        \n        if (maxIndex == len(A)-1) or (maxIndex == 0):\n            return False\n        \n        for i in range(maxIndex):\n            if A[i] >= A[i+1]:\n                return False\n        \n        for i in range(maxIndex, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        \n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        increasing=True\n        prev = -1\n        if len(A) < 3: return False\n        for idx,i in enumerate(A):\n            print(prev, i , increasing)\n            if i == prev: return False\n            if increasing:\n                if i<prev:\n                    increasing = False\n                    if idx==1: return False\n            else:\n                if i>prev:\n                    return False\n            prev = i\n        if increasing==True: return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        i = 0\n        while i + 1 < len(A) and A[i + 1] > A[i]:\n            i += 1\n        if i == 0 or i == len(A) - 1:\n            return False\n        \n        while i + 1 < len(A) and A[i + 1] < A[i]:\n            i += 1\n        return i == len(A) - 1", "class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        i = 0\n        l = len(arr)\n        while i+1 < l and arr[i] < arr[i+1]:\n            i += 1\n\n        if i == 0 or i == l-1:\n            return False\n\n        while i+1 < l and arr[i] > arr[i+1]:\n            i += 1\n\n        return i == l-1", "class Solution(object):\n    def validMountainArray(self, A):\n        N = len(A)\n        i = 0\n\n        # walk up\n        while i+1 < N and A[i] < A[i+1]:\n            i += 1\n\n        # peak can't be first or last\n        if i == 0 or i == N-1:\n            return False\n\n        # walk down\n        while i+1 < N and A[i] > A[i+1]:\n            i += 1\n\n        return i == N-1\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) <= 2:\n            return False\n        i = 0\n        N = len(A)\n        while i < N and i+1<N and A[i] < A[i+1]:\n            i+=1\n        if i ==0 or i ==N-1:\n            return False\n        while i<N and i+1<N and A[i] > A[i+1]:\n            i+=1\n        if i==N-1:\n            return True\n        return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        # find max\n        # everything to the left should be strictly decreasing \n        # everything to the right should be decreasing \n        m = (0,0)\n        for i in range(0, len(A)):\n            if A[i] > m[1]:\n                m = (i, A[i])\n        \n        if m[0] == 0 or m[0] == len(A)-1:\n            return False\n        for i in range(0, m[0]-1):\n            if A[i] >= A[i+1]:\n                return False\n        for i in range(m[0], len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True", "class Solution:\n    def walkUp(self, A: List[int]) -> int:\n        for i, step in enumerate(A[:-1]):\n            if A[i] >= A[i+1]:\n                return i\n        return len(A)\n        \n    def walkDown(self, A: List[int], top: int) -> bool:\n        for i, step in enumerate(A[top:-1], start=top):\n            if A[i] <= A[i+1]:\n                return False\n        return True\n    \n    def validMountainArray(self, A: List[int]) -> bool:\n        top = self.walkUp(A)\n        if top == 0 or top == len(A):\n            return False\n        return self.walkDown(A, top)\n            \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        switch = 0\n        if A[0] > A[1]:\n            return False\n        for i in range(2, len(A)):\n            if A[i] == A[i - 1]:\n                return False\n            if switch == 0 and A[i] < A[i - 1]:\n                switch = 1\n            elif switch == 1 and A[i] > A[i - 1]:\n                return False\n        if switch == 0:\n            return False\n        return True\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n\n        N = len(A)-1\n        reached = False\n        for i in range(N):\n            if A[i] == A[i+1]:\n                return False\n            \n            if not reached:\n                if A[i] > A[i+1]:\n                    if i == 0:\n                        return False\n                    reached = True\n            else:\n                if A[i] < A[i+1]:\n                    return False\n        return reached", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if(len(A) >= 3):\n            peak = max(A)\n            if(A.count(peak) == 1):\n                peakInd = A.index(peak)\n                incArr = A[:peakInd]\n                decArr = A[peakInd+1:]\n                if(len(incArr) > 0 and len(decArr) > 0):\n                    for i in range(1,len(incArr)):      \n                        if(incArr[i]<= incArr[i-1]):\n                            return False\n                    for d in range(0,len(decArr)-1):\n                        if(decArr[d]<= decArr[d+1]):\n                            return False        \n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        strict_inc = False\n        strict_dec = False\n        if len(A) > 2:\n            for i in range(1,len(A)):\n                if A[i] > A[i-1]:\n                    if strict_dec:\n                        return False\n                    strict_inc = True\n                    \n                elif A[i] < A[i-1]:\n                    strict_dec = True\n                else:\n                    return False\n            if strict_inc and strict_dec:\n                return True\n            else:\n                return False\n        else:\n            return False\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        \n        if len(A) in [0,1,2] :\n            return False\n        max_ele = max(A)\n        if A.count(max_ele) > 1 :\n            return False\n        \n        index = A.index(max_ele)\n        \n        if index == len(A) - 1 or index == 0:\n            return False\n        \n        for i in range(0,index) :\n            print(('values',A[i],A[i+1]))\n            print(('index',i,i+1))\n            if not(A[i] < A[i+1]) :\n                print('trig1')\n                return False\n        \n        for i in range(len(A)-1,index+1,-1) :\n            print('hi')\n            if not(A[i] < A[i-1]) :\n                print('trig2')\n                return False\n        return True\n            \n            \n        \n       \n            \n            \n\n            \n            \n            \n        \n      \n                    \n                \n                \n                \n        \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        i, j = 0, len(A) - 1\n        while i < j:\n            if A[i] < A[i + 1]:\n                i += 1\n            if A[j] < A[j - 1]:\n                j -= 1\n            elif i + 1 >= len(A) or A[i] >= A[i + 1]:\n                break\n        return i == j and 0 < i < len(A) - 1", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        \n        if len(A) < 3:\n            return False\n        \n        diffs = [A[i+1] - A[i] for i in range(len(A)-1)]\n        \n        if 0 in diffs or diffs[0] < 0:\n            return False\n        \n        peak = False\n        for i in range(len(diffs)-1):\n            if diffs[i+1]/abs(diffs[i+1]) != diffs[i]/abs(diffs[i]):\n                if peak == False:\n                    peak = True\n                else:\n                    return False\n        return peak     #catches the case where no peak\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        \n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                break\n        for j in range(-1, -len(A), -1):\n            if A[j] >= A[j-1]:\n                break\n        return i == len(A) + j", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        n = len(A)\n        if n < 3:\n            return False\n        changes = 0\n        is_increasing = False\n        is_decreasing = False\n        for i in range(0, n-1):\n            if changes == 0:    \n                if A[i] > A[i+1]:\n                    changes += 1\n                    is_decreasing = True\n                elif A[i] == A[i+1]:\n                    changes += 1\n                else:\n                    is_increasing = True\n            elif changes == 1:\n                if A[i] <= A[i+1]:\n                    changes += 1\n                else:\n                    is_decreasing = True\n            else:\n                return False\n        return changes < 2 and is_decreasing and is_increasing\n                \n                    \n            \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        arr=A\n        i=1\n        while i<len(arr):\n            if arr[i-1]<arr[i]:\n                i+=1\n            else:\n                break\n        if i==1 or i==len(arr):\n            return False\n        while i<len(arr):\n            if arr[i-1]>arr[i]:\n                i+=1\n            else:\n                return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) < 3: return False\n        up = True\n        for i in range(1, len(A)):\n            if A[i] == A[i-1]:\n                # flat                 \n                return False\n            if up:\n                # going up\n                if A[i] < A[i-1]:\n                    # going down\n                    if i == 1:\n                        # starting down is not valid\n                        return False\n                    up = False\n            else:\n                # going down\n                if A[i] > A[i-1]:\n                    # going back up after down is not mountain\n                    return False\n        return not up", "class Solution(object):\n    def validMountainArray(self, A):\n        N = len(A)\n        i = 0\n\n        # walk up\n        while i+1 < N and A[i] < A[i+1]:\n            i += 1\n\n        # peak can't be first or last\n        if i == 0 or i == N-1:\n            return False\n\n        # walk down\n        while i+1 < N and A[i] > A[i+1]:\n            i += 1\n\n        return i == N-1", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        \n        if len(A) < 3:\n            return False\n        \n        if A[0] > A[1]:\n            return False\n        \n        decreasing = False\n        last = A.pop(0)\n        \n        while A:\n            \n            new = A.pop(0)\n            print((new, last, decreasing))\n            if new == last:\n                return False\n            \n            if new > last and decreasing:\n                print('early')\n                return False\n            \n            if new < last and not decreasing:\n                decreasing = True\n                \n            last = new\n            \n        return decreasing\n            \n            \n        \n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        n = len(A)\n        if n < 3: return False\n        i = 0\n        \n        while i < n-1 and A[i] < A[i+1]:\n            i += 1\n        \n        if i == 0 or i == n-1:\n            # peak at beginning or end\n            return False\n        \n        while i < n-1 and A[i] > A[i+1]:\n            i += 1\n        \n        if i != n-1:\n            return False\n        return True", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n      passedPeak = False\n      \n      if len(A) <= 2 or A[0] > A[1]: return False\n      \n      for i in range(len(A)-1):\n        if A[i] == A[i+1]: return False\n\n        if passedPeak == True and A[i] < A[i+1]: return False\n            \n        if passedPeak == False and A[i] > A[i+1]:\n            passedPeak = True\n\n      if passedPeak: return True\n      else: return False\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        inflection = None\n        if len(A) > 3:\n            for i in range(0,len(A)- 1):\n                if inflection is not None:\n                    if A[i] < A[i+1]:\n                        return False\n                else:\n                    if A[i] > A[i+1]:\n                        inflection = i\n            \n            print(inflection,A[0:inflection],A[inflection:])\n            \n            if inflection is not None:\n                if len(A[0:inflection]) and len(A[inflection:]):\n                    if len(set(A[0:inflection]))+len(set(A[inflection:])) == len(A):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n                    print(set(A[0:inflection]),len(A[0:inflection]),set(A[inflection:]),len(A[inflection:]))\n                    return False\n            else:\n                return False\n        elif len(A) == 3:\n            if A[0] < A[1] and A[1] > A[2]:\n                return True\n            else:\n                return False\n        else:\n            return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        \n        N = len(A)-1\n        i = 0\n\n        # walk up\n        while i < N and A[i] < A[i+1]:\n            i += 1\n\n        # peak can't be first or last\n        if i == 0 or i == N:\n            return False\n\n        # walk down\n        while i < N and A[i] > A[i+1]:\n            i += 1\n\n        return i == N\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if(len(A)<3):\n            return False\n        elif(A.index(max(A))==0 or A.index(max(A))==(len(A)-1)):\n            return False\n        else:\n            for i in range(A.index(max(A))):\n                if(A[i]>=A[i+1]):\n                    return False\n            for i in range(A.index(max(A)),len(A)-1):\n                if(A[i]<=A[i+1]):\n                    return False\n            return True\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        climb = True\n        cs = 0\n        fs = 0\n        for i in range(1, len(A)):\n            if climb == True:\n                if A[i] > A[i-1]:\n                    cs += 1\n                    continue\n                elif A[i] == A[i-1]:\n                    return False\n                else:\n                    climb = False\n            if climb == False:\n                if A[i] < A[i-1]:\n                    fs += 1\n                    continue\n                else:\n                    return False\n        if cs > 0 and fs > 0:\n            return True\n        return False", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if(len(A)<3):\n            return False\n        i = 1\n        while(i<len(A) and A[i]>A[i-1]):\n            i+=1\n        if(i==1 or i==len(A)):\n            return False\n        \n        while(i<len(A) and A[i]<A[i-1]):\n            i+=1\n        return i==len(A)", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) == 0 or len(A) == 1:\n            return False\n        \n        idx = 0\n        \n        while (idx < len(A) - 1 and A[idx] < A[idx+1]):\n            idx += 1\n        if idx == 0 or idx == len(A) - 1:\n            return False\n        while (idx < len(A) - 1 and A[idx] > A[idx+1]):\n            idx += 1\n        \n        print((idx, len(A)))\n        return idx == len(A) - 1\n", "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if not A or len(A)<=2:\n            return False\n        increase = -1        \n        for i in range(1, len(A)):\n            if A[i] > A[i-1] and increase == -1:\n                increase = 1\n            if A[i] > A[i-1] and increase == 1:\n                continue\n            elif A[i] < A[i-1] and increase == 1:\n                increase = 0\n            elif A[i] < A[i-1] and increase == 0:\n                continue\n            else:\n                return False\n        if increase != 0:\n            return False\n        return True"]