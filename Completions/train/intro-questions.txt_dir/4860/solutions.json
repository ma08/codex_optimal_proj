["def amidakuji(ar):\n    numbers = list(range(len(ar[0])+1))\n    for line in ar:\n        for i, swap in enumerate(line):\n            if swap == '1':\n                numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n    return numbers", "def amidakuji(ar):\n    #your code goes here. you can do it!\n    # uncomment the line below to view the structure of the test case\n    # print(visualizer(ar))\n    width = len(ar[0])\n    current = [i for i in range(width + 1)]\n    for i in ar:\n        layer = i\n        count = 0\n        for s in layer:\n            if s == \"1\":\n                current = swap(current, count, count + 1)\n            count += 1\n    return current\n            \n    \ndef swap(l, pos1, pos2):\n    l[pos1], l[pos2] = l[pos2], l[pos1]\n    return l", "def amidakuji(ar):\n    res = [0 for i in range(len(ar[0]) + 1)]\n    for i in range(len(ar[0]) + 1):\n        pos = i\n        for j in range(len(ar)):\n            if pos != 0 and ar[j][pos - 1] == \"1\":\n                pos -= 1\n            elif pos != len(ar[0]) and ar[j][pos] == \"1\":\n                pos += 1\n        res[pos] = i\n    print(visualizer(ar))\n    return res", "def amidakuji(ar):\n    # Set up original number list\n    nums = list(range(len(ar[0])+1))\n    # For each layer:\n    for layer in ar:\n        # Swap the positions of numbers at each rung\n        for pos in range(len(ar[0])):\n            if layer[pos]==\"1\":nums[pos],nums[pos+1]=nums[pos+1],nums[pos]\n    return nums", "def amidakuji(arr):\n    elements = list(range(len(arr[0]) + 1))\n    for row in arr:\n        for i, col in enumerate(row):\n            if col == \"1\":\n                elements[i], elements[i+1] = elements[i+1], elements[i]\n    return elements", "def amidakuji(board):\n    li = [0] * (len(board[0]) + 1)\n    for i in range(len(board[0]) + 1):\n        c = i\n        for k in range(len(board)):\n            if int(board[k][c]) if c<len(board[0]) else 0 : c += 1\n            elif int(board[k][c - 1]) if c>0 else 0 : c -= 1\n        li[c] = i\n    return li", "def f(ar, col):\n    for row in ar:\n        if col < len(row) and row[col] == '1':\n            col += 1\n        elif col > 0 and row[col-1] == '1':\n            col -= 1\n    return col\n\ndef amidakuji(ar):\n    return [f(ar[::-1], col) for col in range(len(ar[0]) + 1)]", "from functools import reduce\n\ndef amidakuji(ar):\n    *ints, = range(1 + len(ar[0]))\n    return reduce(swap, ar, ints)\n\ndef swap(acc, rungs):\n    for r, rung in enumerate(rungs):\n        if rung == '1':\n            acc[r : r + 2] = acc[r + 1], acc[r]\n    return acc", "def amidakuji(ar):\n    results = [0 for i in range(len(ar[0]) + 1)]\n    for i in range(len(ar[0]) + 1):\n        pos = i\n        for line in ar:\n            move = False\n            if pos > 0:\n                if line[pos - 1] == '1':\n                    pos -= 1\n                    move = True\n            if pos < len(line) and not move:\n                if line[pos] == '1':\n                    pos += 1\n        results[pos] = i\n\n    return results", "def amidakuji(ar):\n    elements = list(range(len(ar[0]) + 1))\n    for row in ar:\n        for i, col in enumerate(row):\n            if col == \"1\":\n                elements[i], elements[i+1] = elements[i+1], elements[i]\n    return elements"]