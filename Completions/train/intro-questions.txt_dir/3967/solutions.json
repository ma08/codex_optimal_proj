["u = [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888, 3588, 3858, 3885, 5388, 5588, 5838, 5858, 5883, 5885, 5888, 8358, 8385, 8538, 8558, 8583, 8585, 8588, 8835, 8853, 8855, 8858, 8885, 8888, 35588, 35858, 35885, 35888, 38558, 38585, 38588, 38855, 38858, 38885, 53588, 53858, 53885, 53888, 55388, 55838, 55883, 55888, 58358, 58385, 58388, 58538, 58583, 58588, 58835, 58838, 58853, 58858, 58883, 58885, 58888, 83558, 83585, 83588, 83855, 83858, 83885, 85358, 85385, 85388, 85538, 85583, 85588, 85835, 85838, 85853, 85858, 85883, 85885, 85888, 88355, 88358, 88385, 88535, 88538, 88553, 88558, 88583, 88585, 88588, 88835, 88853, 88855, 88858, 88885, 88888, 335588, 335858, 335885, 338558, 338585, 338855, 353588, 353858, 353885, 355388, 355838, 355883, 355888, 358358, 358385, 358538, 358583, 358588, 358835, 358853, 358858, 358885, 358888, 383558, 383585, 383855, 385358, 385385, 385538, 385583, 385588, 385835, 385853, 385858, 385885, 385888, 388355, 388535, 388553, 388558, 388585, 388588, 388855, 388858, 388885]\n\ndef solve(a, b):\n    return sum(a <= x < b for x in u)", "eviternity = [int(n) for n in map(str, range(10 ** 6))\n              if set(n) <= set('358') and n.count('3') <= n.count('5') <= n.count('8')]\nsolve = lambda a, b, f=__import__('bisect').bisect_left: f(eviternity, b) - f(eviternity, a)", "def ever(n):\n    s = str(n)\n    C = [s.count('3'), s.count('5'), s.count('8')]\n    if sum(C)==len(s) and sorted(C)==C :\n        return True\n    return False\n\nD={i for i in range(1000000) if ever(i)}\n\n\ndef solve(a,b):\n    return len({e for e in D if e>=a and e<=b})", "import itertools\n\ndef merge(l):\n    return ''.join(l)\n\ndef solve(a,b):\n    digits=['3', '5', '8','']\n    c2=set(map(merge,itertools.product(digits,digits,digits,digits,digits,digits)))\n    c2.remove('')\n    c=0\n    for n in c2:\n        if int(n)>=a and int(n)<b:\n               if n.count('8')>= n.count('5') and n.count('5')>= n.count('3'):\n                    c+=1\n    return c\n\n", "from collections import Counter\nfrom itertools import product\n\n    \ndef valid(s):\n    c = Counter(s)\n    return c[8]>=c[5]>=c[3]\n    \nALL = [int(''.join(map(str,digs))) for nd in range(1,7) \n                                   for digs in product((3,5,8), repeat=nd)\n                                   if valid(digs) ]\n\ndef solve(a,b):\n    return sum( a<=n<b for n in ALL )", "from itertools import product\ndef solve(a,b):\n    res, start, stop = [], len(str(a)), len(str(b))+1\n    for i in range(start, stop):\n        res += [\"\".join(x) for x in product('538', repeat=i)]\n    return sum(1 for x in res if a<=int(x)<=b and x.count('8')>=x.count('5')>=x.count('3'))", "from itertools import permutations\n\nEVI = {8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888,\n       8888, 88888, 888888, 8888888}\n\nfor n in [\n    # 4 digit bases\n    8885, 8855, 8853,\n    # 5 digit\n    88885, 88855, 88853, 88553, \n    # 6 digit\n    888885, 888855, 888853, 888555, 888553, 885533]:\n    for perm in permutations(str(n)):\n        EVI.add(int(''.join(perm)))\n\ndef solve(a, b):\n    return sum(a <= n < b for n in EVI)", "from re import match\n\nmemo = {}\n\ndef solve(a, b):\n    return sum(1 for n in range(a, b) if is_eviternity(n))\n\ndef is_eviternity(n):\n    if n not in memo:\n        s = str(n)\n        memo[n] = match(r'[853]+$', s) and s.count('8') >= s.count('5') >= s.count('3')\n    return memo[n]", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef f_checker(num):\n    if all([i in ['3', '5', '8'] for i in str(num)]):\n            count_8 = str(num).count('8')\n            count_5 = str(num).count('5')\n            count_3 = str(num).count('3')\n            if count_8 >= count_5 and count_5 >= count_3:\n                return num\ndef solve(a,b):\n    counter = 0\n    for num in range(a, b):\n        res = f_checker(num)\n        if res:\n            counter += 1\n    return counter", "def solve(a,b):\n    number_counter = 0\n    for i in range(a, b):\n        number = str(i)\n        if '0' in number or '1' in number or '2' in number or '4' in number or '6' in number or '7' in number or '9' in number:\n            continue\n        a = number.count('3')\n        b = number.count('5')\n        c = number.count('8')\n        if(a + b + c == len(number)) and (a <= b) and (b <= c):\n            number_counter +=1\n    return number_counter"]