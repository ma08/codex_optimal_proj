["import re\n\nREGEX = re.compile(r'\\[(.*?)\\]')\n\n\ndef bracket_buster(strng):\n    try:\n        return REGEX.findall(strng)\n    except TypeError:\n        return 'Take a seat on the bench.'\n", "from re import findall\n\ndef bracket_buster(s):\n    return \"Take a seat on the bench.\" if type(s) is not str else findall(r'\\[(.*?)\\]', s)", "brackets = __import__(\"re\").compile(r\"\\[(.*?)\\]\").findall\n\ndef bracket_buster(string):\n    return brackets(string) if type(string) == str else \"Take a seat on the bench.\"", "import re\n\ndef bracket_buster(string):\n    if not isinstance(string, str):\n        return \"Take a seat on the bench.\"\n    return re.findall(r'\\[(.*?)\\]', string)\n", "import re\n\ndef bracket_buster(string):\n    return re.findall(\"\\[(.*?)\\]\", string) if type(string) == str else \"Take a seat on the bench.\"", "import re\n\ndef bracket_buster(s):\n    return re.findall(r'\\[(.*?)\\]', s) if isinstance(s, str) else 'Take a seat on the bench.'", "import re\n\ndef bracket_buster(string):\n    if type(string) is not str:\n        return \"Take a seat on the bench.\"\n    return re.findall(r'\\[(.*?)\\]', string)", "from re import findall as f\nbracket_buster=lambda s:f(r\"\\[(.*?)\\]\",s) if isinstance(s,str) else \"Take a seat on the bench.\"", "import re\ndef bracket_buster(x):\n    if type(x) != str:\n        return 'Take a seat on the bench.'\n    pat = r'\\[.*?\\]'\n\n    results = [match[1:-1] for match in re.findall(pat,str(x))]\n\n    if len(results) == 0:\n        return 'Take a seat on the bench.'\n    else:\n        return results", "def bracket_buster(string):\n    # Get after it!\n    if string == None or not isinstance(string,str) : return \"Take a seat on the bench.\"\n    import re\n    pattern = re.compile(r'\\[([\\w\\s\\'?!\\d\\-]+|\\[{1,}|'')\\]', re.I)\n    mo =  pattern.findall(string)\n    return mo"]