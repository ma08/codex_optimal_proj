["from math import floor, log\ndef count_sixes(n):\n    return floor((n - n % 2) * log(2, 10))", "count_sixes=lambda n:len(str(1<<n-n%2))-1", "from math import log10, floor, log\n\ndef count_sixes(n):\n  k = floor(log10(3) + (n - 1)*log10(2))\n  return k - (k*log(10) > (n - (n & 1))*log(2))\n\n# x[n] = 2/3 + d if n is odd\n# x[n] = 2/3 - d otherwise\n# d = 1/(3*2**(n-1))\n# k = log10(1/d)\n# adjust k depending on carry/borrow from adding/subtracting d\n# if n is odd:\n#   k-1 if 1/(3*10**k) <= d\n#   k   otherwise\n# else:\n#   k-1 if 2/(3*10**k) <= d\n#   k   otherwise\n", "import math\ncount_sixes = lambda n: int((n-n%2)*math.log10(2))", "def count_sixes(n):\n    res = str(10**n//15-(-5)**n//15)\n    return len(res)-len(res.lstrip('6'))    \n\n\"\"\" For my poor memory :\n\n    with some paper and a pen, 2->10:\n        2 : 0.5\n        3 : 0.75\n        4 : 0.625\n        5 : 0.6875\n        6 : 0.65625\n        7 : 0.671875\n        8 : 0.6640625\n        9 : 0.66796875\n        10 : 0.666015625 ==> that's the example !\n        \n    I'm lazy : check OEIS with only the decimals (5, 75, 625, 6875...) ==> https://oeis.org/A091903\n    Formula : a(n)=10^n/15-(-5)^n/15\n    \n    Adapt formula to python :)\n\"\"\"", "\"\"\"\nWhen you're bad at maths....  x)\nThe complete story in the comments.\n\"\"\"\n\n\ndef definer(left, nL, right, nR, name):\n    (inpL, outL), (inpR, outR) = left[:2], right[:2]\n    return (inpL*nL + inpR*nR,   outL*nL + outR*nR,   left,   nL,   right,   nR,   name)\n\nINF = 10**6\n\n\"\"\"\nTREE DATA:     length as...      left       nL          right       nR          name (debugging)\n               inp     out  \n\"\"\"\nC00          = (4,       0,      None,      None,       None,       None,       \"C00\")\nC2           = (2,       1,      None,      None,       None,       None,       \"C2\")\nC4           = (4,       1,      None,      None,       None,       None,       \"C4\")\n\nC6           = definer( C2,           1,     C4,         1,     \"C6\" )\nC10          = definer( C4,           1,     C6,         1,     \"C10\")\nC19_6        = definer( C10,         19,     C6,         1,     \"C19_6\")\nC18_6        = definer( C10,         18,     C6,         1,     \"C18_6\")\nC19x5_18x1   = definer( C19_6,        5,     C18_6,      1,     \"C19x5_18x1\")\nC19x4_18x1   = definer( C19_6,        4,     C18_6,      1,     \"C19x4_18x1\")\nC_x5andx4    = definer( C19x5_18x1,   1,     C19x4_18x1, 1,     \"C_x5andx4\")\nC_x13andx4   = definer( C_x5andx4,   13,     C19x4_18x1, 1,     \"C_x13andx4\")\nC_TOP        = definer( C_x13andx4, INF,     C2,         0,     \"C_TOP\")                # C2 is dummy, here\n\nSTART        = definer( C00,          1,     C_TOP,      1,     \"START\" )\n\n\ndef count_sixes(n, c=START):\n\n    _, out, left, nL, right, _, name = c\n    \n    if left: inpL, outL = left[:2]\n    \n    if not left: return out\n    \n    elif n < inpL * nL:\n        complete, r  = divmod(n, inpL)\n        return outL * complete + (left and count_sixes(r, left))\n\n    else:\n        return outL * nL + (right and n and count_sixes(n - inpL*nL, right))      \n", "import math\n\ndef count_sixes(n):\n    n0 = int((math.log10(2) * (n - 1)))\n    n1 = int((math.log10(2) * n))\n    n2 = int((math.log10(2) * (n + 1)))\n    len = n1\n    if n1 == n2 and n1 == (n0 + 1) and (n % 2) != 0:\n        len = n0\n    return len", "from fractions import Fraction \nfrom decimal import *\n\ndef count_sixes(n):\n    a = 6 << (n - 2)\n    b = Fraction(2,3)\n    c = Fraction(1,a) \n    d = 0 \n    if n % 2 == 0:\n        d = b - c \n    else:\n        d = b + c     \n    getcontext().prec = 100000\n    e = str(Decimal(d.numerator)/Decimal(d.denominator))\n    f = 0     \n    for i in range(2,len(e)):\n        if e[i] == '6': \n            f += 1\n        else: break \n    return f\n", "def count_sixes(n):\n    num = 3*2**(n-1)\n    c=0\n    if n%2 ==0 and int(str(num)[:2]) < 15:\n        c = 1\n    elif n%2 == 1 and int(str(num)[0]) < 3:\n        c=1\n    return len(str(num))-1 -c"]