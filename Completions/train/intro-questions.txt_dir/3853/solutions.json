["from itertools import cycle\n\ndef numeric_formatter(template, data='1234567890'):\n    data = cycle(data)\n    return ''.join(next(data) if c.isalpha() else c for c in template)", "from itertools import cycle\nimport re\n\ndef numeric_formatter(template, source=\"1234567890\"):\n    gen = cycle(source)\n    return re.sub(r'[a-zA-Z]', lambda m: next(gen), template)", "def numeric_formatter(template, digits = \"1234567890\"):\n    counter = 0\n    formatted = \"\"\n    for char in template:\n        if counter >= len(digits):\n            counter = 0\n        if char.isalpha():\n            formatted += digits[counter]\n            counter += 1\n        else:\n            formatted += char\n    return formatted", "def numeric_formatter(temp, numb = None):\n    nb = (str(i)[-1] if not numb else numb[(i-1)%len(numb)] for i in range(1,24))\n    return ''.join( e if not e.isalpha() else next(nb) for e in temp )   ", "def numeric_formatter(template, number='1234567890'):\n    i = 0\n    res = ''\n    for l in template:\n        if l.isalpha():\n            res += number[i]\n            i += 1\n            if i >= len(number):\n                i = 0\n        else:\n            res += l\n    return res", "def numeric_formatter(template, nums=\"1234567890\"):\n    ln = len(nums)\n    lst = list(template)\n    newlst = lst.copy()\n    i = 0\n    for idx, char in enumerate(lst):\n        if char.isalpha():\n            newlst[idx] = nums[i]\n            i += 1\n            i = i%ln\n    return \"\".join(newlst)", "def numeric_formatter(template, info='1234567890'):\n    pos = 0\n    answer = ''\n        \n    for char in template:\n        if char.isalpha():\n            answer += info[pos]\n            pos += 1\n            if pos >= len(info):\n                pos = 0\n        else:\n            answer += char\n            \n    return answer", "def numeric_formatter(t, s='1234567890'):\n    idx, arr_t = 0, list(t)\n    for i in range(len(arr_t)):\n        if arr_t[i].isalpha():\n            arr_t[i] = s[idx % len(s)]\n            idx += 1\n    return ''.join(arr_t)", "from itertools import cycle\ndef numeric_formatter(s,n=\"1234567890\"):\n    n = iter(cycle(n))\n    return \"\".join([next(n) if i.isalpha() else i for i in s])", "from itertools import cycle\n\ndef numeric_formatter(template, num=\"1234567890\"):\n    digits = cycle(num)\n    return \"\".join(next(digits) if char.isalpha() else char for char in template)\n"]