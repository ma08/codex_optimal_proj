["def solve(n):\n    for i in range(int(n**0.5), 0, -1):\n        x = n - i**2\n        if x > 0 and x % (2*i) == 0:\n            return ((n - i ** 2) // (2 * i)) ** 2\n    return -1", "def solve(n):\n#Imagine a table, 1 to n on the top, and 1 to n on the side.\n#The contents of the table are the difference between the columnNo.^2 minus the rowNo.^2 (positive values only)\n#Therefore the row must always be smaller in value than the column number.\n#The first diagonal shows values of the pattern 2*rowNo. + 1, the second 4*rowNo. + 4, the third 6*rowNo. + 9.\n#Therefore let rowNo. = R, and the diagonal = D and the value in the table be n.\n#n = 2*D*R - D^2\n#Rerarrage to get  R = (n-(D ** 2))/(2 * D) \n\n    answer = -1\n    for D in range(1, max(int(n ** 0.5),5)):\n        R = (n-(D ** 2))/(2 * D)\n        if R.is_integer() and R > 0:\n            answer = R ** 2\n\n    return answer", "solve=lambda n:next((((n-x*x)//2//x)**2for x in range(int(n**.5),0,-1)if(n-x*x)%(2*x)==0<n-x*x),-1)", "def solve(n):\n    res = float('inf')\n    for x in range(1, int(n**0.5)+1):\n        y, r = divmod(n, x)\n        if not (r or x == y) and y-x & 1 ^ 1:\n            res = min(res, y-x >> 1)\n    return -1 if res == float('inf') else res**2", "import math\ndef solve(n):\n    for i in range(math.ceil(n**0.5)-1, 0, -1):\n        if n%i == 0:\n            bma = n/i - i\n            if bma%2 == 0:\n                return (bma/2)**2\n    return -1", "def solve(n): \n    X = 1e9\n    for i in range(1, int(n**(1/2)) + 1): \n        if n % i == 0: \n            a = i \n            b = n // i    \n            if b - a != 0 and (b - a) % 2 == 0: \n                 X = min(X, (b - a) // 2) \n    return(X * X if X != 1e9 else -1) ", "def solve(d):\n    if (d%4) != 2:\n        for i in range(1,(d//2)+1):\n            if (d+(i*i))**.5 % 1 == 0:\n                return i*i\n    return -1", "def solve(n):\n    if (n%2 == 0 and n%4 != 0) or n == 1 or n == 4:\n        return -1\n    for i in range(n-1):\n        if ((n + (i+1)**2)**0.5)%1 == 0:\n            return (i+1)**2\n", "#let N be a^2\n#n + N = M^2 (our answer)\n#n + a^2 = m^2\n#stuff in slimesquad chat to read from\nimport math\ndef solve(n):\n    d = math.ceil(math.sqrt(n)) - 1 #find the last biggest root we can use thats not the same number\n    #now we need to go backwards because it cant be bigger than root N\n    #we need to find a pair of factors for n (which is equal to x*y in discord) that are the same even and odd\n    #or else A wouldnt be even\n    print(d)\n    for a in range(d, 0, -1):#the last argument is to go backwards\n    #if we have Found a factor of N that is below the root(N) (finding the closest factors)\n    #We go down from Root (N) because the further we go down, the more further apart the factors are\n    #and if the difference gets bigger, we will have a bigger square number because the number\n    #we need to find is the difference divided by 2\n        if (n % a == 0):\n        #then find the second factor it could be\n        #we can do this easily\n            e = (n/a)  - a\n            print((a,e))\n            if e % 2 == 0:\n                p = e / 2\n                return p*p\n    return -1\n"]