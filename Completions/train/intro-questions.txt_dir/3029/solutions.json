["def levenshtein(a,b):\n    d = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\n\n    d[0][:] = list(range(len(b)+1))\n    for i in range(1, len(a) + 1):\n        d[i][0] = i\n\n    for i, x in enumerate(a):\n        for j, y in enumerate(b):\n            d[i+1][j+1] = min(1 + d[i][j+1], 1 + d[i+1][j], d[i][j] + (1 if x != y else 0))\n\n    return d[-1][-1]\n\n", "def levenshtein(s, t):\n    v = range(len(t)+1)\n    for i, si in enumerate(s):\n        w = [i+1]\n        for j, tj in enumerate(t):\n            w.append(min(w[j]+1, v[j+1]+1, v[j]+(si!=tj)))\n        v = w\n    return w[-1]", "def levenshtein(a,b):\n    if len(a) == 0:\n        return len(b)\n    if len(b) == 0:\n        return len(a)  \n    if a[0] == b[0]:\n        dist = 0\n    else:\n        dist = 1\n    \n    return min(\n        levenshtein(a[1:], b) + 1,\n        levenshtein(a, b[1:]) + 1,\n        levenshtein(a[1:], b[1:]) + dist\n    )\n", "def levenshtein(a,b):\n    def recurse(i, j):\n        if i >= len(a) or j >= len(b):\n            return abs(i - len(a)) + abs(j - len(b))\n        if a[i] == b[j]:\n            return recurse(i+1, j + 1)\n        else:\n            return 1 + min(recurse(i + 1, j), recurse(i, j + 1), recurse(i + 1, j + 1))\n    return recurse(0,0)", "def levenshtein(a,b):\n    import numpy as np\n    size_x = len(a) + 1\n    size_y = len(b) + 1\n    matrix = np.empty ((size_x, size_y)) \n    matrix[:,0] = list(range(size_x))\n    matrix[0,:] = list(range(size_y))\n\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if a[x-1] == b[y-1]:\n                matrix [x,y] = min(\n                    matrix[x-1, y] + 1,\n                    matrix[x-1, y-1],\n                    matrix[x, y-1] + 1\n                )\n            else:\n                matrix [x,y] = min(\n                    matrix[x-1,y] + 1,\n                    matrix[x-1,y-1] + 1,\n                    matrix[x,y-1] + 1\n                )\n    return (int(matrix.item((size_x-1,size_y-1))))\n", "import numpy as np\n\ndef levenshtein(s,t):\n    #create a matrix.\n    m, n = len(s) , len(t)\n    table = np.zeros((m, n), dtype=int)\n    # first column\n    for i in range(m):\n        for j in range(n):\n            # for first column.\n            if j == 0:\n                if i == 0:\n                    if s[i] == t[j]:\n                        table[i][j] = 0\n                    else:\n                        table[i][j] = 1\n                if i > 0:                    \n                    if s[i] == t[j]:                    \n                        table[i][j] = table[i - 1][j]\n                    else:                   \n                        table[i][j] = table[i - 1][j] + 1\n            else:\n                # and first line.\n                if i == 0:\n                    if s[i] == t[j]:\n                        table[i][j] =  table[i][j - 1]\n                    else:\n                        if j > 0:                            \n                            table[i][j] = table[i][j - 1] + 1\n                else:\n                    # for others\n                    if s[i] == t[j]:\n                        table[i][j] =  table[i - 1][j - 1]\n                    else:\n                        table[i][j] = min(table[i][j - 1], table[i -1][j],table[i - 1][j - 1]) + 1 \n    print(table)\n    return table[-1][-1]"]