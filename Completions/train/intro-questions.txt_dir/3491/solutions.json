["def substring(s):\n    r, rm = [], []\n    for i, x in enumerate(s):\n        if x in r or len(set(r)) < 2:\n            r += x;\n        else:\n            if len(r) > len(rm): rm = r[:]\n            r = [y for y in r[-1::-1] if y == r[-1]] + [x]\n    if len(r) > len(rm): rm = r[:]\n    return ''.join(rm)", "def substring(strng):\n    best = \"\"\n    best_end = \"\"\n    for c in strng:\n        best_end += c\n        while len(set(best_end + c)) > 2:\n            best_end = best_end[1:]\n        if len(best_end) > len(best):\n            best = best_end    \n    return best", "from itertools import groupby\n\n\ndef substring(strng):\n    return max(\n        enumerate(iter_candidates(strng, 2)),\n        key=lambda ix: (len(ix[1]), -ix[0]),\n    )[1]\n\n\ndef iter_candidates(strng, n):\n    xs = []\n    seen = set()\n    for c, grp in groupby(strng):\n        if len(seen) >= n and c not in seen:\n            yield \"\".join(xs)\n            seen.discard(xs[-n][0])\n            del xs[:1-n]\n        xs.append(\"\".join(grp))\n        seen.add(c)\n    yield \"\".join(xs)", "REGEX = __import__(\"re\").compile(r\"((.)\\2*)(?=((.)\\4*(?:\\2|\\4)*))\").findall\n\ndef substring(strng):\n    if len(set(strng)) <= 2: return strng\n    return max((x+y for x,_,y,_ in REGEX(strng)), key=len)", "def substring(stg):\n    i, mi, s, ms, l = 0, 0, 3, 2, len(stg)\n    while i + s <= l:\n        if len(set(stg[i:i+s])) > 2:\n            i += 1\n        else:\n            mi, ms = i, s\n            s += 1\n    return stg[mi:mi+ms]\n\n", "def substring(strng):\n    if not strng or len(strng) <= 2:\n        return strng\n\n    max_str = ''\n    start_ind = 0\n    next_ind = 0\n    for ind, letter in enumerate(strng):\n        if strng[start_ind] != letter:\n            if start_ind == next_ind:\n                next_ind = ind\n            elif len(set(strng[start_ind:ind + 1])) > 2:\n                start_ind, next_ind = next_ind, ind\n                continue\n\n        if ind - start_ind + 1 > len(max_str):\n            max_str = strng[start_ind:ind + 1]\n\n    return max_str", "def substring(s, n=2):\n    substr, letters, indexes = '', [''] * n, {'': 0}\n    for i, c in enumerate(s, 1):\n        if c not in letters:\n            letters = letters[1:] + [c]\n            indexes[c] = i-1\n        if i - indexes[letters[0]] > len(substr):\n            substr = s[indexes[letters[0]]: i]\n    return substr", "import re\n\n\ndef substring(s):\n    if len(s) < 2:\n        return s\n    pat = re.compile(r'(.)\\1*(.)(\\1|\\2)*', re.DOTALL)\n    return max((pat.search(s, i).group() for i in range(len(s)-1)), key=len)\n", "def substring(s):\n    r = []\n    for i, x in enumerate(s):\n        temp = [x]\n        for j in range(i+1, len(s)):\n            if s[j] in temp or len(set(temp)) < 2:\n                temp.append(s[j])\n            else:\n                r.append(''.join(temp))\n                break\n        r.append(''.join(temp))\n    return s and max(r, key=len) or ''"]