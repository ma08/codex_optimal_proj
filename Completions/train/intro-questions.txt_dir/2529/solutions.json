["import itertools\n\nclass Solution:\n  def numSpecial(self, mat: List[List[int]]) -> int:\n    rr = [i for i, r in enumerate(mat) if sum(r) == 1]\n    cc = [i for i, c in enumerate(zip(*mat)) if sum(c) == 1]\n    return sum(1 for i, j in itertools.product(rr, cc) if mat[i][j] == 1)", "import numpy as np\n\nclass Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        \n        mat = np.matrix(mat)\n        indices_pack = np.where(mat==1)\n        indices = [(i, j) for i, j in zip(indices_pack[0], indices_pack[1])]\n        print(indices)\n        \n        count = np.array([1 for x, y in indices if mat[x,:].sum() == 1 and mat[:,y].sum() == 1])\n        return int(count.sum())", "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        ## My original solution, not very fast\n        # mat_t = list(zip(*mat))\n        # row_s = [i for i in range(len(mat)) if sum(mat[i]) == 1]\n        # col_s = [j for j in range(len(mat_t)) if sum(mat_t[j]) == 1]\n        # return sum(mat[i][j] == 1 and i in row_s and j in col_s for i in range(len(mat)) for j in range(len(mat_t)))\n        \n        mat_t = list(zip(*mat))\n        res = 0\n        for i in range(len(mat)):\n            for j in range(len(mat_t)):\n                if mat[i][j] == sum(mat[i]) == sum(mat_t[j]) == 1:\n                    res += 1\n        return res", "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        ## My original solution, not very fast\n        # mat_t = list(zip(*mat))\n        # row_s = [i for i in range(len(mat)) if sum(mat[i]) == 1]\n        # col_s = [j for j in range(len(mat_t)) if sum(mat_t[j]) == 1]\n        # return sum(mat[i][j] == 1 and i in row_s and j in col_s for i in range(len(mat)) for j in range(len(mat_t)))\n        \n        ## Modified version, still not very fast\n        mat_t = list(zip(*mat))\n        res = 0\n        for i in range(len(mat)):\n            for j in range(len(mat_t)):\n                if mat[i][j] == sum(mat[i]) == sum(mat_t[j]) == 1:\n                    res += 1\n        return res", "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        res=0\n        for i in range(len(mat)):\n            for j in range(len(mat[-1])):\n                if mat[i][j]==1 and sum(mat[i])==1 and sum(mat[o][j] for o in range(len(mat)))==1:\n                    res+=1\n        return res"]