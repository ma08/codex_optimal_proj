["def pattern(n, *x):\n    if n < 1:\n        return \"\"\n    x = x[0] if x and x[0] > 0 else 1\n    result = []\n    for i in range(1, n + 1):\n        line = \" \" * (i - 1) + str(i % 10) + \" \" * (n - i)\n        result.append((line + line[::-1][1:]) + (line[1:] + line[::-1][1:]) * (x - 1))\n    return \"\\n\".join(result + result[::-1][1:])", "def pattern(n, x=1, *args):\n    x = x if x > 1 else 1\n    top = [\"1\" + \"\".join(\" \"*(2*n-3) + \"1\" for k in range(x))] if n > 1 else []\n    wing = [\" \" + \"\".join(\" \"*(i-2) + str(i%10) + \" \"*(2*(n-i)-1) + str(i%10) + \" \"*(i-1) for k in range(x)) for i in range(2, n)]\n    middle = [(str(n%10) + \"\".join([\" \"*(2*n-3) + str(n%10) for k in range(x-1)])).center(2*(n-1)*x+1)] if n > 1 else \"1\"\n    return \"\\n\".join(top + wing + middle + wing[::-1] + top) if n > 0 else \"\"", "pattern = lambda n,a=1,*ignored: '\\n'.join([s+(s[1:])*(a-1) for s in (lambda u:u(list(u(' '*(i-1) + str(i%10) + ' '*(n-i)) for i in range(1,n+1))))(lambda x:x+x[-2::-1])])", "pattern=lambda n,x=1,w=1,e=1,r=1,y=1,u=1: \"\\n\".join([(lambda r: \"\".join(r)+\"\".join([\"\".join(r[1:]) for j in range(1,x)]))([\" \"]*(i-1)+[str(i%10)]+[\" \"]*(2*(n-i)-1)+[str(i%10)]+[\" \"]*(i-1)) for i in range(1,n)]+[(lambda r: r+\"\".join([r[1:] for j in range(1,x)]) )(\" \"*(n-1)+str(n%10)+\" \"*(n-1))]+[(lambda r: \"\".join(r)+\"\".join([\"\".join(r[1:]) for j in range(1,x)]))([\" \"]*(i-1)+[str(i%10)]+[\" \"]*(2*(n-i)-1)+[str(i%10)]+[\" \"]*(i-1)) for i in range(n-1,0,-1)]) if n>0 else \"\"", "def pattern(n, x=1, *_):\n    x = x if x>1 else 1\n    s1 = ''.join('1'+' '*(2*n-3) for i in range(x))+str(1)+'\\n'\n    s = '\\n'.join((' '*i+str(i+1)[-1]+' '*(2*n-2*i-3)+str(i+1)[-1]+' '*(i-1))*x+' ' for i in range(1,n-1))\n    s1 = s1 if s =='' else s1+s+'\\n'\n    s = s1+(' '*(n-1) +str(n)[-1]+' '*(n-2))*x+' '\n    return '' if n<1 else s+s1[::-1]", "def pattern(n, x=1, *args):\n    pat = [\"\".join([\" \" * (i - 1), str(i % 10), \" \" * (n - i)]) for i in range(1,n+1)]\n    pat = [\"\".join([i, i[-2::-1]]) for i in pat]\n    pat = [\"\".join([i, i[1:] * (x-1)]) for i in pat]\n    return \"\\n\".join(pat + pat[-2::-1])\n    \n", "m,r=lambda s:s+s[-2::-1],lambda s,n:s+s[1:]*n\npattern=lambda n,h=1,*a:'\\n'.join(m(list(r(m(' '*(i-1)+str(i%10)+' '*(n-i)),h-1)for i in range(1,n+1))))", "m,r=lambda s:s+s[-2::-1],lambda s,n:s+s[1:]*n\ndef pattern(*a):\n    n, h = (a+(1,))[:2]\n    return '\\n'.join(m(list(r(m(' '*(i-1)+str(i%10)+' '*(n-i)),h-1)for i in range(1,n+1))))", "def pattern(n, *args):\n    if n < 1:\n        return ''\n    x = 1 if len(args) == 0 else max(args[0], 1)\n    width, height = (1 + 2*(n-1)*x), 2*n - 1\n    pict = [[' '] * width for _ in range(height)]\n    x_positions = set()\n    for x in range(0, width, 2*(n-1)):\n        x_positions.add(('r', x))\n        x_positions.add(('l', x))\n    for y, n in enumerate(list(range(1, n+1)) + list(range(n-1, 0, -1))):\n        new_x_positions = set()\n        for d, x in x_positions:\n            pict[y][x] = str(n)[-1]\n            if d == 'r' and x + 1 < width:\n                new_x_positions.add((d, x+1))\n            elif d == 'l' and 0 <= x - 1:\n                new_x_positions.add((d, x-1))\n        x_positions = new_x_positions\n    return '\\n'.join(map(''.join, pict))", "def pattern(n, *args):\n    if n < 1:\n        return ''\n    x = 1 if len(args) == 0 else max(args[0], 1)\n    width, height = (1 + 2*(n-1)*x), 2*n - 1\n    pict = [[' '] * width for _ in range(height)]\n    x_positions = set()\n    for x in range(0, width, 2*(n-1)):\n        x_positions.add(('r', x))\n        x_positions.add(('l', x))\n    for y, n in enumerate(list(range(1, n+1)) + list(range(n-1, 0, -1))):\n        new_x_positions = set()\n        for d, x in x_positions:\n            pict[y][x] = str(n)[-1]\n            if d == 'r' and x + 1 < width:\n                new_x_positions.add((d, x+1))\n            elif d == 'l' and 0 <= x - 1:\n                new_x_positions.add((d, x-1))\n        x_positions = new_x_positions\n    return '\\n'.join(''.join(p) for p in pict)"]