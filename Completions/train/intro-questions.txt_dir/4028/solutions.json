["def riders(stations, lost):\n    stations = stations[:lost-1] + stations[lost-2:]\n    rider, dist = 1, 0\n    for i,d in enumerate(stations):\n        rider += (dist+d > 100) + (i == lost-2)\n        dist   = dist * (dist+d <= 100 and i != lost-2) + d\n    return rider", "LIMIT = 100\n\ndef riders(stations, station_x):\n    riders = 1\n    rode = 0\n    for station, distance in enumerate(stations, 2):\n        if rode + distance > LIMIT:\n            # Too far, switch riders\n            riders += 1\n            rode = 0\n            \n        if station == station_x:\n            # Rider lost, send a rescue rider back from station_x\n            riders += 1\n            if distance > LIMIT / 2:\n                # Rescuer would would have to ride too far to return, so need another new rider back to station_x\n                riders += 1\n                rode = distance\n            else:\n                # Rescuer is back as original station\n                rode = 2 * distance\n        else:\n            # Carry on to next station, still got plenty of juice\n            rode += distance\n\n    return riders\n", "def riders(s,x):\n    station,i,riders, p = 1, 0, [0], 0\n    while station <= len(s) + 1:\n        if riders[p] + s[i] <= 100 : riders[p] += s[i]\n        else : riders.append(0) ; p += 1 ; continue\n        station += 1  ;  i += 1\n        if station == x:\n            riders.append(0)\n            p += 1 ; i -= 1\n            riders[p] += s[i]\n    return len(riders)", "def riders(sts, x):\n    st, x, back, n = 0, x-1, 0, 1\n    while True:\n        remain, back = 100 - back, 0\n        while remain >= sts[st]:\n            remain -= sts[st]\n            st += 1\n            if st == x:\n                st -= 1\n                x = -1\n                back = sts[st]\n                break\n            elif st == len(sts):\n                return n\n        n += 1", "def riders(stations, station_x):    \n    riders = 2\n    miles = 0\n    for i in range(len(stations)):\n        if i == station_x - 2:\n            \n            miles = stations[i]\n        miles += stations[i]\n        if miles > 100:\n            riders +=1\n        if i == len(stations) - 1:\n            break\n        if miles + stations[i+1] > 100:\n            riders += 1\n            miles = 0 \n    \n    return riders ", "def riders(S,x):\n    R=[]\n    for i,s in enumerate(S):\n        R+=R and R[-1]+s<=100and[R.pop()+s]or[s]\n        if i+2==x:R+=100<s*2and[s]*2or[s*2]\n    return len(R)", "def riders(S,x):\n    R=[]\n    for i,s in enumerate(S,1):\n        if R==[]or 100<R[-1]+s:R+=[s]\n        else:R[-1]+=s\n        if i==x-1:R+=100<s*2and[s]*2or[s*2]\n    return len(R)", "def riders(stations, station_x):\n  stations.insert(station_x-2, stations[station_x-2])\n  riders = 1\n  miles = 0\n  for i, m in enumerate(stations):\n    miles += m\n    if miles > 100:\n      miles = m\n      riders += 1\n    if i == station_x - 2:\n      miles = m\n      riders += 1\n  return riders\n", "def riders(stations, station_x):\n    r = 1\n    d = 0\n    for i, e in enumerate(stations, 1):\n        d += e\n        if i+1 == station_x:\n            r += 1\n            d = 2*e\n            if d > 100:\n                d = e\n                r += 1\n        if i < len(stations):\n            temp = d + stations[i]\n            if temp > 100:\n                r += 1\n                d = 0\n    return r", "def riders(stations, station_x):\n    riders = 1\n    index = 1\n    r_miles = 0\n    \n    for s_distance in stations:\n        index += 1\n        r_miles += s_distance\n        \n        if r_miles > 100:\n            riders += 1\n            r_miles = s_distance\n        \n        if station_x == index:\n            riders += 1\n            r_miles = (s_distance * 2)\n            if r_miles > 100:\n                riders += 1\n                r_miles = s_distance\n    return riders\n     \n    #print (stations)\n    #print (station_x)\n"]