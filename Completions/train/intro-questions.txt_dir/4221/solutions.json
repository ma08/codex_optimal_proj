["def count_targets(n, sequence):\n    return sum(a == b for a, b in zip(sequence, sequence[n:]))", "def count_targets(n, s):\n    return sum(s[i] == s[i-n] for i in range(n,len(s)))", "def count_targets(n, sequence):\n    return sum(1 for a, b in zip(sequence, sequence[n:]) if a == b)", "def count_targets(n, seq):\n    return sum( a == b for a,b in zip(seq, seq[n:]))", "def count_targets(n, sequence):\n    return sum(y == x for x, y in zip(sequence, sequence[n:]))", "from collections import deque\n\ndef count_targets(n, sequence):\n    q = deque(sequence[:n], maxlen=n)\n    return sum((x == q[0], q.append(x))[0] for x in sequence[n:])", "def count_targets(n, seq):\n    count = 0\n    for i in range(n,len(seq)):\n        if seq[i] == seq[i-n]: count+=1\n    return count\n", "def count_targets(n, a):\n    return sum(a[i] == a[i-n] for i in range(n, len(a)))", "def count_targets(n, sequence):\n    return sum([1 for i in range(n, len(sequence)) if sequence[i] == sequence[i-n]])", "def count_targets(n, a):\n    res = 0\n    for i, v in enumerate(a):\n        if i - n < 0:\n            continue\n        if v == a[i - n]:\n            res += 1\n    return res"]