["def triangular_range(start, stop):\n    return {i:i*(i+1)/2 for i in range(stop) if start <= i*(i+1)/2 <= stop}\n", "from math import ceil\n\ndef root(n): return ((1+8*n)**.5-1)/2\n\ndef triangular_range(s,e):\n    return {i: -~i*i>>1 for i in range(ceil(root(s)), int(root(e))+1)}", "def triangular_range(start, stop):\n    n = t = 1\n    result = {}\n    while t <= stop:\n        if t >= start:\n            result[n] = t\n        n += 1\n        t = n * (n + 1) // 2\n    return result\n", "from math import ceil, floor, sqrt\n\n\ndef triangular(n):\n    return n * (n + 1) / 2\n\n\ndef quadratic_root(t):\n    return (-1 + sqrt(1 + 8 * t)) / 2\n\n\ndef triangular_range(start, stop):\n    first = int(ceil(quadratic_root(start)))\n    last = int(floor(quadratic_root(stop)))\n\n    result = {}\n    t = triangular(first)\n    for n in range(first, last + 1):\n        result[n] = t\n        t += n + 1\n\n    return result\n", "def triangular_range(start, stop):\n  startn = int(math.ceil(-0.5 + math.sqrt(0.25 + 2 * start)))\n  stopn = int(math.floor(-0.5 + math.sqrt(0.25 + 2 * stop)))\n  return dict((n, n * (n + 1) / 2) for n in range(startn, stopn + 1))", "def tri(number):\n    return int(number * (number+1) / 2)\n    \ndef quadsol(number):\n    return int((math.sqrt(8*number + 1) -1) / 2)\n\ndef triangular_range(start, stop):\n    return {x:tri(x) for x in range(quadsol(start), quadsol(stop)+1) if tri(x) in range(start, stop+1)}", "from bisect import bisect_left, bisect_right\nmemo = [0, 1]\n\ndef triangular_range(start, stop):\n    while memo[-1] <= stop: memo.append(memo[-1] + len(memo))\n    return {i:memo[i] for i in range(bisect_left(memo, start), bisect_right(memo, stop))}", "from math import sqrt\n\ndef triangular_range(start, stop):\n    def get_n(sum):\n        a = int(round((sqrt(8 * sum) - 1) / 2, 0))\n        return a\n\n    return {n: int(n*(n+1)/2) for n in range(get_n(start), get_n(stop) + 1) if start <= int(n*(n+1)/2) <= stop}", "def triangular_range(start, stop):\n    \n    return {n: n * (n + 1) // 2 for n in range(int(start ** .5), stop) if start <= n * (n + 1) // 2 <= stop}", "def triangular_range(start, stop):\n    dict = {}\n    for trial in range(1, stop + 1):\n        triangle_num = sum(range(trial + 1))\n        if  start <= triangle_num <= stop:\n            dict[trial] = triangle_num\n    return dict\n\n"]