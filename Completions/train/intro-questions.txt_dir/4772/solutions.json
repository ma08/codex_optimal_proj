["def name_score(name):\n    scores = {k: v for keys, v in alpha.iteritems() for k in keys}\n    return {name: sum(scores.get(a, 0) for a in name.upper())}", "def name_score(name):\n    return {name: sum(alpha[key] for c in name for key in alpha if c.upper() in key)}", "def name_score(name):\n    up = name.upper()\n    return {name: sum(up.count(c) * v for k, v in alpha.items() for c in k)}", "ALPHA = {c:v for s,v in alpha.items() for c in s}\n\ndef name_score(name):\n    return {name: sum( ALPHA.get(c,0) for c in name.upper() )}", "def name_score(name):\n    score = sum(alpha[key] for key in alpha.keys() for x in name if x.upper() in key)\n    return {name: score}", "def name_score(name):\n    answer=0\n    for character in name:\n        character=character.upper()\n        for key,value in alpha.items():\n            if character in key:\n                answer+=value\n                break\n    return {name:answer}", "def name_score(name):\n    sum = 0\n    for letter in name:\n        k = [key for key in alpha if letter.upper() in key]\n        sum += alpha[k[0]] if k!=[] else 0\n    return {name: sum}", "def name_score(name):\n    score = lambda x: sum(alpha[a] if x in a else 0 for a in alpha)\n    return {name : sum(score(n) for n in name.upper())}", "def name_score(name):\n    return {name: sum(alpha[k] for c in name.upper() for k in alpha if c in k)}", "def name_score(name):\n    score = 0\n    for c in name:\n        for k, v in alpha.items():\n            if c.upper() in k:\n                score += v\n                break\n    return {name:score}"]