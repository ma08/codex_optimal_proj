["class PokeScan:\n    def __init__(self, name, level, pkmntype):\n        self.name = name\n        self.level = level\n        self.pkmntype = pkmntype\n\n    def info(self):\n        level_info = \"weak\" if self.level <= 20 else \"fair\" if self.level <= 50 else \"strong\"\n        pkmntypes_info = {\"water\": \"wet\", \"fire\": \"fiery\", \"grass\": \"grassy\",}\n        return \"{}, a {} and {} Pokemon.\".format(self.name, pkmntypes_info[self.pkmntype], level_info)", "class PokeScan:\n    def __init__(self, name, level, pkmntype):\n        self.name = name\n        self.level = level\n        self.pkmntype = pkmntype\n        \n    @property\n    def element(self):\n        return {'water': 'wet', 'fire': 'fiery', 'grass': 'grassy'}.get(self.pkmntype, '?')\n        \n    @property\n    def strength(self):\n        return 'strong' if self.level > 50 else 'fair' if self.level > 20 else 'weak'\n        \n    def info(self):\n        return '{}, a {} and {} Pokemon.'.format(self.name, self.element, self.strength)", "class PokeScan:\n  def __init__(self, name, level, pkmntype):\n    self.name = name\n    self.level = level\n    self.pkmntype = pkmntype\n\n  def level_description(self):\n    if 20 < self.level <= 50:\n      return 'fair'\n    elif self.level > 50:\n      return 'strong'\n    return 'weak'\n\n  def info(self):\n    return {\n      'water': '{}, a wet and {} Pokemon.',\n      'fire' : '{}, a fiery and {} Pokemon.',\n      'grass': '{}, a grassy and {} Pokemon.'\n    }[self.pkmntype].format(self.name, self.level_description())", "class PokeScan:\n    \n    LVL_CONVERT  = [(20, 'weak'), (50, 'fair'), (float('inf'), 'strong')]\n    TYPE_CONVERT = {'fire': 'fiery', 'water':'wet', 'grass':'grassy'}\n    \n    def __init__(self, name, level, typ):\n        self.name, self.lvl, self.typ = name, level, typ\n    \n    def info(self):\n        return f'{ self.name }, a { self.TYPE_CONVERT[self.typ] } and { self.getLvlKind() } Pokemon.'\n    \n    def getLvlKind(self): return next( v for th,v in self.LVL_CONVERT if self.lvl<=th )", "class PokeScan:\n    def __init__(self, name, level, ptype):\n        self.name = name\n        self.level = level\n        self.ptype = ptype\n    def strength(self):\n        return 'strong' if self.level > 50 else 'fair' if self.level > 20 else 'weak'\n    def obs_type(self):\n        return {'water': 'wet', 'fire': 'fiery', 'grass': 'grassy'}.get(self.ptype, 'unknown')\n    def info(self):\n        return \"%s, a %s and %s Pokemon.\" % (self.name, self.obs_type(), self.strength())", "import enum\n\n\nclass PokemonType(enum.Enum):\n    Water = 1,\n    Fire = 2,\n    Grass = 3\n\n    @classmethod\n    def from_string(cls, type_str):\n        return {\"water\": cls.Water, \"fire\": cls.Fire,\n                \"grass\": cls.Grass}[type_str]\n\n    def __str__(poketype):\n        return {PokemonType.Water: \"wet\", PokemonType.Fire: \"fiery\",\n                PokemonType.Grass: \"grassy\"}[poketype]\n\n\nclass PokeScan(object):\n    def __init__(self, name, level, pokemon_type):\n        self.name, self.level = name, level\n        self.pkmntype = PokemonType.from_string(pokemon_type)\n\n    @property\n    def strength(self):\n        if self.level <= 20:\n            return \"weak\"\n        return \"fair\" if self.level <= 50 else \"strong\"\n\n    def info(self):\n        infos = {\"name\": self.name, \"type\": str(self.pkmntype),\n                 \"strength\": self.strength}\n        return \"{name}, a {type} and {strength} Pokemon.\".format(**infos)\n", "class PokeScan:\n    def __init__(self, name, level, pkmntype):\n        self.name = name\n        self.level = level\n        self.pkmntype = pkmntype\n\n    def info(self):\n        type_words = {'water': 'wet', 'fire':'fiery', 'grass':'grassy'}\n        outstring = self.name + ', a '\n        outstring += type_words.get(self.pkmntype) + ' and '\n        if self.level<=20: outstring += 'weak'\n        elif self.level<=50: outstring += 'fair'\n        else: outstring += 'strong'\n        outstring += ' Pokemon.'\n\n        return outstring", "class PokeScan(object):\n    def __init__(self, name, level, pkmntype):\n        self.name = name\n        if level <= 20:\n            self.level = 'weak'\n        elif level <= 50:\n            self.level = 'fair'\n        else:\n            self.level = 'strong'\n        self.type = {\n            'water': 'wet',\n            'fire': 'fiery',\n            'grass': 'grassy'\n        }[pkmntype]\n\n    def info(self):\n        return '{}, a {} and {} Pokemon.'.format(\n            self.name, self.type, self.level\n        )", "class PokeScan:\n    def __init__(self, name, level, pkmntype):\n        self.info = lambda: \"{}, a {} and {} Pokemon.\".format(name, {'water': 'wet', 'fire': 'fiery', 'grass': 'grassy'}[pkmntype], ['weak', 'fair', 'strong'][(level > 20) + (level > 50)])", "class PokeScan:\n    def __init__(self, name, level, pokemon_type):\n        adjective = {\"water\": \"wet\", \"fire\": \"fiery\", \"grass\": \"grassy\"}[pokemon_type]\n        rank = \"weak\" if level <= 20 else \"fair\" if level <= 50 else \"strong\"\n        self.info = lambda: f\"{name}, a {adjective} and {rank} Pokemon.\""]