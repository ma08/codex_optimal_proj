["from itertools import chain\ndef how_many_bees(hive):\n        return bool(hive) and sum(s.count('bee') + s.count('eeb') for s in map(''.join, chain(hive, zip(*hive))))", "def count(it):\n    return sum(''.join(x).count('bee') + ''.join(x).count('eeb') for x in it)\n\ndef how_many_bees(hive):\n    return count(hive) + count(zip(*hive)) if hive else 0", "def how_many_bees(hive):\n    if  hive == None or len(hive) == 0:\n        return 0\n    result = 0\n    \n    for i in range(len(hive[0])):\n        test = \"\"\n        for item in hive:\n            test += item[i]\n        result += test.count(\"bee\")\n        result += test.count(\"eeb\")\n            \n    for i in range(len(hive)):\n        test = \"\"\n        for item in hive[i]:\n            test += item\n        result += test.count(\"bee\")\n        result += test.count(\"eeb\")\n    return result", "import re\n\ndef how_many_bees(hive):\n    if hive is None: return 0\n    s = ' '.join(''.join(line) for hiveArr in (hive, zip(*hive)) for line in hiveArr)\n    return len(re.findall(r'b(?=ee)|ee(?=b)', s))", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    row_bees = lambda row: sum(1 for i in range(len(row)) if \"\".join(row[i:i+3]) == \"bee\")\n    matrix_bees = lambda matrix: sum(row_bees(row) for row in matrix)\n    v_flip = lambda matrix: [row[::-1] for row in matrix]\n    transpose = lambda matrix: [list(z) for z in zip(*matrix)]\n    return (\n        matrix_bees(hive) + \n        matrix_bees(transpose(hive)) +\n        matrix_bees(v_flip(hive)) + \n        matrix_bees(v_flip(transpose(hive)))\n    )\n", "def how_many_bees(hive):\n    if hive is None:\n        return 0\n    columns = [\"\".join(col) for col in zip(*hive)]\n    hive = [\"\".join(line) for line in hive]\n    return sum(row.count(bee) for bee in (\"bee\", \"eeb\") for rows in (hive, columns) for row in rows)", "def how_many_bees(hive):\n    counter = 0\n    try:\n        for row in hive:\n            for i in range(len(row)-2):\n                if row[i] == 'b' and row[i+1] == 'e' and row[i+2] == 'e':\n                    counter += 1\n                elif row[i] == 'e' and row[i+1] == 'e' and row[i+2] == 'b':\n                    counter += 1\n\n        for column in range(len(hive[0])):\n            for position in range(len(hive)-2):\n                if hive[position][column] == 'b' and hive[position+1][column] == 'e' and hive[position+2][column] == 'e':\n                    counter += 1\n                if hive[position][column] == 'e' and hive[position+1][column] == 'e' and hive[position+2][column] == 'b':\n                    counter += 1\n\n    except:\n        counter = 0\n    return counter", "import re\ndef how_many_bees(b):\n    if b is None:return 0\n    new_temp = [[j for j in i] for i in b]\n    c = [len(re.findall(r\"bee\", \"\".join(i+[' ']+i[::-1]))) for i in new_temp]+[ len(re.findall(r\"bee\", \"\".join(i+tuple(' ')+i[::-1]))) for i in zip(*new_temp)]\n    return sum(c)", "directions = [(1, 0), (-1, 0), (0, -1), (0, 1)]\n\ndef how_many_bees(hive):\n    r, c = (len(hive), len(hive[0])) if hive else (0, 0)\n    def f(s, i, j, di, dj):\n        if not (0 <= i < r and 0 <= j < c and s.startswith(hive[i][j])):\n            return 0\n        s = s[1:]\n        return f(s, i+di, j+dj, di, dj) if s else 1\n    return sum(f('bee', i, j, di, dj) for i in range(r) for j in range(c) for di, dj in directions)", "VARIANTS = ['bee', 'eeb']\n\ndef how_many_bees(hive):\n    count = 0\n    if hive is None:\n        return count\n    rl = len(hive)\n    for i in range(rl):\n        cl = len(hive[i])\n        for j in range(0, len(hive[i])):\n            print(\"i=\", i, \"j=\", j)\n            o = hive[i][j]\n            \n            if j < cl - 2:\n                x1 = hive[i][j + 1]\n                x2 = hive[i][j + 2]\n                x = o + x1 + x2\n                if x in VARIANTS:\n                    count += 1\n            \n            if i < rl -2:\n                y1 = hive[i + 1][j]\n                y2 = hive[i + 2][j]\n                y = o + y1 + y2\n                if y in VARIANTS:\n                    count += 1\n    return count", "def how_many_bees(hive):\n    if hive ==[] or hive ==\"\" or hive== None:\n        return 0\n    result=0\n    for i in range(len(hive)):\n        for k in range(len(hive[i])):\n          if i > 1 and hive[i][k] ==\"b\" :\n               if hive[i-1][k] ==\"e\" and hive [i-2][k] ==\"e\":\n                  result +=1\n          if i <len(hive)-2 and hive[i][k] ==\"b\":\n              if hive[i+1][k] ==\"e\" and hive [i+2][k] ==\"e\":\n                  result +=1\n          if k <len(hive[i])-2 and hive[i][k] ==\"b\":\n              if hive[i][k+1] ==\"e\" and hive [i][k+2] ==\"e\":\n                  result +=1\n          if k > 1 and hive[i][k] ==\"b\":\n              if hive[i][k-1] ==\"e\" and hive [i][k-2] ==\"e\":\n                  result +=1\n            \n    return result\n                \n", "how_many_bees=lambda h:h and sum(map('|'.join(map(''.join,h+list(zip(*h)))).count,('bee','eeb')))or 0", "import re\nhow_many_bees=lambda b:0 if not b else sum([len(re.findall(r\"bee\", \"\".join(i+[' ']+i[::-1]))) for i in b]+[len(re.findall(r\"bee\", \"\".join(i+tuple(' ')+i[::-1]))) for i in zip(*b)])", "def how_many_bees(hive):\n    bees = ('bee', 'eeb')\n    num_of_bees = 0\n    \n    if hive == None:\n        return 0\n    \n    for line in hive:\n        for pos in range(len(line)-2):\n            possible_bee = line[pos] + line[pos+1] + line[pos+2]\n            if possible_bee in bees:\n                num_of_bees +=1\n    for line_idx in range(len(hive)-2):\n       for pos_idx in range(len(hive[line_idx])):\n            possible_bee = hive[line_idx][pos_idx] + hive[line_idx+1][pos_idx] + hive[line_idx+2][pos_idx]\n            if possible_bee in bees:\n                num_of_bees +=1\n    return num_of_bees\n", "def how_many_bees(hive):\n    if hive is None or len(hive) == 0:\n        return 0\n    \n    cnt = 0\n    #rows\n    for row in hive:\n        cnt += ''.join(row).count('bee')\n        cnt += ''.join(row).count('eeb')\n    \n    #columns\n    m, n = len(hive), len(hive[0])\n    \n    cols = [''.join([hive[j][i] for j in range(m)]) for i in range(n)]\n    cnt += sum([i.count('bee') for i in cols])\n    cnt += sum([i.count('eeb') for i in cols])\n    return cnt", "def rotate(matrix):\n    return list(zip(*matrix[::-1]))\n\n\ndef how_many_bees(hive):\n    if hive:\n        s1 = \" \".join([\"\".join(r) for r in hive])\n        s2 = \" \".join([\"\".join(el) for el in rotate(hive)])\n        s = s1 + \" \" + s2\n        return s.count(\"bee\") + s.count(\"eeb\")\n    return 0\n", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    count=0\n    for i in range(len(hive)):\n        for j in range(len(hive[i])-2):\n            compare=\"\".join(hive[i][j:j+3])\n            if compare==\"bee\" or compare==\"eeb\":\n                count+=1\n    for i in range(len(hive)-2):\n        for j in range(len(hive[i])):\n            compare=hive[i][j]+hive[i+1][j]+hive[i+2][j]\n            if compare==\"bee\" or compare==\"eeb\":\n                count+=1\n    return count", "how_many_bees = lambda h: ((lambda m, tm: sum(sum(q.count(a) for q in b) for a in ['bee', 'eeb'] for b in [m, tm]))([''.join(x) for x in h] if h else [],[''.join([h[p][q] for p in range(len(h))]) for q in range(0 if len(h) == 0 else len(h[0]))] if h else []))\n", "def how_many_bees(hive):\n    try:\n        right = sum(line.count('bee') for line in map(''.join, hive))\n        left =  sum(line.count('eeb') for line in map(''.join, hive))\n        down =  sum(line.count('bee') for line in map(''.join,  zip(*hive)))\n        up =    sum(line.count('eeb') for line in map(''.join,  zip(*hive)))\n        return up + down + left + right\n    except TypeError:\n        return 0", "def how_many_bees(hive):\n    return sum(word.count(\"eeb\")+word.count(\"bee\") for word in list(map(lambda x:\"\".join(list(x)),zip(*hive)))+list(map(lambda x:\"\".join(x),hive))) if hive else 0"]