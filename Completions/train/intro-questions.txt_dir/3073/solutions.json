["def increasing_numbers(d):\n    s = 1\n    for i in range(1,10): s=s*(i+d)//i\n    return s", "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef f(ndigits, starting_digit):\n    if ndigits == 0:\n        return 1\n    return sum(f(ndigits-1, i) for i in range(starting_digit, 10))\n    \ndef increasing_numbers(digits):\n    if digits == 0:\n        return 1\n    return sum(f(digits-1, i) for i in range(10))", "from functools import reduce\n\n\ndef increasing_numbers(n):\n    return reduce(int.__mul__, range(n + 1, n + 10)) // 362880", "from functools import reduce\nfrom operator import mul\n\ndef increasing_numbers(digits):\n    return reduce(mul, range(digits+1, digits+10), 1) // 362880", "from math import factorial\nfrom functools import reduce\nimport operator\ndef increasing_numbers(digits):\n    if digits == 0:\n        return 1\n    if digits == 1:\n        return 10\n    consec_pro = reduce(operator.mul, (i for i in range(10, 10 + digits)))\n    return consec_pro / factorial(digits)    ", "from math import factorial\n\ndef nCr(n, r):\n    return factorial(n) // factorial(r) // factorial(n - r)\n\ndef increasing_numbers(digits):\n    return nCr(digits + 9, 9)", "from math import factorial\ndef increasing_numbers(d):\n    return factorial(9 + d) / (factorial(d) * factorial(9)) if d > 0 else 1", "def increasing_numbers(n):\n   return fac(n+9)/(fac(9)*fac(n))\n\ndef fac(n):\n   c=1\n   for i in range(2,n+1):\n      c*=i\n   return c", "from math import factorial\n\ndef increasing_numbers(n):\n    return factorial(n+9)/(factorial(9)*factorial(n))\n", "from math import factorial\ndef increasing_numbers(digits):\n    return factorial(9 + digits) // (factorial(digits) * factorial(9))"]