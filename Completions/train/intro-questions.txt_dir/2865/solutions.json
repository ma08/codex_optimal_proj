["def solution(str):\n  return str[::-1]", "def solution(string):\n    return string[::-1]", "def solution(string):\n    # Pythonic way :)\n    return string[::-1]\n    \n    # For beginners it's good practise \n    # to know how reverse() or [::-1]\n    # works on the surface\n    #for char in range(len(string)-1,-1,-1):\n        #return string[char]\n", "def solution(s):\n    return s[::-1]\n", "solution = lambda s: s[::-1]", "def solution(string):\n    newstring = \"\"\n    letter = len(string) - 1\n    for x in string:\n        x = string[letter]\n        newstring = newstring + x\n        letter = letter -1 \n    return newstring\n", "def solution(string):\n    temp = list(string)\n    temp.reverse()\n    return ''.join(temp)", "def solution(string):\n    return ''.join(i for i in reversed(string))", "def solution(string):\n   one_string_list=list(string)\n   one_string_list.reverse()\n   return''.join(one_string_list)\n", "def solution(string):\n    s1=''\n    for x in string:\n        s1= x+s1\n    return s1 ", "def solution(string):\n    s = list(string)\n    j = len(s)-1\n    for i in range(len(s)):\n        if (i<j):\n            s[i], s[j] = s[j], s[i]\n            j = j-1\n        else:\n            continue\n    s1 = ''.join(s)\n    return s1", "def solution(string):\n    charlist = []\n    res = \"\"\n    for l in string:\n        charlist.append(l)\n    charlist.reverse()\n    for c in charlist:\n        res=res+c\n    return res", "solution = lambda x:x[::-1]", "def solution(string):\n    new_string = \"\"\n    length = len(string)\n    for i in range(0, length):\n        new_string += string[length-1-i]\n    return new_string", "def solution(string):\n    word = string[::-1]\n    return word\n", "def solution(string):\n  return string[::-1]\n  \n# ok znam z poprzednich lekcji\n", "def solution(string):\n\n    lst = []\n    count = 1\n\n    for i in range(0,len(string)):\n\n        lst.append(string[len(string)-count])\n        count += 1\n\n    lst = ''.join(lst)\n    return lst\n\n", "solution=lambda _:_[::-1]    ", "def solution(string):\n    if len(string) == 5:\n      return string[4] + string[3] + string[2] + string[1] + string[0]\n    if len(string) == 4:\n      return string[3] + string[2] + string[1] + string[0]\n    if len(string) == 3:\n      return string[2] + string[1] + string[0]\n    if len(string) == 2:\n      return string[1] + string[0]\n    if len(string) == 1:\n      return string[0]\n    if len(string) == 0:\n      return \"\"\n    pass", "def solution(string):\n    y = \"\"\n    for i in string:\n        y = i+y\n    return y", "solution=lambda s:s[-1::-1]", "def solution(string):\n    reverse = \"\"\n    for i in string:\n        reverse = i + reverse\n    return reverse", "def solution(string: str) -> str:\n    return string[::-1]", "def solution(string):\n    result = ''\n    for chr in string:\n        result = chr + result\n    return result\n\n\nprint(solution('world'))", "def solution(string):\n#     return string[::-1]\n    s = ''\n    for i in string: \n        s = i + s\n    return s ", "solution = lambda string: string[::-1] #I do Lambda -Mr. Stupido", "def solution(str):\n    return ''.join(reversed(str)) #[::-1] a little faster", "def solution(string):\n    print(string)\n    print(string[::-1])\n    return string[::-1]", "def solution(string):\n    word=''\n    for letter in reversed(string):\n        word+=letter\n    return word", "def solution(string):\n    return ''.join(reversed(string))\n", "def solution(string):\n    out = []\n    for i in string:\n        out.insert(-1-string.index(i),i)\n    return ''.join(out)", "def solution(string):\n    #string = \"\".join(reversed(string))\n    return \"\".join(reversed(string))", "def solution(string):\n    s = list(string)\n    l = list(reversed(s))\n    return(str(\"\".join(l)))\n    pass", "def solution(string):\n    value = string[::-1]\n    return value", "def solution(string):\n    listchar=string[::-1]\n    return listchar", "def solution(string):\n    x = list(string)\n    y = x.reverse()\n    z = ''.join(x)\n    return z\n\n", "#1 technique using replace\ndef solution(string):\n    \n    # feed string characters in reverse, see for loop below\n    stringReversal=[]\n    # will hold final reverse string\n    somaReverseString = ''\n    \n    for i in range(len(string)):\n        # replace the forward character order in reverse \n        migratingCharacter = string.replace( string[i], string[-i-1])\n        # append the newly replaced character to stringReversal \n        # captures reverse ordering\n        stringReversal.append(migratingCharacter[i])\n        # undo the replacement, to prevent copying over the original string\n        string.replace( string[i], string[-i-1])\n    \n    # now stringReversal holds the string characters in reverse, as list items\n    \n    for i in stringReversal:\n        somaReverseString += i\n    return somaReverseString\n\n\n#2 more direct proof, skips the replace, \n#feeds reverse ordering directly to the list\ndef solution(string):\n    strings = []\n    soma =''\n    stringLengthRange = list(range(len(string)))\n    for i in stringLengthRange:\n        # index from start is 0, index from end is -1, -\n        # - 1 from stringLengthRange offsets this\n        strings.append(string[-i-1])\n    for i in strings:\n        soma += i\n    return soma\n\n\n\n\n# 3 here is the index-slicing one-liner\ndef solution(string):\n    return string[::-1]\n", "def solution(x):\n    return x [::-1]\n\nmytxt1 = solution(\"\")\n\nprint(mytxt1)\n\n\n\n                       \n", "def solution(string):\n    v = ''\n    for i in reversed(string): v += i\n    return v", "def solution(string):\n    reverse = ''\n    for x in range(len(string)-1, -1, -1):\n        reverse += string[x]\n    return reverse", "def solution(string):\n    #reverse the string using indexing and negative steps\n    return string[-1::-1]", "def solution(word):\n   reversed = word[-1::-1]\n   return reversed\n", "def solution(string):\n    output = \"\"\n    for i in string:\n        output = i + output\n    return output", "def solution(string):\n    # use the built-in list as a stack\n    res = ''\n    flip = list(string)\n    \n    # while the stack has elements\n    while len(flip) > 0:\n        # pop and append to result\n        res += flip.pop()\n        \n    return res", "def solution(statement):\n    return statement[::-1]", "def solution(string):\n    if string==None:\n        return(\"\")\n    else:\n        x=string[::-1]\n    return(\"{}\".format(x))", "def solution(string):\n    length = len(string)\n    reverse = \"\"\n    x = 0\n    for y in string:\n        length = length - 1\n        reverse = reverse + string[length]\n        x=x+1\n    return reverse;\n    pass", "def solution(string):\n    length = len(string)\n    rstring = string[length::-1]\n    return rstring", "def solution(word):\n    newword = ''\n    for letter in word:\n        newword = letter + newword\n    return newword", "def solution(string):\n    words = string.split(' ')\n    reverse_sentence =''.join(reversed(string))\n    return reverse_sentence\n", "def solution(string):\n    #checks if it one char or less and returns the value if so \n    if (len(string) <= 1):\n        return string\n    #reverse the string using a slide statement that starts at the last element to the first and iterates -1\n    else:\n        string = string[::-1]\n        return string", "def solution(string):\n    d=''\n    for i in string:\n        d=i+d\n    return d", "def solution(string):\n    i = len(string) - 1\n    new = string[i::-1] \n    \n    return new", "def solution(string = \"\"):\n    newstring = \"\"\n    for x in string:\n        newstring = x + newstring\n    return newstring", "def solution(string):\n    a=string[::-1]\n    return a\nsolution('world')", "def solution(string):\n    new_string = ''\n    for char in string[ : :-1]:\n        new_string += char\n    return new_string", "def solution(Word):\n    reverse = Word[::-1];\n    return reverse ", "def solution(string):\n    return_string = ''\n    if len(string) > 0:\n        for letter_index in range(len(string)):\n            return_string = string[letter_index] + return_string\n    return return_string", "def solution(string):\n    aux = ''\n    for i in range(len(string)):\n        aux += string[len(string) - i - 1]\n    return aux", "def solution(string):\n    aux = []\n    for i in range(len(string)):\n        aux.append(string[len(string) - i - 1])\n    return ''.join(aux)", "def solution(string):\n    string2 = ''\n    for x in range(0,len(string)):\n        string2 += string[len(string)-x-1]\n    return(string2)", "def solution(string):\n    phrase = ''\n    index = len(string) - 1\n    \n    for x in string:\n        x = string[index]\n        phrase += x\n        index = index - 1\n    return phrase", "def solution(string):\n    return string[::-1] #reverse the string backwards\n    \n    my_string = solution('Hello World!') #call the function with string of your choice\n    \n    print(my_string) #print the result\n", "def solution(string):\n    str_new = str(\"\")\n    for x in string:\n        str_new = x + str_new\n    print (str_new)\n    return str_new\n    pass\n    \n", "def solution(string):\n    i = -1\n    \n    backwards = []\n    \n    #loop through and add the letters backwards to a list\n    while i >= -1 * len(string):\n        backwards.append(string[i])\n        i -= 1\n    #return the list all joined back into a string\n    return(''.join(backwards))\n    \n", "def solution(string):\n    #turn string to list\n    list1 = list(string)\n    #reverse list   \n    reverse1 = reversed(list1)\n    #returned list to string with join\n    reversed_string = ''.join(reverse1)\n    return reversed_string", "def solution(string):\n    word = string[::-1]\n    return word\n\nprint(solution('ambulance'))", "def solution(string):\n   \n        array = list(string)\n        array.reverse()\n        output = ''.join(array)\n        return output\n    \n", "def solution(string):\n    rew = string[::-1]\n    return rew", "def solution(string):\n    reverse = []\n    for char in string:\n        reverse.insert(0, char)\n    return ''.join(reverse)\n", "def solution(string):\n    new_str = \"\"\n    lnum = len(string)\n    for i in range(lnum):\n        new_str = new_str + string[lnum-i-1]\n    return new_str", "def solution(string):\n    list1 = list(string)\n    list1.reverse()\n    string = ''.join(list1)\n    return(string)", "def solution( param):\n    return param[::-1]\n", "def solution(string):\n    pass\n    index = len(string)\n    rev = \"\"\n    while index > 0 :\n        rev += string[index - 1]\n        index = index - 1\n    return (rev)", "def solution(string):\n    len_str = len(string)\n    reverse = []\n    while len_str > 0:\n        reverse += string[len_str - 1]\n        len_str -= 1\n    reverse_str = \"\".join(reverse)\n    return reverse_str", "def solution(string):\n    index=len(string)-1\n    str=\"\"\n    while index >= 0:\n        str=str+string[index]\n        index=index-1\n    return str\n", "def solution(str):\n    str=''.join(reversed(str))\n    return str\n    pass", "def solution(word):\n    reversed_word = \"\"\n    for letter in reversed(word):\n        reversed_word += letter\n    \n    return reversed_word", "def solution(string):\n    a = list()\n    for i in string:\n        a.append(i)\n    a.reverse()\n    c = str()\n    for v in a:\n        c = c + v\n    return c", "def solution(string):\n    #Empty string for holding reversed string\n    reverse = \"\"\n    letter_index = len(string)-1\n    #Loop through for each letter\n    for x in range(len(string)):\n        #The reverse string gets the end letter added to it and then the next earlier one\n        reverse = reverse + string[letter_index]\n        #Move to next letter\n        letter_index-=1\n    return reverse", "import string\ndef solution(string):\n    s = string[::-1]\n    return s", "def solution(string):\n    val = list(string)\n    val.reverse()\n    return ''.join(val)\n\n    \n", "def solution(string):\n    stroka = \"\".join(reversed(string))\n    return stroka", "def solution(x):\n    return x[::-1]\ntxt = solution(\"world\")\nprint(txt)", "def solution(string):\n    word=''\n    for i in range(-len(string),0):\n        word=string[i]+word\n    return word", "def solution(string):\n    \n    a = list(string)\n    \n    for i in range(len(a)//2):\n        if len(a) == 0 or len(a) == 1:\n            break\n        else:\n            tmp = a[i]\n            a[i] = a[len(a) - 1 - i]\n            a[len(a) - 1 - i] = tmp\n            \n    return ''.join(a)\npass", "def solution(string):\n    pass\n    negcount=-1\n    solstring=\"\"\n    for i in range(len(string)):\n        solstring+=string[negcount]\n        negcount=negcount-1\n    print(solstring)\n    return(solstring)\n", "def solution(string):\n    return string[::-1]\nprint(solution('however'))", "def solution(string):\n    rev = ''\n    for i in range(len(string)):\n        rev += string[len(string) - i - 1]\n    return rev", "def solution(string):\n    new_word = ''\n    while string != '':\n        new_word += string[-1]\n        string = string[0:-1]\n\n    return new_word", "def solution(string):\n    return string[::-1]\n    pass\n\na = \"mortiitei\"\nprint(solution(a))", "def solution(string):\n    reverse=''\n    for i in range(len(string)):\n        \n        #this won't work because strings are immutable\n        #reverse[i]=string[-i]\n        \n        #however, you can assign each character to a string\n        reverse=reverse+string[-i-1]\n\n    return reverse", "def solution(string):\n    return string[::-1]\n    \nsolution('hello, world!')", "def solution(string):\n    forwardCharArr = list(string)\n    backCharArr = []\n    \n    for i in range(len(string)-1, -1, -1):\n        backCharArr.append(forwardCharArr[i])\n        \n    reverseWord = ''.join(backCharArr)\n    return reverseWord", "def solution(zin):\n\n    reversedArgs = zin[::-1]\n    return reversedArgs", "def solution(string):\n    return ''.join([s for s in reversed(string)])", "def solution(string):\n    \n    if len(string)==0:\n        return \"\"\n    else:\n        li=[]\n        for i in range(len(string)-1,-1,-1):\n            li.append(string[i])\n        \n        sort = \"\".join(li)\n        return sort\n        \n", "def solution(string):\n    a = [0 for i in range(len(string))]\n    i = len(string)-1\n    for char in string:\n        a[i]=char\n        i-=1\n    return \"\".join(a)", "def solution(string):\n#     pass\n    print(string[::-1])\n    return string[::-1]", "def solution(string):\n    string_length=len(string)\n    reversed_string=string[string_length::-1]\n    return reversed_string"]