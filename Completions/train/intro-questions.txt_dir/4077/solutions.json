["def premier_league_standings(teams):\n    dct = {1: teams[1]}\n    dct.update({i:t for i,t in enumerate(sorted(set(teams.values())-{teams[1]}), 2)})\n    return dct", "def premier_league_standings(teams):\n    order = [teams[1]] + sorted(team for place,team in teams.items() if place!=1)\n    return {place:team for place,team in enumerate(order,1)}", "def premier_league_standings(teams):\n    return {c : n for c, (_, n) in enumerate(sorted(teams.items(), key = lambda t: (t[0] > 1, t[1])), 1)}", "def premier_league_standings(teams):\n    return {i:team[1] for i,team in enumerate(sorted(teams.items(), key=lambda x: (x[0]!=1, x[1])), 1)}", "def premier_league_standings(teams):\n    new = [teams[1]] + sorted(teams[n] for n in range(2, len(teams) + 1))\n    return {i: team for (i, team) in enumerate(new, 1)}", "def premier_league_standings(teams):\n    if len(teams)==1:\n       return teams\n    next_season=[]\n    for key,value in list(teams.items()):\n        if key!=1:\n           next_season.append(value)\n    sorted_nex=sorted(next_season)\n    \n    sorted_dict={}\n    for key,value in enumerate(sorted_nex,2):\n           sorted_dict[1]=teams[1]\n           sorted_dict[key]=value\n    return sorted_dict\n    \n    \n           \n", "def premier_league_standings(teams):\n  ret = {1:teams[1]}\n  for i,name in enumerate(sorted(teams[i] for i in teams.keys() if i != 1)):\n    ret[i+2] = name\n  return ret", "def premier_league_standings(teams):\n    return {i:v for i, v in enumerate([teams[1]] + sorted(v for v in teams.values() if v != teams[1]), 1)}", "def premier_league_standings(teams):\n    lst = [(x, y) for x, y in teams.items()]\n    lst = [y for x, y in lst if x == 1] + sorted([y for x, y in lst if x != 1])\n    return {i: y for i, y in enumerate(lst, 1)}", "def premier_league_standings(teams):\n    t = sorted(teams.items(), key=lambda i:str(i[0]) if i[0]==1 else i[1])\n    return {i+1:t[i][1] for i in range(len(t))}"]