["class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         #brute force:\n         #m = i (i+1) / 2 \n         #i = 0\n         #while True:\n         #    row = i * (i+1) / 2\n         #    if n - row < 0:\n         #        return i - 1\n         #    i += 1\n             \n         # 2m = i (i+1)  \n         # i**2 + i - 2m = 0\n         # i = -1 + sqr(8m) / 2\n         return int((math.sqrt(8*n + 1)-1)/2 ) \n         \n", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return int((math.sqrt(8*n+1)-1)/2)", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return int(((8*n+1)**0.5-1)/2)", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         \n         return int((2 * n + 0.25) ** 0.5 - 0.5)", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         # result = 0\n         # if n < 2 :\n         #     return n\n         # for i in range(1,n+1):\n         #     result += i\n         #     if result > n:\n         #         return i-1\n         \n         return  int(((2*n)+1.0/4)**0.5 - 0.5)\n         \n         \n         \n         \n #         left, right = 0, n\n #         while left <= right:\n #             mid = (left + right) // 2\n #             if self.totalCoins(mid) <= n < self.totalCoins(mid + 1) :\n #                 return mid\n #             elif n < self.totalCoins(mid):\n #                 right = mid\n #             else:\n #                 left = mid + 1\n     \n     \n #     def totalCoins(self, row):\n #         return (1 + row)*row //2\n", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return int(((8*n + 1)**0.5 - 1)/2)", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0:\n             return 0\n         upper = math.ceil(math.sqrt(2 * n))\n         lower = math.floor(math.sqrt(2 * n)) - 2\n         for k in range(lower+1, upper):\n             if (k+1)*k <= 2*n and (k+2)*(k+1) > 2*n:\n                 return k\n", "class Solution(object):\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return int(math.sqrt(2 * n + 0.25) - 0.5)", "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return int((1+8*n)**0.5 - 1) // 2"]