["def three_amigos(numbers):\n    return min(\n        ([a, b, c] for a, b, c in zip(numbers, numbers[1:], numbers[2:]) if a & 1 == b & 1 == c & 1), \n        key=lambda triple: max(triple) - min(triple),\n        default=[])", "three_amigos = lambda a: (sorted(((max(a[i:i+3])-min(a[i:i+3]), a[i:i+3]) for i in range(len(a)-2) if a[i]%2==a[i+1]%2==a[i+2]%2), key=lambda x: x[0])+[(None, [])])[0][1]\n", "from collections import defaultdict\n\n\ndef three_amigos(numbers):\n    candidates = defaultdict(list)\n    for i in range(len(numbers) - 2):\n        triplet = numbers[i:i+3]\n        if len({n % 2 for n in triplet}) == 1:\n            candidates[max(triplet) - min(triplet)].append(triplet)\n    return candidates[min(candidates)][0] if candidates else []\n", "from collections import defaultdict\n\ndef three_amigos(numbers):\n    amigos = defaultdict(list)\n    \n    for i in range(len(numbers)-3 +1):\n        a, b, c = numbers[i:i+3]\n        \n        if a%2 == b%2 == c%2:\n            rnge = max(a, b, c) - min(a, b, c)\n            amigos[rnge].append([a, b, c])\n    \n    return amigos[min(amigos.keys())][0] if amigos else []", "import sys\ndef three_amigos(numbers):\n\n    p1 = 0\n    min_range = sys.maxsize\n    output = None\n    \n    for idx in range(3, len(numbers)+1):\n        slice = numbers[p1:idx]\n        p1 += 1\n        if sameParity(slice):\n            minmax = max(slice) - min(slice)\n            if minmax < min_range:\n                min_range = minmax\n                output = slice\n                \n    return output if output else []\n        \n      \n    \n    \ndef sameParity(arr):\n    even = True if arr[0] % 2 == 0 else False\n    \n    for idx in range(1, len(arr)):\n        if even and arr[idx] % 2 != 0:\n            return False\n        if not even and arr[idx] % 2 == 0:\n            return False\n            \n    return True", "def three_amigos(a):\n    li = []\n    for i in range(len(a) - 2):\n        s = a[i] & 1\n        t = a[i:i + 3]\n        if all(j & 1 == s for j in t):     \n            m = max(t)\n            m_ = min(t)\n            li.append([m - m_, t])\n    return min(li,key=lambda x:x[0],default=[[],[]])[1]", "def three_amigos(numbers):\n    it = (xs for xs in zip(numbers, numbers[1:], numbers[2:]) if len({x % 2 for x in xs}) == 1)\n    return list(min(it, key=lambda xs: max(xs)-min(xs), default=()))", "def three_amigos(numbers):\n    return list(min((a for a in zip(numbers, numbers[1:], numbers[2:]) if sum(b % 2 for b in a) in [0, 3]), key = lambda x : max(x) - min(x), default = []))", "three_amigos=lambda l:min(([a,b,c]for a,b,c in zip(l,l[1:],l[2:])if a%2==b%2==c%2),key=lambda t:max(t)-min(t),default=[])", "three_amigos=lambda a:min([[max(a[i:i+3])-min(a[i:i+3]),a[i:i+3]]for i in range(len(a)-2)if all(j&1==a[i]&1for j in a[i:i+3])],key=lambda x:x[0],default=[[],[]])[1]"]