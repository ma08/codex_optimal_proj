["def count_squareable(n):\n    return n//4 + (n+1)//2", "def count_squareable(n):\n    return round(n * (3/4) - 0.24)\n", "e = 10**-2\n\ndef count_squareable(n):\n    return round(n * 3 / 4 - e)", "count_squareable=lambda n:int(n*.75+0.25)", "def count_squareable(n):\n    return (n - 1) * 3 // 4 + 1", "def count_squareable(n):\n    return int(n * .75 + .25)", "def count_squareable(n):\n    count = 0\n    for number in range(1 , n+1):\n        if number % 4 == 2:\n            count += 1\n    return n - count", "count_squareable=lambda Q:1+3*Q>>2", "archive = []\narchive_values = {0: 0}\ndef count_squareable(n):\n    def solve(nn):\n        return next((1 for x in range(1, int(nn**.5)+1) if not nn%x and x%2==(nn//x)%2), 0)\n    first_ind = next((i for i in reversed(archive) if i<=n), 0)\n    result = sum(solve(i) for i in range(first_ind+1, n+1))+archive_values[first_ind]\n    archive.append(n)\n    archive_values[n] = result\n    return result", "def count_squareable(n):\n    q,r=divmod(n,4)\n    if r<2:\n        num=3*q+r\n    else:\n        num=3*q+r-1\n    return num"]