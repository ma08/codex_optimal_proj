["def calculate(num1, operation, num2): \n    # your code here\n    try :\n        return eval(\"{} {} {}\".format(num1, operation, num2))\n    except (ZeroDivisionError, SyntaxError):\n        return None", "def calculate(num1, operation, num2):\n    ops = {\"+\": (lambda x, y: x + y), \"-\": (lambda x, y: x - y), \"*\": (lambda x, y: x * y), \"/\": (lambda x, y: x / y)}\n    try: return ops[operation](num1, num2)\n    except: return None", "\ndef calculate(num1, operation, num2):\n    try:\n        return eval(f'{num1}{operation}{num2}')\n    except Exception:\n        return", "def calculate(num1, oper, num2): \n    return None if all((oper=='/',num2==0)) else {\n            '+':lambda x,y:x+y,\n            '-':lambda x,y:x-y,\n            '/':lambda x,y:x/y,\n            '*':lambda x,y:x*y,}.get(oper, lambda x,y:None)(num1,num2)\n", "from operator import add, sub, mul, truediv\nD = {'+':add, '-':sub, '*':mul, '/':truediv}\n\ndef calculate(num1, operation, num2): \n    try:\n        return D[operation](num1, num2)\n    except (ZeroDivisionError, KeyError):\n        return", "def calculate(num1, operation, num2):\n    if operation == \"+\":\n        c=num1 + num2\n        return c\n    if operation == \"-\":\n        c=num1 - num2\n        return c\n    if operation == \"*\":\n        c=num1 * num2\n        return c\n    if operation == \"/\":\n        if num2 == 0:\n            c=None\n            return c\n        c=num1 / num2\n        return c\n    else:\n        c=None\n        return c", "from operator import add, sub, mul\ndef calculate(num1, operation, num2): \n    d = {'+': add, '-': sub, '*': mul, '/': lambda a, b: a / b if b else None}\n    return d.get(operation, lambda a, b: None)(num1, num2)", "def calculate(num1, operation, num2): \n    try: \n        return eval(str(num1) + operation + str(num2))\n    except: \n        return None", "def calculate(*args): \n    try:\n        return eval(('').join(map(str, args)))\n    except:\n        return None", "from operator import add, sub, mul, truediv as div\n\noperators = {\n    \"+\": add,\n    \"-\": sub,\n    \"*\": mul,\n    \"/\": div,\n}\n\ndef calculate(n1, op, n2):\n    return operators.get(op, lambda m, n: None)(n1, n2) if f\"{op}{n2}\" != \"/0\" else None"]