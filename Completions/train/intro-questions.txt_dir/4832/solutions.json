["def all_non_consecutive(a):\n    return [{\"i\": i, \"n\": y} for i, (x, y) in enumerate(zip(a, a[1:]), 1) if x != y - 1]", "def all_non_consecutive(arr):\n    answer = []\n    for i in range(len(arr)-1):\n        if arr[i + 1] - arr[i] != 1:\n            answer.append({'i': i + 1, 'n': arr[i + 1]})\n    return answer", "def all_non_consecutive(arr):\n    return [{'i':i+1,'n':b} for i,(a,b) in enumerate(zip(arr,arr[1:])) if b-a!=1]", "def all_non_consecutive(arr):\n    return [{'i': i + 1, 'n': n} for i, n in enumerate(arr[1:]) if arr[i + 1] - arr[i] != 1]", "def all_non_consecutive(arr): #define the function\n    start = 0 #This is a variable which will detect if the number is the first in the list. In that case it won't have a preceding number to be consecutive to it\n    answer = [] #empty list for later use. This will be the list which will contain the answer, i.e, where we will append the non consecutive entries\n    for number in arr: #for loop goes through each entry in the list because we want to check the non consecutive numbers in it\n        if start == 0: #as mentioned before start is a variable set to check if the number presented is the first in the list. If yes, it satisfies the equation\n            current = number #current is a variable which is used to take the number as current after all processes so we can check if the next number is 1 extra than it\n            start = 1 #changes start to 1 so we know that next values aren't first in the list and this never satisfies the if loop after this\n            continue #goes to the start of the start of the loop because it the first number doesn't need to go further\n        elif number != current + 1: #we ignore the consecutive numbers and if the number in the loop right now is not one more than the previous one, this situation is triggered\n            format = {'i' : arr.index(number), 'n' : number} #format is a dictionary which assigns the items and numbers in a format the program wants\n            answer.append(format) #we append the dictionary in the list which will give the answer because the answer needs to be in a list form\n        current = number #same as used before\n    return answer #we done and dusted and return finishes the process. YAY!\n", "def all_non_consecutive(lst):\n    return [{\"i\": i, \"n\": n} for i, n in enumerate(lst[1:], 1) if n != lst[i-1] + 1]", "def all_non_consecutive(arr):\n    return [{'i':i, 'n':n} for i,n in enumerate(arr[1:], 1) if arr[i-1] != n - 1 ]", "def all_non_consecutive(arr):\n    return [ {'n':e, 'i':i} for i,e in enumerate(arr[1:],1) if e - arr[i-1] > 1]\n", "def all_non_consecutive(arr):\n    oldobj = 0    \n    thelist = []\n    for obj, num in zip(arr, range(0,1000)):\n        if oldobj+1 < obj and num != 0:\n            thelist.append({'i':num, 'n':obj})\n        oldobj = obj\n    return thelist", "from itertools import islice\ndef all_non_consecutive(arr):\n    return [{'i': c, 'n':b} for c, (a, b) in enumerate(zip(arr, islice(arr, 1, None)), 1) if a + 1 != b]"]