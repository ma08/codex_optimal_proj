["from collections import Counter\n\ndef odd_one_out(s):\n    d = Counter(reversed(s))\n    return [x for x in d if d[x] % 2][::-1]", "def odd_one_out(s):\n    d = {}\n    for i in s:\n        if i in d:\n            del d[i]\n        else:\n            d[i] = None\n    return list(d.keys())", "from collections import Counter\n\ndef odd_one_out(s):\n    return [k for k, v in Counter(s[::-1]).items() if v % 2][::-1]", "from collections import Counter\n\ndef odd_one_out(stg):\n    return [c for c, n in list(Counter(stg[::-1]).items()) if n % 2][::-1]\n", "def odd_one_out(s):\n    memo = {}\n    for c in s:\n        if c in memo:\n            del memo[c]\n        else:\n            memo[c] = None\n    return list(memo.keys())", "from collections import Counter\ndef odd_one_out(s):\n    return sorted((x for x, i in list(Counter(s).items())if i%2), key=s.rfind)\n", "def odd_one_out(s):\n    k = {}\n    out = []\n    \n    for x in s:\n        k[x] = k.get(x, 0) + 1\n    \n    odd_list = [x for x in s if k[x]%2==1]\n\n    for x in odd_list:\n        if k[x] == 1:\n            out.append(x)\n        else:\n            k[x] = k.get(x)-1\n    \n    return out", "odd_one_out=lambda s:[c for c,n in __import__('collections').Counter(s[::-1]).items()if n&1][::-1]", "from collections import Counter, OrderedDict\ndef odd_one_out(s):\n    return list(reversed([item[0] for item in OrderedDict(Counter(s[::-1])).items() if int(item[1])%2==1]))", "def odd_one_out(s):\n    from collections import Counter\n    c = Counter(s)\n    ans = []\n    for i in s[::-1]:\n        try:\n            if c[i] % 2 == 1:\n                ans.append(i)\n                del c[i]\n        except:\n            pass\n                \n    return ans[::-1]"]