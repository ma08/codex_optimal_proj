["def predict(candidates, polls):\n    x = zip(*[list(map(lambda i: i * weight, poll)) for poll, weight in polls])\n    x = list(map(round1, (map(lambda i: sum(i) / sum([i[1] for i in polls]), x))))\n    return dict(zip(candidates,x))", "def predict(candidates, polls):\n    weight = sum(w for _, w in polls)\n    scores = zip(*([s * w for s in r] for r, w in polls))\n    return dict(zip(candidates, (round1(sum(s)/weight) for s in scores)))", "from operator import itemgetter\nfrom numpy import average\n\ndef predict(candidates, polls):\n    votes = zip(*map(itemgetter(0), polls))\n    weights = list(map(itemgetter(1), polls))\n    return {x:round1(average(next(votes), weights=weights)) for x in candidates}", "def predict(cnd, p):\n    res,wt = list(zip(*p))\n    return {j:round1(sum(k*l for k,l in zip(list(zip(*res))[i],wt)) / sum(wt)) for i,j in enumerate(cnd)}", "def predict(cnd, p):\n    wt, res, polls = [], [], {}\n    \n    for i in p:\n        wt.append(i[1])\n        res.append(i[0])\n    \n    wt_sum, res = sum(wt), list(zip(*res))\n    \n    for i,j in enumerate(cnd):\n        polls[j] = round1(sum(k*l for k,l in zip(res[i],wt)) / wt_sum)\n    \n    return polls", "def predict(candidates, polls):\n    total_weight = sum(w for p, w in polls)\n    return {\n        c: round1(sum(ps[i] * w for ps, w in polls) / total_weight)\n        for i, c in enumerate(candidates)\n    }", "import math\ndef predict(candidates, polls):\n    t ={}\n    for i,j in enumerate(candidates):\n        m = 0\n        n = 0\n        for z in polls:\n            n += z[1]\n            m += z[0][i]*z[1]\n        t[j]= round1(m/n)\n    return t", "def predict(candidates, polls):\n    res = dict()\n    for i in range(len(candidates)):\n        p = 0\n        s = 0\n        for poll in polls:\n            p += poll[0][i]*poll[1]\n            s += poll[1]\n        res[candidates[i]] = round1(p/s)\n    return res", "predict=lambda cs, ps: {c: round1(sum(p[0][i]*p[1] for p in ps)/sum(p[1] for p in ps)) for i,c in enumerate(cs)}", "def predict(candidates, polls):\n    wts = [i[1] for i in polls]\n    return dict(zip(candidates, (map(lambda z: round1(sum(a*b for (a,b) in (zip(z, wts)))/sum (wts)), zip(*(i[0] for i in polls))))))"]