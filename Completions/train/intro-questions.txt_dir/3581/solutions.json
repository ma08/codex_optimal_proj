["def sea_sick(sea):\n    return \"Throw Up\" if (sea.count(\"~_\") + sea.count(\"_~\"))/len(sea) > 0.2 else \"No Problem\"", "def sea_sick(sea):\n    changes = sum(1 for a,b in zip(sea,sea[1:]) if a!=b)\n    return \"No Problem\" if changes*5 <= len(sea) else \"Throw Up\"", "def sea_sick(sea):\n    waves = sum(sea[i: i + 2] in \"_~_\" for i in range(len(sea) -1))\n    if waves / float(len(sea)) > 0.2:\n      return \"Throw Up\"\n    return \"No Problem\"\n", "from operator import truediv\n\n\ndef sea_sick(s):\n    result = sum(s[a:a + 2] in '_~_' for a in range(len(s) - 1))\n    if truediv(result, len(s)) > 0.2:\n        return 'Throw Up'\n    return 'No Problem'\n", "def sea_sick(sea):\n    return \"Throw Up\" if (sea.count(\"~_\") + sea.count(\"_~\")) > 0.2*len(sea) else \"No Problem\"", "sea_sick=lambda s:[\"No Problem\",\"Throw Up\"][s.count('~_')+s.count('_~')>.2*len(s)]", "def sea_sick(sea):\n    return 'Throw Up' if sum(x != y for x, y in zip(sea, sea[1:])) / len(sea) > 0.2 else 'No Problem'", "sea_sick = lambda s: ['No Problem','Throw Up'][sum(__import__(\"itertools\").starmap(str.__ne__, zip(s, s[1:]))) / len(s) > 0.2]", "sea_sick=lambda s: [\"No Problem\",\"Throw Up\"][(s.count(\"~_\")+s.count(\"_~\"))/float(len(s))>0.2]", "def sea_sick(sea):\n    c,p = 0,sea[0]\n    for s in sea[1:]:\n        if s != p:\n            c += 1\n        p = s\n    return 'Throw Up' if c/len(sea) > 0.2 else 'No Problem'"]