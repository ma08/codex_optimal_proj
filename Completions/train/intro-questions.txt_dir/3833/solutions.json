["def longest(a1, a2):\n    return \"\".join(sorted(set(a1 + a2)))", "def longest(s1, s2):\n    return ''.join(sorted((set(s1+s2))))", "def longest(s1, s2):\n    # your code\n    \n    # Defining the Alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Concatenating the Two Given Strings\n    s = s1 + s2\n    \n    # Declaring the Output Variable\n    y = \"\"\n    \n    # Comparing whether a letter is in the string\n    for x in alphabet:\n      if x not in s:\n        continue\n      if x in s:\n        y = y + x\n        \n    # returning the final output    \n    return y", "def longest(s1, s2):\n    return ''.join(sorted(set(s1) | set(s2)))", "def longest(s1, s2):\n    # your code\n    distinct = set(s1+s2) # sets are distinct values! \n    distinctSorted = sorted(distinct) # turn into sorted list\n    return ''.join(distinctSorted) # concatenate to string with 'join'", "def longest(s1, s2):\n    return ''.join(sorted(set(s1).union(s2)))\n", "def longest(s1, s2):\n    x=''\n    y=sorted(s1+s2)\n    \n   \n    \n    for i in y:\n      if i not in x:\n        x += i\n        \n    return x # your code", "def longest(s1, s2):\n    set1 = set(s1)\n    set2 = set(s2)\n    return \"\".join(sorted(set1 | set2))", "import itertools\ndef longest(s1, s2):\n    longest = \"\"\n    for i in s1: \n        if i not in longest:\n            longest += i\n    for i in s2:\n       if i not in longest:\n            longest += i \n    return ''.join(sorted(longest))", "def longest(s1, s2):\n    freq = {}\n    for c in list(s1):\n        freq[c] = freq.get(c, 0) + 1\n    for c in list(s2):\n        freq[c] = freq.get(c, 0) + 1\n    l = sorted([c for c in list(freq.keys())])\n    return ''.join(l)", "def longest(s1, s2):\n    letters_count = [0] * 26\n    for letter in s1:\n        letters_count[ord(letter) - 97] += 1\n    for letter in s2:\n        letters_count[ord(letter) - 97] += 1\n    result = []\n    for i in range(26):\n        if letters_count[i] > 0:\n            result.append(chr(i+97))\n    return ''.join(result)", "def longest(s1, s2):\n    results = []\n    for records in s1:\n        if records not in results:\n            results.append(records)\n    for records in s2:\n        if records not in results:\n            results.append(records)\n    results = sorted(results)\n    return \"\".join(results)\n", "def longest(s1, s2):\n    return ''.join(sorted(list(dict.fromkeys(s1+s2))))", "def longest(s1, s2):\n    return \"\".join([x for x in \"abcdefghijklmnopqrstuvwxyz\" if x in s1+s2])", "longest = lambda x,y: ''.join(sorted(set(x+y)))", "def longest(s1, s2):\n    new_string = set(s1 + s2)\n    sort_string = sorted(new_string)\n    return \"\".join(s for s in sort_string)\n    \n    # your code\n", "import string\n\ndef longest(s1, s2):\n    \n    comb = []\n    alphabet = {}\n    ind = 0\n    \n    for letter in s1:\n        if letter in comb:\n            pass\n        else:\n            comb.append(letter)\n    \n    for letters in s2:\n        if letters in comb:\n            pass\n        else:\n            comb.append(letters)\n    \n    lowerCase = list(string.ascii_lowercase)\n    \n    for letters in lowerCase:\n        ind+=1\n        alphabet[letters] = ind\n    \n    for x in range(len(comb)):\n        for i in range(len(comb)-1):\n            if alphabet[comb[i]] > alphabet[comb[i+1]]:\n                comb[i], comb[i+1] = comb[i+1], comb[i]\n\n    comb = ''.join(comb)\n    \n    return comb", "def longest(s1, s2):\n    insieme = set()\n    for char in (s1+s2):\n        insieme.add(char)\n    return \"\".join(sorted(insieme))", "def longest(s1, s2):\n    result = ''\n    for i in sorted(set(list(set(s1)) + list(set(s2)))):\n        result += i\n    return result", "def longest(s1, s2):\n    new_str = ''.join([s1,s2])\n    s = list(new_str)\n    s = list(set(s))\n    s.sort()\n    result = ''.join(s)\n    return result\n    \n"]