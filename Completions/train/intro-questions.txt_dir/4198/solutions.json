["def simplify(n):\n    for d in range(int(n ** .5), 0, -1):\n        if not n % d ** 2: break\n    if d*d == n: return '%d' % d\n    elif d == 1: return 'sqrt %d' % n\n    else: return '%d sqrt %d' % (d, n // d ** 2)\n\ndef desimplify(s):\n    x, _, y = s.partition('sqrt')\n    return int(x or '1') ** 2 * int(y or '1')", "def simplify(n):\n    sq = next(k for k in range(int(n**0.5), 0, -1) if n % (k*k) == 0)\n    rt = n // (sq * sq)\n    return str(sq) if rt == 1 else f\"{sq if sq > 1 else ''} sqrt {rt}\".strip()\n\ndef desimplify(s):\n    rt, _, sq = (int(n.replace(\"sqrt\", \"\") or 1) for n in s.partition(\"sqrt\"))\n    return rt * rt * sq", "def simplify(n):\n    div, sq, root = 2, 1, 1\n    while div <= n:\n        r = 0\n        while n % div == 0:\n            n //= div\n            r += 1\n        sq *= div ** (r // 2)\n        root *= div ** (r % 2)\n        div += 1 + (div != 2)\n    return (\n        f'{sq}' if root == 1 else\n        f'sqrt {root}' if sq == 1 else\n        f'{sq} sqrt {root}'\n    )\n    \ndef desimplify(s):\n    xs = ([int(x.strip() or 0) for x in s.split('sqrt')] + [0])[:2]\n    return (xs[0] ** 2 * xs[1]) or (xs[0] ** 2 + xs[1])", "def simplify(n):\n    d = max(m for m in range(1, int(n**0.5)+1) if m*m <= n and n % (m*m) == 0)\n    r = n // (d*d)\n    return str(d) if r == 1 else \"sqrt {}\".format(r) if d == 1 else \"{} sqrt {}\".format(d, r)\n\ndef desimplify(s):\n    d, r = s.split(\"sqrt\") if \"sqrt\" in s else (s, \"1\")\n    d = d if d else \"1\"\n    return int(d)*int(d)*int(r)", "from math import sqrt\ndef simplify(n):\n        li = [i for i in range(2,n) if n%i==0 and sqrt(i)==int(sqrt(i))]\n        return (f\"{int(sqrt(li[-1]))} sqrt {n // li[-1]}\" if li else f\"sqrt {n}\") if sqrt(n) != int(sqrt(n)) else f\"{int(sqrt(n))}\"\ndef desimplify(s):\n    s = s.split()\n    try : return int(pow(int(s[0]), 2)) * (int(s[-1]) if len(s)>1 else 1)\n    except : return int(s[1])", "def simplify(n):\n    if (n ** 0.5) % 1 == 0: \n        return f\"{int(n**0.5)}\"\n    d = 1\n    r = n\n    for i in range(n//2, 1,-1):\n        if n % i == 0 and (i**0.5) % 1 == 0:\n            r = n // i\n            d = int(i**0.5)\n            break\n    return f\"{d} sqrt {r}\" if d > 1 else f\"sqrt {r}\"\n\ndef desimplify(s):\n    if s.find(\"sqrt\") == -1: \n        return int(s) ** 2\n    elif s.count(\" \") == 1:\n        return int(s[s.index(\" \")+1: ])\n    else:\n        n1 = int(s[:s.index(\" \")])\n        n2 = int(s[s.rindex(\" \")+1: ])\n        return n1**2 * n2\n", "def simplify(n):\n\n    for i in range(int(n**.5),1,-1):\n        if not n%(i*i):\n            s = f'{i} sqrt {n//(i*i)} '\n            break\n    else:\n        s = f' sqrt {n} '\n\n    return s.replace(' sqrt 1 ','').strip() or '1'\n\ndef desimplify(s):\n    s = s.split()\n    if len(s)==3:\n        a,b = map(int,(s[0],s[-1]))\n        return a*a*b\n    if len(s)==1:\n        return int(s[-1])**2\n    return int(s[-1])", "import re\nfrom collections import Counter\n\ndef prime_factor(n):\n    if n == 1:\n        return Counter([1])\n    factors = Counter()\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors[i] += 1\n            n //= i\n    if n != 1:\n        factors[n] = 1\n    return factors\n\n\ndef simplify(n):\n    a, b = 1, 1\n    for k, v in prime_factor(n).items():\n        while v >= 2:\n            a *= k\n            v -= 2\n        b = b * k if v else b\n    if a == 1:\n        return f'sqrt {b}' if b > 1 else '1'\n    if b == 1:\n        return str(a)\n    return f'{a} sqrt {b}'\n\n\ndef desimplify(s):\n    res = re.match(r'(\\d+ ?)?(sqrt (\\d+))?', s)\n    a, b = res.group(1), res.group(3)\n    ans = int(a)**2 if a else 1\n    return ans * int(b) if b else ans", "import re\n\ndef simplify(n: int) -> str:\n    def inner(n):\n        for i in range(2, n):\n            div, mod = divmod(n, i * i)\n            if not mod:\n                sq1, sq2 = inner(div)\n                return (i * sq1, sq2)\n            if not div:\n                break\n        return (1, n)\n    a, b = inner(n)\n    if b == 1:\n        return f'{a}'\n    elif a != 1:\n        return f'{a} sqrt {b}'\n    else:\n        return f'sqrt {b}'\n\ndef desimplify(s: str) -> int:\n    m = re.match(r'(?P<INT>\\d+)?(?: )?(?:sqrt (?P<SQRT>\\d+))?', s)\n    x, y = m.groups()\n    return int(x or '1') ** 2 * int(y or '1')"]