["INSTRUCTIONS = {\"0F12\": int.__add__, \"B7A2\": int.__sub__, \"C3D9\": int.__mul__}\n\ndef communication_module(packet):\n    header,inst,d1,d2,footer = (packet[i:i+4] for i in range(0,20,4))\n    res = max(0, min(9999, INSTRUCTIONS[inst](int(d1), int(d2)) ))\n    \n    return f\"{header}FFFF{res:0>4}0000{footer}\"", "import re\nfrom operator import add, sub, mul\n\ninstructions = {\n    '0F12': add,\n    'B7A2': sub,\n    'C3D9': mul,\n}\n\ndef communication_module(packet):\n    header, instruction, data1, data2, footer = re.findall('....', packet)\n    result = instructions[instruction](int(data1), int(data2))\n    return '{}FFFF{:04}0000{}'.format(header, min(max(result, 0), 9999), footer)", "def communication_module(p):\n    return '%sFFFF%04i0000%s' % (p[:4], max(min(eval(p[8:12].lstrip('0') + {'0F12':'+', 'B7A2':'-', 'C3D9':'*'}[p[4:8]] + p[12:16].lstrip('0')), 9999), 0), p[-4:])", "def communication_module(packet):\n    header, footer = packet[:4], packet[-4:]\n    instr, rvalue = packet[4:8], 'FFFF'\n    data1, data2 = packet[8:12], packet[12:16]\n    \n    if instr == '0F12':\n        calc = int(data1) + int(data2)\n    elif instr == 'B7A2':\n        calc = int(data1) - int(data2)\n    elif instr == 'C3D9':\n        calc = int(data1) * int(data2)\n        \n    if calc > 9999:\n        calc = 9999\n    elif calc < 0:\n        calc = 0\n        \n    rstring = f'{header}{rvalue}{calc:04d}0000{footer}'\n    \n    return rstring", "def communication_module(packet):\n    part = [packet[i:i+4] for i in range(0, len(packet), 4)]\n    d = {'0F12':'+','B7A2':'-','C3D9':'*'}\n    res = eval(f'{int(part[2])}{d[part[1]]}{int(part[3])}')\n    res = max(0, min(res, 9999))\n    return part[0]+f'FFFF{str(res).zfill(4)}0000'+part[4]", "from operator import add,sub,mul\ndef communication_module(packet):\n    part = [packet[i:i+4] for i in range(0, len(packet), 4)]\n    res = {'0F12':add,'B7A2':sub,'C3D9':mul}[part[1]](int(part[2]), int(part[3]))\n    res = max(0, min(res, 9999))\n    return part[0]+f'FFFF{str(res).zfill(4)}0000'+part[4]", "import operator\n\nfuncs = {'0F12': operator.add, 'B7A2': operator.sub, 'C3D9': operator.mul}\n\ndef communication_module(packet):\n    instruction, one, two = packet[4:8], int(packet[8:12]), int(packet[12:16])\n    \n    result = funcs[instruction](one, two)\n    \n    if result > 9999:\n        result = 9999\n    elif result < 0:\n        result = 0\n    \n    return '{}FFFF{:0>4}0000{}'.format(packet[:4], result, packet[16:])", "def communication_module(packet):\n    header, instruction, data1, data2, footer = packet[:4], packet[4:8], int(packet[8:12]), int(packet[12:16]), packet[-4:]\n\n    operations  = {'0F12': data1 + data2, 'B7A2': data1 - data2, 'C3D9': data1 * data2}\n    calc_str = str(min(9999,max(0,operations[instruction]))).zfill(4)\n    \n    instruction, data2R = 'F' * 4, '0' * 4\n    return header + instruction + calc_str + data2R + footer", "def communication_module(packet):\n    # your code\n    calc = 0\n    if packet[4:8] == \"0F12\":\n        calc = int(packet[8:12]) + int(packet[12:16])\n    elif packet[4:8] == \"B7A2\":\n        calc = int(packet[8:12]) - int(packet[12:16])\n    elif packet[4:8] == \"C3D9\":\n        calc = int(packet[8:12]) * int(packet[12:16])\n    \n    if calc < 0: \n        calc = \"0000\"\n    elif calc > 9999:\n        calc = \"9999\"\n    \n    return packet[0:4] + \"FFFF\" + str(calc).zfill(4) + \"0000\" + packet[16:20]\n", "def communication_module(s):\n    result = str(max(0, min(int(s[8:12]) + int(s[12:16]) if s[4] == '0' else int(s[8:12]) - int(s[12:16]) if s[4] == 'B' else int(s[8:12]) * int(s[12:16]), 9999)))\n    return s[:4] + \"FFFF\" + '0' * (4 - len(result)) + result + \"0000\" + s[-4:]"]