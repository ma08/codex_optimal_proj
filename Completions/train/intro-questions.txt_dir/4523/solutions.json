["def solve(n):\n    x = str(n)\n    res = [x] + [str(int(x[:i]) - 1) + '9' * (len(x) - i) for i in range(1, len(x))]\n    return int(max(res, key=lambda x: (sum(map(int, x)), int(x))))", "def dig_sum(n):\n    return sum(map(int, str(n)))\n\ndef solve(n):\n    candidates = [n] + [ n // 10**i * 10**i - 1 for i in range(1, len(str(n))) ]\n    return max(candidates, key=dig_sum)", "from typing import List, Union\ndef digit_sum(n: Union[List[int], int]) -> int:\n    \"\"\"\n    Finds the digit sum of the digits in an integer or list of positional integers\n    \"\"\"\n    if isinstance(n, list):\n        return sum(n)        \n    return sum(int(ch) for ch in str(n))\n\ndef to_int(arr: List[int]) -> int:\n    \"\"\"\n    Converts an array of positional integers into a single integer\n    \"\"\"\n    return int(''.join(str(n) for n in arr))\n\ndef bump(arr, i):\n    \"\"\"\n    Takes the digits of an array and increments the digit at index i and decrements the digit at \n    index i + 1.\n    E.g. bump([1, 2, 8, 4], 1) -> [1, 2+1, 8-1, 4] -> [1, 3, 7, 4]\n    \"\"\"\n    return arr[:i] + [arr[i] + 1] + [arr[i + 1] - 1] + arr[i+2:]\n\ndef solve(n: int) -> int:\n    \"\"\"\n    Find the largest number <= n with the maximum digit sum\n    \"\"\"\n    s = str(n)\n    # Decrement the first digit and convert all others to 9 as a baseline\n    option = [int(s[0]) - 1] + [9] * (len(s) - 1)\n    if digit_sum(option) > digit_sum(n):\n        for i in range(len(option) - 1):\n            # Keep bumping digit i in option while still a single digit and the int value <= n\n            while True:\n                if option[i] == 9:\n                    break\n                b = bump(option, i)\n                if to_int(b) > n:\n                    break\n                option = b\n        return to_int(option)\n    return n", "def solve(n):\n    s = str(n)\n    l = len(s)\n    if l == 1 or (l == 2 and s[1] in {\"8\", \"9\"}):\n        return n\n    for i in range(l-1):\n        if s[i+1] != \"9\":\n           return int(f\"{s[:i]}{int(s[i]) - 1}{'9' * (l - i - 1)}\")\n", "def solve(n): return max([n]+[n-n%10**i-1 for i in range(len(str(n)))],key=lambda n:(sum(map(int,str(n))),n))", "from math import log10, ceil\n\ndef solve(n):\n    return max([n] + [n-n%10**x-1 for x in range(ceil(log10(n)))], key=lambda n: sum(map(int, str(n))))", "solve=lambda n:(lambda s:int(max((str(int(s[:i])-(i<len(s)))+'9'*(len(s)-i)for i, d in enumerate(s,1)),key=lambda s:(sum(map(int,s)),s))))(str(n))", "\ndef solve(n):\n    total = sum_digit(n)\n    largest = n\n    i = 1\n    while n > 0:\n        n = n - (n % (10)**i) -1\n        print(n)\n        new_total = sum_digit(n)\n        i += 1\n        if new_total > total:\n            total = new_total\n            largest = n\n    return largest\n\ndef sum_digit(num):\n    tot = 0\n    while num > 0:\n        tot += (num % 10)\n        num = int(num /10)\n    return tot \n        \n        \n", "def digit_sum(num):\n    tot = 0\n    while num > 0:\n        tot += (num % 10)\n        num = int(num /10)\n    return tot \n\ndef solve(n):\n    total = digit_sum(n)\n    largest = n\n    print(n)\n    i = 1\n    while n > 0:\n        n = n - (n % (10)**i) -1\n        new_total = digit_sum(n)\n        i += 1\n        if new_total > total:\n            total = new_total\n            largest = n\n    return largest", "def solve(n):\n    b = [int(str(n)[0]) - 1] + [9 for x in str(n)[1:]]\n    digsum = sum(b)\n    if digsum <= sum([int(x) for x in str(n)]):\n        return n\n    for i in range(len(str(n))-1, -1, -1):\n        a = [int(x) for x in str(n)[:i]] + [int(str(n)[i]) - 1] + [9 for x in str(n)[i+1:]]\n        print((i,a))\n        if sum(a) == digsum:\n            break\n    return int(\"\".join([str(x) for x in a]))\n"]