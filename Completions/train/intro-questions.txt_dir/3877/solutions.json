["FROM   = \"abc def ghi jkl mno pqrs tuv wxyz\".split()\nTO_NUM = \"222 333 444 555 666 7777 888 9999\".split()\n\nTABLE_TO_NUM  = str.maketrans( *map(''.join, (FROM, TO_NUM)) )\nTABLE_TO_CHAR = str.maketrans( *map(lambda lst: ''.join(x[0] for x in lst), (TO_NUM, FROM)))\n\n\ndef T9(words, seq):\n    return ( [w for w in words if seq == w.lower().translate(TABLE_TO_NUM)]\n                or [seq.translate(TABLE_TO_CHAR)] )", "CHR_TO_NUM = str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"22233344455566677778889999\")\nNUM_TO_CHR = str.maketrans(\"23456789\", \"adgjmptw\")\n\ndef T9(words, seq):\n    return [word for word in words if word.lower().translate(CHR_TO_NUM) == seq] \\\n            or [seq.translate(NUM_TO_CHR)]", "D = {c:i for c, i in zip('abcdefghijklmnopqrstuvwxyz', '22233344455566677778889999')}\n\ndef T9(words, seq):\n    r = [w for w in words if ''.join(D[c] for c in w.lower()) == seq]\n    return r if r else [''.join({i:c for i, c in zip('23456789', 'adgjmptw')}[i] for i in seq)]", "def T9(words,seq):\n    ans=[]\n    for i in words:\n        if i.lower().translate(str.maketrans('abcdefghijklmnopqrstuvwxyz','22233344455566677778889999')) == seq:\n            ans += [i]\n    return ans if ans else [seq.translate(str.maketrans('23456789','adgjmptw'))]\n", "d = dict(zip('123456789',[' ']+'ABC DEF GHI JKL MNO PQRS TUV WXYZ'.split()))          \nT9=lambda w,p:[i for i in w if all(k in d[l] for k,l in zip(i.upper(),p))]or[''.join(d[i][0] for i in p).lower()]", "def T9(words, seq):\n    X, res = ['', '', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz'], \"\"\n    for i,c in enumerate(map(int, seq)):\n        words = [w for w in words if w[i].lower() in X[c]]\n        res += X[c][0]\n    return words or [res]", "layout = ['', '', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz']\nletters = {c: str(n) for n, cs in enumerate(layout) for c in cs}\n\ndef T9(words, seq):\n    return ([word for word in words if ''.join(letters[c] for c in word.lower()) == seq]\n            or [''.join(layout[i][0] for i in map(int, seq))])", "def T9(words,seq):\n    result = []\n    seq = list(seq)\n    numToword(int(seq[0]))\n    for word in words:\n        if (isWord(word,seq)):\n            result.append(word)\n    if(len(result)):\n        return result\n    red = \"\"\n    for i in seq:\n        red += numToword(int(i)-1)[0]\n    result.append(red.lower())\n    return result\n        \ndef numToword(num):\n    return ([\" \",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQRS\",\"TUV\",\"WXYZ\",\"\"])[num]\n# Return true if we can write this word with this leters\ndef isWord(word,num):\n    if(len(word) != len(num)):\n        return False\n    for i_n in range(len(word)):\n        if (word[i_n].upper() in numToword(int(num[i_n])-1))==False:\n            return False\n    return True", "def T9(words, seq):\n    d = {}\n    sym = list(map(chr, range(97,123)))\n    for x in range(2, 10):\n        q = sym[:(3, 4)[x in(7, 9)]]\n        sym = sym[(3, 4)[x in(7, 9)]:]\n        d[str(x)] = q\n    s = zip(words,map(iter, [x.lower()for x in words]))\n    return [w for w, i in s if all(next(i)in d[x] for x in seq)] \\\n           or [''.join(d[x][0] for x in seq)]", "mapping = {'2': \"abc\", \n           '3': \"def\", \n           '4': \"ghi\",\n           '5': \"jkl\",\n           '6': \"mno\",\n           '7': \"pqrs\",\n           '8': \"tuv\",\n           '9': \"wxyz\"}\n\ndef T9(words, seq):\n    return [word for word in words if len(word) >= len(seq) and all(word[i].lower() in mapping[n] for i, n in enumerate(seq))] or [\"\".join(mapping[i][0] for i in seq)]"]