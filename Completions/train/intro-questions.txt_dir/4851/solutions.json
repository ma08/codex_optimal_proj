["from distutils.version import LooseVersion\n\n\ndef sort_ranks(ranks):\n    return sorted(ranks, key=LooseVersion)\n", "def sort_ranks(ranks):\n    return sorted(ranks, key=lambda x: map(int, x.split('.')))", "def sort_ranks(ranks):\n  return sorted(ranks, key=lambda s: tuple(int(x) for x in s.split('.'))) #", "def sort_ranks(ranks):\n  return sorted(ranks, key=lambda s: tuple(int(x) for x in s.split('.')))", "def sort_ranks(ranks):\n    return sorted(ranks, key=lambda r: [int(n) for n in r.split(\".\")])", "def sort_ranks(ranks):\n    return sorted(ranks, key = lambda x: tuple(map(int, x.split('.'))))", "def sort_ranks(ranks):\n    return sorted(ranks, key=lambda x: [int(y) for y in x.split('.')])", "def sort_ranks(ranks):\n    return sorted(ranks, key=lambda s: list(map(int, s.split('.'))))", "sort_ranks=lambda li,A=lambda li:max(li,key=lambda x:(int(x.split(\".\")[0]),x)).split(\".\")[0]:sum([sorted([k for k in li if k.split(\".\")[0]==str(i)])for i in range(1,int(A(li))+1)],[])", "import re\ndef sort_ranks(ranks):\n    return sorted(ranks, key=lambda x: float(re.sub(\"(?<=\\.\\d)(\\.)\", \"\", x)))"]