["def smaller(arr):\n    # Good Luck!\n    return [len([a for a in arr[i:] if a < arr[i]]) for i in range(0, len(arr))]\n", "def smaller(arr):\n    return [sum(b < a for b in arr[i + 1:]) for i, a in enumerate(arr)]\n", "def smaller(arr):\n    return [sum(x > y for y in arr[i+1:]) for i, x in enumerate(arr)]", "def smaller(arr):\n    return [sum(j < v for j in arr[i:]) for i, v in enumerate(arr)]", "def smaller(arr):\n    a = []\n    counter = 0\n    for j in range(len(arr)):\n        j = arr[0]\n        for k in arr:\n            if j > k:\n                counter += 1\n        a.append(counter)\n        counter = 0\n        arr.remove(arr[0])\n    return(a)\n", "def smaller(arr):\n    return [sum(1 for right in arr[i+1:] if right<item) for i,item in enumerate(arr)]", "def smaller(nums):\n    i = 0; res = []\n    while i < len(nums):\n        j = i + 1; nb = 0\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                nb += 1\n            j += 1\n        res.append(nb)\n        i += 1\n    return res", "# modified merge sort counting left > right cases\ndef countsort(arr, cntarr, cntdict):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        leftcount = cntarr[:mid]\n        right = arr[mid:]\n        rightcount = cntarr[mid:]\n         \n        countsort(left, leftcount, cntdict)\n        countsort(right, rightcount, cntdict)\n        \n        i = 0\n        j = 0\n        k = 0\n        while( i < len(left) and j < len(right) ):\n            if left[i] > right[j]:\n                arr[k] = right[j]\n                \n                # increase count of smaller elem\n                for n in range(i, len(left)):\n                    temp = leftcount[n]\n                    cntdict[temp] = cntdict[temp] + 1\n                \n                # updates position of indices wrt original position \n                cntarr[k] = rightcount[j]\n                j = j + 1\n            else:\n                arr[k] = left[i]\n                cntarr[k] = leftcount[i]\n                i = i + 1\n\n            k = k + 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            cntarr[k] = leftcount[i]\n            i = i + 1\n            k = k + 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            cntarr[k] = rightcount[j]\n            j = j + 1\n            k = k + 1\n            \ndef smaller(arr):\n    # list of relative position of original list\n    posarr = [i for i in range(len(arr))]\n\n    # dictionary of counts of smaller elem\n    cntdict = {i:0 for i in range(len(arr))}\n\n    # sorts arr and keeps count of smaller elem actions \n    countsort(arr, posarr, cntdict)   \n\n    soln = []\n    for i in range(len(arr)):\n        soln.append(cntdict[i])\n\n    return soln\n"]