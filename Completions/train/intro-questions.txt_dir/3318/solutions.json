["def number_of_carries(a, b):\n    ans, carrie = 0, 0\n    while a > 0 or b > 0:\n        carrie = (a%10 + b%10 + carrie) // 10 \n        ans += [0,1][carrie > 0]\n        a //= 10\n        b //= 10\n    return ans", "def number_of_carries(a, b):\n    i=1\n    carry_over=0\n    counter=0\n    length1=len(str(a))\n    length2=len(str(b))\n    if length1>length2:\n        while length2-i>=0:\n            if int(str(a)[length1-i])+int(str(b)[length2-i])+carry_over>=10:\n                counter+=1\n                carry_over=1\n                i+=1\n            else:\n                carry_over=0\n                i+=1\n        while length1-i>=0:\n            if int(str(a)[length1-i])+carry_over>=10:\n                counter+=1\n                carry_over=1\n                i+=1\n            else:\n                carry_over=0\n                i+=1\n    elif length2>length1:\n        while length1-i>=0:\n            if int(str(a)[length1-i])+int(str(b)[length2-i])+carry_over>=10:\n                counter+=1\n                carry_over=1\n                i+=1\n            else:\n                carry_over=0\n                i+=1\n        while length2-i>=0:\n            if int(str(b)[length2-i])+carry_over>=10:\n                counter+=1\n                carry_over=1\n                i+=1\n            else:\n                carry_over=0\n                i+=1\n    elif length2==length1:\n        while length1-i>=0:\n            if int(str(a)[length1-i])+int(str(b)[length2-i])+carry_over>=10:\n                counter+=1\n                carry_over=1\n                i+=1\n            else:\n                carry_over=0\n                i+=1\n    return counter\n    \n", "def number_of_carries(a, b):\n    a, b, c, r = [int(x) for x in f\"000000{a}\"], [int(x) for x in f\"000000{b}\"], 0, 0\n    for x, y in zip(reversed(a), reversed(b)):\n        c = x + y + c > 9\n        r += c\n    return r", "from itertools import zip_longest\nhelp = lambda n: map(int, reversed(str(n)))\n\ndef number_of_carries(a, b):\n    carry = res = 0\n    for x,y in zip_longest(help(a), help(b), fillvalue=0):\n        tmp = x + y + carry\n        res += tmp > 9\n        carry = tmp // 10\n    return res", "from itertools import zip_longest\ndef number_of_carries(a, b):\n    carry,li = [0],[]\n    for i, j in zip_longest(str(a)[::-1], str(b)[::-1], fillvalue='0'):\n        s = int(i) + int(j) + carry[-1]\n        li.append(s % 10)\n        if s > 9 : carry.append(int(str(s)[0])) ; continue\n        carry.append(0)\n    return carry.count(1)", "from itertools import zip_longest\n\ndef number_of_carries(a, b):\n    x, y = str(a)[::-1], str(b)[::-1]\n    result = c = 0\n    for a, b in zip_longest(map(int, x), map(int, y), fillvalue=0):\n        c = (a + b + c) > 9\n        result += c\n    return result", "def number_of_carries(a, b):\n    a, b = str(a)[::-1], str(b)[::-1]\n    l = max(len(a), len(b))\n    carry, carries = 0, 0\n    for col in [int(m)+int(n) for m, n in zip(f\"{a:<0{l}s}\", f\"{b:<0{l}s}\")]:\n        carry = (col + carry) > 9\n        carries += carry\n    return carries", "def number_of_carries(a, b):\n    # Reverse and align\n    a, b = str(a)[::-1], str(b)[::-1]\n    while len(a) < len(b):\n        a += '0'\n    while len(a) > len(b):\n        b += '0'\n    # Perform base 10 addition\n    carry, carries = 0, 0\n    for ad, bd in zip(a, b):\n        ad, bd = int(ad), int(bd)\n        nd = ad + bd + carry\n        if nd > 9:\n            carry = (nd - (nd % 10)) // 10\n            carries += 1\n        else:\n            carry = 0\n    return carries\n", "def number_of_carries(a, b):\n    c = [0]\n    while a or b:\n        c, a, b = c + [(c[-1] + a % 10 + b % 10) // 10], a // 10, b // 10\n    return sum(c)", "number_of_carries=r=lambda a,b,c=0:a+b+c and c+r(a//10,b//10,a%10+b%10+c>9)"]