["def bracket_pairs(string):\n    brackets = {}\n    open_brackets = []\n\n    for i, c in enumerate(string):\n        if c == '(':\n            open_brackets.append(i)\n        elif c == ')':\n            if not open_brackets:\n                return False\n            brackets[open_brackets.pop()] = i\n\n    return False if open_brackets else brackets\n", "def bracket_pairs(string):\n    res, open = {}, []\n    for i,c in enumerate(string):\n        if c == '(':\n            open.append(i)\n        if c == ')':\n            try:\n                res[open.pop()] = i\n            except IndexError:\n                return False\n    return not open and res", "def bracket_pairs(stg):\n    open, dic = [], {}\n    for i, e in enumerate(stg):\n        if e =='(':\n            open.append(i)\n        if e == ')':\n            if not open:\n                return False\n            dic[open.pop(-1)] = i\n    return False if open else dic\n\n", "def bracket_pairs(s):\n    a, d = [], {}\n    for i, x in enumerate(s):\n        if x == \"(\":\n            a.append(i)\n        if x == \")\":\n            if not a: return 0\n            d[a.pop()] = i\n    return not a and d", "def bracket_pairs(string):\n    result = {}\n    stack = []\n    for i, c in enumerate(string):\n        if c == ')':\n            if not stack:\n                return False\n            result[stack.pop()] = i\n        elif c == '(':\n            stack.append(i)\n    if stack:\n        return False\n    return result", "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)\n\ndef bracket_pairs(s):\n    l = len(s);\n    stack = Stack(); i = 0; res = {}; flag = True\n    while i < l and flag:\n        if s[i] == \"(\": stack.push(i)\n        elif  s[i] == \")\":\n            if stack.is_empty(): flag = False\n            else: \n                a = stack.pop()\n                res[a] = i\n        i += 1\n    if flag and stack.is_empty(): return res\n    return False", "def bracket_pairs(strng):\n    matching_indexes = {}\n    open_indexes = []\n    for i, a in enumerate(strng):\n        if a == '(':\n            open_indexes.append(i)\n        elif a == ')':\n            try:\n                matching_indexes[open_indexes.pop()] = i\n            except IndexError:\n                return False\n    return matching_indexes if not open_indexes else False\n", "def bracket_pairs(string):\n    opened = []\n    result = {}\n    for i, ch in enumerate(string):\n        if ch == \"(\": \n            opened.append((ch, i))\n        elif ch == \")\":\n            if not opened: return False\n            result[opened[-1][1]] = i\n            opened = opened[:-1]\n    \n    return False if opened else result\n", "def bracket_pairs(string):\n    ob, res = [], {}\n    \n    for n,e in enumerate(string):\n        if e == '(':\n            ob.append(n)\n        elif e == ')':\n            if not ob:\n                return False\n            res[ob.pop()] = n\n    return False if ob else res"]