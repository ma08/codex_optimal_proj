["class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        set1={}\n        \n        sum1=0\n        for i in dominoes:\n\n            ri=list(reversed(i))\n            i=tuple(i)\n            ri=tuple(ri)\n            if i in set1.keys():\n                sum1+=set1[i]\n                set1[i]+=1\n            elif ri in set1.keys():\n                sum1+=set1[ri]\n                set1[ri]+=1\n            else:\n                set1[i]=1\n        return sum1", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        lst = [tuple(sorted(d)) for d in dominoes]\n        dct = dict((x,lst.count(x)) for x in set(lst))\n\n        y = sum(list([(x*(x-1)/2) for x in list(dct.values())]))\n        return int(y)\n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        lst = [tuple(sorted(d)) for d in dominoes]\n        counts = [lst.count(x) for x in set(lst)]\n        # return int(sum(map(lambda x: (x*(x-1)/2), counts)))\n        return int(sum([x*(x-1)/2 for x in counts]))\n        \n        \n        \n        \n        x = [1,2,3]\n        y = map(lambda a: a+2, x)\n        print(list(y))", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        c = collections.Counter()\n        for i in dominoes:\n            c[tuple(sorted(i))] += 1\n            \n        return sum(math.comb(i, 2) for i in c.values()) ", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        count = 0\n#         for i in range(len(dominoes)-1):\n#             for j in range(i+1,len(dominoes)):\n#                 if (dominoes[i][0]==dominoes[j][0] and dominoes[i][1]==dominoes[j][1] ) or (dominoes[i][0]==dominoes[j][1] and dominoes[i][1]==dominoes[j][0] ):\n#                     count+=1\n                    \n#         return count\n    \n        mydict = {}\n        for dom in dominoes:\n            if ''.join(str(dom)) in mydict:\n                mydict[''.join(str(dom))] += 1\n            elif  ''.join(str(dom[::-1])) in mydict:\n                mydict[''.join(str(dom[::-1]))] += 1\n            else:\n                mydict[''.join(str(dom))] = 1\n        for val in list(mydict.values()):\n            if val > 1:\n                count += val*(val-1)//2\n\n        return count\n\n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        for i in range(len(dominoes)):\n            dominoes[i] = tuple(sorted(dominoes[i]))\n            \n        ans = 0\n        \n        for i in set(dominoes):\n            d = dominoes.count(i)\n            if d > 1:\n                ans += d*(d-1) // 2\n        return ans", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        \n        for i in range(len(dominoes)):\n            dominoes[i] = tuple(sorted(dominoes[i]))\n        ans = 0\n        for i in set(dominoes):\n            t = dominoes.count(i)\n            ans += t*(t-1)//2\n        return ans", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        # d=dict()\n        # res=0\n        # for i,j in dominoes:\n        #     if(str([i,j]) in d):\n        #         d[str([i,j])]+=1\n        #         res+=d[str([i,j])]\n        #     elif(str([j,i]) in d):\n        #         d[str([j,i])]+=1\n        #         res+=d[str([j,i])]\n        #     else:\n        #         d[str([i,j])]=0\n        # return res\n        d={}\n        res=0\n        for i in dominoes:\n            i=sorted(i)\n            if(str(i) not in d):\n                d[str(i)]=0\n            d[str(i)]+=1\n            if(d[str(i)]>1):\n                res+=d[str(i)]-1\n        print(d)\n        return res", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        return sum(d * (d - 1) // 2 for d in Counter(tuple(sorted(domino)) for domino in dominoes).values())", "from collections import defaultdict\n\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        # ans = 0\n        # dominoes = sorted([sorted(i) for i in dominoes])\n        # # print(dominoes)\n        # prev = dominoes.pop()\n        # cnt = 0\n        # tot = 0\n        # while dominoes:\n        #     curr = dominoes.pop()\n        #     # print('curr ', curr)\n        #     if curr == prev:\n        #         cnt += 1\n        #         tot += cnt\n        #     else:\n        #         ans += tot\n        #         tot, cnt = 0, 0\n        #     prev = curr\n        # return ans + tot\n                \n        \n        # step 1: count the dominoes\n        d = {}\n        for domi in dominoes:\n            p = tuple(sorted(domi))\n            if p in d:\n                d[p] += 1\n            else:\n                d[p] = 1\n        # step 2: caculate the pairs. for each pair, number of pairs = n*(n-1)//2\n        c = 0\n        for n in list(d.values()):\n            s = n*(n-1)//2\n            c += s\n        return c\n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        s=[]\n        for i in range(len(dominoes)):\n            \n            dominoes[i]=sorted(dominoes[i])\n            if dominoes[i] not in s:\n                s.append(dominoes[i])\n        re=0\n        def fac(n):\n            if n==0:\n                return 1\n            if n<3:\n                return n\n            return n*fac(n-1)\n        for r in s:\n            c=dominoes.count(r)\n            re+=int(fac(c)/(fac(c-2)*2))\n            \n        print(dominoes,s,re)\n        return re", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        dominoes_dict = {}\n        for i in [frozenset(domino) for domino in dominoes]:\n                if i not in dominoes_dict:\n                    dominoes_dict[i] = 1\n                else:\n                    dominoes_dict[i] += 1 \n        \n        return sum([int((n*(n-1))/2) for n in list(dominoes_dict.values()) if n > 1])\n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        dominoes_dict = {}\n        for i in dominoes:\n            j = frozenset(i)\n            if j not in dominoes_dict:\n                dominoes_dict[j] = 1\n            else:\n                dominoes_dict[j] += 1 \n        \n        return sum([int((n*(n-1))/2) for n in list(dominoes_dict.values()) if n > 1])\n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        \n        dicts = defaultdict(int)\n        ans = 0\n\n        for domi in dominoes:\n            dicts[tuple(sorted(domi))] += 1\n            \n        for n in dicts.values():\n            ans += n * (n - 1) // 2\n        \n        return ans", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        collection = defaultdict(int)\n        count = 0\n        for i in dominoes:\n            pair = frozenset(i)\n            count+=collection[pair]\n            collection[pair]+=1\n                \n        \n        return count", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        from collections import defaultdict\n        counter = defaultdict(int)\n        for domino in dominoes:\n            counter[tuple(sorted(domino))] +=1\n        return sum([v*(v-1)//2 for v in counter.values()])", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        # step 1: count the dominoes\n        d = {}\n        for dom in dominoes:\n            p = tuple(sorted(dom))\n            if p in d:\n                d[p] += 1\n            else:\n                d[p] = 1\n        # step calculate it \n        c = 0\n        for n in d.values():\n            s = n*(n-1)//2\n            c += s\n        return c            ", "from math import comb\nclass Solution:\n    #def convert(self,list) -> int: \n    #    res = int(\\\"\\\".join(map(str, list))) \n    #    return res     \n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        hashtable = {}\n        for d in dominoes:\n            new = tuple(sorted(d))\n            if(new not in list(hashtable.keys())):\n                hashtable[new] = 1\n            else:\n                hashtable[new] += 1\n        counter = 0\n        print(hashtable)\n        for k,v in list(hashtable.items()):\n            if v >= 2:\n                counter += (comb(v,2))\n                \n                \n        return counter\n            \n", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        d = {}\n        for domi in dominoes:\n            p = tuple(sorted(domi))\n            if p in d:\n                d[p] += 1\n            else:\n                d[p] = 1\n        c = 0\n        for n in d.values():\n            s = n*(n-1)//2\n            c += s\n        return c", "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n#         # Ot(n^2) where n = len(dominoes)\n#         # Os(1)\n#         count, n = 0, len(dominoes)\n#         for i in range(n - 1):\n#             for k in range(i + 1, n):\n#                 count += dominoes[i] == dominoes[k] or dominoes[i] == list(reversed(dominoes[k]))\n                    \n#         return count\n        \n#         # Ot(n) where n = len(dominoes)\n#         # Os(n)\n        \n#         count_dict = {}\n#         total_count = 0\n#         for d1, d2 in dominoes:\n#             if (d1, d2) in count_dict:\n#                 count_dict[(d1, d2)] += 1\n#                 total_count += count_dict[(d1, d2)] - 1\n#             elif (d2, d1) in count_dict:\n#                 count_dict[(d2, d1)] += 1\n#                 total_count += count_dict[(d2, d1)] - 1\n#             else:\n#                 count_dict[(d1, d2)] = 1\n                \n#         return total_count\n\n\n        # Ot(n) where n = len(dominoes)\n        # Os(n)\n        \n        count_dict = {}\n        total_count = 0\n        for d in dominoes:\n            d = tuple(sorted(d))\n            if d in count_dict:\n                total_count += count_dict[tuple(d)]\n                count_dict[d] += 1\n            else:\n                count_dict[d] = 1\n\n        return total_count\n            \n"]