["def pattern(n):\n    lines = []\n    for i in range(1, n + 1):\n        line = ' ' * (n - i)\n        line += ''.join(str(j % 10) for j in range(1, i + 1))\n        line += line[::-1][1:]\n        lines.append(line)\n    return '\\n'.join(lines + lines[::-1][1:])\n", "def pattern(n):\n    lines = []\n    for c in range(1,n+1):\n      s = (' ' * (n-c)) + ''.join([str(s)[-1] for s in range(1,c+1)])\n      lines += [s + s[::-1][1:]]\n    lines += lines[::-1][1:]\n    return '\\n'.join(str(x) for x in lines)\n", "def pattern(n):\n    result = []\n    for i in range(1, n + 1):\n        nums = \"\".join([str(j % 10) for j in range(1, i + 1)])\n        result.append(\" \" * (n - i) + nums + nums[::-1][1:] + \" \" * (n - i))\n    return \"\\n\".join(result + result[::-1][1:])", "def pattern(n):\n    mid = ''\n    nums = '1234567890'*n\n    for i in range(n):\n        mid += nums[i]\n    mid += mid[-2::-1]\n\n    d = []\n    for i in range(n-1):\n        d.append(''.join(mid.rsplit(mid[i:-i-1], 1)).center(2*n-1))\n    d.append(mid)\n    for j in d[-2::-1]:\n        d.append(j)\n    \n    return '\\n'.join(d)", "def pattern(n):\n    if n < 1: return \"\"\n    \n    s = \"1234567890\" * (n//10 + 1)\n    width = 2 * n - 1\n    \n    triangle = [(s[:i+1] + s[:i][::-1]).center(width) for i in range(n)]\n    \n    return \"\\n\".join(triangle + triangle[:-1][::-1])", "from itertools import chain, cycle, islice\n\ndef pattern(n):\n    w = 2*n - 1\n    def f():\n        for i in chain(range(1, n+1), range(n-1, 0, -1)):\n            xs = ''.join(islice(cycle('1234567890'), i))\n            yield (xs + xs[-2::-1]).center(w)\n    return '\\n'.join(f())", "def pattern(n):\n    l, s = 2*n-1, ''.join(str(x%10) for x in range(1,n+1))\n    lst = [ (s[:-i or n]+s[:-i-1][::-1]).center(l) for i in range(n) ]\n    return '\\n'.join(lst[1:][::-1]+lst)", "mkP = lambda y: str(y % 10)\nrow = lambda n, x: \" \" * (n - x - 1) + \"\".join(map(mkP, range(1, x + 1))) + \"\".join(map(mkP, range(x + 1, 0, -1))) + \" \" * (n - x - 1)\ndef pattern(n):\n  pyramid = [row(n, x) for x in range(n - 1)]\n  return '\\n'.join(pyramid + [row(n, n - 1)] + list(reversed(pyramid)))"]