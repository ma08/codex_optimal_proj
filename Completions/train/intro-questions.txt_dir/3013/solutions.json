["def delete_digit(n):\n    s = str(n)\n    return int(max(s[:i] + s[i+1:] for i in range(len(s))))", "def delete_digit(n):\n    # we just need to remove the last digit of a decreasing sequense of digits\n    liststrn = list(str(n))\n    for i in range(len(liststrn)):\n        try:\n            if liststrn[i+1] > liststrn[i]:\n                return int(''.join(liststrn[:i] + liststrn[i+1:]))\n        except IndexError:\n            return int(''.join(liststrn[:-1]))", "def delete_digit(n):\n    for z in range(len(str(n)) - 1):\n        if int(str(n)[z]) < int(str(n)[z+1]):\n            return int(str(n)[:z] + str(n)[z+1:])\n    return int(str(n)[:-1])", "def delete_digit(n):\n  n = str(n)\n  res = 0\n  for i in range(len(n)):\n      digit = int(n[0:i]+n[i+1:])\n      if digit > res:\n          res = digit\n  return res\n      \n", "from itertools import combinations\ndef delete_digit(n):\n  return max(int(''.join(i)) for i in list(combinations(str(n),len(str(n))-1)))", "def delete_digit(n):\n    s = str(n)\n    return max(int(f\"{s[:i]}{s[i+1:]}\") for i in range(len(s)))", "def delete_digit(n):\n      max = 0\n      str_n = str(n)\n      for i in range(len(str_n)):\n          temp = str_n[:i] + str_n[i+1:]\n          if max < int(temp):\n              max = int(temp)\n      return max", "def delete_digit(n):\n    n, i = str(n), 0\n    while i < len(n)-1 and n[i] >= n[i+1]: i += 1\n    return int(n[:i] + n[i+1:])", "def delete_digit(n):\n    return max([int(''.join([ch for index, ch in enumerate(str(n)) if index != str(n).index(i)])) for i in str(n)])", "def delete_digit(n):\n  numbers=[]\n  nl=list(str(n))\n  for i in range(len(nl)):\n      del nl[i]\n      number=int(\"\".join(nl))\n      numbers.append(number)\n      nl=list(str(n))\n  numbers.sort()\n  numbers=numbers[::-1]\n  return numbers[0]\n  \n"]