["def min_sum(arr):\n    arr = sorted(arr)\n    return sum(arr[i]*arr[-i-1] for i in range(len(arr)//2))", "def min_sum(arr):\n    arr.sort()\n    left, right, res = 0, len(arr) - 1, 0\n    while left < right:\n        res += arr[left] * arr[right]\n        left += 1\n        right -= 1\n    return res", "def min_sum(arr):\n    lst = sorted(arr)\n    return sum(lst[i] * lst[-i-1] for i in range(len(lst)//2))", "def min_sum(arr):\n    # Your code here\n    ans = 0\n    while len(arr)>0:\n        ans += max(arr)*min(arr)\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return ans", "def min_sum(arr):\n    return sum(x * y for x, y in zip(sorted(arr)[::2], sorted(arr)[-1::-2]))", "min_sum=lambda a:a.sort()or sum(a[i]*a[-i-1]for i in range(len(a)//2))", "def min_sum(arr):\n    arr.sort()\n    return sum(i * arr.pop() for i in arr)", "def min_sum(arr):\n    arr.sort()\n    return sum(a * b for a,b in zip(arr[:len(arr) // 2], arr[::-1]))", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum([ e1*e2 for e1,e2 in zip( arr[:len(arr)//2], arr[::-1][:len(arr)//2] ) ])\n", "def min_sum(arr):\n    arr_for_sum = []\n    while len(arr) > 0:\n        min_elem = min(arr)\n        max_elem = max(arr)\n        arr_for_sum.append(min_elem * max_elem)\n        arr.remove(max_elem)\n        arr.remove(min_elem)\n    return sum(arr_for_sum)", "def min_sum(arr):\n    arr = sorted(arr)\n    l=len(arr)//2\n    return sum(a*b for a,b in zip(arr[:l], arr[l:][::-1]))", "def min_sum(arr):\n    sum = 0\n    reduced_arr = arr\n    iters = int(len(arr)/2)\n    for i in range(iters):\n        sum += min(reduced_arr) * max(reduced_arr)\n        reduced_arr.remove(min(reduced_arr))\n        reduced_arr.remove(max(reduced_arr))\n    return sum", "def min_sum(arr):\n    sorted_arr = sorted(arr)\n    ml = len(sorted_arr)//2\n    i = 0\n    sum = 0\n    while i < ml:\n        sum += sorted_arr[i] * sorted_arr[-i-1]\n        i += 1\n    return sum", "min_sum=lambda a:a.sort()or sum(x*y for x,y in zip(a,a[::-1]))//2", "def min_sum(arr):\n    arr.sort()\n    return sum(x*y for x,y in zip(arr[len(arr)//2:], arr[:len(arr)//2][::-1]))\n", "def min_sum(arr):\n    a = sorted(arr)\n    if len(a) == 0:\n        return 0\n    return (a[0]*a[-1]) + min_sum(a[1:-1])", "def min_sum(arr):\n    return (sum(sorted(arr)[i]*sorted(arr)[len(arr)-1-i] for i in range(len(arr)))/2)", "def min_sum(arr):\n    return rec(sorted(arr))\n    \ndef rec(arr, n = 0):\n    return n if not arr else rec(arr , n + arr.pop(0) * arr.pop(-1))", "def min_sum(arr):\n    arr.sort()\n    s = 0\n    while arr:\n        s += (arr.pop() * arr.pop(0))\n    return s", "def min_sum(arr):\n    john = str(sorted(arr)).replace(']','').replace('[','')\n    juan = john.split(',')\n    joe = 0\n    while len(juan)>0:\n        joe += (int(juan[0])*int(juan[-1]))\n        juan.pop(0)\n        juan.pop(-1)\n    return joe", "def min_sum(arr):\n    ret = 0\n    arr = sorted(arr)\n    while arr: ret += (arr.pop(0) * arr.pop(-1))\n    return ret\n", "def min_sum(arr):\n    total = 0\n    for i, j in zip(sorted(arr),sorted(arr, reverse = True)):\n        total += i*j\n    return total/ 2", "min_sum=lambda a:a.sort()or sum(x*y for x,y in zip(a,a[::-1]))/2", "def min_sum(arr):\n    halflig = len(arr)//2\n    arr.sort()\n    \n    return sum(arr[x] * arr[-(x + 1)] for x in range(halflig))", "def min_sum(arr):\n    sum_list = []\n    arr = sorted(arr)\n    for i in range(len(arr) // 2):\n        sum_list.append(arr[i] * arr[-(i + 1)])\n    return sum(sum_list)", "def min_sum(arr):\n    return sum(sorted(arr)[i]*sorted(arr)[-i-1] for i in range(len(arr)//2))", "min_sum=lambda arr: (lambda s: sum(v*s[-i-1] for i,v in enumerate(s[:len(s)//2])))(sorted(arr))", "def min_sum(arr):\n    sum = 0\n    arr.sort()\n    for i in range(len(arr)//2):\n        sum += arr[i]*arr[-1-i]\n    return sum", "def min_sum(arr):\n    nums1 = sorted(arr)\n    nums2 = sorted(arr, reverse = True)\n    return sum([nums1[i] * nums2[i] for i in range(len(nums1)//2)])\n", "def min_sum(arr):\n    nums1 = sorted(arr)\n    nums2 = sorted(arr, reverse = True)\n    return sum([nums1[i] * nums2[i] for i in range(len(nums1))])/2", "def min_sum(arr):\n    arr = sorted(arr)\n    n = 0\n    while len(arr)>0:\n        n += arr.pop(0)*arr.pop()\n        \n    return n", "def min_sum(arr):\n    arr = sorted(arr)\n    n = 0\n    while len(arr)>0:\n        x = arr.pop(0)\n        y = arr.pop()\n        n += x*y\n        \n    return n", "def min_sum(arr):\n    summa = 0\n    arr.sort()\n    for i in range(len(arr) // 2):\n        summa += arr[i] * arr[-i - 1]\n    \n    return summa", "from itertools import combinations\n\ndef min_sum(arr):\n    s_arr = sorted(arr)\n    n = len(arr) // 2\n    l = [*zip(s_arr[:n], s_arr[-1:-n-1:-1])]\n    return sum(x*y for x,y in l)", "def min_sum(arr):\n    l1 = sorted(arr)\n    return sum(l1[i] * l1[~i] for i in range(len(arr)//2))", "def min_sum(arr):\n    sum_numbers = 0\n    n = int(len(arr)/2)\n    for operation in range(n):\n        b = max([i for i in arr])\n        c = min([i for i in arr])\n        v = b*c\n        sum_numbers = sum_numbers + v\n        arr == arr.remove(b)\n        arr == arr.remove(c)\n    return sum_numbers\n    \n    # Your code here\n    pass", "def min_sum(a):\n    a.sort()\n    return sum(a[i]*a[~i] for i in range(len(a)//2))", "def min_sum(arr):\n    total = 0\n    while arr:\n        m,n = max(arr), min(arr)\n        total += arr.pop(arr.index(m))*arr.pop(arr.index(n))\n    return total", "def min_sum(arr):\n    total = 0\n    lowest_number = int(arr[0])\n    biggest_number = int(arr[0])\n    while len(arr) > 0:\n        for i in arr:\n            if i < lowest_number:\n                lowest_number = i\n            elif i > biggest_number:\n                biggest_number = i\n            \n        total += biggest_number * lowest_number\n        \n        print(arr)\n        \n        arr.pop(arr.index(lowest_number))\n        arr.pop(arr.index(biggest_number))\n\n        \n        if len(arr) >= 2:\n            lowest_number = int(arr[0])\n            biggest_number = int(arr[0])\n        \n    return(total)", "def min_sum(arr):\n    arr = sorted(arr)\n    s = [arr[i] * arr[-i - 1] for i in range(len(arr) // 2)]\n    return sum(s)", "def min_sum(arr):\n    summ = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        summ += arr[i] * arr[len(arr)-1-i]\n    return summ / 2", "def min_sum(arr):\n    lst = []\n    for i in range(len(arr) // 2):\n        lst.append(sorted(arr)[-i - 1] * sorted(arr)[i])\n    return sum(lst)", "def min_sum(arr):\n    arr = sorted(arr)\n    product = []\n    for i in range(len(arr) // 2):\n        product.append(arr[-i - 1] * arr[i])\n    return sum(product)", "def min_sum(arr):\n    lst = []\n    \n    arr = sorted(arr)\n    \n    for i in range(len(arr) // 2):\n        lst.append(arr[-i-1] * arr[i])\n    return sum(lst)\n", "\ndef min_sum(arr):\n    sort_arr = sorted(arr)\n    i = 0\n    sum = 0\n    while i < len(arr)/2:\n        sum += (sort_arr[i]*sort_arr[-(i+1)])\n        i +=1\n    return sum", "def min_sum(arr):\n    arr.sort()\n    return sum(arr[x]*arr[-x-1] for x in range(int(len(arr)/2)))\n\n", "def min_sum(arr):\n    arr = sorted(arr)\n    result = 0\n    for i in range(len(arr)//2):\n        result += arr[i]*arr[0-(i+1)]\n    return result", "def min_sum(arr):\n    sum = 0\n    a = sorted(arr)\n    b = sorted(arr, reverse=True)\n    for x in range(len(arr) // 2):\n        sum += a[x] * b[x]\n    return sum\n", "def min_sum(arr):\n    ls = sorted(arr)\n    return sum(ls[i]*ls[-i-1] for i in range(len(ls)//2))", "def min_sum(arr):\n    sarr = sorted(arr)\n    return sum(sarr[i]*sarr[-i-1] for i in range(len(arr)//2))\n", "def min_sum(A):\n    A = sorted(A)\n    l = len(A)\n    return sum(a*b for a, b in zip(A[:l//2], A[l//2:][::-1]))", "def min_sum(arr):\n    s=sorted(arr)\n    return sum(x*y for x,y in zip(s[:len(s)//2],s[len(s)//2:][::-1]))", "def min_sum(arr):\n    arr.sort()\n    middle = len(arr) // 2\n    return sum(a * b for a, b in zip(arr[:middle], reversed(arr[-middle:])))", "def min_sum(arr):\n    prods =[]\n    for i in range(len(arr)//2):\n        prods.append(max(arr) * min(arr))\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return sum(prods)", "def min_sum(arr):\n    a = sorted(arr)\n    sm = 0\n    for i in range(len(arr) // 2):\n        sm += a[i] * a[len(a)- i - 1]\n    return sm", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum([(x * y) for x, y in zip(arr[0:len(arr) // 2], arr[len(arr) // 2:][::-1])])\n", "def min_sum(arr):\n    arr = sorted(arr)\n    arr1 = arr[::2]\n    arr2 = arr[1::2][::-1]\n    a = []\n    for i in range(len(arr1)):\n        a.append(arr1[i]*arr2[i])\n    return sum(a)\n        \n", "def min_sum(arr):\n    # Your code here\n    s = 0\n    arr = sorted(arr)\n    while arr:\n        s = s + arr.pop(0)*arr.pop(-1)\n    return s", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum([arr[i]*arr[len(arr)-i-1] for i in range(len(arr)//2)])", "def grab_two(arr, run_sum):\n    if len(arr)==0:\n        return run_sum\n    else:\n        run_sum += arr[0]*arr[-1]\n        return grab_two(arr[1:-1], run_sum)\n\n\ndef min_sum(arr):\n    # Your code here\n    arr.sort()\n    return grab_two(arr, 0)\n", "def min_sum(A):\n    A = sorted(A)\n    l = len(A)\n    return sum(e1*e2 for e1, e2 in zip(A[:l//2], A[l//2:][::-1]))", "def min_sum(arr):\n    m = []\n    while len(arr)>0 :\n        m.append(max(arr)*min(arr))\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return sum(m)", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum(pair[0] * pair[1] for pair in zip(arr[:len(arr) // 2], arr[len(arr) // 2:][::-1]))", "def min_sum(arr):\n    arr.sort()\n    l = len(arr)\n    return sum(a*b for a,b in zip(arr[:l//2], arr[l//2:][::-1]))", "def min_sum(arr):\n    answer = 0\n    for i in range(int(len(arr)/2)):\n        Max = max(arr)\n        Min = min(arr)\n        \n        arr.remove(Max)\n        arr.remove(Min)\n        answer += Min*Max\n    return(answer)", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum(arr.pop(0)*arr.pop(-1) for i in range(len(arr)//2))", "def min_sum(arr):\n    sort = sorted(arr)\n    return sum(x*y for x,y in zip(sort,sort[::-1]))//2", "def min_sum(arr):\n    arr=sorted(arr)\n    return sum(arr[x-1]*arr[-x] for x in range(1,len(arr)//2+1))", "def min_sum(a):\n    a.sort()\n    return sum([a[x]*a[-x-1] for x in range(len(a)//2)])", "def min_sum(arr):\n    arr=sorted(arr)\n    return sum([arr[x]*arr[len(arr)-1-x] for x in range(len(arr)//2)])", "def min_sum(arr):\n    arr = sorted(arr)\n    lst = [arr[i] * arr[-(i+1)] for i in range(int(len(arr)/2))]\n    return sum(lst)", "def min_sum(arr):\n    p = sorted(arr)\n    return sum(p[i] * p[-(i+1)] for i in range(int(len(arr)/2)))", "def min_sum(arr):\n    s_arr = sorted(arr)\n    return sum(a*b for a, b in zip(s_arr[:len(s_arr)//2], s_arr[::-1]))", "def min_sum(arr):\n    a=sorted(arr)\n    return sum(int(a[i])*int(a[len(a)-1-i]) for i in range(len(a)//2))", "def min_sum(arr):\n    temp = sorted(arr)\n    return sum(temp[i] * temp[-i-1] for i in range(len(arr)//2))", "def min_sum(arr):\n    return sum(a*b for a, b in zip(sorted(arr)[:len(arr)//2],sorted(arr)[len(arr)//2 :][::-1]))", "def min_sum(arr):\n    count = 0\n    while len(arr)>0:\n        count += max(arr)*min(arr)\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return count", "def min_sum(arr):\n    arr = sorted(arr)\n    return sum([arr[i] * arr[-(i+1)] for i in range(len(arr)//2)])", "def  min_sum(a):\n    q = sorted(a)\n    return sum(q[i]*q[-i-1] for i in range(len(q)//2))", "def min_sum(arr):\n    arr = sorted(arr)\n    mid = len(arr)//2\n    return sum(a * b for a, b in zip(arr[:mid], reversed(arr[mid:])))\n", "def min_sum(arr):\n    result = 0\n    arr = sorted(arr)\n    for i in range(len(arr) // 2):\n        result += arr[i] * arr[-i - 1]\n    return result", "def min_sum(arr):\n    # Your code here\n    toplam=0\n    while True:\n        buyuk=max(arr)\n        arr.remove(buyuk)\n        kucuk=min(arr)\n        arr.remove(kucuk)\n        toplam+=buyuk*kucuk\n        if len(arr)==0:\n            return toplam\n    pass", "def min_sum(arr):\n    arr_sorted = sorted(arr)\n    cut = int(len(arr_sorted)/2)\n    pairs = list(zip(arr_sorted[:cut], arr_sorted[cut:][::-1]))\n    return sum(a*b for a,b in pairs)", "def min_sum(arr):\n    arr = sorted(arr)\n    output = 0\n    for i in range(0,len(arr)//2):\n        output += arr[i] * arr[(-(i+1))]\n    return output", "def min_sum(arr):\n  sum = 0\n  sorted_arr = sorted(arr)\n  front_i = 0 \n  back_i = len(arr)-1\n  \n  while front_i < back_i:\n    sum += sorted_arr[front_i] * sorted_arr[back_i]\n    front_i +=1\n    back_i -=1\n  return sum\n\n\n", "def min_sum(arr):\n    a1 = sorted(arr,reverse = True)\n    a2 = sorted(arr)\n    return int(sum(x * y for x,y in zip(a1,a2)) / 2)", "def min_sum(arr):\n    sumlist = []\n    while len(arr) > 0:\n        if len(arr) == 1:\n            sumlist.append(arr)\n        else:\n            sumlist.append(max(arr) * min(arr))\n            arr.remove(max(arr))\n            arr.remove(min(arr))\n    return(sum(sumlist))\n", "def min_sum(arr):\n    result = 0\n    arr.sort()\n    while arr:\n        result += arr.pop() * arr.pop(0)\n    return result\n\n", "def min_sum(arr):\n    arr = sorted(arr)\n    arr_size = len(arr)\n    return sum(arr[i] * arr[arr_size-i-1] for i in range(arr_size // 2))", "def min_sum(arr):\n    \"\"\"\n    Returns the minimum sum nof integer products of arr.\n    \"\"\"\n    return min_sum_helper(sorted(arr))\n    \n    \ndef min_sum_helper(arr):\n    \"\"\"\n    Recursive helper method for min_sum.\n    \"\"\"\n    if len(arr) == 2:\n        return arr[0] * arr[-1]\n    return (arr[0] * arr[-1]) + min_sum_helper(arr[1:-1])", "def min_sum(arr):\n    \"\"\"\n    Returns the minimum sum nof integer products of arr.\n    \"\"\"\n    arr.sort()\n    return min_sum_helper(arr)\n    \n    \ndef min_sum_helper(arr):\n    \"\"\"\n    Recursive helper method for min_sum.\n    \"\"\"\n    if len(arr) == 2:\n        return arr[0] * arr[-1]\n    return (arr[0] * arr[-1]) + min_sum_helper(arr[1:-1])", "def min_sum(arr):\n    low, high = sorted(arr)[:len(arr)//2], sorted(arr, reverse=True)[:len(arr)//2]\n    return sum(x * y for x, y in zip(low, high))", "min_sum=lambda a:sum(x*y for x,y in zip(list(sorted(a)[:len(a)//2]),list(sorted(a,reverse=True)[:len(a)//2])))", "def min_sum(arr):\n    arr.sort()\n    i=0\n    s=0\n    while i<len(arr)//2:\n        s+=arr[i]*arr[len(arr)-1-i]\n        i+=1\n    return s", "def min_sum(l):\n    l = sorted(l)\n    backward = reversed(l)\n    forward = iter(l)\n    length = len(l)\n    result = 0\n    for i, (f,b) in enumerate(zip(forward, backward)):\n        if i < length/2:\n            print(f,b)\n            result += f*b\n            \n    return result", "def min_sum(arr):\n    cunt = []\n    for cum in range(len(arr) // 2):\n        cunt.append(min(arr) * max(arr))\n        arr.remove(min(arr))\n        arr.remove(max(arr))\n    return sum(cunt)", "def min_sum(arr):\n    arr.sort()\n    list_sum = []\n    while len(arr) > 0:\n        min_index = 0\n        max_num = arr.pop()\n        min_num = arr.pop(min_index)\n        min_index += 1\n        list_sum.append(max_num * min_num)\n    return sum(list_sum)", "def min_sum(arr):\n    res = []\n    while arr:\n        res.append(max(arr)*min(arr))\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return sum(res)", "def min_sum(arr: list) -> int:\n    sorted_arr = sorted(arr)\n    arr_len_half = len(arr)//2\n    start_arr_half = sorted_arr[:arr_len_half]\n    end_arr_half = sorted_arr[arr_len_half:]\n    result_sum = 0\n    \n    for start_num, end_num in zip(start_arr_half, end_arr_half[::-1]):\n        result_sum += start_num * end_num\n        \n    return result_sum"]