["CACHE = {}\n\ndef squared_cache(number):\n    if number not in CACHE:\n        divisors = [x for x in range(1, number + 1) if number % x == 0]\n        CACHE[number] = sum([x * x for x in divisors])\n        return CACHE[number] \n    \n    return CACHE[number]\n\ndef list_squared(m, n):\n    ret = []\n\n    for number in range(m, n + 1):\n        divisors_sum = squared_cache(number)\n        if (divisors_sum ** 0.5).is_integer():\n            ret.append([number, divisors_sum])\n\n    return ret", "WOAH = [1, 42, 246, 287, 728, 1434, 1673, 1880, \n        4264, 6237, 9799, 9855, 18330, 21352, 21385, \n        24856, 36531, 39990, 46655, 57270, 66815, \n        92664, 125255, 156570, 182665, 208182, 212949, \n        242879, 273265, 380511, 391345, 411558, 539560, \n        627215, 693160, 730145, 741096]\n\nlist_squared = lambda HUH, YEAH: [[YES, DUH(YES)] for YES in WOAH if YES >= HUH and YES <= YEAH]\nDUH = lambda YEP: sum(WOW**2 for WOW in range(1, YEP + 1) if YEP % WOW == 0)", "from math import floor, sqrt, pow\n\ndef sum_squared_factors(n):\n    s, res, i = 0, [], 1\n    while (i <= floor(sqrt(n))):\n        if (n % i == 0):\n            s += i * i\n            nf = n // i\n            if (nf != i):\n                s += nf * nf\n        i += 1\n    if (pow(int(sqrt(s)), 2) == s):\n        res.append(n)\n        res.append(s)\n        return res\n    else:\n        return None\n        \ndef list_squared(m, n):\n    res, i = [], m\n    while (i <= n):\n        r = sum_squared_factors(i)\n        if (r != None):\n            res.append(r);\n        i += 1\n    return res\n    \n", "\ndef get_divisors_sum(n):\n    \"\"\"Get the divisors: iterate up to sqrt(n), check if the integer divides n with r == 0\n        Return the sum of the divisors squared.\"\"\"\n    divs=[1]\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            divs.extend([i, int(n/i)])\n    divs.extend([n])\n    \n    # Get sum, return the sum \n    sm = sum([d**2 for d in list(set(divs))])\n    return sm\n    \n    \ndef list_squared(m, n):\n    \"\"\"Search for squares amongst the sum of squares of divisors of numbers from m to n \"\"\"\n    out = []\n    for j in range(m,n+1):\n        s = get_divisors_sum(j) # sum of divisors squared.\n        if  (s ** 0.5).is_integer(): # check if a square.\n            out.append([j, s])\n    return out\n", "from itertools import chain\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(chain.from_iterable(\n        [d, n // d] for d in range(1, int(n**0.5) + 1) if n % d == 0))\n\n\ndef square_factors(n):\n    return reduce(lambda s, d: s + d**2, factors(n), 0)\n\n\ndef list_squared(m, n):\n    l = []\n    for x in range(m, n + 1):\n        s = square_factors(x)\n        if (s**0.5).is_integer():\n            l.append([x, s])\n    return l", "def list_squared(m, n):\n    list=[]\n    for i in range(m,n+1):\n        sum=0\n        s_list=[]\n        for j in range(1,int(i**.5)+1):\n            if i%j==0:\n                div=i//j\n                sum+=j**2\n                if j!=div:\n                    sum+=div**2\n        sqt=sum**.5\n        if int(sqt)==sqt:\n            s_list=[i,sum]\n            list.append(s_list)\n    return list", "def list_squared(m, n):\n    out = []\n    for i in range(m,n+1):\n        # Finding all divisors below the square root of i\n        possibles = set([x for x in range (1,int(i**0.5)+1) if i%x == 0])\n        # And adding their counterpart\n        possibles.update([i/x for x in possibles])\n        # Doubles in the possibles are solved due to the set\n        val = sum(x**2 for x in possibles)\n        # Checking for exact square\n        if (int(val**0.5))**2 == val: out.append([i, val])\n    return out", "import math\n\n\ndef divisors(n):\n    divs = [1, n]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.extend([i, int(n/i)])\n    return set(divs)\n\n\ndef list_squared(m, n):\n    sq_list = []\n    for num in range(m, n):\n        _sum = sum(item**2 for item in divisors(num))\n        if math.sqrt(_sum).is_integer():\n            sq_list.append([num, _sum])\n    return sq_list", "def list_squared(m, n):\n    list = [[1, 1], [42, 2500], [246, 84100], [287, 84100], [728, 722500], [1434, 2856100], [1673, 2856100], [1880, 4884100], [4264, 24304900], [6237, 45024100], [9799, 96079204], [9855, 113635600], [18330, 488410000], [21352, 607622500], [21385, 488410000], [24856, 825412900]]\n    left = -1\n    right = -1\n    for i, r in enumerate(list):\n        if left == -1 and r[0] >= m:\n            left = i\n        if right == -1 and r[0] >= n:\n            right = i - 1\n    print('left={0},right={1}'.format(m, n))\n    return list[left: right + 1]", "def list_squared(m, n):\n    result, divisors = [], {k: k*k + 1 for k in range(m, n+1)}\n    divisors[1] = 1\n    for d in range(2, int(n ** .5) + 1):\n        for k in range(max(d*d, m + -m%d), n + 1, d):\n            divisors[k] += d*d\n            if k/d != d:\n                divisors[k] += (k/d) ** 2\n    for k in range(m, n + 1):\n        if not divisors[k] ** .5 % 1:\n            result.append([k, divisors[k]])\n    return result", "def divi(n):\n    fac = set()\n    for i in range(1, int(n**.5)+1):\n        if n % i == 0:\n            fac.add(i**2)\n            fac.add(int(n/i)**2)\n    return fac\n\ndef list_squared(m, n):\n    return [[i, sum(divi(i))] for i in range(m, n) if str(sum(divi(i))**.5)[-1] == '0']\n\n", "from math import sqrt\nfrom functools import reduce\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n                \ndef list_squared(m, n):\n    l = []\n    for i in range(m, n):\n        s = sum([x**2 for x in factors(i)])\n        if sqrt(s) == int(sqrt(s)):\n            l.append( [i, s] )\n    return l\n", "import math\n\ndef store_diviors_squared_sum(func):\n    store = {}\n    def helper(integer):\n        if integer not in store:\n            store[integer] = func(integer)\n        return store[integer]\n    return helper\n\n@store_diviors_squared_sum\ndef divisors_squared_sum(integer):\n    squared_divisors_sum = 1\n    for number in range(2, integer+1):\n        if integer % number == 0: squared_divisors_sum += number**2\n    return squared_divisors_sum\n\n\ndef list_squared(m, n):\n    return_array = []\n    for integer in range(m, n+1):\n        squared_divisors_sum = divisors_squared_sum(integer)\n        if math.sqrt(squared_divisors_sum) % 1 == 0:\n            return_array.append([integer, squared_divisors_sum])\n    return return_array\n", "def list_squared(m, n):\n    def f(number):\n        divisor_list = []\n        n = int(number ** 0.5) + 1\n        for e in range(1,n):\n            if number % e == 0:\n                if int(number / e) == e:\n                    divisor_list.append(e**2)\n                else:\n                    divisor_list.append(e**2)\n                    divisor_list.append((int(number / e))**2)\n    \n        summation = sum(divisor_list)\n    \n        if int(summation ** 0.5) == float(summation ** 0.5):\n            return [True,summation]\n        else:\n            return [False,summation]\n    list = []\n    for i in range(m, n):\n        d_l = f(i)\n        if d_l[0]:\n            list.append([i,d_l[1]])\n    return list\n\n\n\n                       \n                       \n", "def list_squared(m, n):\n    output = []\n    for i in range(m,n):\n        div = set() #using set to ignore duplicates (the square root of i)\n        for d in range(1,int(i**0.5)+1): #going up to square root to save time. \n            if i%d == 0:\n                div.add(d) #if d is a divisor, i/d is also a divisor\n                div.add(i/d)\n        sumsqdiv = sum([a * a for a in div]) #using map/lambda to multiply all divisors. \n        if (sumsqdiv**0.5).is_integer():\n            output.append([i,sumsqdiv])\n    return output\n", "from math import floor, sqrt\n\ndef list_squared(m, n):\n    result = []\n    for number in range(m, n):\n        divisors = set()\n        for divisor in range(1, floor(sqrt(number))+1):\n            if number%divisor == 0:\n                divisors.add(divisor) \n                divisors.add(number//divisor)\n        divisorsum = sum(x*x for x in divisors)\n        if (sqrt(divisorsum))%1 == 0:\n            result.append([number, divisorsum])\n    return result", "def list_squared(m, n):\n    # time complexity O(w*sqrt(k)) where k are the nums between m and n and w is the number of ints between m and n\n    # space complexity O(w)\n    res = []\n    for num in range(m, n):\n        div_sum = sum(i*i + ((num//i)*(num//i) if num//i != i else 0) for i in range(1, int(num**0.5) + 1) if num % i == 0)\n        root = div_sum ** 0.5\n        if root.is_integer(): \n            res.append([num, div_sum])\n    return res\n        \n", "def list_squared(m, n):\n    result = []\n    for number in range(m, n+1):\n        s = 0\n        \n        factors = {1,number}\n        for x in range(2, int(number**0.5)+1):\n            if number % x == 0:\n                factors.add(x)\n                factors.add(number/x)\n                \n        for i in factors:\n            s = s + i**2\n        if s**0.5 == int(s**0.5):\n            result.append([number, s])\n    return result", "from math import sqrt\n\ndef list_squared(m, n):\n    result = []\n    for a in range(m,n+1):\n        total = 0\n        for i in range(1,int(sqrt(a))+1):\n            if a%i == 0:\n                total += i**2\n                if i < a/i:\n                    total += (a/i)**2\n        if sqrt(total)%1 == 0:\n            result.append([a, total])\n    return result\n", "from math import ceil\nfrom functools import lru_cache\n            \ndef find_square_sums(m, n):\n    for x in range(m, n+1):\n        c = candidate(x)\n        if c:\n            yield c\n\ndef candidate(n):\n    total = sum(x**2 for x in divisors(n))\n    if (total**0.5).is_integer():\n        return [n, total]\n    return False\n\n@lru_cache(maxsize=100000)\ndef divisors(n):\n    divs = [1, n]\n    for x in range(2, ceil((n+1)/2)):\n        if x in divs: break\n        if n % x == 0:\n            divs.append(x)\n            divs.append(int(n/x))\n    return set(divs)\n\ndef list_squared(m, n):\n    return list(find_square_sums(m, n))", "div=lambda n:sum(set(sum([[i**2,(n//i)**2] for i in range(2,int(n**.5)+1) if not n%i],[]))) + n*n + int(n!=1)\nd = {i: div(i) for i in range(10001)}   \nlist_squared=lambda a,b:[[i,d[i]] for i in range(a,b+1) if (d[i]**.5).is_integer()]", "import math\n\ndef get_divisors(num):\n    divisors = {1}\n    \n    if num == 1:\n        return divisors\n    \n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            divisors.add(i)\n            divisors.add(num/i)\n    divisors.add(num)\n    \n    return list(divisors)\n\ndef list_squared(m, n):\n    res = []\n    \n    for i in range(m,n+1):\n        total = sum([x*x for x in get_divisors(i)])\n        if int(math.sqrt(total))**2 == total:\n            res.append([i,total])\n    \n    return res\n", "A={}\nfor n in range(1,12000):\n    A[n] = [j**2 for j in list(range(1,int(n/2)+1))+[n] if (n/j).is_integer()]\n    \ndef list_squared(m, n):\n    return [[i,sum(A[i])] for i in range(m,n+1) if (sum(A[i])**(1/2)).is_integer()]\n", "def list_squared(m, n):\n    return [[i, square_sum(i)] for i in range(m, n+1) if (square_sum(i)**0.5).is_integer()]\n\ndef square_sum(n):\n    if n == 1: return 1\n    div = []\n    for i in range(1, int(n**0.5) + 1):\n        if i in div: break\n        if n%i == 0: div += [i, n//i] if i != n//i else [i]\n    return sum(v**2 for v in div)", "from math import sqrt\n\ndef list_squared(m, n):\n    ret_list = []\n    for i in range(m, n):\n        sum_divisors_2 = sum(\n            x ** 2 + (i / x) ** 2 \n            if x != i / x \n            else x ** 2\n            for x in range(1, int(sqrt(i)) + 1)\n            if not i % x\n        )\n        if sqrt(sum_divisors_2).is_integer():\n            ret_list.append([i, sum_divisors_2])\n    return ret_list\n", "def list_squared(m, n):\n    result = []\n    for i in range(m, n+1):\n        divisor = {1, i}\n        for j in range(2, int(i ** 0.5)+1):\n            if i % j == 0:\n                divisor.add(j)\n                divisor.add(int(i/j))\n        div_sq_sum = sum([k ** 2 for k in divisor])\n        if div_sq_sum ** 0.5 == int(div_sq_sum ** 0.5):\n            result.append([i, div_sq_sum])\n    return result", "def list_squared(m, n):\n    a,b = {1:1,42:2500,246:84100,287:84100,728:722500,1434:2856100,1673:2856100,1880:4884100,4264:24304900,6237:45024100,9799:96079204,9855:113635600},[] \n    for i in a.keys():\n        if m <= i <= n:\n            b.append([i,a[i]])\n    return sorted(b)", "from math import sqrt\ndef list_squared(m, n):\n    # your code\n    def F(x): return sum(b**2 + ((x/b)**2 if b*b != x else 0) for b in [a for a in range(1,int(sqrt(x))+1) if x%a == 0])\n    return [[d,F(d)] for d in range(m,n+1) if sqrt(F(d)).is_integer()]\n", "import math\n\ndef is_square(n):\n    s = math.sqrt(n)\n    return (s - math.floor(s)) == 0\n\ndef sds(n):\n    s = 1 + (n**2 if n>1 else 0)\n    l , r = 2, n//2\n    while l < r:\n        if (l*r) == n:\n            s += l**2 + r**2\n        l , r = l+1, n//(l+1)\n    return s\n\ndef list_squared(m, n):  \n    res = []\n    for i in range(m,n):\n        s_sum = sds(i)\n        if is_square(s_sum):\n            res.append([i, s_sum])\n    return res\n        \n", "from math import ceil, sqrt\n\ndef squared(l):\n    return [x**2 for x in l]\n\ndef divisors(m):\n    s = sqrt(m)\n    k = ceil(s)\n    aux = [d for d in range(1, k) if m % d == 0]\n    aux += [m // d for d in aux]\n    if k == s:\n        aux.append(k)\n    return aux\n\ndef is_square(m):\n    return ceil(sqrt(m))==sqrt(m)\n\ndef list_squared(m, n):\n    return [[k, s] for (k, s) in [(k, sum(squared(divisors(k)))) for k in range(m, n + 1)] if is_square(s)]\n", "from math import sqrt\n\ndef divisors_squared(x):\n    l2 = []\n    y = int(sqrt(x))\n    for a in range(1, y+1):\n        if x % a == 0:\n            divby = x//a\n            if a != divby:\n                l2.extend((a**2, divby**2))\n            else:\n                l2.append(a)\n    return l2\n\ndef list_squared(x, y):\n    arr = []\n    for i in range(x, y+1):\n        z = sum(divisors_squared(i))\n        if (sqrt(z)).is_integer():\n            arr.append([i, z])\n    return arr \n", "def list_squared(m, n):\n    lst = []\n    for num in range(m, n):\n        s = set()\n        for div in range(1, int(num**0.5)+1):\n            if not num%div: s.update({div**2, int(num/div)**2})\n        summ = sum(s)\n        if ((summ**0.5)//1)**2 == summ: lst.append([num, summ])\n    return lst\n    \n", "from math import sqrt\nfrom math import ceil\ndef list_squared(m, n):\n    # your code\n    final_list = []\n    for x in range(m, n):\n        divisors_sq = 0\n        for y in range(1, ceil(sqrt(x))):\n            if x % y == 0:\n                divisors_sq += y**2\n                if x !=1:\n                    divisors_sq += (x//y)**2\n        if x == 1:\n            divisors_sq = 1\n        if round(sqrt(divisors_sq)) == sqrt(divisors_sq):\n            final_list.append([x, divisors_sq])\n    return final_list\n\nlist_squared(1, 250)\n", "from math import sqrt\n\ndef issquare(x):\n    return sqrt(x)==int(sqrt(x))\n\ndef list_squared(m, n):\n    out_list = []\n    for x in range(m,n+1):\n        sum_t=sum( (i**2 + (x//i)**2*(x/i!=i) ) for i in range(1,int(sqrt(x))+1) if x % i==0)\n        if issquare(sum_t):\n            out_list.append([x,sum_t])\n    return out_list", "def gen_primes():\n    D = {}\n    q = 2\n    while True:\n        if q not in D:\n            yield q\n            D[q * q] = [q]\n        else:\n            for p in D[q]:\n                D.setdefault(p + q, []).append(p)\n            del D[q]\n        q += 1\n\n\ndef factorize(n, primes):\n    factors = []\n    for p in primes:\n        if p*p > n: break\n        i = 0\n        while n % p == 0:\n            n //= p\n            i+=1\n        if i > 0:\n            factors.append((p, i));\n    if n > 1: \n        factors.append((n, 1))\n    return factors\n\n\ndef divisors(factors):\n    div = [1]\n    for (p, r) in factors:\n        div = [d * p**e for d in div for e in range(r + 1)]\n    return div\n\n\ndef list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n        sum_i = 0\n        for d in divisors(factorize(i, gen_primes())):\n            sum_i += d * d\n        if is_sqrt(sum_i):\n            result.append([i, sum_i])\n    return result\n\n\ndef is_sqrt(n):\n    x = n\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + n // x) // 2\n    return x * x == n\n", "def divisors_list(num):\n  divisors = []\n  for i in range(1,int(num**0.5)+1):\n    if num % i == 0:\n      divisors += [i,num/i]\n  return set(divisors)\n\ndef sum_squares(nums):\n  return sum(num**2 for num in nums)\n\ndef isSquarable(num):\n  return (num**0.5).is_integer()\n\ndef list_squared(m, n):\n  res = []\n  for i in range(m,n+1):\n    elems_sum = sum_squares(divisors_list(i))\n    if isSquarable(elems_sum):\n      res.append([i, elems_sum])\n  return res", "def list_squared(m, n):\n    a = []\n    b = []\n    for i in range(m,n):\n        sum = 0\n        for j in range(1,int(i**(0.5))+1):\n            if i%j==0:\n              sum+=j**2\n              if i/j!=j:\n                  sum+=int(i/j)**2\n              \n        if (sum**(0.5)).is_integer():\n            a.append(i)\n            b.append(sum)\n\n    return [list(i) for i in zip(a,b)]\n", "from math import sqrt,pow\nfrom functools import reduce\n\ndef list_squared(m, n):\n    sqr_sum = lambda i: sum(set(reduce(list.__add__,\n                                       ([pow(j,2), pow(i // j, 2)] for j in range(1, int(sqrt(i)) + 1) if i % j == 0))))\n    return [[i, j] for i, j in zip(range(m, n + 1), map(sqr_sum, range(m, n + 1))) if sqrt(j) == int(sqrt(j))]", "import math\nsqrt = math.sqrt\n\ndef getDivisors(x):\n  result = []\n  i = 1\n  while i*i <= x:\n    if x % i == 0:\n      result.append(i**2)\n      if x/i != i:\n        result.append((x/i)**2)\n    i += 1\n  return (result)\n\ndef isSquaredDivisor(n):\n  squaredList = getDivisors(n)\n  sumList = sum(squaredList)\n  if sqrt(sumList) % 1 == 0:\n    return [n,sumList]\n  else:\n    return 0\n\ndef list_squared(m, n):\n  retList = []\n  for i in range(m,n+1):\n    res = isSquaredDivisor(i)\n    if res != 0:\n      retList.append(res)\n  return retList", "from math import sqrt\n\n\ndef list_squared(m, n):\n\n    def sum_divisors_squared(n):\n        def divisors(n):\n            for i in range(1, int(sqrt(n) + 1)):\n                if n % i == 0:\n                    yield i\n                    if i*i != n:\n                        yield n / i\n\n        return sum(i ** 2 for i in divisors(n))\n\n    def is_square(n):\n        return sqrt(n) % 1 == 0\n\n    def gen_subarrays(m, n):\n        for i in range(m, n):\n            divisor_sum = sum_divisors_squared(i)\n            if is_square(divisor_sum):\n                yield [i, divisor_sum]\n    return [subarray for subarray in gen_subarrays(m, n)]\n", "def map_sum_of_squqres(n):\n    if n == 1:\n        return [1,1]\n    sum = 1 + n ** 2\n    for i in range(2, int(n ** 0.5) + 1):\n         if n % i == 0:\n             sum += i ** 2\n             if i != n / i:\n                  sum += (n/i) ** 2\n    return [n, sum]\n    \ndef is_square(n):\n    return int(n ** 0.5) ** 2 == n\n\ndef list_squared(m, n):\n    return [i for i in map(map_sum_of_squqres, range(m,n+1)) if is_square(i[1])]", "def list_squared(m, n):\n    result=[]\n    divisors=set()\n    for i in range(m,n+1):\n        a=1\n        b=i/a\n        divisors.clear()\n        while a<=b:\n            if b.is_integer():\n                divisors.update((a,int(b)))\n            a+=1\n            b=i/a\n        sqsum=sum(d**2 for d in divisors)\n        if (sqsum**0.5).is_integer():\n            result.append([i,sqsum])\n    return result\n            \n", "def list_squared(m, n):\n    res = []\n    pairs = [ [1, 1],\n            [42, 2500],\n            [246, 84100],\n            [287, 84100],\n            [728, 722500],\n            [1434, 2856100],\n            [1673, 2856100],\n            [1880, 4884100],\n            [4264, 24304900],\n            [6237, 45024100],\n            [9799, 96079204],\n            [9855, 113635600]]\n    for i in range(m, n + 1):\n        for idx, x in enumerate(pairs):\n            if i == x[0]:\n                res.append(x)\n    return res", "def getDivisors(num):\n    res = []\n    sum = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            res.append(i)\n            sum += i**2\n    return (res,sum)\n\ndef list_squared(m, n):\n    result = []\n    nums = [1,42,246,287,728,1434,1673,1880,4264,6237,9799,9855,18330,21352,21385,24856,36531,39990,46655,57270,66815,92664]\n    s = [1,2500,84100,84100,722500,2856100,2856100,4884100,24304900,45024100,96079204,113635600,488410000,607622500,488410000,825412900,1514610724,2313610000,2313610000,4747210000,4747210000,13011964900]    \n    for i in range(m,n+1):\n        if i in nums:\n            result.append([i, s[nums.index(i)]])\n    return result", "import math\n\ndef list_squared(m, n):\n    final = []\n    for i in range(m, n+1):\n        results = []\n        for j in range(1, int(math.sqrt(i))+1):\n            if i % j == 0:\n                    if int(i / j) != j:\n                        results.append(int(i / j) ** 2)\n                    results.append(j ** 2)\n        summ = sum(results)\n        if (math.sqrt(summ).is_integer()):\n            final.append([i, summ])\n    return final", "import functools\ndef list_squared(m, n):\n    lista_final = []\n    lst = []\n    for i in range(m,n):\n        dic = factors(i)\n        for el in dic:\n            lst.append(el**2)   \n        soma = sum(lst)\n        numero = soma ** (0.5)\n        if numero == int(numero):\n            lista_final = lista_final + [[i, soma]]\n        lst = []\n    return lista_final\n\ndef factors(n):    \n    return set(functools.reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n            \n", "import numpy as np;\nimport math;\n\ndef list_squared(m, n):\n\n    validValues = [];\n\n    #cycle through the values\n    for testValue in range(m, n):\n        divisorList = divisors(testValue);\n        totalOfSquareDivisors = sum(np.power(divisorList, 2))               # NumPy again to square all\n\n        #Does result have an even square root? - if so, add to the list\n        if ( totalOfSquareDivisors % math.sqrt(totalOfSquareDivisors) == 0):\n            validValues.append([testValue, totalOfSquareDivisors]);\n\n    return  validValues;\n\n# Use NumPy to determine the valid divisors\ndef divisors(n):\n    r = np.arange(1, int(n ** 0.5) + 1)\n    x = r[np.mod(n, r) == 0]\n    result = set(np.concatenate((x, n / x), axis=None))\n    return [int(i) for i in result]                         # Casts back to integer\n", "def list_squared(m, n):\n    all = []\n    for x in range(m, n):\n        divisors = [i for i in range(1, int(x**0.5)+1) if x%i==0]\n        divisors += [int(x/d) for d in divisors if x/d > x**0.5]\n        sumExp = sum(d**2 for d in divisors)\n        if sumExp**0.5%1==0:\n            all.extend([[x,sumExp]])\n    return all", "def list_squared(m, n):\n    pool, sums = range(m, n), []\n\n    for number in pool:\n        # This way of calculating the divisors saves a lot of time\n        divisors = [x for x in range(1, int(number**0.5 + 1)) if not number%x] \n        divisors += [number/x for x in divisors if x != number/x]            \n        sums.append([number, sum([x**2 for x in divisors])])\n\n    return [x for x in sums if x[1]**0.5 == int(x[1]**0.5)]", "import math\n \ndef list_squared(m, n):\n    res = []\n    for num in range(m, n):\n        add = 0\n        for i in range(1, math.ceil(math.sqrt(num))):\n            if num % i == 0:\n                add += i**2 + (num//i)**2\n        if math.sqrt(num).is_integer():\n            add += num        \n        if math.sqrt(add).is_integer():\n            res.append([num, add])    \n    return res\n", "import math\n\ndef divisors(n):\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                yield n/i\n\ndef list_squared(m, n):\n    ret = []\n    for i in range(m, n+1):\n        div_sum = sum([j**2 for j in divisors(i)])\n        if math.sqrt(div_sum).is_integer():\n            ret.append([i, div_sum])\n    return ret\n", "import math\n\ndef suma(i):\n    return sum(x**2 + (i//x)**2 for x in range(1, math.ceil(i**0.5)) if not i%x) + (i if (i**0.5).is_integer() else 0)\n\ndef list_squared(m, n):\n    return [[i, suma(i)] for i in range(m, n+1) if (suma(i)**0.5).is_integer()]", "import math\n\ndef list_squared(m, n):\n    divs = []\n    answer = []\n    for x in range(m,n):\n        divs = [1]\n        for y in range(2,int(math.sqrt(x))+1):\n            if x % y == 0 and math.sqrt(x) != y:\n                divs.extend([y**2, int((x/y)**2)])\n        if x != 1: divs.append((x*x))\n        z = sum(divs) \n        if math.sqrt(z) % 1 == 0: answer.append([x,z])\n    return answer\n", "CACHE = [[i,sum([x**2 for x in range(1,i+1) if not(i%x)])] for i in range(1,10000) if sum([x**2 for x in range(1,i+1) if not(i%x)])**0.5 % 1 == 0]\n\ndef list_squared(m, n):\n    return [e for e in CACHE if m <= e[0] <= n]", "def list_squared(m, n):\n    squares = []\n    for i in range(m, n):\n        total = sum(get_divisors_sqrd(i))\n        if (total ** (1/2)).is_integer():\n            squares.append([i, total])\n    return squares\n            \ndef get_divisors_sqrd(n):\n    divisors = []\n    for i in  range(1, int(n ** (1/2)) + 1):\n        if n % i == 0:\n            if i ** 2 not in divisors:\n                divisors.append(i ** 2)\n            if int(n/i) ** 2 not in divisors:\n                divisors.append(int(n / i) ** 2)\n    return divisors\n", "from math import sqrt\n\ndef sum_square_divisors(n):\n  res = 0\n  nn = n * n\n  # odds have only odd divisors\n  for i in range(1, int(sqrt(n)) + 1, n % 2 + 1):\n    if n % i == 0:\n      ii = i * i\n      res += ii\n      if ii != n:\n        res += nn // ii\n  return res\n\ndef list_squared(m, n):\n  res = []\n  for i in range(m, n + 1):\n    sds = sum_square_divisors(i)\n    r = int(sqrt(sds))\n    if r * r == sds:\n      res.append([i, sds])\n  return res\n", "def list_squared(m, n, cache={}):\n    get = range(m,n+1)\n    check = set(get) - set(cache.keys())\n    for y in check:\n        sqr = sum(x**2 for x in range(1, y+1) if not y%x)\n        root = sqr**.5\n        cache[y] = None\n        if root == int(root):\n            cache[y] = sqr\n    result = list([k,cache[k]] for k in get if cache[k])\n    return result", "from collections import Counter\nfrom functools import reduce\nfrom operator import mul\nfrom random import randrange,randint\n\ndef primesbelow(n):\n    c=n%6>1\n    n={0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    s=[True]*(n//3)\n    s[0]=False\n    for i in range(int(n**0.5)//3+1):\n        if s[i]:\n            k=(3*i+1)|1\n            s[k*k//3::2*k]=[False]*((n//6-(k*k)//6-1)//k+1)\n            s[(k*k+4*k-2*k*(i%2))//3::2*k]=[False]*((n//6-(k*k+4*k-2*k*(i%2))//6-1)//k+1)\n    return [2,3]+[(3*i+1)|1 for i in range(1,n//3-c) if s[i]]\n\nmedsize=100000\nmedprimes=set(primesbelow(medsize))\nsmallprimes=sorted(p for p in medprimes if p<1000)\n\ndef isprime(n,precision=7):\n    if n<1:\n        return False\n    elif n<=3:\n        return n>=2\n    elif n%2==0:\n        return False\n    elif n<medsize:\n        return n in medprimes\n    d=n-1\n    s=0\n    while d%2==0:\n        d//=2\n        s+=1\n    for repeat in range(precision):\n        a=randrange(2,n-2)\n        x=pow(a,d,n)\n        if x==1 or x==n-1: continue\n        for r in range(s-1):\n            x=pow(x,2,n)\n            if x==1: return False\n            if x==n-1: break\n        else: return False\n    return True\n\ndef pollard_brent(n):\n    if n%2==0: return 2\n    if n%3==0: return 3\n    y,c,m=randint(1,n-1),randint(1,n-1),randint(1,n-1)\n    g,r,q=1,1,1\n    while g==1:\n        x=y\n        for i in range(r): y=(pow(y,2,n)+c)%n\n        k=0\n        while k<r and g==1:\n            ys=y\n            for i in range(min(m,r-k)):\n                y=(pow(y,2,n)+c)%n\n                q=q*abs(x-y)%n\n            g=gcd(q,n)\n            k+=m\n        r*=2\n    if g==n:\n        while True:\n            ys=(pow(ys,2,n)+c)%n\n            g=gcd(abs(x-ys),n)\n            if g>1: break\n    return g\n\ndef primefactors(n):\n    fs=[]\n    for c in smallprimes:\n        while n%c==0:\n            fs.append(c)\n            n//=c\n        if c>n: break\n    if n<2: return fs\n    while n>1:\n        if isprime(n):\n            fs.append(n)\n            break\n        f=pollard_brent(n)\n        fs.extend(primefactors(f))\n        n//=f\n    return fs\n\ndef factorization(n):\n    return Counter(primefactors(n))\n\ndef ssd(n):\n    return reduce(mul,((p**(2*e+2)-1)//(p*p-1) for p,e in factorization(n).items()),1)\n\ndef list_squared(m,n):\n    return [a for a in ([x,ssd(x)] for x in range(m,n+1)) if (a[1]**0.5).is_integer()]", "import numpy as np\n\n            \ndef binary_check(x):\n    if x == 1: return True\n    start = 0\n    stop = x//2\n    sol = []\n    while start <= stop:\n        mid = (start+stop) // 2\n        \n        if mid*mid == x:\n            return True\n        if mid*mid < x:\n            start = mid + 1\n        if mid*mid > x:\n            stop = mid - 1\n\nimport collections\nimport itertools\n\n\ndef prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n            yield i\n        else:\n            i += 1\n\n    if n > 1:\n        yield n\n\n\ndef prod(iterable):\n    result = 1\n    for i in iterable:\n        result *= i\n    return result\n\n\ndef get_divisors(n):\n    pf = prime_factors(n)\n\n    pf_with_multiplicity = collections.Counter(pf)\n\n    powers = [\n        [factor ** i for i in range(count + 1)]\n        for factor, count in list(pf_with_multiplicity.items())\n    ]\n\n    for prime_power_combo in itertools.product(*powers):\n        yield prod(prime_power_combo)\n            \ndef list_squared(m, n):\n    sol = []\n    \n    for number in range(m,n):\n        candidate = [i**2 for i in range(1,number+2) if number % i == 0]\n        n = sum(candidate)\n        if binary_check(n):\n            sol.append([number,n])\n    return sol\n\n\ndef list_squared(m, n):\n    sol = []\n    for number in range(m,n):\n        candidate = [i*i for i in get_divisors(number)]\n        n=int(sum(candidate))\n        if binary_check(n):\n            sol.append([number,n])\n    return sol\n", "def list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n#         b = 0\n        # \u5f00\u6839\u65b9\u6b21\u5faa\u73af\n        a = sum(let * let + (i / let) * (i / let) for let in range(1, int(i ** 0.5) + 1) if i % let == 0)\n        \n        # \u5982\u679c\u672c\u8eab\u80fd\u88ab\u5f00\u6839\u65b9\uff0c\u5219\u51cf\u53bb\uff0c\u56e0\u4e3a\u5faa\u73af\u6c42\u548c\u65f6\u591a\u7b97\u4e86\u4e00\u6b21\n        if (i ** 0.5) % 1 == 0:\n            a = a - (i ** 0.5) * (i ** 0.5)\n\n        if (a ** 0.5) % 1 == 0:\n            result.append([i, int(a)])\n    return result  \n#     r=[]\n#     for i in range(m,n+1):\n#         for x in range(1,int(i**0.5)+1):\n#             if i%x==0:\n#                 a=sum([x*x+(i/x)*(i/x)])\n#         if (i ** 0.5) % 1 == 0:\n#             a = a - (i ** 0.5) * (i ** 0.5)\n\n#         if (a ** 0.5) % 1 == 0:\n#             r.append([i, int(a)])\n#     return r  \n", "def list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n        b = 0\n#         for x in range(1,int(i**0.5)+1):\n#             if i%x==0:\n#                 a=sum(x*x+(i/x)*(i/x))\n                \n        a = sum(let * let + (i / let) * (i / let) for let in range(1, int(i ** 0.5) + 1) if i % let == 0)\n\n        if (i ** 0.5) % 1 == 0:\n            a = a - (i ** 0.5) * (i ** 0.5)\n\n        if (a ** 0.5) % 1 == 0:\n            result.append([i, int(a)])\n    return result  \n", "import math\n\ndef divisorGenerator(n):\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n\ndef is_square(n):\n    if n == 0:return True\n    if n == 1:return True\n    x = n // 2\n    seen = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in seen: return False\n        seen.add(x)\n    return True\n\ndef list_squared(m, n):\n    out = []\n    for a in range(m, n+1):\n        divisor_sum = sum(int(r*r) for r in list(divisorGenerator(a)))\n        if is_square(divisor_sum):\n            out.append([a, divisor_sum])\n    return out\n", "import math\n\ndef list_squared(m, n):\n    print(f\"m: {m}, n: {n}\", flush=True)\n    biglips = []\n    for i in range(m,n):\n        if i > 2000 and i < 4000:\n            i = 4000\n        max = i+1\n        factors = []\n        counter = 1\n        while counter < max:\n            if i % counter == 0:\n                factors.append(counter)\n                max = int(i/counter)\n                if max != counter:\n                    factors.append(max)\n            else:\n                max -= 1\n            counter += 1\n        #factors = [i ** 2 for i in factors]\n        factors = list(map(lambda x: x ** 2, factors))\n        sumOf = sum(factors)\n        root = math.sqrt(sumOf)\n        if sumOf == int(root + 0.5) ** 2:\n            biglips.append([i,sumOf])\n        \n    print(biglips)\n    return biglips\n    ", "import math\n\ndef list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n        divisors = set()\n        for j in range(1, int(math.sqrt(i)+1)):\n            if i % j == 0:\n                divisors.add(j**2)\n                divisors.add(int(i/j)**2)\n        summa = sum(divisors)\n        if (summa ** 0.5).is_integer():\n            result.append([i, summa])\n    return result", "import math\ndef list_squared(m, n):\n    final = []\n    for i in range(m,n):\n        #find sum of squared divisiors\n        divisors = find_divisors(i)\n        sum_sqrd = sum([d*d for d in divisors])\n        if math.sqrt(sum_sqrd).is_integer():\n            final.append([i, sum_sqrd])\n    \n    return final\n\n\ndef find_divisors(x):\n    i = 1\n    divisors = []\n    while i <= math.sqrt(x):\n        if x % i == 0:\n            if x / i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(int(x/i))\n        \n        i += 1\n    divisors.sort()\n    return divisors", "def list_squared(m, n):\n    ans = []\n    sum = 0\n    for i in range(m,n+1):\n        sq = int(i ** 0.5)\n        if sq > 1 and sq == (i ** 0.5):\n            sq -= 1\n        for j in range(1,sq+1):\n            if i % j == 0:\n                if j != int(i/j):\n                    sum += (j ** 2)+(int(i/j) **2)\n                else:\n                    sum += (j ** 2)\n        if sum > 0 and (sum ** 0.5) % 1 == 0:\n            ans.append([i, sum])\n        sum = 0\n    return ans\n", "import math\n\ndef get_divisors(n):\n    i = 1\n    result = []\n    while i <= math.sqrt(n):\n        if (n % i == 0):\n            if (n / i == i):\n                result.append(i)\n            else:\n                result += [i, n/i]\n        i += 1\n    return result\n\ndef get_squared(n):\n    return [x*x for x in n]\n\ndef list_squared(m, n):\n    pairs = [[x, sum(get_squared(get_divisors(x)))] for x in range(m, n+1)]\n    return list([x for x in pairs if math.sqrt(x[1]) % 1 == 0])\n", "import math\n\ndef squareDivisors(n) : \n    list_divisors = []\n    i = 1\n    while i <= math.sqrt(n):           \n        if (n % i == 0) :               \n            # If divisors are equal, print only one \n            if (n / i == i) : \n                list_divisors.append(i**2) \n            else : \n                # Otherwise print both \n                list_divisors.extend([i**2,(n//i)**2])\n        i = i + 1\n    return list_divisors\n\ndef list_squared(m, n):\n    return [[i,sum(squareDivisors(i))] for i in range(m,n+1) if math.sqrt(sum(squareDivisors(i))).is_integer()]\n", "from math import sqrt\n\ndef sumsqrdivs(x):\n    divs = []\n    for i in range(1, int(sqrt(x)+1)):\n        if x%i == 0 :\n            divs.append(i)\n            if i**2 != x :\n                divs.append(int(x/i))\n    return sum(div**2 for div in divs)\n\ndef list_squared(m, n):\n    return [[i, sumsqrdivs(i)] for i in range(m, n+1) if sqrt(sumsqrdivs(i)).is_integer()]", "def factors(n):\n    return set([f for i in range(1, int(n**0.5)+1) if n % i == 0 for f in [i, n//i]])\n\ndef list_squared(m, n):\n    ans = []\n    for i in range(m, n):\n        sum_of_squares = sum(map(lambda x: x**2, factors(i)))\n        if (sum_of_squares ** 0.5) % 1 == 0:\n            ans.append([i, sum_of_squares])\n    return ans", "import math\ndef list_squared(m, n):\n    p = []\n    for x in range(m, n+1):\n        ds = sum(y**2 + (x/y)**2 for y in range(2,math.ceil(math.sqrt(x))) if x%y == 0) + x**2\n        if x > 1:\n            ds += 1\n            if x%math.sqrt(x) == 0:\n                ds += x\n        if math.sqrt(ds).is_integer():\n            p = p + [[x, ds]]\n    return p", "import numpy as np\ndef list_squared(m, n):\n    res = []\n    for i in range(m, n+1):\n        factor = []\n        for k in range(1, int(i ** (1/2)) +1):\n            if i % k == 0:\n                if k != i//k:\n                    factor = factor + [k, i//k]\n                else:\n                    factor = factor + [k]\n        arr = np.array(factor)\n        total = sum(arr ** 2)\n        if total ==  int(total ** (1/2)) ** 2:\n            res.append([i, total])\n    return res", "def memoize(f):\n    memo = {}\n    def helper(*args):\n        if args not in memo:\n            memo[args] = f(*args)\n        return memo[args]\n    return helper\n\n@memoize\ndef sum_of_squares(n):\n    squares = [x**2 for x in range(1, n+1) if n % x == 0]\n    return sum(squares)\n\ndef list_squared(m, n):\n    result = []\n    for i in range(m, n):\n        sums = sum_of_squares(i)\n        if sums > 0 and sums**0.5 % 1 == 0:\n            result.append([i, sums])\n    return result\n", "def list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n        a = sum(x * x + (i / x) * (i / x) for x in range(1, int(i ** 0.5) + 1) if i % x == 0)\n        \n        if (i ** 0.5) % 1 == 0:\n            a = a - (i ** 0.5) * (i ** 0.5)\n\n        if (a ** 0.5) % 1 == 0:\n            result.append([i, int(a)])\n    return result  ", "import math\ndef div(n):\n    i = 1\n    l = []\n    m = []\n    while i <= math.sqrt(n):\n        if (n % i == 0):\n            if (n / i == i):\n                l.append(i)\n                m.append(i ** 2)\n            else:\n                l.append(i)\n                l.append(n // i)\n                m.append(i ** 2)\n                m.append((n // i) ** 2)\n        i = i + 1\n    if math.sqrt(sum(m)).is_integer():\n        return [n, sum(m)]\n    pass\ndef list_squared(m, n):\n    b = []\n    for j in range(m, n):\n        if div(j):\n            b.append(div(j))\n    return b", "results = [[1, 1], [42, 2500], [246, 84100], [287, 84100], [728, 722500], [1434, 2856100], [1673, 2856100], [1880, 4884100], [4264, 24304900], [6237, 45024100], [9799, 96079204], [9855, 113635600]]\ndef list_squared(m, n):\n    result = []\n    i = 0;\n    while i < len(results) and results[i][0] < n:\n        if results[i][0] >= m and results[i][0] <= n:\n            result.append(results[i])\n        i += 1\n    return result", "import math\n\ndef list_squared(m, n):\n    result = []\n    for x in range(m, n):\n        divisors = make_divisors(x)\n        squared_list = list(map(square, divisors))\n        total = sum(squared_list)\n        if math.sqrt(total).is_integer():\n            result.append([x, total])\n    return result\n        \n        \ndef square(n):\n    return n * n\n        \ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]", "from math import *\ndef list_squared(m, n):\n    def factors(x):\n        lst = []\n        for i in range(1, int(sqrt(x) + 1)):\n            if x % i == 0:\n                lst.append(i)\n                if x != i ** 2:\n                    lst.append(x / i)\n        return sum([k ** 2 for k in lst])\n    return [[j, factors(j)] for j in range(m, n + 1) if sqrt(factors(j)) % 1 == 0]      ", "from math import sqrt, pow\n\ndef list_divisors(n):\n    s = set()\n    i = 1\n    while i <= sqrt(n):\n        if i in s:\n            continue\n        div, mod = divmod(n, i)\n        if (mod == 0) : \n            s.add(i)\n            if (div != i): \n                s.add(div)\n        i = i + 1\n    \n    return sorted(list(s))\n\n\ndef list_squared(m, n):\n    result = []\n    for i in range(m, n + 1):\n        divs_sum = sum(pow(d, 2) for d in list_divisors(i))\n        if sqrt(divs_sum).is_integer():\n            result.append([i, divs_sum])\n    return result\n        \n", "def divisors(n):\n    divs = []\n    for x in range(1, int(n**0.5)+1): \n        if n % x == 0:\n            divs.extend([x**2, (n//x)**2])\n    return sum(set(divs)) \n    \ndef list_squared(start, stop):\n    squares = []\n    for x in range(start, stop+1):\n        x_sum = divisors(x)\n        if int(x_sum**0.5) **2 == x_sum: \n            squares.append([x, x_sum])\n\n    return squares\n", "from math import sqrt\nfrom functools import reduce\n\nCACHE = {}\n\ndef get_divisors_gen(number):\n    if number in CACHE:\n        return CACHE[number]\n    \n    divisors = []\n    for i in range(1, int(number / 2) + 1):\n        if number % i == 0:\n            divisors.append(i)\n    divisors.append(number)\n\n    CACHE[number] = divisors\n    \n    return divisors\n    \n\ndef list_squared(m, n):\n    result = []\n    for number in range(m, n+1):\n        div_sq_sum = reduce(\n            lambda acc, item: acc + item**2,\n            get_divisors_gen(number)\n        )\n        if sqrt(div_sq_sum).is_integer():\n            result.append([number, div_sq_sum])\n    return result", "from functools import reduce\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef list_squared(m, n):\n    ans = []\n    \n    for i in range(m,n):\n        factor_sum = 0\n        factor_ans = []\n        \n        for j in factors(i):\n            factor_sum += j**2\n                \n        if (factor_sum**0.5).is_integer():\n            factor_ans.append(i)\n            factor_ans.append(factor_sum)\n            ans.append(factor_ans)\n    return ans\n        \n        \n            \n            \n        \n    \n        \n                \n            \n", "def list_squared(m, n):\n    # your code   \n    import numpy as np\n    # find the divisors all together with array operarions instead of for loop (TOO SLOW!)\n    def find_divisor_square(n):\n        arr = np.arange(1,n+1)\n        arr = n/arr\n        divs = arr[arr == arr.astype(int)]\n        return divs**2\n        \n    res = []\n    for num in range(m,n):\n        divs = find_divisor_square(num)\n        sum_squres = divs.sum()\n        if (sum_squres**0.5).is_integer(): # checks whether a float obj is an integer\n            res.append([num, sum_squres])\n    return res\n", "import math\n\ndef list_squared(m, n):\n    result = []\n    for number in range(m, n):\n        divisors = []\n        for div in range(1, int(math.sqrt(number) + 1)):\n            if number % div == 0:\n                divisors.append(div)\n        upper_divisors = [int(number / i) for i in divisors if i*i != number]\n        divisors.extend(upper_divisors[::-1])\n        div_sum = sum([i**2 for i in divisors])\n        if math.sqrt(div_sum).is_integer():\n            result.append([number, div_sum])\n    return result", "CACHE = {}\n\ndef squared_cache(number):\n    if number not in CACHE:\n        divisors = [x for x in range(1, round(number/2) + 1) if number % x == 0]\n        CACHE[number] = sum([x * x for x in divisors]) + number ** 2\n        return CACHE[number] \n    \n    return CACHE[number]\n\ndef list_squared(m, n):\n    ret = []\n\n    for number in range(m, n + 1):\n        divisors_sum = squared_cache(number)\n        if (divisors_sum ** 0.5).is_integer():\n            ret.append([number, divisors_sum])\n\n    return ret", "def list_squared(m, n):\n    squared_divisors = []\n    for i in range(m, n + 1):\n        if i == 1:\n            div = [1]\n        else:\n            div = [j for j in range(1, int(i**0.5) + 1) if i % j == 0 for j in (j, i//j) if i/j != j]\n        tot = sum(k*k for k in div)**0.5\n        if tot == int(tot):\n            squared_divisors.append([i, int(tot**2)])\n    return squared_divisors\n", "from math import sqrt\n\ndef list_squared(m, n):\n    squares = []\n    # Find all divisors\n    for i in range(m,n):\n        i_squares = 0\n        for j in range(1,int(sqrt(i)//1)+1):\n            if i%j == 0:\n                i_squares += j**2\n                if i//j != j:\n                    i_squares += (i//j)**2\n        if i_squares%sqrt(i_squares) == 0 and i_squares/sqrt(i_squares) == sqrt(i_squares):\n            squares.append([i,i_squares])\n    return squares", "from functools import reduce\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef list_squared(m, n):\n    result = []\n    \n    for i in range(m, n+1):\n        factors_sq = [x**2 for x in factors(i)]\n        sum_factors = sum(factors_sq)\n        sum_factors_root = sum_factors ** 0.5\n        if  sum_factors_root == int(sum_factors_root):\n            result.append([i, sum_factors])\n            \n    return result\n        \n", "cache = {}\n\ndef sum_cache(n):\n    if n not in cache:\n        divs = [i for i in range(1, n+1) if n % i == 0]\n        cache[n] = sum([x*x for x in divs])\n        return cache[n]\n    return cache[n]\n\n\ndef list_squared(m, n):\n    # your code\n    \n    result = []\n    for j in range(m, n+1):\n        summ = sum_cache(j)\n        if (summ ** 0.5).is_integer():\n            result.append([j, summ])\n\n    return result", "import math\n\ndef get_factors(m, n):\n    cache = dict()\n    for i in range(m, n + 1):\n        factors = (j for j in range(1, 1 + i) if i % j == 0)\n        total_sum = sum(j * j for j in factors)\n        if math.sqrt(total_sum) % 1 == 0.:\n            cache[i] = total_sum\n    return cache\n    \n    \nFACTORS = get_factors(1, 10000)\n\ndef list_squared(m, n):\n    return [[i, FACTORS[i]] for i in range(m, n + 1) if i in FACTORS]\n", "def list_squared(m, n):\n    answer = []\n    for i in range(m, n+1):\n        root = sumSquares(factors(i)) ** 0.5\n        if root == round(root):\n            answer.append([i, int(root ** 2)])\n    return answer\n \n# def factors(x):\n#     factorsList = []\n#     for i in range(1, x // 2 +1):\n#         if  x % i == 0:\n#             factorsList.append(i)\n#     factorsList.append(x)\n#     return factorsList\n \nfrom functools import reduce\n \ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n \ndef sumSquares(l):\n    return sum(i ** 2 for i in l)", "def list_squared(m, n):\n    answer = []\n    for i in range(m, n+1):\n        root = sumSquares(factors(i)) ** 0.5\n        if root == round(root):\n            answer.append([i, int(root ** 2)])\n    return answer\n\nfrom functools import reduce\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef sumSquares(l):\n    return sum(i ** 2 for i in l)"]