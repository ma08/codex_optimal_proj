["def html(tag, *contents, **attr):\n    openTag = tag + ''.join(f' {\"class\" if k==\"cls\" else k}=\"{v}\"' for k,v in attr.items())\n    \n    return '\\n'.join( f'<{openTag}>{c}</{tag}>' for c in contents) or f'<{openTag} />'", "def html(tag, *args, **kwargs):\n    open = tag + ''.join(f' {\"class\" if k == \"cls\" else k}=\"{v}\"' for k,v in kwargs.items())\n    return '\\n'.join(f\"<{open}>{a}</{tag}>\" for a in args) or f\"<{open} />\"", "def html(tag, *content, **attributes):\n    attrs = ''.join(f' {\"class\" if name == \"cls\" else name}=\"{value}\"' for name, value in attributes.items())\n    return '\\n'.join(f\"<{tag}{attrs}>{element}</{tag}>\" for element in content) if content else f'<{tag}{attrs} />'", "import re\ndef html(tag,*content,cls=None,**atts):  \n    attributes = str(atts).replace('{',\"\").replace('}',\"\")\n    lst = attributes.split(',')\n    lst = [i.replace(\"'\",\"\",2).replace(\"'\",'\"').replace(': ',\"=\",1) for i in lst]\n    attributes = \"\".join(lst)   \n    if len(content) > 0:\n        txt = \"\"\n        for i in range(len(content)):\n            if cls: \n                if attributes:\n                    txt += \"\\n\"+f\"<{tag} class=\\\"{str(cls)}\\\" {attributes}>{content[i]}</{tag}>\"\n                else:\n                    txt += \"\\n\"+f\"<{tag} class=\\\"{str(cls)}\\\">{content[i]}</{tag}>\"\n            else:\n                if attributes:\n                    txt += \"\\n\"+f\"<{tag} {attributes}>{content[i]}</{tag}>\"     \n                else:\n                    txt += \"\\n\"+f\"<{tag}>{content[i]}</{tag}>\"\n        return txt[1:]\n    else: \n        if cls:\n            if attributes:\n                return f\"<{tag} class=\\\"{str(cls)}\\\" {attributes} />\"\n            else:\n                return f\"<{tag} class=\\\"{str(cls)}\\\" />\"\n        else:\n            if attributes:\n                return f\"<{tag} {attributes} />\"\n            else:\n                return f\"<{tag} />\"\n", "ALIAS = {\"cls\": \"class\"}\n\n\ndef html(tag, *contents, **attribs):\n    attrib_repr = (\n        \" \"\n        + \" \".join(f'{ALIAS.get(key, key)}=\"{value}\"' for key, value in attribs.items())\n        if attribs\n        else \"\"\n    )\n    if not contents:\n        return f\"<{tag}{attrib_repr} />\"\n    return \"\\n\".join(f\"<{tag}{attrib_repr}>{content}</{tag}>\" for content in contents)", "def html(tag, *content, **attributes):\n    attrib_str = ''.join(\n        f' {key if key != \"cls\" else \"class\"}=\"{value}\"'\n        for key, value in attributes.items())\n    if not content:\n        return f'<{tag}{attrib_str} />'\n    return '\\n'.join(\n        f'<{tag}{attrib_str}>{cnt}</{tag}>'\n        for cnt in content)", "def html(tag, *contents, **attrs):\n    attr_ls = [f'{\"class\" if k==\"cls\" else k}=\"{v}\"' for k,v in attrs.items()]\n    if not contents: return f\"<{' '.join((tag, *attr_ls))} />\"\n    else: return '\\n'.join(f\"<{' '.join((tag, *attr_ls))}>{content}</{tag}>\" for content in contents)", "def html(t, *args, **kwargs):\n    s = \"\".join(f' {\"class\" if x == \"cls\" else x}=\"{kwargs[x]}\"' for x in kwargs)\n    return f\"<{t}{s} />\" if not args else \"\\n\".join(f\"<{t}{s}>{x}</{t}>\" for x in args)", "def html(tag, *content, **kwargs):\n    # Format tag's attributes \n    attributes = ''\n    if kwargs:\n        attribs = []\n        for k, v in list(kwargs.items()):\n            if k == 'cls':\n                k = 'class'\n            attribs.append(f'{k}=\"{v}\"')\n        attributes = ' ' + ' '.join(attribs)   \n        \n    # Process content free tags\n    if not content:\n        return f'<{tag}{attributes} />'\n    \n    # Process content filled tags\n    lines = []\n    for line in content:\n        lines.append(f'<{tag}{attributes}>{line}</{tag}>')\n    return '\\n'.join(lines)\n", "def html(tag, *contents, **attr):\n    open_tag = tag + ''.join(f' {\"class\" if n == \"cls\" else n}=\"{v}\"' for n, v in attr.items())\n    return '\\n'.join(f'<{open_tag}>{c}</{tag}>' for c in contents) or f'<{open_tag} />'", "def html(*args, **kwargs):\n    attributes = tuple(f'{name.replace(\"cls\", \"class\")}=\"{value}\"' for name, value in kwargs.items())\n    if len(args) == 1: return f'<{\" \".join(args + attributes)} />'\n    return '\\n'.join(f'<{\" \".join(args[:1] + attributes)}>{content}</{args[0]}>' for content in args[1:])", "def html(A, *B, **C):\n    Cs = ' '.join('{}=\"{}\"'.format(\"class\" if i == \"cls\" else i, C[i]) for i in C)\n    if len(B) == 0:\n        return '<{}{}{} />'.format(A,' ' if Cs else '', Cs)\n    return '\\n'.join('<{}{}{}>{}</{}>'.format(A,' ' if Cs else '', Cs, i, A) for i in B)", "def html(*args, **kwargs):\n  keywords, elements = [], []\n  if kwargs:\n    for key, value in kwargs.items():\n      if key == \"cls\":\n        key = 'class'\n      keywords.append(f'{key}=\"{value}\"')\n  if len(args) == 1:\n    if kwargs:\n      element = f'<{args[0]}'\n      for key in keywords:\n          element += ' ' + key\n      element += ' />'\n      return element\n    else:\n      return f'<{args[0]} />'\n  for i, arg in enumerate(args):\n    if i == 0: tag = arg\n    else:\n      element = f'<{tag}'\n      if kwargs:\n        for key in keywords:\n          element += ' ' + key\n      element += f'>{arg}</{tag}>' \n      elements.append(element)\n  return \"\\n\".join(element for element in elements)", "def html(tag_name, *args, **kwargs):\n    attributes = []\n    for key, value in kwargs.items():\n        if key == \"cls\":\n            key = \"class\"\n        attributes.append(f' {key}=\"{value}\"')\n    \n    if len(args) == 0:\n        return f\"<{tag_name}{''.join(attributes)} />\"\n    \n    closing_tags = []\n    for arg in args:\n        closing_tags.append(f\"<{tag_name}{''.join(attributes)}>{arg}</{tag_name}>\")\n    \n    return \"\\n\".join(closing_tags)", "def html(tag_name, *args, **kwargs):\n    attributes = []\n    for key, value in kwargs.items():\n        if key == \"cls\":\n            key = \"class\"\n        attributes.append(f'{key}=\"{value}\"')\n    \n    if len(args) == 0:\n        return f\"<{tag_name}{'' if len(attributes) == 0 else ' ' + ' '.join(attributes)} />\"\n    \n    closing_tags = []\n    for arg in args:\n        closing_tags.append(f\"<{tag_name}{'' if len(attributes) == 0 else ' ' + ' '.join(attributes)}>{arg}</{tag_name}>\")\n    return \"\\n\".join(closing_tags)", "def html(tag_name, *args, **kwargs):\n    print((tag_name, args, kwargs))\n    \n    attributes = []\n    for key, value in list(kwargs.items()):\n        if key == \"cls\":\n            key = \"class\"\n        attributes.append(f'{key}=\"{value}\"')\n    \n    print()\n    print(attributes)\n    \n    if len(args) == 0:\n        return f\"<{tag_name}{'' if len(attributes) == 0 else ' ' + ' '.join(attributes)} />\"\n    \n    closing_tags = []\n    for arg in args:\n        closing_tags.append(f\"<{tag_name}{'' if len(attributes) == 0 else ' ' + ' '.join(attributes)}>{arg}</{tag_name}>\")\n    return \"\\n\".join(closing_tags)\n    \n", "def html(xn, *args, **kwargs):\n    props = ''.join(' '+('class' if p == 'cls' else p)+'=\"'+kwargs[p]+'\"' for p in kwargs)\n    return '\\n'.join(f'<{xn}{props}>{v}</{xn}>' for v in args) if args else f'<{xn}{props} />'", "def html(*args, **k_args):\n    attrs = []\n    for k, v in list(k_args.items()):\n        if k=='cls':\n            k='class'\n        attrs.append(k+'=\"'+v+'\"')\n    attrs = ' '.join(attrs)\n    args = list(args)\n    tag = args.pop(0)\n    opentag=' '.join(['<'+tag, attrs]).strip()\n    if len(args)==0:\n        return opentag + ' />'\n    return '\\n'.join([opentag+'>'+txt+'</'+tag+'>' for txt in args])\n", "def stringify_attrs(attrs):\n  result = ''\n  for attr in attrs:\n    new_attr = attrs[attr]\n    if attr == 'cls':\n      attr = 'class'\n    result += attr + '=' + '\"' + new_attr + '\"' + ' '\n  if not result:\n    return ''\n  return ' ' + result.strip()\n  \n\ndef html(tag, *bodies, **attrs):\n  if not bodies:\n    result = '<' + tag + stringify_attrs(attrs) + ' />'\n    return result\n  result = ''\n  for body in bodies:\n    result += '<' + tag + stringify_attrs(attrs) + '>' + body + '</' + tag + '>' + '\\n'\n  return result.strip()", "\ndef stringify_attrs(attrs):\n  # {'cls': 'ds', 'name': 'val'}\n  # 'class=\"ds\" name=\"val\"'\n  result = ''\n  for attr in attrs:\n    new_attr = attrs[attr]\n    if attr == 'cls':\n      attr = 'class'\n    result += attr + '=' + '\"' + new_attr + '\"' + ' '\n  if not result:\n    return ''\n  return ' ' + result.strip()\n  \n\ndef html(tag, *bodies, **attrs):\n  if not bodies:\n    result = '<' + tag + stringify_attrs(attrs) + ' />'\n    return result\n  result = ''\n  for body in bodies:\n    result += '<' + tag + stringify_attrs(attrs) + '>' + body + '</' + tag + '>' + '\\n'\n  return result.strip()\n\n    #<\u0442\u0435\u0433 \u0438\u043c\u044f=\"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\">body</\u0442\u0435\u0433>\n  \n\n"]