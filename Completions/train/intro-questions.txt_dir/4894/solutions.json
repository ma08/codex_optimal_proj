["def makeParts(arr, csize):\n  return [ arr[i: i + csize] for i in range(0, len(arr), csize)]", "def makeParts(arr, chunkSize):\n  return [arr[i:i+chunkSize] for i in range(0, len(arr), chunkSize)]", "def makeParts(arr, chunkSize):\n    r = list()\n    while arr:\n        r.append(arr[0:chunkSize])\n        arr = arr[chunkSize:]\n    return r", "def makeParts(arr, chunkSize):\n  lst = []\n  for i in range(0, len(arr), chunkSize):\n      lst.append(arr[i:i+chunkSize])\n  return lst", "def makeParts(arr, size):\n    return [arr[i:i+size] for i in range(0, len(arr), size)]", "import math\ndef makeParts(arr, size):\n    c = [[] for i in range(math.ceil(len(arr)/size))]\n    for i in range(len(arr)):\n        c[int(i/size)].append(arr[i])\n    return c", "def makeParts(arr, chunk_size):\n    return [arr[i:i + chunk_size] for i in range(0, len(arr), chunk_size)]\n", "from math import ceil; makeParts=lambda arr, c: [arr[i*c:i*c+c] for i in range(ceil(len(arr)/c))]", "def makeParts(arr, chunkSize):\n    store = []\n    while len(arr) >= chunkSize:\n        store.append(arr[:chunkSize])\n        arr = arr[chunkSize:]\n    if len(arr) > 0:\n        store.append(arr)\n    return store"]