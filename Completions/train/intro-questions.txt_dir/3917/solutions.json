["def freeway_game(km, kph, cars):\n    t = km / kph\n    c = 0\n    for dt, speed in cars:\n        d = km - (t - dt/60) * speed\n        if dt <= 0:\n            c += d > 0\n        else:\n            c -= d < 0\n    return c", "def freeway_game(dist_km_to_exit, my_speed_kmph, other_cars):\n    my_time_to_exit = dist_km_to_exit / my_speed_kmph\n    return sum(\n        + (lead < 0 and my_time_to_exit * speed < dist_km_to_exit + lead / 60 * speed)\n        - (lead > 0 and my_time_to_exit * speed > dist_km_to_exit + lead / 60 * speed)\n        for lead, speed in other_cars)", "def freeway_game(dToExit, myS, cars):\n    return sum( cS != myS and (0 < minutes/60 * cS/(cS-myS) < dToExit/myS) * (-1)**(cS > myS) for minutes,cS in cars )", "def freeway_game(dist_km_to_exit, my_speed_kph, other_cars):\n    score = 0\n    for pair in other_cars:\n        if(my_speed_kph == pair[1]):\n            continue\n        if( 0 < pair[1]*(pair[0]/60) / (pair[1] - my_speed_kph) < dist_km_to_exit/my_speed_kph):\n            score = score - 1 if pair[0] > 0 else score + 1\n    return score", "def freeway_game(distance, speed, cars):\n    score = 0\n    exit = 60 * distance / speed\n    for other_time, other_speed in cars:\n        other_exit = 60 * distance / other_speed + other_time\n        if other_time < 0 and other_exit > exit:\n            score += 1\n        elif other_time > 0 and other_exit < exit:\n            score -= 1\n    return score\n", "def freeway_game(dist_km_to_exit, my_speed, other_cars):\n    count = 0\n    for (other_start_minute, other_speed) in other_cars:\n        if other_speed == my_speed:\n            continue\n        other_start_time = other_start_minute / 60\n        passing_point = (\n            (other_start_time * my_speed * other_speed) /\n            (other_speed - my_speed)\n        )\n        if 0 < passing_point < dist_km_to_exit:\n            if my_speed > other_speed:\n                count += 1\n            else:\n                count -= 1  \n    return count", "def freeway_game(dist_km_to_exit, my_speed_kph, other_cars):\n    f_time = lambda s: dist_km_to_exit / s * 60\n    duration = f_time(my_speed_kph)\n    c = 0\n    for p, s in other_cars:\n        t = f_time(s) + p\n        c += (t > duration and p < 0) - (t < duration and p > 0)\n    return c", "def freeway_game(d, speed, arr):\n    t = d/speed*60\n    print(t)\n    c = 0\n    \n    for data in arr:\n        if data[0] < 0:\n            if d/data[1]*60 > t-data[0]:\n                c += 1\n        if data[0] > 0:\n            if d/data[1]*60 < t-data[0]:\n                c -= 1\n    \n    return c", "def freeway_game(dist_km_to_exit, my_speed_kph, other_cars):\n    t0 = dist_km_to_exit / my_speed_kph\n    time_car = lambda dist0, time_delta, speed: (dist0 + time_delta*speed/60) / speed\n    result = 0\n    for car in other_cars:\n        if car[0] > 0 and time_car(dist_km_to_exit, car[0], car[1]) < t0:\n            result -= 1\n            continue\n        if car[0] < 0 and time_car(dist_km_to_exit, car[0], car[1]) > t0:\n            result += 1\n    return result", "def freeway_game(dist, speed, cars):\n    res, exit = 0, dist / speed\n    check = lambda t, s1, s2: s * t < exit * s2 * 60\n    \n    for t,s in cars:\n        if t < 0 and speed > s:\n            res += check(-t, s, speed-s)\n        elif t > 0 and speed < s:\n            res -= check(t, s, s-speed)\n    return res"]