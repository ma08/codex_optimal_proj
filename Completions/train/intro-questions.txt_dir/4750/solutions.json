["def flatten(lst):\n    r = []\n    for x in lst:\n       if type(x) is list:\n          r.extend(x)\n       else:\n          r.append(x)\n    return r ", "def flatten(lst):\n    return sum(([i] if not isinstance(i, list) else i for i in lst), [])", "from itertools import chain\ndef flatten(lst):\n    try:\n        return list(chain.from_iterable(lst))\n    except:\n        return lst", "from itertools import chain\n\ndef flatten(lst):\n    try:\n        return list(chain(*lst))\n    except TypeError:\n        return lst", "def flatten(lst):\n    #your code here\\\n    res = []\n    for i in lst:\n      if isinstance(i, list):\n        res.extend(i)\n      else:\n        res.append(i)\n    return res", "def flatten(lst):\n    return [item for sublist in [seq if isinstance(seq, list) else [seq] for seq in lst] for item in sublist]", "def flatten(lst):\n    return sum((([x], x)[isinstance(x, list)] for x in lst), [])", "def flatten(lst):\n    res = []\n    for l in lst:\n        if isinstance(l, list):\n            res.extend(l)\n        else:\n            res.append(l)\n    return res", "def flatten(lst):\n    return [x for xs in lst for x in (xs if isinstance(xs, list) else [xs])]", "def flatten(a):\n    return [x for b in a for x in (b if type(b) is list else [b] ) ]"]