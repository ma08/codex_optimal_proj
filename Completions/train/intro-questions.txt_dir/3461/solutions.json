["def common_ground(s1,s2):\n    lst = []\n    for w in s2.split():\n        if w in s1.split() and w not in lst:\n            lst.append(w)\n    return ' '.join(lst) if lst else \"death\"", "def common_ground(s1,s2):\n    words = s2.split()\n    return ' '.join(sorted((a for a in set(s1.split()) if a in words),\n                           key=lambda b: words.index(b))) or 'death'\n", "def common_ground(s1, s2):\n    s1, s2 = set(s1.split()), s2.split()\n    return \" \".join(sorted((set(s2) & s1), key=s2.index)) or \"death\"", "def common_ground(s1, s2):\n    s1, s2 = set(s1.split()), s2.split()\n    return \" \".join(sorted((word for word in set(s2) if word in s1), key=s2.index)) or \"death\"\n", "def common_ground(s1,s2):\n    ret = [i for i in set(s1.split()) if i in s2.split()]\n    if len(ret) == 0: return 'death'\n    return ' '. join(sorted(ret, key=lambda x: (s2.split()).index(x) ))", "def common_ground(s1,s2):\n    return \" \".join(sorted(set(s1.split(\" \")).intersection(s2.split(\" \")), key=s2.split(\" \").index)) or \"death\"", "from collections import OrderedDict\n\n\ndef common_ground(s1, s2):\n    xs = set(s1.split())\n    return ' '.join(x for x in OrderedDict.fromkeys(s2.split()) if x in xs) or 'death'", "from collections import OrderedDict\ndef common_ground(s1,s2):\n    return \" \".join(filter(set(s1.split()).__contains__, OrderedDict.fromkeys(s2.split()))) or \"death\"", "from collections import OrderedDict\ndef common_ground(s1,s2):\n    s = \" \".join(w for w in OrderedDict.fromkeys(s2.split()) if w in s1.split())\n    return s if s else \"death\"", "from collections import OrderedDict\ndef common_ground(s1,s2):\n    s3 = []\n    [s3.append(i) for i in s2.split() if i in s1.split()]\n\n    if len(s3) == 0:\n        return 'death'\n    else:\n        return ' '.join(OrderedDict.fromkeys(s3))"]