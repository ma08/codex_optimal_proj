["bin2hex = {\"0000\": \"0\", \"0001\": \"1\", \"0010\": \"2\", \"0011\": \"3\", \n           \"0100\": \"4\", \"0101\": \"5\", \"0110\": \"6\", \"0111\": \"7\", \n           \"1000\": \"8\", \"1001\": \"9\", \"1010\": \"a\", \"1011\": \"b\", \n           \"1100\": \"c\", \"1101\": \"d\", \"1110\": \"e\", \"1111\": \"f\"}\nhex2bin = {v: k for k, v in bin2hex.items()}\n\ndef bin_to_hex(s, res = \"\"):\n    s = \"0\" * (4 - len(s) % 4) + s\n    while s:\n        res += bin2hex[s[:4]]\n        s = s[4:]\n    return res.lstrip(\"0\") or \"0\"\n    \ndef hex_to_bin(s, res = \"\"):\n    while s:\n        res += hex2bin[s[0].lower()]\n        s = s[1:]\n    return res.lstrip(\"0\") or \"0\"", "D_S = '0123456789abcdef'\nS_D = {d:n for n,d in enumerate(D_S)}\n\ndef convert(s,bIn,bOut):\n    n = sum( S_D[d] * bIn**p for p,d in enumerate(reversed(s.lower())))\n    out=[]\n    while n:\n        n,r = divmod(n,bOut)\n        out.append(D_S[r])\n    return ''.join(reversed(out)) or '0'\n    \ndef bin_to_hex(s): return convert(s,2,16)\ndef hex_to_bin(s): return convert(s,16,2)", "def bin_to_hex(bin_stg):\n    return base_to_base(bin_stg, 2, 16)\n\ndef hex_to_bin(hex_stg):\n    return base_to_base(hex_stg, 16, 2)\n\ndef base_to_base(num_stg, from_base, to_base):\n    digits = \"0123456789abcdef\"\n    result, n = \"\", sum(digits.index(d) * from_base**i for i, d in enumerate(num_stg.lower()[::-1]))\n    while n > 0:\n        d = n % to_base\n        result, n = digits[d] + result, n // to_base\n    return result or \"0\"", "h = '0123456789abcdef'\n\ndef bin_to_hex(binary_string):\n    n = 0\n    for x in binary_string:\n        n = n * 2 + (x == '1')\n    result = []\n    while n:\n        n, r = divmod(n, 16)\n        result.append(h[r])\n    return ''.join(result[::-1]) or '0'\n\ndef hex_to_bin(hex_string):\n    n = 0\n    for x in hex_string.lower():\n        n = n * 16 + h.find(x)\n    result = []\n    while n:\n        n, r = divmod(n, 2)\n        result.append(h[r])\n    return ''.join(result[::-1]) or '0'", "def bin_to_hex(binary_string):\n\n  n = sum( 2**i for i, b in enumerate(binary_string[::-1]) if b == '1' )\n  \n  return '{:x}'.format(n)\n    \ndef hex_to_bin(hex_string):\n\n  convert = lambda x: ord(x) - 48 if 48 <= ord(x) <=57 else ord(x.lower()) - 87\n  \n  n = sum( convert(x) * 16**i for i, x in enumerate(hex_string[::-1]) )\n\n  return '{:b}'.format(n)", "def from_base(string, base, alphabet='0123456789abcdef'):\n    return sum(alphabet.index(c) * base ** i for i, c in enumerate(string.lower()[::-1]))\n\ndef to_base(n, base, alphabet='0123456789abcdef'):\n    s = ''\n    while n:\n        n, m = divmod(n, base)\n        s = alphabet[m] + s\n    return s or alphabet[0]\n\ndef bin_to_hex(string):\n    return to_base(from_base(string, 2), 16)\n    \ndef hex_to_bin(string):\n    return to_base(from_base(string, 16), 2)", "N = '0123456789abcdef'\n\ndef converter(s, p1, p2):\n    \"\"\" Convert input string to desired output \"\"\"\n    dec = sum(N.find(s[~i].lower()) * (p1 ** i) for i in range(len(s)))\n    res = []\n    while dec != 0:\n        res.append(dec % p2)\n        dec //= p2\n    return ''.join(N[i] for i in reversed(res)) if res else '0'\n\ndef bin_to_hex(b):\n    return converter(b, 2, 16)\n    \ndef hex_to_bin(h):\n    return converter(h, 16 ,2)", "bh={\"\":\"\",\"0000\":\"0\",\"0001\":\"1\",\"0010\":\"2\",\"0011\":\"3\",\"0100\":\"4\",\"0101\":\"5\",\"0110\":\"6\",\"0111\":\"7\",\"1000\":\"8\",\"1001\":\"9\",\"1010\":\"a\",\"1011\":\"b\",\"1100\":\"c\",\"1101\":\"d\",\"1110\":\"e\",\"1111\":\"f\"}\ndef bin_to_hex(bs):\n    r=\"\"; bs=\"000\"+bs\n    for i in range(len(bs),-1,-4): s=bs[i-4:i]; r=bh[s]+r\n    while r[0]==\"0\" and len(r)>1: r=r[1:]   \n    return r\n\nhb={bh[v]:v for v in bh}\ndef hex_to_bin(hs):\n   r=\"\"; hs=hs.lower()\n   for c in hs: r+=hb[c]\n   while r[0]==\"0\" and len(r)>1: r=r[1:]\n   return r", "val  = lambda c: ord(c.lower()) - (48 if ord(c) < 58 else 87)\nint_ = lambda s, x: sum(val(c) * x**i for i,c in enumerate(reversed(s)))\n\ndef bin_to_hex(binary_string):\n    return \"{:x}\".format(int_(binary_string, 2))\n    \ndef hex_to_bin(hex_string):\n    return \"{:b}\".format(int_(hex_string, 16))", "int = 0 .__class__\nstr = 'a'.__class__\n\nCONVERSION = dict(enumerate(\"0123456789abcdef\"))\n\n\ndef bin_to_hex(b):\n    b = int(b, 2)\n    result = []\n    while True:\n        b, m = divmod(b, 16)\n        result.append(CONVERSION[m])\n        if b == 0:\n            break\n    return \"\".join(map(str, reversed(result)))\n\n\ndef hex_to_bin(b):\n    b = int(b, 16)\n    result = []\n    while True:\n        b, m = divmod(b, 2)\n        result.append(m)\n        if b == 0:\n            break\n    return \"\".join(map(str, reversed(result)))"]