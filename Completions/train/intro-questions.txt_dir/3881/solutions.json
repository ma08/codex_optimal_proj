["import re\ndict = {'UUC':'F','UUU':'F','UUA':'L','UUG':'L','CUU':'L','CUC':'L','CUA':'L','CUG':'L','AUU':'I','AUC':'I','AUA':'I','AUG':'M','GUU':'V','GUC':'V','GUA':'V','GUG':'V','UCU':'S','UCC':'S','UCA':'S','UCG':'S','AGU':'S','AGC':'S','CCU':'P','CCC':'P','CCA':'P','CCG':'P','ACU':'T','ACC':'T','ACA':'T','ACG':'T','GCU':'A','GCC':'A','GCA':'A','GCG':'A','UAU':'Y','UAC':'Y','CAU':'H','CAC':'H','CAA':'Q','CAG':'Q','AAU':'N','AAC':'N','AAA':'K','AAG':'K','GAU':'D','GAC':'D','GAA':'E','GAG':'E','UGU':'C','UGC':'C','UGG':'W','CGU':'R','CGC':'R','CGA':'R','CGG':'R','AGA':'R','AGG':'R','GGU':'G','GGC':'G','GGA':'G','GGG':'G'}\n\ndef protein(rna):\n    return re.sub('.{3}', lambda r: dict.get(r.group(0), ''), rna)", "from re import findall\ndef protein(rna):\n    return \"\".join({'UUC':'F', 'UUU':'F',\n    'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    'AUG':'M', \n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n    'UAU':'Y', 'UAC':'Y', \n    'CAU':'H', 'CAC':'H',\n    'CAA':'Q', 'CAG':'Q', \n    'AAU':'N', 'AAC':'N', \n    'AAA':'K', 'AAG':'K',\n    'GAU':'D', 'GAC':'D', \n    'GAA':'E', 'GAG':'E',\n    'UGU':'C', 'UGC':'C',\n    'UGG':'W', \n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n    'UAA':'', 'UGA':'', 'UAG':''}.get(x) for x in findall(\"...\", rna))", "import re\n\ndef protein(rna):\n    rna_2_protein_dict = {\n    # Phenylalanine\n    'UUC':'F', 'UUU':'F',\n    # Leucine\n    'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    # Isoleucine\n    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    # Methionine\n    'AUG':'M', \n    # Valine\n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    # Serine\n    'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    # Proline\n    'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    # Threonine\n    'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n    # Alanine\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n    # Tyrosine\n    'UAU':'Y', 'UAC':'Y', \n    # Histidine\n    'CAU':'H', 'CAC':'H',\n    # Glutamine\n    'CAA':'Q', 'CAG':'Q', \n    # Asparagine\n    'AAU':'N', 'AAC':'N', \n    # Lysine\n    'AAA':'K', 'AAG':'K',\n    # Aspartic Acid\n    'GAU':'D', 'GAC':'D', \n    # Glutamic Acid\n    'GAA':'E', 'GAG':'E',\n    # Cystine\n    'UGU':'C', 'UGC':'C',\n    # Tryptophan\n    'UGG':'W', \n    # Arginine\n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n    # Glycine\n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n    # Stop codon\n    #'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop',\n}\n    # your code here\n    return re.sub('(?P<rna>\\D{3})',lambda match_obj: rna_2_protein_dict.get(match_obj.group('rna')) ,rna)", "rnaDict = '''Phenylalanine (F): UUU, UUC\nLeucine (L): UUA, UUG, CUU, CUC, CUA, CUG\nIsoleucine (I): AUU, AUC, AUA\nMethionine (M): AUG\nValine (V): GUU, GUC, GUA, GUG\nSerine (S): UCU, UCC, UCA, UCG, AGU, AGC\nProline (P): CCU, CCC, CCA, CCG\nThreonine (T): ACU, ACC, ACA, ACG\nAlanine(A): GCU, GCC, GCA, GCG\nTyrosine (Y): UAU, UAC\nHistidine (H): CAU, CAC\nGlutamine (Q): CAA, CAG\nAsparagine (N): AAU, AAC\nLysine (K): AAA, AAG\nAspartic Acid (D): GAU, GAC\nGlutamic Acid (E): GAA, GAG\nCysteine (C): UGU, UGC\nTryptophan (W): UGG\nArtinine (R): CGU, CGC, CGA, CGG, AGA, AGG\nGlycine (G): GGU, GGC, GGA, GGG\nStop Codon ('Stop'): UGA, UAA, UAG'''\n\nimport re\ndef protein(rna):\n    transDict = {}\n    for line in rnaDict.split('\\n'):\n        for section in line[line.index(':')+1:].replace(' ','').split(','):     \n            transDict[section] = re.findall(r'\\(+\\'?(\\w+)',line)[0]\n    codec = ''\n    while len(rna) > 0:\n        if transDict[rna[:3]] == 'Stop':\n            pass\n        else:\n            codec += transDict[rna[:3]]\n        rna = rna[3:]\n    return codec", "from itertools import takewhile\nfrom textwrap import wrap\n\n\ndef protein(rna):\n    return \"\".join(PEPTIDES[codon] for codon in takewhile(PEPTIDES.__contains__, wrap(rna, 3)))\n\n\nPEPTIDES = {\n    'UUC':'F', 'UUU':'F',\n    'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    'AUG':'M', \n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n    'UAU':'Y', 'UAC':'Y', \n    'CAU':'H', 'CAC':'H',\n    'CAA':'Q', 'CAG':'Q', \n    'AAU':'N', 'AAC':'N', \n    'AAA':'K', 'AAG':'K',\n    'GAU':'D', 'GAC':'D', \n    'GAA':'E', 'GAG':'E',\n    'UGU':'C', 'UGC':'C',\n    'UGG':'W', \n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n}", "def protein(s):\n    d = {'UUC': 'F', 'UUU': 'F',\n\n     'UUA': 'L', 'UUG': 'L', 'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',\n\n     'AUU': 'I', 'AUC': 'I', 'AUA': 'I',\n\n     'AUG': 'M',\n\n     'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',\n\n     'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S', 'AGU': 'S', 'AGC': 'S',\n\n     'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',\n\n     'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n\n     'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',\n\n     'UAU': 'Y', 'UAC': 'Y',\n\n     'CAU': 'H', 'CAC': 'H',\n\n     'CAA': 'Q', 'CAG': 'Q',\n\n     'AAU': 'N', 'AAC': 'N',\n\n     'AAA': 'K', 'AAG': 'K',\n\n     'GAU': 'D', 'GAC': 'D',\n\n     'GAA': 'E', 'GAG': 'E',\n\n     'UGU': 'C', 'UGC': 'C',\n\n     'UGG': 'W',\n\n     'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R',\n\n     'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',\n\n     'UAA': 'Stop', 'UGA': 'Stop', 'UAG': 'Stop'}\n    \n    li = []\n    for i in range(0, len(s), 3):\n        r = d[s[i:i + 3]]\n        if r == 'Stop' : break\n        li.append(r)\n    return ''.join(li)", "def protein(rna):\n    dict = { \n        # Phenylalanine\n        'UUC':'F', 'UUU':'F',\n        # Leucine\n        'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n        # Isoleucine\n        'AUU':'I', 'AUC':'I', 'AUA':'I', \n        # Methionine\n        'AUG':'M', \n        # Valine\n        'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n        # Serine\n        'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n        # Proline\n        'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n        # Threonine\n        'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n        # Alanine\n        'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n        # Tyrosine\n        'UAU':'Y', 'UAC':'Y', \n        # Histidine\n        'CAU':'H', 'CAC':'H',\n        # Glutamine\n        'CAA':'Q', 'CAG':'Q', \n        # Asparagine\n        'AAU':'N', 'AAC':'N', \n        # Lysine\n        'AAA':'K', 'AAG':'K',\n        # Aspartic Acid\n        'GAU':'D', 'GAC':'D', \n        # Glutamic Acid\n        'GAA':'E', 'GAG':'E',\n        # Cystine\n        'UGU':'C', 'UGC':'C',\n        # Tryptophan\n        'UGG':'W', \n        # Arginine\n        'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n        # Glycine\n        'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n        # Stop codon\n        'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop'\n    }\n    arr = [rna[i:i+3] for i in range(0, len(rna), 3)]\n    p = []\n    for a in arr:\n        if dict[a] != \"Stop\":\n            p.append(dict[a])\n        else:\n            break\n    return \"\".join(p)", "MAPPING = {\n  'UUC':'F', 'UUU':'F',\n  'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n  'AUU':'I', 'AUC':'I', 'AUA':'I', \n  'AUG':'M', \n  'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n  'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n  'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n  'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n  'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n  'UAU':'Y', 'UAC':'Y', \n  'CAU':'H', 'CAC':'H',\n  'CAA':'Q', 'CAG':'Q', \n  'AAU':'N', 'AAC':'N', \n  'AAA':'K', 'AAG':'K',\n  'GAU':'D', 'GAC':'D', \n  'GAA':'E', 'GAG':'E',\n  'UGU':'C', 'UGC':'C',\n  'UGG':'W', \n  'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n  'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n  'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop'\n}\n\ndef protein(rna):\n  return ''.join(MAPPING[rna[i:i+3]] for i in range(0, len(rna), 3)).split('Stop')[0]"]