["import math\n\ndef number_property(n):\n    return [isPrime(n), isEven(n), isMultipleOf10(n)]\n    # Return isPrime? isEven? isMultipleOf10?\n    #your code here\n\ndef isPrime(n):\n    if n <= 3:\n        return n >= 2\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n    \ndef isEven(n):\n    return n % 2 == 0\n\ndef isMultipleOf10(n):\n    return n % 10 == 0", "def number_property(n):\n    return [n == 2 or n > 2 and pow(2, n-1, n) == 1,\n            not n % 2,\n            not n % 10]", "import random\n\nCERTAINTY = 10  # False positive rate: 4 ** -CERTAINTY\n\n\ndef number_property(n):\n    return [is_prime(n), n % 2 == 0, n % 10 == 0]\n\n\ndef is_prime(n, k=CERTAINTY):\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n\n    s, d = _factorize(n - 1)\n\n    for _ in range(k):\n        a = random.randint(2, n - 2)\n        x = pow(a, d, n)\n        if _is_witness(x, n, s):\n            return False\n\n    return True  # Probably\n\n\ndef _factorize(n):\n    i = 0\n    while n % 2 == 0:\n        n >>= 1\n        i += 1\n    return i, n\n\n\ndef _is_witness(x, n, s):\n    if x == 1 or x == n - 1:\n        return False\n\n    for _ in range(s - 1):\n        x = pow(x, 2, n)\n        if x == 1:\n            return True\n        if x == n - 1:\n            return False\n\n    return True", "def number_property(n):\n    ans=[False,False,False]\n    j=[]\n    k=[]\n    if n>1:\n     for x in range(2,int(n ** 0.5)+ 1):\n      j.append(x)\n      if n%x:\n        k.append(x)\n     if k==j:\n      ans[0]=True\n    if n%2==0:\n      ans[1]=True\n    if n%10==0:\n      ans[2]=True\n    return ans", "import math\n\ndef number_property(n):\n    return [isprime(n), n % 2 == 0, n % 10 == 0]\n\ndef isprime(fltx):\n    if fltx == 2: return True\n    if fltx <= 1 or fltx % 2 == 0: return False\n    return all(fltx % i != 0 for i in range(3,int(math.sqrt(fltx))+1,2))"]