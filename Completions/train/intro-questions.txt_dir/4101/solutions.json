["def sum_prod(strexpression):\n    return \"%.5e\" %(eval(strexpression))", "def sum_prod(strexpression):\n    # resisting using the dreaded eval :-)\n    # split things up into numbers and operators\n    strexpression = strexpression.replace(\"*\", \" * \").replace(\"+\", \" + \")\n    equation = [float(x) if x[0].isdigit() else x for x in strexpression.split()]\n\n    # and calculate the products and then the sums\n    for operator in [\"*\", \"+\"]:\n        while operator in equation:\n            pos = equation.index(operator)\n            equation[pos - 1] = equation[pos - 1] * equation[pos + 1] if operator == \"*\" else equation[pos - 1] + equation[pos + 1]\n            del equation[pos:pos + 2]\n\n    return '{:.5e}'.format(float(equation[0]))", "sum_prod=lambda ex:'{:.5e}'.format(sum(eval(i) for i in ex.split('+')))", "from functools import reduce\n\n\ndef sum_prod(strexpression):\n    to_sum = [expr.split('*') for expr in strexpression.split('+')]\n\n    total = sum(\n        reduce(lambda result, y: result * float(y), product_, 1.0)\n        for product_ in to_sum\n    )\n    \n    return f'{total:.5e}'", "__import__(\"sys\").setrecursionlimit(2000)\n\ndef sum_prod(strexpression):\n    return f\"{eval(strexpression):.5e}\"", "sum_prod=lambda s:'%.5e'%eval(s)", "from decimal import *\n\ndef sum_prod(strexpression):\n    splitByPlus = strexpression.split(\"+\")\n    for x in range(0, len(splitByPlus)):\n        splitByPlus[x] = multiplyAll(splitByPlus[x])\n    result = addAll(splitByPlus);\n    return \"{:.5e}\".format(result);\n        \ndef addAll(exps):\n    sum = 0.0\n    for i in exps: \n        sum += float(i);\n    return sum;\n    \ndef multiplyAll(exps):\n    exps = exps.split(\"*\")\n    result = 1.0\n    for j in exps: \n        result *= float(j);\n    return result;", "import sys\nsys.setrecursionlimit(2000)\ndef sum_prod(strexpression):\n    return \"{:.5e}\".format(eval(strexpression)) "]