["from math import atan2, degrees\n\ndef get_score(x,y):\n    r, a = (x*x + y*y)**0.5, degrees(atan2(y, x)) + 9\n    t = str([6,13,4,18,1,20,5,12,9,14,11,8,16,7,19,3,17,2,15,10][int(a + 360 if a < 0 else a)//18])\n    for l, s in [(6.35, 'DB'),(15.9,'SB'),(99,t),(107,'T'+t),(162,t),(170,'D'+t)]:\n        if r <= l: return s\n    \n    return 'X'    ", "import cmath\n\n# Dartboard sectors, beginning at 0 angle (i.e. middle of 6), continuing CCW:\n_SECTORS = [6, 13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10]\n\n# Diameters in increasing order, and resulting format string for score:\n_RESULTS = [(12.7, 'DB'), (31.8, 'SB'), (198., '{}'), (214., 'T{}'), (324., '{}'), (340., 'D{}')] \n\n# 1/2 the angle of a single number on the board (since sectors don't start on 0 angle)\n_SLICE = math.pi / 20.\n\ndef get_score(x,y):\n    point = complex(x, y)\n    distance, angle = cmath.polar(point)\n    \n    # Negative angles work by indexing the sector list with a negative index!\n    # The check against \"< _SLICE\" takes care of the wraparound at '6':\n    i = 0 if abs(angle) < _SLICE else int(round(angle / _SLICE / 2))\n    \n    sector = _SECTORS[i]\n    \n    # Take the first format we reach in distance, and default to 'X' if we go beyond the board:\n    result = next((fmt for diameter, fmt in _RESULTS if distance < diameter / 2.), 'X')\n    return result.format(sector)", "from cmath import pi, polar\nSECTIONS = [6,13,4,18,1,20,5,12,9,14,11,8,16,7,19,3,17,2,15,10]\nRINGS = [12.7, 31.8, 198, 214, 324, 340]\nSCORES = 'DB SB {} T{} {} D{} X'.split()\n\ndef get_score(x, y):\n    r, phi = polar(x + 1j * y)\n    r, phi = 2 * r, phi + pi / 20\n    section = SECTIONS[int(10 * phi // pi)]\n    for d, f in zip(RINGS, SCORES):\n        if r < d:\n            return f.format(section)\n    return SCORES[-1]", "from math import atan2, degrees\n\ndef get_score(x, y):\n    scores = [8, 16, 7, 19, 3, 17, 2, 15, 10, 6,\n              13, 4, 18, 1, 20, 5, 12, 9, 14, 11]\n    \n    distance = (x*x + y*y) ** 0.5\n    angle = degrees(atan2(y, x))\n    mod = ''\n    \n    if distance > 340 / 2:\n        return 'X'         # outside\n    elif distance < 12.7 / 2:\n        return 'DB'        # bull's eye\n    elif distance < 31.8 / 2:\n        return 'SB'        # bull\n    elif 198 / 2 < distance < 214 / 2:\n        mod = 'T'          # triple\n    elif 324 / 2 < distance < 340 / 2:\n        mod = 'D'          # double\n    \n    number = str( scores[int((angle + 180 + 9) / 18) - 1] )\n    \n    return mod + number", "import math\ndef get_score(x,y):\n    P = '6 13 4 18 1 20 5 12 9 14 11 8 16 7 19 3 17 2 15 10 6'\n    C = [(0,'DB'),(12.7,'SB'),(31.8,''),(198,'T'),(214,''),(324,'D'),(340,'X')]\n    r, phi = math.sqrt(x*x+y*y), 180*math.atan2(y, x)/math.pi\n    phi += [0,360][phi < 0]\n    p = [p for i, p in enumerate(P.split()) if i*18-9 < phi][-1]\n    c = [c for c in C if c[0]/2 < r][-1][1]\n    return c + ['',p][c in ('','D','T')]", "import math\n\nSTR_MODIFIERS, STR_OUT = \"TD\", \"X\"\nPI = math.pi\nOUT_OF_BORDER, ANGLE_OFFSET = 340.0/2, 2*PI/40\nCIRCLES = {(0,12.70): \"DB\", (12.70,31.8):\"SB\", (198,214):\"T\", (324,340):\"D\"}\nPARTS = [6, 13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10]\n\ndef get_score(x,y):\n    ans, d = \"\", (x**2+y**2)**.5\n    theta = (math.atan(y/float(x)) + PI*(x<0) + ANGLE_OFFSET + 2*PI) % (2*PI)\n    \n    if d > OUT_OF_BORDER: return STR_OUT\n    for k,v in CIRCLES.items():\n        if k[0]/2.0 < d < k[1]/2.0:\n            if v not in STR_MODIFIERS: return v\n            ans += v\n            break\n    \n    return ans + str(PARTS[int(theta/(2*PI/20))])", "from math import atan2, hypot, pi\n\nZONES = [\"6\", \"13\", \"4\", \"18\", \"1\", \"20\", \"5\", \"12\", \"9\", \"14\", \"11\", \"8\", \"16\", \"7\", \"19\", \"3\", \"17\", \"2\", \"15\", \"10\"]\n\ndef get_score(x,y):\n    dist = hypot(x, y)\n    if dist > 170: return \"X\"\n    if dist < 6.35: return \"DB\"\n    if dist < 15.9: return \"SB\"\n    angle = (atan2(y, x) + (pi / 20)) % (2 * pi)\n    zone = ZONES[int((angle / pi) * 10)]\n    if 99 < dist < 107: return \"T\" + zone\n    if 162 < dist < 170: return \"D\" + zone\n    return zone", "import math\n\nPI = math.pi\n\ndef build_cutoffs():\n    angle = PI/10\n    start = PI/20\n    cutoffs = [start]\n    for i in range(1,20):\n        cutoffs.append(start + angle)\n        start+=angle\n    return cutoffs\n\nhitvals = [6, 13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10]\nnum_cutoffs = build_cutoffs()\n\ndef calc_angle(x,y):\n    oa = y/x\n    taninv = math.atan(abs(oa))\n    if oa > 0:\n        radang = PI + taninv if y<0 else taninv\n    else:\n        radang = PI - taninv if x < 0 else 2*PI - taninv\n    return radang\n\ndef get_score(x,y):\n    ang = calc_angle(x,y)\n    for i, c in enumerate(num_cutoffs):\n        if ang < c:\n            numval = hitvals[i]\n            break\n    else:\n        numval = 6\n\n    dist = math.sqrt(x**2 + y**2)\n    if dist > 170:\n        return 'X'\n    if dist > 162:\n        return f'D{numval}'\n    if dist > 99 and dist < 107:\n        return f'T{numval}'\n    if dist > 6.35 and dist < 15.9:\n        return 'SB'\n    if dist < 6.35:\n        return 'DB'\n    return f'{numval}'", "from math import hypot, atan2, degrees\n\n\ndef get_score(x,y):\n    r = hypot(x,y)\n    fi = degrees(atan2(y,x))\n    dictio = {-9 < fi < 9: \"6\", 9 < fi < 27: \"13\", 27 < fi < 45: \"4\", 45 < fi < 63: \"18\", 63 < fi < 81: \"1\",\n              81 < fi < 99: \"20\", 99 < fi < 117: \"5\", 117 < fi < 135: \"12\", 135 < fi < 153: \"9\", 153 < fi < 171: \"14\",\n              -27 < fi < -9: \"10\", -45 < fi < -27: \"15\", -63 < fi < -45: \"2\", -81 < fi < -63: \"17\",\n              -99 < fi < -81: \"3\", -117 < fi < -99: \"19\", -135 < fi < -117: \"7\", -153 < fi < -135: \"16\", -171 < fi < -153: \"8\",\n              -180 < fi < -171: \"11\", 171 < fi < 180: \"11\"}\n    \n    if r > 170:\n        return \"X\"\n        \n    if 0 <= r <= 6.35:\n        return \"DB\"\n    \n    if 6.35 < r <= 15.9:\n        return \"SB\"\n    \n    number = dictio[True]\n            \n    return \"T\" * (99 < r < 107) + \"D\" * (162 < r < 170) + number", "from math import atan, pi\n\ndef get_score(x,y):\n    d = (x * x + y * y) ** .5\n    if d < 6.35: return 'DB'\n    if d < 15.9: return 'SB'\n    if 170 < d: return 'X'\n    prefix = 'D' if 162 < d else 'T' if 99 < d < 107 else ''\n    slice = round((atan(y/x) / pi + (x < 0)) * 10) % 20\n    return prefix + '6 13 4 18 1 20 5 12 9 14 11 8 16 7 19 3 17 2 15 10'.split()[slice]\n"]