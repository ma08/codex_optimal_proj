["def josephus_survivor(n, k):\n    v = 0\n    for i in range(1, n + 1): v = (v + k) % i\n    return v + 1", "def josephus_survivor(n,k):\n    soldiers = [int(i) for i in range(1, n + 1)]\n    counter = -1\n    while len(soldiers) != 1:\n        counter += k\n        while counter >= len(soldiers):\n            counter = abs(len(soldiers) - counter)\n        soldiers.remove(soldiers[counter])\n        counter -= 1\n    return soldiers[0]", "import sys\n# Set new (higher) recursion limit\nsys.setrecursionlimit(int(1e6))\n\n# Source: https://en.wikipedia.org/wiki/Josephus_problem#The_general_case\n# (I couldn't come up with the formula myself :p)\njosephus_survivor = lambda n, k: 1 if n == 1 else ((josephus_survivor(n - 1, k) + k - 1) % n) + 1", "def josephus_survivor(n,k):\n    lst = [i for i in range(1,n+1)]\n    x = k-1\n    while len(lst) != 1:\n        x = x % len(lst)\n        lst.pop(x)\n        x += k-1\n    return lst[0]\n    \n\n", "def josephus_survivor(n,k):\n    arr = [i + 1 for i in range(n)]\n    if len(arr) == 1:\n        return arr[0]\n    cur_pos = k - 1\n    while len(arr) != 1:\n        while cur_pos >= len(arr):\n            cur_pos = cur_pos - len(arr)\n        arr.pop(cur_pos)\n        cur_pos += k - 1\n    return arr[0]", "def josephus_survivor(n,k):\n    if (n == 1): \n          return 1 \n    else: \n          r = list(range(1, n+1))\n          sum = 0\n          for i in r:\n              sum = (sum+k) % i\n          return sum + 1\n        \n        \n", "def josephus_survivor(n,k):\n    arr = [i for i in range(1, n + 1)]\n    ptr = k - 1\n    while (len(arr) > 1):\n        if ptr >= len(arr):\n            ptr = ptr % len(arr)\n        del arr[ptr]\n        ptr += k - 1\n    return arr[0]", "def josephus_survivor(n,k):\n    circle = list(range(1,n+1))\n    i = 0\n    while len(circle) > 1:\n        i = (i - 1 + k) % len(circle)\n        circle.pop(i)\n    return circle[0]"]