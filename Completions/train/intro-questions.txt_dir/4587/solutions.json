["def range_parser(string):\n    res = []\n    for range_ in string.split(','):\n        first_last, _, step = range_.partition(':')\n        first, _, last = first_last.partition('-')\n        res += range(int(first), int(last or first) + 1, int(step or 1))\n    return res", "import re\n\ndef range_parser(s):\n    return [x for r in re.split(r', *', s)\n              for start,end,step in re.findall(r'(\\d+)-?(\\d*):?(\\d*)',r) \n              for x in range(int(start), int(end or start)+1, int(step or '1'))]", "def range_parser(inp):\n    res = []\n    for r in inp.split(','):\n        r = list(map(int, r.replace(':', '-').split('-')))\n        if len(r) > 1:\n            r[1] += 1\n            res += range(*r)\n        else:\n            res.append(r[0])\n    return res", "import re\ndef range_parser(string):\n    r=[]\n    for i in [i.strip() for i in string.split(',')]:\n        if bool(re.match('^\\d+$',i)):\n            r.append(int(i))\n        elif bool(re.match('^\\d+-\\d+$',i)):\n            x=i.split('-')\n            r.extend([j for j in range(int(x[0]),int(x[1])+1)])\n        elif bool(re.match('^\\d+-\\d+:\\d+$',i)):\n            x=i.split('-')\n            y=x[1].split(':')\n            r.extend([j for j in range(int(x[0]),int(y[0])+1,int(y[1]))])\n    print(r)\n    return r", "import re\n\ndef range_parser(string):\n    result = []\n    for match in re.finditer(r'(\\d+)(?:-(\\d+)(?::(\\d+))?)?', string):\n        start = int(match.group(1))\n        end = int(match.group(2) or start) + 1\n        step = int(match.group(3) or 1)\n        result.extend(list(range(start, end, step)))\n    return result", "def range_parser(stg):\n    result = []\n    for rg in stg.split(\",\"):\n        rg, _, s = rg.partition(\":\")\n        i, _, j = rg.partition(\"-\")\n        i, j, s = int(i), int(j or i) + 1, int(s or 1)\n        result.extend(range(i, j, s))\n    return result", "def range_parser(string):\n    def f():\n        for x in string.split(','):\n            if '-' in x:\n                if ':' in x:\n                    x, step = x.split(':')\n                    step = int(step)\n                else:\n                    step = 1\n                a, b = map(int, x.split('-'))\n                yield from range(a, b+1, step)\n            else:\n                yield int(x)\n    return list(f())", "def clean(string):\n    return string.replace(\"'\", '')\n\n\ndef range_parser(string):\n    l = []\n    for elem in clean(string).split(','):  # 1-10, 15, 20, 30-40:3\n        if '-' in elem:\n            l.extend(parse_range(elem))\n        else:\n            l.append(int(elem))\n    return l\n\n\ndef parse_range(interval):\n    step = 1\n    if ':' in interval:\n        interval, step = interval.split(':')\n    start, stop = [int(e) for e in interval.split('-')]\n    return list(range(start, stop + 1, int(step)))", "import re\ndef range_parser(string):\n    return sum((list(range(int(m.group(1)), int(m.group(2) or int(m.group(1))) + 1, int(m.group(3) or 1))) for m in re.finditer(r'(\\d+)(?:-(\\d+)(?::(\\d+))?)?', string)), [])", "import re\n\ndef range_parser(string):\n    return sum((list(range(int(start), int(end or start) + 1, int(step or 1)))\n        for start, end, step in re.findall(r\"(\\d+)(?:-(\\d+)(?::(\\d+))?)?\", string)), [])"]