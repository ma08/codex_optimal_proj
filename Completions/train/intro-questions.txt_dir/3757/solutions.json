["from decimal import Decimal, ROUND_HALF_UP\n\ndef round_to_five(numbers):\n    return [(n/5).quantize(1, ROUND_HALF_UP) * 5 for n in map(Decimal, numbers)]", "def round_to_five(numbers):\n    \n    return [5*int(x/5 + 0.5) for x in numbers]", "def round_to_five(numbers):\n    return [int((n + 2.5) / 5) * 5 for n in numbers]", "round_to_five=lambda l:[round((0.01+n)/5)*5 for n in l]", "def round_to_five(numbers):    \n    return [int(((x // 5) + (x % 5 >= 2.5)) * 5) for x in numbers]", "def round_to_five(arr):\n    return [5*round(v/5+0.01) for v in arr]", "import math\ndef round_to_five(numbers):\n    output = []\n    for n in numbers:\n        if n % 5 == 0:\n            output.append(int(n))\n        elif (n % 10 < 5 and n % 5 < 2.5) or (n % 10 > 5 and n % 5 >= 2.5):\n            output.append(int(round(n,-1)))\n        elif (n % 10 < 5 and n % 5 >= 2.5):\n            output.append(int(round(n,-1) + 5))\n        else:\n            output.append(int(round(n,-1) - 5))\n    return output\n", "from math import floor, ceil\n\ndef rond(x):\n    return floor(x) if x % 1 < 0.5 else ceil(x)\n    \ndef round_to_five(numbers):\n    return [rond(x/5)*5 for x in numbers]", "def rounding(n):\n    intPart = int(n)\n    fracPart = n - intPart\n    if fracPart >= 0.5:\n        n = intPart + 1\n    else:\n        n = intPart\n    for i in range(6):\n        up = n + i\n        down = n - i \n        if up%5 == 0:\n            return up\n        elif down%5==0:\n            return down\ndef round_to_five(numbers):\n    #your code here\n    numbers = [rounding(n) for n in numbers]\n    return numbers"]