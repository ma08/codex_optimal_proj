["# return the sum of the two polynomials p1 and p2.  \ndef poly_add(p1,p2):\n    if p1 == []:\n        return p2\n    if p2 == []:\n        return p1\n    return [p1[0] + p2[0]] + poly_add(p1[1:], p2[1:])\n", "from itertools import zip_longest\ndef poly_add(p1, p2):\n    return [x+y for x, y in zip_longest(p1, p2, fillvalue=0)]", "# return the sum of the two polynomials p1 and p2.  \ndef poly_add(p1, p2):\n    # store the result here\n    res = []\n    longest_p = max(len(p1), len(p2))\n    for i in range(longest_p):\n        # add the two numbers together unless there is no number there, then just add 0 (don't change)\n        res.append((p1[i] if i < len(p1) else 0) + (p2[i] if i < len(p2) else 0))\n    return res", "from itertools import zip_longest\n\ndef poly_add(*polys):\n    return [sum(coeffs) for coeffs in zip_longest(*polys, fillvalue=0)]\n", "def poly_add(p1, p2):\n    p = p1[len(p2):] if len(p1)>len(p2) else p2[len(p1):]\n    return [i+j for i,j in zip(p1,p2)]+p\n", "from itertools import zip_longest\n\ndef poly_add(p1, p2):\n    return list(map(sum, zip_longest(p1, p2, fillvalue=0)))", "def poly_add(p1, p2):\n  s, l = sorted([p1, p2], key=lambda p: len(p))\n  x = [sum(f) for f in zip(s, l)]\n  x.extend(l[len(s):])\n  return x", "def poly_add(a, b):\n    lmax = max(len(a), len(b))\n    a += [0]*(lmax - len(a))\n    b += [0]*(lmax - len(b))    \n    return list(map(sum, zip(a,b)))", "def poly_add(a, b):\n    res = []\n    if len(b)>len(a):\n        a, b = b, a\n\n    for i,n in enumerate(a):\n        try:\n            res.append(n+b[i])\n        except:\n            res.append(n)\n        \n    return res"]