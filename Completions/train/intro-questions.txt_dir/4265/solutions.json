["def tops(msg):\n    i,d,s = 1,5, ''\n    while i < len(msg):\n        s += msg[i]\n        i += d\n        d += 4\n    return s[::-1]", "def tops(msg):\n    if len(msg) < 2:\n        return ''\n    g = 2\n    k = ''\n    ni = 0\n    k += msg[1]\n    for i in msg[1:]:\n        if ni == g * 2 + 1:\n            k += i\n            g += 2\n            ni = 0\n        ni += 1\n    return k[::-1]", "def tops(msg):\n    if not msg: return ''\n    n, length = 2, len(msg)\n    counter = 0\n    s = ''\n    while counter+n <= length:\n        counter += n\n        s += msg[counter-1]\n        counter += n-1\n        n += 2\n    return s[::-1]", "def tops(stg):\n    l = int((1 + (1 + 8*len(stg))**0.5) / 4)\n    return \"\".join(stg[n * (2*n - 1)] for n in range(l, 0, -1))\n", "from itertools import accumulate, count, takewhile\n\ndef indexes():\n    it = count(0)\n    while True:\n        yield next(it) + next(it)\n    \ndef tops(msg):\n    n = len(msg)\n    return ''.join(msg[i] for i in list(takewhile(lambda i: i < n, accumulate(indexes())))[::-1])", "def tops(msg):\n    res=''\n    top=1\n    diff=5\n    while top<len(msg):\n        res+=msg[top]\n        top+=diff\n        diff+=4\n    return res[::-1]", "def tops(msg):\n    result, i, offset = '', 1, 5\n    while i < len(msg):\n        result += msg[i]\n        i += offset\n        offset += 4\n    return result[::-1]", "def tops(msg):\n  i = 1\n  j = 2\n  res = []\n  \n  while i < len(msg):\n    res.append(msg[i])\n    i += 2*j+1\n    j += 2\n  \n  return ''.join(res)[::-1]", "tops=lambda m,n=1: (lambda q: \"\" if q>len(m) else tops(m,n+1)+m[q])(2*n*n-n)", "tops=lambda s:''.join(s[n*(2*n-1)]for n in range(int(((8*len(s)+1)**.5+1)/4),0,-1))"]