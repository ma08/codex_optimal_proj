["def count_inversion(nums):\n    return sum(a > b for i, a in enumerate(nums) for b in nums[i + 1:])\n", "def count_inversion(s):\n    return sum(s[i] > s[j]\n               for i in range(len(s) - 1)\n               for j in range(i + 1, len(s)))", "def count_inversion(sequence):\n    def rec(arr):\n        if len(arr) <= 1: return arr, 0\n        a, ai = rec(arr[:len(arr)//2])\n        b, bi = rec(arr[len(arr)//2:])\n        res, i, j, count = [], 0, 0, ai + bi\n        while i < len(a) and j < len(b):\n            if a[i] <= b[j]:\n                res.append(a[i])\n                i += 1\n            else:\n                res.append(b[j])\n                j += 1\n                count += len(a) - i\n        return res + a[i:] + b[j:], count\n    return rec(list(sequence))[1]", "from itertools import combinations\n\ndef count_inversion(lst):\n    return sum(a>b for a,b in combinations(lst,2))", "def count_inversion(sequence):\n    return sum(a > b for i, a in enumerate(sequence[:-1]) for b in sequence[i+1:])", "def merge(a, left_index, mid, right_index, aux):\n    i, j = left_index, mid + 1\n    inversions = 0\n\n    for k in range(left_index, right_index + 1):\n        aux[k] = a[k]\n\n    for k in range(left_index, right_index + 1):\n        if i > mid:\n            a[k] = aux[j]\n            j += 1\n        elif j > right_index:\n            a[k] = aux[i]\n            i += 1\n        elif aux[i] <= aux[j]:\n            a[k] = aux[i]\n            i += 1\n        elif aux[j] < aux[i]:\n            a[k] = aux[j]\n            j += 1\n\n            inversions += mid - i + 1\n    return inversions\n\ndef count(a, left_index, right_index, aux):\n    if right_index <= left_index:\n        return 0\n    mid = left_index + (right_index - left_index) // 2\n    left_inversions = count(a, left_index, mid, aux)\n    right_inversions = count(a, mid + 1, right_index, aux)\n    return left_inversions + right_inversions + merge(a, left_index, mid, right_index, aux)\n\ndef count_inversion(sequence):\n    if len(sequence) < 2:\n        return 0\n    aux = [None for _ in range(len(sequence))]\n    sequence_list = list(sequence)\n    return count(sequence_list, 0, len(sequence) - 1, aux)", "from collections import deque\n\n\ndef count_inversion(nums):\n    forward_nums = deque(nums)\n    result = 0\n    for a in nums:\n        forward_nums.popleft()\n        for b in forward_nums:\n            if a > b:\n                result += 1\n    return result\n", "def count_inversion(sequence):\n    \"\"\"\n        Count inversions in a sequence of numbers\n    \"\"\"\n    count = 0\n    for i, x in enumerate(sequence):\n        for y in sequence[i+1:]:\n            if x > y: count += 1\n    return count\n", "count_inversion = lambda sequence: sum([sum([1 if sequence[x] > sequence[x + y] else 0 for y in range(1, len(sequence) - x)]) for x in range(len(sequence))])", "def count_inversion(sequence):\n    \"\"\"\n        Count inversions in a sequence of numbers\n    \"\"\"\n    return sum(n > m for i, n in enumerate(sequence) for m in sequence[i:])"]