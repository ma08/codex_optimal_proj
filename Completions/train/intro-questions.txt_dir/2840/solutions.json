["def withdraw(n):\n    n50 = 0\n    n20, r = divmod(n, 20)\n    if r == 10:\n        n20 -= 2\n        n50 += 1\n    n100, n20 = divmod(n20, 5)\n    return [n100, n50, n20]", "def withdraw(n):\n    hundreds, fifties, rest = n // 100, (n % 100) // 50, n % 50\n    if rest % 20 == 10:\n        if fifties == 0:\n            hundreds, fifties, twenties = hundreds - 1, 1, (rest + 50) // 20\n        else:\n            fifties, twenties = fifties - 1, (rest + 50) // 20\n    else:\n        twenties = rest // 20\n    return [hundreds, fifties, twenties]", "def withdraw(n):\n    b50 = int(n % 20 == 10)\n    b100, b20 = divmod((n - 50 * b50) // 20, 5)\n    return [b100, b50, b20]", "bills = [[0, 0], [1, 3], [0, 1], [1, 4], [0, 2], [1, 0], [0, 3], [1, 1], [0, 4], [1, 2]]\n\ndef withdraw(n):\n    q, r = divmod(n, 100)\n    if r == 10 or r == 30: q -= 1\n    return [q] + bills[r//10]", "def withdraw(n, coins=(100, 50, 20)):\n    if not n:\n        return [0] * len(coins)\n    for i in range(n // coins[0] if coins else -1, -1, -1):\n        sub = withdraw(n - i * coins[0], coins[1:])\n        if sub is not None:\n            return [i] + sub", "def withdraw(n, bills=[100, 50, 20]):\n    changes = [[0] * len(bills) for _ in range(n + 1)]\n    for c in range(1, n + 1):\n        changes[c] = min(([v + (b == bills[i]) for i, v in enumerate(changes[c - b])]\n            for b in bills if c >= b), key=sum, default=[float('inf')] * len(bills))\n    return changes[-1]", "def withdraw(n):\n    bills = [0, 0, 0]\n    print(n)\n    if n >= 100:\n        while n >= 100:\n            if n == 130 or n == 110:\n                break\n            n -= 100\n            bills[0] += 1\n    if n == 50 or n == 70 or n == 90 or n == 130 or n == 110:\n        while n >= 50:\n            if n == 80:\n                break\n            if bills[1] == 1:\n                break\n            n -= 50\n            bills[1] += 1\n    if n > 0:\n        while n > 0:\n            n -= 20\n            bills[2] += 1\n    \n    return bills\n", "def withdraw(n):\n    b50 = int(n % 20 == 10)\n    b100, n = divmod(n - 50 * b50, 100)\n    return [b100, b50, n // 20]", "def withdraw(n):\n    fifties = 1 if n % 20 else 0\n    twenties = int(n / 20) - 2 if fifties else int(n / 20)\n    hundreds = int(20 * twenties / 100)\n    twenties = twenties - hundreds * 5\n    return [hundreds, fifties, twenties]   ", "import re\ndef withdraw(n):\n    return [len(a) // b for a, b in zip(re.findall(r'\\A((?:.{10})*)((?:.{5})*)((?:.{2})*)\\Z', '.' * (n // 10))[0], (10, 5, 2))]"]