["from re import sub\n\ndef encode(string):\n    return sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1),string)\n    \ndef decode(string): \n    return sub(r'(\\d+)(\\D)', lambda m: m.group(2) * int(m.group(1)),string)", "encode=lambda s: \"\".join(f\"{len(list(group))}{char}\" for char, group in __import__(\"itertools\").groupby(s)) \ndecode=lambda s: \"\".join(c * int(n) for n, c in __import__(\"re\").findall(r\"(\\d+)(\\D{1})\", s))\n", "import re\n\ndef encode(s):\n    return \"\".join(f\"{len(g)}{c}\" for g, c in re.findall(r\"((.)\\2*)\", s))\n    \ndef decode(s):\n    return \"\".join(int(n) * c for n, c in re.findall(r\"(\\d+)(\\w)\", s))", "import re\ndef encode(st):\n    return ''.join( f'{len(e.group())}{e.group()[0]}' for e in re.finditer(r'(.)\\1*', st))\n    \ndef decode(st): \n    return re.sub(r'(\\d+\\w)', lambda x: x.group()[-1] * int(x.group()[:-1]) , st )", "def encode(string):\n    from itertools import groupby\n    encode_group = \"{group_length}{char}\".format\n\n    return \"\".join([encode_group(group_length=len(tuple(group)), char=char)\n                    for char, group in groupby(string)])\n\n\ndef decode(string):\n    import re\n    encoded_group = re.compile(\"(?P<group_length>\\d+)(?P<char>[A-Z])\")\n    return re.sub(\n        pattern=encoded_group,\n        repl=lambda match: int(match.group(\"group_length\")) * match.group(\"char\"),\n        string=string\n    )", "from re import sub\n\ndef encode(s):\n    return sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1), s) \n    \ndef decode(s): \n    return sub(r'(\\d+)(\\D)', lambda m: m.group(2) * int(m.group(1)), s)", "from itertools import groupby\ndef encode(string):\n    return \"\".join([f\"{len(list(g))}{k}\" for k,g in groupby(string)])\n    \n    \ndef decode(string): \n    number=\"\"\n    result = []\n    for i in string:\n        if i in \"1234567890\":\n            number += i\n        else:\n            result += [i]*int(number)\n            number=\"\"\n    return \"\".join(result)\n", "from itertools import groupby as g\nencode = lambda s: \"\".join(\"%s%s\" % (sum(1 for _ in v), k) for k, v in g(s)) \ndecode = lambda s: \"\".join(int(d) * c for d, c in zip(*[iter(\"\".join(v) for _, v in g(s, key=str.isdigit))]*2))", "def encode(string):\n    a=''\n    c=0\n    r=''\n    for e in string:\n        if e==a:\n            c+=1\n        else:\n            if c>0:\n                r=r+str(c)+a\n            a=e\n            c=1\n    r=r+str(c)+a\n    return r\n    \ndef decode(string): \n    c=0\n    r=''\n    for e in string:\n        if e.isdigit():\n            c=c*10+int(e)\n        else:\n            r=r+e*c\n            c=0\n    return r\n"]