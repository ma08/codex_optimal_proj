["class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        d = {}\n        a = 0\n        b = 0\n        for i in position:\n            if i not in d:\n                d[i]=1\n            else:\n                d[i]+=1\n        for i in d:\n            if i%2==0:\n                a +=d[i]\n            else:\n                b+=d[i]\n        return min(a,b)", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        oddc = evenc = 0\n        for i in position:\n            if i%2 == 0:\n                evenc+=1\n            else:\n                oddc+=1\n        return oddc if oddc <= evenc else evenc\n            \n", "from collections import Counter\n\nclass Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        count_e = count_o = 0\n        for pos in position:\n            if pos % 2 == 0:\n                count_e += 1\n            else:\n                count_o += 1\n        \n        return min(count_e, count_o)                \n", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        position.sort()\n        mn = float('inf')\n        def getTo(index,p):\n            res = 0\n            for i in range(len(position)):\n                res += abs(p - position[i])%2\n            return res\n        for i in range(len(position)):\n            mn = min(mn, getTo(i,position[i]))\n        return mn", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        l = [0,0]\n        for i in range(len(position)):\n            if position[i]%2 == 0:\n                l[0] += 1\n            else:\n                l[1] += 1\n        return min(l[0],l[1])", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        even = 0\n        odd = 0\n        for i in position:\n            if i%2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return  min(even, odd)", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        odd = 0\n        even = 0\n        for pos in position:\n            odd = odd + 1 if pos % 2 else odd\n            even = even + 1 if not pos % 2 else even\n        \n        return min(odd, even)\n", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n      \n      \n      record = {}\n      for i in range(len(position)):\n        if(position[i] not in record):\n          record[position[i]] = 1\n        else:\n          record[position[i]] += 1\n      max_freq = 0\n      odd_freq = 0\n      even_freq = 0\n      odd_max_freq = 0\n      even_max_freq = 0\n      odd_rec = 0\n      even_rec = 0\n      for i in record:\n        if (i%2 != 0):\n          odd_freq += record[i]\n          if(record[i]>=odd_max_freq):\n              odd_max_freq = record[i]\n              odd_rec = i\n        else:\n          even_freq += record[i]\n          if(record[i]>=even_max_freq):\n              even_max_freq = record[i]\n              even_rec = i\n      #ax_freq = max(odd_freq, even_freq)\n      if (odd_freq > even_freq):\n        rec = odd_rec\n      else:\n        rec = even_rec\n\n\n\n      cost = 0\n      for i in position:\n        if(((rec-i)% 2 ==0) or ((i - rec) % 2 == 0)):\n          continue\n        elif (rec == i):\n          continue\n        else:\n          cost += 1\n      return cost", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        odd = len([p for p in position if p%2])\n        return min(odd, len(position)-odd)\n        \n", "class Solution:\n    def minCostToMoveChips(self, p: List[int]) -> int:\n        even=0\n        odd=0\n        for i in p:\n            if(i%2==0):\n                even+=1\n            else:\n                odd+=1\n        return min(even,odd)\n", "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n      position.sort()\n      flag = 0\n      record = {}\n      for i in range(len(position)):\n        if(position[i] not in record):\n          record[position[i]] = 1\n        else:\n          record[position[i]] += 1\n      max_freq = 0\n      odd_freq = 0\n      even_freq = 0\n      odd_max_freq = 0\n      even_max_freq = 0\n      odd_rec = 0\n      even_rec = 0\n      for i in record:\n        if (i%2 != 0):\n          odd_freq += record[i]\n          if(record[i]>=odd_max_freq):\n              odd_max_freq = record[i]\n              odd_rec = i\n        else:\n          even_freq += record[i]\n          if(record[i]>=even_max_freq):\n              even_max_freq = record[i]\n              even_rec = i\n      #ax_freq = max(odd_freq, even_freq)\n      if (odd_freq > even_freq):\n        rec = odd_rec\n      else:\n        rec = even_rec\n\n\n\n      cost = 0\n      for i in position:\n        if(((rec-i)% 2 ==0) or ((i - rec) % 2 == 0)):\n          continue\n        elif (rec == i):\n          continue\n        else:\n          cost += 1\n      return cost"]