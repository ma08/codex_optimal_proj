["digits = lambda x: set(str(x))\n\ndef LDTA(n):\n    if digits(n) == digits(n*n):\n        return None\n    \n    seen = []\n    x = n\n    \n    while len(seen) < 10:\n        for d in str(x):\n            if d not in seen:\n                seen.append(d)\n        x *= n\n        \n    return int(seen[-1])", "def LDTA(n):\n    x,s = n,set(str(n))\n    for _ in range(30):\n        x *= n\n        for d in str(x):\n            s.add(d)\n            if len(s)==10: return int(d)", "import math\ndef LDTA(n):\n    if math.log10(n) == int(math.log10(n)): return None\n    d = {0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    c = n\n    while 1:\n        for i in str(c):\n            d[int(i)] = 1\n            if sum(d.values()) == 10:\n                return int(i)\n        c *= n\n    return -1", "import math\ndef LDTA(n):\n    if(n==1 or math.log10(n)%1 == 0):\n        return None\n    else:\n        power = 1\n        digits = [d for d in range(0,10)]\n        while(digits):\n            number = [int(x) for x in str(n**power)]\n            for x in number:\n                if(x in digits):\n                    last_one = x\n                    digits.remove(x)\n            power+=1\n        return last_one", "def LDTA(n):\n    digits = []\n    num = 1\n    pow = 1\n    while num < n**pow and pow < 20:\n        num *= n\n        pow += 1\n        if len(digits) == 10:\n            return digits[-1]\n        else:\n            for d in str(num):\n                if int(d) not in digits:\n                    digits.append(int(d))\n    return None", "def LDTA(n):\n    if set(str(n)) == set(str(n ** 2)):\n        return\n    res, i = [], 0\n    while True:\n        i += 1\n        for digit in str(n ** i):\n            if digit not in res:\n                res.append(digit)\n            if len(res) >= 10:\n                return int(res[-1])\n", "def LDTA(n):\n    remaining = set(range(10))\n    for i in range(1, 100):\n        for s in str(n**i):\n            t = int(s)\n            remaining.discard(t)\n            if not remaining:\n                return t", "def LDTA(n):\n    if n in (1, 10, 100, 1000, 10000):\n        return None\n    digits = set(\"0123456789\")\n    k = 1\n    while True:\n        p = str(n**k)\n        for digit in p:\n            digits -= {digit}\n            if len(digits) == 1:\n                return int(digits.pop())\n        k += 1", "from itertools import islice\n\ndef iter_powers(n):\n    x = n\n    while True:\n        yield from map(int, str(x))\n        x *= n\n\n\ndef LDTA(n):\n    appear = set(range(10))\n    for x in islice(iter_powers(n), 1000):\n        appear.discard(x)\n        if len(appear) == 1:\n            return appear.pop()", "def is_enough(lst):\n    return len(lst) >= 10\n\ndef LDTA(n):\n    res = []\n    for i in range(1, 20):\n        c = str(n ** i)\n        for digit in c:\n            if digit not in res:\n                res.append(digit)\n            if is_enough(res): break\n        if is_enough(res): break\n    if is_enough(res):\n        return int(res[-1])\n    return"]