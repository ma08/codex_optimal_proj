["tr=str.maketrans('56789','45678')\n\ndef faulty_odometer(n):\n    return int(str(n).translate(tr),9)", "def faulty_odometer(n):\n    result = 0\n    digits = len(str(n))\n    nonaryTranslation = \"\".join([str(int(x)-1) if int(x) >= 5 else x for x in list(str(n))])\n    for i in nonaryTranslation:\n        digits -= 1\n        result += int(i) * (9**digits)\n    return result\n    \n", "def faulty_odometer(n):\n    return int(str(n).translate(str.maketrans('56789','45678')),9)", "def faulty_odometer(n, acc=0):\n    rang = len(str(n)) - 1\n    amt = int('1' + '0' * rang)\n    q = n//amt\n    if q >= 4:\n        n -= amt\n        q -= 1\n    res = n - (amt - 9 ** rang) * q\n    left = n - amt*q\n    acc += res - left\n    return faulty_odometer(left, acc) if left >= 4 else acc + left", "faulty_odometer=lambda n:int(str(n).translate(''.maketrans('56789','45678')),9)", "faulty_odometer = lambda n: int(str(n).translate(str.maketrans('56789', '45678')), 9)", "faulty_odometer = lambda n: int(str(n).translate(''.maketrans('56789', '45678')), base = 9)", "def faulty_odometer(n):        \n    return sum('012356789'.index(c)*9**i for i, c in enumerate(str(n)[::-1]))", "def faulty_odometer(n):\n    digits = []\n    while n > 0:\n        digits.append(n%10)\n        n //= 10\n    \n    result = 0\n    count = len(digits)\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] >= 5:\n            digits[i] -= 1\n        result += digits[i] * 9**(count-1)\n        count -= 1\n    return result"]