["def is_in_middle(s):\n    while len(s)>4:\n        s = s[1:-1]\n    return 'abc' in s", "def is_in_middle(seq):\n    mid, rem = divmod(len(seq), 2)\n    start = mid-1\n    end = start+3\n    \n    if not rem: \n        start -= 1\n    \n    return 'abc' in seq[start:end]\n", "def is_in_middle(s):\n    return is_in_middle(s[1:-1]) if s[4:] else 'abc' in s", "def is_in_middle(sequence):\n    n = len(sequence)\n    i = (n - 3) // 2\n    return sequence[i:i+3] == 'abc' or (n % 2 == 0 and sequence[i+1:i+4] == 'abc')", "def is_in_middle(sequence):\n    while len(sequence) >= 3:        \n        if sequence == 'abc' or sequence[1:] == 'abc' or sequence[:-1] == 'abc':\n            return True\n        sequence = sequence[1:-1]     \n    return False", "def is_in_middle(sequence):\n    length = len(sequence)\n    if length < 3:\n        return False\n    if length % 2 != 0:\n        index = (length//2)-1\n        if sequence[index:index+3] == \"abc\":\n            return True\n        return False\n    elif length % 2 == 0:\n        index1 = (length//2) - 2\n        index2 = (length//2) - 1\n        if sequence[index1:index1+3] == \"abc\" or sequence[index2:index2+3] == \"abc\":\n            return True\n        return False", "def in_centre(s,i):\n    return s[i] == \"a\" and s[i+1] == \"b\" and s[i+2] == \"c\"\n\ndef is_in_middle(s):\n    if \"abc\" not in s or len(s) < 3: return False\n    l = len(s)\n    if l % 2 == 1: i = (l+1)//2-2; return in_centre(s,i) \n    else: i1 = l//2 -2; i2 = l//2 -1; return in_centre(s,i1) or in_centre(s,i2) \n", "def is_in_middle(s):\n    return 'abc' in s[(len(s)-1)//2-1 : (len(s)+2)//2+1]\n", "def is_in_middle(seq):\n    m = len(seq)//2\n    if len(seq)%2 != 0 and seq[m-1:m+2] =='abc':\n        return True\n    elif len(seq)%2 == 0: \n        if seq[m-2:m+1] =='abc' or seq[m-1:m+2] =='abc':\n            return True\n    return False", "def is_in_middle(s):\n    return 'abc' in [s[len(s) // 2 - 1: len(s) // 2 + 2] if len(s) % 2 else s[len(s) // 2 - 2: len(s) // 2 + 2]][0]"]