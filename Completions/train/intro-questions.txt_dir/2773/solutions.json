["def calculate_years(principal, interest, tax, desired):\n    years = 0\n    \n    while principal < desired:\n        principal += (interest * principal) * (1 - tax)\n        years += 1\n        \n    return years\n", "from math import ceil, log\n\ndef calculate_years(principal, interest, tax, desired):\n    if principal >= desired: return 0\n    \n    return ceil(log(float(desired) / principal, 1 + interest * (1 - tax)))\n", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    if principal == desired:\n        return years\n    while principal < desired:\n        x = principal * interest\n        y = x * tax\n        principal = principal + x - y\n        years += 1\n    return years\n", "from math import ceil, log\n\ndef calculate_years(principal, interest, tax, desired):\n    return ceil(log(float(desired) / principal, 1 + interest * (1 - tax)))", "def calculate_years(principal, interest, tax, desired):\n    year = 0\n    while (principal < desired):\n        increment = principal * interest * (1-tax)\n        principal = principal + increment\n        year = year + 1\n    return year", "import math\n\ndef calculate_years(principal, interest, tax, desired):\n    return 0 if principal >= desired else math.ceil((math.log(desired) - math.log(principal))/math.log(1+interest*(1-tax)))", "def calculate_years(p, i, t, d, n=0):\n    if p >= d:\n        return n\n    p = p + p * i * (1 - t)\n    return calculate_years(p, i, t, d, n+1)", "def calculate_years(principal, interest, tax, desired):\n    return 0 if principal >= desired else 1 + calculate_years(principal * (1+interest*(1-tax)), interest, tax, desired)", "def calculate_years(principal, interest, tax, desired):\n    \n    years = 0\n    \n    while principal < desired : \n        years += 1\n        principal = principal + (principal*interest) - (principal*interest*tax)\n    \n    return years", "calculate_years = lambda p,i,t,d,n=0: calculate_years(p+(p*i*(1-t)),i,t,d,n+1) if p<d else n", "from math import ceil, log\ndef calculate_years(P, I, T, D):\n    return ceil((log(D)-log(P))/log(1+I*(1-T)))", "def calculate_years(principal, interest, tax, desired):\n    y=0\n    while principal<desired:\n        extra=principal*interest\n        principal+=extra-tax*extra\n        y+=1\n    return y", "from math import ceil, log\n\ndef calculate_years(p, i, t, d):\n    x = float(d) / p\n    base = 1 + (i * (1 - t))\n    return ceil(log(x, base))\n\n    #return ceil(log(float(d) / p, 1 + (i * (1 - t))))\n", "def calculate_years(principal, interest, tax, desired):\n    x = 0\n    while principal < desired:\n        add = principal * interest\n        add = add - (add * tax)\n        principal = principal + add\n        x = x + 1\n    return x", "import math\ndef calculate_years(principal, interest, tax, desired):\n    x = (float(desired)/float(principal))\n    base = (1 + (float(interest) * ( 1 - float(tax))))\n    years = math.log(x, base)\n    return math.ceil(years)\n", "def calculate_years(sum, intr, tax, goal):\n    year, fix = 0, intr * (1 - tax) + 1\n    while sum < goal:\n        year += 1\n        sum *= fix\n    return year\n", "def calculate_years(principal, interest, tax, desired):\n    if desired == principal:\n        return 0\n    else:\n        years = 0\n        while principal < desired:\n            principal += (principal * interest) - (principal * interest * tax)\n            years += 1\n        return years\n\n\n", "def calculate_years(principal, interest, tax, desired):\n    year = 0\n    while principal < desired:\n        realint = principal * interest\n        realtax = realint * tax\n        principal = principal + realint - realtax\n        year += 1\n    return year", "import math\ndef calculate_years(principal, interest, tax, desired): \n    #if principal is lower than zero, than error with return code -1\n    return -1 if principal < 0 else math.ceil(math.log(float(desired) / principal if principal else 1, 1 + interest * (1 - tax)))", "def calculate_years(principal, interest, tax, desired):\n    if principal == desired:\n        return 0\n    p = principal\n    y = 0\n    fixed = (1 + interest * (1 - tax))\n    while p < desired:\n        p *= fixed\n        y += 1\n    return y\n", "def calculate_years(principal, interest, tax, desired):\n    year = 0    \n    while principal < desired:\n        year = year + 1\n        interest_beforetax = interest * principal\n        principal = principal + ((1 - tax) * interest_beforetax)\n        \n    return year\n        \n    \n    \n  \n", "def calculate_years(principal, interest, tax, desired):\n    y = 0\n    while desired > principal:\n        y += 1\n        principal = principal*(1+interest)-principal*interest*tax\n    return y", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    \n    while principal < desired:\n        a = principal * interest\n        principal += a - (a * tax)\n        years += 1\n        \n    return years", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    while principal < desired:\n        years += 1\n        principal += principal * interest * ( 1 - tax)\n    return years", "calculate_years=lambda principal, interest, tax, desired, count=0: count if principal >= desired else calculate_years(principal * (1 + interest * (1 - tax)), interest, tax, desired, count + 1)\n", "def calculate_years(p, i, t, d):\n    y = 0\n    while p < d:\n        p = p + p*i - p*i*t\n        y += 1\n    return y", "from math import log, ceil\n\n\ndef calculate_years(principal, interest, tax, desired):\n    return ceil(log(float(desired)/principal, 1 + interest * (1 - tax)))", "def calculate_years(p, i, t, d):\n    years = 0\n    while p < d: \n        p = (p*(1+i) - p*i*t)\n        years += 1\n    return years", "import math\n\n\ndef calculate_years(principal, interest, tax, desired):\n    year = 0\n    if int(principal) >= int(desired):\n        return (year)\n    while principal <= desired:\n        principal = (principal +(principal * interest)) - ((principal * interest)* tax)\n        year += 1\n        if int(principal) >= int(desired):\n            return (year)\n", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    gain = 0\n    taxed = 0\n    while principal < desired:\n        years = years + 1\n        gain = principal * interest\n        taxed = gain * tax\n        principal = principal + gain - taxed\n        \n        \n    \n    \n    \n    return years\n    raise NotImplementedError(\"TODO: calculate_years\")\n", "import math\n\ndef calculate_years(principal, interest, tax, desired):\n    if principal != desired:\n        return int(math.log((desired*(1+interest-interest*tax))/(principal+principal*interest*(1-tax)), 1+interest-interest*tax))+1\n    else:\n        return 0", "def calculate_years(principal, interest, tax, desired,years=0):\n    if principal >= desired:\n        return years\n    principal += (principal * interest) * (1.0-tax )\n    return calculate_years( principal, interest, tax, desired, years + 1 )\n    \n", "import math\n\ndef calculate_years(principal, interest, tax, desired):\n    # P(1+IT)^Y = D\n    return math.ceil(math.log(desired*1.0/principal, 1+interest*(1-tax)))\n    \n", "def calculate_years(principal, interest, tax, desired):\n\n    if(principal >= desired):\n        return 0\n    else:\n        gain = principal * interest\n        taxed = gain * tax\n        new_sum = principal + gain - taxed\n        return 1 + calculate_years(new_sum, interest, tax, desired)", "def calculate_years(p, i, t, d):  \n    y = 0\n    while p < d:\n      p += p*(i*(1-t))\n      y += 1\n    return y", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    while principal < desired:\n        principal = principal * (1 + 1 * interest * (1 - tax))\n        years += 1\n    return years", "def calculate_years(principal, interest, tax, desired):\n#     raise NotImplementedError(\"TODO: calculate_years\")\n    years = 0\n    if desired <= principal:\n        return 0\n    total_summ = principal\n    while total_summ <= desired:\n\n        summ_year = total_summ*interest\n        summ_tax = summ_year * tax\n        total_summ += summ_year - summ_tax\n        print(total_summ)\n        years += 1\n        if total_summ >= desired:\n            return years\n\n", "def calculate_years(p, i, t, d):\n    y = 0\n    while p < d:\n        y += 1\n        cur_i = (p * i) * (1 - t)\n        p += cur_i\n    return y\n        \n", "def calculate_years(P, I, T, D):\n    total = []\n    while P < D:\n        x = P*I\n        y = x*T\n        z = P+(x-y)\n        total.append(z)\n        P = z\n    return len(total)\n", "def calculate_years(principal, interest, tax, desired):\n    years_required = 0\n    current = principal\n    while (current<desired):\n        current+=current*interest*(1-tax)\n        years_required+=1\n    return years_required\n", "def calculate_years(p, i, t, d):\n    \n    c = 0\n    \n    while p < d:\n        p += (p * i) + (p * i) * - t\n        c += 1\n\n    return c\n", "def calculate_years(principal, interest, tax, desired):\n    year_counter = 0\n    while principal < desired:\n        year_counter += 1\n        principal += principal * interest * (1-tax)\n    return year_counter", "def calculate_years(principal, interest, tax, desired):\n    current = principal\n    years = 0\n    while current < desired:\n        currentstep = (current * (1 + interest))\n        taxloss = (currentstep - current) * tax\n        current = currentstep - taxloss\n        years += 1\n    return years\n", "def calculate_years(principal, interest, tax, desired):\n    import math\n    count = 1\n    compounding = principal*interest*(1-tax) + principal\n    if desired==principal:\n        return 0\n    while compounding < desired:        \n        compounding = (compounding*interest*(1-tax) + compounding)\n        count +=1\n    return count\n    \n", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    if principal >= desired: return 0\n    while True:\n        yearly_interest = principal * interest\n        principal = principal + yearly_interest - yearly_interest * tax\n        years += 1\n        if principal >= desired: break\n    return years", "def calculate_years(principal, interest, tax, desired):\n    years = 0\n    if principal == desired:\n        return years\n    else:\n        while principal < desired:\n            years += 1\n            principal = principal + (principal * interest) * (1 - tax)\n        return years", "def calculate_years(prin, inter, tax, desired):\n    yrs = 0\n    while prin < desired: \n        prin = (prin*(1+(inter*(1-tax))))\n        yrs += 1\n    return yrs", "import math\ndef calculate_years(principal, interest, tax, desired):\n    # desired = principal*(1+(interest)*(1-tax))**n\n    # desired/principal = (1+interest*(1-tax))**n\n    # n = ln(d/p)/ln(1+eff Interest Rate)\n    # return int(n)+1 if n>0 else 0\n    effInt = interest*(1-tax)\n    timeFloat = math.log(desired/principal)/math.log(1+effInt)\n    if desired>principal:\n        return int(timeFloat)+1\n    else:\n        return 0\n", "def calculate_years(principal, interest, tax, desired):\n    \n    year_count = 0\n    \n    while principal < desired:\n        principal += (interest * principal) * (1 - tax)\n        \n        year_count += 1\n        \n    return year_count\n"]