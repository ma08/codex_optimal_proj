["def locate(seq, value): \n    for s in seq:\n        if s == value or (isinstance(s,list) and locate(s, value)): \n            return True\n    return False", "def locate(seq, value): \n    f = 0\n    for e in seq:\n        if type(e) == list and not f:\n            f = locate(e, value)\n        elif e == value:\n            f = 1\n    return f\n", "def flatten(seq):\n    for e in seq:\n        if isinstance(e, list):\n            yield from flatten(e)\n        yield e\n\n\ndef locate(seq, value): \n    return any(e == value for e in flatten(seq))", "def locate(arr, item):\n    return item in arr or any(isinstance(e, (list, tuple)) and locate(e, item) for e in arr)", "def locate(seq, value):\n    if isinstance(seq, (tuple, list)):\n        return any(locate(x, value) for x in seq)\n    return seq == value", "def locate(seq, value): \n    # initialize\n    clean = []\n    return value in unfold(clean, seq)\n    \ndef unfold(clean, seq):\n    '''transform seq into 1d array''' \n    for s in seq:\n        if type(s) == str:\n            clean.append(s)\n        else:\n            clean=list(set(unfold(clean, s)))\n    return clean", "def locate(seq, v): \n    return any(s for s in seq if s == v or isinstance(s, list) and locate(s, v))\n", "def locate(seq, value): \n    for x in seq:\n        if x == value:\n            return True\n        if isinstance(x, list):\n            if locate(x, value) == True:\n                return True\n    return False", "locate=l=lambda a,x:any(l(e,x)if[]==e*0else e==x for e in a)", "def locate(seq, value):\n    queue = [e for e in seq]\n      \n    while len(queue):\n        el = queue.pop(0)\n        if type(el) is list:\n            queue = queue + el\n        elif el == value:\n            return True\n    \n    return False"]