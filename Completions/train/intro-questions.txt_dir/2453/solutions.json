["class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         former = set()\n         while True:\n             h = 0\n             while n > 0:\n                 d = n % 10\n                 h += (d*d)\n                 n = n // 10\n             if h == 1:\n                 return True\n             elif h in former:\n                 return False\n             n = h\n             former.add(n)", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         def next(n):\n             res = 0\n             while n > 0:\n                 n, lsd = n // 10, n % 10\n                 res += lsd * lsd\n             return res\n         \n         seen = set()\n         while True:\n             seen.add(n)\n             n = next(n)\n             if n == 1:\n                 return True\n             if n in seen:\n                 return False", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         memo = set()\n         \n         while n != 1:\n             n = sum([int(digit)**2 for digit in str(n)])\n             if n in memo:\n                 return False\n             \n             memo.add(n)\n             \n         return True", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         nums = set()\n         while n != 1:\n             if n in nums:\n                 return False\n             \n             nums.add(n)\n             s = str(n)\n             new_n = 0\n             for c in s:\n                 new_n += int(c) * int(c)   \n             n = new_n\n             \n         return True", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n < 0:\n             return False\n         if n == 1:\n             return True\n         \n         my_set = set()\n         \n         while n not in my_set:\n             my_set.add(n)\n             sq_sum = 0\n             while n > 0:\n                 remain = n%10\n                 print(('r', remain))\n                 sq_sum += int(remain * remain)\n                 n = int(n/10)\n             print(sq_sum)\n             if sq_sum == 1:\n                 return True\n             else:\n                 n = sq_sum\n               \n \n         return False\n                 \n", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         record={}\n         add=0\n         while add!=1:\n             add=0\n             for s in str(n):\n                 add+=int(s)**2\n             n=add\n             if add in list(record.keys()):\n                 return False\n             else:\n                 record[add]=1\n \n         return True\n", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         seen = {}\n         while True:\n             if str(n) in seen:\n                 return n == 1\n             seen[str(n)] = True\n             newN = 0\n             while n > 0:\n                 n, mod = divmod(n, 10)\n                 newN += mod ** 2\n             n = newN\n         return False", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         seen = set()\n         while n not in seen:\n             seen.add(n)\n             n = sum([int(d) ** 2 for d in str(n)])\n         return n == 1", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         slow, fast = n, n\n         while True:\n         \tslow = self.getSquareSum(slow)\n         \tfast = self.getSquareSum(fast)\n         \tfast = self.getSquareSum(fast)\n         \tif slow == fast:\n         \t\tbreak;\n         if slow == 1:\n         \treturn True\n         return False\n \n     def getSquareSum(self, n):\n     \treturn sum([int(i)**2 for i in str(n)]);", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         sol = set()\n         while n not in sol:\n             sol.add(n)\n             n = sum([int(i) **2 for i in str(n)])\n             \n             \n         return n == 1\n                 \n         \n \n             \n", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         ans = set()\n         while n != 1:\n             n = sum([int(i) ** 2 for i in str(n)])\n             if n in ans:\n                 return False\n             else:\n                 ans.add(n)\n         print(ans)\n         return True\n", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         def isHappyHelper(n):\n             squaresum = 0\n             while n:\n                 n, remainder = divmod(n, 10)\n                 squaresum += remainder**2\n             if squaresum == 1:\n                 return True\n             elif squaresum in seenumbers:\n                 return False\n             else:\n                 seenumbers.add(squaresum)\n                 return isHappyHelper(squaresum)\n             \n         if n <= 0:\n             return False\n         seenumbers = set()\n         seenumbers.add(n)\n         return isHappyHelper(n)\n", "class Solution(object):\n     def isHappy(self, n):\n         aset = set()\n         while n != 1 and n not in aset:\n             aset.add(n)\n             sums = 0\n             while n:\n                 digit = n % 10\n                 sums += digit * digit\n                 n = n // 10\n             n = sums\n         return n == 1", "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         count = {}\n         \n         while True:\n             new_n = 0\n             \n             while n > 0:\n                 new_n = new_n + (n % 10)**2\n                 n = n // 10\n             \n             n = new_n\n             \n             if n == 1:\n                 return True\n             \n             if n in count:\n                 return False\n             else:\n                 count[n] = 1"]