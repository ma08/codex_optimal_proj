["class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         return num != 0 and num & (num -1) == 0 and num & 0x55555555 == num", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num == 0:\n             return False\n         return not num & (num - 1) and len(bin(num)) % 2 == 1", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num < 1:\n             return False\n         return  (num - 1) & num == 0 and num & 0x55555555 != 0", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         \n         if num <= 0:\n             return False\n         \n         import math\n         i = math.log10(num) / math.log10(4)\n         return i.is_integer()", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         return num != 0 and not num & (num - 1) and len(bin(num)) % 2 == 1", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         while num <= 0:\n             return False\n         while num % 4 == 0:\n             num //= 4\n         return num == 1\n", "class Solution:\n     def isPowerOfFour(self, num):\n         return bin(num).count('1')==1 and bin(num).count('0')%2==1 and num>0", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num < 1 : return False\n         while num % 4 == 0 :\n             num //= 4\n         return num == 1\n", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num == 1:\n             return True\n \n         target = 1\n         while target < num:\n             target *= 4\n             if target == num:\n                 return True\n \n         return False", "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num <= 0:\n             return False\n         sqrt_root = math.sqrt(num)\n         if math.floor(sqrt_root) == sqrt_root:\n             return int(sqrt_root) & int(sqrt_root - 1) == 0\n         return False\n"]