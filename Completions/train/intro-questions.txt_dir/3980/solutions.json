["import re\n\ndef reverse(s):\n    return re.sub(r'(.)\\1+', lambda m: m.group().swapcase(), s)", "import re\n\ndef reverse(strng): return re.sub(r'(\\w)\\1+', lambda m: m.group().swapcase(), strng)", "import re\n\ndef reverse(stg):\n    return re.sub(r\"(([a-zA-Z])\\2+)\", lambda m: m.group(1).swapcase(), stg)", "from functools import partial\nfrom re import compile\n\nreverse = partial(compile(r\"(.)\\1+\").sub, lambda s: s.group().swapcase())", "reverse=lambda s:__import__('re').sub(r'(.)\\1+',lambda x:x.group(0).swapcase(),s)", "def reverse(s):\n    index, l = 0, [[]]\n    for x in s:\n        if x in l[index]:\n            l[index].append(x)\n        elif not l[index]:\n            l[index].append(x)\n        else:\n            l.append([x])\n            index += 1\n    return \"\".join(''.join(c.swapcase()for c in x)if len(x)>1 else x.pop()for x in l)", "def reverse(s):\n    s=list(s)\n    indexes=[]\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            indexes.append(i)\n            indexes.append(i+1)\n    for i in list(set(indexes)):\n        s[i]=s[i].swapcase()\n    return \"\".join(s)\n        \n", "from re import sub\n\ndef reverse(string):\n    return sub(r'(\\w)\\1+', lambda m: m.group().swapcase(), string)", "def reverse(s):\n    ss=''\n    for i in range(len(s)):\n        if i>0 and s[i]==s[i-1] or i<len(s)-1 and s[i]==s[i+1]:\n            ss+=s[i].swapcase()\n        else:\n            ss+=s[i]\n    return ss", "from itertools import groupby\ndef reverse(str):\n    reversal=\"\"\n    for k,g in groupby(str):\n        l=list(g)\n        if len(l)>1:reversal+=''.join(l).swapcase()\n        else:reversal+=k\n    return reversal"]