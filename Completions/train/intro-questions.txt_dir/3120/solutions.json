["def meeting(rooms, need):\n    if need == 0: return \"Game On\"\n    \n    result = []\n    for people, chairs in rooms:\n        taken = min(max(chairs - len(people), 0), need)\n        result.append(taken)\n        need -= taken\n        if need == 0: return result\n        \n    return \"Not enough!\"", "def meeting(rooms, number):\n    if number == 0:\n        return 'Game On'\n    result = []\n    for taken, n in rooms:\n        available = n - len(taken)\n        chairs = min(max(available, 0), number)\n        number -= chairs\n        result.append(chairs)\n        if not number:\n            return result\n    return 'Not enough!'\n", "def meeting(rooms, n):\n    if n==0: return \"Game On\"\n    chairs, res = (max(0, chair - len(occ)) for occ, chair in rooms), []\n    for c in chairs:\n        if c >= n: return res+[n]\n        res.append(c)\n        n -= c\n    return \"Not enough!\"", "def meeting(rooms, need):\n    if need == 0:\n        return \"Game On\"\n    take = []\n    for people, seat in rooms:\n        take.append(min(need, max(0, seat - len(people))))\n        need -= take[-1]\n        if need == 0:\n            return take\n    return \"Not enough!\"", "from typing import List, Union\n\n\ndef meeting(rooms: List[List[Union[str, int]]], number: int) -> Union[List[int], str]:\n    chairs_in_rooms, chairs = (max(c - len(p), 0) for p, c in rooms), []\n\n    while number > 0:\n        try:\n            n = next(chairs_in_rooms)\n            chairs.append(min(n, number))\n            number -= n\n        except StopIteration:\n            return \"Not enough!\"\n\n    return chairs or \"Game On\"", "def meeting(rooms, need):\n    if not need: \n        return 'Game On'\n    spare_chairs = []\n    for occupants, chairs in rooms:\n        available = min(need, max(chairs - len(occupants), 0))\n        spare_chairs.append(available)\n        need -= available\n        if not need: \n            return spare_chairs\n    return 'Not enough!'", "def meeting(rooms, number):\n    if number == 0:\n        return \"Game On\"\n    chairs = []\n    for i in rooms:\n        if sum(chairs) == number:\n            return chairs\n        if i[-1] - len(i[0]) <= 0:\n            chairs.append(0)\n        else:\n            if sum(chairs) + i[1] - len(i[0]) >= number:\n                chairs.append(number - sum(chairs))\n            else:\n                chairs.append(i[-1] - len(i[0]))\n    if sum(chairs) == number:\n        return chairs\n    if sum(chairs) < number:\n        return \"Not enough!\"", "def meeting(rooms, number):\n    if not number:\n        return 'Game On'\n    accumulate = []\n    for r in rooms:\n        available = max(r[1] - len(r[0]), 0)\n        take = min(number, available)\n        accumulate.append(take)\n        number -= take\n        if number == 0:\n            return accumulate\n    return 'Not enough!'", "def meeting(rooms, number):\n    if number == 0:\n        return 'Game On'\n    chairs = [max(room[1] - len(room[0]), 0) for room in rooms]\n    a = []\n    i = 0\n    while sum(a) < number and i < len(chairs):\n        a.append(min(chairs[i], number - sum(a)))\n        i += 1\n    return a if sum(a) >= number else \"Not enough!\"", "def meeting(rooms, number):\n    if number == 0:\n        return \"Game On\"\n    chairs = [room[1] - room[0].count('X') for room in rooms]\n    chairs = [0 if chair < 0 else chair for chair in chairs]\n    ans = []\n    i = 0\n    while sum(ans) < number and i < len(chairs):\n        ans.append(min(chairs[i], number - sum(ans)))\n        i += 1\n    return ans if sum(ans) >= number else \"Not enough!\"\n        \n"]