["def six_column_encryption(msg):\n    msg=msg.replace(' ','.')+'.'*((6-len(msg)%6)%6)\n    return ' '.join(msg[n::6] for n in range(6))", "from itertools import zip_longest\n\ndef six_column_encryption(msg, size=6):\n    msg = msg.replace(' ','.')\n    L = [msg[i:i+size] for i in range(0, len(msg), size)]\n    return ' '.join(map(''.join, zip_longest(*L, fillvalue='.')))", "from itertools import zip_longest\n\ndef six_column_encryption(msg):\n    return ' '.join(map(''.join,\n        zip_longest(*(msg[i:i+6].replace(' ', '.') for i in range(0, len(msg), 6)), fillvalue='.')\n    ))", "def six_column_encryption(msg):\n    row = (len(msg) + 5) // 6\n    gen = iter(msg.replace(\" \", \".\"))\n    arr = zip(*[[next(gen, \".\") for i in range(6)] for j in range(row)])\n    return \" \".join(\"\".join(line) for line in arr)", "six_column_encryption=lambda s:' '.join(map(''.join,zip(*zip(*[iter(s.replace(' ','.')+'.'*5)]*6))))", "def six_column_encryption(msg):\n    msg = msg.replace(\" \", \".\") + \".\" * (6 - len(msg) % 6 if len(msg) % 6 != 0 else 0)\n    return \" \".join([msg[i::6] for i in range(6)])", "from math import ceil\ndef six_column_encryption(msg):\n    n=ceil(len(msg)/6)\n    s=(msg+' '*(n*6-len(msg))).replace(' ','.')\n    r=[]\n    for i in range(6):\n        r.append(s[i::6])\n    return ' '.join(r)", "def six_column_encryption(msg):\n    msg, ans = msg.replace(' ', '.'), []\n    \n    while len(msg) % 6 != 0:\n        msg += '.'\n    \n    r = len(msg) // 6\n    \n    for i in range(0, len(msg)//r):\n        ans.append(''.join([msg[j] for j in range(i, len(msg), 6)]))\n\n    return ' '.join(ans)", "def six_column_encryption(msg):\n    m = msg.replace(' ', '.')\n    lst = [m[i:i+6] for i in range(0, len(m), 6)]\n    lst[-1] = lst[-1].ljust(6, '.')\n    ans = []\n    for i in range(6):\n        s = ''\n        for j in lst:\n            s += j[i]\n        ans.append(s)\n    return ' '.join(ans)", "import numpy as np\n\ndef six_column_encryption(s):\n    s = s.replace(' ','.') + '.'*(int(6*np.ceil(len(s)/6)-len(s)))\n    s = [list(s[i:i+6]) for i in range(0,len(s),6)]\n    arr = np.array(s).reshape(-1,6).T\n    return ' '.join(map(''.join, arr))"]