["from math import sin, radians\n\ndef find_time_to_break(bearing_A, bearing_B):\n    a = radians(abs(bearing_A - bearing_B) / 2)\n    return 40 / (3 * sin(a)) if a else float(\"inf\")", "def find_time_to_break(bearing_A, bearing_B):\n    import math\n    if bearing_A == bearing_B:\n        return float(\"inf\")\n    return round(math.sqrt(40**2/(2*(1 - math.cos(math.radians(abs(bearing_A - bearing_B)))))) * 2 / 3, 2)", "import math\ndef find_time_to_break(bearing_A, bearing_B):\n    \n    ships_angle = abs(bearing_A - bearing_B) * (math.pi/180)\n    \n    time_to_40 = float('inf')\n    if ships_angle > 0:\n        den = 1.5 * math.sqrt(2 * (1 - round(math.cos(ships_angle),5)))\n        time_to_40 = round(40/den, 2)\n    \n    return time_to_40", "def find_time_to_break(bearing_A, bearing_B):\n    import math\n    # the case we have here will make an isosceles triangle, we just have to solve either half of it.\n    bear = abs(bearing_A - bearing_B) / 2\n    angle = math.sin(math.radians(bear))\n    if angle != 0:\n        return round ((20 * 60) / (angle* 90), 2)\n    else:\n        return float('inf')", "from math import (sin, radians)\n\ndef find_time_to_break(b1, b2):\n    return round(40 / sin(radians(abs(b1 - b2)) / 2) / 3, 2) if b1 - b2 != 0 else float(\"inf\")\n", "from math import cos, hypot, radians, sin\n\ndef find_time_to_break(a, b):\n    a, b = radians(a), radians(b)\n    d = hypot(cos(a) - cos(b), sin(a) - sin(b))\n    return 40 / (90 / 60) / d if d else float('inf')", "from math import cos, radians, inf\n\ndef find_time_to_break(bearing_A, bearing_B):\n    theta = bearing_A - bearing_B\n    return inf if theta == 0 else 18.86 / (1 - cos(radians(theta)))**0.5", "from math import *\n\ndef find_time_to_break(a,b):\n    vShips, netLength = 90/60, 40\n    return float('inf') if a==b else netLength/2 / (vShips * sin(radians(abs(b-a)/2)))", "from math import sin, pi\n\ndef find_time_to_break(bearing_A, bearing_B):\n    return float(\"inf\") if abs(bearing_A-bearing_B) == 0 else 20/(sin((abs(bearing_A-bearing_B)*pi/180)/2))*60/90", "from math import cos, pi, sin\n\nSHIP_MPH = 90  # WOW, part trawler - part speed boat, fast ship!\nNET_LENGTH = 40  # Impressive net length too, are these fishermen using alien tech?\n\n\ndef find_time_to_break(bearing_A, bearing_B):\n    \n    # Find angle between ships\n    ba, bb = bearing_A + 360, bearing_B + 360\n    alpha = min(abs(ba - bb), abs(bb - ba))\n    if alpha > 180:\n        alpha = 360 - alpha\n    \n    if alpha == 0:\n        # Ships travelling on parallel courses\n        return float('inf')\n    \n    # Find seperation between ships per hour\n    theta = alpha / 2 / 180 * pi  # Half alpha in rads\n    # Position of each ship\n    s1 = SHIP_MPH * sin(theta), SHIP_MPH * cos(theta)\n    s2 = SHIP_MPH * sin(-theta), SHIP_MPH * cos(-theta)\n    # Pythagorean distance between ships\n    mph = (((s1[0] - s2[0]) ** 2) + ((s1[1] - s2[1]) ** 2)) ** 0.5\n    \n    # Max time in minutes before the net snaps\n    return NET_LENGTH / mph * 60\n"]