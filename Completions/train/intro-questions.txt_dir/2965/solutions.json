["import numpy as np\n\ndef solve_eq(eq):\n    a = np.array([arr[:3] for arr in eq])\n    b = np.array([arr[-1] for arr in eq])\n    return [round(x) for x in np.linalg.solve(a,b)]", "import numpy as np\n\ndef solve_eq(eq):\n    m = np.array(eq)\n    return np.linalg.solve(m[:,:3], m[:,3]).round().astype(int).tolist()", "def solve_eq(mat):\n    determinant=lambda m:(m[0][0]*(m[1][1]*m[2][2]-m[2][1]*m[1][2]))-(m[0][1]*(m[1][0]*m[2][2]-m[2][0]*m[1][2]))+(m[0][2]*(m[1][0]*m[2][1]-m[1][1]*m[2][0]))\n    d = determinant([i[:3] for i in mat])\n    d1 = determinant([i[1:] for i in mat])\n    d2 = determinant([[i[0],i[3],i[2]] for i in mat])\n    d3 = determinant([i[:2] + [i[3]] for i in mat])\n    return [d1/d,d2/d,d3/d]", "def solve_eq(eq):\n    for i in range(3):\n        if eq[i][i]==0:\n            eq[i], eq[i+1] = eq[i+1], eq[i]\n        eq[i] = [x/eq[i][i] for x in eq[i]]\n        for j in range(3):\n            if i!=j:\n                eq[j] = [-eq[j][i]*eq[i][x]+eq[j][x] for x in range(len(eq[j]))]\n    return [round(x[-1]) for x in eq]", "from numpy.linalg import solve\n\ndef solve_eq(eq):\n    (*eq1, d1), (*eq2, d2), (*eq3, d3) = eq\n    return list(map(round, solve([eq1, eq2, eq3], [d1, d2, d3])))", "import numpy as np\ndef solve_eq(eq):\n    [p, q, r] = eq\n    a = np.array([p[:-1], q[:-1], r[:-1]])\n    b = np.array([p[-1], q[-1], r[-1]])\n    return list(map(round,np.linalg.solve(a, b).tolist()))\n", "def solve_eq(eq):\n    a1, b1, c1, d1 = eq[0]\n    a2, b2, c2, d2 = eq[1]\n    a3, b3, c3, d3 = eq[2]\n\n    x = ((b1*c2*d3 - b1*c3*d2 - b2*c1*d3 + b2*c3*d1 + b3*c1*d2 -\n          b3*c2*d1)/(a1*b2*c3 - a1*b3*c2 - a2*b1*c3 + a2*b3*c1 +\n          a3*b1*c2 - a3*b2*c1))\n\n    y = ((-a1*c2*d3 + a1*c3*d2 + a2*c1*d3 - a2*c3*d1 - a3*c1*d2 +\n         a3*c2*d1)/(a1*b2*c3 - a1*b3*c2 - a2*b1*c3 + a2*b3*c1 +\n         a3*b1*c2 - a3*b2*c1))\n\n    z = ((a1*b2*d3 - a1*b3*d2 - a2*b1*d3 + a2*b3*d1 + a3*b1*d2 -\n         a3*b2*d1)/(a1*b2*c3 - a1*b3*c2 - a2*b1*c3 + a2*b3*c1 +\n         a3*b1*c2 - a3*b2*c1))\n    \n    return [x, y, z]\n\n", "from numpy import array as a, matrix as m\n\ndef solve_eq(eq):\n    return [round(i[0]) for i in a(m([i[:3] for i in eq]).I * m([i[3] for i in eq]).T)]", "import numpy as np\ndef solve_eq(eq):\n    return [i[0] for i in np.linalg.solve(np.reshape([x for x in (y[:-1] for y in eq)], (3, 3)), np.reshape([x for x in (y[-1] for y in eq)], (3, 1))).round().astype(int)]\n", "def solve_eq(eq):\n    d = det(eq[0][0], eq[0][1], eq[0][2], eq[1][0], eq[1][1], eq[1][2], eq[2][0], eq[2][1], eq[2][2])\n    return [det(eq[0][3], eq[0][1], eq[0][2], eq[1][3], eq[1][1], eq[1][2], eq[2][3], eq[2][1], eq[2][2])/d, det(eq[0][0], eq[0][3], eq[0][2], eq[1][0], eq[1][3], eq[1][2], eq[2][0], eq[2][3], eq[2][2])/d, det(eq[0][0], eq[0][1], eq[0][3], eq[1][0], eq[1][1], eq[1][3], eq[2][0], eq[2][1], eq[2][3])/d]   \n    \ndef det(a, b, c, d, e,f, g, h, i):\n    return int(a * (e * i - h * f) - b * (d * i - g * f) + c * (d * h - g * e))\n    \n    \n    \n    \n\n"]