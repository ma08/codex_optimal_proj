["def solve(st,k): \n    for l in sorted(st)[:k]:\n        st=st.replace(l,'',1)\n    return st", "solve = lambda s, k: ''.join(t[1] for t in sorted(sorted(enumerate(s), key=lambda x:x[1])[k:]))", "from collections import Counter\nfrom itertools import accumulate\nfrom operator import add\nfrom string import ascii_lowercase\n\ndef solve(s, n):\n    counter = Counter(s)\n    cum_count = [0] + list(accumulate((counter[c] for c in ascii_lowercase), add))\n    result = []\n    for c in s:\n        cum_count[ord(c) - 97] += 1\n        if cum_count[ord(c) - 97] > n:\n            result.append(c)\n    return \"\".join(result)\n", "from collections import Counter\n\ndef solve(letters, removes):\n  letter_counts = Counter(letters)\n  unique_sorted_letters = sorted(letter_counts.keys())\n\n  for letter in unique_sorted_letters:\n    amount_to_remove = letter_counts[letter] if removes >= letter_counts[letter] else removes\n    letters = letters.replace(letter, '', amount_to_remove)\n    removes -= amount_to_remove\n\n  return letters", "import string\ndef solve(st,k): \n    for c in string.ascii_lowercase:\n        count = st.count(c)\n        st = st.replace(c,'',k)\n        k -= count\n        if k <= 0: break\n    return st\n", "from collections import defaultdict\n\n# I knew there was a O(n) solution\ndef solve(st, k):\n    D, current, removed = defaultdict(list), ord('a'), set()\n    for i,c in enumerate(st): D[ord(c)].append(i)\n    while k and len(removed) < len(st):\n        removed |= set(D[current][:k])\n        k -= min(k, len(D[current]))\n        current += 1\n    return ''.join(c for i,c in enumerate(st) if i not in removed)", "def solve(st,k):     \n    for i in range(ord('a'),ord('z')+1):\n        while k and chr(i) in st:\n                k -= 1\n                st = st.replace(chr(i),'',1)\n    return st\n", "def solve(st,k):\n    if k >= len(st):\n        return \"\"\n    chars = sorted(st)\n    for ch in chars[:k]:\n        st = st.replace(ch, '', 1)\n    return st", "def solve(s, k): \n    for c in \"abcdefghijklmnopqrstuvwxyz\":\n        n = s.count(c)\n        s = s.replace(c, \"\", k)\n        k -= n\n        if k < 1:\n            break\n    return s"]