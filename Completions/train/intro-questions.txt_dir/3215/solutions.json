["from operator import mul\n\ndef reduce_pyramid(base):\n    return sum(map(mul, base, comb_n(len(base) - 1)))\n\ndef comb_n(n):\n    c = 1\n    for k in range(0, n + 1):\n        yield c\n        c = c * (n - k) // (k + 1)\n", "def reduce_pyramid(base):\n    c, t, ll = 1, 0, len(base) -1\n    for i, v in enumerate(base):\n        t += c * v\n        c = c * (ll - i)//(i + 1)\n    return t", "def reduce_pyramid(base):\n    s, c = 0, 1\n    for i, x in enumerate(base, 1):\n        s += c * x\n        c = c * (len(base) - i) // i\n    return s", "def reduce_pyramid(base):\n    tot,c,n = 0,1,len(base)-1\n    for i in range(n+1>>1):\n        tot += c * (base[i] + base[n-i])\n        c = c * (n-i)//(i+1)\n    if not n&1: tot += c*base[n>>1]\n    return tot", "def _coefs(l):\n    n = 1\n    for i in range(l):\n       yield n\n       n = n * (l-i-1) // (i+1)\n    yield n\n\ndef reduce_pyramid(base):\n    coefs = _coefs(len(base))\n    return sum(next(coefs)*n for n in base)", "def reduce_pyramid(Q) :\n    R,U = 0,1\n    for F,V in enumerate(Q) : R,U = R + V * U,U * (len(Q) + ~F) // -~F\n    return R", "def reduce_pyramid(base):\n    n, c, r = len(base) - 1, 1, 0\n    for i, x in enumerate(base):\n        r += c * x\n        c = c * (n - i) // (i + 1)\n    return r", "def pascal(n):\n    line = [1]\n    for k in range(n):\n        line.append(line[k]*(n-k)//(k+1))\n    return line\n\ndef reduce_pyramid(a):\n    x = len(a)-1\n    C = pascal(x)\n    s = 0\n    for i,v in enumerate(a):\n        s += C[i]*v\n    return s", "def reduce_pyramid(base):\n    sm = 0\n    nb = 1\n    for i, u in enumerate(base, 1):\n        sm += nb * u\n        nb = nb * (len(base) - i) // i\n    return sm", "def reduce_pyramid(b):\n    p, r = 1, b[0]\n    for i in range(1, len(b)):\n        p = p * (len(b) - i) // i\n        r += b[i] * p\n    return r"]