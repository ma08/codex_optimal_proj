["def square_free_part(n):\n    if type(n) != int or n < 1:return None\n    for i in xrange(2, int(n ** 0.5) + 1):\n        while n % (i ** 2) == 0:\n            n /= i\n    return n", "def square_free_part(n):\n\n    fac = lambda n: [i for i in range(2, (n//2)+1) if n % i == 0] + [n]\n    issquare = lambda n: True if str(n**.5)[-1] == '0' else False\n    \n    if isinstance(n, bool): return None\n    if isinstance(n, int) and n > 0:\n        if n == 1: return 1\n        if n == 2: return 2\n        for i in sorted(fac(n), reverse = True):\n            if sum([issquare(f) for f in fac(i)]) == 0: \n                return i\n    else: return None", "def square_free_part(n):\n    if type(n) != int or n < 1:\n        return\n    while n % 4 == 0:\n        n //= 2\n    k = 3\n    while k * k <= n:\n        while n % (k*k) == 0:\n            n //= k\n        k += 2\n    return n\n", "def square_free_part(n):\n    if type(n) == int and n > 0:  # Meh...\n        part = 1\n        for p in range(2, int(n ** .5) + 1):\n            if not n % p:\n                part *= p\n                while not n % p:\n                    n //= p\n        return part * n", "def square_free_part(n):\n    if type(n) != int or n <= 0: \n        return None\n    r, d = 1, 2\n    while d * d <= n:\n        if n % d == 0:\n            while n % d == 0:\n                n //= d\n            r *= d\n        d += 1\n    return r * n if n > 1 else r", "def square_free_part(n):\n    import math\n    lst = []\n    squares = []\n    x = []\n    if isinstance(n, int):\n        if n > 1:\n            for i in range(2, n // 2 + 1):\n                if n % i == 0:\n                    lst.append(i)\n            lst.append(n)\n            lst.reverse()\n            for elem in lst:\n                if math.sqrt(elem).is_integer():\n                    squares.append(elem)\n            for i in lst:\n                for j in squares:\n                    if i % j == 0:\n                        break\n                else:\n                    x.append(i)\n            if len(x) > 0:\n                return x[0]\n            else:\n                return lst[0]\n        elif n is 1:\n            return 1\n        else:\n            return None\n    else:\n        return None", "def square_free_part(n):\n    if not isinstance(n, int): return None\n    if n<1: return None\n    \n    for i in range (n,1,-1):\n        if not n % i:\n            b=True\n            for j in range(i//2,1,-1):\n                  if not i % (j*j):\n                      b=False\n                      break\n            if b:return i\n    #return n\n", "def getAllPrimeFactors(n):\n    if not isinstance(n, int): return []\n    if n == 1: return [1]\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > -1:\n        factors.append(n)\n    return factors\n\n\ndef getUniquePrimeFactorsWithCount(n):\n    if n == 1: return [[1], [1]]\n    lis = getAllPrimeFactors(n)\n    if lis == []: return [[], []]\n    return [sorted(set(lis)), [lis.count(i) for i in sorted(set(lis))]]\n\ndef get_factors(num):\n    lis = []\n    for i in range(2, num + 1):\n        if num % i == 0:\n            lis.append(i)\n    return lis\n\ndef square_free_part(n):\n    if not type(n) == int:\n        return None\n    if n == 1:\n        return 1\n    facs = get_factors(n)\n    for factor in facs[::-1]:\n        lis = getUniquePrimeFactorsWithCount(factor)\n        if any(en > 1 for en in lis[1]):\n            continue\n        else:\n            return factor", "def square_free_part(n):\n    if type(n)!=int or n<1:\n        return None\n    result = 1\n    divisor = 2\n    while n>1:\n        if n%divisor==0:\n            result *= divisor\n            n//=divisor\n            while n%divisor==0:\n                n//=divisor\n        divisor += 1\n    return result\n", "def square_free_part(n):\n    if type(n)!=int or n<1: return \n    ans=1\n    for i in range(2,int(n**.5)+1):\n        if n%i==0:\n            ans*=i\n            while n%i==0: n//=i\n    if n>1: ans*=n\n    return ans"]