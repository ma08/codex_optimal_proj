["def boredom(staff):\n    lookup = {\n        \"accounts\": 1,\n        \"finance\": 2,\n        \"canteen\": 10,\n        \"regulation\": 3, \n        \"trading\": 6,\n        \"change\": 6,\n        \"IS\": 8,\n        \"retail\": 5,\n        \"cleaning\": 4,\n        \"pissing about\": 25\n    }\n    n = sum(lookup[s] for s in staff.values())\n    if n <= 80:\n        return \"kill me now\"\n    if n < 100:\n        return \"i can handle this\"\n    return \"party time!!\"", "boredom_scores = {\n    'accounts': 1,\n    'finance': 2 ,\n    'canteen': 10 ,\n    'regulation': 3 ,\n    'trading': 6 ,\n    'change': 6,\n    'IS': 8,\n    'retail': 5,\n    'cleaning': 4,\n    'pissing about': 25,\n}\n\ndef boredom(staff):\n    score = sum(map(boredom_scores.get, staff.values()))\n    return (\n        'kill me now' if score <= 80 else\n        'i can handle this' if score < 100 else\n        'party time!!'\n    )", "scores = {\n    \"accounts\": 1, \"finance\": 2, \"canteen\": 10, \"regulation\": 3, \"trading\": 6,\n    \"change\": 6, \"IS\": 8, \"retail\": 5, \"cleaning\": 4, \"pissing about\": 25\n}\n\ndef boredom(staff):\n    score = sum(scores[activity] for activity in staff.values())\n    return \"party time!!\" if score >= 100 else \"i can handle this\" if score > 80 else \"kill me now\"", "SCORE={\"accounts\": 1, \"finance\" : 2, \"canteen\" : 10, \"regulation\" : 3, \"trading\" : 6, \n       \"change\" : 6, \"IS\" : 8, \"retail\" : 5, \"cleaning\" : 4, \"pissing about\" : 25}\n       \ndef boredom(staff):\n  score = sum(map(lambda x: SCORE[x], staff.values()))\n  return (\"kill me now\", \"i can handle this\", \"party time!!\")[(score>=100) + (score>80)]", "def boredom(staff):\n    departments = {'accounts': 1, 'finance': 2, 'canteen': 10, 'regulation': 3, 'trading': 6, 'change': 6, 'IS': 8, 'retail': 5, 'cleaning': 4, 'pissing about': 25}\n    score = sum(departments[x] for x in staff.values())\n    return 'kill me now' if score <= 80 else 'party time!!' if score > 100 else 'i can handle this'", "def boredom(staff):\n    dict_ = {'accounts': 1,\n'finance':2,\n'canteen':10,\n'regulation':3,\n'trading':6,\n'change':6,\n'IS':8,\n'retail':5,\n'cleaning':4,\n'pissing about':25}\n    summ = sum(dict_[i] for i in staff.values())\n    return  \"kill me now\" if summ<=80 else 'i can handle this' if 100>summ>80 else \"party time!!\"", "def boredom(staff):\n    scores = {\"accounts\" : 1, \"finance\" : 2, \"canteen\" : 10,\n              \"regulation\" : 3, \"trading\" : 6, \"change\" : 6,\n              \"IS\" : 8, \"retail\" : 5, \"cleaning\" : 4, \"pissing about\" : 25}\n    score = sum(scores[team] for team in staff.values())\n    return \"kill me now\" if score <= 80 else \"party time!!\" if score >= 100 else \"i can handle this\"", "boredom=lambda s:['kill me now','i can handle this','party time!!'][min(2,max(0,__import__('math').ceil(sum((' tconig I e'+' '*14+'u').index(e.replace('din','g')[-2])for e in s.values())/20-4)))]", "def boredom(staff):\n    D = {   'accounts': 1,\n            'finance': 2,\n            'canteen': 10,\n            'regulation': 3,\n            'trading': 6,\n            'change': 6,\n            'IS': 8,\n            'retail': 5,\n            'cleaning': 4,\n            'pissing about': 25,\n            }\n    score = sum ( [D[key] for key in list(staff.values())] )\n    if         score <= 80:  ans = 'kill me now'\n    elif  80 < score <  100: ans = 'i can handle this'\n    elif       score >= 100: ans = 'party time!!'\n    return ans\n", "def boredom(staff):\n    depts = {\"accounts\": 1, \"finance\": 2, \"canteen\": 10, \"regulation\": 3, \"trading\":\n             6, \"change\": 6, \"IS\": 8, \"retail\": 5, \"cleaning\": 4, \"pissing about\": 25}\n    b = sum(depts[v] for v in staff.values())\n    return 'kill me now' if b <= 80 else 'i can handle this' if b < 100 else 'party time!!'"]