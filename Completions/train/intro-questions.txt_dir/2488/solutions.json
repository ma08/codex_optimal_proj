["class Solution:\n  \n    def findNumbers(self, nums: List[int]) -> int:\n        def has_even_digits(number: int):\n            if number < 10:\n                return False\n            elif number < 100:\n                return True\n            elif number < 1000:\n                return False\n            elif number < 10000:\n                return True\n            elif number < 100000:\n                return False\n            return True\n\n        return sum([1 for num in nums if has_even_digits(num)])\n", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        return len([i for (i) in nums if len(str(i))%2==0 ])\n", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        return sum([1 if(len(str(num))%2 == 0) else 0 for num in nums])", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for i in nums:\n            if len(str(i)) % 2==0:\n                count += 1\n        return count\n            \n", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        even_cnt = 0\n        for num in nums :\n            if (len(str(num)) % 2 == 0) : even_cnt += 1\n                \n        return even_cnt", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        ec = 0\n        digit = 0\n        for value in nums:\n            digit = len(str(value))\n            if digit % 2 == 0:\n                ec += 1                \n        return ec", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        track = 0\n        for num in nums:\n            count = 0\n            if len(str(num)) % 2 ==0:\n                track += 1\n        return track", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        string_map = map(str, nums)\n        for i in string_map:\n            if len(i) % 2 == 0:\n                count+=1\n        return count", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        nums.sort()\n        # pt = [ 10 ** m for m in range(6)]\n        ans = 0\n        for i in nums:\n            if (i >= 10 and i < 100) or (i >= 1000 and i < 10000) or (i >= 100000 and i < 1000000):\n                ans += 1\n        return ans", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for n in nums:\n            if len(str(n)) % 2 == 0:\n                count += 1\n        return count", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        result = 0\n        for num in nums:\n            count = 0 \n            while num:\n                num = num//10\n                count +=1\n            if count%2 == 0:\n                result+=1\n                \n                \n        return result\n", "class Solution:\n    def digits(self,num):\n        count=0\n        while num:\n            num=num//10\n            count+=1\n        if count%2==0:\n            return True\n        else:\n            return False\n        \n    def findNumbers(self, nums: List[int]) -> int:\n        c=0\n        for i in nums:\n            if Solution().digits(i):\n                c+=1\n        return c\n        \n", "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count"]