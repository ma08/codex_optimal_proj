["class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         \n         result = \"\";\n         wordSet = set(words);\n         for word in words:\n             if (len(word) > len(result) or len(word) == len(result) and word < result) and all(word[ : i] in wordSet for i in range(1, len(word))):\n                 result = word;\n                 \n         return result;", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         if len(words) == 0:\n             return \"\"\n         \n         words.sort(key = lambda x: (len(x), x))\n         memo = set()\n         maxlen = 0\n         maxword = \"\"\n         for word in words:\n             if len(word) <= 1:\n                 memo.add(word)\n                 maxlen = 1\n                 if maxword == \"\":\n                     maxword = word\n             else:\n                 if word[:-1] in memo:\n                     memo.add(word)\n                     if len(word) > maxlen:\n                         maxlen = len(word)\n                         maxword = word\n         \n         return maxword\n", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         words.sort()\n         words_set = set([''])\n         longest = ''\n         \n         for word in words:\n             if word[:-1] in words_set:\n                 words_set.add(word)\n                 if len(word) > len(longest):\n                     longest = word\n         return longest\n", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"        \n         wset = set([\"\"])\n         ans = \"\"\n         for word in sorted(words):            \n             if word[:-1] in wset:\n                 wset.add(word)\n                 if len(word) > len(ans):\n                     ans = word        \n         return ans\n         \n", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n  \n         words.sort()\n         words_set, longest_word = set(['']), ''\n         for word in words:\n             if word[:-1] in words_set:\n                 words_set.add(word)\n                 if len(word) > len(longest_word):\n                     longest_word = word\n         return longest_word", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         valid = {''}\n         for word in sorted(words):\n             if word[:-1] in valid:\n                 valid.add(word)\n         return max(sorted(valid), key = len)", "class Solution:\n     def longestWord(self, words):\n                 \n                \n         words.sort()\n         longest_word=''\n         word_list=list()\n         words_set=set([''])\n         for word in words:\n             \n             if word[:-1] in  words_set  :\n               \n                 words_set.add(word)\n           \n                 if len(longest_word)<len(word):\n                     longest_word=word\n         \n         return longest_word\n    \n", "class Solution:\n     def longestWord(self, words):\n         ret, m = '', {''}\n         for w in sorted(words):\n             if w[:-1] in m:\n                 m.add(w)\n                 ret = max(ret, w, key=len)\n         return ret\n", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         wordSet = set(words)\n \n         words.sort(key=lambda c: (-len(c), c))\n         for word in words:\n             if all(word[:k] in wordSet for k in range(1, len(word))):\n                 return word\n         return \"\"\n", "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         \n         words.sort()\n         words_set, longest_word = set(['']), ''\n         for word in words:\n             if word[:-1] in words_set:\n                 words_set.add(word)\n                 if len(word) > len(longest_word):\n                     longest_word = word\n         return longest_word"]