["import itertools\n\ndef mastermind(game):\n    colours = \"Red Blue Green Orange Purple Yellow\".split()\n    def check(solution, guess):\n        black = sum(a == b for a, b in zip(solution, guess))\n        white = sum(max(0, min(solution.count(c), guess.count(c))) for c in colours) - black\n        return [\"Black\"] * black + [\"White\"] * white\n    candidates = list(itertools.product(colours, repeat=4))\n    while candidates:\n        candidate = candidates.pop()\n        score = sorted(game.check(list(candidate)))\n        candidates = [c for c in candidates if check(candidate, c) == score]", "def mastermind(game):\n    cols = {\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"}\n    used = cols - set([c for c in cols if game.check([c]*4)])\n    duff = (cols - used).pop()\n\n    return [c for c in used for i in range(4) if game.check([duff] * i + [c] + [duff] *(3-i)) == ['Black']]", "mastermind = lambda g: map(g.check, map(list, __import__('itertools').permutations(c for c in [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"] for _ in range(g.check([c] * 4).count('Black')))))", "from itertools import permutations\ndef mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    counts = []\n    good = []\n    for color in colors:\n        attempt = [color, color, color, color]\n        answer = game.check(attempt)\n        if answer == 'WON!': \n            return\n        for i in range(answer.count('Black')):\n            good.append(color)\n    for p in permutations(good):\n        answer = game.check(p)\n        if answer.count('Black') == 4: \n            return        ", "from random import choice\ndef mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    answer = ''\n    for i in range(60):\n        my_choice = [choice(colors) for i in range(4)]\n        answer = game.check(my_choice)", "def mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    answers = []\n    confirmed = [\"\", \"\", \"\", \"\"]\n    possible = [\"\", \"\", \"\", \"\"]\n    not_a_color = 0\n    \n    for color in colors:\n        answers.append(game.check([color, color, color, color]))\n    \n    i = 0\n    while i < len(answers):\n        if answers[i] == []:\n            not_a_color = colors[i]\n            i = len(answers)\n        i += 1\n\n    for c, possible in enumerate(answers):\n        if possible:\n            possible_color = colors[c]\n            not_possible_color = not_a_color\n            i = 0\n            remaining = len(possible)\n            while i < 4 and remaining > 0:\n                possible = [possible_color if i == j else not_possible_color for j in range(4)]\n                possible_answer = game.check(possible)\n                if possible_answer[0] == \"Black\":\n                    confirmed[i] = possible_color\n                    remaining -= 1\n                i += 1\n\n    game.check(confirmed)", "def mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    answers = []\n    confirmed = [\"\", \"\", \"\", \"\"]\n    possible = [\"\", \"\", \"\", \"\"]\n    not_a_color = 0\n    \n    for color in colors:\n        answers.append(game.check([color, color, color, color]))\n\n    i = 0\n    while i < len(answers):\n        if answers[i] == []:\n            not_a_color = i\n            i = len(answers)\n        i += 1\n\n    for c, possible in enumerate(answers):\n        if possible:\n            possible_color = colors[c]\n            not_possible_color = colors[not_a_color]\n            i = 0\n            while i < 4:\n                possible = [possible_color if i == j else not_possible_color for j in range(4)]\n                possible_answer = game.check(possible)\n                if possible_answer[0] == \"Black\":\n                    confirmed[i] = possible_color\n                i += 1\n\n    game.check(confirmed)", "from itertools import chain, permutations\ncolours = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n\ndef mastermind(game):\n    possible = list(chain.from_iterable([c]*len(game.check([c]*4)) for c in colours))\n    for p in permutations(possible):\n        game.check(p)", "def mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    my_choice = [random.choice(colors), random.choice(colors), random.choice(colors), random.choice(colors)]\n    answer = game.check(my_choice)\n    if answer == ['Black','Black','Black','Black']:\n        count_won += 1\n        return 'WON'\n    else:\n        return   \n", "def update(c):\n    if c==\"Red\":return \"Blue\"\n    if c==\"Blue\":return \"Green\"\n    if c==\"Green\":return \"Orange\"\n    if c==\"Orange\":return \"Purple\"\n    if c==\"Purple\":return \"Yellow\"\n\ndef mastermind(game):\n    guess,I=[\"Red\",\"Red\",\"Red\",\"Red\"],0\n    while I<4:\n        answer=game.check(guess)\n        if len(answer)==I:\n            guess[I]=update(guess[I])\n        else:I+=1\n"]