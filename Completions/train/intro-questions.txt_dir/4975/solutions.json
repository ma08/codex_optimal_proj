["def solution(n):\n    roman_numerals = {1000:'M',\n                      900: 'CM',\n                      500: 'D',\n                      400: 'CD',\n                      100: 'C',\n                      90: 'XC',\n                      50: 'L',\n                      40: 'XL',\n                      10: 'X',\n                      9: 'IX',\n                      5: 'V',\n                      4: 'IV',\n                      1: 'I'\n    }\n    roman_string = ''\n    for key in sorted(list(roman_numerals.keys()),reverse=True):\n        while n >= key:\n            roman_string += roman_numerals[key]\n            n -= key\n    return roman_string\n", "vals = zip(('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'),\n           (1000, 900, 500,  400, 100,   90,  50,   40,  10,    9,   5,    4,   1))\n\ndef solution(n):\n    if n == 0: return \"\"\n    return next(c + solution(n-v) for c,v in vals if v <= n)", "units = \" I II III IV V VI VII VIII IX\".split(\" \")\ntens = \" X XX XXX XL L LX LXX LXXX XC\".split(\" \")\nhundreds = \" C CC CCC CD D DC DCC DCCC CM\".split(\" \")\nthousands = \" M MM MMM\".split(\" \")\n\ndef solution(n):\n    return thousands[n//1000] + hundreds[n%1000//100] + tens[n%100//10] + units[n%10]", "def solution(n):\n    return \"M\" * (n//1000) + hundreds[n%1000//100] + tens[n%100//10] + units[n%10]\n", "anums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\nrnums = \"M CM D CD C XC L XL X IX V IV I\".split()\n\ndef solution(x):\n    ret = []\n    for a,r in zip(anums, rnums):\n        n,x = divmod(x,a)\n        ret.append(r*n)\n    return ''.join(ret)", "def solution(n):\n    dic = {1:'I',4:'IV',5:'V',9:'IX',10:'X',40:'XL',50:'L',90:'XC',100:'C',400:'CD',500:'D',900:'CM',1000:'M'}\n    roman = ''\n    for a in reversed(sorted(dic.keys())):\n        while (a <= n):\n            n = n - a;\n            roman = roman + dic[a];\n    return roman\n", "def solution(n):\n    return  \" M MM MMM\".split(\" \")[n//1000] + \\\n            \" C CC CCC CD D DC DCC DCCC CM\".split(\" \")[n//100%10] + \\\n            \" X XX XXX XL L LX LXX LXXX XC\".split(\" \")[n//10%10] + \\\n            \" I II III IV V VI VII VIII IX\".split(\" \")[n%10]", "def solution(n):\n    ed = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"]\n    des = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"]\n    sot = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"]\n    tys = [\"\",\"M\",\"MM\",\"MMM\",\"MMMM\"]\n    \n    return tys[n // 1000] + sot[n // 100 % 10] + des[n // 10 % 10] + ed[n % 10]", "def solution(n):\n    ROMAN_SYMBOLS = [\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"]\n    ROMAN_VALUES = [1000, 500, 100, 50, 10, 5, 1]\n    idx = 0\n    roman = []\n    while n > 0:\n        if n < ROMAN_VALUES[idx]:\n            idx += 1\n            continue\n        n -= ROMAN_VALUES[idx]\n        roman.append(ROMAN_SYMBOLS[idx])\n        if roman[-4:].count(roman[-1]) == 4:\n            roman = roman[:-3] + [ROMAN_SYMBOLS[idx-1]]\n            if roman[-3:-2] == roman[-1:]:\n                roman = roman[:-3] + [ROMAN_SYMBOLS[idx]] + [ROMAN_SYMBOLS[idx-2]]\n    return \"\".join(roman)", "def solution(n):\n    numeral = ''\n    number = [1000, 900, 500, 400, 100, 90, 50, 40, 10,9,5,4,1]\n    numerals = ['M','CM','D','CD','C','XC','L', 'XL','X','IX','V','IV','I']\n    print(numerals)\n    square = lambda x, y: int(x/number[y]) * numerals[y]\n    for i in range(13):\n        numeral+= square(n, i) \n        n = n - number[i]*int(n/number[i])\n    return numeral\n", "def solution(x):\n    table = [\n        (1000,\"M\"),\n        (900,\"CM\"),\n        (500,\"D\"),\n        (400,\"CD\"),\n        (100,\"C\"),\n        (90,\"XC\"),\n        (50,\"L\"),\n        (40,\"XL\"),\n        (10,\"X\"),\n        (9,\"IX\"),\n        (5,\"V\"),\n        (4,\"IV\"),\n        (1,\"I\")\n    ]\n    for num, rep in table:\n        if x >= num:\n            return rep + solution(x-num)\n    return str()"]