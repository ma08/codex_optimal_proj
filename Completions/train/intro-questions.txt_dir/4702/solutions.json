["def digits_product(product):\n    if product < 10:\n        return 10 + product\n    n = ''\n    for d in range(9, 1, -1):\n        while not product % d:\n            n += str(d)\n            product //= d\n    return int(n[::-1]) if product == 1 else -1", "from functools import reduce\nfrom operator import mul\n\ndef digits_product(product):\n    if product == 0:\n        return 10\n    elif len(str(product)) == 1:\n        return int('1' + str(product))\n    temp = product\n    digits = []\n    units = list(range(9, 1, -1))\n    for i in units:\n        if product % i == 0:\n            exponent = 0\n            while product % i == 0:\n                exponent += 1\n                product //= i\n            digits.append((i, exponent))\n    res = \"\"\n    for digit, occurances in digits:\n        res += str(digit)*occurances\n    return int(res[::-1]) if res and reduce(mul, [int(i) for i in res]) == temp else -1", "def digits_product(product):\n    if product < 10: return 10 + product\n    a = ''\n    while product > 1:\n        for i in range(9, 1, -1):\n            if product % i == 0:\n                a += str(i)\n                product //= i\n                break\n        else:return -1\n    return int(a[::-1])", "from functools import reduce\nfrom operator import mul\n\nPRODUCTS = {}\nfor n in range(10, 5000):\n    dig_prod = reduce(mul, map(int, str(n)))\n    if dig_prod < 600 and dig_prod not in PRODUCTS:\n        PRODUCTS[dig_prod] = n\n\n\ndef digits_product(product):\n    return PRODUCTS.get(product, -1)", "def digits_product(product):\n\n    if product < 10: return 10 + product\n    \n    lst = []\n    for d in range(9, 1, -1):\n        while product % d == 0:\n            product /= d\n            lst.append(d)\n    return -1 if product != 1 else int( ''.join(map(str, lst[::-1])) )", "def prime_factors(num):\n    factors = []\n    while num % 2 == 0:\n        factors.append(2)\n        num //= 2\n\n    i = 3\n    max_factor = num**0.5\n    while i <= max_factor:\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n            max_factor = num**0.5\n        i += 2\n\n    if num > 1:\n        factors.append(num)\n    return factors\n\n\ndef digits_product(product):\n    if product == 0:\n        return 10\n    elif product == 1:\n        return 11\n    \n    factors = prime_factors(product)\n    if not set(factors) <= {2, 3, 5, 7}:\n        return -1\n    if len(factors) == 1:\n        return 10 + factors[0]\n\n    factors = \"\".join(str(f) for f in factors)\n    factors = \"\".join(sorted(factors.replace(\"33\", \"9\")))\n    factors = factors.replace(\"222\", \"8\")\n    factors = factors.replace(\"23\", \"6\")\n    factors = factors.replace(\"22\", \"4\")\n    if len(factors) == 1:\n        factors += \"1\"\n    return int(\"\".join(sorted(factors)))", "import math\n\ndef getNumber(n):\n    N = n\n    number = ''\n    divisor = 9\n    \n    while divisor > 1 and n > 0:\n        if n%divisor == 0:\n            number += str(divisor)\n            n //= divisor\n        else:\n            divisor -= 1\n            \n    return int(number[::-1]) if number and n == 1 else -1\n\ndef digits_product(product):\n    if product == 0:\n        return 10\n    if 0 < product < 10:\n        return 10 + product\n    \n    return getNumber(product)", "def digits_product(product):\n    if product<10:\n        return 10+product\n    res=factorization(product)\n    for i in res:\n        if i>=10:\n            return -1\n    reduce(res)\n    total=0\n    for i,j in enumerate(res):\n        total+=10**(len(res)-i-1)*j\n    return total\ndef factorization(n):\n    res=[]\n    factor=2\n    while factor*factor<=n:\n        if n%factor==0:\n            res.append(factor)\n            n//=factor\n            factor=2\n        else:\n            factor+=1\n    res.append(n)\n    return res\ndef is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\ndef reduce(res):\n    while res.count(3)>=2:\n        res.remove(3)\n        res.remove(3)\n        res.append(9)\n    while res.count(2)>=3:\n        res.remove(2)\n        res.remove(2)\n        res.remove(2)\n        res.append(8)\n    while res.count(2)>=1 and res.count(3)>=1:\n        res.remove(2)\n        res.remove(3)\n        res.append(6)\n    while res.count(2)>=2:\n        res.remove(2)\n        res.remove(2)\n        res.append(4)\n    res.sort()", "from math import gcd, log\nfrom operator import mul\nfrom functools import reduce\n\ndef digits_product(product):\n    if product <= 1: return 10 + product\n    count = lambda p: round(log(gcd(product, p ** 9), p))\n    n2, n3, n5, n7 = map(count, [2, 3, 5, 7])\n    digits = [5] * n5 + [7] * n7 + [8] * (n2 // 3) + [9] * (n3 // 2)\n    n2 %= 3\n    n3 %= 2\n    if n3 and n2:\n        digits.append(6)\n        n3 -= 1\n        n2 -= 1\n    digits.extend([4] * (n2 // 2) + [2] * (n2 % 2) + [3] * n3)\n    if len(digits) <= 1:\n        digits.append(1)\n    return int(''.join(map(str, sorted(digits)))) if reduce(mul, digits) == product else -1", "def digits_product(product):\n    if product < 10:\n        return 10 + product\n    \n    facs = []\n    \n    for p in (2,3,5,7):\n        while product % p == 0:\n            facs.append(p)\n            product //= p\n    \n    if product != 1:\n        return -1\n    \n    while facs.count(3) >= 2:\n        facs.remove(3)\n        facs.remove(3)\n        facs.append(9)\n    \n    while facs.count(2) >= 3:\n        facs.remove(2)\n        facs.remove(2)\n        facs.remove(2)\n        facs.append(8)\n    \n    while 2 in facs and 3 in facs:\n        facs.remove(2)\n        facs.remove(3)\n        facs.append(6)\n    \n    while facs.count(2) >= 2:\n        facs.remove(2)\n        facs.remove(2)\n        facs.append(4)\n    \n    return int(\"\".join(sorted(str(x) for x in facs)))\n        \n"]