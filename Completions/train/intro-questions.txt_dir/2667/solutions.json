["'''\nVasyl Zakharuk\nPython Core 355\nCodewars Kata: Will you make it?\n''' \ndef zero_fuel(distance_to_pump, mpg, fuel_left):\n    if fuel_left >= distance_to_pump / mpg:\n        print(\"We got to the pump\")\n        return True\n    else:\n        print(\"We pushed the car to the pump(((\")\n        return False\nprint(zero_fuel(50,25,2))", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return mpg*fuel_left >= distance_to_pump", "zero_fuel = lambda d, m, f : d <= m * f", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return distance_to_pump <= (mpg * fuel_left)", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return fuel_left >= distance_to_pump / mpg ", "zero_fuel = lambda _,__,___: ___*__>=_", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    res = mpg * fuel_left\n\n    if distance_to_pump <= res:\n        return 1\n    else:\n        return 0", "def zero_fuel(dtp, mpg, fuel_left):\n    return mpg * fuel_left >= dtp\n", "def zero_fuel(a, b, c):\n    return a<= b*c", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return fuel_left*mpg >= distance_to_pump", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if mpg * fuel_left >= distance_to_pump:\n        return True\n    else:\n        return False\n    #Happy Coding! ;)\n", "zero_fuel = lambda *arg: arg[0] <= arg[1] * arg[2]", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n   return not distance_to_pump > mpg * fuel_left;", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    a = mpg * fuel_left\n    if a < distance_to_pump:\n        return False\n    else:\n        return True", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if distance_to_pump/mpg <= fuel_left:\n       return True\n    if distance_to_pump/mpg != fuel_left:\n       return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    result = mpg * fuel_left\n    if distance_to_pump <= result:\n        return True\n    else:\n        return False\n        \nzero_fuel(100, 50, 3)", "zero_fuel = lambda distance_to_pump, mpg, fuel_left: mpg * fuel_left >= distance_to_pump", "zero_fuel = lambda d,m,f: m*f>=d\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    total=mpg * fuel_left\n    if distance_to_pump <= total:\n        return True\n    return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return distance_to_pump <= mpg * fuel_left if True else False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    miles = mpg * fuel_left\n    if distance_to_pump <= miles:\n        return True\n    else:\n        return False\n    #Happy Coding! ;)\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    gallons_to_destination = distance_to_pump / mpg\n    return True if gallons_to_destination <= fuel_left else False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    a = mpg * fuel_left\n    if a >= distance_to_pump:\n        return True\n    elif a <= distance_to_pump:\n        return False", "zero_fuel=lambda d,m,f:d/f<=m", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if distance_to_pump / (mpg*fuel_left) <= 1:\n        x = True\n        return bool(x)\n    else:\n        x = False\n        return bool(x)", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    \n    a=distance_to_pump*(1/mpg)-fuel_left\n    if a<=0 :\n        return True\n    else:\n        return False", "def zero_fuel(mile, fuel, gallon):\n    return fuel * gallon >= mile", "def zero_fuel(dtp, mpg, fl):\n    return not dtp > mpg * fl", "def zero_fuel(d, m, f):\n    if d > m*f:\n        return False\n    return True", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if distance_to_pump-mpg*fuel_left>0:\n        return False\n    return True", "def zero_fuel(d, m, f):\n    c=d/m\n    if c<=f:\n        return True\n    else:\n        return False", "zero_fuel=lambda a,b,c:a<=b*c", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n\n    if (mpg * fuel_left) >= distance_to_pump:\n        return True\n    elif (mpg * fuel_left) <= distance_to_pump:\n        return  False\n#     return True if (mpg * fuel_left) >=distance_to_pump else False\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return mpg*fuel_left >= distance_to_pump\n#pogchamp\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    your_fuel = mpg*fuel_left\n    if your_fuel >= distance_to_pump:\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    longest_distance = mpg * fuel_left\n    if distance_to_pump <= longest_distance:\n        return True\n    return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    distance_available = mpg * fuel_left\n    return distance_to_pump <= distance_available", "def zero_fuel(distance_to_pump,\n              mpg,\n              fuel_left):\n\n    return distance_to_pump <= mpg * fuel_left\n", "zero_fuel = lambda d,m,f : True if m * f >= d else False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    #nearest pump 50 miles\n    #avg car runs 25 mpg\n    #2 gal left\n    \n    if distance_to_pump <= mpg * fuel_left :\n        return True\n    else :\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n\n    distance_to_pump = int(distance_to_pump)\n    mpg = float(mpg)\n    fuel_left = float(fuel_left)\n    \n    while distance_to_pump > mpg*fuel_left:\n        return False\n    else:\n        return True", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    nth=distance_to_pump/mpg\n    nth2=fuel_left - nth\n    if nth2 >= 0 :\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    fuel_necessary=distance_to_pump/mpg\n    if fuel_left>=fuel_necessary:\n        return True\n    if fuel_left<fuel_necessary:\n        return False\n    \n", "def zero_fuel(dtp, mpg, fl):\n    return dtp / mpg <= fl", "def zero_fuel(d, m, f):\n    a=m*f\n    if a>=d:\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    distance_to_pump = int(distance_to_pump)\n    mpg = int(mpg)\n    fuel_left = int(fuel_left)\n    result = False\n\n    if fuel_left * mpg >= distance_to_pump:\n        result = True\n\n    return(result)\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    if float(distance_to_pump / mpg) <= float(fuel_left):\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    \"\"\"(^-__-^)\"\"\"\n    return(True if distance_to_pump <= mpg*fuel_left else False)\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if distance_to_pump == mpg*fuel_left or distance_to_pump < mpg*fuel_left:\n        return True\n    if distance_to_pump > mpg*fuel_left: return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    a = mpg * fuel_left\n    return a >= distance_to_pump", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    distance_to_pump = float(distance_to_pump)\n    mpg = float(mpg)\n    fuel_left = float(fuel_left)\n    \n    if distance_to_pump > mpg*fuel_left:\n        return False\n    else:\n        return True", "zero_fuel = lambda x,y,z: z*y >= x \n# def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    print(distance_to_pump, mpg, fuel_left)\n    return True if (distance_to_pump-(mpg*fuel_left)) <= 0 else False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    # Let's just return wether the miles we get for our gallons are more or equal to the distance to the pump.\n    return (mpg*fuel_left)>=distance_to_pump", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    required_fuel = distance_to_pump / mpg\n    return required_fuel <= fuel_left", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n  miles = fuel_left * mpg\n  return distance_to_pump <= miles", "def zero_fuel(d, mpg, fl):\n    if fl * mpg >= d:\n        return True\n    else:\n        return False\n", "def zero_fuel(d, a, g):\n    return(True if a*g>=d else False)", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if mpg*fuel_left>=distance_to_pump:\n        res = True\n    else:\n        res = False\n    return res", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    if fuel_left == 0:\n        return  distance_to_pump <= mpg\n    elif fuel_left > 0:\n        m = mpg *  fuel_left\n        \n    return distance_to_pump <= m", "def zero_fuel(dist,mpg,fuel):\n    return bool(dist<=mpg*fuel)", "def zero_fuel(distance_to_pump, mpg, gallon_left):\n    if mpg * gallon_left >= distance_to_pump:\n        return True\n    else:\n        return False\n        \n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if (distance_to_pump / mpg) - fuel_left <= 0:\n        ergebnis = True\n    else:\n        ergebnis = False\n    return ergebnis\n\n\nprint((zero_fuel(50, 25, 2)))\nprint((zero_fuel(100, 50, 1)))\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    necessary_amount = distance_to_pump/mpg\n    if necessary_amount <= fuel_left:\n        return True\n    else:\n        return False\n", "def zero_fuel(dpump, mpg, fuel):\n    \n    if (mpg*fuel) >= dpump:\n        return True\n    else:\n        return False\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return distance_to_pump <= mpg * fuel_left\n\n# a longer return statement: \n# return True if distance_to_pump <= mpg * fuel_left else False\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    \n    fueluse=distance_to_pump/mpg\n    if fueluse>fuel_left:\n        return False \n    else:\n        return True \n    \n", "def zero_fuel(dis, mpg, fu):\n    #Happy Coding! ;)\n    return dis / mpg <= fu", "def zero_fuel(distance, mpg, gallons):\n    bool=False\n    mpg=mpg*gallons\n    if mpg>=distance:\n        bool=True\n    return bool", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    make_it = (mpg * fuel_left)\n    if (distance_to_pump <= make_it):\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    return 1/mpg*distance_to_pump <= fuel_left", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    distance_in_tank = mpg * fuel_left\n    if (distance_in_tank >= distance_to_pump):\n        return True\n    else: \n        return False", "def zero_fuel(distance_to_pump: float, mpg: float, fuel_left: float) -> bool:\n    gallons_needed = distance_to_gallons(distance_to_pump, mpg)\n    rslt = gallons_needed <= fuel_left\n    return rslt\n\ndef distance_to_gallons(distance_to_pump: float, mpg: float) -> float:\n    if mpg == 0:\n        return 0\n    return distance_to_pump / mpg\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    diff = mpg * fuel_left\n    if distance_to_pump <= diff:\n        return True\n    else:\n        return False", "def zero_fuel(pump, miles, gallons):\n    \"\"\"berechnet ob der Tank zur Tanke reicht\"\"\"\n    return miles * gallons >= pump", "#<!:(){}^@\"\"+%_*&$?>\ndef zero_fuel(distance_to_pump, mpg, fuel_left):\n    #distance_to_pump = 0\n    #mpg = 0\n    #fuel_left = 0\n    return distance_to_pump <= mpg * fuel_left", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #if fuel left is less than miles to gallon distance to poump\n    if distance_to_pump > (mpg * fuel_left ):\n        return False\n    else:\n        return True\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    make_it = False;\n    get_pump = mpg * fuel_left;\n    if (distance_to_pump > get_pump):\n        return False;\n    elif (distance_to_pump <= get_pump):\n        return True;\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if mpg * fuel_left >= distance_to_pump:\n        return 1\n    elif mpg * fuel_left < distance_to_pump:\n        return 0", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;) \n    fuel_need_it = mpg * fuel_left\n    if distance_to_pump <= fuel_need_it:\n        return True \n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    if distance_to_pump/mpg <=fuel_left :\n        return 1\n    return 0", "def zero_fuel(distance, avg, f_l):\n    if avg*f_l >= distance:\n        return True\n    else:\n        return False", "def zero_fuel(a, b, c):\n    if b * c == a or b * c > a:\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    result=mpg*fuel_left - distance_to_pump\n    return True if result >=0 else False", "def zero_fuel(dist, mpg, fuel_left):\n  return dist <= fuel_left * mpg", "def zero_fuel(d, mpg, fuel):\n    while d == mpg * fuel or d <= mpg * fuel:\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    voi_ajaa = mpg * fuel_left\n    if  (voi_ajaa >= distance_to_pump):\n        return True\n\n    return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    a= fuel_left\n    b= mpg\n    c= distance_to_pump\n    if (a*b)>=c :\n        return True\n    else:\n        return False\n    #Happy Coding! ;)\n", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    berhasil = mpg * fuel_left\n    if (berhasil >= distance_to_pump):\n        return True\n    else:\n        return False", "def zero_fuel(d, v, g):\n    #Happy Coding! ;)\n    if d<=v * g:\n        return True\n    else :\n        return False", "import math\n\ndef zero_fuel(distance_to_pump, mpg, fuel_left):\n    \n    x = int(distance_to_pump)\n    y = int(mpg)\n    z = int(fuel_left)\n    p = y * z / x\n    if(p >= 1) :\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    fn=distance_to_pump-mpg*fuel_left\n    if fn<=0:\n        return True\n    else:\n        return False", "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    if distance_to_pump - (mpg*fuel_left) <= 0:\n        return 1\n    else:\n        return 0"]