["def between_extremes(numbers):\n    return max(numbers) - min(numbers)", "def between_extremes(ns):\n    return max(ns) - min(ns)", "def between_extremes(a):\n    return max(a) - min(a)", "# Naive method: 2 iterations\ndef between_extremes(numbers):\n    return max(numbers) - min(numbers)\n\n# Faster method: 1 iteration\ndef between_extremes(numbers):\n    mini, maxi = float('inf'), -float('inf')\n    for x in numbers:\n        if x > maxi: maxi = x\n        if x < mini: mini = x\n    return maxi - mini", "between_extremes = lambda n: max(n)-min(n)", "def between_extremes(numbers):\n    a, *b, c = sorted(numbers)\n    return c-a", "def between_extremes(numbers):\n    minimum_value = min(numbers)\n    maximum_value = max(numbers)\n    output = maximum_value - minimum_value\n    return output\n\n# create two variables and store min and max value \n# than subtract maximum value from minimum value\n# and store that in final output\n", "def between_extremes(lst):\n    lst = set(lst)\n    return max(lst) - min(lst)", "def between_extremes(numbers):\n    numbers.sort()\n    b = numbers[-1] - numbers[0]\n    return b\n", "def between_extremes(numbers):\n    return abs(min(numbers) - max(numbers))"]