["def arbitrate(s, n):\n    i = s.find('1') + 1\n    return s[:i] + '0' * (n - i)", "def arbitrate(s, n):\n    i = s.find('1') + 1\n    return s[:i] + '0' * (len(s) - i)", "def arbitrate(bus_str, n):\n    return ''.join(['0' if i != bus_str.find('1') else '1' for i, x in enumerate(bus_str)]) ", "def arbitrate(input, n):\n    i =input.find('1')\n    return input[:i+1]+'0'*len(input[i+1:])", "def arbitrate(input, n):\n    return '{:0{}b}'.format(2 ** int(input, 2).bit_length() // 2, n)", "import re\n\ndef arbitrate(busAccess, n):\n    return re.sub(r'(0*1)?(.*)', lambda m: (m.group(1) or '') + '0'*len(m.group(2)) , busAccess)", "arbitrate=lambda b,n:bin(int(2**~-int(b,2).bit_length()))[2:].zfill(n)", "import re\n\ndef arbitrate(s,_):\n    p,m,b=s.partition('1')\n    return p+m+'0'*len(b)", "def arbitrate(s,n):\n    return ''.join('1' if v=='1' and '1' not in s[:i] else '0' for i,v in enumerate(s))", "def arbitrate(inp, n):\n    if \"1\" not in inp:return inp\n    i=inp.index(\"1\")\n    return f\"{'0'*i}1{(n-i-1)*'0'}\""]