["def is_keith_number(n):\n    numList = [int(i) for i in str(n)]  # int array\n    if len(numList) > 1:  # min 2 digits\n        itr = 0\n        while numList[0] <= n:\n            # replace array entries by its sum:\n            numList[itr % len(numList)] = sum(numList)\n            itr += 1\n            if n in numList:  # keith-condition\n                return itr\n    return False", "def is_keith_number(n):\n    turn, seq = 0, [int(d) for d in str(n)]\n    while seq[-1] < n:\n        seq = seq[1:] + [sum(seq)]\n        turn += 1\n    return n > 9 and seq[-1] == n and turn", "from collections import deque\nfrom itertools import count, dropwhile\n\n\ndef iter_seq(init):\n    ds = deque(map(int, str(init)))\n    while True:\n        n = sum(ds)\n        yield n\n        ds.popleft()\n        ds.append(n)\n\n\ndef is_keith_number(n):\n    if n < 10:\n        return False\n    i, d = next(dropwhile(lambda x: x[1] < n, enumerate(iter_seq(n), 1)))\n    return i if d == n else False", "def is_keith_number(n):\n    i = 0\n    terms = list(map(int, str(n)))\n    while terms[-1] < n:\n        i += 1\n        terms = terms[1:] + [sum(terms)]\n    return terms[-1] == n and i", "def is_keith_number(n):\n    s = list(map(int, str(n)))\n    l = len(s)\n    while s[-1] < n:\n        s.append(sum(s[-l:]))\n    return len(s) - l if n in s else False", "def is_keith_number(n):\n    if n <= 10: return False\n    c, k_lst, k_num = 0, list(str(n)), n\n    while k_num <= n:\n        k_num = sum([int(x) for x in k_lst])\n        c += 1\n        if k_num == n: return c\n        k_lst.append(k_num)\n        k_lst.pop(0)\n    return False", "def is_keith_number(n):\n    def rec(ds, i):\n        d = sum(ds)\n        ds = ds[1:]\n        ds.append(d);\n        return i if d == n else False if d > n else rec(ds, i + 1)\n    return False if n < 10 else rec([int(x) for x in list(str(n))], 1)", "# It's nice to put the OEIS but it's not that interesting if they give the algo\ndef is_keith_number(n):\n    if n < 10: return False\n    x = list(map(int, str(n)))\n    y, i = sum(x), 1\n    while y < n:\n        i, x, y = i+1, x[1:]+[y], 2*y-x[0]\n    return i * (y==n)", "def is_keith_number(n):\n    res = [int(x) for x in str(n)]\n    tmp = sum(res)\n    cnt = 1\n    while tmp < n:\n        cnt += 1\n        res.pop(0)\n        res.append(tmp)\n        tmp = sum(res)\n        if tmp == n:\n            return cnt\n    return False", "from itertools import count\n\ndef is_keith_number(n):\n    lst = list(map(int,str(n)))\n    s   = sum(lst)\n    for i in count(1):\n        if s>=n: return n>9 and s==n and i\n        lst, s = lst[1:] + [s], s*2-lst[0]"]