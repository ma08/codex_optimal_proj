["def are_similar(a, b):\n    return sorted(a) == sorted(b) and sum(i != j for i, j in zip(a, b)) in [0, 2]", "from collections import Counter\ndef are_similar(a, b):\n    return sum(a_ == b_ for a_, b_ in zip(a, b)) >= len(a) - 2 and Counter(a) == Counter(b)", "def are_similar(a, b):\n    c = [a[i] - b[i] for i in range(len(a)) if a[i]!=b[i]]\n    return c==[] or (len(c) == 2 and c[0] + c[1] ==0)\n", "def are_similar(a, b):\n    return sorted(a) == sorted(b) and sum(m != n for m, n in zip(a, b)) <= 2\n    \n", "def are_similar(a, b):\n    return sorted(a)==sorted(b) and sum(1 for x, y in zip(a,b) if x!=y)<=2", "are_similar=lambda a,b:(3*(sorted(a)!=sorted(b))+sum(e!=b[i] for i,e in enumerate(a)))<3", "def are_similar(a, b):\n  swap = 0\n  for idx, x in enumerate(a):\n      if a.count(x) != b.count(x):\n          return False\n      if x != b[idx]:\n          swap += 1\n          if swap > 2:\n              return False\n  return True", "def are_similar(a, b):\n    unmatch = list(filter(lambda x: x[0] != x[1], zip(a, b)))\n    if len(unmatch) != 2:\n        return unmatch == []\n    return unmatch[0][::-1] == unmatch[1]", "from collections import Counter\ndef are_similar(a,b):\n    return (len(a)-sum(v1==v2 for v1,v2 in zip(a,b))) in {0,2} and Counter(a)==Counter(b)", "from collections import Counter\n\ndef are_similar(a, b):\n    return sum(i!=j for i,j in zip(a,b)) <= 2 and Counter(a)==Counter(b)"]