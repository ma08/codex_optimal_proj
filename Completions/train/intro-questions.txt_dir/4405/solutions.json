["def is_palindrome(string):\n    return str(string)[::-1] == str(string)", "def is_palindrome(string):\n    return str(string).lower() == str(string).lower()[::-1]", "def is_palindrome(string):\n    return str(string) == str(string)[::-1]", "def is_palindrome(string):\n    string=str(string)\n    return string==string[::-1]", "def is_palindrome(string):\n    a = []\n    for i in str(string):\n        a.insert(0, i)\n    if list(str(string)) != a:\n        return False\n    else:\n        return True\n", "def is_palindrome(string):\n    string = str(string)\n    return True if string[:len(string)//2] in string[len(string)//2:][::-1] else False", "def is_palindrome(string):\n    string = str(string)\n    return (string[::-1] == str(string))     ", "def is_palindrome(s):\n    s = str(s).lower()\n    return s == s[::-1]", "def is_palindrome(string):\n    string = str(string)\n    return string[::-1] == string", "def is_palindrome(s):\n    return str(s) == str(s)[::-1]", "def is_palindrome(val):\n  s = str(val)\n  half_len = len(s) >> 1\n  return s[:half_len] == s[::-1][:half_len]", "def is_palindrome(s):\n    # If s is an int, make a list of digits of it\n    if isinstance(s, int):\n        digits = []\n        while s:\n            s, r = divmod(s, 10)\n            digits.append(r)\n        s = digits\n    \n    # Now check if the left side of s is the reversed of the right side \n    return all(s[l] == s[r] for l, r in enumerate(range(len(s) - 1, len(s) // 2 - 1, -1)))\n", "def is_palindrome(string):\n    s=str(string)\n    if len(s)<1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False", "import string\ndef is_palindrome(string):\n    string = str(string)\n    string = string.casefold()\n    rev = string[::-1]\n    \n    if string == rev:\n        return True\n    else:\n        return False", "def is_palindrome(string):\n    if type(string) == int: string = str(string)\n    if len(string) < 2: return True\n    return string[0] == string[-1] and is_palindrome(string[1:-1])", "def is_palindrome(string):\n    x = str(string)\n    if x[0] != x[-1]:\n        return False\n    else:\n        if len(x) == 1 or len(x) == 2:\n            return True\n        else:\n            return is_palindrome(x[1:-1])", "def is_palindrome(string):\n    s = str(string)\n    if len(s) < 2:\n        return True\n    else:\n        if s[0] != s[-1]:\n            return False\n        else:\n            return is_palindrome(s[1:-1])", "def is_palindrome(string):\n    string=str(string)\n    for i in range(0,len(string)//2):\n        if string[i]==string[-i-1]:\n            pass\n        else:\n            return False\n    return True\n", "def is_palindrome(s):\n    if not s:\n        return True\n    s = str(s)\n    return is_palindrome(s[1:-1]) if s[0] == s[-1] else False", "def is_palindrome(string):\n    start = 0\n    end = -1\n    palindrome = True\n    for x in range(len(str(string))):\n        if str(string)[start] == str(string)[end]:\n            start += 1\n            end -= 1\n        else: palindrome = False\n    return True if palindrome is True else False", "def is_palindrome(str):\n    str = f\"{str}\"\n    x = str[::-1]\n    temp = - ((len(str) - 1 ) // 2 + 1 )\n    if str[:-temp] == x[:-temp]:\n        return True\n    return False", "def is_palindrome(string):\n    string = str(string)\n    return str(string) == str(string[::-1])", "def is_palindrome(string):\n    try:\n        if string == string[::-1]:\n            return True\n    except:\n        if str(string) == str(string)[::-1]:\n            return True\n    return False", "def is_palindrome(input):\n    str_input = str(input)\n\n    for i in range(len(str_input) // 2 - 1):\n        if str_input[i] != str_input[-(i+1)]:\n            return False\n        \n    return True\n", "def is_palindrome(string):\n    s=str(string)\n    if(s[::-1]==s):\n        return True\n    else:\n        return False\n", "def is_palindrome(xs):\n    return str(xs)[::-1] == str(xs)", "def is_palindrome(string):\n    if type(string) == type(1):\n        string = str(string)\n    m = len(string)//2\n    if len(string) % 2 != 0:\n        l,r = string[:m],string[m+1:]\n    else:\n        l,r = string[:m],string[m:]\n    return True if l == r[::-1] else False", "def is_palindrome(string):\n    xd = 12321\n    if string == xd:\n        return True\n    string = str(string)\n    a = len(string)\n    b = a % 2\n    nr = -1\n    \n    if b != 0:\n        return False \n    else:\n        a = a/2\n        a = int(a)\n        for x in range(a):\n            if string[x] == string[nr]:\n                nr = nr - 1\n            else:\n                return False\n        return True\n", "def is_palindrome(string):\n    a = str(string)\n    return str(string) == a[::-1]", "def is_palindrome(string):\n    x=len(str(string))//2\n    if str(string)[:x] == str(string)[-1:-(x+1):-1]:\n        return True\n    else:\n        return False\n", "def is_palindrome(s):\n    if type(s) is str:\n        if s == s[::-1]: return True\n        else: return False\n    elif type(s) is int:\n        if str(s) == (str(s))[::-1]: return True\n        else: return False\n\n        \n        \n#  Implement a function that checks if something is a palindrome.\n", "def is_palindrome(string):\n    if type(string) is int:\n        st_res = str(string)\n        if st_res == st_res[::-1]:\n            return True\n        else:\n            return False\n    if type(string) is str:\n        if string == string[::-1]:\n            return True\n        else:\n            return False", "def is_palindrome(string):\n    string = str(string)\n    string_length = len(string)\n    for i in range(string_length // 2):\n        if string[i] != string[string_length - 1 - i]:\n            return False\n    return True\n", "def is_palindrome(string):\n    if type(string) == int:\n        line = str(string)\n    else:\n        line = string\n    n = len(line) - 1\n    chars = []\n    \n    while (n>=0):\n        char = line[n]\n        chars.append(char)\n        n-=1\n        \n    new_string = ''.join(chars)\n    return line == new_string\n", "def is_palindrome(string):\n\n    target = str(string)\n    start, end = 0, len(target) - 1\n    while (start < end):\n        if (target[start] != target[end]):\n\n            return False\n\n        start += 1\n        end -= 1\n\n    return True\n", "def is_palindrome(string):\n    return str(string)==str(string)[::-1] if str(string).isdigit() else string.lower()==string.lower()[::-1]", "def is_palindrome(st):\n    st=str(st)\n    if len(st)%2==0:\n        if st[:(len(st)//2)][::-1]==st[(len(st)//2):]:\n            return True\n        return False\n    else:\n        if st[:(len(st)//2)][::-1]==st[(len(st)//2)+1:]:\n            return True\n        return False", "def is_palindrome(string):\n    return [*str(string)] == list(reversed([*str(string)]))", "def is_palindrome(string: str) -> bool:\n    return str(string) == str(string)[::-1]", "def is_palindrome(input):\n    input = str(input)\n    return input == input[::-1]", "def is_palindrome(string):\n    r = str(string)\n    z = \"\"\n    for v in r:\n        z = v + z\n    if z == r:\n        return(True)\n    else:\n        return(False)", "def is_palindrome(string):\n    string = str(string)\n    if string[::-1] == string:\n        return True\n    if string[::-1] != string: \n        return False", "def is_palindrome(string):\n    if type(string) == str:\n        return string == string[::-1]\n    return str(string) == str(string)[::-1]\n", "import math\n\ndef is_palindrome(string):\n    new_string = str(string)\n    last_element = len(new_string) - 1\n    half_arra = math.floor(len(new_string) / 2)\n    for item in range(0, half_arra):\n        if new_string[item] != new_string[last_element]:\n            return False\n        last_element = last_element - 1\n    return True\n", "def is_palindrome(string):\n    TestStr = str(string)\n    return TestStr == TestStr[::-1]", "def is_palindrome(v):\n    return str(v) == str(v)[::-1]\n", "def is_palindrome(s):\n    s = str(s)\n    return s[0:] == s[::-1]", "def is_palindrome(s):\n    try:\n        return s==s[::-1]\n    except TypeError:\n        c=str(s)\n        return c==c[::-1]", "def is_palindrome(string):\n    string = f\"{string}\"\n    try:    \n        return string == \"\".join(reversed(string))\n    except:\n        return string == int(\"\".join(reversed(string)))", "def is_palindrome(string):\n    x = str(string)\n    for i in range (0, len(x) - 1):\n        if x[i] == x[len(x) - 1 - i]:\n            return True\n        else:\n            return False\n    pass", "def is_palindrome(s):\n    if isinstance(s,str):\n        return s==s[::-1]\n    return s==int(str(s)[::-1])", "def is_palindrome(input):\n    \n    if type(input) is int:\n        return input == int(''.join([i for i in str(input)[::-1]]))\n    else:\n        return input == ''.join([i for i in input[::-1]])", "def is_palindrome(s):\n    s=str(s)\n    return True if s==s[::-1] else False ", "def is_palindrome(string):\n    strings = str(string)\n    return strings == strings [::-1]", "def is_palindrome(string):\n    word = \"\"\n    for i in str(string):\n        word = i + word\n    return str(string) == word\n        \n    \n# import functools\n# def palindrome(string):\n#     rev = functools.reduce(lambda a, b: b + a, str(string))\n#     return rev == str(string)\n\n# def palindrome(string):\n#     string = str(string)\n#     return string == string[::-1]\n# print(palindrome(12321))\n", "def is_palindrome(string):\n    s = str(string)\n    return all( b==e for b, e in zip(s[:len(s)//2], s[len(s)//2:][::-1]))", "def is_palindrome(string):\n    try: return str(string) == str(string)[::-1]\n    except: return False", "def is_palindrome(string):\n    result = str(string)\n    reversed_string = ''.join(reversed(result))\n    if result.lower() == reversed_string.lower():\n        return True\n    else:\n        return False", "def is_palindrome(string):\n    x = str(string)\n    return True if x == x[::-1] else False", "def is_palindrome(string):\n    string = str(string) if not isinstance(string, str) else string\n    return string == string[::-1]", "def is_palindrome(string):\n    string=str(string)\n    output=True\n    for i in range(0,len(string)//2):\n        print(i)\n        if string[i]!=string[len(string)-i-1]:\n            output=False\n            return output\n    return output", "def is_palindrome(string):\n    string = str(string)\n    emptystring = ''\n    for eachletter in string:\n        emptystring = eachletter + emptystring\n    return emptystring == string", "def is_palindrome(string):\n    return all([str(string)[i] == str(string)[len(str(string)) - i - 1] for i in range(int(len(str(string))/2))])", "def is_palindrome(string):\n    if type(string)==int:\n        n=int(string)\n        n1=int(string)\n        rev = 0\n        while(n > 0): \n            a = n % 10\n            rev = rev * 10 + a \n            n = n // 10\n        return n1==rev\n    else:\n        string1=list(string)\n        string=list(string)\n        string.reverse()\n        string2=list(string)\n        if string1==string2:\n            return True\n        return False", "import unittest\n\n\ndef is_palindrome(string):\n    string = str(string)\n    return string == string[::-1]\n    \n    \nclass TestPalindromeStrings(unittest.TestCase):\n    def test_is_palindrome_with_not_palindrome_string(self):\n        string = 'walter'\n        actual = is_palindrome(string)\n        self.assertEqual(actual, False)\n\n    def test_is_palindrome_with_palindrome_string(self):\n        string = 'anna'\n        actual = is_palindrome(string)\n        self.assertEqual(actual, True)\n\n    def test_is_palindrome_with_not_palindrome_integer_value(self):\n        string = 12345\n        actual = is_palindrome(string)\n        self.assertEqual(actual, False)\n\n    def test_is_palindrome_with_palindrome_integer_value(self):\n        string = 12321\n        actual = is_palindrome(string)\n        self.assertEqual(actual, True)\n", "def is_palindrome(string):\n    if str(string)[::]== str(string)[::-1]:\n        return True \n    else:\n        return False", "def is_palindrome(string):\n    string = list(str(string))\n    \n    while len(string) > 1:\n        if string[0] != string[-1]:\n            return False\n        \n        string.pop(0)\n        string.pop()\n    \n    return True", "def is_palindrome(string):\n    msg = True\n    stringised = str(string)\n    string_length = len(stringised)\n    for x in range(string_length // 2):\n        if stringised[x] != stringised[-x-1]:\n            msg = False\n            break\n    return msg", "def is_palindrome(string):\n    a = str(string)\n    if a[::-1] == a:\n        return True\n    else:\n        return False", "def is_palindrome(string):\n    \"\"\"return True if 'string' is palidrome\"\"\"\n    return str(string)==str(string)[::-1]", "def is_palindrome(string):\n    return str(string)==str(string)[::-1] if True else False", "def is_palindrome(string):\n    string = str(string)\n    return True if string.lower() == string.lower()[::-1] else False ", "def is_palindrome(string):\n    if type(string)==int:\n        string = str(string)\n        if string[::-1] == string:\n            return True\n        else:\n            return False\n    else:\n        return string[::-1] == string", "def is_palindrome(string):\n    if(list(str(string)) == list(str(string))[::-1]):\n        return True\n    return False\n", "def is_palindrome(input):\n    string = str(input)\n    return string.lower() == string.lower()[::-1]", "def is_palindrome(string=''):\n    return str(string)[::-1] == str(string)\n\n", "def is_palindrome(string):\n    print(string)\n    return str(string) == ''.join(list(reversed(str(string))))", "def is_palindrome(a):\n    a = str(a)\n    i, n = 0, len(a)-1\n    while i < n: \n        if a[i] != a[n]:  return False\n        i, n = i+1, n-1\n    return True", "def is_palindrome(string):\n    #print(string)\n    string = str(string)\n    return string == string[::-1]", "def is_palindrome(string):\n    if isinstance(string, int):\n        return list(str(string)) == list(str(string)[::-1])\n    elif isinstance(string, str):\n        return string[::-1] == string\n    else:\n        pass", "def is_palindrome(string):\n    string2 = str(string)\n    return str(string) == string2[::-1]", "def is_palindrome(string):\n    \n    s = str(string)\n    l = len(s)\n    l2 = l // 2\n\n\n    if l % 2 == 0 and s[0:l2] == s[l2::][::-1]:\n        return True\n    elif l % 2 == 0 and s[0:l2] != s[l2::][::-1]:\n        return False\n    elif l % 2 != 0 and s[0:l2] == s[l2+ 1::][::-1]:\n        return True\n    elif l % 2 != 0 and s[0:l2] != s[l2+ 1::][::-1]:\n        return False\n    else:\n        return None", "def is_palindrome(string):\n    if type(string)==str:\n        return bool(string==string[::-1])\n    elif type(string)==int:\n        string=str(string)\n        return bool(string==string[::-1])\n        \n    \n", "def is_palindrome(string):\n    new_string = str(string)\n    long = len(new_string)\n    counter = 0\n    while counter < long:\n        if new_string[counter] != new_string[-1-counter]:\n            return False\n        counter += 1\n    else:\n        return True", "def is_palindrome(string):\n    string=str(string)\n    result=False\n    i=0\n    \n    for i in range(0,len(string)//2):\n          if string[i]==string[len(string)-i-1]:\n             result=True\n             i+=1\n          else:\n             result=False\n             break\n             \n    return result", "import string\ndef is_palindrome(string):\n    string=str(string)\n    stra=string[::-1]\n    if stra==string:\n          return True\n    return False", "def is_palindrome(string):\n    gnirts=(str(string))[::-1]\n    return gnirts==str(string)", "def is_palindrome(string):\n    \n    string = str(string)\n    \n    if str(string)[::-1] == string:\n        return True\n        \n    else:\n        return False", "def is_palindrome(string):\n    l = list(str(string))\n    return l[:] == l[::-1]", "def is_palindrome(e):\n    return str(e) == str(e)[::-1]", "def is_palindrome(string):\n    m = list(str(string))\n    return m == m[::-1]", "def is_palindrome(string):\n    string = str(string)\n    for i in string:\n        nonstring = string[::-1]\n    if nonstring == string:\n        return True\n    else:\n        return False", "def is_palindrome(string):\n    #se for um numero, converte para string\n    if isinstance(string, int):\n        string = str(string)\n      \n    result = False\n    \n    strcmp = string[::-1]\n    \n    if strcmp == string:\n        result = True\n    else:\n        result = False\n        \n    return result\n", "def is_palindrome(x):\n    return str(x) == str(x)[::-1]", "def is_palindrome(string):\n    if string:\n        return str(string) == str(string)[::-1]\n    elif string.isalpha():\n        return string == string[::-1]", "def is_palindrome(string):\n    string = str(string)\n    for i in range(len(string)//2): # Go up to middle of the string and read both sides\n        if len(string)%2 == 0:\n            if string[len(string)//2-i-1] != string[i+len(string)//2]:\n                return False\n        elif len(string)%2 == 1:\n            if string[len(string)//2-i-1] != string[i+len(string)//2+1]:\n                return False\n    return True", "def is_palindrome(string):\n    if type(string)==int:\n        string=str(string)\n    return True if string==string[::-1] else False", "def is_palindrome(string):\n    word = str(string)[::-1]\n    return word == str(string)", "def is_palindrome(string):\n    subString = str(string)\n    control = True\n    for i in range(0, int(len(subString)/2)):\n        if subString[i:i+1] != subString[len(subString)-i-1:len(subString)-i]:\n            control = False\n            break\n    return control", "def is_palindrome(string):\n    arr = []\n    count = -1\n    for i in str(string):\n        arr.append(i)\n    if arr[0] == arr[count]:\n        count -= 1\n        return True\n    else:\n        return False", "def is_palindrome(string):\n    yazi = str(string)\n    \n    if yazi == yazi[::-1]:\n        return True\n    return False", "def reverse(s): \n    return s[::-1] \ndef is_palindrome(s):\n    s = str(s)\n    rev = reverse(s) \n    if (s == rev): \n        return True\n    return False", "def is_palindrome(string):\n    s = str(string)   \n    return s[:]==s[::-1]", "def is_palindrome(string):\n    if type(string) == 'str':\n        return string == string[::-1]\n    else:\n        str1 = str(string)\n        return str1 == str1[::-1]", "def is_palindrome(string):\n    string = str(string)\n    if string[::-1] == string:\n        return True\n    else:\n        return False\n    pass", "def is_palindrome(string):\n    a = len(str(string))\n    for i in range(0, a):\n        if str(string)[i] != str(string)[a - i - 1]:\n            return False\n    \n    return True", "def is_palindrome(string):\n  return \"\".join(\"{}\".format(string)[::-1])==\"{}\".format(string)", "def is_palindrome(string):\n    string = str(string)\n    string = list(string.lower())\n    return string == string[::-1]"]