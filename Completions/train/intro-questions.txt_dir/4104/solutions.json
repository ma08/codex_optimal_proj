["def max_tri_sum(numbers):\n    return sum(sorted(set(numbers))[-3:])", "from heapq import nlargest\n\ndef max_tri_sum(numbers):\n    return sum(nlargest(3, set(numbers)))", "def max_tri_sum(n):\n    return sum(sorted(set(n))[-3:])", "def max_tri_sum(nums): return sum(sorted(set(nums))[-3:])\n", "max_tri_sum=lambda l:sum(sorted(set(l))[-3:])", "def max_tri_sum(numbers):\n    sorted_n = sorted(numbers, reverse=True)\n    triplet = [sorted_n[0]]\n    count = 1\n    for n in sorted_n[1:]:\n        if count == 3: break\n        if n not in triplet:\n            triplet = triplet + [n]\n            count += 1\n    return sum(triplet)", "from typing import List\n\n\ndef max_tri_sum(numbers: List[int]) -> int:\n    m1, m2, m3 = sorted(numbers[:3])\n    \n    for n in numbers[3:]:\n        if n > m1:\n            if n > m2:\n                if n > m3:\n                    m1, m2, m3 = m2, m3, n\n                elif n != m3:\n                    m1, m2 = m2, n\n            elif n != m2:\n                m1 = n\n\n    return m1 + m2 + m3\n", "def max_tri_sum(numbers):\n    sorted_numbers = sorted(set(numbers), reverse = True)\n    return sum(sorted_numbers[:3])\n", "def max_tri_sum(numbers):\n    return sum( sorted([x for x in set(numbers)])[-3:] )\n", "def max_tri_sum(numbers):\n    n = sorted(list(set(numbers)),reverse=True)\n    return sum(n[:3])", "import itertools\n\ndef max_tri_sum(numbers):\n    return max(sum(i) for i in itertools.combinations(set(numbers), 3))", "def max_tri_sum(numbers):\n    sorted_set = list(set(sorted(numbers)))\n    sorted_list = sorted(sorted_set)\n    return sum(sorted_list[-3:])", "def max_tri_sum(numbers):\n    return sum(__import__(\"heapq\").nlargest(3,set(numbers)))", "def max_tri_sum(numbers):\n    #your code here\n    ls = sorted(list(set(numbers)));\n    return ls[-1] + ls[-2] + ls[-3];", "def max_tri_sum(numbers):\n    s = sorted(set(numbers), reverse=True)\n    return s[0]+s[1]+s[2]", "from functools import reduce\nfrom operator import add\n\ndef max_tri_sum(numbers):\n    numbers = list(dict.fromkeys(numbers))\n    sort_num = sorted(numbers)\n    return reduce(add, sort_num[-3:])", "def max_tri_sum(numbers):\n    #your code here\n    n = list(set(numbers))\n    n.sort(reverse=True)\n    return sum(n[:3])", "def max_tri_sum(numbers):\n    arr = list(set(numbers))\n    a = sorted(arr, reverse=True)\n    sum = a[0] + a[1] + a[2]\n    return sum", "def max_tri_sum(numbers):\n    \n    a = []\n    \n    z = set(numbers)\n    \n    v = list(z)\n    \n    v.sort(reverse=True)\n    \n    b = v[0:3]\n    \n    s = sum(b)\n    \n    return s\n\n", "def max_tri_sum(numbers):\n    num = sorted(list(set(numbers)))\n    return sum(num[len(num)-3:])", "def max_tri_sum(N):\n    S = set(N)\n    s = 0\n    for i in range(3):\n        s+= max(S)\n        S.remove(max(S))\n    return s", "def max_tri_sum(numbers):\n    #your code here\n    numbers = list(set(numbers))\n    \n    max1 = max(numbers)\n    numbers.remove(max1)\n    \n    max2 = max(numbers)\n    numbers.remove(max2)\n    \n    max3 = max(numbers)\n    numbers.remove(max3)\n    \n    return max1+max2+max3", "def max_tri_sum(numbers):\n    numberlist = []\n    accumulator = 0\n    for eachnumber in numbers:\n        if eachnumber in numberlist:\n            continue\n        else:\n            numberlist.append(eachnumber)\n    numberlist.sort()\n    for eachnumber in numberlist[-3:]:\n        accumulator = accumulator + eachnumber\n    return accumulator", "def max_tri_sum(numbers):\n    count = 0\n    answer = 0\n    numbers = set(numbers)\n    while count < 3:\n        answer += max(numbers)\n        numbers.remove(max(numbers))\n        count += 1\n    return answer", "def max_tri_sum(numbers):\n   \n    x = set()\n    for c in numbers : x.add(c)\n    s = list(x)\n    s = sorted(s , reverse = True)\n    return sum(s[:3])", "def max_tri_sum(numbers):\n    n=list(set(numbers))\n    n.sort(reverse=1)\n    return sum(n[:3])", "def max_tri_sum(numbers):\n    # returns the maximum value of the three highest integers \n        #given in an array without duplication while summing.\n    return sum(sorted(set(numbers),reverse=True)[0:3])", "def max_tri_sum(numbers):\n    return sum(i for i in sorted(set(numbers))[-3:])", "def max_tri_sum(numbers):\n    a=sorted(set(numbers),reverse=True)\n    return sum(a[:3])", "def max_tri_sum(numbers: list):\n    numbers = set(numbers)\n    s = 0\n    for _ in range(3):\n        i = max(numbers)\n        s += i\n        numbers.remove(i)\n    return s", "def max_tri_sum(numbers):\n    print(numbers)\n    a = sorted([i for i in set(numbers)])\n    return a[-1]+a[-2]+a[-3]", "def max_tri_sum(numbers):\n    unique = list(set(numbers))\n    unique.sort(reverse=True)\n    return unique[0]+unique[1]+unique[2]", "def max_tri_sum(numbers):\n    answer = []\n    numbers.sort(reverse = True)\n    for MaxNumbers in numbers:\n        if MaxNumbers not in answer and len(answer) < 3:\n            answer.append(MaxNumbers)\n        elif answer == 3:\n            break\n        print(answer)\n    return(sum(answer))\n\n", "max_tri_sum = lambda nums: sum(sorted(list(set(nums)))[-3:])", "def max_tri_sum(numbers):\n    \"\"\"\n    Return the maximum triplet sum in numbers without duplications.\n    \n    Args:\n        numbers: List of at least three integers.\n    Returns:\n        maximum triplet sum.\n    \"\"\"\n    lst = sorted(set(numbers))\n    return sum(lst[-3:])", "def max_tri_sum(numbers):\n    \"\"\"\n    Return the maximum triplet sum in numbers without duplications.\n    \n    Args:\n        numbers: List of at least three integers.\n    Returns:\n        maximum triplet sum.\n    \"\"\"\n    lst = sorted(list(set(numbers)))\n    return sum(lst[len(lst) - 3:])", "def max_tri_sum(numbers):\n    snumbers=set(numbers)\n    snumbersl1=list(snumbers)\n    snumbersl1=sorted(snumbersl1)\n\n    print(snumbers)\n    snumbersl=[]\n    n=3\n\n    while n>0:\n        maxn=max(snumbersl1)\n        snumbersl.append(maxn)\n        n-=1\n        snumbersl1.pop()\n\n    return sum(snumbersl)\n", "def max_tri_sum(numbers):\n    \n    new_num = set(numbers)\n    max_sum = list()\n    \n    for i in range(3):\n        max_sum.append(max(new_num))\n        new_num.remove(max(new_num))\n        \n    return sum(max_sum)", "def max_tri_sum(numbers):\n    lst=[i for i in sorted(set(numbers),reverse = True)]\n    return sum(lst[:3])", "def max_tri_sum(numbers):\n    num=(list(set(numbers)))\n    num.sort(reverse=True)\n    return sum(num[0:3])", "def max_tri_sum(numbers):\n    new_n=list(set(numbers))\n    r1=max(new_n)\n    new_n.remove(r1)\n    r2=max(new_n)\n    new_n.remove(r2)\n    r3=max(new_n)\n    new_n.remove(r3)\n    return r1+r2+r3\n", "def max_tri_sum(num):\n    return sum(sorted(set(num), reverse=True)[:3])\n", "from heapq import nlargest\n\nmax_tri_sum = lambda lst: sum(nlargest(3, set(lst)))", "def max_tri_sum(numbers):\n    setnum = set(numbers)\n    lst = list(setnum)\n    lst_sort = sorted(lst)\n    return sum(lst_sort[-3:])\n", "from itertools import combinations\ndef max_tri_sum(n):\n    l=set(n)\n    return max([x+y+z for x,y,z in list(combinations(l,3))])\n", "def merge(a,b):\n    ac=0\n    bc=0\n    ra=[]\n    while True:\n        if ac<len(a) and bc<len(b):\n            if a[ac]>b[bc]:\n                ra.append(a[ac])\n                ac=ac+1\n            else:\n                ra.append(b[bc])\n                bc=bc+1\n        elif ac<len(a):\n            ra.append(a[ac])\n            ac=ac+1\n        elif bc<len(b):\n            ra.append(b[bc])\n            bc=bc+1\n        else:\n            break\n    return ra\ndef mysort(arr):\n    if len(arr)<2:\n        return arr\n    else:\n        mid=len(arr)//2\n        part1=mysort(arr[:mid])\n        part2=mysort(arr[mid:])\n        return merge(part1,part2)\ndef max_tri_sum(numbers):\n    nodup={}\n    for x in numbers:\n        nodup[x]=0\n    nodup=list(nodup.keys())\n    nodup=mysort(nodup)\n    i=0\n    s=0\n    while i<3:\n        s=s+nodup[i]\n        i=i+1\n    return s", "def max_tri_sum(arr):\n    arr = list(reversed(sorted(set(arr))))\n    total = 0\n\n    for i in range(0, 3):\n        total += arr[i]\n    \n    return total", "def max_tri_sum(numbers):\n    numbers.sort(reverse=True)\n    max_numbers = list(dict.fromkeys(numbers))\n    max_sum = sum(max_numbers[:3])\n    return max_sum", "from heapq import nlargest\n\ndef max_tri_sum(numbers):\n    assert len(numbers) >= 3\n    return sum(nlargest(3, set(numbers)))", "def max_tri_sum(numbers):\n    return sum(sorted([item for item in set(numbers)])[-3:])", "def max_tri_sum(numbers):\n    num = sorted(set(numbers))\n    return sum(num[-3:])", "def max_tri_sum(numbers):\n    lst=list(set(numbers))\n    lst.sort()\n\n    return sum(lst[-1:-4:-1])", "def max_tri_sum(numbers):\n    v = sorted(set(numbers))\n    return sum(v[-3:])", "def max_tri_sum(numbers):\n    return sum(sorted(set(numbers),reverse=True)[i] for i in range(3))", "def max_tri_sum(numbers):\n    maximums = []\n    while len(maximums) < 3:\n        if max(numbers) not in maximums:\n            maximums.append(max(numbers))\n        else:\n            numbers.remove(max(numbers))\n    return sum(maximums)", "def max_tri_sum(numbers):\n    maxes = [max(numbers)]\n    maxless = []\n    for num in numbers:\n        if num not in maxless and num not in maxes:\n            maxless.append(num)\n    maxes.append(max(maxless))\n    maxless = []\n    for num in numbers:\n        if num not in maxless and num not in maxes:\n            maxless.append(num)\n    maxes.append(max(maxless))\n    return sum(maxes)", "def max_tri_sum(numbers):\n    #your code here\n    z = set(numbers)\n    x = sorted(z, reverse = True)\n    return sum(x[0:3])", "def max_tri_sum(numbers):\n    s = []\n    for i in numbers:\n        if i not in s:\n            s.append(i)\n    a = sorted(s)[-1]\n    b = sorted(s)[-2]\n    c = sorted(s)[-3]\n\n    return a+b+c", "def max_tri_sum(numbers):\n    newList = []\n    newList = list(set(numbers))\n    newList.sort(reverse=True)\n    result = newList[0]+newList[1]+newList[2]\n    return result", "def max_tri_sum(numbers):\n    a = set(numbers)\n    b = max(a)\n    c = a.remove(b)\n    d = max(a)\n    e = a.remove(d)\n    f = max(a)\n    return b + d + f\n    #your code here\n", "max_tri_sum = lambda a: sum((sorted(list(set(a))))[-3:])", "def max_tri_sum(numbers):\n    max = 0\n    sum = 0\n    i = 0\n    result = []\n    while i < 3:\n        max = -9999999999\n        for item in numbers:\n            if item >= max:\n                max = item\n        \n        if max not in result:\n            result.append(max)\n        \n        for item in numbers:\n            if item == max:\n                numbers.remove(max)\n        \n        i += 1\n        \n    for item in result:\n        sum += item\n\n    return sum\n", "def max_tri_sum(numbers):\n    a = sorted(set((numbers)))\n    return sum(a[-3::1])", "def max_tri_sum(numbers):\n    ans = []\n    numbers.sort(reverse=True)\n    for x in numbers:\n        if x not in ans:\n            ans.append(x)\n    return sum(ans[:3])", "def max_tri_sum(numbers):\n    new_list = sorted(set(numbers))\n    return sum(new_list[-3:])", "max_tri_sum = lambda a: sum(sorted(list(set(a)))[-3:])\n#max_tri_sum = lambda b:cc+=i for i in sorted (a)[-3:]\n#two_oldest_ages = lambda a: sorted (a)[-2:]\n", "def max_tri_sum(numbers):\n    test_list = list(set(numbers))\n    sorted_list = sorted(test_list)\n    #print(sorted_list)\n    return (sum(sorted_list[-3:]))\n    \n", "def max_tri_sum(a):\n    a.sort()\n    q=[]\n    [q.append(i) for i in a if i not in q]\n    return  sum(q[-3:])\n    \n", "def max_tri_sum(numbers):\n    c = sorted(set(numbers), reverse=True)\n    return(sum(c[:3]))\n", "def max_tri_sum(numbers):\n    return sum(sorted(set(list(numbers)))[-3:])", "def max_tri_sum(numbers):\n    x = sorted(set(numbers))\n    l = []\n    for n in reversed(x):\n        if len(l) <= 2:\n            l.append(n)\n    return sum(l)", "def max_tri_sum(numbers):\n  num_set = list(set(numbers))\n  sorted_nums = sorted(num_set, reverse=True)\n  return sum(sorted_nums[0:3])", "import sys\n\ndef max_tri_sum(numbers):\n    numbers = sorted(list(set(numbers)))\n\n    return sum(numbers[-3:])", "def max_tri_sum(numbers):\n    numbers = set(numbers)\n    numbers = list(numbers)\n    n1 = numbers.pop(numbers.index(max(numbers)))\n    n2 = numbers.pop(numbers.index(max(numbers)))\n    n3 = numbers.pop(numbers.index(max(numbers)))\n    \n    return sum((n1, n2, n3))\n", "def max_tri_sum(numbers):\n    l = []\n    l2 = []\n    for i in numbers:\n        if i not in l:\n            l.append(i)\n    for i in range(3):\n        l2.append(max(l))\n        l.remove(max(l))\n    return sum(l2)", "def max_tri_sum(numbers):\n    return sum([number for number in sorted(list(set(numbers)))[-1:-4:-1]])", "def max_tri_sum(numbers):\n    return sum(sorted(list(dict.fromkeys(numbers)))[-3:])\n    #your code here\n", "def max_tri_sum(arr):\n    return sum(sorted(set(arr))[-3:])", "def max_tri_sum(numbers):\n    new_list = set(numbers)\n    third_new_list = sorted(new_list, reverse=True )[:3]\n    return (sum(third_new_list))", "def max_tri_sum(numbers):\n\n    lst = sorted(numbers[:3])\n\n    for i in numbers[3:]:\n\n        if i > lst[0]:\n            \n            if i not in lst:\n                          \n                for x in range(len(lst)):\n                    if i < lst[x]:\n                        del lst[0]\n                        lst.insert(x-1,i)\n                        break\n                    elif i > lst[2]:\n                        del lst[0]\n                        lst.append(i)\n                        break\n\n                   \n    return sum(lst) ", "def max_tri_sum(numbers):\n    a = sorted(set(numbers), reverse = True)\n    b = a[:3]\n    return sum(b)", "def max_tri_sum(numbers):\n    numbers_lst = []\n    for i in numbers:\n        if i not in numbers_lst:\n            numbers_lst.append(i)\n            numbers_lst.sort()\n    return sum(numbers_lst[-3:])\n    #your code here\n", "def max_tri_sum(numbers):\n    setnumber = sorted(set(numbers))\n    return sum(setnumber[-3:])", "def max_tri_sum(numbers):\n    srt_lst = sorted(set(numbers))\n    return sum(srt_lst[-3:])", "def max_tri_sum(n):\n    lst = sorted(set(n))[-3:]\n    return sum([int(i) for i in lst])\n", "def max_tri_sum(numbers):\n    return sum(sorted(set(numbers), key=None, reverse=True)[:3])", "def max_tri_sum(numbers):\n    return sum([i for i in sorted(set(numbers))[-3:]])", "def max_tri_sum(n):\n    #your code here\n    n=list(set(n))\n    n.sort(reverse=True)\n    return sum(n[0:3])", "def max_tri_sum(numbers):\n    numbers = set(numbers)\n    return sum(sorted(numbers)[-3:])", "def max_tri_sum(numbers):\n    x=[]\n    for i in numbers:\n        if i not in x:\n            x.append(i)\n    x=sorted(x)\n    return sum(x[-3:])", "def max_tri_sum(numbers):\n    #your code here\n    no_duplicates = set(numbers)\n    ordered = sorted(no_duplicates)\n    return sum(ordered[-3:])", "def max_tri_sum(numbers):\n    x = sorted(list(set(numbers)), reverse = True)\n    return sum(x[:3])", "def max_tri_sum(numbers):\n    uniq = set(numbers)\n    return sum([max(uniq), max(uniq - {max(uniq)}), max(uniq - {max(uniq)} - {max(uniq - {max(uniq)})})])", "def max_tri_sum(numbers):\n    sum = 0\n    numbers = set(numbers)\n    num = list(numbers)\n    num = sorted(num)\n    for i in sorted(num[-3:]):\n        sum = i+sum\n    #your code here\n    return sum", "def max_tri_sum(numbers):\n    #your code here\n    l = sorted(set(numbers), reverse=True)\n    sum = 0\n    for i in range(3):\n        sum += l[i]\n    return sum", "from heapq import nlargest\n\ndef max_tri_sum(numbers):\n    #your code here\n#     print(nlargest(3, set(numbers)))\n    return sum(nlargest(3, set(numbers)))", "from itertools import combinations\ndef max_tri_sum(numbers):\n    #your code here\n    return max([sum(x) for x in list(combinations(set(numbers), 3))]) ", "def max_tri_sum(numbers):\n    numbers = list(set(numbers))\n    numbers.sort(reverse=True)\n    numbers = numbers[0:3]\n    return sum(numbers)", "def max_tri_sum(numbers):\n    a = sorted(list(set(numbers)), reverse = True)\n    return sum(a[:3])", "def max_tri_sum(numbers):\n    numbers = set(numbers)\n    max_sum = 0\n    for i in range(3):\n        n = max(numbers)\n        numbers.remove(n)\n        max_sum += n\n    return max_sum"]