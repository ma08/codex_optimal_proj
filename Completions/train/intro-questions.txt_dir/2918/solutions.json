["def nbMonths(oldCarPrice, newCarPrice, saving, loss):\n    months = 0\n    budget = oldCarPrice\n    \n    while budget < newCarPrice:\n        months += 1\n        if months % 2 == 0:\n            loss += 0.5\n        \n        oldCarPrice *= (100 - loss) / 100\n        newCarPrice *= (100 - loss) / 100\n        budget = saving * months + oldCarPrice\n    \n    return [months, round(budget - newCarPrice)]", "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    i = 0\n    while savingperMonth * i + startPriceOld < startPriceNew:\n        if i % 2:\n            percentLossByMonth += 0.5\n        startPriceOld -= startPriceOld * 0.01 * percentLossByMonth\n        startPriceNew -= startPriceNew * 0.01 * percentLossByMonth\n        i += 1\n    return [i, round(savingperMonth * i + startPriceOld - startPriceNew)]", "def nbMonths(fltp1, fltp2, flts, fltl, i = 0):\n    return [i, round(fltp1 + flts * i - fltp2, 0)] if fltp1 + flts * i - fltp2 >= 0 else nbMonths(fltp1 * (1 - fltl / 100 - 0.005 * int((i+1)/2)), fltp2 * (1 - fltl / 100 - 0.005 * int((i+1)/2)), flts, fltl, i+1)", "import itertools\ndef nbMonths(my_car, new_car, per_month, loss):\n  loss, w, m = 1 - loss / 100.0, my_car, 0\n  while w < new_car:\n    loss -= 0 if m % 2 == 0 else .005\n    my_car *= loss\n    new_car *= loss\n    m += 1\n    w = my_car + per_month * m\n  return [m, round(w - new_car)]", "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    total=0\n    count=0\n    while total+startPriceOld<startPriceNew:\n        count+=1\n        if count and count%2==0:\n            percentLossByMonth+=0.5\n        startPriceOld=startPriceOld*(100-percentLossByMonth)/100\n        startPriceNew=startPriceNew*(100-percentLossByMonth)/100\n        total+=savingperMonth\n    return [count, round(total+startPriceOld-startPriceNew)]", "def nbMonths(priceOld, priceNew, savingMonth, percentLoss):\n    if priceOld > priceNew:\n        return [0, priceOld-priceNew]\n    months = 0\n    savings = 0\n    loss = percentLoss/100\n    while savings + priceOld < priceNew:\n        months += 1\n        savings += savingMonth\n        if months%2 == 0:\n            loss += 0.005\n        priceOld -= priceOld*loss     \n        priceNew -= priceNew*loss      \n    saved = round(savings+priceOld-priceNew)\n    return [months, saved]\n", "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    months_elapsed = 0\n    if startPriceOld >= startPriceNew:\n        return [months_elapsed, startPriceOld - startPriceNew]\n    \n    too_poor = True\n    while too_poor:\n        months_elapsed += 1\n        \n        if months_elapsed % 2 == 0:\n            percentLossByMonth += 0.5\n        \n        startPriceOld = startPriceOld * (1 - (percentLossByMonth / 100))\n        startPriceNew = startPriceNew * (1 - (percentLossByMonth / 100))      \n        available_funds = (startPriceOld + (savingperMonth * months_elapsed))\n        \n        if available_funds >= startPriceNew:\n            too_poor = False\n        \n    return [months_elapsed, int(round(available_funds - startPriceNew))]\n\n        \n        \n    \n        \n\n"]