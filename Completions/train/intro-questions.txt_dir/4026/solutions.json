["def optimum_location(students, locations):\n    m = min(locations, key = lambda loc: sum(abs(loc['x'] - s[0]) + abs(loc['y'] - s[1]) for s in students))\n    return \"The best location is number %d with the coordinates x = %d and y = %d\" % (m['id'], m['x'], m['y'])\n", "def manhattan(p1,p2): return sum(abs(b-a) for a,b in zip(p1,p2))\n\ndef optimum_location(students, locations):\n    return \"The best location is number {id:} with the coordinates x = {x:} and y = {y:}\".format(\n                **min((loc for loc in locations), key=lambda l: sum(manhattan(s,(l['x'],l['y'])) for s in students)))", "def optimum_location(students, locations):\n    o = min(locations, key = lambda loc: sum(abs(x - loc['x']) + abs(y - loc['y']) for x, y in students))\n    return 'The best location is number %s with the coordinates x = %s and y = %s' % (o['id'], o['x'], o['y'])", "def optimum_location(students, locations):\n    best = min(locations, key=lambda location: distance(students, location))\n    return \"The best location is number {id} with the coordinates x = {x} and y = {y}\".format(**best)\n\n\ndef distance(students, location):\n    return sum(sum(abs(s[i] - location[j]) for i, j in ((0, \"x\"), (1, \"y\"))) for s in students)", "d = lambda a,b,c,d:abs(d-b)+abs(c-a)\noptimum_location=lambda st,lc:'The best location is number {} with the coordinates x = {} and y = {}'.format(*min([sum(d(*n,i['x'],i['y']) for n in st),i['id'],i['x'],i['y']] for i in lc)[1:])", "def optimum_location(students, locations):\n  best = min(locations, key = lambda loc: sum(abs(abs(loc['x']-x) + abs(loc['y']-y)) for x, y in students))\n  return f'The best location is number {best[\"id\"]} with the coordinates x = {best[\"x\"]} and y = {best[\"y\"]}'", "def optimum_location(students, locations):\n    return \"The best location is number %(id)d with the coordinates x = %(x)d and y = %(y)d\" \\\n    % min(locations, key=lambda l:sum(abs(x - l['x']) + abs(y - l['y']) for x, y in students))", "def optimum_location(students, locations):\n    def total_distance(loc):\n        x_dist = sum(abs(loc['x'] - x) for x, y in students)\n        y_dist = sum(abs(loc['y'] - y) for x, y in students)\n        return x_dist + y_dist\n    best_loc = min(locations, key=total_distance)\n    template = \"The best location is number {id} with the coordinates x = {x} and y = {y}\"\n    return template.format(**best_loc)\n    \n\n", "def optimum_location(students, locations, optimal = (float('inf'),)):\n    for loc in locations:\n        distance = sum(abs(x - loc['x']) + abs(y - loc['y']) for x, y in students)\n        if distance < optimal[0]:\n            optimal = distance, loc['id'], loc['x'], loc['y']\n    return 'The best location is number %s with the coordinates x = %s and y = %s' % optimal[1:]"]