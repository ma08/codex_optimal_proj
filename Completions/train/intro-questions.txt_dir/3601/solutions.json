["def find_nb(m):\n    n = 1\n    volume = 0\n    while volume < m:\n        volume += n**3\n        if volume == m:\n            return n\n        n += 1\n    return -1", "def find_nb(m):\n    n=s=0\n    while True:\n      n+=1\n      s+=n\n      k=s*s\n      if k== m:\n          return n\n      elif k>m:\n          return -1 \n", "def find_nb(m):\n    i,sum = 1,1\n    while sum < m:\n        i+=1\n        sum+=i**3\n    return i if m==sum else -1", "def find_nb(m):\n    '''\n    n cube sum m = (n*(n+1)//2)**2\n    then n**2 < 2*m**0.5 < (n+1)**2\n    and we can proof that for any n, 0.5 > (2*m**0.5)**0.5 - n**2 > 2**0.5 - 1 > 0.4\n    '''\n    n = int((2*m**0.5)**0.5)\n    if (n*(n+1)//2)**2 != m: return -1\n    return n", "def find_nb(m):\n  total, i = 1, 2\n  while total < m:\n    total += i * i * i\n    i += 1\n  return i - 1 if total == m else -1", "def find_nb(m):\n    n = 0\n    while (m > 0):\n        n += 1\n        m -= n**3\n    return n if m == 0 else -1", "def find_nb(m):\n    l = 1\n    while m > 0:\n        m -= l**3\n        l += 1\n    return l-1 if m == 0 else -1", "def find_nb(m):\n    try:\n        vol = int(m)\n    except TypeError:\n        return -1\n    \n    partial_sum = 0\n    i = 0\n    while partial_sum < vol:\n        i += 1\n        partial_sum += i**3\n    \n    if vol == partial_sum:\n        return i\n    else:\n        return -1", "from decimal import *\n\ndef find_nb(m):\n    getcontext().prec = 24\n    squareRootM = Decimal(m).sqrt()\n    squareRootDelta = Decimal(1+8*squareRootM).sqrt()\n    num = (squareRootDelta-1)/2\n    return num if num % 1 == 0 else -1"]