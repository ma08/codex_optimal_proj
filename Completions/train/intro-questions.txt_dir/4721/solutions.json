["TO_KELVIN = {\n    'C': (1, 273.15),\n    'F': (5.0 / 9, 459.67 * 5.0 / 9),\n    'R': (5.0 / 9, 0),\n    'De': (-2.0 / 3, 373.15),\n    'N': (100.0 / 33, 273.15),\n    'Re': (5.0 / 4, 273.15),\n    'Ro': (40.0 / 21, -7.5 * 40 / 21 + 273.15),\n}\n\ndef convert_temp(temp, from_scale, to_scale):\n    if from_scale == to_scale:\n        return temp\n    if from_scale != 'K':\n        (a, b) = TO_KELVIN[from_scale]\n        temp = a * temp + b\n        if to_scale == 'K':\n            return int(round(temp))\n    (a, b) = TO_KELVIN[to_scale]\n    return int(round((temp - b) / a))\n", "\nint2 = lambda x: int(round(x, 0))\n\ndef other2c(temp, from_scale):\n    func_dict = {\n        'C': lambda x: x,\n        'K': lambda x: int2(x - 273.15),\n        'F': lambda x: int2((x - 32) * 5 / 9),\n        'R': lambda x: int2((x - 491.67) * 5 / 9),\n        'De': lambda x: int2(100 - x * 2 / 3),\n        'N': lambda x: int2(x * 100 / 33),\n        'Re': lambda x: int2(x * 5 / 4),\n        'Ro': lambda x: int2((x - 7.5) * 40 / 21)\n    }\n    return func_dict[from_scale](temp)\n\n\ndef c2other(temp, to_scale):\n    func_dict = {\n        'C': lambda x: x,\n        'K': lambda x: int2(x + 273.15),\n        'F': lambda x: int2(x * 9 / 5 + 32),\n        'R': lambda x: int2((x + 273.15) * 9 / 5),\n        'De': lambda x: int2((100 - x) * 3 / 2),\n        'N': lambda x: int2(x * 33 / 100),\n        'Re': lambda x: int2(x * 4 / 5),\n        'Ro': lambda x: int2(x * 21 / 40 + 7.5)\n    }\n    return func_dict[to_scale](temp)\n\n\ndef convert_temp(temp, from_scale, to_scale):\n    if from_scale == to_scale:\n        return temp\n    nowc = other2c(temp, from_scale)\n    c2res = c2other(nowc, to_scale)\n    return c2res", "convertToC = {'C':lambda t: t, 'F':lambda t: (t - 32) * 5 / 9, 'K':lambda t: t - 273.15, 'R':lambda t: (t - 491.67) * 5 / 9,\n              'De':lambda t: 100 - t * 2 / 3, 'N':lambda t: t * 100 / 33, 'Re':lambda t: t * 5 / 4, 'Ro':lambda t: (t - 7.5) * 40 / 21}\nconvertFromC = {'C':lambda t: t, 'F':lambda t: t * 9 / 5 + 32, 'K':lambda t: t + 273.15, 'R':lambda t: (t + 273.15) * 9 / 5,\n                'De':lambda t: (100 - t) * 3 / 2, 'N':lambda t: t * 33 / 100, 'Re':lambda t: t * 4 / 5, 'Ro':lambda t: t * 21 / 40 + 7.5}\ndef convert_temp(temp, from_scale, to_scale):\n  return round(convertFromC[to_scale](convertToC[from_scale](temp)))", "def convert_temp(temp, from_scale, to_scale):\n    #Lookup table of x -> Kelvin conversions\n    input_lookup = {\n        'C' : lambda x: x+273.15, \n        'F' : lambda x: ((x + 359.67)*5)/9, \n        'K' : lambda x: x, \n        'R' : lambda x: (x*5)/9, \n        \"De\": lambda x: 373.15 - ((x*2)/3), \n        'N' : lambda x: ((x*100)/33) + 273.15, \n        \"Re\": lambda x: ((x*5)/4) + 273.15, \n        \"Ro\": lambda x: (((x -7.5)*40)/21) + 273.15\n    }\n    \n    #Lookup table of Kevin -> y conversions\n    output_lookup = {\n        'C' : lambda x: x-273.15, \n        'F' : lambda x: ((x*9)/5) - 459.67, \n        'K' : lambda x: x, \n        'R' : lambda x: (x*9)/5, \n        \"De\": lambda x: ((373.15 - x)*3)/2, \n        'N' : lambda x: ((x - 273.15)*33)/100, \n        \"Re\": lambda x: ((x-273.15)*4)/5, \n        \"Ro\": lambda x: (((x - 273.15) * 21)/40) + 7.5\n    }\n    \n    #Pass result from input_lookup into output_lookup and round result to match desired output\n    return round( output_lookup[to_scale](input_lookup[from_scale](temp)) )", "convert_temp = lambda z, s, d: int(round({\n'C':lambda z:z-273.15,\n'F':lambda z:z*9/5-459.67,\n'K':lambda z:z,\n'R':lambda z:z*9/5,\n'De':lambda z:(373.15-z)*3/2,\n'N':lambda z:(z-273.15)*33/100,\n'Re':lambda z:(z-273.15)*4/5,\n'Ro':lambda z:(z-273.15)*21/40+7.5\n}[d]({\n'C':lambda z:z+273.15,\n'F':lambda z:(z+459.67)*5/9,\n'K':lambda z:z,\n'R':lambda z:z*5/9,\n'De':lambda z:373.15-z*2/3,\n'N':lambda z:z*100/33+273.15,\n'Re':lambda z:z*5/4+273.15,\n'Ro':lambda z:(z-7.5)*40/21+273.15\n}[s](z))))", "FUNCS = {\n        #     to C       C to X\n    'C':  (lambda t:t, lambda t:t),\n    'F':  (lambda t:(t-32)*5/9, lambda t:t*9/5+32),\n    'K':  (lambda t:t-273.15, lambda t:t+273.15),\n    'R':  (lambda t:(t-491.67)*5/9, lambda t:(t+273.15)*9/5),\n    'De': (lambda t:100-t*2/3, lambda t:(100-t)*3/2),\n    'N':  (lambda t:t*100/33, lambda t:t*33/100),\n    'Re': (lambda t:t*5/4, lambda t:t*4/5),\n    'Ro': (lambda t:(t-7.5)*40/21, lambda t:t*21/40+7.5),\n}\n\ndef convert_temp(t, org, to):\n    return round(FUNCS[to][1](FUNCS[org][0](t)))", "d = {'C': 't', 'F': 't-32*5/9', 'K': 't-273.15', 'R': '(t-491.67)*5/9', 'De': '100-t*2/3', 'N': 't*100/33','Re': 't*5/4','Ro': '(t-7.5)*40/21'}\nd_ = {'C': 'c', 'F': 'c*9/5+32', 'K': 'c+273.15', 'R': '(c+273.15)*9/5', 'De': '(100-c)*3/2', 'N': 'c*33/100','Re': 'c*4/5','Ro': 'c*21/40+7.5'}\ndef convert_temp(t, fr, to):\n    c = eval(d[fr])\n    return round(eval(d_[to]))", "converters = {\n    ('C', 'F'): lambda c: c * 9 / 5 + 32,\n    ('C', 'K'): lambda c: c + 273.15,\n    ('C', 'R'): lambda c: (c + 273.15) * 9/5,\n    ('C', 'De'): lambda c: (100 - c) * 3/2,\n    ('C', 'N'): lambda c: c * 33 / 100,\n    ('C', 'Re'): lambda c: c * 4/5,\n    ('C', 'Ro'): lambda c: c * 21/40 + 7.5,\n\n    ('F', 'C'): lambda f: (f - 32) * 5 / 9,\n    ('K', 'C'): lambda k: k - 273.15,\n    ('R', 'C'): lambda r: (r - 491.67) * 5/9,\n    ('De', 'C'): lambda de: 100 - de * 2/3,\n    ('N', 'C'): lambda n: n * 100 / 33,\n    ('Re', 'C'): lambda re: re * 5/4,\n    ('Ro', 'C'): lambda ro: (ro - 7.5) * 40/21,    \n}    \n    \ndef convert_temp(temp, from_scale, to_scale):\n    f = converters.get((from_scale, to_scale))\n    x = f(temp) if f else convert_temp(convert_temp(temp, from_scale, 'C'), 'C', to_scale)\n    return round(x)", "def convert_temp(tt, f, t):\n    if f=='C': x=tt\n    if f=='F': x=(tt-32)*5.0/9\n    if f=='K': x=tt-273.15\n    if f=='R': x=(tt-491.67)*5.0/9\n    if f=='De': x=100-tt*2.0/3\n    if f=='N': x=tt*100.0/33\n    if f=='Re': x=tt*5.0/4\n    if f=='Ro': x=(tt-7.5)*40.0/21\n    \n    if t=='C': y=x\n    if t=='F': y=x*9.0/5+32\n    if t=='K': y=x+273.15\n    if t=='R': y=(x+273.15)*9.0/5\n    if t=='De': y=(100-x)*3.0/3\n    if t=='N': y=x*33.0/100\n    if t=='Re': y=x*4.0/5\n    if t=='Ro': y=x*21.0/40+7.5\n    \n    return round(y)", "CELSIUS =    {'C' : (     1.0,    0.0    ),\n              'F' : (   5/9.0, -32*5/9.0 ),\n              'K' : (     1.0, -273.15   ),\n              'R' : (   5/9.0, -273.15   ),\n              'De': (  -2/3.0,  100.0    ),\n              'N' : (100/33.0,    0.0    ),\n              'Re': (    1.25,    0.0    ),\n              'Ro': ( 40/21.0, -40*7.5/21)}\n\ndef convert_temp(temp, from_scale, to_scale):\n    fa, fb = CELSIUS[from_scale]\n    ta, tb = CELSIUS[to_scale]\n    cels = fa * temp + fb\n    return round((cels - tb)/ta)"]