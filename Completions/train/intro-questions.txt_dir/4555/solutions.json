["from operator import sub, mul\nfrom functools import reduce\n\ndef string_color(string):\n    if len(string) < 2:\n        return None\n    r = sum(map(ord, list(string))) % 256\n    g = reduce(mul, list(map(ord, list(string)))) % 256\n    b = abs(reduce(sub, list(map(ord, list(string))))) % 256\n    return '{:02X}{:02X}{:02X}'.format(r,g,b) \n", "from functools import reduce\nfrom operator import mul\n\n\ndef string_color(name):\n    if len(name) > 1:\n        xs = list(map(ord, name))\n        r = sum(xs) % 256\n        g = reduce(mul, xs) % 256\n        b = abs(xs[0] - sum(xs[1:])) % 256\n        return f\"{r:02X}{g:02X}{b:02X}\"", "def string_color(name):\n    if len(name) < 2 :\n        return None\n    else:\n        first = hex(sum(ord(char) for char in name) % 256)[-2:]\n        second = 1\n        for char in name:\n            second = second * ord(char)\n        second = hex(second % 256)[-2:]\n        third = ord(name[0]) - sum(ord(char) for char in name[1:])\n        third = hex(abs(third) % 256)[-2:]\n        \n        return (first + second + third).upper().replace(\"X\", \"0\")", "from operator import mul\nfrom functools import reduce\n\ndef string_color(s):\n    if len(s) > 1:\n        a = [ord(x) for x in s]\n        n = sum(a)\n        return f\"{n%256:02X}{reduce(mul, a) % 256:02X}{abs(a[0] * 2 - n) % 256:02X}\"", "def string_color(name):\n    first_char = length = other_chars = sum_chars = 0\n    prod_chars = 1\n    for i, a in enumerate(name):\n        current = ord(a)\n        length += 1\n        if i == 0:\n            first_char = current\n        else:\n            other_chars += current\n        prod_chars *= current\n        sum_chars += current\n    if length < 2:\n        return None\n    return '{:02X}{:02X}{:02X}'.format(\n        sum_chars % 256, prod_chars % 256, abs(first_char - other_chars) % 256\n    )\n", "import operator as op\nfrom functools import reduce\ndef string_color(name):\n    if name == '': return None\n    lst = [ord(i) for i in name]\n    a = sum(lst)%256\n    b = reduce(op.mul, lst)%256\n    c = (abs(lst[0]-sum(lst[1:])))%256\n    a, b, c = format(a, 'x').upper().zfill(2), format(b, 'x').upper().zfill(2), format(c, 'x').upper().zfill(2)\n    return a + b + c if not a==b==c else None", "def string_color(name):\n    if len(name)< 2: return None\n    ascii = [ord(el) for el in name]\n    s1 = hex(sum(ascii) % 256)[2:].upper()\n    s2 = 1\n    for el in ascii:\n        s2 *= el\n    s2 = hex(s2 % 256)[2:].upper()\n    s3 = hex(abs(ascii[0] - sum(ascii[1:])) % 256)[2:].upper()\n    lst = [s1, s2, s3]\n    lst = ['0'+el if len(el)<2 else el for el in lst]\n    return ''.join(lst)"]