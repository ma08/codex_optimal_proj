["def friend(x):\n    return [f for f in x if len(f) == 4]", "def friend(x):\n    #Code\n    names = []\n    for name in x:\n        if len(name) == 4:\n            names.append(name)\n    return names", "def friend(x):\n    return [i for i in x if len(i) == 4]", "def friend(x):\n    myFriends = []                   # Initialize list variable\n    for person in x:                 # Loop through list of names \n        if len(person) == 4:         # Check to see if the name is of length 4\n            myFriends.append(person) # If the name is 4 characters long, append it to variable myFriends\n    return myFriends                 # Return myFriends list\n", "def friend(x):\n    return list(filter(lambda s : len(s)==4 ,x))", "def friend(x):\n    '''\n    x: list of strings/people\n    returns: list of people with only 4 letters in their names\n    '''\n    return [n for n in x if len(n) == 4]", "def friend(x):\n    return [each for each in x if len(each) == 4]", "def friend(x):\n    return [y for y in x if len(y)==4]", "def friend(arr):\n    return [x for x in arr if len(x)==4]", "def friend(x):\n    return [n for n in x if len(n)==4]", "def friend(x):\n    return list(filter(lambda name: len(name) == 4, x))", "def friend(x):\n   \n#set an empty list to fill the output with\n    result=[]\n   \n#make a forloop to go through the list and add the names that have 4 letter to result\n    for i in x:\n        if len(i) == 4:\n            result.append(i)\n\n    \n    return(result)\n    \n", "import re\n\ndef friend(x):\n    true_friends = []\n    for name in x:\n        # checking the name's length is not enough\n        # (even tho all tests are green)\n        # name should contain only letters from the alphabet\n        if len(name) == 4 and re.search('[a-zA-Z]', name):\n            true_friends.append(name)\n    return true_friends", "def friend(x):\n    myFriend=[] #new list to store my friends names\n    for i in x:\n        if len(i)== 4:\n            myFriend.append(i)\n        else:\n            pass\n    return myFriend\n    #Code\n", "def friend(x):\n    new_friends=[]\n    for y in x:\n        if len(y)==4:\n            new_friends.append(y)\n    return new_friends        \n    #Code\n", "def friend(x):\n    res = []\n    \n    for i, j in enumerate(x):\n        if len(j) == 4:\n            res.append(j)\n            \n    return res", "from typing import List\n\n\ndef friend(x: List[str]=[\"Ryan\", \"Kieran\", \"Mark\",]):\n    # Code\n    friends = []\n\n    for name in x:\n        if len(name) == 4:\n            friends.append(name)\n\n    return friends", "def friend(x):\n    shouldBe = list()\n    for f in x:\n        if len(f) == 4:\n            shouldBe.append(f)\n    return shouldBe", "def friend(friends):\n    my_list = []\n    return [f for f in friends if len(f) == 4]", "# def friend(x):\n#     friends = []\n#     for friend in x:\n#         if len(friend) == 4:\n#             friends.append(friend)\n#         return friends\n\n\ndef friend(x):\n    return [friend for friend in x if len(friend) == 4]", "def friend(lst):\n    return [name for name in lst if len(name) == 4]", "friend = lambda x: list(filter(lambda y: len(y)==4, x))", "def friend(friends):\n    friend = []\n    for name in friends:\n        if(len(name) == 4):\n            friend.append(name)\n    return friend\n    \n", "def friend(x):\n    my_friends = []\n    for i in range(len(x)):\n        if(len(x[i]) == 4):\n            my_friends.append(x[i])\n    return my_friends\n", "def friend(input):\n    return list(filter(lambda x:len(x) == 4, input))", "def friend(x):\n    list = []\n    for i in x:\n        if len(i) == 4:\n            list.append(i)\n        else:\n            pass\n    return list\n    #Code\n", "def friend(people):\n    return [person for person in people if len(person)==4]", "def friend(names):\n    return [x for x in names if len(x) == 4]", "def friend(x):\n    return list(filter(lambda a: len(a) == 4, x))", "def friend(friends):\n    return [friend for friend in friends if len(friend) == 4]", "def friend(x):\n    y = []\n    for i in x:\n        if len(i) == 4:\n            y.append(i)\n        else:\n            pass \n    return y", "def friend(x):\n    friends = []\n    for name in x:\n        if len(name) == 4:\n            friends.append(name)\n            \n    return friends\n            \n", "def friend(x):\n    return [word for word in x if len(word) == 4]", "def friend(names):\n    return [n for n in names if len(n) == 4]", "def friend(x):\n    z=0\n    friends = []\n    while z < len(x):\n        if len(x[z]) == 4: friends.append(x[z])\n        z+=1\n    return friends", "def friend(arr):\n    raturn = []\n    for x in arr:\n        if len(x) == 4:\n            raturn.append(x)\n        else:\n            pass\n    return raturn\n", "def friend(x):\n   friendly = lambda y: len(y)==4\n   return list(filter(friendly,x))", "def friend(x):\n    return [x for x in x if x == x[:4] and x[3:]]", "def friend(x):\n    return list(filter(lambda name: len(name) is 4, x)) #convert to list for python 3", "def friend(x):\n    return list(filter(lambda x: len(x) == 4, x))", "def friend(x):\n    return list(filter(lambda i: len(i)==4, x))", "def friend(x):\n    friendList = []\n    for index, name in enumerate(x):\n        if len(name) == 4:\n            friendList.append(name)\n        else:\n            pass\n    return friendList\n            \n    #Code\n", "from typing import List\n\ndef friend(array: List[str]) -> List[str]:\n    \"\"\"\n    Filter a list of strings and return a list with only your friends name in it.\n    Rule: If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours!\n    \"\"\"\n    return list(filter(lambda name: len(name) == 4, array))", "def friend(x):\n    return [x for x in x if x is x and all([not not x, x[0:4][::-1] == x[-1:-5:-1], len(x) == 65536 ** 0.125])]", "friend = lambda x: [s for s in x if len(s) == 4]", "def friend(x):\n    return [name for name in x if len(name) == 4]", "def friend(x):\n    enemy = []\n    [enemy.append(y) for y in x if len(y) != 4]\n    [x.remove(z) for z in enemy]\n    return x", "def friend(x):\n   friends = []\n   for i in x:\n       count = len(i)\n       if count == 4 and not i.isnumeric():\n          friends.append(i)\n       else:\n          pass\n\n   return friends", "def friend(people):\n    flag = False\n    while flag != True:\n        flag = True\n        for x in people:\n            if len(x) != 4:\n                people.remove(x)\n                flag = False\n    return people", "import re\ndef friend(x):\n    result = []\n    for n in x:\n        if re.match(r'\\A....\\Z',n):\n            result.append(n)\n    return result", "def friend(x):\n    friends = []\n    for i in range(0, len(x)):\n        currentFriend = x[i]\n        if len(currentFriend) == 4:\n            friends.append(currentFriend)\n    return friends", "def friend(x):\n    nl = []\n    for f in range(len(x)):\n        if len(x[f]) == 4:\n            nl.append(x[f])\n    return nl", "def friend(x):\n    #Code\n    resultList = []\n    for friend in x:\n        if len(friend)==4 : resultList.append(friend)\n    \n    return resultList\n    \n", "def friend(x):\n    flist = []\n    for name in x:\n        if len(name) == 4:\n            flist.append(name)\n    return flist\n    \n", "def friend(x):\n    #Code\n    friend_l=list()\n    for name in x:\n        if len(name) == 4:\n            friend_l.append(name)\n    return friend_l"]