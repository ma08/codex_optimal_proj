["def black_and_white(height, width, compressed):\n    res, left, i, color = [], 0, 0, 0\n    for h in range(height):\n        tot, tmp = 0, []\n        if color == 1: tmp.append(0)\n        while tot < width and i < len(compressed):\n            if left:\n                if left <= width:\n                    tmp.append(left)\n                    tot, left, color = left, 0, 1-color\n                else:\n                    tmp.append(width)\n                    tot, left = width, left-width\n            else:\n                i, val = i+1, compressed[i]\n                if tot + val <= width:\n                    tmp.append(val)\n                    tot, color = tot+val, 1-color\n                else:\n                    tmp.append(width-tot)\n                    tot, left = width, tot+val-width\n        if len(tmp)%2: tmp.append(left if h == height-1 else 0)\n        res.append(tmp)\n    return res", "def black_and_white(h,w,c):\n    li = [[]]\n    i = j = current = 0\n    while i < len(c):\n        current += c[i]\n        if current > w:\n            temp = current - w\n            if c[i] - temp != 0 : li[j].append([['b', 'w'][i & 1], c[i] - temp])\n            c[i] = temp ; j += 1\n            li.append([]) ; current = 0\n            continue\n        li[j].append([['b', 'w'][i & 1], c[i]]) ; i += 1\n        \n    for i in range(len(li)):\n        if li[i][0][0] != 'b' : li[i].insert(0, ['b', 0])\n        if li[i][-1][0] != 'w' : li[i].append(['w', 0])    \n    return [[j[1] for j in i] for i in li]", "def black_and_white(h, w, compressed):\n    s = ''.join('BW'[i % 2]*b for i, b in enumerate(compressed))\n    r = [s[i:i+w].replace('WB', 'W B').replace('BW', 'B W') for i in range(0, h*w, w)]\n    r = [([0] if row[0] == 'W' else []) + [len(w) for w in row.split()] for row in r]        \n    return  [e + ([0] if len(e) % 2 else []) for e in r]", "def black_and_white(height, width, compressed):\n    r=[]\n    row=[]\n    for i,x in enumerate(compressed):\n        color=i%2\n        if not row and color:\n            row.append(0)\n        remain=width-sum(row)\n        if x>remain:\n            row.append(remain)\n            if len(row)%2==1:\n                if row[-1]==0:\n                    row.pop()\n                else:\n                    row.append(0)\n            r.append(row)\n            x=x-remain\n            while(x>=width):\n                if color:\n                    r.append([0,width])\n                else:\n                    r.append([width,0])\n                x-=width\n            if color:\n                row=[0,x]\n            else:\n                row=[x]\n        else:\n            row.append(x)\n    if row:\n        if len(row)%2==1:\n            if row[-1]==0:\n                row.pop()\n            else:\n                row.append(0)\n        r.append(row)\n    if r[-1]==[0,0]:\n        r.pop()\n    return r", "def black_and_white(height, width, compressed):\n    result = [list() for _ in range(height)]\n    line_idx = 0\n    for i,c in enumerate(compressed):\n        black = (i%2==0)\n        while c:\n            if sum(result[line_idx])==width:\n                if len(result[line_idx])%2!=0:\n                    result[line_idx].append(0)\n                line_idx += 1\n            if len(result[line_idx])==0 and not black:\n                result[line_idx].append(0)\n            m = min(c, width - sum(result[line_idx]))\n            result[line_idx].append(m)\n            c -= m\n    if len(result[line_idx])%2!=0:\n        result[line_idx].append(0)    \n    return result\n", "from itertools import takewhile\nfrom typing import List\n\n\ndef black_and_white(height: int, width: int, compressed: List[int]) -> List[List[int]]:\n    def tracker():\n        is_black = False\n        line = 0\n        for i in compressed:\n            is_black = not is_black\n            if line + i < width:\n                yield i\n                line += i\n            else:\n                yield width - line\n                if is_black:\n                    yield 0\n                yield -1\n                i -= width - line\n                line = 0\n                while i > width:\n                    if is_black:\n                        yield width\n                        yield 0\n                    else:\n                        yield 0\n                        yield width\n                    yield -1\n                    i -= width\n                if i == 0 and is_black:\n                    yield 0\n                if i > 0:\n                    if is_black:\n                        yield i\n                    else:\n                        yield 0\n                        yield i\n                    line += i\n\n    it = iter(tracker())\n    return [[i for i in takewhile(lambda i: i >= 0, it)] for h in range(height)]\n\n", "from re import findall\n\ndef black_and_white(height, width, compressed):\n    \n    compr = ''.join(('0' if i % 2 else '1') * v for i, v in enumerate(compressed))\n    \n    res = []\n    \n    for i in range(0, len(compr), width): \n        row, temp, black = compr[i: i + width], [], True\n        \n        m = [(c, len(g)) for g, c in findall(r'((.)\\2*)', row)]\n        for dig, n in m:\n            if black and dig == '0':\n                temp.extend([0, n])\n                black == False\n            elif not black and dig == '1':\n                temp.extend([n, 0])\n                black = True\n            else: \n                temp.append(n)\n                black = not black\n        \n        if len(temp) % 2: temp.append(0)\n        res.append(temp)\n    \n    return res", "def black_and_white(height, width, compressed):\n    img = []\n    line = []\n    for i in range(len(compressed)):\n        while compressed[i] >= 0:\n            if(compressed[i] > line_empty_size(line, width)):\n                compressed[i] -= line_empty_size(line, width)\n                line.append(line_empty_size(line, width))\n            else:\n                line.append(compressed[i])\n                compressed[i] = -1\n            if(line_empty_size(line, width) == 0):\n                if(len(line) % 2 == 0):\n                    img.append(line)\n                    line = []\n                    if(compressed[i] > 0):\n                        line.append(0)\n                else:\n                    line.append(0)\n                    img.append(line)\n                    line = []\n                    if(compressed[i] <= 0):\n                        line.append(0)\n    if(len(img[height-1]) % 2 != 0):\n        img[height-1].append(0)\n    return img\n\ndef line_empty_size(line, width):\n    size = width\n    for i in range(len(line)):\n        size -= line[i]\n    return size", "import _thread\nimport time\n\ndef black_and_white(height, width, compressed):\n    actual=width\n    resu=[]\n    lev=[]\n    isblack=True\n    for x in compressed:\n#         if lev == [] and x%2==0:\n#             lev.append(0)\n        while x >= actual:\n            x-=actual\n            lev.append(actual)\n            if not len(lev) % 2 == 0:\n                lev.append(0)\n            actual=width\n            resu.append(lev)\n            lev=[]\n            if not isblack:\n                lev.append(0)\n        if x < actual:\n            actual-=x\n            lev.append(x)\n            isblack=not isblack\n#     print('=============RESULT================')\n    return(resu)\n", "def black_and_white(height, width, compressed):\n    answer = []\n    row, wFilled = [], 0\n    for i, pixels in enumerate(compressed):\n        wSum = wFilled + pixels\n        if wSum < width:\n            row.append(pixels)\n            wFilled = wSum\n        else:\n            colour = i % 2\n            fitting = width - wFilled\n            row.append(fitting)\n            pixels -= fitting\n            if colour == 0:\n                row.append(0)\n            answer.append(row)\n            while True:\n                if pixels >= width:\n                    answer.append([width, 0] if colour == 0 else [0, width])\n                    pixels -= width\n                else:\n                    wFilled = pixels\n                    if colour == 0:\n                        row = [pixels]\n                    elif pixels > 0:\n                        row = [0, pixels]\n                    else:\n                        row = []\n                    break\n    return answer"]