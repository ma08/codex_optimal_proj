["def pattern(n):\n    return \"\\n\".join([x * str(x) for x in range(1, n + 1)])", "def pattern(n):\n    result = ''\n    for i in range(1, n + 1):\n        result += str(i) * i + '\\n'\n    return result[:-1]", "def pattern(n):\n    return '\\n'.join(str(i)*i for i in range(1, n + 1))", "pattern=lambda n: \"\\n\".join([str(x)*x for x in range(1,n+1)])", "def pattern(n):\n    result = ''\n    for i in range(1, n + 1):\n        result += str(i) * i + \"\\n\"\n    return result.strip()", "def pattern(n):\n    if n < 1:\n        return ''\n    elif n == 1:\n        return str(1)\n    else:\n        return pattern(n-1) + '\\n' + str(n) * n", "pattern = lambda n: '\\n'.join((str(x) * x for x in range(1, n + 1)))", "def pattern(n):\n    L=[]\n    for i in range(1,n+1):\n        L.append(str(i)*i)\n    return \"\\n\".join(L)", "def pattern(n):\n    return \"\".join(list([str(x)*x+\"\\n\" if n > x else str(x)*x for x in range(1,n+1)]))\n", "def pattern(n):\n    if n>0:\n        m=\"1\"\n        for i in range(1,n):\n            h=\"\"\n            for j in range(i+1):\n                h+=str(i+1)\n            m+=\"\\n\"+h\n        return m\n    else:\n        return \"\"\n", "def pattern(n):\n    pat = \"\"\n    for i in range(1,n):\n        pat +=str(i)*i+\"\\n\"\n    pat+= str(n)*n\n    return pat\n", "def pattern(n):\n    # Returning nothing\n    if n < 1:\n        return \"\"\n    else:\n        # Constructing string\n        string = \"\"\n        for i in range(1, n):\n            string += str(i) * i + \"\\n\"\n        # Since there's no \\n at the end of the string,\n        # We add the last list of number separately\n        string += str(n) * n\n        return string", "def pattern(n):\n    if n < 1: return ''\n    p = []\n    for x in range(1, n+1): p.append(str(x)*x)\n    return '\\n'.join((str(i) for i in p))", "def pattern(n):\n    return '\\n'.join([str(i)*i for i in range(1, n+1)]) if n>0 else \"\"", "def pattern(n):\n    return '\\n'.join([str(cw)*cw for cw in range(1, n+1)])", "def pattern(n):\n  return \"\\n\".join([\"\".join([str(x) for y in range(x)]) for x in range(1, n + 1)])", "def pattern(n):\n    # Happy Coding ^_^\n    return '\\n'.join([str(i) * i for i in range(1, n+1) ])", "def pattern(n):\n    s = ''; \n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            s = s + str(i)\n        if i < n:\n            s = s + \"\\n\"\n    return s", "def pattern(n) :\n    x = 1\n    L =[]\n    while x <= n :\n        result = (x)*str(x)\n        x=x+1\n        L.append(result)\n    if n<1 :\n        pat = ''\n    else :\n        pat = '\\n'.join(L)           \n    return pat\n", "def pattern(n):\n    # Happy Coding ^_^\n    message_to_return = []\n    if n>=1:\n        for i in range(1,n+1):\n            message_to_return.append( \"\".join([str(i)] * i))\n            \n    return \"\\n\".join(message_to_return)\n    \n", "def pattern(n):\n    return \"\\n\".join([(i+1)*(str(i+1)) for i in range(n)])", "def pattern(n):\n    return '\\n'.join([str(e)*e for e in range(1,n+1)])", "def pattern(n):\n    return ''.join([str(x)*x+'\\n' for x in range(1,n+1)])[:-1]", "def pattern(n):\n    return \"\\n\".join(str(i)*i for i in range(1,n+1)) if n>0 else \"\"", "def pattern(n):\n    # Happy Coding ^_^\n    \n    inList = list( [str(x) * x for x in [x for x in range(1, n+1)]] )\n    \n    \n    return \"\\n\".join(inList)\n", "# if n = 3\n#output 1\n#       22\n#       33\n# if element in n is greater tha 1 then\n#we loop through n and add 1 to n\n# return the result in a new line\ndef pattern(n):\n    return '\\n'.join(str(x)*x for x in range(1, n + 1))", "def pattern(n):\n    return '\\n'.join(str(i) * i for i in range(1, n + 1)) if n else ''", "def pattern(n):\n    return '\\n'.join(str(num) * num for num in range(1, n + 1))", "def pattern(n):\n    return \"\".join(['{}{}'.format(str(i)*int(i),'\\n') for i in range(1,n+1)])[:-1]", "def pattern(n):\n    return '\\n'.join(i * str(i) for i in range(n+1)).lstrip()", "def pattern(n):\n    return '\\n'.join(str(n) * n for n in range(1, n + 1)) if n > 0 else ''\n", "pattern = lambda n: '\\n'.join(str(a) * a for a in range(1, n + 1))\n", "def pattern(n):\n    return '\\n'.join(i * str(i) for i in range(1, n+1))", "def pattern(n):\n    x=1\n    new=\"\"\n    while x<n+1 and n>0:\n        new+=str(x)*x+'\\n'\n        x+=1\n    return new[0:len(new)-1]", "def pattern(n):\n    return '\\n'.join(f'{str (i) * i}' for i in range(1, n+1) if n >= 1)", "def pattern(n):\n    return f'\\n'.join([f'{str (i) * i}' for i in range(1, n+1) if n >= 1])", "def pattern(n):\n    empty_s = ''\n    if isinstance(n, str):\n        return '1'\n    else:\n        if n >= 1:\n            for i in range(1, n + 1):\n                empty_s += f'{str ( i ) * i}\\n'\n            return empty_s[:-1]\n        else:\n            return \"\"", "def pattern(n):\n    if(n < 1):\n        return \"\"\n    else:\n        s = \"\"\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                s += str(i)\n            if(i != n):\n                s += \"\\n\"\n        return s", "def pattern(n):\n    numbers = [(i*str(i)) for i in range(1, n+1)]\n    return('\\n'.join(numbers))", "def pattern(n):\n    return '\\n'.join([str(r)*r for r in range(1, n + 1)])", "def pattern(n):\n    res = [str(i)*i for i in range(1, n+1)]\n    return \"\\n\".join(res)\n", "def pattern(n):\n    return '\\n'.join(str(loop) * loop for loop in range(1, n + 1))", "def pattern(n):\n    return \"\".join([str(x)*x+\"\\n\" if x<n else str(x)*x for x in range(1,n+1)])", "def pattern(n):\n    if n<=0:\n        return \"\"\n    ans=\"1\"\n    for i in range(1,n):\n        ans=ans+  \"\\n\"+str(i+1)*(i+1)\n    return ans", "def pattern(n):\n    # Happy Coding ^_^\n    gtext=\"\"\n    for i in range(1,n+1):\n        s=\"\"\n        for j in range(1,i+1):\n            s+=\"\"+str(i)\n        \n        gtext+=s\n        if(not i==n):\n            gtext+=\"\\n\"\n        \n    return gtext;", "def pattern(n):\n    s=\"\"\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            s+=str(i)\n        s+=\"\\n\"\n    return s[:-1]\n", "def pattern(n):\n    p = []\n    for i in range(1,n+1):\n        p.append(str(i) * i)\n    return \"\\n\".join(p)", "def pattern(n):\n    return \"\\n\".join([\"\".join([str(num)]*num) for num in range(1, n+1)])", "def pattern(n):\n    imprimir = []\n    for i in range(1,n + 1):\n        patron = (str(i)) *i\n        imprimir.append(patron)\n        '\\n'.join(imprimir)\n    return '\\n'.join(imprimir)", "def pattern(n):\n    result = \"\"\n    if n < 1:\n        return \"\"\n    else:\n        for num in range(1, n+1):\n            row = ''\n            for x in range(0, num):\n                row += str(num)\n            result += row\n            if num < n:\n                result += '\\n'\n            else:\n                pass\n    return result\n", "def pattern(n):\n    d = []\n    for i in range(n):\n        counter = i+ 1\n        d.append (counter * str(counter))\n        \n    return \"\\n\".join(d)", "def pattern(n):\n    if n == 0:\n        return \"\"\n        \n    return \"\\n\".join([str(i)*i for i in range(n+1)][1:])\n", "def pattern(n):\n    if n < 1: return \"\"\n    pattern = \"1\"\n    for i in range(2, n + 1):\n        pattern += \"\\n\" + (str(i) * i)\n    return pattern", "def pattern(n):\n    if n<=0:\n        return \"\"\n    \n    res=\"1\"\n    for i in range(2,n+1):\n        add= \"\\n{}\".format(str(i)*int(i))\n        res+=add\n    return \"1\" if n==1 else res", "def pattern(n):\n    s = \"\"\n    for i in range(1, n+1):\n        s += str(i) * i\n        if i == n: break\n        s += \"\\n\"\n    return s", "def pattern(n):\n    return \"\" if n<1 else \"\\n\".join([str(i)*i for i in range(n+1)])[1:]", "def pattern(n):\n    if n < 0:\n        return \"\"\n    ans = []\n    pattern = []\n    count = n\n    while n > 0:\n        n = str(n)\n        pattern.append(n)\n        if len(pattern) == int(n):\n            ans.insert(0, \"\".join(pattern))\n            n = int(n)\n            n -= 1\n            pattern = []\n        n = int(n)\n    return \"\\n\".join(ans)\n", "def pattern(n):\n    c=str()\n    for i in range(1,n+1):\n        if i == n:\n            c=c+i*str(i)\n        else:\n            c=c+i*str(i)+\"\\n\"\n    return c", "def pattern(n):\n    \n    x = \"\"\n    \n    for i in range(1, n+1):\n        x += str(i) * i + \"\\n\"\n    \n    print (x)\n    return x.strip()", "def pattern(n):\n    pattern = \"\"\n    if n < 1:\n        return pattern\n    for i in range(1, n + 1):\n        pattern += i * str(i)\n        if i < n:\n            pattern += \"\\n\"\n    return pattern", "def pattern(n):\n    string=\"\"\n    if n<1:\n        return string\n    for i in range(1,n+1):\n        string+= str(i)*i+\"\\n\"\n    return string[0:-1]\n", "def pattern(n):\n    print(n)\n    if n <= 0:\n        return ''\n    s = '1'\n    for i in range(2,n+1):\n        s += '\\n' + i*str(i)\n    return s", "def pattern(n):\n    if n <1:\n        return \"\"\n    if n ==1:\n        return \"1\"\n    else:\n        return pattern(n-1)+\"\\n\"+str(n)*n", "def pattern(n):\n    if n == 1: return \"1\"\n    if n < 1: return \"\"\n    res = \"\"\n    for i in range(0, n + 1, 1):\n        res += (str(i) * i) + \"\\n\"\n    return \"\".join(res.strip())", "def pattern(n):\n    if n < 1:\n        return \"\"\n    s = []\n    for i in range(1,n+1):\n        s.append(i*str(i))\n    return '\\n'.join(s)", "def pattern(n):\n    if n<1:\n        return ''\n    return '\\n'.join((elem*str(elem))for elem in range(1,n+1))\n", "def pattern(n):\n    pattern = \"\"\n    if n < 1:\n        return pattern\n    for i in range(1, n):\n        pattern = pattern + str(i) * i + \"\\n\"\n    pattern = pattern + str(n) * n\n    return pattern", "def pattern(n):\n    if n <= 0:\n        return \"\"\n    elif n == 1:\n        return \"1\"\n    else:\n        ls = ['1']\n        for i in range(2,n+1):\n            ls.append(\"\\n\" + f'{i}' * i)\n        return \"\".join(ls)", "def pattern(n):\n    return \"\\n\".join(str(d) * d for d in range(1, n + 1))", "def pattern(n):\n    strx = ''\n    for x in range(1, n+1):\n        strx += str(x)*x + '\\n'\n    return strx[:-1]", "def pattern(n):\n    if n < 1:\n        return ''\n    elif n == 1:\n        return '1'\n    return '\\n'.join([x * f'{x}' for x in range(1, n + 1)])", "def pattern(n):\n    if n < 1:\n        return''\n    else:\n        s = ''\n        for i in range(1,n+1):\n            s+= str(i)*i+'\\n'\n        \n        return s[:len(s)-1]\n            \n", "def pattern(n):\n    return \"\\n\".join(\"\".join(str(i) for _ in range(i)) for i in range(1,n+1))", "def pattern(n):\n    s = \"\"\n    for i in range(1, n+1):\n        s += ''.join([str(i) for _ in range(i)])\n        s += \"\\n\"\n    return s[:-1]", "def pattern(n):\n    l=[]\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            l.append(str(i))\n        l.append('\\n')\n    st= \"\".join(l)\n    return st[:-1]", "def pattern(n):\n    my_list = []\n    if(n<1):\n        return \"\"\n    for i in range(n):\n        if(i+1 > 1):\n            my_list.append('\\n')\n        for j in range(i+1):\n            my_list.append(str(i+1))\n        \n    return ''.join(my_list)\n", "def pattern(n):\n    return '\\n'.join(x*str(x) for x in range(1,n+1)) if n>0 else ''", "def pattern(n):\n    pattern =\"\"\n    for i in range(1,n+1):\n        for x in range(1,i+1):\n            pattern+=str(i)\n        if i+1 != n+1 :pattern+=str(\"\\n\")\n    return pattern", "def pattern(n):\n    emptystring = ''\n    for i in range(1,n+1):\n        if i == n:\n            emptystring = emptystring + '{}'.format(str(i)*i)\n        else:\n            emptystring = emptystring + '{}'.format(str(i)*i) + '\\n'\n    return emptystring", "def pattern(n):\n    pat = \"\"\n    for i in range(1, n+1):\n        pat += i * str(i) + \"\\n\"\n    return pat[:-1]", "def pattern(n):\n    # Happy Coding ^_^\n    output = ''\n    for i in range(1, n + 1):\n        for j in range(i):\n            output += str(i)\n        if i < n:\n            output += '\\n'\n    return output", "def pattern(n):\n    return '\\n'.join([str(i)*i for i in range(n+1)[1:]])", "def pattern(n):\n    solution = \"\"\n    \n    if n < 1:\n        return solution\n    \n    for i in range(1, n + 1):\n        solution += f\"{i}\" * i\n        solution += \"\\n\"\n    return solution[:-1]", "def pattern(n):\n    s = ''\n    for i in range(1 , n + 1) :  s += str(i) * i + '\\n'\n    return s[:len(s) - 1]    \n", "def pattern(n):\n    pattern = list()\n    for i in range(1, n+1):\n        pattern.append(str(i) * i)\n    return '\\n'.join(pattern) if n > 0 else ''\n", "def pattern(n):\n    a = ''\n    for x in range(1,n+1):\n        a = a + str(x) * x + '\\n'\n    return a.rstrip('\\n')", "def pattern(n):\n    val = []\n    result = \"\"\n    if n < 1:\n        return \"\"\n    else:\n        val.append(str(1))\n        print(val)\n        for num in range(2, n + 1):\n            s = str(num) * num\n            val.append(\"\\n\" + s)\n    return result.join(val)", "def pattern(n):\n    s=''\n    if n<1:\n        return s\n    else:\n        for i in range(1,n+1):\n            s+=str(i)*i+'\\n'\n    return s.rstrip()\n", "def pattern(n):\n    if n<1 : return ''\n    s=\"\";\n    d=\"\";\n    for  i in range(1,n+1):\n        s += d +  str (i) *i\n        d = \"\\n\";\n    return s\n", "def pattern(n):\n    if (n < 1):\n        pattern = \"\";\n    else:\n        pattern = \"1\";\n        \n        for i in range(2,n + 1):\n            pattern = pattern + \"\\n\" + (str(i) * i);\n            \n    return pattern;\n", "def pattern(n):\n    string = ''\n    for i in range(1, n+1):\n        for j in range(1,i + 1):\n            string += (str)(i)\n            \n        if(i !=n):\n            string += '\\n'\n    return string", "def pattern(n):\n    st = \"\"\n    for n in range(1,n+1):\n        st+= str(n)*n+\"\\n\"\n    return st[:-1]", "def pattern(n):\n    z = ''\n    for x in range(1, n+1):\n        i = 0\n        while i < x:\n            z = z + str(x)\n            i = i + 1\n        if x != n:\n            z = z + '\\n'\n    return z", "def pattern(n):\n    listNums = []\n    listNums = [(str(num) * num) for num in range(1,n + 1)]\n    return '\\n'.join(listNums) ", "def pattern(n):\n    pattern_string = \"\"\n    \n    for i in range(1, n + 1):\n        for k in range(0, i):\n            pattern_string = pattern_string + str(i)\n        \n        if i != n:\n            pattern_string = pattern_string + '\\n'\n        \n    return pattern_string", "def pattern(n):\n    str2 = \"\"\n    for i in range(1,n+1):\n        str2 += '{}\\n'.format(str(i) * i) \n    str2 = str2[:-1]\n    return str2", "def pattern(n):\n   char = 1\n   nTimes = 1\n   string = \"\"\n   while nTimes <= n:\n        for i in range(0, nTimes):\n            string += str(char)\n            \n        string += \"\\n\"\n        nTimes += 1\n        char += 1\n   return string[0:len(string)-1]", "def pattern(n):\n    return '\\n'.join([str(index + 1) * (index + 1) for index in range(n)])", "def pattern(n):\n    output = \"\"\n    for x in range(1, n + 1):\n        for y in range(1, x + 1):\n            output += str(x)\n        output += \"\\n\"\n    \n    output = output[:len(output) - 1]\n    \n    return output"]