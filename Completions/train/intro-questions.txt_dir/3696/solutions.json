["from itertools import accumulate\ndef add(l):\n    return list(accumulate(l)) if isinstance(l, list) and all(isinstance(x, int) for x in l) \\\n        else 'Invalid input'", "from itertools import accumulate\n\ndef add(lst):\n    return list(accumulate(lst))", "from itertools import accumulate\n\ndef add(a):\n    return isinstance(a, list) and all(isinstance(x, int) for x in a) and [*accumulate(a)] or \"Invalid input\"", "def add(l):\n    return [sum(l[:i+1]) for i in range(0,len(l))] if all(isinstance(x, int) for x in l) and isinstance(l, list) else 'Invalid input'", "def add(l):\n    return [sum(l[:i+1]) for i in range(len(l))]", "add = lambda L: [sum(L[:i]) for i in range(1, len(L)+1)]", "def add(lst):\n    if not isinstance(lst, list):\n        return \"Invalid input\"\n    total, result = 0, []\n    for n in lst:\n        if not isinstance(n, int):\n            return \"Invalid input\"\n        total += n\n        result.append(total)\n    return result", "from itertools import accumulate\ndef add(l):\n    return list(accumulate(l))", "add=lambda l:\"Invalid input\"if any(type(e)!=int for e in l)or type(l)!=list else[sum(l[:i+1])for i in range(len(l))]", "def add(l):\n    try:\n        t = [l[0]]\n        for i,j in enumerate(l[1:]):\n            t.append(t[i]+ j)\n        if sum(l)%1!=0 or sum(t)%1!=0 or type(l)!=list:\n            return 'Invalid input'\n        return t \n    except:\n        return 'Invalid input'"]