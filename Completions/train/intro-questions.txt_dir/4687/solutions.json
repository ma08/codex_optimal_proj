["from collections import defaultdict\n\ndef dec(n):\n    decomp = defaultdict(lambda:0)\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            n /= i\n            decomp[i] += 1\n        i += 1\n    return decomp\n            \n\ndef decomp(n):\n    ans = defaultdict(lambda:0)\n    for i in range(2, n + 1):\n        for key, value in dec(i).items():\n            ans[key] += value\n    return ' * '.join('{}^{}'.format(x, y) if y > 1 else str(x) for x, y in sorted(ans.items()))", "def decomp(chisl):\n    \n    div = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,\n        163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,\n        331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,\n        503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,\n        691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,\n        887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,\n        1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,\n        1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,\n        1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,\n        1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,\n        1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,\n        1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,\n        1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,\n        1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,\n        1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,\n        1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,\n        1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,\n    2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,\n    2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,\n    2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,\n    2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,\n    2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,\n    2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,\n    2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,\n    2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,\n    2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,\n    2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,\n    3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,\n    3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,\n    3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,\n    3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,\n    3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,\n    3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,\n    3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,\n    3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,\n    3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,\n    3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001]\n    exp = [0] * len(div)           \n    otvet = []  \n    chislo = 1\n    for i in range (1, chisl+1): \n        for ii in range(len(div)):\n            while i % div[ii] == 0:\n                i /= div[ii]\n                exp[ii] += 1\n    for ii in range(len(div)):            \n        if exp[ii] > 1:\n            otvet += [str(div[ii]) + '^' + str(exp[ii])]\n        if exp[ii] == 1:\n            otvet += [str(div[ii])]\n    return(' * '.join(otvet))\n    #your code here\n", "def decomp(n):\n    out = []\n    for d in range(2, n+1):\n        if d==2 or (d&1 and d>2 and all(d%i for i in range(3, 1+int(d**0.5), 2))):\n            a, x = 0, n\n            while x >= d:\n                x //= d            \n                a += x\n            out.append((d,a))\n    return ' * '.join([f'{i}^{j}' if j>1 else str(i) for i,j in out])\n", "def decomp(n):\n    f = {}\n    for  i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            while i%j==0:\n                i = i//j\n                if j in f: f[j] += 1\n                else: f[j] = 1\n        if i!=1:\n            if i in f: f[i] += 1\n            else: f[i] = 1\n        \n    return ' * '.join([\"{}^{}\".format(i, f[i]) if f[i]>1 else str(i) for i in sorted(f)])", "from itertools import count\n\ndec = [[],[],[1]]\nprimes = [2]\n\ndef genPrimes():\n    for x in count(3,2):\n        sq = int(x**.5)\n        if all(p>sq or x%p for p in primes):\n            yield x\n    \nprimGen = genPrimes()\n\ndef genPrimesUpTo(n):\n    while primes[-1] < n:\n        primes.append(next(primGen))\n\ndef genPrimeDivs(n):\n    genPrimesUpTo(n)\n    dec.append(dec[-1][:])                                # Duplicate last factorial decomposition\n    for i,p in enumerate(primes):\n        while not n%p:\n            n //= p\n            while i >= len(dec[-1]): dec[-1].append(0) \n            dec[-1][i] += 1\n            if n<2: break\n    \n\ndef decomp(n):\n    while len(dec) <= n:\n        genPrimeDivs(len(dec))\n    return \" * \".join(str(p) if c==1 else \"{}^{}\".format(p,c) for p,c in zip(primes,dec[n]))", "def decomp(n):\n    result = []\n    for i in primes():\n        if i > n:\n            break\n        count = 0\n        for j in range(2, n+1):\n            while j % i == 0:\n                count += 1\n                j = j / i\n        if count > 1:\n            result.append(str(i)+'^'+str(count))\n        else:\n            result.append(str(i))\n    return ' * '.join(result)\n\ndef primes():\n    yield 2\n    it = odd()\n    while True:\n        n = next(it)\n        yield n\n        it = filter(lambda x,n=n: x % n > 0, it)\n        \ndef odd():\n    n = 1\n    while True:\n        n += 2\n        yield n", "# What a f****** mess this was...\n\nimport math\nimport numpy as np\n\ndef decomp(n):   \n\n    def rt(x):             \n        if x % 2 == 0:\n                return [2, int(x/2)]        \n        for i in range(3, math.floor(math.sqrt(x)) + 1, 2):\n                if x % i == 0:\n                    return [i, int(x/i)]        \n        return [x, 1]  \n        \n    leftovers = np.arange(2, n+1, 1)    \n    facs = [0]*(n-1)\n    \n    while leftovers != []:\n        newlefts = []\n        \n        for l in leftovers:\n            [h, k] = rt(l)\n            facs[h-2] += 1\n            \n            if k != 1:\n                newlefts += [k]\n        \n            \n        leftovers = newlefts    \n    \n    string = ''\n    \n    for m in range(2, n+1):\n        if facs[m-2] == 1:\n            if string != '':\n                string += ' * ' + str(m)\n            if string == '':\n                string = str(m)\n        if facs[m-2] > 1:\n            if string != '':\n                string += ' * ' + str(m) + '^' + str(facs[m-2])\n            if string == '':\n                string = str(m) + '^' + str(facs[m-2])\n    \n    \n    \n    return string\n        \n    \n    \n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              \n      \n    \n    \n        \n        \n        \n        \n        \n        \n       \n\n", "def primes(n):\n    primes = [2]\n    for i in range(3,n+1):\n        if all(i%p!= 0 for p in primes) == True:\n            primes.append(i)\n    return(primes)\ndef decomp(n):\n    prim = primes(n)\n    factors = {}\n    for i in range(2, n+1):\n        if i in prim:\n            factors[i] = 1\n        else:\n            for p in prim:\n                while i%p == 0:\n                    factors[p] += 1\n                    i /= p\n                if i == 1:\n                    break\n    res = ''\n    for x, y in factors.items():\n        res += '{0}^{1} * '.format(x,y) if y != 1 else '{0} * '.format(x)\n    return(res[:-3])", "is_prime = lambda n: n == 2 or n % 2 and all(n % d for d in range(3, int(n ** .5) + 1, 2))\norder = lambda n, k: n and n // k + order(n // k, k)\ndecomp = lambda n: ' * '.join(str(p) if n < 2 * p else '%d^%d' % (p, order(n, p)) for p in range(2, n+1) if is_prime(p))", "def decomp(n):\n    primes = (2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989)\n    \n    def proc(c,n):\n        ct = 0\n        q = 1\n        while n >= q*c:\n            q *= c\n            ct += n//q\n        return f'{c}^{ct}' if ct > 1 else str(c)\n    \n    return ' * '.join(proc(c,n) for c in primes if n >= c)", "mults={}\ndef get_primes(n):\n    prims=[True]*(n+1)\n    prims[0]=False\n    prims[1]=False\n    #print(prims)\n    for x in range(2,n-1):\n        #print(prims)\n        if(prims[x]):\n            prims[x+x::x]=[False]*(n//x-1)\n    return [x for x in range(len(prims)) if prims[x]]\n\ndef find_mults(n, p):\n    if (n,p) in mults:\n        return mults[n,p]\n    if(n%p!=0):\n        return 0\n    if(n==p):\n        return 1\n    return 1+find_mults(n/p, p)\n\ndef get_mults(n,p):\n    if (n,p) not in mults:\n        mults[n,p]=find_mults(n,p)\n    return mults[n,p]\n\ndef decomp(m):\n    primes=get_primes(m+1)\n    #print(primes)\n    final_string=[]\n    for p in [x for x in primes if x<=m]: #go through the primes once at a time\n        s=0\n        for n in range(p,m+1,p): #go through all numbers from p to m+1??? \n            \n            s+=get_mults(n,p )\n        if(s>0):\n            if(s==1):\n                final_string.append(str(p))\n            else:\n                final_string.append(str(p)+\"^\"+str(s))\n        #print(s)\n    #print(\" * \".join(final_string))\n    return \" * \".join(final_string)\n    \n"]