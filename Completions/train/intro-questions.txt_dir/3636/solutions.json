["from operator import lt, gt\n\nmemo = {}\nis_bouncy = lambda s: memo[s] if s in memo else memo.setdefault(s, any(map(lt, s[:-1], s[1:])) and any(map(gt, s[:-1], s[1:])))\n\ndef bouncy_ratio(percent):\n    if not 0 < percent < 1: raise Exception(\"Wrong percentage: {}\".format(percent))\n    x, y = 100, 0\n    while y < x*percent:\n        x, y = x+1, y+is_bouncy(str(x+1))\n    return x", "def bouncy_ratio(percent):\n    is_bouncy = lambda n: any(a < b for a, b in zip(n, n[1:])) \\\n                        and any(a > b for a, b in zip(n, n[1:]))\n    n, bouncy = 99, 0\n    while bouncy < percent * n:\n        n += 1\n        bouncy += is_bouncy(str(n))\n    return n", "def bouncy_ratio(percent):\n  if percent <= 0 or percent >= 99: raise\n  bouncy, i = 0, 99\n  while float(bouncy) / i < percent:\n    i += 1\n    bouncy += sum(any(f(a, b) for a, b in zip(str(i), str(i)[1:])) for f in [lambda x, y: x > y, lambda x, y: x < y]) == 2\n  return i", "def bouncy_ratio(target):\n    bouncy = 0.0\n    n = 100\n    \n    while bouncy / n < target:\n        n += 1\n        s = list(str(n))\n        s_ = sorted(s)\n        if s != s_ and s != s_[::-1]:\n            bouncy += 1\n    \n    return n", "def bouncy_ratio(percent):\n    ans = 0\n    for i in range(1, 10**10):\n        s = str(i)\n        res = ''.join(['=' if a == b else '>' if int(a) > int(b) else '<' for a, b in zip(s, s[1:])])\n        ans += ('<' in res) and ('>' in res)\n        if ans / i >= percent:\n            return i", "def bouncy_ratio(percent):\n    b=0\n    n=1\n    while(True):\n        s=list(str(n))\n        if s!=sorted(s) and s!=sorted(s)[::-1]:\n            b+=1\n        if float(b)/n>=percent:\n            break\n        n+=1\n    return n", "memo = {}\n\ndef bouncy_ratio(percent):\n    if not (0 <= percent <= 0.99): raise ValueError\n    b, n = 0.0, 100\n    while b / n < percent: \n        n += 1\n        if is_bouncy(n): b += 1\n    return n\n\ndef is_bouncy(n): \n    if n in memo: return memo[n]\n    s = str(n)\n    memo[n] = list(s) != sorted(s) and list(s) != sorted(s, reverse = True)\n    \n    return memo[n]", "def bouncy_ratio(percent):\n    if percent < 0 or percent > 0.99:\n        raise Error\n    n = 99\n    bouncy = 0.0\n    while True:\n        n += 1\n        ns = str(n)\n        gaps = [int(ns[i]) - int(ns[i - 1]) for i in range(1, len(ns))]\n        if not(all(gap >= 0 for gap in gaps) or all(gap <= 0 for gap in gaps)):\n            bouncy += 1.0\n            if bouncy / n >= percent:\n                return n", "def bouncy_ratio(percent):\n    #if percent < 0.1 or percent > 0.9: raise ValueError()\n    def check(i):\n        d = [int(x) for x in str(i)]\n        up, down = False, False\n        for k in range(1, len(d)):\n            if d[k] > d[k-1]: up = True\n            if d[k] < d[k-1]: down = True\n        return up and down\n    bouncy = 0.0\n    for n in range(100, 100000):\n        if check(n): bouncy += 1\n        if bouncy / n >= percent: return n \n"]