["def convert_to_mixed_numeral(parm):\n    a, b = list(map(int, parm.split('/')))\n    d, r = divmod(abs(a), b)\n    s = (0 < a) - (a < 0)\n    return parm if d == 0 else ('{}' + ' {}/{}' * (r != 0)).format(d * s, r, b)\n", "def convert_to_mixed_numeral(parm):\n    sign, parm = parm[:(\"-\" in parm)], parm[(\"-\" in parm):]\n    numerator, denominator = parm.split(\"/\")\n    integer, numerator = divmod(int(numerator), int(denominator))\n    integer, fraction = f\"{integer or ''}\", f\"{numerator}/{denominator}\" if numerator else \"\"\n    return f\"{sign}{integer}{(integer and fraction) and ' '}{fraction}\"", "def convert_to_mixed_numeral(parm):\n    numerator, denominator = parm.split('/')\n    num, dem = int(numerator), int(denominator)\n    divide, mod = int(num/dem) or '', int(abs(num)%dem) or 0 \n\n    if bool(divide) and bool(mod):\n        return \"%s %s/%s\" % (divide, mod, denominator)\n    else:\n        return \"%s/%s\" % (int(mod) if num > 0 else int(-mod), int(denominator)) if bool(mod) else str(divide)", "def convert_to_mixed_numeral(parm):\n    num, den = map(int, parm.split(\"/\"))\n    sign, num = num < 0,  abs(num)\n    \n    if num < den:\n        return parm\n    \n    whole, num = divmod(num, den)\n    if num == 0:\n        return \"-\"*sign + \"%d\" % whole\n    return \"-\"*sign + \"%d %d/%d\" % (whole, num, den)", "def convert_to_mixed_numeral(frac):\n    numerator, denominator = (int(a) for a in frac.split('/'))\n    quo, rem = divmod(abs(numerator), denominator)\n    signed_quo = -quo if numerator < 0 else quo\n    if quo == 0:    # fraction doesn't require conversion\n        return frac\n    elif rem == 0:  # fraction converted to whole number\n        return '{}'.format(signed_quo)\n    return '{}{}/{}'.format(\n        '{} '.format(signed_quo) if quo > 0 else '', rem, denominator\n    )", "def convert_to_mixed_numeral(parm):\n    p1,p2=map(int,parm.split('/'))\n    if abs(p1)<p2 and p1!=0: return parm\n    i=int(p1/p2)\n    q=p1-i*p2\n    return \"{} {}/{}\".format(i,abs(q),p2) if q!=0 else \"{}\".format(i)", "def convert_to_mixed_numeral(parm):\n    # your code here\n    parts = tuple(map(int, parm.split('/')))\n    a, b = abs(parts[0]), parts[1]\n    if a < b:\n        mixed_numeral = \"{}/{}\".format(a, b)\n    elif a % b:\n        mixed_numeral = \"{} {}/{}\".format(a // b, a % b, b)\n    else:\n        mixed_numeral = str(a // b)\n    if parts[0] < 0:\n        mixed_numeral = \"-{}\".format(mixed_numeral)\n    \n    return mixed_numeral  # mixed_numeral is a string", "def convert_to_mixed_numeral(parm):\n    lis=list(map(int, parm.split('/')))\n    whole = abs(lis[0])//lis[1]\n    mod = abs(lis[0])%lis[1]\n    if lis[0]<0:\n        if mod == 0:\n            return \"-{}\".format(whole)\n        elif whole != 0: return(\"-{0} {1}/{2}\".format(whole, mod, lis[1]))\n        else: return(\"-{0}/{1}\".format(mod,lis[1]))\n    else:\n        if mod == 0: return \"{0}\".format(whole)\n        elif whole != 0: return(\"{0} {1}/{2}\".format(whole, mod, lis[1]))\n        else: return  \"{0}/{1}\".format(mod, lis[1])", "def convert_to_mixed_numeral(parm):\n    n, d = list(map(int, parm.split('/')))\n    sign = '-' if n < 0 else ''\n    m, n = divmod(abs(n), d)\n    return parm if m == 0 else sign + f'{m}' + f' {n}/{d}' * (n != 0)"]