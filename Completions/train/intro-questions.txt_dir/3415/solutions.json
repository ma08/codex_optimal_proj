["def build_palindrome(strng):\n    n = 0\n    while strng[n:] != strng[n:][::-1]: n += 1\n    return strng + strng[:n][::-1]", "def build_palindrome(str):\n    suf = \"\"\n    for c in str:\n        pal = str + suf\n        if pal == pal[::-1]:\n            return pal\n        suf = c + suf", "def build_palindrome(s):\n    return next(f\"{s}{s[:i][::-1]}\" for i in range(len(s)) if s[i:] == s[i:][::-1])\n", "def build_palindrome(s):\n  xs = (s + s[:i][::-1] for i in range(len(s)))\n  return next(x for x in xs if x == x[::-1])", "def build_palindrome(s):\n  for i in range(len(s)):\n      x = s + s[:i][::-1]\n      if x == x[::-1]:\n          return x", "def build_palindrome(s):\n    for i in range(-len(s) - 1, 0):\n        if s.endswith(s[:i:-1]):\n            return s + s[i::-1]", "build_palindrome=lambda s:next(s+s[:i][::-1]for i in range(len(s)+1)if s[i:]==s[i:][::-1])", "def build_palindrome(s):\n    if s == s[::-1]:\n        return s\n    else:\n        for i in range(1,len(s)):\n            if s + s[:i][::-1] == (s + s[:i][::-1])[::-1]:\n                return s + s[:i][::-1]\n        \n", "def build_palindrome(s):\n    i = 1\n    p = s\n    while p != p[::-1]:\n        p = s + s[0:i][::-1]\n        i += 1\n    return p\n", "def build_palindrome(s):\n    p = []\n    for i in range(len(s)):\n        string = s + s[:i][::-1]\n        if string == string[::-1]:\n            p.append(string)\n    return min(p, key=lambda i: len(i))\n"]