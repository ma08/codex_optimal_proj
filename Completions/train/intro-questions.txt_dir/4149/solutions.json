["trans = \"abcdefghijklmnopqrstuvwxyz\" * 2\ntrans += trans.upper() + \"0123456789\" * 2\n\ndef ROT135(input):\n    output = []\n    for c in input:\n        if c.isalpha():\n            c = trans[trans.index(c) + 13]\n        elif c.isdigit():\n            c = trans[trans.index(c) + 5]\n        output.append(c)\n    return \"\".join(output)", "table = str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", \"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm5678901234\")\n\ndef ROT135(input):\n    return input.translate(table)", "from string import ascii_lowercase as low, ascii_uppercase as upp, digits as dig\n\ntrans = str.maketrans(low+upp+dig, low[13:]+low[:13]+upp[13:]+upp[:13]+dig[5:]+dig[:5])\n\ndef ROT135(input):\n    return input.translate(trans)", "from string import digits as d, ascii_lowercase as l, ascii_uppercase as u\n\ntbl = str.maketrans(\n    d             + l               + u,\n    d[5:] + d[:5] + l[13:] + l[:13] + u[13:] + u[:13],\n)\n\ndef ROT135(input):\n    return input.translate(tbl)", "from string import ascii_lowercase as lowers, digits\n\n\nrotlow = f\"{lowers[13:]}{lowers[:13]}\"\nrotdig = f\"{digits[5:]}{digits[:5]}\"\ntable = str.maketrans(\n    f\"{lowers}{lowers.upper()}{digits}\",\n    f\"{rotlow}{rotlow.upper()}{rotdig}\",\n)\n\n\ndef ROT135(input):\n    return input.translate(table)", "def ROT135(message):\n  first  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  trance = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm5678901234'\n  return message.translate(str.maketrans(first, trance))  ", "t = \"abcdefghijklmnopqrstuvwxyz\" * 2\nt += t.upper() + \"0123456789zzz5678901234\"\n\ndef ROT135(input):\n    return \"\".join(t[t.index(c) + 13] if c in t else c for c in input)", "D = {a:b for a, b in zip('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', \n                         'nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM5678901234')}\n\ndef ROT135(s):\n    return ''.join(D.get(c, c) for c in s)"]