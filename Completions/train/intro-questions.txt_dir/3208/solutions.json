["def queue_time(customers, n):\n    l=[0]*n\n    for i in customers:\n        l[l.index(min(l))]+=i\n    return max(l)", "import heapq\n\ndef queue_time(customers, n):\n    heap = [0] * n\n    for time in customers:\n        heapq.heapreplace(heap, heap[0] + time)\n    return max(heap)\n", "def queue_time(customers, n):\n    qn = [0] * n\n    for c in customers:\n        qn = sorted(qn)\n        qn[0] += c\n    return max(qn)", "def queue_time(customers, n):\n    queues = [0] * n\n    for i in customers:\n        queues.sort()\n        queues[0] += i\n    return max(queues)", "class MarketQueue():\n    \n    def __init__(self,customers,n):\n        self.customers = customers\n        self.n=n\n        self.timer = 0\n        self.active_checkouts = []\n        \n    def calculate_total_time(self):\n        while self.customers:\n            self.process_queue()   \n        return self.timer\n\n    def process_queue(self):\n        if len(self.active_checkouts) < self.n:\n            queue_index = self.n - len(self.active_checkouts)\n            self.active_checkouts.extend(self.customers[:queue_index])\n            self.customers[:queue_index] = []\n        while self.active_checkouts and (len(self.active_checkouts) == self.n or not self.customers) :\n            self.timer += 1\n            self.process_active_checkouts()\n    \n    def process_active_checkouts(self):\n        finished_customers = []\n        for index,customer in enumerate(self.active_checkouts):\n            if customer > 1:\n                self.active_checkouts[index] = int(customer-1)\n            else:\n                finished_customers.append(customer)\n        \n        for finished in finished_customers:\n            self.active_checkouts.remove(finished)\n\n# implementing requirements\ndef queue_time(customers,n):\n    return MarketQueue(customers,n).calculate_total_time()", "def queue_time(customers, n):\n    tills = [0] * n\n    for i in customers:\n        indexMin = tills.index(min(tills))\n        tills[indexMin] += i\n    return max(tills)\n", "def queue_time(customers, n):\n    tills = [0 for i in range(n)]\n\n    for time in customers:\n        min_index = tills.index(min(tills))\n        tills[min_index] += time\n\n    return max(tills)", "def queue_time(customers, n):\n    time = 0\n    while len(customers[:])>0:\n      time=time+1\n      customers[:n]=[x-1 for x in customers[:n]]\n      customers=[y for y in customers if y !=0]\n    return time", "def queue_time(cu, n):\n    q=[0]*n\n    for i in cu:\n        s=q.index(min(q))\n        q[s]+=i\n    return max(q)", "def queue_time(customers, n):\n    cajas = [0]*n\n    for i in customers:\n        cajas[0] += i\n        cajas = sorted(cajas)\n        print (cajas)\n    return cajas[-1]"]