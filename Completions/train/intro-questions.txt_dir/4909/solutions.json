["import hashlib\n\nclass Random():\n    HASH_MAX = (1 << 32 * 4) - 1\n\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        x = int(hashlib.md5(str(self.seed).encode()).hexdigest(), 16)\n        self.seed += 1\n        return x / self.HASH_MAX\n    def randint(self, start, end):\n        return start + int(self.random() * (end+1-start))", "del __import__(\"sys\").modules['random']\nimport random as random_\n\n# Yeah, security isn't perfect yet\nclass Random():\n    def __init__(self, seed):\n        self.rand = random_.Random(seed)\n        \n    def __setattr__(self, name, value):\n        if name == \"seed\": self.rand.seed(value)\n        else: super(Random, self).__setattr__(name, value)\n    \n    def random(self):\n        return self.rand.uniform(0, 1)\n        \n    def randint(self, start, end):\n        return self.rand.randint(start, end)", "class Random:\n    \"\"\"A shitty pseudo random number generator.\"\"\"\n    \n    def __init__(self, seed):\n        \"\"\"Initilize with 'seed'.\"\"\"\n        self.seed = seed\n        \n    def random(self):\n        \"\"\"Generate a pseudo random number x (0.0 <= x < 1.0).\"\"\"\n        self.seed = self.seed * 1103515245 + 12345\n        return ((self.seed // 65536) % 32768) / 32768\n          \n    def randint(self, start, end):\n        \"\"\"Generate a pseudo random integer x ('start' <= x <= 'end').\"\"\"\n        return start + int(self.random() * (end - start + 1))", "class Random():\n  def __init__(self, seed):\n    self.seed = (seed if seed else 0x12345678) & 0xffffffff\n  def randint(self, start, end):\n    return int(self.random()*(end - start + 1) + start)\n  def random(self): # xorshift\n    x = self.seed\n    x ^= (x << 13) & 0xffffffff\n    x ^= (x >> 17)\n    x ^= (x <<  5) & 0xffffffff\n    self.seed = x\n    return x/(1 << 32)", "import math\nclass Random():\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        x= math.sin(self.seed) * 10000;\n        self.seed = x\n        return x-math.floor(x)\n    def randint(self, start, end):\n        return math.floor(self.random()*(end-start+1)) + start", "class Random():\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        self.seed = (432544*self.seed+1)%1000000\n        return self.seed/1000000\n    def randint(self, start, end):\n        self.seed = (13*self.seed + 1)%(end-start+1)\n        return self.seed + start", "\nclass Random():\n    def __init__(self, seed):\n        self.seed = seed\n        self.r_it = self.r()\n        \n    def random(self):\n        return next(self.r_it) / 2**32\n    \n    def randint(self, start, end):\n        return int(start + (1 + end - start) * next(self.r_it) / 2**32)\n    \n    def r(self, m=2**32, a=1103515245, c=12345):\n        while True:\n            self.seed = (a * self.seed + c) % m\n            yield self.seed\n", "from datetime import datetime\nclass Random():\n    def __init__(self, seed):\n        self.seed=seed\n        self.x=self.next_x(self.seed)\n    \n    @property\n    def seed(self):\n        return self.__seed\n\n    @seed.setter\n    def seed(self,seed):\n        self.x=self.next_x(seed)\n        self.__seed=seed\n    \n    def next_x(self,x):\n        x=x^(x<<13&0xFFFFFFFF)\n        x=x^(x>>17&0xFFFFFFFF)\n        x=x^(x<<15&0xFFFFFFFF)\n        return x&0xFFFFFFFF\n    \n    def random(self):\n        x=self.x\n        self.x=self.next_x(x)\n        return x/(2**32)\n        \n    def randint(self, start, end):\n        x=self.x\n        self.x=self.next_x(x)\n        return (end-start)*x//(2**32)+start", "class Random():\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        import math\n        x= math.sin(self.seed) * 10000;\n        self.seed = x\n        return x-math.floor(x)\n    def randint(self, start, end):\n        import math\n        return math.floor(self.random()*(end-start+1)) + start", "class Random():\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        self.seed = (4123*self.seed+4321)%4096 #whatever\n        return self.seed/4096\n    def randint(self, start, end):\n        return int(start + (end-start)*self.random())"]