["def most_money(students):\n    total = []\n    for student in students:\n        total.append((student.fives * 5) + (student.tens * 10) + (student.twenties * 20))\n    \n    if min(total) == max(total) and len(students) > 1:\n        return \"all\"\n    else:\n        return students[total.index(max(total))].name", "money = lambda student: 5*student.fives + 10*student.tens + 20*student.twenties\n\ndef most_money(students):\n    if len(students) == 1: return students[0].name\n    D = {money(student):student.name for student in students}\n    return \"all\" if len(D) == 1 else D[max(D)]", "def most_money(students):\n    BillGatesKid = students[0]\n    NumOfStudents = len(students)\n    if NumOfStudents == 1:\n        return BillGatesKid.name\n    for s in students:\n        if s.fives * 5 + s.tens * 10 + s.twenties * 20 > BillGatesKid.fives * 5 + BillGatesKid.tens * 10 + BillGatesKid.twenties * 20:\n            BillGatesKid = s\n        elif s.fives * 5 + s.tens * 10 + s.twenties * 20 == BillGatesKid.fives * 5 + BillGatesKid.tens * 10 + BillGatesKid.twenties * 20:\n                NumOfStudents -= 1\n                if NumOfStudents == 0:\n                    return \"all\"\n    return BillGatesKid.name", "def most_money(s):\n    d = {i.name:i.fives*5+i.tens*10+i.twenties*20 for i in s}\n    return max(d,key=lambda x:d[x]) if len(set(d.values()))!=1 or len(d)==1 else 'all'", "class Student:\n    def __init__(self, name, fives, tens, twenties):\n        self.name = name\n        self.fives = fives\n        self.tens = tens\n        self.twenties = twenties\n\n\nphil = Student(\"Phil\", 2, 2, 1)\ncam = Student(\"Cameron\", 2, 2, 0)\ngeoff = Student(\"Geoff\", 0, 3, 0)\n\n\ndef most_money(students):\n    hajs = [stud.fives * 5 + stud.tens * 10 + stud.twenties * 20 for stud in students]\n    return students[hajs.index(max(hajs))].name if hajs.count(max(hajs)) == 1 else \"all\"", "def cashmuny(student):\n    return student.fives * 5 + student.tens * 10 + student.twenties * 20\ndef most_money(students):\n    timdeo = students[0]\n    all = False\n    if len(students) == 1:\n        return timdeo.name   \n    for s in students[1:]:\n        if cashmuny(s) > cashmuny(timdeo):\n            timdeo = s\n            all = False\n        elif cashmuny(s) == cashmuny(timdeo):\n            all = True\n    if all == False:\n        return timdeo.name\n    if all == True:\n        return \"all\"", "class Wallet(Student):\n    def __init__(self, sn):\n        super().__init__(sn.name, sn.fives, sn.tens, sn.twenties)\n    def get_money_sum(self):\n        return sum([self.fives*5, self.tens*10, self.twenties*20])\n\nclass Money():\n    def __init__(self, students):\n        self.sns = students\n        self.wallets = [Wallet(sn) for sn in students]\n    def sort(self):\n       return sorted(((wlt.name, wlt.get_money_sum()) for wlt in self.wallets), key=lambda tup:-tup[1])\n        \ndef most_money(students):\n    allmoney = Money(students).sort()\n    return allmoney[0][0] if allmoney[-1][1] != allmoney[0][1] or len(allmoney)<2 else 'all'\n", "def most_money(students):\n    money = lambda s: s.fives * 5 + s.tens * 10 + s.twenties * 20\n    students = sorted(students, key=money, reverse=True)\n    if len(students) != 1 and money(students[0]) == money(students[1]):\n        return \"all\"\n    return students[0].name", "def most_money(students):\n    allsame = True\n    max = 0\n    for s in students:\n        smoney = s.fives*5 + s.tens*10 + s.twenties*20\n        if max == 0:\n            richest, max = s.name, smoney\n        elif smoney != max:\n            allsame = False\n            \n        if smoney > max:\n            richest, max = s.name, smoney\n            \n    return \"all\" if allsame and len(students)>1 else richest", "def most_money(students):\n    amounts = {s.name: 5*s.fives + 10*s.tens + 20*s.twenties for s in students}\n    return \"all\" if 1 == len(set(amounts.values())) < len(amounts) else max(amounts, key=amounts.get)"]