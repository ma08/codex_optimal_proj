["def switch_lights(initial_states):\n    states = list(initial_states)\n    parity = 0\n    for i in reversed(range(len(states))):\n        parity ^= initial_states[i]\n        states[i] ^= parity\n    return states", "def switch_lights(a):\n    n = sum(a)\n    for i, x in enumerate(a):\n        if n % 2:\n            a[i] ^= 1\n        n -= x\n    return a", "def switch_lights(a):\n    s = sum(a)\n    result = []\n    for i in range(len(a)-1):\n        s -= a[i]\n        result.append(s%2)\n    return result + [0]", "from itertools import accumulate, chain\nfrom operator import xor\n\ndef switch_lights(a):\n    return list(accumulate(chain([0], reversed(a)), xor))[-2::-1]", "def switch_lights(a):\n  #a=[aa[i] for i in range(len(aa))]\n  i=len(a)-1\n  s=0\n  while i>=0:\n    if(a[i]): s+=1\n    if(s): a[i]=(a[i]+s)%2\n    i-=1\n  return a", "def switch_lights(a):\n    i, l = sum(a) % 2, []\n    for n in a:\n        i ^= n\n        l.append(i)\n    return l", "def switch_lights(a):\n    ones = a.count(1)\n    for i,x in enumerate(a):\n        if ones%2: a[i] = 0 if x else 1\n        ones-=x\n\n    return a", "def switch_lights(a):\n    S = sum(a) % 2\n    for i in range(len(a)):\n        a[i], S = [a[i], 1-a[i]][S == 1], [S, 1-S][a[i] == 1]\n    return a", "def switch_lights(a):\n    s = sum(a)\n    for i in range(len(a)):\n        if s%2:\n            s -= a[i]\n            a[i] = 1-a[i]\n        else:\n            s -= a[i]\n    return a", "def switch_lights(a):\n    z = a[::-1]\n    status = 0\n    for i in range(len(z)):\n        status = status + z[i]\n        if status % 2 == 1:\n            if z[i] == 1:\n                z[i] = 0\n            elif z[i] == 0:\n                z[i] = 1\n    return z[::-1]\n"]