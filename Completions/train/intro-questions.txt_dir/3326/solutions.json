["def reverse_in_parentheses(s):\n    stack = []\n    for i in s:\n        stack.append(i)\n        \n        if i == ')':\n            opening = len(stack) - stack[::-1].index('(') - 1\n            stack.append(''.join([i[::-1].translate(str.maketrans('()',')(')) for i in stack[opening:][::-1]]))  \n            del stack[opening:-1]\n  \n    return ''.join(stack)  ", "def reverse_in_parentheses(string):\n    a = 0\n    for n in range(string.count(\"(\")):\n        a, b = string.find(\"(\", a), 0\n        for i in range(a, len(string)):\n            if string[i] == \"(\": b += 1\n            elif string[i] == \")\": b -= 1\n            \n            if b == 0: break\n        a += 1\n        string = string[:a] + string[a:i][::-1].translate(str.maketrans(\")(\", \"()\")) + string[i:]\n    return string", "def reverse_in_parentheses(s):\n\n    def find_pairs(s):\n        stack, pairs = [], {}\n        for i, c in enumerate(s):\n            if c == '(': stack.append(i)\n            if c == ')':\n                opening = stack.pop()\n                pairs[opening] = i\n                pairs[i] = opening\n        return pairs\n\n    def walk(start, end, direction):\n        while start != end:\n            if s[start] not in '()':\n                yield s[start]\n            else:\n                yield '('\n                yield from walk(pairs[start]-direction, start, -direction)\n                yield ')'\n                start = pairs[start]\n            start += direction\n    \n    pairs = find_pairs(s)\n    return ''.join(walk(0, len(s), 1))", "import itertools\n\ndef reverse_in_parentheses(string):\n    stream = iter(string)\n    return _recurse(stream)\n\ndef safe_rev(s):\n    return s[::-1].translate(str.maketrans('()', ')('))\n\ndef _recurse(stream):\n    ret = ''\n    for c in stream:\n        if c == '(':\n            ret += c\n            ret += safe_rev(_recurse(stream)) + ')'\n        elif c == ')':\n            break\n        else:\n            ret += c\n    return ret\n", "def reverse_in_parentheses(string):\n    counter = 0\n    res = [\"\"]\n    \n    for i in string:\n        \n        if i == \"(\":\n            res.append(\"\")\n            counter += 1\n            \n        elif i == \")\":\n            counter -= 1\n            \n            if counter % 2 == 0:\n                res[counter] += \"(\" + res.pop() + \")\"\n            else:\n                res[counter] = \"(\" + res.pop() + \")\" + res[counter]            \n        \n        elif counter % 2 == 0:\n            res[counter] += i\n            \n        else:\n            res[counter] = i + res[counter]\n            \n    return res[0]", "def reverse_in_parentheses(string):\n    for i in range(len(string)):\n        if string[i]==\"(\":\n            finder,depth=i,1\n            while depth>int():depth,finder=depth+\")(\".index(string[finder+1])-1+\")(\".index(string[finder+1]) if string[finder+1] in \"()\" else depth,finder+1\n            string=string[:i+1]+\"\".join([\"()\"[\")(\".index(y)] if y in \"()\" else y for y in list(reversed(string[i+1:finder]))])+string[finder:]\n    return string", "def reverse_in_parentheses(string):\n    for i in range(len(string)):\n        if string[i]==\"(\":\n            walker,depth=i,1\n            while depth>int():depth,walker=depth+\")(\".index(string[walker+1])-1+\")(\".index(string[walker+1]) if string[walker+1] in \"()\" else depth,walker+1\n            string=string[:i+1]+\"\".join([\"()\"[\")(\".index(y)] if y in \"()\" else y for y in list(reversed(string[i+1:walker]))])+string[walker:]\n    return string", "def reverse_in_parentheses(string):\n    for i in range(len(string)):\n        if string[i]==\"(\":\n            counter,k=i,1\n            while k>int():k,counter=k+\")(\".index(string[counter+1])-1+\")(\".index(string[counter+1]) if string[counter+1] in \"()\" else k,counter+1\n            string=string[:i+1]+\"\".join([\"()\"[\")(\".index(y)] if y in \"()\" else y for y in list(reversed(string[i+1:counter]))])+string[counter:]\n    return string", "swap_parentheses = str.maketrans('()', ')(')\n\ndef reverse_in_parentheses(s):\n    stack, res = [], list(s)\n    for i, c in enumerate(s):\n        if c == '(': stack.append(i)\n        elif c == ')':\n            j = stack.pop()\n            res[j + 1:i] = ''.join(res[i - 1:j:-1]).translate(swap_parentheses)\n    return ''.join(res)", "def pairs(s):\n    stack, pairs = [], {}\n    for i, c in enumerate(s):\n        if c == '(': stack.append(i)\n        elif c == ')': pairs[stack.pop()] = i\n    return pairs\n\nswap_parentheses = str.maketrans('()', ')(')\n\ndef reverse_in_parentheses(s):\n    res = list(s)\n    for i, j in pairs(s).items():\n        res[i + 1:j] = ''.join(res[j - 1:i:-1]).translate(swap_parentheses)\n    return ''.join(res)"]