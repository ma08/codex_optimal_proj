["def number_format(n):\n    return f'{n:,}'", "def number_format(n):\n    return format(n, ',')", "number_format='{:,}'.format", "def number_format(n):\n    return str('{:,.3f}'.format(n)).rstrip('0').rstrip('.')", "import re\n\ndef number_format(n):\n    return re.sub(r'\\B(?=(\\d{3})+(?!\\d))', r',', str(n))", "number_format=lambda n:''.join(','*(i%3==0)+x for i,x in enumerate(str(n)[::-1]))[::-1].replace('-,','-').strip(',')", "import re\ndef number_format(n):\n    # converts int to str, reverses it for next step\n    n = str(n)[::-1]\n    \n    # split into groups of 3 digits\n    g = re.split(r'(\\d{3})', n)\n    \n    # remove empty string from list\n    g = list(filter(None, g))\n    \n    # special case where \"-\" is only char in a group and messes up with \",\".join()\n    if g[-1] == \"-\":\n        return g[-1] + ','.join(g[:-1])[::-1]\n    return ','.join(g)[::-1]", "def number_format(n):\n    \n    s = f'{n:,}'\n    \n    return s\n\n", "def number_format(n):\n  n = [x for x in str(n)]\n  if n[0] == \"-\":\n    n = n[1:]\n    result = \"-\"\n  else:\n    result = \"\"\n  end = []\n  while len(n) > 3:\n    end.append(\"\".join([\",\"]+n[-3:]))\n    n = n[:-3]\n  end.append(\"\".join(n))\n  for x in end:\n    result += end[-1]\n    end = end[:-1]\n  return result", "def number_format(n):\n    return f'{n:,.3f}'.rstrip('0').rstrip('.')\n    #your code here\n"]