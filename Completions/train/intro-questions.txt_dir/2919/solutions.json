["from itertools import cycle\n\ndef encode(message, key):\n    return [ord(a) - 96 + int(b) for a,b in zip(message,cycle(str(key)))]", "def encode(message, key):\n    # initialize variables\n    output = []\n    i = 0\n    \n    # convert key to a list of integers\n    key = [int(d) for d in str(key)]\n    \n    # encode characters in 'message'\n    for char in message:\n        n = ord(char) + key[i]\n        output.append(n-96)\n        i = (i + 1) % len(key)\n    \n    # return the results\n    return output\n", "def encode(message, key):\n    return [ ord(char) - 96 + int(str(key)[i % len(str(key))]) for i, char in enumerate(message) ]", "import itertools\nimport string\n\ndef encode(message, key):\n    return [string.ascii_lowercase.index(c) + k + 1 for c, k in zip(message, itertools.cycle(int(c) for c in str(key)))]", "from itertools import cycle\n\n\ndef encode(message, key):\n    return [ord(ch) - 96 + int(code) for\n            ch, code in zip(message, cycle(str(key)))]", "encode=lambda s,n:[ord(c)+int(d)-96for c,d in zip(s,str(n)*len(s))]", "from itertools import cycle\n\nabc = 'abcdefghijklmnopqrstuvwxyz'\n\ndef encode(message, key):\n    key = cycle(int(x) for x in str(key))\n    return [abc.index(m)+1+k for m, k in zip(message, key)]", "def encode(message, key):\n    a=[]\n    key=str(key)\n    for i in range(len(message)):\n        print(i)\n        a.append(ord(message[i])-96 + int(key[i%len(key)]))\n    return a", "def encode(message, key):\n    abc_dict = {\n        'a': 1, 'b': 2,  'c': 3, 'd': 4, 'e': 5, 'f': 6,\n        'g': 7, 'h': 8,  'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13,\n        'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,\n        'u': 21, 'v': 22,  'w': 23,  'x': 24,  'y': 25,  'z': 26\n        }\n    num_list = []\n    key_list = str(key)\n    x = 0\n    for i in message:\n        num_list.append(abc_dict[i] + int(key_list[x]))\n        x += 1\n        if x >= len(key_list):\n            x = 0\n            \n    return num_list", "from itertools import cycle\nfrom typing import List\n\n\ndef encode(message: str, key: int) -> List[int]:\n    return [ord(m) - 96 + k for m, k in zip(message, cycle(list(map(int, str(key)))))]\n", "def encode(message, key):\n    base_dict = {}\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(26):\n        base_dict[alpha[i]]  =  i + 1\n\n    key_extended = []\n    count = 0\n    for i in range(len(message)):\n        try :\n            key_extended.append(int(str(key)[count]))\n        except IndexError :\n            count = 0\n            key_extended.append(int(str(key)[count]))\n        count += 1\n\n    encrypt = []\n    for letter in message:\n        encrypt.append(base_dict[letter])\n\n    code = []\n    for i in range(len(encrypt)):\n        code.append(encrypt[i] + key_extended[i])\n\n    return code", "from itertools import cycle\n\ndef encode(message, key):\n    key = cycle(map(int, str(key)))\n    return [ord(c)-96+next(key) for c in message]", "def encode(message, key):\n    return [ord(sym)-96+int(str(key)[i%len(str(key))]) for i, sym in enumerate(message)]", "encode=lambda m,k:[ord(a)-96+int(b)for a,b in zip(m,str(k)*30)]", "def encode(message, key):\n    key_digs = [int(dig) for dig in str(key)]\n    result = [\n        ord(ch) - 96\n        + key_digs[i % len(key_digs)]\n        for i, ch in enumerate(message)\n    ]\n    \n    return result", "import string as st\nletras = st.ascii_lowercase\ndef encode(message, key):    \n    codif_1 = [letras.index(l)+1 for l in message]\n    key_list = [int(l) for l in str(key)]\n    n = int(len(message)/len(key_list))\n    r = len(message)%len(key_list)\n    mascara = key_list * n + key_list[:r+1]\n    return [codif_1[i]+mascara[i] for i in range(len(codif_1))]", "def encode(message, key):\n    key=str(key)\n    return [ord(message[i])-96+int(key[i%len(key)]) for i in range(0, len(message))]", "encode=lambda m,k: (lambda k: [ord(l)-96+int(k[i%len(k)]) for i,l in enumerate(m)])(str(k))", "import string\nimport numpy as np \n\nalpha = list(string.ascii_lowercase)\nvalues = list(range(1,27))\ndictionary = dict(zip(alpha, values))\n\ndef encode(word, old_key):\n    key = [int(x) for x in str(old_key)]\n    letter_values = []\n    for letter in word:\n        letter_values.append(dictionary[letter])\n    count = 0\n    new_list = []\n    while count < len(word):\n        for number in key:\n            if count >= len(word):\n                break\n            else:\n                count += 1\n                new_list.append(number)\n    key_np = np.array(new_list)\n    letter_np = np.array(letter_values)\n    final = (key_np + letter_np).tolist()\n    return final", "def encode(message, key):\n    alphabet_number_pairs = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5,\n        'f': 6,\n        'g': 7,\n        'h': 8,\n        'i': 9,\n        'j': 10,\n        'k': 11,\n        'l': 12,\n        'm': 13,\n        'n': 14,\n        'o': 15,\n        'p': 16,\n        'q': 17,\n        'r': 18,\n        's': 19,\n        't': 20,\n        'u': 21,\n        'v': 22,\n        'w': 23,\n        'x': 24,\n        'y': 25,\n        'z': 26\n        }\n    number_list = []\n    alphabet_list = str(key)\n    a = 0\n    for i in message:\n        number_list.append(alphabet_number_pairs[i] + int(alphabet_list[a]))\n        a += 1\n        if a >= len(alphabet_list):\n            a = 0\n    return number_list", "def encode(message, key):\n    cypher = {chr(ord('a') + i) : i+1 for i in range(26)}\n    return [ cypher[letter] + int(str(key)[i % len(str(key))]) for i, letter in enumerate(message) ]\n     \n", "def encode(message, key):\n    return [ord(s)-96+int(str(key)[i%len(str(key))]) for i,s in enumerate(message)]", "from itertools import cycle\ndef encode(message, key):\n    a = cycle(str(key))\n    return [(ord(x)-96) + int(next(a)) for x in message]\n", "from decimal import Decimal\nfrom itertools import cycle\n\ndef encode(message, key):\n    key_digits = cycle(Decimal(key).as_tuple().digits)\n    return [ord(c.lower()) - ord('a') + next(key_digits) + 1 for c in message]", "from itertools import cycle\n\ndef encode(message, key):\n    c = cycle(str(key))\n    \n    return [ord(i) + int(ord(next(c))) - 144 for i in message]", "def dist_from_prev_a(x):\n    return ord(x)-ord('a')+1\n\ndef encode(message, key):\n    x=[dist_from_prev_a(i) for i in message]\n    y=list(str(key)*len(message))[:len(message)]\n    return [x[i]+int(y[i]) for i in range(len(x))]\n", "def encode(message, key):\n    ret = []\n    d = dict()\n    [d.update({chr(i):i-96}) for i in range(97,123)]\n    for i in range(len(message)):\n        ret.append(d[message[i]]+int(str(key)[i%len(str(key))]))\n    return ret\n", "def encode(message, key):\n    mess = list(map(lambda x: ord(x)-96, message))\n    str_key = [int(i) for i in str(key)]\n    for i in range(0, len(mess)):\n        mess[i] = mess[i] + str_key[i % len(str_key)]\n    \n    return mess", "from itertools import cycle\nalphabet_numbers = {'a': 1, 'b': 2, 'c': 3, 'd': 4,                        \n                    'e': 5, 'f': 6, 'g':7, 'h': 8,\n                    'i': 9, 'j': 10, 'k': 11, 'l': 12,\n                    'm': 13, 'n': 14, 'o': 15, 'p': 16,\n                    'q': 17, 'r': 18, 's': 19, 't': 20,\n                    'u': 21, 'v': 22, 'w': 23, 'x': 24,\n                    'y': 25, 'z': 26\n                    }\ndef encode(message, key):\n    key = str(key)\n    key_cycle = cycle(map(int, key)) \n    lst = []\n    for letter in message:\n        if letter in alphabet_numbers:\n            lst.append(alphabet_numbers.get(letter) + next(key_cycle))\n    return lst", "def encode(message, key):\n    \n    z = [int(i) for i in str(key)]\n    x = 0\n    sol = []\n    \n    for i in message:\n        \n        if x == len(z):\n            x = 0\n        sol.append(ord(i)-96+z[x])\n        x+=1\n    \n    return sol", "def encode(message, key):\n    \n    abc = \"a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\".split(\"  \")\n    cypher = []\n    key = str(key)\n    for i, letter in enumerate(list(message)):\n        letterToDigit = abc.index(letter) + 1        \n        addedKeyIndex = i % len(key)\n        addedKeyValue = key[addedKeyIndex]\n        cypher.append(letterToDigit + int(addedKeyValue))\n    return cypher\n        \n    \n", "def encode(message, key):\n    key = list(str(key))\n    alpha = list(\"0abcdefghijklmnopqrstuvwxyz\")\n    message = list(message)\n    code = [alpha.index((message[i])) for i in range(len(message)) if message[i] in alpha]\n    i = -1\n    for j in range(len(code)):\n        if i == len(key)-1:\n            i = -1\n        i += 1\n        code[j] = code[j]+int(key[i])\n\n    return code\n\n", "def encode(message, key):\n    # Code here\n    al = \"abcdefghijklmnopqrstuvwxyz\"\n    key = str(key)\n    if len(message) > len(key): key = key*int(len(message)/len(key) + 1)\n    out = []\n    for i in list(message): out.append(al.index(i) + 1)\n    for i in range(len(out)): out[i] = out[i] + int(key[i])\n    return out", "def encode(message, key):\n    dicti = {}\n    code = []\n    ans = []\n    letters = list(message)\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    for i in range(len(alphabet)):\n        dict_ = {alphabet[i]: i+1}\n        dicti.update(dict_)\n    for letter in letters:\n        for k, v in dicti.items():\n            if k == letter:\n                code.append(v)\n    key_list = list(str(key))\n    a = len(message) // len(key_list)\n    if len(message) > len(key_list):\n        key_list = key_list * (a + 1)\n    for j in range(len(code)):\n        if j < len(message):\n            new_code = code[j] + int(key_list[j])\n            ans.append(new_code)\n        elif j == len(message):\n            break\n    #print(ans)\n    return ans", "def encode(message, key):\n    key = [int(k) for k in str(key)]\n    l = len(key)\n    return [ord(c) - 96 + key[i % l] for i, c in enumerate(message)]", "def encode(message, key):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = list(alphabet)\n    letters_numbers = {}\n    for i in range(len(alphabet)):\n        dict_ = {alphabet[i]: i+1}\n        letters_numbers.update(dict_)\n    message_numbers = []\n    for j in message:\n        number = letters_numbers[j]\n        message_numbers.append(number)\n    key = str(key)\n    key = list(key)\n    final_message_encoded = []\n    for k in range(len(message)):\n        key.append(key[k])\n    for l in range(len(message_numbers)):\n        message_encoded = message_numbers[l] + int(key[l])\n        final_message_encoded.append(message_encoded)\n    return final_message_encoded\n\n\n", "def encode(word, key):\n    vo = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10,\n    'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,\n    'u': 21, 'v': 22, 'w':23, 'x': 24, 'y': 25, 'z': 26}\n    kk = list(map(int, str(key)))\n    kk = kk * int((len(word) / len(kk) + 1))\n    k = list(word)\n    arr = []\n    for i in k:\n            arr.append(vo.get(i))\n    for j in range(len(arr)):\n            arr[j] += kk[j]\n    return arr", "def encode(s,k):\n    eng = '_abcdefghijklmnopqrstuvwxyz'\n    b = list(map(int, list(str(k))))\n    q, r = divmod(len(s), len(str(k)))\n    return list(map(lambda x, y: x+y, b*q+b[:r], list([eng.index(_) for _ in s])))\n", "def encode(message, key):\n    key=str(key)\n    return [ord(message[i])-96+int(key[i%len(key)]) for i in range(len(message))]", "def encode(message, key):\n    k = [int(x) for x in str(key)]\n    l = len(k)\n\n    return [n+k[i%l] for i,n in enumerate(ord(c)-96 for c in message)]", "def encode(m, key):\n    k = list(map(int, list(str(key))))\n    kL = len(k)\n    m = list(m)\n    for i in range(len(m)):\n        m[i] = ord(m[i]) - 96 + k[i % kL]\n    return m", "def encode(message, key):\n    letters = {chr(97+x):x+1 for x in range(28)}\n    return [letters[l]+int(add) for l,add in zip(message, list(str(key)) * len(message) )]", "from itertools import cycle\ndef encode(message, key):\n    letters = []\n    fullkey = [int(x) for x in str(key)]\n    for character in message:\n        number = ord(character) - 96\n        letters.append(number)\n    outcome = [x+y for x, y in zip(letters, cycle(fullkey),)]\n    return outcome", "def encode(message, key):\n    import string\n    \n    alphabet=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    # \u00e9tape 1 : conversion du message en nombres\n    code=[]\n    for i in range(len(message)):\n        code += [alphabet.index(message[i])+1]\n    # \u00e9tape 2: on ajoute la clef\n    keystr=str(key)\n    for i in range(len(code)):\n        code[i] += int(keystr[i % len(keystr)])\n    \n    return code \n    \n        \n", "def encode(m,k):\n    d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    count = 0\n    l = []\n    p = []\n    n = []\n    st = str(k)\n    lst = list(st)\n    for x in range(len(m)):\n        num = d.get(m[x])\n        l.append(num)\n    \n    while count < len(l):\n    \n        for y in range(len(lst)):\n               if count < len(l):\n                    p.append(int(lst[y]))\n                    count = count + 1\n               else:\n                   break\n                   \n    for z in range(len(l)):\n            calc = l[z] + p[z]\n            n.append(calc)\n    \n    return n\n  \n\n", "encode = lambda m, k :[ord(d)-ord('a')+1 + int(str(k)[i%len(str(k))]) for i, d in enumerate(m)]", "from collections import deque\n\ndef encode(message, key):\n    out = []\n    key = deque(map(int, str(key)))\n    for c in message:\n        out.append(ord(c) - 96 + key[0])\n        key.rotate(-1)\n    return out", "def encode(message: str, key):\n    return [ord(x) - 96 + int((str(key)[i % len(str(key))])) for i, x in enumerate(message.lower())]", "import string\n\nmap = {ch: i + 1 for i, ch in enumerate(string.ascii_lowercase)}\n\ndef encode(message, key):    \n    key = str(key)   \n\n    res = []\n    for i, ch in enumerate(message):\n        res.append(map[ch] + int(key[i % len(key)]))\n        \n    return res\n", "def encode(message, key):\n    num = []\n    key = str(key)\n    length = len(key)\n    for i in range (0,len(message)):\n        num.append(((ord(message[i]) - 96) + (ord(key[i%length]) - 48)))\n    print (num)\n    return num", "def encode(message, key):\n    message = message.lower()\n    key = list(str(key))\n    message = list(message)\n    for i in range(len(message)):\n        message[i] = (ord(message[i]) - 96) + (int(key[i % len(key)]))\n    return message", "def encode(message, key):\n    \n    indexKey = 0 \n    l = [ord(m)- 96 for m in message]\n\n    for i in range(len(message)):       \n        l[i] +=  int ( str(key)[indexKey] )\n        indexKey =  ( indexKey + 1) % len(str(key))\n        \n    return l\n        \n", "def encode(message, key):\n    return [i + int(l) for i, l in zip([' abcdefghijklmnopqrstuvwxyz'.index(i) for i in message], str(key) * (len(message) // len(str(key))) + str(key)[:len(message) % len(str(key))])]", "def encode(message, key):\n    x = [ord(i) - 96 for i in message]\n    x = [x[i] + int(str(key)[i % len(str(key))]) for i in range(len(x))]\n    return x", "def encode(message, key):\n    arr = []\n    for i in range(len(message)):\n        encr = ord(message[i]) - 96\n        if i > len(str(key)) - 1:\n            k = i - len(str(key))*(i // len(str(key)))\n        else:\n            k = i            \n        arr.append(encr + int(str(key)[k]))\n\n    return arr", "def encode(msg, k):\n    return [ord(m)-96+int(str(k)[i%len(str(k))]) for i,m in enumerate(msg)]", "def encode(message, key):\n#    alphabet = {\n#    'a' : 1, 'b' : 2, 'c' : 3, 'd' : 4, 'e' : 5, 'f' : 6, 'g' : 7, 'h' : 8, 'i' : 9,\n#    'j' : 10, 'k' : 11, 'l' : 12, 'm' : 13, 'n' : 14, 'o' : 15, 'p' : 16, 'q' : 17,\n#    'r' : 18, 's' : 19, 't' : 20, 'u' : 21, 'v' : 22, 'w' : 23, 'x' : 24, 'y' : 25,\n#    'z' : 26\n#    }\n    key_tracker = 0\n    ciphertext = []\n    key = [int(k) for k in str(key)]\n    letters = [ord(a)-96 for a in message]\n    for i in range(len(letters)):\n        letters[i] += key[key_tracker]\n        key_tracker += 1\n        if key_tracker == len(key):\n            key_tracker = 0\n    return letters", "from string import ascii_lowercase as alpha\ndef encode(message, key):\n    first = [alpha.index(x)+1 for x in message]\n    n,k = len(message),str(key)\n    return [first[i]+int(k[i%len(k)]) for i in range(n)]", "from itertools import cycle\n\ndef encode(message, key):\n    key = list(map(int, str(key)))\n    return [ord(c) - 96 + k for c, k in zip(message, cycle(key))]", "def encode(message, key):\n    key = list(map(int, str(key)))\n    return [ord(c) - 96 + key[i % len(key)] for i, c in enumerate(message)]", "def encode(message, key):\n    message = [ord(x) - 96 for x in message]\n    key = str(key)\n\n    key_list = list(key)\n    x = list(key)\n    while len(key_list) != len(message):\n        if not x:\n            x = list(key)\n        key_list.append(x.pop(0))\n\n    return [message[i] + int(x) for i, x in enumerate(key_list)]", "from itertools import chain, repeat\n\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n\ndef encode(message, key):\n    message_l = [(alpha.index(c)+1) for c in message]\n    key_l = [i for i in chain.from_iterable(repeat([int(num) for num in str(key)], 100))]\n    return [(message_l[i] + key_l[i]) for i in range(len(message_l))]\n        \n", "def encode(message, key):\n    return [ord(j)-96+int((str(key)*(len(message)//len(str(key))+1))[i]) for i, j in enumerate(message)]", "def encode(message, key):\n    ans = [] ;key = list(str(key)); counter = 0\n    for i in message:\n        if counter == len(key):\n            counter = 0\n        ans.append(ord(i)-96 + int(key[counter]))\n        counter +=1\n    return ans\n", "def encode(message, key):\n    return [ord(message[a]) - 96 + (int(str(key)[a%len(str(key))])) for a in range(len(message))]", "def encode(message, key):\n    key = str(key)\n    output = []\n    for i in range(0, len(message)):\n        output.append( ord(message[i]) - 96 + int(key[i%len(key)]) )\n    return output", "def encode(message, key):\n    #horrible, but today felt like a one-liner kind of day\n    return [ord(c) - 96 + int(str(key)[i%len(str(key))]) for i, c in enumerate(message)]\n", "def encode(message, key):\n    msgnumber = [ord(m) - 96 for m in message]\n    key = (str(key) * int((len(message) / len(str(key)))+1))[:len(message)]\n    key = [int(k) for k in key]\n    return [m + k for m, k in zip(msgnumber, key)]", "def encode(message, key):\n    alpha = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    count = 0\n    value = 0\n    res = []\n    n = len(message)\n    key_index = list(i for i in str(key))\n    m_index = list(j for j in message)\n    m = len(str(key))-1\n    while count < n:\n        res.append(alpha[m_index[count]] + int((key_index[value])))\n        if value == m:\n            value = 0\n        else:\n            value += 1\n        count += 1\n    print(res)\n    return res", "def encode(message, key):\n    return [ord(message[x])-96+int(str(key)[x%len(str(key))]) for x in range(0,len(message))]", "def encode(message, key):\n    alphakey = {\n        'a': 1,'b': 2,'c': 3,'d': 4,'e': 5,\n        'f': 6,'g': 7,'h': 8, 'i': 9,'j': 10,\n        'k': 11,'l': 12,'m': 13,'n': 14,'o': 15,\n        'p': 16,'q': 17,'r': 18,'s': 19,'t': 20,\n        'u': 21,'v': 22,'w': 23,'x': 24,'y': 25,'z': 26\n    }\n    itakey = str(key)\n    n = 0\n    ans = []\n    while n < len(message):\n        ans.append(int(itakey[n%len(itakey)]) + alphakey[message[n]])\n        n += 1\n    return ans\n        \n        \n", "def encode(message, key):\n    pre_output = []\n    for letter in message:\n        pre_output.append(ord(letter)-96)\n    output = []\n    key = str(key)\n    i = 0\n    for number in pre_output:\n        output.append(number+int(key[i]))\n        if i == len(key) - 1:\n            i = 0\n        else:\n            i += 1\n    return output", "def encode(m, k):\n    k = map(int, (str(k)*(len(m)//len(str(k))+1))[:len(m)])\n    return list(map(sum,zip([ord(x)-96 for x in m],k)))", "def encode(message, key):\n    key = list(str(key) * (len(message)//len(str(key))+1)) if len(str(key)) < len(message) else list(str(key))\n    encode_list = []\n    key_index = 0\n    for i in list(message):\n        encode_list.append(ord(i) - 96 + int(key[key_index]))\n        key_index += 1\n    return encode_list", "from itertools import cycle\n\ndef encode(message, key):\n    \n    a = []\n\n    for m,c in zip(message,cycle(str(key))):\n\n        d = ord(m)-96 + int(c)\n\n        a.append(d)\n        \n    return a\n", "def encode(message, key):\n    import string\n    alphabet = enumerate(string.ascii_lowercase, 1)\n\n    dic_letters = {k: v for v, k in alphabet}\n\n    numbers = [dic_letters[letter] for letter in message]\n\n    lst_key = len(message)*[int(x) for x in str(key)]\n\n    lst_zip = list(zip(numbers, lst_key))\n\n    return list(sum(group) for group in lst_zip)", "def encode(message, key):\n    k = [int(x) for x in str(key)]\n    return [ord(message[x])-96+k[x%len(k)] for x in range(len(message))]", "def encode(message, key):\n    a = []\n    j = 0\n    for i in message:\n        a.append(ord(i)-96 + int(str(key)[j]))\n        j += 1\n        if j == len(str(key)):\n            j = 0\n    return a", "def encode(message, key):\n    key_list = list(str(key))\n    encoded_list = []\n    k = 0\n    for letter in message:\n        \n        letter_digit = ord(letter) - 96\n        \n        letter_digit_encoded = letter_digit + int(key_list[k%len(key_list)])\n        \n        encoded_list.append(letter_digit_encoded)\n        \n        k += 1\n        \n    return encoded_list\n        \n", "def encode(message, key):\n    res = []\n    db = {chr(i): i-96 for i in range(97, 123)}\n    zippand1 = [db[i] for i in message]\n    zippand2 = list(map(int, str(key))) * len(str(message))\n    return [i+j for i,j in zip(zippand1, zippand2[:len(message)])]", "def encode(message, key):\n    arr = []\n    for i in range(len(message)):\n        arr.append(ord(message[i]) - 96 + int(str(key)[i % len(str(key))]))\n    return arr\n    \n", "def encode(message, key):\n    coded_message = [ord(char) - 96 for char in message]\n    return [digit + int(str(key)[index % len(str(key))]) for index, digit in enumerate(coded_message)]", "def encode(message, key):\n    val =  [ord(i) - 96 for i in message]\n    check = str(key)\n    index = 0\n    for idx, i in enumerate(val):\n        if idx % len(check) == 0:\n            index = 0\n        val[idx] += int(check[index])\n        index += 1\n\n    return val", "def encode(message, key):\n    L1=\"abcdefghijklmnopqrstuvwxyz\";L2=[];number=0;L3=[]\n    for i in message:\n        L2.append(L1.index(i)+1+int(str(key)[number%len(str(key))]))\n        number+=1\n    return L2 \n    \n    \n", "from itertools import cycle\ndef encode(message, key):\n    return [ord(c)- 96 + int(k) for c,k in zip(message, cycle(str(key)))]", "def encode(message, key):\n  strKey = str(key)\n  return [ord(letter) - 96 + int(strKey[index % len(strKey)]) for index, letter in enumerate(message)]\n    \n    \n    \n", "import string \nfrom itertools import cycle  \n\ndef encode(message, key):\n  alphabet = dict(zip(string.ascii_lowercase, (ord(i) - 96 for i in string.ascii_lowercase)))\n  key = cycle([int(i) for i in str(key)])\n  res = []\n  for i in message:\n    encoding = int(alphabet.get(i)) + next(key)\n    res.append(encoding)\n  return res", "def encode(m, key):\n    array_key = []\n    list_int_str_key = [int(x) for x in str(key)]\n    len_str_key = len(list_int_str_key)\n    ords_list = [ord(x)-96 for x in m]\n    len_ords_list = len(ords_list)\n    i = 0\n    while len(array_key) < len_ords_list:\n        array_key.append(list_int_str_key[i])\n        i += 1\n        if i >= len_str_key: i = 0\n\n    return [a+b for a,b in zip(array_key, ords_list)]", "from string import ascii_lowercase as abc\nfrom itertools import cycle\n\ndef encode(message, key):\n    return [abc.index(m)+k+1 for m, k in zip(message, cycle(map(int, str(key))))]", "from string import ascii_lowercase as abc\nfrom itertools import cycle\n\n\ndef encode(message, key):\n    return [int(x) + abc.index(ch)+1 for x, ch in list(zip(cycle(str(key)), message))]", "from string import ascii_lowercase as abc\nfrom itertools import cycle\n\n\ndef encode(message, key):\n    ch_idx = [abc.index(ch)+1 for ch in message]\n    return [int(x) + y for x, y in list(zip(cycle(str(key)), ch_idx))]", "from itertools import cycle \ndef encode(message, key):\n    # Code here\n    return [a + b for a, b in zip(cycle([int(i) for i in str(key)]), [ord(i)-96 for i in message])]", "def encode(message, key):\n    cypher = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,\n    'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24,\n    'y':25, 'z':26}\n    output = []\n    for i in range(len(message)):\n        code = cypher[message[i]]\n        i = i % len(str(key))\n        code += int(str(key)[i])\n        output.append(code)\n    return output", "def encode(message, key):\n    key = str(key) * len(message)\n    return ['abcdefghijklmnopqrstuvwxyz'.index(m) + int(key[i]) + 1  for i ,m in enumerate(message)]\n        \n", "from itertools import cycle\ndef encode(message, key):\n    return [v+int(v1) for v,v1 in zip([ord(c) - 96 for c in message], cycle(str(key)))]", "def encode(message, key):\n    return [ord(c)-ord('`')+int(str(key)[i % len(str(key))]) for i,c in enumerate(message)]", "def encode(message, key):\n    fuck = [(ord(x) - 96) for x in message]\n    cunt = [int(x) for x in str(key)]\n    for index, cum in enumerate(fuck):\n        fuck[index] += cunt[index % len(str(key))]\n    return fuck", "from string import ascii_lowercase as alpha\ndef encode(message, key):\n    key = (len(message) // len(str(key)) + 1) * str(key)  \n    return [alpha.index(c) + int(k) + 1 for c, k in zip(message, key)]", "from string import ascii_lowercase as letters\n\ndef encode(message, key):\n    return [letters.index(m) + int(k) + 1 for m, k in zip(message, f'{key}' * len(message))]"]