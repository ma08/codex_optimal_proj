["def sel_reverse(arr,l):\n    return [ elt for i in range(0, len(arr), l) for elt in arr[i:i+l][::-1] ] if l != 0 else arr", "from itertools import chain\n\ndef gen(arr, l):\n    for i in range(0, len(arr), l):\n        yield arr[i:i+l][::-1]\n\ndef sel_reverse(arr,l):\n    return list(chain.from_iterable(gen(arr, l or 1)))", "def sel_reverse(arr,l):\n    new_l = []\n    index = max(l, 1)\n    for x in range(0, len(arr)+1, max(index,l)):\n        new_l.extend(arr[x:x+index][::-1])\n    return new_l", "def sel_reverse(lst, k):\n    return sum((lst[i:i+k][::-1] for i in range(0, len(lst), k)), []) if k else lst\n    \n    \n\n# alternative:\n#    return [e for i in range(0, len(lst), k) for e in lst[i:i+k][::-1]] if k else lst\n", "def sel_reverse(arr, l):\n    l = l or 1\n    return [\n        x\n        for i in range(0, len(arr), l)\n        for x in reversed(arr[i:i+l])\n    ]", "def sel_reverse(arr,l):\n    return sum([arr[i:i+l][::-1] for i in range(0,len(arr),l)],[]) if l>0 else arr", "def sel_reverse(arr,l):\n    #your code here\n    res = []\n    \n    if l == 0:\n      return arr\n      \n    i = 0\n    while i < len(arr):\n      res.append(arr[i:i+l][::-1])\n      i += l\n    \n    return sum(res, [])", "def sel_reverse(arr,l):\n    if not l:\n        return arr\n    arr = [sorted(arr[i: i + l])[::-1] for i in range(0, len(arr), l) ]\n    return [j for i in arr for j in i]", "from itertools import zip_longest,chain\n\ndef sel_reverse(arr,l):\n    if l==0: return arr\n    return [e for e in chain.from_iterable(t[::-1] for t in zip_longest(*[iter(arr)]*l)) if e is not None]", "def sel_reverse(arr, l):\n    return [y for x in [arr[i:i + l][::-1] for i in range(0, len(arr), l)] for y in x] if l else arr"]