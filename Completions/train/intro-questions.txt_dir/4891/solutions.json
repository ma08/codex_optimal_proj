["class Datamining:\n    a = 0\n    b = 0\n\n    def __init__(self, train_set):\n        sx = sy = sxx = sxy = 0\n        n = len(train_set)\n        for i in range(n):\n            sx += train_set[i][0]\n            sy += train_set[i][1]\n            sxx += train_set[i][0]**2\n            sxy += train_set[i][0]*train_set[i][1]\n        self.b = (n*sxy-sx*sy)/(n*sxx-sx**2)\n        self.a = (sy-self.b*sx)/n\n\n    def predict(self, x):\n        return self.a + self.b*x\n", "\nclass Datamining:\n\n    def __init__(self, train_set):\n        n = len(train_set)\n        X = [i[0] for i in train_set]\n        Y = [i[1] for i in train_set]\n        x_mean = sum(X) / n\n        y_mean = sum(Y) / n\n        numerator = 0\n        denominator = 0\n        for i in range(n):\n            numerator += (X[i] - x_mean) * (Y[i] - y_mean)\n            denominator += (X[i] - x_mean) ** 2\n        self.b1 = numerator / denominator\n        self.b0 = y_mean - (self.b1 * x_mean)\n  \n    def predict(self, x):\n        return x*self.b1 + self.b0\n", "from operator import itemgetter\n\nclass Datamining:\n    def __init__(self, train_set):\n        X, Y = map(lambda L: sum(L)/len(train_set), zip(*train_set))\n        COV = sum((x-X)*(y-Y) for x,y in train_set)\n        VAR = sum((x-X)**2 for x in map(itemgetter(0), train_set))\n        self.A = COV / VAR\n        self.B = Y - self.A * X\n\n    def predict(self, x):\n        return self.A * x + self.B", "class Datamining:\n\n    def __init__(self, train_set):\n        n = len(train_set)\n        M1 = [i[0] for i in train_set]\n        M2 = [i[1] for i in train_set]\n        x_mean = sum(M1) / n\n        y_mean = sum(M2) / n\n        numerator = 0\n        denominator = 0\n        for i in range(n):\n            numerator += (M1[i] - x_mean) * (M2[i] - y_mean)\n            denominator += (M1[i] - x_mean) ** 2\n        self.n = numerator / denominator\n        self.o = y_mean - (self.n * x_mean)\n  \n    def predict(self, x):\n        return x*self.n + self.o", "class Datamining:\n    \n    def __init__(self, train_set):\n        x_mean = lambda train_set: sum( [i[0] for i in train_set] ) / len( [i[0] for i in train_set] )\n        y_mean = lambda train_set: sum( [i[1] for i in train_set] ) / len( [i[1] for i in train_set] )\n        f = lambda x_mean, y_mean, train_set: sum( (x - x_mean) * (y - y_mean) for x, y in train_set )\n        g = lambda x_mean, train_set: sum( (x - x_mean) ** 2 for x in [i[0] for i in train_set] )\n        self.a = f( x_mean(train_set), y_mean (train_set), train_set ) / g ( x_mean (train_set), train_set )\n        self.b = y_mean(train_set) - self.a * x_mean(train_set)\n        \n    def predict(self, x): return x * self.a + self.b", "class Datamining:\n    def __init__(self, train_set):\n        x_mean=sum([i[0] for i in train_set])/len([i[0] for i in train_set])\n        y_mean=sum([i[1] for i in train_set])/len([i[1] for i in train_set])\n        self.a = (sum((x - x_mean) * (y - y_mean) for x, y in train_set)) / \\\n                 (sum((x - x_mean) ** 2 for x in [i[0] for i in train_set]))\n        self.b = y_mean - self.a * x_mean\n    def predict(self, x): return x * self.a + self.b", "class Datamining:\n\n    def __init__(self, train_set):\n        a_x,a_y=[],[]\n        for x,y in train_set:\n            a_x.append(x)\n            a_y.append(y)\n        mean_x=sum(a_x)/len(a_x)\n        mean_y=sum(a_y)/len(a_y)\n        cov=sum((x-mean_x)*(y-mean_y) for x,y in train_set)\n        x_v=sum((x-mean_x)**2 for x in a_x)\n        self.a=cov/x_v\n        self.b=mean_y-self.a*mean_x\n\n    def predict(self, x):\n        return self.a*x+self.b", "class Datamining:\n\n    def __init__(self, ts):\n        self.N = len(ts)        \n        self.m = (self.N * sum(x*y for x, y in ts) - sum(x for x,_ in ts)*sum(y for _, y in ts)) / (self.N * sum(x**2 for x,_ in ts) - sum(x for x,_ in ts)**2)\n        self.b = (sum(y for _,y in ts) - self.m * sum(x for x, _ in ts)) / (self.N)\n                \n\n    def predict(self, x):\n        return self.m*x + self.b", "class Datamining:\n\n    def __init__(self, train_set):\n        n = len(train_set)\n        xbar = sum([s[0] for s in train_set]) / n\n        ybar = sum([s[1] for s in train_set]) / n\n        print(xbar, ybar)\n        xe = [s[0] - xbar for s in train_set]\n        ye = [s[1] - ybar for s in train_set]\n        self.beta = sum(xe[i] * ye[i] for i in range(n)) / sum(xe[i] ** 2 for i in range(n))\n        self.alpha = ybar - self.beta * xbar\n        predict = [self.alpha + self.beta * s[0] for s in train_set]\n\n\n\n    def predict(self, x):\n        return self.alpha + self.beta * x", "class Datamining:\n\n    def __init__(self, train_set):\n        total = len(train_set)\n        x = []\n        for i in train_set:\n            x.append(i[0])\n        y = []\n        for i in train_set:\n            y.append(i[1])\n        xmean = sum(x)/total\n        ymean = sum(y)/total\n        a = 0\n        b = 0\n        for i in range(total):\n            a += (x[i]-xmean) * (y[i] - ymean)\n            b+= (x[i]-xmean)**2\n        self.z = a/b\n        self.y = ymean - (self.z*xmean)\n\n    def predict(self, x):\n        return x*self.z + self.y\n        pass\n"]