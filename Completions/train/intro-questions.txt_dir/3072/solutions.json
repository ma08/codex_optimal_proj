["def get_digits(n):\n    return [int(x) for x in list(str(n))]\n\n\ndef is_narc(n):\n    return n == sum([x**len(get_digits(n)) for x in get_digits(n)])\n\n\ndef is_narcissistic(*values):\n    try:\n        return all(type(n) in [int,str] and is_narc(int(n)) for n in values)\n    except ValueError:\n        return False", "def narc(n):\n    ds = [int(c) for c in str(n)]\n    return sum(d**len(ds) for d in ds) == n\n\ndef is_narcissistic(*ns):\n    return (\n        all((isinstance(n, int) and n >= 0) or (isinstance(n, str) and n.isdigit()) for n in ns)\n        and all(map(narc, map(int, ns)))\n    )", "def is_narcissistic(*arg):\n    for e in arg:\n        try:\n            if e == 0:\n                continue\n            n = int(e) == sum([int(i) ** len(str(e)) for i in str(e)])\n            if not n:\n                return False\n        except:\n            return False \n    return True", "def narcissistic(n):\n    s = str(n)\n    l = len(s)\n    return n == sum(int(d)**l for d in s)\n    \ndef is_narcissistic(*numbers):\n    return all(str(n).isdigit() and narcissistic(int(n)) for n in numbers)", "def is_narcissistic(*nos):\n    try:\n        return all([sum([int(i)**len(str(n)) for i in str(n)]) == int(n) for n in nos])\n    except ValueError:\n        return False", "is_narcissistic=lambda*a:all(n.isdigit()and int(n)==sum(int(d)**len(n)for d in n)for n in map(str,a))", "is_narcissistic=lambda*a:all(str(n).isdigit()for n in a)and all(int(n)==sum(int(d)**len(n)for d in n)for n in map(str,a))", "def narcissistic(n):\n    try:\n        k = len(str(n))\n        return sum(d**k for d in map(int, str(n))) == int(n)\n    except ValueError:\n        return False\n\ndef is_narcissistic(*args):\n    return all(map(narcissistic, args))", "def is_narcissistic(*args):\n    def check(n):\n        n=str(n)\n        l=len(n)\n        return int(n)==sum(int(d)**l for d in n)\n    return all(str(arg).isdigit() and check(int(arg)) for arg in args)", "def is_narcissistic(*args):\n    try:\n        return all(narcissistic(int(number)) for number in args)\n    except (ValueError, TypeError):\n        return False\n\ndef narcissistic(number):\n    n = len(str(number))\n    return sum(int(digit) ** n for digit in str(number)) == number"]