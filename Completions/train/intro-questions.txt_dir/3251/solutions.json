["def primeFactors(n):\n    ret = ''\n    for i in range(2, n + 1):\n        num = 0\n        while(n % i == 0):\n            num += 1\n            n /= i\n        if num > 0:\n            ret += '({}{})'.format(i, '**%d' % num if num > 1 else '')\n        if n == 1:\n            return ret\n", "def primeFactors(n):\n    i, j, p = 2, 0, []\n    while n > 1:\n        while n % i == 0: n, j = n / i, j + 1\n        if j > 0: p.append([i,j])\n        i, j = i + 1, 0\n    return ''.join('(%d' %q[0] + ('**%d' %q[1]) * (q[1] > 1) + ')' for q in p)", "def primeFactors(n):\n    i = 2\n    r = ''\n    while n != 1:\n        k = 0\n        while n%i == 0:\n            n = n / i\n            k += 1\n        if k == 1:\n            r = r + '(' + str(i) + ')'\n        elif k == 0: pass\n        else:\n            r = r + '(' + str(i) + '**' + str(k) + ')'\n        i += 1\n        \n    return r\n        \n", "def primeFactors(n):\n  result = ''\n  fac = 2\n  while fac <= n:\n    count = 0\n    while n % fac == 0:\n      n /= fac\n      count += 1\n    if count:\n      result += '(%d%s)' % (fac, '**%d' % count if count > 1 else '')\n    fac += 1\n  return result\n", "import math\nfrom itertools import count\nfrom collections import Counter\n\n#Prime generator based on https://stackoverflow.com/questions/2211990/how-to-implement-an-efficient-infinite-generator-of-prime-numbers-in-python/10733621#10733621\ndef genPrimes():\n    #initial primes\n    yield from [2,3,5]\n    gen = genPrimes()\n    \"\"\"Store count generators starting from the next base prime's square\n    incrementing by two times the last prime number. This is for tracking the multiples.\"\"\"\n    mults_set = {}\n    prime = next(gen)\n    prime_sq = prime ** 2\n    for i in count(3, 2):\n        #if i is a multiple of a prime...\n        if i in mults_set:\n            mults = mults_set.pop(i)\n        \n        #if i is the next prime...\n        elif i < prime_sq:\n            yield i\n            continue\n            \n        #else i is the next primes square\n        else:\n            mults = count(prime_sq+2*prime, 2*prime)\n            prime = next(gen)\n            prime_sq = prime ** 2\n        \n        #get the next multiple that isnt already in the set\n        for mult in mults:\n            if mult not in mults_set: break\n        \n        mults_set[mult] = mults\n        \ndef primeFactors(n):\n    #track count of prime\n    output = Counter()\n    rem_n = n\n    \"\"\"Continue dividing n by it's smallest prime factor, adding each\n    factor to the Counter.\"\"\"\n    while rem_n > 1:\n        #continue generating primes until one that can divide n is reached\n        for prime in genPrimes():\n            if rem_n % prime == 0:\n                output[prime] += 1\n                rem_n /= prime\n                break\n                \n    return \"\".join(f\"({prime}**{count})\" if count > 1 else f\"({prime})\" for prime, count in output.items())", "from collections import defaultdict\n\ndef primeFactors(n):\n    factors = defaultdict(int)\n    n_prime = n\n    for i in range(2, int(n**0.5)+1):\n        while not n_prime % i:\n            factors[i] += 1\n            n_prime /= i\n    if n_prime != 1:\n        factors[n_prime] += 1\n    f = lambda x, y: '(%d)' % x if y is 1 else '(%d**%d)' % (x,y)\n    return ''.join(f(k, factors[k]) for k in sorted(factors))\n", "from collections import Counter\n\ndef fac(n):\n    maxq = int(n ** .5)\n    d, q = 1, n % 2 == 0 and 2 or 3\n    while q <= maxq and n % q != 0:\n        q = 1 + d*4 - d//2*2\n        d += 1\n    res = Counter()\n    if q <= maxq:\n        res += fac(n//q)\n        res += fac(q)\n    else: res[n] = 1\n    return res\n\ndef primeFactors(n):\n    return ''.join(('({})' if m == 1 else '({}**{})')\n        .format(p, m) for p, m in sorted(fac(n).items()))", "def primeFactors(n):\n    result = \"\"\n    for k, v in factorize(n).items():\n        result += f'({k})' if v == 1 else f'({k}**{v})'\n    return result\n\n\ndef factorize(n):\n    result, i = {}, 2\n    while n >= i ** 2:\n        if n % i == 0:\n            result[i] = 1 if not result.__contains__(i) else result[i] + 1\n            n = n // i\n        else:\n            i += 1\n    result[n] = 1 if not result.__contains__(n) else result[n] + 1\n    return result", "def primeFactors(n):\n    ret = ''\n    for i in range(2, int(n **0.5)+1):\n        num = 0\n        while(n % i == 0):\n            num += 1\n            n /= i\n        if num > 0:\n            ret += f'({i}**{num})' if num > 1 else f'({i})'\n        if n == 1:\n            return ret\n        \n    return ret + f'({int(n)})'", "def primeFactors(n):\n    r = \"\"\n    pf = 1\n    while n>1:\n        pf += 1\n        num = 0\n        while n%pf == 0:\n            n/=pf\n            num+=1\n        if num>0:\n            r += \"(\"+str(pf)+\"**\"+str(num)+\")\"\n    r=r.replace(\"**1\",\"\")\n    return r\n", "from itertools import compress\ndef sieve(n):\n    out = [True] * ((n-2)//2)\n    for i in range(3,int(n**0.5)+1,2):\n        if out[(i-3)//2]:\n            out[(i**2-3)//2::i] = [False] * ((n-i**2-1)//(2*i)+1)\n    return [2] + list(compress(range(3,n,2), out))\ndef primeFactors(n):\n    str_lst = []\n    for i in sieve(int(n**0.5)+1):\n        if n%i==0:\n            str_lst.extend([\"(\", str(i)])\n            counter=0\n            while n%i==0:\n                n=n//i\n                counter+=1\n            if counter==1:\n                str_lst.append(\")\")\n            else:\n                str_lst.extend([\"**\",str(counter),\")\"])\n    if n!=1:\n        str_lst.extend([\"(\",str(n),\")\"])\n    return \"\".join(str_lst)", "import math\nfrom collections import Counter\ndef primeFactors(n): \n    total = []\n    while n % 2 == 0: \n        total.append(2)\n        n = n // 2\n          \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n\n        while n % i== 0: \n            total.append(i)\n            n //= i \n              \n    if n > 2: \n        total.append(n)\n    return ''.join([f'({key}**{value})' if value > 1 else f'({key})' for key, value in Counter(total).items()])", "def factors(n): \n    res = [] \n    while n%2 == 0:\n        res.append(2)\n        n/=2\n    for i in range(3,int(n**.5)+1,2): \n        while n%i == 0:\n            res.append(int(i)) \n            n/= i\n    if n>2:\n        res.append(int(n))\n    return res\ndef primeFactors(n):\n    factor = dict() \n    for i in factors(n): \n        if i not in factor:\n            factor[i] = 1 \n        else:\n            factor[i] += 1\n    res = \"\"\n    for a,b in factor.items(): \n        if b == 1:\n            res += f'({a})'\n        else:\n            res += f'({a}**{b})'\n    return res", "def primeFactors(n):\n  s = {k for k in range(2,int(abs(n)**0.5)+1) for i in range(2,int(abs(k)**0.5)+1) if k%i==0}   \n  p = [j for j in range(2,int(abs(n)**0.5)+1) if j not in s]\n  z = [i for i in f_idx(n,p) if i!=1]\n  return ''.join([f\"({i}**{z.count(i)})\" if z.count(i)>1 else f\"({i})\" for i in sorted(set(z))])\n\ndef f_idx(n, p):\n    from functools import reduce\n    e = list(filter(lambda t: n%t==0, p)) \n    a = reduce(lambda x,y: x*y, e) if e!=[] else 1\n    return e+[n] if a==1 else e + f_idx(n//a, e)", "def primeFactors(n):\n    if isinstance(((n+1)/6),int) or isinstance(((n-1)/6),int): return n\n    g=n\n    pf=''\n    prime=2\n    while g!=1:\n        count=0\n        if (prime-1)%6==0 or (prime+1)%6==0 or prime==2 or prime==3:\n            while g%prime==0:\n                g=g/prime\n                count+=1\n            if count>1:\n                pf=pf+'('+str(prime)+'**'+str(count)+')'\n            elif count>0:\n                pf=pf+'('+str(prime)+')'\n        prime+=1\n    return pf", "from collections import Counter\n\n        \ndef get_factors(num):\n    if num % 2 == 0:\n        return (2, num // 2)\n    for i in range(3, num // 2, 2):\n        if num % i == 0:\n            return (i, num // i)\n    return (num, None)\n\n\ndef string_builder(count_dict):\n    s = \"\"\n    for element in count_dict:\n        if count_dict[element] == 1:\n            s += f\"({element})\"\n        else:\n            s += f\"({element}**{count_dict[element]})\"\n    return s\n\n\ndef primeFactors(n):\n    factors = [n]\n    count_dict = Counter()\n    \n    while factors:\n        result = get_factors(factors.pop())\n        count_dict[result[0]] += 1\n        if result[1]:\n            factors.append(result[1])\n    \n    return string_builder(count_dict)\n", "from collections import Counter\n\ndef primeFactors(n):\n    c = Counter()\n    while n % 2 == 0:\n        c[2] += 1\n        n //= 2\n\n    d = 3\n    while n > 1:\n        while n % d == 0:\n            c[d] += 1\n            n //= d\n        d += 2\n        \n    return ''.join(f'({key}**{value})' if value > 1 else f'({key})' for key, value in sorted(c.items()))", "def primeFactors(n):\n    a=[]\n    i=2\n    while i*i<=n:\n        while n%i==0:\n            a.append(i)\n            n//=i\n        i+=1\n    if n!=1:\n        a.append(n)\n    s=[i for i in set(a)]\n    s.sort()\n    return ''.join('({})'.format(i) if a.count(i)==1 else '({}**{})'.format(i,a.count(i)) for i in s ) ", "from itertools import count\n\ndef primeFactors(n):\n    def power(x, n, res=\"\"):\n        i = 0\n        while not n%x: n, i = n//x, i+1\n        return n, res+(f\"({x})\" if i==1 else f\"({x}**{i})\" if i>1 else \"\")\n    n, res = power(2, n)\n    for x in count(3, 2):\n        if n == 1: return res\n        n, res = power(x, n, res)", "from collections import Counter\n\ndef primeFactors(number):\n    ret, i = [], 2\n    while i <= number:\n        if number % i == 0:\n            ret.append(i)\n            number = number // i\n            continue\n        if i is not 2:\n            i += 2\n        else:\n            i += 1\n    count = Counter(ret)\n    ret_string = []\n    for key in sorted(count):\n        ret_string.append('({})'.format(key)) if count[key] == 1 else ret_string.append('({}**{})'.format(key, count[key]))\n\n    return ''.join(ret_string)", "def primeFactors(n):\n    c = 0\n    m = 2\n    r = []\n    while(True):\n        if n == 1:\n            r.append('(' + str(m) + ')')\n            return ''.join(r)\n        if n % m == 0:\n            n = n / m\n            c += 1\n        else:\n            if c != 0 and c != 1:\n                r.append('(' + str(m) + '**' + str(c) + ')')  \n            if c == 1:\n                r.append('(' + str(m) + ')')\n            m += 1\n            c = 0\n            \n", "def primeFactors(n):\n    ret,p,k=\"\",2,0\n    while (p<=n):\n          while (n%p==0):\n                n=n//p\n                k+=1\n          if (k):\n              ret=ret+\"(\"+str(p)+((\"**\"+str(k)) if k>1 else \"\")+\")\"\n              k=0\n          p+=1+(p>2)\n    return(ret)", "def primeFactors(n):\n    factors=[]\n    n1=n\n    while n1%2 == 0:\n        n1=n1/2\n        factors.append(2)\n    for i in range (3, int(n1**(1/2.0))):\n        while n1%i == 0:\n            n1=n1/i\n            factors.append(i)\n    if factors==[]:\n        factors.append(n)\n    elif n1 != 1:\n        factors.append(int(n1))\n    factors.append(0)\n    x=0\n    l=''\n    final=\"\"\n    for a in factors:\n        if l=='':\n            l=a\n            x=x+1\n        elif l != a:\n            if x==1:\n                final=final+\"(\"+str(l)+\")\"\n                l=a\n                x=1\n            else:\n                final=final+\"(\"+str(l)+\"**\"+str(x)+\")\"\n                l=a\n                x=1\n        else:\n            x=x+1\n    return final\n            \n", "from collections import defaultdict\n\n\ndef is_prime(a):\n    return all(a % i for i in range(2, a))\n\n\ndef primeFactors(n):\n    factors = defaultdict(int)\n    rest = n\n    while rest != 1:\n        for num in range(2, rest+1):\n            if rest % num == 0 and is_prime(num):\n                factors[num] += 1\n                rest //= num\n                break\n\n    return ''.join(\n        map(\n            lambda nc: '({}**{})'.format(nc[0], nc[1]) if nc[1] > 1 else '({})'.format(nc[0]),\n            sorted(factors.items(), key=lambda x: x[0])\n        )\n    )", "def primeFactors(n):\n        res = \"\"\n        fac = 2\n        while fac <= n:\n            count = 0\n            while n % fac == 0:\n                count += 1\n                n = n / fac\n            if count > 0:\n                res += \"(\" + str(fac)\n                res +=  \"**\"  + str(count) if (count > 1) else \"\" \n                res += \")\"\n            fac += 1\n        return res\n", "def primeFactors(n):\n    i = 2\n    j = 0\n    out = ''\n    while n > 1:\n      if n % i == 0:\n          n //= i\n          j += 1\n      else:\n          if j == 1:\n              out += '({})'.format(i)\n          elif j > 1:\n              out += '({}**{})'.format(i, j)\n          i += 1\n          j = 0\n    return out + '({})'.format(i)", "def primeFactors(n):\n    div = 2\n    k = 0\n    s = ''\n    while div < n:\n        while n%div!=0:\n            div +=1\n        while n%div ==0:\n            n=n//div\n            k+=1\n        s+='({}{})'.format(str(div), '**'+ str(k) if k > 1 else '')\n        k = 0\n    return s", "import math\n\n\ndef primeFactors(n):\n    primes = {}\n    while n % 2 == 0:\n        n //= 2\n        try:\n            primes[2] += 1\n        except:\n            primes[2] = 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n //= i\n            try:\n                primes[i] += 1\n            except:\n                primes[i] = 1\n    if n != 1:\n        primes[n] = 1\n    primes = sorted(list(primes.items()), key=lambda k: k[0])\n    return \"\".join(\n        [\n            \"({}**{})\".format(k, v) if v > 1 else \"({})\".format(k)\n            for k, v in primes\n        ]\n    )\n\n\n", "def primeFactors(n):\n    power = {}\n    div = 2\n    while div <= n:\n        if n % div == 0:\n            if div in power:\n                power[div] += 1\n            else:\n                power[div] = 1\n            n /= div\n        else:\n            div +=1\n    return ''.join([f\"({k}**{v})\" if v > 1 else f\"({k})\" for k, v in power.items()])", "import math\n\ndef primeFactors(n):\n    # returns the maximum prime factor\n    max = maxPrimeFactors(n)\n    \n    # factorize n and stores factors in facts\n    facts = []\n    for i in range(2, int(max + 1)):\n        while n % i == 0:\n            facts.append(i)\n            n = n/i\n    \n    # removes duplicates for ret and sorts the list\n    facts_nodup = list(set(facts))\n    facts_nodup.sort()\n    # formats return string\n    ret_str = \"\"\n    for x in facts_nodup:\n        count = facts.count(x)\n        if count > 1:\n            ret_str += \"({}**{})\".format(x, count)\n        else:\n             ret_str += \"({})\".format(x)\n             \n    return ret_str\n    \n# A function to find largest prime factor    \ndef maxPrimeFactors(n): \n      \n    # Initialize the maximum prime factor \n    # variable with the lowest one \n    maxPrime = -1\n      \n    # Print the number of 2s that divide n \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1     # equivalent to n /= 2 \n          \n    # n must be odd at this point,  \n    # thus skip the even numbers and  \n    # iterate only for odd integers \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n      \n    # This condition is to handle the  \n    # case when n is a prime number  \n    # greater than 2 \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime) \n", "import math\ndef primeFactors(n):\n    ar=[]\n    while n%2==0: \n        ar.append(2) \n        n=n/2 \n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0: \n            ar.append(i) \n            n=n/i\n    if n>2: \n        ar.append(n)\n    ax='**'\n    x=''\n    for i in sorted(set(ar)):\n        c=ar.count(i)\n        if c>1:\n            x+='('+str(i)+ax+str(c)+')'\n        else: x+='('+str(int(i))+')'\n    return x", "def primeFactors(n):\n    i=2\n    li=[]\n    s=\"\"\n    while n!=1:\n        count=0\n        while n%i==0:\n          n=n/i\n          count=count+1\n        if count!=0:\n            re=(i,count)\n            li.append(re)\n        i=i+1\n    for i in li:\n        if i[1]!=1:\n            s=s+\"(\"+str(i[0])+\"**\"+str(i[1])+\")\"\n        else:\n            s=s+\"(\"+str(i[0])+\")\"\n    return s", "def primeFactors(n):\n    comp=[]\n    i=1\n    o=0\n    while n!=1:\n        i=i+1\n        if n%i==0:\n            o=o+1\n            while n%i==0:\n                n=n/i\n                comp.append(i)\n    if o==0:\n        return '('+str(n)+')'\n    g=['('+str(x)+ '**'+str(comp.count(x))+')' if comp.count(x)>1 else '('+str(x)+')' for x in sorted(list(set(comp))) ]\n    return ''.join(g)\n                \n", "from collections import OrderedDict\nfrom math import sqrt\n\n\nclass OrderedIntDict(OrderedDict):\n    def __missing__(self, key):\n        return 0\n\n\ndef format_factor(n, times):\n    return (\n        \"({n})\".format(n=n) if times == 1\n        else \"({n}**{times})\".format(n=n, times=times)\n    )\n\n\ndef prime_factors(number):\n    factors = OrderedIntDict()\n    for n in range(2, int(sqrt(number))+1):\n        while number % n == 0:\n            number //= n\n            factors[n] += 1\n    if number > 1:\n        factors[number] = 1\n    return \"\".join(\n        format_factor(n, times)\n        for n, times in factors.items()\n    )\n    \n\nprimeFactors = prime_factors", "def primeFactors(n):\n    factors = []\n    p = 2 \n    while n != 1 and p <= n**0.5:\n        if n % p == 0:\n            factors.append(p)\n            n = n // p\n        else:\n            p = p + 1\n    if n != 1:\n        factors.append(n)\n        n = 1\n    \n    distinct = sorted(set(factors))\n    \n    answer = \"\"\n    for prime in distinct:\n        if factors.count(prime) == 1:\n            answer = answer + \"(\" + str(prime) + \")\"\n        else:\n            answer = answer + \"(\" + str(prime) + \"**\" + str(factors.count(prime)) + \")\"\n            \n    return answer", "import math\n\ndef primeFactors(n:int)-> str:\n    list_result = []\n    while n % 2 == 0: \n        n = n / 2\n        list_result.append(2)      \n    for i in range(3,int(math.sqrt(n))+1,2):           \n        while n % i== 0: \n            n = n // i\n            list_result.append(i)      \n    if n > 2: \n        list_result.append(int(n))\n            \n    return  ''.join([f\"({i})\" if list_result.count(i) == 1 else f\"({i}**{list_result.count(i)})\" for i in sorted(list(set(list_result)))])\n\n", "# Using the sqrt function for speed (instead of **0.5)\nfrom math import sqrt\ndef seiveOfEratosthenes(n):\n    # For speed, only grabbing all odd numbers from 3 to SQRT N\n    flags = [True for i in range(3, int(sqrt(n))+1, 2)]\n    # Adding a flag for \"2\" (effectively a pre-pend here)\n    flags.append(True)\n    \n    # Iterate through Primes\n    prime = 2\n    while (prime <= sqrt(n)):\n        # Cross Off all multiples of Prime\n        for i in range(prime**2, len(flags), prime):\n            flags[i] = False\n        \n        # Get next Prime\n        prime += 1\n        while (prime < len(flags) and not flags[prime]):\n            prime += 1\n    # Get the list of Primes as actual #'s; We need a special case for \"2\" because it doesn't fit the odds pattern\n    if flags[0]:\n        primes = [2]\n    else:\n        primes = []\n    primes += [i for i in range(3, len(flags), 2) if flags[i]]\n    \n    return primes\n        \n    \n\ndef primeFactors(n):\n    # Get applicable Prime numbers\n    primes = seiveOfEratosthenes(n)\n    primes_in_number = []\n    \n    for prime in primes:\n        # Iterate through each prime, and figure out how many times it goes in\n        repeat = 0\n        while (not (n % prime)):\n            repeat += 1\n            n /= prime\n        \n        # Add appearing Primes appropriately\n        if repeat == 1:\n            primes_in_number.append(\"(\" + str(prime) + \")\")\n        elif repeat:\n            primes_in_number.append(\"(\" + str(prime) + \"**\" + str(repeat) + \")\")\n    \n    # Only testing primes up to sqrt of n, so we need to add n if it hasn't been reduced to 1\n    if n > 1:\n        primes_in_number.append(\"(\" + str(int(n)) + \")\")\n    \n    return ''.join(primes_in_number)", "def primeFactors(n):\n    s=str()\n    for i in range(2, int(n**(1/2))+1):\n        j=0\n        while n/i%1==0.0:\n            j+=1\n            n/=i\n        if j>1:\n            s+=\"(\"\n            s+=str(i)\n            s+=\"**\"\n            s+=str(j)\n            s+=\")\"\n        if j==1:\n            s+=\"(\"\n            s+=str(i)\n            s+=\")\"\n    if n!=1:\n        s+=\"(\"\n        s+=str(int(n))\n        s+=\")\"\n        return s         \n    else:\n        return s        ", "import math\ndef primeFactors(number):\n\n    # create an empty list and later I will\n    # run a for loop with range() function using the append() method to add elements to the list.\n    prime_factors = []\n\n    # First get the number of two's that divide number\n    # i.e the number of 2's that are in the factors\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n\n    # After the above while loop, when number has been\n    # divided by all the 2's - so the number must be odd at this point\n    # Otherwise it would be perfectly divisible by 2 another time\n    # so now that its odd I can skip 2 ( i = i + 2) for each increment\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n        \n    distinct_set = sorted(set(prime_factors))\n    \n    output = \"\"\n    \n    for i in distinct_set:\n        \n        if(prime_factors.count(i) == 1):\n            \n            output = output + '(' + str(i) + ')'\n        else:\n            output = output + '(' + str(i)+ '**' + str(prime_factors.count(i)) +  ')'\n        \n    return output", "def primeFactors(n):\n    result = ''\n    factor = 2\n    while 1:\n        count = 0\n        while n % factor == 0:\n            count += 1\n            n = n / factor\n        if count == 1 and count != 0:\n            result = result + '(%s)' % factor\n        elif count != 0:\n            result = result + '({}**{})'.format(factor, count)\n        else:\n            factor += 1\n            continue\n        factor += 1\n        if n == 1:\n            break\n    return result\n        \n            \n    ...", "def primeFactors(n):\n    i = 2\n    a = []\n    while i <= n:\n        if n % i == 0:\n            if not any([i%x[0]==0 for x in a]):\n                max_power = 0\n                div = n\n                while div%i==0:\n                    max_power+=1\n                    div/=i\n                a.append((i, max_power))\n                n/=i\n        i+=1\n    return ''.join([f'({x}**{y})' if y!=1 else f'({x})' for x,y in a ])", "import collections\ndef primeFactors(n):\n    ret = []\n    pows = {}\n    st = \"\"\n    i = 2\n    while(i<n):\n        if n%i == 0:\n            n /= i\n            ret.append(i)\n        else:\n            i += 1\n    ret.append(int(n))\n    for j in set(ret):\n        pows.update({int(j):ret.count(j)})\n    print(pows)\n    pows = collections.OrderedDict(sorted(pows.items()))\n    for key in pows:\n        if pows[key] > 1:\n            st += \"(\"+ str(key)+\"**\"+ str(pows[key])+\")\"\n        else:\n            st += \"(\"+str(key)+\")\"\n    return st", "def primeFactors(x):\n    primes = {}\n    prime_int = 2\n    y = x\n    while prime_int < x+1:\n        while x % prime_int == 0:\n            if prime_int not in primes:\n                primes[prime_int] = 1 \n            else:\n                primes[prime_int] += 1 \n            x  //= prime_int\n        prime_int += 1\n    phrase = ''\n    for digit,count in primes.items():\n        if count == 1:\n            phrase += f'({digit})'\n            continue\n        phrase += f'({digit}**{count})'\n    print(phrase)\n    return phrase", "def primeFactors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if(i in factors.keys()):\n                factors[i]+=1\n            else:\n                factors[i]=1\n    if n > 1:\n        factors[n]=1\n    string=\"\"\n    for key in factors.keys():\n        if factors[key]==1:\n            string+=\"({})\".format(key)\n        else:\n            string+=\"({}**{})\".format(key,factors[key])\n    return string", "def primeFactors(n):\n    def is_prime(number):\n        if number == 1: return False\n        for num in range(3,(int)(number**.5) + 1,2):\n            if number % num == 0:\n                return False\n        return True\n    primes_prelimenary = []\n    while n > 1:\n        if is_prime(n):\n            primes_prelimenary.append(n)\n            n = 1\n            continue\n        while n % 2 == 0:\n            primes_prelimenary.append(2)\n            n = n / 2\n        for num in range(3,(int)(n**.5) + 1,2):\n            if n % num == 0 and is_prime(num): \n                while n % num == 0:\n                    primes_prelimenary.append(num)\n                    n = n / num\n    return ''.join(f'({(int)(factor)}**{primes_prelimenary.count(factor)})' for factor in sorted(set(primes_prelimenary))).replace('**1','')", "def primeFactors(n):\n    list = []\n    for i in range(2, round(n**0.5)):\n        while (n/i).is_integer():\n            n /= i\n            list.append(i)\n    if len(list) < 2:\n        list.append(int(n))\n    list_seen = []\n    str1 = ''\n    for x in list:\n        if x in list_seen:\n            pass\n        else:\n            list_seen.append(x)\n            if list.count(x) > 1:\n                str1 += f\"({str(x)}**{str(list.count(x))})\"\n            else:\n                str1 += \"(\" + str(x) + \")\"\n    return str1", "import math\n\ndef primeFactors(n):\n    dic_prime = {}\n    dic_prime[2] = 0\n    while n%2 ==0:\n        dic_prime[2] += 1\n        n = n/2\n    if dic_prime[2] == 0:\n        dic_prime.pop(2)\n\n    for i in range(3,int(n+1),2):\n        dic_prime[i] = 0\n        while n%i ==0:\n            dic_prime[i] += 1\n            n = n/i\n        if n <= 1:\n            break\n        if dic_prime[i] == 0:\n            dic_prime.pop(i)\n\n    output_str = \"\"\n    for k,v in dic_prime.items():\n        if v == 1:\n            output_str += \"({})\".format(str(k))\n        else:\n            output_str +=\"({}**{})\".format(str(k),str(v))\n\n    return output_str"]