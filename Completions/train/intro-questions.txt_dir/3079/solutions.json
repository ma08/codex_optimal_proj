["def big_primefac_div(n):\n    bpf, bd = 0, 1\n    frac = []\n    \n    if n % 1 != 0:\n        return \"The number has a decimal part. No Results\"\n    else:\n        n = abs(int(n))\n        n_copy = n\n  \n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            frac.append(i)\n        else:\n            i += 1\n    if n > 1: frac.append(n)\n\n    bpf = max(frac)\n    bd = n_copy / frac[0]\n            \n    if bpf == 0 or bd == 1:\n        return []\n    else:\n        return [bpf, bd]", "\ndef big_primefac_div(n):\n    #We need only absolute values\n    n = abs(n)\n    maxi = 0\n    #Checking if the number has a decimal part\n    if n % 1 == 0:\n        #Loop for finding Biggest Divisor\n        listy = [num for num in range(2, int(n**.5 + 1)) if n % num == 0]\n        fancy_list = list(listy)\n        for number in listy:\n            temp_numb = n // number\n            fancy_list.append(int(temp_numb))\n        #Loop for finding Biggest Prime Factor\n        for numb in sorted(fancy_list, reverse=True):            \n            for i in range(2, int(numb**.5 + 1)):\n                if numb % i == 0:\n                    break\n            else:\n                maxi = numb\n                break\n        if fancy_list:\n            return [maxi, max(set(fancy_list))]\n        #In case we gonna have one number as prime factor itself\n        else:\n            return []\n    else:\n        return (\"The number has a decimal part. No Results\")", "import math\ndef primecheck(num):\n    a=math.sqrt(num)\n    for i in range(2, int(a + 2)):\n        if num % i == 0:\n            return False\n    return True\nprint(primecheck(25))\ndef big_primefac_div(n):\n    if int(n)!=n:\n        return \"The number has a decimal part. No Results\"\n    n=abs(n)\n    factor=[]\n    prime=[]\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            factor.append(i)\n            factor.append(n/i)\n    for j in factor:\n        if primecheck(j) is True:\n            prime.append(j)\n    if len(factor)==0:\n        return []\n    factor.sort()\n    prime.sort()\n    return [int(prime[-1]),int(factor[-1])]", "def big_primefac_div(n):\n    if n % 1:\n        return \"The number has a decimal part. No Results\"\n    o = n = abs(int(n))\n    mn, mx = 0, 1\n    while n % 2 == 0:\n        mn, mx, n = mn or 2, 2, n//2\n    k = 3\n    while k*k <= n:\n        if n % k:\n            k = k+2\n        else:\n            mn, mx, n = mn or k, k, n//k\n    return [max(mx, n), o//mn] if mn else []\n", "from itertools import count\ndef big_primefac_div(n):\n    prime=lambda n:all(n%i for i in range(2,int(n**.5)+1))\n    if n != int(n) : return \"The number has a decimal part. No Results\"\n    if prime(abs(n)) : return []\n    f = factor(abs(n))\n    return [max(f),abs(n)/f[0]] \n    \ndef factor(n):\n    j, li= 2, []\n    while j*j <=n:\n        if n%j == 0 : n//=j ; li.append(j)\n        else : j += 1\n    if n>1 : li.append(n)\n    return li", "def big_primefac_div(n):\n    if n % 1:\n        return \"The number has a decimal part. No Results\"\n    n = abs(int(n))\n    mpf = big_primefac(n)\n    return [mpf, big_div(n)] if mpf != n else []\n\ndef big_primefac(n):\n    m = 1\n    while n % 2 == 0:\n        m, n = 2, n//2\n    k = 3\n    while k*k <= n:\n        if n % k:\n            k = k+2\n        else:\n            m, n = k, n//k\n    return max(m, n)\n\ndef big_div(n):\n    return next((n//k for k in range(2, int(n**0.5)+1) if n % k == 0), n)\n", "def big_primefac_div(n):\n    if n % 1 != 0:\n        return \"The number has a decimal part. No Results\"\n    # convert negative number to positive\n    n = -n if n < 0 else n\n    \n    # find smallest prime factor, use it to find largest divisor\n    biggest_divisor = 1\n    biggest_primefactor = 1\n    if n%2 == 0:\n        biggest_primefactor = 2\n    elif n%3 == 0:\n        biggest_primefactor = 3\n    else:\n        i = 5\n        while (i*i <= n):\n            if n%i==0:\n                biggest_primefactor = i\n                break\n            elif n%(i+2)==0:\n                biggest_primefactor = i + 2\n                break\n            i = i + 6\n        \n    if biggest_primefactor == 1:\n        return []\n    biggest_divisor = n / biggest_primefactor\n\n    n = int(n)\n    while n % 2 == 0:\n        biggest_primefactor = 2\n        n >>= 1\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            biggest_primefactor = i\n            n = n / i\n    if n > 2:\n        biggest_primefactor = n\n    \n    return [biggest_primefactor, biggest_divisor]", "def big_primefac_div(n):\n    n=abs(n)\n    if isinstance(n, float):\n        temp=str(n)[str(n).index(\".\")+1:]\n        for i in temp:\n            if i!=\"0\":\n                return \"The number has a decimal part. No Results\"\n    res=factorization(n)\n    if len(res)==1:\n        return []\n    return [res[-1], n//res[0]]\ndef factorization(n):\n    factor=2\n    res=[]\n    while factor*factor<=n:\n        if n%factor==0:\n            n//=factor\n            res.append(factor)\n            factor=2\n        else:\n            factor+=1\n    res.append(int(n))\n    return res", "def pf(n):\n    p,x = [],2\n    while x*x <= n:\n        while not n%x:\n            n //= x\n            p.append(x)\n        x += 1\n    if n>1:\n        p.append(n)\n    return p\n\ndef big_primefac_div(n):\n    if isinstance(n,float) and not n.is_integer(): return \"The number has a decimal part. No Results\"\n    n = abs(n)\n    p = pf(n)\n    return [p[-1],n//p[0] if n%2 else n//2] if p[-1]!=n else []"]