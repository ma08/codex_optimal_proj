["def pattern(n):\n    res = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        res.append(line + line[::-1][1:])\n    return '\\n'.join(res + res[::-1][1:])\n", "def pattern(n):\n    quarters = (\"\".join(str(j %10) if j == i else \" \" for j in range(1, n)) for i in range(1, n))\n    half = \"\\n\".join(f\"{quarter} {quarter[::-1]}\" for quarter in quarters) + \"\\n\" + \" \" * (n - 1)\n    return f\"{half}{n % 10}{half[::-1]}\" if n > 1 else \"1\" if n > 0 else \"\"\n        \n", "def pattern(n):\n    c,p = 0,0\n    t,final = '',''\n    for i in range((2*n)-1):\n        \n        if i>=n:\n            c-=1\n        else:\n            c+=1\n\n        if c>9:\n            temp = str(c)\n            p = int(temp[-1])\n        else:\n            p = c\n\n        for j in range((2*n)-1):\n            if j == i or j == ((2*n)-2)-i:\n                if i<n:\n                    t+=str(p)\n                else:\n                    t+=str(p)\n            else:\n                t+=' '\n        final += t + '\\n'\n        t = ''\n\n    return final[0:-1]\n", "def pattern(n):\n    if n<=0:return ''\n    li = []\n    for i in range(1, n):\n        temp = [str(i%10)if j==i-1 else ' 'for j in range(n-1)]\n        li.append(\"\".join(temp) + \" \" + \"\".join(temp[::-1]))\n    return \"\\n\".join([\"\\n\".join(li),str(n%10).center(n*2-1),\"\\n\".join(li[::-1])])", "from itertools import chain\n\ndef pattern(n):\n    def f():\n        length = 2*n - 1\n        lines = [' '] * length\n        for i in chain(range(1, n+1), range(n-1, 0, -1)):\n            x = str(i % 10)\n            lines[i-1] = lines[-i] = x\n            yield lines\n            lines[i-1] = lines[-i] = ' '\n    return '\\n'.join(map(''.join, f()))", "def pattern(n):\n    up = [\"{0}{1}{0}\".format(x%10, \" \"*(2*(n-x)-1)).center(2*n-1) for x in range(1, n)]\n    return '\\n'.join( up + [str(n%10).center(2*n-1)] + up[::-1] ) if n > 0 else ''", "def pattern(n):\n    if n < 1: return \"\"\n    wing = \"\\n\".join((str(i%10) + \" \"*(2*(n-i) - 1) + str(i%10)).center(2*n - 1) for i in range(1, n))\n    return \"\\n\".join([wing, str(n%10).center(2*n-1), wing[::-1]])", "def pattern(n):\n    s = '\\n'.join(' '*i+str(i+1)[-1]+' '*(2*n-1-2*(i+1))+str(i+1)[-1]+' '*i for i in range(n-1))\n    s1= '\\n'+' '*(n-1) +str(n)[-1]+' '*(n-1)+'\\n'\n    return '' if n<1 else s+s1+s[::-1]", "get_r = lambda y: str((y + 1) % 10)\nrow = lambda n, i: ' ' * i + get_r(i) + ' ' * max(0, 2 * n - 3 - i * 2) + (get_r(i) if i != n - 1 else '') + ' ' * i\ndef pattern(n):\n  if n < 1: return ''\n  top = [row(n, x) for x in range(n - 1)]\n  return '\\n'.join(top + [row(n, n - 1)] + list(reversed(top)))", "def pattern(n):\n    lines=[]\n    for i in range(1,n+1):\n        line=' '*(i-1)+str(i%10)+' '*(n-i)\n        lines.append(line+line[-2::-1])\n    return '\\n'.join(lines+lines[-2::-1])"]