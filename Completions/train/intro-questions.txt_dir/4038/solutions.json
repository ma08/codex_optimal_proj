["def chess_knight(cell):\n    x, y = (ord(c) - ord(origin) for c, origin in zip(cell, 'a1'))\n    return sum(0 <= x + dx < 8 and 0 <= y + dy < 8 for dx, dy in (\n        (-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)))", "moves = {(-2, -1), (-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2)}\ndef chess_knight(cell):\n    x, y = ord(cell[0]) - ord('a') + 1, int(cell[1])\n    return sum(0 < x + mx < 9 and 0 < y + my < 9 for mx, my in moves)", "def chess_knight(cell):\n    x,y = ord(cell[0])-96,int(cell[1])\n    return sum([1 for dx in [-2,-1,1,2] for dy in [-2,-1,1,2] if all([abs(dx/dy)!=1, 0<x+dx<9, 0<y+dy<9])])", "result = (2, 3, 4, 3, 4, 6, 4, 6, 8)\n\ndef chess_knight(cell):\n    x, y = ord(cell[0])-97, int(cell[1])-1\n    x, y = min(2, x, 7-x), min(2, y, 7-y)\n    return result[3*x + y]", "def chess_knight(cell):\n    file = cell[0]\n    rank = cell[1]\n    if cell in ['a1', 'a8', 'h1', 'h8']: \n        return 2\n    if cell in ['a2', 'a7', 'b1', 'b8', 'g1', 'g8', 'h2', 'h7']: \n        return 3\n    if 'c' <= file <= 'f':\n        if '3' <= rank <= '6':\n            return 8\n    if file in ['b', 'g'] and '3' <= rank <= '6':\n        return 6\n    if rank in ['2', '7'] and 'c' <= file <= 'f':\n        return 6\n    return 4\n", "def chess_knight(k):\n    x,y=ord(k[0])-ord('a'),ord(k[1])-ord('1') \n    moves=0\n    if x-2 in range(8) and y-1 in range(8): moves+=1\n    if x-2 in range(8) and y+1 in range(8): moves+=1\n    if x-1 in range(8) and y-2 in range(8): moves+=1\n    if x-1 in range(8) and y+2 in range(8): moves+=1\n    if x+1 in range(8) and y-2 in range(8): moves+=1\n    if x+1 in range(8) and y+2 in range(8): moves+=1\n    if x+2 in range(8) and y-1 in range(8): moves+=1\n    if x+2 in range(8) and y+1 in range(8): moves+=1\n    return moves", "from string import ascii_lowercase\n\n_MOVES = [complex(a * c, b * d) for a, b in ((1, 2), (2, 1)) for c in (1, -1) for d in (1, -1)]\n_BOARD = [complex(a, b) for a in range(1, 9) for b in range(1, 9)]\n\ndef chess_knight(cell):\n    file, rank = cell\n    start = complex(ascii_lowercase.index(file) + 1, int(rank))\n    return sum(start + move in _BOARD for move in _MOVES)\n", "def chess_knight(cell):\n    col, row = cell\n    col, row = ord(col) - 97, int(row) - 1\n    return sum(abs(y-row)**2 + abs(x-col)**2 == 5 for y in range(8) for x in range(8))", "def chess_knight(pos):\n    i, j = int(8-int(pos[1])),\"abcdefgh\".index(pos[0])\n    A,B,C,D,E,F,G,H=i>0,i<7,j-2>=0,j+2<8,i+2<8,i-2>=0,j>0,j<7\n    return sum([A and D,A and C,B and C,B and D,F and H,F and G,E and H,E and G])", "def chess_knight(cell):\n    return sum( 1 <= ord(cell[0])-96+d1 <= 8 and 1 <= int(cell[1])+d2 <= 8 for h in [2,-2] for w in [1,-1] for d1,d2 in [(h,w), (w,h)] )"]