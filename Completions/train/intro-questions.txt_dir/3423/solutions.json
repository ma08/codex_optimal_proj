["from itertools import combinations\n\ndef solve(a, n):\n    return any(sum(c) % n == 0 for i in range(len(a)) for c in combinations(a, i+1))", "def solve(xs, n):\n    rs = set()\n    for x in xs:\n        for r in list(rs):\n            rs.add((r + x) % n)\n        rs.add(x % n)\n    return 0 in rs", "from itertools import combinations\n\ndef solve(arr, n):\n    return any(sum(xs) % n == 0\n               for i in range(len(arr))\n               for xs in combinations(arr, i+1))", "from itertools import combinations\n\ndef solve(x, n):\n    return any(sum(cb) % n == 0 for k in range(len(x)) for cb in combinations(x, k + 1))", "from itertools import combinations\ndef solve(x, n):\n    def combs(x):\n        return [c for i in range(1, len(x)+1) for c in combinations(x, i)]\n    return any(map(lambda x: sum(x) % n == 0, combs(x)))", "from itertools import combinations\n\ndef solve(arr,n):\n    return any(sum(c) % n == 0 for i in range(1, len(arr) + 1) for c in combinations(arr, i))", "from itertools import combinations\ndef solve(arr,n):\n    for i in range(1,len(arr)+1):\n        for j in combinations(arr,i):\n            if sum(j)%n==0:\n                return True\n    return False", "from itertools import combinations\n\ndef solve(arr,n):\n    return next(( True for x in range(1, len(arr)+1) for c in combinations(arr, x) if not sum(c)%n), False)", "solve=lambda a,n:any(sum(c)%n<1for r in range(len(a))for c in __import__('itertools').combinations(a,r+1))", "from itertools import combinations\n\n# Let(s brute force this)\ndef solve(arr,n):\n    return any(sum(x)%n == 0 for i in range(1, len(arr)+1) for x in combinations(arr, i))"]