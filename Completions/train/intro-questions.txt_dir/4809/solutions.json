["dict = {i[0]:i[1] for i in ['GA', 'DE', 'RY', 'PO', 'LU', 'KI', 'AG', 'ED', 'YR', 'OP', 'UL', 'IK','ga', 'de', 'ry', 'po', 'lu', 'ki', 'ag', 'ed', 'yr', 'op', 'ul', 'ik'] }\ndef encode(s):\n    return ''.join([dict[i] if i in dict else i for i in s])\n    \ndef decode(s):\n    return ''.join([dict[i] if i in dict else i for i in s])\n", "encode = decode = lambda str: str.translate(str.maketrans('gaderypolukiGADERYPOLUKI', 'agedyropulikAGEDYROPULIK'))", "def encode(str):\n    return str.translate(str.maketrans(\"GDRPLKAEYOUI\"+\"GDRPLKAEYOUI\".lower(),\"AEYOUIGDRPLK\"+\"AEYOUIGDRPLK\".lower()))\n    \ndef decode(str):\n    return encode(str)", "def encode(message):\n    s1 = \"GADERYPOLUKI\"\n    s2 = \"AGEDYROPULIK\"\n    return message.translate(str.maketrans(s1,s2)).translate(str.maketrans(s1.lower(),s2.lower()))\n    \ndef decode(message):\n    return encode(message)", "key = \"GA DE RY PO LU KI\"\nkey += ' ' + key.lower()\n\n# generate translation dictionary\ndict = {}\nfor a, b in key.split():\n    dict[a] = b\n    dict[b] = a\n\nencode = decode = lambda str: ''.join( dict.get(char, char) for char in str )", "t = str.maketrans(\"gdrplkGDRPLKaeyouiAEYOUI\", \"aeyouiAEYOUIgdrplkGDRPLK\")\n\nencode = decode = lambda s: s.translate(t)", "def encode(message):\n    return message.translate(message.maketrans(\"GAgaDEdeRYryPOpoLUluKIki\", \"AGagEDedYRyrOPopULulIKik\"))\n    \ndef decode(message):\n    return message.translate(message.maketrans(\"GAgaDEdeRYryPOpoLUluKIki\", \"AGagEDedYRyrOPopULulIKik\"))", "key   = 'GADERYPOLUKI'\nkey  += key.lower()\ndekey = ''.join(key[i:i+2][::-1] for i in range(0,len(key),2))\n\ndef encode(message):\n    return message.translate(str.maketrans(key,dekey))\n    \ndef decode(message):\n    return message.translate(str.maketrans(dekey,key))", "key = \"GADERYPOLUKI\"\n\ndef table(key):\n    full_key = key.upper() + key.lower()\n    even, odd = full_key[::2], full_key[1::2]\n    return str.maketrans(even + odd, odd + even)\n\nencode = decode = lambda message: message.translate(table(key))", "def encode(s):\n    return ''.join(({'G': 'A', 'A': 'G', 'g': 'a', 'a': 'g', 'D': 'E', 'E': 'D', 'd': 'e', 'e': 'd', 'R': 'Y', 'Y': 'R', 'r': 'y', 'y': 'r', 'P': 'O', 'O': 'P', 'p': 'o', 'o': 'p', 'L': 'U', 'U': 'L', 'l': 'u', 'u': 'l', 'K': 'I', 'I': 'K', 'k': 'i', 'i': 'k'})[c] if c in {'G': 'A', 'A': 'G', 'g': 'a', 'a': 'g', 'D': 'E', 'E': 'D', 'd': 'e', 'e': 'd', 'R': 'Y', 'Y': 'R', 'r': 'y', 'y': 'r', 'P': 'O', 'O': 'P', 'p': 'o', 'o': 'p', 'L': 'U', 'U': 'L', 'l': 'u', 'u': 'l', 'K': 'I', 'I': 'K', 'k': 'i', 'i': 'k'} else c for c in s)\ndecode = encode"]