["class Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        ans = [0] * (n+1)\n        ans[0] = 0 \n        ans[1] = 1 \n        ans[2] = 1 \n        \n        for i in range(3, n+1):\n            ans[i] = ans[i-1] + ans[i-2] + ans[i-3]\n        return ans[n]", "class Solution:\n    \n        \n       \n        \n        \n    def tribonacci(self, n: int) -> int:\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        \n        F = [0] * 38\n        \n        F[0] = 0\n        F[1] = 1\n        F[2] = 1\n        \n        for i in range(3,n+1):\n            F[i] = F[i-1] + F[i-2] + F[i-3]\n            \n        return F[n]", "from collections import deque \nclass Solution:\n    def tribonacci(self, n: int) -> int:\n        if n>0 and n<3:\n            return 1\n        if n==0:\n            return 0\n        queue = deque([0,1,1])\n        t = 2\n        while t!=n:\n            queue.append(sum(queue))\n            queue.popleft()\n            t+=1\n        return queue[2]", "class Solution:\n    def tribonacci(self, n: int) -> int:\n        T = [0, 1, 1]\n        for n in range(3, n + 1):\n            T.append(T[n - 3] + T[n - 2] + T[n - 1])\n        return T[n]", "class Solution:\n    def tribonacci(self, n: int) -> int:\n        trib = []\n        trib.append(0)\n        trib.append(1)\n        trib.append(1)\n        for i in range(3, n):\n            trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n            \n        if n > 2:\n            return trib[n-1] + trib[n-2] + trib[n-3]\n        else:\n            return trib[n]\n", "class Solution:\n    trib = [0,1,1]\n    def tribonacci(self, n: int) -> int:\n        try:\n            return self.trib[n]\n        except:\n            currlen = len(self.trib)\n            for i in range(currlen,n+1):\n                self.trib.append(self.trib[i-1]+self.trib[i-2]+self.trib[i-3])\n            return self.trib[n]\n", "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if n<3:\n            return 1 if n else 0\n        \n        nums = [0]*(n+1)\n        nums[0]=0\n        nums[1]=1\n        nums[2]=1\n        \n        for i in range(3, n+1):\n            nums[i]=nums[i-1]+nums[i-2]+nums[i-3]\n            \n        return nums[n]\n        \n        \n", "class Solution:\n    DP: List[int] = [0, 1, 1]\n    \n    def tribonacci(self, n: int) -> int:\n        if n >= 0:\n            if n < len(self.DP):\n                return self.DP[n]\n            else:\n                offset: int = len(self.DP)\n                self.DP.extend([0] * (n - offset + 1))\n                for i in range(offset, n + 1):\n                    self.DP[i] = self.DP[i - 3] + self.DP[i - 2] + self.DP[i - 1]\n                return self.DP[n]\n        else:\n            raise ValueError\n", "class Solution:\n    def tribonacci(self, n: int) -> int:\n        t = [0,1,1]\n        if n < 3:\n            return t[n]\n        \n        for i in range(n-2):\n            t.append(sum(t))\n            t = t[1:]\n        \n        return t[2]", "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n < 3:\n            return 1\n        t0, t1, t2 = 0, 1, 1\n        for _ in range(3, n+1):\n            ans = t0 + t1 + t2\n            t0, t1, t2 = t1, t2, ans\n        return ans"]