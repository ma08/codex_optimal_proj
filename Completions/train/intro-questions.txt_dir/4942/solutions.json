["def directions(goal):\n    y = goal.count(\"N\") - goal.count(\"S\")\n    x = goal.count(\"E\") - goal.count(\"W\")\n    \n    return [\"N\"] * y + [\"S\"] * (-y) + [\"E\"] * x + [\"W\"] * (-x)", "def directions(goal):\n    count = lambda s: len([c for c in goal if c == s])\n    ns = 1 * count(\"N\") - 1 * count(\"S\")\n    we = 1 * count(\"W\") - 1 * count(\"E\")\n    ns = [(\"N\" if ns > 0 else \"S\")] * abs(ns)\n    we = [(\"W\" if we > 0 else \"E\")] * abs(we)\n    return ns + we\n", "from collections import Counter\n\n\ndef directions(goal):\n    c = Counter(goal)\n    c[\"N\"], c[\"W\"] = c[\"N\"] - c[\"S\"], c[\"W\"] - c[\"E\"]\n    c[\"S\"], c[\"E\"] = -c[\"N\"], -c[\"W\"]\n    return sorted(c.elements(), key=\"NSEW\".index)", "from collections import Counter\n\ndef directions(goal):\n    c = Counter(goal)\n    for a, b in ['NS', 'EW']:\n        m = min(c[a], c[b])\n        c[a] -= m\n        c[b] -= m\n    return sorted(c.elements(), key='NSEW'.find)", "def directions(goal):\n    MOVES = {'N': [0,1], 'S': [0,-1], 'E': [1,1], 'W': [1,-1]}\n    g = [0,0]\n    for d in goal: g[MOVES[d][0]] += MOVES[d][1]\n    return [\"SN\"[g[0]>=0]] * abs(g[0]) + [\"WE\"[g[1]>=0]] * abs(g[1])", "def directions(goal):\n    y=sum(1 if d=='N' else -1 if d=='S' else 0 for d in goal)\n    x=sum(1 if d=='E' else -1 if d=='W' else 0 for d in goal)\n    return list(('N' if y>0 else 'S')*abs(y) + ('E' if x>0 else 'W')*abs(x))", "def directions(goal):\n\n  y = goal.count('N') - goal.count('S')\n  x = goal.count('E') - goal.count('W')\n  \n  ns = 'N' if y > 0 else 'S'\n  ew = 'E' if x > 0 else 'W'\n  \n  return [_ for _ in abs(y)*ns + abs(x)*ew]", "def directions(goal):\n    while \"S\" in goal and \"N\" in goal:\n        goal.remove(\"N\")\n        goal.remove(\"S\")\n    while \"W\" in goal and \"E\" in goal:\n        goal.remove(\"W\")\n        goal.remove(\"E\")\n    lookup=['N','S', 'E', 'W']\n    key_func=lambda s: (lookup.index(s[0]),s) if s[0] in lookup else (len(lookup),s)\n    return sorted(goal, key=key_func)", "def directions(goal):\n    ans=[]\n    ns = goal.count('N') - goal.count('S')\n    if ns>0: ans.extend(ns*['N'])\n    if ns<0: ans.extend(-ns*['S'])\n    ew = goal.count('E') - goal.count('W')\n    if ew>0: ans.extend(ew*['E'])\n    if ew<0: ans.extend(-ew*['W'])\n    return ans", "def directions(goal):\n#     print(goal)\n    a={i:goal.count(i) for i in set(goal)}\n    print(a)\n    b=[]\n#     print(list(a.keys()) )\n    if  'N' in list(a.keys()) and 'S'  in list(a.keys() ):\n#         print('a.keys()',a.keys())\n        if a['N']>a['S']:\n            ns=a['N']-a['S']\n            b.extend(ns*'N')\n        elif a['N']<a['S']:\n            sn=a['S']-a['N']\n            b.extend(sn*'S')\n        elif a['N']==a['S']:\n            sn=a['S']-a['N']\n        \n    elif 'N' in list(a.keys()):\n#         print(a['N'])   \n        b.extend(a['N']*str('N'))\n    elif 'S' in list(a.keys()):\n#         print(a['S'])  \n        b.extend(a['S']*str('S'))\n    #Code goes here! :)\n    if  'E' in list(a.keys()) and 'W'  in list(a.keys() ):\n#         print('a.keys()',a.keys())\n        if a['E']>a['W']:\n            ew=a['E']-a['W']\n            print(('ew',ew))\n            b.extend(ew*str('E'))\n        elif a['E']<a['W']:\n            we=a['W']-a['E']   \n            print(('we',we))\n            b.extend(we*str('W'))\n    elif 'W' in list(a.keys()):\n        print((a['W']))   \n        b.extend(a['W']*str('W'))\n    elif 'E' in list(a.keys()):\n        print((a['E']))       \n        b.extend(a['E']*str('E'))\n    return b \n"]