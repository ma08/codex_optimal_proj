["def check_generator(gen):\n  if gen.gi_frame is None:\n    return \"Finished\"\n  if gen.gi_frame.f_lasti == -1:\n    return \"Created\"\n  return \"Started\"", "from inspect import getgeneratorstate as gt\nd = {'GEN_CREATED':'Created', 'GEN_SUSPENDED':'Started'}\ndef check_generator(gen):\n    return d.get(gt(gen), 'Finished')\n", "import inspect\ndef check_generator(gen):\n    state = inspect.getgeneratorstate(gen)\n    return [['Created','Started'][state=='GEN_SUSPENDED'],'Finished'][state=='GEN_CLOSED']", "from inspect import getgeneratorstate\ndef check_generator(gen):\n    _ = getgeneratorstate(gen)\n    if _ == \"GEN_CREATED\":\n        return \"Created\"\n    if _ == \"GEN_RUNNING\" or _ == \"GEN_SUSPENDED\":\n        return \"Started\"\n    else:\n        return \"Finished\"", "from inspect import getgeneratorstate\ndef check_generator(g):\n  return {'R':'Created','U':'Started','L':'Finished'}[getgeneratorstate(g)[5]]", "def check_generator(gen):\n    if not gen.gi_frame:\n        return \"Finished\"\n    if gen.gi_frame.f_lasti == -1:\n        return \"Created\"\n    return \"Started\"", "check_generator=lambda g:{'GEN_CREATED':'Created','GEN_CLOSED':'Finished'}.get(__import__('inspect').getgeneratorstate(g),'Started')", "from inspect import getgeneratorstate\n\ndef check_generator(gen):\n    state = getgeneratorstate(gen)\n    if state == 'GEN_CREATED': return 'Created'\n    elif state == 'GEN_SUSPENDED': return 'Started'\n    else: return 'Finished'", "from inspect import getgeneratorstate as gg\ndef check_generator(gen):\n    return {'GEN_CREATED': 'Created', 'GEN_SUSPENDED': 'Started', 'GEN_CLOSED': 'Finished'}[gg(gen)]", "def check_generator(gen):\n    if gen.gi_frame != None:\n        if len(gen.gi_frame.f_locals.keys()) == 1:\n            return 'Created'\n        else:\n            return 'Started'\n    if gen.gi_frame == None:\n        return 'Finished'"]