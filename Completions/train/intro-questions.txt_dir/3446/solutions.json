["def approx_root(n):\n    base = int(n**0.5)\n    return round( base + (n - base**2) / ((base + 1)**2 - base**2) , 2)", "def approx_root(n):\n    m = n**0.5\n    a, b = [int(x) for x in [m, m + 1]]\n    c = a**2\n    return round(a + ((n - c) / (b**2 - c)), 2)", "def approx_root(n):\n    b = int(n ** 0.5)\n    diff_gn = n - b**2\n    diff_lg = (b+1)**2 - b**2\n    return round(b + (diff_gn / diff_lg), 2)", "def approx_root(n):\n    import math\n    s = int(math.sqrt(n))\n    diff_gn = n - s ** 2\n    diff_lg = (s + 1) ** 2 - s ** 2\n    return round(s + diff_gn / diff_lg, 2)", "def approx_root(n):\n    base = int(n ** 0.5)\n    diff_gn = n - base ** 2\n    diff_lg = base * 2 + 1\n    return round(base + diff_gn / diff_lg, 2)", "approx_root=r=lambda n,i=0:n>(i+1)**2and r(n,i+1)or round(i+(n-i*i)/(2*i+1),2)", "approx_root=lambda n:round(next(i+(n-i*i)/(2*i+1)for i in range(n)if(i+1)**2>=n),2)", "def approx_root(n):\n    for i in range(1,int(n**0.5)+2):\n        if i ** 2 > n:\n            base = i - 1\n            break\n    base2 = base + 1\n    diff_gn = n - base ** 2\n    diff_lg = base2 ** 2 - base ** 2\n    return round(base + (diff_gn/diff_lg),2)\n", "import math\n\ndef approx_root(n):\n    a = n ** 0.5\n    b, c = math.floor(a) ** 2, (math.floor(a) + 1) ** 2\n    return a if type(a) == int else round(b ** 0.5 + (n - b) / (c - b), 2)\n", "def approx_root(n):\n    b=int(n**0.5)\n    return round(b+(n-b*b)/((b+1)**2-b*b),2)"]