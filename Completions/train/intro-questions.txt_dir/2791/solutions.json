["def trigrams(phrase):\n    phrase = phrase.replace(\" \", \"_\")\n    return \" \".join([phrase[i:i+3]for i in range(len(phrase)-2)])\n", "def trigrams(phrase):\n    solution = ''\n    if len(phrase) < 3:\n        return solution\n    phrase = phrase.replace(' ','_')\n    for i in range(len(phrase)-2):\n        solution = solution + ' ' + phrase[i:i+3]\n    return solution[1:]", "def trigrams(phrase):\n    phrase = phrase.replace(' ', '_')\n    return ' '.join(''.join(xs) for xs in zip(phrase, phrase[1:], phrase[2:]))", "def trigrams(phrase):\n\n  s = phrase.replace(' ', '_')\n\n  return ' '.join(s[i:i+3] for i in range(len(s)-2))", "def trigrams(p):\n   r=\"\"\n   for i in range(len(p)-2):\n      r+=p[i:i+3].replace(\" \",\"_\")+\" \"\n   return r.strip()", "def trigrams(phrase):\n    p = phrase.replace(' ','_')\n    return ' '.join([p[i:i+3] for i in range(len(p)-2)])\n", "def trigrams(s):\n    return ' '.join([''.join(w).replace(' ', '_') for w in list(zip(s, s[1:], s[2:]))]) if len(s) > 2 else ''", "def trigrams(phrase):\n    if len(phrase) < 3: return ''\n    phrase = phrase.replace(\" \", \"_\")\n    chars = [x for x in phrase]\n    trigram = []\n    for x in range(1, len(chars) - 1):\n        trigram.append(chars[x-1] + chars[x] + chars[x+1])\n    return ' '.join(trigram)", "def trigrams(phrase):\n    svar = ''\n    if len(phrase)<3:\n        return ''\n    else:\n        phrase = phrase.replace(\" \", \"_\")\n        for i in range(len(phrase)-2):\n            svar = svar + ' ' + phrase[i:i+3]\n        return svar[1:]\n        \n", "def trigrams(phrase):\n    if len(phrase) < 3:\n        return ''\n    phrase = phrase.replace(' ', '_')\n    ret = []\n    for i in range(len(phrase) - 2):\n        ret.append(phrase[i:i + 3])\n    return ' '.join(ret)"]