["from collections import Counter\n\ndef solve(*args):\n    c1, c2 = map(Counter, args)\n    return 2 - any(c1[k]-c2[k] >= 2 and k not in c2 for k in c1)", "def solve(str1, str2):\n    return 2 - any(str1.count(c) > 1 and c not in str2 for c in str1)", "def solve(a, b):\n    return [2, 1][any(a.count(e) > 1 for e in a if e not in b)]", "from collections import Counter\n\ndef solve(str1, str2):\n    C, S = Counter(str1), set(str2)\n    return all(v == 1 or k in S for k,v in C.items()) + 1", "def solve(str1, str2):\n    s = set(str1) - set(str2)\n    return 1 if any(c for c in s if str1.count(c) > 1) else 2 ", "def solve(str1,str2):\n    for i in range(len(str1)):\n        if str1[i] not in str2 and str1.count(str1[i]) > 1: return 1\n    return 2\n", "solve=lambda s,s1:any(s.count(i)>=2 and i not in s1 for i in s) or 2", "solve=lambda Q,S:1 if any(V in Q[1+F:] and V not in S for F,V in enumerate(Q)) else 2", "from collections import Counter\ndef solve(str1,str2):\n    c1=Counter(str1)\n    for k,v in c1.items():\n        if v>=2 and k not in str2:\n            return 1\n    return 2", "def solve(str1,str2):\n    a=set(str1)\n    return 1 if any(str1.count(i)>1 and i not in str2 for i in a) else 2"]