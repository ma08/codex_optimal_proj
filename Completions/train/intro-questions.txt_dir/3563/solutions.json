["def distance(n):\n    if n == 1: return 0\n    r = 0 - (1 - n ** .5) // 2\n    d, m = divmod(n - (2*r - 1) ** 2 - 1, 2*r)\n    z = (r * (1 + 1j) - m - 1) * 1j ** d\n    return abs(z.real) + abs(z.imag)", "from itertools import count\n\ndef pos(n):\n    for i in count(1, 2):\n        if i*i >= n:\n            break\n    n -= (i - 2) ** 2\n    step = i - 1\n    p = (1+1j) * (step//2)\n    for d in [-1, -1j, +1, +1j]:\n        x = min(step, n)\n        p += x * d\n        n -= x\n    return p\n    \n    \ndef distance(n):\n    p = pos(n)\n    return abs(int(p.real)) + abs(int(p.imag))", "import math\n\ndef distance(n) :\n    if n == 1: return 0\n    level = (math.ceil(n**0.5) // 2)\n    l_start = ((level * 2) - 1)**2 + 1\n    quad = (n - l_start) // (2 * level)\n    l_span = (2 * level) + 1\n    direct = (l_start - 1 + (l_span // 2)) + (l_span - 1) * quad\n    dist = (level) + abs(direct - n)\n    return dist", "distance=lambda n: (lambda s: 0 if n==1 else s+abs(s-(n-4*s*s+4*s-1) % (2*s)))(int((n-1)**.5+1)>>1)", "import math\ndef distance(n):\n    if n == 1:\n        return 0\n    if n <= 9:\n        return 2 if n%2 else 1\n    lower = math.ceil(n**0.5)-2 if math.ceil(n**0.5)%2 else math.ceil(n**0.5)-1\n    cycle = list(range(lower, (lower+1)//2-1, -1)) + list(range((lower+1)//2+1, lower+2))\n    return cycle[(n-lower**2-1) % len(cycle)]", "def distance(n):\n    if n==1:\n        return 0\n    i=1\n    while(True):\n        if n<=(2*i-1)**2:\n            break\n        i+=1\n    x=(n-(2*i-3)**2-1)%(2*i-2)\n    h=(2*i-2)//2\n    if x<h:\n        return i+h-x-2\n    else:\n        return i+x-h", "from math import *\n\ndef distance(n):\n    k=ceil((sqrt(n)-1)/2)\n    t=2*k+1\n    m=t**2 \n    t=t-1\n    if n>=m-t: \n        x = k-(m-n),-k   \n        return sum(map(abs,x))\n    m -= t\n    if n>=m-t:\n        x = -k,-k+(m-n)  \n        return sum(map(abs,x))\n    m -= t\n    if n>=m-t:\n        x =  -k+(m-n),k \n        return sum(map(abs,x))\n    x = k,k-(m-n-t)\n    return sum(map(abs,x))", "from math import sqrt, floor\n\ndef distance(n):\n    if n == 1: return 0\n    x = floor(sqrt(n-1) + 1) // 2\n    return x + abs(x - (n - 4*x*(x + 1) - 1) % (2*x))", "from math import ceil\ndef distance(n):\n    border = ceil(int(n ** .5) / 2) + int(not (n ** .5).is_integer())\n    k = border * 2 - 1\n    a = k ** 2\n    for i in range(4):\n        if a-k <n <=a:\n            return (border - 1) + abs(n - ((a - k + 1) + a) // 2)\n        a -= (k-1)", "from math import ceil\n\ndef distance(n):\n    m = ceil((n**.5-1)/2)\n    x=y=m\n    t = 1+4*m*(m+1)\n    for dx,dy in [(0,-1),(-1,0),(0,1),(1,0)]:\n        if n==t: break\n        d = min(t-n,2*m)\n        x+=dx*d\n        y+=dy*d\n        t-=d\n    return abs(x)+abs(y)"]