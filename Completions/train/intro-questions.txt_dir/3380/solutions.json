["from re import sub\n\ndef look_and_say_sequence(s, n):\n    for _ in range(1, n):\n        s = sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1), s)\n    return s", "def look_and_say_sequence(first, n):    \n    result = first\n    \n    for _ in range(n-1):\n    \n        sequence = result\n        result = ''\n        index = 0\n        \n        while index < len(sequence):\n        \n            pending = sequence[index]\n            count = 0\n            \n            while index < len(sequence) and pending == sequence[index]:\n                count += 1\n                index += 1\n            \n            result += \"{}{}\".format(count, pending)\n            \n    return result", "from itertools import groupby\nfrom functools import reduce\ndef look_and_say_sequence(first_element, n):\n    return reduce(lambda s, _: ''.join('%d%s' % (len(list(g)), n) for n, g in groupby(s)), range(n - 1), first_element)", "look_and_say_sequence=l=lambda s,n:n>1and l(''.join(str(len(list(g)))+k for k,g in __import__('itertools').groupby(s)),n-1)or s", "from itertools import groupby\n\ndef look_and_say_sequence(e, n):\n    for i in range(n-1):\n        e = ''.join(f'{len(list(grp))}{key}' for key, grp in groupby(e))\n    return e\n", "import re\ndef look_and_say_sequence(element, n):\n    return element if n == 1 else look_and_say_sequence(''.join(f'{len(e.group())}{e.group(1)}' for e in re.finditer(r'(\\d)\\1*',element)), n-1)", "import re\ndef look_and_say_sequence(data, n):\n    return data if n == 1 else look_and_say_sequence(''.join(f'{len(e.group(0))}{e.group(1)}' for e in re.finditer(r\"(\\d)\\1*\", data)), n-1)\n", "from itertools import groupby\n\ndef look_and_say_sequence(seq, n):\n    if seq == \"22\":\n        return \"22\"\n    for _ in range(1, n):\n        seq = \"\".join(f\"{len(list(b))}{a}\" for a, b in groupby(seq))\n    return seq\n    \n", "from itertools import groupby\n\ndef look_and_say_sequence(first_element, n):\n    if first_element == \"22\": return \"22\"\n    for _ in range(n-1):\n        first_element = ''.join(f\"{len(list(l))}{c}\" for c,l in groupby(first_element))\n    return first_element", "def look_and_say_sequence(e, n):\n    for i in range(1, n):\n        e = look_and_say(e)\n    return e\n    \ndef look_and_say(e):\n    current, count, seq = e[0], 0, ''\n    \n    for c in e:\n        if c == current:\n            count += 1\n        else:\n            seq += f'{count}{current}'\n            count, current = 1, c\n            \n    return seq + f'{count}{current}'\n\n            \n"]