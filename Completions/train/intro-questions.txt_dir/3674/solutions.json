["def add_binary(a,b):\n    return bin(a+b)[2:]\n", "def add_binary(a,b):\n    return '{0:b}'.format(a + b)", "def add_binary(a, b):\n    return format(a + b, 'b')\n", "def add_binary(a,b):\n    \"\"\"Adds a and b together and returns a binary string\"\"\"\n    return bin(a + b)[2::]", "def find_highest_power_2(num):\n    n=0\n    while 2**n <= num:\n        n += 1\n    return n-1    \n\ndef add_binary(a,b):\n    sum = a + b\n    number = 0\n    while sum != 0:\n        place_holder = find_highest_power_2(sum)\n        number += 10**place_holder\n        sum = sum - 2**place_holder\n    return str(number)     \n        \n", "def add_binary(a,b):\n    c = a + b \n    return bin(c).replace('0b','')", "def add_binary(a,b):\n    return convert_to_binary(a + b)[::-1]\n\ndef convert_to_binary(num):\n    if num == 0:\n        return '1'\n    elif num == 1:\n        return '1'\n    elif num % 2 == 0:\n        return '0' + convert_to_binary(num / 2)\n    else:\n        return '1' + convert_to_binary(num - 1)[1:]", "def add_binary(a,b):\n    return '{:b}'.format(a+b)", "def add_binary(a,b):\n    return f\"{a + b:b}\"", "def add_binary(a,b):\n    n = a + b\n    binList = []\n    while (n > 0):\n        binList.append(n % 2)\n        n = n // 2\n    return ''.join(map(str, reversed(binList)))\n", "def add_binary(a,b):\n    \"\"\"Adds a and b together and returns a binary string\"\"\"\n    if (a + b) >= 0:\n        return bin(a + b)[2:]\n    else:\n        return \"-\" + bin(a + b)[3:]", "add_binary=lambda a,b: bin(a+b)[2:]", "def add_binary(a,b):\n    # The bin() function returns the binary version of a integer.\n    # The result will always start with the prefix 0b.\n    return bin(a + b)[2:]\n", "def add_binary(a,b):\n    return str(bin(a+b)).split('b')[1]", "def add_binary(a,b):\n    # Use bin() Python function and turn result to str()\n    return str(bin(a+b)[2:])", "def add_binary(n1, n2):\n  return f'{n1 + n2:b}'", "def add_binary(*a):\n  return '{:b}'.format(sum(a))", "def add_binary(a,b):\n    return str(bin(a+b))[2:]", "def add_binary(a,b):\n  return (format(a+b,'b'))\nprint(add_binary(1,1))", "def add_binary(a,b): return '{0:0b}'.format(a + b)", "def add_binary(a,b):\n    return bin(a+b)[2::]", "def add_binary(a,b):\n    #your code here\n    c = a + b\n    l = []\n    if c < 0:\n        return '-' + dec2bin(abs(c))\n    while True:\n        c, remainder = divmod(c, 2)\n        l.append(str(remainder))\n        if c == 0:\n            return ''.join(l[::-1])", "def add_binary(a,b):\n    ans = a+b\n    result = \"\"\n    while ans!=0:\n        result += str(ans%2)\n        ans = ans//2\n    return result[::-1]", "def add_binary(a,b):   \n    return toBinary(a+b)\n\ndef toBinary(n):\n    result = ''\n    while n>1:\n        result += str(n%2)\n        n = n//2\n    result += str(n%2)\n    return result[::-1]\n", "def add_binary(a,b):\n    ans = a + b\n    return str(int(bin(ans)[2:]))", "def add_binary(a,b):\n    return '{number:b}'.format(number=a + b)", "def add_binary(a,b):\n    #your code here\n    return str(bin(a+b))[2::]", "def add_binary(a: int, b: int) -> str:\n    \"\"\" Add two numbers together and returns their sum in binary. \"\"\"\n    return format(a + b, \"b\")", "def add_binary(a,b):\n    #your code here\n    def translate_bin(dec):\n        if dec == 0:\n            return \"0\"\n        elif dec == 1:\n            return \"1\"\n        else:\n            return  translate_bin(dec // 2) + str(dec % 2)\n        \n    return translate_bin(a+b)", "def add_binary(a,b):\n    #your code here\n    res=a+b #sum first\n    buf = ''\n    while res >= 1: #since the number in binary can be represented as\n                    #a reverse of remainders of series of it divisions\n                    #by 2 - we'll do the divisions first...\n        buf += str(res % 2)\n        res = res // 2\n    buf = buf[::-1] #...and then reverse the string\n    return buf", "add_binary = lambda a,b: format(a+b, 'b')", "def add_binary(a,b):\n    r = a + b\n    s = ''\n    while (r > 0):\n        s += '1' if r % 2 == 1 else '0'\n        r = r >> 1\n    \n    return s[::-1]", "def add_binary(a, b):\n    c = a + b\n    output = []\n    while c / 2 != 0:\n        output.append(str(c % 2))\n        c = c // 2\n    output.reverse()\n    return \"\".join(output)\n", "def add_binary(a,b):\n    output = \"\"\n    result = a + b\n\n    bit = 0x01\n\n    while bit <= result:\n        output = (\"1\" if (bit & result) > 0 else \"0\") + output\n        bit *= 2\n\n    return output", "def add_binary(a, b):\n    sum = a + b\n\n    divisors = list()\n    for r in range(sum):\n        x = 2 ** r\n        if x > sum:\n            break\n        divisors.append(x)\n\n    divisors = list(reversed(divisors))\n\n    output = \"\"\n    count = 0\n    while sum > 0:\n        if divisors[count] > sum:\n            output = output + \"0\"\n        else:\n            output = output + \"1\"\n            sum -= divisors[count]\n            if sum == 0:\n                output = output + \"0\" * (len(divisors) - count - 1)\n        count += 1\n\n    return output\n", "def add_binary(a,b):\n    #your code here\n    ans = bin(a+b)\n    ans = str(ans)\n    ans = ans[2:]\n    return ans\n    \n", "def add_binary(a,b):\n    #your code here\n    c = a + b\n    d = str(bin(c))\n    f = d[2:]\n    return f\n", "def add_binary(a,b):\n    return dec2bin(a + b)\n    \ndef dec2bin(dec):\n    bin_right = dec % 2\n    dec_left = dec // 2\n    if dec_left < 1:\n        return str(bin_right)\n    else:\n        return str(dec2bin(dec_left)) + str(bin_right)  ", "def add_binary(a,b):\n    results_dec =  a + b\n    results_bin = bin(results_dec)\n    results_bin = results_bin[2:len(results_bin)]\n    return results_bin\n", "def add_binary(a,b):\n    return bin(a+b).replace('0b', '')", "def add_binary(a,b):\n    #your code here\n    tot = a + b\n    i = 0\n    binsum = ''\n\n    while i < i+1:\n\n        if tot >= 2**i and tot < 2**(i+1):\n            binsum = binsum + '1'\n            tot = tot - 2**i\n\n            for j in range(i-1,-1, -1):\n                \n                if tot < 2**j:\n                    binsum = binsum +'0'\n                else:\n                    binsum = binsum + '1'\n                    tot = tot - 2**j\n            break            \n        i+=1 \n        \n    return binsum\n\n\nprint(add_binary(43,11))", "def add_binary(a,b):\n    sum = a+b\n    binario = bin(sum)\n    return binario[2:]", "def add_binary(a,b):\n    fun = lambda x: fun(x//2) + str(x%2) if x>=1 else ''\n    return fun(a+b)", "def add_binary(a,b):\n    c = bin(a + b)\n    bin_c = \"\"\n    bin_lst=[]\n    for char in c:\n        bin_lst.append(char)\n    for num in bin_lst[2:len(bin_lst)]:\n        bin_c += num\n    return bin_c", "def add_binary(a,b):\n    c = bin(int(a)+int(b))\n    c = str(c)\n    c = list(c)\n    return(''.join(c[2:len(c)+1:]))", "def add_binary(a,b):\n    sum1 = int(a+b)\n    i =0\n    str1=\"\"\n    if sum1 == 0:\n        str1='0'\n    while sum1 != 0:\n        rem= int(sum1 % 2 )\n        str1 = str(rem)+str1\n        sum1=int(sum1//2)\n    return str1", "def add_binary(a,b):\n    #your code here\n    summ = a + b\n    binary = ''\n    while(True):\n        rem = summ % 2\n        binary += str(rem)\n        summ -= summ % 2\n        summ //= 2\n        if summ == 0:\n            break\n    return binary[::-1]", "def add_binary(a,b):\n    c = a+b\n    binary = \"\"\n    while (c > 1): \n      binary = binary + str(c % 2)\n      c = (c // 2) \n    binary = binary[::-1]\n    binary = str(c) + binary\n    return binary\n\n", "def add_binary(a,b):\n    # binary is base 2.\n    total = a + b\n    out_str = \"\"\n    while total > 0:\n        if total % 2 == 0:\n            out_str = \"0\" + out_str # prepend\n        else:\n            out_str = \"1\" + out_str\n        total = total//2 # make sure to use integer division\n    return out_str    \n", "add_binary = lambda _,__: bin(_+__)[2:]      ", "def add_binary(a,b):\n    c = a+b\n    bine = str(bin(c)[2:])\n    return bine\n    \n", "def add_binary(a,b):\n    #create a string variable with the sum of the given numbers, and convert that sum to binary\n    string = bin(a + b)\n    #Take out the first 2 characters of the \"binary\" strings and return  \n    return string.replace('0b', '')  ", "def add_binary(a,b):\n    if type(a)== str and type(b) == str:\n        res = bin(int(a,2) + int(b, 2))\n    else: res = bin(a+b)\n    return (res[2:])", "def add_binary(a,b):\n    num = a+b\n    temp = bin(num)\n    index = 0\n    binary = \"\"\n    for i in temp:\n        if index != 0 and index != 1:\n            binary += i\n        index += 1\n    return binary\n", "def add_binary(a,b):\n    itog = ''\n    c = a + b\n    while c != 1:\n        itog = str(c % 2) + itog\n        c = c // 2\n    itog ='1' + itog\n    return itog", "import math\ndef add_binary(a,b):\n    assert type(a) is int\n    assert type(b) is int\n    a = a+b\n    exps = []\n    while(a!=0):\n        b = int(math.floor(math.log(a,2)))\n        exps.append(b)\n        if a == 1: break\n        a = (a%(2**b))\n    byte = ''.join((['0','1'][x in exps] for x in range(exps[0],-1,-1)))\n    return byte", "def add_binary(a,b):\n    c = a + b\n    # find the upper bound 2^i\n    # try all lower 2^i-1 etc to design 1s\n    \n    x = 0\n    while 2**x <= c:\n        x+=1\n    \n    if 2**x >c:\n        x -=1\n    \n    reverse = [i for i in range(x+1)]\n    reverse = reverse[::-1]\n    print(reverse)\n    \n    res = \"\"\n    for i in reverse:\n        if 2**i <= c:\n            c -= 2**i\n            res += \"1\"\n        else:\n            res += \"0\"\n            \n    return res", "def add_binary(a,b):\n    #your code here\n    count = a + b\n    output = ''\n    \n    while True:\n        output += str(count % 2)\n        count = count // 2\n        \n        if count < 2:\n            output += str(count)\n            output = output[::-1]\n            \n            while output.startswith('0'):\n                output = output[1:]\n                \n            return output\n", "def add_binary(a,b):\n    ans = bin(int(a) + int(b))\n    ans = str(ans)\n    return ans[2:]", "def add_binary(a,b):\n    'Add two numbers'\n    add = a + b\n    'Convert the sum to binary (excluding the two first characters) and then convert into a string'\n    return str(int(bin(add)[2:]))\n", "def add_binary(a,b):\n    suma=bin(a+b)\n    return suma[2:len(suma)]\n\n", "def add_binary(a,b):\n    binaryNum = \"\"\n    q = 0\n    mod = 0\n    cSum = a + b\n    while cSum > 0:\n        mod = cSum % 2\n        cSum //= 2\n        binaryNum += str(mod)\n    return binaryNum[::-1]\n", "def add_binary(a,b):\n    n = a + b\n    s = []\n    while n != 0:\n        n, b = divmod(n, 2)\n        s.insert(0,b)\n    return ''.join(map(str,s))", "def add_binary(int1=0, int2=1):\n    bin1 = bin(int1)\n    bin2 = bin(int2)\n    int_sum = int(bin1, 2) + int(bin2, 2)\n    bin_sum = bin(int_sum)\n    return bin_sum[2:]", "import math\ndef add_binary(a,b):\n    total = a + b\n    bin = \"\"\n    power = int(math.log(total,2))\n    runsum = 0\n    while power >= 0:\n        if 2**power + runsum <= total:\n            bin += \"1\"\n            runsum += 2**power\n        else:\n            bin += \"0\"\n        power -= 1    \n    first_1 = bin.index('1')\n    return bin[first_1:]      ", "import math\n\ndef add_binary(a,b):\n    sum = a+b\n    return bin(sum)[2:]\n    \n", "def add_binary(a,b):\n    v= a+b\n    d=bin(v)[2:]\n    c= str(d)\n    return c", "def add_binary(a,b):\n    #your code here\n    res= ''\n    c = a + b\n    \n    while c> 1:\n        rem=c%2\n        res+=str(rem)\n        c = c//2\n        \n    res+=str(1)\n    return (''.join(list(reversed(res))))", "def add_binary(a,b):\n    to_binary = bin(a+b)\n    return to_binary[2:]", "def add_binary(a,b):\n    #your code here\n    x = a + b\n    newstr = \"\"\n    while x > 0:\n        bin = x%2\n        newstr+= str(bin)\n        x = x//2\n    newstr = newstr[::-1]\n    return newstr", "def add_binary(a,b):\n    sum = a + b\n    res = \"\"\n    while sum > 0:\n        if sum & 0x1:\n            res = \"1\" + res\n        else:\n            res = \"0\" + res\n        sum = sum >> 1;\n    return res", "def add_binary(a,b):\n    out = a + b\n    out = bin(out)\n    out = out.split(\"b\")\n    return out[1]", "def add_binary(a,b):\n    Num = a + b\n    BinString = str(bin(Num))[2:]\n    return BinString\n", "def add_binary(n1, n2):\n    n = n1 + n2\n    def decToBin(num):\n        if num == 0: return ''\n        else: return decToBin(num//2) + str(num%2)\n    if n == 0:\n        return 0\n    else: return decToBin(n)", "def add_binary(a,b):\n    total = a + b\n    total = (bin(total)[2:])\n    return total", "def add_binary(a,b):\n    return convert_to_binary(a+b)\n\ndef convert_to_binary(a): \n    remainders = []\n    while( a // 2 != 0):\n        remainders.append(str(a%2))\n        a = a // 2\n    return '1'+''.join(remainders[::-1])", "def add_binary(a,b):\n    sum = a + b\n    bin(sum)\n    return bin(sum)[2:]", "def add_binary(a,b):\n    sum_result = a + b;\n    sum_result = '{0:b}'.format(sum_result)\n    return sum_result", "def add_binary(a,b):\n    return str(bin(a+b))[2:]\n    #seems to be faster than \"{0:b}\".format(a+b)\n", "def add_binary(a,b):\n    _bin = bin(a + b)\n    return \"{0:b}\".format(a + b)\n", "def add_binary(a,b):\n    s = a+b\n    bins = [s%2]\n    while s>1:\n        s = s//2\n        bins.append(s%2)\n        \n    final = \"\"\n    for i in bins[::-1]:\n        final +=str(i)\n        \n    return final", "def add_binary(a,b):\n    #your code here\n    \n    num = a + b\n    binary = ''\n    while num > 0:\n        val = num % 2\n        binary += str(val)\n        num = num // 2\n    \n    return(binary[::-1])", "def add_binary(a,b):\n    # return bin(a+b)[2:]\n    if a == 0 and b == 0:\n        return ''\n    elif a&b&1:\n        return add_binary(a//2+1,b//2)+'0'\n    elif (a|b)&1:\n        return add_binary(a//2,b//2)+'1'\n    else:\n        return add_binary(a//2,b//2)+'0'", "def add_binary(a,b):\n    sum = a + b\n    binary_sum = \"\"\n    while sum > 0:\n        binary_sum = str(sum % 2) + binary_sum\n        sum = sum // 2\n    \n    return binary_sum", "def add_binary(a,b):\n    somme=a+b\n    binaire=''\n    i=0\n    while somme >= 2**(i+1) :\n        i+=1\n    while i >= 0 :\n        if somme >= 2**i :\n            binaire= binaire + str(1) \n            somme=somme-(2**i)\n        else :\n            binaire= binaire + str(0)\n        i-=1    \n    return binaire\n            \n        \n", "def add_binary(a,b):\n    sum=int(a)+int(b)\n    t=bin(sum)\n    s= t[2:]\n    \n    return s\n    #your code here\n", "def add_binary(a,b):\n    #your code here\n    c=a+b\n    x=''\n    while(c!=0):\n        z=c%2\n        x+=str(z)\n        c=c//2\n    return x[::-1]\n", "def add_binary(a,b):\n    z=a+b\n    m=[]\n    while(z!=0):\n        m.append(z%2)\n        z=z//2\n    for i in m[::-1]:\n        z=z*10+i\n    return str(z)\n    #your code here\n", "def add_binary(a,b):\n    sum = a + b\n    msg = []\n    y = sum\n    while y > 1:\n        y = y // 2\n        msg.insert(0, str(y % 2))\n\n    msg.append(str(sum % 2))\n\n    return \"\".join(msg)\n", "def add_binary(a,b):\n    s = a+b\n    fin = []\n    while s != 0:\n        quo  = s//2\n        rem = s%2\n        fin.append(rem)\n        s = quo\n    fin.reverse()\n    return ''.join(map(str,fin))", "def add_binary(a,b):\n    suma = a + b\n    temp = ''\n    while suma > 0:\n        temp = str(suma % 2) + temp\n        suma = suma // 2\n    return temp", "def add_binary(a,b):\n    decimal = a + b\n    output = ''\n    while decimal != 0:\n        str_bin = str(decimal % 2)\n        output = output + str_bin\n        decimal = decimal // 2 \n    return output[::-1]", "def add_binary(a,b):\n    i = a+b\n    result = []\n    while i >= 2:\n        result.append(str(i % 2))\n        i //= 2\n    result.append(str(i % 2))\n    return(''.join(result[::-1]))", "def add_binary(a,b):\n    \n    suma = bin(a + b)\n\n\n    suma = suma.split(\"0b\")\n\n    return(str(suma[1]))\n    \n", "def add_binary(a,b):\n    sum = a ++ b\n    sum_bin = '{0:b}'.format(sum)\n    return sum_bin\n    \n    \nprint(add_binary(5,1))", "def add_binary(a,b):\n    \n# =============================================================================\n#     This function adds two numbers together and returns their sum in binary. \n#     The conversion is done after the addition.\n# \n#     The functionn returns the binary number as a string.\n#     \n#     Examples:\n#         add_binary(2,2) ==> \"100\"\n#         add_binary(51,12) ==> \"111111\"\n# =============================================================================\n    \n    return bin(a+b)[2::]"]