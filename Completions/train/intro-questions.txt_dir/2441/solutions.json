["class Solution:\n    def makeGood(self, s: str) -> str:\n        \n        stack=[]\n        \n        for i in s:\n            if (stack!=[] and i.lower()==stack[-1].lower() and i!=stack[-1] ) :\n                stack.pop()\n            else:\n                stack.append(i)\n        return ''.join(stack)\n                \n            \n", "class Solution:\n    def makeGood(self, s: str) -> str:\n        i=0\n        while i<len(s)-1:\n            if abs(ord(s[i])-ord(s[i+1]))==32:\n                s=s[:i]+s[i+2:]\n                i-=1\n                i=max(0,i)\n            else:\n                i+=1\n        return s", "class Solution:\n    def makeGood(self, s: str) -> str:\n        res = []\n        for i in s:\n            if not res:\n                res.append(i)\n            elif res[-1].islower() and res[-1].upper() == i:\n                res.pop()\n            elif res[-1].isupper() and res[-1].lower() == i:\n                res.pop()\n            else:\n                res.append(i)\n        return ''.join(res)", "class Solution:\n    def makeGood(self, s: str) -> str:\n        if len(s) == 1:\n            return s\n        \n        for i in range(len(s) - 2, -1, -1):\n            if s[i].lower() == s[i+1].lower() and s[i] != s[i+1]:\n                s = s[:i] + s[i+2:]\n                return self.makeGood(s)\n                \n        \n        \n      \n        return s", "class Solution:\n    def makeGood(self, s: str) -> str:\n        listx=[('a','A'),('b','B'),('c','C'),('d','D'),('e','E'),('f','F'),('g','G'),('h','H'),('i','I'),('j','J'),('k','K'),('l','L'),('m','M'),('n','N'),('o','O'),('p','P'),('q','Q'),('r','R'),('s','S'),('t','T'),('u','U'),('v','V'),('w','W'),('x','X'),('y','Y'),('z','Z'),('A','a'),('B','b'),('C','c'),('D','d'),('E','e'),('F','f'),('G','g'),('H','h'),('I','i'),('J','j'),('K','k'),('L','l'),('M','m'),('N','n'),('O','o'),('P','p'),('Q','q'),('R','r'),('S','s'),('T','t'),('U','u'),('V','v'),('W','w'),('X','x'),('Y','y'),('Z','z')]\n        listy=[s[0]]\n        empty=''\n        for i in range(1,len(s)):\n            if listy:\n                a=listy.pop()\n                if (a,s[i]) not in listx:\n                    listy.append(a)\n                    listy.append(s[i])\n            else:\n                listy.append(s[i])\n        if listy:\n            return ''.join(listy)\n        else:\n            return empty\n            \n", "class Solution:\n    def makeGood(self, s: str) -> str:\n        stack = []\n        for i in range(len(s)):\n            if (len(stack) == 0):\n                stack.append(s[i])\n            elif (s[i].isupper() and stack[-1].islower() and (stack[-1].upper() == s[i])):\n                stack.pop(-1)\n            elif (s[i].islower() and stack[-1].isupper() and (stack[-1].lower() == s[i])):\n                  stack.pop(-1)\n            else:\n                stack.append(s[i])\n        return ''.join(stack)\n    \n    \n"]