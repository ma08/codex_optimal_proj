["class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if not A: return True\n        increasing = True\n        index = 0\n        while index<len(A)-1 and A[index] == A[index+1]:\n            index+=1\n        if index == len(A)-1:\n            return True\n        if A[index] > A[index+1]:\n            increasing = False\n        for i in range(len(A)-1):\n            if increasing:\n                if A[i] > A[i+1]:\n                    return False\n            else:\n                if A[i] < A[i+1]:\n                    return False\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        n = len(A)\n        if self.checkMonInc(A, n) or self.checkMonDec(A, n):\n            return True\n        return False\n        \n    def checkMonInc(self, A, n):\n        for i in range(1, n):\n            if A[i] >= A[i-1]:\n                continue\n            else:\n                return False\n        return True\n\n    def checkMonDec(self, A, n):\n        for i in range(1, n):\n            if A[i] <= A[i-1]:\n                continue\n            else:\n                return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_asc = True\n        is_desc = True\n        \n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                is_asc = False\n            if A[i] < A[i+1]:\n                is_desc = False\n                \n        return is_asc or is_desc", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) == 1:\n            return True\n        \n        direction = 0\n        \n        for i in range(len(A)-1) : \n            j = i+1\n            tmp = A[i] - A[j]\n            if tmp == 0:\n                continue\n            elif tmp > 0:\n                if direction == 0 or direction == -1:\n                #if direction < 1:\n                    direction = -1\n                else:\n                    return False\n            else:\n                if direction == 0 or direction == 1:\n                #if direction > -1 :\n                    direction = 1\n                else:\n                    return False\n            \n            #if A[i] == A[j]:\n            #    continue\n            #elif A[i] > A[j]:\n            #    if direction < 0:\n            #        continue\n            #    elif direction == 0:\n            #        direction = -1\n            #    else:\n            #        return False\n            #else:# A[i] < A[j]\n            #    if direction > 0:\n            #        continue\n            #    elif direction == 0:\n            #        direction = 1\n            #    else:\n            #        return False\n                \n        return True\n                    \n                    \n            \n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n        decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n        return increasing or decreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = decreasing = True\n\n        for i, value in enumerate(A):\n            if i:\n                if value > A[i - 1]:\n                    increasing = False\n                if value < A[i - 1]:\n                    decreasing = False\n            if not increasing and not decreasing:\n                return False\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        monotonic = 2\n        lenA = len(A)\n        for i in range(lenA-1):\n            if A[i] > A[i+1]:\n                monotonic -= 1\n                break\n        for i in range(lenA-1):\n            if A[i] < A[i+1]:\n                monotonic -= 1\n                break\n        return monotonic", "class Solution(object):\n    def isMonotonic(self, A):\n        increasing = decreasing = True\n\n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                increasing = False\n            if A[i] < A[i+1]:\n                decreasing = False\n\n        return increasing or decreasing\n                \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        prev = 0\n        cur = 1\n        while cur < len(A):\n            if A[prev] <= A[cur]:\n                prev += 1\n                cur += 1\n            else:\n                break\n        if cur >= len(A):\n            return True\n        prev = 0\n        cur = 1\n        while cur < len(A):\n            if A[prev] >= A[cur]:\n                prev += 1\n                cur += 1\n            else:\n                break\n        if cur >= len(A):\n            return True\n        return False\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        # two pointers to traverse array checking increasing and decreasing at the same time.\n        i, j = 0, 0\n        # two variables to keep track of values increasing and decreasing.\n        tempi, tempj = -100000, 100000\n        # flag to check if monotonic.\n        flagi, flagj = True, True\n        # go through array, check if monotonic.\n        while i < len(A) and j < len(A):\n            if tempi <= A[i]:\n                tempi = A[i]\n            else:\n                flagi = False\n            if tempj >= A[j]:\n                tempj = A[j]\n            else:\n                flagj = False \n            i += 1\n            j += 1\n        # return True by default.\n        return flagi or flagj", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if A == sorted(A) or A == sorted(A, reverse=True) :\n            return 1\n        return 0", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        flow = None\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                if not flow:\n                    flow = 'd'\n                \n                elif flow != 'd':\n                    return False\n                continue\n            if  A[i] < A[i+1]:\n                if not flow:\n                    flow = 'i'\n                elif flow != 'i':\n                    return False\n                continue\n        return True\n                        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if sorted(A)==A or sorted(A,reverse=True)==A:\n            return True\n        else:\n            return False\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        n = len(A)\n        return all([A[i] >= A[i - 1] for i in range(1, n)]) or all([A[i] <= A[i - 1] for i in range(1, n)])", "class Solution:\n    def isMonotonic(self, a: List[int]) -> bool:\n        n = len(a)\n        std = 0\n        for i in range(0, n-1):\n\n            sgn = a[i] - a[i+1]\n\n            if sgn == 0:\n                continue\n                \n            sgn = abs(sgn)/sgn\n            if std == 0:\n                std = sgn\n            if sgn != std and sgn != 0:\n                return False\n\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        res=''\n        for x in range(1, len(A)):\n            if A[x]>A[x-1]:\n                res='pos'\n            elif A[x]==A[x-1]:\n                continue\n            else:\n                res='neg'\n        if (res!='pos' and res!='neg'):\n            return True\n        for x in range(1, len(A)):\n            if res=='neg':\n                if A[x] > A[x-1]:\n                    return False\n                else:\n                    continue\n            else:\n                if A[x] < A[x-1]:\n                    return False\n                else:\n                    continue\n        return True\n                \n                \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) == 1:\n            return True\n        i = 0\n        while (i < len(A) - 1 and A[i] == A[i + 1]):\n            i += 1\n        if (i >= len(A) - 1):\n            return True\n        if A[i] > A[i + 1]:\n            while i < len(A) - 1:\n                if A[i] < A[i + 1]:\n                    return False\n                i += 1\n            return True\n        else:\n            while i < len(A) - 1:\n                if A[i] > A[i + 1]:\n                    return False\n                i += 1\n            return True\n#         either we are at a spot where A[i] != A[i + 1]\n", "class Solution:\n    def isMonotonic(self, arr: List[int]) -> bool:\n        length = len(arr)\n        dec = inc = 1\n        for i in range(length-1):\n            if arr[i] < arr[i+1]:\n                dec += 1\n            elif arr[i] > arr[i+1]:\n                inc += 1\n            else:\n                dec += 1\n                inc += 1\n        if dec == length:\n            return True\n        elif inc == length:\n            return True\n        else:\n            return False", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        diff_lst = [A[i + 1] - A[i] for i in range(len(A) - 1)]\n        positive = all(i >= 0 for i in diff_lst)\n        negative = all(i <= 0 for i in diff_lst)\n        return positive or negative", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        dec = False\n        \n        for i in range(len(A) - 1):\n            if A[i] < A[i+1]:\n                dec = True\n        for i in range(len(A) - 1):\n            if A[i] > A[i+1] and dec:\n                return False\n        return True", "class Solution:\n    def isMonotonic(self, A):\n        is_monotonic_asc = True;\n        is_monotonic_desc = True;\n        \n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                is_monotonic_asc = False;\n            if A[i] > A[i - 1]:\n                is_monotonic_desc = False;\n            \n        return is_monotonic_asc or is_monotonic_desc;", "class Solution:\n    def isMonotonic(self, a: List[int]) -> bool:\n        isIncreasing = isDecreasing = True\n        for i in range(len(a) - 1):\n            if(a[i] < a[i+1]):\n                isIncreasing = False\n            if(a[i] > a[i+1]):\n                isDecreasing = False\n        return isIncreasing or isDecreasing\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        inc, dec = True, True\n        \n        for i in range(len(A) - 1):\n            if A[i+1] > A[i]:\n                dec = False\n            if A[i+1] < A[i]:\n                inc = False\n        return inc or dec\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_monotonic_asc = True\n        is_monotonic_desc = True\n        \n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                is_monotonic_asc = False\n            if A[i] > A[i - 1]:\n                is_monotonic_desc = False\n            \n        return is_monotonic_asc or is_monotonic_desc", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n\n#         inc = all([A[i]<=A[i+1] for i in range(0,len(A)-1)])\n#         dec = all([A[i]>=A[i+1] for i in range(0,len(A)-1)])\n        \n#         return inc or dec\n\n#         inc = True\n#         dec = True\n        \n#         for i in range(0,len(A)-1):\n#             if A[i]>A[i+1]:\n#                 inc=False\n#             if A[i]<A[i+1]:\n#                 dec=False\n                \n#             if not inc and not dec:\n#                 return False\n        \n#         return inc or dec\n    \n#         if A[-1] > A[0]:            \n#             return all(A[i] <= A[i + 1] for i in range(0, len(A) - 1))\n\n#         else:\n#             return all(A[i] >= A[i + 1] for i in range(0, len(A) - 1))\n\n        if A[-1] > A[0]:            \n            inc=True\n            for i in range(0,len(A)-1):\n                if A[i]>A[i+1]:\n                    return False\n            else:\n                return True\n\n        else:\n            dec=True\n            for i in range(0,len(A)-1):\n                if A[i]<A[i+1]:\n                    return False\n            else:\n                return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        isAscending = True\n        isDescending = True\n        \n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                isAscending = False\n            if A[i] < A[i+1]:\n                isDescending = False\n        return isAscending or isDescending", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        asc = True\n        dsc = True\n        for i in range(1,len(A)):\n            if A[i-1]<A[i]:\n                dsc=False\n            elif A[i-1]>A[i]:\n                asc=False\n        return asc or dsc\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_increasing = is_decreasing = True\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                is_decreasing = False\n            if A[i] > A[i - 1]:\n                is_increasing = False\n        return is_decreasing or is_increasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = decreasing = True\n\n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                increasing = False\n            if A[i] < A[i+1]:\n                decreasing = False\n\n        return increasing or decreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_asc = True\n        is_desc = True\n        \n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                is_desc = False\n            if A[i] < A[i-1]:\n                is_asc = False\n        \n        return is_asc or is_desc", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        # Valid monotic number of the following characteristic\n        # Increasing \n        # Decreasing\n        # None increasing or decreasing\n\n        # Linear time complexity is the best thing to do.\n\n        isIncreasing = True\n        isDecreasing = True\n\n        # check if the number is Monotonic\n        index = 1\n\n        while index < len(A):\n            \n            previous = index - 1\n            current = index\n\n            # In any given if the current number is bigger then number is increasing\n            # So assign isIncreasing to false\n            if A[previous] < A[current]:\n                isDecreasing = False\n                \n            # if the current is smaller the number is decreasing\n            # so assign isIncreasing to false\n            if A[previous] > A[current]:\n                isIncreasing = False\n            index += 1\n        \n        return isIncreasing or isDecreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        len_ = len(A)\n        \n        if (len_ == 0 or len_ == 1 or len_ == 2):\n            return True\n        \n        f, l = A[0], A[-1]\n        prev = f\n        \n        for n in A[1:]:\n            if (f < l):\n                if (n < prev):\n                    return False\n            if (f > l):\n                if (n > prev):\n                    return False\n            if (f == l):\n                if (n != prev):\n                    return False\n            prev = n\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        dec = False\n        inc = False\n\n        for i in range(len(A) - 1):\n            j = i+1\n            if A[i] is not A[j]: \n                if A[i] < A[j]:\n                    inc = True\n                elif A[i] > A[j]:\n                    dec = True\n            if(inc and dec):\n                return False\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        if len(A) == 0: return False\n        if len(A) == 1: return True\n        \n        incr = 0\n        \n        for i in range(1, len(A)):\n            if A[i] - A[i-1] > 0 and incr == 0:\n                incr = 1\n            elif A[i] - A[i-1] > 0 and incr == -1:\n                return False\n            elif A[i] - A[i-1] < 0 and incr == 0:\n                incr = -1\n            elif A[i] - A[i-1] < 0 and incr == 1:\n                return False\n                \n        return True\n            \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return True\n        i = 0\n        while i < len(A) - 1 and A[i] == A[i+1]:\n            i += 1\n        if i == len(A) - 1:\n            return True\n        asc = (A[i] < A[i+1])\n        for j in range(i, len(A) - 1):\n            if A[j] == A[j+1]:\n                continue\n            tmp = (A[j] < A[j+1])\n            if tmp != asc:\n                return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        icounter = 0\n        dcounter = 0\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                dcounter += 1\n            if A[i] < A[i+1]:\n                icounter += 1\n            if A[i] == A[i+1]:\n                icounter += 1\n                dcounter += 1\n        if icounter == len(A) - 1 or dcounter == len(A) - 1:\n            return True\n        return False\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        def isIncreasing(self, A: List[int]) -> bool:\n            mono = True\n            for i in range(len(A)):\n                if i == (len(A) - 1):\n                    break\n                if A[i] > A[i+1]:\n                    mono = False\n            return mono\n        def isDecreasing(self, A: List[int]) -> bool:\n            m = True\n            for i in range(len(A)):\n                if i == (len(A) - 1):\n                    break\n                if A[i] < A[i+1]:\n                    m = False\n            return m\n        if isDecreasing(self,A) or isIncreasing(self,A):\n            return True\n        return False\n            \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 1:\n            return True\n        \n        increasing = True\n        decreasing = True\n        \n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                increasing = False\n        \n        if not increasing:\n            for i in range(len(A)-1):\n                if A[i] < A[i+1]:\n                    decreasing = False\n        \n        return True if increasing or decreasing else False", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if not A or len(A) < 2:\n            return True\n        \n        self.direction = None\n        \n        return self.isMonotonicHelper(A, 0, len(A)-1)\n    \n    def isMonotonicHelper(self, A, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            if self.isMonotonicHelper(A, start, mid) and self.isMonotonicHelper(A, mid+1, end):\n                if self.direction is None:\n                    if A[mid] < A[mid+1]:\n                        self.direction = 1\n                    elif A[mid] > A[mid+1]:\n                        self.direction = 0\n                    return True\n                elif self.direction == 1:\n                    return A[mid] <= A[mid+1]\n                else:\n                    return A[mid] >= A[mid+1]\n            else:\n                return False\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if min(A) == A[0]:\n            start = 0\n            increment = 1;\n            end = len(A)\n        elif max(A) == A[0]:\n            start = len(A) - 1\n            increment = -1\n            end = 0\n        else:\n            return False\n        num = A[start]\n        print(start, num)\n        for i in range(start, end, increment):\n            print(A[i], num)\n            if A[i] < num:\n                return False\n            num = A[i]\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = decreasing = True\n        \n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                increasing = False\n            if A[i] < A[i+1]:\n                decreasing = False\n        if increasing or decreasing:\n            return increasing or decreasing", "class Solution:\n    \n    def check(self, B):\n        self.B = B\n        result = []\n        for i in range(len(self.B) - 1):\n            if self.B[i] <= self.B[i+1]:\n                result.append(True)\n            else:\n                result.append(False)\n        \n        final = all(result)\n        return final\n    \n    \n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        a = []\n        \n        a.append(self.check(A))\n        a.append(self.check(A[::-1]))\n        \n        b = any(a)\n\n        return b        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 1:\n            return True\n        t = 0\n        for i in range(len(A) - 1):\n            if A[i] < A[i+1] and t == -1:\n                return False\n            elif A[i] > A[i+1] and t ==1:\n                return False\n            elif A[i] < A[i+1] and t == 0:\n                t = 1\n            elif A[i] > A[i+1] and t == 0:\n                t = -1\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        climb = None\n        bef = None\n        for num in A:\n            if bef is None:\n                pass\n            elif climb is None and num > bef:\n                climb = True\n            elif climb is None and num < bef:\n                climb = False\n            elif climb is None and num == bef:\n                pass\n            elif climb is True and num >= bef:\n                pass\n            elif climb is False and num <= bef:\n                pass\n            else:\n                return False\n            bef = num\n        \n        return True    ", "class Solution:\n    def isMonotonic(self, arr: List[int]) -> bool:\n        # ok \n        f=True\n        n = len(arr)\n        for i in range(n-1):\n            if arr[i]>arr[i+1]:\n                f=False\n                break\n        if f:return True\n        r=True\n        for i in range(n-1):\n            if arr[i]<arr[i+1]:\n                r=False\n                break\n        return r\n", "def isMono(A, forward=True):\n    curValue = A[0]\n    \n    for i in range(1, len(A)):\n        if forward and A[i] < curValue:\n            return False\n        if not forward and A[i] > curValue:\n            return False\n        \n        curValue = A[i]\n    \n    return True\n\nclass Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        return isMono(A) or isMono(A, False)", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_decreasing = is_increasing = True\n        for i in range(len(A)-1):\n            if A[i] < A[i + 1]: is_increasing = False\n            if A[i] > A[i + 1]: is_decreasing = False\n        return is_decreasing or is_increasing\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        isIncreasing, isDecreasing = True, True\n        \n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                isIncreasing = False\n            elif A[i] < A[i+1]:\n                isDecreasing = False\n            \n        return isIncreasing or isDecreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if sorted(A) == A:\n            return True\n        elif sorted(A, reverse = True) == A:\n            return True\n        else:\n            return False\n                \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        decreasing = True\n        increasing = True\n        for i in range(0, len(A)-1):\n            if A[i] > A[i+1]: decreasing = False\n            if A[i] < A[i+1]: increasing = False\n        \n        return decreasing or increasing\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        res1 = sorted(A, reverse=True)\n        res2 = sorted(A)\n        if res1 == A or res2 == A:\n            return True\n        return False", "class Solution(object):\n    def isMonotonic(self, A):\n        return (all(A[i] <= A[i+1] for i in range(len(A) - 1)) or\n                all(A[i] >= A[i+1] for i in range(len(A) - 1)))", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        # initial value\n        mono = 0\n        \n        for i in range(len(A) - 1):\n            if A[i + 1] - A[i] != 0:\n                if mono == 0:\n                    mono = A[i + 1] - A[i]\n                else:\n                    if mono * (A[i + 1] - A[i]) < 0:\n                        return False\n\n            \n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increase, decrease = True, True\n        for i in range(1, len(A)):\n            if A[i] > A[i - 1]:\n                decrease = False\n            if A[i] < A[i - 1]:\n                increase = False\n        return increase or decrease", "class Solution(object):\n    def isMonotonic(self, A):\n        monotonicIncr = True\n        monotonicDecr = True\n\n        for i in range(len(A) - 1):\n            j = i + 1\n            if A[i] > A[j]:\n                monotonicIncr = False\n            if A[i] < A[j]:\n                monotonicDecr = False\n\n        return monotonicIncr or monotonicDecr", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = True\n        for x, y in zip(A, A[1:]):\n            if x > y:\n                increasing = False\n                break\n        decreasing = True\n        for x, y in zip(A, A[1:]):\n            if x < y:\n                decreasing = False\n                break\n        return increasing or decreasing\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n       \n        if A[-1] - A[0] > 0:\n            signal = 'incr'\n        elif A[-1] - A[0] == 0:\n            signal = 'same'\n        elif A[-1] - A[0] < 0:\n            signal = 'decr'\n        \n        if signal == 'same':\n            if A == [A[0]] * len(A):\n                return True\n            else:\n                return False\n        \n        elif signal == 'incr':\n            for i in range(1, len(A)):\n                if A[i] < A[i- 1]:\n                    return False\n            return True\n       \n        elif signal == 'decr':\n            for i in range(1, len(A)):\n                if A[i] > A[i-1]:\n                    return False\n            return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        count=0\n        count2=0\n        for x in range(len(A)-1):\n            if(A[x]<=A[x+1]):\n                count+=1\n            if(A[x]>=A[x+1]):\n                count2+=1\n                print(count2, A[x])\n        \n        if(count== len(A)-1 or count2==len(A)-1):\n            return True\n        else:\n            return False", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc=False\n        i=0\n        while i<len(A)-1 and A[i]==A[i+1]:\n            i+=1\n        if i==len(A)-1:\n            return True\n        if A[i]<A[i+1]:\n            inc=True\n        \n        for i in range(1,len(A)-1):\n            if inc==True:\n                if A[i]>A[i+1]:\n                    return False\n            if inc==False:\n                if A[i+1]>A[i]:\n                    return False\n        return True\n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        B=A.copy()\n        A.sort()\n        if A==B or A[::-1]==B:\n            return True\n        return False\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        up = False\n        if A[0] < A[len(A)-1]:\n            up = True\n        elif A[0] > A[len(A)-1]:\n            up = False\n    \n        for i in range(len(A)-1):\n            if up:\n                print((A[i], A[i+1]))\n                if A[i] > A[i+1]:\n                    return False\n            else:\n                if A[i] < A[i+1]:\n                    return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increase, decrease = True, True\n        \n        for i in range(1, len(A)):\n            if A[i-1] > A[i]:\n                increase = False\n                \n            if A[i-1] < A[i]:\n                decrease = False\n                \n        return increase or decrease\n    \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        up = down = True\n        \n        for i in range(1, len(A)):\n            if A[i - 1] > A[i]:\n                up = False\n\n            if A[i - 1] < A[i]:\n                down = False\n        \n        return up or down", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        new_array = sorted(A)\n        new_array_rev = sorted(A, reverse=True)\n        \n        if A == new_array or A == new_array_rev:\n            return True\n        else:\n            return False\n", "class Solution:\n    def isMonotonic(self, a: List[int]) -> bool:\n#         n = len(a)\n        \n#         if n == 1:\n#             return True\n        \n#         asc = True if a[n-1] - a[0] >= 0 else False\n        \n#         for i in range(1, n):\n#             if asc:\n#                 if a[i] - a[i-1] < 0:\n#                     return False\n#             else:\n#                 if a[i] - a[i-1] > 0:\n#                     return False\n                \n        \n#         return True\n\n        increasing = decreasing = True\n\n        for i in range(len(a) - 1):\n            if a[i] > a[i+1]:\n                increasing = False\n            if a[i] < a[i+1]:\n                decreasing = False\n\n        return increasing or decreasing\n    \n'''\n[1,2,2,3]\n[6,5,4,4]\n[1,3,2]\n[1,2,4,5]\n[1,1,1]\n[1,2,3,4,0]\n'''", "class Solution:\n    \n    def isMonotonic(self, A):\n        return (all(A[i] <= A[i+1] for i in range(len(A) - 1)) or\n                all(A[i] >= A[i+1] for i in range(len(A) - 1)))\n    \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        is_monotonic_incr = True\n        is_monotonic_desc = True\n        array1=A\n        for num in range(1,len(array1)):\n            # check if second element is smallar that first\n            if (array1[num] < array1[num-1]):\n                print('in first if',array1[num] ,array1[num-1])\n                is_monotonic_incr = False\n            # check if second element is greater that first\n            if (array1[num] > array1[num-1]):\n                print('in second if',array1[num] ,array1[num-1])\n                is_monotonic_desc = False\n        \n        return is_monotonic_incr or is_monotonic_desc", "class Solution(object):\n    def isMonotonic(self, A):\n        increasing = decreasing = True\n\n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                increasing = False\n            if A[i] < A[i+1]:\n                decreasing = False\n\n        return increasing or decreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        return((A==sorted(A))or(A==sorted(A,reverse=True)))", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if not A: return True\n        isIncrementing, prev = None, A[0]\n        for i in range(1,len(A)):\n            print(prev,A[i],isIncrementing)\n            if prev < A[i] and isIncrementing == False: return False\n            if prev > A[i] and isIncrementing == True:  return False\n            if prev < A[i]: isIncrementing = True\n            if prev > A[i]: isIncrementing = False\n            prev = A[i]\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        sort = sorted(A)\n        return A==sort or A[::-1]==sort", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        direction = 0\n        for idx, ele in enumerate(A):\n            if idx == 0:\n                continue\n            \n            if ele > A[idx - 1] and direction == 0:\n                direction = 1\n            elif ele < A[idx - 1] and direction == 0:\n                direction = -1\n            elif ele > A[idx - 1] and direction == -1:\n                return False\n            elif ele < A[idx - 1] and direction == 1:\n                return False\n            \n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) == 1:\n            return True\n        \n        i = 0\n        n = len(A)\n        while i < n-1 and A[i] == A[i+1]:\n            i += 1\n        if i == n-1:\n            return True\n        if A[i] > A[i+1]:\n            while i < n-1 and A[i] >= A[i+1]:\n                i += 1\n            if i != n-1:\n                return False\n            else:\n                return True\n        else:\n            while i < n-1 and A[i] <= A[i+1]:\n                i += 1\n            if i != n-1:\n                return False\n            else:\n                return True\n        \n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        i = 1\n        pr = None\n        cur = None\n        if len(A) < 3:\n            return True\n        while i < len(A) - 1:\n            if A[i] >  A[i-1] and A[i] > A[i +1]:\n                return False\n            elif  A[i] <  A[i-1] and A[i] < A[i +1]:\n                return False\n            elif (A[i] >=  A[i-1] and A[i] < A[i +1]) or (A[i] >  A[i-1] and A[i] <= A[i +1])  :\n                cur = 'I'\n            elif (A[i] <= A[i -1] and A[i] > A[i +1]) or (A[i] < A[i -1] and A[i] >= A[i +1]):\n                cur = 'D'            \n            if pr is None and cur is not None:\n                pr = cur\n            elif pr is not None and cur is not None and pr != cur:\n                return False            \n            i += 1\n            \n        return True\n            \n            \n", "class Solution:\n    def monotonicArrayIncreasing(self,a):\n        i = 0\n        while i+1 < len(a):\n            if a[i] > a[i+1]:\n                return False\n            i += 1\n        return True\n\n    def monotonicArrayDecreasing(self,a):\n        i = 0\n        while i+1 < len(a):\n            if a[i] < a[i+1]:\n                return False\n            i += 1\n        return True\n    def isMonotonic(self, A: List[int]) -> bool:\n        x=self.monotonicArrayDecreasing(A)\n        y=self.monotonicArrayIncreasing(A) \n        return x or y", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = None\n        for i in range(1, len(A)):\n            if increasing is None:\n                if A[i] != A[i - 1]:\n                    increasing = A[i] > A[i - 1]\n            elif increasing and A[i] < A[i - 1]:\n                return False\n            elif not increasing and A[i] > A[i - 1]:\n                return False\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) < 2:\n            return True\n        \n        increasing = None\n        previous = A[0]\n        for element in A[1:]:\n            if increasing == True and element < previous:\n                return False\n            \n            if increasing == False and element > previous:\n                return False\n            \n            if increasing is None and element != previous:\n                increasing = element > previous\n            \n            previous = element\n            \n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        ans=True\n        n=len(A)\n        if n<=2:\n            return ans\n        # ind=0\n        # while True:\n        #     if ind+1==n:\n        #         break\n        #     else:\n        #         if A[ind]<A[ind+1]:\n        #             comp=\\\"<\\\"\n        #             break\n        #         elif A[ind]>A[ind+1]:\n        #             comp=\\\">\\\"\n        #             break\n        #         else:\n        #             ind+=1\n        # for j in range(ind,n-1):\n        #     if  not eval(\\\"A[j]\\\"+comp+\\\"=A[j+1]\\\"):\n        #                  return False\n        # return ans\n        left=True\n        right=True\n        for i in range(1,n):\n            if A[i]>A[i-1]:\n                left=False\n                break\n        for i in range(1,n):\n            if A[i]<A[i-1]:\n                right=False\n                break\n        return left or right\n        \n            \n            \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        asc_arr = sorted(A)\n        desc_arr = sorted(A, reverse=True)\n        return (A == asc_arr or A == desc_arr)\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        if (len(A) < 3):\n            return True\n        gt = False\n        lt = False\n        \n        for i in range(len(A) - 1):\n            \n            if A[i] > A[i + 1]:\n                gt = True\n            if A[i] < A[i + 1]:\n                lt = True\n            if (gt and lt):\n                return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 1:\n            return True\n        \n        flag = -1\n        \n        if A[0] < A[1]:\n            flag = 0\n        elif A[0] == A[1]:\n            flag = 1\n        else:\n            flag = 2\n             \n        for i in range(0, len(A) - 1):\n            if flag == 0 and A[i] > A[i + 1]:\n                return False\n            elif flag == 2 and A[i] < A[i + 1]:\n                return False\n            elif flag == 1:\n                if A[i] > A[i + 1]:\n                    flag = 2\n                elif A[i] < A[i + 1]:\n                    flag = 0\n                else:\n                    flag = 1\n                    \n        return True            \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increasing = True\n        decreasing = True\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                increasing = False\n            if A[i] < A[i+1]:\n                decreasing = False\n            \n            \n        return increasing or decreasing", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc = True\n        dec = True\n        \n        for i in range(1,len(A)):\n            if A[i-1] > A[i]:\n                inc = False\n            if A[i-1] < A[i]:\n                dec = False\n        return inc or dec\n\n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 1:\n            return True\n        last_diff = 0\n        for i in range(1, len(A)):\n            cur_diff = A[i] - A[i - 1]\n            if cur_diff < 0:\n                if last_diff == 0:\n                    last_diff = cur_diff\n                elif last_diff > 0:\n                    return False\n            elif cur_diff > 0:\n                if last_diff == 0:\n                    last_diff = cur_diff\n                elif last_diff < 0:\n                    return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        flag = None\n        \n        for i in zip(A, A[1:]):\n            temp = i[1] - i[0]\n            if flag:\n                if flag*temp < 0:\n                    return False\n            else:\n                if temp > 0:\n                    flag = 1\n                elif temp < 0:\n                    flag = -1\n           \n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        monotone = 0\n        for i in range(len(A)-1):\n            m = A[i+1]-A[i]\n            if m*monotone<0:\n                return False\n            if monotone == 0 and m != 0:\n                monotone = 1 if m>0 else -1\n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increase = []\n        decrease = []\n        i, d = [], []\n        for idx, v in enumerate(A):\n            while decrease and decrease[-1][0] >= v:\n                dv, di = decrease.pop()\n                if not d:\n                    d.append((dv, di))\n                elif d[-1][1] < di:\n                    d.append((dv, di))\n            decrease.append((v, idx))\n                \n            while increase and increase[-1][0] <= v:\n                iv, ii = increase.pop()\n                if not i:\n                    i.append((iv, ii))\n                elif i[-1][1] < ii:\n                    i.append((iv, ii))\n            increase.append((v, idx))\n        if decrease and len(decrease) == 1:\n            g = decrease.pop()\n            if d and d[-1][0] >= g[0]:\n                d.append(g)\n            else:\n                d.append(g)\n        if increase and len(increase) == 1:\n            g = increase.pop()\n            if i and i[-1][0] <= g[0]:\n                i.append(g)\n            else:\n                i.append(g)\n        return len(i) == len(A) or len(d) == len(A)", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        i=0\n        j=1\n        if(A.index(min(A))==0 or A.index(min(A)) == (len(A)-1) or min(A)==A[-1]):\n            if(A.index(min(A)) == 0):\n                while j <= len(A)-1:\n                    if(A[i] <= A[j]):\n                        i = i+1\n                        j = j+1\n                    else:\n                        return False\n            elif(A.index(min(A)) == len(A)-1 or min(A) == A[-1]):\n                while j <= len(A)-1:\n                    if(A[i] >= A[j]):\n                        i = i+1\n                        j = j+1\n                    else:\n                        return False\n        else:\n            return False\n        return True\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        return sorted(A) == A or sorted(A, reverse=True) == A", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A)<2:\n            return True\n        \n        increasing = False\n        decreasing = False\n        i = 0\n        \n        while i < len(A)-1 and (not increasing and not decreasing):\n            if A[i] == A[i+1]:\n                i+=1\n                continue\n            \n            if A[i] < A[i+1]:\n                increasing = True\n            \n            else:\n                decreasing= True\n                \n            i+=1\n\n        \n                \n        if increasing:\n            while i < len(A)-1:\n                if A[i] > A[i+1]:\n                    return False\n                i+=1\n                \n            return True\n        \n        if decreasing:\n            while i < len(A)-1:\n                if A[i] < A[i+1]:\n                    return False\n                i+=1\n                \n            return True\n        \n        if not increasing and not decreasing:\n            return True\n                \n        \n        \n                \n\n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc = True\n        dec = True\n        for i in range(len(A)-1):\n            if A[i+1] - A[i] > 0:\n                inc = inc and True\n                dec = False\n            elif A[i+1] - A[i] < 0:\n                dec = dec and True\n                inc = False\n                \n        return inc or dec", "from enum import Enum\nclass Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 2:\n            return True\n        \n        class Comp(Enum):\n            inc = 0\n            eq = 1\n            dec = 2\n            \n        def to_comp(left, right):\n            if right > left:\n                return Comp.inc\n            elif right == left:\n                return Comp.eq\n            else:\n                return Comp.dec\n        \n        comp = to_comp(A[0], A[1])\n        \n        for i in range(2, len(A)):\n            new_comp = to_comp(A[i - 1], A[i])\n            if new_comp == Comp.inc and comp == Comp.dec:\n                return False\n            elif new_comp == Comp.dec and comp == Comp.inc:\n                return False\n            if new_comp != Comp.eq:\n                comp = new_comp\n            \n        return True", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) <= 2: return True\n        \n        d = A[1] - A[0]\n        \n        for i in range(1, len(A)-1):\n            new_d = A[i+1] - A[i]\n                \n            if new_d * d < 0: return False\n            if new_d != 0:\n                d = new_d\n        return True\n            \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        length = len(A)\n        monotone_inc = True\n        monotone_dec = True\n        for i in range(length-1):\n            if A[i+1] >= A[i]:\n                continue\n            else:\n                monotone_inc = False\n        for i in range(length-1):\n            if A[i+1] <= A[i]:\n                continue\n            else:\n                monotone_dec = False\n        return monotone_inc or monotone_dec\n        \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc, dec = True, True\n        for i in range(1, len(A)):\n            a, b = A[i], A[i-1]\n            inc = inc & (a >= b)\n            dec = dec & (a <= b)\n            if(not (inc or dec)): return False\n        return inc or dec", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if (len(A) == 1):\n            return 1\n        \n        dir = 0\n        for (i,j) in zip(A, A[1:] + [A[len(A) - 1]]):\n            if (i != j):   \n                cdir = (i - j) / abs(i - j)           \n                if (dir == 0):\n                    dir = cdir\n                elif (dir != cdir):\n                    return 0\n\n        return 1\n                           \n\n    \n    \n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        if len(A) <= 1:\n            return True\n        \n        inc, dec = True, True\n        \n        for i in range(len(A)-1):\n            if A[i+1] > A[i]:\n                dec = False\n            if A[i+1] < A[i]:\n                inc = False\n                \n        return dec or inc", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        up = down = True\n\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                up = False\n            if A[i] < A[i + 1]:\n                down = False\n                \n        return up or down  ", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        import numpy as np\n        if len(A)==1:\n            return(True)\n        else:\n            diff = np.diff(A)\n            return(min(diff)>=0 or max(diff)<=0)\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        \n        a1, a2 = sorted(A), sorted(A, reverse = True)\n        if A == a1 or A == a2:\n            return True\n        return False\n        '''\n        nD, nI = 1, 1\n        for i in range(1, len(A)):\n            if A[i] - A[i-1] < 0:\n                nD = 0\n            elif A[i] - A[i-1] > 0 :\n                nI = 0\n        return nI or nD\n        '''", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        return A == sorted(A) or A == sorted(A)[::-1]\n", "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        if len(A) < 2:\n            return True\n        asc = None\n        for i in range(1, len(A)):\n            if A[i] == A[i-1]:\n                continue\n            if asc is None:\n                asc = A[i-1] < A[i]\n            else:\n                if asc != (A[i-1] < A[i]):\n                    return False\n        return True\n                \n"]