["def encode(s):\n    return ''.join( str(1 - ord(c)%2) if c.isalpha() else c for c in s )", "encode = lambda s: \"\".join((x, str(~ord(x)%2))[x.isalpha()] for x in s)", "import re\n\ndef encode(s):\n    return re.sub(r\"[a-zA-Z]\", lambda m: str((ord(m.group())+1)%2), s)", "def encode(s):\n    return \"\".join(['1', '0'][ord(x)%2] if x.isalpha() else x for x in s.lower())", "def encode(s):\n    return ''.join(str(ord(c)&1^1) if c.isalpha() else c for c in s)", "def encode(s):\n    return ''.join([[i, '10'[ord(i) % 2]][i.isalpha()] for i in s ])", "def encode(s):\n  return ''.join(str((ord(c) - 1) % 2) if c.isalpha() else c for c in s)\n", "def encode(s):\n  return ''.join(str((ord(c.lower()) - 97) % 2) if c.isalpha() else c for c in s)", "from string import ascii_lowercase as alphabet\ndef encode(s):\n    POS={v:i%2 for i,v in enumerate(alphabet)}\n    return \"\".join(str(POS.get(c,c)) for c in s.lower())", "def encode(s):\n    res = ''\n    for i in range(len(s)):\n        if s[i].isupper():\n            if (ord(s[i]) - 65) % 2 == 0:\n                res += '0'\n            elif (ord(s[i]) - 65) % 2 == 1:\n                res += '1'\n        elif s[i].islower():\n            if (ord(s[i]) - 97) % 2 == 0:\n                res += '0'\n            elif (ord(s[i]) - 97) % 2 == 1:\n                res += '1'\n        else:\n            res += s[i]\n    return res"]