["def f(n):\n    return [2**i for i in range(n+1)]+[(2**(n+1))-1]", "def f(n):\n    return [1 << i for i in range(n+1)] + [(1 << (n+1)) - 1]", "def f(n):\n    result = [1]\n    for i in range(n):\n        result.append(result[-1]*2)\n    result.append(sum(result))\n    return result", "f=lambda n:[2**x for x in range(n+1)]+[2**(n+1)-1]", "def f(n): return list(g(n))\ndef g(n):\n  v = 1\n  for i in range(n + 1):\n    yield v\n    v *= 2\n  yield v - 1\n", "f=lambda n:[1<<i for i in range(n+1)]+[(1<<n+1)-1]", "def f(n):\n    r,c=[1],1\n    for i in range(n): c<<=1; r.append(c)\n    return r+[(c<<1)-1]", "def f(n):\n    x=[2**i for i in range(n+1)]\n    x.append(2**(n+1)-1)\n    return x", "def f(n):\n    # your code here\n    return [2**i if i != n + 1 else 2**i - 1for i in range(n+2)]", "def f(n):\n    output = []\n    to_add = 0\n    for i in range(0,n+1):\n        output.append(2**i)\n    output.append(sum(output))\n    return output"]