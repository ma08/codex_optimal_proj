["def super_size(n):\n    return int(''.join(sorted(str(n), reverse = True)))", "def super_size(n):\n    b = list(str(n))\n    b.sort(reverse=True)\n    return int(\"\".join(b))\n", "def super_size(n):\n    return int(''.join(sorted(str(n)))[::-1])", "super_size=lambda n: int(\"\".join(sorted(str(n),reverse=True)))", "def super_size(n):\n    list_ = sorted(list(str(n)))\n    list_.reverse()\n    return int(''.join(tuple(list_)))", "def super_size(n):\n  return int(''.join(sorted([i for i in str(n)])[::-1]))", "def super_size(n):\n  arr = list(map(int,str(n)))\n  arr.sort(reverse=True)\n  strings = [str(integer) for integer in arr]\n  a_string = \"\".join(strings)\n  an_integer = int(a_string)\n  return an_integer", "def super_size(n):\n    x = sorted(list(str(n)), reverse=True)\n    return int(''.join(x))\n    #your code here\n", "def super_size(n):\n    #your code here\n    return int(''.join(str(x) for x in sorted([int(a) for a in str(n)], reverse=True)))\n", "def super_size(n):\n    digits = sorted([d for d in str(n)],reverse=True)\n    return int( ''.join(digits))\n\n", "def super_size(n):\n    # your code here\n    new = list(str(n))\n    new = sorted(new, reverse=True)\n    new = ''.join(new)\n    return int(new)", "def super_size(n: int) -> int:\n    \"\"\" Rearrange the integer into its largest possible value. \"\"\"\n    return int(\"\".join(list(sorted(str(n), reverse=True))))", "def super_size(n):\n    \n    digitList = list(str(n))\n    \n    if len(digitList) == 1:\n        return n\n    else:\n        digitList.sort()\n        digitList.reverse()\n    \n    largestValue = ''\n    for digit in digitList:\n        largestValue += digit\n        \n    return int(largestValue)", "def super_size(n):\n    if n < 0:\n        raise ValueError\n    elif n < 10:\n        return n\n    else:\n        ans = sorted(str(n), reverse=True)\n        return int(\"\".join(ans))", "def super_size(n):\n    l = [int(i) for i in str(n)]\n    s = \"\"\n    while len(l) > 0 :\n        s += str(l.pop( l.index(max(l)) ))\n    return int(s)", "def super_size(n):\n    l = list(str(n))\n    l = sorted(l, reverse = True)\n    return int(''.join(l))", "def super_size(num):\n    res = [x for x in str(num)] \n    Sorted_res = sorted(res, reverse=True)\n    Sorted_string = ''.join(Sorted_res)\n    return int(Sorted_string)\n", "def super_size(n):\n    li = list()\n    p = ''\n    for i in str(n):\n        li.append((i))\n    for j in range(len(li)):\n        p+=max(li)\n        li.remove(max(li))\n    return int(p)", "def super_size(n):\n    lista1 = list(str(n))\n    lista = []\n    for num in lista1:\n        lista.append(num)\n    \n    for i in range(0, len(lista)):\n        lista[i] = int(lista[i])\n        \n    lista.sort(reverse = True)\n    lista_buna = int(''.join(str(i) for i in lista))\n    return lista_buna\n", "def super_size(n):\n    num_str = list(str(n))\n    num_str.sort(reverse=True)\n    res = int(\"\".join(num_str))\n    return(res)\n\n", "def super_size(n):\n    li = list(str(n))\n    li.sort(reverse = True)\n    return int(''.join(li))", "def super_size(n):\n    li = list(str(n))  \n    li.sort()     \n    li.reverse()  \n    temp = ''\n    for i in range(len(li)):\n        temp += li[i]\n    return int(temp)", "def super_size(n):\n       return int(''.join(sorted(str(n)[::-1]))[::-1])", "def super_size(n): \n    return int(''.join(list([str(x) for x in sorted([int(i) for i in str(n)], reverse=True)])))\n    \n", "def super_size(n):\n    list = [str(i) for i in str(n)]\n    list.sort(reverse=True)\n    result = int(\"\".join(list))\n    return result", "def super_size(n):\n    result = \"\"\n    num = sorted([int(d) for d in  str(n)])[::-1]\n    for n in num:\n        result += str(n) \n    return int(result)", "def super_size(n):\n    temp = sorted(str(n), reverse=True)\n    temp2 = ''\n    for i in temp:\n        temp2 += i\n    return int(temp2)", "def super_size(n):\n    a = sorted(str(n), reverse=True)\n    str1 = ''\n    for i in a:\n        str1 += i\n    return int(str1)", "def super_size(n):\n    # sorted returns a list with the sorted elements of the input string\n    return int(\"\".join(sorted(str(n), reverse=True)))", "def super_size(n):\n    digits = [int(i) for i in str(n)]\n    new_int = \"\"\n    while digits:\n        new_int += str(max(digits))\n        digits.remove(max(digits))\n    return int(new_int)", "def super_size(n):\n    lst = sorted([int(c) for c in str(n)], reverse=True)\n    return int(''.join([str(i) for i in lst]))", "def super_size(n):\n    #your code here\n    q = []\n    for i in str(n):\n        q.append(i)\n\n    q.sort(reverse=True)\n    q = ''.join(q)\n    return int(q)", "def super_size(n):\n    a = str(n)\n    c = list(a)\n    d = sorted(c,reverse = True)\n    z = ''\n    for i in d:\n        z  +=i\n    return int(z)    \n        \n", "def super_size(n):\n    lis = []\n    for i in str(n):\n        lis.append(i)\n    lis.sort(reverse = True)\n    x = int(''.join(lis))\n    return x", "def super_size(n):\n    x = list(str(n))\n    z = []\n    for k in x:\n        z.append(int(k))\n    z.sort()\n    z = z[::-1]\n    y = ''\n    for k in z:\n        y += str(k)\n    y = int(y)\n    return y\n    \n    \n    #your code here\n", "def super_size(n):\n    s = ''\n    a = sorted(str(n))[::-1]\n    print(a)\n    for j in a:\n        s += str(j)\n    return int(s)\n", "def super_size(n):\n    n_list = (sorted([int(number) for number in str(n)], reverse = True))\n    return int(\"\".join(str(number) for number in n_list))", "def super_size(n):\n    bigest = \"\"\n    amount = len(str(n))\n    numbers = []\n    n = str(n)\n    for i in range(amount):\n        numbers.append(n[i])\n    numbers.sort(reverse = True)\n    for i in range(amount):\n        bigest += numbers[i]\n    bigest = int(bigest)\n    return(bigest)", "def super_size(n):\n    n_list = [i for i in str(n)]\n    n_list.sort(reverse=True)\n    return int(\"\".join(n_list))", "def super_size(n):\n    p = list(str(n))\n    p.sort()\n    return int(''.join(reversed(p)))", "def super_size(n):\n    st = \"\".join(sorted(str(n), reverse = True))\n    return int(st)", "def super_size(n):\n    st = \"\".join(sorted(list(str(n)), reverse=True))\n    return int(st)\n    \n", "def super_size(n):\n    a = list(str(n))\n    a.sort(reverse=True)\n    n = \"\".join(a)\n    n = int(n)\n    return n", "def super_size(n):\n    num=str(n)\n    arr=[]\n    for i in range(0,len(num)):\n        arr.append(num[i])\n    arr.sort(reverse=True)\n    return int(''.join(arr))\n", "def super_size(n):\n    a = []\n    for i in range(len(str(n))):\n        a.append(n%10)\n        n //= 10\n    a = list(reversed(sorted(a)))\n    num = 0\n    for i in a:\n        num = num * 10 + i\n    return num", "def super_size(n):\n    ln = []\n    for x in str(n):\n        ln.append(x)\n    ln.sort()\n    ln.reverse()\n    return int(''.join(ln))", "def super_size(n):\n    b = list(str(n))\n    b.sort()\n    r = ''\n    for i in b[::-1]:\n        r += i\n    return int(r)\n", "def super_size(n):\n    n_str = str(n)\n    str_sort = sorted(n_str, reverse = True)\n    output = \"\"\n    for num in str_sort:\n        output = output + num\n    return int(output)", "def super_size(n):\n    arr = [x for x in str(n)]\n    arr.sort(reverse = True)\n    return int(''.join(arr))", "def super_size(n):\n    uporz = list(str(n))\n    uporz.sort(reverse=True)\n    return int(''.join(uporz))", "super_size = lambda n : int(\"\".join(sorted([digit for digit in str(n)])[::-1]))\n", "def super_size(n):\n    #your code here\n    convert_to_str = str(n)\n    lst = convert_to_str.split()\n    for elem in convert_to_str:\n        lst.append(elem)\n    lst.pop(0)\n    num_list = []\n    for num in lst:\n        num_list.append(int(num))\n    srt = sorted(num_list, reverse = True)\n    string = \"\".join(str(srt))\n    rep1 = string.replace(\"[\", \"\")\n    rep2 = rep1.replace(\"]\", \"\")\n    rep3 = rep2.replace(\",\", \"\")\n    rep4 = rep3.replace(\" \", \"\")\n    return int(rep4)", "def super_size(n):\n    l = [int(i) for i in str(n)]\n    l.sort(reverse = True)\n    return int(\"\".join([str(i) for i in l]))", "def super_size(n):\n    res = \"\"\n    n = list(str(n))\n    for i in range(len(n)):\n        res += str(max(n))\n        n.remove(max(n))\n    return int(res)", "def super_size(n):\n    n = str(n)\n    a = n[:]\n    b = []\n    for elem in a:\n        b += elem\n    b.sort()\n    b.reverse()\n    s = \"\"\n    s = s.join(b)\n    m = int(s)\n\n    return m", "def super_size(n):\n    l = []\n    s = ''\n    for i in str(n):\n        l.append(int(i))\n    for i in sorted(l,reverse=True):\n        s += str(i)\n    return int(s)", "def super_size(n):\n    lst = list(str(n))\n    lst.sort()\n    return int(''.join(lst[::-1]))", "def super_size(n):\n    a = [i for i in str(n)]\n    out = ''\n    while len(a):\n        out = out + max(a)\n        a.remove(max(a))\n        \n    return int(out)", "def super_size(n):\n    return int(''.join(reversed(sorted([*str(n)]))))", "from functools import reduce\ndef super_size(n):\n    car=sorted([int(x) for x in str(n)], reverse=True)\n    van=(str(a) for a in car)\n    return int(\"\".join(van))\n", "def super_size(m):\n    arr = [int(x) for x in str(m)]\n    n = len(arr)\n    result = ''\n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    arr.reverse() \n    string_new = [str(i) for i in arr] \n    result = int(\"\".join(string_new)) \n    return(result) ", "def super_size(n):\n    lst=[i for i in str(n)]\n    return int(''.join(sorted(lst,reverse=True)))\n\n", "def super_size(n):\n    n_str = str(n)\n    n_sorted = sorted(n_str, reverse=True)\n    output_str = \"\" \n    for num in n_sorted:\n        output_str = output_str + num\n    if n_str == n_sorted:\n        return int(n_str)\n    else: \n        return int(output_str)\n", "def super_size(n):\n    num = [int(x) for x in str(n)] # convert to list\n    num.sort(reverse=True) #sort descending\n    num_str = [str(x) for x in num] #convert list ints to strs, there's got to be a less stupid way\n    big_num_str = \"\".join(num_str) #join into a integer\n    return int(big_num_str)", "def super_size(n):\n    x = sorted([int(x) for x in str(n)])[::-1]\n    return int(''.join(map(str, x)))", "def super_size(n):\n    ints = [int(thing) for thing in list(str(n))]\n    ints = sorted(ints, reverse=True)\n    strings = [str(integ) for integ in ints]\n    new_str = ''.join(strings)\n    return int(new_str)\n    \n    \n    \n", "def super_size(n):\n    n = list(str(n))\n    ans = \"\"\n    while len(n) > 0: \n        temp = max(n)\n        ans += temp\n        n.remove(temp)\n    return int(ans)", "def super_size(n):\n    \n    list = []\n    textNb = \"\"\n    \n    for nb in str(n):\n        list.append(nb)\n    \n    list.sort(reverse=True)\n    \n    for ch in list:\n        textNb += ch\n        \n    return int(textNb)\n    \n", "def super_size(n):\n    x =[i for i in str(n)]\n    x = sorted(x, reverse= True)\n    return int(\"\".join(x))", "def super_size(n):\n    items = [int(x) for x in str(n)]\n    items.sort(reverse=True)\n    itemStr = \"\".join(str(d) for d in items)\n    return int(itemStr)", "def super_size(n):\n    sorted_integers = sorted(str(n), reverse=True)\n    supersized_n = int(\"\".join(sorted_integers))\n    return supersized_n", "def super_size(n):\n    nn = str(n)\n    num = []\n    for i in nn:\n        num.append(int(i))\n    numnum = sorted(num)\n    numnum.reverse()\n    for i in numnum:\n        return int(''.join(str(i) for i in numnum))", "def super_size(n):\n    #your code here\n    b = sorted([int(x) for x in str(n)], reverse=True)\n    return int(\"\".join(map(str, b)))", "def super_size(n):\n    n_str = str(n)\n    n_sorted = sorted(n_str, reverse=True)\n    res = int(\"\".join(n_sorted))\n    return res\n\n\n", "def super_size(n):\n    s = sorted(list(str(n)))\n    s.reverse()\n    return int(''.join(s))", "def super_size(n):\n    a=[0,0,0,0,0,0,0,0,0,0]\n    while n>=1:\n        a[n%10]+=1\n        n//=10\n    ans=0\n    for i in range(9,-1,-1):\n        while a[i]:\n            ans*=10\n            ans+=i\n            a[i]-=1\n    return ans", "def super_size(n):\n    n = str(n)\n    n = sorted(n)\n    n = ''.join(n)\n    return int(n[::-1])", "def super_size(n):\n    temp = [int(x) for x in str(n)]\n    temp.sort(reverse=True)\n    strings = [str(integer) for integer in temp]\n    a_string = \"\".join(strings)\n    an_integer = int(a_string)\n    return an_integer\n    #your code here\n", "def super_size(n):\n    sort_numbers = sorted(str(n))\n    sort_numbers.reverse()\n    return int(''.join(map(str,sort_numbers)))", "def super_size(n):\n    if len(str(n)) > 1:\n        array_numbers = map(int, str(n))\n        sorted_arrays = sorted(array_numbers, reverse=True)\n        strings = [str(sorted_array) for sorted_array in sorted_arrays]\n        a_string = \"\".join(strings)\n        result = int(a_string)\n        return result\n    else:\n        return n", "def super_size(n):\n    return int(''.join(sorted([*str(n)], reverse=True)))", "def super_size(n):\n    singleValues = []\n    x=1\n    result=0\n  \n    while n >= 1:\n        singleValues.append(n % 10)\n        print((n%10))\n        n = int(n / 10)\n       \n\n    singleValues.sort()\n    print(singleValues)\n\n    for i in singleValues:\n        result = result + i * x\n        x = x*10\n\n    print(result)\n    return(int(result))\n", "def super_size(n):\n    #your code here\n    \n    s = [int(i) for i in str(n)]\n    s.sort(reverse = True)\n    s = [str(x) for x in s]\n    res = int(\"\".join(s))\n    return res\n\n        \n    \n \n", "def super_size(n):\n    w = list(str(n))\n    w.sort(reverse=True)\n    return int(''.join(w))", "def super_size(n):\n    n_list = list(str(n))\n    n_list.sort(reverse=True)\n    n_string = ''.join(n_list)\n    return int(n_string)\n", "def super_size(n):\n    m=str(n)\n    l=list()\n    for i in range(len(m)):\n        l.append(int(m[i]))\n    k=sorted(l, reverse = True)\n    res=list()\n    for i in range(len(k)):\n        res.append(str(k[i]))\n    f=''.join(res)\n    return int(f)", "def super_size(n):\n    list1=[]\n    for i in str(n):\n        list1.append(i)\n    list1.sort()\n    list1.reverse()\n    return int(''.join(list1))", "def super_size(n):\n    n1 = [int(i) for i in list(str(n))]\n    n1.sort(reverse = True)\n    n1 = int(\"\".join([str(i) for i in n1]))\n    return n1", "def super_size(n):\n    L = [int(i) for i in str(n)]\n    L.sort(reverse = True)\n    S = [str(i) for i in L]\n    A = \"\".join(S)\n    return int(A)", "def super_size(n):\n    #your code here\n    a = []\n    b = len(str(n))\n    for i in range(b):\n        n = str(n)\n        a.append(n[i])\n    \n    a = sorted(a)\n    a = a[::-1]\n    c = ''\n    for i in range(b):\n        c+=a[i]\n    \n    return int(c)\n", "def super_size(n):\n    n_str = str(n)\n    n_sorted = sorted(n_str, reverse = True)\n    sorted_str = \"\" \n    for i in n_sorted:\n        sorted_str += i\n    return int(sorted_str)", "def super_size(n):\n    a = sorted(str(n), reverse = True)\n    b = int(''.join(a))\n    return b", "def super_size(n):\n    big = list(str(n))\n    big.sort(reverse=True)\n    return int(\"\".join(big))\n\n", "def super_size(n):\n    \"\"\"Function that rearranges an integer into its largest possible value.\n    :param int n\n        integer to rearranges\n    \"\"\"\n    number_list = list(str(n))\n    number_list.sort(reverse=True)\n    return int(''.join(number_list))", "def super_size(n):\n    size_str = ''\n    size_list = [int(i) for i in str(n)]\n    for _ in range(len(size_list)):\n        i = max(size_list)\n        size_str+=str(i)\n        size_list.remove(i)\n    return int(size_str)\n        \n", "def super_size(n):\n    ll = list()\n    while n != 0:\n        ll.append(n % 10)\n        n //= 10\n    ll = sorted(ll, reverse = True)\n    res = 0\n    \n    for digit in ll:\n        res = res * 10 + digit\n\n    return res", "def super_size(n):\n    n_str = str(n)\n    n_sorted = sorted(n_str, reverse=True)\n    n_joined = ''\n\n    for i in n_sorted:\n        n_joined += i\n\n    n_reverse = int(n_joined)\n    return n_reverse\n"]