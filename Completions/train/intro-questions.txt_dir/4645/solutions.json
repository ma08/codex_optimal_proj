["def promenade(choices):\n    \n    def compute(): return l+r,m+s\n    \n    l,m, r,s = 1,0, 0,1\n    for c in choices:\n        if c=='L': l,m = compute()\n        else:      r,s = compute()\n        \n    return compute()", "def promenade(choices):\n    l, m = (1, 0)\n    r, s = (0, 1)\n    for choice in choices:\n        if choice == 'L': l, m = l+r, m+s\n        elif choice == 'R': r, s = l+r, m+s\n    return l+r,m+s", "\ndef next(last_l, last_r):\n    return last_l[0] + last_r[0], last_l[1] + last_r[1]\n\ndef promenade(choices):\n    last_l = (1, 0)\n    last_r = (0, 1)\n    last = None\n    \n    for c in choices:\n        if c == \"L\":\n            last_l = next(last_l, last_r)\n        else:\n            last_r = next(last_l, last_r)\n            \n    return next(last_l, last_r)\n            \n        \n    \n    \n    # good luck!\n", "def promenade(choices):\n    x = [(1, 0), (0, 1)] # [(l, m), (r, s)]\n    for c in choices:\n        x[c == 'R'] = x[0][0] + x[1][0], x[0][1] + x[1][1]\n    return x[0][0] + x[1][0], x[0][1] + x[1][1]", "def promenade(choices):\n    l, m, r = [1, 0], [1, 1], [0, 1]\n    for c in choices:\n        if c == 'L': l = m[:]\n        else: r = m[:]\n        m = [l[0]+r[0], l[1]+r[1]]\n    return tuple(m)", "def promenade(choices):\n    if not choices: return (1, 1)\n    (a, b) = promenade(choices[1:])\n    return (a, a + b) if choices[0] == 'L' else (a + b, b)", "def promenade(choices):\n    lm=[1,0]\n    rs=[0,1]\n    ans=[1,1]\n    \n    for i in choices:\n        if i=='L':\n            lm=ans[::]\n            \n        if i=='R':\n            rs=ans[::]\n        ans=[lm[0]+rs[0],lm[1]+rs[1]]\n    return tuple(ans)\n    \ndef fraction_to_promenade(fraction):\n    ans=\"\"\n    frac=list(fraction)\n    while(frac[0]!=frac[1]):\n        if frac[0]>frac[1]:\n        \n            ans+=\"R\"\n            frac[0]=frac[0]-frac[1]\n        if frac[1]>frac[0]:\n            ans+=\"L\"\n            frac[1]=frac[1]-frac[0]\n    return ans", "def promenade(ch):\n    \n    def evaulate(): return l+r,m+s\n    \n    l,m, r,s = 1,0, 0,1\n    for c in ch:\n        if c=='L': l,m = evaulate()\n        else:      r,s = evaulate()\n        \n    return evaulate()", "def promenade(choices):\n    fraction=(1,1)\n    most_recent_L=(1,0)\n    most_recent_R=(0,1)\n    fraction_add=lambda L, R: tuple( l + r for l, r in zip(L,R))\n    for C in choices:\n        if C==\"L\":\n            most_recent_L=fraction\n            fraction=fraction_add(most_recent_L,most_recent_R)\n        elif C==\"R\": \n            most_recent_R=fraction\n            fraction=fraction_add(most_recent_L,most_recent_R)\n        else: raise ValueError\n    return fraction", "def promenade(choices):\n    last_left = [1,0]\n    last_right = [0,1]\n    out = [1,1]\n    for choice in choices:\n        if choice is 'L':\n            last_left = out.copy()\n            out[0] += last_right[0]\n            out[1] += last_right[1]\n        else:\n            last_right = out.copy()\n            out[0] += last_left[0]\n            out[1] += last_left[1]\n    return tuple(out)\n"]