["class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    leng = 0\n    while node:\n        leng += 1\n        node = node.next\n    return leng\n  \ndef count(node, data):\n    c = 0\n    while node:\n        if node.data==data:\n            c += 1\n        node = node.next\n    return c", "class Node(object):\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n    \ndef length(node):\n  if node:\n    return 1 + length(node.next)\n  return 0\n  \ndef count(node, data):\n  if node:\n    if node.data == data:\n      return 1 + count(node.next, data)\n    return count(node.next, data)\n  return 0", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef count_if(node, fn):\n    n, c = node, 0\n    while n:\n        if fn(n):\n            c += 1\n        n = n.next\n    return c\n\ndef length(node):\n    return count_if(node, lambda x: x != None)\n\ndef count(node, data):\n    return count_if(node, lambda x: x.data == data)", "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    return 1 + length(node.next) if node else 0\n  \ndef count(node, data):\n    return (node.data == data) + count(node.next, data) if node else 0", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    n = node\n    len = 0\n    while n is not None:\n        len += 1\n        n = n.next\n    return len\n  \ndef count(node, data):\n    n = node\n    count = 0\n    while n is not None:\n        if data == n.data:\n            count += 1\n        n = n.next\n    return count", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef iterlinkedlist(node):\n    while node:\n        yield node\n        node = node.next\n\ndef length(node):\n    return sum(1 for n in iterlinkedlist(node))\n\ndef count(node, data):\n    return sum(n.data == data for n in iterlinkedlist(node))", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    return 1 + length(node.next) if node else 0\n  \ndef count(node, data):\n    return (1 if node.data == data else 0) + count(node.next, data) if node else 0", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    # Your code goes here.\n    i = 0\n    while node != None:\n        i+=1\n        node = node.next\n    return i\n  \ndef count(node, data):\n    # Your code goes here.\n    res = 0\n    while node != None:\n        res+= node.data == data        \n        node = node.next\n    return res", "class Node(object):\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n    \ndef length(node):\n  return 0 if node == None else 1 if node.next == None else 1 + length(node.next)\n  \ndef count(node, data):\n  return 0 if node == None else int(node.data == data) if node.next == None else int(node.data == data) + count(node.next, data)", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node,filter=None):\n    l = 0\n    while node != None :\n        node, l = node.next, l+(filter is None or filter == node.data)\n    return l\n  \ndef count(node, data): return length(node, data)"]