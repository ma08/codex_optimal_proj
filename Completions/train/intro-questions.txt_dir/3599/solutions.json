["def find_f1_eq_f2(n,k):\n    s = set(range(k))\n    while True:\n        n += 1\n        testn = n\n        while True:\n            f = set(map(int,str(testn)))\n            if f<=s:\n                if f==s: return n\n                break\n            testn += n", "def find_f1_eq_f2(n,k):\n    s = set(range(k))\n    while True:\n        n += 1\n        new = n\n        while True:\n            ns = set(map(int, str(new)))\n            if ns < s:\n                break\n            elif ns == s:\n                return n\n            new += n\n    return n\n", "from itertools import count\nfrom string import digits\n\ndef f12(n, k):\n    valid_digits = set(digits[:k])\n    for x in count(n, n):\n        s = str(x)\n        if valid_digits.issuperset(s):\n            return valid_digits.issubset(s)\n\ndef find_f1_eq_f2(n, k):\n    return next(i for i in count(n + 1) if f12(i, k))", "from itertools import count\n\ndef find_f1_eq_f2(n, k):\n    for x in count(n+1):\n        for y in count(x, x):\n            if all(map(lambda c: int(c) < k, str(y))):\n                if len(set(str(y))) == k: return x\n                else: break", "from itertools import count\n\ndef find_f1_eq_f2(n, k):\n    digits = set(map(str, range(k)))\n    for n in count(n + 1):\n        for m in map(set, map(str, count(n, n))):\n            if m <= digits:\n                if len(m) == len(digits): return n\n                break", "def f1(n,k):\n    n_i = n\n    while True:        \n        if all(int(c) < k for c in str(n_i)):            \n            return n_i\n        n_i += n\n    \ndef f2(n,k):\n    n_i = n\n    while True:\n        if set(str(n_i)) == set(str(d) for d in range(k)):            \n            return n_i\n        n_i += n\n\ndef find_f1_eq_f2(n,k):\n    n_i = n + 1\n    while True:    \n        if f1(n_i,k) == f2(n_i,k):\n            return n_i\n        n_i += 1    \n", "from itertools import count\ndef find_f1_eq_f2(n,k):\n    is_f1=lambda n,k:max(map(int,str(n)))<k\n    is_f2=lambda n,k:set(str(n))==set(map(str,range(0,k)))\n    for i in count(n+1):\n        for j in count(1):\n            f1,f2=is_f1(i*j,k),is_f2(i*j,k)\n            if f1^f2:break\n            elif f1 and f2:return i", "def less_than(n, k):\n    return all(int(x) < k for x in str(n))\n    \ndef has_all(n, k):\n    s = str(n)\n    for i in range(10):\n        if i < k and str(i) not in s:\n            return False\n        if i >= k and str(i) in s:\n            return False\n    return True\n    \ndef f1(n, k):\n    cn = n\n    while not less_than(cn, k):\n        cn += n\n    return cn\n\ndef f2(n, k):\n    cn = n\n    while not has_all(cn, k):\n        cn += n\n    return cn\n\n\ndef find_f1_eq_f2(n,k):\n    n += 1\n    while f1(n, k) != f2(n, k):\n        n += 1\n    return n\n    \n    \n", "def digits_less_than(n,k):\n    for i in str(n):\n        if int(i) >= k:\n            return False\n    return True\n\ndef all_digits_less_than(n,d):\n    for i in d:\n        if i not in str(n):\n            return False\n    return True\n\ndef find_f1_eq_f2(n,k):\n    d = '012'\n    for i in range(3,k):\n        d += str(i)\n    m = 0\n    i = 0\n    while not all_digits_less_than((m+n)*i,d):\n        m += 1\n        i = 1\n        while not digits_less_than((m+n)*i,k):\n            i += 1\n    return m+n"]