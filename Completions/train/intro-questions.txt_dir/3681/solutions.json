["def convert_num(number, base):\n    try:\n        if base == 'hex':\n            return hex(number)\n        if base == 'bin':\n            return bin(number)\n    except:\n        return 'Invalid number input'\n    return 'Invalid base input'", "def convert_num(number, base):\n    if not isinstance(number, int):\n        return \"Invalid number input\"\n    if base == 'hex':\n        return hex(number)\n    elif base == 'bin':\n        return bin(number)\n    return \"Invalid base input\"\n", "def convert_num(number, base):\n    try:\n        return {'hex': hex, 'bin': bin}[base](number)\n    except KeyError:\n        return 'Invalid base input'\n    except TypeError:\n        return 'Invalid {} input'.format(\n            ('base', 'number')[isinstance(base, str)]\n        )", "def convert_num(number, base):\n    if base not in ('hex','bin'):    return 'Invalid base input'\n    try:    return hex(number) if base=='hex' else bin(number)\n    except: return 'Invalid number input'", "def convert_num(number, base):\n    try:\n        if base == 'hex':\n            return hex(number)\n        elif base == 'bin':\n            return bin(number)\n        else:\n            return 'Invalid base input'\n    except:\n        return 'Invalid number input'", "def convert_num(n, base):\n    return ( \"Invalid number input\" if not isinstance(n, int)\n        else \"Invalid base input\"   if base not in [\"bin\", \"hex\"]\n        else bin(n)                 if base == \"bin\"\n        else hex(n) )             # if base == \"hex\"", "def convert_num(number, base):\n    try:\n        return {'hex': hex(number), 'bin':bin(number) }[base]\n    except:\n        return 'Invalid {} input'.format(['base','number'][not str(number).isdigit()])", "def convert_num(number, base):\n    if not isinstance(number, int):\n        return \"Invalid number input\"\n    if base == \"hex\":\n        return hex(number)\n    if base == \"bin\":\n        return bin(number)\n    return \"Invalid base input\"", "def convert_num(number, base):\n    try:\n        return {'bin': bin, 'hex': hex}[str(base)](number)\n    except KeyError:\n        return 'Invalid base input'\n    except TypeError:\n        return 'Invalid number input'"]