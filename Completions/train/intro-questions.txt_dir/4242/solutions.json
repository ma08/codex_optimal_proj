["def direction_in_grid(n, m):\n    return \"LR\"[n%2] if m >= n else \"UD\"[m%2]\n", "def direction_in_grid(n,m):\n  return \"LRUD\"[n%2 if m>=n else 2+m%2]\n", "NEXT = {'R': 'D', 'D': 'L', 'L': 'U', 'U': 'R'}\n\ndef direction_in_grid(n, m, d='R'):\n    while n > 1:\n        n, m, d = m, n-1, NEXT[d]\n    return d", "def direction_in_grid(n,m):\n    return 'UD'[m % 2] if m < n else 'LR'[n % 2]", "def direction_in_grid(n,m):\n    return 'LR'[n%2] if n<=m else 'UD'[m%2]", "def direction_in_grid(n,m):\n  return \"LRUD\"[2*(n>m)+(m if n>m else n)%2]", "direction_in_grid=lambda n,m:\"LRUD\"[min(n,m)%2+2*(m<n)]", "direction_in_grid=lambda n,m:['LR'[n%2],'UD'[m%2]][n>m]", "def direction_in_grid(n,m):\n    index = 0\n    directionByIndex = {0:'U', 1:'R', 2:'D', 3:'L'}\n    if n <= m:\n        index = (n*2 - 1) % 4\n    else:\n        index = (m*2) % 4\n    return directionByIndex.get(index)", "def direction_in_grid(n,m):\n    if m > n:\n        return \"L\" if n % 2 == 0 else \"R\"\n    elif m < n:\n        return \"U\" if m % 2 == 0 else \"D\"\n    else:\n        return \"L\" if n % 2 == 0 else \"R\""]