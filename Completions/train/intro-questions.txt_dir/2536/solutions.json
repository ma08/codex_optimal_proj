["class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        c=collections.Counter(arr)\n        maxi=-1\n        for i in c:\n            if i==c[i]:\n                maxi=max(maxi,i)\n        return maxi", "from collections import Counter\nclass Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        count=Counter(arr)\n        lucky=[element for element , frequency in list(count.items())if element==frequency]\n        return max(lucky) if lucky else -1\n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        largest = 0\n        a = {}\n        for i in arr:\n            if i in a:\n                a[i] = a[i] + 1\n            else:\n                a[i] = 1\n        \n        for k in a:\n            if a[k] == k:\n                if k > largest:\n                    largest = k\n        \n        return largest if largest else -1\n            \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        # ans = -1\n        # visited = []\n        # for x in range(len(arr)):\n        #     if arr[x] not in visited:\n        #         visited.append(arr[x])\n        #         if arr.count(arr[x]) == arr[x]:\n        #             ans = max(ans,arr[x])\n        #             print(ans)\n        # return ans\n        \n        dict={}\n        ans=-1\n        for x in range(len(arr)):\n            if arr[x] not in dict:\n                dict[arr[x]] = 1\n            else:\n                dict[arr[x]] += 1\n        for key,value in dict.items():\n            if key == value:\n                ans = max(ans,key)\n        return ans", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        adict = {}\n        i = 0\n        j = len(arr)\n        while i < j:\n            if (arr[i]) in adict:\n                print(arr[i], adict.get(arr[i]))\n                adict[arr[i]] += 1\n                print(arr[i], adict.get(arr[i]))\n            else:\n                adict[arr[i]] = 1\n            i += 1\n            output = -1\n        for key in adict:\n            if adict.get(key) == key:\n                if adict.get(key) > output:\n                    output = adict.get(key)\n        return output", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        book={}.fromkeys(set(arr))\n        for key in list(book.keys()):\n            book[key]=arr.count(key)\n        result=-1\n        for key,value in list(book.items()):\n            if key==value:\n                result=max(result,key)\n        return result\n                \n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        lucky = [-1]\n        for num, keys in list(Counter(arr).items()):\n            if num == keys:\n                lucky.append(num)\n        return max(lucky)\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        \n        out = -1\n\n        for key, value in list(Counter(arr).items()):\n            \n            if key == value and value > out:\n                out = value\n              \n        return out  \n                \n                \n", "import collections\n\n\nclass Solution:\n    def findLucky(self, arr):\n        l = list(x for x, y in collections.Counter(arr).items() if x == y)\n        return max(l) if l else -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        maximum = 0\n        count = Counter(arr)\n        \n        for key,value in count.items():\n            if key == value:\n                if value > maximum:\n                    maximum = value\n        if maximum != 0:\n            return maximum\n        \n        return -1", "'''\nGiven an array of integers arr, a lucky integer is an integer which has a\nfrequency in the array equal to its value.\n\nReturn a lucky integer in the array. If there are multiple lucky integers\nreturn the largest of them. If there is no lucky integer return -1.\n\nExample 1:\n\nInput: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.\nExample 2:\n\nInput: arr = [1,2,2,3,3,3]\nOutput: 3\nExplanation: 1, 2 and 3 are all lucky numbers, return the largest of them.\nExample 3:\n\nInput: arr = [2,2,2,3,3]\nOutput: -1\nExplanation: There are no lucky numbers in the array.\nExample 4:\n\nInput: arr = [5]\nOutput: -1\nExample 5:\n\nInput: arr = [7,7,7,7,7,7,7]\nOutput: 7\n\nConstraints:\n\n1 <= arr.length <= 500\n1 <= arr[i] <= 500\n'''\n\n\nclass Solution:\n\n    def findLucky(self, arr):\n\n        dict_counts = {}\n\n        for num in arr:\n            if num in dict_counts:\n                dict_counts[num] += 1\n            else:\n                dict_counts[num] = 1\n\n        list_lukcy_nums = []\n\n        for num in dict_counts:\n            if num == dict_counts[num]:\n                list_lukcy_nums.append(num)\n\n        if len(list_lukcy_nums) > 0:\n            return max(list_lukcy_nums)\n\n        return -1\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        ans = -1\n        for i in sorted(set(arr)):\n            if i == arr.count(i):\n                ans = i\n        return ans", "from collections import Counter\nclass Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        count=Counter(arr)\n        lucky=[element for element , frequency in list(count.items())if element==frequency]\n        if lucky:\n            return max(lucky)\n        else:\n            return -1\n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        # count = 0\n        max1 = -1\n        n = len(arr)\n        for i in range(n):\n            flag = False\n            count = 0\n            for j in reversed(range(0, i)):\n                if arr[i] == arr[j]:\n                    flag = True\n                    break\n            if flag == True:\n                continue\n                \n            for j in range(i, n):\n                if arr[j] == arr[i]:\n                    count += 1\n            # print(arr[i], count)\n            if arr[i] == count:\n                if max1 < arr[i]:\n                    max1 = arr[i]\n        return max1", "\n\nclass Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        lucky = -1\n        for elem in set(arr):\n            recurred = [e2 for e2 in arr if e2 == elem]\n            if len(recurred) == elem:\n                if elem > lucky:\n                    lucky = elem\n        return lucky", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort()\n        luck = []\n        for i in arr:\n            if i == arr.count(i):\n                luck.append(i)\n        \n        if len(luck) > 1:\n            luck.sort()\n            return luck[-1]\n        \n        if len(luck) == 1:\n            return luck[0]\n        \n        return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort(reverse=True)\n        for i in arr:\n            if arr.count(i) == i:\n                return i\n        return -1\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort()\n        a = []\n        for i in arr:\n            if i==arr.count(i):\n                a.append(i)\n        if a:\n            return (max(a))\n        else:\n            return -1\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        \n\n        arr.sort()\n        l=[]\n        counts=0\n        visited=True\n        for i in range(len(arr)-1):\n            counts=arr.count(arr[i])\n            if counts==arr[i] and visited:\n                l.append(arr[i])\n                counts=0\n\n            if arr[i]==arr[i+1]:\n                visited=False\n            else:\n                visited=True\n\n\n        if len(l)!=0:\n            return max(l)\n        else:\n            return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort(reverse = True)\n                \n        freq = []\n        luck = []\n        for i in range(len(arr)):\n            freq.append(arr.count(arr[i]))\n        \n            if freq[i] == arr[i]:\n                luck.append(arr[i])\n        max_luck = -1\n        if luck:\n            max_luck = max(luck)\n            \n        return max_luck\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        res = [num for num in arr if arr.count(num) == num]\n        return max(res) if res else -1\n        \n        \n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        luck = []\n        for i in arr:\n            if arr.count(i) == i:\n                luck.append(i)\n        if luck:\n            return max(luck)\n        return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        nums = []\n        for c in arr:\n            if c == arr.count(c):\n                nums.append(c)\n        if len(nums) > 0:\n            return max(nums)\n        else:\n            return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        import collections\n\n# arr=[2,2,2,3,3]\n        return max([i for i,j in collections.Counter(arr).items() if i==j],default=-1)", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        num = -1\n        for c in arr:\n            if c == arr.count(c):\n                num = max(num,c)\n        return num", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort(reverse=True)\n        current_streak = 0\n        for i in range(len(arr)):\n            current_streak += 1\n            # If this is the last element in the current  streak (as the next is \n            # different, or we're at the end of the array).\n            if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n                # If this is a lucky number\n                if arr[i] == current_streak:\n                    return arr[i]\n                current_streak = 0\n        return-1\n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        d={}\n        for i in arr:\n            if i in d:\n                d[i]=d[i]+1\n            else:\n                d[i]=1\n        max=0\n        for k,v in list(d.items()):\n            if k==v:\n                if v>max:\n                    max=v\n        if max!=0:\n            return max\n        else:\n            return -1\n                \n        \n                \n            \n           \n        \n        \n            \n        \n            \n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        arr.sort(reverse = True)\n        count = 0\n        temp = 501\n        \n        for i in range(len(arr)):\n            print(temp,',',count)\n            if arr[i] != temp:\n                if temp == count:\n                    return temp\n                temp = arr[i]\n                count = 1\n            else:\n                count += 1\n            print(temp,',,',count)\n        if temp == count:\n            return temp\n        \n        return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        \n        arr = sorted(arr)[::-1]\n        \n        for i in arr:\n            if(arr.count(i) == i):\n                return i\n        \n        return -1", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        t=[]\n        x=collections.Counter(arr)\n        for j,v in list(x.items()):\n            if j==v:\n                t.append(j)\n        if len(t)!=0:\n            return max(t)\n        else:\n            return -1\n        \n                \n            \n           \n        \n        \n            \n        \n            \n        \n", "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        lucky=-1\n        op={}\n        for i in arr:\n            if i not in op:\n                op[i]=1\n            else:\n                op[i]+=1\n            \n        for k,v in list(op.items()):\n            if k == v:\n                if k >= lucky:\n                    lucky=k\n        return lucky\n"]