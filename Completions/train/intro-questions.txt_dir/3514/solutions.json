["def validate_sequence(seq):\n    return len({a - b for a, b in zip(seq, seq[1:])}) == 1", "def validate_sequence(sequence):\n    return sequence == list(range(sequence[0], sequence[-1] + 1, sequence[1] - sequence[0]))\n", "def validate_sequence(s):\n    return sum(s) == (s[0] + s[-1]) * len(s) /2", "def validate_sequence(sequence):\n    print(sequence)\n    d=sequence[1]-sequence[0]\n    for i in range(2,len(sequence)):\n        if sequence[i] - sequence[i-1] != d: return False\n    return True", "def validate_sequence(sequence):\n    step = sequence[1] - sequence[0]\n    return all(b-a == step for a, b in zip(sequence, sequence[1:]))", "def validate_sequence(sequence):\n    return len(set([n - p for p, n in zip(sequence, sequence[1:])])) == 1", "validate_sequence=lambda a:eval('=='.join([str(x) for x in [a[i]-a[i+1] for i in range(len(a)-1)]]))", "def validate_sequence(sequence):\n    increment = sequence[1] - sequence[0]\n    return all(y - x == increment for x, y in zip(sequence, sequence[1:]))\n", "def validate_sequence(sequence):\n    i = sequence[1] - sequence[0]\n    l = list(range(min(sequence),max(sequence)+1,i))\n    return l == sequence", "def validate_sequence(seq):\n    diff = seq[1] - seq[0]\n    for i,n in enumerate(seq[:-1]):\n        if seq[i + 1] - n != diff:\n            return False\n    return True"]