["def is_centered(arr,n):\n    l = int(len(arr)/2) if len(arr)%2==0 else int((len(arr)-1)/2)\n    return any(sum(arr[i:-i])==n for i in range(1, l+1)) or sum(arr)==n", "from itertools import accumulate\n\ndef is_centered(arr, n):\n    xs = [0] + list(accumulate(arr))\n    return any(b-a==n for a, b in zip(xs[:len(arr)//2+1], xs[::-1]))", "def is_centered(arr,n):\n    while True:\n        if sum(arr) == n: return True\n        try: (arr.pop(), arr.pop(0))\n        except IndexError: return False", "def is_centered(arr,n):\n    if sum(arr) == n: return True\n    for i in range(1,int(len(arr)/2)+1):        \n        if sum(arr[i:-i]) == n:\n            return True\n    return False", "def is_centered(arr, n):\n    x = sum(arr)\n    if x == n: return True\n    for i in range(len(arr)>>1):\n        x -= arr[i] + arr[-i-1]\n        if x == n: return True\n    return False", "def is_centered(arr,n):\n    for i in range(len(arr)//2+1):\n        if sum(arr[i:len(arr)-i])==n:\n            return True\n    return False", "def is_centered(a, n):\n    if not n and not len(a) % 2: return 1\n    for i in range(sum(divmod(len(a), 2)) - 1, -1, -1):\n        if sum(a[i:len(a)-i]) == n:\n            return 1\n    return 0", "def is_centered(arr,n):\n    return any(\n        sum(arr[i:len(arr)-i]) == n for i in range(len(arr)//2 + 1)\n    )\n", "def is_centered(arr,n):\n    for i in range(len(arr)):\n        for j in range(len(arr)+1):\n            if j>i:\n                if sum(arr[i:j]) == n and i == len(arr)-j:\n                    return True\n    return True if n==0 and arr!=arr[::-1] else False", "def is_centered(arr, n):\n    if (len(arr) % 2 == 0) and n == 0:\n        return True\n    left, right = (len(arr) // 2, len(arr) // 2) if len(arr) % 2 else (len(arr) // 2 - 1, len(arr) // 2)\n    while left >= 0 and right <= len(arr):\n        if sum(arr[left:right + 1]) == n:\n            return True\n        left -= 1\n        right += 1\n    return False"]