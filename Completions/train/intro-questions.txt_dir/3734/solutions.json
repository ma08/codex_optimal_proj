["import re, random\n\ndef roll(desc, verbose=False):\n    if not isinstance(desc,str): return False\n    \n    ans = re.findall(r'^(\\d*)d(\\d+)(([+\\-]\\d+)*)$', desc.replace(' ',''))\n    \n    if len(ans) == 0: return False\n    \n    dct = {i: eval(v) for i,v in enumerate(ans[0]) if v}\n    dices = {'dice':     [ 1+random.randrange(dct[1]) for i in range(dct.get(0, 1)) ],\n             'modifier': dct.get(2, 0) }\n    \n    return dices if verbose else sum(dices['dice']) + dices['modifier']", "from random import randint\n\ndef roll(desc, verbose=False):\n    try:\n        a, x, *d = desc.replace(' ', '').replace('-', '+-').replace('+', 'd').split('d')\n        dice = [randint(1, int(x)) for _ in range(int(a or '1'))]\n        modifier = sum(map(int, d))\n        if verbose:\n            return {'dice': dice, 'modifier': modifier}\n        else:\n            return sum(dice) + modifier\n    except:\n        return False", "from regex import findall, match\nfrom random import randint # This is useless here seeing the test cases but let's do it well\n\ndef roll(desc, verbose=False):\n    if not (isinstance(desc, str) and match(r\"^(?: *(\\d*d\\d+|[+-]\\d+))+$\", desc)): return False\n    dices, modifiers = [], 0\n    for x in findall(r\"(?: *(\\d*d\\d+|[+-]\\d+))\", desc):\n        if 'd' in x:\n            a, b = (1, int(x[1:])) if x[0] == 'd' else map(int, x.split('d'))\n            dices.extend(randint(1, b) for _ in range(a))\n        else:\n            modifiers += int(x)\n    return {\"dice\":dices, \"modifier\":modifiers} if verbose else sum(dices) + modifiers", "import re\nimport random\n\ndef roll(desc, verbose=False):\n    if isinstance(desc, str):\n        desc_cleared = re.sub(r'\\s', '', desc)\n        match = re.match(r'^(\\d*)d(\\d+)((?:[+-]\\d+)*)$', desc_cleared)\n        if match:\n            (dices, sides, modifiers) = match.groups()\n            dices, sides = [int(x) if x else 1 for x in [dices, sides]]\n            modifier = eval(modifiers) if modifiers else 0\n            rolls = [random.randint(1, sides) for _ in range(dices)]\n            return {'dice': rolls, 'modifier': modifier} if verbose else sum(rolls) + modifier\n    return False", "import re\nfrom random import randint\n\n\ndef roll(desc, verbose=False):\n    if not desc:\n        return False\n    m = re.match(r'^(\\d*)d(\\d+)(.*)$', desc)\n    if not m:\n        return False\n    num_dice, sides, modifiers = m.groups()\n    try:\n        modifier = sum(\n            int(a) for a in re.sub(r'([-+])', ' \\g<1>', modifiers).split())\n    except ValueError:\n        return False\n    nums = [randint(1, int(sides)) for _ in range(int(num_dice or 1))]\n    if verbose:\n        return {'dice': nums, 'modifier': modifier}\n    return sum(nums) + modifier\n", "from random import randint\ndef roll(desc, verbose=False):\n    if not desc:\n        return False\n    desc = desc.replace(' ', '') \n    for letter in desc:\n        if letter.isalpha() and letter != 'd':\n            return False\n    if desc != desc.replace('++', '+').replace('--','-'):\n        return False\n    \n    operations = '-+'\n    rolls = []\n    result = ''\n    \n    for each in operations:\n        desc = desc.replace(each, f' {each} ')\n    for i, part in enumerate(desc.split(' ')):\n        if 'd' in part:\n            part = resolve(part, verbose)\n            rolls.extend(part)\n            result += str(sum(part))\n        else:\n            result += part\n    result = eval(result)\n    if verbose:\n        return {'dice' : rolls, \"modifier\" : result - sum(rolls)}\n    return result\n    \n\ndef resolve(dice, verbose = None):\n    dice = dice.split('d')\n    d,t = list(map(int, dice)) if dice[0] != '' else (1, int(dice[1]))\n    return [randint(1,t) for _ in range(d)]\n", "import re #who needs random!\ndef roll(desc, v=False):\n    try:\n        q,d,m = re.search('^(\\d*)d(\\d+)(.*)$',desc.replace(' ','')).groups()\n        r = [int(d)]*int(q or 1)\n        m = eval(re.search('^(([+-]\\d+)+)$',m).groups()[0]) if m else 0\n        return { 'dice': r, 'modifier': m } if v else sum(r)+m\n    except:\n        return False", "import re\nfrom random import randint as d\ndef roll(desc, verbose=False):\n    try:\n        desc=desc.replace(' ','')\n        if desc[0] =='d': desc= '1'+desc\n        s=re.search('^(\\d+)d(\\d+)(([+-]?\\d+)*)$',desc).groups()\n        m = eval(s[2]) if s[2] != '' else 0 \n        res = { 'dice': [d(1,int(s[1]))] * int(s[0]), 'modifier': m }\n        return res if verbose else sum(res['dice'])+res['modifier']\n    except:\n        return False\n", "def roll(desc, verbose=False):   \n    if not desc:\n        return False\n    desc=\"\".join(desc.split())  \n    temp=\"\"\n    for i in desc:\n        if i in \"+-\":\n            break\n        temp+=i\n    for i in temp:\n        if i not in \"1234657890d\":\n            return False\n    remain=desc[len(temp):]\n    for i in remain:\n        if i not in \"1234657890d+-\":\n            return False\n    for i in range(len(remain)-1):\n        if remain[i+1] in \"+-\" and remain[i] in \"+-\":\n            return False\n    remain=eval(remain) if remain else 0\n    temp=temp.split(\"d\")    \n    temp[0]=1 if not temp[0] else int(temp[0])\n    return { \"dice\": [1]*temp[0], \"modifier\": remain } if verbose else 1*temp[0]+remain", "import re\nfrom random import randint\n\ndef roll(desc, verbose=False):\n    if not isinstance(desc, str):\n        return False\n    match = re.match(r'^(\\d*)d(\\d+)((?:[+-]\\d+)*)$', desc.replace(' ', ''))\n    if match:\n        dices, side, modifiers = match.groups()\n        dices = int(dices) if dices else 1\n        modifier = eval(modifiers) if modifiers else 0\n        res = list(randint(1, int(side)) for _ in range(dices))\n        return {'dice': res, 'modifier': modifier} if verbose else sum(res) + modifier\n    return False"]