["def Guess_it(n,m):\n    result = []\n    for x in range(0,n+1):\n        b, r, g = 4 * n + x - m, m - 3 * n - 2 * x, x\n        if all(y >= 0 for y in (b,r,g)):\n            result.append([g,r,b])\n    return result\n\n", "def Guess_it(n,m):\n\n    def get_sum_balls(a, b, c): return sum([a,b,c])\n    def get_sum_mass(a, b, c): return sum([a*5, b*4, c*3])\n\n    \n    green_max = min(m // 5, n)\n    red_max   = min(m // 4, n)\n    \n    result = []\n        \n    for green_ball in range(0, green_max+1):\n            for red_ball in range(0, red_max+1):\n                blue_ball = abs(n - (green_ball + red_ball))\n                \n\n                x = get_sum_balls(green_ball, red_ball, blue_ball)\n                y = get_sum_mass(green_ball,red_ball, blue_ball)\n\n                if x == n and y == m: \n                    result.append([green_ball, red_ball, blue_ball])\n                \n    return result", "def Guess_it(N, M):\n    def mass(g, r, b): return (g * 5) + (r * 4) + (b * 3)        \n    results = []\n    for g in range(N + 1):\n        for r in range((N - g) + 1):\n            b = N - r - g\n            if mass(g, r, b) == M: \n                results.append([g, r, b])\n    return results\n", "Guess_it=lambda n,m:[[g,r,n-g-r]for g in range(n+1)for r in range(n-g+1)if(n-g-r)*3+r*4+g*5==m]", "def Guess_it(n,m):\n\n    \"\"\"\n    n = number of balls in bag ranging from 1-50\n    m = total weight of all balls in bag\n    balls can be:\n      green = 5 kg\n      red   = 4 kg\n      blue  = 3 kg\n     \n    return a list of all possible combinations of balls based on weight and number\n  \n    \"\"\"\n    gMass, rMass, bMass = 5, 4, 3\n    gQ, rQ, bQ = 0,0,0\n    massTotal = gMass*gQ + rMass*rQ + bMass*bQ\n    total = gQ + rQ + bQ\n    \n    solutionSet = []\n    while gQ <= n:\n        rQ = 0\n        bQ = 0\n        massTotal = gMass*gQ + rMass*rQ + bMass*bQ\n        total = gQ + rQ + bQ\n        solution = [gQ, rQ, bQ]\n        if (total, massTotal) == (n, m):\n            solutionSet.append(solution)\n        else:\n            while gQ+rQ <= n:\n                bQ = 0\n                massTotal = gMass*gQ + rMass*rQ + bMass*bQ\n                total = gQ + rQ + bQ\n                solution = [gQ, rQ, bQ]\n                if (total, massTotal) == (n, m):\n                    solutionSet.append(solution)\n                else:\n                    while gQ + rQ + bQ <= n:\n                        massTotal = gMass*gQ + rMass*rQ + bMass*bQ\n                        total = gQ + rQ + bQ\n                        solution = [gQ, rQ, bQ]\n                        if (total, massTotal) == (n, m):\n                            solutionSet.append(solution)\n                        bQ += 1\n                rQ += 1\n        gQ += 1\n    return solutionSet", "def Guess_it(n,m):\n  # Return a list of lists for all combinations\n  # green, red, blue\n  mass = {'green': 5, 'red': 4, 'blue': 3}\n  # Find all combinations of n balls whose total mass = m\n  output = []\n  for i in range(0, n+1):\n      for j in range(0, n+1):\n          for k in range(0, n+1):\n              if i+j+k==n and i*5 + j*4 +k*3 == m:\n                  output.append([i, j, k])\n  return sorted(output) # Return sorted list", "def Guess_it(n,m):\n  result = []\n  delta = n*5 - m\n  for idx, i in enumerate(range(n-delta, int(1+n-delta/2))):\n      if i>=0:\n          result.append([i, delta-2*idx, idx])\n  return result", "def Guess_it(n,m):\n  lis=[]\n  for x in range(n+1):\n    for d in range(n-x+1):\n      if (5*x)+(4*d)+3*(n-x-d)==m:\n        lis.append([x,d,(n-x-d)])\n      else:\n        pass\n  return lis", "def Guess_it(n,m):\n  #May the force be with you.\n    if n == 0:\n        return [[]]\n    arrayStorage = {\n        0: [],\n        1: [],\n        2: [],\n        3: [[0, 0, 1]],\n        4: [[0, 1, 0]],\n        5: [[1, 0, 0]]\n    }\n    if m in arrayStorage:\n        return arrayStorage[m]\n    for i in range(6, m + 1):\n        # Case 1: comparing against 3\n        arrayStorage[i] = []\n        arraysTemp = arrayStorage[i - 3]\n        for array in arraysTemp:\n            if sum(array) < n:\n                elemToAdd = [array[0], array[1], array[2] + 1]\n                if elemToAdd not in arrayStorage[i]:\n                    arrayStorage[i].append(elemToAdd)\n\n        # Case 2: comparing against 4\n        arraysTemp = arrayStorage[i - 4]\n        for array in arraysTemp:\n            if sum(array) < n :\n                elemToAdd = [array[0], array[1] + 1, array[2]]\n                if elemToAdd not in arrayStorage[i]:\n                    arrayStorage[i].append(elemToAdd)\n\n        # Case 3 against 5\n        arraysTemp = arrayStorage[i - 5]\n        for array in arraysTemp:\n            if sum(array) < n:\n                elemToAdd = [array[0] + 1, array[1], array[2]]\n                if elemToAdd not in arrayStorage[i]:\n                    arrayStorage[i].append(elemToAdd)\n\n    resultArray = []\n    for array in arrayStorage[m]:\n        if sum(array) == n:\n            resultArray.append(array)\n    return sorted(resultArray, key=lambda x: x[0])"]