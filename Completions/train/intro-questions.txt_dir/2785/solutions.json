["from fractions import Decimal, gcd\nfrom operator import mul\nfrom functools import reduce\n\nlcm = lambda a, b=1: a * b // gcd(a, b)\n\ndef parameter(n):\n    digits = Decimal(n).as_tuple().digits\n    return lcm(sum(digits), reduce(mul, digits))", "from math import gcd\n\ndef parameter(n):\n    s, p = 0, 1\n    for m in str(n):\n        s += int(m)\n        p *= int(m)\n    return (s * p / (gcd(s, p)))", "from functools import reduce\nfrom fractions import gcd\ndef parameter(n):\n    n = [int(i) for i in str(n)]\n    sum_ = reduce(lambda a, b: a + b, n)\n    prod = reduce(lambda a, b: a * b, n)\n    return (sum_ * prod) / gcd(sum_, prod)", "import operator, functools\ndef parameter(n):\n    ls = [int(i) for i in str(n)]\n    m = functools.reduce(operator.mul,ls)\n    s = sum(ls)\n    return m*s/gcd(m,s)\n    \ndef gcd(a,b):\n    if not b:\n        return a\n    else:\n        return gcd(b,a%b)", "from fractions import gcd\nfrom functools import reduce\nfrom operator import mul\n\ndef parameter(n):\n    digits = [int(d) for d in str(n)]\n    product = reduce(mul, digits)\n    total = sum(digits)\n    return product * total / gcd(product, total)", "parameter=lambda n:(lambda a,b:a*b//__import__('fractions').gcd(a,b))(*[eval(c.join(str(n)))for c in'+*'])", "from functools import reduce; gcd=lambda a,b: gcd(b,a%b) if b else a; lcm=lambda a,b: a/gcd(a,b)*b; parameter=lambda n: (lambda n: lcm(sum(n),reduce(lambda a,b: a*b,n,1)))([int(e) for e in str(n)])", "from math import gcd\n\ndef parameter(n):\n    total = sum(int(x) for x in str(n))\n    product = 1\n    for num in str(n):\n        product *= int(num)\n    return (total * product) // gcd(total,product)", "import math\n\ndef parameter(n):\n    \n    d = [int(x) for x in str(n)]\n    \n    s = sum(d)\n    \n    p = 1\n    \n    for i in range(0,len(d)):\n        \n        p*= d[i]\n        \n    g = math.gcd(s,p)\n    \n    l = (s*p)//g\n    \n    return l\n\n", "from functools import reduce\ndef digit_sum(n):\n    return sum(int(i) for i in str(n))\n\ndef digit_product(n):\n    return reduce(lambda a,b: a*int(b),str(n),1)\n    # return reduce(lambda a, b: a * b, map(int, str(n)), 1)\n\ndef gcd(x,y):\n    while y != 0:\n        x ,y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return x * y / gcd(x, y)\n\ndef parameter(n):\n    return lcm(digit_sum(n), digit_product(n))"]