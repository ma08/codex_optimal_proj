["import operator\nfrom functools import reduce\n\nOPS = {\n    \"AND\": operator.and_,\n    \"OR\" : operator.or_,\n    \"XOR\": operator.xor\n}\n\ndef logical_calc(array, op):\n    return reduce(OPS[op], array)\n", "from operator import and_, or_, xor\nfrom functools import reduce\n\nOPERATOR = {'AND': and_, 'OR': or_, 'XOR': xor}\n\n\ndef logical_calc(array, op):\n    return reduce(OPERATOR[op], array)\n", "def logical_calc(array, op):\n    ops = {\n            \"AND\" : lambda x,y: x & y,\n            \"OR\"  : lambda x,y: x | y,\n            \"XOR\" : lambda x,y: x ^ y\n           }\n  \n    from functools import reduce\n    return reduce(ops[op], array)", "def logical_calc(array, op):\n    res = array[0]\n    for x in array[1:]:\n        if op == \"AND\":\n            res &= x\n        elif op == \"OR\":\n            res |= x\n        else:\n            res ^= x\n        \n    return res #boolean", "def logical_calc(array, op):\n    s = ' ' + op.lower().replace('xor', '^') + ' '\n    return eval(s.join(str(x) for x in array))", "from functools import reduce\n\ndef logical_calc(array, op):\n    return reduce(lambda x,y: {'OR': x or y, 'AND': x and y, 'XOR': x ^ y}[op], array)", "def logical_calc(array, op):\n    res = array[0]\n    for i in array[1:]:\n        if op == 'AND':\n            res = res and i\n        elif op == 'OR':\n            res = res or i\n        elif op == 'XOR':\n            res = res != i\n    return res", "def logical_calc(array, op):\n    result = False\n    if len(array) == 1: return array[0]\n    \n    if op == \"AND\": result = array[0] and array[1]\n    if op == \"OR\": result = array[0] or array[1]\n    if op == \"XOR\": result = array[0] ^ array[1]\n    \n    for n in range(2,len(array)):\n        if op == \"AND\":\n            result = result and array[n]\n        if op == \"OR\":\n            result = result or array[n]\n        if op == \"XOR\":\n            result = result ^ array[n]\n            \n    return result", "from operator import and_, or_, xor\nfrom functools import reduce\n\ndef logical_calc(array, op_str):\n  op = {\"AND\": and_, \"OR\": or_, \"XOR\": xor}[op_str]\n  return reduce(op, array)", "def logical_calc(array, op):    \n    return {'AND':all(array), 'OR':any(array)}.get(op) if op!='XOR'else __import__('functools').reduce(lambda x,y: x^y, array)", "def logical_calc(arr, op):\n    return eval((\" ^ \" if op == \"XOR\" else \" \" + op.lower() + \" \").join(str(x) for x in arr))", "from functools import reduce\ndef logical_calc(array, op):\n        if op == 'AND':\n             return reduce((lambda x, y: x and y), array)\n        elif op == 'OR':\n             return reduce((lambda x, y: x or y), array)\n        else:\n            return reduce((lambda x, y: x ^ y), array)\n#This one fucked my mind for two days & here i got then! :p\n#Completed by Ammar on 1/8/2019 at 09:51PM.\n", "ops = {'AND': '&', 'OR': '|', 'XOR': '^'}\ndef logical_calc(array, op):\n    return bool(eval(ops[op].join([str(int(i)) for i in array])))", "from operator import and_, xor, or_\nfrom functools import reduce\n\n\ndef logical_calc(array, op):\n    operations = {\"AND\": and_, \"OR\": or_, \"XOR\": xor}\n\n    return reduce(operations[op], array)\n", "from operator import and_, or_, xor\nfrom functools import reduce\n\nlogical_calc = lambda xs, op: reduce({ 'AND': and_, 'OR': or_, 'XOR': xor }.get(op), xs)", "import operator\nfrom functools import reduce\n\ndef logical_calc(array, op):\n    op = '__{}__'.format(op.lower())\n    op = getattr(operator, op)\n    return reduce(op, array)\n", "from functools import reduce\n\ndef logical_calc(array, op):\n    if op == 'AND':\n        return reduce(lambda x, y: x and y, array)\n    elif op == 'OR':\n        return reduce(lambda x, y: x or y, array)\n    elif op == 'XOR':\n        return reduce(lambda x, y: x != y, array)", "def logical_calc(array, op):\n  return eval({ 'AND': '&', 'OR': '|', 'XOR': '^' }[op].join(map(str, array)))", "from functools import reduce\nfrom operator import ixor\nfrom typing import List\n\ndef logical_calc(array: List[bool], op: str) -> bool:\n    \"\"\" Calculate logical value of boolean array. \"\"\"\n    return {\n        \"AND\": lambda: all(array),\n        \"OR\": lambda: any(array),\n        \"XOR\": lambda: reduce(ixor, array)\n    }.get(op)()", "def logical_calc(array, op):\n    out=array.pop(0)\n    for x in array: out={'AND':x&out, 'OR':x|out, 'XOR': x^out}[op]\n    return out", "def logical_calc(array, op):\n    return {'AND': all, 'OR': any, 'XOR': lambda a: sum(a) % 2}[op](array)", "def logical_calc(array, op):\n    if op == 'AND':\n        for item in array:\n            if item is False: return False\n        return True\n        \n    elif op == 'OR':\n        for item in array:\n            if item is True: return True\n        return False\n        \n    else:\n        a = len([a for a in array if a is True])\n        if a%2!=0 and a > 0:\n            return True\n        return False", "from functools import reduce; logical_calc=lambda array, op: reduce(lambda a,b: a and b if op==\"AND\" else a or b if op==\"OR\" else a!=b, array)", "def logical_calc(array, op):\n    if op=='AND': return all(array)\n    elif op=='OR': return any(array)\n    else: return sum(array)%2==1", "def logical_calc(array, op):\n    if op == 'AND': return False not in array\n    if op == 'OR': return True in array\n    \n    result = array[0]\n    \n    for index in range(1, len(array)):\n        result ^= array[index]\n        \n    return result", "def logical_calc(arr, op):\n    return all(arr) if op == 'AND' else any(arr) if op == 'OR' else arr.count(True) % 2", "def logical_calc(array, op):\n    #dictionary\n    \n    return eval({'AND':'&','OR':'|'}.get(op,'^').join(str(i) for i in array))\n    \n    #string\n    #return eval((op.lower() if op!='XOR' else '^').join(' '+str(i)+' ' for i in array))\n", "def logical_calc(array, op):\n    # convert bool array values to str and join them with the specified operator\n    # return the results using eval() on the resulting string\n    return eval({'AND': '&', 'OR': '|', 'XOR': '^'}[op].join(map(str, array)))", "import functools\n\ndef logical_calc(array, op):\n    return {\"AND\": all, \"OR\":any, \"XOR\":xor}[op](array)\n    \ndef xor(array):\n    return functools.reduce(lambda x, y: x != y, array)", "def logical_calc(array, op):\n    if op == \"AND\":\n        return all(boolian for boolian in array)\n    elif op == \"OR\":\n        return any(boolian for boolian in array)\n    else:\n        return sum(array) % 2", "def logical_calc(array, op):\n    if op == 'AND':\n        return all(array)\n    elif op == 'OR':\n        return any(array)\n    else:\n        return array.count(True) % 2", "def logical_calc(array, op):\n    ans = array[0]\n    for i in array[1:]:\n        if op == \"AND\":\n            ans = ans & i\n        elif op == \"OR\":\n            ans = ans | i\n        else :\n            ans = ans ^ i\n    return ans", "def logical_calc(array, op):\n    ans=array[0]\n    for operator in array[1:]:\n        \n        if op==\"AND\": ans=ans and operator\n        elif op==\"OR\": ans=ans or operator\n        else: ans=ans ^ operator\n    return ans\n        \n#     return #boolean\n", "def logical_calc(arr, op):\n\n    answer = arr[0]\n\n    if op == \"AND\":\n        for i in range(len(arr)-1):\n            answer &= arr[i+1]\n\n    if op == \"OR\":\n        for i in range(len(arr)-1):\n            answer |= arr[i+1]\n\n    if op == \"XOR\":\n        for i in range(len(arr)-1):\n            answer ^= arr[i+1]\n            \n    return answer", "def logical_calc(arr, op):\n    \n    answer = arr[0]\n    \n    if len(arr)>=2:\n\n        if op == \"AND\":\n            for i in range(len(arr)-1):\n                answer &= arr[i+1]\n\n        if op == \"OR\":\n            for i in range(len(arr)-1):\n                answer |= arr[i+1]\n\n        if op == \"XOR\":\n            for i in range(len(arr)-1):\n                answer ^= arr[i+1]\n\n    return answer", "def logical_calc(array, op):\n    curr = array[0]\n    for x in range(1, len(array)):\n        if op == \"AND\":\n            curr = array[x] and curr\n        if op == \"OR\":\n            curr = array[x] or curr\n        if op == \"XOR\":\n            curr = (array[x] and not curr) or (not array[x] and curr)\n    return curr", "from functools import reduce\nlogical_calc = lambda l,op:reduce(lambda a,b:a and b if op == 'AND' else a or b if op == 'OR' else a != b,l)", "def logical_calc(array, op):\n    start=array[0]\n    for i in range(1,len(array)):\n        if op==\"AND\":\n            start=start and array[i]\n        elif op==\"OR\":\n            start=start or array[i]\n        elif op==\"XOR\":\n            if start==array[i]:\n                start=False \n            else:\n                start=True\n    return start", "def logical_calc(array, op):\n    if op == 'AND':\n        return not False in array\n    elif op == 'OR':\n        return True in array\n    elif op == 'XOR':\n        return (array.count(True) % 2) != 0", "def logical_calc(array, op):\n    ops = {'XOR': ' ^ ',\n          'AND' : ' and ',\n          'OR'  : ' or '}\n    \n    return eval(ops[op].join([str(v) for v in array]))\n", "from functools import reduce\n\ndef logical_calc(array, op):\n    return all(array) if op == 'AND' else any(array) if op == 'OR' else reduce(lambda x,y: x != y, array)", "def logical_calc(array, op):\n    state = None\n    operation = None\n\n    if op == \"AND\":\n        for i in range(len(array)):\n            state = array[i] if i == 0 else state and array[i]\n    elif op == \"OR\":\n        for i in range(len(array)):\n            state = array[i] if i == 0 else state or array[i]\n    elif op == \"XOR\":\n        for i in range(len(array)):\n            state = array[i] if i == 0 else state ^ array[i]\n    else:\n        return f\"input - {op} - not recognized\"\n    \n    return state", "\n\ndef logical_calc(array, op):\n    print(array)\n    print(op)\n    print(len(array))\n    count_True = 0\n    count_False = 0\n    for line in array:\n        if line == True:\n            count_True += 1\n        else: count_False += 1\n    print(count_False)\n    print(count_True)\n    if op == 'AND':\n        if count_True == len(array):\n            return True\n        else: return False\n    elif op == 'OR':\n        if count_False == len(array):\n            return False\n        else: return True\n    elif op == 'XOR':\n        if count_True % 2 == 0:\n            return False\n        else: return True", "import operator\nfrom functools import reduce\n\ndef logical_calc(array, op):\n    return reduce(getattr(operator, '__{}__'.format(op.lower())), array)    ", "def logical_calc(array, op):\n    if len(array)==1:\n        return array[0]\n    else:\n        if op.lower()=='and':\n            s=array[0] & array[1]\n            for i in range(2,len(array)):\n                s=s & array[i]\n            return s\n        elif op.lower()=='or':\n            s=array[0] | array[1]\n            for i in range(2,len(array)):\n                s=s | array[i]\n            return s\n        if op.lower()=='xor':\n            s=array[0] ^ array[1]\n            for i in range(2,len(array)):\n                s=s ^ array[i]\n            return s", "logical_calc=lambda a,o:__import__('functools').reduce({'AND':lambda a,b:a&b,'OR':lambda a,b:a|b,'XOR':lambda a,b:a^b}[o],a,o=='AND')", "def logical_calc(array, op):\n    bool = array[0]\n    for x in range(1, len(array)):\n        if op == 'AND':\n            bool = array[x] & bool\n        if op == 'OR':\n            bool = array[x] | bool\n        if op == 'XOR':\n            bool = array[x] ^ bool\n    return bool", "from functools import reduce\n\ndef logical_calc(array, op):\n    operators = {\n        'AND': all(array),\n        'OR':  any(array),\n        'XOR': reduce(lambda x, y: x ^ y, array)\n    }\n    return operators[op]", "dict = {\n    True: 1,\n    False: 2\n}\n\n\ndef logical_calc(array, op):\n    print(array, op)\n    arrn = []\n    length = len(array)\n    for x in array:\n        arrn.append(dict[x])\n    if op == \"XOR\":\n        if sum(arrn) == 1:\n            return True\n        elif sum(arrn) == 2:\n            return False\n        else:\n            i = 0\n            x = array[0]\n            while i < len(array) - 1:\n                x = x == array[i + 1]\n                i += 1\n            if x:\n                return False\n            else:\n                return True\n    elif sum(arrn) == length and op == \"AND\":\n        return True\n    elif array.count(False) == length:\n        return False\n    elif (sum(arrn) != length or sum(arrn) != length * 2) and op == \"OR\":\n        return True\n    else:\n        return False", "def logical_calc(array, op):\n    print(array, op)\n    if(op == \"AND\"):\n        if(array.count(False)):\n            return False\n    elif(op == \"OR\"):\n        if(array.count(True) == 0):\n            return False\n    else:\n        if(array.count(True) % 2 == 0):\n            return False\n    return True", "import distutils\n\ndef quick_op(op, old, new):\n    if op == \"AND\":\n        return old and new\n    elif op == \"OR\":\n        return old or new\n    elif op == \"XOR\":\n        return old ^ new\n\ndef logical_calc(array, op):\n    latest_operation = array[0]\n    array.pop(0)\n    for item in array:\n        latest_operation = quick_op(op, latest_operation, item)\n    return latest_operation", "def logical_calc(array, op):\n    if op == 'XOR':\n        result = array[0]\n        for element in array[1:]:\n            if element == result:\n                result = False\n            else:\n                result = True\n        return result\n    return all(array) if op =='AND' else any(array)", "from functools import reduce\n\ndef logical_calc(array, op):\n    oper = op.lower() if op != \"XOR\" else '^'\n    return reduce(lambda x, y: eval(f'{x} {oper} {y}'), array)", "def logical_calc(array, op):\n    if op == 'AND':\n        return array.count(False) == 0\n    elif op == 'OR':\n        return array.count(True) != 0\n    else:\n        return array.count(True) % 2 == 1", "from operator import __and__, __or__, __xor__ \n\noperators = {\n    'AND': __and__,\n    'OR': __or__,\n    'XOR': __xor__\n}\n\ndef logical_calc(arr, op):\n    acc = arr[0]\n    \n    for item in arr[1:]:\n        acc = operators[op](acc, item)\n        \n    return acc", "from operator import and_\nfrom operator import or_\nfrom operator import xor\nfrom functools import reduce\n\ndef logical_calc(array, op):\n    if op == \"XOR\":\n        return reduce(xor, array)\n    elif op == \"AND\":\n        return reduce(and_, array)\n    elif op == \"OR\":\n        return reduce(or_, array)", "def logical_calc(array, op):\n    bool = array[0] == True\n    for i in range(1, len(array)):\n        if op == \"AND\":\n            bool = bool & array[i]\n        elif op == \"OR\":\n            bool = bool | array[i]\n        elif op == \"XOR\":\n            bool = bool ^ array[i]\n    return bool == True", "def logical_calc(array, op):\n    if op == 'AND':\n        for bool in array:\n            if bool == False:\n                return False\n        return True\n    elif op == 'OR':\n        for bool in array:\n            if bool == True:\n                return True\n        return False\n    else:\n        aux = array[0]\n        i = 1\n        while i < len(array):\n            if aux != array[i]:\n                aux = True\n            else:\n                aux = False\n            i+=1\n        return aux", "def logical_calc(array, op):\n    return eval(' {} '.format({\"AND\": 'and', \"OR\": 'or'}.get(op, '^')).join(str(x) for x in array))", "def logical_calc(array, op):\n    val = array.pop()\n    for i in array:\n        if op == 'AND':\n            if not i:\n                return False\n        elif op == 'OR':\n            if i:\n                return True\n        else:\n            val ^= i;\n    return val", "def logical_calc(array, op):\n    print(array, op)\n    if op=='AND':\n        return False not in array\n    if op=='OR':\n        return True in array or (True in array and False in array)\n    if op=='XOR':\n        return array.count(True)%2!=0 or (True in array and array.count(False)%2!=0)", "def logical_calc(array, op):\n    if op == 'XOR':\n        op = '^'\n    op = op.lower()\n    array = [str(i) for i in array]\n    arr2 = []\n    for i in range(len(array)):\n        arr2.append(array[i])\n        arr2.append(op)\n    arr2 = arr2[0:-1]\n    \n    return eval(' '.join(arr2))\n\n", "import functools\ndef logical_calc(array, op):\n    if op == \"AND\":\n        return functools.reduce(lambda prev, curr: prev and curr, array)\n    if op == \"OR\":\n        return functools.reduce(lambda prev, curr: prev or curr, array)\n    if op == \"XOR\":\n        return functools.reduce(lambda prev, curr: prev ^ curr, array)", "def logical_calc(array, op):\n    \n    if False in array and op == \"AND\":\n        return False\n    elif op == \"AND\":\n        return True\n    elif True in array and op == \"OR\":\n        return True\n    elif op == \"OR\":\n        return False\n    elif int(array.count(True)) % 2 == 0 and int(array.count(False)) % 2 == 0 and op == 'XOR':\n        return False\n    elif int(array.count(True)) % 2 == 1 and op == 'XOR':\n        return True\n    elif int(array.count(False)) % 2 == 1 and int(array.count(True)) % 2 == 1 and op == 'XOR':\n        return False\n    elif int(array.count(False)) % 2 == 1 and op == 'XOR':\n        return False\n    \n", "from functools import reduce\n\ndef logical_calc(array, op):\n    if op == 'AND':\n        value = reduce((lambda x, y: x and y), array) \n    elif op == 'OR':\n        value = reduce((lambda x, y: x or y), array) \n    else:\n        value = reduce((lambda x, y: x ^ y), array) \n        \n    return value", "def logical_calc(array, op):\n    log = array[0]\n    for i in array[1:51]:\n        if op == \"AND\":\n            log = log and i\n        elif op == \"OR\":\n            log = log or i\n        else:\n            log = log ^ i\n    return log\n", "def logical_calc(array, op):\n    if op == \"AND\":\n        return False not in array             \n    elif op == \"OR\":\n        return True in array\n    elif op == \"XOR\":\n        s1=sum(array)\n        if s1%2 == 0:\n            return False\n        else:\n            return True\n", "def logical_calc(array, op):\n    bool = array[0]\n    if op == \"AND\":\n        for n in range(len(array) - 1):\n            bool = bool and array[n + 1]\n    elif op == \"OR\":\n        for n in range(len(array) - 1):\n            bool = bool or array[n + 1]\n    elif op == \"XOR\":\n        for n in range(len(array) - 1):\n            bool = (bool or array[n + 1]) and not (bool and array[n + 1])\n    else:\n        bool = False\n    return bool", "def logical_calc(array, op):\n    logic = \"\"\n    if op == \"XOR\":\n        op = \"^\"\n    \n    for x in array[0:len(array)-1]:\n        logic = logic + \" \" + str(x) + \" \" + op.lower()\n    \n    logic = logic + \" \" + str(array[-1])\n    \n    ans = eval(logic.strip())\n    \n    return ans", "def logical_calc(arr, log):\n    x = {'AND': 'and', 'OR': 'or', 'XOR': '!='}\n    y = arr.pop(0)\n    while len(arr) > 0:\n        y = eval(str(y) + f' {x[log]} ' + str(arr.pop(0)))\n    return y", "def xor(a,b):\n    return a+b-2*a*b\n\ndef logical_calc(array, op):\n    if op =='OR':\n        result = array[0]\n        for value in range(1,len(array)):\n              result = result or array[value]\n        return result\n    if op=='AND':\n        result = array[0]\n        for value in range(1,len(array)):\n              result = result and array[value]\n        return result\n    if op=='XOR':\n        result = array[0]\n        for value in range(1,len(array)):\n              result = xor(result,array[value])\n        return result", "def logical_calc(array, op):\n    a = array[0]\n    if op == 'AND':\n        for i in range(len(array)-1):\n            a = a and array[i+1]\n        return bool(a)\n    elif op == 'OR':\n        for i in range(len(array)-1):\n            a = a or array[i+1]\n        return bool(a)\n    elif op == 'XOR':\n        for i in range(len(array)-1):\n             a = a != array[i+1]\n        return bool(a)\n", "from functools import reduce\ndef logical_calc(array, op):\n    return {\n        'AND': all(array),\n        'OR' : any(array),\n        'XOR': reduce(lambda x,y: x ^ y, array)\n    }.get(op)", "def logical_calc(array, op):\n    print((array, op))\n    if op == \"AND\":\n        return not (False in array)\n    if op == \"OR\":\n        return (True in array)\n    status = False\n    for bool in array:\n        status = bool ^ status  \n        \n    return status\n", "import functools\n\ndef logical_calc(array, op):\n    arr = {\n        \"AND\":lambda a,b: a and b,\n        \"OR\":lambda a,b: a or b,\n        \"XOR\":lambda a,b: a != b\n    }\n    return functools.reduce(arr[op],array)", "from functools import reduce\nimport operator\n\ndef logical_calc(array, op):\n    if op == \"AND\":\n        o = operator.and_\n    elif op == \"OR\":\n        o = operator.or_\n    elif op == \"XOR\":\n        o = operator.xor\n        \n    return reduce(o, array)", "def logical_calc(array, op):\n    if op == \"AND\":\n        return all(array)\n    elif op == \"OR\":\n        return any(array)\n    elif op == \"XOR\":\n        return array.count(True) % 2 != 0", "def logical_calc(array, op):\n    return eval(f' {op.lower() if op != \"XOR\" else \"^\"} '.join(map(str, array)))", "from operator import __and__, __or__, __xor__\nfrom functools import reduce\n\ndef logical_calc(a, op):\n    if op == \"AND\":\n        return reduce(__and__, a)\n    if op == \"OR\":\n        return reduce(__or__, a)\n    else:\n        return reduce(__xor__, a)", "def logical_calc(array, op):\n    import functools\n    if op==\"AND\":\n        return functools.reduce(lambda i,j:i and j, array)\n    elif op==\"OR\":\n        return functools.reduce(lambda i,j:i or j, array)\n    elif op==\"XOR\":\n        return functools.reduce(lambda i,j:i ^ j, array)\n", "from functools import reduce\n\ndef logical_calc(array, op):\n    if op == \"AND\": return reduce(lambda a,b: a and b, array)\n    if op == \"OR\": return reduce(lambda a,b: a or b, array)\n    return reduce(lambda a,b: a ^ b, array)", "from functools import reduce\ndef logical_calc(array, op):\n    if op=='XOR':\n        op='^'\n    return reduce(lambda a,b:eval(str(a)+' '+op.lower()+' '+str(b)),array)", "def logical_calc(array, op):\n    c = len(array)\n    res = array[0]\n    for i in range(c-1):\n        if op=='AND':\n            res = res and array[i+1]\n        if op=='OR':\n            res = res or array[i+1]\n        if op=='XOR':\n            res = res != array[i+1]\n    return res", "def logical_calc(array, op):\n    first = array[0]\n    for i in range(0, len(array)-1):\n        if op == \"AND\":\n            first = array[i+1] and first\n        elif op == \"OR\":\n            first = array[i+1] or first\n        elif op == \"XOR\":\n            first = array[i+1] ^ first\n    return first", "def logical_calc(array, op):\n    res = array[0]\n    if op == \"AND\":\n        for i in range(1,len(array)):\n            res *= array[i]\n    elif op == \"OR\":\n        for i in range(1,len(array)):\n            res |= array[i]\n    else:\n        for i in range(1,len(array)):\n            res ^= array[i]\n    return res", "def logical_calc(array, op):\n    op = op.lower()\n    if op == \"xor\":\n        op = \"!=\"\n    for id in range(len(array)-1):\n        array[id+1]=eval(str(array[id])+\" \"+op+\" \"+str(array[id+1]))\n    return array[-1]#boolean", "from functools import reduce\n\ndef logical_calc(array, op):\n    return {\n        'AND': reduce(lambda x, y: x & y, array),\n        'OR': reduce(lambda x, y: x | y, array),\n        'XOR': reduce(lambda x, y: x ^ y, array)\n    }.get(op)", "def logical_calc(ar, op):\n    if op == 'AND':\n        return (False not in ar)\n    elif op == 'OR':\n        return (True in ar)\n    elif op == 'XOR':\n        if len(ar) == 2:\n            return not (ar[0] == ar[1])\n        elif len(ar) > 2:\n            a = ar.pop(0)\n            b = ar.pop(0)\n            ar.insert(0,not (a == b))\n            return logical_calc(ar, op)\n        elif len(ar) == 1:\n            return ar[0]", "from functools import reduce\n\n\ndef logical_calc(array, op):\n    if op == 'AND':\n        l = lambda x, y: x and y\n    elif op == 'OR':\n        l = lambda x, y: x or y\n    else:\n        l = lambda x, y: x ^ y\n    return reduce(l, array)"]