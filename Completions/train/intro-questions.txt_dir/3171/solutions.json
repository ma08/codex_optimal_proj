["from functools import reduce\n\ndef crashing_weights(weights):\n    return reduce(lambda a, b: [a1 + b1 if a1 > b1 else b1 for a1, b1 in zip(a, b)], weights)", "def crashing_weights(weights):\n    lst = [0] * len(weights[0])\n    for line in weights:\n        lst = [b if a <= b else a+b for a,b in zip(lst, line)]\n    return lst", "def crashing_weights(weights):\n    if len(weights) < 2:\n        return weights[0]\n    result = []\n    for row in zip(*weights):\n        cur = row[0]\n        for nxt in row[1:]:\n            cur = cur + nxt if cur > nxt else nxt\n        result.append(cur)\n    return result\n", "from itertools import *\n\ndef crashing_weights(arr):\n    arr = list(zip(*arr))\n    return [list(accumulate(i,lambda x,y: x+y if x>y else y))[-1] for i in arr]", "from functools import reduce\n\ndef crashing_weights(weights):\n    return [reduce(lambda x,y: x*(x>y) + y, pile) for pile in zip(*weights)]", "def crashing_weights(a):\n    li = [list(i) for i in zip(*a)]\n    for i in range(len(li)):\n        for j in range(len(li[i]) - 1):\n            if li[i][j] > li[i][j + 1]:\n                li[i][j + 1] += li[i][j]\n                li[i][j] = 0\n    return [list(i) for i in zip(*li)][-1]", "from functools import reduce\n\ndef crashing_weights(weights):\n    return reduce(crash_if_heavier, weights)\n\ndef crash_if_heavier(upper_row, lower_row):\n    return [wl if wu <= wl else wu + wl for wu, wl in zip(upper_row, lower_row)]", "def crashing_weights(weights):\n    w=zip(*weights)\n    ans=[]\n    for i in w:\n        i=list(i)[::-1]\n        while len(i)>1 and i!=sorted(i, reverse=True):\n            for j in range(len(i)-1,0,-1):\n                if i[j-1]<i[j]:\n                    i[j-1]+=i[j]\n                    del i[j]\n                    break\n        ans.append(i[0])\n    return ans", "def crashing_weights(weights):\n    r=[]\n    for t in zip(*weights):\n        l=list(t)\n        for i in range(1,len(l)):\n            if l[i-1]>l[i]:\n                l[i]+=l[i-1]\n        r.append(l[-1])\n    return r", "def crashing_weights(weights):\n    result = []\n    for row in zip(*weights):\n        if len(row) < 2:\n            return weights[0]\n        cur = row[0]\n        for nxt in row[1:]:\n            cur = cur + nxt if cur > nxt else nxt\n        result.append(cur)\n    return result\n"]