["def quadratic(x1, x2):\n    return (1,-x1-x2,x1*x2)\n", "def quadratic(x1, x2):\n    return (1, -(x1 + x2), x1 * x2)\n", "import numpy as np\n\ndef quadratic(*args):\n    return tuple(np.poly(args))", "def quadratic(x1, x2):\n    equ = 1 , - x1-x2 , x1*x2\n    return equ\n", "def quadratic(x1, x2):\n    a = (1, -(x1+x2), x2*x1)\n    return a\n", "quadratic=lambda x,y:(1,-x-y,x*y)\n", "def quadratic(x1, x2):\n    a = 1\n    b = -(x1 + x2)\n    c = x1 * x2\n    return a, b, c\n", "def quadratic(a, b):\n    return (1, 0-a-b, a*b)\n", "def quadratic(x1, x2):\n    coef=[1,]\n    coef.append(-x1 -x2)\n    coef.append(x1 * x2)\n    return tuple(coef)\n    \n", "def quadratic(x1, x2):\n    print(x1,x2)\n    a=1\n    b=-(x1+x2)\n    c=x1*x2\n    return (a, b, c)", "def quadratic(x1, x2):\n    a = 1\n    b = x1*a + x2*a\n    c = x1*x2\n    z = (a,-b,c)\n    return z\n", "def quadratic(x1, x2):\n    if x1 != x2:\n        c = (x1 * x1 * x2 - x2 * x2 * x1) / (x1 - x2)\n        b = (-c - x1 * x1) / x1 if x1 else (-c - x2 * x2) / x2\n        return (1, b, c)\n    else:\n        return (1, -2 * x1, x1 * x1)", "def quadratic(x1, x2):\n    if x1 or x2 >= 0:\n        sum = x1 + x2\n        mult = x1 * x2\n        return 1, -sum, mult\n    if x1 or x2 <= 0:\n        sum1 = x1 + x2\n        mult1 = x1 * x2\n        return 1, sum1, mult1\n", "quadratic = lambda r1, r2: (1, -(r1+r2), r1*r2)", "def quadratic(x1, x2):\n    f=(-x2)\n    t=(-x1)\n    z=f+t\n    e=-x1*-x2\n    return (1,z,e)\n    \n    \n    \n", "def quadratic(x1, x2):\n    output = 1\n    output1 = -x1 - x2\n    output2 = x1 * x2\n    return output, output1, output2\n", "def quadratic(x1, x2):\n    a =1\n    b = -x1  + - x2\n#     result.append(b)\n    c = -x1 * -x2\n#     result.append(c)\n    return (a,b,c)\n    \n    \n", "def quadratic(x1, x2):\n    answer = (1, (x1 + x2) * -1, x1 * x2)\n    return answer\n", "def quadratic(x1, x2):\n    a=1\n    b = -(x1+x2)\n    c = x2*x1\n    return (a,b,c)\n", "def quadratic(x1, x2):\n    b = -x1-x2\n    c = x1*x2\n    array =(1,b,c)\n    return array", "def quadratic(x1, x2):\n    a = 1\n    b = -x1 - x2\n    c = x1 * x2\n    print(a, b, c)\n    return a, b, c", "def quadratic(x1, x2):\n    a = 1\n    b = (-1 * x1) + (-1 * x2)\n    c = x1 * x2\n    eq = (a, b, c)\n    return eq\n", "def quadratic(x1, x2):\n    a = 1\n    b = -(x1+x2)\n    c = x1*x2\n    return (1, b, c)", "def quadratic(x1, x2):\n    a=1\n    b= -(x1)+(x2*-1)\n    c= -(x1)*(x2*-1)\n    return (a, b, c)\n\n", "import numpy as np\n\ndef quadratic(x1, x2):\n    b = -1 * (x1 + x2)\n    c = x1 * x2\n    \n    return (1, b, c)\n    pass\n", "def quadratic(x1, x2):\n    a = 1\n    b = -(x1 + x2)\n    c = x1 * x2\n    re= (a, b, c);\n    return re", "def quadratic(x1,\n              x2):\n\n    return (1,\n            (x1 + x2) * -1,\n            x1 * x2)\n", "def quadratic(x1, x2):\n    a = []\n    a.append(1)\n    a.append(-(x1 + x2))\n    a.append(x1 * x2)\n    a = tuple(a)\n    return a\n", "def quadratic(x1, x2):\n    a,c=1,x1*x2\n    return (1,-(x1+x2),x1*x2)\n", "def quadratic(x1, x2):\n    return tuple((1, -x1-x2, x1*x2))\n\n\n", "def quadratic(x1, x2):\n    if x1 + x2 > 0:\n        return 1,-x1-x2,x1*x2\n    else:\n        return 1,-x1-x2,x1*x2", "def quadratic(x1, x2):\n    #(x-x1)*(x-x2)=0\n    #x^2 - x2x- x1x + x1x2\n    return (1,(-x1-x2),x1*x2)\n", "def quadratic(x1, x2):\n    print((x1, x2))\n    a = 1\n    if x2 - x1 != 0:\n        b = (x1 ** 2 - x2 ** 2) / (x2 - x1)\n        c = - x1 ** 2 - b * x1\n    else:\n        c = x1 ** 2\n        b = -2 * x1\n    return a, b, c\n", "def quadratic(x1, x2):\n    x=1\n    y=x1+x2\n    z=x1*x2\n    return (x,-y,z)\n", "def quadratic(x1, x2):\n    eq = (1, -(x1 + x2), (x1*x2))\n    return eq\n", "def quadratic(x1,x2):\n    a = 1 #given\n    b = (a * - x2) + (a * - x1) #(x-x1) * (x-x2) = 0\n    c = -x1 * -x2\n    return(a,b,c)\n\nprint(quadratic(1,2))", "def quadratic(x1, x2):\n    b = -x2 + -x1\n    c = x1 * x2\n    \n    return (1, b, c)\n", "def quadratic(x1, x2):\n    a = (x1 + x2) * (-1)\n    b = x1 * x2 \n    return (1, a, b)", "def quadratic(x1, x2):\n    x = 1\n    return (x,-(x1+x2),(x1*x2))\n    \n", "def quadratic(x1, x2):\n    a = 1\n    b = (-x2) + (-x1)\n    c = (-x2) * (-x1)\n    coeff = (a, b, c)\n    return coeff\n    \n", "def quadratic(x1, x2):\n    coff = [1]\n    coff.append(-x2 - x1)\n    coff.append(-x1 * -x2)\n    return tuple(coff)", "def quadratic(x1, x2):\n    b = -1*x1 - x2\n    c = x1*x2\n    return (1, b, c)", "def quadratic(x1, x2):\n    # return 1, -(abs(x1)+abs(x2)), x1*x2\n    return 1, -x1+-x2, x1*x2", "def quadratic(x1, x2):\n    ans  = []\n    ans.append(1)\n    ans.append(-(x1 + x2))\n    ans.append(x1*x2)\n    return tuple(ans)\n", "def quadratic(x1, x2):\n    a=x1+x2\n    b=x1*x2\n    return (1, -a, b)\n", "def quadratic(x1, x2):\n    y = (1, -(x1+x2), x2*x1)\n    return y\n\n", "def quadratic(x1, x2):\n    t = (1, -(x1 + x2), x1*x2 )\n    return t\n", "def quadratic(x1, x2):\n   a = 1\n   b = -x1-x2\n   c = (b**2 - (x1-x2)**2)/4\n   return (a, b, c) \n   \n   \n\n", "def quadratic(x1, x2):\n    a=1\n    b=-(a*(x1+x2))\n    c=(a*(x1*x2))\n    return((a,b,c))\n", "def quadratic(x1, x2):\n    #0=x^2-(x1+x2)*x+x1*x2\n    y=-(x1+x2)\n    t=(1,y,x1*x2)\n    return t", "def quadratic(x1, x2):\n    return (1,(-1*x2)+(-1*x1),(-1*x1)*(-1*x2))\n", "def quadratic(x1, x2):\n    a = 1\n    b = (x1 + x2)*(-1)\n    c = x1*x2\n    s = (a, b, c)\n    return s", "def quadratic(x1, x2):\n    a = 1\n    b = -a * x1 -a * x2\n    c = a * x1 * x2\n    \n    return (a, b, c)\n", "import math  \n\n\ndef quadratic(x1, x2):\n    a = 1 \n    b = -x1 - x2\n    c = x1 * x2\n    return (a, b, c)\n    \n        \n    \n", "def quadratic(x1, x2):\n    a=1\n    b=x1+x2\n    c=x1*x2\n    return a,-b,c", "def quadratic(x1, x2):\n    co1 = 1 \n    co2 = - ( x2 + x1)\n    co3 = x1 * x2\n    result = (co1 , co2 , co3)\n    return(result)\n", "def quadratic(x1, x2):\n    #quadratic (x1, x2) = (x - x1)(x - x2)\n    a = 1\n    b = -(x1 + x2)\n    c = (x1 * x2)\n    return (a, b, c)\n", "def quadratic(x1, x2):\n    \"\"\"\n        Returns the coefficients of the equations in the order (a, b, c)\n        \n        Note: Since there are infinitely many solutions to this problem, we fix a = 1.\n    \"\"\"\n    return (1, -(x1 + x2), x1 * x2)", "def quadratic(x1, x2):\n    return (1,-x1-x2,x1*x2)\n\nx = quadratic(56,99)\nprint(x)\n", "def quadratic(x1, x2):\n    eq = (1, -(x1+x2), x2*x1)\n    return eq\n", "def quadratic(x1, x2):\n    result = -(x1+x2)\n    return 1,result,x1*x2", "def quadratic(x1, x2):\n    a = 1 \n    if x1 < 0:\n        c = x1 * x2 \n    \n    else:\n        c = x1 * x2\n        \n    if x1 > 0 or x2 > 0:\n        b = -(x1 + x2) \n    else:\n        b = abs(x1 + x2) \n    tuple = (a, b , c)\n    return tuple", "def quadratic(x1, x2):\n    return (1, -x2-x1, x2*x1)\n", "def quadratic(x1, x2):\n    return (1, x2*-1 + x1*-1, x1*x2)\n    \n", "def quadratic(x1, x2):\n    b = -x1 + -x2\n    c = x1 * x2\n    return (1,b,c)", "def quadratic(x1, x2):\n    coef = ()\n    a = 1\n    b = -(x1 + x2)\n    c = -x1 * -x2 \n    \n    coef = (a, b, c)\n    return coef\n", "def quadratic(x1, x2):\n    #(x - x1) * (x - x2) = 0\n    a = 1\n    b = 1* -x2 + -x1 * 1\n    c = -x1 * -x2\n    return (a, b, c)\n\n", "def quadratic(x1, x2):\n    a = 1\n    b = x1 + x2\n    c = x1 * x2\n    roots = (a, -b, c)\n    return roots", "def quadratic(x1, x2):\n    coeff = 1 , -x1-x2 , x1*x2\n    return coeff\n", "def quadratic(x1, x2):\n    a=1\n    if x1!=x2:\n        b=(x2**2-x1**2)/(x1-x2)\n        c=-x1**2-b*x1\n    else:\n        b=-2*x1\n        c=-x1**2-b*x1\n    return (a,b,c)\n", "def quadratic(x1, x2):\n    answer=(1,-x1-x2,x1*x2)\n    return answer\n", "def quadratic(x1, x2):\n    a = 1\n    b = -x1-x2\n    c = x1*x2\n    vector = (a,b,c)\n    return vector\n", "def quadratic(x1, x2):\n    x = 1\n    f = (x * x ), (x * - (x2)),(-x1 * x) ,(-x1 * - (x2))\n    return f[0], f[1] + f[2], f[3]\n    \n \n", "def quadratic(x1, x2):\n    x = 1\n    formula = (x * x ), (x * - (x2)),(-x1 * x) ,(-x1 * - (x2))\n    return formula[0], formula[1] + formula[2], formula[3]\n    \n \n", "def quadratic(x1, x2):\n    int(x1)\n    int(x2)\n    thisdict = {\n      'a': 1,\n      'b': (-x1) + (-x2),\n      'c': (-x1) * (-x2)\n    }\n    return (thisdict.get('a'), thisdict.get('b'), thisdict.get('c'))\n    \n    \n", "def quadratic(x1, x2):\n    a=1\n    c=(-x1*-x2)\n    b=-(x1+x2)\n    return (a,b,c)", "def quadratic(x1, x2):\n    a=1\n    b=-(x1+x2)\n    c=(x1*x2)\n    tes=(a,b,c)\n    return tes\n", "x = 1\ndef quadratic(x1, x2):\n    #equation = (x-x1)*(x-x2)=0\n    a = (x*x)\n    b = (-(x*x2))-(x1*x)\n    c = (x1*x2)\n    return a, b, c\n", "def quadratic(x1, x2):\n    d = (x1+x2)**2-4*x1*x2\n    c = x1*x2\n    b = -1*(x1+x2)\n    return(1,b,c)\n", "def quadratic(x1, x2):\n    p = -1 * (x1 + x2) \n    q = x1 * x2\n    b = p\n    c = q\n    a = 1\n    return (a, b, c)\n", "def quadratic(x1, x2):\n    sum = x1 + x2\n    sum = sum * -1\n    mul = x1 * x2\n    list = (1, sum, mul)\n    return list\n", "def quadratic(x1, x2):\n    a = 1\n    b = (-1 * x2) + (-1 * x1)\n    c = (-1 * x1) * (-1 * x2)\n    return (a,b,c)", "def quadratic(a, b):\n    return (1, (-a+-b), (-a*-b))\n", "def quadratic(a, b):\n    return tuple([1, (-a+-b), (-a*-b)])\n", "def quadratic(x1, x2):\n    if x1 == x2:\n        return (1, int(-2 * x1), int(x1 ** 2))\n    else:\n        b = (x1 ** 2 - x2 ** 2) / (x2 - x1)\n        return (1, int(b), int(-1 * (x1 ** 2) - b * x1))\n", "def quadratic(x1, x2):\n    a, b, c = 1, 0, 0\n    b = -1 * a * (x1 + x2)\n    c = a * (x1 * x2)\n    return (a, b, c)\n", "def quadratic(m, n):\n    return (1, -(m+n), m*n)", "def quadratic(x1, x2):\n    a, b, c = 0, -(x1 + x2), (x1 * x2)\n    if x1 * x2 != 0:\n        a = c / (x1 * x2)\n    elif (x1 + x2) != 0:\n        a = -b / (x1 + x2)\n    return a, b, c", "def quadratic(x1, x2):\n    a = 1\n    b = x1 * (-1) + x2 * (-1)\n    c = x1*x2\n    \n    coeff = (a, b, c)\n    return coeff\n    \n    # (x - x1)*(x - x2)\n    \n    \n\n\n\n\n", "def quadratic(x1, x2):\n    if x1 == 0:\n        return (1, -x2, 0)\n    else:\n        return (1, -(x1+x2), (x2*x1))\n", "def quadratic(x1, x2):\n    return tuple([1,-x1-x2,x1*x2])", "def quadratic(x1, x2):\n    lst = list()\n    a = 1\n    lst.append(a)\n    b = -(x1+x2)\n    lst.append(b)\n    c = x1 * x2\n    lst.append(c)\n    tpl  = tuple(lst)\n    return tpl", "def quadratic(x1, x2):\n    a, b, c=1, -(x1+x2), (x1*x2) \n    return(a, b, c)", "def quadratic(x1, x2):\n    lst=()\n    a=1\n    c=x1*x2\n    b=((-x1)-(x2)) \n    lst=(a,b,c)\n    return lst\npass\n", "def quadratic(x1, x2):\n    b = -1*(x1 + x2)\n    c = x1 * x2\n    return (1, b, c)\n", "def quadratic(x1, x2):\n    a=1\n    c=x1*x2\n    if x1!=x2:\n        b=-(x1+x2)\n    if x1==x2:\n        b=-2*x1\n    return (a,b,c)", "def quadratic(x1, x2):\n    #(x-x1) * (x-x2) = 0\n    return (1,-(x1+x2),x1*x2)\n", "def quadratic(x1, x2):\n    if isinstance(x1, int) and isinstance(x2, int):\n        b = - (x1 + x2)\n        c = x1 * x2\n        return 1, b, c\n    else:\n        return False\n\n\nprint(quadratic(1, 3))", "def quadratic(x1, x2):\n    c = x1 * x2\n    b = -(x1 + x2)\n    return 1,b,c\n", "def quadratic(x1, x2):\n    a, b, c = 1, (-x1 + -x2), (x1 *x2) \n    return a, b, c"]