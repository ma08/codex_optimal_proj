["from string import ascii_lowercase as aLow\nimport re\n\ndef rotateWord(w, alpha, dct, d):\n    lst = []\n    for i,c in enumerate(w.lower(), 1):\n        transChar = alpha[ (dct[c] + i*d) % 26 ]\n        if w[i-1].isupper(): transChar = transChar.upper()\n        lst.append(transChar)\n    return ''.join(lst)\n\ndef encode(text, key, d=1):\n    remains, alpha = set(aLow), []\n    for c in key+aLow:\n        if c in remains:\n            remains.remove(c)\n            alpha.append(c)\n    alpha = ''.join(alpha)\n    dct   = {c:i for i,c in enumerate(alpha)}\n    return re.sub(r'[a-zA-Z]+', lambda m: rotateWord(m.group(),alpha,dct,d), text)\n    \ndef decode(text, key):\n    return encode(text, key, -1)", "import re\nfrom collections import OrderedDict\nfrom string import ascii_lowercase\n\ndef encode(text, key, mul=1):\n    i2c = ''.join(OrderedDict.fromkeys(key)) + ''.join(c for c in ascii_lowercase if c not in key)\n    c2i = {c: i for i, c in enumerate(i2c)}\n    return re.sub(\n        '[a-z]+',\n        lambda m: ''.join((str.upper if c.isupper() else str)(i2c[(c2i[c.lower()] + i * mul) % 26])\n                          for i, c in enumerate(m.group(), 1)),\n        text,\n        flags=re.I\n    )\n\ndef decode(text, key):\n    return encode(text, key, -1)", "import re\nfrom string import ascii_lowercase as alphabet\n\ndef keyed_alphabet(key):\n    char2idx, idx2char = {}, {}\n    for letter in key + alphabet:\n        if letter not in char2idx:\n            char2idx[letter] = len(char2idx)\n            idx2char[len(idx2char)] = letter\n    return char2idx, idx2char\n\ndef ragbaby(mode, text, key):\n    char2idx, idx2char = keyed_alphabet(key)\n    cipher_word = lambda match: ''.join(\n    [str.upper, str.lower][letter.islower()](idx2char[(char2idx[letter.lower()] + idx * mode) % len(alphabet)])\n            for idx, letter in enumerate(match.group(), 1))\n    return re.sub('[{}]+'.format(alphabet), cipher_word, text, flags=re.I)\n\nencode, decode = lambda *args: ragbaby(1, *args), lambda *args: ragbaby(-1, *args)", "from string import ascii_lowercase as aLow\nimport re\n\ndef rotateWord(w, alpha, dct, d):\n    return ''.join( (str.lower if w[i-1].islower() else str.upper)(alpha[ (dct[c]+i*d) % 26 ]) for i,c in enumerate(w.lower(), 1) )\n\ndef encode(text, key, d=1):\n    s     = set(aLow)\n    alpha = ''.join(s.remove(c) or c for c in key+aLow if c in s)\n    dct   = {c:i for i,c in enumerate(alpha)}\n    return re.sub(r'[a-zA-Z]+', lambda m: rotateWord(m.group(),alpha,dct,d), text)\n    \ndef decode(text, key):\n    return encode(text, key, -1)", "def encode(text, key):\n    \n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    string_me = key+string\n    periods = []\n    spaces = []\n    commas = []\n       \n    string_me = list(dict.fromkeys(string_me))\n\n    \n    for x in range(0, len(text)):\n        if text[x] == \".\":\n            periods.append(x)\n        elif text[x] == \",\":\n            commas.append(x)\n        elif text[x] == \" \":\n            spaces.append(x)\n            \n    text = text.replace(\".\", \" \").replace(\",\", \" \").split()  \n    \n    word = 0\n    \n    new_word = []\n    \n    while word < len(text):\n        \n        for x in range(0, len(text[word])):\n            \n            if text[word][x].isupper():\n                \n                if string_me.index(text[word][x].lower())+x+1 >= 26:\n                    \n                    number = string_me.index(text[word][x].lower())+x+1\n                    \n                    while number >= 26:\n                        number -= 26\n                    \n                    new_word.append(string_me[number].upper())\n                else:\n                    new_word.append(string_me[string_me.index(text[word][x].lower())+x+1].upper())\n                \n            else:\n                \n                if string_me.index(text[word][x])+x+1 >= 26:\n                    \n                    number = string_me.index(text[word][x].lower())+x+1\n                    \n                    while number >= 26:\n                        number -= 26\n                        \n                    new_word.append(string_me[number])\n                else:\n                    new_word.append(string_me[string_me.index(text[word][x].lower())+x+1])\n            \n        text[word] = \"\".join(new_word)\n        new_word = []\n        word += 1\n        \n                       \n    text = list(\"\".join(text))\n    \n    newwww = periods+spaces+commas\n    \n    newwww.sort()\n\n    if newwww:\n        for x in newwww:\n            text.insert(x, \" \")\n        \n    for x in periods:\n        text[x] = \".\"\n    for x in commas:\n        text[x] = \",\"\n    \n    return(\"\".join(text))\n\n    \ndef decode(text, key):\n    \n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    string_me = key+string\n    periods = []\n    spaces = []\n    commas = []\n       \n    string_me = list(dict.fromkeys(string_me))\n    \n    for x in range(0, len(text)):\n        if text[x] == \".\":\n            periods.append(x)\n        elif text[x] == \",\":\n            commas.append(x)\n        elif text[x] == \" \":\n            spaces.append(x)\n            \n    text = text.replace(\".\", \" \").replace(\",\", \" \").split()  \n    \n    word = 0\n    \n    new_word = []\n    \n    while word < len(text):\n        \n        for x in range(0, len(text[word])):\n            \n            if text[word][x].isupper():\n                \n\n                \n                if string_me.index(text[word][x].lower())-x-1 >= 26:\n                    \n                    number = string_me.index(text[word][x].lower())-x-1\n                    \n                    while number >= 26:\n                        number -= 26\n                    \n                    new_word.append(string_me[number].upper())\n                \n                elif string_me.index(text[word][x].lower())-x-1 < 0:\n                    \n                    number = string_me.index(text[word][x].lower())-x-1\n                    \n                    while number < 0:\n                        number += 26\n                        \n                    new_word.append(string_me[number].upper())\n                else:\n                    new_word.append(string_me[string_me.index(text[word][x].lower())-x-1].upper())\n                \n            else:\n\n\n                \n                if string_me.index(text[word][x])-x-1 >= 26:\n                    \n                    number = string_me.index(text[word][x].lower())-x-1\n                    \n                    while number >= 26:\n                        number -= 26\n                    new_word.append(string_me[number])    \n                elif string_me.index(text[word][x].lower())-x-1 < 0:\n                    \n                    number = string_me.index(text[word][x].lower())-x-1\n                    \n                    while number < 0:\n                        number += 26\n                        \n                    new_word.append(string_me[number])\n                else:\n                    new_word.append(string_me[string_me.index(text[word][x].lower())-x-1])\n            \n        text[word] = \"\".join(new_word)\n        new_word = []\n        word += 1\n        \n                       \n    text = list(\"\".join(text))\n    \n    newwww = periods+spaces+commas\n    \n    newwww.sort()\n\n    if newwww:\n        for x in newwww:\n            text.insert(x, \" \")\n        \n    for x in periods:\n        text[x] = \".\"\n    for x in commas:\n        text[x] = \",\"\n    \n    return(\"\".join(text))\n", "from string import ascii_lowercase as AL\nimport re\n\ndef f(op):\n    def g(s, key):\n        a = \"\".join(dict.fromkeys(key + AL))\n        d = {x: i for i, x in enumerate(a)}\n        def f(s):\n            s, r = s[0], []\n            for i, x in enumerate(s, 1):\n                y = a[(op(d[x.lower()], i)) % len(a)]\n                if x.isupper():\n                    y = y.upper()\n                r.append(y)\n            return \"\".join(r)\n        return re.sub(r\"\\w+\", f, s)\n    return g\n\nencode = f(int.__add__)\ndecode = f(int.__sub__)", "def encode(text, key):\n    k=''\n    for c in key+'abcdefghijklmnopqrstuvwxyz':\n        if c not in k:\n            k+=c\n    r=''\n    i=1\n    for c in text:\n        if c.isalpha():\n            j=(k.index(c.lower())+i)%26\n            if c.isupper():\n                r+=k[j].upper()\n            else:\n                r+=k[j]\n            i+=1\n        else:\n            r+=c\n            i=1\n    return r\n    \ndef decode(text, key):\n    k=''\n    for c in key+'abcdefghijklmnopqrstuvwxyz':\n        if c not in k:\n            k+=c\n        r=''\n    i=1\n    for c in text:\n        if c.isalpha():\n            j=(k.index(c.lower())-i)%26\n            if c.isupper():\n                r+=k[j].upper()\n            else:\n                r+=k[j]\n            i+=1\n        else:\n            r+=c\n            i=1\n    return r\n    return text", "def encode(text, key): return cipher(text, key, 1)\n\n\ndef decode(text, key): return cipher(text, key, -1)\n\n\ndef cipher(text, key, mode):\n    U = tuple(dict.fromkeys(key.upper() + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    L = tuple(dict.fromkeys(key.lower() + 'abcdefghijklmnopqrstuvwxyz'))\n\n    output = ''\n    i = mode\n    for x in text:\n        if x in U:\n            output += U[(U.index(x) + i) % 26]\n            i += mode\n        elif x in L:\n            output += L[(L.index(x) + i) % 26]\n            i += mode\n        else:\n            output += x\n            i = mode\n    return output", "from string import ascii_lowercase\nfrom operator import add, sub\nfrom itertools import starmap\nfrom re import sub as rsub\n\ndef change(text, key, o):\n    tmp = dict.fromkeys(key)\n    cipher = ''.join(tmp) + ''.join(c for c in ascii_lowercase if c not in tmp)\n    D = {c:i for i,c in enumerate(cipher)}\n    a = lambda i,c: cipher[o(D[c], i) % 26]\n    b = lambda i,c: cipher[o(D[c.lower()], i) % 26].upper()\n    f = lambda i,c: a(i, c) if c.islower() else b(i, c) if c.isupper() else c\n    g = lambda w: ''.join(starmap(f, enumerate(w.group(), 1)))\n    return rsub(r\"[a-zA-z]+\", g, text)\n\ndef encode(text, key):\n    return change(text, key, add)\n    \ndef decode(text, key):\n    return change(text, key, sub)", "def encode(msg,k):\n    k = ''.join(dict.fromkeys(k)) + ''.join(i for i in 'abcdefghijklmnopqrstuvwxyz' if i not in k)\n    r,i = '',1\n    for s in msg:\n        x = s.lower()\n        if x in k:\n            t = k[(k.find(x)+i)%26]\n            r += t.upper() if s.isupper() else t\n            i += 1\n        else:\n            r += s\n            i = 1\n    return r\n\n            \n    \ndef decode(msg,k): \n    k = ''.join(dict.fromkeys(k)) + ''.join(i for i in 'abcdefghijklmnopqrstuvwxyz' if i not in k)\n    r,i = '',1\n    for s in msg:\n        x = s.lower()\n        if x in k:\n            t = k[(k.find(x)-i)%26]\n            r += t.upper() if s.isupper() else t\n            i += 1\n        else:\n            r += s\n            i = 1\n    return r"]