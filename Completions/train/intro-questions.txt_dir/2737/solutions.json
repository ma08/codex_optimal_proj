["def near_flatten(a):\n    r = []\n    for x in a:\n        if isinstance(x[0], int): r.append(x)\n        else: r.extend(near_flatten(x))\n    return sorted(r)", "def near_flatten(xs):\n    def f(xs):\n        if all(not isinstance(x, list) for x in xs):\n            yield xs\n            return\n        for x in xs:\n            yield from f(x)\n    return sorted(f(xs))\n", "from itertools import chain\n\ndef f(t):\n    return [sorted(t)] if not isinstance(t[0],list) else chain(*(f(x) for x in t))\n\ndef near_flatten(lst):\n    return sorted( chain(*(f(x) for x in lst )))", "def near_flatten(a):\n    li = []\n    def do(a):\n        for i in a:\n            li.append(i if all(isinstance(k, int) for k in i) else do(i))\n    do(a)\n    return sorted([i for i in li if i])", "def near_flatten(nested):\n    result = []\n    for item in nested:\n        if type(item[0]) == list:\n            result.extend(near_flatten(item))\n        else:\n            result.append(item)\n    return sorted(result, key=lambda l: l[0])", "from itertools import chain\n\n\ndef flatten(list_):\n    return [list_] if isinstance(list_[0], int) else\\\n        chain(*(flatten(l) for l in list_))\n\n\ndef near_flatten(nested):\n    return sorted(chain(*(flatten(list_) for list_ in nested)))", "def near_flatten(nested):\n    ret = []\n    def flatten(arr):\n        for i, ar in enumerate(arr):\n            if type(ar[0]) == int:\n                ret.append(ar)\n            else:\n                flatten(ar)\n                \n    flatten(nested)\n    \n    return sorted(ret)\n", "import re\nr=re.compile(r'(?<=\\[)\\[|(?<=\\])\\]')\ndef near_flatten(nested):\n    return sorted(eval('['+r.sub('',str(nested))+']'),key=lambda x: x[0])", "import re\n\ndef near_flatten(nested):\n    nested = str(nested)\n    flatten_regex = re.compile(r\"\\[+(\\d+)(?:, )?(\\d+)?(?:, )?(\\d+)?(?:, )?(\\d+)?\\]+\")\n    matches = flatten_regex.finditer(nested)\n    fixed_ls = [flatten_regex.sub(r\"\\1 \\2 \\3 \\4\", i.group()).split() for i in matches]\n    fixed_ls = [[int(x) for x in i] for i in fixed_ls]\n    return sorted(fixed_ls)", "def near_flatten(A):\n    s=str(A)[1:-1]\n    while '[[' in s:s=s.replace('[[','[')\n    while ']]' in s:s=s.replace(']]',']')\n    return sorted(list(map(int,x.split(',')))for x in s[1:-1].split('], ['))"]