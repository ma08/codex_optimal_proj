["def sum_of_n(n):\n    return [(-1 if n < 0 else 1) * sum(range(i+1)) for i in range(abs(n)+1)]\n", "def sum_of_n(n):\n    output = [0]\n    sign = 1\n    if n < 0: sign = -1\n    for numb in range(1, abs(n) + 1):\n        output.append(sign * (numb + abs(output[numb - 1])))\n    return output", "def sum_of_n(n):\n    sign, n = (1, -1)[n < 0], abs(n) \n    return [sign * (i * i + i) / 2 for i in range (n + 1)]", "def range_(n):\n    if n > 0:\n        return range(n+1)\n    else:\n        return [-i for i in range(-n+1)]\n\ndef sum_of_n(n):\n    return [sum(range_(i)) for i in range_(n)]", "from itertools import accumulate\n\ndef sum_of_n(n):\n    return list(accumulate(list(range(0, *((n+1, 1) if n > 0 else (n-1, -1))))))\n", "from itertools import accumulate\n\ndef sum_of_n(n):\n    if n >= 0:\n        return list(accumulate(range(n+1)))\n    return list(accumulate(range(0, n-1, -1)))", "import itertools\n\ndef sum_of_n(n):\n    step = +1 if n >= 0 else -1\n    return list(itertools.accumulate(range(0, n + step, step)))", "def sum_of_n(n):\n    if n<0:\n        minus = True\n    else:\n        minus = False\n    return [-sum(range(k+1)) if minus else sum(range(k+1)) for k in range(abs(n)+1)]\n", "sum_of_n = lambda n: [0]+[sum(range(i+1))*(n/abs(n)) for i in range(1,abs(n)+1)]"]