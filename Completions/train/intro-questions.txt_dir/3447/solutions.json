["def next_perfect_square(n):\n    return n>=0 and (int(n**0.5)+1)**2", "next_perfect_square=lambda n:(n>=0and int(n**.5)+1)**2", "def next_perfect_square(n):\n    return n >= 0 and (int(n**.5)+1)**2", "import math\ndef next_perfect_square(n):\n    return math.ceil((n + 1) ** 0.5) ** 2 if n > -1 else 0\n", "from bisect import bisect\nsquares = [i*i for i in range(32000)]\n\ndef next_perfect_square(n):\n    return bisect(squares, n)**2", "next_perfect_square = lambda n: ((int(n**.5)+1) ** 2 if n>=0 else 0)", "def next_perfect_square(n, i=0):\n    while True:\n        if i*i > n: return i*i\n        i += 1", "def next_perfect_square(n):\n    if n<0:return 0\n    is_square=lambda s:int(s**0.5)**2==s\n    n+=1\n    while not is_square(n):\n        n+=1\n    return n", "from math import sqrt\n\ndef next_perfect_square(n):\n    return 0 if n < 0 else (int(sqrt(n)) + 1) ** 2", "from math import floor\ndef next_perfect_square(n):\n    return (floor(n**(1/2)) + 1) ** 2 if n > 0 else 0 if n != 0 else 1"]