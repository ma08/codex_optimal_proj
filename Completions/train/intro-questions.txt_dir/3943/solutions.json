["from math import pi\n\ndef ellipse(a, b):\n    return f\"Area: {pi*a*b:.1f}, perimeter: {pi*( 1.5*(a+b) - (a*b)**.5 ):.1f}\"", "from math import pi\n\ndef ellipse(a, b):\n    perimeter = pi * (3/2*(a+b) - (a*b)**0.5)\n    area = pi * a*b\n    return f'Area: {area:.1f}, perimeter: {perimeter:.1f}'", "def ellipse(a, b):\n    import math\n    area = math.pi * a * b\n    perimeter = math.pi * ((3/2)*(a+b) - math.sqrt(a*b))\n    return \"Area: \" + str(round(area,1))+ \", perimeter: \" + str(round(perimeter,1))", "import math\n\ndef ellipse(a, b):\n    '''Return area and approximated perimeter of an ellipse'''\n    \n    area = math.pi * a * b\n    perimeter = math.pi * (1.5 * (a + b) - math.sqrt(a * b))\n    return f'Area: {round(area, 1)}, perimeter: {round(perimeter, 1)}'", "def ellipse(a, b):\n    import math\n    area = math.pi * a * b\n    p = math.pi * (1.5 * (a + b) - math.sqrt(a * b))\n    return \"Area: \" + str(round(area, 1)) + \", perimeter: \" + str(round(p, 1))", "import math\ndef ellipse(a, b):\n    perimeter = round(math.pi*(3/2*(a+b) - math.sqrt(a*b)), 1)\n    area = round(math.pi*a*b, 1)\n    return f'Area: {area}, perimeter: {perimeter}'", "import math\ndef ellipse(a, b):\n    area = str(round(a*b*math.pi,1))\n    perimetro = str(round(math.pi *( 3/2*(a+b) - math.sqrt(a*b)),1))\n    return \"Area: \"+area +\", perimeter: \"+perimetro\n", "import math\ndef ellipse(a, b):\n    s = str(round(math.pi * a * b, 1))\n    l = str(round(math.pi * (3 / 2 * (a + b) - math.sqrt(a * b)), 1))\n    return \"Area: \"+s+\", perimeter: \"+l", "from math import pi\n\ndef ellipse(p, q):\n    return f'Area: {round(pi * q * p, 1)}, perimeter: {round(pi * (3/2*(p+q) - (p*q) ** .5), 1)}'", "import math  \n\ndef ellipse(a, b):\n\n    e = math.pi*(a*b)\n    \n    v = a**2+b**2\n    \n    p = math.pi*(3/2*(a+b)-math.sqrt(a*b))\n    \n    return \"Area: {}, perimeter: {}\".format(round(e,1),round(p,1))\n    \n"]