["import json\n\ndef f(data, level):\n    if level == 0:\n        yield data['name']\n        return\n    children = data['children']\n    if len(children) >= 7 and all(child['gender'] == 'male' for child in children[:7]):\n        yield from f(children[6], level-1)\n    for child in children:\n        yield from f(child, 2)\n        \ndef find_seventh_sons_of_seventh_sons(jstring):\n    data = json.loads(jstring)\n    return set(f(data, 2))", "def find_seventh_sons_of_seventh_sons(jstring):\n    seventh_of_seventh = set()\n    def find_seventh_sons(father, seventh_son=False):\n        seven_brother = True\n        for i, son in enumerate(father['children'], 1):\n            if son['gender'] == 'female': seventh_son = seven_brother = False\n            if i == 7 and seventh_son: seventh_of_seventh.add(son['name'])\n            find_seventh_sons(son, i == 7 and seven_brother)\n    find_seventh_sons(json.loads(jstring))\n    return seventh_of_seventh", "import json\n\ndef find_seventh_sons_of_seventh_sons(jstring):\n    return seek4SeventhJSon(json.loads(jstring))\n\ndef seek4SeventhJSon(parent, _7up=False):\n    nSons, _7sons7 = 0, set()\n    for n,child in enumerate(parent['children'],1):\n        if child['gender'] == 'male':\n            nSons += 1\n            _7sons7 |= seek4SeventhJSon(child, n == nSons == 7)\n            if n == nSons == 7 and _7up:\n                _7sons7.add(child['name'])\n    return _7sons7", "import json\n\ndef find_seventh_sons_of_seventh_sons(jstring):\n    result, stack = set(), [json.loads(jstring)]\n    while stack:\n        person = stack.pop()\n        if (len(person['children']) >= 7 and \n            all(child['gender'] == 'male' for child in person['children'][:7]) and\n            len(person['children'][6]['children']) >= 7 and\n            all(child['gender'] == 'male' for child in person['children'][6]['children'][:7])):\n            result.add(person['children'][6]['children'][6]['name'])\n        stack.extend(person['children'])\n    return result", "import json\n\ndef validate_sons(data):\n    if data[\"gender\"] == \"male\" and len(data[\"children\"]) >= 7:\n        if all([x[\"gender\"] == \"male\" for x in data[\"children\"][:7]]):\n            if len(data[\"children\"][6][\"children\"]) >= 7:\n                if all([x[\"gender\"] == \"male\" for x in data[\"children\"][6][\"children\"][:7]]):\n                    return True\n    return False\n    \ndef find_seventh_sons_of_seventh_sons(jstring):\n    data = json.loads(jstring)\n    result = []\n    stack = [data]\n    while len(stack) != 0:\n        a = stack.pop()\n        for children in a[\"children\"]:\n            stack.append(children)\n        if validate_sons(a):\n            result.append(a[\"children\"][6][\"children\"][6][\"name\"])\n    return set(result)", "def find77(j,son=False,sons=[]):\n    sc = 0\n    for c in j['children']:\n        if c['gender']=='male':\n            sc+=1\n        else:\n            sc=8\n        if sc==7 and 'children' in list(c.keys()):\n            sons = find77(c,True,sons)\n        elif 'children' in list(c.keys()):\n            sons = find77(c,False,sons)\n        if sc==7 and son:\n            sons = [c['name']]+sons\n\n    return sons\n\n\ndef find_seventh_sons_of_seventh_sons(jstring):\n    jstring=eval(jstring)\n    sonlist = find77(jstring,False)\n    if len(sonlist)==0:\n        return set()\n    else:\n        return eval(str(sonlist).replace(\"[\",\"{\").replace(\"]\",\"}\"))\n", "def find_seventh_sons_of_seventh_sons(jstring):\n    return set(has_7_of_7_son(json.loads(jstring)))\n    \ndef has_7_of_7_son(person, parent_is_7=False):\n    counter = 0\n    result = []\n    broken = False\n    if person['children']:\n        for child in person['children']:\n            if child['gender'] == 'male': # and \n                counter += 1\n            else:\n                broken = True\n            if counter == 7 and not broken:\n                if parent_is_7:\n                    result.append(child['name'])\n                result.extend(has_7_of_7_son(child, True))\n            result.extend(has_7_of_7_son(child, False))\n    return result", "import json\ndef find_seventh_sons_of_seventh_sons(jstring,z=[]):\n    if type(jstring)==str:\n        jstring=json.loads(jstring)\n        z=[]\n    if len(jstring['children'])>6 and all(children['gender']=='male' for children in jstring['children'])and len(jstring['children'][6]['children'])>6 and all(jstring['children'][6]['children'][i]['gender']=='male' for i in range(7)):\n        z.append(jstring['children'][6]['children'][6]['name'])\n    for x in jstring['children']:\n        find_seventh_sons_of_seventh_sons(x,z)\n    return set(z)", "import json\n\ndef isItAChainOfSons(listOfCildren):\n    chainOfSons=True\n    for i in range (0,7):\n        if(listOfCildren[i]['gender']=='female'):\n            chainOfSons=False\n    return chainOfSons\n\n\ndef rekursiveSonFinder(family, secondGeneration):\n    if ((family['gender'] == 'female') or (len(family['children'])<7) ):\n        return '/'\n    elif(isItAChainOfSons(family['children'])):\n        # a seventh son of a seventh son\n        if(secondGeneration):\n            # print('found name: ', family['children'][6]['name'])\n            return '/' + family['children'][6]['name'] \n            # a seventh son\n        else:\n            return rekursiveSonFinder(family['children'][6], True)\n\n\n\ndef rekursiveIteration(family):\n    if(len(family['children']) == 0):\n        return '/'\n    else:\n        ownSolution = rekursiveSonFinder(family, False)\n        solutionOfChildren=''\n        for child in family['children']:\n            if(len(child['children'])>0):\n                solutionOfChildren = solutionOfChildren + rekursiveIteration(child)\n        \n        if(ownSolution== None):\n            return solutionOfChildren\n        else:\n            return ownSolution + solutionOfChildren\n\ndef find_seventh_sons_of_seventh_sons(jstring):\n    familyTree = json.loads(jstring)\n    listOfSons = rekursiveIteration(familyTree)\n    #print(listOfSons)\n    listOfSons = listOfSons.split('/')\n    #print(listOfSons)\n    solution = set()\n    for name in listOfSons:\n        if (name !=''):\n            solution.add(name)\n    return solution\n", "def find_seventh_sons_of_seventh_sons(family_dict, ss_set = set()):\n    \"\"\"\n    List of seven sons of seventh son is checked if any girl is born in between.\n    \"\"\"\n    if type(family_dict) == str: \n        ss_set.clear()\n        family_dict = json.loads(family_dict) \n    \n    if len(family_dict['children']) > 6 and len(family_dict['children'][6]['children']) > 6:\n        children_genders = [x['gender'] for x in family_dict['children'][:7]] + [x['gender'] for x in family_dict['children'][6]['children'][:7]]\n        if not 'female' in children_genders:\n            ss_set.add(family_dict['children'][6]['children'][6]['name']) \n        \n    for child in family_dict['children']:\n        find_seventh_sons_of_seventh_sons(child, ss_set)\n        \n    return ss_set"]