["N = ['zero','one','two','three','four','five','six','seven','eight','nine']\n\ndef average_string(s):\n    try:\n        return N[sum(N.index(w) for w in s.split()) // len(s.split())]\n    except (ZeroDivisionError, ValueError):\n        return 'n/a'", "def average_string(s):\n    if not s:\n        return 'n/a'\n\n    numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    total = 0\n    counter = 0\n    for n in s.split():\n        try:\n            value = numbers.index(n)\n            total += value\n            counter += 1\n        except:\n            return 'n/a'\n    return numbers[total // counter]", "from statistics import mean\nlst = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\nd = {lst.index(i): i for i in lst}\ndef average_string(s):\n    try:\n        return d.get(int(mean([lst.index(i) for i in s.split()])),'n/a')\n    except:\n        return 'n/a'", "nbrs = 'zero one two three four five six seven eight nine'.split()\n\ndef average_string(s):\n  try:\n    return nbrs[sum(map(nbrs.index, s.split())) // len(s.split())]\n  except:\n    return 'n/a'", "numbers = 'zero one two three four five six seven eight nine'.split()\n\ndef average_string(s):\n    try:\n        ns = list(map(numbers.index, s.split()))\n        return numbers[sum(ns) // len(ns)]\n    except (ValueError, ZeroDivisionError):\n        return 'n/a'", "from numpy import average\n\nnums = [\n'zero',\n'one',\n'two',\n'three',\n'four',\n'five',\n'six',\n'seven',\n'eight',\n'nine'\n]\n\n\ndef average_string(s):\n    total = [nums.index(c) for c in s.split(' ') if c in nums]\n    return nums[int(average(total))] if len(total)==len(s.split(' ')) else 'n/a'", "def average_string(s):\n    nums = ['zero','one','two','three','four','five','six','seven','eight','nine']\n    d = dict(zip(nums, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    try:\n        return nums[sum(d[w] for w in s.split()) // len(s.split())]\n    except:\n        return 'n/a'", "s2d = \"zero one two three four five six seven eight nine\".split()\n\n\ndef average_string(stg):\n    lst = stg.split()\n    if not stg or set(lst) - set(s2d):\n        return \"n/a\"\n    return s2d[int(sum(s2d.index(s) for s in lst) / len(lst))]", "def average_string(s):\n    d,c = \"zero one two three four five six seven eight nine\".split(),0\n    for i in s.split():\n        if i not in d : return \"n/a\"\n        c += d.index(i)\n    return d[int(c / len(s.split()))] if s else \"n/a\"", "def average_string(s):\n    n = 0\n    dic = { 'zero'  : 0,\n            'one'   : 1,\n            'two'   : 2,\n            'three' : 3,\n            'four'  : 4,\n            'five'  : 5,\n            'six'   : 6,\n            'seven' : 7,\n            'eight' : 8,\n            'nine'  : 9 }\n            \n    s = s.split(' ')\n    for i in range(len(s)):\n        if s[i] in dic: n += dic[s[i]]\n        else: return \"n/a\"\n    n //= len(s)\n    for key in dic:\n        if dic.get(key) == n:\n            n = key\n    return n", "digit_map = {\n    \"zero\": 0,\n    \"nine\": 9,\n    \"five\": 5,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"one\": 1,\n    \"eight\": 8,\n    \"six\": 6,\n    \"seven\": 7\n}\n\nreverse_digit_map = dict(map(reversed, digit_map.items()))\n\nclass InValidNumException(Exception):\n    pass\n\nclass StringNum(int):\n    def __new__(cls, s):\n        if s in digit_map:\n            return int.__new__(cls, digit_map[s])\n\n        raise InValidNumException()\n\ndef average_string(s):\n    try:\n        arr = [StringNum(t) for t in s.split() if t]\n\n        if len(arr) == 0:\n            return 'n/a'\n\n        average = int(sum(arr) / len(arr))\n    except InValidNumException:\n        return 'n/a'\n\n    if 0 <= average < 10:\n        return reverse_digit_map[average]\n    return 'n/a'", "from statistics import mean\nD = {\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\":7, \"eight\":8, \"nine\":9}\nL = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n\ndef average_string(s):\n    try: return L[int(mean(map(D.get, s.split())))]\n    except: return \"n/a\"", "def average_string(s):\n    try:\n        l = ['zero','one','two','three','four','five','six','seven','eight','nine']\n        s = s.split(' ')\n        c = 0 \n        for i in s :\n            c += l.index(i)\n        c = int(c/len(s))\n        return l[c]\n    except:\n        return \"n/a\"\n", "def average_string(s):\n    digits = list(\"zero,one,two,three,four,five,six,seven,eight,nine\".split(\",\"))\n    values = [digits.index(w) if w in digits else -1 for w in s.split()]\n    return \"n/a\" if not values or -1 in values else digits[sum(values) // len(values)]", "average_string=lambda s,d=\"zero one two three four five six seven eight nine\".split():(lambda l:set()<set(l)<=set(d)and d[sum(map(d.index,l))//len(l)]or'n/a')(s.split())", "def average_string(s):\n    sn={\"zero\":0,\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9}\n    a=0\n    try:\n        for i in s.split():\n            a+=sn[i]\n        a/=len(s.split())\n    except:\n        return \"n/a\"\n    return list(sn.keys())[list(sn.values()).index(int(a))]", "def average_string(s):\n    #your code here\n    res=0\n    num=[0,0,0,0,0,0,0,0,0,0]\n    str=('zero','one','two','three','four','five','six','seven','eight','nine')\n    for i in range(0,10):\n        num[i]=s.count(str[i])\n    if sum(num)==0 or sum(num)!=s.count(' ')+1:return \"n/a\"\n    for i,val in enumerate(num):\n        res+=val*i\n    res/=sum(num)\n    if res>9 :return\"n/a\"\n    \n    return str[int(res)]\n"]