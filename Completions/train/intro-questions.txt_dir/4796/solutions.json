["class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    v = -1\n    n = node\n    while n:\n        v += 1\n        if v == index:\n            return n\n        n = n.next\n    \n    raise ValueError", "class Node(object):\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n    \ndef get_nth(node, index):\n  if node and index >= 0: return node if index < 1 else get_nth(node.next, index - 1)\n  raise ValueError", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index, i=0):\n    if node is None:\n        raise IndexError\n    else:\n        return node if index == i else get_nth(node.__next__, index, i + 1)\n", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    if node is None or index < 0:\n        raise Exception(\"Invalid parameters.\")\n\n    while index > 0:\n        if node.__next__ is None:\n            raise Exception(\"Null node encountered.\") \n            \n        node = node.__next__\n        index -= 1\n    \n    return node\n", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        \n        \ndef length(head):\n    if not head:\n        return 0\n    else:\n        length = 0\n        current_node = head\n        while current_node is not None:\n            length += 1\n            current_node = current_node.next\n        return length\n        \ndef get_nth(head, index):\n    if not head:\n        raise ValueError('Head node cannot be None')\n        \n    if index < 0:\n        raise ValueError('Index cannot be negative')\n        \n    if index > length(head) - 1:\n        raise ValueError('Index cannot exceed number of nodes in list')\n        \n    counter = 0\n    current_node = head\n    while counter != index:\n        current_node = current_node.next\n        counter += 1\n    return current_node", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    if not node or index < 0:\n        raise ValueError\n    \n    while index:\n        node = node.__next__\n        if not node:\n            raise ValueError\n        index -= 1\n        \n    return node\n", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    while index:\n        node = node.__next__\n        index -= 1\n        \n    return node if node else node.data\n", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    # Your code goes here.\n    if node is None or index < 0 :\n        raise LookupError('invalid index')\n    for i in range(index):\n        if node.__next__ is None:\n            raise IndexError('index out of range')\n        node = node.__next__\n    return node\n        \n", "class Node(object):\n    def __init__(self, data, nxt=None):\n        self.data, self.next = data, nxt\n    \ndef get_nth(node, index):\n    i = 0\n    while i < index and node:\n        node, i = node.next, i + 1\n    if node and i == index:\n        return node\n    raise IndexError", "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    assert(node and index >= 0)\n    for _ in range(index):\n        node = node.next\n        assert(node)\n    return node"]