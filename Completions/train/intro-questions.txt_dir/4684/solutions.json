["def is_hollow(x):\n    while x and x[0] != 0 and x[-1] != 0: x = x[1:-1]\n    return len(x) > 2 and set(x) == {0}", "from itertools import groupby\nfrom operator import not_\n\ndef is_hollow(a):\n    b = [(x, [*y]) for x, y in groupby(a, key=not_)]\n    return len(b) == 1 and b[0][0] and len(b[0][1]) > 2 or len(b) == 3 and [x for x, _ in b] == [0, 1, 0] and len(b[1][1]) > 2 and len(b[0][1]) == len(b[2][1])", "from itertools import groupby\n\ndef is_hollow(x):\n    xs = [(key, sum(1 for _ in grp)) for key, grp in groupby(x)]\n    mid = len(xs) // 2\n    limit = len(xs) - (len(xs) > 1)\n    return (\n        any(\n            i == mid < limit\n            for i, (x, cnt) in enumerate(xs) if x == 0 and cnt >= 3\n        ) and sum(x == 0 for x, _ in xs) == 1\n    )\n", "def is_hollow(x):\n    return len(x) > 2 and (x[0] and x[-1] and is_hollow(x[1:-1]) or set(x) == {0})", "from re import match\n\ndef is_hollow(x):\n    return bool(match(r'(x*)[0]{3,}\\1$', ''.join('x' if v else '0' for v in x)))", "def is_hollow(x):\n    if len(x)<3:\n        return False\n    z = 0    \n    for i,(a,b) in enumerate(zip(x,x[::-1])):\n        if i>len(x)//2:\n            return z>=2\n        if (a==0) != (b==0):\n            return False\n        if a!=0 and z>0:\n            return False\n        if a==0:\n            z += 1\n        elif z>0:\n            return False", "def is_hollow(A):\n    while A and A[0]*A[-1]!=0:A=A[1:-1]\n    return 2<A.count(0)and set(A)=={0}", "import re\ndef is_hollow(x):\n    return True if re.match('^(1*)0{3,}\\\\1$',''.join('0' if i==0 else '1' for i in x)) else False", "def is_hollow(x):\n    # Find the limits of the centre zeroes\n    i = j = len(x) // 2\n    while i > 0 and x[i - 1] == 0:\n        i -= 1\n    while j < len(x) and x[j] == 0:\n        j += 1\n    # Grab the 'ends'\n    prefix = x[:i]\n    suffix = x[j:]\n    # Check conditions\n    return not (j - i < 3 or 0 in prefix + suffix or len(prefix) != len(suffix))\n"]