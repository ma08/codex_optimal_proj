["def array_leaders(numbers):\n    return [n for (i,n) in enumerate(numbers) if n>sum(numbers[(i+1):])]\n", "def array_leaders(numbers):\n    res = []\n    s = 0\n    for n in reversed(numbers):\n        if n > s:\n            res.append(n)\n        s += n\n    res.reverse()\n    return res\n\narrayLeaders = array_leaders", "def array_leaders(numbers):\n    return [j for i,j in enumerate(numbers) if j > sum(numbers[i+1:]) ]", "def array_leaders(numbers):\n    nums = numbers + [0]\n    return [a for c, a in enumerate(nums, 1) if a > sum(nums[c:])]", "array_leaders=lambda n:[e for i,e in enumerate(n,1)if e>sum(n[i:])]", "def array_leaders(num):\n    return [n for i,n in enumerate(num, 1) if n > sum(num[i:])]", "def array_leaders(numbers):\n    a = []\n    numbers.append(0)\n    for i in range(len(numbers)):\n        if numbers[i] > sum(numbers[i+1:]):\n            a.append(numbers[i])\n    return a\n", "def array_leaders(numbers):\n    res = []\n    s = 0\n    for n in reversed(numbers):\n        if n > s:\n            res.append(n)\n        s += n\n    \n    return list(reversed(res))", "def array_leaders(n):\n    \n    leaders = []\n    for i in range(len(n)-1, -1, -1):\n        if n[i] > sum(n[i+1:]):\n            leaders.append(n[i])\n    \n    leaders.reverse()\n    \n    return leaders", "def array_leaders(numbers):\n    result, sum = [], 0\n    for i in range(len(numbers)):\n        if numbers[-i-1] > sum:\n            result.insert(0,numbers[-i-1])\n        sum += numbers[-i-1]\n    return result", "from itertools import accumulate\n\ndef array_leaders(numbers):\n    if numbers[-1]: numbers.append(0)\n    return [numbers[-i] for i,x in enumerate(accumulate(numbers[:0:-1]), 2) if numbers[-i] > x][::-1]", "def array_leaders(numbers):\n    return [item for ind,item in enumerate(numbers) if item>sum(numbers[ind+1:])]", "def array_leaders(numbers):\n    sum = 0\n    i, l = 1, len(numbers)\n    leaders = []\n    while i <= l:\n        if numbers[-i] > sum:\n            leaders = [numbers[-i]] + leaders\n        sum += numbers[-i]\n        i += 1\n    return leaders", "def array_leaders(numbers):\n    return [x for i, x in enumerate(numbers) if x > sum(numbers[i+ 1:])]\n", "def array_leaders(numbers):\n    return [numbers[i] for i in range(len(numbers)) if numbers[i] > sum(numbers[i+1:])]", "array_leaders=lambda a:[a[i] for i in range(len(a)) if a[i] > sum(a[i+1:])]", "def array_leaders(numbers):\n        return [element for index, element in enumerate(numbers) if element>sum(numbers[index+1::])]", "def array_leaders(numbers):\n    return [i for index, i in enumerate(numbers, 1) if sum(numbers[index:]) < i]\n", "def array_leaders(numbers):\n    arr = []\n    for i in range(len(numbers)-1):\n        if numbers[i]>sum(numbers[i+1:]):\n            arr.append(numbers[i])\n\n    return arr+[numbers[-1]] if not numbers[-1]<=0 else arr", "def array_leaders(arr):\n    return [arr[x] for x in range(len(arr)) if arr[x] > sum(arr[x + 1:])]", "def array_leaders(numbers):\n    right=0\n    out=[]\n    for x in numbers[::-1]:\n        if x>right : out.append(x)\n        right+=x\n    return out[::-1]", "def array_leaders(nums):\n    return [nums[i] for i in range(len(nums)) if nums[i] > sum(nums[i+1:])]\n    \n", "def array_leaders(numbers):\n    n = 0\n    out = []\n    for i in reversed(numbers):\n        if i > n:  out.append(i)\n        n += i\n    out.reverse()\n    return out", "def array_leaders(numbers):\n    n = sum(numbers)\n    out = []\n    for i in numbers:\n        n -= i\n        if i > n: out.append(i)\n    return out", "def array_leaders(numbers):\n    s = sum(numbers)\n    mx= []\n    for i in range(len(numbers)):\n        if numbers[i]>sum(numbers[i+1:]):\n            mx.append(numbers[i])\n    return mx", "def array_leaders(numbers):\n    return [elem for idx,elem in enumerate(numbers) if elem>sum(numbers[idx+1:])]", "\ndef array_leaders(numbers):\n    i = 0\n    output = []\n    for num in numbers:\n        sum_right = sum(numbers[i+1:len(numbers)])\n        if sum_right < num:\n            output.append(num)\n        else:\n            pass\n        i +=1\n    return output", "def array_leaders(numbers):\n    \n    p = [j for i,j in enumerate(numbers) if j > sum(numbers[i+1:])]\n    \n    return p\n\n", "def array_leaders(numbers):\n    john=[]\n    for i,v in enumerate(numbers):\n        if v>sum(numbers[i+1:]):\n            john.append(v)\n    return john\n        \n", "def array_leaders(numbers):\n    out, s = [], 0\n    for i in reversed(range(len(numbers))):\n        if numbers[i] > s:\n            out.insert(0, numbers[i])\n        s += numbers[i]\n    return out", "def array_leaders(numbers):\n    numbers.append(0)\n    return [n for i, n in enumerate(numbers[:-1]) if n > sum(numbers[i+1:])]", "def array_leaders(numbers):\n    r=[]\n    s=sum(numbers)\n    for x in numbers:\n        s-=x\n        if x>s:\n            r.append(x)\n    return r", "def array_leaders(N):\n    return [n for i, n in enumerate(N) if n>sum(N[i+1:])]", "def array_leaders(nums):\n    total,res = sum(nums), []\n    for x in nums:\n        total -= x\n        if x > total: res.append(x)\n               \n    return res", "def array_leaders(numbers):\n    accum = 0\n    leaders = []\n    \n    for n in reversed(numbers):\n        if n > accum:\n            leaders.append(n)\n        accum += n\n    leaders.reverse()\n        \n    return leaders", "def array_leaders(numbers):\n    return [el for i, el in enumerate(numbers) if el > sum(numbers[i+1:])]", "def array_leaders(numbers):\n    o = []\n    for n,i in enumerate(numbers):\n        if i>sum(numbers[n+1:]):\n            o.append(i)\n            \n    return o", "def array_leaders(numbers):\n    res = []\n    for i in range(len(numbers)):\n        if numbers[i] > sum(x for x in numbers[i + 1:]):\n            res.append(numbers[i])\n    return res", "from collections import deque\ndef array_leaders(numbers):\n    res = deque([])\n    sm = 0\n    i = len(numbers) - 1\n    while i >= 0:\n        n = numbers[i]\n        if n > sm:\n            res.appendleft(n);\n        sm += n\n        i -= 1\n    return list(res)", "def array_leaders(numbers):\n    rl = []\n    sarr = sum(numbers)\n    for num in numbers:\n        sarr -= num\n        if num > sarr:\n            rl.append(num)\n    return rl", "def array_leaders(numbers):\n    \n    re=[]\n    for i in range(0,len(numbers)):\n        if numbers[i]>sum(numbers[i+1:]):\n            re.append(numbers[i])\n    return re", "def array_leaders(numbers):\n    returnlist = []\n    for i in range(len(numbers)):\n        if numbers[i] > sum(numbers[i+1:]):\n            returnlist.append(numbers[i])\n    return returnlist", "def array_leaders(numbers):\n    return [val for ind, val in enumerate(numbers) if val > sum(numbers[ind+1:])]", "def array_leaders(numbers):\n    lsum = 0\n    res = []\n    tsum = sum(numbers)\n    for i in numbers:\n        lsum += i\n        if i > tsum - lsum:\n            res.append(i)\n    return res", "def array_leaders(numbers):\n    a = []\n    for i , x in enumerate(numbers) : \n        if x > sum(numbers[i + 1 :]) : a.append(x)\n    return a        \n", "def array_leaders(numbers):\n    length = len(numbers)\n    numbers.append(0)\n    res = []\n    \n    for i in range(length):\n        if numbers[i] > sum(numbers[i+1:]):\n            res.append(numbers[i])\n    return res        ", "def array_leaders(numbers):\n    return [numbers[x] for x in range(len(numbers)) if sum(numbers[x + 1:]) < numbers[x]]\n", "def array_leaders(n):\n    return [n[i] for i in range(len(n)) if sum(n[i+1:]) < n[i]]", "def array_leaders(numbers):\n    res = []\n    for pos, val in enumerate(numbers):\n        if val > sum(numbers[pos+1::]):\n            res.append(val)\n    return res\n", "def array_leaders(numbers):\n    return [v for i, v in enumerate(numbers) if v > sum(numbers[i:])-v]", "def array_leaders(numbers):\n    ans = []\n    for i in range(len(numbers)-1):\n        if numbers[i]>sum(numbers[i+1:]):\n            ans.append(numbers[i])\n    if numbers[-1]>0:\n            ans.append(numbers[-1])\n    return ans", "def array_leaders(numbers):\n    leaders = []\n    for i in range(len(numbers)-1):\n        if numbers[i] > (sum(numbers[i+1:-1]) + numbers[-1]):\n            leaders.append(numbers[i])\n        else:\n            continue\n    if numbers[-1] > 0:\n        leaders.append(numbers[-1])\n    return leaders\n", "def array_leaders(numbers):\n    return [n for c,n in enumerate(numbers,1) if n > sum(numbers[c:])]", "def array_leaders(numbers):\n    sum_tot = sum(i for i in numbers)\n    sum_left = 0\n    a = []\n    for i in numbers:\n        sum_left += i\n        if i > sum_tot - sum_left:\n            a.append(i)\n    return a", "def array_leaders(numbers):\n    numbers.append(0)\n    leaders = []\n    for i in range(len(numbers) - 1):\n        if numbers[i] > sum(numbers[i + 1 : len(numbers)]):\n            leaders.append(numbers[i])\n    return leaders", "def array_leaders(numbers):\n    return [k for i,k in enumerate(numbers) if sum(numbers[i+1:]) < k]", "def array_leaders(numbers):\n    if len(numbers)<3:\n       return numbers\n    n=[]\n    for i in range(len(numbers)):\n        if int(numbers[i])>sum(numbers[i+1:]):\n           n.append(numbers[i])\n    return n", "def array_leaders(numbers):\n    res = []\n    for i, value in enumerate(numbers):\n        if numbers[i] > sum(numbers[i+1::]):\n            res.append(value)\n    return res", "def array_leaders(numbers):\n    return [number for i, number in enumerate(numbers) if numbers[i] > sum(numbers[i+1:len(numbers)])]", "def array_leaders(numbers):\n    final_list = []\n    for item in range(len(numbers)):\n        if numbers[item] > sum(numbers[item+1:]):\n            final_list.append(numbers[item])\n    return final_list", "def array_leaders(numbers):\n    return [x for pos, x in enumerate(numbers) if x > sum(numbers[pos+1:])]", "def array_leaders(numbers):\n    count, res = 0, []\n    while count<len(numbers):\n        if len(numbers[count+1:])>=0:\n            if numbers[count] > sum(numbers[count+1:]):\n                print(numbers[count])\n                res.append(numbers[count])\n        count+=1\n    return res", "def array_leaders(numbers):\n    num = []\n    for i in range(len(numbers)):\n        if numbers[i] > sum(numbers[i+1:]):\n            num.append(numbers[i])\n    return num", "def array_leaders(numbers):\n    li=[]\n    for s in range(len(numbers)*-1,0):\n        if s==-1:\n            if numbers[-1]>0:\n                li.append(numbers[s])\n            else:\n                break\n        elif sum(numbers[s+1:])<=numbers[s]:\n            li.append(numbers[s])\n        else:\n            continue\n    return li\n", "def array_leaders(numbers):\n    kl=[]\n    rnumbers=numbers[::-1]\n    for i in range(len(numbers)):\n\n        if numbers[i]>sum(rnumbers[:-(i+1)]):\n            kl.append(numbers[i])\n\n    return kl", "def array_leaders(numbers):\n    output = []\n    for i in range(0,len(numbers)-1):\n        if numbers[i] > sum(numbers[i+1:]):\n            output.append(numbers[i])\n    if numbers[-1] > 0:\n        output.append(numbers[-1])\n    return output", "def array_leaders(numbers):\n    \"\"\"\n    Returns 'leader' integers from a list of integers.\n    Leader integers are integers that are greater than\n    the sum of all the integers to its right.\n    \n    Args:\n        numbers: A list that has at least 3 integers.\n    Returns:\n        Leader integers.\n    \"\"\"\n    return [x for i, x in enumerate(numbers) if x > sum(numbers[i+1:])]\n", "from typing import List\n\n\ndef array_leaders(numbers: List[int]) -> List[int]:\n    leaders, s = [], sum(numbers)\n    for n in numbers:\n        s -= n\n        if n > s:\n            leaders.append(n)\n\n    return leaders\n", "def array_leaders(numbers):\n    leaders = []\n    while numbers:\n        if numbers[0] > sum(numbers)-numbers[0]:\n            leaders.append(numbers[0])\n        numbers.remove(numbers[0])\n    return leaders\n\n", "from itertools import accumulate; from operator import add\n\ndef array_leaders(lst):\n    r = list(accumulate(lst, add))\n    return [n for i, n in enumerate(lst) if r[-1] - r[i] < n]", "def array_leaders(numbers):\n    return [x for (index, x) in enumerate(numbers) if x > sum(numbers[index+1:])]\n    #for (index, x) in enumerate(numbers):\n    #    print (index, x, sum(numbers[index:]) )\n", "def array_leaders(numbers):\n    # return [numbers[i] for i in range(len(numbers)) if numbers[i] > sum(numbers[i + 1:])]\n    return [n for i, n in enumerate(numbers) if n > sum(numbers[i + 1:])]\n\n\n\n#     a = []\n#     for i in range(len(numbers) - 1):\n#         if numbers[i] > sum(numbers[i + 1:]): a.append(numbers[i])\n\n# if numbers[-1] > 0: a.append(numbers[-1])\n        \n#     return a\n", "def array_leaders(numbers):\n    sum = 0\n    lst = list()\n    numbers = numbers[::-1]\n    for i in numbers:\n        if i > sum:\n            lst.append(i)\n        sum += i\n    return lst[::-1]", "def array_leaders(n):\n    return list(x for i, x in enumerate(n) if x > sum(n[i+1:]))", "def array_leaders(numbers):\n    i=len(numbers)-1\n    tot=0\n    ans=[]\n    while i>=0:\n        if numbers[i]>tot:\n            ans.append(numbers[i])\n        tot=tot+numbers[i]\n        i=i-1\n    return ans[::-1]", "def array_leaders(numbers):\n    rightsum = 0\n    i = len(numbers) - 1\n    leaders = []\n    while i > -1:\n        if numbers[i] > rightsum:\n            leaders.append(numbers[i])\n        rightsum += numbers[i]\n        i -= 1\n    leaders.reverse()\n    return leaders", "def array_leaders(numbers):\n    return [ i for ind, i in enumerate(numbers) if i > sum( numbers[ind+1:] ) ]", "def array_leaders(numbers):\n    res_list = []\n    i = 0\n    while i < len(numbers)-1:\n        if numbers[i] > sum(numbers[i+1:]): res_list.append(numbers[i])\n        i += 1\n    if numbers[len(numbers)-1] > 0: res_list.append(numbers[len(numbers)-1])\n    return res_list", "def array_leaders(numbers):\n    sum_right = 0\n    result = []\n    for num in reversed(numbers):\n        if num > sum_right:\n            result.append(num)\n        sum_right += num\n    return result[::-1]", "def array_leaders(numbers):\n    results=[]\n    \n    for i,n in enumerate(numbers):\n        if i<len(numbers)-1 and sum(numbers[i+1:])<n:\n            results.append(n)\n        elif i==len(numbers)-1 and n>0:\n            results.append(n)\n    \n    return results\n"]