["def count_adjacent_pairs(st): \n    words = st.lower().split(' ')\n    currentWord = None\n    count = 0\n    for i, word in enumerate(words):\n        if i+1 < len(words):\n            if word == words[i+1]:\n                if word != currentWord:\n                    currentWord = word\n                    count += 1\n            else:\n                currentWord = None\n          \n    return count", "from itertools import groupby\ndef count_adjacent_pairs(st): \n    return len([name for name,group in groupby(st.lower().split(' ')) if len(list(group))>=2])", "import re\ndef count_adjacent_pairs(s): \n    return len(re.findall(r'(\\b.+\\b)\\1+',s+' ', re.I))", "from itertools import groupby\n\ndef count_adjacent_pairs(s):\n    return sum(next(y) == next(y, 0) for x, y in groupby(s.lower().split()))", "def count_adjacent_pairs(st): \n    s, one, two, c = st.lower().split(' '), None, None, 0\n    for w in s:\n        c += w == one and w != two\n        two = one\n        one = w\n    return c", "def count_adjacent_pairs(st): \n    st = st.lower().split()\n    check, ret, k = None, 0, 0\n    for e in st:\n        if e == check and k:\n            continue\n        if e == check and not k:\n            ret, k = ret + 1, 1\n        else:\n            check,k = e, 0\n    return ret", "import re;count_adjacent_pairs=lambda s:len(re.findall(r'(\\b\\w+)(\\s+\\1)+',s,re.I))", "from itertools import groupby\n\n\ndef count_adjacent_pairs(stg): \n    return sum(1 for _, g in groupby(stg.lower().split()) if len(list(g)) > 1)", "def count_adjacent_pairs(st):\n    if not st:\n        return 0\n    res = 0\n    arr = [i.lower() for i in st.split()]\n    for i in range(len(arr)-1):\n        if i == 0:\n            if arr[i] == arr[i+1]:\n                res += 1\n        elif arr[i] == arr[i+1] != arr[i-1]:\n            res += 1\n    return res", "def count_adjacent_pairs(st):\n    #print(st)\n    st = st.lower().split()\n    cnt = 0\n    on = False\n    for i in range(1,len(st)):\n        if st[i] == st[i-1]:\n            if not on: \n                cnt += 1\n                on = True\n        else:\n            on = False\n    return cnt"]