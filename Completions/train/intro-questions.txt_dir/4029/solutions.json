["import re\n\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text: return 0\n    return len(re.findall(f'(?=({search_text}))' if allow_overlap else search_text, full_text))", "import re\n\ndef search_substr(origin, target, overlap=True):\n    if not target: return 0\n    \n    start, end = map(re.escape, (target[0], target[1:]))                     # To match correctly '|' or other special regexp chars\n    patternStr = r'{}{}'.format(start, f'(?={end})' if overlap else end)\n    \n    return sum(1 for _ in re.finditer(patternStr, origin))", "import re\n\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text: return 0\n    return len(re.findall(r'(?=({}))'.format(search_text) if allow_overlap else r'{}'.format(search_text), full_text))", "def search_substr(f_t, s_t, allow_overlap=True):\n    if not s_t or not f_t: return 0\n    if allow_overlap: return sum(1 for i in range(len(f_t) - len(s_t) + 1) if f_t[i: i + len(s_t)] == s_t)\n    return f_t.count(s_t)", "import re\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text: return 0\n    if allow_overlap == False: return len(re.findall(r'(' + search_text + ')', full_text))\n    else: return len(re.findall(r'(?=(' + search_text + '))', full_text))", "import re\n\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if allow_overlap:\n        try:\n            return len(re.findall(search_text[0]+'(?={})'.format(search_text[1:]), full_text))\n        except IndexError:\n            return 0\n        \n    else:\n        return len(re.findall(search_text, full_text)) if search_text else 0", "import re\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text:\n        return 0\n    if len(search_text) == 1 or not allow_overlap:\n        pattern = re.compile(search_text)\n    else:\n        pattern = re.compile(f\"(?<={search_text[:-1]}){search_text[-1]}\")\n    return len(list(re.findall(pattern, full_text)))", "def search_substr(ft, st, allow_overlap=True):\n    if not st: return 0\n    i,L,M,r,x = 0,len(ft),len(st),0,1\n    if not allow_overlap: x = M\n    while i + M <= L:\n        if ft[i:i+M] == st: r,i = r+1,i+x-1\n        i += 1\n    return r", "def search_substr(full_text, search_text, allow_overlap=True):\n    if search_text == '':\n        return 0\n    if allow_overlap:\n        return len([1 for i in range(len(full_text)) if full_text.startswith(search_text, i)])\n    return full_text.count(search_text)", "def search_substr(s, sub, overlap=True):\n    return 0 if not s or not sub else sum(s[i:].startswith(sub) for i in range(len(s))) if overlap else len(s.split(sub)) - 1"]