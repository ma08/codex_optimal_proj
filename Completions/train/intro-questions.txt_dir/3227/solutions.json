["def to_lover_case(string):\n    return \"\".join(\"LOVE\"[(ord(c) - 97) % 4] if c.isalpha() else c for c in string)", "from string import ascii_lowercase\n\ndef to_lover_case(s):\n    return s.lower().translate(str.maketrans(ascii_lowercase, ('LOVE' * 7)[:26]))", "def to_lover_case(strng):\n    from string import ascii_lowercase as a_l\n    \n    abc_to = \"LOVE\"*6 + \"LO\"\n\n    return strng.lower().translate(str.maketrans(a_l, abc_to))", "from string import ascii_letters\n\nt=str.maketrans(ascii_letters,('LOVE'*7)[:26]*2)\n\ndef to_lover_case(string):\n    return string.translate(t)", "def to_lover_case(stg):\n    table = str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", f\"{'LOVE' * 6}LO\")\n    return stg.lower().translate(table)", "from string import ascii_lowercase as az\ndef to_lover_case(s):\n    return ''.join('LOVE'[az.index(c)%4] if c in az else c for c in s.lower())", "to_lover_case=lambda s:''.join('LOVE'[(ord(e.lower())-97)%4]if e.isalpha()else e for e in s)", "import string\n\nalpha = {x: i for i, x in enumerate(string.ascii_lowercase)}\n\ndef to_lover_case(s):\n    return ''.join(\n        ('LOVE'[alpha[c] % 4] if c.islower() else c)\n        for c in s.lower()\n    )", "def to_lover_case(string):\n    dic = {0: 'L', 1: 'O', 2: 'V', 3: 'E'}\n    return \"\".join([dic[((ord(i.lower())-97) % 4)] if i.isalpha() else i for i in string])", "love = str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", 'LOVELOVELOVELOVELOVELOVELO')\n\ndef to_lover_case(string):\n    return string.lower().translate(love)"]