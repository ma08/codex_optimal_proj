["ls = ['11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']\ndef solve(a,b):\n    i = a\n    s = 0\n    while i < b:\n        if (i*i-i)%100==0 and str(i)[:2] in ls and str(i*i)[:2] in ls:\n            s += 1\n        i += 1\n    return s", "from itertools import count\n\nPRIMES     = ['11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']\nSET_PRIMES = set(PRIMES)\nTAILS      = ['00', '01', '25', '76']        # 2 digits numbers that fulfill the condition 11(76)*11(76) = ...(76)\n\ndef solve(a,b):\n    maxMissingDigits = len(str(b))-4\n    matches = 0\n    for nd in range(maxMissingDigits+1):\n        for p in PRIMES:\n            if nd == maxMissingDigits and int(p + '0'*(nd+2)) > b:                # All next generated numbers would be > b, so break\n                break\n            for t in TAILS:\n                digs = count(0)\n                while True:\n                    d = (\"{:0>\"+str(nd)+\"}\").format(next(digs)) if nd else ''     # Digits to insert in the middle of the number\n                    val = int(p+d+t)                                              # val = 2 digits prime + missing digits (up to maxMissingDigits) + 2 digits tail\n                    if val > b or len(d) > nd: break                              # Generated value is too high or if the digits to insert exceed the current number of digits sought for, break\n                    if str(val**2)[:2] in SET_PRIMES and a <= val:\n                        matches += 1\n                    if not d: break                                               # If no digits to insert, the loop has to be broken manually after its first iteration\n    return matches", "PRIMES = set([str(num) for num in range(3, 100) if all(num % x != 0 for x in [2] + list(range(3, int(num ** 0.5)+1, 2)))])\n\ndef solve(a, b):\n  return sum(1 for x in range(max(a, 1000), b) if x % 100 == x*x % 100 and str(x)[:2] in PRIMES and str(x*x)[:2] in PRIMES)", "from bisect import bisect_left, bisect\n\ndef is_prime(n):\n    if n < 2: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    return all(n % i for i in range(3, int(n**0.5)+1, 2))\n\ndef is_symmetry(n):\n    return str(n ** 2)[:2] in SPRIMES\n\nSPRIMES = [str(i) for i in range(11, 100, 2) if is_prime(i)]\nBASE = [i for i in range(0, 100) if (i*i) % 100 == i]\ncandidates = (\n    i + d\n    for i in range(1100, 10000000+1, 100)\n    if str(i)[:2] in SPRIMES\n    for d in BASE\n)\nNS = [x for x in candidates if is_symmetry(x)]\n\n\ndef solve(a, b):\n    return bisect(NS, b-1) - bisect_left(NS, a)", "two_digit_primes = set('11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97'.split())\n\n# pregenerate eligible numbers\nnumbers = []\nfor n in range(11, 9799 +1):\n    if str(n)[:2] in two_digit_primes:\n        for ending in (0, 1, 25, 76):\n            candidate = n*100 + ending\n            if str(candidate**2)[:2] in two_digit_primes:\n                numbers.append(candidate)\n    \ndef solve(a, b):\n    return sum(1 for n in numbers if a <= n < b)\n", "from math import sqrt\ndef solve(a,b):\n    i = a\n    s = 0\n    while i < b:\n        if prope(i):\n            s += 1\n        i += 1\n    return s\n\ndef prope(n):    \n    return (n*n-n)%100==0 and prime(int(str(n)[:2])) and prime(int(str(n*n)[:2]))\n\ndef prime(n):\n    if n == 2:\n        return True\n    i = 2\n    while i< sqrt(n)+1:\n        if n % i==0:\n            return False\n        i+=1\n    return True", "p = '11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97'.split()\nli = [i for i in range(1,1000000) if str(i)[:2] in p and str(i*i)[:2] in p and str(i*i)[-2:]==str(i)[-2:]]\nsolve=lambda a,b:sum(1 for i in li if a<=i<=b)", "def solve(a,b):\n    a1 = (a + 99) // 100 * 100\n    b1 = b // 100 * 100\n    print((a1, b1))\n    if a1 > b1: return sum(isok(x) for x in range(a, b))\n    n = sum(isok(x) for x in range(a, a1)) + sum(isok(x) for x in range(b1, b))\n    for k in range(a1, b1, 100):\n        if str(k)[:2] in p2:\n            for i in (0, 1, 25, 76):\n                if str((k+i)**2)[:2] in p2:\n                    n += 1\n    return n\n\ndef isok(n):\n    return n % 100 in (0, 1, 25, 76) and str(n)[:2] in p2 and str(n*n)[:2] in p2\n\np2 = '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97'\n", "primes = {11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\nendings = {'00','01','25','76'}\n\ndef solve(a,b):\n    if b < 1176: return 0\n    output = 0\n    if a<1176: a=1176\n    for i in [x for x in range(a,b) if str(x)[-2:] in endings]:\n        if int(str(i)[:2]) not in primes:\n            continue\n        if int(str(i*i)[:2]) in primes:\n            output += 1\n    return output", "def is_prime(n):\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    x=3\n    while(x*x<=n):\n        if n%x==0:\n            return False\n        x+=2\n    return True\n\nprimes=set([x for x in range(1,100) if is_prime(x)])\n\ndef get_seq():\n    r=[]\n    for x in range(1,1000001):\n        if int(str(x)[:2]) in primes:\n            y=x*x\n            if int(str(y)[:2]) in primes and str(x)[-2:]==str(y)[-2:]:\n                r.append(x)\n    return r\n    \nseq=set(get_seq())\n\ndef solve(a,b):\n    r=0\n    for x in range(a,b):\n        if x in seq:\n            r+=1\n    return r"]