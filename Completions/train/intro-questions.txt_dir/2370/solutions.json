["#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    def f(a,b):\n        if a == b:\n            return len(d[a])\n        da = d[a]\n        db = d[b]\n        res = 0\n        for x in range(len(da) >> 1):\n            l = da[x]\n            r = da[-1-x]\n            i = bisect.bisect_left(db,l)\n            j = bisect.bisect_left(db,r)\n            y = max(0,j-i)\n            s = 2*(x+1)+y\n            if res < s:\n                res = s\n        return res\n\n    t = I()\n    for _ in range(t):\n        n = I()\n        a = LI()\n        m = max(a)\n        d = [[] for i in range(m)]\n        for i in range(n):\n            ai = a[i]-1\n            d[ai].append(i)\n        ans = 1\n        for a in range(m):\n            if not d[a]:\n                continue\n            for b in range(m):\n                if not d[b]:\n                    continue\n                res = f(a,b)\n                if ans < res:\n                    ans = res\n        print(ans)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()", "for _ in range(int(input())):\n\tn = int(input())\n\tr = list(map(int, input().split()))\n\td = {i: [] for i in range(1, 27)}\n\tfor i in range(n):\n\t\td[r[i]].append(i)\n\tans = 1\n\tfor end in range(1, 27):\n\t\tc = 1\n\t\twhile c * 2 <= len(d[end]):\n\t\t\tll, rr = d[end][c - 1] + 1, d[end][-c] - 1\n\t\t\tdd = [0] * 27\n\t\t\tfor p in range(ll, rr + 1):\n\t\t\t\tdd[r[p]] += 1\n\t\t\tans = max(ans, max(dd) + 2 * c)\n\t\t\tc += 1\n\tprint (ans)"]