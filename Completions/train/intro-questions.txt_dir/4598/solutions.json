["def calculate(n1, n2, o):\n    operators = {\n        \"add\": (lambda x, y: x + y),\n        \"subtract\": (lambda x, y: x - y),\n        \"multiply\": (lambda x, y: x * y),\n    }\n    \n    return \"{:b}\".format( operators[o]( int(n1, 2), int(n2, 2) ) )", "def calculate(n1, n2, o):\n    def s2b(i):\n        return int(i, base=2)\n    \n    if o == 'add':\n        res = s2b(n1) + s2b(n2)\n    elif o == 'subtract':\n        res = s2b(n1) - s2b(n2)\n    elif o == 'multiply':\n        res = s2b(n1) * s2b(n2)\n    \n    return '{0:b}'.format(res)", "def calculate(n1, n2, o):\n    ops = {\n        \"add\": (lambda a, b: a + b), \n        \"subtract\": (lambda a, b: a - b), \n        \"multiply\": (lambda a, b: a * b)}\n    n = ops[o](int(n1, 2), int(n2, 2))\n    s = str(bin(n))\n    return  \"-\" + s[3:] if n < 0 else s[2:]", "from operator import add, sub as subtract, mul as multiply\n\ndef calculate(n1, n2, o):\n    value = globals()[o](int(n1, 2), int(n2, 2))\n    return format(value, 'b')", "from operator import *\ndef calculate(n1, n2, o):\n    result = eval(o[:3])(int(n1, 2), int(n2, 2))\n    return (bin(result)[2:], bin(result)[0] + bin(result)[3:])[result < 0]\n", "import operator\ndef calculate(n1, n2, o):\n    calc = {\n        'add':operator.add((int(n1, base=2)),(int(n2, base=2))), \n        'subtract':operator.sub((int(n1, base=2)),(int(n2, base=2))), \n        'multiply':operator.mul((int(n1, base=2)),(int(n2, base=2))) }\n    return '{:b}'.format(calc[o])", "op = { \"add\" : (lambda x, y : \"{:b}\".format(int(x,2) + int(y,2))),\n       \"subtract\" : (lambda x, y : \"{:b}\".format(int(x,2) - int(y,2))),\n       \"multiply\" : (lambda x, y : \"{:b}\".format(int(x,2) * int(y,2))) }\n\ndef calculate(n1, n2, o):\n    return op[o](n1, n2)\n", "def calculate(n1, n2, o):\n    if o == 'add': return bin(int(n1,2) + int(n2,2))[2:]\n    if o == 'subtract': \n        result = bin(int(n1,2) - int(n2,2))\n        if result[0] == '-':\n            return result[0] + result[3:]\n        return result[2:]\n    if o == 'multiply': return bin(int(n1,2) * int(n2,2))[2:]\n    if o == 'divide': return bin(int(n1,2) / int(n2,2))[2:]", "def calculate(n1, n2, o):\n    return bin(int(n1, 2) + int(n2, 2) if o == 'add' else int(n1, 2) - int(n2, 2) if o == 'subtract' else int(n1, 2) * int(n2, 2)).replace('0b', '')"]