["def any_arrows(arrows):\n    return any(not i.get(\"damaged\", False) for i in arrows)\n", "def any_arrows(arrows):\n    return any(not arrow.get('damaged', False) for arrow in arrows)\n", "def any_arrows(arrows):\n    return any([True for a in arrows if 'damaged' not in a or a['damaged'] == False])", "def any_arrows(arrows):\n    return not all(ar.get('damaged', False) for ar in arrows)", "any_arrows=lambda arrows: any([not x[\"damaged\"] if \"damaged\" in x else True for x in arrows])", "def any_arrows(arrows):\n    has_good = False\n    for arrow in arrows:\n        is_damaged = arrow.get('damaged', False)\n        if not is_damaged:\n            has_good = True\n            break\n    return has_good", "any_arrows = lambda a: any((not e[\"damaged\"] if \"damaged\" in e else True) for e in a)", "def any_arrows(arrows):\n    return any(a.get('damaged', False) is False for a in arrows)", "def any_arrows (arrows):\n    return not all (arrow.get ('damaged', False) for arrow in arrows)", "def any_arrows(quiver):\n    for arrow in quiver:\n        #AAAAAAAAAAAAAAAAAAAAAAAAAAA!\n        if (arrow.get('range') is True or None) or not arrow.get('damaged'):\n                return True\n    return False\n", "def any_arrows(arrows):\n    return not all(map(lambda x: x['damaged'] if 'damaged' in x else False, arrows))", "def any_arrows(arrows):\n    return any(not a.get('damaged') for a in arrows)", "def any_arrows(arrows):\n    return any(not a.get('damaged', False) for a in arrows)", "def any_arrows(arrows):\n    return any(not ar.get('damaged', False) for ar in arrows)", "any_arrows=lambda q:any(not a.get('damaged')for a in q)", "def any_arrows(arrows):\n    return any(not x.get(\"damaged\", False) for x in arrows)", "def any_arrows(arrows):\n    return sum(a.get('damaged', 0) for a in arrows) < len(arrows)", "any_arrows = lambda arrows : True in [arrow.get (\"damaged\") != True for arrow in arrows];", "def any_arrows(arrows):\n    return True if ['undamaged' for i in arrows if not i.get('damaged')] else False", "any_arrows=lambda q:1-all(a.get('damaged')for a in q)", "def any_arrows(arrows):\n    return not all(a.get('damaged', False) for a in arrows)", "def any_arrows(arrows):\n    try:\n        return not (arrows == [] or all(x['damaged'] for x in arrows))\n    except KeyError:\n        return True", "def any_arrows(arrows):\n    return not all(map(lambda d: d.get('damaged', False), arrows)) if arrows else False", "from typing import List, Dict, Union\n\ndef any_arrows(arrows: List[Dict[str, Union[int, bool]]]) -> int:\n    \"\"\" Get status that you have some good ones left, in order to prepare for battle. \"\"\"\n    return bool(next(filter(lambda _arr: not _arr.get(\"damaged\", False), arrows), False))", "def any_arrows(arrows):\n    if arrows:\n        for arrow in arrows:\n            if arrow.get('damaged'):\n                continue\n            else:\n                return True\n        return False\n    else:\n        return False\n", "def any_arrows(arrows):\n    if len(arrows) == 0:\n        return False\n    else:\n        for arrow_info in arrows:\n            if arrow_info.get('damaged') == None:\n                return True\n            elif arrow_info.get('damaged') == False:\n                return True\n        return False", "def any_arrows(arrows):\n    if arrows == []:\n        return False\n    else:\n        for i in arrows:\n            if i.get(\"damaged\") is None:\n                return True\n                break\n            elif i[\"damaged\"] == False:\n                return True\n                break\n        else:\n            return False\n", "def any_arrows(arrows):\n    for dct in arrows:\n        if 'damaged' not in dct.keys() or dct['damaged']==False:\n            return True\n    return False", "def any_arrows(arrows):\n    if not arrows:\n        status = False\n    for arrow in arrows:\n        if 'damaged' not in arrow or arrow['damaged'] == False:\n            status = True\n            break\n        else:\n            status = False\n    return status", "def any_arrows(arrows):\n    damaged_test = [bundle.get('damaged') for bundle in arrows]\n    return (None in damaged_test or False in damaged_test)", "def any_arrows(arrows):\n    return any(True for x in arrows if not x.get('damaged'))", "def any_arrows(arrows):\n    all_bools = []\n    \n    if len(arrows) < 1:\n         return False\n    for i in arrows:\n        if i.get('range', 0) >= 0 and i.get('damaged', False) == False:\n            all_bools.append(True)\n        if i.get('range', 0) >= 0 and i.get('damaged') == True:\n            all_bools.append(False)\n    \n    \n    if True in all_bools:\n        return True\n    else:\n        return False", "def any_arrows(arrows):\n    return bool([ arrow for arrow in arrows if not arrow.get('damaged', False) ])", "from operator import __and__\nfrom functools import reduce\ndef any_arrows(arrows):\n    return not reduce(__and__, [x.get('damaged', False) for x in arrows], True) \n", "def any_arrows(arrows):\n    lst = []\n    \n    if arrows == []:\n        lst.append(False)\n    else:\n        for arrow in arrows:\n            if 'damaged' not in arrow.keys():\n                lst.append(True)\n            elif 'damaged' in arrow.keys() and arrow['damaged'] == False:\n                lst.append(True)\n            else:\n                lst.append(False)\n    return True in lst", "def any_arrows(arrows):\n    return bool([x for x in arrows if not x.setdefault('damaged', False)])", "def any_arrows(arrows):\n    status = [i.get('damaged') for i in arrows if 'damaged' in i]    \n    return not sum(status) == len(arrows)", "def any_arrows(arrows):\n    #your code here\n    for i in arrows:\n        if 'damaged' in i:\n            if i.get('damaged')==False:\n                return True\n        if 'damaged' not in i:\n            return True\n    return False", "def any_arrows(arrows):\n    return False in [a.get(\"damaged\", False) for a in arrows]", "def any_arrows(arrows):\n    if not arrows:\n        return False\n    for d in arrows:\n        if any(d[k] == False for k in d) or \"damaged\" not in d.keys():\n            return True\n    return False", "import re\n\ndef any_arrows(arrows):\n    damaged_arrows = []\n    good_arrows = []\n    \n    sorted_arrows = arrows.copy()\n    sorted_arrows.sort(key=lambda arrow: arrow.get('range') if arrow.get('range') else 0, reverse=True)\n    \n    print(sorted_arrows)\n    \n    for arrow in sorted_arrows:\n        if arrow.get('damaged'):\n            damaged_arrows.append(arrow)\n        else:\n            good_arrows.append(arrow)\n            \n    print(damaged_arrows)\n    print(good_arrows)\n    \n    return len(good_arrows) > 0\n    \n", "def any_arrows(arrows):\n    for arr in arrows:\n        if not ('damaged' in arr and arr['damaged']): return True\n    return False\n", "def any_arrows(arrows):\n    l = list(filter(lambda x: x.get('damaged'), arrows)) \n    return len(l)<len(arrows)", "def any_arrows(arrows):\n    return len([arrow for arrow in arrows if arrow.get('damaged') != True]) > 0", "def any_arrows(arrows):\n    for arrow in arrows:\n        if \"damaged\" not in arrow.keys():\n            return True\n        elif arrow[\"damaged\"] == False:\n            return True\n    else: return False", "def any_arrows(arrows):\n    return any([x for x in arrows if (True if ('damaged' not in list(x.keys()) or (x['damaged'] is False)) else False)])\n", "def any_arrows(arrows):\n    count=0\n    for i in arrows:\n        try:\n            if not i['damaged']:\n                return True\n        except:\n            return True\n    return False", "def any_arrows(arr):\n    for i in arr:\n        if True not in i.values():\n            return True\n    return False", "def any_arrows(arrows):\n    print(arrows)\n    left = False\n    if arrows == []:\n        return False\n    \n    for status in arrows:\n        if 'damaged' not in status:\n            return True\n        else:\n            if status['damaged'] is not True:\n                return True\n    return False ", "any_arrows = lambda arrows: any(\"damaged\" not in arrow or not arrow[\"damaged\"] for arrow in arrows)", "def any_arrows(arrows):\n    return any([x for x in arrows if x.get('damaged') == False or x.get('damaged') == None])", "def any_arrows(arrows):\n    return not all('damaged' in arrow and arrow['damaged'] for arrow in arrows)", "def any_arrows(arrows):\n    for arr in arrows:\n        if 'damaged' in arr:\n           if arr['damaged'] == False :\n                return True\n        else:\n            return True\n    return False", "def any_arrows(arrows):\n    for arrow in arrows:\n        try : \n            if arrow['damaged'] == False : return True\n        except : return True\n    return False", "def any_arrows(arrows):\n    return any(\"damaged\" not in arrow or arrow[\"damaged\"] == False for arrow in arrows)", "def any_arrows(arrows):\n    if arrows==[]:\n        return False \n    for i in arrows:\n        if i.get('damaged', 0)==False:\n            return True\n    return False\n", "def any_arrows(arrows):\n    return any(not x.get('damaged') for x in arrows)", "def any_arrows(arrows):\n    for a in arrows:\n        if 'damaged' not in list(a.keys()):return True\n        if a['damaged'] == False :return True\n    return False\n", "from functools import reduce\n\ndef any_arrows(arrows):\n    if arrows:\n        return reduce(lambda a, b: a or b, [not a.get(\"damaged\", False) for a in arrows])\n    else:\n        return False", "def any_arrows(arrows):\n    quiver = False\n    if arrows:\n        for n, x in enumerate(arrows):\n            for k,v in x.items():\n                if k == 'range' and len(x.items()) == 1:\n                    quiver = True\n                    break\n                if k == 'damaged' and v == False:\n                    quiver = True\n                    break\n    return quiver", "def any_arrows(arrows):\n    quiver = False\n    if arrows:\n        for n, x in enumerate(arrows):\n            for k,v in x.items():\n                if k == 'range' and len(x.items()) == 1:\n                    quiver = True\n                    break\n                if k == 'damaged' and v == True:\n                    pass\n                if k == 'damaged' and v == False:\n                    quiver = True\n                    break\n    return quiver", "def any_arrows(arrows):\n    return any((x.get('damaged', None) == None or x['damaged'] == False) for x in arrows)", "def any_arrows(arrows):\n    try:\n        for i in arrows:\n            if 'damaged' in i:\n                if i['damaged'] == False:\n                    return True\n            else:\n                return True\n        return False\n    except:\n        return False", "def any_arrows(arrows):\n    dam = 0\n    for i in arrows:\n        if 'damaged' in i:\n            if i['damaged'] == True:\n                dam += 1\n    return dam < len(arrows)", "def any_arrows(arrows):\n    return any(['damaged' not in a or not a['damaged'] for a in arrows])\n", "def any_arrows(arrows):\n    status = False\n    for arrow in arrows:\n        if not arrow.get('damaged', False):\n            status = True\n    return status\n", "def any_arrows(arrows):\n    print(arrows)\n    for el in arrows:\n        if el.get('damaged')!= True:\n            return True\n    return False", "def any_arrows(arrows):\n    #print(arrows)\n    return any(not arrow.get('damaged', False) for arrow in arrows)", "def any_arrows(arrows):\n    goodArrows = False\n    for a in arrows:\n        goodArrows = goodArrows or not a.get('damaged')    \n    return goodArrows", "def any_arrows(arrows):\n    if arrows:\n        for d in arrows:\n            if not \"damaged\" in d: return True\n            elif not d[\"damaged\"]: return True\n    return False", "def any_arrows(arrows):\n    for arrow_dict in arrows:\n        if 'damaged' not in arrow_dict or not arrow_dict['damaged']:\n            return True\n    return False", "def any_arrows(arrows):\n    return len([a for a in arrows if not a.get('damaged', False)]) != 0", "def any_arrows(arrows):\n  res=[]\n  for i in range(len(arrows)):\n      if 'damaged' in list(arrows[i].keys()):\n          if arrows[i]['damaged']==True:\n              res.append(True)\n          else:\n              res.append(False)\n      else:\n          res.append(False)\n  return False in res\n", "def any_arrows(arrows):\n    return False in [arrow.get('damaged', False) for arrow in arrows]", "def any_arrows(arrows):\n    if arrows == []:\n        return False\n    else:\n        for i in arrows:\n            if not 'damaged' in i:\n                return True\n            elif i['damaged']==False:\n                return True\n        return False", "any_arrows = lambda arrows: any(not i.get('damaged', False) for i in arrows)", "def any_arrows(arrows):\n    if arrows == []:\n        return False\n    for dictionary in arrows:\n        if 'damaged' not in dictionary:\n            return True\n        if 'damaged' in dictionary:\n            if dictionary['damaged'] == False:\n                return True\n    return False", "def any_arrows(arrows):\n    damaged_arrows = 0\n    total_arrows = 0\n    for x in arrows:\n        if 'damaged' in x:\n            if x['damaged']:\n                damaged_arrows += 1\n        total_arrows += 1\n    return total_arrows > damaged_arrows\n", "def any_arrows(arrows):\n    #your code here\n    if not arrows :\n        return False\n        \n    result = False\n        \n    for arrow in arrows:\n        if ('damaged' not in arrow) or (arrow['damaged'] == False):\n            result = result or True\n        else:\n            result = result or False\n    return result\n            \n    \n", "from typing import List, Dict, Union\n\n\ndef any_arrows(arrows: List[Dict[str, Union[str, bool]]]) -> bool:\n    return any(not a.get('damaged', False) for a in arrows)\n", "def any_arrows(arrows):\n    return any([not arr[\"damaged\"] if \"damaged\" in arr.keys() else True for arr in arrows])", "def any_arrows(arrows):\n    return any([i.get('damaged',False) == False for i in arrows]) if arrows else False\n            \n", "any_arrows=lambda l:any(not(x.get('damaged')) for x in l)", "def any_arrows(arrows):\n    return(False if all([i.get(\"damaged\", False) for i in arrows]) else True)", "def any_arrows(arrows):\n    #your code here\n    for item in arrows:\n        \n        try:\n            a = item[\"damaged\"]\n            if not a:\n                return True\n        except:\n            return True\n    return False", "def any_arrows(arrows):\n    return False in [i.get('damaged',False) for i in arrows]\n", "def any_arrows(arrows):\n    for obj in arrows:\n        if obj.get('damaged', False) == False:\n            return True\n    return False", "def any_arrows(arrows):\n    #your code here\n    try: \n        return min(i.get('damaged', 0) for i in arrows) == 0\n    except:\n        return False", "def any_arrows(a):\n    for i in range(len(a)):\n        if a[i].get('damaged') != True:\n            return True\n    return False", "class Arrow:\n    def __init__(self, range = 5, damaged = False):\n        self.range = range\n        self.damaged = damaged\n\ndef any_arrows(arrows):\n    quiver = []    \n    for arrow in arrows:\n        if 'range' in arrow and 'damaged' in arrow:\n            quiver.append(Arrow(arrow.get('range'), arrow.get('damaged')))\n        elif 'range' in arrow:\n            quiver.append(Arrow(range = arrow.get('range')))\n        elif 'damaged' in arrow:\n            quiver.append(Arrow(damaged = arrow.get('damaged')))\n        else:\n            quiver.append(Arrow())\n    return False in [x.damaged for x in quiver]", "def any_arrows(arrows):\n    return sum(1 if 'damaged' not in list(each.keys()) or ('damaged' in list(each.keys()) and not each['damaged']) else 0 for each in arrows) > 0\n", "def any_arrows(arrows):\n    return any(arrow for arrow in arrows if not arrow.get('damaged', False))", "def any_arrows(arrows):\n    return any(arrow for arrow in arrows if 'damaged' not in arrow or not bool(arrow['damaged']))", "def any_arrows(arrows):\n        return any(not x.get(\"damaged\") for x in arrows)\n    # Flez\n", "def any_arrows(arrows):\n    #your code here\n    i = 0\n    while i < len(arrows) :\n        if not arrows[i].get(\"damaged\") : return True\n        i = i+1\n    return False", "def any_arrows(arrows):\n   return any(not arrows[i].get('damaged',False) for i in range(len(arrows)))", "def any_arrows(arrows):\n    if arrows==[]: return False\n    else:\n       for i in range(len(arrows)):\n           if arrows[i].get('damaged')==False or arrows[i].get('damaged')==None :\n               return True\n               break\n       return False", "def any_arrows(arrows):\n    for obj in arrows:\n        if not ('damaged' in obj and obj['damaged']):\n            return True\n    return False", "def any_arrows(arrows):\n    for arrow in arrows:\n        try:\n            if arrow['damaged']:\n                continue\n        except KeyError:\n            return True\n        else: return True\n    return False", "def any_arrows(arrows):\n    #your code here\n    for i in arrows:\n        if 'damaged' not in i.keys() or ('damaged' in i.keys() and i['damaged']==False):\n            return True\n    return False"]