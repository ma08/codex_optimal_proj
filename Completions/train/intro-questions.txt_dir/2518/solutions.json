["class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         possibility_flag = False\n         for i in range(1, len(nums)):\n             if nums[i] < nums[i-1]:\n                 if possibility_flag:\n                     return False\n                 possibility_flag = True\n                 if (i-2 < 0 or i-2 >= 0 and nums[i-2] < nums[i]) or (i+1 >= len(nums) or i+1 < len(nums) and nums[i+1] > nums[i-1]):\n                     pass\n                 else:\n                     return False\n         return True\n \n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count  = 0\n         if len(nums) == 1:\n             return True\n         for i in range(0,len(nums)-1):\n             if nums[i] > nums[i+1]:\n                 if nums[i+1] < nums[i-1] and i-1 >= 0:\n                     count += 1\n                     if count > 1:\n                         break\n                     if i+1 != (len(nums)-1):\n                         nums[i+1] = nums[i]\n                 else:\n                     nums[i] = nums[i+1]\n                     count += 1\n                     if count > 1:\n                         break\n                     if count == 1:\n                         nums[i] -= 1\n \n         if count > 1:\n             return False\n         else:\n             return True\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count  = 0\n         if len(nums) == 1:\n             return True\n         for i in range(0,len(nums)-1):\n             if nums[i] > nums[i+1]:\n                 if nums[i+1] < nums[i-1] and i-1 >= 0:\n                     count += 1\n                     if i+1 != (len(nums)-1):\n                         nums[i+1] = nums[i]\n                 else:\n                     nums[i] = nums[i+1]\n                     count += 1\n                     if count == 1:\n                         nums[i] -= 1\n \n         if count > 1:\n             return False\n         else:\n             return True\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count  = 0\n         if len(nums) == 1:\n             return True\n         for i in range(0,len(nums)-1):\n             if nums[i] > nums[i+1]:\n                 if nums[i+1] < nums[i-1] and i-1 >= 0:\n                     count += 1\n                     if count > 1:\n                         break\n                     if i+1 != (len(nums)-1):\n                         nums[i+1] = nums[i]\n                 else:\n                     nums[i] = nums[i+1]\n                     count += 1\n                     if count > 1:\n                         break\n                     if count == 1:\n                         nums[i] -= 1\n \n         if count > 1:\n             return False\n         else:\n             return True\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         idx=-1\n         if len(nums)>=2:\n             if nums[0]>nums[1]:\n                 r=0\n             else:\n                 r=1\n         for i in range(2,len(nums)):\n             if nums[i]<nums[i-1]:\n     #            idx=i-2\n                 r=r-1\n                 if nums[i]<nums[i-2]:\n                     nums[i]=nums[i-1]\n             # if idx>=0:\n             #     pre=nums[idx]\n             # else:\n             #     pre=-2**32\n             # if i<len(nums)-1 and nums[i+1]<pre:\n             #     r=r-1\n             # print(i,r)\n             if r<0:\n                 return False\n         return True\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count  = 0\n         if len(nums) == 1:\n             return True\n         for i in range(0,len(nums)-1):\n             if nums[i] > nums[i+1]:\n                 if nums[i+1] < nums[i-1] and i-1 >= 0:\n                     count += 1\n                     if count > 1:\n                         break\n                     if i+1 != (len(nums)-1):\n                         nums[i+1] = nums[i]\n                 else:\n                     nums[i] = nums[i+1]\n                     count += 1\n                     if count > 1:\n                         break\n                     if count == 1:\n                         nums[i] -= 1\n \n         if count > 1:\n             return False\n         else:\n             return True\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count=0\n         for i in range(len(nums)-1):\n             if nums[i]>nums[i+1]:\n                 count+=1\n                 if count>1 or ((i-1>=0 and nums[i-1]>nums[i+1]) and (i+2<len(nums) and nums[i+2]<nums[i])):\n                     return False\n         return True", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count = 0;\n         front = nums[0];\n         for i in range(1,len(nums)):\n             print(front);\n             if front > nums[i]:\n                 if count > 0:\n                     return False;\n                 else:\n                     if i > 1 and nums[i - 2] > nums[i]:\n                         front = nums[i - 1];\n                     else:\n                         front = nums[i];\n                     count += 1;\n             else:\n                 front = nums[i];\n         return True;\n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         n = len(nums)\n         \n         decreasing = []\n         \n         for i in range(n-1):\n             if nums[i] > nums[i+1]:\n                 decreasing.append(i)\n                 \n         if not decreasing:\n             return True\n         \n         if len(decreasing) > 1:\n             return False\n         \n         def check(array):\n             n = len(array)\n             for i in range(n-1):\n                 if array[i] > array[i+1]:\n                     return False\n                 \n             return True\n         \n         i = decreasing[0]\n         \n         temp = nums[i]\n         nums[i] = nums[i+1]\n         if check(nums):\n             return True\n         nums[i] = temp\n         \n         nums[i+1] = nums[i]\n         if check(nums):\n             return True\n         \n         return False           \n         \n", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         modified = False\n         for i in range(1, len(nums)):\n             if i and nums[i] < nums[i - 1]:\n                 if modified:\n                     return False\n                 modified = True\n                 if i > 1 and nums[i] <= nums[i - 2]:\n                     nums[i] = nums[i - 1]\n         return True", "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         return sum(list(map(lambda t: t[0] - t[1] < 0, zip(nums[1:], nums[:-1])))) <= 1 and sum(list(map(lambda t: t[0] - t[1] < 0, zip(nums[2:], nums[:-2])))) <= 1"]