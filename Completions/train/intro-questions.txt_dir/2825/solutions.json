["def even_magic(n):\n    return [ [ n*n-(y*n+x) if x%4==y%4 or (x%4+y%4)%4==3 else y*n+x+1 for x in range(n)] for y in range(n) ]", "def even_magic(n):\n    l = list(range(1,n*n+1))\n    for i in range(n*n//2):\n        y,x = (i//n)%4,(i%n)%4\n        if y==x or x+y==3: l[i],l[n*n-1-i] = l[n*n-1-i], l[i]\n    return [l[i*n:i*n+n] for i in range(n)]", "import numpy as np\n\ndef even_magic(n):\n    mx    = n*n\n    draft = np.arange(1, mx +1).reshape((n, n))\n    art   = np.arange(mx, 0,-1).reshape((n, n))\n    \n    for i in range(n):\n        for y in range(n):\n            if any(( all((i%4 in [0,3], y%4 in [0,3])), all((i%4 in [1,2], y%4 in [1,2])) )):\n                draft[i][y] = art[i][y]\n                \n    return draft.tolist()", "def even_magic(n):\n    n2_1 = n ** 2 + 1\n    return [\n        [n2_1 - (i*n+j+1) if i % 4 == j % 4 or (i + j) % 4 == 3 else i*n+j+1 for j in range(n)]\n        for i in range(n)\n    ]", "def even_magic(n):\n    sq = [[y*n+x+1 for x in range(n)] for y in range(n)]\n    \n    for x in range(n):\n        for y in range(n):\n            if y % 4 == x % 4 or y % 4 == 3-x % 4:\n                sq[x][y] = n**2 + 1 - sq[x][y]\n    return sq\n", "def even_magic(n):\n    numbers, p = iter(list(range(1, n * n + 1))), 0\n    main_grid = [[next(numbers) for _ in range(n)] for _ in range(n)]\n    A = lambda s,se,see,e,ee,eee:list(zip(range(s,se,see),range(e,ee,eee)))\n    for i in range(n//4):\n        o = 0\n        for j in range(n//4):\n            for k, l in A(p, p + 4, 1, o, o + 4, 1) + A(p, p + 4, 1, o + 3, o - 1, -1):\n                main_grid[k][l] = ((n ** 2) + 1) - main_grid[k][l]\n            o += 4\n        p += 4\n    return main_grid", "def even_magic(n):\n    square = []\n    for j in range(0, n):\n        row = []\n        for i in range(0, n):\n            v = i + j * n + 1\n            if i % 4 == j % 4 or -(i + 1) % 4 == j % 4:\n                row.append(n**2 + 1 - v)\n            else:\n                row.append(v)\n        square.append(row)   \n    return square", "def even_magic(n):\n    arr = [];\n    for i in range(0, n):\n        arr.append([])\n        for j in range(0, n):\n            if i%4==j%4 or i%4+j%4 == 3:\n                arr[i].append(n*n-i*n-j)\n            else:\n                arr[i].append(i*n+j+1)\n    return arr", "even_magic=lambda n:[[y%4in(x%4,3-x%4)and n*n-n*y-x or n*y+x+1for x in range(n)]for y in range(n)]", "def even_magic(n):\n    result, n2 = [[n*i+j+1 for j in range(n)] for i in range(n)], n**2\n    for x in range(n):\n        result[x][x] = n2 + 1 - result[x][x]\n        result[x][-x-1] = n2 + 1 - result[x][-x-1]\n    for i in range(4, n, 4):\n        for x in range(n-i):\n            result[i+x][x] = n2 + 1 - result[i+x][x]\n            result[x][i+x] = n2 + 1 - result[x][i+x]\n            result[x][-x-1-i] = n2 + 1 - result[x][-x-1-i]\n            result[i+x][-x-1] = n2 + 1 - result[i+x][-x-1]\n    return result"]