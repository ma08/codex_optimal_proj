["def shortest_to_char(s, c):\n    if not s or not c:\n        return []\n\n    indexes = [i for i, ch in enumerate(s) if ch == c]\n    if not indexes:\n        return []\n        \n    return [ min(abs(i - ic) for ic in indexes) for i in range(len(s)) ]\n", "def shortest_to_char(s, c):\n    L = [i for i,x in enumerate(s) if x == c]\n    return [min(abs(i - j) for j in L) for i,x in enumerate(s)] if L else []", "def shortest_to_char(s, c):\n  return [min(x.find(c) + 1 or 1e3 for x in [s[i:], s[:i+1][::-1]]) - 1 for i in range(len(s))] if c and c in s else []", "def shortest_to_char(s, c):\n    if not c: return []\n    l = []\n    for i,x in enumerate(s):\n        a,b = s[i:].find(c), s[:i+1][::-1].find(c)\n        if a != -1:\n            a = abs(i-i + a)\n        else: a = float('inf')\n        if b != -1:\n            b = s[:i+1][::-1].find(c)\n        else: b = float('inf')\n        get_min = min(a,b)\n        if get_min != float('inf'):\n            l.append(get_min)\n    return l", "import re\n\ndef shortest_to_char(s, c):\n    if not c or c not in s:\n        return []\n    positions = [m.start() for m in re.finditer(c, s)]\n    return [min(abs(p - i) for p in positions) for i in range(len(s))]", "def shortest_to_char(alist, target):\n    # find all locations of target character\n    loc = [i for i, x in enumerate(alist) if x == target]\n    if not loc: return []\n\n    # for every character in the alist, find the minimum distance\n    # to one or more target characters\n    shortest = [min(abs(i - l ) for l in loc) for i in range(len(alist))] \n    return shortest\n", "def shortest_to_char(s, c):\n    if not (s and c and c in s):\n        return []\n    idxs = [i for i, x in enumerate(s) if x == c]\n    return [min(abs(j-i) for j in idxs) for i, x in enumerate(s)]", "def shortest_to_char(s,c):\n    i = s.find(c)\n    if i==-1 or not c: return []\n    \n    lst = list(reversed(range(1,i+1)))\n    while i != -1:\n        j = s.find(c,i+1)\n        if j == -1:\n            lst.extend(range(len(s)-i))\n        else:\n            x = j-i>>1\n            lst.extend(range(0,x+1))\n            lst.extend(reversed(range(1,j-i-x)))\n        i = j\n    return lst", "def shortest_to_char(s, c):\n    if not s or not c: return []\n    a = [i for i, x in enumerate(s) if x == c]\n    if not a: return []\n    r, n = [0] * len(s), 0\n    for x, y in zip(a, a[1:] + [None]):\n        m = (x + y + 1) // 2 if y is not None else len(s)\n        while n < m:\n            r[n] = abs(n - x)\n            n += 1\n    return r", "def shortest_to_char(s, c):\n    if not c in s or not c: return []\n    return [(0 if c == s[x] else min([abs(x - y) for y in [x for x in range(len(s)) if s[x] == c]])) for x in range(len(s))]\n"]