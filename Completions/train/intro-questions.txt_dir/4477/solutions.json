["def reverse_number(n):\n    \"\"\"\n    Reverse a number, preserve negative sign\n    \"\"\"\n    s = str(n)\n    ret = int(\"-{}\".format(s[:0:-1]) if \"-\" in s else s[::-1])\n    return ret", "def reverse_number(n):\n    rev = 0\n    temp = n\n    dig = 0\n    if( n < 0):\n        n = abs(n)\n    while(n > 0):\n        dig = n % 10\n        rev = rev*10 + dig;\n        n = n // 10\n    if( temp < 0):\n        return -rev\n    else:\n        return rev", "def reverse_number(n):\n  if str(n)[0] == \"-\":\n    return -int(str(n)[:0:-1])\n  else:\n    return int(str(n)[::-1])", "def reverse_number(n):\n    return 0 if n == 0 else n/abs(n) * int(str(abs(n))[::-1])", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) * (-1)**(n<0)", "def reverse_number(n):\n    return min(1, max(-1, n)) * int(str(abs(n))[::-1])", "reverse_number = lambda n: int(str(abs(n))[::-1]) * (1-2*(n<0))", "def reverse_number(n):\n    r=str(n).replace('-','')[::-1]\n    return int(r)if n>0 else -int(r)", "# Takes any input and reverses the digits. Preserves sign.\n\ndef reverse_number(number):\n    if number >= 0:\n        return int(str(number)[::-1])\n    else:\n        return -int(str(number)[:0:-1])\n", "def reverse_number(n):\n    \n    result = 0\n    is_neg = False\n    \n    if n < 0:\n        n = -n\n        is_neg = True\n    \n    while n != 0:\n        result *= 10\n        result += n % 10\n        n = int(n / 10)\n    \n    if is_neg:\n        return -result\n    else:\n        return result\n", "def reverse_number(n):\n    n_rev = int(\"\".join(reversed([c for c in str(n) if c.isdigit()])))\n    return n_rev if n >= 0 else -n_rev", "def reverse_number(n):\n    spacer = n < 0\n    return int(['','-'][spacer] + str(n)[spacer:][::-1])", "def reverse_number(n):\n\n    return int(str(n)[::-1]) if n > 0 else int(str(abs(n))[::-1]) * -1", "def reverse_number(n):\n    if n < 0:\n        return int(n.__str__()[1:][::-1]) * -1\n    else:\n        return int(n.__str__()[::-1])", "def reverse_number(n):\n    return int(str(n)[::-1]) if n > 0 else -int(str(abs(n))[::-1])", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) * (-1 if n < 0 else 1)\n", "def reverse_number(n):\n    return -int((str(n)[1::][::-1])) if n < 0 else int((str(n)[::-1]))", "def reverse_number(n):\n    return int('-' * (n < 0) + ''.join(reversed(str(abs(n)))))", "def reverse_number(n):\n    n = str(n)\n    n = list(n)\n    n.reverse()\n    if n.count(\"-\") > 0:\n        n.pop()\n        n.insert(0, \"-\") \n        \n    a = str()\n    for i in n:\n        a += str(i)\n\n    return int(a)", "def reverse_number(n):\n    n=str(n)\n    l=len(n)\n    if n[0]=='-':\n        n=int(n[:l*-1:-1])*-1\n    else: n=n[::-1]\n    return int(n)", "def reverse_number(n):\n    si =len(str(n))\n    i = si \n    s = ''\n    if n >= 0:\n         while i > 0:\n             s += str(n %10)\n             n = n //10\n             i -= 1\n         return int(s)\n    else:\n        n = -1 * n\n        while i > 1:\n            s += str(n % 10)\n            n = n // 10\n            i -=1\n        return -1 * int(s)\n", "from numpy import sign\n\ndef reverse_number(n):\n    return sign(n) * int(str(abs(n))[::-1])", "reverse_number=lambda n: (-1 if n<0 else 1)*int(str(abs(n))[::-1])", "def reverse_number(n):\n    if n >0: \n        f = int(str(abs(n))[::-1])\n    else:\n        f = - int(str(abs(n))[::-1])\n    return f", "def reverse_number(n):\n    return -1*int(str(n*-1)[::-1]) if n<1 else int(str(n)[::-1])", "def reverse_number(n):\n    return n//abs(n) * int(str(abs(n))[::-1]) if n != 0 else 0", "def reverse_number(n):\n    if n < 0:\n        s = str(n)[1:]\n        return int(s[::-1]) * -1\n    return int(str(n)[::-1])", "def reverse_number(n):\n    sN = str(n)\n    x = sN[::-1]\n    new = ''\n    for i in x:\n        if i =='-':\n            continue\n        else:\n            new+=i\n    if n < 0:\n        return -int(new)\n    else:\n        return int(new)", "def reverse_number(n):\n    str_num = str(abs(n))[::-1]\n    return -1 * int(str_num) if n < 0 else int(str_num)", "def reverse_number(n):\n    return int(str(n).replace('-','')[::-1]) * (-1 if n < 0 else 1)", "def reverse_number(n):\n    l_1 = str(n)\n    if l_1[0] == '-':\n        return int(l_1[0]+l_1[:0:-1])\n    else:\n        return int(l_1[::-1])", "def reverse_number(n):\n    ans = 0\n    if n>=0:\n        while n>0:\n            ans*=10\n            ans+=n%10\n            n=n//10\n        print(ans)\n        return(ans)\n    elif n<0:\n        n=n*(-1)\n        while n>0:\n            ans*=10\n            ans+=n%10\n            n=n//10\n        print(ans)\n        return(ans*(-1))", "def reverse_number(n):\n    return int(str(n)[::-1]) if n>=0 else int('-'+str(-n)[::-1])", "def reverse_number(n):\n    return int(str(n)[::-1] if n >=0 else \"-\"+str(n)[::-1][0:-1])", "def reverse_number(n):\n    aux = n\n    reverso = 0\n    while abs(n)>0:\n        ultimoDigito = abs(n)%10\n        n=abs(n)//10\n        reverso = reverso*10+ultimoDigito\n    if aux>0:\n        return reverso\n    else:\n        return reverso*(-1)", "def reverse_number(n):\n    if n > 0: return int(str(n)[::-1])\n    else: return -1 * int(str(n*-1)[::-1])", "def reverse_number(n):\n    if n>=0:\n        return int(str(n)[::-1])\n    return int(str(n*-1)[::-1])*-1", "def reverse_number(n):\n    number = str(n)\n    list = []\n    index = 0\n    if n < 0:\n        for i in number:\n            if i.isdigit() == True:\n                list.insert(0,i)\n\n            new_num = \"\".join(list)\n        return(0-int(new_num))\n    else:\n        for i in number:\n            if i.isdigit() == True:\n                list.insert(0,i)\n        for i in list:\n            while i == 0:\n                index +=1\n            else:\n                break\n        new_num = \"\".join(list[index::])\n        return (int(new_num))", "def reverse_number(n):\n    if n>=0:\n        return int(str(n)[::-1])\n    return int(  \"-\" + (str(n)[1:] )[::-1]  )  ", "def reverse_number(n):\n    if n < 0:\n        return 0 - int(str(n)[::-1][:-1])\n    return int(str(n)[::-1])", "def reverse_number(n):\n    return int(str(n)[::-1] if \"-\" not in str(n) else \"-\"+(str(n).replace(\"-\",\"\"))[::-1])", "def reverse_number(n):\n    if n < 0:\n        return -1 * int(str(n)[::-1][:-1])\n    else:\n        return int(str(n)[::-1])", "def reverse_number(n):\n    \n    if n>=0:\n\n        d = [int(i) for i in str(n)]\n    \n        r = d[::-1]\n    \n        w = int(''.join(map(str,r)))\n        \n        return w\n        \n    if n<0:\n        \n        m = abs(n)\n        \n        d = [int(j) for j in str(m)]\n    \n        r = d[::-1]\n    \n        w = int(''.join(map(str,r)))\n    \n        return w*-1\n \n", "def reverse_number(n):\n    x = int(str(abs(n))[::-1])\n    return x if n>0 else -x", "def reverse_number(n):\n    if n==0:\n        return 0\n    s=int(str(abs(n))[::-1])\n    return n/abs(n)*s", "def reverse_number(n):\n    a = str(n)[::-1]\n    b = ''\n    if '-' in a:\n        b = '-' + a[:-1]\n        return int(b)\n    else:\n        return int(a) ", "def reverse_number(n):\n    if str(n)[0] == \"-\":\n        return int(\"-{}\".format(str(n)[1:][::-1]))\n    elif n == 0:\n        return 0\n    else:\n        return int(str(n)[::-1].lstrip(\"0\"))", "def reverse_number(n):\n    \n    x = \"\"\n    \n    if n < 0:\n        x += \"-\"\n        \n    n = abs(n)\n    n = str(n)\n    n = n[::-1]\n    x += n\n    \n    x = int(x)\n    return x", "def reverse_number(number):\n    splitted = [x for x in str(number)]\n    if '-' in splitted:\n        splitted.remove('-')\n        splitted.reverse()\n        splitted.insert(0, '-')\n        return int(''.join(splitted))\n\n    else:\n        splitted.reverse()\n        return int(''.join(splitted))", "def reverse_number(n):\n    if n < 0: return int(''.join([x for x in str(n)[1:][::-1]])) * -1\n    else: return int(''.join([x for x in str(n)[::-1]]))", "def reverse_number(n):\n    num = abs(n)\n    if n < 0:\n        return int(str(num)[::-1]) * -1\n    else:\n        return int(str(num)[::-1])", "def reverse_number(n):\n    if abs(n)!=n:\n        num = str(n)[::-1]\n        return int('-'+num[:-1])\n    return int(str(n)[::-1])", "def reverse_number(n):\n    sign = -1 if n < 0 else 1\n    return sign * int(str(n).replace('-','')[::-1])", "def reverse_number(n):\n    s = str(abs(n))\n    result = int(s[::-1])\n    return result if n >=0 else -1*result\n", "def reverse_number(n):\n    number=str(n)\n    if n>=0:\n        number=number[::-1]\n        return int(number)\n    number=number[-1:0:-1]\n    return int(number)*-1", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) * (n < 0 and -1 or 1)", "def reverse_number(n):\n    return int((n < 0 and '-' or '') + str(abs(n))[::-1])\n\n", "def reverse_number(n):\n    if n<0:\n        n=str(n)\n        n=n[::-1]\n        return -1*int(n.replace('-',''))\n    else:\n        n=str(n)\n        n=n[::-1]\n        return int(n)\n", "def reverse_number(n):\n    if n < 0:\n        return - int(str(n)[1:][::-1])\n    try:\n        return int(str(n).rstrip(\"0\")[::-1])\n    except:\n        return 0", "def reverse_number(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        ok = True\n        n = -n\n    else:\n        ok = False\n        \n    while n % 10 == 0:\n        n = n / 10\n    \n    aux = str(int(n))[::-1]\n    \n    if ok:\n        return -int(aux)\n    return int(aux)\n", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) *n//max(abs(n),1)", "def reverse_number(n):\n    if n < 0:\n        n = str(n)\n        s = n[1:len(n)]\n        new_n = n[0] + s[::-1]\n        return int(new_n) \n    else:\n        n = str(n)\n        n = n[::-1]\n        return int(n)", "def reverse_number(n):\n    res = []\n    s = str(n)\n    if s[0] == '-':\n        res = \"-\" + s[:0:-1]\n    else:\n        res = s[::-1]\n    return int(res)\n", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) * (1 if n >= 0 else -1)", "def reverse_number(n):\n    x = str(n)\n    if '-' in x:\n        y = list(x)\n        y.reverse()\n        y.remove('-')\n        return int(''.join(y)) * -1\n    else:\n        y = list(x)\n        y.reverse()\n        return int(''.join(y))", "    #[f(x) if condition else g(x) for x in sequence]\n    #[f(x) for x in sequence if condition]\ndef reverse_number(n):\n    if str(n)[0]==\"-\":\n        new = int(\"-\"+''.join([str(n)[1:][-1-i] for i in range(len(str(n))-1) ]))\n    else:\n        new = int(''.join([str(n)[-1-i] for i in range(len(str(n))) ]))\n\n    if new ==0:\n        return new\n    else:\n        return int(str(new).lstrip(\"0\"))\n", "def reverse_number(n):\n    n = str(n)\n    if \"-\" == n[0]:\n        n = n[1:]\n        n = n[::-1]\n        n = \"-\" + n\n    else:\n        return int(n[::-1])\n    return int(n)", "def reverse_number(n):\n    neg = 0\n    if abs(n) != n:\n        n = -n\n        neg = 1\n    n = int(str(n)[::-1])\n    return -n if neg == 1 else n", "def reverse_number(n):\n    try : return int(str(n)[::-1])\n    except : return -int(str(n)[::-1][:-1])", "def reverse_number(n):\n    return int(str(abs(n))[::-1]) if n>-1 else -int(str(abs(n))[::-1])", "def reverse_number(n):\n    if n < 0:\n        return int('-' + str(abs(n))[::-1])\n    return int(str(n)[::-1])", "def reverse_number(n):\n    return int(str(n)[::-1].replace(\"-\", \"\")) * n / abs(n) if n != 0 else 0", "def reverse_number(n):\n    \n    digits = 0\n    num = 0\n    if(n >= 0):\n      num = n\n      sign_n = 1\n    else:\n      num = -n\n      sign_n = -1\n    \n    # while loop to count the number of digits, stored in digits\n    while(num >= 1):\n        num /= 10\n        digits += 1\n    \n    # Debugging print statement\n    # print(\"digits = \" , digits)\n    \n    # Make n a positive number\n    n = n * sign_n\n\n    # for loop to store the digits of the positive part of n, strored as strings\n    l_direct = list()\n    for i in range(0,digits):\n        l_direct.append(str(n % 10))\n        n = int(n/10)\n        #print(n)\n        i += 1\n        \n    # Concatenate the elements of the list into a string\n    s = \"\"\n    for j in range(0, digits):\n      s = s + l_direct[j]  \n    \n    # We need to account for the case of an empty string, otherwise python will complain if we try \n    # to convert an empty string to an integer\n    if(s == ''):\n        result = 0\n    else:\n        # restore the original sign of n\n        result = int(s) * sign_n\n        \n    return result", "def reverse_number(num):\n    ans = int(str(num)[::-1]) if num >= 0 else -int(str(-num)[::-1])\n    return ans", "def reverse_number(n):\n    return -int(str(n)[1:][::-1]) if n < 0 else int(str(n)[::-1])", "def reverse_number(n):\n\n    number = n\n    is_negative = False\n    if n < 0:\n        is_negative = True\n    \n    number = str(number)\n    number = number.strip(\"-\")\n    \n    number = number[::-1]\n    number = number.strip(\"0\")\n    \n    if number == \"\":\n        number = \"0\"\n        \n    if is_negative:\n        number = \"-\" + number\n    \n    return int(number)", "import unittest\n\n\ndef reverse_number(n):\n    revered_num = int(str(abs(n))[::-1])\n\n    if n < 0:\n        return int('-{}'.format(revered_num))\n\n    return revered_num\n\n    \nclass TestReverseNumber(unittest.TestCase):\n    def test_reverse_number_with_n_is_one_digit(self):\n        n = 5\n        actual = reverse_number(n)\n        self.assertEqual(actual, 5)\n\n    def test_reverse_number_with_negative_sign(self):\n        n = -123\n        actual = reverse_number(n)\n        self.assertEqual(actual, -321)\n\n    def test_reverse_number_without_any_sign(self):\n        n = 123\n        actual = reverse_number(n)\n        self.assertEqual(actual, 321)\n\n    def test_reverse_number_should_return_1_when_given_n_is_1000(self):\n        n = 1000\n        actual = reverse_number(n)\n        self.assertEqual(actual, 1)\n", "def split(word): \n    return [char for char in word]        \n\ndef reverse_number(n):\n    isNegative = False\n    if n < 0:\n        isNegative = True\n    output = \"\"\n    stringLst = split(str(n))\n    stringLst.reverse()    \n    \n    for i in stringLst:\n            output += i\n        \n    if (isNegative):\n        output = output.replace('-', '')\n        result = int(output)\n        return result*-1\n        \n    else:\n        return int(output)", "def reverse_number(n):\n    if n>0: return int(str(abs(n))[::-1])\n    else: return int(str(abs(n))[::-1])*-1\n", "def reverse_number(n):\n    res = int(str(abs(n))[:: -1])\n    return res if n >= 0 else -res", "def reverse_number(n):\n    return ((n>0)-(n<0)) * int(str(abs(n))[::-1])\n", "def reverse_number(n):\n    try:\n        return int(str(abs(n))[::-1]) * (n//abs(n))\n    except ZeroDivisionError:\n        return 0", "def reverse_number(n):\n    \n    result = \"\"\n    \n    if n == 0:\n        \n        return 0\n    \n    elif n > 0: # positive number case\n        result = str(n)[::-1]\n        \n        return(int(result))\n    \n    else:\n        result = (str(n)[1::])[::-1] # negative number case\n\n        return(int(result)*-1)     ", "def reverse_number(n):\n    if str(n)[0] == '-':\n        return -1 * int(str(n).split(\"-\")[1][::-1]) \n    return int(str(n)[::-1])    ", "def reverse_number(n):\n    try:\n        return int(str(n)[::-1])\n    except:\n        return int(str(n)[:0:-1]) * -1", "def reverse_number(n):\n    return int(''.join(reversed(str(abs(n))))) * (-1 if n < 0 else 1)", "def reverse_number(n):\n  \n  if n < 0 :\n     a = str(n)[1:]\n     return int(\"{}{}\".format(str(n)[0] , a[::-1]))\n  else:\n     return int(str(n)[::-1])", "def reverse_number(n):\n    n = str(n)\n    if int(n) < 0:\n        return int(n[0] + n[:0:-1])\n    else:\n        return int(n[::-1])", "def reverse_number(n):\n    s = ''\n    if n<0 : s = '-'\n    return int(s+''.join(i for i in reversed(str(abs(n)))))", "def reverse_number(n):\n    print(n)\n    if n >= 0:\n        return int(str(n)[::-1])#\n        #print(int(str(n)[::-1]))\n    else:\n        return -int(str(n)[:0:-1])\n        #print(-int(str(n)[:0:-1]))\n", "def reverse_number(n):\n    lst = [x for x in list(str(n))]\n    lst.reverse()\n        \n    if n > -1:\n        result = int(\"\".join(lst))\n\n    else:\n        result = int(\"\".join(lst[:-1])) * -1\n\n    return result", "def reverse_number(n):\n    return (1 - 2 * (n < 0)) * int(str(abs(n))[::-1])", "def reverse_number(n):\n    n = str(n)\n    if n[0] == '-':\n        new_str = n[1:]\n        new_str = new_str[::-1]\n        new_str = '-' + new_str\n        return int(new_str)\n    else:\n        new_str = n[::-1]\n        return int(new_str)\n", "def reverse_number(n):\n    n = int(str(abs(n))[::-1]) * (-1 if n < 0 else 1) \n    return n", "def reverse_number(n):\n    result=int(\"\".join(reversed(list(str(abs(n))))))\n    if n>0:\n        return result\n    else:\n        return -result"]