["def interpreter(tape):\n    memory, ptr, output = {0: 0}, 0, \"\"\n    \n    for command in tape:\n        if   command == \">\":  ptr += 1\n        elif command == \"<\":  ptr -= 1\n        elif command == \"!\":  memory[len(memory)] = 0\n        elif command == \"*\":  output += chr(memory.get(ptr, 0) % 256)    \n        elif ptr in memory:\n            if   command == \"+\":  memory[ptr] += 1\n            elif command == \"-\":  memory[ptr] -= 1\n            elif command == \"/\":  memory[ptr] = 0\n    \n    return output", "def interpreter(tape):\n    data, pointer, output = [0], 0, \"\",\n    for command in tape:\n        if   command == \">\":\n            pointer += 1\n        elif command == \"<\":\n            pointer -= 1\n        elif command == \"+\" and is_valid(pointer, data):\n            data[pointer] = (data[pointer] + 1) % 256\n        elif command == \"-\" and is_valid(pointer, data):\n            data[pointer] = (data[pointer] - 1) % 256\n        elif command == \"/\" and is_valid(pointer, data):\n            data[pointer] = 0\n        elif command == \"!\":\n            data.append(0)\n        elif command == \"*\" and is_valid(pointer, data):\n            output += chr(data[pointer])\n        elif command == \"*\":\n            output += chr(0)\n    return output\n\ndef is_valid(pointer, data):\n    return pointer >= 0 and pointer < len(data)", "def interpreter(tape):\n    dct, selector, out = {0:0}, 0, ''\n    for l in tape:\n        if l == '>': selector += 1\n        if l == '<': selector -= 1\n        if l == '*': out += chr(dct.get(selector,0))\n        if selector in dct:\n            if l == '+': dct[selector] = (dct[selector] + 1) % 256\n            if l == '-': dct[selector] = (dct[selector] - 1) % 256\n            if l == '/': dct[selector] = 0\n        if l == '!': dct[ max(dct)+1 ] = 0\n    return out", "def interpreter(tape):\n    test = Ticker(tape)\n    return test.out\n    \nclass Ticker():\n    error = lambda x:None\n    doc   = {'>':'_incr', '<':'_decr', '*':'_addA', \n             '+':'_icrC', '-':'_dcrC', '/':'_set', '!':'_addN'}\n    \n    def __init__(self, tape):\n        self.dat = [0] * 256\n        self.ind =  0\n        self.out = ''\n        self.run = [getattr(self, self.doc.get(k, 'error'))() for k in tape]\n        \n    def _set(self, dflt=0):#/\n        self.dat[self.ind] = 0\n        \n    def _addN(self):#!\n        self.dat[self.ind] = ord(self.out[-1])\n\n    def _dcrC(self):#-\n        self.dat[self.ind] -= 1\n    \n    def _icrC(self):#+\n        self.dat[self.ind] += 1\n        \n    def _addA(self):#*\n        self.out += chr(self.dat[self.ind]%256)\n        \n    def _incr(self):#>\n        self.ind += 1   \n        \n    def _decr(self):#<\n        self.ind -= 1\n", "def interpreter(s):\n    memory,pointer,output = [0],0,[]\n    for i in s:\n        if 0<=pointer<len(memory):\n            if i == \"+\" : memory[pointer] += 1    \n            if i == \"-\" : memory[pointer] += -1   \n            if i == '*' : output.append(chr(memory[pointer]%256))\n            if i == \"!\" : memory.append(0)\n            if i == '/' : memory[pointer] = 0\n            if i == '>' : pointer += 1\n            if i == \"<\" : pointer -= 1\n    return \"\".join(output) or '\\x00'", "def interpreter(tape):\n    selector = 0\n    cells = dict()\n    output = ''\n    for c in tape:\n        if c == '>':\n            selector += 1\n        elif c == '<':\n            selector -= 1\n        elif c == '*':\n            output += chr(cells.get(selector, 0))\n        elif c == '+':\n            cells[selector] = (cells.get(selector, 0) + 1) % 256\n        elif c == '-':\n            cells[selector] = (cells.get(selector, 0) - 1) % 256\n        elif c == '/':\n            cells[selector] = 0\n        elif c == '!':\n            cells[len(cells)] = 0\n    return output", "def interpreter(tape):\n    memory, ptr, output = {0: 0}, 0, \"\"\n    \n    for command in tape:\n        if   command == \">\":  ptr += 1\n        elif command == \"<\":  ptr -= 1\n        elif command == \"+\":\n            if memory.get(ptr) != None:\n                memory[ptr] = (memory[ptr] + 1) % 256\n        elif command == \"-\":\n            if memory.get(ptr) != None:\n                memory[ptr] = (memory[ptr] - 1) % 256\n        elif command == \"/\":\n            if memory.get(ptr) != None:\n                memory[ptr] = 0\n        elif command == \"!\":  memory[len(memory)] = 0\n        elif command == \"*\":  output += chr(memory.get(ptr, 0))\n    \n    return output", "def interpreter(tape):\n    cell, cells, out = 0, [0], ''\n    for c in [k for k in tape if k in '<>!*+-/']:\n        if c == '>': cell += 1\n        if c == '<': cell -= 1\n        if c == '!': cells += [0]\n        if c == '*': out += chr(cells[cell] if cell >= 0 and cell < len(cells) else 0) \n        if cell >= 0 and cell < len(cells):\n            if c == '+': cells[cell] += 1\n            if c == '-': cells[cell] -= 1\n            if c == '/': cells[cell] = 0\n            cells[cell] = {256:0, -1:255}.get(cells[cell], cells[cell])\n    return out", "interpreter = lambda tape: (lambda l: ([([0 for l['mem'][l['p']] in [(l['mem'][l['p']]+1)%256]] if i == '+' and l['p'] in l['mem'].keys()else ([0 for l['p'] in [l['p']-1]] if i == '<' else ([0 for l['p'] in [l['p']+1]] if i == '>' else ([0 for l['mem'][l['p']] in [(255+l['mem'][l['p']])%256]] if i == '-' and l['p'] in l['mem'].keys() else ([0 for l['mem'][l['p']] in [0]] if i == '/' else ([0 for l['out'] in [l['out']+chr(l['mem'].get(l['p'],0))]] if i == '*' else ([0 for l['mem'][max(l['mem'].keys())+1] in [0]] if i == '!' else None))))))) for i in tape],l['out'])[1])({'mem':{0:0},'p':0,'out':''})", "from collections import defaultdict\n\ndef interpreter(tape):\n    mem, out = defaultdict(int), []\n\n    n = len(tape)\n    idx = ptr = 0\n    while idx < n:\n        cmd = tape[idx]\n\n        if   cmd == '>': ptr += 1\n        elif cmd == '<': ptr -= 1\n        elif cmd == '+': mem[ptr] = (mem[ptr] + 1) % 256\n        elif cmd == '-': mem[ptr] = (mem[ptr] - 1) % 256\n        elif cmd == '/': mem[ptr] = 0\n        elif cmd == '*': out.append(chr(mem[ptr]))\n\n        idx += 1\n    return ''.join(out)"]