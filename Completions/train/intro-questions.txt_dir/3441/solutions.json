["def get_average(marks):\n    return sum(marks) // len(marks)\n", "def get_average(marks):\n    average = sum(marks) / len(marks)    \n    return int(average)\n", "import numpy\n\ndef get_average(marks):\n    return int(numpy.mean(marks))", "get_average = lambda marks: sum(marks)//len(marks)\n    \n", "def get_average(marks):\n    return int(sum(marks)/len(marks))\n    \n", "get_average = lambda m: int(__import__(\"numpy\").mean(m))", "import math\nimport numpy\ndef get_average(marks):\n    number =  numpy.average(marks)\n    return math.floor(number)", "import math\n\n\ndef get_average(marks):\n    sum = 0\n    for num in marks:\n        sum += num\n    total = sum / len(marks)\n    return math.floor(total)", "import math\n\ndef get_average(marks):\n    \n    x = (len(marks))\n    y = (sum(marks))\n    \n    i = y/x \n    \n    return math.floor(i)\n", "def get_average(marks):\n    suma=0\n    for x in marks:\n        suma=suma+x\n    return (suma//len(marks))\n", "get_average =lambda x: sum(x)//len(x)", "def get_average(marks):\n    mean = sum(marks)/len(marks)\n    return int(mean)\n", "def get_average(marks):\n    return sum(n for n in marks) // len(marks)", "import math\n\n\ndef get_average(marks):\n    return math.floor(sum(marks)/len(marks))\n", "from math import trunc\ndef get_average(marks):\n    return trunc(sum(marks)/len(marks))\n", "def get_average(marks):\n    sum = 0\n    for x in marks:\n        sum = sum + x\n    num = len(marks)\n    ans = sum/num\n    return int(ans)", "import pandas as pd\n\ndef get_average(marks):\n    s = pd.Series(marks)\n    return int(s.mean())", "def get_average(marks):\n    return int(__import__(\"statistics\").mean(marks))\n", "import numpy, math\ndef get_average(marks):\n    return math.floor(numpy.mean(marks))\n", "def get_average(marks):\n    res =  int(sum(marks)/len(marks))\n    return res\n    raise NotImplementedError(\"TODO: get_average\")\n", "import math\n\ndef get_average(marks):\n    number = len(marks)\n    total = 0\n    \n    \n    for student in marks:\n        total = total + student\n        \n    return math.floor(total/number)\n        \n", "def get_average(marks):\n    num = 0\n    for i in marks:\n        num += i \n    return (int) (num/(len(marks)))", "def get_average(marks):\n    sum = 0\n    for i in range(len(marks)):\n        sum += marks[i]\n        i += 1\n    return int(sum/len(marks))\n", "import math\ndef get_average(marks):\n    t = sum(marks) / len(marks)\n    return math.floor(t)\n", "def get_average(marks):\n    count=0\n    for i in range(len(marks)):\n        count+=marks[i]\n    return round(count//len(marks))", "def get_average(marks):\n    total = 0\n    for k in range(len(marks)):\n        total += marks[k]\n    return total // len(marks)\n", "def get_average(marks):\n    sum=0\n    for n in marks:\n        sum=sum+n\n    avg=sum//len(marks)\n    return avg", "def get_average(marks):\n    # assumption array is never empty\n    # get average of an array and return\n    \n    # will use sum and len of array to get average\n    # rounded down to nearest integer\n    avg = sum(marks) // len(marks)\n    return avg\n    \n    \n    \n    # raise NotImplementedError(\"TODO: get_average\")\n", "def get_average(marks):\n    mean = 0.0\n    sum = 0\n    for i in marks:\n        sum += i\n    mean = sum/len(marks)\n    return int(mean)\n    \n", "def get_average(marks):\n    sum = 0\n    for i in marks:\n        sum = sum + i\n    \n    average = sum / len(marks)\n    return int(average)\n    \n    \n    raise NotImplementedError(\"didn't work for\" + marks)\n\nprint(( get_average([2, 2, 2, 2])))\nprint(( get_average([1, 5, 87, 45, 8, 8])))\n    \n    \n", "import math\n\n\ndef get_average(marks):\n    marks_sum = 0\n    for mark in marks:\n        marks_sum += mark\n    average_mark = marks_sum / len(marks)\n\n    return math.floor(average_mark)\n\n\nprint((get_average([2,5,13,20,16,16,10])))\n", "def get_average(marks):\n    get_average= int(sum(marks)/len(marks))\n    return round(get_average)\n    raise NotImplementedError(\"TODO: get_average\")\n    \n", "def get_average(marks):\n    for i in marks:\n        return int(round(sum(marks)/len(marks), 1))\n", "import math as math\n\ndef get_average(marks):\n    average = math.floor(sum(marks) / len(marks))\n    return average\n", "def get_average(marks):\n    sum=0\n    for v in marks:\n        sum+=v\n    average=int(sum/len(marks))\n    return average", "def get_average(marks):\n    import math\n    n = 0\n    for i in marks:\n        n += i\n    result = n/len(marks)\n    result = math.floor(result)\n    return result    \n", "def get_average(marks):\n    \n    avg = 0\n    \n    for mark in marks:\n        avg += mark\n        \n    avg /= len(marks)\n    \n    return int(avg)\n", "def get_average(marks):\n   \n    \n    sum_marks = sum(marks)\n    len_marks = len(marks)\n    avg_marks = sum_marks // len_marks\n    return avg_marks\n", "def get_average(marks):\n#     raise NotImplementedError(\"get_average\")\n    return sum(marks)// len(marks)\n", "from math import *\n\ndef get_average(marks):\n    result = 0 \n    for index in marks:\n        result = result + index\n    result = (result / len(marks))\n    return floor(result)\n", "def get_average(marks: list) -> int:\n    \"\"\" This function returns the average of the given array. \"\"\"\n    return (sum(marks)//len(marks))\n", "import math\ndef get_average(marks):\n    count=0\n    sum=0\n    for x in marks:\n        sum+=x\n        count+=1\n    return math.floor(sum/count)\n", "def get_average(marks):\n    y = 0\n    for n in range(len(marks)):\n        y = y + marks[n-1]\n    return int(y / len(marks))", "def get_average(marks):\n    result = 0\n    counter = 0\n    \n    for item in marks:\n        result += item\n        counter += 1\n    \n    return int(result / counter)\n", "def get_average(marks):\n    x=len(marks)\n    \n    somma=sum(marks)\n    media=somma/x\n    \n    return int(media)\n", "def get_average(marks):\n    total = 0 \n    for x in marks:\n        total += x \n    return round(int(total / len(marks)))", "def get_average(marks):\n    total = 0\n    for m in marks:\n        total += m\n    return total // len(marks)\n        \n", "\ndef get_average(marks):\n    avg = 0\n    for elem in marks:\n        avg += elem\n    avg = avg / len(marks)\n    \n    return int(avg)\n", "import math\ndef get_average(marks):\n    res=sum(marks)/len(marks)\n    return math.ceil(res) if math.ceil(res)<math.floor(res) else math.floor(res)\n", "def get_average(marks):\n    #raise NotImplementedError(\"TODO: get_average\")\n    average = 0\n    for a in marks:\n        average += a\n    return int(average/len(marks))", "marks = [2,5,13,20,16,16,10]\ndef get_average(marks):\n    sum = 0\n    for mark in marks:\n        sum = sum+mark\n    return int(sum / len(marks))", "def get_average(marks):\n    total_marks = 0\n    for i in marks:\n        total_marks += i\n    average = total_marks / len(marks)\n    return int(average)\n", "def get_average(marks):\n    sum = 0\n    for score in marks:\n        sum += score\n    return int(sum / len(marks))\n", "def get_average(marks):\n    average = sum(marks) // len(marks) # Floor division to automatically round down.\n    return average\n", "import math\ndef get_average(marks):\n    s=0\n    avg=0\n    for i in marks:\n        s+=i\n        avg=s/len(marks)\n    return math.floor(avg)\n        \n                           \n", "import math\ndef get_average(marks):\n    count = 0\n    average = 0\n    for num in marks:\n        count += num\n    average = count / len(marks)\n    return math.floor(average)", "def get_average(marks):\n    x = 0\n    for i in marks:\n        x += i \n    x = x / len(marks)\n    return int(x)\n", "import math \n\ndef get_average(marks):\n    average = sum(marks) // len(marks)\n    return math.floor(average)\n   \n\n", "import math\ndef get_average(marks):\n    s=0\n    for k in marks:\n        s+=k\n    return math.floor(s/len(marks))\n\n\n    \n    raise NotImplementedError(\"TODO: get_average\")\n", "import math\n\ndef get_average(marks):\n    sum = 0\n    for i in marks:\n        sum += i\n    average = math.floor(sum/len(marks))\n    return average", "def get_average(marks):\n    media=0\n    i=0\n    for element in marks:\n        i=i+1\n        media=media+element\n    media=media//i\n    return media\n", "def get_average(marks):\n    total=sum(e for e in marks)\n    return int(total/len(marks))", "import math\ndef get_average(marks):\n   # raise NotImplementedError(\"TODO: get_average\")\n    marks_sum=0\n    for i in marks:\n        marks_sum+=i\n    return  int(marks_sum/len(marks))\n", "def get_average(marks):\n    a = len(marks)\n    b = 0\n    for i in range(0,len(marks)):\n        b = b + marks[i]\n    average = int(b/a)\n    return average\n#    raise NotImplementedError(\"TODO: get_average\")\n", "def get_average(marks):\n    total = 0\n    for i in marks:\n        total = total + i\n    avg = total // len(marks)\n    return avg\n\n# alternatively\n# from statistics import mean as m\n# from math import floor as f\n\n# def get_average(marks):\n#     avg = m(marks)\n#     return f(avg)\n", "def get_average(marks):\n    \n    sum = 0\n    mylen = len(marks)\n    for x in marks:\n        sum = sum + x\n    \n    avg = sum / mylen\n    return int(avg)\n", "from math import floor\n\ndef get_average(marks):\n    media = sum(marks)/len(marks)\n    return floor(media)", "def get_average(marks):\n    import math as ma\n    return ma.floor(sum(marks)/len(marks))\n", "from math import floor\ndef get_average(marks):\n    sum = 0\n    for mark in marks:\n        sum += mark\n    return floor(sum / len(marks))\n        \n", "import math\n\ndef get_average(marks):\n    sum = 0\n    for mark in marks:\n        sum = sum + mark\n    return math.floor(sum/len(marks))\n", "def get_average(marks):\n    tot = 0\n    for i in marks:\n        tot = tot + i\n        \n    avg = int(tot/len(marks))\n    \n    return avg\n", "import math\ndef get_average(marks):\n    soma = 0\n    \n    if (len(marks)>0):\n        for i in marks:\n            soma += i\n        \n        media = soma/len(marks)\n        return math.floor(media)\n    \n\nprint (get_average([1,2]))", "import numpy as np\nimport math\ndef get_average(marks):\n    return math.floor(np.average(marks))", "def get_average(marks):\n    suma = sum(marks)\n    return suma//len(marks)\n    raise NotImplementedError(\"TODO: get_average\")\n", "import statistics\nimport math\n\n\ndef get_average(marks):\n    get_mean = statistics.mean(marks)\n    rounded = math.floor(get_mean)\n    return rounded\n", "def get_average(marks):\n    total=0\n    x=0\n    for  n in marks :\n        total+= marks[x]\n        x+= 1\n    \n    return total//len(marks)\n", "def get_average(marks):\n    a = sum(marks)\n    l = len(marks)\n    average = a//l\n    return average\n", "def get_average(marks):\n    sum = 0\n    for n in marks:\n        sum = sum + n\n    sum\n    return int(sum/len(marks))\n", "def get_average(marks):\n    a = sum(marks)/ len(marks)\n#     result = round(int(a), 0)\n    return int (a)", "def get_average(marks):\n    \n    sum_init = 0 \n    for i in range(0,len(marks)) :\n        sum_init = sum_init + marks[i] \n    \n    return sum_init//len(marks)\n", "import math\ndef get_average(marks):\n    soma = 0\n    \n    if (len(marks)>0):\n        for i in marks:\n            soma += i\n    \n        media = soma/len(marks)\n        return math.floor(media)\n\nprint (get_average([1,2,15,15,17,11,12,17,17,14,13,15,6,11,8,7]))", "def get_average(marks):\n    print((sum(marks)/len(marks)))\n    return int((sum(marks)) / len(marks))\n", "import numpy\nimport math\n\ndef get_average(marks):\n    \n    # raise NotImplementedError(\"TODO: get_average\")\n    # Faz a m\u00e9dia do vetor \n    c = numpy.mean(marks)\n    \n    # Com a m\u00e9dia, devolve o inteiro mais pr\u00f3ximo arrendondado por decr\u00e9scimo\n    d = math.floor(c)\n    \n    return d", "import numpy\nimport math\n\ndef get_average(marks):\n    \n    # raise NotImplementedError(\"TODO: get_average\")\n    \n    c = numpy.mean(marks)\n    d = math.floor(c)\n    \n    return d", "import numpy as np\ndef get_average(marks):\n    return np.mean(marks) // 1\n", "from functools import *\n\ndef get_average(marks):\n    nth = len(marks)\n    aggregate = reduce(lambda x,y : x+y,marks)\n    return aggregate // nth\n", "import math\n\ndef get_average(marks):\n    sum = 0\n    for x in marks:\n        sum = sum + x\n    return math.floor(sum / len(marks))\n    \n", "def get_average(marks):\n    return int(sum(marks) / len(marks))\n    raise NotImplementedError(\"didn't work for\", get_average)", "from math import floor #import function to round down\nfrom statistics import mean #import function to calculate average\ndef get_average(marks):\n    return floor(mean(marks))\n", "import math\ndef get_average(marks):\n    res=0\n    for i in marks:\n        res= i + res\n    return math.floor(res/len(marks))\n    raise NotImplementedError(\"TODO: get_average\")\n", "def get_average(marks):\n    length=len(marks)\n    sum=0\n    for i in range(0,length):\n        sum= sum+marks[i]\n\n    return int(sum/length)\n", "import math\ndef get_average(marks):\n    x = 0\n    y = 0\n    for mark in marks:\n        x = x + 1\n        y = y + mark\n    return math.floor(y / x)", "# def get_average(marks):\n#     return sum(marks)\n\ndef get_average(marks):\n    suma=0\n    for x in marks:\n        suma=suma+x\n    return (suma//len(marks))", "import math\ndef get_average(marks):\n    sum = 0\n    for n in marks:\n        sum+=n\n    length = len(marks)\n    average = sum/length\n    return math.floor(average)\n", "def get_average(marks):\n    answer = 0\n    \n    for grades in marks:\n        answer += grades\n\n    return answer // (len(marks))\n", "import numpy as np\n\ndef get_average(marks):\n    return((np.mean(marks).astype(int)))\n", "def get_average(marks):\n    \n    \n    import math\n    x = (marks, math.floor(sum(marks)/len(marks)))\n    \n    return x[-1]"]