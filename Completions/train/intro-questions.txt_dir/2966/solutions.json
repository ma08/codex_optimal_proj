["def calculate(s):\n    x=[int(i) for i in s.split() if i.isdigit()]\n    return sum(x) if 'gains' in s.split() else x[0]-x[1]", "import re\ndef calculate(string):\n    x,y=re.findall('\\d+',string)\n    if re.search('loses', string): s= int(x)-int(y)\n    if re.search('gains', string): s= int(x)+int(y)\n    return s", "import re\n\ndef calculate(string):\n    a, b = map(int, re.findall(r'\\d+', string))\n    if 'lose' in string:\n        return a - b\n    else:\n        return a + b", "import re\nimport operator\n\n\ndef calculate(s):\n    match_res = re.match(r'.+\\s(\\d+)\\s.+\\s(loses|gains)\\s(\\d+)\\Z', s.strip())\n    try:\n        return {\n        'loses': operator.sub,\n        'gains': operator.add,\n        }[match_res.group(2)](int(match_res.group(1)), int(match_res.group(3)))\n    except AttributeError:\n        raise ValueError('string do not obey sepcific')", "import re\ndef calculate(string):\n    return eval(re.sub(\"[^\\d+-]\", \"\", string.replace(\"loses\", \"-\").replace(\"gains\", \"+\")) )", "from re import findall\n\ndef calculate(s):\n    op1, op2 = map(int, findall('(\\d+)', s))\n    return op1 + op2 if 'gains' in s else op1 - op2", "from operator import add, sub\n\n\ndef calculate(s):\n    nums = []\n    op = None\n    for word in s.split():\n        if word.isdigit():\n            nums.append(int(word))\n        elif word in ('gains', 'loses'):\n            op = add if word == 'gains' else sub\n    return op(*nums)\n", "calculate=lambda s: eval(\"\".join([a for a in s.replace(\"loses\",\"-\").replace(\"gains\",\"+\") if a in \"0123456789+-\"]))", "def calculate(string):\n    numbers = [int(x) for x in string.split() if x.isdigit()]\n    return numbers[0]+numbers[1] if 'gains' in string else numbers[0]-numbers[1]", "import re\n\ndef calculate(string):\n    x, y = [int(n) for n in re.findall(r'\\d+', string)]\n    return x - y + y * 2 * ('gains' in string)"]