["def get_section_id(scroll, sizes):\n    c = 0\n    for idx, s in enumerate(sizes):\n        c += s\n        if scroll < c: return idx\n    return -1", "from itertools import accumulate\n\n# Once again, thanks itertools\ndef get_section_id(scroll, sizes):\n    return next((i for i,x in enumerate(accumulate(sizes)) if x > scroll), -1)", "def get_section_id(scroll, sizes):\n    if scroll >= sum(sizes): return -1\n    return sum(scroll >= sum(sizes[:i+1]) for i in range(len(sizes)))", "from itertools import takewhile, accumulate\n\n\ndef get_section_id(scroll, sizes):\n    return -1 if sum(sizes) <= scroll else sum(1 for _ in takewhile(scroll.__ge__, accumulate(sizes)))", "def get_section_id(scroll, sizes):\n    where = 0\n    for i in range(len(sizes)):\n        where += sizes[i]\n        if where > scroll:\n            return i\n    return -1", "def get_section_id(scroll, sizes):\n    for i, _ in enumerate(sizes):\n        if scroll < sum(sizes[:i+1]):\n            return i\n    return -1", "from bisect import bisect\nfrom itertools import accumulate\n\ndef get_section_id(scroll, sizes):\n    return bisect(list(accumulate(sizes)), scroll) if scroll < sum(sizes) else -1", "def get_section_id(scroll, sizes):\n    \n    for i, s in enumerate(sizes):\n        scroll -= s\n        if scroll < 0:\n            return i\n    \n    return -1", "from itertools import accumulate\n\ndef get_section_id(scroll, sizes):\n    return next((i for i,s in enumerate(accumulate(sizes)) if s > scroll), -1)", "def get_section_id(scroll, sizes):\n    a = 0\n    for i in sizes:\n        scroll -= i\n        \n        if scroll < 0:\n            return a\n        a += 1\n    return -1"]