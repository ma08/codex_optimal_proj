["VALID = {'gravel', 'rock'}\n\n\ndef rake_garden(garden):\n    return ' '.join(a if a in VALID else 'gravel' for a in garden.split())\n", "def rake_garden(garden):\n    return \" \".join(w if w == \"rock\" else \"gravel\" for w in garden.split())\n", "import re\n\ndef rake_garden(garden):\n    return re.sub(r'(?<!\\S)(?!gravel|rock)\\S+', 'gravel', garden)", "def rake_garden(garden):\n    return \" \".join(i if i in \"gravelrock\" else \"gravel\" for i in garden.split())", "KEEP = [\"gravel\", \"rock\"]\nREPLACE_WITH = \"gravel\"\n\ndef rake_garden(garden):\n    return \" \".join([item if item in KEEP else REPLACE_WITH for item in garden.split()])\n", "rake_garden = lambda g: ' '.join('gravel' if e not in ['gravel','rock'] else e for e in g.split())", "import re\ndef rake_garden(g):\n  return re.sub(r'\\b(?!gravel|rock\\b)\\w+','gravel',g)", "def rake_garden(garden):\n    garden = garden.split(\" \")\n    for i in range(len(garden)):\n        if garden[i] != \"gravel\" and garden[i]!= \"rock\":\n            garden[i] = \"gravel\"\n    return \" \".join(garden)", "def rake_garden(garden):\n    return ' '.join(element  if element == 'gravel' or element == 'rock' else 'gravel' for element in garden.split())", "rake_garden = lambda g: \" \".join(['gravel', 'rock'][e == 'rock']for e in g.split())"]