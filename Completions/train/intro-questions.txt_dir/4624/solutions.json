["def gc_content(seq):\n    if not seq :\n        return 0.0\n    else:\n        res = seq.count(\"C\")+seq.count(\"G\")\n        return round(res*100/len(seq),2)\n", "def gc_content(seq):\n    if not seq:\n        return 0\n    gc_cnt = total_chars = 0\n    for a in seq:\n        if a in 'GC':\n            gc_cnt += 1\n        total_chars += 1\n    return round(100.0 * gc_cnt / total_chars, 2)", "def gc_content(seq):\n    return round(sum(c in 'GC' for c in seq) / len(seq) * 100, 2) if len(seq) else 0.0", "def gc_content(seq):\n    return 0.0 if not seq else round((seq.count('G') + seq.count('C'))/float(len(seq)) * 100, 2)", "def gc_content(seq):\n    return bool(seq) and round(100 * (seq.count('C') + seq.count('G')) / len(seq), 2)", "def gc_content(seq):\n    return round(100 * (seq.count(\"G\") + seq.count(\"C\")) / len(seq), 2) if seq else 0", "def gc_content(seq):\n    try:\n        result = ((seq.count(\"G\") + seq.count(\"C\")) / len(seq)) * 100\n        result = round(result, 2)\n        return result\n    except ZeroDivisionError:\n        return 0.0", "from collections import Counter\n\n\ndef gc_content(seq):\n    c = Counter(seq)\n    return round(((c['C'] + c['G']) / len(seq)) * 100, 2) if seq else 0", "def gc_content(seq):\n    return round(100 * sum(x in 'GC' for x in seq) / (len(seq) or 1), 2)"]