["from collections import Counter\ndef common(a,b,c):\n    return sum((Counter(a) & Counter(b) & Counter(c)).elements())", "from functools import reduce\nfrom operator import and_\nfrom collections import Counter\n\ndef common(a,b,c):\n    return sum(reduce(and_,map(Counter, (a,b,c))).elements())", "from collections import Counter\nfrom functools import reduce\nfrom operator import and_\n\ndef common(*args):\n    return sum(key * value for key, value in reduce(and_, map(Counter, args)).items())", "from collections import Counter\n\ndef common(a, b, c):\n    abc = Counter(a) & Counter(b) & Counter(c)\n    return sum(n * q for n, q in abc.items())", "# Python is nice\nfrom collections import Counter\nfrom operator import mul, and_\nfrom itertools import starmap\nfrom functools import reduce\n\ndef common(*args):\n    return sum(starmap(mul, reduce(and_, map(Counter, args)).items()))", "def common(a,b,c): \n    a.sort() ; b.sort() ; c.sort()\n    i = j = k = c1 = 0\n    while i < len(a) and j < len(b) and k < len(c):\n        if a[i] == b[j] == c[k]:\n            c1 += a[i]\n            i += 1 ; j += 1 ; k += 1\n        elif a[i] < b[j] : i += 1\n        elif b[j] < c[k] : j += 1\n        else : k += 1\n    return c1", "def common(a,b,c):\n    d = set(a)&set(b)&set(c)\n    a = [i for i in a if i in d]\n    b = [i for i in b if i in d]\n    c = [i for i in c if i in d]\n    return sum([i*min(a.count(i), b.count(i), c.count(i)) for i in d])", "from collections import Counter\n\ndef common(a, b, c):\n    abc = Counter(a) & Counter(b) & Counter(c)\n    return sum(abc.elements())", "common=lambda*a,c=__import__('collections').Counter:sum(__import__('functools').reduce(c.__and__,map(c,a)).elements())", "from collections import Counter\n\ndef common(a,b,c):\n    counts_a, counts_b, counts_c = Counter(a), Counter(b), Counter(c)\n    sum = 0\n    for n in (set(counts_a.keys()) & set(counts_b.keys())) & set(counts_c.keys()):\n        sum += n * min([counts_a[n], counts_b[n], counts_c[n]])\n    return sum"]