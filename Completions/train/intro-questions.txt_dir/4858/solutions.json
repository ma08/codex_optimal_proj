["def j_n(n):\n    j = [0]\n    a = [1]\n    for i in range(1, n):\n        j.append((i - a[j[i-1]]))\n        a.append((i-j[a[i-1]]))\n    return j, a\n\n\ndef john(n):\n    return j_n(n)[0]\n    \ndef ann(n):\n    return j_n(n)[1]\n    \n        \ndef sum_john(n):\n    return sum(john(n))\n    \ndef sum_ann(n):\n     return sum(ann(n))", "from functools import lru_cache\n\n@lru_cache(maxsize = None)\ndef john_value(n):\n    if n == 0:\n        return 0\n    return n - ann_value(john_value(n - 1))\n    \n@lru_cache(maxsize = None)\ndef ann_value(n):\n    if n == 0:\n        return 1\n    return n - john_value(ann_value(n - 1))\n\ndef ann(n):\n    return [ann_value(x) for x in range(n)]\n\ndef john(n):\n    return [john_value(x) for x in range(n)]\n\ndef sum_john(n):\n    return sum(john(n))\n    \ndef sum_ann(n):\n    return sum(ann(n))", "def get_arrays(n, name):\n    a = [1]\n    j = [0]\n    for i in xrange(1, n):\n        next_j = i - a[j[i-1]]\n        j.append(next_j)\n        next_a = i - j[a[i-1]]\n        a.append(next_a)\n    ret = {\n        'john': j,\n        'ann' : a\n    }\n    return ret[name]\n\ndef john(n):\n    return get_arrays(n, 'john')\n    \ndef ann(n):\n    return get_arrays(n, 'ann')\n    \ndef sum_john(n):\n    return sum(john(n))\n    \ndef sum_ann(n):\n    return sum(ann(n))", "an, jh = [1], [0]\nfor i in range(1,int(1e5*5)):\n    jh.append(i-an[jh[-1]])\n    an.append(i-jh[an[-1]])\njohn=lambda n:jh[:n]\nann=lambda n:an[:n]\nsum_john=lambda n:sum(jh[:n])\nsum_ann=lambda n:sum(an[:n])", "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef j(n):\n    return n - a(j(n-1)) if n else 0\n\n\n@lru_cache(maxsize=None)\ndef a(n):\n    return n - j(a(n-1)) if n else 1\n\n\ndef john(n): return [j(i) for i in range(n)]\ndef ann(n): return [a(i) for i in range(n)]\ndef sum_john(n): return sum(john(n))\ndef sum_ann(n): return sum(ann(n))", "def generate_solved_katas(n):\n    \"\"\" \u751f\u6210ann\u548cjohn\u5728\u7b2cn\u5929\u65f6\u7684\u89e3\u9898\u6570\u91cf\u8868\"\"\"\n    john_katas = [0]\n    ann_katas = [1]\n    for i in range(1, n):\n        john_katas.append(i - ann_katas[john_katas[i-1]])\n        ann_katas.append(i - john_katas[ann_katas[i-1]])\n    return john_katas, ann_katas\n\n\ndef john(n):\n    return generate_solved_katas(n)[0]\n\n\ndef ann(n):\n    return generate_solved_katas(n)[1]\n\n\ndef sum_john(n):\n    return sum(john(n))\n\n\ndef sum_ann(n):\n    return sum(ann(n))", "def john_and_ann(n):\n    john = [0]\n    ann = [1]\n    for i in range(1, n):\n        t1, t2 = ann[i-1],  john[i-1]\n        john.append(i - ann[t2])\n        ann.append(i - john[t1])\n    return john, ann\n\ndef ann(n):\n    john, ann = john_and_ann(n)\n    return ann\n\ndef john(n):\n    john, ann = john_and_ann(n)\n    return john\n\ndef sum_ann(n):\n    Ann = ann(n)\n    return sum(Ann)\n\ndef sum_john(n):\n    John = john(n)\n    return sum(John)", "jm, am = {0:0}, {0:1}\ndef j(n):\n    if n in jm.keys(): return jm[n]\n    jm[n] = n - a(j(n-1))\n    return jm[n]\n\ndef a(n):\n    if n in am.keys(): return am[n]\n    am[n] = n - j(a(n-1))\n    return am[n]\n\ndef john(n):\n    return [j(i) for i in range(n)]\n    \ndef ann(n):\n    return [a(i) for i in range(n)]\n    \ndef sum_john(n):\n    return sum(john(n))\n    \ndef sum_ann(n):\n    return sum(ann(n))", "#Dictionaries to cache results\njohn_dict = {}\nann_dict = {}\n\n#Helper functions using caches to find each value.  \n#I couldn't find a way to simplify this without making it more complex.\ndef john_val(n):\n    if n == 0:\n        return 0\n    if not n in john_dict:\n        john_dict[n] =  n - ann_val(john_val(n-1))\n    return john_dict[n]\n\ndef ann_val(n):\n    if n == 0:\n        return 1\n    if not n in ann_dict:\n        ann_dict[n] =  n - john_val(ann_val(n-1))\n    return ann_dict[n]\n\n#Once the helpers are done it's easy\ndef john(n):\n    return [john_val(i) for i in range(n)]\n\ndef ann(n):\n    return [ann_val(i) for i in range(n)]\n\ndef sum_john(n):\n    return sum(john(n))\n\ndef sum_ann(n):\n    return sum(ann(n))\n", "def johnann(n, jnota):\n    j, a = [0], [1]\n    for i in range(1,n):\n        j.append(i-a[j[-1]])\n        a.append(i-j[a[-1]])\n    return j if jnota else a\n\njohn = lambda n: johnann(n, True)\nann = lambda n: johnann(n, False)\nsum_john = lambda n: sum(john(n))\nsum_ann = lambda n: sum(ann(n))\n"]