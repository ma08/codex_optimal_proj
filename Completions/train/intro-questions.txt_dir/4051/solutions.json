["import re\n\ndef toUnderScore(name):\n    return re.sub(\"(?<=[^_-])_?(?=[A-Z])|(?<=[^\\\\d_])_?(?=\\\\d)\", \"_\" , name)", "from re import sub\n\ndef toUnderScore(name):\n    return sub('([a-zA-Z](?=[A-Z0-9])|\\d(?=[A-Z]))', r'\\1_', name)", "def toUnderScore(name):\n    if len(name) ==0:\n        return \"\"\n    hold=[]\n    for x in name:\n        hold.append(x)\n    for index, elem in enumerate(hold):\n        if index !=0:\n            test = hold[index-1]\n            if elem.isupper() and test != \"_\":\n                hold.insert(index, \"_\")\n            if elem.isdigit() and test.isalpha():\n                hold.insert(index, \"_\")\n                \n    output= ''.join(hold)\n    return output\n    pass", "import re\n\n\ndef toUnderScore(name):\n    return re.sub(r\"(?<=[^^_])([A-Z]|\\d+)\", r\"_\\1\", name)", "from functools import partial\nfrom re import compile\n\ntoUnderScore = partial(compile(r\"(?<=[a-zA-Z])(?=[A-Z0-9])|(?<=[0-9])(?=[A-Z])\").sub, r\"_\")", "import re\n\ndef toUnderScore(name):\n    if not name: return \"\"\n    a = '_'.join([s for s in re.split(r'(_?[A-Z][a-z]*_?|[0-9]+[a-z]*)', re.sub('_', '', name)) if s])\n    if name[0] == '_': a = '_' + a\n    if name[-1] == '_': a = a + '_'\n    return a", "def toUnderScore(s):\n    return ''.join('_'+x if (x.isupper() or x.isnumeric()) and not (x.isnumeric() and s[i-1].isnumeric()) and s[i-1] != '_' and i != 0 else x for i, x in enumerate(s))\n", "import re\n\ndef toUnderScore(name):\n    return re.sub(r'(?<!^)(?<!_)(\\d+|[A-Z][a-z]*)', r'_\\1', name)", "def toUnderScore(name):\n    \n    list_of_chars = []\n    previous_char = None\n\n    for char in name:\n\n        if previous_char is not None and char != \"_\" and previous_char != \"_\":\n\n            if char.isupper() or char.isdigit() and not previous_char.isdigit():\n                list_of_chars.append(\"_\")\n            \n        list_of_chars.append(char)\n        previous_char = char\n\n    return \"\".join(list_of_chars)", "import re;toUnderScore=lambda s:re.sub(r\"(?<=[^0-9])(\\d+)\", r\"_\\1\", re.sub(r\"(?<=[^_])([A-Z])(?=[a-z]*)\", r\"_\\1\", s[0]+s[1:-1].replace(\"_\",\"\")+s[-1])) if s else \"\""]