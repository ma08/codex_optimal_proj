["def contamination(text, char):\n  return char*len(text)", "def contamination(text, char):\n  return len(text) * char", "import re\ndef contamination(text, char):\n  return re.sub(\".\", char, text)", "import re\n\ndef contamination(text, char):\n    if text == '' or char == '':\n        return \"\"\n    else:\n        contaminated_word = re.sub('[!#~@$%&*_+{}|:\"<>;,/?=a-zA-Z0-9]', char, text)\n        return contaminated_word", "contamination = lambda s, c: c * len(s)", "contamination=lambda t,c: c*len(t)", "def contamination(text: str, char: str) -> str:\n    \"\"\" Mutate the text by given character. \"\"\"\n    return char * len(text)", "def contamination(text, char):\n  return \"\".join(char for x in text)", "def contamination(text, char):\n  return \"\" if not text else char+contamination(text[1:],char)", "def contamination(text, char):\n    if not char or not text:\n        return \"\"\n    else:\n        return char * len(text)\n", "def contamination(t, char):\n    return t.translate({ord(x):char for x in t})", "contamination = lambda text, char : char * len (text);", "def contamination(text, char):\n    return \"\".join(char for _ in text)\n", "def contamination(text, char):\n    for i in text:\n        text = text.replace(i, char)\n    return text", "def contamination(text, char):\n    return char * len(text) if len(char) > 0 and len(text) > 0 else ''", "def contamination(text, char):  \n    return ''.join([char for letter in text])", "def contamination(text, char):\n    if len(text)==0:\n        return ''\n    res = ''\n    for i in range(len(text)):\n        res += text[i].replace(text[i], char)\n        \n    return res", "def contamination(text, char):\n    return len(text) * char if len(text) else ''", "def contamination(text, char):\n    res = ''\n    if text:\n        for c in text:\n            res += char\n        return res\n    else:\n        return text", "def contamination(text, char):\n    a = len(text)\n    if type(text) == str:\n        return a * char\n    if text or char == \"\": \n        return \"\"\n", "def contamination(text, char):\n    x = []\n    if text == '' or char == '':\n        return \"\"\n    else:\n        for i in range(len(text)):\n            x.append(char)\n    return ''.join(x)", "def contamination(text, char):\n    i,s=0,''\n    while i <len(text):\n        s+=char\n        i+=1\n    return s\n", "def contamination(text, char):\n    answer = len(text)\n    final = \"\"\n    for i in range(answer):\n        final += char\n    return final", "def contamination(text, char):\n    result = ''\n    if (len(text) == 0 or char == ''):\n        return ''\n    else:\n        for x in text:\n            result = result + char\n    return result", "def contamination(text: str, char: str) -> str:\n    return \"\" if text == \"\" or char == \"\" else char * len(text)", "def contamination(txt, char):\n    return char*len(txt)", "def contamination(text, char):\n    res=\"\"\n    i=0\n    while i <len(text):\n        i+=1\n        res+=char\n    return res", "def contamination(text, char):\n    return char*(len(text) if char and text else 0)", "def contamination(text, char):\n    st=''\n    for c in text:\n        st+=char\n    return st", "def contamination(text, char):\n    lst=[char for i in range(len(text))]\n    return \"\".join(lst)", "def contamination(text, char):\n    if text == \"\" or char == \"\":\n        return \"\"\n    \n    res = \"\"\n    for t in text:\n        res += char\n    return res", "def contamination(text, char):\n    \n    res = \"\"\n    for i in text:\n        if text == \" \":\n            return text\n        else:\n            res+=char\n    return res", "def contamination(text, char):\n    if text=='' or char=='':\n        return ''\n    else:\n        ans=''\n        for i in text:\n            ans=ans+char\n        return ans", "def contamination(text, char):\n    list = []\n    if len(text) == 0 or len(char) == 0:\n        return ''\n    else:\n        for elem in text:\n            elem = char\n            list.append(elem)\n        return ''.join(list)", "def contamination(text, char):\n  l = len(text)\n  n = \"\"\n  for i in range(0, l):\n      n = n + char\n  return n", "def contamination(text, char):\n    a = \"\"\n    for i in text:\n        a += char\n    return a", "def contamination(text, char):\n    return char * len(text) if text != '' != char else ''", "def contamination(text, char):\n    msg = ''\n    if char != '':\n        for x in text:\n            msg += char\n    return msg", "def contamination(text, char):\n    return len(text) * char if text != '' or text != '' else \"\"\n", "def contamination(text, char):\n  l = 0\n  if char == \"\":\n      return \"\"\n  elif text == \"\":\n      return \"\"\n  else:\n      l = len(text)\n      return char*l", "def contamination(text, char):\n    if text == \"\":\n        return text\n    if char == \"\":\n        return char\n    else:\n        return char * len(text)\n\n", "def contamination(text, char):\n    return \"\" if text is \"\" else char * len(text)", "def contamination(text, char):\n    number = len(text)\n    return char * number", "def contamination(text, char):\n    if text is '' or char is '':\n        return ''\n    else:\n        return char * len(text)", "def contamination(text, char):\n  large = 0\n  for letters in text:\n    large += 1\n  return large*char", "def contamination(text, char):\n  large = 0\n  newText = \"\"\n  for letters in text:\n    large += 1\n  if text == \"\":\n    newText == \"\"\n  else:\n    newText = large*char\n  return newText", "def contamination(text, char):\n    if text == \"\":\n        return text\n    else:\n        for letter in text:\n            text = text.replace(letter, char)\n        return text", "def contamination(text, char):\n    \n    output = \"\"\n    \n    for i in range(0,len(text)):\n        output += char\n    \n    return output", "def contamination(text, char):\n  return char * len(text) if len(char) else ''", "def contamination(text, char):\n  m = list(text)\n  n = []\n  for i in m:\n     n.append(char)\n  a = \"\".join(n)\n  return a", "def contamination(text, char):\n    cunt = list(text)\n    ctr = 0\n    for fuck in cunt:\n        cunt[ctr] = char\n        ctr += 1\n    return ''.join(cunt)", "contamination=lambda t,c:c*len(t) if t and c else ''", "def contamination(text, char):\n  #Code here ;)\n  return len(text)*char if text != \"\" and char != \"\" else \"\"", "def contamination(text, char):\n    result = ''\n    for s in range(0, len(text)):\n        result += char\n    return result", "def contamination(text, char):\n    if text == '' or char == '':\n        return ''\n    elif len(text) > 0:\n        return len(text)*char\n", "def contamination(text, char):\n    \n    l = len(text)\n    r = l * char\n    \n    if text == \"\" or char == \"\":\n        return \"\"\n    else:\n        return r\n", "import string\n\ndef contamination(text, char):\n    if not text or not char:\n        return ''\n    \n    intab = string.printable\n    outtab = char * len(intab)\n    transtab = str.maketrans(intab, outtab)\n    \n    return text.translate(transtab)\n", "def contamination(text, char):\n     new_str = ''\n     for l in text:\n         new_str += char\n     return new_str", "def contamination(text, char):\n    return \"\" if not(text or char) else len(text) * char", "def contamination(text, char):\n  return '' if text == '' else f'{char*len(text)}'", "def contamination(text, char):\n    return '' if not text else char * len(text)", "def contamination(text, char):\n    \n    if not (text or char):\n        return ''\n    return char*len(text)", "def contamination(text, char):\n  return ''.join([char for i in range(len(text))]) if text else \"\"", "def contamination(s, c):\n    return ''.join([x.replace(x,c) for x in s if s != \"\"])", "def contamination(text, char):\n    nw = ''\n    for c in text:\n        nw += char\n    return nw\n    # Flez\n", "def contamination(text, char):\n  a = len(text)\n  return a * char", "def contamination(text, char):\n    if char != \"\":\n        return char * len(text)\n    else:\n        return \"\"", "def contamination(text, char):\n  return \"\".join([i.replace(i,char) for i in text])", "def contamination(text, char):\n    string = \"\"\n    for i in range(len(text)):\n        string += char\n    return string", "def contamination(text, char):\n    return \"\" if text == \"\" or char == \"\" else \"\".join([char for i in text])", "def contamination(text, char):\n    return '' if text=='' or char=='' else ''.join(char for letter in text)", "def contamination(text, char):\n  if text == '':\n      return ''\n  \n  return char * len(text)", "def contamination(text, char):\n    if not text or not char:\n        return ''\n    \n    for ch  in text:\n        text = text.replace(ch, char) \n    \n    return text", "def contamination(text, char):\n  #Code here ;)\n  #print(text[1])\n  lt = list(text)\n  for i in range(len(lt)):\n      lt[i] = char\n  return \"\".join(lt)", "def contamination(text, char):\n    return f\"{len(text)*char}\"", "def contamination(s, c):\n    f = ''\n    for i in range(len(s)):\n        f = f + c\n    return f ", "def contamination(text, char):\n  if len(text) == 0:\n      return \"\"\n  else:\n      result = \"\"\n      for c in text:\n          result += char\n      return result", "def contamination(text, char):\n    if text:\n        return ''.join([char for el in list(text)])\n    else:\n        return ''\n  \n  \n  \n", "def contamination(text, char):\n    x = ''\n    for i in text:\n        x = x + char\n    if text == '' or char == '':\n        return ''\n    else:\n        return x", "def contamination(text, char):\n  return ''.join(char for i in range(len(text))) if len(text) > 0 or len(char) > 0 else ''", "def contamination(text, char):\n  return text.replace(text, char*len(text))\n\n\nprint((contamination('_3ebzgh4', '&')))\n", "def contamination(text, char):\n    return \"\" if len(text) == 0 else char * len(text) ", "def contamination(text, char):\n    return '' if not text or not char else len(text) * char", "def contamination(text, char):\n  if text == None:\n      return ''\n  else:\n      return char * len(text)", "def contamination(text, char):\n  if text == '': return ''\n  text = list(text)\n  for x in range(len(text)):\n      text[x] = char\n      \n  return ''.join(text)", "def contamination(text, char):\n     return len(text)*char if  len(text)!=0 or len(char)!=0 else \"\"", "def contamination(text, char):\n  return len(text) * str(char)", "def contamination(text, char):\n  return \"\" if char==\"\" else char*len(text)", "def contamination(text, char):\n    #return char * len(text) if text and char else ''\n    return char * len(text)", "def contamination(text, char):\n    if not text or not char:\n        return ''\n    else:\n        return char * len(text)", "def contamination(text,char):\n    if text == \"\":\n        return text\n    elif char == \"\":\n        return char\n    else:\n        count_of_characters = len(text)\n        return (char * count_of_characters)\n", "def contamination(text, char):\n    return len(text)*char if len(text)!=0 and len(char)!=0 else ''", "def contamination(text, char):\n  #Code here ;)\n  return char * len(text)\n  \n  print(contamination(\"abc\",\"z\"))", "def contamination(text, char):\n    if not (text or char):\n        return ''\n    else:\n        return char*(len(text))", "def contamination(text, char):\n    new_str = \"\"\n    new_str += str(char) * len(text)\n    return new_str", "def contamination(text, char):\n  return ''.join([char for i in text])", "def contamination(text, char):\n  a = len(text)* char\n  return a", "def contamination(text, char):\n    if char == '': return ''\n    else: return len(text)*char", "def contamination(text, char):\n  #Code here ;)\n#   for i in range(len(text)):\n#       text[i] = char\n#   return text\n    return(char * len(text))", "def contamination(text, char):\n    nt = len(text)\n    nc = len(char)\n    if nt == 0 or nc == 0:\n        return \"\"\n    return char * nt"]