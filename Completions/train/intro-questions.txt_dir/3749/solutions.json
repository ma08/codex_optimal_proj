["def expanded_form(num):\n    num = list(str(num))\n    return ' + '.join(x + '0' * (len(num) - y - 1) for y,x in enumerate(num) if x != '0')", "def expanded_form(n):\n    result = []\n    for a in range(len(str(n)) - 1, -1, -1):\n        current = 10 ** a\n        quo, n = divmod(n, current)\n        if quo:\n            result.append(str(quo * current))\n    return ' + '.join(result)\n", "def expanded_form(num):\n    num = str(num)\n    st = ''\n    for j, i in enumerate(num):\n        if i != '0':\n            st += ' + {}{}'.format(i, (len(num[j+1:])*'0'))\n    return st.strip(' +')", "def expanded_form(num):\n    return \" + \".join([str(int(d) * 10**p) for p, d in enumerate(str(num)[::-1]) if d != \"0\"][::-1])", "def expanded_form(num):\n    return ' + '.join([ x.ljust(i+1, '0') for i, x in enumerate(str(num)[::-1]) if x != '0'][::-1])\n", "def expanded_form(num):\n    return ' + '.join([x+'0'*i for i,x in enumerate(str(num)[::-1]) if x != '0'][::-1])", "def expanded_form(num):\n    s = str(num)\n    n = len(s)\n    return ' + '.join( [s[-i]+\"0\"*(i-1) for i in range(n,0,-1) if s[-i] != \"0\"])", "from math import floor,log\ndef expanded_form(num):\n    x = 10**floor(log(num)/log(10))\n    a = num//x\n    b = num%x\n    s = str(a*x) \n    if (b!=0): s += \" + \" + expanded_form(b)\n    return(s)\n", "def expanded_form(n):\n    return (lambda s:' + '.join(s[x] + len(s[x+1:])*'0' for x in range(len(s))if s[x] != '0'))(str(n))", "def expanded_form(num):\n    return \" + \".join(str(num)[i] + \"0\" * ( len(str(num)) - i - 1 ) for i in range(len(str(num))) if str(num)[i] != \"0\")", "def expanded_form(num):\n    str_num, str_list, index_track = (str(num), [], 0)\n    for digit in str_num:\n        if digit != str(0):\n            val = int(digit) * 10 ** (len(str_num) - (index_track + 1))\n            str_list.append(str(val))\n        index_track += 1\n    return \" + \".join(str_list)"]