["def scramble(s1,s2):\n    for c in set(s2):\n        if s1.count(c) < s2.count(c):\n            return False\n    return True", "from collections import Counter\ndef scramble(s1,s2):\n    # Counter basically creates a dictionary of counts and letters\n    # Using set subtraction, we know that if anything is left over,\n    # something exists in s2 that doesn't exist in s1\n    return len(Counter(s2)- Counter(s1)) == 0", "def scramble(s1, s2):\n    return not any(s1.count(char) < s2.count(char) for char in set(s2))", "def scramble(s1,s2):\n    return all( s1.count(x) >= s2.count(x) for x in set(s2))\n    \n", "def scramble(s1,s2):\n    dct={}\n    for l in s1:\n        if l not in dct:\n            dct[l]=1\n        else:\n            dct[l] +=1\n    for l in s2:\n        if l not in dct or dct[l] < 1:\n            return False\n        else:\n            dct[l] -= 1\n    return True", "from collections import Counter\n\ndef scramble(s1,s2):\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    return not (c2 -c1).values()", "from collections import Counter\nfrom operator import sub\n\ndef scramble(s1,s2):\n    return not sub(*map(Counter, (s2,s1)))", "from collections import Counter\ndef scramble(s1,s2):\n    return not (Counter(s2) - Counter(s1))", "def scramble(s1, s2):\n    return all([s1.count(l2) >= s2.count(l2) for l2 in set(s2)])", "def scramble(s1,s2):\n    return all(s1.count(i)>=s2.count(i) for i in set(s2))", "from collections import Counter\nscramble = lambda s1, s2: not Counter(s2) - Counter(s1)", "scramble=lambda a,b,c=__import__('collections').Counter:not c(b)-c(a)", "from collections import Counter\ndef scramble(s1,s2): return len(Counter(s2) - Counter(s1)) == 0", "def scramble(s1, s2):\n        return not False in([s1.count(i)>=s2.count(i) for i in set(s2)])\n\n#set() <3\n", "def scramble(s1, s2):\n    a='abcdefghijklmnopqrstuvwxyz'\n    b=[]\n    for char in a:\n        if s1.count(char)>=s2.count(char):\n            b.append(True)\n        else:\n            b.append(False)\n    if len(set(b))<=1:\n        return(True)\n    else:\n        return(False)", "def scramble(s1, s2):\n    str1 = {}\n    str2 = {}\n    for s in s1:\n        try:\n            str1[s] = str1[s] + 1\n        except KeyError:\n            str1[s] = 1\n    for s in s2:\n        try:\n            str2[s] = str2[s] + 1\n        except KeyError:\n            str2[s] = 1\n    for key in str2:\n        try:\n            if str1[key] < str2[key]:\n                return False\n        except KeyError:\n            return False\n    return True\n", "def scramble(s1, s2):\n    \"\"\" returns true of a porton of s1 can be rearranged to match s2. Basic concept: use an indicator \n    dictionary  of the counts of letters in s2, check if s1 has sufficient occurences of each letter to make\n    that indicator == 0 for all chars\"\"\"\n    \n    cts = [s2.count(i) for i in list(set(s2)) ] # count occurence of letters\n    dic = dict(zip(list(set(s2)) ,cts)) # dictionary of counts.\n    truth = True\n    \n    for char in list(s1):\n        try:\n            if dic[char] > 0: # If dic[char] already == 0, we know there are suff. occurrences of that char\n                dic[char] = (dic[char] - 1) \n        except KeyError:\n            pass\n    \n    if sum(dic.values()) > 0: # if all chars sufficiently occur, sum should be 0\n        truth = False\n\n    return truth", "# Stack solution:\n#    Loop through s2 once, pushing char occurances onto the stack\n#    Loop through s1 once, popping any occurances of s2 chars from the stacks\n#    If any stack has a count greater than 0, than it's False\ndef scramble(s1, s2):\n    stacks = {}\n    \n    for char in s2:\n        # Checking if stacks already has a key:value pair with the key char\n        if char in stacks:\n            stacks[char] += 1\n        else:\n            stacks[char] = 1\n    \n    for char in s1:\n        if char in stacks:\n            stacks[char] -= 1\n  \n    return max(stacks.values()) <= 0\n\n'''\n# Turn strings into lists, remove the appropriate element, and keep track of it to compare at the end\n# Takes too long, but correct output\ndef scramble(s1, s2):\n    source = [char for char in s1]\n    tokens = [char for char in s2]\n    result = []\n    \n    for char in tokens:\n        if char in source:\n            result.append(char)\n            source.remove(char)\n    return len(result) == len(tokens)\n'''\n\n'''\n# Turn strings into lists, remove the appropriate element, and catch ValueError exceptions that signify False-ness\n# Takes too long but correct output\ndef scramble(s1, s2):\n    source = [char for char in s1]\n    try:\n        for char in s2:\n            source.remove(char)\n    except ValueError:\n        return False\n    return True\n'''\n\n'''\n# Count every instance of every char in s1 and s2, then compare the number of s2 char appearances in s1\n# slowest of all three\ndef scramble(s1, s2):\n    source = [char for char in s1]\n    source.sort()\n    tokens = [char for char in s2]\n    tokens.sort()\n    \n    source_len = len(source)\n    source_index = 0\n    for char in tokens:\n        while char != source[source_index]:\n            source_index += 1\n            if source_index >= source_len:\n                return False\n    return True\n'''", "from collections import Counter as c\ndef scramble(s1, s2):\n    s1 = c(s1)\n    s2 = c(s2)\n    for i in s2:\n        if s1[i]<s2[i]:\n            return False\n    return True", "from collections import defaultdict\nimport gc\ndef scramble(s1,s2):\n#   print(s1,s2)\n    a = defaultdict(lambda: False)\n    for item in s2:\n        a[item] = a.get(item, 0) + 1\n    # print(a)\n    b = defaultdict(lambda: False)\n    for item in s1:\n        b[item] = b.get(item, 0) + 1\n    # print(b)\n    try:\n        for item in a:\n#           print(a[item],b[item])\n            if b[item] and a[item]<=int(b[item]):\n                # print(item)\n                pass\n            else:\n                return False\n        return True\n    finally:\n        del a,b,s1,s2\n        gc.collect()\n\n\n", "def scramble(s1, s2):\n    def is_subsequence(needle, haystack):\n        it = iter(haystack)\n        return all(c in it for c in needle)\n    return is_subsequence(sorted(s2), sorted(s1))", "def scramble(s1, s2):\n    for c in set(s2):\n        if s2.count(c) > s1.count(c):\n            return False\n    return True", "def scramble(s1,s2):\n    for i in \"abcdefghijklmnopqrstuvwxyz\":\n        if s1.count(i) < s2.count(i):\n            return False\n    return True", "def scramble(s1,s2):\n    return all([s2.count(c) <= s1.count(c) for c in set(s2)])", "def scramble(s1, s2):\n    it = iter(sorted(s1))\n    return all(c in it for c in sorted(s2))", "def scramble(s1,s2):\n\n    for letter in \"abcdefghijklmnopqrstuvwxyz\":\n        if s1.count(letter) < s2.count(letter):\n            return False\n    return True\n            \n            \n    \n", "def scramble(s1,s2):\n    for letter in 'abcdefghijklmnopqrstuwvxyz':\n        if s1.count(letter) < s2.count(letter): return False\n    return True\n\n\n\n\n#def costam(s1,s2)\n#    print s1\n#    for letter in s2:\n#        if letter in s1:     \n#            m = s1.index(letter)\n#            s1 = s1[:m]+s1[m+1:]\n#        else: return False\n#    return True\n", "class scramble(zip):\n    def __eq__(self, other):\n        return True", "def scramble(str, wrd):\n    w=set(wrd)\n    for i in w:\n        if str.count(i) < wrd.count(i):\n            return False\n    return True", "from collections import  Counter\ndef scramble(s1, s2):\n   \n    dict = Counter(s1)\n    dict1 = Counter(s2)\n\n    for k in dict1.keys():\n        if (not k in dict.keys()):\n            return False\n        if dict1[k] > dict[k]:\n            return False\n\n    return True", "from collections import Counter\n\ndef scramble(s1, s2):\n    se1 = Counter(s1)\n    se2 = Counter(s2)\n    return se1|se2 == se1", "from collections import Counter\ndef scramble(s1, s2):\n    return True if len(Counter(s2)-Counter(s1))==0 else False", "def scramble(s1,s2):\n    def ccount(s):\n        d = {}\n        for c in s:\n            d[c] = d.get(c,0) + 1\n        return d\n        \n    d1 = ccount(s1)\n    for c, count in list(ccount(s2).items()):\n        if d1.get(c, 0) < count:\n            return False\n    return True\n", "def scramble(s1,s2):\n    for char in set(s2):\n         if s1.count(char) < s2.count(char):\n           return False\n    return True", "from collections import deque\n\ndef scramble(s1,s2):\n    s1 = deque(sorted(s1))\n    s2 = sorted(s2)\n    for letter in s2:\n        if len(s1) == 0:\n            return False\n        while len(s1):\n            next_letter = s1.popleft()\n            if next_letter == letter:\n                break\n            if next_letter > letter:\n                return False\n    return True", "scramble = lambda s1,s2: len([x for x in [(char, s2.count(char), s1.count(char)) for char in set(s2)] if x[2] < x[1]]) == 0", "def scramble(s1,s2):\n    l=[]\n    for x in s2:\n        if x not in l:\n            if s1.count(x)<s2.count(x):\n                return False\n            l.append(x)\n    return True", "from collections import Counter\n\ndef scramble(s1, s2):\n    if not set(s2).issubset(set(s1)):\n        return False\n        \n    # your code here\n    s1_counts = Counter(s1)\n    s2_counts = Counter(s2)\n    \n    s1_counts.subtract(s2_counts)\n    \n    return not any([x for x in list(s1_counts.items()) if x[1] < 0]) \n", "def scramble(s1, s2):\n    a = [s1.count(chr(i))-s2.count(chr(i)) for i in range(97,123)]\n    for i in a:\n        if i<0:\n            return False\n    return True", "from collections import Counter\n\ndef scramble(s1,s2):\n    a = Counter(s1)\n    b = Counter(s2)\n    a.subtract(b)\n    new = []\n    for i in a:\n        if a[i] >= 0:\n            new.append(i)\n    return len(new) == len(a)\n\n\n\n", "from collections import Counter\ndef scramble(s1, s2):\n    a = Counter(s1)\n    b = Counter(s2)\n\n    \n    for k,v in b.items():\n        if k not in a.keys() or a[k] < v:\n            return False\n    \n    return True", "def scramble(s1, s2):\n    d1, d2 = {}, {}\n    for i in s1:\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    \n    for i in s2:\n        if i not in d2:\n            d2[i] = 1\n        else:\n            d2[i] += 1\n            \n    for key in list(d2.keys()):\n        if not key in list(d1.keys()) or d1[key]< d2[key]:\n            return False\n    return True\n", "def scramble(s1, s2):\n    s1_count = dict.fromkeys(set(s1),0)\n    for i in s1:\n        s1_count[i] += 1\n    try:\n        for i in s2:\n            s1_count[i] -= 1\n    except:\n        return False\n    return all(i >= 0 for i in s1_count.values())", "def scramble(s1, s2):\n    s1_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    s2_dict = {}\n    for i in s2:\n        if i in s2_dict:\n            s2_dict[i] += 1\n        else:\n            s2_dict[i] = 1\n    for k, v in  s2_dict.items():\n        if k not in s1_dict or s1_dict[k] < v:\n            return False\n    return True", "from collections import Counter\ndef scramble(s1, s2):\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    c1.subtract(c2)\n    c3 = [v<0 for k,v in c1.items() if k in c2.keys()]\n    \n    return not any(c3)", "from collections import Counter \ndef scramble(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    s2 = list((Counter(s2) - Counter(s1)).elements())\n    if len(s2) > 0:\n        return False\n    else:\n        return True", "from collections import Counter\ndef scramble(s1, s2):\n    if set(s1) < set(s2):\n        return False\n    cnt1 = Counter(s1)\n    cnt2 = Counter(s2)\n    cnt1.subtract(cnt2)\n    notOk = [x < 0 for x in list(cnt1.values())]\n    return not any(notOk)\n    \n", "def scramble(s1, s2):\n    if len(s2) > len(s1):\n        return False\n    let1 = [s1.count(chr(i)) for i in range (97, 123)]\n    let2 = [s2.count(chr(i)) for i in range (97, 123)]\n    sub = [True if (let1[i] >= let2[i]) else False for i in range(26)]\n    return (True if False not in sub else False)", "import string\nalphabet = {key: idx for idx, key in enumerate(string.ascii_lowercase)}\n\ndef scramble(s1, s2):\n    used_words1 = [0] * 26\n    used_words2 = [0] * 26\n    for element in s1:\n        used_words1[alphabet[element]] += 1\n    for element in s2:\n        used_words2[alphabet[element]] += 1\n    for i in range(26):\n        if used_words2[i] > used_words1[i]:\n            return False\n    return True\n        \n", "def scramble(s1, s2):\n    while(len(s2) > 0):\n        if(s1.count(s2[0]) < s2.count(s2[0])):\n            return False\n        else:\n            s2 = s2.replace(s2[0], '')\n    return True\n", "def scramble(s1, s2):\n    clean = \"\"\n    boolean = []\n    for i in s2:\n        if i not in clean:\n            clean = clean + i\n    for i in clean:\n        if s2.count(i) > s1.count(i):\n            return False\n    return True", "def scramble(s1, s2):\n    for letter in 'abcdefghijklmnopqrstuvwxyz' :\n        if s2.count(letter) <= s1.count(letter) : continue\n        else : return False\n    return True", "#Tests whether a portion of s1 can be rearranged to match s2\n\nfrom collections import Counter\n\ndef scramble(s1, s2):\n\n    count_letters = Counter(s1)\n    count_letters.subtract(Counter(s2))\n    return (all(n >= 0 for n in count_letters.values()))", "def scramble(s1, s2):\n    s1_dict = dict()\n    for char in s1:\n        if char in s1_dict:\n            s1_dict[char] = s1_dict[char] + 1\n        else:\n            s1_dict[char] = 1\n    for char in s2:\n        if char not in s1_dict or s1_dict[char] == 0:\n            return False\n        else:\n            s1_dict[char] = s1_dict[char] - 1\n    return True\n", "def scramble(s1, s2):\n    if len(s1) < len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for char in s1:\n        try:\n            s1_dict[char] += 1\n        except KeyError:\n            s1_dict[char] = 1\n    for char in s2:\n        try:\n            s2_dict[char] += 1\n        except KeyError:\n            s2_dict[char] = 1\n    for key in s2_dict:\n        try:\n            if s1_dict[key] < s2_dict[key]:\n                return False\n        except KeyError:\n            return False\n    return True\n", "def scramble(s1, s2):\n    return all((s1.count(l) - s2.count(l)) >= 0 for l in set(s2))\n    \n", "def scramble(s1, s2):\n    #for ltr in s2:\n    #    if s2.count(ltr) > s1.count(ltr):\n    #        return False\n    s1ct = {}\n    for ltr in s1:\n        if ltr in s1ct.keys():\n            s1ct[ltr] += 1\n        else:\n            s1ct[ltr] = 1\n\n    s2ct = {}\n    for ltr in s2:\n        if ltr in s2ct.keys():\n            s2ct[ltr] += 1\n        else:\n            s2ct[ltr] = 1\n\n    for ltr in s2ct.keys():\n        if ltr not in s1ct.keys():\n            return False\n        if s2ct[ltr] > s1ct[ltr]:\n            return False\n    return True", "from collections import Counter\n\ndef scramble(s1, s2):\n    s1 = Counter(s1)\n    s2 = Counter(s2)\n    return len([c for c in s2 if s1[c] >= s2[c]]) == len(s2.keys())", "from collections import Counter\n\ndef scramble(s1, s2):\n    one_split = list(s1)\n    two_split = list(s2)\n    count = 0\n    copy = two_split[::]\n    one = Counter(one_split)\n    two = Counter(two_split)\n    for x in two_split:\n        if x not in list(two.keys()):\n            return False\n        if one[x] < two[x]:\n            return False\n        \n    return True\n\n    \n    \n    \n            \n\n  \n   \n\n", "def scramble(s1, s2):    \n    s1 = list(s1)\n    s2 = list(s2)\n    \n    s1.sort()\n    s2.sort()\n    \n    len1 = len(s1)\n    len2 = len(s2)\n        \n    i = 0\n    j = 0\n        \n        \n    while i < len1 and j < len2:\n        if (len1 - i) < (len2 - j):\n            return False\n        \n        if s1[i] == s2[j]:\n            i += 1\n            j += 1  \n            \n        elif s1[i] != s2[j]:\n            i += 1\n    \n    \n    if j == len(s2):\n        return True\n    \n    return False\n            \n            \n", "def scramble(s1, s2):\n    j,k=1,1\n    a={chr(i):0 for i in range(97,123)}\n    b={chr(i):0 for i in range(97,123)}\n    for i in s1:\n        if i not in a:\n            continue    \n        else:\n            a[i]=a[i]+1\n    for n in s2:\n        if n not in b:\n            continue    \n        else:\n            b[n]=b[n]+1\n    for i in s2:\n        if a[i]>=b[i]:\n            pass\n        else:\n            return False\n    return True    \n    # your code here\n", "from collections import Counter as count\ndef scramble(s1,s2):\n    return len(count(s2)- count(s1)) == 0", "def scramble(s1, s2):\n    for c in \"qwertyuiopasdfghjklzxcvbnm\":\n        if s1.count(c) < s2.count(c): return False\n    return True\n", "def scramble(s1, s2):\n    Mot = \"\".join(dict.fromkeys(s2))\n    for i in range(len(Mot)):\n        if s1.count(Mot[i])<s2.count(Mot[i]):\n            return False\n            \n    return True\n    # your code here\n", "from collections import Counter\n\ndef scramble(s1, s2):\n    return True if sum(((Counter(s2) & Counter(s1)).values())) == len(s2) else False", "def scramble(s1, s2):\n    d1={}\n    for i in set(s1):\n        d1[i]=s1.count(i)\n    for i in set(s2):\n        try:\n            if s2.count(i)>d1[i]:\n                return False\n        except:\n            return False\n    return True", "def scramble(s1, s2):\n    set1=set(s1)\n    set2=set(s2)\n    for letter in set2:\n        if letter not in set1:return False\n        if s1.count(letter)<s2.count(letter): return False\n    else:\n        return True\n", "def scramble(s1, s2):\n    import numpy\n    options={}\n    for i in s1:\n        if i in options:\n            options[i]+=1\n        else:\n            options[i]=1\n    word={}\n    for i in s2:\n        if i not in options:\n            return False\n        if i in word:\n            word[i]+=1\n        else:\n            word[i]=1\n    for i in word:\n        if word[i]>options[i]:\n            return False\n    return True", "def scramble(s1, s2):\n    s1_counter = [0] * 256\n    s2_counter = {}\n\n    for c in s1:\n        idx = ord(c)\n        s1_counter[idx] += 1\n\n    for c in s2:\n        if c in s2_counter:\n            s2_counter[c] += 1\n        else:\n            s2_counter[c] = 1\n\n    for (key, value) in s2_counter.items():\n        idx = ord(key)\n        if s1_counter[idx] < value:\n            return False\n\n    return True", "def scramble(s1, s2):\n    s=list(set(s2))\n    for i in s:\n        if s1.count(i)<s2.count(i):\n            return False\n    return True\n            \n            \n", "def scramble(s1, s2):\n    \n    # other solutions using list timed-out so had to use map.\n    \n    # create maps of count of two string.\n    char_count_s1 = {c:s1.count(c) for c in set(s1) }\n    char_count_s2 = {c:s2.count(c) for c in set(s2) }\n    \n    for c in char_count_s2:\n        if c not in char_count_s1:\n            return False\n        elif char_count_s1[c] < char_count_s2[c]:\n            return False\n    \n    return True", "def scramble(s1, s2):\n    for l in set(s2):\n        if l not in s1 or s1.count(l) < s2.count(l):\n            return False\n    return True", "from collections import Counter\n\ndef scramble(s1, s2):\n    for c in set(s2):\n        if s2.count(c) <= s1.count(c):\n            continue\n        else:\n            return False\n    return True\n", "scramble=lambda s,t:(lambda c,d:all(c.get(o,0)>=d[o] for o in t))({i:s.count(i) for i in set(s)},{i:t.count(i) for i in set(t)})", "def scramble(s1, s2):\n    counter01 = [0] * 26\n    counter02 = [0] * 26\n    \n    for char in s1:\n        counter01[ord(char) - 97] += 1\n        \n    for char in s2:\n        counter02[ord(char) - 97] += 1\n        \n    for i in range(26):\n        if counter01[i] < counter02[i]:\n            return False\n        \n    return True", "def scramble(s1, s2):\n    s2_dict = {}\n    for c in set(s2):\n        s2_dict[c] = s2.count(c)\n    \n    output = True\n    for c in sorted(s2_dict, key = s2_dict.get, reverse=True):\n        s2_count = s2_dict[c]\n        if s2_count > s1.count(c):\n            output = False\n            break\n    return output", "def scramble(s1, s2):\n    s1_dict = dict()\n    s2_dict = dict()\n\n    s2_set = set(s2)\n\n    for c in s2_set:\n        s2_dict[c] = s2.count(c)\n        s1_dict[c] = s1.count(c)\n\n    for c in s2_set:  \n        if c not in s1_dict or s2_dict[c] > s1_dict[c]: \n            return False\n\n    return True", "def scramble(s1, s2):\n    c= {item:s1.count(item) for item in set(s1)}\n    d = {item:s2.count(item) for item in set(s2)}\n    for item in d:\n        e = c.get(item) or None\n        if not e or e < d.get(item):\n            return False\n    return True", "def scramble(s1, s2):\n    dict_s1 = {}\n    for char in s1:\n        dict_s1[char] = dict_s1[char] + 1 if char in dict_s1.keys() else 1\n    \n    for char in set(s2):\n        if not char in dict_s1.keys():\n            return False\n        if s2.count(char) > dict_s1[char]:\n            return False\n        dict_s1[char] -= s2.count(char)\n    return True", "from collections import Counter\n\ndef scramble(s1, s2):\n    d1 = dict(Counter(s1))\n    d2 = dict(Counter(s2))\n    d3 = {k: v for k,v in d1.items() if k in d2.keys()}\n    missing = {k:v for k,v in d2.items() if k not in d3}\n    \n    if len(missing) >= 1:\n        return False\n    elif len(s2) == 0 or len(s1) == 0:\n        return False\n    elif len(missing) == 0:\n        calc = {k: d3[k]- d2[k] for k in d2.keys() & d3}\n        return True if all(value >= 0 for value in calc.values()) else False", "def scramble(s1, s2):\n    list_chr=tuple(set(s2))\n    for i in list_chr:\n        if s1.count(i)<s2.count(i):\n            return False\n    return True", "def scramble(s1, s2):\n    fr = set(s1)\n    sc = set(s2)\n    for i in sc:\n        if i not in fr:\n            return False\n        elif i in fr:\n            if s1.count(i) < s2.count(i):\n                return False            \n    return True\n", "def scramble(s1, s2):\n    if None in (s1, s2):\n        return False\n    \n    passed = []   #Added to avoid wasting time on suitable letters\n    for letter in s2:\n        if letter in passed: continue\n        if (letter not in s1) or (s2.count(letter) > s1.count(letter)): return False #2nd condition VERY IMP, cause this was not at all obvious (guess I missed it completely), i.e.,must consider number of letters in s2 and s1\n        passed.append(letter)\n    else: return True", "from collections import Counter\ndef scramble(s1, s2):\n    t1 = Counter(s1)\n    t2 = Counter(s2)\n    d = t2 - t1\n    return len(d) == 0", "def scramble(string_to_rearrange, string_to_match):\n    letters_in_string_to_match = {}\n    for letter in string_to_match:\n        if letter not in letters_in_string_to_match:\n            letters_in_string_to_match[letter] = string_to_match.count(letter)\n    letters_in_string_to_rearrange = {}\n    for letter in string_to_rearrange:\n        if letter not in letters_in_string_to_rearrange:\n            letters_in_string_to_rearrange[letter] = string_to_rearrange.count(letter)\n    for letter in letters_in_string_to_match:\n        try:\n            if letters_in_string_to_match[letter] > letters_in_string_to_rearrange[letter]:\n                return False\n        except KeyError:\n            return False\n    return True\n", "from collections import Counter\ndef scramble(s1, s2):\n    l = Counter(s1)\n    w = Counter(s2)\n    diff = w - l\n    return len(diff) == 0", "def scramble(s1, s2):\n    unique_letters = list(set(s2))\n    count_letters = [s2.count(x) for x in unique_letters]\n    return not False in [s1.count(x) >= count_letters[i] for i,x in enumerate(unique_letters)]", "def scramble(s1, s2):\n    for el in set(s2):\n        if not s1.count(el) >= s2.count(el):\n            return False\n    return True", "def scramble(s1, s2):\n    list=[]\n    for letter in s2:\n        if letter in list:\n            continue\n        else:\n            list.append(letter)\n        if s2.count(letter) <= s1.count(letter):\n            pass\n        else:\n            return False\n    return True", "def scramble(str1,str2):\n    if len(str1) < len(str2):\n        return False\n    str1 = \"\".join(sorted(str1))\n    str2 = \"\".join(sorted(str2))\n    i = 0\n    while i < len(str2):\n        N = str2.count(str2[i])\n        if str1.count(str2[i]) < N:\n            return False\n        i += N\n    return True", "def scramble(s1, s2):\n    a1 = 26*[0]\n    for c in s1:\n        a1[ord(c)-97] += 1\n        \n    for c in s2:\n        a1[ord(c)-97] -= 1\n        if a1[ord(c)-97] < 0:\n            return False\n    return True", "def scramble(s1, s2):\n    from collections import Counter\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    for key, val in c2.items():\n        if key not in c1.keys():\n            return False \n        else:\n            if val > c1[key]:\n                return False\n    return True", "def map_char_count(s):\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    return char_count\n\ndef scramble(s1, s2):\n    s1_count = map_char_count(s1)\n    s2_count = map_char_count(s2)\n    for k, v in list(s2_count.items()):\n        if k not in s1_count or s1_count[k] < v:\n            return False\n    return True\n    \n", "def scramble(s1, s2):\n    for char in list(set(list(s2))):\n        if char not in s1: return False\n        if s2.count(char) > s1.count(char): return False\n    return True", "def scramble(s1, s2):\n    st1, st2 = set(s1), set(s2)  # Use sets for optimization\n\n    if not st2.issubset(st1):  # Check if every char in s2 is present in s1, if not, game over\n        return False\n    else:\n        if not all(map(lambda char : s1.count(char) >= s2.count(char), st2)): # Use map as an alternative to lists\n            return False\n        else:\n            return True", "def scramble(s1, s2):\n    seen = []\n    for letter in s2:\n        if letter not in s1:\n            return False\n    for letter in s2:\n        if letter in seen: continue\n        if s1.count(letter) < s2.count(letter):\n            return False\n        else: seen.append(letter)\n    return True", "from collections import Counter\ndef scramble(s1, s2):\n    s1_count, s2_count = Counter(s1), Counter(s2)\n    return all(s1_count[letter] >= s2_count[letter] for letter in s2) ", "def scramble(s1, s2):\n    d1={}\n    for ch in s1:\n        if ch not in d1: d1[ch]=1\n        else: d1[ch] = d1[ch]+1\n    for ch in s2:\n        try:\n            if d1[ch]==0: return False\n        except KeyError: \n            return False\n        else: d1[ch]=d1[ch]-1\n    return True", "from collections import Counter\ndef scramble(s1, s2):\n    d1, d2 = Counter(s1), Counter(s2)\n    for k, v in list(d2.items()):\n        if v > d1[k]:\n            return False\n    return True\n"]