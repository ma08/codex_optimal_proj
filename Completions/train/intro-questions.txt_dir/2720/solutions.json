["def solution(digits):\n    numlist = [int(digits[i:i+5]) for i in range(0,len(digits)-4)]\n    return max(numlist)", "def solution(digits):\n    return int(max(digits[a:a + 5] for a in range(len(digits) - 4)))", "def solution(digits):\n    result = -1;\n    for i in range(len(digits)):\n        current = int(digits[i: i+5])\n        if current >= result:\n            result = current\n    return result", "def solution(digits):\n    maxNum = 0\n    for i in range(len(digits)-4):\n        curNum = int(digits[i:i+5])\n        if curNum > maxNum:\n            maxNum = curNum\n    return maxNum", "def solution(digits):\n    cc = []\n    for i in range(len(digits)):\n        cc.append(digits[i:i+5])\n    return int(max(cc))", "def solution(digits):\n    mx = 0\n    for i in range(len(digits) - 4):\n        n = int(digits[i:i + 5])\n        if n > mx:\n            mx = n\n    return mx", "def solution(digits):\n    return int(max(''.join(digits[n:n + 5]) for n in range(len(digits) - 4)))\n", "def solution(digits):\n    final = 0\n    stg = str(digits)\n    for (num1, num2) in enumerate(stg):\n        try:\n            if int(str(stg[num1]) + str(stg[num1+1])) > final:\n                final = int(str(stg[num1]) + str(stg[num1+1]))\n            if int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2])) > final:\n                    final = int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2]))\n            if int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2]) + str(stg[num1 + 3])) > final:\n                    final = int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2]) + str(stg[num1 + 3]))\n            if int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2]) + str(stg[num1 + 3]) + str(stg[num1 + 4])) > final:\n                    final = int(str(stg[num1]) + str(stg[num1 + 1]) + str(stg[num1 + 2]) + str(stg[num1 + 3]) + str(stg[num1 + 4]))\n  \n        except:\n            pass\n    return final", "from itertools import islice\ndef solution(digits):\n    return int(max(map(''.join, zip(*(islice(digits, a, None) for a in range(5))))))", "def solution(d):\n    return int(max([d[j:j+5]] for j in [i for i in range(len(d)) if d[i]==max(d)])[0])\n", "def solution(digits):\n    result = -1\n    for i in range(len(digits)):  # for each digit in the range of the digits (= without starting over, it will start and only go untill the last number, then no more checks)\n        # new number, starting one plus up to 4 next (index and untill index+5)\n        current = int(digits[i: i+5])\n        # if new number is higher than a previous check, it's a new result (check starts as -1, so every FIRST check is the new result)\n        if current >= result:\n            result = current  # it will loop untill the next check isn't higher; then it finishes and returns the result\n    return result", "def solution(digits):\n    a = []\n    for i in range(len(digits)-4):\n        a.append(give5LengthNumber(digits[i:]))\n    return(int(max(a)))\n    \ndef give5LengthNumber(num):\n    return num[0:5]", "def solution(digits):\n    mnum = 0\n    for i in range(5,len(digits)):\n        for j in range(i, len(digits)+1):\n            if int(digits[j-5:j])>mnum:\n                mnum = int(digits[j-5:j])\n    return mnum\n", "def solution(digits):\n    largest = 0\n    for i in range(len(digits)-4):\n        a = int(digits[i:i+5])\n        if (a > largest):\n            largest = a\n    return largest;", "def solution(digits):\n    return max(int(digits[i - 5: i]) for i, _ in enumerate(digits, 5))", "def solution(d):\n    for x in '9876543210':\n        for y in '9876543210':\n            for z in '9876543210':\n                for w in '9876543210':\n                    for q in '9876543210':\n                        if d.find(x + y + z + w + q) != -1:\n                            return int(x + y + z + w + q)", "def solution(x):\n    v = 99999\n    while v > 0:\n        if str(v) in str(x):\n            return v\n        v = v - 1", "def solution(digits):\n    max = 99999\n    while True:\n        if str(max) in digits:\n            return max\n        else:\n            max -= 1\n        \n    return 0;", "def solution(digits):\n    ans = []\n    for i in range(0, len(digits)-4):\n        ans.append(int(digits[i:i+5]))\n    return max(ans)\n", "def solution(s):\n    result = [i for i in s]\n    new = []\n    for i in range(0,len(result),1):\n        new.append(result[i:i+5])\n\n    Lnumber = int(''.join(map(str,max(new))))\n    return Lnumber\n\n\n", "def solution(digits):\n    maxdi = 0\n    for i in range(len(digits)-4):\n        each5 = int(digits[i:i+5])\n        if each5 > maxdi:\n            maxdi = each5\n    return maxdi", "def solution(digits):\n    number_string = str(digits)\n    \n    sequence_list = []\n    \n    for i in range(len(number_string) - 4):\n        \n        five_sequence = number_string[i:i+5]\n        \n        if int(five_sequence) > int(number_string[i+1:i+6]):\n            sequence_list.append(int(five_sequence))\n            \n    return max(sequence_list)\n", "def solution(digits):\n    maxi = 0\n    for i in range(len(digits) - 4):\n        if int(digits[i:i+5]) > maxi:\n            maxi = int(digits[i:i+5])\n    return maxi", "def solution(digits):\n    result = digits[:6]\n    for i in range(len(digits)):\n        s = digits[i:i+5]\n        if len(s) < 5:\n            break\n        if result < s:\n            result = s\n    return int(result);", "def solution(digits):\n    n = len(digits)\n    max = 0\n    for i in range(n - 4):\n        if(max < int(str(digits[i:i+5:]))):\n            max = int(str(digits[i:i+5:]))\n    return max", "def solution(digits):\n    x = str(digits)\n    empty = []\n    for i in range(0,len(x)):\n        empty.append(int(x[i:i+5]))\n        \n    return max(empty)", "def solution(digits):\n    biggest = 0\n    five = \"\"\n    for loop in range(len(digits)-4):\n        five = (digits[loop]+digits[loop+1]+digits[loop+2]+digits[loop+3]+digits[loop+4]);\n        if biggest<int(five):\n            biggest = int(five);\n    return biggest;\n", "def solution(digits):\n    return max([int(digits[item:item+5]) for item in range(len(digits)-4)])", "def solution(digits):\n    i = 0 \n    j = 5 \n    largest = 0\n    while j <= len(digits):\n        relative = int(digits[i:j])\n        if relative > largest:\n            largest = relative \n        i += 1\n        j += 1\n    return largest\n", "def solution(digits):\n    number = 0\n    digits = str(digits)\n    for i in range(len(digits)):\n        slice = digits[i:i + 5]\n        if  int(slice) > number: number = int(slice) \n    return number\n", "def solution(digits):       \n    k = []\n    for i in range(len(digits)): k.append(int(digits[i:i+5]))\n    return max(k)", "def solution(digits):       \n    i, k = 0, []\n    while i<len(digits):\n        k.append(int(digits[i:i+5]))\n        i += 1\n    return max(k)", "def solution(digits):\n    digits = str(digits)        \n    i, k = 0, []\n    while i<len(digits):\n        k.append(int(digits[i:i+5]))\n        i += 1\n    return max(k)", "def n(digits):\n    digits = str(digits)\n    k = []\n    i = 0\n    while i<len(digits):\n        k += [int(digits[i:i+5])]\n        i += 1\n    return k\n            \n\nsolution = lambda digits: max(n(digits))", "def n(digits):\n    digits = str(digits)\n    k = []\n    i = 0\n    while i<len(digits):\n        k += [int(digits[i:i+5])]\n        i += 1\n    return k\n            \n\ndef solution(digits):\n    return max(n(digits))", "def solution(digits):    \n    n=0\n    e=len(digits)-1\n    for x in range(0,len(digits)-1):\n        if int(digits[x:x+5])>n:n=int(digits[x:x+5])\n        else:continue\n    return n\n        \n        \n", "def solution(digits):\n    maxima = 0\n    for i in range(len(digits)):\n        if int(digits[i:i+5]) > maxima:\n            maxima = int(digits[i:i+5])\n    return maxima\n", "def solution(digits):\n    digit_ints = [int(x) for x in digits]\n    max_digit = max(digit_ints)\n    max_locs = [i for i in range(len(digits)) if digit_ints[i] == max_digit and i <= len(digits) - 5]\n    while max_locs == []:\n        max_digit -= 1\n        max_locs = [i for i in range(len(digits)) if digit_ints[i] == max_digit and i <= len(digits) - 5]\n    return max([int(digits[loc:loc + 5]) for loc in max_locs])", "def solution(digits):\n    n = 0\n    for i in range(len(digits)):\n        if int(digits[i:i+5])>n:\n            n = int(digits[i:i+5])\n        \n    return n", "def solution(digits):\n    i=0\n    j=5\n    maks=0\n    while j<=len(digits):\n        maks=max(maks,int(digits[i:j]))\n        i+=1\n        j+=1\n    return maks", "def solution(digits):\n    ans = None\n    for i in range(0,len(digits)):\n        if ans is None:\n            ans = int(digits[i:i+5:])\n        elif int(digits[i:i+5]) > ans:\n            ans = int(digits[i:i+5])\n    return ans", "def solution(digits):\n    number=0\n    max=0\n    for i in range(len(digits)-4):\n        number=digits[i:i+5]\n        number=int(number)\n        if number>max:\n            max=number\n    return max", "def solution(digits):\n    number = str(digits)\n    max_seq = ''\n    for i in range(len(number) - 3):\n        if number[i:i+5] > max_seq:\n            max_seq = number[i:i+5]\n    return int(max_seq)", "def solution(digits):\n    sl = 0\n    res_list = []\n    for count in range(len(digits) - 1):\n        res_list.append(int(digits[sl: sl + 5]))\n        sl += 1\n    return max(res_list)", "def solution(digits):\n    digits=str(digits)\n    x=[int(digits[i:i+5]) for i in range(len(digits)-4)]\n    return max(x)\n", "def solution(digits):\n    largest = ''\n    for i in range(len(digits) - 4):\n        if digits[i:i+5] > largest:\n            largest = digits[i:i+5]\n    return int(largest)", "def solution(digits):\n    \n    l = []\n    \n    for i in range(len(str(digits))-4):\n        total = int(digits[i:i+5])\n        l.append(total)\n    return(max(l))\n    \n", "def solution(digits):\n    cur = int(digits[:5])\n    mx = cur\n    for i in range(5, len(digits)):\n        cur = (cur % 10000) * 10 + int(digits[i])\n        if mx < cur: mx = cur\n    return mx", "def solution(digits):\n    nw_lst=[]\n    for i in range(len(digits)-4):\n        nums = int(digits[i:i+5])\n        nw_lst.append(nums)\n    return max(nw_lst);", "def solution(digits):\n    maxes = max([int(digits[j:j+5]) for j,k in enumerate(digits)])\n    return maxes\n", "def solution(digits):\n    lst = []\n    for i in range(len(digits)):\n        lst.append(digits[i:i+5])\n    return int(max(lst))", "def solution(digits):\n    h_seq = 0\n    for i in range(0, len(digits) - 4):\n        if int(digits[i: i+5]) > h_seq:\n            h_seq = int(digits[i: i+5])\n    return h_seq", "def solution(digits):\n    lst = list(map(int, digits))\n    answ = []\n    for i in range(0, len(lst) - 4):\n        x = lst[i:i+5]\n        z = ''\n        for j in x:\n            z += str(j)\n        answ.append(int(z))\n    return max(answ)", "def solution(digits):\n    x = [digits[index:index+5] for index, value in enumerate(digits)]\n    resul = max(x)\n    return int(resul);", "def solution(digits):\n    f = lambda x: [x[i:i+5] for i in range(len(x)+1-5)]\n    numbers = str(digits)\n    return max(list(map(int, f(numbers))))\n", "def solution(digits):\n    max = 0\n    for i in range(0, len(digits)):\n        n = int(digits[i:i+5])\n        if n > max:\n            max = n\n    \n    return max", "def solution(digits):\n    best = 0\n    \n    for i in range(len(digits) - 4):\n        n = int(digits[i:i + 5])\n        \n        if n > best:\n            best = n\n    \n    return best\n", "def solution(digits):\n    return max([int(digits[start:start+5]) for start in range(len(digits) - 4)])", "def solution(digits):\n    return max([int(digits[start:start+5]) for start in range(len(digits))])\n", "def solution(digits):\n    b = int(max(digits[a:a + 5] for a in range(len(digits) - 4)))\n    return b", "def solution(digits):\n    solution = int(digits[0:5])\n    for index in range(1, len(digits)):\n        current = int(digits[index:index+5])\n        solution = current if current > solution else solution\n\n    return solution", "def solution(digits):\n    numli=[]\n    if len(digits)>5:\n        for ind in range(len(digits)):\n            if ind <= len(digits)-5:\n                num=digits[ind:ind+5]\n                numli.append(num)\n    elif len(digits)<=5:\n        numli.append[0]\n\n    #print(numli)\n    return int(max(numli))", "def solution(digits):\n    d = str(digits)\n    n = 0\n    for x in range(0, len(d)-4):\n        if int(d[x:x+5]) > n:\n            n = int(d[x:x+5])\n    return n", "def solution(digits):\n    if digits == \"\":\n        return 0\n    splice = 5\n    lst = []\n    for i,v in enumerate(digits):\n        lst.append(digits[i:i+splice])\n    maxval = (int(max(lst)))\n    return maxval\n", "def solution(digits):\n    max = 0\n    for i in range(len(str(digits)) - 4):\n        tmp = int(str(digits)[i:i+5])\n        if tmp > max : max = tmp\n    return max", "def solution(digits):\n    num = [digits[i:i+5] for i in range(len(digits)-4)]\n    num.sort()\n    return int(num[-1])\n", "def solution(digits):\n    biggest = int(digits[0:5])\n    for i in range(0,int(len(digits))-4):\n        if biggest<int(digits[i:i+5]):\n            biggest = int(digits[i:i+5])\n    return biggest", "def solution(digits):\n    if len(str(digits))<5:\n        return digits\n    \n    string=str(digits)\n    \n    list2=[ ]\n\n    maxi=len(string)-4\n    i=0\n    \n    while i < maxi:\n        for s, x in enumerate(string):\n            list2.append(int(string[s:(s+5)]))\n            i=i+1\n            \n    return max(list2)", "def solution(digits):\n    x = 0\n    m = 5\n    i = 0\n    for i in range(len(digits)):\n        if int(digits[i:i+5]) > x:\n            x = int(digits[i:i+5])\n            i += 1\n    else:\n        i += 1\n    \n    return x", "def solution(digits):\n    \n    all = []\n    for x in range(len(digits)):\n        all.append(int(digits[x:x+5]))\n    \n    return max(all)", "def solution(digits):   \n    return max(int(digits[n:n+5]) for n in range(len(digits) - 4)) if digits else 0\n", "def solution(digits):\n    record=0\n    for i in range(0,len(digits)-4):\n        current = int(digits[i:i+5])\n        #print(current)\n        if current > record:\n            record = current\n    return record", "def solution(d):\n    s = str(d)\n    return max([int(s[i:i+5]) for i in range(len(s)-4)])\n", "import re\n\ndef solution(digits):\n    \n                \n    numlist = [int(digits[i:i+5]) for i in range(0,len(digits)-4)]\n            \n    return max(numlist);", "def solution(digits):\n    k = 5\n    ret = int(digits[0:k])\n    index = 5\n    while index+k < len(digits):\n        temp = digits[index: index + k]\n        ret = max(ret, int(temp))\n        index += 1\n    ret = max(ret, int(digits[index:]))\n    return ret\n", "def solution(digits):\n    max_num = 0\n    for index in range(len(digits)-4):\n        num = int(digits[index:index+5])\n        if num > max_num:\n            max_num = num\n    print(max_num)\n    return max_num;", "def solution(digits):\n    ans = 0\n    for i in range (0, len(digits)):\n        if int(digits[i:i+5]) > ans:\n            ans = int(digits[i:i+5])\n    return ans", "def solution(digits):\n    lst = [digits[i:i+5] for i in range(0, len(digits))]\n    return int(max(lst))\n", "def solution(digits):\n    n = []\n    for i in range(0,len(digits)):\n        s = str(digits)[i:i+5]\n        n.append(s)\n    new = [int(i) for i in n]\n    return max(new)\n", "def solution(digits):\n    return max([int(digits[loop] + digits[loop + 1] + digits[loop + 2] + digits[loop + 3] + digits[loop + 4]) for loop in range(len(digits) - 4)])", "def solution(digits):\n    all = []\n    j = 5\n    while j <= len(digits):\n        all.append(int(digits[j-5:j]))\n        j+=1\n    return max(all)", "def solution(digits):\n    x = []\n    for i in range(0,len(digits)):\n        x.append(int(digits[i:i+5]))\n    return max(x)", "def solution(d):\n    return max([int(d[x:x+5]) for x in range(len(d)-4)])", "def solution(digits):\n    num,i=0,0\n    while i <len(digits)-4:\n        if int(digits[i:i+5])>num:\n            num = int(digits[i:i+5])\n        i+=1\n    return num", "def solution(digits):\n    l=len(digits)\n    start,end,max=0,5,0\n    while 1:\n        a=(digits)[start:end]\n        if int(a)>max:\n            max=int(a)\n        start+=1\n        end+=1\n        if end==l+1:\n            break\n    return max", "def solution(digits):\n    maxseq = 0\n    for x in range(len(digits) - 4):\n        if int(digits[x:x + 5]) > maxseq:\n            maxseq = int(digits[x:x + 5])\n    return maxseq\n\n", "def solution(digits):\n    v = [digits[i:i+5] for i in range(len(digits)-4)]\n    v.sort()\n    return int(v[-1])", "def solution(digits):\n    largest = 0\n    for i in range(len(digits)-4):\n        sliced = int(digits[i:i+5])\n        if sliced > largest:\n            largest = sliced\n    return largest", "def solution(digits):\n    b = digits\n    start_rez = 0\n    end_rez = 5\n    max = 0\n\n    while end_rez <= len(b) + 1:\n        rez = b[start_rez:end_rez]\n        if max < int(rez):\n            max = int(rez)\n            if end_rez < len(b):\n                start_rez += 1\n                end_rez += 1\n        else:\n            start_rez += 1\n            end_rez += 1\n    return int(max)", "def solution(digits):\n    step_index = 0\n    index = 0\n    step_sum = ''\n    max_sum = '0'\n    while step_index + 5 != len(digits) + 1:\n        while index < step_index + 5:\n            step_sum += digits[index]\n            index = index + 1\n        step_index = step_index + 1\n        index = (index - 5) + 1\n        if int(step_sum) > int(max_sum):\n            max_sum = step_sum\n        step_sum = ''\n    return int(max_sum)", "def solution(digits):\n    number = 0\n    for i in range(len(digits)):\n        num = int(digits[i:i+5])\n        if num > number:\n            number = num\n    return number;", "def solution(digits):\n    num = 0\n    for x in range(0, len(digits)-1):\n        if int(digits[x:x+5]) > int(num):\n            num = digits[x:x+5] \n    return(int(num))", "def solution(digits):\n    if len(digits)<5:\n        return int(digits)\n    i=0\n    ans = 0\n    for j in range(len(digits)):\n        while j-i+1 > 5:\n            i+=1\n        num = int(digits[i:j+1])\n        if num > ans:\n            ans = num\n    \n    return ans;", "def solution(digits):\n    def helper_func(item):\n        temp = ''\n        for i in item:\n            temp = temp + str(i)\n        return temp\n    number_arr = [i for i in digits]\n    result = [number_arr[i:i+5] for i in range(0, len(number_arr) - 4)]\n    string_res = [helper_func(i) for i in result]\n    return max([int(i) for i in string_res])\n\n", "def solution(digits):\n    max = 0\n    seq = 0\n    for d in range(0,len(digits)):\n        seq = int(digits[d:d+5])\n        if seq > max:\n            max = seq\n    return max", "def solution(digits):\n    numlist = [int(digits[i:i+5]) for i in range(len(digits))]\n    return max(numlist)", "def solution(digits):\n    max_num = 0\n    for i in range(len(digits)-4):\n        curr_num = int(digits[i:i+5])\n        if curr_num > max_num:\n            max_num = curr_num\n    return max_num", "def solution(digits):\n    numlist = [int(digits[i:i+5]) for i in range(0,len(digits)-4)]\n    return max(numlist)\ndef solution(digits):\n    return int(max(digits[a:a + 5] for a in range(len(digits) - 4)))\ndef solution(digits):\n    result = -1;\n    for i in range(len(digits)):\n        current = int(digits[i: i+5])\n        if current >= result:\n            result = current\n    return result\n\n", "def solution(x):\n    a=''\n    i=0\n    while i<=len(x)-5:\n        a+=x[i:i+5] + ' '\n        i+=1\n    return int(max(a.split()))", "def solution(digits):\n    biggest = 0\n    for x in range(len(digits)-4):\n        num = int(digits[x]+digits[x+1]+digits[x+2]+digits[x+3]+digits[x+4])\n        if num > biggest:\n            biggest = num\n    return biggest"]