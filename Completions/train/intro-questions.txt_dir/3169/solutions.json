["def count_odd_pentaFib(n):\n    return 2 * (n // 6) + [0, 1, 2, 2, 2, 2][n % 6] - (n >= 2)", "buf = [0,1,1,2,4]\ndef count_odd_pentaFib(n):\n    while len(buf)<=n:\n        buf.append(sum(buf[-5:]))\n    return len([i for i in set(buf[:n+1]) if i&1])\n", "def count_odd_pentaFib(n):\n    if n == 0 :\n        return 0\n    if n < 5:\n        return 1\n    i = 4\n    cnt = 1\n    a, b, c, d, e = 0, 1, 1, 2, 4\n    while i < n:\n        a, b, c, d, e = b, c, d, e, a + b + c + d + e\n        if e % 2 == 1:\n            cnt += 1\n        i += 1\n    return cnt\n", "def count_odd_pentaFib(n):\n    st = [0, 1]\n    count = 0\n    if 0< n < 2: return 1\n    if n <= 0 : return 0\n    while n >= 2:\n        if sum(st[-5:]) % 2 != 0: count += 1\n        st.append(sum(st[-5:]))\n        n -= 1\n    return count", "penta_fib_table = {\n    0: 0,\n    1: 1,\n    2: 1,\n    3: 2,\n    4: 4\n}\ndef penta_fib(n):\n    if n in penta_fib_table:\n        return penta_fib_table[n]\n    return penta_fib(n - 1) + penta_fib(n - 2) + penta_fib(n - 3) + penta_fib(n - 4) + penta_fib(n - 5)\n\ndef count_odd_pentaFib(n):\n    odd_terms = []\n    for i in range(1, n + 1):\n        penta_fib_i = penta_fib(i)\n        penta_fib_table[i] = penta_fib_i\n        if penta_fib_i % 2 == 1:\n            odd_terms.append(penta_fib_i)\n    return len(set(odd_terms))", "from functools import lru_cache\n\n\n@lru_cache()\ndef pentabonacci(n):\n    return n if n in(0, 4) else 1 if n in (1, 2) else 2 if n == 3 else sum(pentabonacci(n - k) for k in range(1, 6))\n\n\ndef count_odd_pentaFib(n):\n    return sum(1 for i in range(n + 1) if pentabonacci(i) % 2) - (1 if n > 1 else 0)", "from collections import deque\ndef count_odd_pentaFib(n):\n    if n == 0: return 0\n    elif n < 6: return 1\n    \n    def pentabonacci(max_term):\n        terms = deque((1,1,2,4,8), 5)\n        m = max_term - 5\n        for i in range(m):\n            next_term = sum(terms)\n            yield next_term\n            terms.append(next_term)\n    \n    return len(set((term for term in pentabonacci(n) if term % 2 == 1))) + 1\n", "from collections import deque\nfrom itertools import islice, groupby\n\ndef odd_penta_fib():\n    q = deque([0, 1, 1, 2, 4, 8], maxlen=6)\n    while True:\n        yield q[0]\n        q.append(q[-1] * 2 - q[0])\n        \ndef count_odd_pentaFib(n):\n    return sum(1 for key, grp in groupby(islice(odd_penta_fib(), n+1)) if key % 2 == 1)", "vector = [0, 1, 1, 2, 4]\nanswers = [0, 1, 1, 1, 1]\nfor i in range(43996):\n    vector = vector[1:] + [sum(vector)]\n    answers.append(answers[-1] + vector[-1] % 2)\n  \ndef count_odd_pentaFib(n):\n    return answers[n]"]