["from functools import reduce\n\n\ndef disjunction(operands, is_exclusive):\n    return reduce(bool.__xor__ if is_exclusive else bool.__or__, operands)", "from functools import reduce\n\ndef disjunction(operands, is_exclusive):\n    op = int.__xor__ if is_exclusive else int.__or__\n    return reduce(op, operands)", "from functools import reduce\nfrom operator import or_, xor\n\ndef disjunction(operands, is_exclusive):\n    return reduce(xor if is_exclusive else or_, operands)", "disjunction=lambda o, e: o.count(True) % 2 if e else True in o", "from functools import reduce\n\ndef disjunction(operands, is_exclusive):\n    return reduce(getattr(bool, f\"__{'x' if is_exclusive else ''}or__\"), operands)", "def disjunction(operands, is_exclusive):\n    return sum(operands) & 1 if is_exclusive else any(operands)", "from operator import or_, xor\nfrom functools import reduce\ndef disjunction(operands, is_exclusive):\n    return reduce([or_, xor][is_exclusive], operands)", "def disjunction(operands, is_exclusive):\n    return sum(operands)%2 if is_exclusive else any(operands) ", "from functools import reduce\n\ndef disjunction(operands, is_exclusive):\n    return reduce(bool.__ne__ if is_exclusive else bool.__or__, operands)", "from functools import reduce\nfrom operator import xor, or_\n\ndisjunction = lambda a, b: reduce(xor if b else or_, a)"]