["def ordering_beers(beers):\n    assert 0 <= beers < 100\n    \n    units = [\"\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\" , \"siedem\", \"osiem\", \"dziewiec\",\n            \"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\"]\n    tens  = [\"\", \"\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\n    \n    if beers == 0:\n        order = \"Woda mineralna\"\n    elif beers == 1:\n        order = \"Jedno piwo\"\n    elif beers < 20:\n        order = units[beers] + \" piw\"\n    else:\n        order = tens[beers // 10] + \" \" * bool(beers % 10) + units[beers % 10] + \" piw\"\n    \n    if beers % 10 in [2, 3, 4] and beers not in [12, 13, 14]:\n        order += \"a\"\n    \n    return order.capitalize() + \" poprosze\"", "def ordering_beers(beers):\n    one_to_ten = {1: \"jeden\", 2: \"dwa\", 3: \"trzy\", 4: \"cztery\", 5: \"piec\", 6: \"szesc\", 7: \"siedem\", 8: \"osiem\", 9: \"dziewiec\"}\n    ten_to_nineteen = {10: \"dziesiec\", 11: \"jedenascie\", 12: \"dwanascie\", 13: \"trzynascie\", 14: \"czternascie\", 15: \"pietnascie\", 16: \"szesnascie\", 17: \"siedemnascie\", 18: \"osiemnascie\", 19: \"dziewietnascie\"}\n    twenty_to_ninety = {20: \"dwadziescia\", 30: \"trzydziesci\", 40: \"czterdziesci\", 50: \"piecdziesiat\", 60: \"szescdziesiat\", 70: \"siedemdziesiat\", 80: \"osiemdziesiat\", 90: \"dziewiecdziesiat\"}\n    if 99 > beers < 0:\n        raise Exception()\n    if beers == 0:\n        return \"Woda mineralna poprosze\"\n    else:\n        beers_str = list(str(beers))\n        piwa = [2, 3, 4]\n        if len(beers_str) > 1:\n            if 10 <= beers <= 19:\n                return ten_to_nineteen[beers].capitalize() + \" piw poprosze\"\n            if beers >= 20:\n                result = twenty_to_ninety[int(beers_str[0] + \"0\")].capitalize()\n                return result + \" piw poprosze\" if beers_str[1] == '0' else result + \" \" + one_to_ten[int(beers_str[1])] + \" piwa poprosze\" if int(beers_str[1]) in piwa else result + \" \" + one_to_ten[int(beers_str[1])] + \" piw poprosze\"\n        else:\n            ones = one_to_ten[int(beers_str[0])]\n            return (\"Jedno piwo poprosze\" if beers == 1 else str(ones).capitalize() + \" piwa poprosze\" if beers in piwa else str(ones).capitalize() + \" piw poprosze\")", "ones = {0:\"Woda\", 1:\"Jeden\", 2:\"dwa\", 3:\"trzy\", 4:\"cztery\", 5:\"piec\", 6:\"szesc\" , 7:\"siedem\", 8:\"osiem\", 9:\"dziewiec\"}\ntwos = {10:\"dziesiec\", 11:\"jedenascie\", 12:\"dwanascie\", 13:\"trzynascie\", 14:\"czternascie\", 15:\"pietnascie\", 16:\"szesnascie\", 17:\"siedemnascie\", 18:\"osiemnascie\", 19:\"dziewietnascie\"}\ntens = {10:\"dziesiec\", 20:\"dwadziescia\", 30:\"trzydziesci\", 40:\"czterdziesci\", 50:\"piecdziesiat\", 60:\"szescdziesiat\", 70:\"siedemdziesiat\", 80:\"osiemdziesiat\", 90:\"dziewiecdziesiat\"}\n\nordering_beers=lambda n:[ones.get(n,twos.get(n,tens.get(n,tens[(n//10or 1)*10]+' '+ones[n%10]))),'Jedno'][n==1].capitalize() + ' ' +\\\n                        ['mineralna',['piwo',['piw','piwa'][n in[2,3,4]or(n//10in[2,3,4]and n%10 in[2,3,4])]][n!=1]][n!=0] + ' ' +\\\n                        'poprosze'", "UNITS = \" jeden dwa trzy cztery piec szesc siedem osiem dziewiec\".split(\" \")\nTENS = \"dziesiec jedenascie dwanascie trzynascie czternascie pietnascie szesnascie siedemnascie osiemnascie dziewietnascie\".split(\" \")\nTENTH = \"  dwadziescia trzydziesci czterdziesci piecdziesiat szescdziesiat siedemdziesiat osiemdziesiat dziewiecdziesiat\".split(\" \")\n\ndef ordering_beers(n):\n    if not 0 <= n < 100: raise ValueError(\"Nie wiem\")\n    t, u = divmod(n, 10)\n    number = {0: UNITS[u], 1: TENS[u]}.get(t, TENTH[t] + \" \" * (u > 0) + UNITS[u])\n    plural = \"piwa\" if t != 1 and 1 < u < 5 else \"piw\"\n    order = {0: \"woda mineralna\", 1: \"jedno piwo\"}.get(n, number + \" \" + plural)\n    return \"{} poprosze\".format(order).capitalize()", "def ordering_beers(beers):\n    assert 0 <= beers < 100\n    \n    units = [\"\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\" , \"siedem\", \"osiem\", \"dziewiec\",\n            \"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\"]\n    tens  = [\"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\n    \n    order = [\"Woda mineralna\", \"Jedno piwo\"]\n    \n    for i, num in enumerate(units[2:], 2):\n        order.append(\"%s piw%s\" % (num, \"a\" if i in [2, 3, 4] else \"\"))\n    \n    for n in tens:\n        for i in range(10):\n            order.append(\"%s%s%s piw%s\" % (n, \" \" * bool(i), units[i], \"a\" if i in [2, 3, 4] else \"\"))\n    \n    return order[beers].capitalize() + \" poprosze\"", "singleNums = [\"zero\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\" , \"siedem\", \"osiem\", \"dziewiec\"]\ntenth = [\"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\"] \ntens = [\"dziesiec\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\n\ndef ordering_beers(beers):\n    \n    if beers < 0:\n        raise ValueError('No negative values')\n    elif beers < 1:\n        return \"Woda mineralna poprosze\"\n    elif beers == 1:\n        return \"Jedno piwo poprosze\"\n    \n    \n    whole = beers // 10\n    modulo = beers % 10\n    \n    if beers > 10 and beers < 15:\n        noun = 'piw'\n    elif modulo > 1 and modulo < 5:\n        noun = 'piwa'\n    else:\n        noun = 'piw'\n    \n    if beers < 10:\n        numeral = singleNums[beers]\n    elif beers > 9 and beers < 20:\n        numeral = tenth[modulo]\n    elif modulo == 0 and beers > 19:\n        numeral = tens[whole-1]\n    else:\n        numeral = tens[whole-1] + ' ' + singleNums[modulo]\n    \n    return numeral.capitalize() + ' ' + noun + ' poprosze'", "ones = [\"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\" , \"siedem\", \"osiem\", \"dziewiec\"]\nteens = [\"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\"]\ntens = [\"dziesiec\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\n\ndef ordering_beers(beers):\n    if beers < 0: raise 'No negative beers'\n    if not beers: return 'Woda mineralna poprosze'\n    output = ''\n    ending = 'o' if beers == 1 else 'a' if (beers % 10) in (2, 3, 4) and not beers in (12, 13, 14) else ''\n    if beers > 19:\n        output = tens[beers // 10 - 1]\n        beers %= 10\n    elif beers > 9:\n        output = teens[beers - 10]\n        beers = 0\n    if beers:\n        if output: output += ' '\n        output += 'jedno' if beers == 1 and not ' ' in output else ones[beers - 1]\n    return f'{output} piw{ending} poprosze'.capitalize()", "def ordering_beers(beers):\n    oneToTwenty = ['zero','jeden','dwa','trzy','cztery','piec','szesc','siedem','osiem',\n        'dziewiec','dziesiec','jedenascie','dwanascie','trzynascie','czternascie',\n        'pietnascie','szesnascie','siedemnascie','osiemnascie','dziewietnasce','dwadziescia']\n    tens = [\"dziesiec\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \n        \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\n        \n    if beers < 0:\n        raise Exception(\"Only positive numbers!\")\n    elif beers == 0:\n        return \"Woda mineralna poprosze\"\n    elif beers == 1:\n        return \"Jedno piwo poprosze\"\n    elif beers <= 20:\n        order = oneToTwenty[beers]\n        order = order[:1].upper() + order[1:]\n    else:\n        order = tens[int(beers/10)-1] + \" \" + oneToTwenty[beers%10]\n        order = order[:1].upper() + order[1:]\n        \n    if beers in [12,13,14]:\n        order = order + \" piw\"\n    elif beers%10 in [2,3,4]:\n        order = order + \" piwa\"\n    else:\n        order = order + \" piw\"\n        \n    return order + \" poprosze\"", "dict_units={\n    0:\"Woda\",\n    1:\"jeden\",\n    2:\"dwa\",\n    3:\"trzy\",\n    4:\"cztery\",\n    5:\"piec\",\n    6:\"szesc\",\n    7:\"siedem\",\n    8:\"osiem\",\n    9:\"dziewiec\"\n}\n\n\ndict_units_1={\n    10:\"dziesiec\",\n    11:\"jedenascie\",\n    12:\"dwanascie\",\n    13:\"trzynascie\",\n    14:\"czternascie\",\n    15:\"pietnascie\",\n    16:\"szesnascie\",\n    17:\"siedemnascie\",\n    18:\"osiemnascie\",\n    19:\"dziewietnascie\"\n}\n\n\n\ndict_dec={\n    10:\"dziesiec\",\n    20:\"dwadziescia\",\n    30:\"trzydziesci\",\n    40:\"czterdziesci\",\n    50:\"piecdziesiat\",\n    60:\"szescdziesiat\",\n    70:\"siedemdziesiat\",\n    80:\"osiemdziesiat\",\n    90:\"dziewiecdziesiat\"\n}\n\ndef ordering_beers(beers):\n\n    if beers > 99:\n        raise Exception\n\n    length=len(str(beers))\n    digit_l=None\n    digit_r=None\n    beer_word=None\n    please=\"poprosze\"\n\n    if length > 1:\n\n        if beers in [10,20,30,40,50,60,70,80,90]:\n            return \"{} {} {}\".format(dict_dec[beers].capitalize(), \"piw\", please)\n        elif beers in [11,12,13,14,15,16,17,18,19]:\n            return \"{} {} {}\".format(dict_units_1[beers].capitalize(), \"piw\", please)\n\n        digit_l=int((str(beers))[0])\n        digit_r=int((str(beers))[1])\n\n\n\n        if digit_r in [2,3,4]:\n            beer_word=\"piwa\"\n\n        elif digit_r==1:\n            beer_word=\"piw\"\n\n        elif digit_r==0:\n            beer_word=\"mineralna\"\n\n        else:\n            beer_word=\"piw\"\n\n        return \"{} {} {} {}\".format(dict_dec[digit_l*10].capitalize(),dict_units[digit_r] , beer_word, please)\n\n\n\n    else:\n\n\n\n\n        digit_r=int(beers)\n\n        if digit_r in [2,3,4]:\n            beer_word=\"piwa\"\n        elif digit_r==1:\n            beer_word=\"piwo\"\n\n        elif digit_r==0:\n            beer_word=\"mineralna\"\n\n        else:\n            beer_word=\"piw\"\n\n        if beers==1:\n            return \"{} {} {}\".format(\"Jedno\".capitalize(), beer_word, please)\n\n        return \"{} {} {}\".format(dict_units[digit_r].capitalize(), beer_word, please)\n\n\n\n", "def ordering_beers(beers):\n    num_0_to_19_in_polish=(\"zero\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\" , \"siedem\", \"osiem\", \"dziewiec\",\"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\")\n    tens_10_to_90_in_polish=(\"dziesiec\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\", \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\")\n    if beers==0:\n        number=\"Woda\"\n        beverage=\"mineralna\"\n    elif beers==1:\n        number=\"Jedno\"\n        beverage=\"piwo\"\n    elif beers<=19 and beers>0:\n        number=num_0_to_19_in_polish[beers]\n        if beers in (2,3,4):\n            beverage=\"piwa\"\n        else:\n            beverage=\"piw\"\n    elif beers<=99 and beers>0:\n        tens=beers//10\n        remains=beers%10\n        if remains==0:\n            number=tens_10_to_90_in_polish[tens-1]\n        else:\n            number=tens_10_to_90_in_polish[tens-1]+\" \"+num_0_to_19_in_polish[remains]\n        if remains in (2,3,4):\n            beverage=\"piwa\"\n        else:\n            beverage=\"piw\"\n    else:\n        raise Exception(\"\u8f93\u5165\u53d8\u91cf\u8d8a\u754c\")\n    number1=number.capitalize()\n    return number1+\" \"+beverage+\" poprosze\""]