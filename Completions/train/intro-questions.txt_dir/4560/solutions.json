["def answer(question, information):\n    score, info = max((sum(word in info.lower().split() for word in question.lower().split()), info) for info in information)\n    return None if not score else info\n", "import re\n\ndef answer(question, information):\n    pattern = re.compile(r'\\b({})\\b'.format('|'.join(set(question.lower().split()))), re.I)\n    m = max( ( len(pattern.findall(i)), i) for i in information)\n    return m[1] if m[0] else None", "def answer(question, informations):\n    question_words = set(question.lower().split())\n    compare = lambda information: len(question_words & set(information.lower().split()))\n    return max([\"\"] + informations, key=compare) or None\n", "def answer(s, a):\n    s = set(s.lower().split())\n    a = [(x, set(x.lower().split())) for x in a]\n    r = max(a, key=lambda x: len(x[1] & s))\n    if r[1] & s: return r[0]", "from functools import partial\n\ndef score(q, a):\n    return len(q.intersection(a.lower().split()))\n\ndef answer(question, information):\n    q = set(question.lower().split())\n    a = max(information,key=partial(score, q))\n    if score(q, a):\n        return a", "def answer(information,question):\n    i = set(map(str.lower,information.split()))\n    m  = max(['']+question, key = lambda x: sum(x.lower() in i for x in x.split()))\n    return m or None", "def answer(question, information):\n    words = set([w for w in question.lower().split()])\n    r = sorted([(len(set([w for w in info.lower().split()]) & words), info) for info in information])[-1]\n    return r[1] if r[0] else None", "def answer(question,information):\n    info=[ i.split(\" \")  for i in information]\n    ques=question.lower().split(\" \")\n    high=0 ; iHigh=-1\n    for i in range(len(info)):\n        score=0\n        for j in info[i]:\n            if j.lower() in ques:\n                score+=1 \n        if score>high:\n            iHigh=i\n            high=score\n    if iHigh==-1:return None\n    a=\"\".join(j+\" \" for j in info[iHigh])[:-1]\n    return a\n    \n        \n", "answer=lambda q,i:(lambda p=__import__(\"re\").compile(r'\\b(%s)\\b'%('|'.join(set(q.lower().split()))),__import__(\"re\").I):(lambda m=max(((j,len(p.findall(j)))for j in i),key=lambda t:t[1]):m[0]if m[1]else None)())()", "from collections import Counter\ndef answer(qs, info):\n    qs, option = Counter(qs.lower().split()), []\n    for i in info:\n        c = sum(l == qs.get(k) for k, l in Counter(i.lower().split()).items())\n        option.append([c, i] if c else [0,None])\n    return max(option)[1]"]