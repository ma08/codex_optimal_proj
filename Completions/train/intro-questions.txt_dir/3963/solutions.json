["def getDivs(n):\n    return {1} | {y for x in range(2,int(n**.5)+1) for y in [n//x, x] if not n%x}\n\ndef amicable_numbers(n1,n2):\n    return sum(getDivs(n1)) == n2 and sum(getDivs(n2)) == n1", "def amicable_numbers(n1, n2):\n    return spd(n1) == n2 and spd(n2) == n1\n\ndef spd(n):\n    return sum(i for i in range(1, n) if n % i == 0)", "def factors(num):\n    return sum(i for i in range(1, num) if num % i == 0)\ndef amicable_numbers(n1,n2):\n    return factors(n1) == n2 and factors(n2) == n1\n", "def amicable_numbers(n1,n2):\n    s1 = sum([x for x in range(1,n1) if n1%x==0])\n    s2 = sum([x for x in range(1,n2) if n2%x==0])\n    return s1 == n2 and s2 == n1", "def amicable_numbers(n1,n2):\n    divisors1 = [i for i in range(1,n1) if n1%i==0]\n    divisors2 = [i for i in range(1,n2) if n2%i==0]\n    return bool(sum(divisors1)==n2 and sum(divisors2)==n1)", "#sum_div = lambda n: sum(d for d in range(1, n) if not n%d)\nsum_div = lambda n: sum(d + n // d for d in range(2, int(n ** .5) + 1) if not n%d) + 1 - n**.5/1 * (not n**.5%1)\namicable_numbers = lambda x, y: sum_div(x) == y and sum_div(y) == x", "def amicable_numbers(n1,n2):\n    return sum(d for d in range(1,n1//2 + 1) if not n1 % d) == n2 and sum(d for d in range(1,n2//2 + 1) if not n2 % d) == n1", "def amicable_numbers(n1,n2):\n    divisor_sum=lambda x:sum(i for i in range(1,x) if x%i==0)\n    return divisor_sum(n1)==n2 and divisor_sum(n2)==n1", "from functools import reduce\ndef amicable_numbers(n1,n2):\n    s1=reduce(lambda x,y: x+(y if n1%y==0 else 0), range(1, n1),0)\n    s2=reduce(lambda x,y: x+(y if n2%y==0 else 0), range(1, n1),0)\n    return s1==n2 and s2==n1", "def amicable_numbers(n1,n2):\n    count_1 = 0\n    count_2 = 0\n    product = 0\n    for i in range(1, n1):\n        if n1 % i == 0:\n            count_1 += i\n    for i in range(1, n2):\n        if n2 % i == 0:\n            count_2 += i\n    if n1 == count_2:\n        product += 1\n    if n2 == count_1:\n        product += 1\n    if product == 2:\n        return True\n    return False"]