["def calc_type(a, b, res):\n    return {a + b: \"addition\", a - b: \"subtraction\", a * b: \"multiplication\", a / b: \"division\"}[res]\n", "from operator import add, sub, mul, truediv\n\nOPS = ((\"addition\", add),\n       (\"subtraction\", sub),\n       (\"multiplication\", mul),\n       (\"division\", truediv))\n\ndef calc_type(a, b, res):\n    return next(kind for kind,f in OPS if f(a,b)==res)", "calc_type=lambda a,b,c:{a+b:'addit',a-b:'subtract',a*b:'multiplicat',a/b:'divis'}[c]+'ion'", "from operator import add as addition, sub as subtraction, mul as multiplication, truediv as division\n\ndef calc_type(a, b, res):\n    return next(\n        name for name in ['addition', 'subtraction', 'multiplication', 'division']\n        if globals()[name](a, b) == res\n    )", "def calc_type(a, b, res):\n    dict = {a+b:'addition',a-b:'subtraction',a*b:'multiplication',a/b:'division'}\n    return dict[res]", "def calc_type(a, b, res):\n    if a + b == res: return 'addition'\n    if a - b == res: return 'subtraction'\n    return 'multiplication' if a * b == res else 'division'", "def calc_type(a, b, res):\n    if a + b == res:\n        return \"addition\"\n    elif a - b == res:\n        return \"subtraction\"\n    elif a * b == res:\n        return \"multiplication\"\n    else:\n        return \"division\"", "def calc_type(a, b, res):\n  if a+b == res:\n    return \"addition\"\n  elif a-b == res:\n    return \"subtraction\"\n  elif a*b == res:\n    return \"multiplication\"\n  elif a/b == res:\n    return \"division\"", "def calc_type(a, b, res):\n    if res == a + b: return \"addition\"\n    if res == a * b: return \"multiplication\"\n    if res == a - b: return \"subtraction\"\n    if res == a / b: return \"division\"", "def calc_type(a, b, res):\n    if a-b == res: return \"subtraction\"\n    if a+b == res: return \"addition\"\n    if a*b == res: return \"multiplication\"\n    if a/b == res: return \"division\"\n    return \"no operation\""]