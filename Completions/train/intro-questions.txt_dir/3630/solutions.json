["def arithmetic(a, b, operator):\n    return {\n        'add': a + b,\n        'subtract': a - b,\n        'multiply': a * b,\n        'divide': a / b,\n    }[operator]", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a + b\n    elif operator == \"subtract\":\n        return a - b\n    elif operator == \"multiply\":\n        return a * b\n    elif operator == \"divide\":\n        return a / (b * 1.0)", "from operator import add, mul, sub, truediv\n\n\ndef arithmetic(a, b, operator):\n    ops = {'add': add, 'subtract': sub, 'multiply': mul, 'divide': truediv}\n    return ops[operator](a, b)", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a + b\n    elif operator == \"subtract\":\n        return a - b\n    elif operator == \"multiply\":\n        return a * b\n    elif operator == \"divide\":\n        return a / b\n    #your code here\n", "import operator\ndef arithmetic(a, b, operator_name):\n    operators = {\n        \"add\": operator.add,\n        \"subtract\": operator.sub,\n        \"multiply\": operator.mul,\n        \"divide\": operator.truediv\n    }\n    return operators[operator_name](a,b)", "def arithmetic(a, b, operator):\n    return a+b if operator=='add' else a-b if operator=='subtract' else a*b if operator=='multiply' else a/b", "def arithmetic(a, b, operator):\n    op = {\n        'add': '+',\n        'subtract': '-',\n        'multiply': '*',\n        'divide': '/'\n    }\n    return eval(\"{} {} {}\".format(a, op[operator], b))", "def arithmetic(a, b, op):\n    #your code here\n    d={'add':a+b,'subtract':a-b,'multiply':a*b,'divide':a/b,}\n    return d[op]", "def arithmetic(a, b, operator):\n    c = operator\n    if c == \"add\": return a+b\n    if c == \"subtract\": return a-b\n    if c == \"multiply\": return a *b\n    if c == \"divide\": return a / b", "def arithmetic(a, b, operator):\n    ops = {\"add\":\"+\",\"subtract\":\"-\",\"multiply\":\"*\",\"divide\":\"/\"}\n    return eval(str(a)+ops[operator]+str(b))", "def arithmetic(a, b, operator):\n    return {\n        'add': lambda a, b: a + b,\n        'subtract': lambda a, b: a - b,\n        'multiply': lambda a, b: a * b,\n        'divide': lambda a, b: a / b\n        }[operator](a, b)", "def arithmetic(a, b, operator):\n    op = {\"add\":\"+\", \"subtract\": \"-\", \"multiply\": \"*\", \"divide\": \"/\"}\n    return eval(str(a)+op[operator]+str(b))", "def arithmetic(a, b, op):\n    if op == \"add\":\n        return a+b\n    elif op == \"subtract\":\n        return a-b\n    elif op == \"divide\":\n        return a/b\n    else: \n        return a*b", "def arithmetic(a, b, operator):\n    return a * b if operator == \"multiply\" else a / b if operator == \"divide\" else a + b if operator == \"add\" else a - b", "operators = {\n    \"add\": int.__add__,\n    \"subtract\": int.__sub__,\n    \"multiply\": int.__mul__,\n    \"divide\": int.__truediv__,\n}\n\ndef arithmetic(a, b, op):\n    return operators[op](a, b)", "from operator import add, sub, mul, truediv as div\n\ndef arithmetic(a, b, operator):\n    return {'add': add, 'subtract': sub , 'multiply': mul, 'divide': div}[operator](a, b)", "def arithmetic(a, b, operator):\n    c = {\"add\": (a + b), \"subtract\": (a-b), \"multiply\": (a * b), \"divide\": (a/b)}\n    return c[operator]", "def arithmetic(a, b, operator):\n    switcher = {\n        'add': a + b,\n        'subtract': a - b,\n        'multiply': a * b,\n        'divide': a / b,\n    }\n    return switcher[operator]", "def arithmetic(a, b, operator):\n    ops = {\n        'add': lambda a,b: a + b,\n        'subtract': lambda a,b: a - b,\n        'multiply': lambda a,b: a * b,\n        'divide': lambda a,b: a / b}\n    return ops[operator](a,b)", "import operator\n\nops = {\n    'add': operator.add,\n    'subtract': operator.sub,\n    'multiply': operator.mul,\n    'divide': operator.truediv,\n}\n\ndef arithmetic(a, b, op):\n    return ops[op](a, b)", "def arithmetic(a, b, operator):\n  if operator == \"add\": return a+b\n  if operator == \"subtract\": return a-b\n  if operator == \"multiply\": return a*b\n  if operator == \"divide\": return a/b", "def arithmetic(a, b, operator):\n    dict = {\"add\": a + b, \"subtract\": a-b, \"multiply\": a*b, \"divide\": a/b}\n    return dict[operator]", "arithmetic=lambda a,b,o:__import__(\"operator\").__dict__[o[:3].replace('div','truediv')](a,b)", "def arithmetic(a, b, operator):\n    formats = {\n        \"add\": a+b,\n        \"subtract\": a-b,\n        \"divide\": a/b,\n        \"multiply\": a*b\n        }\n        \n    return formats.get(operator)\n", "from operator import *\ndef arithmetic(a, b, operator):\n    if operator=='add':\n        return add(a,b)\n    elif operator=='subtract':\n        return sub(a,b)\n    elif operator=='multiply':\n        return mul(a,b)\n    elif operator=='divide':\n        return truediv(a,b)\n", "def arithmetic(a, b, operator):\n     #your code here\\\n     while operator == 'add':\n        return a+b\n     while operator == 'subtract':\n        return a-b\n     while operator == 'multiply':\n        return a*b\n     while operator == 'divide':\n        return a/b", "def arithmetic(a, b, operator):\n  return eval(f'{a}{operator[0].translate(str.maketrans(\"asmd\", \"+-*/\"))}{b}')", "def arithmetic(a: int, b: int, operator: str) -> int:\n    \"\"\" Get the result of the two numbers having the operator used on them. \"\"\"\n    return {\n        \"add\": lambda: a + b,\n        \"subtract\": lambda: a - b,\n        \"multiply\": lambda: a * b,\n        \"divide\": lambda: a / b\n    }.get(operator)()", "def arithmetic(a, b, operator):\n    return (lambda a, b, operator:\n    (operator == \"add\" and a + b ) or\n    (operator == \"subtract\" and a - b) or\n    (operator == \"multiply\" and a * b) or\n    (operator == \"divide\" and a / b))(a, b, operator)", "def arithmetic(a, b, operator):\n    if operator.lower() == \"multiply\":\n        return eval(f\"{a}*{b}\")\n    if operator.lower() == \"divide\":\n        return eval(f\"{a}/{b}\")\n    if operator.lower() == \"add\":\n        return eval(f\"{a}+{b}\")\n    if operator.lower() == \"subtract\":\n        return eval(f\"{a}-{b}\")", "def arithmetic(a, b, operator):\n    if operator.lower() == \"add\":\n        return a + b\n    elif operator.lower() == \"subtract\":\n        return a - b\n    elif operator.lower() == \"multiply\":\n        return a*b\n    else:\n        return a/b", "def arithmetic(a, b, operator):\n    if operator == 'add':\n        number = a + b\n        return number\n    elif operator == 'subtract':\n        number = a - b\n        return number\n    elif operator == 'multiply':\n        number = a * b\n        return number\n    elif operator == 'divide':\n        number = a / b\n        return number", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return (a + b)\n    elif operator == \"subtract\":\n        return (a - b)\n    elif operator == \"multiply\":\n        return (a * b)\n    elif operator == \"divide\":\n        return (a / b)\narithmetic(2,2,\"divide\")\n\n\n\n", "arithmetic=lambda a,b,s:eval('a%sb'%'-+*/'[ord(s[2])//9-10])", "from operator import add, sub as subtract, mul as multiply, truediv as divide\narithmetic = lambda a, b, operator: eval(operator)(a,b)\n#DO NOT DO THIS\n", "def arithmetic(a, b, operator):\n    return getattr(a, '__' + operator[:3] + '__', a.__truediv__)(b)", "arithmetic = lambda a, b, o: eval(str(a)+{'add':'+', 'subtract':'-', 'multiply':'*', 'divide':'/'}[o]+str(b))", "from operator import add, sub, mul, truediv, floordiv\n\ndiv = truediv #floordiv\n\narithmetic = lambda a, b, s: eval(s[:3])(a, b)", "def arithmetic(a, b, operator):\n    d = dict()\n    d[\"add\"] = '+'\n    d[\"subtract\"] = '-'\n    d[\"multiply\"] = '*'\n    d[\"divide\"] = '/'\n    \n    return eval('{0} {1} {2}'.format(a, d[operator], b))", "def arithmetic(a, b, operator):\n    opd = {'add': a+b,'subtract': a-b,'multiply': a*b,'divide': a/b}\n    return opd[operator]", "def arithmetic(a, b, operator):\n    while operator[0] == \"a\":\n        return a + b\n        break\n    while operator[0] == \"s\":\n        return a - b\n        break\n    while operator[0] == \"m\":\n        return a * b\n        break\n    else:\n        return a / b\n", "def arithmetic(a, b, operator):\n    operators = {'add':'+','subtract':'-','multiply':'*','divide':'/'}\n    return eval(str(a)+operators[operator]+str(b))", "def arithmetic(a, b, operator):\n   return eval('a{}b'.format({'add':'+','subtract':'-','multiply':'*','divide':'/'}[operator]))", "def arithmetic(a, b, operator):\n    ops = {\"add\": lambda x,y : x+y,\n           \"subtract\": lambda x,y : x-y,\n           \"multiply\": lambda x,y : x*y,\n           \"divide\": lambda x,y : float(x)/y,\n            }\n    return ops[operator](a,b)", "def arithmetic(a, b, operator):\n    return eval(f'{a}{operator}{b}'.replace('add','+').replace('subtract','-').replace('divide','/').replace('multiply','*'))", "def arithmetic(a, b, operator):\n    op = {'add':'+','subtract':'-','multiply':'*','divide':'/'}\n    if b == 0 and operator == 'divide':\n        return 'Error! Division by zero!'\n    return eval(f'{a} {op[operator]} {b}') if operator in op else 'Error! Wrong operator!'", "a={'add':'+',\n   'subtract':'-',\n   'multiply':'*',\n   'divide':'/'}\ndef arithmetic(b,c,d):\n    e=a[str(d)]\n    f=str(b)+e+str(c)\n    return eval(f)\n", "def arithmetic(a, b, operator):\n    if operator==\"subtract\":\n        return a-b\n    elif operator==\"add\":\n        return a+b\n    elif operator==\"multiply\":\n        return a*b\n    elif operator==\"divide\":\n        return a/b", "def arithmetic(a, b, operator):\n    if operator == \"add\": return a + b \n    if operator == \"multiply\": return a * b \n    if operator == \"subtract\": return a - b \n    return a / b", "def arithmetic(a, b, operator):\n    try:\n        x = {\"add\":a+b,\"subtract\":a-b,\"divide\":a/b,\"multiply\":a*b}\n        return x.get(operator)\n    except:\n        return None", "def arithmetic(a, b, operator):\n    arithmetics = {\n        \"add\": a + b,\n        \"subtract\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b,\n    }\n    return arithmetics[operator]", "def arithmetic(a, b, operator):\n    if operator == 'add':\n        return (a+b)\n    elif operator == 'subtract':\n        return (a-b)\n    elif operator == 'multiply':\n        return (a*b)\n    elif operator == 'divide':\n        return (a/b)\n    else:\n        return (\"Unsupport operant\")\n    #your code here\n", "def arithmetic(a, b, op):\n    trans = {\n        'add': '+',\n        'subtract': '-',\n        'divide': '/',\n        'multiply': '*'\n    }\n    if (type(a) == type(b) == int) and (op in trans.keys()):\n        return eval(f'{a}{trans[op]}{b}')", "def arithmetic(a, b, operator):\n    x = [['a','s','m','d'], [a+b,a-b,a*b,a/b]]\n    return x[1][x[0].index(operator[0])]\n", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a+b\n    elif operator == \"subtract\" :\n        return a-b\n    elif operator == \"multiply\":\n        return b*a\n    else :\n        return a/b", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a + b\n    elif operator == \"subtract\":\n        return a - b\n    elif operator == \"multiply\":\n        return a * b\n    elif operator == \"divide\":\n        return a / b\n    else:\n        return \"I don't know!\"", "def arithmetic(a, b, operator):\n    if operator.lower() == 'add':\n        return a+b\n    elif operator.lower() == 'subtract':\n        return a-b\n    elif operator.lower() == 'divide':\n        return a/b\n    else:\n        return a*b", "def arithmetic(a, b, operator):\n    c=0\n    if operator == \"add\":\n        c = a+b\n    elif operator == \"multiply\":\n        c= a*b\n    elif operator == \"divide\":\n        c = a/b   \n    elif operator == \"subtract\":\n        c = a-b\n    return c ", "def add(a,b):\n    return a + b\ndef subtract(a,b):\n    return a - b\ndef multiply(a,b):\n    return a*b\ndef divide(a,b):\n    return a/b\n\ndef arithmetic(a, b, operator):\n    return eval(operator+'(a,b)')", "def arithmetic(a, b, o):\n    if o == \"add\":\n        r = a + b\n    if o == \"subtract\":\n        r = a - b\n    if o == \"multiply\":\n        r = a * b\n    if o == \"divide\":\n        r = a / b\n    return r", "def arithmetic(a, b, operator):\n    #your code here\n    \n    table = {\"add\": \"+\", \"subtract\": \"-\", \"multiply\": \"*\", \"divide\": \"/\" }\n    \n    return eval(str(a) + table[operator] + str(b))", "def arithmetic(a, b, operator):\n    return eval(f'{a}{ {\"add\":\"+\", \"subtract\":\"-\", \"multiply\":\"*\", \"divide\":\"/\"}.get(operator) }{b}')", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a+b\n    elif operator == \"subtract\":\n        return a-b\n    elif operator == \"multiply\":\n        return a*b\n    elif operator == \"divide\":\n        return a/b\n    else:\n        return a%b", "def arithmetic(a, b, operator):\n    if operator == 'add':\n        operator = '+'\n    elif operator == 'subtract':\n        operator = '-'\n    elif operator == 'multiply':\n        operator = '*'\n    elif operator == 'divide':\n        operator = '/'\n    \n    return eval('{}{}{}'.format(a,operator,b))", "def arithmetic(a, b, operator):\n    #your code here\n    words_operator = {\n        'add': '+',\n        'subtract': '-',\n        'multiply': '*',\n        'divide': '/'\n    }\n    \n    return(eval(\"{} {} {}\".format(a,words_operator[operator],b)))", "def arithmetic(a, b, operator):\n    kek = {\n        \"add\": '+',\n        \"subtract\": '-',\n        \"divide\": '/',\n        \"multiply\": '*'\n    }\n    return eval(f'{a} {kek[operator]} {b}')", "def arithmetic(a, b, operator):\n    result = 0\n    if operator == \"add\":\n        return a + b\n    elif operator == \"subtract\":\n        return a - b\n    elif operator == \"multiply\":\n        return a * b\n    else:\n        return a / b", "def arithmetic(a, b, operator):\n    map = {\n        \"add\": lambda a, b: a + b,\n        \"subtract\": lambda a, b: a - b,\n        \"multiply\": lambda a, b: a * b,\n        \"divide\": lambda a, b: a / b,\n    }\n    return map[operator](a,b)", "def arithmetic(a, b, operator):\n    \n    if operator == \"multiply\":\n        return a * b\n    \n    if operator == \"add\":\n        return a + b\n    \n    if operator == \"subtract\":\n        return a - b\n    \n    if operator == \"divide\":\n        return a / b", "def arithmetic(a, b, operator):\n    #your code here\n    ans = 0\n    if operator == 'add':\n        ans = a+b\n    elif operator == 'subtract':\n        ans = a-b\n    elif operator == 'multiply':\n        ans = a*b\n    elif operator == 'divide':\n        ans = a/b\n    \n    return ans", "def arithmetic(a, b, operator):\n    calc ={\"add\":\"+\", \"subtract\":\"-\", \"multiply\":\"*\", \"divide\":\"/\"}\n    return eval(str(a)+calc[operator]+str(b))", "import operator as opr\ndef arithmetic(a, b, operator):\n    operations = {\n        \"add\":opr.add,\n        \"subtract\":opr.sub,\n        \"multiply\":opr.mul,\n        \"divide\":opr.truediv\n        }\n    return operations[operator](a,b)\n", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a+b\n    elif operator == \"subtract\":\n        return a-b\n    elif operator == \"multiply\":\n        return a*b\n    elif operator == \"divide\":\n        return a/b\n    else:\n        return \"Please input a proper operator.\"", "import operator as op\n\nf = {\n    \"add\": op.add,\n    \"subtract\": op.sub,\n    \"multiply\": op.mul,\n    \"divide\": op.truediv\n}\n\ndef arithmetic(a, b, operator):\n    return f[operator](a, b)", "def arithmetic(a, b, n):\n    if n==\"add\":\n        return a+b\n    elif n==\"subtract\":\n        return a-b\n    elif n==\"multiply\":\n        return a*b\n    else:\n        return a/b\n", "def arithmetic(a, b, operator):\n    operations = {\n        'add': lambda x: a+b,\n        'subtract':lambda x: a-b,\n        'multiply':lambda x: a*b,\n        'divide':lambda x: a/b\n    }\n\n    return operations[operator](1)", "def arithmetic(a, b, operator):\n    return operations[operator](a, b)\n    \n    \n    \noperations = {\n    \"add\": lambda a, b: a + b,\n    \"subtract\": lambda a, b: a - b,\n    \"multiply\": lambda a, b: a * b,\n    \"divide\": lambda a, b: a / b\n}", "# No if statements :-)\narithmetic = lambda a, b, o: getattr(__import__(\"operator\"), o == 'divide' and 'itruediv' or o[:3])(a, b)", "def arithmetic(a, b, operator):\n    total = 0\n    if operator == \"add\":\n        total = a+b\n    elif operator == \"subtract\":\n        total = a-b\n    elif operator == \"multiply\":\n        total = a*b\n    elif operator == \"divide\":\n        total = a/b\n    else:\n        return \"Something Went Wrong\"\n    return total", "import operator as o\ndef arithmetic(a, b, operator):\n    ops = {'add': o.add,\n          'subtract': o.sub,\n           'multiply': o.mul,\n           'divide': o.truediv}\n    return ops[operator](a,b)", "def arithmetic(a, b, op):\n    if op == \"add\":\n        return a + b\n    elif op == \"multiply\":\n        return a * b\n    elif op == \"subtract\":\n        return a - b\n    else:\n        return a/b", "def arithmetic(a, b, operator):\n    map_func = {\n        'add': lambda a, b: a + b,\n        'subtract': lambda a, b: a - b,\n        'multiply': lambda a, b: a * b,\n        'divide': lambda a, b: a / b\n    }\n    return map_func[operator](a, b)", "def arithmetic(a, b, operator):\n    ans= 0\n    while operator == \"add\":\n        ans = a+b\n        break\n    while operator == \"subtract\":\n        ans = a-b\n        break\n    while operator == \"multiply\":\n        ans = a*b\n        break\n        \n    while operator == \"divide\":\n        ans = a/b\n        break\n    return ans", "def arithmetic(a, b, o):\n    res = 0\n    if o == 'add':\n        res = a + b\n    elif o == 'subtract':\n        res = a - b\n    elif o == 'multiply':\n        res = a * b\n    elif o == 'divide':\n        res = a / b\n    else:\n        res = 'Please specify operator ... '\n    return res", "def arithmetic(a, b, operator):\n    ops = {\n        \"add\": \"__add__\",\n        \"subtract\": \"__sub__\",\n        \"multiply\": \"__mul__\",\n        \"divide\": \"__truediv__\"\n    }\n    return getattr(a, ops[operator])(b)", "def arithmetic(a, b, operator):\n    if 'add' == operator:\n        return a + b\n    if 'subtract' == operator:\n        return a - b\n    if 'multiply' == operator:\n        return a * b\n    if 'divide' == operator:\n        return a / b", "def arithmetic(a, b, operator):\n    #your code here\n    \n    if operator==\"add\":\n        result=a+b\n    elif operator==\"subtract\":\n        result=a-b\n    elif operator==\"divide\":\n        result=a/b\n    elif operator==\"multiply\":\n        result=a*b\n    else:\n        print(\"You didn't enter an operator or you misspelled the operator.\")\n\n    return result", "def arithmetic(a, b, operator):\n    res = {\n        \"add\": a + b,\n        \"subtract\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b\n    }\n    return res.get(operator, \"Invalid operator\")", "def arithmetic(a, b, operator):\n    #Lot of If statements\n    if operator == 'add':\n        return a +b\n    elif operator == 'subtract':\n        return a-b\n    elif operator == 'multiply':\n        return a*b\n    else:\n        return a/b\n", "from operator import add,sub,mul,truediv as div\ndef arithmetic(a, b, o):\n    return eval(f\"{o[:3]}({a},{b})\")", "def arithmetic(a, b, operator):\n    if operator == 'add':\n        return a+b\n    elif operator == 'subtract':\n        return a-b\n    elif operator == 'multiply':\n        return a*b\n    elif operator == 'divide':\n        return a/b\n    else:\n        print('how can I do this better?')\n\n", "def arithmetic(a, b, operator):\n    result=0\n    if operator==\"add\":\n        result=a+b\n        return result\n    elif operator==\"subtract\":\n        result=a-b\n        return result\n    elif operator==\"multiply\":\n        result=a*b\n        return result\n    else:\n        result=a/b\n        return result\n", "def arithmetic(a, b, operator):\n    result = 0\n    if operator == \"add\":\n        result = a + b\n    elif operator == \"subtract\":\n        result = a - b\n    elif operator == \"multiply\":\n        result = a * b\n    elif operator == \"divide\":\n        result = a / b\n    else:\n        print(\"No operator found\")\n    \n    return (result)", "def arithmetic(a, b, op):\n    return __import__('operator').__dict__['true' * (op[0] == 'd') + op[:3]](a, b)", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a+b\n    if operator == \"subtract\":\n        return a-b\n    if operator == \"multiply\":\n        return a*b\n    if operator == \"divide\":\n        return a/b\n    raise \"Can't recognize operator\"", "def arithmetic(a, b, operator):\n    if operator == \"add\":\n        return a + b\n    elif operator == \"subtract\":\n        return a - b\n    elif operator == \"multiply\":\n        return a * b\n    elif operator == \"divide\":\n        return a / b\n    \n    # simple way which is readable to solve this problem\n    # you can use dictionary or one liners also here\n", "def arithmetic(a, b, operator):\n    c = [\"add\", \"subtract\", \"multiply\", \"divide\"]\n    d = [a+b, a-b, a*b, a/b]\n    n = 0\n    while c[0] != operator:\n        c.remove(c[0])\n        n +=1\n    return d[n]", "def arithmetic(a, b, operator):\n    if operator == 'add' :\n       result = a + b\n    elif operator == 'subtract':\n        result = a - b\n    elif operator == 'multiply':\n        result = a * b\n    elif operator == 'divide':\n        result = a / b\n    \n    return result\n\nresult = arithmetic(5, 2, \"divide\")\nprint(result)\n"]