["sb_primes = [2, 3, 5, 7, 13, 17, 19, 37, 73, 97, 109, 163, 193, 257, 433, 487, 577, 769, 1153, 1297, 1459, 2593, 2917, 3457, 3889, 10369, 12289, 17497, 18433, 39367, 52489, 65537, 139969, 147457, 209953, 331777, 472393, 629857, 746497, 786433, 839809, 995329, 1179649, 1492993]\n\ndef solve(x, y):\n    return sum(x <= p < y for p in sb_primes)", "def is_prime(n): return all(n%p!=0 for p in range(2,int(n**0.5)+1))\nstone = []\n\nfor i in range(20):\n    for j in range(12):\n        p = (2**i)*(3**j) + 1\n        if is_prime(p): stone.append(p)\n\ndef solve(x,y):\n    return sum(1 for p in stone if p>=x and p<y)", "specials = (2, 3, 5, 7, 13, 17, 19, 37, 73, 97, 109, 163, 193, 257, 433, 487,\n            577, 769, 1153, 1297, 1459, 2593, 2917, 3457, 3889, 10369, 12289,\n            17497, 18433, 39367, 52489, 65537, 139969, 147457, 209953, 331777,\n            472393, 629857, 746497, 786433, 839809, 995329, 1179649, 1492993)\n\n\ndef solve(i, j):\n    return sum(1 for n in specials if i <= n <= j)", "from itertools import compress\nfrom math import log\nimport numpy as np\n\nn = 1_500_000\ns = np.ones(n, dtype=int)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5)+1, 2):\n    if s[i]:\n        s[i*i::i] = 0\nps = set(compress(range(len(s)), s))\nstone_bridge_primes = set()\nfor i in range(int(log(n, 2))+1):\n    for j in range(int(log(n, 3))+1):\n        x = 2**i * 3**j + 1\n        if x in ps:\n            stone_bridge_primes.add(x)\nsbp = sorted(stone_bridge_primes)\n\ndef solve(x,y):\n    return np.searchsorted(sbp, y) - np.searchsorted(sbp, x)", "def isprime(n):\n    if n==2: return True\n    if n%2==0 or n<2: return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False \n    return True\nsbs = []\nfor i in range(22):\n    j = 0\n    while 2**i * 3**j + 1 <= 1500000:\n        if isprime(2**i * 3**j + 1):\n            sbs.append(2**i * 3**j + 1)\n        j += 1\ndef solve(x,y): return sum( x <= z & z <= y for z in sbs )", "from bisect import bisect_left as bisect\nfrom math import log\n\ndef isPrime(n): return n==2 or n%2 and all(n%p for p in range(3, int(n**.5)+1, 2))\n\nMAX    = 1500000\nmPow2  = int(log(MAX,2))\nSTONES = sorted(n for n in { 2**n2 * 3**n3 + 1 for n2 in range(mPow2+1)\n                                               for n3 in range(int(log(MAX // 2**n2,3))+1) }\n                  if isPrime(n))\n\n\ndef solve(x,y):\n    low = bisect(STONES, x)\n    return bisect(STONES, y, low, len(STONES)) - low", "LIMIT = 1500000\n\nfrom math import log, ceil\nfrom itertools import product\n\nm_max, n_max = ceil(log(LIMIT, 2)), ceil(log(LIMIT, 3))\nsb_primes = {2}\n\n# generate candidates up to limit\nfor m, n in product(range(1, m_max), range(n_max)):\n    cand = 2**m * 3**n + 1\n    # check primality\n    if cand < LIMIT and all(cand % x for x in range(3, int(cand**0.5)+1, 2)):\n        sb_primes.add(cand)\n\n\ndef solve(x, y):\n    return sum(x <= p < y for p in sb_primes)", "M=[2,3,5,7,13,17,19,37,73,97,109,163,193,257,433,487,577,769,1153,1297,1459,2593,2917,3457,3889,10369,12289,17497,18433,39367,52489,65537,139969,147457,209953,331777,472393,629857,746497,786433,839809,995329,1179649,1492993]\nsolve=lambda L,R:sum(L<=V<R for V in M)", "from math import*;solve=lambda x,y:len({2**m*3**n+1\nfor n in range(0,ceil(log(y-1,3)))\nfor m in range(ceil(log(max(~-x/3**n,1),2)),ceil(log(~-y/3**n,2)))\nif all((2**m*3**n+1)%d for d in range(2,int((2**m*3**n+1)**.5)+1))})"]