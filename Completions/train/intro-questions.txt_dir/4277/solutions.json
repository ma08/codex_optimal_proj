["def difference_in_ages(ages):\n    # your code here\n    return (min(ages) , max(ages) , max(ages) - min(ages))", "def difference_in_ages(ages):\n    x, y = min(ages), max(ages)\n    return x, y, y-x", "def difference_in_ages(ages):\n    age = sorted(ages)\n    return (age[0], age[-1], (age[-1]-age[0]))", "def difference_in_ages(ages):\n    # your code here\n    youngest_age = min(ages)\n    oldest_age = max(ages)\n    difference = oldest_age - youngest_age\n    return (youngest_age, oldest_age, difference)", "def difference_in_ages(ages):\n    youngest = min(ages)\n    oldest = max(ages)\n    return (youngest, oldest, oldest-youngest)", "def difference_in_ages(a):\n    L=[]\n    L.append(min(a))\n    L.append(max(a))\n    L.append(max(a)-min(a))\n    return tuple(L)", "def difference_in_ages(ages):\n    ages.sort()\n    min_age = ages[0]\n    max_age = ages[-1]\n    \n    return (min_age, max_age, max_age - min_age)", "def difference_in_ages(ages):\n    age_min, age_max = min(ages), max(ages)\n    return (age_min, age_max, age_max - age_min)", "def difference_in_ages(ages):\n    oldest, youngest = max(ages), min(ages)\n    diff = oldest - youngest\n    return (youngest, oldest, diff)", "def difference_in_ages(ages):\n    sortedages = sorted(ages)\n    return sortedages[0], sortedages[-1], ((sortedages[-1]) - (sortedages[0]))", "def difference_in_ages(ages):\n#     return min(ages), max(ages), max(ages) - min(ages)\n    x = sorted(ages)\n    return x[0], x[-1], x[-1] - x[0]", "difference_in_ages = lambda ages: (lambda x, y: (x, y, y - x))(min(ages), max(ages))", "difference_in_ages=lambda l:(min(l),max(l),max(l)-min(l))", "from typing import List\n\ndef difference_in_ages(ages: List[int]):\n    \"\"\" Get a tuple with a structure: (youngest age, oldest age, difference between the youngest and oldest age). \"\"\"\n    return sorted(ages)[0], sorted(ages)[-1], sorted(ages)[-1] - sorted(ages)[0],", "def difference_in_ages(ages):\n    young = 10000000\n    old = 0\n    for x in ages:\n        if x < young:\n            young = x\n        if x > old:\n            old = x\n    difference = old-young\n    ris = (young, old, difference)\n    return ris", "def difference_in_ages(ages):\n    ygs=min(ages)\n    lrgs=max(ages)\n    dif=lrgs-ygs\n    return(ygs,lrgs,dif)\n    #ah yes enslaved age\n    pass", "def difference_in_ages(ages):\n    ages.sort()\n    lst = []\n    lst.append(ages[0])\n    lst.append(ages[-1])\n    lst.append(ages[-1]-ages[0])\n    m = tuple(lst)\n    return m", "def difference_in_ages(ages):\n    ages.sort()\n    result = []\n    res1 = ages[-1] - ages[0]\n    res2 = ages[0]\n    res3 = ages[-1]\n\n    return res2, res3, res1\n", "def difference_in_ages(ages: list) -> tuple:\n    \"\"\" This function returns 'min', 'max' in ages and calculate the difference between them. \"\"\"\n    return (min(ages), max(ages), max(ages) - min(ages))", "def difference_in_ages(ages):\n    lista_noua = []\n    lista_noua.append(min(ages))\n    lista_noua.append(max(ages))\n    diferenta = lista_noua[1] - lista_noua[0]\n    lista_noua.append(diferenta)\n    tupled = tuple(lista_noua)\n    return tupled\n", "def difference_in_ages(ages):\n    # your code here\n    age=sorted(ages)\n    age_len=len(age)\n    young=age[0]\n    old=age[age_len-1]\n    diff=old-young\n    result=(young,old,diff)\n    return result", "def difference_in_ages(ages):\n    return (min(x for x in ages), max(y for y in ages), max(z for z in ages) - min(a for a in ages))", "def difference_in_ages(ages):\n    ages.sort()\n    older = ages[-1]\n    younger = ages[0]\n    difference = older - younger\n    return (younger, older, difference)", "def difference_in_ages(ages):\n    ages0 = max(ages)\n    ages1 = min(ages)\n    return (ages1, ages0, ages0-ages1)", "def difference_in_ages(ages):\n    minimum =min(ages)\n    maximum =max(ages)\n    diff = maximum-minimum\n    return (minimum,maximum,diff)", "def difference_in_ages(ages):\n\n        b = max(ages) - min(ages)\n\n        a = (min(ages), max(ages), b)\n        return a\n", "def difference_in_ages(ages):\n    ages = sorted(ages)\n    return (ages[0], ages[len(ages)-1], abs(ages[0] - ages[len(ages)-1 ]))", "def difference_in_ages(ages):\n    min_ = min(ages)\n    max_ = max(ages)\n    return min_, max_, max_ - min_", "def difference_in_ages(ages):\n    x = len(ages)\n    ages.sort()\n    a = ages[0]\n    b = ages[(x-1)]\n    c = a - b\n    if c>=0:\n        c = c\n    else:\n        c = -c\n    z = (a,b,c)\n    return z\n", "def difference_in_ages(ages):\n    t = min(ages), max(ages), max(ages) - min(ages)\n    return tuple(t)", "def difference_in_ages(ages):\n    sorta = sorted(ages)\n    return (sorta[0], sorta[-1], sorta[-1] - sorta[0])", "def difference_in_ages(ages):\n    a = max(ages)-min(ages)\n    return min(ages), max(ages), a", "def difference_in_ages(ages):\n    # your code here\n    old = max(ages)\n    y = min(ages)\n    diff = old-y\n    return (y,old,diff)", "def difference_in_ages(ages):\n    min = ages[0]\n    max = ages[0]\n    for age in ages:\n        if age < min:\n            min = age\n        if age > max:\n            max = age\n    diff = max - min\n    return min, max, diff", "def difference_in_ages(ages):\n    goal = []\n    goal.append(min(ages))\n    goal.append(max(ages))\n    goal.append(goal[1] - goal[0])\n    return tuple(i for i in goal)", "def difference_in_ages(ages):\n    l = min(ages)\n    p = max(ages)\n    s = min(ages) - max(ages)\n    return l, p, abs(s)", "def difference_in_ages(ages):\n    x = sorted(ages)\n    return (x[0], x[len(ages) -1], x[len(ages) -1] - x[0])", "def difference_in_ages(ages):\n    # your code here\n    max_age = max(ages)\n    min_age = min(ages)\n    dif_age = max_age - min_age\n    return (min_age,max_age,dif_age)", "def difference_in_ages(ages):\n    x = max(ages)\n    y = min(ages)\n    z = x - y\n    return min(ages), max(ages), z", "def difference_in_ages(ages):\n    ages_sorted = sorted(ages)\n    youngest = ages_sorted[0]\n    oldest = ages_sorted[-1]\n    difference = oldest - youngest\n    return youngest, oldest, difference\n    return ages_sorted\n    \n    # your code here\n    pass", "def difference_in_ages(ages):\n    mx, mn = max(ages), min(ages)\n    return (mx - mn, mx, mn)[::-1]", "def difference_in_ages(ages):\n    lowest,highest = min(ages),max(ages)\n    return (lowest, highest, highest-lowest)\n", "def difference_in_ages(ages):\n    mi, ma = min(ages), max(ages)\n    return mi, ma, ma-mi", "def difference_in_ages(ages):\n    \n    a = max(ages)\n    t = min(ages)\n    l = a - t\n    \n    return t, a, l", "def difference_in_ages(ages):\n    a = max(ages) \n    b = min(ages) \n    dif = abs(a-b)\n    return (b, a, dif) \n\n \n    \n", "def difference_in_ages(ages):\n    return (min(ages), max(ages), max(ages) - min(ages))\n\n# i knoowww..\n# it's not the most efficient to go through the array 4 times \n# but, i had to...\n", "\ndef difference_in_ages(ages):\n    a = ages[0]\n    b = ages[0]\n    for i in ages:\n        if i < a:\n            a = i\n    for x in ages:\n        if b <= x:\n            b = x\n    return a, b, b - a\n", "def difference_in_ages(ages):\n\n    mini= min(ages)\n    maxi =max(ages)\n    diff=maxi-mini\n    tup=(mini,maxi,diff)\n    return tup", "def difference_in_ages(ages):\n    y, o = min(ages), max(ages)\n    d = o-y\n    return (y, o, d)", "def difference_in_ages(ages):\n    an = ()\n    minimum = min(ages)\n    maximum = max(ages)\n    diff = maximum - minimum\n    an += minimum,maximum,diff\n    return an\n    \n", "def difference_in_ages(ages):\n    youngest_age = ages[0]\n    oldest_age = 0\n    \n    for age in ages:\n        if age < youngest_age:\n            youngest_age = age\n        if age > oldest_age:\n            oldest_age = age\n    \n    soln = (youngest_age, oldest_age, oldest_age-youngest_age)\n    return soln\n", "def difference_in_ages(ages):\n    max = 0\n    for i in ages:\n        if i>max:\n            max = i\n    min = max\n    for j in ages:\n        if j < min:\n            min = j\n    a = max - min\n    return (min,max,a) ", "def difference_in_ages(ages):\n    y, o = min(ages), max(ages)\n    return y, o, o-y", "def difference_in_ages(ages):\n    t = (min(ages), max(ages), max(ages) - min(ages))\n    return t", "from typing import List\n\ndef difference_in_ages(ages: List[int]):\n    \"\"\" Get a tuple with a structure: (youngest age, oldest age, difference between the youngest and oldest age). \"\"\"\n    return min(ages), max(ages), max(ages) - min(ages),", "def difference_in_ages(ages):\n    x = []\n    x.append(min(ages)) \n    x.append(max(ages))\n    x.append(max(ages) - min(ages))\n    return tuple(x)", "def difference_in_ages(ages):\n    result = [min(ages), max(ages), (max(ages)-min(ages))]\n    return tuple(result)", "def difference_in_ages(ages):\n    tuple = (min(ages) , max(ages), max(ages)-min(ages))\n    return tuple", "def difference_in_ages(ages):\n    tup = (min(ages), max(ages), max(ages)-min(ages))\n    return (min(ages), max(ages), max(ages)-min(ages))\n", "def difference_in_ages(ages):\n    max_age = max(ages)\n    min_age = min(ages)\n    sub = max_age - min_age\n    sum = max_age - min_age\n    listt = (min_age, max_age, sub)\n    return listt", "def difference_in_ages(ages):\n    s = sorted(ages)[0]\n    s1 = sorted(ages,reverse=True)[0]\n    return (s,s1,s1-s)", "def difference_in_ages(ages):\n    ages.sort()\n    tpp1=(ages[0],ages[-1],(ages[-1]-ages[0]))\n    return(tpp1)", "def difference_in_ages(ages):\n    ages.sort()\n    poo = (ages[0],ages[-1],ages[-1] - ages[0])\n    return poo", "def difference_in_ages(ages):\n    ages.sort()\n    youngest = ages[0]\n    oldest = ages[-1]\n    difference = ages[-1] - ages[0]\n    return youngest, oldest, difference", "def difference_in_ages(ages):\n    maximum = max(ages)\n    minimum = min(ages)\n    diffrence = maximum - minimum\n    return minimum, maximum, diffrence", "def difference_in_ages(ages):\n    bruh = list()\n    bruh.append(min(ages))\n    bruh.append(max(ages))\n    bruh.append(max(ages) - min(ages))\n    return tuple(bruh)", "def difference_in_ages(ages):\n    # your code here\n    a  = min(ages)\n    b = max(ages)\n    return (min(ages), max(ages), max(ages) - min(ages) )", "def difference_in_ages(ages):\n    \n    ages.sort()\n    summary = (ages[0], ages[-1], (ages[-1] - ages[0]))\n    \n    return summary", "def difference_in_ages(ages):\n    mn, mx = min(ages), max(ages)\n    return (mn, mx, mx-mn)\n", "def difference_in_ages(a):\n    a.sort()\n    return (a[0], a[-1], a[-1]-a[0])", "from operator import sub\n\ndef difference_in_ages(ages):\n    \"\"\"\n        Returns a tuple with youngest age, oldest age, difference between\n        the youngest and oldest age.\n    \"\"\"\n    sort_ages = sorted(ages)\n    return (sort_ages[0], sort_ages[-1], sub(sort_ages[-1], sort_ages[0]))", "def difference_in_ages(ages):\n    res =  max(ages) - min(ages)\n    return min(ages), max(ages), res", "def difference_in_ages(ages):\n    ages.sort()\n    m = ages[0]\n    u = ages[-1]\n    return m,u,u-m\n", "from typing import List, Tuple\n\n\ndef difference_in_ages(ages: List[int]) -> Tuple[int, int, int]:\n    return min(ages), max(ages), max(ages) - min(ages)", "def difference_in_ages(s):\n    return (min(s),max(s),max(s)-min(s))", "def difference_in_ages(ages):\n    ages.sort()\n    a = ages[-1]\n    b = ages[0]\n    c = a-b\n    return (b,a,c)\n", "def difference_in_ages(ages):\n    ages.sort()\n    a=ages[0]\n    b=ages[-1]\n    m=b-a\n    return(a,b,m)", "def difference_in_ages(ages):\n    set = (min(ages), max(ages), max(ages) - min(ages))\n    return set", "def difference_in_ages(ages):\n    youngest_age = 10000000000000\n    oldest_age = 0\n    for x in ages:\n        if x < youngest_age and x > oldest_age:\n            youngest_age = x\n            oldest_age = x\n        elif x < youngest_age:\n            youngest_age = x\n        elif x > oldest_age:\n            oldest_age = x\n        else:\n            pass\n    difference = oldest_age - youngest_age\n    return (youngest_age, oldest_age, difference)", "def difference_in_ages(age):\n    ergebnis = []\n    ergebnis.append(sorted(age)[0])\n    ergebnis.append(sorted(age)[-1])\n    ergebnis.append(ergebnis[-1]-ergebnis[0])\n    return tuple(ergebnis)", "def difference_in_ages(ages):\n    smallest = ages[0]\n    largest = ages[1]\n    for age in ages:\n        if(smallest > age):\n            smallest = age\n        if(largest < age):\n            largest = age\n    \n    return smallest, largest, largest-smallest", "def difference_in_ages(ages):\n    ages.sort()\n    oldest_age = ages[-1]\n    youngest_age = ages[0]\n    diff = ages[-1] - ages[0]\n    return tuple([youngest_age,oldest_age,diff])\n", "def difference_in_ages(ages):\n    ages = sorted(ages)\n    ages_diff = (ages[0],ages[-1],ages[-1] - ages[0])\n    return ages_diff", "def difference_in_ages(ages):\n    lo, hi = min(ages), max(ages)\n    return lo, hi, hi - lo", "def difference_in_ages(ages):\n    # your code here\n    oldest = ages[0]\n    youngest = ages[0]\n    \n    for e in ages:\n        if e > oldest:\n            oldest = e\n        elif e < youngest:\n            youngest = e\n    arr = ((youngest), (oldest), (oldest-youngest))\n    return arr", "def difference_in_ages(ages):\n    sor = sorted(ages)\n    a = sor[0]\n    b = max(sor)\n    diff = ()\n    c = b-a\n    j = 0\n    diff = (a,b,c)\n    \n    return diff\n            \n            \n            \n    \n    \n    \n        \n    # your code here\n    pass", "def difference_in_ages(ages):\n    ages.sort()\n    diference = []\n    diference.append(ages[0])\n    diference.append(ages[len(ages)-1])\n    diference.append(ages[len(ages)-1] - ages[0])\n    return tuple(diference)\n", "def difference_in_ages(ages):\n    sorted = ages.sort();\n    low = ages[0];\n    high = ages[-1];\n    diff = high - low;\n    return (low, high, diff);", "import math\ndef difference_in_ages(ages):\n    young = math.inf\n    old = -math.inf\n    for age in ages:\n        if (age > old):\n            old = age\n        if (age < young):\n            young = age\n    return (young, old, old-young)", "def difference_in_ages(ages):\n    ages.sort()\n    agelen = len(ages)\n    return(ages[0], ages[agelen -1],(ages[agelen-1] - ages[0]))", "import sys\ndef difference_in_ages(ages):\n    # your code here\n    array = []\n    youngest = sys.maxsize\n    oldest = -sys.maxsize - 1\n    for i in ages:\n        if youngest > i:\n            youngest = i\n        if oldest < i:\n            oldest = i\n    difference = oldest - youngest\n\n    return (youngest, oldest, difference)", "def difference_in_ages(ages):\n    ages.sort()\n    youngest = ages[0]\n    oldest = ages[-1]\n    diff = oldest - youngest\n    return (youngest, oldest, diff)", "def difference_in_ages(ages):\n    ageDif = []\n    ageDif.extend([min(ages), max(ages), max(ages)-min(ages)])\n    return tuple(ageDif)\n", "def difference_in_ages(ages):\n    youngestAge = min(ages)\n    oldestAge = max(ages)\n    difference = oldestAge - youngestAge\n\n    return(youngestAge, oldestAge, difference)", "def difference_in_ages(ages):\n    m = min(ages)\n    b = max(ages)\n    r = b - m \n    return (m, b, r)", "def difference_in_ages(ages):\n    minage = min(ages)\n    maxage = max(ages)\n    return (minage,maxage,abs(maxage - minage))", "def difference_in_ages(ages):\n    M = max(ages)\n    m = min(ages)\n    return m, M, M-m", "def difference_in_ages(ages):\n    array = (min(ages),max(ages),max(ages)-min(ages))\n    return array", "def difference_in_ages(ages):\n    # your code here\n    ages.sort()\n    young=ages[0]\n    old=ages[len(ages)-1]\n    return (young,old,old-young)", "def difference_in_ages(ages):\n    first = max(ages)\n    second = min(ages)\n    return (second,first,first - second)"]