["class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num==0:\n             return \"0\"\n         res,n=[],0\n         nums=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f']\n         while n<8 and num!=0:\n             res.insert(0,nums[num%16])\n             num=num//16\n             n+=1\n         s=\"\"\n         for i in res:\n             s+=i\n         return s\n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             num = 2 ** 32 + num\n         return hex(num)[2:]", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         '''\n         s = []\n         hexChar= ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n         if num == 0:\n             return '0'\n         while num:\n             s.append(hexChar[num % 16])\n             num = num // 16\n         return \"\".join(s[::-1])\n         hex(int())\n         hex(num & 0b)\n         '''\n         return '%x' % (num & 0xffffffff)\n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         ans = []\n         dic = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n         if num == 0:\n             return \"0\"\n         if num < 0:\n             num = num + 2**32\n \n         while num > 0:\n             digit = num % 16\n             num //=  16\n             if  digit > 9 and digit < 16:\n                 digit = dic[digit]\n             else:\n                 digit = str(digit)\n             ans.append(digit)\n         return \"\".join(ans[::-1])\n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num<0: num = 2**32 -1 - ~num\n         if num ==0: return '0'\n         s = \"\"\n         dic = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n         for i in range(8,-1,-1):\n             if int(num/(16**i)) > 0:\n                 if int(num/(16**i))<10: s = s + str(int(num/(16**i)))\n                 else:\n                     s = s + dic[int(num/(16**i))]\n                 num = num - int(num / (16 ** i))*(16**i)\n             else:\n                 if len(s)>0: s = s+ '0'\n         return s\n         \n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return \"0\"\n         check = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n         save = []\n         num = (num + 4294967296) % 4294967296\n         while num > 0:\n             save.append(check[num % 16])\n             num //= 16\n         return \"\".join(save)[::-1]", "class Solution:\n     def toHex(self, num):\n         def toHexUnsigned(num):\n             num_hex = []\n             while num // 16 > 0:\n                 digit = num % 16\n                 if digit >= 10:\n                     num_hex.append(chr(digit-10+ord('a')))\n                 else:\n                     num_hex.append(str(digit))\n                 num = num // 16\n                 \n             if num >= 10:\n                 num_hex.append(chr(num-10+ord('a')))\n             elif num > 0:\n                 num_hex.append(str(num))\n             \n             return \"\".join(num_hex[::-1])\n          \n         if num == 0:\n             return \"0\"\n         if num < 0:\n             return toHexUnsigned(2**32+num)\n         else:\n             return toHexUnsigned(num)\n         \n", "class Solution(object):\n     def toHex(self, num):\n         if num == 0: return '0'\n         if num < 0: num = num + 2**32  # convert negative to positive\n         hexa = '0123456789abcdef'  # based on 16\n         r = ''\n         while num:\n             r = hexa[num%16] + r\n             num = num // 16\n         return r\n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         if num < 0:\n             num = num + 2**32\n         mapping = '0123456789abcdef'\n         output = ''\n         while num > 0:\n             print(num)\n             remainder = num % 16\n             output = mapping[remainder] + output\n             num = math.floor(num / 16)\n         return output\n", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num==0: return '0'\n         mp = '0123456789abcdef'  # like a map\n         ans = ''\n         for i in range(8):\n             n = num %16       # or n=num & 15, this means num & 1111b\n             c = mp[n]          # get the hex char \n             ans=c+ans\n             num = num >> 4     #num\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u53f3\u79fb4\u4f4d\n         return ans.lstrip('0')  #strip leading zeroes", "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n \n         hexKey = '0123456789abcdef'\n         ans = ''\n         \n         for _ in range(8):\n             ans = hexKey[num & 15] + ans\n             num >>= 4\n \n         return ans.lstrip('0')"]