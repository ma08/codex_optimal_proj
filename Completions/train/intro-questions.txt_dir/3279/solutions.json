["import re\n\ndef sursurungal(txt):\n    txt=re.sub(r'\\b2\\s(\\S+)s', r'2 bu\\1', txt) \n    txt=re.sub(r'\\b([3-9])\\s(\\S+)s', r'\\1 \\2zo', txt)\n    return re.sub(r'(\\d+\\d)\\s(\\S+)s', r'\\1 ga\\2ga', txt)\n    \n", "import re\n\ndef sursurungal(txt):\n    txt = re.sub(r'\\b2\\s(\\S+)s', r'2 bu\\1', txt)\n    txt = re.sub(r'\\b([3-9])\\s(\\S+)s', r'\\1 \\2zo', txt)\n    return re.sub(r'\\b(\\d{2,})\\s(\\S+)s', r'\\1 ga\\2ga', txt)", "def sursurungal(txt):\n  sursurungal.pluralize, dual, paucal, plural = False, 'bu{}'.format, '{}zo'.format, 'ga{}ga'.format\n  def process_word(word):\n    if sursurungal.pluralize != False:\n      out = None\n      if sursurungal.pluralize <= 1: out = word\n      else: # <-- Look at that curve!\n        base = word\n        if word[-1] == 's': base = word[0:-1]\n        if sursurungal.pluralize == 2: out = dual(base)\n        elif sursurungal.pluralize <= 9: out = paucal(base)\n        else: out = plural(base)\n      sursurungal.pluralize = False\n      return out\n    if word.isdigit(): sursurungal.pluralize = int(word)\n    return word\n  return '\\n'.join(' '.join(process_word(w) for w in l.split(' ')) for l in txt.split('\\n'))", "sursurungal=lambda s:__import__('re').sub(r'(\\d+) (\\w+)',lambda x:(lambda a,b:str(a)+' '+[[['bu'+b[:-1],b[:-1]+'zo'][a>2],'ga'+b[:-1]+'ga'][a>9],b][a<2])(int(x.group(1)),x.group(2)),s)", "import re\n\ndef sursurungal(stg):\n    return re.sub(r\"(\\d+) (\\w+)\", sur_grp, stg)\n\ndef sur_grp(m):\n    n, w = (int(c) if c.isdigit() else c for c in m.groups())\n    p, s = (\"\", w[-1]) if n < 2 else (\"bu\", \"\") if n == 2 else (\"\", \"zo\") if n < 10 else (\"ga\", \"ga\")\n    return f\"{n} {p}{w[:-1]}{s}\"", "import re\n\ndef s(m):\n    n, w = m.groups()\n    n = int(n)\n    if n <= 1:\n        return m.group()\n    w = w[:-1]\n    if n == 2:\n        return '{} bu{}'.format(n, w)\n    elif n <= 9:\n        return '{} {}zo'.format(n, w)\n    else:\n        return '{} ga{}ga'.format(n, w)\n\ndef sursurungal(txt):\n    return re.sub('(\\d+) (\\w+)', s, txt)", "import re\n\nPATTERN = re.compile(r'(\\d+) (\\w+)')\n\ndef repl(m):\n    n = int(m.group(1))\n    return \"{} {}{}{}\".format(n,\n                              'bu' if n==2 else 'ga' if n>9 else '',\n                              m.group(2) if n<2 else m.group(2)[:-1],\n                              '' if n<3 else 'zo' if n<10 else 'ga')\n\ndef sursurungal(txt): return PATTERN.sub(repl, txt)\n", "import re\ndef sursurungal(txt):\n    return re.sub(r\"([0-9]+) ([a-z]+)\",lambda x : change(x.group(1),x.group(2)),txt)\n    \ndef change(n,w):    \n    n = int(n)\n    if n <= 1:\n        return str(n)+\" \"+w\n    elif n == 2:\n        return str(n)+\" bu\"+w.rstrip(\"s\")\n    elif n > 2 and n<=9:\n        return str(n)+\" \"+ w.rstrip(\"s\") + \"zo\"\n    else:\n        return  str(n)+\" \"+ \"ga\"+w.rstrip(\"s\")+\"ga\"      ", "import re\nfrom functools import partial\n\ndef convert(match):\n    n, s = match.groups()\n    n = int(n)\n    if n == 0 or n == 1:\n        return match.group()\n    elif n == 2:\n        return \"2 bu{}\".format(s[:-1])\n    elif 3 <= n <= 9 :\n        return \"{} {}zo\".format(n, s[:-1])\n    else:\n        return \"{} ga{}ga\".format(n, s[:-1])\n    \nsursurungal = partial(re.compile(r\"(\\d+) (\\w+)\").sub, convert)", "import re\ndef sursurungal(txt):\n    def change(t1):\n        a, b = t1.split()\n        if int(a) <= 1: return t1\n        if int(a) == 2:\n            return \"{} bu{}\".format(a, b[:-1]) if b[-1] == 's' else \"{} bu{}\".format(a, b)\n        if int(a) <= 9:\n            return \"{} {}zo\".format(a, b[:-1]) if b[-1] == 's' else \"{} {}zo\".format(a, b)\n        else:\n            return \"{} ga{}ga\".format(a, b[:-1]) if b[-1] == 's' else \"{} ga{}ga\".format(a, b)\n        \n    lst = re.findall(\"[0-9]+\\s[a-zA-Z]+[\\n]?\", txt)\n    lst = [i[:-1] if i[-1:] == '\\n' else i for i in lst]\n    t = txt[:]\n    for i in lst:\n        t = re.sub(i, '~', t)\n    lst2 = [change(i) for i in lst]\n    for i in lst2:\n        t = t.replace('~', i, 1)\n    return t"]