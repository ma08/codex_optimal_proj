["def doors(n):\n    return int(n ** .5)", "def doors(n):\n    doors = [False] * n\n    for i in range(0, n):\n        for j in range(i, n, i + 1):\n            doors[j] = not doors[j]\n    return doors.count(True)", "def doors(n):\n    return int(n**0.5)", "def doors(n):\n    from math import sqrt\n    return int(sqrt(n))", "import math\ndef doors(n):\n   return sum([1 for i in range(1, n+1) if (i**0.5).is_integer()])\n    \n            \n        \n            \n    \n        \n", "n = 100000\nli = [0] * n\nstore = []\nfor i in range(1,n):\n    for j in range(i-1, n, i):\n        li[j] ^= 1\n    store.append(li)\ndoors=lambda n:store[n+1][:n].count(1)", "import numpy as np\n\ndef doors(n):\n    doors = np.zeros(n, dtype=int)\n    for i in range(n):\n        doors[i::i+1] ^= 1\n    return sum(doors)", "def doors(n):\n    door_status = []\n    for a in range(0,n):\n        door_status.append(False)\n    for a in range(0,n):\n        for b in range(a,n,a+1):\n            door_status[b] = not door_status[b]\n    result = 0\n    for a in range(0,n):\n        if door_status[a] == True: result += 1\n    return result", "from math import floor, sqrt\ndef doors(n):\n    return floor(sqrt(n))", "def doors(n):\n  allDoors = []\n  for i in range(0, n):\n    allDoors.append(\"closed\")\n\n  for kid in range(1, n+1):\n    for door in range(kid-1, n, kid):\n        if allDoors[door] == \"closed\":\n          allDoors[door] = \"open\"\n        else:\n          allDoors[door] = \"closed\"\n\n  count = 0\n  for j in range(0, len(allDoors)):\n    if allDoors[j] == \"open\":\n      count+=1\n  return count"]