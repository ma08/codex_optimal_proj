["def tiaosheng(a):\n    j, t = 0, 0\n    for j in a:\n        t += 3\n        if j + t > 60:\n            return min(j, 60-t+3)\n    return 60-t", "def tiaosheng(failed_counter):\n    count = 0\n    jumps = 0\n\n    while count < 60:\n        count += 1\n        jumps += 1\n        if jumps in failed_counter:\n            count += 3\n    return jumps", "def tiaosheng(fails):\n    return 60 - sum(1 for i, f in enumerate(fails) for k in range(3) if 3*i + f + k < 60)", "def tiaosheng(arr):\n    t = 0\n    j = 0\n    while t < 60:\n        t += 1\n        j += 1\n        if j in arr:\n            t += 3\n    return j", "def tiaosheng(failed_counter):\n    n = 60\n    for c in failed_counter:\n        if c <= n:\n            n -= min(3, n-c)\n    return n", "def tiaosheng(failed_counter):\n    jump = 60\n    for failed in failed_counter:\n        if failed < jump:\n            jump -= min(jump - failed, 3)\n    return jump", "def tiaosheng(arr):\n    a,b = next(([arr[i-1],arr[i-1]+3*i] for i,j in enumerate(arr) if j+3*i>60),[arr[-1],arr[-1]+3*len(arr)]) if arr else [0,0]\n    return [a,a+60-b][b<60]", "tiaosheng=t=lambda a,e=0:a[0]+e+3>60and min(a[0],60-e)or t(a[1:],e+3)if a else 60-e", "def tiaosheng(failed_counter):\n    time = 0\n    for i in range(1, 61):\n        if time >= 60:\n            return i-1\n        time += 1\n        if i in failed_counter:\n            time += 3\n    return i", "def tiaosheng(failed_counter):\n    a = [1]*200\n    j = 0\n    for i in failed_counter:\n        i += 3 * j\n        j += 1\n        a.insert(i+1,0)\n        a.insert(i+1,0)\n        a.insert(i+1,0)\n    return sum(a[1:61])"]