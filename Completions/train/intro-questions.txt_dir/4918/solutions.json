["def convert(n):\n    ds = list(map(int, reversed(str(n))))\n    return [sum(ds[::4]) - sum(ds[2::4]), sum(ds[1::4]) - sum(ds[3::4])]", "def convert(n):\n    s = str(n)[::-1]\n    return [sum(p * s[i - p::4].count(\"1\") for p in (1, -1)) for i in (1, 2)]\n", "def convert(n):\n    result = sum(1j ** i for i, x in enumerate(str(n)[::-1]) if x == '1')\n    return [result.real, result.imag]", "def convert(n):\n    ls = [int(j) if i%4<=1 else -int(j) for i,j in enumerate(str(n)[::-1])]\n    return [sum(ls[::2]),sum(ls[1::2])]", "from itertools import cycle\n\ndef convert(n):\n    c, i, val = cycle([1,1,-1,-1]), cycle([0,1]), [0, 0]\n    for l in str(n)[::-1]: val[next(i)] += next(c) * (l == '1')\n    return val", "def convert(n):\n    res = sum(x * 1j**i for i,x in enumerate(map(int, str(n)[::-1])))\n    return [res.real, res.imag]", "def convert(n):\n    b = 1\n    s = 0\n    while n > 0:\n        if n % 10 == 1: s += b\n        n //= 10\n        b *= 1j\n    return [int(s.real), int(s.imag)]\n    \n", "def convert(n):\n    base = 1j\n    val = 0\n    for c in str(n):\n        val*= base\n        val += int(c)\n    return [val.real , val.imag]\n", "def convert(n):\n    r=[0,0]\n    for i,d in enumerate(str(n)[::-1]):\n        if i%4==0:\n            r[0]+=int(d)\n        elif i%4==2:\n            r[0]-=int(d)\n        elif i%4==1:\n            r[1]+=int(d)\n        else:\n            r[1]-=int(d)\n    return r", "def convert(n):\n    s = str(n)[::-1]\n    p = [s[i::4].count('1') for i in range(4)]\n    return [p[0] - p[2], p[1] - p[3]]"]