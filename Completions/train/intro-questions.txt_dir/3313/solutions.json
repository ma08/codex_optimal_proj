["import re\ndef highlight(code):\n    code = re.sub(r\"(F+)\", '<span style=\"color: pink\">\\g<1></span>', code)\n    code = re.sub(r\"(L+)\", '<span style=\"color: red\">\\g<1></span>', code)\n    code = re.sub(r\"(R+)\", '<span style=\"color: green\">\\g<1></span>', code)\n    code = re.sub(r\"(\\d+)\", '<span style=\"color: orange\">\\g<1></span>', code)\n    return code", "import re\n\nHL = {'R+':  'green',\n      'F+':  'pink',\n      'L+':  'red',\n      '\\d+': 'orange'}\n      \nPATTERN_HL = re.compile(r'|'.join(HL))\nHL_FORMAT = '<span style=\"color: {}\">{}</span>'\n\ndef replacment(m):\n    s,k = m.group(), m.group()[0] + '+'\n    return (HL_FORMAT.format(HL[k], s) if k in HL else\n            HL_FORMAT.format(HL['\\d+'], s) if s.isdigit() else\n            s)\n\ndef highlight(code):\n    return PATTERN_HL.sub(replacment, code)", "wrap = lambda s: s if s[0] in '()' else '<span style=\"color: ' + {'F':'pink', 'L':'red', 'R':'green'}.get(s[0], 'orange') + '\">' + s + '</span>'    \n\ndef highlight(code):\n    r, last = '', ''\n    \n    for c in code:\n        if last and c != last[-1] and not (c.isdigit() and last.isdigit()):\n            r += wrap(last)\n            last = ''\n        last += c\n                  \n    return r + wrap(last)      ", "from re import sub\n\ndef repl(match):\n    COLORS = {\"F\": \"pink\", \"L\": \"red\", \"R\": \"green\"}\n    match = match.group()\n    color = COLORS.get(match[0], \"orange\")\n    return f'<span style=\"color: {color}\">{match}</span>'\n\n\ndef highlight(code):\n    return sub(\"F+|L+|R+|\\d+\", repl, code)", "import re\n\ndef highlight(code):\n    code = re.sub(r'(\\d+)', r'<span style=\"color: orange\">\\1</span>',\n        re.sub(r'(R+)', r'<span style=\"color: green\">\\1</span>',\n        re.sub(r'(L+)', r'<span style=\"color: red\">\\1</span>',\n        re.sub(r'(F+)', r'<span style=\"color: pink\">\\1</span>',\n        code))))\n    return code", "import re\n\ncolors = dict.fromkeys('0123456789', 'orange')\ncolors.update(F='pink', L='red', R='green')\n\ndef repl(m):\n    c = m.group()\n    return '<span style=\"color: {}\">{}</span>'.format(colors[c[:1]], c)\n    \ndef highlight(code):\n    return re.sub('F+|L+|R+|[0-9]+', repl, code)", "import re\n\ndef highlight(code):\n    colors = dict(zip(\"FLR0123456789\", [\"pink\", \"red\", \"green\"] + [\"orange\"]*10))\n    span = '<span style=\"color: {}\">{}</span>'\n    regex = r\"(F+|L+|R+|[0-9]+|\\(|\\))\"\n    highlight_command = lambda g: g if g in \"()\" else span.format(colors[g[:1]], g)\n    return \"\".join(highlight_command(m.group(0)) for m in re.finditer(regex, code))", "import re\nspan = \"<span style=\\\"color: {0}\\\">{1}</span>\"\nsubs = {\n    \"F\": \"pink\", \n    \"L\": \"red\",\n    \"R\": \"green\",\n    \"digit\": \"orange\"\n}\n\n\ndef sub(match):\n    char = match.group(0)[0]\n    if char.isdigit():\n        return span.format(subs[\"digit\"], match.group(0))\n    else:\n        return span.format(subs[char], match.group(0))\n\ndef highlight(code):\n    return re.sub(\"(F+|L+|R+|[0-9]+)\", sub, code) ", "import re\n\n\ndef highlight(code):\n    patterns = {\n        'F': 'pink',\n        'L': 'red',\n        'R': 'green',\n        '0-9': 'orange',\n    }\n    new_string = code\n    for pattern, color in patterns.items():\n        _pattern = re.compile(r'([{}]+)'.format(pattern))\n        new_string = _pattern.sub(r'<span style=\"color: {}\">\\1</span>'.format(color), new_string)\n    return new_string", "highlight=lambda s:__import__('re').sub(r'([FLR])\\1*|\\d+',lambda m:'<span style=\"color: %s\">%s</span>'%({'F':'pink','L':'red','R':'green'}.get(m.group()[0],'orange'),m.group()),s)"]