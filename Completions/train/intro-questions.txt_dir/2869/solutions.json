["def distinct(seq):\n    return sorted(set(seq), key = seq.index)", "def distinct(seq):\n    result = []\n    seen = set()\n    for a in seq:\n        if a not in seen:\n            result.append(a)\n            seen.add(a)\n    return result", "# Using Set:\n# Time complexity | O(N)\ndef distinct(seq):\n    result = []\n    seen = set()\n    for a in seq:   #O(N) operation in terms of time complexity\n        if a not in seen:  #O(1) operation in terms of time complexity\n            result.append(a)\n            seen.add(a)\n    return result\n", "from collections import OrderedDict\ndef distinct(seq):\n    return list(OrderedDict.fromkeys(seq))", "def distinct(seq):\n    return list(dict.fromkeys(seq))", "def distinct(seq):\n    nl = []\n    [nl.append(i) for i in seq if i not in nl]\n    return nl", "def distinct(seq):\n    result = []\n    for item in seq:\n        if item not in result:\n            result.append(item)\n\n    return result", "distinct = lambda s: [e for i,e in enumerate(s) if e not in s[:i]]", "def distinct(seq):\n    result = []\n    uniques = {i:True for i in set(seq)}\n    for object in seq:\n        if uniques[object]:\n            result.append(object)\n            uniques[object] = False\n    return result", "def distinct(seq):\n    res = []\n    for x in seq:\n        if res.count(x) == 0:\n            res.append(x)\n    return res", "def distinct(seq):\n    s = set(seq)\n    return [s.remove(n) or n for n in seq if n in s]", "from collections import OrderedDict\n\ndef distinct(numbers):\n    return list(OrderedDict.fromkeys(numbers).keys())", "def distinct(seq):\n    new_seq = []\n    [new_seq.append(seq[i]) for i in range(len(seq)) if seq[i] not in new_seq]\n    return new_seq", "from typing import List\n\ndef distinct(seq: List[int]) -> List[int]:\n    \"\"\" Remove duplicates from an array of numbers and return it as a result. \"\"\"\n    return list(dict.fromkeys(seq))", "def distinct(seq):\n    return [x for i,x in enumerate(seq) if i == seq.index(x)]", "def distinct(seq):\n    newSeq, tmp = [], None\n    \n    for i in seq:\n        if i != tmp and i not in newSeq:\n            newSeq.append(i)\n            tmp = i\n            \n    return newSeq", "def distinct(seq):\n    i = []\n    for x in seq:\n        if x not in i:\n            i.append(x)\n    return i", "# from more_itertools import unique_everseen as distinct\n\nfrom itertools import filterfalse\n\ndef unique_everseen(iterable):\n    seen = set()\n    seen_add = seen.add\n    for element in filterfalse(seen.__contains__, iterable):\n        seen_add(element)\n        yield element\n        \ndistinct = lambda arr: list(unique_everseen(arr))   \n        \n", "distinct = lambda seq: [ seq[i] for i in range(len(seq)) if seq[i] not in seq[:i] + seq[i+1:] or i == seq.index(seq[i]) ]", "def distinct(seq):\n    seen = set()\n    return [x for x in seq if not (x in seen or seen.add(x))]", "distinct=lambda s:[v for i,v in enumerate(s) if v not in s[:i]]", "def distinct(seq):\n    v=[]\n    for a in seq:\n        if a not in v:\n            v.append(a)\n    return v", "def distinct(num):\n    uni = []\n    for n in num:\n        if n not in uni:\n            uni.append(n)\n    return uni", "def distinct(seq):\n    out=[]\n    for x in seq :\n        if not x in out : out.append(x)\n    return out", "def distinct(seq) :\n    unique = []\n    for x in seq :\n        if x not in unique :\n            unique.append(x)\n    return unique", "def distinct(seq):\n    #return list(set(seq))\n    \n    seq2 = []\n    for i in seq:\n        if i not in seq2:\n            seq2.append(i)\n    return seq2", "def distinct(seq):\n    mylist = []\n    for i in seq:\n        if i not in mylist:\n            mylist.append(i)\n    return mylist", "def distinct(seq):\n    res=list()\n    for item in seq:\n        if item not in res:\n            res.append(item)\n    return res\n", "def distinct(seq):\n    res = []\n    for num in seq:\n        if num not in res:\n            res.append(num) \n    print(res)\n    return res\n", "def distinct(seq):\n    seq1 = list()\n    for i in seq:\n        if i not in seq1:\n            seq1.append(i)\n    return seq1", "def distinct(seq):\n    return sorted(set(seq), key=lambda d: seq.index(d))", "def distinct(seq):\n    arr = [seq[0]]\n    a = seq[0]\n    for x in range(1, len(seq)):\n        if not seq[x] in arr:\n            arr.append(seq[x])\n    return arr", "def distinct(seq):\n    oplst = []\n    \n    for s in seq:\n        if s not in oplst:\n            oplst.append(s)\n    \n    return oplst", "def distinct(seq):\n    lst = []\n    for el in seq:\n        if el not in lst:\n            lst.append(el)\n    \n    return lst", "def distinct(seq):\n    unique_lst = []\n    for num in seq:\n        if num not in unique_lst:\n            unique_lst.append(num)\n    return unique_lst", "def distinct(seq):\n    lst = list(dict.fromkeys(seq))\n    return lst", "def distinct(seq):\n    a = set()\n    return [x for x in seq if x not in a and not a.add(x)]", "def distinct(seq):\n    sq = []\n    for i in seq:\n        if i not in sq:\n            sq.append(i)\n        else:\n            pass\n    return sq", "def distinct(seq):\n    uniq_seq =[]\n    for el in seq:\n        if el not in uniq_seq:\n            uniq_seq.append(el)\n    return uniq_seq\n", "def distinct(seq):\n    n = []\n    for x in seq:\n        if x not in n:\n            n.append(x)\n    return n", "def distinct(seq):\n    k = list(dict.fromkeys(seq))\n    return k", "distinct = lambda s:[n for i, n in enumerate(s) if not (s.count(n)>1 and s.index(n)<i)]", "def distinct(seq):\n    unique = []\n    for c in seq:\n        if c not in unique:\n            unique.append(c)\n            \n    return unique", "def distinct(seq):\n    check = []\n    for item in seq:\n        if item not in check:\n            check.append(item)\n    return check", "def distinct(seq):\n    # create new array\n    array = []\n    for x in seq:\n        if x not in array:\n            array.append(x)\n    return array", "def distinct(seq):\n    d = {}\n    for s in seq:\n        d[s] = 1\n    return list(d.keys())", "def distinct(seq):\n    found = set()\n    result = []\n    for i in seq:\n        if i in found:\n            continue\n        result.append(i)\n        found.add(i)\n    return result", "def distinct(seq):\n    return list({i : i for i in seq}.keys())\n", "def distinct(seq):\n    r = []\n    s = set()\n    for n in seq:\n        if n not in s:\n            s.add(n)\n            r.append(n)\n    return r", "def distinct(seq):\n    unique = []\n    for s in seq:\n        if s not in unique:\n            unique.append(s)\n            \n    return unique", "def distinct(seq):\n    result_mas = []\n    for i in seq:\n        if i not in result_mas:\n            result_mas.append(i)\n    return result_mas", "def distinct(seq):\n    l = []\n    for elem in seq:\n        if elem not in l:\n            l.append(elem)\n    return l", "def distinct(seq):\n    done = set()\n    return [x for x in seq if not (x in done or done.add(x))]", "def distinct(seq):\n    k = []\n    for i in seq:\n        if i not in k:\n            k += [i]\n    return k\n", "def distinct(seq):\n    new_list = []\n    [new_list.append(item) for item in seq if item not in new_list]\n    return new_list", "def distinct(seq):\n    a = []\n    for el in seq:\n        if el not in a:\n            a.append(el)\n    return a", "def distinct(seq):\n    test_list = list( dict.fromkeys(seq) ) \n    return test_list", "from itertools import groupby\ndef distinct(seq):\n    seq_new = []\n    for i in seq:\n        if i not in seq_new:\n            seq_new.append(i)\n    return seq_new\n    \n", "def distinct(seq):\n    answer = []\n    for a in seq:\n        if answer.count(a)==0:\n            answer.append(a)\n    return answer", "def distinct(seq):\n    result = []\n    for item in seq:\n        if item not in result:\n            result.append(item)\n\n    return result\n\nprint(distinct([1,1,2]))", "def distinct(seq):\n    s = set(seq)\n    res = []\n    for e in seq:\n        if e in s:\n            res.append(e)\n            s.remove(e)\n    return res", "def distinct(seq):\n    sum = []\n    for i in seq:\n        if i not in sum:\n            sum.append(i)\n    return sum", "def distinct(arr):\n    newA = []\n    for el in arr:\n        if not el in newA:\n            newA.append(el)\n    return newA", "def distinct(seq):\n    seq = list(dict.fromkeys(seq))\n    return seq", "def distinct(sequence):\n    seen = set()\n    return [x for x in sequence if not (x in seen or seen.add(x))]\n", "def distinct(seq):\n    clean = []\n    for i in seq:\n        if i not in clean:\n            clean.append(i)\n    return clean", "def distinct(seq):\n    \n    available = []\n    ret = []\n    for item in seq:\n        if item in available:\n            continue\n        available.append(item)\n        ret.append(item)\n        \n    return ret", "def distinct(seq):\n    l=set(seq)\n    g=[]\n    for i in seq:\n        if i in l:\n            g.append(i)\n            l.remove(i)\n    return g", "def distinct(seq):\n    list = []\n    for i in seq:\n        if not i in list:\n            list.append(i)\n        else:\n            pass\n    return list", "def distinct(seq):\n    liste = []\n    for a in seq:\n        if not a in liste:\n            liste.append(a)\n    return liste", "def distinct(seq):\n    return [i[1] for i in enumerate(seq) if i[1] not in seq[:i[0]]]", "def distinct(seq):\n    uniqueList = []\n    \n    # Iterate over the original list and for each element\n    # add it to uniqueList, if its not already there.\n    for elem in seq:\n        if elem not in uniqueList:\n            uniqueList.append(elem)\n    \n    # Return the list of unique elements        \n    return uniqueList\n \n", "def distinct(seq):\n    \n# =============================================================================\n#     This function removes duplicates from an array of numbers and returns it \n#     as a result.\n#     The order of the returned sequence is the same as found in the given list\n#     \n#     Example:\n#         distinct([1, 1, 2]) ==> [1, 2]\n# =============================================================================\n    \n    result = []\n    \n    for num in seq:\n        if num not in result:\n            result.append(num)\n    \n    return result", "def distinct(seq):\n    lista_filtrada = []\n    for i in seq:\n        if i not in lista_filtrada:\n            lista_filtrada.append(i)\n    return(lista_filtrada)", "def distinct(seq):\n    l=[]\n    for i in seq:\n        if i not in l:\n            l.append(i)\n        else:\n            pass\n    return l", "def distinct(seq):\n    newlist = []\n    for eachnumber in seq:\n        if eachnumber in newlist:\n            continue\n        else:\n            newlist.append(eachnumber)\n    return newlist", "def distinct(seq):\n    ls=[]\n    for i in seq:\n        if i in ls:\n            continue\n        ls.append(i)\n    return ls", "def distinct(seq):\n    result = []\n    for num in seq:\n        if result.count(num) < 1:\n            result.append(num)\n    return result", "def distinct(seq):\n    r = []\n    for i in seq:\n        if not i in r:\n            r.append(i)\n    return r", "def distinct(seq):\n    \"\"\"return list of distnct values maintaining list order\"\"\"\n    return [ seq[i] for i in range(len(seq)) if seq[i] not in seq[:i] ]\n", "def distinct(seq):\n    new_seq = []\n    for c in seq:\n        if c not in new_seq:\n            new_seq.append(c)\n    return new_seq", "def distinct(seq):\n    new_list = []\n    for elem in seq:\n        if elem not in new_list:\n            new_list.append(elem)\n    return new_list", "def distinct(seq):\n    new_lst = []\n    for i in seq:\n        if i not in new_lst:\n            new_lst.append(i)\n            \n    return new_lst", "def distinct(seq):\n    numbers = []\n    \n    for elem in seq:\n        if elem not in numbers:\n            numbers.append(elem)\n    \n    return numbers", "def distinct(seq):\n\n    dct= {}\n    lst = list()\n    \n    for i in seq:\n      if i not in dct:\n        dct[i] = 1\n      else:\n        dct[i] = dct[i] + 1\n\n    for j in dct.keys():\n      lst.append(j)\n    return lst ", "def distinct(seq):\n    arr = []\n    used = set()\n    \n    for n in seq:\n        if n not in used:\n          arr.append(n)\n          used.add(n)\n          \n    return arr", "def distinct(seq):\n    salida = []\n\n    for elmnt in seq:\n        if elmnt not in salida:\n            salida.append(elmnt)\n            \n    return salida", "def distinct(seq):\n    result=[]\n    seen=[]\n    for i in seq:\n        if i not in seen:\n            result.append(i)\n            seen.append(i)\n    return result        ", "def distinct(seq):\n    l1 = []\n    for x in seq:\n        if x not in l1:\n            l1.append(x)\n    return l1", "def distinct(seq):\n    bob=[]\n    i=0\n    while i<len(seq):\n        if seq[i] not in bob: bob.append(seq[i])\n        i+=1\n\n    return bob", "from collections import Counter\n\ndef distinct(numbers):\n  number_counts = Counter(numbers)\n\n  return list(number_counts)\n", "from collections import Counter\n\ndef distinct(numbers):\n  number_counts = Counter(numbers)\n\n  return list(number_counts.keys())\n", "def distinct(seq):\n    item = []\n    for i in seq:\n        if i not in item:\n            item.append(i)\n    return item            ", "from collections import Counter\ndef distinct(seq) :\n    listt = list()\n    seq = Counter(seq)\n    for i in list(seq.items()) :\n        listt.append(i[0])\n\n    return listt\n    \n\n\n    \n", "def distinct(a):\n    b = {}\n    return [b.setdefault(d, d) for d in a if d not in b]\n", "def distinct(seq):\n  sol=[]\n  for num in seq:\n    if num not in sol:\n      sol.append(num)\n  return sol\n\n", "def distinct(seq):\n    import collections\n    return [i for i in dict(collections.Counter(seq))]", "def distinct(seq):\n    test = set()\n    unique = []\n    for x in seq:\n        if x not in test:\n            unique.append(x)\n            test.add(x)\n    return unique\n", "def distinct(seq):\n    list = []\n    for value in seq:\n        if value not in list:\n            list.append(value)      \n    return list\n", "def distinct(seq):\n    c=[]\n    for i in seq:\n        if i not in c:\n            c.append(i)\n    return c"]