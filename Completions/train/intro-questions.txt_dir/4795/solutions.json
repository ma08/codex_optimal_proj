["from re import compile as reCompile\n\nSENTENCE = reCompile(r'[.!?]')\nSYLLABLE = reCompile(r'(?i)[aeiou]+')\n\ndef count(string, pattern):\n    return len(pattern.findall(string))\n\ndef flesch_kincaid(text):\n    nWords = text.count(' ') + 1\n    return round(0.39 * nWords / count(text, SENTENCE) + 11.8 * count(text, SYLLABLE) / nWords - 15.59, 2)", "import re\n\ndef flesch_kincaid(text):\n    \n    _words = lambda s: [''.join(c for c in w if c.isalpha) for w in s.split()]\n    \n    _syllables = lambda ws: sum(max(len(re.findall('[aeiou]+', w)), 1) for w in ws)\n    \n    sentences = [_words(s) for s in re.split(r'[.!?]+', text.lower()) if s]\n    p1 = 0.39 / len(sentences) * sum(len(w) for w in sentences) \n    p2 = 11.8 / sum(len(w) for w in sentences) * sum(_syllables(s) for s in sentences) \n    return round(p1 + p2 - 15.59, 2)\n", "import re\ndef flesch_kincaid(text):\n    nLines = len(re.findall(r'([.?!;:]+)',text))\n    nWords = text.count(' ')+1\n    nSyll = len(re.findall(r'([aeiou]+)',text, flags=re.IGNORECASE))\n    return round( 0.39 * nWords/nLines + 11.8 * nSyll/nWords - 15.59, 2)", "from re import findall\nflesch_kincaid=lambda text: round(len(text.split(\" \"))*0.39/len(findall(\"[.!?]\",text))+len(findall(\"[AEIOUaeiou]+\",text))*11.8/len(text.split(\" \"))-15.59,2)", "V = 'aeouiAEOUI'\n\ndef flesch_kincaid(text):\n    sentences = text.count(\".\") + text.count(\"!\") + text.count(\"?\")\n    words     = text.count(\" \") + 1\n    syllables = sum(p not in V and c in V for p, c in zip(\" \" + text, text))\n    return round(0.39 * words / sentences + 11.8 * syllables / words - 15.59, 2)", "import re\ndef flesch_kincaid(s):\n    w = len(s.split())\n    return round(0.39*w/len(re.split(r'[!.?]',s)[:-1])+11.8*len(re.findall(r'[aeiou]+',s,re.I))/w-15.59,2)", "import re\n\ndef flesch_kincaid(text):\n    words = len(text.split())\n    syllables = len(re.findall('[aeiou]+', text.lower()))\n    sentences = len(re.split('[.!?]+', text.strip('.!?')))\n    \n    return round(0.39 * words / sentences + 11.8 * syllables / words - 15.59, 2)", "import re\n\ndef flesch_kincaid(text):\n    sen_l = re.split('[.!?]', text)\n    words, syllables, sentences = 0, 0, len(sen_l)-1\n    for sen in sen_l[:-1]:\n        for w in sen.split():\n            words += 1\n            syllables += len(re.findall(r'[aeiouAEIOU]+',w))\n    return round(0.39*words/sentences+11.8*syllables/words-15.59, 2)\n", "import re\n\ndef flesch_kincaid(text):\n    words = len(re.findall(\"\\w+\", text))\n    syl = len(re.findall(\"[aeiou]+\", text, re.I))\n    sen = len(re.findall(\"[\\w\\s]+\", text))    \n    res = (0.39 * words/sen) + (11.8 * syl / words) - 15.59\n    return round(res * 100) / 100.0\n", "import re\n \ndef syl_count(word):\n    return len(re.findall(r'[aeiou]+', word.lower()))\n\ndef flesch_kincaid(text):\n    sentences_cnt = len([x for x in re.sub('\\.|!|\\?', '.', text).split('.') if x != ''])\n    words_cnt = float(text.count(' ') + 1);\n    syl_cnt = 0.0;\n    for word in text.split(' '):\n        syl_cnt += syl_count(word);\n    syl_cnt /= words_cnt\n    return round((0.39 * words_cnt / sentences_cnt) + (11.8 * syl_cnt) - 15.59, 2)\n"]