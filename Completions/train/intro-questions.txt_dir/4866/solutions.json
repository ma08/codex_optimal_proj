["def split_all_even_numbers(numbers, split_type):\n    result = []\n    for a in numbers:\n        if a % 2:\n            result.append(a)\n        else:\n            pairs = [(b, a - b) for b in range(1, a // 2 + 1, 2) if a - b % 2]\n            if split_type == 0:\n                result.extend(pairs[-1])\n            elif split_type == 1:\n                result.extend(pairs[0])\n            elif split_type == 2:\n                for c, _ in reversed(pairs):\n                    quo, rem = divmod(a, c)\n                    if not rem:\n                        result.extend([c] * quo)\n                        break\n            elif split_type == 3:\n                result.extend([1] * a)\n    return result\n", "from itertools import chain\n\ndef split_all_even_numbers(lst, way):\n\n    def convert(n):\n        s = 1 - (n//2) % 2                               # Shift for closest odd numbers\n        return ([n]              if n%2 else             # Is already odd\n                [n//2-s, n//2+s] if way == 0 else        # Two closest odd sum\n                [1,n-1]          if way == 1 else        # Two farthest odd sum\n                [1]*n            if way == 3 else        # Split in ones\n                split_all_even_numbers([n//2]*2, 2))     # Split in highest possible odds\n    \n    return list(chain(*map(convert, lst)))", "def split_even_number0(n):\n    if not n % 4:\n        return [n / 2 - 1,n / 2 + 1]\n    return [n / 2,n / 2]\n\ndef split_even_number1(n):\n    return [1,n - 1]\n\ndef split_even_number2(n):\n    times = 1\n    tmp = n\n    while not tmp % 2:\n        tmp /= 2\n        times *= 2\n    return [tmp] * times\n\ndef split_even_number3(n):\n    return [1] * n\n\ndef split_all_even_numbers(numbers, way):\n    result = []\n    for i in numbers:\n        if i % 2:\n            result += [i]\n        else:\n            if way == 0:\n                result += split_even_number0(i)\n            elif way == 1:\n                result += split_even_number1(i)\n            elif way == 2:\n                result += split_even_number2(i)\n            else:\n                result += split_even_number3(i)\n    return result", "def split_all_even_numbers(numbers, way):\n    split = (split_closest, split_furthest, split_max_equal, split_ones)[way]\n    return sum(([n] if n % 2 else split(n) for n in numbers), [])\n\n\nsplit_closest = lambda n: [n//2 + s * (n%4 == 0) for s in (-1, 1)]\nsplit_furthest = lambda n: [1, n-1]\nsplit_max_equal = lambda n: [n] if n % 2 else split_max_equal(n // 2) * 2\nsplit_ones = lambda n: [1 for _ in range(n)]", "split0 = lambda x: [x] if x&1 else [(x>>1) - ((x&2)>>1^1), (x>>1) + ((x&2)>>1^1)]\nsplit1 = lambda x: [x] if x&1 else [1, x-1]\nsplit2 = lambda x: [x] if x&1 else split2(x>>1)*2\nsplit3 = lambda x: [x] if x&1 else [1]*x\n\nsplits = (split0, split1, split2, split3)\n\ndef split_all_even_numbers(numbers, way):\n    return [y for x in numbers for y in splits[way](x)]", "def split_all_even_numbers(arr, way):\n    if way==0 : return sum([[[(i//2)-(not(i//2)&1),(i//2)+(not(i//2)&1)],[i]][i&1] for i in arr],[])\n    if way==1 : return sum([[[1, i - 1],[i]][i&1] for i in arr],[])\n    if way == 2:\n        li = []\n        for i in arr:\n            if not i & 1:\n                a, b = next([k, i // k] for k in range(i - 1, 0, -1) if i % k == 0 and k & 1)\n                li.extend([a] * b)\n            else : li.append(i)\n        return li\n    return sum([[[1] * i,[i]][i&1] for i in arr],[])", "from itertools import chain\n\ndef f1(n):\n    x = n // 2\n    if x % 2:\n        return x, n-x\n    else:\n        return x-1, x+1\n\ndef f3(n):\n    m = n\n    while m % 2 == 0:\n        m //= 2\n    return [m] * (n // m)\n\nfs = [f1, lambda n: [1, n-1], f3, lambda n: [1] * n]\n\ndef split_all_even_numbers(numbers, way):\n    return list(chain.from_iterable([n] if n % 2 else fs[way](n) for n in numbers))", "ways = {\n    0 : lambda n : [n//2]*2 if (n//2)%2 else [n//2-1,n//2+1],\n    1 : lambda n : [1,n-1],\n    2 : lambda n : [ [n//x]*x for x in range(2,n+1) if sum([n//x]*x)==n and (n//x)%2][0],\n    3 : lambda n : [1]*n\n}\n\ndef split_all_even_numbers(numbers, way):\n  return [x for lists in [ways[way](x) if not x%2 else [x] for x in numbers] for x in lists]", "def even(n):\n    return n % 2 == 0\n\ndef split_all_even_numbers(numbers, way):\n    lst = []\n    for n in numbers:\n        if even(n): lst += split(n, way)\n        else: lst += [n]\n    return lst                \n        \ndef split(num, way):  \n    if way == 0:\n        half = num / 2\n        return [half-1, half+1] if even(half) else [half, half]\n    elif way == 1:\n        return [1, num - 1]\n    elif way == 2:\n        return next([d] * (num // d) for d in range(num-1, 0, -2) if num % d == 0)\n    elif way == 3:\n        return [1] * num", "def split_all_even_numbers(numbers, way):\n    def split0(n): return (n // 2, n // 2) if n//2 % 2 else (n//2 - 1, n//2 + 1)\n    def split1(n): return 1, n-1\n    def split2(n):\n        ctr = 0\n        while n % 2 == 0:\n            ctr, n = ctr + 1, n//2\n        return [n]*(2**ctr)\n    def split3(n): return [1]*n\n    split_ops = [split0, split1, split2, split3]\n    return [x for lst in [split_ops[way](n) if n % 2 == 0 else [n] for n in numbers] for x in lst]"]