["class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         if n <=1:\n             return 0\n         else:\n             minprice = prices[0]\n             res = 0\n             for i in range(1,n):\n                 if prices[i] - minprice > res:\n                     res = prices[i] - minprice\n                 if prices[i]<minprice:\n                     minprice = prices[i]\n \n             return res\n                     \n             \n         \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         hold = float(\"inf\")\n         result = 0\n         \n         for p in prices:\n             if p>hold:\n                 result=max(result,p-hold)\n             hold = min(hold, p)\n         return result\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         mincur,maxcur=prices[0],0\n         for index in range(len(prices)):\n             mincur=min(prices[index],mincur)\n             maxcur=max(prices[index]-mincur,maxcur)\n         return maxcur\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices) < 2:\n             return 0\n         max_profit = 0\n         min_before = prices[0]\n         for i in prices:\n             min_before = min(i,min_before)\n             max_profit = max(max_profit,i-min_before)\n \n         return max_profit", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         profit = 0\n         buy = prices[0] if prices else None\n         for price in prices:\n             buy = min(buy, price)\n             profit = max(profit, price - buy)\n         return profit\n             \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         hold = float(\"inf\")\n         result = 0\n         \n         for p in prices:\n             if p>hold:\n                 result=max(result,p-hold)\n             else:\n                 hold = p\n         return result\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         curr_min = float('inf')\n         max_profit = 0\n         \n         for price in prices:\n             curr_min = min(curr_min, price)\n             profit = price - curr_min \n             max_profit = max(max_profit, profit)\n             \n         return max_profit", "class Solution:\n     def maxProfit1(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         mincur,maxcur=prices[0],0\n         for index in range(len(prices)):\n             mincur=min(prices[index],mincur)\n             maxcur=max(prices[index]-mincur,maxcur)\n         return maxcur\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices)<2:\n             return 0\n         maxcur,maxpro=0,0\n         for index in range(1,len(prices)):\n             maxcur+=(prices[index]-prices[index-1])\n             maxcur=max(0,maxcur)\n             maxpro=max(maxpro,maxcur)\n         return maxpro\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         profit = 0\n         for i in range(len(prices)-1):\n             for j in range(i+1,len(prices),1):\n                 if prices[i] >= prices[j]:\n                     break\n                 else:\n                     profit = max(profit, prices[j]-prices[i])\n         return profit", "class Solution:\n     def maxProfit(self, prices):\n         max_profit = 0\n         local_max = 0\n         for i in range(1,len(prices)):\n             if(local_max+prices[i]-prices[i-1]>0):\n                 local_max += prices[i]-prices[i-1]\n                 if(local_max>max_profit):\n                     max_profit = local_max\n             else:\n                 local_max = 0\n         return max_profit\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n \n         return self.count_profit(prices,0,n -1)\n \n     \n \n     def count_profit(self,prices,left,right):\n         if left >= right:\n             return 0\n         if right - left == 1:\n             profit = prices[right] - prices[left]\n             if profit < 0:\n                 profit = 0\n             return profit\n         mid = (left + right) // 2\n         pro_left = self.count_profit(prices,left,mid)\n         pro_right = self.count_profit(prices,mid+1,right)\n         pro_mid = 0\n         i = min(prices[left:mid + 1])\n         j = max(prices[mid+1:right + 1])\n         pro_mid = j -i\n         profit = max(pro_left,pro_mid,pro_right)\n         if profit < 0:\n             profit = 0\n         return profit\n \n \n \n \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         # find the valley first, them sale at peak\n         if not prices: return 0\n         min_price = prices[0]\n         max_profit = 0\n         for i in prices:\n             if i < min_price:\n                 min_price = i\n             elif max_profit < i - min_price:\n                 max_profit = i - min_price\n         return max_profit", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices: return 0\n         min_val = prices[0]\n         profit = 0\n         for i in range(1, len(prices)):\n             if profit < prices[i] - min_val:\n                 profit = prices[i] - min_val\n             if prices[i] < min_val:\n                 min_val = prices[i]\n \n         return profit"]