["def nb_year(population, percent, aug, target):\n    year = 0\n    while population < target:\n        population += population * percent / 100. + aug\n        year += 1\n    return year", "def nb_year(p0, percent, aug, p, years = 0):\n    if p0 < p:\n        return nb_year(p0 + int(p0 * percent / 100) + aug, percent, aug, p, years + 1)\n    return years", "def nb_year(p0, percent, aug, p):\n    return 0 if p0 >= p else nb_year(p0 + p0 * percent/100 + aug, percent, aug, p)+1\n", "def nb_year(p0, percent, aug, p):\n    # base case\n    if p0 >= p:\n        return 0\n\n    # recursive case\n    _p = percent / 100.00\n    p0 = p0 + round(p0 * _p) + aug  # growth of population formula\n    return 1 + nb_year(p0, percent, aug, p)\n", "from math import ceil, log\ndef nb_year(p0, percent, aug, p):\n    if not percent: return ceil(1.*(p - p0) / aug)\n    percent = 1 + percent / 100.\n    r = aug / (1 - percent)\n    return ceil(log((p - r) / (p0 - r), percent))", "def nb_year(p0, percent, aug, p):\n    i = 0    \n    while p0 < p:\n        p0 = p0 + (p0 * percent * 0.01) + aug\n        i += 1\n    return i", "def nb_year(p0, percent, aug, p):\n    current_population = p0\n    years = 0\n    while current_population < p:\n        new_population = current_population + current_population * percent / 100 + aug\n        current_population = new_population\n        years += 1\n    return years\n     \n", "def nb_year(p0, percent, aug, p):\n  y = 0\n  while p0 < p: p0, y = p0 * (1 + percent / 100.0) + aug, y + 1\n  return y", "from math import floor\n\ndef nb_year(p0, percent, aug, p):\n    i = 1\n    mult = 1 + percent / 100.0\n    prev = p0\n    while (prev < p):\n        ne = floor((prev * mult + aug))\n        prev = ne\n        i += 1\n    return (i - 1)", "def nb_year(p0, percent, aug, p):\n    i = 0\n    while p0 < p:\n        p0 += p0*percent/100 + aug\n        i += 1\n    return i", "def nb_year(p0, percent, aug, p):\n    # your code\n    sum = p0\n    percent_value = percent / 100\n    years = 0\n    while (sum < p):\n        years +=1\n        sum += sum*percent_value + aug\n    return years", "# Growth of a Population\ndef nb_year(p0, percent, aug, p, n=0):  # Added n=0.\n  while p0 < p:\n    p0 += aug + (p0 * percent / 100)\n    n += 1\n  return n", "def nb_year(p0, percent, aug, p):\n    years = 0\n    while p0 < p:\n        p0 +=  ((p0/100)*percent) + aug\n        years += 1\n    return years\n\nprint(nb_year(1500000, 0.25, 1000, 2000000))", "def nb_year(x,p,a,y):\n    t = 0\n    while True:\n        x += x*p/100 + a\n        t += 1\n        if x >= y:\n            break\n    return t", "def nb_year(p0, percent, ag, p):\n    year = 0\n    while p0 < p:\n        year += 1\n        p0 = p0 * (1+percent/100) + ag\n    return year", "def nb_year(p0, percent, aug, p):\n    year=0\n    while p0 < p:\n        p0=p0+p0*(percent/100)+aug\n        year=year+1\n    return year\n    \n    \n    # your code\n", "def nb_year(y,e,a,r,s=0):\n    while y<r:y+=y*e*.01+a;s+=1\n    return s", "nb_year=n=lambda a,b,c,d,e=0:n(\na+a*b*.01+c\n,b,c,d,e+1)if a<d else e", "nb_year=lambda p0,percent,aug,p,c=0: c if p<=p0 else nb_year(p0*(1+percent/100)+aug,percent,aug,p,c+1)", "from itertools import accumulate\n\ndef nb_year(p0, pct, aug, p):\n  return next(i for i, x in enumerate(accumulate([p0] * 1000, lambda px, _: px + .01 * pct * px + aug)) if x >= p)", "def nb_year(p0, percent, aug, p):\n    pop=p0\n    y=0\n    while pop<p:pop*=(1+percent/100);pop+=aug;y+=1\n    return y\n", "def nb_year(p0, percent, aug, p):\n    n = p0 + p0* (percent/100) + aug\n    nb= 1 \n    while n < p:\n        n = n + n*(percent/100) + aug\n        nb += 1\n    return(nb)\n        \n\n\n\n\n"]