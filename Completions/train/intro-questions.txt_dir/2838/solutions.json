["def char_concat(word, index = 1):\n  if len(word) < 2: return ''\n  return word[0:1] + word[-1:] + str(index) + char_concat(word[1:-1], index + 1)", "def char_concat(word):\n    return ''.join([(word[i]+word[-1-i]+str(i+1))for i in range(len(word)//2)])\n", "def char_concat(word):\n    return ''.join( \"{}{}{}\".format(word[n], word[-1-n], n+1) for n in range(len(word)//2))", "def char_concat(word):\n    half = len(word) // 2\n    return ''.join('{}{}{}'.format(a[0], a[1], i) for i, a in enumerate(zip(word[:half], word[::-1][:half]), 1))", "def char_concat(word):\n    m = (len(word) + 2) // 2\n    return ''.join(a + b + str(i) for i, (a, b) in enumerate(zip(word[:m], word[-1:-m:-1]), 1))", "def char_concat(word):\n    return \"\".join([word[i] + word[-i-1] + str(i+1) for i in range(len(word)//2)])", "def char_concat(w):\n    n = len(w)//2\n    return \"\".join(c[0]+c[1]+str(i+1) for i, c in enumerate(zip(w[:n], w[:-n-1:-1])))", "def char_concat(word):\n    return ''.join(('%s%s%d' % (a, b, i)) for (i, (a, b)) in enumerate(zip(word[:len(word) // 2], reversed(word[-len(word) // 2:])), 1))\n"]