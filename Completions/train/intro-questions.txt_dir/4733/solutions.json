["def rot_energies(B, Jmin, Jmax):\n    return [B * J * (J + 1) for J in range(Jmin, Jmax + 1)] if B > 0 else []", "def rot_energies(rot, energy_min, energy_max):\n    # We're programmers, not scientists or mathematicians, we can use legible variable names.\n    if rot <= 0:\n        return []\n    else:\n        return [rot * energy * (energy + 1) for energy in range(energy_min, energy_max + 1)]", "def rot_energies(B, Jmin, Jmax):\n    return [B * j * (j + 1) for j in range(Jmin, Jmax + 1)] if B > 0 else []", "def rot_energies(B, Jmin, Jmax):\n    return [B * J * (J + 1) for J in range(Jmin, Jmax + 1)] * (B > 0)", "def rot_energies(B, Jmin, Jmax):\n    if B<=0:\n        return []\n    return [B * J * (J + 1) for J in range(Jmin,Jmax+1)]", "def rot_energies(B, Jmin, Jmax):\n    if B < 0:\n        return []\n    return [B * J * (J + 1) for J in range(Jmin, Jmax + 1)]", "def rot_energies(B, Jmin, Jmax):\n    return [] if B <= 0 else [B * I * (I + 1) for I in range(Jmin, Jmax + 1)]", "def E(B, J):\n    return B*J*(J+1)\n    \ndef rot_energies(B, Jmin, Jmax):\n    if B < 0 or Jmax < Jmin: return []\n    return [E(B, j) for j in range(Jmin, Jmax+1)]\n", "def rot_energies(B, Jmin, Jmax):\n    result = []\n    if B >= 0: \n      for a in range(Jmin, Jmax+1):\n        result.append(B * a * (a+1))\n    return result", "def rot_energies(B, Jmin, Jmax):\n    return [] if B < 0 or Jmin > Jmax else [B * i * (i + 1) for i in range(Jmin, Jmax + 1)]"]