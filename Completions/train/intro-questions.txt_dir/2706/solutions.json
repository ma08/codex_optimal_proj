["def pass_the_bill(total, conservative, reformist):\n    ind = total - conservative - reformist\n    majority = total//2 + 1\n    if conservative > majority:\n        return 0\n    elif conservative + ind < majority:\n        return -1\n    else:\n        return majority - conservative", "def pass_the_bill(t, c, r):\n    return -1 if t < 2*r + 1 else max(0, t//2 + 1 - c)", "def pass_the_bill(par, con, ref):\n    return -1 if ref >= (par / 2) else max(0, par // 2 + 1 - con)\n", "def pass_the_bill(t, c, r):\n    return 0 if c>=(t>>1)+1 else -1 if r>=(t>>1)+1 or r==t>>1 and t%2==0 else (t>>1)+1-c", "pass_the_bill = lambda t, c, r: -1 if r / t >= 0.5 else max(0,int(t/2)+1-c)", "import math \ndef pass_the_bill(total_members, conservative_party_members, reformist_party_members):\n    avg = total_members / 2\n    count = 0\n    if reformist_party_members >= avg: return -1\n    while avg >= conservative_party_members:\n        count += 1\n        conservative_party_members +=1\n    return count", "import math\n\ndef pass_the_bill(total_members, conservative_party_members, reformist_party_members):\n    if reformist_party_members >= total_members / 2: return -1\n    return max(0, math.ceil(total_members / 2 + .5) - conservative_party_members)", "def pass_the_bill(total_members, conservative_party_members, reformist_party_members):\n    independants = total_members - conservative_party_members - reformist_party_members\n    majority = total_members // 2 + 1\n    needed = max(0, majority - conservative_party_members)\n    return -1 if needed > independants else needed", "def pass_the_bill(total, cons, refs):\n    inds = total - cons - refs\n    boundary = total // 2 + 1\n    if cons + inds < boundary:\n        return -1\n    if cons > boundary:\n        return 0\n    return boundary - cons", "def pass_the_bill(t,c,r):\n    i=t//2-c+1\n    return max(i,0) if t-r-c>=i else -1"]