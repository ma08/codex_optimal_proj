["def num_blocks(w, l, h):\n    return w*l*h + (w+l)*h*(h-1)/2 + h*(h-1)*(2*h-1)/6", "def num_blocks(w, l, h):\n    return w*l*h + (w+l) * (h-1)*h//2 + (h-1)*h*(2*h-1)//6\n    \n\"\"\"\nFor those who wonder:\n\nfirst layer being of size w*l, the total number of blocks, SB, is:\n\n       SB = w*l + (w+1)*(l+1) + (w+2)*(l+2) + ... + (w+h-1)*(l+h-1)\n\nSo:    SB = \" Sum from i=0 to h-1 of (w+i)*(l+i) \"\n\nLet's use the following notation for this:  SB = S(i)[ (w+i)*(l+i) ]\n\nThen:\n       SB = S(i)[ w*l + i(w+l) + i**2 ]\n          \n          = S(i)[ w*l ] + S(i)[ i(w+l) ] + S(i)[ i**2 ]\n          \n          =    w*l*h    + (w+l) * S(i)[ i ] + S(i)[ i**2 ]\n\n\nHere, you find two classic sums of sequences (see wiki or equivalent for the demonstrations):\n\n    S(i)[ i ]    = sum of all integers from 1 to x = x*(x+1) // 2\n    S(i)[ i**2 ] = sum of all squares of integers from 1 to x = x*(x+1)*(2*x+1) // 6\n\nSince on our side we do the sum from 0 (which doesn't affect at all the result)\nto h-1 in place of x, we get:\n\n        SB = w*l*h + (w+l) * (h-1)*h//2 + (h-1)*h*(2*h-1)//6\n\n\"\"\"", "def num_blocks (width, length, height):\n    \n    def linsum (n):\n        return n * (n+1) // 2\n        \n    def sqrsum (n):\n        return n * (n+1) * (2*n+1) // 6\n        \n    cube = width * length * height\n    stairs = (width+length) * linsum(height-1)\n    corner = sqrsum(height-1)\n    \n    return cube + stairs + corner\n    \n", "def num_blocks(w, l, h):\n    return w*l*h + (h-1)*h*(w+l+1)//2 + (h-2)*(h-1)*h//3", "from fractions import Fraction\n\ndef num_blocks(w,l,h):\n\n    a = h*w*l\n    b = Fraction((h-1)*(h)*(w+l),2)\n    print(b)\n    c = Fraction((h-1)*h*(2*h-1),6)\n    print(c)\n    return int(a+b+c) ", "\ndef num_blocks(w, l, h):\n    h -= 1\n    return ((h*(h+1)*((2*h)+1))//6)+(((w+l)*h*(h+1))//2 + w*l*h) + w*l", "\ndef num_blocks(w, l, h):\n    return h*(1-3*h+2*h*h-3*l+3*h*l-3*w+3*h*w+6*l*w)//6", "def num_blocks(w, l, h):\n    res= w*l*h \n    h-=1\n    A = h*(h+1)//2\n    B = (h+1)*(2*h+1)*h//6\n    res+= (w+l)*A+B\n    return res", "\ndef num_blocks(w, l, h):\n    return h*w*l + (w+l)*h*(h-1)//2 + h*(h-1)*(2*h-1)//6", "num_blocks=lambda w,l,h:(2*h*h+3*h*(l+w-1)+3*(2*l*w-l-w)+1)*h//6"]