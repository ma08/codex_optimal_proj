["def get_derivative(s):\n    if '^' in s:\n        f,t = map(int, s.split('x^'))\n        return '{}x'.format(f*t) if t==2 else '{}x^{}'.format(f*t, t-1)\n    elif 'x' in s: return s[:-1]\n    else: return '0'", "def get_derivative(s):\n    if 'x' not in s: return '0'\n    if '^' not in s: return s.replace('x', '')\n    a, b = [int(n) for n in s.split('x^')]\n    a *= b\n    b -= 1\n    if b == 1: return '{}x'.format(a)\n    return '{}x^{}'.format(a, b)", "def get_derivative(s):\n    if 'x' not in s:\n        return '0'\n    a = int(s.split('x')[0])\n    b = 1\n    parts = s.split('^')\n    if len(parts) > 1:\n        b = int(parts[1])\n    if b == 2:\n        return str(a * b) + 'x'\n    elif b == 1:\n        return str(a * b)\n    return str(a * b) + 'x^' + str(b-1) ", "def get_derivative(s):\n    if \"x\" not in s:\n        return \"0\"\n    elif s[-1] == \"x\":\n        return s[:-1]\n    else:\n        b, e = [int(p) for p in s.split(\"x^\")]\n        return f\"{b*e}x{'^'+str(e-1) if e != 2 else ''}\"", "def get_derivative(string):\n    if not 'x' in string:\n        return '0'\n    if not '^' in string:\n        return string[:-1]\n    coef, exp = list(map(int, string.split('x^')))\n    return f\"{coef * exp}x^{exp - 1}\" if exp != 2 else f\"{coef * exp}x\"\n", "def get_derivative(f):\n    a, b = map(int, (f + '^%d' % ('x' in f)).replace('x', '').split('^')[:2])\n    return {0: '0', 1: '%d' % a, 2: '%dx' % (a*b)}.get(b, '%dx^%d' % (a*b, b-1))", "import re\n\ndef get_derivative(s):\n    a,b = map(int, re.sub(r'^(\\d+)$', r'\\1x^0', re.sub(r'x$', 'x^1', s)).split(\"x^\"))\n    return re.sub(r'\\^1$|x\\^0', '', \"{}x^{}\".format(a*b, b-1*bool(b)))", "def get_derivative(string):\n    if string.endswith('x'):\n        return string[:-1]\n    if 'x^' not in string:\n        return '0'\n    a, b = string.split('x^')\n    return 'x^'.join([str(int(a)*int(b)), str(int(b)-1)]) if b != '2' else str(int(a)*2)+'x'", "def get_derivative(str):\n    if 'x' not in str: return '0'\n    if '^' not in str: return str[:-1]\n    a,b = str.split('^')\n    na = int(a[:-1]) * int(b)\n    b = int(b)-1\n    if b == 1: \n        return '{}x'.format(na)\n    else:\n        return '{}x^{}'.format(na,b)\n", "def get_derivative(string):\n    if string.endswith('x'):\n        return string.split('x')[0]\n    elif len(string) == 1:\n        return '0'\n    else:\n        s = list(map(int, string.split(\"x^\")))\n        second = s[1] - 1\n        return f\"{s[0] * s[1]}x{'^' + str(second) if second != 1 else ''}\""]