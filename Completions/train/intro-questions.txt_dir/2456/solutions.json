["class Solution:\n    def backspaceCompare(self, S1, S2):\n        i1 = len(S1) - 1 \n        i2 = len(S2) - 1\n        \n        while i1 >= 0 or i2 >= 0:\n            c1 = ''\n            c2 = ''\n            if i1 >= 0:\n                c1, i1 = self.getChar(S1, i1)\n            if i2 >= 0:\n                c2, i2 = self.getChar(S2, i2)\n            if c1 != c2:\n                return False\n        return True\n        \n    \n    def getChar(self, s, i):\n        char = ''\n        count = 0\n        while i >= 0 and not char:\n            if s[i] == '#':\n                count += 1\n            elif count == 0:\n                char = s[i]\n            else:\n                count -= 1\n            i -= 1\n        return char, i\n\n", "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        def test(s):\n            stack = []\n            for l in s:\n                if l == '#':\n                    if len(stack) != 0:\n                        stack.pop()\n                else:\n                    stack.append(l)\n            return ''.join(stack)\n                    \n        return test(S) == test(T)", "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        i, j = len(S) - 1, len(T) - 1\n        \n        \n        backS = backT = 0       \n        \n        while True:\n            while i >= 0 and (backS or S[i] == '#'):\n                backS += 1 if S[i] == '#' else -1\n                i -= 1\n            while j >= 0 and (backT or T[j] == '#'):\n                backT += 1 if T[j] == '#' else -1\n                j -= 1\n            if not (i >= 0 and j >= 0 and S[i] == T[j]):\n                return i == j == -1\n            i, j = i - 1, j - 1", "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        i = len(S) - 1\n        j = len(T) - 1\n        \n        skip_S = 0\n        skip_T = 0\n        \n        while i >=0 or j >= 0:\n            while i >=0 and (S[i] == '#' or skip_S > 0):\n                if S[i] == '#':\n                    skip_S += 1\n                else:\n                    skip_S -= 1\n                i -= 1\n                \n            while j >=0 and (T[j] == '#' or skip_T > 0):\n                if T[j] == '#':\n                    skip_T += 1\n                else:\n                    skip_T -= 1\n                j -= 1\n                \n            if i < 0 and j < 0:\n                return True\n            elif i >= 0 and j >= 0:\n                if S[i] == T[j]:\n                    i -= 1\n                    j -= 1\n                else:\n                    return False\n            elif i >=0 or j >=0:\n                return False\n        return True", "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        \n        s = []\n        \n        for i in S:\n            if i == '#':\n                if s:\n                    s.pop()\n                    \n            else:\n                s.append(i)\n        \n        t = []\n        \n        for i in T:\n            if i == '#':\n                if t:\n                    t.pop()\n                    \n            else:\n                t.append(i)\n        \n        \n        if s == t:\n            return True\n        \n        return False", "class Solution:\n    \n\n\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        \n        def helper(S):\n            r = ''\n            erase = 0\n            for s in S[-1::-1]:\n                if s == '#':\n                    erase+=1\n                elif s !='#' and erase == 0:\n                    r=s+r\n                elif s !='#' and erase >=1:\n                    #r=s+r\n                    erase-=1\n                \n                    \n            return r\n    \n        return helper(S) == helper(T)\n        \n        \n"]