["REV = {'6':'9', '9':'6'}\nBASE = set(\"01869\")\n\ndef isReversible(n):\n    s = str(n)\n    return ( not (set(s) - BASE)                                                          # contains only reversible characters\n             and (not len(s)%2 or s[len(s)//2] not in \"69\")                               # does not contain 6 or 9 right in the middle (only for odd number of digits)\n             and all( REV.get(c, c) == s[-1-i] for i,c in enumerate(s[:len(s)//2]) ))     # symmetric repartition\n\ndef solve(a, b):\n    return sum( isReversible(n) for n in range(a,b) )", "def solve(a, b):\n    return sum(str(n) == str(n)[::-1].translate(str.maketrans('2345679', 'XXXX9X6')) for n in range(a, b))", "def solve(a, b):\n    tr = str.maketrans('0123456789', '01----9-86')\n    return sum(1 for x in map(str, range(a, b)) if x == ''.join(reversed(x.translate(tr))))", "solve=lambda a,b:sum(n==n.translate(n.maketrans('2345679','----9-6'))[::-1]for n in map(str,range(a,b)))", "table = str.maketrans(\"69\", \"96\", \"23457\")\n\ndef solve(a, b):\n    return sum(1 for n in range(a, b) if f\"{n}\"[::-1] == f\"{n}\".translate(table))", "def solve(a, b):\n    s={'0','1','6','8','9'}\n    total=0\n    for i in range(a,b):\n        if i<10:\n            if i in (0,1,8):total += 1\n        else:\n            n=str(i)\n            if set(n).issubset(s):\n                left, right = 0, len(n)-1\n                while left <= right:\n                    ln = n[left]\n                    rn = n[right]\n                    if left==right and ln in '69':\n                        break\n                    if ln+rn in ('69', '96') or (ln==rn and ln in '018'):\n                        left += 1\n                        right -= 1\n                    else: break\n                if left > right: total += 1\n\n            else:\n                continue\n    return total", "rot = dict(['00', '11', '88', '69', '96'])\n\ndef upside_down_number(n):\n    s = str(n)\n    return s == ''.join(rot.get(c, '') for c in reversed(s))\n\ndef solve(a, b):\n    return sum(upside_down_number(i) for i in range(a, b))", "def solve(a, b):\n    return sum(all(a + b in '69 96 88 11 00' for a, b in zip(str(i), str(i)[::-1])) for i in range(a, b))", "dictio = {\"0\":\"0\",\"1\":\"1\",\"6\":\"9\",\"9\":\"6\",\"8\":\"8\"}\ndef solve(a, b):\n    return sum(1 for i in range(a,b) if transf(i))\n\ndef transf(n):\n    n = str(n)\n    for i,j in enumerate(n):\n        if j not in dictio:\n            return False\n        elif dictio[j] != n[-i-1]:\n            return False\n    return True", "\ndef solve(a, b):\n    count = 0\n    for num in range(a, b):\n        num = str(num)\n        if num == num.translate(str.maketrans('1234567890', '1xxxx9x860'))[::-1]:\n            count += 1\n    return count\n    \n"]