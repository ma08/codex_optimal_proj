["def dig_pow(n, p):\n  s = 0\n  for i,c in enumerate(str(n)):\n     s += pow(int(c),p+i)\n  return s/n if s%n==0 else -1\n", "def dig_pow(n, p):\n    k, fail = divmod(sum(int(d)**(p + i) for i, d in enumerate(str(n))), n)\n    return -1 if fail else k\n", "def dig_pow(n, p):\n  t = sum( int(d) ** (p+i) for i, d in enumerate(str(n)) )\n  return t//n if t%n==0 else -1", "def dig_pow(n, p):\n    # your code\n    n_list = [int(i) for i in str(n)]\n    n_sum = 0\n    p_i = p\n    for n_i in n_list:\n        n_sum = n_sum + n_i**p_i\n        p_i = p_i+1\n    if n_sum%n == 0:\n        return n_sum/n\n    else:\n        return -1", "def dig_pow(n, p):\n    sum = 0\n    for c in str(n):\n        sum += int(c) ** p\n        p += 1\n    if sum % n == 0:\n        return sum / n\n    else:\n        return -1", "def dig_pow(n, p):\n    s = sum(int(d)**(p+i) for i,d in enumerate(str(n)))\n    return s/n if s%n == 0 else -1", "def dig_pow(n, p):\n    digit_power = sum(int(x)**pw for pw,x in enumerate(str(n),p))\n    if digit_power % n == 0:\n        return digit_power / n\n    return -1", "def dig_pow(n, p):\n    k, r = divmod(sum( int(l)**(p+i) for i,l in enumerate(str(n)) ), n)\n    return -1 if r else k", "def dig_pow(n, p):\n    digits = [int(d) for d in str(n)]\n    \n    sum = 0\n    for i, d in enumerate(digits):\n        sum += d ** (p+i)\n    \n    if sum % n == 0:\n        return sum / n\n    else:\n        return -1"]