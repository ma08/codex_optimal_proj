["COLORS = set(\"RGB\")\n\ndef triangle(row):\n    while len(row)>1:\n        row = ''.join( a if a==b else (COLORS-{a,b}).pop() for a,b in zip(row, row[1:]))\n    return row", "def triangle(row):\n    dicts = {'GG':'G', 'BB':'B', 'RR':'R', 'BR':'G', 'BG':'R', 'GB':'R', 'GR':'B', 'RG':'B', 'RB':'G'}\n    if len(row) > 2:\n        s = ''\n        for i in range(len(row) - 1):\n            s = s + dicts[row[i:i + 2]]\n        row = s\n        return triangle(row)\n    elif len(row) > 1:\n        return dicts[row]\n    else:\n        return row", "def triangle(row):\n    while len(row) > 1:\n        row = ''.join(({'R', 'G', 'B'} - {a, b}).pop() if a != b else a for a, b in zip(row, row[1:]))\n    return row", "comb = {'GG':'G','BR':'G','RB':'G','RR':'R','BG':'R','GB':'R','BB':'B','RG':'B','GR':'B'}\n\ndef triangle(row):\n    if len(row) == 1: return row    \n    return (triangle(''.join(comb[row[i:i+2]] for i in range(len(row) - 1))))", "colors = set('RGB')\n\ndef triangle(row):\n    while len(row) > 1:\n        row = [a if a == b else colors.difference(a).difference(b).pop() for a, b in zip(row, row[1:])]\n    return row[0]", "def rgb(n,m):\n    if n==m: return m\n    else:\n        return \"RGB\".replace(n,\"\").replace(m,\"\")\n\ndef triangle(row):\n    temp = \"\"\n    ans = row\n    while len(ans) != 1:\n        for n in range(len(ans)-1):\n            temp += rgb(ans[n],ans[n+1])\n        ans = temp\n        temp = \"\"\n    return ans", "def triangle(row):\n    if len(row) == 1:\n        return row[0]\n\n    colors = set([\"B\", \"G\", \"R\"])\n    newrow = []\n    for (l, r) in zip(row, row[1:]):\n        if l == r:\n            newrow.append(l)\n        else:\n            newrow.extend(colors - set([l, r]))\n\n    return triangle(newrow)", "def triangle(row):\n    color = {'GG': 'G', 'BB': 'B', 'RR': 'R', 'BG': 'R', 'GR': 'B', 'BR': 'G', 'GB': 'R', 'RG': 'B', 'RB': 'G'}\n    return triangle(\"\".join(color.get(l+row[j+1]) for j, l in enumerate(row[:-1]))) if len(row) > 1 else row", "def triangle(s):\n    d = {'R':{'R':'R','G':'B','B':'G'},'G':{'R':'B','G':'G','B':'R'},'B':{'R':'G','G':'R','B':'B'}}\n    for i in range(len(s)-1,0,-1):\n        s = [d[s[j]][s[j+1]] for j in range(i)]\n    return s[0]", "def triangle(row):\n    vector = list(row)\n    while len(vector) > 1:\n        vector = [((set('RGB') - {a, b}).pop(), a)[a == b] for a, b in zip(vector, vector[1:])]\n    return vector[0]", "def triangle(row):\n    row = list(row)\n    while len(row)>1: row = [l if l==r else list(set('RGB')-set(l+r))[0] for l,r in zip(row,row[1:])]\n    return row[0]", "def mod3(n):\n    c = 0\n    while n % 3 == 0:\n        n /= 3\n        c += 1\n    return int(n % 3), c\n\ndef triangle(row):\n    rgb = {'R':0, 'G':1, 'B':2}\n    RGB = \"RGB\"\n    n = len(row)\n    x, y = 1, 0\n    res = rgb[row[0]]\n    for i in range(1, n):\n        xx, yy = mod3(n - i)\n        x = x * xx % 3\n        y += yy\n        xx, yy = mod3(i)\n        x = x * xx % 3\n        y -= yy\n        if y == 0:\n            res += rgb[row[i]] * x\n    res %= 3\n    if n % 2 == 0:\n        res = (3 - res) % 3\n    return RGB[res]", "def possibilities(a, b):\n    c = abs(ord(a)-ord(b))\n    if c == 0:\n        return a;\n    if c== 5:\n        return 'R'\n    if c == 11:\n        return 'B'\n    if c == 16:\n        return 'G'\n    return None\n\ndef triangle(row):\n    \n    while len(row) > 1:\n        temp = ''\n        for i in range(len(row)-1):\n            temp += possibilities(row[i], row[i+1])\n        row = temp\n\n    return row[0]\n", "def triangle(row):\n    d = {'R':0,'G':1,'B':2}\n    a = [d.get(_) for _ in row]\n    while len(a)>1:\n        a = list(map(lambda _:-(_[0]+_[1]),zip(a,a[1:])))\n    return list(d.keys())[a[0]%3]", "def triangle(row):\n    new_step = ''\n    if len(row) == 1:\n        return row\n    while len(row) > 1:\n        for i in range(1, len(row)):\n            colors = ['R', 'G', 'B']\n            if row[i - 1] == row[i]:\n                new_step += row[i]\n            else:\n                colors.remove(row[i - 1])\n                colors.remove(row[i])\n                new_step += colors[0]\n        if len(new_step) == 1:\n            return new_step\n        return triangle(new_step)", "def triangle(row):\n    while len(row)>1:\n        row = [[({*'RGB'} - {a,b}).pop(), a][a == b] for a,b in zip(row, row[1:])]\n    return row[0]", "def triangle(row):\n    while len(row)>1:\n        row = [a if a==b else (set('RGB') ^ {a,b}).pop() for a,b in zip(row, row[1:])]\n    return row[0]", "def triangle(row):\n    while len(row)>1:\n        s = ''    \n        for a,b in zip(row, row[1:]):\n            if a==b:\n                s += a\n            else:\n                s += (set('RGB') ^ set(a+b)).pop()\n            row = s\n    return row    ", "def triangle(row):\n    colors = [\"R\",\"G\",\"B\"]\n    while len(row)>1:\n        i=0\n        new_row=\"\"\n        while i<len(row)-1:\n            if row[i]==row[i+1]:\n                new_row+=row[i]\n            else :\n                for j in colors :\n                    if j!=row[i] and j!=row[i+1]:\n                        new_row+=j\n            i+=1\n        print(new_row)\n        row = new_row\n    return row", "def triangle(s):\n    n = len(s)\n    out = []\n    if n == 1:\n        return s\n    else:\n        for i in range(n-1):\n            f = [\"R\", \"G\", \"B\"]\n            if s[i] == s[i+1]:\n                out.append(s[i])\n            else:\n                f.remove(str(s[i]))\n                f.remove(str(s[i+1]))\n                out.extend(f)\n        s = ''.join(out)\n    if len(s) == 1:\n        return s\n    else:\n        return triangle(s)\n", "triangle=t=lambda r:len(r)>1and t(''.join(a if a==b else(set('RGB')-{a,b}).pop()for a,b in zip(r,r[1:])))or r", "COLS = {\n    ('G', 'G') : 'G',\n    ('B', 'B') : 'B',\n    ('R', 'R') : 'R', \n    ('G', 'B') : 'R',\n    ('G', 'R') : 'B',\n    ('R', 'B') : 'G',\n    ('R', 'G') : 'B',\n    ('B', 'R') : 'G',\n    ('B', 'G') : 'R'\n}\n\ndef triangle(row):\n    while (len(row) > 1):\n        row = [COLS[x,y] for x, y in zip(row[:-1], row[1:])]\n    return row[0]", "t=triangle=lambda r:r[0]if len(r)==1else t([a if a==b else(set(\"RGB\")-{a,b}).pop()for a,b in zip(r,r[1:])])", "def triangle(row):\n    \n    COMB_I = [\n        [0, 2, 1],\n        [2, 1, 0],\n        [1, 0, 2]\n    ]\n    \n    IDX = {'R': 0, 'G': 1, 'B': 2}\n    IDX_R = {0: 'R', 1: 'G', 2: 'B'}\n    ri = [IDX[r] for r in row]\n    \n    for k in range(len(row) - 1):\n        ri = [COMB_I[i][j] for i, j in zip(ri[:-1], ri[1:])]\n    \n    return IDX_R[ri[0]]", "def triangle(row):\n    l = row\n    while (len(l)>1):\n        temp=\"\"\n        for i in range(len(l)-1):\n            if l[i]== \"R\" and l[i+1] == \"G\":col = \"B\"\n            elif l[i]== \"G\" and l[i+1] == \"R\":col = \"B\"\n            elif l[i]== \"G\" and l[i+1] == \"B\":col = \"R\"\n            elif l[i]== \"B\" and l[i+1] == \"G\":col = \"R\"\n            elif l[i]== \"B\" and l[i+1] == \"R\":col = \"G\"\n            elif l[i]== \"R\" and l[i+1] == \"B\":col = \"G\"\n            elif l[i]==l[i+1]:col =l[i]\n            temp =temp+col\n        l=temp\n    return l\n", "def triangle(row):\n    def add(c1,c2):\n        return c1 if c1==c2 else \"RGB\".replace(c1,\"\").replace(c2,\"\")\n    \n    while len(row) > 1:\n        s=\"\"\n        for i in range(0,len(row)-1):\n            s+=add(row[i],row[i+1])\n        row = s\n    return row", "\ndef triangle(a):\n\n    q = len(a)\n    if q == 1:\n        return(a)\n\n    b = 1\n    g = 2\n    r = 3\n\n    a = a.replace('B', '1')\n    a = a.replace('G', '2')\n    a = a.replace('R', '3')\n\n    v = int(a)\n\n    kj = 1\n    me = 0\n    while me == 0:\n        if (q > 3**kj):\n            kj = kj+1\n        else:\n            me = 1\n\n    g = 3**(kj-1)\n\n\n    count = 0\n    while q != 1:\n        if (q > g):\n            for w1 in range (0,(q-g)):\n                q1 = str(v)\n                e = (3 - ((( int(q1[w1]))+ int(q1[w1+g]))%3))\n                count = count + e*(10**(q-w1-g-1))\n            print((g,q))\n            q = q-g           \n            if (q > g):\n                g = g\n            else:\n                g = int(g/3)\n            print((g,q))\n            v = count\n            print (count)\n        else:\n            for i in range (1,q):\n                e = 3 - (((((v//(10**(q-i)))-(10*(v//(10**(q-i+1)))))+(v//(10**(q-i-1)))-(10*(v//(10**(q-i)))))%3))\n                count = count + e*(10**(q-i-1))\n            q = q-1\n            v = count\n            print (count)\n        if q == 1:\n            if count == 1:\n                return (\"B\")\n            else:\n                if count == 2:\n                    return (\"G\")\n                else:\n                    return (\"R\")\n        count = 0\n", "def triangle(Notorious_RBG):###########################################\n    if len(Notorious_RBG) == 1: return Notorious_RBG#####################\n    The_Notorious = 'RBG'##################################################\n    The = [Notorious_RBG[x:x+2] for x in range(len(Notorious_RBG)-1)]#########\n    RBG = ''.join([x[0] if x[0]==x[1] else The_Notorious.strip(x) for x in The])\n    if len(RBG) == 1: return RBG                     ##########################\n    else: return triangle(RBG)                      ##########################\n    ##########################                    ##########################\n    ##########################                   ##########################\n    ##################################################################\n    #########################################################\n    ##########################        ##########################\n    ##########################          ##########################\n    ##########################             ##########################\n    ##########################                 ##########################\n    ##########################                    ##########################\n    ##########################                      ##########################\n\n    ###########################################################\n    ##################################################################\n    ####################################################################\n    ########################################################################\n    ##########################                     ##########################\n    ##########################                      ##########################\n    ##########################                      ##########################\n    ##########################                     ##########################\n    ##################################################################\n    ################################################################\n    ##################################################################\n    ####################################################################\n    ########################################################################\n    ##########################                     ##########################\n    ##########################                      ##########################\n    ##########################                      ##########################\n    ##########################                     ##########################\n    #######################################################################\n    ######################################################################\n    ####################################################################\n    ################################################################\n    ############################################################\n    \n             ######################################################\n          ############################################################\n        ################################################################\n       #####################################################################\n      ########################                     ##########################\n     #########################                      ##########################\n     #########################                       ##########################\n    ##########################                        #######################\n    ##########################\n    ##########################\n    ##########################                #####################################\n    ##########################                #####################################\n    ##########################                #####################################\n    ##########################                        ########################\n    ##########################                        ########################\n    ##########################                       #########################\n    ##########################                     ##########################\n    #######################################################################\n    ######################################################################\n      ##################################################################\n       #############################################################\n         ##########################################################\n            ###################################################\n", "def triangle(row):\n    k = list(row)\n    comb = {'R','G','B'}\n\n    if len(k)==1:\n        return k[0]\n    \n    z = [k[i:i+2] for i in range(len(k)-1)]\n    cont = []\n\n    for x in z:\n        diff = comb.difference(set(x))\n        if len(diff)==1:\n            cont.append(diff.pop())\n        else:\n            cont.append(x[0])\n    \n    return triangle(''.join(cont))", "def triangle(array):\n    n = len(array)\n    colors = {\"R\": 0, \"G\": 1, \"B\": 2}\n    digit = {0: \"R\", 1: \"G\", 2: \"B\"}\n    a = [colors.get(item, item) for item in list(array)]\n\n    # Generate nth the pascal's triangle row\n    def pascalRowFast(rowIndex):\n        row=[0]*(rowIndex+1)\n        row[0] = row[-1] = 1\n        for i in range(0, rowIndex>>1):\n            x = row[ i ] * (rowIndex - i) // (i + 1)\n\n            row[ i + 1 ]= row[ rowIndex - 1 - i ] = x\n        return row\n\n    total = sum([a*b for a, b in zip(pascalRowFast(n-1), a)])*(-1)**(n-1) %3\n    return digit[total]\n\n", "def triangle(row):\n    return row[0] if len(row) == 1 else triangle(['BGR'.replace(l1, '').replace(l2, '') if l1 != l2 else l1 for l1, l2 in zip(row,row[1:])])\n    \n", "def triangle(row):\n    while (len(row)>1):\n        temp=\"\"\n        for i in range(len(row)-1):           \n            if row[i]==row[i+1]:col =row[i]\n            else: col = ('RGB'.replace(row[i], '')).replace(row[i+1], '')\n            temp =temp+col\n        row=temp        \n    return row", "def triangle(row):\n    # Your code here:\n    if len(row) == 1:\n        return row\n    else:\n        new_row = ''\n        for a, b in zip(row[:-1], row[1:]):\n            if a == b:\n                new_row += a\n            else:\n                for letter in \"RGB\":\n                    if letter not in (a,b):\n                        new_row += letter\n                        break\n        return triangle(new_row)\n", "def get(c1,c2):\n    if c1 > c2:\n        t = c1\n        c1 = c2\n        c2 = t\n    if c1==c2:\n        return c1        \n    if c1=='B':\n        if c2=='G':\n            return 'R'\n        else: #c2 R\n            return 'G'\n    if c1=='G':\n        if c2=='R':\n            return 'B'\n    return 1+'a'\n\ndef triangle(x):\n    if len(x)==1:\n        return x\n    else:\n        xx = [get(x[i],x[i+1]) for i in range(len(x)-1)]\n        return triangle(''.join(xx))", "def triangle(row):\n    # Your code here:\n    sigue=len(row)\n    renant=row\n    sigren=\"\"\n    #print (renant, sigue)\n    if not (1<= sigue <= 10 **5):\n        return \"B\"\n    while sigue>1:\n        for r in range (0, len(renant)-1,1):\n            cad= renant[r:r+2]\n            sigren += list({\"R\",\"G\", \"B\"}-set(cad) if cad[0]!=cad[1] else cad[0])[0]\n        renant=sigren\n        #print (renant, sigue)\n        sigren=\"\"\n        sigue = len(renant)\n    return renant\n", "def triangle(row):\n    row = [ \"RGB\".index(char)+1 for char in row ]\n    while len(row) > 1:\n        row = [ row[i]^row[i-1] or row[i] for i in range(1,len(row)) ]\n    return \"RGB\"[row[0]-1]", "def triangle(row):\n    a = {153: 'B', 148: 'G', 137: 'R', 164: 'R', 142: 'G', 132: 'B', 82: 'R', 71: 'G', 66: 'B'}\n    b = list(row)\n    while len(b) > 1:\n        b = list(map(ord, b))\n        b = [a[b[i] + b[i + 1]] for i in range(len(b) - 1)]\n    return b[0]", "def triangle(row):\n    a=len(row)\n    print(a)\n    \"\"\"r=[2,33,7907,14641,9820816,9824289,9511136,95573375]\n    b=[4,512,19683,8061525,8594718,98091353]\n    g=[7,19,50,100,1024,65536,9709389,9329632,8752832,8813337,904787913]\n    if a in r:\n        return 'R'\n    if a in b:\n        return 'B'\n    if a in g:\n        return 'G'\n    \n    return row[0]\"\"\"\n    if a<1000:\n        while(len(row)>1):\n            row=sec(row)\n        return row[0]\n    return row[0]\n\ndef sec(rwo):\n    #a=rwo[0]\n    #for i in range(len(rwo)-1):\n    #    a=check(a,i)\n    #return a\n    lis=[]\n    for i in range(len(rwo)-1):\n        lis.append(check(rwo[i],rwo[i+1]))\n    return lis\n   \ndef check(a,b):\n    if a==b:\n        return a\n    if a=='R' or b=='R':\n        if a=='B' or b=='B':\n            return 'G'\n        else: \n            return 'B'\n    return 'R'", "repls = {\n    \"RR\": \"R\",\n    \"GG\": \"G\",\n    \"BB\": \"B\",\n\n    \"GB\": \"R\",\n    \"BR\": \"G\",\n    \"RG\": \"B\",\n    \n    \"BG\": \"R\",\n    \"RB\": \"G\",\n    \"GR\": \"B\",\n}\n\ndef reduce1(row):\n    return ''.join(repls[row[i:i+2]] for i in range(len(row) - 1))\n    \n\ndef triangle(row):\n    while len(row) > 1:\n        row = reduce1(row)\n    return row", "colours={\"GG\":\"G\",\"BB\":\"B\",\"RR\":\"R\",\"BG\":\"R\",\"RG\":\"B\",\"BR\":\"G\",\"GB\":\"R\",\"GR\":\"B\",\"RB\":\"G\"}\ndef triangle(row):\n    if len(row)>1:\n        row_out=\"\"\n        for i in range (0,len(row)-1):\n            row_out+=colours[row[i:i+2]]\n        return triangle(row_out)\n    return row", "colours={\"GG\":\"G\",\"BB\":\"B\",\"RR\":\"R\",\"BG\":\"R\",\"RG\":\"B\",\"BR\":\"G\",\"GB\":\"R\",\"GR\":\"B\",\"RB\":\"G\"}\ndef triangle(row):\n    while len(row)>1:\n        row_out=\"\"\n        for i in range (0,len(row)-1):\n            row_out+=colours[row[i:i+2]]\n        row=row_out       \n    print(row)\n    return row", "def gen(a, b):\n    d = {'BG': 'R', 'BR': 'G', 'GR': 'B'}\n    return d.get(''.join(sorted([a, b])), a)\n\ndef triangle(row):\n    a = [list(' ' * (len(row)-i)) for i in range(len(row))]\n    a[0] = list(row)\n    for i in range(0, len(row)-1):\n        for j in range(len(a[i])-1):\n            a[i+1][j] = gen(a[i][j], a[i][j+1])\n    return a[-1][0]", "def triangle(row):\n    l = len(row)\n    for i in range(l-1):\n        new_row = \"\"\n        for v,v1 in zip(row,row[1:]):\n            if v==v1:\n                new_row += v\n            else:\n                new_row += list({'R','G','B'} - {v,v1})[0]\n        row = new_row\n    return row", "def triangle(a):\n    q = len(a)\n    if q == 1:\n        return(a)\n    b = 1\n    g = 2\n    r = 3\n\n    a = a.replace('B', '1')\n    a = a.replace('G', '2')\n    a = a.replace('R', '3')\n\n    v = int(a)\n\n    count = 0\n    while q != 1:\n        for i in range (1,q):\n            if (((v//(10**(q-i)))-(10*(v//(10**(q-i+1)))))==(v//(10**(q-i-1)))-(10*(v//(10**(q-i))))):\n                e = (((v//(10**(q-i)))-(10*(v//(10**(q-i+1))))))       \n            else:\n                e = (6-((v//(10**(q-i)))-(10*(v//(10**(q-i+1))))+(v//(10**(q-i-1)))-(10*(v//(10**(q-i))))))\n            count = count + e*(10**(q-i-1))\n        q = q-1\n        v = count\n        if q == 1:\n            if count == 1:\n                return (\"B\")\n            else:\n                if count == 2:\n                    return (\"G\")\n                else:\n                    return (\"R\")\n        count = 0", "def triangle(row):\n    dir = {  'BG':'R', 'RG':'B', 'BR':'G', 'GB':'R', 'GR':'B', 'RB':'G', 'BG':'R' }\n    for _ in range(len(row)-1):\n        row = tuple(dir.get(f'{row[i]}{row[i+1]}',row[i]) for i in range(len(row)-1) )\n    return row[0]", "def triangle(row):\n    buffer = ''\n    \n    while len(row) > 1:\n        aux_string = ''\n        \n        for i, char in enumerate(row):\n            if i + 1 < len(row):\n                buffer = char + row[i+1]\n                if char == row[i+1]:\n                    aux_string += char\n                elif not 'R' in buffer:\n                    aux_string += 'R'\n                elif not 'G' in buffer:\n                    aux_string += 'G'\n                elif not 'B' in buffer:\n                    aux_string += 'B'\n        \n        row = aux_string\n    return row", "def triangle(row): \n    row=row.replace(\" \", \"\")\n    next_line=\"\"\n    \n    if len(row)==1:\n        return row\n    \n    for index in range(len(row)-1):\n        next_line=next_line+str(color_finder(row[index],row[index+1]))\n        \n    if len(next_line)==1:\n        return next_line\n        \n    else:\n        return triangle(next_line)\n\n\ndef color_finder(color1,color2):\n    colors=['R','G','B']\n\n    if color1==color2:\n        return color1\n    else:\n        colors.remove(color1)\n        colors.remove(color2)\n        #print(colors[0])\n        return colors[0]\n        \n", "def triangle(row):\n    if len(row)==1:\n        return row[0]\n    else:\n        for v in range(0,len(row)):\n            if v==0:\n                l=row\n            else:\n                l=lp\n            lp=[]\n            for u in range(0,len(l)-1):\n                ft=l[u]\n                st=l[u+1]\n                if ft==st:\n                    lp.append(ft)\n                else:\n                    if ft==\"R\" and st==\"G\" or ft==\"G\" and st==\"R\":\n                        lp.append(\"B\")\n                    elif ft==\"R\" and st==\"B\" or ft==\"B\" and st==\"R\":\n                        lp.append(\"G\")\n                    elif ft==\"B\" and st==\"G\" or ft==\"G\" and st==\"B\":\n                        lp.append(\"R\")\n        return l[len(l)-1]\n", "def triangle(row):\n    while len(row) != 1:\n        row2 = ''\n        for i in range(len(row) - 1):\n            if row[i] == row[i+1]:\n                row2 += row[i]\n            elif (row[i], row[i+1]) == ('R', 'B') or (row[i], row[i+1]) == ('B', 'R'):\n                row2 += 'G'\n            elif (row[i], row[i+1]) == ('R', 'G') or (row[i], row[i+1]) == ('G', 'R'):\n                row2 += 'B'\n            elif (row[i], row[i+1]) == ('G', 'B') or (row[i], row[i+1]) == ('B', 'G'):\n                row2 += 'R'\n        row = row2\n    return row", "def triangle(row):\n    f=len(row)\n    for i in range(f-1):\n        a=\"\"\n        for i in range(len(row)-1):\n            if row[i]==row[i+1]:\n                a+=row[i]\n            else : a+= \"\".join(set(\"RGB\")-set(row[i])-set(row[i+1]))\n        row=a[:]\n    return row\n        \n", "def triangle(row):\n    act = row\n    nex = \"\"\n    \n    while len(act) >2:\n        for i in range(len(act)-1):   # pro 4 znaky (0-3), chci i = 0,1,2  a ne 0,1,2,3\n            #print(i, act[i], act[i+1])\n            if act[i] == act[i+1]:    #porovn\u00e1m 0a1, 1a2, 2a3\n                nex = nex + act[i]\n            elif (act[i] == \"R\" and act[i+1] == \"G\") or (act[i] == \"G\" and act[i+1] == \"R\"):\n                nex = nex + \"B\"\n\n            elif (act[i] == \"B\" and act[i+1] == \"G\") or (act[i] == \"G\" and act[i+1] == \"B\"):\n                nex = nex + \"R\"\n\n            elif (act[i] == \"R\" and act[i+1] == \"B\") or (act[i] == \"B\" and act[i+1] == \"R\"):\n                nex = nex + \"G\"\n            #print(nex)\n        act = nex\n        nex = \"\"\n    if len(act) ==2:\n        if act[0] == act[1]:\n            return act[0]\n        elif (act[0] == \"R\" and act[1] == \"G\") or (act[0] == \"G\" and act[1] == \"R\"):\n            return \"B\"\n\n        elif (act[0] == \"B\" and act[1] == \"G\") or (act[0] == \"G\" and act[1] == \"B\"):\n             return \"R\"\n\n        elif (act[0] == \"R\" and act[1] == \"B\") or (act[0] == \"B\" and act[1] == \"R\"):\n            return \"G\"\n    else:\n        return act[0]", "def triangle(row):\n    colors = {'RR':'R','GG':'G','BB':'B','RG':'B','GR':'B','GB':'R','BG':'R','RB':'G','BR':'G'}\n\n    while not len(row)==1:\n        row = ''.join(colors[row[i]+row[i+1]] for i in range(len(row)-1))\n    \n    return row", "def triangle(row):\n    colors = {'RR':'R','GG':'G','BB':'B','RG':'B','GR':'B','GB':'R','BG':'R','RB':'G','BR':'G'}\n\n    while not len(row)==1:\n        row = ''.join(colors[i] for i in [row[i]+row[i+1] for i in range(len(row)-1)])\n    \n    return row", "import math\n\nnumberColor = {'R': 0, 'G': 1, 'B': 2}\nback = {0: 'R', 1: 'G', 2: 'B'}\n\ndef triangle(row):\n    if len(row) == 1:\n        return row\n    \n    n = len(row)\n    faqN = math.factorial(n - 1)\n    sum = 0\n    for k in range(n):\n        sum += faqN/(math.factorial(n - k - 1) * math.factorial(k)) * numberColor[row[k]]\n    \n    sum *= (-1) ** (n - 1)\n    r = sum % 3\n    \n    return back[r]", "def triangle(row):\n    if len(row)==1:\n        return row\n    r=''\n    for i in range(1,len(row)):\n        if row[i]==row[i-1]:\n            r+=row[i]\n        else:\n            l=['R','G','B']\n            l.remove(row[i])\n            l.remove(row[i-1])\n            r+=l[0]\n    return triangle(r)", "def char_to_put(c1, c2):\n    if c1 == c2:\n        return c1\n    elif (c1 == 'B' and c2 == 'R') or (c1 == 'R' and c2 == 'B'):\n        return 'G'\n    elif (c1 == 'G' and c2 == 'R') or (c1 == 'R' and c2 == 'G'):\n        return 'B'\n    else:\n        return 'R'\n\ndef compute(s):\n    next_row = \"\"\n    for i in range(0, len(s)-1):\n        next_row += char_to_put(s[i], s[i+1])\n    \n    return next_row\n \n\ndef triangle(row):\n    if len(row) == 1:\n        return row[0]\n    \n    while len(row) != 1:\n        row = compute(row)\n        \n    return row", "from re import sub\n\ndef triangle(row):\n    return row if len(row) == 1 else triangle(\"\".join(row[i] if row[i] == row[i + 1] else sub(f\"[{row[i]}{row[i+1]}]\", \"\", \"RGB\") for i in range(len(row) -1)))\n", "def triangle(row):\n    translate = {\"GG\": \"G\", \"RR\": \"R\", \"BB\": \"B\", \"BG\": \"R\", \"RG\":\"B\", \"BR\":\"G\", \"GB\": \"R\", \"GR\":\"B\", \"RB\":\"G\"}\n    while len(row) > 1:\n        row = ''.join(translate[row[i:i+2]] for i in range(len(row)-1))\n    return row", "def triangle(k):\n    s = ''\n    if len(k) == 1:\n        return k\n    for i in range(len(k)-1):\n        if k[i] == k[i+1]:\n            s += k[i]\n        elif (k[i] == 'R' and k[i+1] == 'B') or (k[i] == 'B' and k[i+1] == 'R'):\n            s += 'G'\n        elif (k[i] == 'R' and k[i+1] == 'G') or (k[i] == 'G' and k[i+1] == 'R'):\n            s += 'B'\n        elif (k[i] == 'G' and k[i+1] == 'B') or (k[i] == 'B' and k[i+1] == 'G'):\n            s += 'R'\n    print(s)\n    while len(s) > 0:\n        if len(s) == 1:\n            return s\n        s1 = s\n        s = ''\n        for i in range(len(s1)-1):\n            if s1[i] == s1[i+1]:\n                s += s1[i]\n            elif (s1[i] == 'R' and s1[i+1] == 'B') or (s1[i] == 'B' and s1[i+1] == 'R'):\n                s += 'G'\n            elif (s1[i] == 'R' and s1[i+1] == 'G') or (s1[i] == 'G' and s1[i+1] == 'R'):\n                s += 'B'\n            elif (s1[i] == 'G' and s1[i+1] == 'B') or (s1[i] == 'B' and s1[i+1] == 'G'):\n                s += 'R'", "def triangle(row):\n    # r = []\n    # a = list(row)\n    print(row)\n    r = ''\n    a = row[:]\n    if len(a) == 1:\n        return a\n    for i in range(len(a) - 1):\n        # t = ['R','G','B']\n        t = 'RGB'\n        if a[i] == a[i + 1]:\n            # r.append(a[i])\n            r += a[i]\n        else:\n            # t.remove(a[i])\n            # t.remove(a[i+1])\n            # r.append(t[0])\n            t = t.replace(a[i], '').replace(a[i + 1], '')\n            r += t\n\n    return triangle(r)", "def colour(a,b):\n    if a == b:\n        return a\n    elif a == 'B' and b == 'G' or a == 'G' and b == 'B':\n        return 'R'\n    elif a == 'R' and b == 'G' or a == 'G' and b == 'R':\n        return 'B'\n    elif a == 'B' and b == 'R' or a == 'R' and b == 'B':\n        return 'G'\ndef triangle(row):\n    if len(row) < 2:\n        return row\n    else:\n        rez = []\n        for i in range(0, len(row)-1):\n            rez.append(colour(row[i], row[i + 1]))\n        l = len(rez)\n        if l > 1:\n            rez = triangle(rez)\n        return ''.join(rez)", "def triangle(row):\n    colors = set(['B','G','R'])\n    if len(row) == 1:\n        return row\n    else:\n        ans = ''\n        for i in range(len(row)-1):\n            current = row[i]\n            next = row[i+1]\n            color_set = set ([current, next])\n            if current == next:\n                new_color = current \n                ans = ans + new_color\n            else:\n                new_color = list(colors - color_set)[0]\n                ans = ans + new_color  \n    return triangle(ans)", "def triangle(row):\n\n    reduction=[3**i+1 for i in range(10) if 3**i<=100000][::-1]\n\n    for j in reduction:\n\n        while len(row)>=j:\n\n            row=[row[i] if row[i]==row[i+j-1] else ({\"R\",\"G\",\"B\"}-{row[i],row[i+j-1]}).pop() for i in range(len(row)-j+1)]\n\n    return row[0]", "def triangle(row):\n    colors = ['R', 'G', 'B']\n    result = list(row)\n    while len(result) > 1:\n        current = list()\n        for i, j in zip(result[:-1], result[1:]):\n            if i == j:\n                current.extend([i])\n            else:\n                for c in colors:\n                    if c not in [i, j]:\n                        current.extend([c])\n        result = current\n    return result[0]", "import itertools\n\nLOOKUP = {}\ndef slow_lookup(x,y):\n    if x == y:\n        return x\n    rem = (set(\"RGB\") - {x,y})\n    print(x, y, rem)\n    return rem.pop()\nfor x in \"RGB\":\n    for y in \"RGB\":\n        LOOKUP[x+y] = slow_lookup(x,y)\nfast_lookup = lambda x, y: LOOKUP(x+y)\n    \ndef triangle(row):\n    print(row)\n    for _ in range(len(row)-1):\n        row = \"\".join(LOOKUP[row[x:x+2]] for x in range(len(row)-1))\n        print(row)\n    return next(iter(row))", "colorReverDic = {'RR': 'R',\n                'RG': 'B',\n                'RB': 'G',\n                'GG': 'G',\n                'GR': 'B',\n                'GB': 'R',\n                'BB': 'B',\n                'BR': 'G',\n                'BG': 'R'}\n\ndef triangle(row):\n    newRow = row\n    \n    for i in range(len(row) -1):\n        l = len(newRow) - 1\n        workRow = ''\n        for c in range(l):\n            workRow += colorReverDic[newRow[c]+newRow[c+1]]\n        newRow = workRow\n    \n    return newRow", "def triangle(inp):\n    kek = inp\n    while len(kek) != 1:\n        mek=[]\n        for c1,c2 in zip(kek,kek[1:]):\n            if c1==c2:\n                mek.append(c1)\n            else:\n                lol=['R','G','B']\n                lol.remove(c1)\n                lol.remove(c2)\n                mek.append(*lol)\n        kek = mek\n    return kek[0]", "\ndef mod(a,b):\n    r = a % b;\n    r = r+b if(r < 0) else r\n    print(r)\n    return r\n\ndef ColorToInt(c):\n    if c == 'R': \n        return 0\n    if c=='G': \n        return 1\n    if c == 'B': \n        return 2\n    return -1\n    \n\ndef IntToColor(i):\n    if i == 0: \n        return 'R'\n    if i==1: \n        return 'G'\n    if i == 2: \n        return 'B'\n    return 'E'\n\ndef triangle(row):\n    end = len(row)-1\n    i=0\n    seq = list(row)\n    while(end > 0):\n        seq[i] = IntToColor( mod(-ColorToInt(seq[i])-ColorToInt(seq[i+1]), 3)  );\n        i+=1;\n        if i == end:\n            end-=1;  \n            i = 0; \n        \n    return seq[0]\n", "def triangle(row):\n    \n    if len(row) == 1:\n        return row\n    \n    while len(row) > 1:\n        N = len(row)\n        new_row = []\n        i = 0\n        while i < N-1:\n            \n            word = [row[i], row[i+1]]\n            word.sort()\n            word = ''.join(word)\n            if word =='BG':\n                new_row.append('R')\n            elif word == 'GR':\n                new_row.append('B')\n            elif word == 'BR':\n                new_row.append('G')\n            elif word == 'GG':\n                new_row.append('G')\n            elif word == 'RR':\n                new_row.append('R')            \n            elif word == 'BB':\n                new_row.append('B')\n            else:\n                return False\n            \n            i += 1\n            \n        row = new_row\n    return row[0]", "def triangle(row):\n    next_row = row\n    for i in range(len(row)):\n        row = next_row\n        next_row = []\n        for j in range(len(row) - 1):\n            next_row.append(clr_add(row[j], row[j+1]))\n    return row[0]\n\ndef clr_add(a,b):\n    if a is b:\n        return a\n    if (a is 'R' and b is 'G') or (a is 'G' and b is 'R' ):\n        return 'B'\n    if (a is 'G' and b is 'B') or (a is 'B' and b is 'G' ):\n        return 'R'\n    if (a is 'B' and b is 'R') or (a is 'R' and b is 'B' ):\n        return 'G'", "C = {\n    \"GG\": \"G\",\n    \"RR\": \"R\",\n    \"BB\": \"B\",\n    \"BG\": \"R\",\n    \"GB\": \"R\",\n    \"RG\": \"B\",\n    \"GR\": \"B\",\n    \"RB\": \"G\",\n    \"BR\": \"G\"\n}\n\n\ndef triangle(row: str):\n    tmp_row = []\n    while len(row) != 1:\n        for i in range(len(row)-1):\n            tmp_row.append(C.get(row[i:i+2]))\n        row = \"\".join(tmp_row)\n        tmp_row.clear()\n    return row[0]", "colors = 'RGB'\n\ndef triangle(row):\n    if len(row) <= 1:\n        return row\n    \n    if len(row) == 2:\n        if row[0] == row[1]:\n            return row[0]\n        else:\n            return colors.replace(row[0], \"\").replace(row[1], \"\")\n    \n    return triangle(\"\".join(list(map(triangle, [row[i:i+2] for i in range(len(row)-1)]))))\n", "def triangle(row):\n    place,y = 0,''\n    while len(row) > 1:\n        place,y = 0,''\n        while place < len(row)-1:\n            if row[place] == row[place+1]:\n                y += row[place]\n            if row[place] == 'R' and row[place+1] == 'B':\n                y += 'G'\n            if row[place] == 'B' and row[place+1] == 'R':\n                y += 'G'\n            if row[place] == 'R' and row[place+1] == 'G':\n                y += 'B'\n            if row[place] == 'G' and row[place+1] == 'R':\n                y += 'B'\n            if row[place] == 'G' and row[place+1] == 'B':\n                y += 'R'\n            if row[place] == 'B' and row[place+1] == 'G':\n                y += 'R'\n            place += 1\n        row = y\n    return row", "def triangle(x):\n    c,r = [\"R\",\"G\",\"B\"],[]\n    if len(x)==1: return x[0]\n    for i in range(len(x)-1):\n        if x[i] == x[i+1]: r.append(x[i])\n        else: r += [e for e in c if e not in [x[i],x[i+1]]]\n    return triangle(r)", "mix = {\n    ('G', 'G') : 'G',\n    ('G', 'R') : 'B',\n    ('G', 'B') : 'R',\n    ('B', 'G') : 'R',\n    ('B', 'R') : 'G',\n    ('B', 'B') : 'B',\n    ('R', 'G') : 'B',\n    ('R', 'R') : 'R',\n    ('R', 'B') : 'G',\n}\ndef triangle(row):\n    if len(row) == 1:\n        return row\n    r = \"\"\n    for c in range(len(row) - 1):\n        r += mix.get((row[c], row[c+1]), \"\")\n    return triangle(r)", "def triangle(row):\n    return row if len(row) == 1 else triangle(\"\".join(process(row)))\n\ndef process(row):\n    if len(row) == 1:\n        yield row\n    else:\n        row = list(row)\n        current_color = row.pop(0)\n        while len(row) > 0:\n            next_color = row.pop(0)\n            yield color(current_color+next_color)\n            current_color = next_color\n\ndef color(row):\n    if len(row) == 1:\n        return row\n    if row in 'RR GG BB':\n        return row[0]\n    elif row in 'RG GR':\n        return 'B'\n    elif row in 'GB BG':\n        return 'R'\n    elif row in 'RB BR':\n        return 'G'\n    raise ValueError(row)", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom  \n    \ndef triangle(row):\n    dict = {'R':0, 'G':1, 'B':2}\n    dict2 = {0:'R', 1:'G', 2:'B'}\n    if len(row) % 2 == 0:\n        x = -1\n    else:\n        x = 1\n    sum = 0\n    n = len(row)-1\n    k = 0\n    for i in row:\n        sum += ncr(n, k)*dict[i]\n        print(ncr(n, k), dict[i])\n        k+=1\n    return dict2[x*sum % 3]", "def nextt(a,b):\n    if a==b: return a\n    return 'RGB'.replace(a,'').replace(b,'')\n\ndef triangle(row):\n    while len(row) > 1:\n        t=''\n        for i in range(len(row)-1):\n            t=t+nextt(list(row)[i],list(row)[i+1])\n        row=t\n    return row[0]", "def next_char(pair):\n    return set('RGB').difference(pair).pop() if pair[0] != pair[1] else pair[0]\n\ndef next_row(row):\n    return \"\".join(map(next_char, zip(row, row[1:])))\n\ndef triangle(row):\n    while len(row) > 1:\n        row = next_row(row)\n    return row", "colors = {'R', 'G', 'B'}\n\ndef pair(v):\n    dif = colors.difference(v)\n    return v[0] if len(dif) == 2 else dif.pop()\n\ndef triangle(row):\n    if len(row) == 1:\n        return row[0]\n    next_row = []\n    for i in range(len(row)-1):\n        next_row.append(pair(row[i:i+2]))\n    return triangle(next_row)\n", "def triangle(row):\n    if len(row) == 1: return row\n    colors = { 'GB': 'R', 'BG': 'R', 'GG': 'G', 'RR': 'R', 'BB': 'B', 'RB': 'G', 'BR': 'G', 'RG': 'B', 'GR': 'B' }\n    zipped = list(zip(row, row[1:]))\n    row = ''\n    \n    for x in zipped:\n        row += colors[''.join(x)]\n\n    return triangle(row)\n", "def triangle(row):\n    if len(row) == 1:\n        return row\n    new = \"\"\n    for i in range(len(row)-1):\n        if row[i] == row[i+1]:\n            new += row[i]\n        else:\n            if row[i] == 'R' and row[i+1] == 'G':\n                new += 'B'\n            elif row[i] == 'G' and row[i+1] == 'R':\n                new += 'B'\n            elif row[i] == 'G' and row[i+1] == 'B':\n                new += 'R'\n            elif row[i] == 'B' and row[i+1] == 'G':\n                new += 'R'\n            elif row[i] == 'R' and row[i+1] == 'B':\n                new += 'G'\n            elif row[i] == 'B' and row[i+1] == 'R':\n                new += 'G'\n    return triangle(new)", "conv = {\n     'RR':'R', 'GG':'G', 'BB':'B',\n     'RG':'B', 'GR':'B', 'RB':'G',\n     'BR':'G', 'BG':'R', 'GB':'R'\n}\n\n\ndef triangle(row):\n    def dec(row):\n        return ''.join(conv[row[x:x+2]] for x in range(len(row)-1))\n    while len(row)-1:\n        row = dec(row)\n    return row\n", "cash = {\n    \"R\": \"R\",\n    \"G\": \"G\",\n    \"B\": \"B\",\n    \"RR\": \"R\",\n    \"RG\": \"B\",\n    \"RB\": \"G\",\n    \"GR\": \"B\",\n    \"GG\": \"G\",\n    \"GB\": \"R\",\n    \"BR\": \"G\",\n    \"BG\": \"R\",\n    \"BB\": \"B\"\n}\n\n\ndef triangle(row):\n    result = cash.get(row, False)\n    if not result:\n        result = cash[triangle(row[:-1]) + triangle(row[1:])]\n        cash.update({row: result})\n        return result\n    return result", "def triangle(row):\n    to_num = {'R':1,'G':2,'B':3}\n    from_num = {1:'R',2:'G',3:'B'}\n    \n    row_num = [to_num[y] for y in row]\n\n    while(len(row_num) > 1) :\n        t = []\n        for x in range(len(row_num)-1) :\n            if row_num[x] == row_num[x+1] :\n                t.append(row_num[x])\n            else :\n                t.append(6-row_num[x]-row_num[x+1])\n        row_num = t\n        \n    return from_num[row_num[0]]\n", "def next(a, b):\n    return 3-(a+b)%3\n\n# R=1, G=2, B=3\ndef rgb_to_number(string):\n    rgb = [\"R\", \"G\", \"B\"]\n    return [rgb.index(x)+1 for x in string]\n\ndef triangle(row):\n    number_dict = {1:\"R\", 2:\"G\", 3:\"B\"}\n    row = rgb_to_number(row)\n    while len(row)>1:\n        row = [next(row[i], row[i+1] ) for i in range(len(row)-1) ]\n    return number_dict[row[0]]", "def triangle(row):\n    MAP = {'RR': 'R', 'GG': 'G', 'BB': 'B', 'RG': 'B', 'RB': 'G', 'GR': 'B', 'GB': 'R', 'BR': 'G', 'BG': 'R'}\n    while len(row) > 1:\n        row = ''.join([MAP[''.join(x)] for x in zip(row, row[1:])])\n    return row", "def compare(pair):\n    if len(set(pair)) == 1:\n        return pair[0]\n    return list(set(pair) ^ set(\"RGB\"))[0]\n\n\ndef triangle(row):\n    return triangle(\n        [compare([row[i], row[i + 1]]) for i in range(len(row) - 1)]\n    ) if len(row) > 1 else row[0]", "def triangle(row):\n    for i in range (0,len(row)-1):\n        res=[]\n        for k in range(0,len(row)-1):\n            if row[k]==row[k+1]:\n                res+=row[k]\n            else:\n                res+='GBR'.replace(row[k],'').replace(row[k+1],'')\n        row=res\n    return(row[0])\n    pass", "from math import ceil \n \ndef memoize(f):  \n    memo = {}  \n    def _(x):  \n        if x not in memo:  \n            memo[x] = f(x)  \n        return memo[x]  \n    return _  \n  \n@memoize  \ndef reduce(row):  \n    MAP = {'RR': 'R', 'GG': 'G', 'BB': 'B', 'RG': 'B', 'RB': 'G', 'GR': 'B', 'GB': 'R', 'BR': 'G', 'BG': 'R'}  \n    CHUNK = 16\n    len_ = len(row)  \n    if len_ == 1: return row  \n    elif len_ == 2: return MAP[row]  \n    elif len_ > CHUNK+1:  \n        n = ceil(len_ / CHUNK)  \n        return ''.join([reduce(row[CHUNK*i:CHUNK*(i+1)+1]) for i in range(n)])  \n    else:  \n        return ''.join([MAP[row[i:i+2]] for i in range(len_ - 1)]) \n\ndef triangle(row):  \n    while len(row) > 1:  \n        row = reduce(row)  \n    return row ", "def memoize(f): \n    memo = {} \n    def _(x): \n        if x not in memo: \n            memo[x] = f(x) \n        return memo[x] \n    return _ \n \n@memoize \ndef reduce(row): \n    MAP = {'RR': 'R', 'GG': 'G', 'BB': 'B', 'RG': 'B', 'RB': 'G', 'GR': 'B', 'GB': 'R', 'BR': 'G', 'BG': 'R'} \n    CHUNK = 64 \n    len_ = len(row) \n    if len_ == 1: return row \n    elif len_ == 2: return MAP[row] \n    elif len_ > CHUNK+1: \n        n = ceil(len_ // CHUNK) \n        return ''.join([reduce(row[CHUNK*i:CHUNK*(i+1)+1]) for i in range(n)]) \n    else:\n        i = len_ // 2\n        return reduce(row[0:i+1]) + reduce(row[i:len_])\n\ndef triangle(row): \n    while len(row) > 1: \n        row = reduce(row) \n    return row", "def triangle(row):\n    k = 0\n    while k < len(row):\n        if row[k] == \"G\" or row[k] == \"B\" or row[k] == \"R\":\n            k+=1\n            continue\n        else:\n           return  print(\" only R,G,B are allowed\")\n\n\n    if len(row) == 1:\n        return row\n    how_many = len(row)-1\n    lenght = len(row)\n    new_row = \"\"\n    i = 0\n    j= 0\n    while j < how_many:\n        j=+1\n\n\n\n        while True:\n            if len(new_row) == len(row)-1:\n                if len(new_row) == 1:\n                    return  new_row\n                row = new_row\n                new_row = \"\"\n                lenght = len(row)\n                i = 0\n                break\n\n            if row[i] == row[i+1]:\n                new_row =new_row+row[i]\n                i+=1\n                continue\n\n            elif (row[i] == \"B\" and row[i+1] == \"G\") or (row[i] == \"G\" and row[i+1] == \"B\"):\n                new_row =new_row+\"R\"\n                i+=1\n                continue\n            elif (row[i] == \"R\" and row[i + 1] == \"G\") or (row[i] == \"G\" and row[i+1] == \"R\"):\n                new_row =new_row + \"B\"\n                i += 1\n                continue\n            elif (row[i] == \"B\" and row[i + 1] == \"R\") or (row[i] == \"R\" and row[i+1] == \"B\"):\n                new_row = new_row + \"G\"\n                i += 1\n                continue\n            if len(new_row) == 1:\n                return new_row\n            else:\n                row = new_row\n                i= 0\n\n", "def memoize(f):\n    memo = {}\n    def _(x):\n        if x not in memo:\n            memo[x] = f(x)\n        return memo[x]\n    return _\n\n@memoize\ndef reduce(row):\n    MAP = {'RR': 'R', 'GG': 'G', 'BB': 'B', 'RG': 'B', 'RB': 'G', 'GR': 'B', 'GB': 'R', 'BR': 'G', 'BG': 'R'}\n    len_ = len(row)\n    if len_ == 1: return row\n    elif len_ == 2: return MAP[row]\n    else:\n        i = len_ // 2\n        return reduce(row[0:i+1]) + reduce(row[i:len_])\n\ndef triangle(row):\n    while len(row) > 1:\n        row = reduce(row)\n    return row", "def triangle(row): \n    MAP = {'RR': 'R', 'GG': 'G', 'BB': 'B', 'RG': 'B', 'RB': 'G', 'GR': 'B', 'GB': 'R', 'BR': 'G', 'BG': 'R'} \n    while len(row) > 1: \n        row = [MAP[row[i] + row[i+1]] for i in range(len(row) - 1)] \n    return row[0]", "def k_color_code(a,b):\n    i = 0\n    j = 0\n    if(a.lower() == 'r'):\n        i = 1\n    if(a.lower() == 'b'):\n        i = 0.1\n    if(a.lower() == 'g'):\n        i = 0.01\n    if(b.lower() == 'r'):\n        j = 1\n    if(b.lower() == 'b'):\n        j = 0.1\n    if(b.lower() == 'g'):\n        j = 0.01    \n    return i + j\n\ndef k_color(k_code):\n\n    if k_code == 0.02:\n        return 'g'\n    elif k_code == 0.2:\n        return 'b'\n    elif k_code == 2:\n        return 'r'\n    elif k_code == 1.01:\n        return 'b'\n    elif k_code == 1.1:\n        return 'g'\n    elif k_code == 0.11:\n        return 'r'\n    elif k_code == 0.11:\n        return 'r'\n    else:\n        return 'n'\n\ndef new_row(row):\n    s = row\n    ps = \"\"\n    x = s\n    for i in range(0,len(x)):\n        if i + 1 != len(x):\n            ps += k_color(k_color_code(x[i],x[i+1]))\n        else:\n            break\n    x = ps\n    return x\n\ndef triangle(row):\n    s = row\n    while(len(s) != 1):\n        s = new_row(s)\n    return s.upper()\n\n", "import functools, itertools\n\ndef triangle(row):\n    def next_level(level_row):\n        if len(level_row) > 2:\n            return ''.join([next_level(level_row[i:i+2]) for i in range(len(level_row)) if len(level_row[i:i+2])>1])\n        str_list = ''.join(sorted([level_row[0], level_row[1]]))\n        if level_row[0] == level_row[1]:\n            return level_row[0]\n        return {\n            'GR': 'B',\n            'BG': 'R',\n            'BR': 'G'\n        }.get(str_list)\n    result = row\n    while len(result) > 1:\n        result = next_level(result)\n    return result", "# I defined these vars to make it more updateable if the input format changes\nred = 'R'\nblu = 'B'\ngre = 'G'\n\ndef add(col1, col2):\n    #Two same colors add to same color:\n    if col1==col2:\n        return col1\n    # BG returns R (order doesn't matter)\n    elif (col1==blu or col1==gre) and (col2==blu or col2==gre):\n        return red;\n    # RG returns B\n    elif (col1==red or col1==gre) and (col2==red or col2==gre):\n        return blu;\n    # RB returns G\n    elif (col1==blu or col1==red) and (col2==blu or col2==red):\n        return gre;\n    \ndef triangle(row):\n    if(row == None):\n        return None\n    row = list(row);\n    l = len(row)\n    # check base cases first: with n=1, n=2\n    if(l == 0):\n        return None\n    if(l == 1):\n        return row[0]\n    if(l == 2):\n        return add(row[0], row[1])\n    # with n > 1, add(i, i+1) until n-1\n    for i in range (0, l-1):\n        row[i] = add(row[i], row[i+1])\n    # get rid of the old nth term left from calculating the new row's nth term\n    row.pop()  \n    # then recurse:\n    return triangle(row)\n", "def new_row(row):\n    combinations = ['BG', 'GB', 'RG', 'GR', 'BR', 'RB']\n    res = ['R', 'R', 'B', 'B', 'G', 'G']\n    row2 = ''\n    for i in range(len(row) - 1):\n        if row[i] == row[i + 1]:\n            row2 += row[i]\n        else:\n            row2 += res[combinations.index(row[i] + row[i + 1])]\n    return row2\n            \n\ndef triangle(row):\n    if len(row) == 1:\n        return row\n    return triangle(new_row(row))", "def triangle(row):\n    str1 = ''\n    i = len(row)\n    while i>1:\n        for j in range (i-1):\n            if row[j]==row[j+1]: str1+=row[j]\n            elif row[j]!=row[j+1]:\n                if row[j]=='R' and row[j+1]=='G': str1+='B'\n                elif row[j]=='R' and row[j+1]=='B': str1+='G'\n                elif row[j]=='G' and row[j+1]=='B': str1+='R'\n                elif row[j]=='G' and row[j+1]=='R': str1+='B'\n                elif row[j]=='B' and row[j+1]=='R': str1+='G'\n                elif row[j]=='B' and row[j+1]=='G': str1+='R'\n        row = str1\n        str1 = ''\n        i = len(row) \n    return row"]