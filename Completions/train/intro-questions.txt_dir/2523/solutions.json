["class Solution:\n     def findShortestSubArray(self, nums):\n         \n         diction = {}\n         \n         for i in nums:\n             if i not in diction:\n                 diction[i] = 1\n             else:\n                 diction[i] += 1\n             \n         degree = max(list(diction.values()))\n         \n         if degree == 1:\n             return 1\n         \n         max_value = []\n         \n         for i in diction:\n             if diction[i] == degree:\n                 max_value.append(i)\n         \n         min_length = 10000000000\n         \n         for i in max_value:\n             head = 0\n             tail = 0\n             for j in range(len(nums)):\n                 if nums[j] == i:\n                     head = j\n                     break\n             for j in range(len(nums)-1,-1,-1):\n                 if nums[j] == i:\n                     tail = j\n                     break\n             if min_length > tail - head + 1:\n                 min_length = tail - head + 1\n         \n         return min_length", "class Solution:\n     def findShortestSubArray(self, nums):\n         \n         diction = {}\n         \n         for i in nums:\n             if i not in diction:\n                 diction[i] = 1\n             else:\n                 diction[i] += 1\n             \n         degree = max(list(diction.values()))\n         \n         if degree == 1:\n             return 1\n         \n         max_value = []\n         \n         for i in diction:\n             if diction[i] == degree:\n                 max_value.append(i)\n         \n         min_length = 10000000000\n         \n         for i in max_value:\n             head = 0\n             tail = 0\n             for j in range(len(nums)):\n                 if nums[j] == i:\n                     head = j\n                     break\n             for j in range(len(nums)-1,-1,-1):\n                 if nums[j] == i:\n                     tail = j\n                     break\n             if min_length > tail - head + 1:\n                 min_length = tail - head + 1\n         \n         return min_length", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         import collections\n         c = collections.Counter(nums)\n         degree = max(c[n] for n in c)\n         if degree <=1:\n             return degree\n         res = {}\n         for n in c:\n             if c[n] == degree:\n                 res[n] = [-1,-1]\n         for i,n in enumerate(nums):\n             if n in res:\n                 if res[n][0] == -1 :\n                     res[n][0] = i\n                 else:\n                     res[n][1] = i\n         return min(res[i][1]-res[i][0] for i in res) + 1", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         c = collections.Counter(nums)\n         first, last = {}, {}\n         for i, v in enumerate(nums):\n             first.setdefault(v, i)\n             last[v] = i\n         degree = max(c.values())\n         return min(last[v] - first[v] + 1 for v in c if c[v] == degree)", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         left, right, count = {}, {}, {}\n         for i, x in enumerate(nums):\n             if x not in left: left[x] = i\n             right[x] = i\n             count[x] = count.get(x, 0) + 1\n \n         ans = len(nums)\n         degree = max(count.values())\n         for x in count:\n             if count[x] == degree:\n                 ans = min(ans, right[x] - left[x] + 1)\n \n         return ans", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         left, right, count = {}, {}, {}\n         for i, x in enumerate(nums):\n             if x not in left: left[x] = i\n             right[x] = i\n             count[x] = count.get(x, 0) + 1\n \n         ans = len(nums)\n         degree = max(count.values())\n         for x in count:\n             if count[x] == degree:\n                 ans = min(ans, right[x] - left[x] + 1)\n \n         return ans", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         cnt = {}\n         se = {}\n         cur_max_cnt = 0\n         cur_span = float('inf')\n         for idx, n in enumerate(nums):\n             if not n in se:\n                 se[n] = [idx, idx]\n                 cnt[n] = 1\n             else:\n                 se[n][1] = idx\n                 cnt[n] += 1\n             x, y = se[n]\n             if cnt[n] > cur_max_cnt or (cnt[n] == cur_max_cnt and y - x + 1 < cur_span):\n                 cur_max_cnt = cnt[n]\n                 cur_span = y - x + 1\n         return cur_span", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             tmp = d.get(nums[i], [])\n             tmp.append(i)\n             d[nums[i]] = tmp\n         low = []\n         c = 0\n         for k in d:\n             tc = len(d.get(k))\n             if tc > c:\n                 c = tc\n         for k in d:\n             if len(d.get(k)) == c:\n                 low.append(k)\n \n         result = len(nums)\n         for s in low:\n             tmp = d.get(s)[-1] - d.get(s)[0] + 1 \n             if tmp < result:\n                 result = tmp\n         return result", "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         r={}\n         for i,j in enumerate(nums):\n             if j not in r:\n                 r[j]=1+100000*i\n             else:\n                 r[j]=r[j]%10000000000+1+10000000000*i\n         tem=1\n         dist=500000\n         print(r)\n         for i in list(r.values()):\n             print(i)\n             if i%100000==tem:\n                 if tem==1:\n                     dist=1\n                 else:\n                     dist_tem=i//10000000000-(i//100000)%100000+1\n                     if dist_tem<dist:\n                         dist=dist_tem\n             elif i%100000>tem:\n                 tem=i%100000\n                 dist=i//10000000000-(i//100000)%100000+1\n         return dist\n             \n                 \n        #  x=[0 for i in range(50000)]\n        #  for i in range(len(nums)):\n        #      x[nums[i]]=x[nums[i]]+1\n        #      if x[nums[i]]==1:\n        #          x[nums[i]]=x[nums[i]]+100000*i\n        #      else:\n        #          x[nums[i]]=x[nums[i]]%10000000000+10000000000*i\n        #  tem=1\n        # # print(x)\n        #  dist=50000\n        #  for i in x:\n        #     # print(i)\n        #      if i>0:\n        #          if i%100000==tem:\n        #              tem=i%100000\n        #              if tem==1:\n        #                  dist=1\n        #              else:\n        #                  dist_tem=i//10000000000-(i//100000)%100000+1\n        #                  if dist_tem<dist:\n        #                      dist=dist_tem\n        #          elif i%100000>tem:\n        #              tem=i%100000\n        #              dist=i//10000000000-(i//100000)%100000+1\n        #         # print(dist)\n        #  return dist\n     \n             \n"]