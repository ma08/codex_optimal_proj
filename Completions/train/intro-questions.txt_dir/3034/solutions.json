["def bowling_score(rolls):\n  \"Compute the total score for a player's game of bowling.\"\n  \n  def is_spare(rolls):\n    return 10 == sum(rolls[:2])\n\n  def is_strike(rolls):\n    return 10 == rolls[0]\n\n  def calc_score(rolls, frame):\n    return (sum(rolls) if frame == 10 else\n            sum(rolls[:3]) + calc_score(rolls[1:], frame+1) if is_strike(rolls) else\n            sum(rolls[:3]) + calc_score(rolls[2:], frame+1) if is_spare(rolls) else\n            sum(rolls[:2]) + calc_score(rolls[2:], frame+1))\n  \n  return calc_score(rolls,1)\n", "def bowling_score(rolls):\n    count = 0\n    score = 0\n    while count < 10:\n        count += 1\n        frame = rolls.pop(0)\n        if frame < 10:\n            frame += rolls.pop(0)\n            score += frame\n            if frame == 10:\n                score += rolls[0]\n        else:\n            score += frame + rolls[0] + rolls[1]\n    return score", "def bowling_score(rolls):\n  tot,i = 0,0\n  for frm in range(10):\n      fscr,i = rolls[i],i+1\n      if fscr == 10:\n          tot += fscr + rolls[i] + rolls[i+1]\n          continue\n      fscr += rolls[i]\n      i += 1\n      if fscr >= 10:\n          tot += rolls[i]\n      tot += fscr\n  return tot\n", "def bowling_score(rolls):\n    i = score = 0\n    for _ in range(10):\n        if rolls[i] == 10:\n            score += rolls[i] + rolls[i+1] + rolls[i+2]\n            i += 1\n        elif rolls[i] + rolls[i+1] == 10:\n            score += rolls[i] + rolls[i+1] + rolls[i+2]\n            i += 2\n        else:\n            score += rolls[i] + rolls[i+1]\n            i += 2\n    return score", "def bowling_score(rolls):\n    score = 0\n    for i in range(10):\n        frame = rolls.pop(0)\n        if frame == 10:\n            # This is a strike\n            score += frame + rolls[0] + rolls[1]    \n        else:\n            frame += rolls.pop(0)\n            score += frame\n            if frame == 10:\n                # This is a spare\n                score += rolls[0] \n    return score", "def bowling_score(s):\n    i, count = 0, []\n    while len(count) < 9:\n        count.append(s[i] + s[i+1] + [0,s[i+2]][10 in [s[i]+s[i+1],s[i]]])\n        i += 2-int(s[i]==10)\n    return sum(count) + sum(s[i:])", "def bowling_score(rolls):\n    i, score = 0, 0\n    for _ in range(10):\n        oneBall = frame = rolls[i]\n        i += 1\n        if oneBall < 10: frame += rolls[i] ; i += 1\n        if frame == 10:  score += sum( rolls[ i:i+1+(oneBall==10) ] )\n        score += frame\n    return score", "def bowling_score(rolls):\n    score = 0\n    frame = 0\n    i = 0\n    while frame < 10:\n        if rolls[i]==10:\n            score += rolls[i]+rolls[i+1]+rolls[i+2]\n            frame+=1\n            i+=1\n        else:\n            tmp = rolls[i]+rolls[i+1]\n            score+=tmp\n            if tmp==10:\n                score+=rolls[i+2]\n            frame+=1\n            i+=2\n    return score", "def bowling_score(rolls):\n    frames, scores = 0, 0\n    while frames < 9:\n        scores += sum(rolls[:2])\n        if 10 in (rolls[0], sum(rolls[:2])):\n            scores += rolls[2]\n        if rolls[0] != 10:\n            rolls.pop(0)\n        frames += 1\n        rolls.pop(0)\n    return scores + sum(rolls)", "def bowling_score(rolls):\n    frameIndex = 1\n    pins = 10\n    rollsLeft = 2\n    totalScore = 0\n    frameScore = 0\n    for i in range(len(rolls)):\n        if frameIndex <= 10:\n            frameScore += rolls[i]\n            pins -= rolls[i]\n            rollsLeft -= 1\n        if pins <= 0:\n            if frameIndex <= 10:\n                bonus = rollsLeft + 1\n                frameScore += sum(rolls[(i + 1):(i + 1 + bonus)])\n            frameIndex += 1\n            pins = 10\n            rollsLeft = 2\n            totalScore += frameScore\n            frameScore = 0\n        elif rollsLeft <= 0:\n            frameIndex += 1\n            pins = 10\n            rollsLeft = 2\n            totalScore += frameScore\n            frameScore = 0\n    return totalScore"]