["def calc(a):\n    return sum( x**(1 + (x>=0)) * (1 + 2*(not i%3)) * (-1)**(not i%5) for i,x in enumerate(a,1))", "def calc(a):\n    for i, n in enumerate(a):\n        if a[i] > 0: a[i] *= a[i]\n        if i % 3 == 2: a[i] = a[i] * 3\n        if i % 5 == 4: a[i] = a[i] * -1\n    return sum(a)", "def calc(a):\n    print(a)\n    \n    for i in range(len(a)):\n        if a[i] > 0:\n            a[i] *= a[i]\n            \n    for i in range(2,len(a),3):\n        a[i] *= 3 \n        \n    for i in range(4,len(a),5):\n        a[i] *= -1\n        \n    return sum(a)", "def calc(a):\n    sum = 0\n    for i in range(len(a)):\n        value = a[i]\n        if value > 0: value *= value\n        if (i+1) % 3 == 0: value *= 3\n        if (i+1) % 5 == 0: value = -value\n        sum += value\n    return sum", "def mod(e):\n    i, n = e\n    return (n**2 if n > 0 else n) * (3 if i % 3 == 0 else 1) * (-1 if i % 5 == 0 else 1)\n\ndef calc(lst):\n    return sum(map(mod, enumerate(lst, 1)))\n    \n#   without loop, as asked   \n##############################\n\n\n# there with a comprehension (so a for):\n#def calc(lst):\n#    return sum((n**2 if n > 0 else n) * (3 if i % 3 == 0 else 1) * (-1 if i % 5 == 0 else 1) for i, n in enumerate(lst, 1))\n", "def calc(a):\n    return sum([i * (i if i > 0 else 1) * (3 if k%3 == 2 else 1) * (-1 if k%5 == 4 else 1) for k, i in enumerate(a)])", "fifth  = lambda i, x: x if i%5 else -x\nthird  = lambda i, x: x if i%3 else 3*x\nsquare = lambda x   : x if x<0 else x*x\n\ndef calc(a):\n    return sum(fifth(i, third(i, square(x))) for i,x in enumerate(a, 1))", "from itertools import cycle\nfrom operator import mul\n\nmuls=(1,1,3,1,-1,3,1,1,3,-1,1,3,1,1,-3)\n\ndef calc(a):\n    return sum(map(mul,map(lambda n:n*n if n>0 else n,a),cycle(muls)))", "from itertools import cycle\n\ndef calc(lst):\n    return sum((a ** 2 if a > 0 else a) * b * c\n        for a, b, c in zip(lst, cycle((1, 1, 3)), cycle((1, 1, 1, 1, -1))))", "def calc(a):\n    return sum(i**(1,2)[i>0]*(1,3)[idx%3==2]*(1,-1)[idx%5==4] for idx,i in enumerate(a))"]