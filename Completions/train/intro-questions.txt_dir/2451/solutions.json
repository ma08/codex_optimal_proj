["class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         ransome = set(ransomNote)\n         for i in ransome:\n             if ransomNote.count(i) > magazine.count(i):\n                 return False\n         return True\n         \n             \n         \n", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         n = [0] * 128\n         for c in magazine:\n             n[ord(c)] += 1\n         for c in ransomNote:\n             v = n[ord(c)]\n             if v == 0:\n                 return False\n             n[ord(c)] = v - 1\n             \n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         return all(ransomNote.count(i)<=magazine.count(i) for i in set(ransomNote))", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in set(ransomNote):\n             if i not in set(magazine) or ransomNote.count(i)>magazine.count(i):\n                 return False\n         return True\n", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in set(ransomNote):\n             if ransomNote.count(i) > magazine.count(i):\n                 return False\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         available_letters = dict()\n         \n         for c in magazine:\n             if c in list(available_letters.keys()):\n                 available_letters[c] += 1\n             else:\n                 available_letters[c] = 1\n         \n         for c in ransomNote:\n             if c not in list(available_letters.keys()):\n                 return False\n             else:\n                 available_letters[c] -= 1\n                 if available_letters[c] == 0:\n                     del available_letters[c]\n         \n         return True\n", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in set(ransomNote):\n             if ransomNote.count(i) > magazine.count(i):\n                 return False\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for note in ransomNote:\n             if note not in magazine:\n                 return False\n             else:\n                 INDEX = magazine.index(note)\n                 magazine = magazine[:INDEX]+magazine[INDEX+1:]\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         a = set(ransomNote)\n         b = set(magazine)\n         for element in a:\n             if ransomNote.count(element) > magazine.count(element):\n                 return False\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         from collections import Counter\n         \n         ransom = Counter(ransomNote)\n         mag = Counter(magazine)\n         \n         return all(mag[letter] >= ransom[letter] for letter in ransom)\n", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         \n         \n         dic1 = collections.Counter(ransomNote)\n         dic2 = collections.Counter(magazine)\n         \n         for key in dic1:\n             if key not in dic2 or dic2[key] < dic1[key]:\n                 return False\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         a = collections.Counter(ransomNote)\n         b = collections.Counter(magazine)\n         for let in ransomNote:\n             if(a[let] > b[let]):\n                 return False\n         \n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         magazine = list(magazine)\n         for letter in ransomNote:\n             try:\n                 magazine.remove(letter)\n             except ValueError:\n                 return False\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         rs=list(ransomNote)\n         ms=list(magazine)\n         for r in rs:\n             if r not in ms:\n                 return False\n             else:\n                 ms.remove(r)\n         return True", "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         r_map = {}\n         for char in ransomNote:\n             if char in r_map:\n                 r_map[char] += 1\n             else:\n                 r_map[char] = 1\n         m_map = {}\n         for char in magazine:\n             if char in m_map:\n                 m_map[char] += 1\n             else:\n                 m_map[char] = 1\n         for char, count in r_map.items():\n             if char not in m_map:\n                 return False\n             if count > m_map[char]:\n                 return False\n         return True"]