["import re\n\ndef inside_out(s):\n    return re.sub(r'\\S+', lambda m: inside_out_word(m.group()), s)\n\ndef inside_out_word(s):\n    i, j = len(s) // 2, (len(s) + 1) // 2\n    return s[:i][::-1] + s[i:j] + s[j:][::-1]", "def swap(word):\n    m = len(word) // 2\n    if len(word) % 2 == 0:\n        return word[:m][::-1] + word[m:][::-1]\n    else:\n        return word[:m][::-1] + word[m] + word[m+1:][::-1]\n        \ndef inside_out(st):\n    return ' '.join(map(swap, st.split()))", "def inside_out(s):\n    return ' '.join(w[:len(w)//2][::-1] + w[len(w)//2:(len(w)+1)//2] + w[(len(w)+1)//2:][::-1] for w in s.split())", "from itertools import chain\n\ndef change(st):\n    if len(st) < 4: return st\n    q, r = divmod(len(st), 2)\n    return ''.join(chain(st[q-1::-1], st[q:q+r], st[:q+r-1:-1]))\n\ndef inside_out(st):\n    return ' '.join(map(change, st.split()))", "def inside_out(st):\n    def inside_out_1(st):\n        h, m = divmod(len(st), 2)\n        return st[:h][::-1] + st[h:h + m] + st[h + m:][::-1]\n    return ' '.join(map(inside_out_1, st.split(' ')))", "def inside_out(s):\n    return ' '.join( w[:m][::-1] + w[m] * (L%2) + w[-m:][::-1] * (L>1)\n                     if w else w\n                     for w,m,L in map(lambda w: (w, len(w)//2, len(w)), s.split(' ')) )", "inside_out=lambda s:\" \".join([i[:len(i)//2][::-1] + [\"\",i[len(i)//2]][len(i)&1] + i[len(i)//2+(len(i)&1):][::-1] for i in s.split()])", "def inside_out(text):\n  return ' '.join(next(f'{w[:i][::-1]}{w[i:j]}{w[j:][::-1]}' for i, j in [[len(w)//2, (len(w)+1)//2]]) for w in text.split())", "inside_out=lambda s:\" \".join(x[:l][::-1]+x[l]*n+x[l+n:][::-1]for x in s.split()for l,n in[(len(x)//2,len(x)%2)])"]