["BASE = [r.split('|') for r in '''\\\n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       '''.split('\\n') ]\n\n\ndef segment_display(n):\n    digs = [int(d,16) for d in f'{n:A>6}']\n    return '\\n'.join( f'|{ \"|\".join( BASE[x][d] for d in digs) }|'\n                      for x in range(len(BASE)))\n", "from itertools import chain\n\nlines = \"\"\"\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       \n\"\"\".lstrip().splitlines()\n\ndef digit_rotated(n):\n    return [\"\".join(line[i] for line in lines) for i in range(n * 8, (n+1) * 8)]\n\ndef segment_display(n):\n    digits = [int(c) for c in str(n)]\n    if len(digits) < 6:\n        digits = [-1] * (6-len(digits)) + digits\n    xs = (line for line in chain(*map(digit_rotated, digits), [\"|||||||||\"]))\n    return \"\\n\".join(map(\"\".join, zip(*xs)))", "data = \"\"\"\n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  \n\"\"\"\n# Remove blank lines, and extract the string for each line of each digit\ndata = [line for line in data.split('\\n') if line]\nsegments = [tuple(line.split('|')) for line in data]\nh, w = len(segments), len(segments[0][0])\n\ndef segment_display(num):\n    result = [[] for _ in range(h)]\n    n = str(num)\n    # Apply left padding\n    for _ in range(6 - len(n)):\n        for i in range(h):\n            result[i].append(' ' * w)\n    # Add each digit in turn\n    for c in n:\n        n = int(c)\n        for i in range(h):\n            result[i].append(segments[i][n])\n    return \"\\n\".join( ['|{}|'.format('|'.join(row)) for row in result])\n", "displays = {\n    '0': '012456',\n    '1': '25',\n    '2': '02346',\n    '3': '02356',\n    '4': '1235',\n    '5': '01356',\n    '6': '013456',\n    '7': '025',\n    '8': '0123456',\n    '9': '012356',\n    ' ' : ''\n}\nshape = ' 000 |1   2|1   2|1   2| 333 |4   5|4   5|4   5| 666 '.split('|')\n\ndef segment_display(n):\n    s = str(n).rjust(6,' ')\n    return '\\n'.join('|' + ('|'.join(' '+ (''.join(' #'[c in displays[d]] for c in shape[j]) + ' ') for d in s)) + '|' for j in range(9))", "def segment_display(num):\n    segs = ''' \n ### |     | ### | ### |     | ### | ### | ### | ### | ### \n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n     |     | ### | ### | ### | ### | ### |     | ### | ### \n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n ### |     | ### | ### |     | ### | ### |     | ### | ### '''\n    numbers = {str(i): [] for i in range(10)}\n    for s in segs.split('\\n')[1:]:\n        for i, t in enumerate(s.split('|')):\n            numbers[str(i)].append(t)\n    numbers[' '] = ['     '] * 9\n    return '\\n'.join(['| ' + ' | '.join([numbers[ch][y] for ch in f'{num:>6}']) + ' |' for y in range(9)])", "s = '''|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |\n'''.splitlines()\nsegment_display=lambda n:'\\n'.join(''.join(i)+'|'for i in [(['|       ']*(6-len(str(n))))+[k[int(l)]for l in str(n)]for k in[[i[j:j+8]for j in range(0,len(i),8)]for i in s]])", "def segment_display(num):  \n    fline, fl, fr, frl, empty = ['  ###  '],[' #     '],['     # '],[' #   # '],['       ']\n    codes = [\n            empty*9,\n            fline + frl*3 + empty + frl*3 + fline, \n            (empty + fr*3) * 2 + empty,\n            fline + fr*3 + fline + fl*3 + fline,\n            (fline + fr*3) * 2 + fline,\n            empty + frl*3 + fline + fr*3 + empty,\n            fline + fl*3 + fline + fr*3 + fline,\n            fline + fl*3 + fline + frl*3 + fline,\n            fline + (fr*3 + empty) * 3 + empty,\n            (fline + frl*3) * 2 + fline,\n            fline + frl*3 + fline + fr*3 + fline\n        ]\n\n    result = \"\"\n    for line in range(9): # Hight is 9 lines\n        result += \"|\" + \"|\".join([codes[0 if letter==' ' else int(letter)+1][line] for letter in str(num).rjust(6)]) + \"|\\n\"  \n    return result[:-1]", "all_num = \\\n'''|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |'''\ndef segment_display(num):\n    all_num_list = all_num.split('\\n')\n    fish_list = []\n    for val in (all_num_list):\n        fish_hold_list = []\n        fish_hold = '' + '|       |'*(6-len(str(num)))\n        for num2 in str(num):\n            num3 = int(num2)\n            beg_col = (num3 * 8)\n            end_col = beg_col + 9\n            fish_hold += val[beg_col:end_col]\n            fish_hold_list.append([fish_hold])\n        fish_list.append(fish_hold)\n    retval_list = []\n    for val in (fish_list):\n        retval_list.append(val.replace('||','|'))\n    return '\\n'.join(retval_list)\n", "def segment_display(num):\n    temp=str(num).rjust(6, \"_\")\n    numbersn    res=[]\n    for i in range(len(numbers)):\n        string=[]\n        for j, num in enumerate(temp):\n            string.append(\" \"*5) if num==\"_\" else string.append(numbers[i][int(num)])\n        res.append(\"| \"+\" | \".join(string)+\" |\")\n    return \"\\n\".join(res)"]