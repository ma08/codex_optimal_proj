["def hex_to_dec(s):\n    return int(s, 16)", "from functools import partial\nhex_to_dec = partial(int, base=16)", "def hex_to_dec(s):\n    key = \"0123456789abcdef\"\n    n=0\n    res=0\n    for l in s[::-1]:\n        res += key.index(l)*(16.**n)\n        n+=1\n        \n    return int(res)", "hex_to_dec = lambda s: int(s, 16)", "def hex_to_dec(s):\n    hxdict = {'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}\n    count = 0\n    total = 0\n    for num in reversed(s):\n        if num.isalpha():\n            hxnum = hxdict.get(num)\n            total = total + hxnum*(16**count)\n            count += 1\n        else:\n            total = int(num) * (16**count) + total\n            count += 1\n    return total", "def hex_to_dec(string):\n    return int(string, 16)", "def hex_to_dec(s):\n    return int(eval('0x'+s))", "def hex_to_dec(s):\n    hex_num = int(s, 16)\n    return hex_num", "def hex_to_dec(s):\n    hex = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'a': 10,\n    'b': 11,\n    'c': 12,\n    'd': 13,\n    'e': 14,\n    'f': 15\n    }\n    \n    sum = 0\n    leng = len(s)-1\n    for i in s:\n        sum += hex[i] * 16**leng\n        leng -= 1\n        \n    return sum", "d = {'0' : 0,\n     '1' : 1,\n     '2' : 2,\n     '3' : 3,\n     '4' : 4,\n     '5' : 5,\n     '6' : 6,\n     '7' : 7,\n     '8' : 8,\n     '9' : 9,\n     'A' : 10,\n     'B' : 11,\n     'C' : 12,\n     'D' : 13,\n     'E' : 14,\n     'F' : 15}\ndef hex_to_dec(s):\n    x = list(str(s.upper()))\n    y = [d[i] for i in x][::-1]\n    z = [16**i for i in range(len(y))]\n    w = []\n    for i in range(len(y)):\n        w.append(y[i] * z[i])\n    return (sum(w))\n", "hex_to_dec = lambda s: eval(\"0x\" + s)", "def hex_to_dec(s):\n    m = '0123456789ABCDEF'\n    result = 0\n    for i in range(0, len(s)):\n        result += m.index(s[i].upper()) * 16 ** (len(s) - 1 - i)\n\n    return result", "def to_bin(value):\n    res = ''\n    while value > 0:\n        res += str(value % 2)\n        value //= 2\n    return ('{:0>4}'.format(res[::-1])) if res != '' else '0000'\n\ndef to_dec(value):\n    res = 0\n    \n    value = value[::-1]\n    for ix in range(len(value)):\n        res += int(value[ix]) * (2 ** ix)\n\n    return res\n\ndef hex_to_dec(s):\n    convert = {\n        '0' : 0,\n        '1' : 1,\n        '2' : 2,\n        '3' : 3,\n        '4' : 4,\n        '5' : 5,\n        '6' : 6,\n        '7' : 7,\n        '8' : 8,\n        '9' : 9,\n        'a' : 10,\n        'b' : 11,\n        'c' : 12,\n        'd' : 13,\n        'e' : 14,\n        'f' : 15\n    }\n    \n    res = list(map((lambda x:convert[x]), list(s)))\n    res = list(map(to_bin, res))\n    res = ''.join(res)\n    \n    return to_dec(res)", "import binascii\ndef hex_to_dec(s):\n    return int.from_bytes(binascii.unhexlify((\"0\" * (len(s) % 2)) + s), byteorder=\"big\")", "def hex_to_dec(s):\n    ords = [ord(x) for x in s]\n    ints = [x- 48 if x < 90 else x-87 for x in ords]\n    res = 0\n    for i in range(len(s)):\n        curr_power = len(s) -1 - i\n        res += (ints[i] * 16**curr_power)\n    return res", "def hex_to_dec(s):\n    ans = 0\n    dict={\n        'a':10,\n        'b':11,\n        'c':12,\n        'd':13,\n        'e':14,\n        'f':15\n    }\n    i = len(s)\n    if(i == 1):\n        if(s.isnumeric()):\n            ans+=int(s)\n        elif(s.isalpha()):\n            for x,y in dict.items():\n                if s == x:\n                    ans+=y\n    else:\n        for s in s:         \n            if(s.isnumeric()):\n                ans += int(s)*pow(16,i-1)\n                i-=1\n            else:\n                for x,y in dict.items():\n                    if s == x:\n                        ans += y*pow(16,i-1)\n                        i-=1\n    return ans", "def hex_to_dec(s):\n    return int(str(s), base = 16)", "def hex_to_dec(s):\n    result, count = 0, 0\n    hexes = '0123456789ABCDEF'\n    s_r = s.upper()[::-1]\n    for i in s_r:\n        result += hexes.find(i) * 16 ** count\n        count += 1\n    return result", "def hex_to_dec(string):\n    return int(string, 16)\n\n# Complete the function which converts hex number (given as a string) \n# to a decimal number.\n", "def hex_to_dec(number):\n    return int(number, 16)", "def hex_to_dec(s):\n    return int(s, 16) # int(input, base) returns an input that was based on base 16 i.e. hexidecimal", "def hex_to_dec(s):\n    \n    convert = ''\n    dec = 0\n    \n    for i in range(len(s)):\n        \n        if s[len(s)-1-i] == '0':\n            convert = 0\n        if s[len(s)-1-i] == '1':\n            convert = 1\n        if s[len(s)-1-i] == '2':\n            convert = 2\n        if s[len(s)-1-i] == '3':\n            convert = 3\n        if s[len(s)-1-i] == '4':\n            convert = 4\n        if s[len(s)-1-i] == '5':\n            convert = 5\n        if s[len(s)-1-i] == '6':\n            convert = 6\n        if s[len(s)-1-i] == '7':\n            convert = 7\n        if s[len(s)-1-i] == '8':\n            convert = 8\n        if s[len(s)-1-i] == '9':\n            convert = 9\n        if s[len(s)-1-i] == 'a':\n            convert = 10\n        if s[len(s)-1-i] == 'b':\n            convert = 11\n        if s[len(s)-1-i] == 'c':\n            convert = 12\n        if s[len(s)-1-i] == 'd':\n            convert = 13\n        if s[len(s)-1-i] == 'e':\n            convert = 14\n        if s[len(s)-1-i] == 'f':\n            convert = 15\n        \n        dec += convert * (16 ** i)\n    \n    return dec", "def hex_to_dec(s):\n    return int(int(\"0x\"+s, 16))", "def hex_to_dec(s):\n    print(int(s,20))\n    return int(s,16)", "def hex_to_dec(s):\n    # we use 16 as it's the base for hex as a base\n    return int(s, 16)", "def hex_to_dec(hex: str) -> int:\n    return int(hex,16)", "def hex_to_dec(y):\n    x, y, z = 16, list(y[::-1]), {'a':'10', 'b':'11', 'c':'12', 'd':'13', 'e':'14', 'f':'15'}\n    return sum([int(z[y[i]]) * (x ** i) if y[i] in z else int(y[i]) * (x ** i) for i in range(len(y))])", "def hex_to_dec(s):\n    return eval('0x{}'.format(s))", "def hex_to_dec(s):\n    \n    dic = {'0123456789abcdef'[x] : x for x in range(16)}\n    a = 0\n    b = len(s) - 1\n    c = 0\n    \n    while b >= 0 :\n        a += dic[s[c]] * (16 ** b)\n        b -= 1\n        c += 1\n\n    return a", "import sys\n\ndef hex_to_dec(s):\n    hex = {'a': 10,'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15}\n    \n    res = 0\n    weight = 16 ** (len(s) - 1)\n    \n    for ch in s:\n        if ch in hex:\n            res += hex.get(ch) * weight\n        else:\n            res += int(ch) * weight\n        weight /= 16\n    return res", "def hex_to_dec(s):\n    inv = list(s)[::-1]\n    arr = []\n    for i in range(len(inv)):\n        for j in range(10):\n            if inv[i] == str(j):\n                arr.append(j * (16 ** i))\n        if inv[i] == \"a\":\n            arr.append(10 * (16 ** i))\n        elif inv[i] == \"b\":\n            arr.append(11 * (16 ** i))\n        elif inv[i] == \"c\":\n            arr.append(12 * (16 ** i))\n        elif inv[i] == \"d\":\n            arr.append(13 * (16 ** i))\n        elif inv[i] == \"e\":\n            arr.append(14 * (16 ** i))\n        elif inv[i] == \"f\":\n            arr.append(15 * (16 ** i))\n    res = 0\n    for i in arr:\n        res += i\n    return res\n            \n            \n            \n            \n        \n        \n", "def hex_to_dec(s):\n    # int(string, base) converts the provided char to base type.\n    # hexadecimal => 16\n    return int(s, 16)", "def hex_to_dec(s):\n    i = int(s, 16)\n    return int(str(i))", "def hex_to_dec(s):\n    t = 0\n    x = len(s) -1\n    for i in s:\n        \n        if i==\"a\":\n            t+= (10*(16**x))\n        elif i==\"b\":\n            t+= (11*(16**x))\n        elif i==\"c\":\n            t+= (12*(16**x))\n        elif i==\"d\":\n            t+= (13*(16**x))\n        elif i==\"e\":\n            t+= (14*(16**x))\n        elif i==\"f\":\n            t+= (15*(16**x))\n        else:\n            t+= (int(i)*(16**x))\n\n        x-=1\n\n    print(t)\n    return t ", "def hex_to_dec(s):\n    \"\"\"Convert Hex String to decimal\"\"\"\n    return int(s,base=16)", "def hex_to_dec(s):\n    return int(f'0x{s}',16)\n", "def hex_to_dec(s):\n    s = s[::-1]\n    dec=0\n    a = [0] * len(s)\n    for i in range(len(s)):\n        a[i] = 10 if (s[i] ==\"a\" or s[i]==\"A\") else 11 if (s[i] ==\"b\" or s[i] ==\"B\") else 12 if (s[i] ==\"c\" or s[i] ==\"C\") else 13 if (s[i] ==\"d\" or s[i] ==\"D\") else 14 if (s[i] ==\"e\" or s[i] ==\"E\") else 15 if (s[i] ==\"f\" or s[i] ==\"F\") else int(s[i]) \n        dec = dec + a[i]*16**i\n    return dec", "def hex_to_dec(s):\n    \n    key = '0123456789abcdef'\n    \n    return sum([key.index(v)*16**(len(list(s))-1-i)for i, v in enumerate(list(s))])\n", "def hex_to_dec(s):\n    dict = {'0': 0, '1' : 1, '2': 2, '3' : 3, '4' : 4, \n    '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9, 'a' : 10,\n    'b' : 11, 'c' : 12, 'd' : 13, 'e' : 14, 'f' : 15}\n    \n    return sum([dict[v]*16**(len(list(s))-1-i)for i, v in enumerate(list(s))])", "def hex_to_dec(s):\n    hexn = {'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    sum = 0\n    n = 0\n    for i in s[::-1]:\n        if i.upper() in hexn:\n            sum += hexn[i.upper()] * 16**n\n        else:\n            sum += int(i) * 16**n\n        n+=1\n    return sum", "def hex_to_dec(s):\n    return int(int(s, 16))", "hex_to_dec = lambda s: int(s, 16)\n\n# def hex_to_dec(s):\n#     return int(s, 16)\n", "list_with_keys = list(map(chr,range(ord('a'),ord('f')+1)))\n\nmy_list = []\nfor item in list(range(10)):\n    my_list.append(str(item))\n    \nlist_with_keys = my_list + list_with_keys\nlist_with_values = list(range(16))\n\nhex_dict = dict(zip(list_with_keys,list_with_values))\n\ndef hex_to_dec(s):\n    hex_convert = []\n    for char in list(s):\n        for key, value in hex_dict.items():\n            if char == key: hex_convert.append(value)\n    hex_num = 0\n    for (index,number) in zip(range(len(hex_convert)),reversed(hex_convert)):\n        hex_num = hex_num + (number*(16**index))\n    return hex_num", "List = ['a','b','c','d','e','f','g']\ndef hex_to_dec(s):\n    return int(s,16)", "def hex_to_dec(s):\n    r_number = 0\n    for idx, letter in enumerate(s.upper()[::-1]):\n        if ord(letter) >= 65 and ord(letter) <= 70:\n            r_number += (ord(letter) - 55) * (16**idx)\n        elif ord(letter) >= 48 and ord(letter) <= 57:\n            r_number += (ord(letter) - 48) * (16**idx)\n        else:\n            print('not a proper hex number :', letter)\n            return\n    return r_number", "def hex_digit_to_dec(s):\n    if s.isdigit():\n        return int(s)\n    return ord(s) - ord('a') + 10\n    \n\ndef hex_to_dec(s):\n    res = 0\n    max_i = len(s) - 1\n    for i, x_16 in enumerate(s):\n        res += hex_digit_to_dec(x_16) * 16 ** (max_i - i)\n    return res", "def hex_to_dec(s):\n    d = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    \n    return sum([d[x.upper()]*16**index for (index,x) in enumerate(s[::-1])])", "def hex_to_dec(s):\n    case={'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'a':10,'b':11,'c':12,'d':13,'e':14,'f':15}\n    s=list(s)\n    s.reverse()\n    sum_,j=0,0\n    for i in range(len(s)):\n         sum_+=case.get(s[i])*pow(16,j)\n         j+=1\n    return sum_", "def hex_to_dec(s):\n    dec = 0\n    rev_s = s[::-1]\n    count = 0\n    for i in rev_s:\n        if i == '0':\n            dec += 0 * 16 ** count\n            count += 1\n        elif i == '1':\n            dec += 1 * 16 ** count\n            count += 1\n        elif i == '2':\n            dec+= 2 * 16 ** count\n            count += 1\n        elif i == '3':\n            dec += 3 * 16 ** count\n            count += 1\n        elif i == '4':\n            dec += 4 * 16 ** count\n            count += 1\n        elif i == '5':\n            dec+= 5 * 16 ** count\n            count += 1\n        elif i == '6':\n            dec += 6 * 16 ** count\n            count += 1\n        elif i == '7':\n            dec+= 7 * 16 ** count\n            count += 1    \n        elif i == '8':\n            dec+= 8 * 16 ** count\n            count += 1\n        elif i == '9':\n            dec += 9 * 16 ** count\n            count += 1\n        elif i.lower() == 'a':\n            dec += 10 * 16 ** count\n            count += 1\n        elif i.lower() == 'b':\n            dec += 11 * 16 ** count\n            count += 1\n        elif i.lower() == 'c':\n            dec += 12 * 16 ** count\n            count += 1\n        elif i.lower() == 'd':\n            dec += 13 * 16 ** count\n            count += 1\n        elif i.lower() == 'e':\n            dec += 14 * 16 ** count\n            count += 1\n        elif i.lower() == 'f':\n            dec += 15 * 16 ** count\n            count += 1\n    return dec", "def hex_to_dec(s):\n    hex_dict = ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f']\n    temp =  list(map(hex_dict.index,s))\n    pow = range(len(s) - 1, -1, -1)\n    return sum(temp[i]*16**pow[i] for i in range(len(s)))", "def hex_to_dec(he_x):\n    return int(he_x , 16)", "hex_vals = {'a':10,'b':11,'c':12,'d':13,'e':14,'f':15}\n\ndef hex_to_dec(s):\n    accum = 0\n\n    for pos, num in enumerate(reversed(s)):\n        if num in '0123456789':\n            accum += int(num)*(16**pos)\n        else:\n            accum += hex_vals[num]*(16**pos)\n    \n    return accum", "hex_to_dec=lambda n: int(n, 16)", "def hex_to_dec(s):\n    return int(s, base=16)\n\nhex_to_dec('10')", "def hex_to_dec(s):\n    hex_dic = {}\n    \n    # Numbers\n    for i in range(10):\n        hex_dic[str(i)] = i\n    \n    # Letters\n    next_letter = 10\n    for i in ['a','b','c','d','e','f']:\n        hex_dic[i] = next_letter\n        next_letter += 1\n    \n    base = 16\n    num_digits = len(s) - 1\n    dec_val = 0\n    pos = 0\n    \n    for i in range(num_digits,-1,-1):\n        dec_val += hex_dic[s[pos]] * base**i\n        pos += 1\n        \n    return dec_val", "def hex_to_dec(s):\n    dict = {\"0\":0, \"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\":7, \"8\":8, \"9\":9, \"a\":10, \"b\":11, \"c\":12, \"d\":13, \"e\":14, \"f\":15}\n    s = s[::-1]\n    liczba = 0\n    for i in range(len(s)):\n        liczba += dict[s[i]]*(16**i)\n    return liczba", "def hex_to_dec(n): \n    a = n\n    res = int(a, 16) \n    return res", "def hex_to_dec(s):\n    convert = int(s, 16)\n    return convert", "def hex_to_dec(s):\n    a = 0\n    dic_hex = {'a': 10,\n            'b': 11,\n            'c': 12,\n            'd': 13,\n            'e': 14,\n            'f': 15}\n    for i in range(0, len(s)):\n        print(s[-(i+1)], i)\n        a += int(dic_hex.get(s[-(i+1)], s[-(i+1)])) * 16 ** i\n    return a", "def hex_to_dec(s):\n    sd = int(s, 16)\n    print(sd)\n    return sd", "def hex_to_dec(s):\n    d = {\n      \"a\":10,\n      \"b\":11,\n      \"c\":12,\n      \"d\":13,\n      \"e\":14,\n      \"f\":15\n    }\n    res = 0\n    for i in s:\n        res *= 16\n        if i.isdigit():\n            res += int(i)\n        else:\n            res += d.get(i)\n    return res", "def hex_to_dec(s):\n    print(s)\n    v=0\n    step=0\n    for i in range(len(s)-1,-1,-1):\n        if s[i]=='a':\n            v=v+10*(16**step)\n            \n        elif s[i]=='b':\n            v+=11*(16**step)\n        elif s[i]=='c':\n            v+=12*(16**step)\n        elif s[i]=='d':\n            v+=13*(16**step)\n        elif s[i]=='e':\n            v+=14*(16**step)\n        elif s[i]=='f':\n            v+=15*(16**step)\n        else:\n            v+=(int(s[i]))*(16**step)\n        step+=1\n    return v\n", "def hex_to_dec(s):\n    x = {c: n for n, c in enumerate('ABCDEF', 10)}\n    y = [x[c] if c in x.keys() else int(c) for c in s.upper()]\n    return sum(n * 16 ** i for n, i in zip(y, range(len(y))[::-1]))", "def hex_to_dec(s):\n    hex_num = '0123456789abcdef'\n    count = 0\n    decimal_num = 0\n    for i in s[::-1]:\n        decimal_num += hex_num.index(i) * (16**count)\n        count += 1\n    return decimal_num", "def hex_to_dec(s):\n    hex = int(s, 16)\n    return int(hex)", "def hex_to_dec(s):\n    index = []\n    for n in range(len(s)):\n      index.append(s[n:n+1])\n    i_len = len(index)\n    index = [10 if x == 'a' else x for x in index]\n    index = [11 if x == 'b' else x for x in index]\n    index = [12 if x == 'c' else x for x in index]\n    index = [13 if x == 'd' else x for x in index]\n    index = [14 if x == 'e' else x for x in index]\n    index = [15 if x == 'f' else x for x in index]\n    o = len(index)\n    sum_dec = 0\n    for i in range(i_len):\n      sum_dec += int(index[i])*16**(o-1)\n      o -= 1\n    return sum_dec\nhex_to_dec(\"a1b2\")", "#import sys\ndef hex_to_dec(s):\n    return (int(s, 16))", "# def hex_to_dec(s):\n#   a=len(s)\n#   b={\n#     'a':10,\n#     'b':11,\n#     'c':12,\n#     'd':13,\n#     'e':14,\n#     'f':15\n#     }\n#   c={str(x):x for x in range(10)}\n#   for x in b:\n#     c[x]=b[x]\n#   d=0\n#   f=s[::-1]\n#   for x in range(len(s)-1,-1,-1):\n#     d += 16**x*c[f[x]]\n#   return d\ndef hex_to_dec(s):\n    return int(s,16)", "def hex_to_dec(s):\n  a=len(s)\n  b={\n    'a':10,\n    'b':11,\n    'c':12,\n    'd':13,\n    'e':14,\n    'f':15\n    }\n  c={str(x):x for x in range(10)}\n  for x in b:\n    c[x]=b[x]\n  d=0\n  f=s[::-1]\n  for x in range(len(s)-1,-1,-1):\n    d += 16**x*c[f[x]]\n  return d", "def hex_to_dec(s):\n    exp = result = 0\n    \n    for i in s[::-1]:\n        result += '0123456789abcdef'.index(i) * 16 ** exp\n        exp += 1\n        \n    return result", "def hex_to_dec(s):\n    D = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n        'e': 14,\n        'f': 15\n    }\n    ans = 0\n    for c in s:\n        ans = 16*ans + D[c]\n    return ans", "def hex_to_dec(s):\n    hexa = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"a\": 10,\n        \"b\": 11,\n        \"c\": 12,\n        \"d\": 13,\n        \"e\": 14,\n        \"f\": 15\n    }\n\n    patahBalik = list(s)\n    patahBalik.reverse()\n    sum = 0\n    power = 0\n    for i in patahBalik:\n        for j,k in hexa.items():\n            if i == j:\n                sum = sum + k*16**power\n                power = power + 1\n    return sum", "def hex_to_dec(s):\n    print(s)\n    print(int(s,16))\n    return int(s,16)", "def hex_to_dec(s):\n    a = range(16)\n    b = '0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F'.split(\",\")\n    d = {j:i for i,j in zip(a,b)}\n    v = sum(d[j.upper()] * (16**i) for i,j in enumerate(s[::-1]) )\n    return v", "def hex_to_dec(s):\n    hex_dict = {\"a\": 10, \"b\": 11, \"c\": 12, \"d\": 13, \"e\": 14, \"f\": 15}\n    hex_list = [i for i in s]\n    pot_list = [i for i in range(0, len(hex_list))][::-1]\n    res = 0\n    for i in hex_list:\n        if i in hex_dict:\n            hex_list = [j.replace(i, str(hex_dict[i])) for j in hex_list]\n    return sum([int(a)*(16**int(b)) for a,b in zip(hex_list, pot_list)])", "def hex_to_dec(s):\n    return int(int(s, base=16))", "def hex_to_dec(s):\n    letter_conversions = {\"a\":10,\"b\":11,\"c\":12,\"d\":13,\"e\":14,\"f\":15}\n    result = 0\n    for index,digit in enumerate(s[::-1]):\n        if digit.isnumeric():\n            result += int(digit)*16**index\n        else:\n            for key,value in letter_conversions.items():\n                if digit == key:\n                    result += value*16**index\n    return result", "def hex_to_dec(s):\n    hex = '0123456789abcdef'\n    deci = 0\n    place = 0\n    for x in reversed(s):\n        if place == 0:\n            deci += hex.index(x)\n        else:\n            deci += hex.index(x) * 16**place\n        place += 1\n    return deci", "def hex_to_dec(n):\n    n=list(n.lower())\n    n=[10 if x=='a' else 11 if x=='b' else 12 if x=='c' else 13 if x=='d' else 14 if x=='e' else 15 if x=='f' else int(x) for x in n]  \n    Tsum=0\n    p=0\n    for p, i in enumerate (reversed(n),p):\n        Tsum=Tsum+i*(16**p)\n    return Tsum", "def hex_to_dec(s):\n    dict = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n        'e': 14,\n        'f': 15\n    }\n    j = 0\n    decimal = 0\n    for i in s:\n        decimal = decimal + dict[s[j]]*16**(len(s)-j-1)\n        j += 1\n    return decimal", "def hex_to_dec(h):\n    return int(h, 16)", "def hex_to_dec(s):\n    hex_int = int(s, 16)\n    return hex_int", "def hex_to_dec(s):\n    su=0\n    l=['a','b','c','d','e','f']\n    n=len(s)\n    n1=n-1\n    for i in range(0,n):\n        if '0'<=s[i]<='9':\n            su=su+int(s[i])*(16**(n1))\n            n1=n1-1\n        else:\n            su=su+(10+l.index(s[i].lower()))*(16**(n1))\n            n1=n1-1\n    return su", "def hex_to_dec(s):\n    number = 0\n    lst = list(s)\n    lst.reverse()\n    for n in range(len(lst)):\n        lst[n] = ord(lst[n]) - 87 if ord(lst[n]) > 96 else lst[n]\n        number += int(lst[n])*16**n\n    return number", "def hex_to_dec(s):\n    s=s.lower()\n    t=0\n    j=len(s)-1\n    A=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]\n    for i in range(len(s)):\n        r=s[i]\n        if type(s[i])==str and 97<=ord(s[i])<=102:\n            r=ord(s[i])-87\n        t+=(int(r)*(16**j))\n        j-=1\n    return(t)", "def hex_to_dec(s):\n    \n    h2s = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n        'e': 14,\n        'f': 15\n    }\n    \n    dec = 0\n    exponent = 0\n    for i in range( len(s), 0, -1 ):\n        digit = h2s[ s[i-1].lower() ]\n        \n        dec = dec + (digit * (16 ** exponent))\n        exponent = exponent + 1\n        \n    return dec\n", "def hex_to_dec(s):\n    h = '0123456789abcdef'\n    y = len(s) - 1\n    x = 0\n    for i in s:\n        print(i)\n        x += (h.index(i))*(16**y)\n        y -= 1\n    return x", "def hex_to_dec(s):\n    hexkey = {\n        '0' : 0,\n        '1' : 1,\n        '2' : 2,\n        '3' : 3,\n        '4' : 4,\n        '5' : 5,\n        '6' : 6,\n        '7' : 7,\n        '8' : 8,\n        '9' : 9,\n        'a' : 10,\n        'b' : 11,\n        'c' : 12,\n        'd' : 13,\n        'e' : 14,\n        'f' : 15,\n    }\n    \n    out = 0\n    for power, char in enumerate(reversed(s.lower())):\n        out += hexkey[char] * (16**power)\n    return out", "def hex_to_dec(s):\n    switch = {\n        '0' : 0,\n        '1' : 1,\n        '2' : 2,\n        '3' : 3,\n        '4' : 4,\n        '5' : 5,\n        '6' : 6,\n        '7' : 7,\n        '8' : 8,\n        '9' : 9,\n        'a' : 10,\n        'b' : 11,\n        'c' : 12,\n        'd' : 13,\n        'e' : 14, \n        'f' : 15, \n    }\n    \n    \n    total = 0\n    for char in s:\n        total = total * 16 + switch.get (char)\n    return total\n", "def hex_to_dec(s):\n    dec = {   '0': 0,\n              '1': 1,\n              '2': 2,\n              '3': 3,\n              '4': 4,\n              '5': 5,\n              '6': 6,\n              '7': 7,\n              '8': 8,\n              '9': 9,\n              'a': 10,\n              'b': 11,\n              'c': 12,\n              'd': 13,\n              'e': 14,\n              'f': 15}\n    return sum([dec[s[i]]*16**(len(s) - 1 - i) for i in range(len(s))])\n    \n", "def hex_to_dec(s):\n    d = int(s, 16)\n    return d", "def hex_to_dec(s):\n    hex = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'a': 10, 'b': 11,\n            'c': 12, 'd': 13, 'e': 14, 'f': 15}\n    \n    result = 0\n    \n    rev = s[::-1] # 10 -> 01 -> 0 * 16^0 + 1 * 16^1 = 16\n\n    for idx in range(len(rev)):\n        result +=  hex[rev[idx]] * 16**idx       \n\n    return result\n", "def hex_to_dec(s):\n    return int(s,16)\n#Completed by Ammar on 5/8/2019 at 02:26AM.\n", "def hex_to_dec(s):\n    \n    exponent = 0\n    value = 0\n    decimal = 0\n    l = len(s)\n    \n    for i in range(l):\n        exp = 16 ** i\n        if s[l-i-1] == 'a' or s[l-i-1] == \"A\":\n            value = exp * 10\n            \n        elif s[l-i-1] == 'b' or s[l-i-1] == \"B\":\n            value = exp * 11\n            \n        elif s[l-i-1] == 'c' or s[l-i-1] == \"C\":\n            value = exp * 12\n            \n        elif s[l-i-1] == 'd' or s[l-i-1] == \"D\":\n            value = exp * 13\n            \n        elif s[l-i-1] == 'e' or s[l-i-1] == \"E\":\n            value = exp * 14\n            \n        elif s[l-i-1] == 'f' or s[l-i-1] == \"F\":\n            value = exp * 15\n            \n        else:\n            value = exp * int(s[l-i-1])\n            \n        decimal += value\n        \n    return decimal\n            \n                    \n        \n            \n            \n", "def hex_to_dec(s):\n    heshion={\"0\":0,\"1\":1,\"2\":2,\"3\":3,\"4\":4,\"5\":5,\"6\":6,\"7\":7,\"8\":8,\"9\":9,\"a\":10,\"b\":11,\"c\":12,\"d\":13,\"e\":14,\"f\":15}\n    \n    tal=0\n    \n    for x in range (0,len(s)):\n        tal+=heshion[s[x]]*16**(len(s)-1-x)\n    \n    return(tal)", "def hex_to_dec(s):\n    return sum(\n        (ord(x)-87 if x.isalpha() else int(x)) * 16**i for i, x in enumerate(s[::-1])\n      )", "def hex_to_dec(s):\n    try:\n        return int(s,16)\n    except ValueError:\n        return int(s,16)", "def hex_to_dec(s):\n    d={'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'a':10,'b':11,'c':12,'d':13,'e':14,'f':15}\n    return sum(map(lambda x,y:d[x]*pow(16,y),s,range(len(s)-1,-1,-1)))", "from functools import reduce\ndef hex_to_dec(s):\n    d={'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'a':10,'b':11,'c':12,'d':13,'e':14,'f':15}\n    return reduce(lambda x,y:x*16+d[y],s,0)", "def hex_to_dec(s):\n    n = 0\n    p = 1\n    for x in s[::-1]:\n        if x ==\"a\":\n            n += 10*p\n        elif x == \"b\":\n            n += 11*p\n        elif x ==\"c\":\n            n += 12*p\n        elif x == \"d\":\n            n += 13*p\n        elif x == \"e\":\n            n += 14*p\n        elif x == \"f\":\n            n += 15*p\n        else:\n            n += int(x)*p\n        p *= 16\n    return n"]