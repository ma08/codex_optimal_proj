["def next_letter(string):\n    return \"\".join(chr(ord(c)+(-25 if c in 'zZ' else 1)) if c.isalpha() else c for c in string)", "def next_letter(s):\n    return s.translate(str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', \n    'bcdefghijklmnopqrstuvwxyzaBCDEFGHIJKLMNOPQRSTUVWXYZA'))", "from string import ascii_lowercase as aLow\n\ntr = aLow[1:]+'a'\nTABLE = str.maketrans(aLow+aLow.upper(), tr+tr.upper())\n\ndef next_letter(s): return s.translate(TABLE)", "table = {o+c: c+(o+1)%26 for c in (97, 65) for o in range(26)}\n\ndef next_letter(stg):\n    return stg.translate(table)\n\n# one-liner\n#next_letter = lambda stg: stg.translate({o+c: c+(o+1)%26 for c in (97, 65) for o in range(26)})\n", "from string import ascii_lowercase as L, ascii_uppercase as U\n\ndef next_letter(s):\n    return s.translate(str.maketrans(L + U, L[1:] + L[0] + U[1:] + U[0]))", "from string import ascii_letters as a, ascii_lowercase as al, ascii_uppercase as au\ndef next_letter(string):\n    return string.translate(str.maketrans(a, al[1:] + al[0] + au[1:] + au[0]))", "from string import ascii_lowercase as low, ascii_uppercase as up\n\n\ndef next_letter(s):\n    return s.translate(str.maketrans(\n        low + up, low[1:] + low[0] + up[1:] + up[0]))\n", "from string import ascii_lowercase as l, ascii_uppercase as u\nnext_letter=lambda s:s.translate(str.maketrans(l+u,l[1:]+l[0]+u[1:]+u[0]))"]