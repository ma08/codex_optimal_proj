["class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if haystack == \"\" and needle == \"\":\n             return 0\n         if needle == \"\":\n             return 0\n         if haystack == \"\" or needle == \"\" or len(haystack.split(needle)) == 1:\n             return -1\n         return len(haystack.split(needle)[0])\n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         # if needle in haystack:\n         #     for i in range(len(haystack)-len(needle)+1):\n         #         if haystack[i:i+len(needle)]==needle:\n         #             return i\n         # else:\n         #     return -1\n         \n         return haystack.find(needle)\n             \n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         for i in range(len(haystack) - len(needle) + 1):\n             if haystack[i:i + len(needle)] == needle:\n                 return i\n             \n         return -1\n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if not needle:\n             return 0\n         \n         for i in range(0, len(haystack)-len(needle)+1):\n             match = True\n             for j in range(len(needle)):\n                 if haystack[i+j] != needle[j]:\n                     match = False\n                     break\n             if match:\n                 return i\n         \n         return -1\n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n        \n         if needle == \"\":\n             return 0           \n         for i in range(len(haystack) - len(needle) + 1):\n             for j in range(len(needle)):\n                 if haystack[i+j] == needle[j]:\n                     if j == len(needle) - 1:\n                         return i             \n                 else:\n                     break\n                         \n         return -1\n                 \n                     \n", "class Solution:\n     def makeNext(self,s):\n         k = -1; i = 0;\n         next = [None for i in range(len(s))]\n         next[0] = -1\n         while(i < (len(s)-1)):\n             while(k>=0 and s[i] != s[k]):\n                 k = next[k]\n             i += 1; k+= 1;\n             if(s[i] == s[k]):\n                 next[i] = next[k]\n             else:\n                 next[i] = k\n         return next\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if(needle == \"\"):\n             return 0\n         Next = self.makeNext(needle)\n         length = len(needle)\n         \n         for i in range(len(haystack)):\n             count = 0\n             while(haystack[i + count] == needle[count]):\n                 count += 1 \n                 if(count + i >= len(haystack)) and (count < length):\n                     return -1\n                     break\n                 if (count >= length):\n                     return i\n                     break\n         return -1\n                 \n         \n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if not needle:\n             return 0\n \n         nexts = [0] * len(needle)\n         nexts[0] = -1;\n         if len(needle) > 1:\n             nexts[1] = 0;\n         left = 0; right = 2;\n         while right < len(needle):\n             if needle[left] == needle[right - 1]:\n                 nexts[right] = left + 1\n                 left += 1\n                 right += 1\n             else:\n                 if nexts[left] > 0:\n                     left = nexts[left]\n                 else:\n                     nexts[right] = 0\n                     left = 0\n                     right += 1\n \n         i = 0; j = 0\n         while i <= len(haystack) - len(needle):\n             if j == len(needle):\n                 return i\n \n             if haystack[i + j] == needle[j]:\n                 j += 1\n             else:\n                 # ababdef   i=0\n                 # ababc     j=4\n                 # x0012\n                 #   ababc   i=2,j=2\n                 if nexts[j] > 0:\n                     i = i + j - nexts[j]\n                     j = nexts[j]\n                 else:\n                     i = i + 1\n                     j = 0\n \n         return -1\n \n", "class Solution:\n     def myNext(self, T):\n         next = [-1]  # a next array with first is -1\n         l = len(T)  # the kid str length\n         i, j = 0, -1  # i is last , j is first\n         while i < l:\n             if j == -1 or T[i] == T[j]:\n                 i += 1\n                 j += 1\n                 next.append(int(j))  # the same str\n             else:\n                 j = next[j]\n         return next\n \n     def strStr(self, haystack, needle):\n         if needle == \"\":\n             return 0\n         arr = Solution().myNext(needle)\n         l1 = len(haystack)\n         l2 = len(needle)\n         i, j = 0, 0\n         while i < l1 and j < l2:\n             if j == -1 or haystack[i] == needle[j]:\n                 i += 1\n                 j += 1\n                 if j == l2:\n                     return i - l2\n             else:\n                 j = arr[j]\n         return -1", "class Solution:\n     def makeNext(self,s):\n         k = -1; i = 0;\n         next = [None for i in range(len(s))]\n         next[0] = -1\n         while(i < (len(s)-1)):\n             while(k>=0 and s[i] != s[k]):\n                 k = next[k]\n             i += 1; k+= 1;\n             if(s[i] == s[k]):\n                 next[i] = next[k]\n             else:\n                 next[i] = k\n         return next\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if(needle == \"\"):\n             return 0\n         Next = self.makeNext(needle)\n         length = len(needle)\n         \n         for i in range(len(haystack)):\n             count = 0\n             while(haystack[i + count] == needle[count]):\n                 count += 1 \n                 if(count + i >= len(haystack)) and (count < length):\n                     return -1\n                     break\n                 if (count >= length):\n                     return i\n                     break\n         return -1\n                 \n         \n", "class Solution(object):\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if len(haystack) == len(needle):\n             if haystack == needle:\n                 return 0\n             else:\n                 return -1\n         \n         for i in range(0,len(haystack)):\n             k=i\n             j=0\n             while j<len(needle)  and k<len(haystack) and haystack[k] == needle[j]:\n                 j+=1\n                 k+=1\n             if j==len(needle):\n                 return i\n         return -1 if needle else 0", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n        \n         if needle == \"\":\n             return 0           \n         for i in range(len(haystack) - len(needle) + 1):\n             for j in range(len(needle)):\n                 if haystack[i+j] == needle[j]:\n                     if j == len(needle) - 1:\n                         return i             \n                 else:\n                     break\n                         \n         return -1\n                 \n                     \n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if len(haystack) < len(needle):\n             return -1\n         if needle == '':\n             return 0\n         \n         for i in range(len(haystack)):\n             if haystack[i] == needle[0]:\n                 res = True\n                 j = 1\n                 try:\n                     while (j < len(needle)):\n                         if haystack[i+j] == needle[j]:\n                             j += 1\n                         else:\n                             res = False\n                             break\n                     if res:\n                         return i\n                 except:\n                     return -1\n         return -1", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         \n         # KMP\n         i, j, m, n = -1, 0, len(haystack), len(needle)\n         # construct jump array\n         jump = [-1]*n\n         while j < n-1: # j is increased by one\n             if i == -1 or needle[i] == needle[j]:\n                 i, j = i+1, j+1\n                 jump[j] = jump[i] if needle[i]==needle[j] else i\n             else:\n                 i = jump[i]\n         \n         # swipe\n         i, j = 0, 0 # both start at 0\n         while i < m and j < n: # CAUTION j < n\n             if j == -1 or haystack[i] == needle[j]:\n                 i, j = i+1, j+1\n             else:\n                 j = jump[j]\n         return i-j if j == n else -1", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         next = self.next(needle)\n         i = 0\n         j = 0\n         while i < len(haystack) and j < len(needle):\n             if j == -1 or haystack[i] == needle[j]:\n                 i += 1\n                 j += 1\n             else:\n                 j = next[j]\n         if j == len(needle):\n             return i - j\n         else:\n             return -1\n         \n         \n     def next(self, p):\n         next = []\n         next.append(-1)\n         i = 0\n         k = -1\n         while i < len(p) - 1:\n             if k == -1 or p[i] == p[k]:\n                 i += 1\n                 k += 1\n                 next.append(k)\n             else:\n                 k = next[k]\n         return next", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         \n         if not needle:\n             return 0\n         \n         if not haystack:\n             return -1\n         \n         if len(haystack) < len(needle):\n             return -1\n         \n         N = len(haystack)\n         for i in range(N):\n             if needle == haystack[i:i+len(needle)]:\n                 return i\n         \n         return -1\n         \n", "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == '':\n             return 0\n         substr_len = len(needle)\n         for index, char in enumerate(haystack):\n             if haystack[index:index+substr_len] == needle:\n                 return index\n         return -1", "class Solution:\n     \n     def prefixTable(self, s):\n         t = [0 for _ in s]\n         j = 0\n         i = 1\n         while i < len(s):\n             if j == 0 and s[i] != s[j]:\n                 t[i] = 0\n                 i += 1\n             elif s[i] == s[j]:\n                 t[i] = j + 1\n                 i += 1\n                 j += 1\n             elif j > 0 and s[j] != s[i]:\n                 j = t[j-1]\n         return t\n \n     def find(self, text, pattern):\n         ans = []\n         t = self.prefixTable(pattern)\n         i = j = 0\n         while i < len(text):\n             if text[i] == pattern[j]:\n                 i += 1\n                 j += 1\n \n             if j == len(pattern):\n                 ans.append(i - len(pattern))\n                 j = t[j-1]\n \n             elif i < len(text) and text[i] != pattern[j]:\n                 if j > 0:\n                     j = t[j-1]\n                 else:\n                     i += 1\n         return ans\n     \n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if len(needle) == 0:\n             return 0\n         ans = self.find(haystack, needle)\n         return ans[0] if ans else -1\n         # for i in range(len(haystack) - len(needle) + 1):\n         #     if haystack[i: i + len(needle)] == needle:\n         #         return i\n         # return -1\n         \n         \n         # for i in range(len(haystack) - len(needle) + 1):\n         #     if haystack[i : i + len(needle)] == needle:\n         #         return i\n         # return -1\n"]