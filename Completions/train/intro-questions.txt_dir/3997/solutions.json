["from itertools import permutations\n\ndef solve(s,k):\n    return sum(not v%k for v in map(int, map(''.join, permutations(s.split(),2))))", "from itertools import permutations\n\ndef solve(stg, k):\n    return sum(1 for m, n in permutations(stg.split(), 2) if int(f\"{m}{n}\") % k == 0)", "from itertools import permutations\n\ndef solve(s,k):\n    return sum(not int(a+b)%k for a,b in permutations(s.split(),2))", "from itertools import permutations as p\ndef solve(s,k):    \n    return len([j for j in [int(''.join(i)) for i in p(s.split(), 2)] if j%k==0])\n", "solve=lambda s,k:sum(int(x+y)%k==0for x,y in __import__('itertools').permutations(s.split(),2))", "from itertools import permutations\ndef solve(s,k):\n    return sum(int(a + b) % k == 0 for a, b in permutations(s.split(), 2))\n", "from itertools import permutations, filterfalse\n\ndef solve(s, k):\n    return len(list(filterfalse(lambda x: int(''.join(x))%k, permutations(s.split(), 2))))", "import itertools as it\n\ndef solve(s,k):\n    return sum(n % k == 0 for n in map(int, map(''.join, it.permutations(s.split(), 2))))", "def solve(s,k):\n    s = s.split()\n    return sum(1 for i in range(len(s)) for j in range(len(s)) if i!=j and int(s[i]+s[j])%k==0)", "def solve(s,k):\n    count = 0\n    l = s.split()\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            count += int(int(l[i]+l[j])%k == 0) + int(int(l[j]+l[i])%k == 0)\n    return count"]