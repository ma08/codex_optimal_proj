["from collections import Counter\n\ndef solve(s):\n    return any(len(set(Counter(s.replace(c, '', 1)).values())) == 1 for c in s)", "from collections import Counter\n\ndef solve(s):\n    c = Counter(s).values()\n    cVal, mi, ma = Counter(c), min(c), max(c)\n    return len(cVal) <= 2 and (len(cVal) == 1 and (1 in cVal or 1 in cVal.values()) \n                               or mi == cVal[mi] == 1\n                               or mi == ma-1 and cVal[ma] == 1)", "from collections import Counter\n\ndef solve(s):\n    return any(len(set(Counter(s[:i] + s[i+1:]).values())) == 1 for i in range(len(s)))", "def solve(s):\n    a = [s.replace(s[y], '', 1) for y,x in enumerate(s)]\n    return any(len(sorted(set([x.count(c) for c in x]))) == 1 for x in a)", "from collections import Counter\n\n\ndef solve(stg):\n    c = tuple(Counter(stg).values())\n    mn, mx = min(c), max(c)\n    l, cmx = len(c), c.count(mx)\n    return (1 in (l, mx)) or (mx - mn == cmx == 1) or (l - cmx == mn == 1)\n", "def solve(s):\n    s = list(s)\n    for i in range(len(s)):\n        temp = s.copy()\n        temp.pop(i)\n        if all(temp.count(k) == temp.count(temp[0]) for k in temp) : return True\n    return False", "from collections import Counter\n\ndef solve(s):\n    c = Counter(s)\n    l, cc, mi, ma, su = len(c), Counter(c.values()), min(c.values()), max(c.values()), sum(c.values())\n    return (\n        len(c) == 1\n        or su - ma * l == 1\n        or mi == 1 == su - ma * l + ma\n        or cc[ma] == 1 == ma - mi\n    )", "from collections import Counter\n\ndef solve(s):\n    frequencies = [x[1] for x in Counter(s).most_common()]\n    return (\n        len(frequencies) == 1 or\n        len(set(frequencies[:-1])) == 1 and frequencies[-1] == 1 or\n        frequencies[0] == frequencies[1] + 1 and len(set(frequencies[1:])) == 1)", "from collections import Counter\n\ndef solve(s):\n    c = Counter(s)\n    for key in c.keys():\n        temp = Counter(key)\n        check = c - temp\n        if len(set(check.values())) < 2:\n            return True\n    return False"]