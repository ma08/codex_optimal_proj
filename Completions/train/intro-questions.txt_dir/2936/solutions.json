["# First, I coded a straightforward solution. It would work, but because it had to loop over all\n# students, and for every student over each locker, it had to do n^2 iterations. With numbers under\n# 10k this proved no problem, however the test cases apparently tested bigger numbers, since my\n# program kept getting timed out. I decided to record the number of open lockers for each n in range\n# 1-500 and discovered a nice pattern: 0 -1-1-1 (3 1's) -2-2-2-2-2 (5 2's) -3-3-3-3-3-3-3 (7 4's)\n# - et cetera. In other words, the number of consecutive numbers is (2n + 1). This was still not easy\n# to do so I looked up the sequence in OEIS. There, I discovered that the sequence was the integer\n# part of the square root of n. Now if that isn't easy to program... more of a maths problem, really.\n\ndef num_of_open_lockers(n):\n    return int(n**0.5)", "from math import floor, sqrt\ndef num_of_open_lockers(n):\n  return floor(sqrt(n))", "def num_of_open_lockers(n):\n    return int(n ** 0.5)", "\n\"\"\"\ndef num_of_open_lockers(n):\n    doors = [0 for i in range(n)]\n    for d in range(n):\n        for i in range(d, n, d + 1):\n            doors[i] = 0 if doors[i] else 1\n    return sum(doors)\n\"\"\"\n\n\n#  ...  a-ha, OK, gotcha:\n\n\nnum_of_open_lockers = lambda n: int(n ** .5)\n\n", "def num_of_open_lockers(n):\n    return int(n ** 0.5)\n    \n#def num_of_open_lockers_not_opt(n):\n#    nums = []\n#    for i in xrange(0, n):\n#        nums.append(False)\n#\n#    for i in xrange(1, n + 1):\n#        for j in xrange(1, n + 1):\n#            if j % i == 0:\n#                nums[j - 1] = not nums[j - 1]\n#\n#    return nums.count(True)\n", "from math import sqrt, floor\n\ndef num_of_open_lockers(n):\n    return floor(sqrt(n))", "def num_of_open_lockers(n):\n    print(\"lockers:\",n)\n\n    i = 0\n    count = 1\n    open = 0\n    even = True\n    while i < n:\n        if even:\n            i += 1\n            open += 1\n            even = False\n        else:\n            even = True\n            i += count*2\n            count += 1\n        \n    #print \"open:\", open\n    return open\n", "from math import floor\ndef num_of_open_lockers(n): return floor(n ** .5)", "import math\n\ndef num_of_open_lockers(n):\n    return math.floor(math.sqrt(n))", "num_of_open_lockers=lambda n: int(n**.5)"]