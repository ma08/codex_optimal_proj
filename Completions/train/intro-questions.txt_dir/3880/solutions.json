["def is_smooth(n):\n    for x in [2,3,5,7]:\n        while n%x==0:n//=x\n        if n==1:return (\"power of 2\",'3-smooth','Hamming number','humble number')[(2<x)+(3<x)+(5<x)]  \n    return \"non-smooth\"", "from collections import defaultdict\n\n\nnames = defaultdict(lambda: 'non-smooth', {\n    2: 'power of 2',\n    3: '3-smooth',\n    5: 'Hamming number',\n    7: 'humble number',\n})\n\n\ndef is_smooth(n):\n    divisors = set()\n    for d in [2, 3, 5, 7]:\n        while n % d == 0:\n            divisors.add(d)\n            n //= d\n    if n != 1:\n        divisors.add(9)\n    return names[max(divisors, default=9)]", "def is_smooth(n):\n    for v in [2,3,5,7]:\n        while n%v==0:n/=v\n        if n==1:return['','','power of 2','3-smooth','','Hamming number','','humble number'][v]\n    return 'non-smooth'", "def find_factors(n):\n    factors = []\n    for i in (7, 5, 3, 2):\n         while n%i==0:\n             n= n/i\n             factors.append(i)  \n    if n>0: return factors + [n]\n    return factors\n    \ndef is_smooth(n):\n    f={2:\"power of 2\", 3: \"3-smooth\", 5: \"Hamming number\", 7: \"humble number\"} \n    return f.get(max(find_factors(n)), \"non-smooth\")", "is_smooth=lambda n,p=0: [\"power of 2\", \"3-smooth\", \"Hamming number\", \"humble number\", \"non-smooth\"][p] if n<2 or p>3 else is_smooth(n,p+1) if n%[2,3,5,7,11][p] else is_smooth(n//[2,3,5,7,11][p],p)", "def is_smooth(n):\n    primes=set()\n    n1=0\n    while n1!=n:\n        n1=n\n        for p in {2,3,5,7}:\n            if n%p==0:\n                primes.add(p)\n                n//=p\n    if n!=1:return \"non-smooth\"\n    return {2:\"power of 2\",3:\"3-smooth\",5:\"Hamming number\",7:\"humble number\"}[max(primes)]", "def is_smooth(n):\n    \n    i = 2\n    \n    a = []\n    \n    while i * i <= n:\n        \n        if n % i:\n            \n            i += 1\n            \n        else:\n            \n            n //= i\n            \n            a.append(i)\n            \n    if n > 1:\n        \n        a.append(n)\n        \n    m = max(a)\n    \n    if m==2:\n        \n        return \"power of 2\"\n    \n    if m==3:\n        \n        return \"3-smooth\"\n    \n    if m == 5:\n        \n        return \"Hamming number\"\n    \n    if m == 7:\n        \n        return \"humble number\"\n    \n    else:\n        \n        return \"non-smooth\"\n    \n", "from numpy import prod\ndef is_smooth(n):\n    number = n\n    divisors = []\n    while 1:\n        if not n%2:\n            divisors.append(2)\n            n/=2\n        else: break\n        \n    while 1:\n        if not n%3:\n            divisors.append(3)\n            n/=3\n        else: break\n\n    while 1:\n        if not n%5:\n            divisors.append(5)\n            n/=5\n        else: break\n        \n    while 1:\n        if not n%7:\n            divisors.append(7)\n            n/=7\n        else: break\n    \n    if prod(divisors)==number and max(divisors) == 2: return \"power of 2\"\n    elif prod(divisors)==number and max(divisors) == 3: return \"3-smooth\"\n    elif prod(divisors)==number and max(divisors) == 5: return \"Hamming number\"\n    elif prod(divisors)==number and max(divisors) == 7: return \"humble number\"\n    else: return \"non-smooth\"", "from math import sqrt\n\ndef is_smooth(n):\n    smooth = {2: \"power of 2\",\n              3: \"3-smooth\",\n              5: \"Hamming number\",\n              7: \"humble number\"}\n    \n    s = set()\n    i = 2\n    while i <= sqrt(n):\n        while n % i == 0:\n            s.add(i)\n            n //= i\n        i += 1\n    s.add(n)\n    \n    return smooth.get(max(s), \"non-smooth\")", "from functools import reduce\nfrom operator import mul\n\ndef is_smooth(n):\n    num = n\n    factors = [1]\n    prime_fact = iter([i for i in (2,3,5,7) if not n%i])\n    fact = next(prime_fact, n)\n    while reduce(mul, factors) != n and fact != 0:\n        if not num % fact:\n            factors += [fact]\n            num /= fact\n        else:\n            fact = next(prime_fact, 0)\n    return \"non-smooth\" if fact==0 else \"power of 2\" if factors[-1] == 2 else \"3-smooth\" if factors[-1] == 3 else\\\n           \"Hamming number\" if factors[-1] == 5 else \"humble number\" if factors[-1] == 7 else \"non-smooth\"\n"]