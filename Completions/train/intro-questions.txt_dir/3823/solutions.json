["def deep_count(a):\n    result = 0\n    for i in range(len(a)):\n        if type(a[i]) is list:\n            result += deep_count(a[i])\n        result += 1\n    return result\n", "def deep_count(a):\n    return sum(1 + (deep_count(x) if isinstance(x, list) else 0) for x in a)", "def deep_count(a):\n    return len(a) + sum(deep_count(e) for e in a if isinstance(e, list))", "def deep_count(a):\n    total = 0\n    for item in a:\n        total += 1\n        if isinstance(item, list):\n            total += deep_count(item)\n    return total", "def deep_count(a):\n    count = 0\n    for i in a:\n       count +=1 \n       if type(i) is list:\n           count += deep_count(i)\n    return count\n    \n", "deep_count=lambda a:sum(1 + (deep_count(x) if isinstance(x, list) else 0) for x in a)", "def deep_count(a):\n    return len(a) + sum(deep_count(b) for b in a if isinstance(b, list))", "def deep_count(a):\n    b = []\n    while  a:\n        for i in a:\n            if type(i) == list:\n                a.extend(i)\n                a.remove(i)\n                a.append('1')\n            else:\n                b.append(i)\n                a.remove(i)\n    return len(b)", "deep_count=d=lambda a:sum(type(e)is not list or d(e)+1for e in a)", "def deep_count(a):\n    if a == []:\n        return 0\n    if isinstance(a[0], list):\n        return 1 + deep_count(a[0]) + deep_count(a[1:])\n    return 1 + deep_count(a[1:])\n"]