["import math\n\ndef f(z, eps):\n    if (abs(z) >= 1.0): return -1\n    return int(math.log(eps) / math.log(abs(z)))\n", "from math import log\n\ndef f(z, eps):\n\n    if z==0 or z==1 or (abs(z)**2<min([1,eps])): return 1\n    elif abs(z)>=1: return -1\n    else: return int(log(eps)/log(abs(z)))", "def f(z, eps, n=1):\n    if abs(z) >= 1: return -1\n    while abs(z ** n) >= eps: n += 1\n    return n", "from math import log\n\ndef f(z, eps):\n    return int(log(eps) / log(abs(z))) if abs(z) < 1 else -1", "import math\n\ndef f(z, eps):\n    return max(-1, math.log(eps)/math.log(math.hypot(z.real, z.imag)))", "f=lambda z,e:-(abs(z)>=1)or __import__('math').log(e,abs(z))//1", "from math import *\n\ndef f(z, eps):\n    x,y = z.real,z.imag\n    return max(-1,log(eps)/log(hypot(x,y)))", "def f(z, eps):\n    import math\n    if z ==1:\n        return 1\n    elif abs(z)>=1:\n        return -1\n    else:\n        n=1\n        while abs(z)**(n) > eps:\n            n+=1\n        return n\n        \n", "import math\ndef f(z, eps):\n    tmp = math.log(eps, abs(z))\n    return math.trunc(tmp) if tmp>0 else -1", "def f(z, eps):\n    if abs(z) >= 1:\n        return -1\n    \n    n = 1\n    while abs(z**n) > eps:\n        n += 1\n    \n    return n"]