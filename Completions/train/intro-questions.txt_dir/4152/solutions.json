["#Try to make your own gcd method without importing stuff\ndef mygcd(x,y):\n    #GOOD LUCK\n    while y:\n        x,y=y,x%y\n    return x", "def mygcd(x,y):\n  return x if y == 0 else mygcd(y, x % y)\n", "def mygcd(x,y):\n    if x%y == 0:\n        return y\n    else:\n        return mygcd(y,x%y)\n\n# reference: http://en.wikipedia.org/wiki/Euclidean_algorithm\n# Please note that it does not matter if y is larger than x, because x%y will have value x\n# which is passed to variable y in the next iteration. So the number of iterations is only\n# increased by one, but the solution will still be correct.\n", "def mygcd(x,y):\n    return x if not y else mygcd(y, x%y)", "def mygcd(x, y):\n    while y>0:\n        x, y = y, x%y\n    return(x)", "def mygcd(x,y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    else:\n        return mygcd(y, x%y)", "def mygcd(x,y):\n    \"\"\"Euclidean algorithm.\"\"\"\n    reminder = x%y\n    if reminder == 0:\n        return y\n    else:\n        return mygcd(y,reminder)", "def mygcd(a,b):\n    while b > 0:\n        a, b = b, a % b\n    return a", "#Try to make your own gcd method without importing stuff\ndef mygcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return mygcd(b, a % b)"]