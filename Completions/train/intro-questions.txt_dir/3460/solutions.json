["from operator import mul\nfrom functools import reduce\nfrom collections import Counter\nfrom math import factorial as fact\n\ndef uniq_count(s):\n    return fact(len(s)) // reduce(mul, map(fact, Counter(s.lower()).values()), 1)", "from collections import Counter\nfrom functools import reduce\nfrom math import factorial\n\n\ndef uniq_count(s):\n    f = (factorial(c) for c in Counter(s.upper()).values())\n    return factorial(len(s)) // reduce(int.__mul__, f, 1)", "from functools import reduce, lru_cache\nfrom collections import Counter\nfrom math import factorial\nfrom operator import mul\n\nfact = lru_cache(maxsize=None)(factorial)\n\ndef uniq_count(s):\n    return fact(len(s)) // reduce(mul, map(fact, Counter(s.upper()).values()), 1)", "from collections import Counter\nfrom functools import reduce\nfrom math import factorial\n\n\ndef uniq_count(s):\n    return factorial(len(s)) // reduce(lambda x,y: factorial(y) * x, list(Counter(s.lower()).values()), 1)\n", "from math import factorial\nfrom collections import Counter\nfrom functools import reduce\n\ndef uniq_count(s):\n    return factorial(len(s)) // reduce(lambda x, y: x * factorial(y) , Counter(s.lower()).values(), 1)", "from collections import Counter\nfrom functools import reduce\nfrom math import factorial\nfrom operator import mul\n\ndef uniq_count(string):\n    return factorial(len(string)) // reduce(mul, map(factorial, Counter(string.lower()).values()), 1)", "from math import factorial\nfrom functools import reduce\nfrom operator import mul\nuniq_count=lambda a:factorial(len(a))//reduce(mul,[factorial(a.lower().count(i))for i in set(a.lower())],1)", "from math import factorial\n\ndef uniq_count(s):\n    s = s.lower()\n    n = len(s)\n    d = 1\n    for c in set(s):\n        d *= factorial(s.count(c))\n    return factorial(n)//d\n"]