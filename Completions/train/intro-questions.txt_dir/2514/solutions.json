["class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in arr1:\n            flag=0\n            for j in arr2:\n                if abs(i-j)<=d:\n                    flag=1\n                    break\n            if flag == 0:\n                count+=1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        dist_matrix = [[abs(x-y) for y in arr2] for x in arr1]\n         \n        return len([1 for dist_lst in dist_matrix if min(dist_lst)>d])\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        return sum([sum([abs(i-j)>d for i in arr2])==len(arr2) for j in arr1])", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        bound = [(n+d,n-d) for n in arr2]\n        out = 0\n        for n in arr1:\n            if any([ Up >= n >= Low for Up, Low in bound]):\n                out += 1\n        return len(arr1) - out\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        bound = [(n+d,n-d) for n in arr2]\n        out = 0\n        for n in arr1:\n            if all([ n > Up or n < Low for Up, Low in bound]):\n                out += 1\n        return out\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        return sum([sum([abs(a - b) > d for b in arr2]) == len(arr2) for a in arr1])", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        c = 0\n        c1 = 0\n        for a in arr1:\n            for r in arr2:\n                if abs(a - r) > d:\n                    c1 += 1\n            if c1 == len(arr2):\n                c += 1\n            c1 = 0\n        return c", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt = 0\n        fcnt = 0\n        lnb = len(arr2)\n        for a in arr1:\n            cnt = 0\n            for b in arr2:\n                if abs(a-b) > d:\n                    cnt = cnt + 1\n            if cnt == lnb:\n                fcnt = fcnt + 1\n        return fcnt", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        total = 0\n        for n in arr1:\n            if all(abs(n - _n) > d for _n in arr2):\n                total += 1\n        return total", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        n, m = len(arr1), len(arr2)\n        ans = 0\n        for i in range(n):\n            flag = 0\n            for j in range(m):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    flag = 1\n            if not flag:\n                ans+=1\n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        qual = []\n        \n        for k in set(arr1):\n            if False not in [True if abs(k-k2)>d else False for k2 in set(arr2)]:\n                qual.append(k)\n        \n        k=0\n        \n        for q in qual:\n            k+=arr1.count(q)\n        \n        return k\n        \n        \n        \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        \n        c = 0\n        l2 = len(arr2)\n        for i in arr1:\n            tmp = 0\n            for j in arr2:\n                \n                if abs(i - j) > d:\n                    tmp+=1\n                    \n\n                    \n            if tmp == l2:\n                c += 1\n                    \n                    \n        return c\n    \n    \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for i in range(len(arr1)):\n            is_dist = True\n            for j in range(len(arr2)):\n                if abs(arr1[i]-arr2[j]) <= d:\n                    is_dist = False\n            \n            if is_dist == True:\n                count += 1\n                \n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for i in range(len(arr1)):\n            flag = 0\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j])<=d:\n                    flag = 1\n            if flag ==1:\n                count+=1\n        return(len(arr1) - count)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        m = len(arr1)\n        n = len(arr2)\n        \n        distance = 0\n        for i in range(m):\n            is_valid = True\n            for j in range(n):\n                if abs(arr1[i]-arr2[j])<= d:\n                    is_valid = False\n            if is_valid:\n                distance += 1\n        return distance", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        n = len(arr1)\n        m = len(arr2)\n        count = 0\n        for i in range(n):\n            bad = False\n            for j in range(m):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    bad = True\n            if not bad:\n                count+=1\n            \n        return count\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n\n        arr = []\n        for i in range(len(arr1)):\n            count = 0\n            for j in range(len(arr2)):\n                if(abs(arr1[i]-arr2[j])<=d):\n                    count = count+1\n            if(count==0):\n                arr.append(arr1[i])\n        return len(arr)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        c = 0\n        for i in range(len(arr1)):\n            f = 0\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j])<=d:\n                    f = 1\n            if f==1:\n                c+=1\n        return(len(arr1) - c)\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        op = 0\n        for i in range(len(arr1)):\n            ref = [abs(arr1[i] - a2) <= d for a2 in arr2]\n            if sum(ref) == 0:\n                op += 1\n        return op\n    # def findTheDistanceValue(self, A, B, d):\n    #     return sum(all(abs(a - b) > d for b in B) for a in A)\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        dists = []\n        for x in arr1:\n            dists.append([abs(x-y) > d for y in arr2])\n        \n        return sum([all(x) for x in dists])", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count =0\n        for i in arr1 :\n            new_list= list(map(lambda m : abs(m -i), arr2))\n            if all(x>d for x in new_list):\n                count += 1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count =0\n        for i in arr1 :\n            new_list= list([abs(m -i) for m in arr2])\n            if all(x>d for x in new_list):\n                count += 1\n        return count\n            \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in range(len(arr1)):\n            for j in range (len(arr2)):\n                a= abs((arr1[i])-(arr2[j]))\n                if  (a<=d):\n                    break\n            else:\n                count=count+1\n        return (count)        \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = len(arr1)\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    count -= 1\n                    break\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if abs(arr1[i]-arr2[j])<=d:\n                    break\n            else:\n                count=count+1\n                    \n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        c = 0\n        for i in range(len(arr1)):\n            temp = 0\n            for j in range(len(arr2)):\n                if(abs(arr1[i]-arr2[j])<=d):\n                    temp = 1\n                    break\n            if(temp == 0):\n                c+=1\n        return c\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:     \n        el_num = 0\n        \n        for i in range(len(arr1)):\n            el_num += 1\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    el_num -= 1\n                    break\n        \n        return el_num", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        forbid_set = set()\n        for a2 in arr2:\n            forbid_set |= set(range(a2-d, a2+d+1))\n            \n        return sum(1 for a1 in arr1 if a1 not in forbid_set)", "from collections import Counter\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr1, arr2 = Counter(arr1), set(arr2)\n        \n        # print(arr1)\n        # print(arr2)\n        \n        res = 0\n        for num in arr1:\n            target = range(num - d, num + d + 1)\n            if not arr2.intersection(target):\n                res += arr1[num]\n        \n        return res", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        val = 0\n        dist = 0\n        for i in range(0,len(arr1)):\n            for j in range(0,len(arr2)):\n\n                if abs(arr1[i]-arr2[j]) > d:\n                    val += 1\n                else:\n                    break\n            if val == len(arr2):\n                dist += 1\n            val = 0\n        return dist", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        count = 0\n        \n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                temp = arr1[i] - arr2[j]\n                if temp < 0 :\n                    temp = -temp\n                    \n                if temp <= d :\n                    break\n                    \n                if j == len(arr2) - 1:\n                    count += 1\n        return count\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        distanceValue = 0\n        \n        for i in range(len(arr1)):\n            val = arr1[i]\n            shouldCount = True\n            for j in range(len(arr2)):\n                if abs(val - arr2[j]) <= d:\n                    shouldCount = False\n                    break\n            if shouldCount == True:\n                distanceValue+=1\n        return distanceValue", "class Solution:\n    def findTheDistanceValue(self, arr1, arr2, d):\n        d = abs(d);\n        res = 0\n        for i in range(len(arr1)):\n            count = 0\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    break\n                else:\n                    count += 1\n                if count == len(arr2):\n                    res += 1\n        return res\n    \nsol = Solution();\nx = sol.findTheDistanceValue([4,5,8],[10,9,1,8],2);\nprint(x);\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        c=len(arr1)\n        for i in arr1:\n            for j in arr2:\n                if abs(i-j)<=d:\n                    c-=1\n                    break\n        return c", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = 0\n        for x in arr1:\n            for y in arr2:\n                if abs(x-y) <= d:\n                    break\n            else:\n                ans += 1\n                continue\n        return ans", "class Solution:\n    def findTheDistanceValue(self, a1: List[int], a2: List[int], d: int) -> int:\n        x = set(a1)\n        x -= {a + i for a in a2 for i in range(-d, d+1)}\n        return sum(n in x for n in a1)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        dist_matrix = [all(abs(x-y)>d for y in arr2) for x in arr1]\n        \n        return sum(dist_matrix)\n         \n        # return len([1 for dist_lst in dist_matrix if min(dist_lst)>d])\n", "class Solution:\n    def findTheDistanceValue(self, arr1, arr2, d):\n        arr1.sort()\n        arr2.sort()\n        i = 0\n        j = 0\n        dist = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] >= arr2[j]:\n                if arr1[i] - arr2[j] > d:\n                    j += 1\n                else:\n                    i += 1\n            else:\n                if arr2[j] - arr1[i] > d:\n                    i += 1\n                    dist += 1\n                else:\n                    i += 1\n        dist += len(arr1) - i\n        return dist", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = 0\n        for i in arr1:\n            for j in arr2:\n                if abs(i-j) <= d:\n                    break\n            else:\n                ans += 1\n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in arr1:\n            for j in arr2:\n                if abs(i-j)<=d:\n                    break\n            else:\n                count+=1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        nums = set()\n        for number in arr2:\n            for n in range(number-d, number+d+1):\n                nums.add(n)\n            \n        cnt = 0\n        for number in arr1:\n            if number not in nums:\n                cnt += 1\n        \n        return cnt", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        '''count=0\n        for x,y in zip(arr1[:],arr2[:]):\n            print(x,y)\n            if abs(x-y)<d:\n                count=count+1\n        return count'''\n        cnt = 0\n        \n        for i in arr1:\n            for j in arr2:\n                if abs(i-j) <= d:\n                    break\n            else:\n                cnt += 1\n        return cnt\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr = []\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <=d:\n                    arr.append(arr1[i])\n                    break\n        print(arr)\n                    \n        return len(arr1) - len(arr)\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        distance_value=[]\n        for i in arr1:\n            valid=True\n            for j in arr2:\n                if abs(i-j)<=d:\n                    valid=False\n                    break\n            if valid:\n                distance_value.append(i)\n        return len(distance_value)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                flag=1\n                if abs(arr1[i]-arr2[j])<=d:\n                    break\n                else:\n                    flag=0\n            if flag==0:\n                count=count+1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        print([x for x in arr1 if all (abs(x-y) > d for y in arr2)])\n        return len([x for x in arr1 if all (abs(x-y) > d  for y in arr2)])", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt = 0\n        for i in range(len(arr1)):\n            cnt += 1\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    cnt -= 1\n                    break\n        return cnt", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr1 = sorted(arr1)\n        arr2 = sorted(arr2)\n        \n        i1 = 0\n        i2 = 0\n        ans = 0\n        while i1 < len(arr1):\n            while i2 < len(arr2) and arr2[i2] < arr1[i1]:\n                i2 += 1\n            \n            if i2 == 0:\n                ans = ans + 1 if abs(arr2[i2] - arr1[i1]) > d else ans\n            elif i2 == len(arr2):\n                ans = ans + 1 if abs(arr2[i2 - 1] - arr1[i1]) > d else ans\n            else:\n                ans = ans + 1 if min(abs(arr2[i2 - 1] - arr1[i1]), abs(arr2[i2] - arr1[i1])) > d else ans\n            \n            i1 += 1\n        \n        return ans\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        # c=0\n        # for a in arr1:\n        #     t = 1\n        #     for b in arr2:\n        #         if abs(a-b)<=d:\n        #             t*=0\n        #         else:\n        #             t*=1\n        #     if t==1:\n        #         c +=1\n        # return c\n        return sum(all(abs(a - b) > d for b in arr2) for a in arr1)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = len(arr1)\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                \n                if(abs(arr1[i] - arr2[j])) <= d:\n                    ans -= 1\n                    break\n        \n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        return sum(all(abs(a - b) > d for b in arr2) for a in arr1)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        cnt=0\n        ans=0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if abs(arr1[i]-arr2[j])>d:\n                    cnt+=1\n                else:\n                    cnt=0\n                    break\n                if j==len(arr2)-1 and cnt==len(arr2):\n                    ans+=1\n                    cnt=0\n                \n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr1.sort()\n        arr2.sort()\n        ans = 0\n        for i in arr1:\n            is_valid = True\n            for j in arr2:\n                if abs(i-j)<=d:\n                    is_valid = False\n                    break\n            if is_valid:\n                ans += 1\n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        res = len(arr1)\n        for i in arr1:\n            for j in arr2:\n                if abs(i - j) <= d:\n                    res -= 1\n                    break\n        return res\n        \n#         res = 0\n#         cnt = 0\n#         l = len(arr2)\n#         for i in arr1:\n#             for j in arr2:\n#                 if abs(i - j) > d:\n#                     cnt += 1\n#             if cnt == l:\n#                 res += 1\n#                 cnt = 0\n#         return res\n        \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        ans = 0\n        for i in arr1:\n            is_valid = True\n            for j in arr2:\n                if abs(i-j)<=d:\n                    is_valid = False\n                    break\n            if is_valid:\n                ans += 1\n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        count = 0\n        arr2.sort()\n        \n        \n        for i in arr1:\n            for j in arr2:\n                if abs(i-j) <= d:\n                    break\n            else:\n                count += 1\n                \n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        Distance = 0\n        for x in arr1:\n            if all(abs(x-y) > d for y in arr2):\n                Distance += 1\n        return Distance", "def bs(a, t, d):\n    l, r = 0, len(a)\n    while l < r:\n        mid = l + (r - l) // 2\n        if abs(a[mid] - t) <= d:\n            return 0\n        elif a[mid] > t:\n            r = mid\n        else:\n            l = mid + 1\n    return 1\n\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        total = 0\n        arr2.sort()\n        for n in arr1:\n            total += bs(arr2, n, d)\n        return total", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        total = 0\n        \n        arr1.sort()\n        arr2.sort()\n        \n        for i in arr1:\n            for j in arr2:\n                if abs(i-j) <= d:\n                    total -=1\n                    break\n            total += 1\n        \n        return total", "from collections import Counter\n\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        res = 0\n        cnt = Counter(arr2)\n        for n in arr1:\n            td = d\n            vals_to_find = []\n            while td >= -d:\n                vals_to_find.append(n - td)\n                td -= 1\n            add = True\n            for j in vals_to_find:\n                if cnt[j] > 0:\n                    add = False\n                    break\n            if add:\n                res += 1\n        return res", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        l = len(arr2)\n        arr2.sort()\n        for i in arr1:\n            temp_count = 0\n            for j in arr2:\n                if(abs(i-j) <= d):\n                    break\n                else:\n                    temp_count += 1\n            if(temp_count == l):\n                count += 1\n            temp_count = 0\n        return count ", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = 0\n        \n        arr2.sort()\n        \n        for i in range(len(arr1)):\n            \n            flag = True\n            \n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    flag = False\n                    break\n                    \n            if flag:\n                ans += 1\n                \n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr1.sort()\n        arr2.sort()\n        m=len(arr1)\n        n=len(arr2)\n        cnt=0\n        for i in range(m):\n            flag=True\n            for j in range(n):\n                dis=abs(arr1[i]-arr2[j])\n                if(dis<=d):\n                    flag=False\n                    break\n            if(flag):\n                cnt+=1\n                \n        return cnt\n\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        dpcache = {}\n        distance = 0\n        \n        for el1 in arr1:\n            # check cache for this number\n            if dpcache.get(el1) is True:\n                distance += 1\n                continue\n            elif dpcache.get(el1) is False:\n                continue\n            else:\n                # otherwise go and calculate solution for cur number\n                pass\n            \n            for el2_idx, el2 in enumerate(arr2): \n                # if condition fails, save failure in cache\n                if abs(el1 - el2) <= d:\n                    dpcache[el1] = False\n                    break\n                    \n                # if condition wins, save it in cache too\n                if el2_idx == len(arr2) - 1:\n                    dpcache[el1] = True\n                    distance += 1\n                    \n        return distance", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        arr2.sort()\n        count = len(arr1)\n        \n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j])<= d:\n                    count-= 1\n                    break\n                \n        return count\n                    \n            \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr1.sort()\n        arr2.sort()        \n        \n        el_num = 0\n        \n        for i in range(len(arr1)):\n            el_num += 1\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    el_num -= 1\n                    break\n        \n        return el_num", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        res = 0\n        for i in arr1:\n            found = True\n            for j in arr2:\n                \n                if j > i + d:\n                    break\n                elif abs(i - j) <= d:\n                    found = False\n                    break\n            res += found        \n        return res    \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        def min_d(num, arr):            \n            # use binary search to find the first arr element >= than num \n            left = 0\n            right = len(arr2) - 1            \n            while left <= right:\n                mid = (left + right) // 2                \n                if arr[mid] < num:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n           \n            if left == len(arr):  # all elements less than num\n                return num - arr[-1]\n            elif left == 0: # all elements greater than num\n                return arr[0] - num            \n            return min(arr[left] - num, num - arr[left-1])\n                \n        arr2.sort()         \n        distance = 0        \n        for num in arr1:\n            if min_d(num, arr2) > d:\n                distance += 1\n                \n        return  distance", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        tot = 0\n        for i in arr1:\n            found = False\n            for j in arr2:\n                diff = i - j\n                if abs(diff) <= d:\n                    found = True\n                    break\n                if diff <= -d:\n                    break\n            if not found:\n                tot += 1\n        return tot", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        arr2.sort()\n        ans = 0\n        \n        for base in arr1:\n            count = 0\n            idx = 0\n            while idx < len(arr2) and base > arr2[idx]: idx += 1  # util arr2[idx] >= base\n            if idx == 0:\n                ans += abs(base - arr2[idx]) > d\n            elif idx == len(arr2):\n                ans += abs(base - arr2[idx - 1]) > d\n            else:\n                ans += ((abs(base - arr2[idx]) > d) and (abs(base - arr2[idx-1]) > d))\n                \n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ok = 0\n        arr2.sort()        \n        for test1 in arr1:\n            ele = 0\n            sign = 0\n            for test2 in arr2:     \n                test = test2-test1\n                if abs(test) <= d: \n                    ele = 1\n                    break\n                if (test > d) or (d < 0):\n                    break\n            if ele == 0: ok += 1\n        return ok", "import numpy\n\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        s = 0\n        n2 = len(arr2)\n        for x in arr1:\n            k = numpy.searchsorted(arr2, x)\n            if k < n2 and arr2[k] - x <= d:\n                s += 1\n            else:\n                if k >= 1 and x - arr2[k - 1] <= d:\n                    s += 1\n        return len(arr1) - s\n                \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for a in set(arr1):\n            if all(abs(a - b) > d for b in set(arr2)):\n                count += arr1.count(a)\n        return count", "import numpy\n\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2 = sorted(arr2)\n        s = len(arr1)\n        n2 = len(arr2)\n        for x in arr1:\n            k = numpy.searchsorted(arr2, x)\n            if k < n2 and arr2[k] - x <= d:\n                s -= 1\n            else:\n                if k >= 1 and x - arr2[k - 1] <= d:\n                    s -= 1\n        return s\n                \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in arr1:\n            add=1\n            for j in range(d+1):\n                if (i+j) in arr2 or (i-j) in arr2:\n                    add=0\n                    break\n            count+=add\n        return count", "import numpy as np\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        res=0\n        for num1 in arr1:\n            if all(abs(np.subtract(num1,arr2))>d):\n                res+=1\n        return res", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = 0\n        for num1 in arr1:\n            flag = 1\n            for num2 in arr2:\n                if abs(num1 - num2) <= d:\n                    flag = 0\n            if flag:\n                ans+=1\n        return ans                    \n        \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        res = 0\n        for a in arr1:\n            temp = True\n            for b in arr2:\n                if(abs(a-b) <= d):\n                    temp = False\n            if(temp):\n                res += 1\n        return res\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        distance = 0\n        for i in arr1:\n            is_there = False\n            for j in arr2:\n                if abs(i-j)>d:\n                    continue\n                else:\n                    is_there = True\n            if not is_there:\n                distance+=1\n        return distance\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        count=0\n        for i in arr1:\n            flag=False\n            for j in arr2:\n                if abs(i-j)<=d:\n                    flag=True\n            if flag==False:\n                count+=1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        r = 0\n        for i in arr1:\n            ir = 1\n            for j in arr2:\n                if abs(i - j) <= d:\n                    ir = 0\n                    continue\n            r += ir\n        return r\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        result = 0\n        for i in arr1:\n            a = 1\n            for j in arr2:\n                if abs(i-j)<=d:\n                    a = 0\n            result += a\n        return result\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in arr1:\n            yes=0\n            for j in arr2:\n                    if abs(i-j)<=d:\n                        yes=1\n                        # break\n            if(yes==1):\n                count+=1\n        return len(arr1)-count\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt=0\n        for a in arr1:\n            mark=0\n            for b in arr2:\n                if abs(a-b) <=d:\n                    mark=1\n            cnt+=1 if mark==0 else 0\n        return cnt\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        distance = [[val - d, val + d] for val in arr1]\n        total = 0\n        for ran in distance:\n            for val in arr2:\n                if(ran[0] <= val and val <= ran[1]):\n                    total += 1\n                    break\n        return len(arr1) - total\n                \n                \n            \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        result = 0\n        for num in arr1:\n            greater = True\n            for sub in arr2:\n                if abs(num-sub) <= d:\n                    greater = False\n            if greater:\n                result += 1\n        return result", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for num1 in arr1:\n            flag = False\n            for num2 in arr2:\n                if abs(num1 - num2) <= d:\n                    flag = True\n            if not flag:\n                count += 1\n        return count\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count=0\n        for i in arr1:\n            flag=0\n            for j in arr2:\n                if abs(i-j)<=d:\n                    flag=1\n            if flag==0:\n                count+=1\n        return count", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for i in arr1:\n            curr = 0\n            for j in arr2:\n                if abs(i-j) <= d:\n                    curr += 1\n            \n            if curr == 0:\n                count += 1\n        \n        return count\n", "class Solution:\n    def findTheDistanceValue(self, arr1, arr2, d: int) -> int:\n        counter = 0\n        if 1 <= len(arr1) <= 500 and 1 <= len(arr2) <= 500:\n            for i in range(len(arr1)):\n                val = 1\n                for j in range(len(arr2)):\n                    if pow(-10, 3) <= arr1[i] <= pow(10, 3) and pow(-10, 3) <= arr2[j] <= pow(10, 3):\n                        if 0 <= d <= 100:\n                            check_value = (abs(arr1[i] - arr2[j]))\n                            if check_value <= d:\n                                val = 0\n                                break\n                if val == 1:\n                    counter += 1\n            # print(counter)\n            return counter", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        boss = 0 \n        for val1 in arr1 : \n            cnt = 0 \n            for val2 in arr2 : \n                if abs(val2 - val1) <= d : \n                    cnt += 1 \n            if cnt == 0 : \n                boss += 1 \n        return boss\n                \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans=0\n        for i in arr1:\n            for j in range(i-d,i+d+1):\n                if(j in arr2):\n                    break\n                    \n            else:\n                ans+=1\n        return ans", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ans = 0\n        for x in arr1:\n            ans += all([abs(x-y) > d for y in arr2])\n        return ans\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        ans = 0\n        \n        for a in arr1:\n            isGood = True\n            \n            for b in arr2:\n                if (abs(a-b)<=d):\n                    isGood = False\n                    break\n            \n            if (isGood): \n                ans += 1\n        \n        return ans\n                \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        res = 0\n        for a in arr1:\n            add = True\n            for b in arr2:\n                if abs(a - b) <= d:\n                    add = False\n            if add:\n                res += 1\n        return res", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        c = list(set([i for i in arr1 for j in arr2 if abs(i-j) <= d ]))\n        i = len(arr1)\n        for j in c:\n            i -= arr1.count(j)\n        return i\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        return sum([1 - any([abs(i-j) <= d for j in arr2]) for i in arr1])", "class Solution:\n    def findTheDistanceValue(self, A: List[int], B: List[int], d: int) -> int:\n        return sum(1 - any([abs(a - b) <= d for b in B]) for a in A)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        return sum([all([abs(i-j) > d for j in arr2]) for i in arr1])", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        \n        count=0\n        for i in arr1:\n            a = True\n            for j in arr2:\n                a=a & (abs(i-j)>d)\n            if a==True:\n                count+=1\n        return count ", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        a = set()\n        out=0\n        for i in range(len(arr1)):\n            for j in arr2:\n                if abs(arr1[i]-j)<=d:\n                    out+=1\n                    if i not in a:\n                        a.add(i)\n\n        return len(arr1)-len(a)", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        return len([g for g in [min(k) for k in [[abs(t - y) for t in arr2] for y in arr1]] if g>d])\n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        count = 0\n        for i in arr1:\n            d_l = [abs(i-j) > d for j in arr2]\n            if all(d_l):\n                count += 1\n        return count\n                \n", "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n\n        final_count = 0\n        for arr_1_val in arr1:\n            #store the matches\n            correct_count = 0\n            for arr_2_val in arr2:\n\n                if abs(arr_1_val- arr_2_val) > d:\n                    correct_count += 1\n            if correct_count == len(arr2):\n                final_count += 1\n        return final_count\n"]