["def remember(str_):\n    seen = set()\n    res = []\n    for i in str_: \n        res.append(i) if i in seen and i not in res else seen.add(i)\n    return res\n", "from collections import Counter\n\ndef remember(str_):\n    seen, lst = Counter(), []\n    for c in str_:\n        if seen[c] == 1: lst.append(c)\n        seen[c] += 1\n    return lst", "\ndef remember(str_):\n    return [c for i,c in enumerate(str_) if str_[:i].count(c) == 1]", "def remember(stg):\n    return [c for i, c in enumerate(stg) if stg[:i].count(c) == 1]", "def remember(s):\n    li,final = [],[]\n    for i in s:\n        if i not in li : li.append(i)\n        else : final.append(i)\n    return sorted(set(final), key=final.index)", "def remember(str_):\n    d = {}\n    seen = set()\n    for c in str_:\n        if c in seen:\n            d[c] = 1\n        seen.add(c)\n    return list(d)", "def remember(str):\n    lst = []\n    for i, j in enumerate(str):\n        if j in str[:i] and j not in lst:\n            lst.append(j)\n    return lst\n\n", "def remember(str_):\n    first_occured, reported = [], []\n    for letter in str_:\n        if letter not in first_occured:\n            first_occured.append(letter)\n        elif letter not in reported:\n            reported.append(letter)\n    return reported", "from enum import Enum\n\nState = Enum('State', 'NONE SEEN APPENDED')\n\ndef remember(str_):\n    states = {}\n    result = []\n    for c in str_:\n        state = states.get(c, State.NONE)\n        if state is State.NONE:\n            states[c] = State.SEEN\n        elif state is State.SEEN:\n            result.append(c)\n            states[c] = State.APPENDED\n    return result\n", "import re\ndef remember(str):\n    t = []\n    for j,i in enumerate(str):\n        if str[:j+1].count(i)>1 and i not in t:\n            t.append(i)\n    return t"]