["class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\" \n         strs = strs\n         import os \n         return os.path.commonprefix(strs)\n     \n     \n #         for x in strs:\n #            if prefix in x:\n #                 print x\n         \n", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         \n         s0 = strs[0]\n         shortest_str_len = len(s0)\n         \n         for s in strs:\n             shortest_str_len = min(shortest_str_len, len(s))\n \n         for i in range(shortest_str_len):\n             for s in strs:\n                 if s[i] != s0[i]:\n                     if i == 0:\n                         return \"\"\n                     else:\n                         return s0[0:i]\n        \n         return s0[0:shortest_str_len]", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if len(strs) == 0:\n             return \"\"\n         \n         \n         result = \"\"\n         judge = strs[0]\n         flag = True\n         for i in range(len(judge)):\n             for j in strs[1:]:\n                 if i >= len(j) or judge[i] != j[i]: \n                     flag = False\n             if flag:\n                 result += judge[i]\n             else:\n                 break\n             \n         return result\n", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         res = ''\n         i = 0\n         next_pref = 1\n \n         while i < len(strs):\n             if strs[i].startswith(res):\n                 pass\n             else:\n                 res = res[:-1]\n                 break\n             i += 1\n             if i == len(strs):\n                 if next_pref == -1:\n                     break\n \n                 res = strs[0][:next_pref]\n \n                 i = 0\n                 next_pref += 1\n                 if next_pref > len(strs[0]):\n                     next_pref = -1\n         return res", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         def lcp(str1, str2):\n             i = 0\n             while (i < len(str1)) and (i < len(str2)):\n                 print((str1[i], str2[i]))\n                 if str1[i] == str2[i]:\n                     i += 1\n                 else:\n                     if i == 0:\n                         return \"\"\n                     else:\n                         return str1[:i]\n             if i == 0:\n                 return \"\"\n             else:\n                 return str1[:i]\n         if not strs:\n             return \"\"\n         if len(strs) == 1:\n             if not strs[0]:\n                 return \"\"\n             else:\n                 return strs[0]\n         str = lcp(strs[0], strs[1])\n         print(str)\n         if len(strs) == 2:\n             if not str:\n                 return \"\"\n             else:\n                 return str\n         for i in range(1, len(strs)):\n             str = lcp(strs[i], str)\n         if not str:\n             return \"\"\n         else:\n             return str \n             \n         \n", "class Solution:\n     # @return a string\n     def longestCommonPrefix(self, strs):\n         if not strs:\n             return \"\"\n             \n         for i, letter_group in enumerate(zip(*strs)):\n             if len(set(letter_group)) > 1:\n                 return strs[0][:i]\n         else:\n             return min(strs)\n", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         shortest = min(strs, key = len)\n         for i, val in enumerate(shortest):\n             for str in strs:\n                 if str[i] != val:\n                     return shortest[:i]\n         return shortest", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         ############MY SOLUTION############################\n         #import numpy as np\n         #pref = \"\"\n         #i = 0\n         #stop = 0\n         \n         #if not all(strs): #empty str\n         #    return(\"\")\n         \n         #while not stop:\n         #    letter = np.unique([l[i:(i+1)] for l in strs])\n         #    if len(letter) == 1 and letter[0] != \"\" :\n         #        pref += letter[0]\n         #        i += 1\n         #    else:\n         #        stop = 1\n         #return(pref)\n         \n         ###########OTHER##################################\n         if not strs:   #if strs = []\n             return(\"\")\n         \n         for i, letter_group in enumerate(zip(*strs)):\n             if len(set(letter_group)) > 1:\n                 return(strs[0][:i])\n             \n         ##if shortest string is the common prefix or strs contains \"\"\n         else:\n             return(min(strs))\n                 \n \n         \n", "class Solution:\n    \n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         cpy = strs.copy()\n         return self.helper(cpy, 0)\n \n     def helper(self, strs, i):\n         if i == len(strs) - 1:\n             return strs[i]\n         s1 = strs[i]\n         s2 = strs[i + 1]\n         prefix = \"\"\n         if len(s1) == 0 or len(s2) == 0:\n             return prefix\n         j = 0\n         while j < len(s1) and j < len(s2) and s1[j] == s2[j]:\n             j += 1\n             prefix = s1[:j]\n         i += 1\n         strs[i] = prefix\n         return self.helper(strs, i)\n", "class Solution:\n    \n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         # \u4e3a\u4e86\u4e0d\u6539\u52a8\u539f\u6765\u7684\u6570\u7ec4\n         cpy = strs.copy()\n         return self.__helper(cpy)  # \u8bb0\u5f97\u52a0 self\n \n     '''\u7b97\u51fa\u524d\u9762\u4e24\u4e2astr\u7684longest common prefix. \u7136\u540e\uff0c\u628alcp\u653e\u5230\u7b2c\u4e8c\u4e2astr\u7684\u4f4d\u7f6e\u4e0a\uff0cstrs\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u629b\u5f03\uff0c\n     \u9012\u5f52\u8c03\u7528,\u76f4\u5230\u6700\u540e\u53ea\u5269\u4e00\u4e2a\u5143\u7d20'''\n     \n     def __helper(self, strs):\n         if len(strs) == 1:\n             return strs[0]\n         s1 = strs[0]\n         s2 = strs[1]\n         prefix = \"\"\n         if len(s1) == 0 or len(s2) == 0:\n             return prefix\n         j = 0\n         while j < len(s1) and j < len(s2) and s1[j] == s2[j]:\n             j += 1\n             prefix = s1[:j]\n         strs[1] = prefix\n         strs.pop(0) # or strs= strs[1:]\n         return self.__helper(strs) # \u8bb0\u5f97\u52a0 self\n", "class Solution:\n    \n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         cpy = strs.copy()\n         return self.__helper(cpy)  # \u8bb0\u5f97\u52a0 self\n \n     def __helper(self, strs):\n         if len(strs) == 1:\n             return strs[0]\n         s1 = strs[0]\n         s2 = strs[1]\n         prefix = \"\"\n         if len(s1) == 0 or len(s2) == 0:\n             return prefix\n         j = 0\n         while j < len(s1) and j < len(s2) and s1[j] == s2[j]:\n             j += 1\n             prefix = s1[:j]\n         strs[1] = prefix\n         strs = strs[1:]\n         return self.__helper(strs) # \u8bb0\u5f97\u52a0 self\n", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs or len(strs) == 0:\n             return \"\"\n         \n         prefix = strs[0]\n         \n         if len(strs) > 1:\n             for i, p in enumerate(prefix):\n                 for j in range(1, len(strs)):\n                     s = strs[j]\n                     if i == len(s) or p != s[i]:\n                         return prefix[:i]\n                         \n                     \n                 \n                 \n             \n         \n         return prefix\n                 \n             \n                     \n         \n         \n         \n             \n             \n", "class Solution:\n     def _longestCommonPrefix(self, left, right):\n         prefix = ''\n         i = j = 0\n         while(i < len(left) and j < len(right)):\n             if left[i] == right[j]:\n                 prefix += left[i]\n             else:\n                 break\n             i += 1\n             j += 1\n         return prefix\n     \n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n           return ''\n         elif len(strs) == 1:\n           return strs[0]\n         mid = len(strs)//2\n         left, right = self.longestCommonPrefix(strs[mid:]), self.longestCommonPrefix(strs[:mid])\n         return self._longestCommonPrefix(left, right)\n", "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return ''\n         for i, letter_group in enumerate(zip(*strs)):\n             if len(set(letter_group)) > 1:\n                 return strs[0][:i]\n         else:\n             return min(strs)\n \n \n"]