["import heapq, itertools\n\ndef sort(iterable):\n    heap = list(iterable)\n    heapq.heapify(heap)\n    return (heapq.heappop(heap) for i in range(len(heap)))", "def sort(words):\n    from random import choice\n    from itertools import chain\n    words = list(words)\n    if len(words) <= 1: return iter(words)\n    pivot = choice(words)\n    return chain(sort(w for w in words if w < pivot), [pivot], sort(w for w in words if w > pivot))", "from heapq import *\n\ndef sort(iterable):\n    h = []\n    for value in iter(iterable):\n        heappush(h, value)\n    return iter([heappop(h) for i in range(len(h))])", "def sort(arr):\n    \"\"\" You'll have to try harder than that @sazlin \"\"\"\n    result = [a for a in arr]\n    result.__getattribute__('sort')()\n    yield from result", "import heapq as hp\n\ndef sort(words):\n    words = list(words)\n    hp.heapify(words)\n    while words:\n        yield hp.heappop(words)", "def sort(words):\n    if not words: return\n    it = iter(words)\n    pivot = next(it)\n    lt, ge = [], []\n    for i in it:\n        if i < pivot: lt.append(i)\n        else: ge.append(i)\n    yield from sort(lt)\n    yield pivot\n    yield from sort(ge)", "from heapq import heapify, heappop\n\ndef sort(words):\n    words = list(words)\n    heapify(words)\n    while words:\n        yield heappop(words)", "from itertools import chain\n\ndef merge_sort(words):\n    if len(words) <= 1: return words\n    midpt = len(words) // 2\n    arr1 = merge_sort(words[:midpt])\n    arr2 = merge_sort(words[midpt:])\n    res = []\n    \n    while len(arr1) > 0 and len(arr2) > 0:\n        if arr1[0] > arr2[0]:\n            res.append(arr2.pop(0))\n        else:\n            res.append(arr1.pop(0))\n    if len(arr1) > 0:\n        res.extend(arr1)\n    else:\n        res.extend(arr2)\n    return res\n    \n\ndef sort(words):\n    if not words: return []\n    dict_by_alpha = dict()\n    \n    for a in alphabet:\n        dict_by_alpha[a] = []\n    for w in words:\n        dict_by_alpha[w[0]] += [w]\n    return chain.from_iterable(merge_sort(dict_by_alpha[a]) for a in alphabet)    \n", "from heapq import heappush, heappop\ndef sort(words):\n    heap = []\n    for w in words: heappush(heap, w)\n    while heap: yield heappop(heap)", "import heapq\n\ndef sort(words):\n    heap = []\n    cnt = 0\n    for w in words:\n        cnt += 1\n        heapq.heappush(heap, w)\n\n    def sorted_gen():\n        for i in range(cnt):\n            yield heapq.heappop(heap)\n    return sorted_gen()"]