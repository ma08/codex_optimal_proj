["from functools import reduce\n\narray_change = lambda arr: reduce(lambda a, u: (max(a[0] + 1, u), a[1] + max(0, a[0] - u + 1)), arr, (-10001, 0))[1]", "def array_change(arr):\n  if not arr: return 0\n  x, y = arr[0], 0\n  for i in arr[1:]:\n    x = max(x + 1, i)\n    y += x - i\n  return y", "def array_change(arr):\n    m, s = 0, arr[0]\n    for i in arr[1:]:\n        if s >= i:\n            s += 1\n            m += s - i\n        else:\n            s = i\n    return m\n", "def array_change(arr):\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]>=arr[i+1]:\n            count+=arr[i]-arr[i+1]+1\n            arr[i+1]+=arr[i]-arr[i+1]+1\n    return count", "def array_change(arr):\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            arr[i+1]+=1\n            count+=1\n        elif arr[i]>arr[i+1]:\n            count+=arr[i]-arr[i+1]+1\n            arr[i+1]+=arr[i]-arr[i+1]+1\n    return count", "def array_change(arr):\n    moves=0\n    for i in range(len(arr)-1):\n        if arr[i+1]<=arr[i]:\n            diff=arr[i]-arr[i+1]+1\n            arr[i+1]+=diff\n            moves+=diff\n    return moves", "def array_change(arr):\n    res = 0\n    for i, x in enumerate(arr[1:], start=1): \n        inc = max(x, 1+max(arr[:i])) - x\n        arr[i] += inc\n        res += inc\n    return res", "def array_change(a):\n    c = 0\n    for i in range(1,len(a)):\n        if a[i]<=a[i-1]:\n            c += (a[i-1]-a[i])+1\n            a[i] = a[i-1]+1\n    return c", "def array_change(arr):\n    move = 0\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            move += arr[i - 1] - arr[i] + 1\n            arr[i] += arr[i - 1] - arr[i] + 1\n    return move\n", "def array_change(arr):\n    p, r = arr[0], 0\n    for x in arr[1:]:\n        if x <= p:\n            r += p - x + 1\n            x = p + 1\n        p = x\n    return r"]