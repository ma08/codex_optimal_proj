["def similarity(a, b):\n    try:\n        return len(set(a) & set(b)) / len(set(a) | set(b))\n    except:\n        return 0", "def similarity(*args):\n    a,b = map(set, args)\n    return len(a&b) / len(a|b)", "def similarity(a, b):\n    c = a + b\n    lst1 = []\n    lst2 = []\n    for i in set(c):\n        if c.count(i) > 1:\n            lst1.append(i)\n            lst2.append(i)\n        else:\n            lst2.append(i)\n    return len(lst1) / len(lst2)", "def similarity(a, b):\n    a,b = set(tuple(a)),set(tuple(b))\n    return len(a.intersection(b)) / len(a.union(b))", "def similarity(a, b):\n    a, b = set(list(a)), set(list(b))\n    return len(a.intersection(b)) / len(a.union(b))", "def similarity(a, b):\n    a, b = set(a), set(b)\n    return len(a & b) / len(a | b)", "def similarity(a, b):\n    sa, sb = set(a), set(b)\n    return len(sa & sb) / len(sa | sb)", "def similarity(a, b):\n    return len(set(a).intersection(set(b))) / len(set(a).union(set(b)))", "def similarity(a, b):\n  #coding and coding..\n  return float(len(set(a) & set(b)))/len(set(a) | set(b))", "def similarity(a, b):\n    \n    x = list (set(a + b))\n    z = [num for num in a if num in a and num in b]\n    #time to count\n    try:\n        return len(z) / len (x)\n    except ZeroDivisionError:\n        return 0\n\n\n    \n"]