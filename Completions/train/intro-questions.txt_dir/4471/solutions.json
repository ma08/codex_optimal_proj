["def lamps(a):\n    n = sum(1 for i, x in enumerate(a) if x != i % 2)\n    return min(n, len(a) - n)", "def lamps(a):\n  return min(sum(1 for i, n in enumerate(a) if n == i % 2), sum(1 for i, n in enumerate(a) if n != i % 2))", "def lamps(a):\n    case1c = 0\n    case2c = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            if a[i] == 1:\n                case1c += 1\n            else:\n                case2c += 1\n        else:\n            if a[i] == 1:\n                case2c += 1\n            else:\n                case1c += 1\n    return min(case1c, case2c)", "def lamps(lst):\n    starts_with_zero = sum(on ^ i & 1 for i, on in enumerate(lst))\n    starts_with_one = sum(on ^ i & 1 for i, on in enumerate(lst, 1))\n    return min(starts_with_zero, starts_with_one)", "import copy\n\n\ndef lamps(a):\n    k = 0\n    n = []\n    b = copy.deepcopy(a)\n    print(a)\n    for c in range(1, len(a)):\n        if a[c] == a[c - 1]:\n            a[c] = 1 - a[c]\n            k += 1\n    if k == 0:\n        return 0\n    n.append(k)\n    print(n)\n    k = 1\n    b[0] = 1 - b[0]\n    print(b)\n    for c in range(1, len(b)):\n        if b[c] == b[c - 1]:\n            b[c] = 1 - b[c]\n            k += 1\n    n.append(k)\n    print(n)\n    return min(n)\n", "def lamps(a):\n  #coding and coding..\n  n = sum([1 for x,y in enumerate(a) if y == x % 2])\n  return min(len(a)-n,n)", "def lamps(a):\n  r = sum(x == c % 2 for c, x in enumerate(a))\n  return min(r, len(a) - r)", "def lamps(a):\n    i, count = 0, 0\n    \n    for lamp in a:\n        if lamp == i % 2:\n            count += 1\n        i += 1\n        \n    return min(count, i - count)", "from itertools import cycle\ndef lamps(a):\n    dif=lambda a,b:sum(x!=y for x,y in zip(a,b))\n    return min(dif(a,cycle([1,0])),dif(a,cycle([0,1])))", "from itertools import cycle\n\ndef lamps(a):\n    return min(sum(x != y for x, y in zip(a, cycle([0, 1]))),\n               sum(x != y for x, y in zip(a, cycle([1, 0]))))"]