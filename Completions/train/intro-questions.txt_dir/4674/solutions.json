["def rank(st, we, n):\n    if not st:\n        return \"No participants\"\n    \n    if n>len(we):\n        return \"Not enough participants\"\n\n    name_score = lambda name,w: w*(len(name)+sum([ord(c.lower())-96for c in name]))\n    \n    scores= [name_score(s,we[i]) for i,s in enumerate(st.split(','))]\n    \n    scores = list(zip(st.split(','),scores))    \n    \n    scores.sort(key=lambda x: (-x[1],x[0]))\n    \n    return scores[n-1][0]", "def win_num(name, weight):\n    return (len(name) + sum(ord(c)-96 for c in name.lower())) * weight\n\ndef rank(st, we, n):\n    if not st:      return \"No participants\"\n    elif n>len(we): return \"Not enough participants\"\n    else:           return sorted((-win_num(s,w),s) for s,w in zip(st.split(\",\"), we))[n-1][1]\n", "DELTA = ord(\"a\")-1\n\ndef sumName(name):\n    return sum( ord(c)-DELTA for c in name) + len(name)\n\ndef rank(st, we, n):\n    return (\"No participants\" if st == \"\" else\n            \"Not enough participants\" if n > st.count(\",\")+1 else \n            sorted( (-sumName(name.lower())*w, name) for name,w in zip(st.split(','), we) )[n-1][1] )", "def rank(st, we, n):\n    if not st: return \"No participants\"\n    st = st.split(',')\n    calc = lambda x: we[x[0]] * (len(x[1]) + sum(ord(m) - ord('a') + 1 for m in x[1].lower()))\n    return sorted(sorted([m for m in enumerate(st)], key=lambda x: x[1]), key=lambda m: calc(m), reverse=True)[n - 1][1] if len(st) >= n else \"Not enough participants\"", "from string import ascii_lowercase\n\ndef rank(st, we, n):    \n    names = st.split(\",\")\n    ranks = {}\n    \n    if st == \"\":\n        return \"No participants\"\n    \n    if n > len(names):\n        return \"Not enough participants\"\n    \n    for index, name in enumerate(names):\n        som = len(name) + sum([ascii_lowercase.index(letter) + 1 for letter in name.lower()])\n        ranks[name] = we[index] * som\n        \n    sort = sorted(list(ranks.items()), key=lambda x: (-x[1], x[0]))\n    return [name for name, som in sort][n - 1]\n", "from typing import List\n\n\ndef rank(st: str, we: List[int], n: int):\n    if not st:\n        return \"No participants\"\n\n    names = st.split(',')\n    if n > len(names):\n        return \"Not enough participants\"\n\n    return sorted(((-w * (len(s) + sum(ord(c) - 96 for c in s.lower())), s) for s, w in zip(names, we)))[n - 1][1]\n", "def weight_words(nam):\n    sum = 0\n    for x in nam:\n        sum += ord(x) - 96\n    return sum + len(nam)\n\n\ndef rank(st, we, n):\n    index = 0\n    if len(st) == 0:\n        return \"No participants\"\n    lst_st = st.split(',')\n    if n > len(lst_st):\n        return \"Not enough participants\"\n    res = []\n    for name, w in zip(lst_st,we):\n        res.append((weight_words(name.lower())*w, name))\n    res = sorted(res, reverse=True)\n    while index < len(res) - 1:\n        tmp = res[index]\n        tmp_next = res[index + 1]\n        if tmp[0] == tmp_next[0]:\n            if tmp[1] > tmp_next[1]:\n                res[index],res[index + 1] = res[index + 1],res[index]\n            else:\n                index = index + 1\n        else:\n            index = index + 1\n    return res[n - 1][1]", "def rank(st, we, n):\n    if not st:\n        return \"No participants\"\n    names = st.split(\",\")\n    if len(names) < n:\n        return \"Not enough participants\"\n    result = {names[i]: (sum(ord(l.lower()) - ord('a') + 1 for l in names[i]) + len(names[i])) * we[i] for i in range(len(names))}\n    result = {k: v for k, v in sorted(result.items(), key=lambda item: item[0])}\n    result = sorted(result.items(), key=lambda item: item[1], reverse=True)\n    return result[n-1][0]", "from string import ascii_lowercase\n\n\ndef rank(st, we, n):\n    if not st:\n        return \"No participants\"\n    if n > len(st.split(',')):\n        return \"Not enough participants\"\n    x = ascii_lowercase\n    s = 0\n    winning_num = []\n    names = []\n    group = sorted(list(zip(st.split(','), we)))\n    for name, weight in group:\n        names.append(name)\n        for letter in name.lower():\n            s += (x.index(letter)) + 1\n        s += len(name)\n        winning_num.append(s * weight)\n        s = 0\n    final = list(zip(winning_num, names))\n    final.sort(reverse=True)\n    z = []\n    final_names = []\n    for V, N in final:\n        final_names.append(N)\n        if V == final[n - 1][0]:\n            z.append(N)\n    z.sort()\n    ind = []\n    for p in z:\n        ind.append(final_names.index(p))\n    new_list = final_names[:min(ind)] + z + final_names[max(ind) + 1:]\n    return new_list[n - 1]", "def rank(st: str, we: list, n: int):\n    if not st:\n        return 'No participants'\n    elif n > len(st.split(',')):\n        return \"Not enough participants\"\n    \n    def to_number(word):\n        return (sum(ord(c.lower())-96 for c in word) + len(word))\n    \n    d = {}\n    for w, wt in zip(st.split(','), we):\n        d[w] = to_number(w) * wt\n    \n    sorted_d = sorted(d.items(), key=lambda kv: (-kv[1], kv[0]))\n    print(sorted_d)\n    return sorted_d[n-1][0]"]