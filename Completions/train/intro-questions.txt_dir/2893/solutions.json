["def plant_doubling(n):\n    return bin(n).count(\"1\")", "def plant_doubling(n):\n    p = 0\n    while n:\n        if n % 2 == 1:\n            n -= 1\n            p += 1\n        n //= 2\n    return p", "def plant_doubling(n):\n    return bin(n)[2:].count(\"1\")", "import math\ndef plant_doubling(n):\n    times = 0\n    while n != 0:\n        times += 1\n        n = n - (2 ** int(math.log(n, 2)))\n    return times", "def plant_doubling(n):\n    return sum(c == '1' for c in bin(n)[2:])", "def plant_doubling(n):\n    powers = [2**i for i in range(30)]\n    powers.reverse()\n    difference = n\n    array = []\n    for i in range(30):\n        if powers[i] <= difference:\n            difference = (difference - powers[i])\n            array.append(powers[i])\n    return len(array)", "def plant_doubling(n):\n    schemat = str(bin(n))\n    return sum(int(schemat[i]) for i in range(2, len(schemat)))", "def plant_doubling(n):\n    s=0\n    while n:\n        if n%2:s+=1\n        n//=2\n    return s", "def plant_doubling(n):\n    list = []\n    for i in range(64):\n        list.append(2**i)\n    rounds = 0\n    while n >= 1:\n        relevant_list = []\n        for item in list:\n            if item <= n:\n                relevant_list.append(item)\n        n = n - relevant_list[-1]\n        rounds = rounds + 1\n    return rounds"]