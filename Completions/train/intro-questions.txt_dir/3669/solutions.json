["from itertools import permutations\n\ndef sc_perm_comb(num):\n    sNum = str(num)\n    return sum({ int(''.join(p)) for d in range(1, len(sNum)+1) for p in permutations(sNum, d) })", "import itertools\n\n#With combinations, we allow leading zeros, e.g. '03' is allowed, because when we permute, '03' becomes '30'  \ndef getAllCombinations(numStr, numDigits):\n    combedDigits = []\n    for d in range(1, numDigits+1):     #interval [1, numDigits]\n        numList = [(''.join(p)) for p in itertools.combinations(numStr, d) ]\n        uniqueNumList = set(numList)\n        combedDigits.append( uniqueNumList )\n\n    return combedDigits\n#-----end function\n\n\ndef sc_perm_comb( n ):\n    numStr = str(n)\n    numDigits = len(numStr)\n\n    combStrList = getAllCombinations(numStr, numDigits)\n\n    permSet = set()\n    for numsOfDigitD in combStrList:\n        for num in numsOfDigitD:\n            allPerms = [int(''.join(p)) for p in itertools.permutations((num)) if p[0]!='0']\n            permSet.update(set(allPerms))    #punch out all repeats\n\n    totalSum  = sum( permSet )\n\n    return totalSum\n#---end function\n", "import itertools\n\n\ndef sc_perm_comb(num):\n    return sum([int(''.join(p)) for i in range(1, len(str(num)) + 1) for p in set(itertools.permutations(str(num), i)) if p[0] != \"0\" ])\n", "import itertools\ndef sc_perm_comb(num):\n    total=0\n    for k in range(1,len(str(num))+1):\n      t=set((itertools.permutations(str(num),k)))\n      for l in t:\n        temp=''.join(l)\n        if(temp[0:1]!='0'):\n            total+=int(temp)\n    return total", "sc_perm_comb=lambda n:sum({int(''.join(p))for r in range(len(str(n)))for p in __import__('itertools').permutations(str(n),r+1)})", "from itertools import permutations\ndef sc_perm_comb(num):\n    s = str(num)\n    return sum({int(''.join(p)) for c, _ in enumerate(s, 1) for p in permutations(s, c)})", "import itertools\ndef sc_perm_comb(num):\n    line = []\n    for i in range(len(str(num))):\n        line += [int(''.join(n)) for n in itertools.permutations(list(str(num)), i+1)]\n    return sum(set(line))\n"]