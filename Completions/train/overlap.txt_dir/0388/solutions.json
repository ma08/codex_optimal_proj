["class Solution(object):  \n     def hIndex(self, citations):  \n         \"\"\" \n         :type citations: List[int] \n         :rtype: int \n         \"\"\"  \n           \n         n=len(citations)  \n           \n         if n>0:           \n             citations.sort()  \n             citations.reverse()            \n             h=0 \n             \n             while h<n and citations[h]-1>=h:  \n                 h+=1                \n             return h  \n         else:  \n             return 0  ", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n #         if len(citations) == 0:\n #             return 0\n         \n #         maxCita = -sys.maxsize - 1\n #         for citation in citations:\n #             maxCita = max(maxCita, citation)\n             \n #         start = 0\n #         end = maxCita\n         \n #         while start + 1 < end:\n #             mid = start + (end - start) // 2\n #             if self.countGreater(mid, citations) > mid:\n #                 start = mid\n #             else:\n #                 end = mid\n                 \n #         if self.countGreater(end, citations) <= end:\n #             return end\n #         else:\n #             return start\n         \n #     def countGreater(self, cita, citations):\n #         count = 0\n #         for citation in citations:\n #             if citation > cita:\n #                 count += 1\n #         return count\n     \n     \n         if len(citations) == 0:\n             return 0\n         h = [0 for i in range(len(citations) + 1)]\n         for citation in citations:\n             if citation >= len(citations):\n                 h[len(citations)] += 1\n             else:\n                 h[citation] += 1\n         \n         i = len(citations) - 1\n         while i >= 0:\n             h[i] += h[i + 1]\n             if h[i + 1] >= i + 1:\n                 return i + 1\n             i -= 1\n         return 0\n             \n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if len(citations) == 0:\n             return 0\n         else:\n             citations.sort()\n             i = 0\n             while i < len(citations) :\n                 if citations[-i-1] >= (i+1):\n                     i += 1\n                 else:\n                     break\n             return i\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         if len(citations) == 0:\n             return 0\n         \n         maxCita = -sys.maxsize - 1\n         for citation in citations:\n             maxCita = max(maxCita, citation)\n             \n         start = 0\n         end = maxCita\n         \n         while start + 1 < end:\n             mid = start + (end - start) // 2\n             if self.countAtleast(mid, citations) == mid:\n                 return mid\n             elif self.countAtleast(mid, citations) > mid:\n                 start = mid\n             else:\n                 end = mid\n                 \n         if self.countAtleast(end, citations) >= end:\n             return end\n         else:\n             return start\n         \n     def countAtleast(self, cita, citations):\n         count = 0\n         for citation in citations:\n             if citation >= cita:\n                 count += 1\n         return count", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         length = len(citations)\n         if (length == 0):\n             return 0\n         \n         citations.sort()\n         \n         for idx, citation in enumerate(citations):\n             counts_bigger_equal_curr_citation = length - idx\n             if citation >= counts_bigger_equal_curr_citation:\n                 return counts_bigger_equal_curr_citation\n             \n         return 0\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         if len(citations) == 0:\n             return 0\n         \n         maxCita = -sys.maxsize - 1\n         for citation in citations:\n             maxCita = max(maxCita, citation)\n             \n         start = 0\n         end = len(citations)\n         \n         while start <= end:\n             mid = start + (end - start) // 2\n             if self.countGreater(mid, citations) > mid:\n                 start = mid + 1\n             else:\n                 end = mid - 1\n                 \n         if self.countGreater(end, citations) <= end:\n             return end\n         else:\n             return start\n         \n     def countGreater(self, cita, citations):\n         count = 0\n         for citation in citations:\n             if citation > cita:\n                 count += 1\n         return count\n     \n #         if len(citations) == 0:\n #             return 0\n         \n #         h = [0 for i in range(len(citations) + 1)]\n #         for citation in citations:\n #             if citation >= len(citations):\n #                 h[len(citations)] += 1\n #             else:\n #                 h[citation] += 1\n         \n #         i = len(citations) - 1\n #         while i >= 0:\n #             if h[i + 1] >= i + 1:\n #                 return i + 1\n #             h[i] += h[i + 1]\n #             i -= 1\n #         return 0\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         citations = sorted(citations)\n         h=0\n         for index, c in enumerate(citations):\n             if c <= len(citations) - index:\n                 if c > h:\n                     h = c\n             else:\n                 if len(citations) - index > h:\n                     h = len(citations) - index\n                 break\n         return h\n         \n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         citations.sort()\n         n = len(citations)\n         for i in range(n):\n             if citations[i] >= (n-i):\n                 return n-i\n         return 0\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         N=len(citations)\n         cnt=[0]*(N+1)\n         for num in citations:\n             if num>N:\n                 cnt[N]+=1\n             else:\n                 cnt[num]+=1\n         res=0\n         for i in range(N,0,-1):\n             res+=cnt[i]\n             if res>=i:\n                 return i\n         return res\n             \n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         N=len(citations)\n         citations.sort()\n         for i in range(N):\n             if citations[i]<N-i:\n                 continue\n             else:\n                 return N-i\n         return 0\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         if not citations:\n             return 0\n         \n         # sorted_ci = list(reversed(sorted(citations)))\n         sorted_ci = list(sorted(citations))\n         i = 0\n         while i < len(sorted_ci) and sorted_ci[len(citations)-i-1] >= i + 1:\n             i += 1\n         return i\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         citations.sort()\n         maxnum = 0\n         for i in range(len(citations)):\n         \tcurrH = min(citations[i],len(citations)-i)\n         \tif currH > maxnum:\n         \t\tmaxnum = currH\n         return maxnum\n"]