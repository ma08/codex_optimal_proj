["n = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nans = [1] * (n + 1)\nind = n\nfor i in range(n):\n    p[a[i] - 1] = 1\n    while ind > 0 and p[ind - 1] == 1:\n        ind -= 1\n    ans[i + 1] = 1 + (i + 1) - (n - ind)\nprint(' '.join(map(str, ans)))", "n = int(input())\np = list(map(int, input().split()))\n\nlp = n+1\nans = [1]\nvis = [0 for i in range(n)]\nans = [1]\ntop = n\nhardness = 1\nfor i in range(len(p)):\n    vis[p[i]-1] = 1\n    hardness += 1\n    while vis[top-1] == 1 and top > 0:\n        top -= 1\n        hardness -=1\n    ans.append(hardness)\n            \nprint(' '.join([str(i) for i in ans]))", "n = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nans = [1] * (n + 1)\nind = n\nfor i in range(n):\n    p[a[i] - 1] = 1\n    while ind > 0 and p[ind - 1] == 1:\n        ind -= 1\n    ans[i + 1] = 1 + (i + 1) - (n - ind)\nprint(' '.join(map(str, ans)))", "n = int(input())\nP = list(map(int,input().split()))\n\nP[:] = [x - 1 for x in P]\n\nlst = [0]*n\n\ni = 0\nS = n-1\nans = [1]*(n+1)\n\nwhile i<n:\n    lst[P[i]] = 1\n    if P[i] == S:\n        k=0\n        while k==0:\n            S+=-1\n            if lst[S]==0 or S == -1:\n                k=1\n    i += 1\n    ans[i] = i - n + S + 2\n    \nprint(' '.join(map(str, ans)))", "n = int(input())\ninput_ = list(map(int, input().split()))\npos = n\na = [0 for i in range(n+1)]\nres = 1\nans = [1]\nfor x in input_:\n    a[x] = 1\n    res += 1\n    while a[pos]==1:\n        pos -= 1\n        res -= 1\n    ans.append(res)\nprint(' '.join(map(str, ans)))\n\n", "n = int(input())\ninput_ = list(map(int, input().split()))\npos = n\na = [0 for i in range(n+1)]\nres = 1\nans = [1]\nfor x in input_:\n    a[x] = 1\n    res += 1\n    while a[pos]==1:\n        pos -= 1\n        res -= 1\n    ans.append(res)\nprint(' '.join(map(str, ans)))", "n = int(input())\npositions = [int(x) for x in input().split(\" \")]\n\noutput = '1 '\n\npointer_to_right_wall = n - 1\n\ncoins = [False for i in range(len(positions))]\nfilled = 1\n\nfor i in range(len(positions)):\n\tcoins[positions[i] - 1] = True\n\tif positions[i]-1 == pointer_to_right_wall:\n\t\tcount = 0\n\t\twhile coins[pointer_to_right_wall] == True:\n\t\t\tif pointer_to_right_wall == 0 and coins[0] == True:\n\t\t\t\tcount += 1\n\t\t\t\tbreak\n\t\t\tpointer_to_right_wall -= 1\n\t\t\tcount += 1\n\t\tfilled = filled - count + 1\n\telse:\n\t\tfilled += 1\n\toutput += str(filled) + ' '\n\nprint(output[:-1])", "n = int(input())\ninput_ = list(map(int, input().split(' ')))\npos = n\na = [0 for i in range(n+1)]\nres = 1\nans = [1]\nfor x in input_:\n    a[x] = 1\n    res += 1\n    while a[pos]==1:\n        pos -= 1\n        res -= 1\n    ans.append(res)\nprint (' '.join(map(str, ans)))", "n = int(input())\nx = [0]*n\na = 0\np = list(map(int, input().split()))\nz = n-1\nans = ['1']\nfor i in range(n):\n    x[p[i]-1] = 1\n    a += 1\n    while z> -1 and x[z] == 1:\n        z-=1\n        a-=1\n    ans.append(str(a+1))\nprint(' '.join(ans))", "n = int(input())\n\np = [int(x) for x in input().split()]\n\nmx = n\n\na = [0]*(n+1)\n\nans = [1]\n\nfor i in range(0, n):\n\n    t = p[i]\n\n    a[t] = 1\n\n    while a[mx]==1 and mx>=1: mx-=1\n\n    ans.append(i+1-(n-mx)+1)\n\nprint(' '.join(map(str, ans)))\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "n=int(input())\nl=list(map(int,input().split()))\np=n\niss=set()\nans=[1]\nout=1\nfor i in range(n) :\n    if l[i]==p :\n        p-=1\n        while p in iss :\n            p-=1\n            out-=1\n        ans.append(out)\n    else :\n        iss.add(l[i])\n        out+=1\n        ans.append(out)\nprint(*ans)\n        \n            \n        \n        \n        \n            \n        \n", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\nn = int(input())\nans = [0 for _ in range(n + 1)]\nans[0] = 1\nans[-1] = 1\nsample = [0 for _ in range(n)]\nlast = n - 1\nq = list(map(int, input().split()))\nfor i in range(n - 1):\n\tx = q[i]\n\tsample[x-1] = 1\n\tif x - 1 == last:\n\t\twhile sample[x-1] != 0:\n\t\t\tx -= 1\n\t\tlast = x - 1\n\ttarget = n - i - 2\n\t#print(last, target)\n\tans[i + 1] = last - target + 1\nprint(*ans)\n\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\np = list(map(int, input().split()))\nflag = [1]*n\nr = n-1\ncnt = 0\n\nprint(1, end=' ')\n\nfor i in range(n-1):\n    flag[p[i]-1] = 0\n    \n    while flag[r]==0:\n        r -= 1\n        cnt += 1\n    \n    print(i+2-cnt, end=' ')\n\nprint(1)", "n = int(input())\nx = [0]*n\na = 0\np = list(map(int, input().split()))\nz = n-1\nans = ['1']\nfor i in range(n):\n    x[p[i]-1] = 1\n    a += 1\n    while z> -1 and x[z] == 1:\n        z-=1\n        a-=1\n    ans.append(str(a+1))\nprint(' '.join(ans))\n", "n = int(input())\np=[0]*n\np=input().split()\nfor i in range (n):\n    p[i]=int(p[i])\nmx = n\na = [0]*(n+1)\nans = [1]\nfor i in range(0, n):\n    t = p[i]\n    a[t] = 1\n    while a[mx]==1 and mx>=1:\n        mx-=1\n    ans.append(i+1-(n-mx)+1)\nprint(' '.join(map(str, ans)))", "n = int(input())\nl = list(map(int,input().split()))\nprint(1,end = \" \")\nptr = n-1\nv = [0]*n\nfor i in range(n):\n    v[l[i]-1] = 1\n    while(ptr>=0 and v[ptr]==1):ptr-=1\n    print(i+1-(n-1-ptr)+1,end = \" \")", "n = int(input())\nl = list(map(int,input().split()))\nprint(1,end = \" \")\nptr = n-1\nv = [0]*n\nfor i in range(n):\n    v[l[i]-1] = 1\n    while(ptr>=0 and v[ptr]==1):ptr-=1\n    print(i+1-(n-1-ptr)+1,end = \" \")"]