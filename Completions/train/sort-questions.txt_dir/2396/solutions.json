["# coding: utf-8\n# Your code here!\n\ndef solve(s, c):\n    if(len(s)==1):\n        if s[0]==c:\n            return 0\n        else:\n            return 1\n    ans1 = sum([i!=c for i in s[:len(s)//2]]) + solve(s[len(s)//2:],chr(ord(c)+1))\n    ans2 = sum([i!=c for i in s[len(s)//2:]]) + solve(s[:len(s)//2],chr(ord(c)+1))\n    return min(ans1, ans2)\n    \n    \nfor _ in range(int(input())):\n    input()\n    print(solve(input(),'a'))", "a = None\n\ndef subsolve(l, r, c):\n    nonlocal a\n    if r - l <= 1:\n        return 0 if a[l] == c else 1\n    mid = (l + r) // 2\n    u = subsolve(mid, r, c + 1)\n    for i in range(l, mid):\n        if a[i] != c:\n            u += 1\n    v = subsolve(l, mid, c + 1)\n    for i in range(mid, r):\n        if a[i] != c:\n            v += 1\n    return min(u, v)\n\ndef solve():\n    nonlocal a\n    n = int(input())\n    a = list(map(ord, input()))\n    print(subsolve(0, n, ord('a')))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "def make_good(s, c):\n    if len(s) == 1:\n        return int(s[0] != c)\n    \n    mid = len(s) // 2\n    \n    ans = len(s)\n    for x, y, z, t in [(0, mid, mid, len(s)), (mid, len(s), 0, mid)]:\n        cur_ans = 0\n        for i in s[x:y]:\n            cur_ans += int(i != c)\n        cur_ans += make_good(s[z:t], chr(ord(c) + 1))\n        ans = min(ans, cur_ans)\n    return ans\n    \nfor testcase in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    print(make_good(s, 'a'))\n    \n", "def find(st,count,ans,low,high,char):\n\t#print(st,low,high,\"ss\")\n\tif high-low==0:\n\t\tif chr(char)==st[high]:\n\t\t\tans.append(count)\n\t\telse:\n\t\t\tans.append(count+1)\n\telse:\n\t\tcheck=0\n\t\tmid=(high+low)//2\n\t\tfor k in st[low:mid+1]:\n\t\t\tif k!=chr(char):\n\t\t\t\tcheck+=1\n\t\tfind(st,count+check,ans,mid+1,high,char+1)\n\t\tcheck=0\n\t\tfor k in st[mid+1:high+1]:\n\t\t\tif k!=chr(char):\n\t\t\t\tcheck+=1\n\t\tfind(st,count+check,ans,low,mid,char+1)\n\nfor i in range(int(input())):\n\tn=int(input())\n\tst=input()\n\tans=[]\n\tfind(st,0,ans,0,n-1,97)\n\tprint(min(ans))", "def getAns(c, lo, hi, prefixCnt):\n    if lo+1 == hi:\n        return 1 - (prefixCnt[c][hi] - prefixCnt[c][lo])\n    mid = (lo + hi) // 2\n    ans = 1<<30\n    ans = min(ans, (hi - lo) // 2 - (prefixCnt[c][mid] - prefixCnt[c][lo]) + getAns(c+1, mid, hi, prefixCnt))\n    ans = min(ans, (hi - lo) // 2 - (prefixCnt[c][hi] - prefixCnt[c][mid]) + getAns(c+1, lo, mid, prefixCnt))\n    return ans\n    \nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    prefixCnt = [[0 for _ in range(n+1)] for _ in range(26)]\n    for i in range(n):\n        for j in range(26):\n            prefixCnt[j][i+1] = prefixCnt[j][i]\n        index = ord(s[i]) - ord('a')\n        prefixCnt[index][i+1] += 1\n    print(getAns(0, 0, n, prefixCnt))\n", "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n\ndef recursion(s, start, end, height):\n    if end - start == 1:\n        if s[start] == alphabet[height]:\n            return 0\n        else:\n            return 1\n    else:\n        middle = (start + end) // 2\n        return min(\n            recursion(s, middle, end, height + 1) + (end - start) // 2 - s[start:middle].count(alphabet[height]),\n            recursion(s, start, middle, height + 1) + (end - start) // 2 - s[middle:end].count(alphabet[height]),\n        )\n\n\ndef solve():\n    n = int(input())\n    s = input()\n    print(recursion(s, 0, n, 0))\n\n\nfor _ in range(int(input())):\n    solve()\n", "def want(l,r,depth):\n\n    ret = [0] * 26\n    if l + 1 == r:\n        ret[ad[s[l]]] += 1\n\n        if alp[depth] == s[l]:\n            return 0,ret\n        else:\n            return 1,ret\n    else:\n\n        Lmini , Llis = want(l,(l+r)//2,depth+1)\n        Rmini , Rlis = want((l+r)//2 , r , depth+1)\n\n        LL = ((l+r)//2-l) - Llis[depth]\n        RR = ((l+r)//2-l) - Rlis[depth]\n\n        for i in range(26):\n            Llis[i] += Rlis[i]\n        return min(Lmini+RR , Rmini+LL) , Llis\n\nfrom sys import stdin\n\nalp = \"abcdefghijklmnopqrstuvwxyz\"\nad = {}\nfor i in range(26):\n    ad[alp[i]] = i\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    ans,tmp = want(0,n,0)\n    print (ans)\n", "import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\ninput = stdin.readline\n#print = stdout.write\nletters = ascii_letters[:26]\n\nfor _ in range(int(input())):\n    n = int(input())\n    nx = input().strip()\n    buff = deque()\n    res = 9999999\n    buff.append((nx, 0, 0))\n    while len(buff):\n        x = buff.popleft()\n        if len(x[0]) == 1:\n            if x[0][0] != letters[x[1]]:\n                res = min(res, x[2] + 1)\n            else:\n                res = min(res, x[2])\n            continue\n        left = x[0][:len(x[0]) // 2]\n        right = x[0][len(x[0]) // 2:]\n        buff.append((left, x[1] + 1, x[2] + (len(right) - right.count(letters[x[1]]))))\n        buff.append((right, x[1] + 1, x[2] + (len(left) - left.count(letters[x[1]]))))\n    print(res)\n", "import sys\n# sys.stdin = open(\"in\", \"r\")\n# sys.stdout = open(\"out\", \"w\")\n\ninp = sys.stdin.read().split(); ii = 0\nt = int(inp[0]); ii += 1\nfor _ in range(t):\n\tn = int(inp[ii]); ii += 1\n\ts = inp[ii]; ii += 1\n\tif n == 1:\n\t\tif 'a' in s:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(1)\n\t\tcontinue\n\tstack = [[0, n, ord('a'), 0]]\n\tans = n\n\twhile stack:\n\t\tl, r, c, cost = stack[-1]\n\t\tstack.pop()\n\t\tif r-l == 1:\n\t\t\tif chr(c) in s[l:r]:\n\t\t\t\tans = min(ans, cost)\n\t\t\telse:\n\t\t\t\tans = min(ans, cost+1)\n\t\t\tcontinue\n\t\t\n\t\tmid = (l+r)//2\n\t\tstack.append([l, mid, c+1, r-mid+cost-s[mid:r].count(chr(c))])\n\t\tstack.append([mid, r, c+1, mid-l+cost-s[l:mid].count(chr(c))])\n\tprint(ans)\n", "def solve(n, s):\n    def _doit(l, r, c):\n        ch = chr(ord('a') + c)\n        if l+1 == r:\n            return int(s[l] != ch)\n        mid = l + (r-l)//2\n        non1 = sum(int(s[i] != ch) for i in range(l, mid))\n        non2 = sum(int(s[i] != ch) for i in range(mid, r))\n        return min(non1 + _doit(mid, r, c+1), non2 + _doit(l, mid, c+1))\n    return _doit(0, n, 0)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    # a = list(map(int, input().split()))\n    # x, y, z = map(int, input().split())\n    print(solve(n, s))", "def f(s,symb):\n    if len(s)==1:return int(s[0]!=symb)\n    f1=f2=0\n    c1=''\n    c2=''\n    for i in range(len(s)//2):f1+=int(s[i]!=symb);c1+=s[i]\n    for i in range(len(s)//2,len(s)):f2+=int(s[i]!=symb);c2+=s[i]\n    ns=chr(ord(symb)+1)\n    return min(f1+f(c2,ns),f2+f(c1,ns))\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    print(f(s,'a'))", "alph=\"abcdefghijklmnopqrstuvwqyz\"\ndef solve(s,i,n):\n    if n==1:\n        if s[0]==alph[i]:\n            return 0\n        else:\n            return 1\n    else:\n        c1=0\n        c2=0\n        s1=s[0:n//2]\n        s2=s[n//2:n]\n        for x in s1:\n            if x!=alph[i]:\n                c1+=1\n        for x in s2:\n            if x!=alph[i]:\n                c2+=1\n        return min(c1+solve(s2,i+1,n//2),c2+solve(s1,i+1,n//2))\nimport sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n=int(input())\n    s=input()\n    s=s[0:n]\n    print(solve(s,0,n))", "import math\n#r,g,b=map(int,input().split())\n#list1 = input().split()\n#for i in range(len(list1)):\n#    list1[i] = int(list1[i])\n#print(list1)\n#print(r, g, b)\n# arr = [[0 for x in range(columns)] for y in range(rows)]\n\nlookup = \"abcdefghijklmnopqrstuvwxyz\"\nt=int(input())\n\ndef helper(string, k):\n    n = len(string)\n    m = n//2\n    if(n == 1 and string  == lookup[k]):\n        return 0\n    elif(n == 1):\n        return 1\n    else:\n        front1 = helper(string[0:m], k+1)\n        back1 = helper(string[m:n], k+1)\n        for i in range(m):\n            if(string[i] != lookup[k]):\n                back1 += 1\n        for i in range(m):\n            if(string[m + i] != lookup[k]):\n                front1 += 1\n        return min(front1, back1)\n\nfor i in range(t):\n    n = int(input())\n    string = input()\n    print(helper(string, 0))\n\n\n\n    \n        \n"]