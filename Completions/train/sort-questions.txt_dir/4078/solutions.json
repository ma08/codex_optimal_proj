["def first_n_smallest(arr, n):\n    lst = sorted(enumerate(arr), key=lambda it: it[1])[:n]\n    lst.sort(key=lambda it:it[0])\n    return [v for _,v in lst]", "def first_n_smallest(arr, n):\n    m = sorted(arr)[:n]\n    return [m.pop(m.index(i)) for i in arr if i in m]", "from operator import itemgetter\ndef first_n_smallest (arr, n):\n    by_index, by_value = map(itemgetter, (0, 1))\n    all_ascending = sorted(enumerate(arr), key=by_value)\n    n_chronologic = sorted(all_ascending[:n], key=by_index)\n    return list(map(by_value, n_chronologic))", "def first_n_smallest(arr, n):\n    return [x[1] for x in sorted(sorted(enumerate(arr), key=lambda x: x[1])[:n])]", "def first_n_smallest(arr, n):\n    smallest = []\n    replacement = max(arr) + 1\n    while n and arr:\n        num = min(arr)\n        idx = arr.index(num)\n        arr[idx] = replacement\n        smallest.append((num, idx))\n        n -= 1\n    sort = sorted(smallest, key=lambda pair: pair[1])\n    return [p[0] for p in sort]", "def first_n_smallest(lst, n):\n    std = sorted(enumerate(lst), key=lambda e: e[1])[:n]\n    return [n for i, n in sorted(std)]\n", "from collections import Counter\n\ndef first_n_smallest(arr, n):\n    def f():\n        xs = Counter(sorted(arr)[:n])\n        for x in arr:\n            if xs[x]:\n                xs[x] -= 1\n                yield x\n    return list(f())", "from heapq import nsmallest\ndef first_n_smallest(arr, n):\n    small = nsmallest(n, arr)\n    return [a for a in arr if a in small and (small.remove(a) or 1)]", "first_n_smallest=lambda a,n:[v for _,v in sorted(sorted(enumerate(a),key=lambda x:x[1])[:n])]", "def first_n_smallest(arr, n):\n    for i in range(len(arr)-n):\n        arr.pop(len(arr)-1 - arr[::-1].index(max(arr)))\n    return arr\n"]