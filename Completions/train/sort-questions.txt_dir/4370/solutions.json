["def gen(n, d):\n    if d == 0 or n == 1:\n        yield [d]*n\n    else:\n        for x in range(d+1):\n            for y in gen(n-1, d-x):\n                yield [x] + y\n\ndef indices(n, d):\n    return list(gen(n, d))", "import itertools\ndef indices(n, d):\n    return list(recurse(n,d, []))\n\ndef recurse(n, d, prefix):\n    if n == 0:\n        return prefix\n    if n == 1:\n        return [prefix + [d]]\n    res = []\n    for i in range(d+1):\n        res += recurse(n-1, d-i, prefix + [i])\n    return res\n\n", "def indices(n, d):\n    return [[r] + point for r in range(d + 1)\n                        for point in indices(n-1, d-r)] if n > 1 else [[d]]\n", "import itertools \n\ndic={1:[[1]],2:[[2],[1,1]],3:[[3],[2,1],[1,1,1]],\n    4:[[4],[3,1],[2,1,1],[2,2],[1,1,1,1]],\n    5:[[5],[4,1],[3,1,1],[3,2],[2,1,1,1],[2,2,1],[1,1,1,1,1]],\n    6:[[6],[5,1],[4,1,1],[4,2],[3,1,1,1],[3,2,1],[3,3],[2,1,1,1,1],[2,2,1,1],[2,2,2],[1,1,1,1,1,1]],\n    7:[[7],[6,1],[5,1,1],[5,2],[4,1,1,1],[4,2,1],[4,3],[3,1,1,1,1],[3,2,1,1],[3,2,2],[3,3,1],[2,1,1,1,1,1],[2,2,1,1,1],[2,2,2,1],[1,1,1,1,1,1,1]],\n    8:[[8],[7,1],[6,1,1],[6,2],[5,1,1,1],[5,2,1],[5,3],[4,1,1,1,1],[4,2,1,1],[4,2,2],[4,3,1],[4,4],[3,1,1,1,1,1],[3,2,1,1,1],[3,2,2,1],[3,3,1,1],[2, 3, 3],[2,1,1,1,1,1,1],[2,2,1,1,1,1],[2,2,2,1,1],[2,2,2,2],[1,1,1,1,1,1,1,1]],\n    9:[[9],[8,1],[7,1,1],[7,2],[6,1,1,1],[6,2,1],[6,3],[5,1,1,1,1],[5,2,1,1],[5,2,2],[5,3,1],[5,4],[4,3,1, 1],[4,1,1,1,1,1],[4,2,1,1,1],[4,2,2,1],[4,2,3],[3,3,3],[3,3,1,1,1],[3,3,2,1],[3,1,1,1,1,1,1],[3,2,1,1,1,1],[3,2,2,1,1],[3,2,2,2],[4,4,1],[2,1,1,1,1,1,1,1],[2,2,1,1,1,1,1],[2,2,2,1,1,1],[2,2,2,2,1],[1,1,1,1,1,1,1,1,1]],\n        \n    }\n\n\ndef indices(n, d):\n    print (n,d)\n    l=[]\n    original=[0]*n\n    if not d:\n        return [original]\n\n    for i in dic[d]:\n        if len(i)>n:\n            continue\n        t=i+[0]*(n-len(i))\n        l.extend(list(set(list(itertools.permutations(t)  )  )))\n    print(\"c->\",sorted(l)  )\n    \n    \n    \n\n    return map(list,l)", "def indices(n, d):\n    result=[]\n    temp=[]\n    def tt (n, d,temp):\n        if d==1:\n            result.extend([temp+[n]])\n            return 0\n        for i in range(0,n+1):\n            aa=temp+[i]\n            tt(n-i, d-1,aa)\n    tt(d, n,temp)\n    return result", "def indices(n, d):\n    if n == 1: return [[d]]\n    if d == 0: return [[0 for i in range(n)]]\n    sols = []\n    for i in range(d+1):\n        sols += [subsol + [i] for subsol in indices(n-1,d-i)]\n    \n    return sols\n    raise NotImplementedError('todo')", "def indices(n, d):\n\n    result = ([i] for i in range(d + 1))  # start with all possible lists of length 1 with sum within limit\n\n    # until have lists of len n: add every possible num to each list in result that doesn't put over limit d\n    for iteration in range(n - 1):\n        result = (i + [j] for i in result for j in range(d + 1) if sum(i) + j <= d)\n\n    return list(filter(lambda r: sum(r) == d, result))  # return combinations with sum d", "def indices(n, d):\n    if n == 1:\n        return [[d]]\n    result = []\n    for i in range(d+1):\n        for x in indices(n-1, d-i):\n            result.append([i] + x)\n    return result\n", "def indices(n, d):\n    if d<0:\n        return []\n    elif n==1:\n        return [[d]]\n    elif n==2:\n        return [[i,d-i] for i in range(d+1)]\n    else:\n        return [[i]+p for i in range(d+1) for p in indices(n-1,d-i)]", "def indices(n, d):\n    from itertools import combinations_with_replacement\n    \n    lst = []\n    for c in combinations_with_replacement(range(n), d):\n        base = [0]*n\n        for i in c:\n            base[i] += 1\n        lst.append(base)\n    return lst"]