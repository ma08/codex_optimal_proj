["def sort_csv_columns(csv_file_content, sep=';', end='\\n'):\n    '''Sort a CSV file by column name.'''\n    csv_columns = zip(*(row.split(sep) for row in csv_file_content.split(end)))\n    sorted_columns = sorted(csv_columns, key=lambda col: col[0].lower())\n    return end.join(sep.join(row) for row in zip(*sorted_columns))", "def sort_csv_columns(csv_file_content):\n    return '\\n'.join(';'.join(sorted_row) for sorted_row in zip(*sorted(\n        (zip(*(row.split(';') for row in csv_file_content.split('\\n')))),\n        key=lambda col: col[0].lower()\n    )))", "def sort_csv_columns(csv_file_content):\n    array = (line.split(\";\") for line in csv_file_content.split(\"\\n\"))\n    trans = list(zip(*array))\n    sortd = sorted(trans, key=lambda col: col[0].lower())\n    untrans = list(zip(*sortd))\n    return \"\\n\".join(\";\".join(line) for line in untrans)\n\n\n    # ugly one-liner\n    #return \"\\n\".join(\";\".join(t) for t in zip(*sorted(zip(*(line.split(\";\") for line in csv_file_content.split(\"\\n\"))), key=lambda t: t[0].lower())))\n", "SEP = ';'\ndef sort_csv_columns(csv):\n    names = csv.split('\\n', 1)[0].lower().split(SEP)\n    d = {names.index(c):i for i,c in enumerate(sorted(names))}\n    return '\\n'.join(SEP.join(e[1] for e in sorted([(d[i], field) for i, field in enumerate(row.split(SEP))])) for row in csv.split('\\n'))", "def sort_csv_columns(csv_file_content):\n    rows = csv_file_content.split('\\n')\n    titles = rows[0].split(\";\")\n    order = sorted(range(len(titles)), key=lambda k: titles[k].lower())\n    newpages = []\n    for row in rows:\n        newpages.append(';'.join([row.split(\";\")[c] for c in order]))\n    return '\\n'.join(newpages)", "# Not really needed but why not?\nfrom csv import reader\n\ndef sort_csv_columns(csv_file_content):\n    return '\\n'.join(map(';'.join, zip(*sorted(zip(*reader(csv_file_content.split('\\n'), delimiter=\";\")), key=lambda x:x[0].lower()))))", "def sort_csv_columns(csv):\n    s = ''\n    res = sorted(zip(*[x.split(';') for x in csv.split('\\n')]), key=lambda x: x[0].lower())\n    for i in range(len(res[-1])):\n        s += ';'.join(x[i] for x in res) + '\\n'\n    return s.strip('\\n')", "from collections import defaultdict\ndef sort_csv_columns(s):\n    d = defaultdict(list)\n    for i in s.splitlines():\n        for j, k in enumerate(i.split(\";\")):\n            d[j].append(k)\n    r = zip(*[i[1] for i in sorted(d.items(), key=lambda x:(x[1][0].lower(),x[1][0]))])\n    return \"\\n\".join([\";\".join(i) for i in r])", "def sort_csv_columns(csv_file_content):\n    table = sorted(zip(*(row.split(';') for row in csv_file_content.split('\\n'))), key=lambda col: col[0].lower())\n    return '\\n'.join(';'.join(row) for row in zip(*table))", "import string\ndef sort_csv_columns(csv_file_content):\n    orderby=' _0123456789'+string.ascii_lowercase\n    l=list(zip(*[i.split(';') for i in csv_file_content.split('\\n')]))\n    l.sort(key=lambda a:[orderby.index(i) for i in a[0].lower()])\n    return '\\n'.join(';'.join(i) for i in zip(*l))"]