["from bisect import bisect_right as bisect\n\nRES = [[] for _ in range(11)]\n\nfor c in range(1,1001):\n    c3 = c**3\n    nSol = sum( ((c3-a**2)**.5).is_integer() for a in range(1,int((c3//2)**.5+1)))\n    if 0 < nSol < 11: RES[nSol].append(c)\n    \n\ndef find_abc_sumsqcube(c_max, nSol):\n    return RES[nSol][:bisect(RES[nSol], c_max)]", "from math import sqrt\ndef nb_sol_cube_is_sumsq(c):\n    count = 0\n    c3 = c ** 3\n    modc3 = c3 % 4\n    if (modc3 == 3) or (modc3 == 2): return 0\n    for a in range(1, int(sqrt(c ** 3)) + 1):\n        b = sqrt(c3 - a ** 2)\n        if (int(b) == b) and (0 < b <= a):\n            count += 1\n    return count\ndef nb_abc_sol(c_max):\n    res, c = [], 1\n    while (c <= c_max):\n        res.append(nb_sol_cube_is_sumsq(c))\n        c += 1\n    return res\nsol = nb_abc_sol(1001)\ndef find_abc_sumsqcube(c_max, num_sol):\n    return [i + 1 for i, count in enumerate(sol[:c_max]) if count == num_sol]", "from bisect import bisect_right\nfrom math import sqrt\n\nSOL = [[] for _ in range(11)]\n\nfor c in range(1, 1001):\n    c3 = c ** 3\n    num_sol = sum(sqrt(c3 - a ** 2).is_integer() for a in range(1, int(sqrt(c3 // 2) + 1)))\n    if 0 < num_sol < 11: SOL[num_sol].append(c)\n\n\ndef find_abc_sumsqcube(c_max, num_sol):\n    res = SOL[num_sol]\n    return res[:bisect_right(res, c_max)]", "dic1 = {1: [2, 8, 18, 32, 72, 98, 128, 162, 242, 288, 392, 512, 648, 722, 882, 968], \n 2: [5, 10, 13, 17, 20, 26, 29, 34, 37, 40, 41, 45, 52, 53, 58, 61, 68, 73, 74, 80, 82, 89, 90, 97, 101, 104, 106, 109, 113, 116, 117, 122, 136, 137, 146, 148, 149, 153, 157, 160, 164, 173, 178, 180, 181, 193, 194, 197, 202, 208, 212, 218, 226, 229, 232, 233, 234, 241, 244, 245, 257, 261, 269, 272, 274, 277, 281, 292, 293, 296, 298, 306, 313, 314, 317, 320, 328, 333, 337, 346, 349, 353, 356, 360, 362, 369, 373, 386, 388, 389, 394, 397, 401, 404, 405, 409, 416, 421, 424, 433, 436, 449, 452, 457, 458, 461, 464, 466, 468, 477, 482, 488, 490, 509, 514, 521, 522, 538, 541, 544, 548, 549, 554, 557, 562, 569, 577, 584, 586, 592, 593, 596, 601, 605, 612, 613, 617, 626, 628, 634, 637, 640, 641, 653, 656, 657, 661, 666, 673, 674, 677, 692, 698, 701, 706, 709, 712, 720, 724, 733, 738, 746, 757, 761, 769, 772, 773, 776, 778, 788, 794, 797, 801, 802, 808, 809, 810, 818, 821, 829, 832, 833, 842, 848, 853, 857, 866, 872, 873, 877, 881, 898, 904, 909, 914, 916, 922, 928, 929, 932, 936, 937, 941, 953, 954, 964, 976, 977, 980, 981, 997], \n 3: [25, 100, 169, 225, 289, 400, 676, 841, 900], \n 4: [50, 200, 338, 450, 578, 800], \n 8: [65, 85, 130, 145, 170, 185, 205, 221, 260, 265, 290, 305, 340, 365, 370, 377, 410, 442, 445, 481, 485, 493, 505, 520, 530, 533, 545, 565, 580, 585, 610, 629, 680, 685, 689, 697, 730, 740, 745, 754, 765, 785, 793, 820, 865, 884, 890, 901, 905, 949, 962, 965, 970, 985, 986], \n 5: [125, 250, 500, 1000], 14: [325, 425, 650, 725, 845, 850, 925], 6: [625]}\n\nimport bisect\ndef find_abc_sumsqcube(c_max, num_sol):\n    if num_sol not in dic1.keys():\n        return []\n    lst = dic1[num_sol]\n    idx = bisect.bisect_right(lst, c_max)\n    return lst[:idx]", "import math\nfrom functools import lru_cache\n\n@lru_cache(maxsize = 1024)\ndef solutions(c):\n    cube = c ** 3\n    return sum(1 for a in range(1,int((cube//2)**.5)+1) if ((cube-a**2)**.5).is_integer())\n\n\ndef find_abc_sumsqcube(c_max, num_sol):\n    result = []\n    for c in range(2,c_max+1):\n        if solutions(c) == num_sol:\n            result.append(c)\n    return result\n"]