["n = 500000\nsieve, PRIMES = [0]*(n//2+1), [0,2]\nfor i in range(3, n+1, 2):\n    if not sieve[i//2]:\n        PRIMES.append(i)\n        for j in range(i**2, n+1, i*2): sieve[j//2] = 1\n\nDOMINANTS = []\nfor p in PRIMES:\n    if p >= len(PRIMES): break\n    DOMINANTS.append(PRIMES[p])\n\ndef solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)", "from itertools import compress, takewhile\nimport numpy as np\n\ns = np.ones(500000)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5)+1, 2):\n    if s[i]:\n        s[i*i::i] = 0\nprimes = list(compress(range(len(s)), s))\nxs = [primes[i-1] for i in takewhile(lambda x: x < len(primes), primes)]\n\ndef solve(a,b):\n    return sum(xs[np.searchsorted(xs, a):np.searchsorted(xs, b, side='right')])", "n = 10 ** 6\ndominant, primes, sieve = [], set(), [0, 0] + [1] * (n-2)\nfor k in range(n):\n    if sieve[k]:\n        primes.add(k)\n        sieve[k*k::k] = ((n - k*k - 1) // k + 1) * [0]\n        if len(primes) in primes: dominant.append(k)\n\nfrom bisect import bisect\nsolve = lambda a, b: sum(dominant[bisect(dominant, a-1): bisect(dominant, b)])", "primes = [3]\nprimes_set = {2, 3}\ndominant = [3]\n\nfor n in range(5, 500000, 2):\n    for p in primes:\n        if p*p > n:\n            primes.append(n)\n            primes_set.add(n)\n            if len(primes_set) in primes_set:\n                dominant.append(n)\n            break\n        if n%p == 0:\n            break\n\ndef solve(a, b):\n    return sum(p for p in dominant if a <= p <= b)", "def list_simple_num(a):\n    lst = list(range(a + 1))\n    lst[1] = 0\n    for l in lst:\n        if l != 0:\n            for j in range(2 * l, len(lst), l):\n                lst[j] = 0\n    return lst\n        \ndef solve(a,b):\n    lst  = tuple(filter(bool, list_simple_num(b)))\n    ind  = list_simple_num(len(lst))[1:]\n    return sum(lst for ind,lst in zip(ind,lst) if ind != 0 and lst > a)", "import itertools \ncompress = itertools.compress \ndef primeSieve(n):\n    if n < 2:\n        return []\n    r = [False,True] * (n//2)+[True]\n    r[1],r[2]=False, True\n    for i in range(3,int(1 + n**0.5),2):\n        if r[i]:\n            r[i*i::2*i] = [False] * ((n+2*i-1-i*i)//(2*i))\n    r = list(compress(list(range(len(r))),r))\n    if r[-1] %2 == 0:\n        r.pop() \n    return r\nprimes = primeSieve(500000)\n\ndicti = dict() \nfor i in range(len(primes)): \n    dicti[primes[i]] = i+1\n    \nprimeSet = frozenset(primes) \n\ndef solve(a,b): \n    sum = 0\n    for i in range(a,b+1): \n        if i in primeSet: \n            if dicti[i] in primeSet: \n                sum += i\n    return sum\n\n\n", "a = [False, False]+[True]*500000; p = []\nfor (i, isprime) in enumerate(a):\n    if isprime:\n        p.append(i)\n        for n in range(i*i, 500001, i): a[n] = False\ndp = [p[i-1] for i in p if i-1<len(p)]\ndef solve(a,b):\n    return sum(n for n in dp if a<=n<=b)", "def solve(a, b):\n    primes = [False,2] + [x for x in range(3, b+1, 2) if all(x % d for d in range(3, int(x**.5+1), 2))]\n    dom_pos = [primes[x] for x in primes if x < len(primes)]\n    return sum(x for x in dom_pos if a <= x <= b)", "def solve(a,b):\n\n    \n    range_n = b+1 \n    is_prime = [True] * range_n\n    primes = [0]\n    result = 0\n    for i in range (2, range_n):\n        if is_prime[i]:\n            primes += i,\n            for j in range (2*i, range_n, i):\n                is_prime[j] = False\n\n    for i in range (2, len(primes)):\n        if primes[i] >= a and is_prime[i]: result += primes[i]\n            \n    return result"]