["def nth_smallest(arr, n):\n    s = set(arr)\n    return sorted(s)[n-1] if n<=len(s) else None", "def nth_smallest(arr, n):\n    try:\n        return sorted(set(arr))[n-1]\n    except:\n        pass", "import random\n\ndef partition(vector, left, right, pivotIndex):\n    pivotValue = vector[pivotIndex]\n    vector[pivotIndex], vector[right] = vector[right], vector[pivotIndex]  # Move pivot to end\n    storeIndex = left\n    for i in range(left, right):\n        if vector[i] < pivotValue:\n            vector[storeIndex], vector[i] = vector[i], vector[storeIndex]\n            storeIndex += 1\n    vector[right], vector[storeIndex] = vector[storeIndex], vector[right]  # Move pivot to its final place\n    return storeIndex\n\ndef select(vector, left, right, k):\n    \"Returns the k-th smallest, (k >= 0), element of vector within vector[left:right+1] inclusive.\"\n    if k < len(vector):\n        while True:\n            pivotIndex = random.randint(left, right)     # select pivotIndex between left and right\n            pivotNewIndex = partition(vector, left, right, pivotIndex)\n            pivotDist = pivotNewIndex - left\n            if pivotDist == k:\n                return vector[pivotNewIndex]\n            elif k < pivotDist:\n                right = pivotNewIndex - 1\n            else:\n                k -= pivotDist + 1\n                left = pivotNewIndex + 1\n\ndef nth_smallest(arr, n):\n    unique = list(set(arr))\n    return select(unique, 0, len(unique)-1, n-1)", "def nth_smallest(arr,k):\n   \n    if len(set(arr)) == 1:\n        return arr[0]\n    else:\n        if len(set(arr)) < k:\n            return None\n\n    pivot = arr[0]\n    lesser = list(set([x for x in arr[1:] if x < pivot]))\n    greater = list(set([x for x in arr[1:] if x > pivot]))\n\n    if len(lesser) >= k:\n        return nth_smallest(lesser,k)\n    \n    elif len(lesser) == k-1:\n        return pivot\n    \n    else:\n        return nth_smallest(greater, k-len(lesser)-1)\n", "def nth_smallest(arr, n):\n    s = set(arr)\n    return None if len(s) < n else sorted(s)[n-1]", "def nth_smallest(arr, n):\n    s = set(arr)\n    if n <= len(s):\n        return sorted(s)[n-1]", "from heapq import *\ndef nth_smallest(arr, n):\n    arr = list(set(arr))\n    heapify(arr)\n\n    if n > len(arr):\n        return None\n\n    x = 0\n    for i in range(n):\n        x = heappop(arr)\n    return x", "def nth_smallest(arr, n):\n    x = list(dict.fromkeys(arr))\n    x.sort(key=int)\n    return None if n > len(x) else x[n-1]", "nth_smallest = lambda a,n: None if len(set(a))<n else list(sorted(set(a)))[n-1]", "def nth_smallest(arr, n):\n    sorted_arr = sorted(set(arr))\n    if n <= len(sorted_arr):\n        return sorted_arr[n - 1]", "def nth_smallest(arr, n):\n    arr=sorted(list(set(arr)))\n    if n > len(arr):\n        return None\n    return arr[n-1]"]