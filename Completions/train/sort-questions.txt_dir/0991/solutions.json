["n,k, q = list(map(int, input().split()))\nmod = 10 ** 9 + 7\nA = [0] * n\na, b, c, d, e, f, r, s, t, m, x = list(map(int, input().split())) \nA[0] = x \n\nfor x in range(1, n):\n if pow(t, x+1, s) <= r:\n  A[x] = (a*pow(A[x-1], 2, m) + b*A[x-1] + c) % m\n else:\n  A[x] = (d*pow(A[x-1], 2, m) + e*A[x-1] + f) % m\n  \ndef SRMQ(arr, k):\n from collections import deque\n n = len(arr)\n ans = [None] * n\n deque = deque()\n for i in range(len(arr)):\n  while deque and deque[-1] > arr[i]:\n   deque.pop()\n  deque.append(arr[i])\n  if i >= k and arr[i-k] == deque[0]:\n   deque.popleft()\n  if i >= k-1:\n   ans[i-k+1] = deque[0]\n return ans\n   \nv = SRMQ(A, k) \n\nL1, La, Lc, Lm, D1, Da, Dc, Dm = list(map(int, input().split()))\ns = 0 \nprod = 1 \nfor _ in range(q):\n L1 = (La * L1 + Lc) % Lm;\n D1 = (Da * D1 + Dc) %Dm; \n L = L1 + 1;\n R = min(L + k - 1 + D1, n);\n z = min(v[L-1], v[R-k])\n s += z \n \n prod = (prod * z) % mod\nprint(s, prod)\n\n", "mod=10**9+7\nN,K,Q=list(map(int,input().split()))\n\nA=[0,0]\n#min_t=[-1]*((N*N-1)/2)\n#print min_t\na,b,c,d,e,f,r,s,t,m,A[1]=list(map(int,input().split()))\n\nL1,La,Lc,Lm,D1,Da,Dc,Dm=list(map(int,input().split()))\n\ntmpt=t\nmin_arr=[0]\nfor x in range(2,N+1):\n tmpt=(tmpt*t)%s\n if tmpt <= r:\n  A.append(( A[x-1]*(a*A[x-1] + b) + c) % m)\n else:\n  A.append(( A[x-1]*(d*A[x-1] + e) + f) % m)\nfor x in range(1,N-K+2):\n min_arr.append(min(A[x:x+K]))\n\nres_sum=0\nres_pro=1\nfor x in range(1,Q+1):\n L1 = (La * L1 + Lc) % Lm\n D1 = (Da * D1 + Dc) % Dm \n L = L1 + 1\n R = min(L + K - 1 + D1, N)\n R=R-K+1\n #print min_arr,L,R,min_arr[L:R+1]\n if L==R:\n  tmp=min_arr[L]\n else:\n  tmp=min(min_arr[L:R+1])\n res_sum+=tmp\n res_pro=(res_pro*tmp)% mod\nprint(res_sum,res_pro)\n"]