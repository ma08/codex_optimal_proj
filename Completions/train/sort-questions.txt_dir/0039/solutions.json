["t=int(input())\n\nfor tt in range(t):\n    a,b,p=map(int,input().split())\n    s=input()\n    n=len(s)\n    cost = [0]*n\n    cost[-1] = 0\n    typ = ''\n    i=n-2\n    while i>=0:\n        if s[i]==typ:\n            cost[i] = cost[i+1]\n        else:\n            typ = s[i]\n            cost[i] = cost[i+1] + (a if typ=='A' else b)\n        i-=1\n    i=0\n    while cost[i] > p:\n        i+=1\n    print(i+1)", "from sys import stdin,stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nt, = rl()\nfor _ in range(t):\n    a,b,p = rl()\n    s = stdin.readline().rstrip()\n    r = 1\n    t = ''\n    for i in range(len(s)-1,0,-1):\n        if s[i-1] != t:\n            t = s[i-1]\n            p -= a if t == 'A' else b\n            if p < 0:\n                r = i+1\n                break\n    print(r)\n", "# from collections import defaultdict\n\nfor _ in range(int(input())):\n\t# n = int(input())\n\ta, b, p = map(int, input().split())\n\ts = input()\n\tn = len(s)\n\tmoney = [0] * n\n\tlast = 'C'\n\tfor i in range(n-2, -1, -1):\n\t\tif s[i] == last:\n\t\t\tmoney[i] = money[i+1]\n\t\telif s[i] == 'A':\n\t\t\tmoney[i] = money[i+1] + a\n\t\telse:\n\t\t\tmoney[i] = money[i+1] + b\n\t\tlast = s[i]\n\n\tfor i in range(1, n+1):\n\t\tif money[i-1] <= p:\n\t\t\tprint(i)\n\t\t\tbreak", "from math import *\nfrom collections import *\nt = int(input())\nfor y in range(t):\n\ta,b,p = map(int,input().split())\n\ts = input()\n\tn = len(s)\n\ti = n-2\n\tans = n\n\tct = 0\n\twhile(i >= 0):\n\t\tst = s[i]\n\t\twhile(i >= 0 and s[i] == st):\n\t\t\ti -= 1\n\t\tif(st == 'A'):\n\t\t\tct += a\n\t\telse:\n\t\t\tct += b\n\t\tif(ct <= p):\n\t\t\tans = i+2\n\tprint(ans)", "for _ in range(int(input())):\n    a, b, p = list(map(int, input().split()))\n    ar = list(input())\n    i = len(ar) - 2\n    now = ar[i]\n    flag = 0\n    if now == 'A':\n        if p >= a:\n            flag = 1\n    else:\n        if p >= b:\n            flag = 1\n    while i >= 0 and p > 0 and flag == 1:\n        if ar[i] == now:\n            i -= 1\n        else:\n            if ar[i + 1] == 'A':\n                p -= a\n            else:\n                p -= b\n            if ar[i] == 'A':\n                if p < a:\n                    break\n                now = 'A'\n            else:\n                if p < b:\n                    break\n                now = 'B'\n    print(i + 2)", "t = int(input())\nfor i in range(t):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    n = len(s)\n    ind = n\n    sum = 0\n    while sum <= p and ind > 0:\n        ind -= 1\n        if ind == n - 1 or s[ind - 1] != s[ind]:\n            if s[ind - 1] == \"A\":\n                sum += a\n            else:\n                sum += b\n    print(ind + 1)\n", "t = int(input())\nfor tt in range(t):\n\ta, b, p = map(int, input().split())\n\ts = input()\n\tcs = {'A':a, 'B':b}\n\tc = 0\n\ti = len(s)-1\n\twhile i > 0 and c+cs[s[i-1]] <= p:\n\t\t# print(tt, i)\n\t\tc += cs[s[i-1]]\n\t\ti -= 1\n\t\twhile i > 0 and s[i-1] == s[i]:\n\t\t\ti -= 1\n\tprint(i+1)", "\n\n\"\"\"\nNTC here\n\"\"\" \nimport sys\ninp= sys.stdin.readline\ninput = lambda : inp().strip()\n# flush= sys.stdout.flush\n# import threading\n# sys.setrecursionlimit(10**6)\n# threading.stack_size(2**26)\n\ndef iin(): return int(input())\ndef lin(): return list(map(int, input().split()))\n\n\n\ndef main():\n    T = iin()\n    while T:\n        T-=1\n        a, b, p = lin()\n        \n        s = list(input())\n        n = len(s)\n        ans = []\n        ch = 'D'\n        for i in range( n-1):\n            if s[i]!=ch:\n                ch = s[i]\n                x = a\n                if ch=='B':x=b\n                ans.append([x, i])\n        l = len(ans)\n        ans = ans[::-1]\n        for i in range(1, l):\n            ans[i][0]+=ans[i-1][0]\n        ans = ans[::-1]\n        for i, j in ans:\n            if p>=i:\n                print(j+1)\n                break\n        else:\n            print(n)\n        #print(ans)\n\n\nmain()\n\n#threading.Thread(target=main).start()\n\n", "for _ in range(int(input())):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    naw = 0\n    for q in range(len(s)-2, -1, -1):\n        if (q == len(s)-2 or s[q] != s[q+1]) and naw+(a if s[q] == 'A' else b) > p:\n            print(q+2)\n            break\n        elif q == len(s)-2 or s[q] != s[q+1]:\n            naw += (a if s[q] == 'A' else b)\n    else:\n        print(1)\n", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    a, b, p = list(map(int, input().split(\" \")))\n    s = input().rstrip()\n    \n    costs = [0 for x in range(len(s))]\n    \n    costs[len(s)-1] = 0\n    if(s[len(s)-2] == \"B\"):\n        costs[len(s)-2] = b\n    else:\n        costs[len(s)-2] = a\n    for it in range(3, len(s)+1):\n        if(s[len(s)-it] !=s[len(s)-it+1]):\n            costs[len(s)-it] = costs[len(s)-it+1]+(s[len(s)-it]==\"A\")*a+(s[len(s)-it]==\"B\")*b\n        else:\n            costs[len(s)-it] = costs[len(s)-it+1]\n\n\n    for j in range(len(costs)):\n        if(costs[j]<=p):\n            print(j+1)\n            break\n    \n", "t = int(input())\nfor _ in range(t):\n  a,b,p = map(int,input().split())\n  s = list(input())\n  n = len(s)\n  flg = 0\n  ans = n\n  y = \"C\"\n  k = 0\n  while s:\n    x = s.pop()\n    if not flg:\n      flg = 1\n      continue\n    if x == y:\n      ans -= 1\n      continue\n    else:\n      if x == \"A\":\n        if p<a:\n          print(ans)\n          k = 1\n          break\n        else:\n          p -= a\n      if x == \"B\":\n        if p<b:\n          print(ans)\n          k = 1\n          break\n        else:\n          p -= b\n    y = x\n    ans -= 1\n  if s == [] and k == 0:\n    print(1)", "for t in range(int(input())):\n    a, b, p = [int(i) for i in input().split()]\n    s = input()[::-1]\n    n = len(s)\n    curr = s[1]\n    res = 0\n    for i in range(1, n):\n        if (s[i] != curr):\n            if (curr == \"A\"):\n                p -= a\n                curr = \"B\"\n            else:\n                p -= b\n                curr = \"A\"\n            if (p < 0):\n                break\n            else:\n                res = i - 1\n    if (curr == \"A\"):\n        p -= a\n    else:\n        p -= b\n    if (p < 0):\n        print(n - res)\n    else:\n        print(1)", "# from collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().strip()\ndef d(x):\n    if x=='A':\n        return a\n    return b\ndef f(j):\n    su = d(s[j])\n    for i in range(j+1, len(s) - 1):\n        if s[i]!=s[i-1]:\n            su+=d(s[i])\n    return su\nfor i in range(int(input())):\n    a,b,p = map(int,input().split())\n    s = list(input())\n    l = -1\n    r = len(s)-1\n    while r - l > 1:\n        m = (r + l) // 2\n        if f(m) > p:\n            l = m\n        else:\n            r = m\n    print(r+1)", "from math import inf\nt = int(input())\nfor q in range(t):\n    a, b, p = [int(i) for i in input().split()]\n    s = input()\n    l = len(s) \n    dp = [0] * l\n    if s[l - 2] == 'A':\n        dp[l - 2] = a\n    else:\n        dp[l - 2] = b\n    for i in range(l - 3, -1, -1):\n        if s[i] == s[i + 1]:\n            dp[i] = dp[i + 1]\n        else:\n            if s[i] == 'A':\n                dp[i] = dp[i + 1] + a\n            else:\n                dp[i] = dp[i + 1] + b\n    #print(dp)\n    for i in range(l):\n        if p >= dp[i]:\n            print(i + 1)\n            break\n", "# import sys\n# input = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n-2, -1, -1):\n        if i == n-2:\n            dp[i] = a if s[i] == 'A' else b\n        elif s[i] == s[i+1]:\n            dp[i] = dp[i+1]\n        else:\n            dp[i] = dp[i+1] + (a if s[i] == 'A' else b)\n    ans = -1\n    for i in range(n):\n        if dp[i] <= p:\n            ans = i+1\n            break\n    print(ans)", "t = int(input())\nwhile t:\n    t += -1\n    a, b, p = map(int, input().split())\n    s = input()\n    l = []\n    for i in s: l.append(i)\n    cost = 0\n    for i in range(len(l) - 1):\n        if l[i + 1] != l[i]:\n            if l[i] == 'A': cost += a\n            else: cost += b\n    if l[len(l) - 1] == l[len(l) - 2]:\n        if l[len(l) - 1] == 'A': cost += a\n        else: cost += b\n    # print(cost)\n    ind = -1\n    for i in range(len(l) - 1):\n        if cost <= p:\n            ind = i\n            break\n        if l[i + 1] != l[i]:\n            if l[i] == 'A': cost -= a\n            else: cost -= b\n    if ind == -1: print(len(l))\n    else: print(ind + 1)", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \"YES\"\nNO = \"NO\"\n\nfor _ in range(int(input())):\n  try:\n    a, b, p = read()\n    s = input()\n\n    stack = [[s[0], 1]]\n\n    for i in s[1:-1]:\n      if i == stack[-1][0]:\n        stack[-1][1] += 1\n        \n      else:\n        stack.append([i, 1])\n    \n\n\n    ans = len(s) \n    temp = []\n    # print(stack)\n\n    if p < a and p < b:\n      print(len(s))\n      go() \n    \n    while stack:\n      i, j = stack[-1]\n      stack.pop()\n      if i == 'A' and p >= a:\n        p -= a\n        ans -= j\n        temp.append(j)\n      elif i == 'A' and p < a:\n        break\n      if i == 'B' and p >= b:\n        p -= b \n        ans -= j \n        temp.append(j)\n      elif i == 'B' and p < b:\n        break\n    \n    print(ans)\n      \n\n  except ZeroDivisionError:\n    continue\n\n  except Exception as e:\n    print(e)\n    continue", "for _ in range(int(input())):\n    a, b, p = map(int, input().split())\n    s = input()\n    \n    d = {'A': a, 'B': b}\n\n    c = '0'\n    inv = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            inv.append((start, i, s[i-1]))\n            start = i\n        elif i == len(s) - 1:\n            inv.append((start, i, s[i]))\n\n    ans, cost = len(s) - 1, 0\n    for q in inv[::-1]:\n        cost += d[q[2]]\n        if cost > p:\n            break\n        else:\n            ans = q[0]\n\n    print(ans + 1)", "for i in range(int(input())):\n    a, b, p = map(int, input().split())\n    s = input()\n    dp = [0 for i in range(len(s))]\n    for j in range(len(s) - 2, -1, -1):\n        if s[j] != s[j + 1] or dp[j + 1] == 0:\n            if s[j] == 'B':\n                if dp[j + 1] == 0:\n                    dp[j] = b\n                else:\n                    dp[j] = dp[j + 1] + b\n            else:\n                if dp[j + 1] == 0:\n                    dp[j] = a\n                else:\n                    dp[j] = dp[j + 1] + a\n        else:\n            dp[j] = dp[j + 1]\n    ans = 1\n    for i in dp:\n        if i > p:\n            ans += 1\n        else:\n            break\n    print(ans)", "from math import *\n\ndef check(a, b, p, s, x):\n    ps = s[x]\n    ans = 0\n    for i in range(x, len(s)):\n        if ps == s[i]:\n            pass\n        else:\n            if ps == 'A':\n                ans += a\n            else:\n                ans += b\n            if s[i] == 'E':\n                break\n            ps = s[i]\n    return ans <= p\n\nzzz = int(input())\nfor zz in range(zzz):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    s = list(s)\n    s[-1] = 'E'\n    s = ''.join(s)\n    lb = 0\n    ub = len(s) + 1\n    while lb + 1 < ub:\n        tx = (lb + ub) // 2\n        dx = (ub -lb)//2\n        if check(a, b, p, s, tx):\n            ub -= dx\n        else:\n            lb += dx\n        #print(ub, lb, dx)\n\n    x = (lb + ub) // 2\n    for i in range(4):\n        if x > 0 and check(a, b, p, s, x-1):\n            x -= 1\n        elif x <= len(s) and not check(a, b, p, s, x):\n            x += 1\n    print(min(x + 1, len(s)))\n    \n", "t = int(input())\nfor _ in range(t):\n    a,b,p = map(int,input().split())\n    sl = list(input())\n    before = \"\"\n    for idx, i in enumerate(sl[::-1][1:]):\n        cost = a if i == \"A\" else b\n        if before == i:\n            continue\n        if cost > p:\n            break\n        else:\n            before = i\n            p -= cost\n    else:\n        print(1)\n        continue\n    print(len(sl) - idx)"]