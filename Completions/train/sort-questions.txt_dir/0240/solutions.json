["class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         counter = collections.Counter(s)\n         colls = sorted(counter.items(), key=lambda k: k[1], reverse=True)\n         res = ''\n         for k, v in colls:\n             res += k * v\n         return res", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         counter = {}\n         for c in s:\n             if c in counter:\n                 counter[c] += 1\n             else:\n                 counter[c] = 1\n         \n         res = \"\"\n         while counter:\n             m = max(counter, key=counter.get)\n             res += m * counter[m]\n             del counter[m]\n         return res", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         '''\n         cnt = collections.Counter(s)\n         tmp = list(k*v for k, v in cnt.items())\n         res = sorted(tmp, key=len, reverse=True)\n         return ''.join(res)\n         '''\n         res = ''\n         cnt = collections.Counter(s)\n         tmps = cnt.most_common()\n         for tmp in tmps:\n             res += tmp[0]*tmp[1]\n         return res\n", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         mapping = {}\n         for c in s:\n             mapping[c] = mapping[c] + 1 if c in mapping else 1\n         bucket = [[] for _ in range(len(s) + 1)]\n         for c, freq in mapping.items():\n             bucket[freq].append(c)\n         res = \"\"\n         for i in range(len(s), -1, -1):\n             for c in bucket[i]:\n                 for _ in range(i):\n                     res += c\n         return res", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         counter = collections.Counter(s)\n         ret = \"\"\n         for char, freq in counter.most_common():\n             ret += char * freq\n         return ret    \n", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         charToFreq = {}\n         freqToChar = {}\n         for c in s:\n             if c not in charToFreq:\n                 charToFreq[c] = 0\n             charToFreq[c] += 1\n         print(charToFreq)\n         for key, value in list(charToFreq.items()):\n             if value not in freqToChar:\n                 freqToChar[value] = []\n             freqToChar[value].append(key)\n         print(freqToChar)\n         result = []\n         for key in sorted(freqToChar, reverse = True):\n             for char in freqToChar[key]:\n                 result += [char] * key\n         return \"\".join(result)\n", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         charToFreq = {}\n         freqToChar = {}\n         for c in s:\n             if c not in charToFreq:\n                 charToFreq[c] = 0\n             charToFreq[c] += 1\n         for key, value in list(charToFreq.items()):\n             if value not in freqToChar:\n                 freqToChar[value] = []\n             freqToChar[value].append(key)\n         result = []\n         for key in range(len(s), -1, -1):\n             if key in freqToChar:\n                 for char in freqToChar[key]:\n                     result += [char] * key\n         return \"\".join(result)\n", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         # using bucket\n         bucket = [None] * (len(s)+1)\n         hash_table = {}\n         result = ''\n         for item in s:\n             hash_table[item] = hash_table.get(item,0)+1\n         for key,value in hash_table.items():\n             if bucket[value]:\n                 bucket[value].append((key,value))\n             else:\n                 bucket[value] = [(key,value)]\n         for i in range(len(bucket)-1,-1,-1):\n             if bucket[i]:\n                 for item in bucket[i]:\n                     result += item[0] * item[1]\n         return result", "class Solution:\n     def frequencySort(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         from collections import defaultdict\n         from operator import itemgetter\n         result = []\n         letter_to_feq = defaultdict(lambda:0)\n         feq_to_letter = defaultdict(list)\n         for c in s:\n             letter_to_feq[c] += 1\n         max_count = -1\n         for k, v in letter_to_feq.items():\n             feq_to_letter[v].append(k)\n             if v > max_count:\n                 max_count = v\n         for i in range(max_count, 0, -1):\n             if i in feq_to_letter:\n                 for c in feq_to_letter[i]:\n                     result = result + [c] * i\n         return ''.join(result)\n         '''hashmap = defaultdict(lambda: 0)\n         for c in s:\n             hashmap[c] += 1\n         for k, v in sorted(hashmap.items(), key=itemgetter(1), reverse=True):\n             result = result + [k] * v\n         return ''.join(result)'''"]