["def min_value(digits):\n     return int(\"\".join(map(str,sorted(set(digits)))))\n", "def min_value(digits):\n    return int(\"\".join(str(x) for x in sorted(set(digits))))", "def min_value(digits):\n    l = list(set(digits))\n    l.sort(reverse=True)\n    return sum(x * 10**i for i, x in enumerate(l))", "def min_value(digits):\n    return int(\"\".join(str(i) for i in sorted(set(digits),reverse=False)))", "def Remove(duplicate):\n    result = []\n    for num in duplicate:\n        if num not in result:\n            result.append(num)\n    return result\n    \ndef min_value(digits):\n    digits = Remove(digits)\n    digits = sorted(digits)\n    min = ''\n    for i in digits:\n        min += str(i)\n    return int(min)     ", "def merged(a,b):\n    ac=0\n    bc=0\n    ra=[]\n    while True:\n        if ac<len(a) and bc<len(b):\n            if a[ac]<b[bc]:\n                ra.append(a[ac])\n                ac=ac+1\n            else:\n                ra.append(b[bc])\n                bc=bc+1\n        elif ac<len(a):\n            ra.append(a[ac])\n            ac=ac+1\n        elif bc<len(b):\n            ra.append(b[bc])\n            bc=bc+1\n        else:\n            break\n    return ra\ndef mysort(arr):\n    if len(arr)<2:\n        return arr\n    else:\n        mid=len(arr)//2\n        part1=mysort(arr[:mid])\n        part2=mysort(arr[mid:])\n        return merged(part1,part2)\ndef min_value(digits):\n    d={}\n    for x in digits:\n        d[x]=0\n    d=list(d.keys())\n    d=mysort(d)\n    ans=0\n    for x in d:\n        ans=(ans*10)+x\n    return ans", "def min_value(d):\n    L=[]\n    for i in d:\n        if i not in L:\n            L.append(i)\n    L.sort()\n    L1=[]\n    for i in L:\n        L1.append(str(i))\n    return int(\"\".join(L1))", "def min_value(digits):\n    sorted_digits = sorted(set(digits))\n    result = \"\"\n    for member in sorted_digits:\n        result += str(member)\n    return int(result)\n", "def min_value(digits):\n    digits = int(str(((((''.join(str((sorted(set(digits))))).strip(',')).strip('[')).strip(']')).replace(',',''))).replace(\" \",''))\n    return digits", "def min_value(digits):\n    unique_digits = []\n    digits.sort()\n    for i in digits:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return int(''.join(str(e) for e in unique_digits))", "def min_value(digits):\n    return int(''.join(str(e)for e in sorted(dict.fromkeys(digits))) )", "def min_value(digits):\n    numbers = [False for x in range(10)]\n    for x in digits:\n        numbers[x] = True\n    result = 0\n    min = 1\n    for i in range(9,0,-1):\n        if numbers[i]:\n            result += i*min\n            min *= 10\n    return result", "min_value=lambda l:int(''.join(sorted(set(map(str,l)))))", "def min_value(digits):\n    unique_sorted_d = sorted(set(digits))\n    return int(''.join(map(str, unique_sorted_d)))", "def min_value(digits):\n    return int(''.join(sorted(set(str(x) for x in digits))))", "def min_value(lst):\n    min_num = \"\"\n    min_lst = []\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - 1):\n            if lst[j] > lst[j + 1]:\n                lst[j + 1], lst[j] = lst[j], lst[j + 1]\n    for i in range(len(lst)):\n        if lst[i] not in min_lst:\n            min_lst.append(lst[i])\n    for i in min_lst:\n        min_num += str(i)\n    return int(min_num)", "def min_value(digits):\n    # your code here\n    return int(''.join(sorted({str(m) for m in digits})))", "def min_value(digits):\n    numbers = [0,1,2,3,4,5,6,7,8,9]\n    num=[]\n    for i in numbers:\n        if i in digits:\n            num.append(i)\n    string = \"\"\n    for i in num:\n        string += str(i)\n    return int(string)\n", "from functools import reduce; min_value=lambda d: reduce(lambda a,b: a*10+b, sorted(set(d)))", "def min_value(digits):\n    new_digs = sorted(set(digits))\n    a = ''\n    for x in new_digs:\n        a += str(x)\n    return int(a)\n", "min_value = lambda digits: int(''.join(sorted(list(map(str, set(digits))))))", "def min_value(d): return int(\"\".join(map(str, sorted(list(dict.fromkeys(d))))))\n", "from itertools import permutations\n\n\ndef min_value(digits):\n    return sum(v * 10 ** i for i, v in enumerate(reversed(min(list(permutations(set(digits)))))))", "def min_value(a):\n    a = list(dict.fromkeys(a))\n    a.sort()\n    a = int(''.join(map(str, a)))\n    return a", "def min_value(digits):\n    return int(''.join(str(s) for s in sorted(set(digits))))", "def min_value(digits):\n  r=0\n  for n in sorted(list(set(digits))): r=r*10+n\n  return r", "def min_value(digits):\n    s=list(set(digits))\n    s.sort()    \n    t=0\n    for i in s:\n       t= 10*t + i\n    return t", "from itertools import permutations\n\ndef min_value(digits):\n    digits = list(set(digits))\n    digits.sort()\n    str_array = list(map(str, digits))\n    num_string = ''.join(str_array)\n    return int(num_string)\n    \n", "def min_value(digits):\n    dSet = sorted(set(digits))\n    outStr = \"\"\n    for i in dSet:\n        outStr +=str(i)\n    return int(outStr)", "def min_value(digits):\n    res = 0\n    for item in sorted(set(digits)):\n        res = res * 10 + item\n    return res", "def min_value(digits):\n    temp = sorted(list(set(digits)))\n    for i in range(len(temp)):\n        temp[i] = str(temp[i])\n    return int(\"\".join(temp))", "def min_value(digits):\n    digits=sorted(set(digits))\n    return int(\"\".join(str(x) for x in digits))", "def min_value(digits):\n    array = sorted(list(set(digits)))\n    return int(\"\".join([str(i) for i in array]))\n", "def min_value(digits):\n    set_n = set()\n    for i in digits:\n        set_n.add(i)\n    arr = []\n    for i in set_n:\n        arr.append(str(i))\n    arr = sorted(arr)\n    return int(\"\".join(arr))", "def min_value(d):\n    return int(''.join([str(i) for i in sorted([*{*d}])]))", "def min_value(digits):\n    digits.sort()\n    digits = list(dict.fromkeys(digits))\n    \n    if digits[0] == 0:\n        aux = digits[0]\n        digits[0] = digits[1]\n        digits[1] = aux\n    \n    number = 0\n    for i in digits:\n        number = number * 10 + i\n    \n    return number", "def min_value(digits):\n    d = \"\".join([str(i) for i in sorted(list(set(digits)))])\n    return int(d)", "def min_value(digits):\n    # your code here\n    digits = list(set(digits))\n    digits = sorted(digits)\n    digits = [str(i) for i in digits]\n    digits = ''.join(digits)\n    return int(digits)", "def min_value(digits):\n    digits = list(dict.fromkeys(digits))\n    print(digits)\n    res = \"\"\n    for i in list(sorted(digits)):\n        res += str(i)\n    return int(res)", "def min_value(digits):\n    digits = set(digits)\n    ord = sorted(digits)\n    new = \"\"\n    for i in ord:\n        new += str(i)\n    return int(new)", "def min_value(digits):                  \n    newDigits = []\n    for i in digits:\n        if i not in newDigits:\n            newDigits.append(i)\n    sortDigits = sorted(newDigits)\n    strDigits = ([str(i) for i in sortDigits])\n    return int(''.join(strDigits))", "def min_value(digits: list) -> int:\n    \"\"\"\"This function returns the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).\"\"\"\n    my_arr = []\n    for item in digits:\n        if item not in my_arr:\n            my_arr.append(item)\n    return int(''.join(map(str, sorted(my_arr))))", "def min_value(digits):\n    unique_digits = set(digits)\n    min_number = 0\n    for integer in sorted(unique_digits):\n        min_number *= 10\n        min_number += integer\n    return min_number\n", "def min_value(digits):\n    x = sorted(set(digits))\n    y = [str(a) for a in x]\n    return int(''.join(y))", "def min_value(digits):\n    return int(''.join(sorted(set(map(str,digits)), key = int)))", "def min_value(digits):\n    s=set()\n    for x in digits:\n        for d in str(x):\n            s.add(d)\n    return int(''.join(sorted(s)))", "def min_value(digits):\n    # your code here\n    \n    nums = sorted(list(set(digits)))\n    s = ''\n    \n    for i in nums:\n        \n        s += str(i)\n    return int(s)\n", "\ndef min_value(digits):\n    # your code here\n    \n    set_digits = set()\n    for digit in digits:\n        set_digits.add(digit)\n    sorted_digits = sorted(set_digits)\n    interim = \"\".join((list(map(str,sorted_digits))))\n    return int(interim)\n\n", "def min_value(digits):\n    digits = sorted(set(digits))\n    strings = [str(integer) for integer in digits]\n    return int(\"\".join(strings))", "def min_value(digits):\n    y = sorted(list(set(digits)))\n    x =  [str(i) for i in y]\n    return int(\"\".join(x))", "from functools import reduce\nfrom operator import concat\n\ndef min_value(digits):\n    return int(reduce(concat, map(str,sorted(set(digits)))))", "def min_value(digits):\n    # your code here\n    new = sorted(digits)\n    i = 0\n    j = i + 1\n    nodup = []\n    stri = ''\n    for i in new:\n        if i not in nodup:\n            nodup.append(i)\n    for i in nodup:\n        stri += str(i)\n        \n    return int(stri)\n        \n        \n", "def min_value(digits):\n    list_1 = []\n    for i in digits:\n        list_1.append(i)\n    \n    final_list = list(set(list_1))\n    \n    final_list.sort()\n    print(final_list)\n    str_nums = [str(x) for x in final_list]\n    print(str_nums)\n    lowest_number = ''.join(str_nums)\n    lowest_number = int(lowest_number)\n    \n    return lowest_number\n    \n  \n", "def min_value(digits):\n    digits = sorted(set(digits), reverse=True)    # Remove duplicated and then sort the result\n    return sum(d * 10**i for i, d in enumerate(digits))", "def min_value(digits):\n    a = sorted(set(digits))\n    b = []\n    for i in range(len(a)): b.append(str(a[i]))\n    return int(''.join(b))", "def min_value(digits):\n    set_digits = sorted(set(digits))\n    str_smallest = \"\"\n    for i in set_digits:\n        str_smallest = str_smallest + str(i) \n    return(int(str_smallest))\n    # your code here\n", "def min_value(digits):\n    num1 = \"\"\n    digits = sorted(digits)\n    stringints = [str(int) for int in digits]\n    for i in stringints:\n        if i not in num1:\n            num1 += i\n    return (int(num1))", "def min_value(digits):\n    b = []\n    a = [b.append(i) for i in digits if i not in b]\n    b.sort()\n    return int(''.join(str(i) for i in b))", "def min_value(digits):\n    storage = []\n    for scan in digits:\n        if str(scan) not in storage:\n            storage.append(str(scan))\n    storage.sort()\n    return int(\"\".join(storage))\n    # your code here\n", "def min_value(i):\n    dups = []\n    for elem in i:\n        if elem not in dups:\n            dups.append(elem)\n    dups = sorted(dups)\n    return int(''.join(map(str,dups)))\n        \n", "def min_value(digits):\n    a = set(digits)\n    a = sorted([str(i) for i in a])\n    return int(''.join(a))", "def min_value(digits):\n    digits = sorted(list(dict.fromkeys(digits))) #removes duplicates and sorts the list\n    digits = ''.join(list(map(str,digits))) #converts the list into a string\n    return int(digits) #converts the string into an integer\n", "def min_value(digits):\n    digits_arr = []\n    minimum = ''\n\n    for i in range(len(digits)):\n        digits_arr.append(int(digits[i]))\n    \n    sorted_arr = sorted(set(digits_arr))\n    \n    for j in range(len(sorted_arr)):\n        minimum += str(sorted_arr[j])\n    \n    return int(minimum)", "def min_value(digits):\n    result = []\n    l = [i for i in set(digits)]\n    while len(l) > 0:\n\n        result.append(str(l.pop(l.index(min(l)))))\n\n    return int(''.join(result))", "def min_value(digits):\n    # your code heredef codewar (stuff):\n    z = ''\n    n = (digits) \n\n    y = []\n    for x in n:\n        if x in y: continue\n        y.append(x)\n        y.sort()\n    for x2 in y:\n            z = z + str(x2)\n    print(z)\n    return(int(z))\n", "def min_value(digits):\n    list =[]\n    list2 =[]\n    ans = \"\"\n    for i in digits:\n        if i not in list:\n            list.append(i)\n            list2 = sorted(list)\n    for i in list2:\n        ans = ans +str(i)\n    return int(ans)", "def min_value(digits):\n    nodupe = list(set(digits))\n    j = len(nodupe)\n    output = 0 \n    nodupe.sort()\n    \n    for i in nodupe:\n        output += i * pow(10,j - 1)\n        j -= 1\n        \n    return output", "def min_value(digits):\n    # your code here\n    lostlist = \"\"\n    for i in sorted(list(set(digits))):\n        lostlist += str(i)\n    return int(lostlist)", "def min_value(digits):\n    st = \"\"\n    calc  = sorted(list(set(digits)))\n    for nums in calc:\n        st = st + str(nums)\n    return int(st)\n", "def min_value(digits):\n    return int(''.join(map(str,(sorted(set(map(int,digits)))))))", "def min_value(digits):\n    digits.sort()\n\n    print(digits)\n    i=0\n    while i <= len(digits)-2:\n        print(i)\n        if digits[i] == digits[i+1]:\n            digits.pop(i)\n            \n            print(digits)\n        else :\n            print(digits)\n            i+=1\n    s = \"\"\n    for x in digits:\n        s += str(x)\n    return int(s)\n\n", "def min_value(digits):\n    digits = sorted(list(set(digits)))\n    result = \"\"\n    for x in range(len(digits)):\n        result += str(digits[x])\n    return int(result)", "def min_value(digits):\n    noDuplicates = list(set(digits))\n    sortedDigits = sorted(noDuplicates)\n    \n    return int(''.join([str(x) for x in sortedDigits]))", "def min_value(digits):\n    value = ''\n    digits = set(digits)\n    digits = sorted(digits)\n    for digit in digits:\n        value += str(digit)\n    return int(value)\n", "def min_value(digits):\n    x=list(set(digits))\n    x.sort()\n    return int(\"\".join(str(x) for x in x))", "def min_value(digits):\n    new_digits = list(set(digits))\n    new_digits.sort()\n    res = int(\"\".join(map(str, new_digits)))\n    return res", "def min_value(digits):\n    return int(''.join(sorted([str(digit) for digit in set(digits)])))", "def min_value(digits):\n    digits = list(set(digits))\n    res = ''\n    while len(digits) > 0:\n        min_num = min(digits)\n        res += str(min_num)\n        digits.remove(min_num)\n    return int(res)", "def min_value(digits):\n        return int(\"\".join(repr((n)) for n in sorted(set(digits))))\n", "def min_value(digits):\n    a= []\n    for i in range(len(digits)):\n        if digits[i] not in a:\n            a.append(digits[i])\n    return int(\"\".join(repr((n)) for n in sorted(a)))\n", "def min_value(digits):\n    list=[]\n    for x in sorted(set(digits)):\n        if x > 0:\n            list.append(x)\n    return int(''.join(map(str,list)))", "import heapq\ndef min_value(digits):\n    lista = []\n    output = []\n    for i in digits:\n        if i not in lista:\n            lista.append(i)\n    heap = heapq.nsmallest(99,lista)\n    heap_string = [str(i) for i in heap]\n    convert = \"\".join(heap_string)\n    return int(convert)\n", "def min_value(digits):\n    for i in range(0, len(digits)):\n        digits[i] = str(digits[i])\n    digits = set(digits)\n    digits = sorted(list(digits))\n    return int(\"\".join(digits))", "from itertools import permutations\ndef min_value(digits):\n    b=[]\n    a=list(permutations(set(digits)))\n    for x in a:\n        x=[str(y) for y in x ]\n#         print(x)\n        b.append(int(''.join(x)))\n    return min(b)\n     \n", "def min_value(digits):\n    digitsSet = set(digits) \n    listDigits = list(digitsSet)\n    listDigits.sort()\n    \n       \n    ans = str(list(listDigits)).replace(\"[\",\"\").replace(\"]\",\"\").replace(\", \",\"\")\n    return int(ans)", "def min_value(digits):\n    digits = sorted(set(digits), reverse=True)\n    return sum(n * 10**i for i, n in enumerate(digits))\n", "def min_value(digits):\n    if len(digits) > 1:\n        # Sort ascending order\n        digits.sort()\n        \n        # Remove duplicats from list\n        output = []\n        counter = 1\n        for i in digits:\n            if i != digits[counter]:\n                output.append(i)\n            if counter != len(digits) - 1:\n                counter += 1\n        output.append(digits[-1])\n            \n        # Turn integers to string and join\n        output = [str(i) for i in output]\n        output =int(''.join(output))\n        return output\n    return digits[0]\n    \n    \n", "def min_value(digits):\n    l = sorted(str(x) for x in set(digits))\n    return int(\"\".join(l))\n", "def min_value(digits):\n    number = list(dict.fromkeys(digits))\n    number.sort()\n    return int(''.join(str(i) for i in number))", "def min_value(d):\n    dd = sorted(list(set(d)))\n    smallest = dd[0]\n    for i in range(1, len(dd)):\n        smallest *= 10\n        smallest += dd[i]\n    return smallest", "def min_value(digits):\n    str_list = []\n    stringulator = \"\"\n    d_list = list(dict.fromkeys(digits))\n    sorted_list = sorted(d_list)\n    for s in sorted_list:\n        stringulator += \"{}\".format(s)\n    result = int(stringulator)\n    return result", "def min_value(digits):\n    min = \"\"\n    dig2 = list(dict.fromkeys(digits))\n    dig2.sort()\n    for i in dig2:\n        min = min+str(i)\n    return int(min)\n", "def min_value(digits):\n    # your code here\n    empty = []\n    string=\"\"\n    for i in digits:\n        if i not in empty:\n            empty.append(i)\n    empty.sort()\n    \n    for x in empty:\n        string += str(x)\n    return int(string)\n", "def min_value(digits):\n    s = ''\n    ans = []\n    digits.sort()\n    new_digits = set(digits)\n    for i in new_digits:\n        ans.append(i)\n\n    ans.sort()\n    for i in ans:\n        s += str(i)\n        \n    return int(s)", "def min_value(digits):\n    s = \"\"\n    for i in sorted(digits):\n        if str(i) not in s:\n            s += str(i)\n    return int(s)"]