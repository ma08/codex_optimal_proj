["for _ in range(int(input())):\n p, idx = map(int, input().split())\n b = bin(idx)[2:]\n b = ('0' * (p - len(b)) + b)[::-1]\n print(int(b, 2))", "# cook your dish here\nt=int(input())\nfor _ in range(t):\n p, idx=list(map(int, input().split()))\n length=2**p \n somma=0\n mult=1\n while length>1:\n  length=length>>1 \n  if idx>=length:\n   idx-=length\n   somma+=mult\n  mult*=2\n print(somma)\n", "'''t=int(input())\nfor _ in range(t):\n    l=[0]\n    r=[1]\n    p,idx=map(int,input().split())\n    for i in range(1,p):\n     for j in range(1,pow(i,2)+1,2):\n      l.append(pow(2,p-i)*j)\n    for i in range(1,p):\n     for j in range(1,pow(i,2)+1,2):\n      r.append(pow(2,p-i)*j+1)\n    l.extend(r)\n    print(l)\n    print(l[idx])'''\ntry:\n t=int(input())\n for _ in range(t):\n  p,idx=map(int,input().split())\n  print(int(bin(idx)[2:].zfill(p)[::-1],2))\nexcept:\n pass", "# cook your dish here\nt=input()\nfor i in range(int(t)):\n inp=input()\n p,idx=int(inp.split()[0]), inp.split()[1]\n binidxlist=[i for i in bin(int(idx))[2:]]\n binidx=\"\"\n for j in binidxlist:\n  binidx += j\n binidx=int(binidx[::-1]+(\"0\"*(p-len(binidx))),2)\n print(binidx)", "t=input()\nfor i in range(int(t)):\n inp=input()\n p,idx=int(inp.split()[0]), inp.split()[1]\n binidxlist=[i for i in bin(int(idx))[2:]]\n binidx=\"\"\n for j in binidxlist:\n  binidx += j\n binidx=int(binidx[::-1]+(\"0\"*(p-len(binidx))),2)\n print(binidx)", "def order(arr, i):\n if len(arr) <= 1:\n  return arr\n l = arr[::2] \n r = arr[1::2]\n   \n l = order(l, i + 1)\n r = order(r, i + 1)\n c = l+r\n return c\n\n\nt = int(input())\n\nwhile(t>0):\n \n p,idx=list(map(int,input().split()))\n a=[]\n\n sizeinp = pow(2,p)-1\n\n for i in range(sizeinp+1):\n  a.append(i)\n print(order(a,0)[idx])\n t-=1\n", "def order(arr):\n if len(arr) <= 1:\n  return arr\n\n l = arr[::2]\n r = arr[1::2]\n\n l = order(l)\n r = order(r)\n c = l + r\n return c\n\n\nfor _ in range(int(input())):\n p, idx = list(map(int, input().split()))\n seq = list(range(2 ** p))\n print(order(seq)[idx])\n", "# cook your dish here\ndef order(arr, i):\n if len(arr) <= 1:\n  return arr\n\n l = arr[::2]\n r = arr[1::2]\n\n l = order(l, i + 1)\n r = order(r, i + 1)\n c = l + r\n return c\n\n\nfor _ in range(int(input())):\n p, idx = list(map(int, input().split()))\n seq = list(range(2 ** p))\n print(order(seq, 0)[idx])\n", "t = int(input())\n\nfor k in range(t):\n p, i = input().split()\n p, i = int(p), int(i)\n\n arr = []\n\n for j in range(p):\n  if ((i >> j) & 1):\n   arr.append(1)\n  else:\n   arr.append(0)\n\n arr = arr[::-1]\n\n ans = 0\n\n for j in range(p):\n  if (arr[j] == 1):\n   ans += 2**j\n\n print(ans)\n\n", "# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n p,id1=list(map(int,input().split()))\n n=pow(2,p)-1\n l=[]\n res=0\n while(p>0):\n  l.append(int(id1%2))\n  id1=id1/2\n  p-=1\n #print(l)\n for i in l:\n  res=res*2+i\n print(res)\n", "# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n p,id1=list(map(int,input().split()))\n n=pow(2,p)-1\n l=[]\n res=0\n while(p>0):\n  l.append(int(id1%2))\n  id1=id1/2\n  p-=1\n #print(l)\n for i in l:\n  res=res*2+i\n print(res)\n", "# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n p,idx=list(map(int,input().split()))\n n=2**p-1\n l=[]\n s=0\n while(p>0):\n  l.append(int(idx%2))\n  idx=idx/2\n  p-=1\n for i in l:\n  s=s*2+i\n print(s)", "# cook your dish here\n# cook your dish here\nt = int(input())\n\ndef power(a,b):\n return a**b\n\ndef concatenate(a,b):\n return a+b\n\ndef order(arr, i):\n if len(arr) <= 1 :\n  return arr\n \n l = [] \n r = []\n n = len(arr)\n for j in range(n):\n  if arr[j] % power(2,i+1) < power(2,i):\n   l.append(arr[j])\n  else:\n   r.append(arr[j])\n l = order(l, i + 1)\n r = order(r, i + 1)\n c = concatenate(l, r)\n return c\n\n\nfor _ in range(t):\n p,idx=list(map(int,input().split()))\n n=2**p-1\n l=[]\n s=0\n while(p>0):\n  l.append(int(idx%2))\n  idx=idx/2\n  p-=1\n  #print(l)\n for i in l:\n  s=s*2+i\n print(s) \n t-=1\n", "# cook your dish here\nt = int(input())\n\ndef power(a,b):\n return a**b\n\ndef concatenate(a,b):\n return a+b\n\ndef order(arr, i):\n if len(arr) <= 1 :\n  return arr\n \n l = [] \n r = []\n n = len(arr)\n for j in range(n):\n  if arr[j] % power(2,i+1) < power(2,i):\n   l.append(arr[j])\n  else:\n   r.append(arr[j])\n l = order(l, i + 1)\n r = order(r, i + 1)\n c = concatenate(l, r)\n return c\n\n\nfor _ in range(t):\n p,idx=list(map(int,input().split()))\n n=2**p-1\n l=[]\n s=0\n while(p>0):\n  l.append(int(idx%2))\n  idx=idx/2\n  p-=1\n  #print(l)\n for i in l:\n  s=s*2+i\n print(s) \n t-=1\n", "t = int(input())\n\ndef power(a,b):\n return a**b\n\ndef concatenate(a,b):\n return a+b\n\ndef order(arr, i):\n if len(arr) <= 1 :\n  return arr\n \n l = [] \n r = []\n n = len(arr)\n for j in range(n):\n  if arr[j] % power(2,i+1) < power(2,i):\n   l.append(arr[j])\n  else:\n   r.append(arr[j])\n l = order(l, i + 1)\n r = order(r, i + 1)\n c = concatenate(l, r)\n return c\n\n\nfor _ in range(t):\n p,idx=list(map(int,input().split()))\n n=2**p-1\n l=[]\n s=0\n while(p>0):\n  l.append(int(idx%2))\n  idx=idx/2\n  p-=1\n  #print(l)\n for i in l:\n  s=s*2+i\n print(s) \n t-=1\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\nipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda :int(input())\nip = lambda :[int(w) for w in input().split()]\n\nfor _ in range(inp()):\n k,ind = ip()\n ans = 0\n while k:\n  ans = 2*ans + ind%2\n  ind //= 2\n  k -= 1\n print(ans)", "t=int(input())\nwhile t > 0:\n p,idx=list(map(int,input().split()))\n n=2**p-1\n l=[]\n s=0\n while(p>0):\n  l.append(int(idx%2))\n  idx=idx/2\n  p-=1\n for i in l:\n  s=s*2+i\n print(s) \n t-=1\n", "def log_(n):\n x, c = 1, 0\n\n while True:\n  x *= 2\n\n  if x > n:\n   break\n\n  c += 1\n\n return c\n\nfor _ in range(int(input())):\n p, idx = list(map(int, input().split()))\n\n ans = 0\n\n while idx > 0:\n  d = log_(idx)\n  ans += pow(2, p - d - 1)\n  idx -= pow(2, d)\n\n print(ans)\n", "def log_(n):\n x, c = 1, 0\n\n while True:\n  x *= 2\n\n  if x > n:\n   break\n\n  c += 1\n\n return c\n\nfor _ in range(int(input())):\n p, idx = list(map(int, input().split()))\n\n ans = 0\n\n while idx > 0:\n  d = log_(idx)\n  ans += pow(2, p - d - 1)\n  idx -= pow(2, d)\n\n print(ans)\n", "# cook your dish here\nfor _ in range(int(input())):\n p, i = map(int, input().split())\n p = 1 << (p-1)\n j = 0\n ans = 0\n while p > 0:\n  if i >= p:\n   ans += 1 << j\n   i -= p\n  p >>= 1\n  j += 1\n print(ans)", "def calc(i, p):\n if p == 1:\n  return [0, 1][i]\n if i >= 2 ** (p - 1): # second half\n  t = calc(i - 2 ** (p - 1), p)\n  return t + 1\n else: # first half\n  t = calc(i, p - 1)\n  return 2 * t\n\nfor t in range(int(input())):\n # print(\"for p =\", p)\n # print(order([i for i in range(2**p)], 0))\n [p, i] = [int(i) for i in input().split()]\n print(calc(i, p))\n\n", "def find_value(index, last):\n # print('find_value({}, {})'.format(index, last))\n if last < 2:\n  return index\n if index > last // 2:\n  new_last = last // 2\n  new_index = new_last - (last - index)\n  return find_value(new_index, new_last) * 2 + 1\n else:\n  new_last = last // 2\n  new_index = index\n  return find_value(new_index, new_last) * 2\n  \ndef find_value_at_index(p, idx):\n last = (1 << p) - 1\n assert(idx <= last)\n return find_value(idx, last)\n\nT = int(input())\nfor x in range(T):\n p, i = [int(x) for x in input().split()]\n print(find_value_at_index(p, i))", "for _ in range(int(input())):\n p, idx = map(int, input().split())\n b = bin(idx)[2:]\n print(int(('0' * (p - len(b)) + b)[::-1], 2))"]