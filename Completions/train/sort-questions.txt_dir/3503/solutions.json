["def dig_pow(n):\n    return sum(int(x)**y for y,x in enumerate(str(n), 1))\n\ndef sum_dig_pow(a, b): \n    return [x for x in range(a,b + 1) if x == dig_pow(x)]", "def sum_dig_pow(a, b):\n    return [x for x in range(a, b+1) if sum(int(d)**i for i, d in enumerate(str(x), 1)) == x]", "def sum_dig_pow(a, b): # range(a, b + 1) will be studied by the function\n    res = []\n    for number in range(a, b+1):\n        digits = [int(i) for i in str(number)]\n        s = 0\n        for idx, val in enumerate(digits):\n            s += val ** (idx + 1)\n        if s == number:\n            res.append(number)\n    return res", "def sum_dig_pow(a, b): # range(a, b + 1) will be studied by the function\n    return [i for i in range(a,b+1) if i == sum(int(x)**(j+1) for j,x in enumerate(str(i)))]", "def sum_dig_pow(a, b):\n    l = []\n    for i in range(a,b+1):\n        k = 0\n        p = str(i)\n        for j in range(len(p)):\n            k += int(p[j]) ** (j+1)\n        if k == i:\n            l.append(i)\n    return l", "def sum_dig_pow(a, b):\n    ans = []\n    while a <= b:\n        if sum(int(j) ** k for j,k in zip(str(a),range(1,len(str(a)) + 1))) == a:\n            ans += [a]\n        a += 1\n    return ans", "def sum_dig_pow(a, b): # range(a, b) will be studied by the function\n lis=[]\n for i in range(a,b+1):\n  temp=str(i)\n  su=0\n  for l in range(0,len(temp)):\n   su+=int(temp[l:l+1])**(l+1)\n  if su==i:\n   lis.append(i)\n return lis"]