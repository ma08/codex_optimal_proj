["def longer(s):\n    return ' '.join(sorted(s.split(), key=lambda w: (len(w), w)) )", "def longer(s):\n    return ' '.join(sorted(s.split(' '),key = lambda x: (len(x),x)))", "def longer(s):\n    return ' '.join(sorted(s.split(), key=lambda item: (len(item), item)))", "def longer(s): #or    longer = lambda s:   if you're more daring :D\n    return \" \".join(sorted(s.split(\" \"),key=lambda x:(len(x),x)))", "def longer(strng):\n    def length_string(s):\n        return len(s)\n    initial_list = sorted(strng.split())\n    result = \" \".join(sorted(initial_list, key = length_string))\n    return result", "def longer(s):\n    return ' '.join(sorted(sorted(s.split(' ')), key=len))", "longer = lambda s: \" \".join(sorted(s.split(\" \"),key=lambda x:(len(x),x)))", "# Why not both? :)\n\ndef longer(s):\n    return \" \".join(sorted(list(s.split()), key=lambda x: (len(x), x)))\n    \nlonger = lambda s: \" \".join(sorted(list(s.split()), key=lambda x: (len(x), x)))    ", "def longer(s):\n    words = s.split(' ')\n    return ' '.join(sorted(words, key = lambda x: (len(x),x)))", "def longer(sentence):\n    def conditional(word):\n        return len(word), word\n    words = sentence.split(\" \")\n    words = sorted(words, key=conditional)\n    return ' '.join(words)"]