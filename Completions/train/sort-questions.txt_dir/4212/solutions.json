["def unite_unique(*arg):\n    res = []\n    for arr in arg:\n        for val in arr:\n            if not val in res: res.append(val)\n    return res", "from itertools import chain\n\ndef unite_unique(*args):\n    return list(dict.fromkeys(chain.from_iterable(args)))", "from itertools import chain\n\ndef unite_unique(*arrs):\n    r = list ()\n    \n    for item in chain (*arrs):\n        if item not in r:\n            r.append (item)\n\n    return r\n", "def unite_unique(*arrays):\n    output = []\n    for arr in arrays:\n        for i in arr:\n            if i not in output: output.append(i)\n    return output\n", "from itertools import chain\n\ndef unite_unique(*lists):\n    cache = set()\n    result = list()\n    for elem in chain(*lists):\n        if elem not in cache:\n            result.append(elem)\n        cache.add(elem)\n    return result", "def unite_unique(*args):\n    a = []\n    for e in args:\n        for x in e:\n            if x not in a:\n                a.append(x)\n    return a", "from collections import OrderedDict\n\n\ndef unite_unique(*xss):\n    return list(OrderedDict.fromkeys(x for xs in xss for x in xs))", "from collections import OrderedDict\ndef unite_unique(*args):\n    return list(OrderedDict.fromkeys(sum([a for a in args], [])))", "def unite_unique(*args):\n    result = []\n    for e in sum(args, []):\n        if e not in result:\n            result.append(e)\n    return result", "def unite_unique(*args):\n    result = []\n    [[result.append(nr) for nr in arg if nr not in result] for arg in args]\n    return result\n", "\"\"\"\ngo through each array,\nkeep track of duplicate elements using a hash\nif it doesn exist store it in final array.\n\"\"\"\ndef unite_unique(*arrays):\n    final = []\n    table = {}\n    \n    for array in arrays:\n        for elem in array:\n            if elem not in final:\n                final.append(elem)\n    \n    return final", "def unite_unique(*args):\n    result = []\n    for a in args:\n        for b in a:\n            if b not in result:\n                result.append(b)\n    return result\n", "def unite_unique(*array):\n  return [y for x, y in enumerate(sum(array, [])) if y not in sum(array, [])[:x]]", "def unite_unique(*lists):\n    l = [item for lst in lists for item in lst]\n    s = set(l)\n    return sorted(s, key=l.index)", "def unite_unique(*arrs):\n    seen = set()\n    return [i for a in arrs for i in a if not (i in seen or seen.add(i))]", "from collections import OrderedDict\ndef unite_unique(*lists):\n    \n    return list(OrderedDict.fromkeys(sum(lists,[])))", "from collections import OrderedDict\ndef unite_unique(*arrs):\n    arrs = [x for arr in arrs for x in arr]\n    return [x for i, x in enumerate(arrs) if i == arrs.index(x)]\n"]