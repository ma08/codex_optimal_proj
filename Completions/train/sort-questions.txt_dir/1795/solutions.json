["def nQueen(n):\n    if n==2 or n==3: return []\n    r, odds, evens = n%6, list(range(1,n,2)), list(range(0,n,2))\n    if r==2:\n        evens[:2] = evens[:2][::-1]\n        evens.append(evens.pop(2))\n    if r==3:\n        odds.append(odds.pop(0))\n        evens.extend(evens[:2])\n        del evens[:2]\n    return odds+evens", "def nQueen(n):\n    if n == 1: return [0]\n    if n <= 3: return []\n\n    evens = [i for i in range(2, n+1, 2)]\n    odds = [i for i in range(1, n+1, 2)]\n\n    if n % 6 == 3:\n        evens.remove(2)\n        evens.append(2)\n        odds.remove(1)\n        odds.remove(3)\n        odds.append(1)\n        odds.append(3)\n    elif n % 6 == 2:\n        odds[0], odds[1] = 3, 1\n        odds.remove(5)\n        odds.append(5)\n\n    return [a-1 for a in evens + odds]", "# https://en.wikipedia.org/wiki/Eight_queens_puzzle#Existence_of_solutions\ndef nQueen(n):\n    if n <= 3:\n        return [[], [0], [], []][n]\n    odds = list(range(1, n+1, 2))\n    evens = list(range(2, n+1, 2))\n    if n % 6 == 2:\n        p1, p3 = odds.index(1), odds.index(3)\n        odds[p1], odds[p3] = odds[p3], odds[p1]\n        odds.remove(5)\n        odds.append(5)\n    elif n % 6 == 3:\n        evens.remove(2)\n        evens.append(2)\n        odds.remove(1)\n        odds.remove(3)\n        odds.extend([1, 3])\n    return [n - a for a in evens + odds]", "def nQueen(n):\n    if n<=3: \n        return [[],[0]][n==1]\n        \n    mod = n%6\n\n    odd = list(range(1,n+1,2)) \n    even = list(range(2,n+1,2))\n    \n    if mod == 2:\n        odd[:2] = odd[:2][::-1]\n        odd.append(odd.pop(2))\n    elif mod == 3:\n        even.append(even.pop(0))\n        odd.extend([odd.pop(0),odd.pop(0)])\n    \n    return [i-1 for i in even+odd]", "def nQueen(n):\n    if 2 <= n <= 3: return []\n    sol = list(range(n))\n    even, odd = sol[::2], sol[1::2]\n    if n % 6 == 2: even = even[1::-1] + even[3:] + even[2:3]\n    if n % 6 == 3: even, odd = even[2:] + even[:2], odd[1:] + odd[:1]\n    return odd + even", "def nQueen(n):   \n    if n==2 or n==3:\n        return []\n    r=n%12\n    L=[2*i for i in range(1,n//2+1)]\n    if r==3 or r==9:\n        L=L[1:]+[2]\n    if n%2==0:\n        L1=[2*i-1 for i in range(1,n//2+1)]\n    else:\n        L1=[2*i-1 for i in range(1,n//2+2)]\n\n    if r==8:\n        for i in range(1,len(L1),2):\n            L1[i-1],L1[i]=L1[i],L1[i-1]\n    if r==2:\n        L1[0],L1[1]=L1[1],L1[0]\n        L1.remove(5)\n        L1.append(5)\n    if r==3 or r==9:\n        L1.remove(1)\n        L1.append(1)\n        L1.remove(3)\n        L1.append(3)\n    L=L+L1\n    return [t-1 for t in L]", "def nQueen(n):\n    if n in [2, 3]: return []\n\n    odds = [*range(1, n, 2)]\n    evens = [*range(0, n, 2)]\n\n    if n % 6 == 2:\n        evens[:2] = evens[:2][::-1]\n        evens.append(evens.pop(2))\n    elif n % 6 == 3:\n        odds.append(odds.pop(0))\n        evens += evens[:2]\n        del evens[:2]\n\n    return odds + evens", "from typing import List\n\n\ndef nQueen(n: int) -> List[int]:\n    if n in {2, 3}:\n        return []\n\n    odds = [*range(1, n, 2)]\n    evens = [*range(0, n, 2)]\n\n    if n % 6 == 2:\n        evens[:2] = evens[:2][::-1]\n        evens.append(evens.pop(2))\n    elif n % 6 == 3:\n        odds.append(odds.pop(0))\n        evens += evens[:2]\n        del evens[:2]\n\n    return [*odds, *evens]", "from random import shuffle\nfrom typing import List\nfrom concurrent.futures import ProcessPoolExecutor\n\n\ndef is_under_attack(queens: List[int], queen: int) -> bool:\n    x, y = queens.index(queen), queen\n\n    return any(\n        x == xx or y == yy or abs(xx - x) == abs(yy - y)\n        for xx, yy in enumerate(queens) if xx != x and yy != y\n    )\n\n\ndef _nQueen(n: int) -> List[int]:\n    if n in {2, 3}:\n        return []\n\n    queens = [*list(range(n))]\n    shuffle(queens)\n\n    swapped = True\n    while swapped:\n        swapped = False\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_under_attack(queens, queens[i]) or is_under_attack(queens, queens[j]):\n                    queens[i], queens[j] = queens[j], queens[i]\n\n                    if is_under_attack(queens, queens[i]) and is_under_attack(queens, queens[j]):\n                        queens[i], queens[j] = queens[j], queens[i]\n                    else:\n                        swapped = True\n\n    return queens\n\n\n_solutions = []\n\n\ndef nQueen(n: int) -> List[int]:\n    if not _solutions:\n        with ProcessPoolExecutor() as pool:\n            _solutions[:] = [*pool.map(_nQueen, list(range(51)))]\n\n    return _solutions[n]\n", "from copy import deepcopy\n\ndef nQueen(size):\n    for y in range((size+1)//2):\n        board = tuple(set(range(size)) for _ in range(size))\n        if solve(board, set(), size, 0, y):\n            return [s.pop() for s in board]\n    return []\n\ndef solve(board, placed, size, sx, sy):\n    board[sx].intersection_update({sy})\n    placed.add(sx)\n    for x in range(size):\n        if x == sx: continue\n        board[x].difference_update({sy, sy+sx-x, sy+x-sx})\n        if not board[x]: return False\n    if len(placed) == size: return True\n    min_v = size\n    min_x = None\n    for x in range(size):\n        if x in placed: continue\n        lx = len(board[x])\n        if lx == 1: return solve(board, placed, size, x, next(iter(board[x])))\n        if lx < min_v:\n            min_v = lx\n            min_x = x\n    for y in board[min_x]:\n        new_board = deepcopy(board)\n        new_placed = placed.copy()\n        if solve(new_board, new_placed, size, min_x, y):\n            update(board, new_board)\n            return True\n    return False\n\ndef update(board, new_board):\n    for s, ns in zip(board, new_board):\n        s.clear()\n        s.update(ns)\n\n"]