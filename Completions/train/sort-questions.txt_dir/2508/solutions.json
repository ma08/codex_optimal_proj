["class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        max_val = max(heights)\n        \n        freq = [0] * (max_val + 1)\n        for num in heights:\n            freq[num] += 1\n        for num in range(1,len(freq)):\n            freq[num] += freq[num-1]\n        places = [0] * len(heights)\n        for num in heights:\n            places[freq[num] - 1] = num\n            freq[num] -= 1\n        return sum(a != b for a , b in zip(places,heights))", "\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        count = 0 # Counter\n        b = sorted(heights)\n        for x in range(len(heights)):\n            if heights[x] != b[x]:\n                count += 1\n        return count", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        \n        heights_sort = sorted(heights)\n        \n        cnt=0\n        i=0\n        while i< len(heights):\n            if heights[i] != heights_sort[i] :\n                cnt+=1\n            i+=1\n        \n        return cnt\n", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        count = 0\n        for idx, num in enumerate(sorted(heights)):\n            if heights[idx] != num:\n                count += 1\n                \n        return count", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        # my method 2: counting sort and compare difference O(n+r): r number of max_value O(n); only works for small numbers sorting\n        \n        maxVal = max(heights)\n        \n        # create frequency table for each digit from 0 to maxVal\n        freq = [0] * (maxVal + 1)\n        # get freq for all index\n        for num in heights:\n            freq[num] += 1\n        # acc index by num[i] += num[i-1]\n        for i in range(1,len(freq)):\n            freq[i] += freq[i-1]\n            \n        # loop heights, find its freq and index back in places\n        places = [0] * len(heights)\n        for num in heights:\n            # num has freq[num] th in ranking, but -1 to be index\n            places[freq[num]-1] = num\n            freq[num] -= 1\n        \n        ans = 0\n        for i in range(len(heights)):\n            if heights[i] != places[i]:\n                ans += 1\n        return ans\n            \n", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        sortedHeights = sorted(heights)\n        return sum([1 if sortedHeights[i] != heights[i] else 0 for i in range(len(heights))])", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        # my method 1: sort and compare different elements O(NlogN) O(n)\n        heightsSorted = sorted(heights)\n        \n        # compare and acc different index\n        ans = 0\n        for i in range(len(heights)):\n            if heights[i]!=heightsSorted[i]:\n                ans += 1\n        \n        return ans", "class Solution:\n    def heightChecker(self, h: List[int]) -> int:\n        return sum([x!=y for (x,y) in zip(h,sorted(h))])", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        return sum([1 if sorted(heights)[i] != heights[i] else 0 for i in range(len(heights))])", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        diff=[sorted(heights)[k]-heights[k] for k in range(len(heights))]\n        move=0\n        for x in diff:\n            if x!=0:\n                move=move+1\n        return move", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        hs = heights[:]\n        for e in range(len(hs) - 1, 0, -1):\n            mx, ix = float('-inf'), -1\n            for i, h in enumerate(hs[:e + 1]):\n                if h >= mx:\n                    ix, mx = i, h\n            hs[e], hs[ix] = hs[ix], hs[e]\n        return sum(a != b for a, b in zip(hs, heights))", "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        sorted_arry = []\n        for x in heights:\n            sorted_arry.append(x)\n        for i in range(len(sorted_arry)):\n            curr_ele = sorted_arry[i]\n            j = i + 1\n            curr_index = i\n            while(j< len(sorted_arry)):\n                if curr_ele > sorted_arry[j]:\n                    curr_ele = sorted_arry[j]\n                    curr_index = j\n                j = j + 1\n            sorted_arry[curr_index] = sorted_arry[i]\n            sorted_arry[i] = curr_ele\n        change_count = 0\n        for i in range(len(heights)):\n            if heights[i] != sorted_arry[i]:\n                change_count = change_count + 1 \n        return change_count"]