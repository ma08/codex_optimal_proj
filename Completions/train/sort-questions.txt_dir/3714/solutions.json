["import re\n\ndef encoder(s):\n    d, out, it = {},[], iter(s)\n    for c in it:\n        i,k = 0,c\n        while k in d: \n            i,c = d[k], next(it,'')\n            if not c: break\n            k += c\n        d[k] = len(d)+1\n        out.append(f'{i}{c}')\n    return ''.join(out)\n\n\ndef decoder(s):\n    d = ['']\n    for m in re.finditer(r'(\\d+)(\\D?)',s):\n        d.append( d[int(m[1])] + m[2] )\n    return ''.join(d)", "def encoder(data):\n\n    def get_key_by_value(value):\n        for key in dictionary:\n            if dictionary[key] == value:\n                return key\n\n    dictionary = {0: ''}\n    dict_index = 1\n    substring = ''\n    encoded = []\n\n    for char in data:\n        substring += char\n        if substring not in list(dictionary.values()):\n            dictionary[dict_index] = substring\n            encoded.append(str(get_key_by_value(substring[:-1])))\n            encoded.append(substring[-1])\n            dict_index += 1\n            substring = ''\n    if substring != '':\n        encoded.append(str(get_key_by_value(substring)))\n    return ''.join(encoded)\n\n\ndef decoder(data):\n    dictionary = {0: ''}\n    dict_index = 1\n    decoded = []\n    key = ''\n    for char in data:\n        if char.isdigit():\n            key += char\n        else:\n            substring = dictionary[int(key)] + char\n            dictionary[dict_index] = substring\n            dict_index += 1\n            decoded.append(substring)\n            key = ''\n    if key != '':\n        decoded.append(dictionary[int(key)])\n    return ''.join(decoded)\n", "from re import findall\n\ndef encoder(data):\n    base = \"\"\n    dictionary = {base: 0}\n    output = []\n    \n    for char in data:\n        curr = base + char\n        if curr in dictionary:\n            base = curr\n        else:\n            output.append(f\"{dictionary[base]}{char}\")\n            dictionary[curr] = len(dictionary)\n            base = \"\"\n    \n    if base:\n        output.append(f\"{dictionary[base]}\")\n    \n    return \"\".join(output)\n\n\ndef decoder(data):\n    dictionary = [\"\"]\n    \n    for idx, char in findall(\"(\\d+)([A-Z]?)\", data):\n        dictionary.append(dictionary[int(idx)] + char)\n    \n    return \"\".join(dictionary)", "def encoder(data):\n    d, d_reverse = {0: ''}, {'': 0}\n    d_idx, data_idx = 1, 0\n    while data_idx < len(data):\n        if data[data_idx] not in d_reverse:\n            d[d_idx] = '0' + data[data_idx]\n            d_reverse[data[data_idx]] = d_idx\n        else:\n            start_idx = data_idx\n            while data_idx + 1 < len(data) and data[start_idx: data_idx + 1] in d_reverse:\n                data_idx += 1\n            if data_idx == len(data) - 1:\n                if data[start_idx: data_idx + 1] in d_reverse:\n                    d[d_idx] = str(d_reverse[data[start_idx:data_idx+1]])\n                else:\n                    d[d_idx] = str(d_reverse[data[start_idx:data_idx]]) + data[data_idx]\n                break\n            else:\n                d[d_idx] = str(d_reverse[data[start_idx:data_idx]]) + data[data_idx]\n                d_reverse[data[start_idx:data_idx+1]] = d_idx\n        data_idx += 1\n        d_idx += 1\n    return ''.join([v for k, v in list(d.items()) if k != 0])\n\n\ndef decoder(data):\n    d, s = [], []\n    for i in range(len(data)):\n        if i == len(data)-1 and data[i].isdigit():\n            s.append(data[-1])\n            d.append([int(''.join(s)), ''])\n        if data[i].isalpha():\n            d.append([int(''.join(s)), data[i]])\n            s = []\n        else:\n            s.append(data[i])\n    d_list = []\n    for i in range(len(d)):\n        if i == len(d) - 1 and not d[i][1]:\n            d_list.append(d_list[d[i][0]-1])\n            break\n        if d[i][0] == 0:\n            d_list.append(d[i][1])\n        else:\n            d_list.append(d_list[d[i][0]-1] + d[i][1])\n    return ''.join(d_list)\n", "import re\ndef encoder(s):\n    d, numbers, i, li = {}, iter(range(1, 1000)), 0, []\n    while i < len(s):\n        symbol = s[i]\n        prev = 0\n        while symbol in d:\n            i += 1 ; prev = d[symbol]\n            if i == len(s) : return \"\".join(li)+str(d[symbol])\n            symbol += s[i]\n        d[symbol] = next(numbers)\n        li.append(str(prev) + s[i])\n        i += 1\n    return \"\".join(li)\n    \ndef decoder(s):\n    parts, numbers, d, li = re.findall(r'\\d+[A-Z]', s), iter(range(1, 1000)), {}, []\n    for i in parts:\n        if re.fullmatch(r'\\d+\\w', i):\n            t = re.findall(r'(\\d+)(\\w)',i)\n            k, l = int(t[0][0]), t[0][1]\n            if not k : d[next(numbers)] = l ; li.append(l)\n            else : d[next(numbers)] = d[k] + l ; li.append(d[k] + l)\n        else : li.append(d[int(i)])\n    p = len(s)-len(''.join(parts))\n    return ''.join(li) + (d[int(s[-p:])] if s[-p:].isdigit() else '')", "def encoder(data):\n    d,c,o=[''],'',''\n    for i in data: d,c,o=(d,c+i,o)if c+i in d else(d+[c+i],'',o+str(d.index(c))+i)\n    return o+(str(d.index(c)) if c else '')\n\ndef decoder(data):\n    d,c,o=[''],'',''\n    for i in data: d,c,o=(d,c+i,o)if i in '0123456789' else(d+[d[int(c)]+i],'',o+d[int(c)]+i)\n    return o+(d[int(c)] if c else '')\n", "import re\ndef encoder(data):\n    dct = {'':0}\n    search = ''\n    output = '' \n    for i in range(len(data)):\n        search += data[i]\n        if search not in dct:\n            dct[search] = len(dct)\n            output += f'{dct[search[:-1]]}{search[-1]}'\n            search = ''\n        try:\n            search + data[i+1]\n        except IndexError:\n            if search == data[-(len(search)):]:\n                output += f'{dct[search]}'           \n    return output\n\ndef decoder(data):\n    dct = {0:''}\n    output = ''\n    lsnb = re.findall(r'\\d+', data)\n    lsch = re.findall(r'[A-Z]', data)\n    for i in range(len(lsnb)):\n        try:\n            lsch[i]\n            dct[len(dct)] = dct[int(lsnb[i])] + lsch[i]\n            output += dct[len(dct)-1]        \n        except IndexError:\n            output += dct[int(lsnb[i])]\n    return output  ", "import re\n\ndef encoder(s):\n    d, i, r = {\"\": 0}, 0, []\n    while i < len(s):\n        x = \"\"\n        while i < len(s) - 1 and x + s[i] in d:\n            x += s[i]\n            i += 1\n        if x + s[i] not in d:\n            d[x + s[i]] = len(d)\n            r.append((d[x], s[i]))\n        else:\n            r.append((d[x + s[i]], \"\"))\n        i += 1\n    return \"\".join(str(x) + y for x, y in r)\n\ndef decoder(s):\n    a, r = [\"\"], []\n    for x, y in re.findall(r\"(\\d+)(\\D*)\", s):\n        a.append(a[int(x)] + y)\n    return \"\".join(a)", "import re\ndef encoder(data):\n    dictionary = { '': 0 }\n    output = []\n    index = 1\n    longest_match = \"\"\n    substring = \"\"    \n    for character in data:\n        substring += character\n        if substring not in dictionary:\n            dictionary[substring] = index\n            output.append((dictionary[longest_match], character))\n            longest_match = \"\"\n            substring = \"\"\n            index += 1\n        else:\n            longest_match += character\n    if substring in dictionary and substring != \"\":\n        output.append((dictionary[substring], ''))\n\n    return ''.join(str(i)+j for i,j in output)\n\n\n\ndef decoder(data):\n    dictionary = { 0: '' }\n    last = re.search(r'(\\d*)$', data).group()    \n    data = re.findall(r'(\\d+)([A-Z])', data)\n    if last != \"\":\n        data.append((last, \"\"))\n    index = 1\n    for pair in data:\n        dictionary[index] = dictionary[int(pair[0])] + pair[1]\n        index += 1    \n    return ''.join(dictionary.values())", "def encoder(data):\n    dicto, store, i, f = {0: \"\"}, \"\", 0, \"\"\n    save = 0\n    while i <= len(data):\n        if i == len(data) and store in list(dicto.values()):\n            for k in dicto:\n                if dicto[k] == store and store != \"\":\n                    f += f\"{k}\"\n            return f\n        if store not in list(dicto.values()) and store != \"\":\n            dicto[max(dicto.keys())+1] = store\n            f += f\"{save}{data[i-1]}\"\n            store = \"\"\n            if i == len(data):\n                return f\n            continue\n        if data[i] not in list(dicto.values()) and store == \"\":\n            save = 0\n            for m in dicto:\n                if dicto[m] == store:\n                    save = m\n            dicto[max(dicto.keys())+1] = data[i]\n            f += f\"{save}{data[i]}\"\n            i += 1\n        else:\n            for m in dicto:\n                if dicto[m] == store:\n                    save = m\n                elif dicto[m] == data[i] and store == \"\":\n                    save = m\n            store += data[i]\n            i += 1\n    return f\n\n\ndef decoder(data):\n    dc, dic = \"\", {0: \"\"}\n    i = 0\n    while i <= len(data)-1:\n\n        if data[i].isdigit() and i == len(data)-1:\n            dc += dic[int(data[i])]\n            return dc\n        if data[i] == \"0\":\n            dc += data[i+1]\n            dic[max(dic.keys())+1] = data[i+1]\n            i += 1\n        elif data[i] != \"0\" and data[i].isdigit() and not data[i+1].isdigit():\n            c = dic[int(data[i])]+data[i+1]\n            dc += c\n            dic[max(dic.keys())+1] = c\n            i += 1\n        elif data[i].isdigit() and data[i+1].isdigit():\n            acc = data[i]\n            while data[i+1].isdigit():\n                i += 1\n                acc += data[i]\n                if i+1 == len(data):\n                    dc += dic[int(acc)]\n                    return dc\n            dc += dic[int(acc)]+data[i+1]\n            dic[max(dic.keys())+1] = dic[int(acc)]+data[i+1]\n            i += 1\n        else:\n            i += 1\n\n    return dc\n\n"]