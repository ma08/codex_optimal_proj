["def sort_emotions(arr, order):\n    return sorted(arr, key=[':D',':)',':|',':(','T_T'].index, reverse=not order)", "def get_face(face):\n    faces = { ':D':0, ':)':1, ':|':2, ':(':3, 'T_T':4 }\n    return faces[face]\n\ndef sort_emotions(arr, order):\n    return sorted(arr, key=get_face, reverse= not order)\n", "def sort_emotions(arr, reverse, ordered_emotions={smiley: idx for idx, smiley in enumerate('T_T :( :| :) :D'.split())}):\n    return sorted(arr, reverse=reverse, key=ordered_emotions.get)", "sort_emotions=lambda a,b:sorted(a,key=':(:|:):D'.find,reverse=b)", "def sort_emotions(arr, order):\n    return sorted(arr, key=lambda x: ['T_T', ':(', ':|', ':)', ':D'].index(x), reverse=order)", "val = {':D':4, ':)':3, ':|':2, ':(':1, 'T_T':0}.__getitem__\n\ndef sort_emotions(arr, order):\n    return sorted(arr, reverse=order, key=val)", "emotions = {\"T_T\": 1, \":(\": 2, \":|\": 3, \":)\": 4, \":D\": 5}\n\ndef sort_emotions(lst, desc):\n    return sorted(lst, key=emotions.get, reverse=desc)\n", "rank = {x: i for i, x in enumerate([':D', ':)', ':|', ':(', 'T_T'])}\n\ndef sort_emotions(arr, order):\n    return sorted(arr, key=rank.get, reverse=not order)", "def sort_emotions(arr, order):\n    order_dict = {\n                \":D\"  : 1, \n                \":)\"  : 2, \n                \":|\"  : 3, \n                \":(\"  : 4, \n                \"T_T\" : 5\n                }\n    \n    return sorted(arr, key=lambda x: order_dict[x], reverse=not order)", "ORDER = {v:i for i,v in enumerate([':D', ':)', ':|', ':(', 'T_T'])}\n\ndef sort_emotions(arr, order):\n    return sorted(arr, key=ORDER.__getitem__, reverse=not order)"]