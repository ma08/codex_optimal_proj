["def plane_seat(a):\n    front, middle, back = (list(range(1,21)), list(range(21,41)), list(range(41,61)))\n    left, center, right = ('ABC', 'DEF', \"GHK\")\n    x, y = ('', '')\n        \n    if int(a[:-1]) in front:    x = 'Front-'\n    if int(a[:-1]) in middle:   x = 'Middle-'\n    if int(a[:-1]) in back:     x = 'Back-'\n\n    if a[-1] in left:    y = 'Left'\n    if a[-1] in center:  y = 'Middle'\n    if a[-1] in right:   y = 'Right'\n    \n    return x+y if all((x,y)) else 'No Seat!!'\n", "def plane_seat(a):\n    n, c = int(a[:-1]), a[-1]\n    side = \"Left\" if c in \"ABC\" else \"Middle\" if c in \"DEF\" else \"Right\" if c in \"GHK\" else \"\"\n    depth = \"Front\" if 0 < n < 21 else \"Middle\" if 20 < n < 41 else \"Back\" if 40 < n < 61 else \"\"\n    return f\"{depth}-{side}\" if depth and side else \"No Seat!!\"\n", "def plane_seat(a):\n    section = ['Front','Middle','Back',None]\n    cluster = {'ABC':'Left','DEF':'Middle','GHK':'Right'}\n    my_section = section[((int(a[:-1])-1)//20)]\n    my_cluster = [v for k,v in cluster.items() if a[-1].upper() in k]\n    return \"No Seat!!\" if not (my_section and my_cluster) else \"{}-{}\".format(my_section,my_cluster[0])", "def plane_seat(a):\n    row = int(a[:-1])\n    seat = a[-1]\n    \n    if row > 60 or seat not in 'ABCDEFGHK':\n        return 'No Seat!!'\n        \n    if row <= 20:\n        end = 'Front'\n    elif row <= 40:\n        end = 'Middle'\n    else:\n        end = 'Back'\n        \n    if seat in 'ABC':\n        side = 'Left'\n    elif seat in 'DEF':\n        side = 'Middle'\n    else:\n        side = 'Right'\n        \n    return f'{end}-{side}'\n\n\n", "def plane_seat(a):\n    num, alpha = int(a[:-1]), a[-1]\n    if num > 60 or alpha in 'IJ' or alpha > 'K':\n        return 'No Seat!!'\n    section = ('Front', 'Middle', 'Back')[(num > 20) + (num > 40)]\n    cluster = ('Left', 'Middle', 'Right')[(alpha > 'C') + (alpha > 'F')]\n    return f'{section}-{cluster}'", "def plane_seat(a):\n    try:\n        number, letter = a[:-1], a[-1]\n        number = int(number)\n        if not 1<=number<=60 or not letter in 'ABCDEFGHK':\n            return 'No Seat!!'\n        result = []\n        return '-'.join(('Front' if number<=20 else 'Middle' if number<=40 else 'Back',\n                        'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'))\n    except:\n        return 'No Seat!!'\n            \n", "CLUSTERS = {\n    'A': 'Left',\n    'B': 'Left',\n    'C': 'Left',\n    'D': 'Middle',\n    'E': 'Middle',\n    'F': 'Middle',\n    'G': 'Right',\n    'H': 'Right',\n    'K': 'Right',\n}\n\ndef plane_seat(a):\n    row = int(a[:-1])\n    col = a[-1:]\n    section = (\n        'Front' if row <= 20 else\n        'Middle' if row <= 40 else\n        'Back' if row <= 60 else\n        ''\n    )\n    cluster = CLUSTERS.get(col)\n    if section and cluster:\n        return f'{section}-{cluster}'\n    else:\n        return 'No Seat!!'", "def plane_seat(a):\n    n , l = int(a[:-1]), a[-1]\n    if n > 60 or l not in \"ABCDEFGHK\": return \"No Seat!!\"\n    n = 'Front' if n < 21 else 'Middle' if n < 40 else 'Back'\n    l = \"Left\" if l < \"D\" else \"Middle\" if l < \"G\" else \"Right\"\n    return \"{}-{}\".format(n,l)", "# import this\n# \u042f\u0432\u043d\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043d\u0435\u044f\u0432\u043d\u043e\u0435.\n# \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0435.\n# \u0415\u0441\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043b\u0435\u0433\u043a\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u2014 \u0438\u0434\u0435\u044f, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0445\u043e\u0440\u043e\u0448\u0430.\ndef plane_seat(a):\n    num2 = a[0] + a[1]\n    num1 = a[0]\n    let = a[-1]\n    if let == 'I' or let == 'J':\n        return ('No Seat!!')\n    elif len(a) == 3:\n        if int(num2) > 60:\n            return ('No Seat!!')\n        elif int(num2) >= 1 and int(num2) <= 20:\n            if let == 'A' or let == 'B' or let == 'C':\n                return ('Front-Left')\n            if let == 'D' or let == 'E' or let == 'F':\n                return ('Front-Middle')\n            if let == 'G' or let == 'H' or let == 'K':\n                return ('Front-Right')   \n        elif int(num2) >= 21 and int(num2) <= 40:\n            if let == 'A' or let == 'B' or let == 'C':\n                return ('Middle-Left')\n            if let == 'D' or let == 'E' or let == 'F':\n                return ('Middle-Middle')\n            if let == 'G' or let == 'H' or let == 'K':\n                return ('Middle-Right')\n        elif int(num2) >= 41 and int(num2) <= 60:\n            if let == 'A' or let == 'B' or let == 'C':\n                return ('Back-Left')\n            if let == 'D' or let == 'E' or let == 'F':\n                return ('Back-Middle')\n            if let == 'G' or let == 'H' or let == 'K':\n                return ('Back-Right')            \n    elif len(a) == 2:\n        if int(num1) >= 1 and int(num1) <= 20:\n            if let == 'A' or let == 'B' or let == 'C':\n                return ('Front-Left')\n            if let == 'D' or let == 'E' or let == 'F':\n                return ('Front-Middle')\n            if let == 'G' or let == 'H' or let == 'K':\n                return ('Front-Right')   \n                 \n'''    \n1-20 - front\n21-40 - middle\n41-60 - back\n\nA,B,C - left\nD,E,F - middle\nG,H,K - right\n'''\n\n", "# What do you mean computationally wasteful?\ndef plane_seat(a):\n    return {\n        f'{row}{seat}': f'{end}-{side}'\n        for end, rows in [('Front', list(range(1, 21))), ('Middle', list(range(21, 41))), ('Back', list(range(41, 61)))]\n        for row in rows\n        for side, seats in [('Left', 'ABC'), ('Middle', 'DEF'), ('Right', 'GHK')]\n        for seat in seats\n    }.get(a, 'No Seat!!')\n"]