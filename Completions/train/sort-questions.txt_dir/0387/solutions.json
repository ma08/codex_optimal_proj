["class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        '''\n        ABC\n        ACB\n        X 1 2 3\n        A 2 0 0\n        B 0 1 1\n        C 0 1 1\n        '''\n        \n        mem = {}\n        for vote in votes:\n            for i in range(len(vote)):\n                team = vote[i]\n                if team not in mem:\n                    mem[team] = [0 for _ in range(len(vote))]\n                mem[team][i] += 1\n        \n        standings = []\n        for k, v in mem.items():\n            standings.append(tuple(v) + (-ord(k), k))\n        \n        standings.sort(reverse=True)\n        \n        res = [s[-1] for s in standings]\n        return ''.join(res)", "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        count = {v: [0] * len(votes[0]) for v in votes[0]}\n        for vote in votes:\n            for i, v in enumerate(vote):\n                count[v][i] -= 1\n\n        sort = sorted(list(count.items()), key=lambda x: (x[1], x[0]))\n        ans = ''\n        for c,_ in sort:\n            ans += c\n        return ans\n    \n        # return ''.join(sorted(votes[0], key=count.get))     \n", "from heapq import heappush, heappop\nfrom collections import defaultdict\n\n\nclass Solution(object):\n    def rankTeams(self, vs):\n        sz = len(vs[0])\n        cnt = defaultdict(lambda: [0] * (sz + 1))\n\n        for v in vs:\n            for i, c in enumerate(v):\n                cnt[c][i] -= 1\n                cnt[c][sz] = c\n\n        az = list(cnt.keys())\n        az.sort(key=lambda cc: cnt[cc])\n        return ''.join(az)", "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        N = len(votes[0])\n        mapping = collections.defaultdict(lambda :[0 for _ in range(N)])\n        for v in votes:\n            for i, char in enumerate(v):\n                mapping[char][i] += 1\n        return ''.join([candidate for candidate, _ in sorted(mapping.items(), key = lambda x:(x[1], -ord(x[0])), reverse = True)])", "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        \n        m = len(votes[0])\n        n = len(votes)\n        dic = {}\n        \n        for vote in votes: \n            for i in range(m): \n                if vote[i] not in dic: \n                    dic[vote[i]] = [0] * m \n                \n                dic[vote[i]][i] += 1 \n                \n        \n        li = []\n        for k, v in list(dic.items()): \n            \n            values = [str(n-i) for i in v]\n            values.append(k)\n            \n            li.append(''.join(values))\n            \n        li.sort()\n        \n        return ''.join([item[-1] for item in li])\n", "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        teams = list(votes[0])\n        ranks = {}\n        for t in teams:\n            ranks[t] = [0] * len(teams)\n            for v in votes:\n                ranks[t][v.index(t)] -= 1\n        return ''.join(t for _, t in sorted(((v, t) for t, v in list(ranks.items()))))\n        \n                \n"]