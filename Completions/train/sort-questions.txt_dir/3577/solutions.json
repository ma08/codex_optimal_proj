["from collections import Counter\n\ndef fib_digits(n):\n    a, b = 0, 1\n    for i in range(n): a, b = b, a+b\n    return sorted(((b, int(a)) for a, b in Counter(str(a)).items()), reverse=True)", "from operator import itemgetter\ndef fib_digits(n):\n    a,b = 1,1\n    num=n\n    num_int=int(num-2)\n    for i in range (num_int):\n        a,b=b,a+b\n    print(b)\n    num = b\n    print(num)\n    lst = list(map(int,str(num)))\n    lst2 = []\n    p = False\n    i = 1\n    lst2.append([1,lst[0]])\n    while i < len(lst):\n        d = 0\n        while d < len(lst2):\n            if lst[i] == lst2[d][1]:\n                #lst2[d][0] += 1\n                p = True\n                break\n            d+=1\n        if p == True:\n            lst2[d][0] += 1\n        else:\n            lst2.append([1,lst[i]])   \n        i+=1\n        p = False\n    print(lst2)\n    i = 0\n    while i < len(lst2):\n        lst2[i] = tuple(lst2[i])\n        i+=1\n    return(sorted((lst2), reverse=True))\n            \n            \n                \n", "from collections import Counter\n\ndef fib_digits(n):\n    a = 0\n    b = 1\n    \n    for i in range(2, n + 1):\n        a, b = b, a + b\n    \n    c = Counter(str(b))\n    res = sorted([(int(x[0]), int(x[1])) for x in zip(list(c.values()), list(c.keys()))], key = lambda m: (m[0], m[1]))[::-1]\n    return res\n", "from collections import Counter\n\n\ndef fib_digits(n):\n    a,b = 0,1\n    for i in range(n-1):\n        a,b = b, a+b\n    counts = Counter(str(b))\n    return sorted(((count, int(digit)) for digit, count in counts.items()), reverse=True)", "def fib_digits(n):\n    d = str(fib(n))\n    return sorted([(d.count(i), int(i)) for i in '0123456789' if d.count(i) > 0])[::-1]\n\n\ndef fib(n):\n    a,b = 1,1\n    for i in range(n-1):\n        a,b = b,a+b\n    return a\n\n", "from collections import Counter\n\n# https://stackoverflow.com/a/23462371\ndef fib(n):\n    v1, v2, v3 = 1, 1, 0\n    for rec in bin(n)[3:]:\n        calc = v2*v2\n        v1, v2, v3 = v1*v1+calc, (v1+v3)*v2, calc+v3*v3\n        if rec=='1': v1, v2, v3 = v1+v2, v1, v2\n    return v2\n\ndef fib_digits(n):\n    return sorted(((v, int(k)) for k,v in Counter(str(fib(n))).items()), reverse=True)", "def fib(n1):\n    fn_1=1\n    fn_2=0\n    f=0\n    for i in range(1,n1):\n        f=fn_1+fn_2\n        fn_2=fn_1\n        fn_1=f\n    return f\n    \ndef fib_digits(n):\n    check=0\n    num=''\n    l=[]\n    count=0\n    x=str(fib(int(n)))\n    while len(x)>1:\n        for j in range(len(x)):\n            if x[0]==x[j]:\n                count+=1\n        num+=x[0]\n        l.append((count,int(x[0])))\n        count=0\n        x=x.replace(x[0],\"\")\n    l.sort()\n    return(l[::-1])", "def fast_fib(n):\n    def pos(n):\n        if n == 0:\n            return (0, 1)\n        else:\n            a, b = pos(n // 2)\n            c = a * (b * 2 - a)\n            d = a * a + b * b\n            if n % 2 == 0:\n                return (c, d)\n            else:\n                return (d, c + d)\n    \n    def fib(n):\n        if n >= 0:\n            return pos(n)[0]\n    \n        if n < 0:\n            sign = -1 if n % 2 == 0 else 1\n            return sign*pos(abs(n))[0]\n    \n    return fib(n)\n\ndef fib_digits(n):\n    from collections import Counter\n    cnt = Counter(str(fast_fib(n)))\n    ret = [(v, int(k)) for k, v in cnt.items()]\n    ret = sorted(ret, key=lambda x: (-x[0], -x[1]))\n    \n    return ret", "def fib_digits(n):\n    numCount = [[0,0], [0,1], [0,2], [0,3], [0,4], [0,5], [0,6], [0,7], [0,8], [0,9]] # 2d array of the amounts of each number\n    a,b = 1,1\n    for i in range(n-1): # calculate the fibonacci number of the entered digit\n      a,b = b,a+b\n    fib_list = list(str(a)) # create a list of the numbers (in string form), one number per item\n    i = 0\n    while i < len(fib_list):\n      numCount[int(fib_list[i])][0] += 1 # if number is x, the number of x's is incremented\n      i+=1\n    i = 0\n    while i < len(numCount):\n      numCount[i] = tuple(numCount[i]) # convert each list item to tuple\n      if numCount[i][0] == 0:\n        numCount.pop(i) # if there aren't any of a specific number, remove it\n      else:\n        i+=1\n    return sorted(numCount, key=lambda x: (x[0], x[1]), reverse=True) # return the sorted list", "from collections import Counter\ndef fib_digits(n):\n        first = 0\n        second = 1\n        for i in range(n-1):\n            update = first+second\n            first = second\n            second = update\n        return list(reversed(sorted([(v,k) for k,v in Counter([int(y) for y in str(update)]).items()])))"]