["def quidditch_scoreboard(teams, actions):\n    teams = {i:0 for i in teams.split(' vs ')}\n    for i in actions.split(', '):\n        team, action = i.split(': ')\n        if 'goal' in action:\n            teams[team] += 10\n        elif 'foul' in action:\n            teams[team] -= 30\n        elif 'Snitch' in action:\n            teams[team] += 150\n            break\n    return ', '.join('{}: {}'.format(i, teams[i]) for i in teams)", "def quidditch_scoreboard(teams, actions):\n\n    def formatter(team, pts): return ', '.join(f'{t}: {p}' for p,t in zip(pts,teams))\n\n    pts, teams = [0,0], teams.split(' vs ')\n    for act in actions.split(', '):\n        for i,t in enumerate(teams):\n            p = act.startswith(t) * (10*act.endswith('goal') + 150 * act.endswith('Snitch') - 30*act.endswith('foul'))\n            pts[i] += p\n            if p==150: return formatter(teams, pts)\n    return formatter(teams,pts)", "import re\nfrom itertools import chain\n\n_VALUE = {\n    'foul': -30,\n    'goal': 10,\n    'Snitch': 150,\n}\n\n_TEAMS = re.compile(r'(.+) vs (.+)')\n\n_ACTION = re.compile(r'(.+): \\S+ (\\S+)')\n\ndef quidditch_scoreboard(teams, actions):\n    scores = {team: 0 for team in _TEAMS.match(teams).groups()}\n    for action in actions.split(', '):\n        team, event = _ACTION.match(action).groups()\n        scores[team] += _VALUE[event]\n        if event == 'Snitch':\n            break\n    return '{}: {}, {}: {}'.format(*chain.from_iterable(list(scores.items())))\n", "def quidditch_scoreboard(teams, actions):\n    t1, t2 = teams.split(\" vs \")\n    D = {t1:0, t2:0}\n    for action in actions.split(\", \"):\n        t, a = action.split(\": \")\n        if   a.endswith(\"goal\"): D[t] += 10\n        elif a.endswith(\"foul\"): D[t] -= 30\n        else: D[t] += 150; break\n    return \", \".join(f\"{k}: {v}\" for k,v in D.items())", "from collections import Counter\n\ndef quidditch_scoreboard(teams, actions):\n    ts = teams.split(' vs ')\n    scores = dict.fromkeys(ts, 0)\n    for action in actions.split(', '):\n        team, a = action.split(': ')\n        if a == 'Caught Snitch':\n            scores[team] += 150\n            break\n        elif a == 'Quaffle goal':\n            scores[team] += 10\n        elif a.endswith('foul'):\n            scores[team] -= 30\n    return ', '.join(f'{team}: {scores[team]}' for team in ts)", "import re\n\ndef quidditch_scoreboard(teams, actions):\n    points = {\"goal\": 10, \"foul\": -30, \"Caught\": 150}\n    teams = teams.split(\" vs \")\n    scores = [0, 0]\n    actions = re.findall(r\"(\\w[\\w ]+): .*?(goal|foul|Caught)\", actions.partition(\" Snitch\")[0])\n    for team, action in actions:\n        scores[teams.index(team)] += points[action]\n    return \"{0[0]}: {1[0]}, {0[1]}: {1[1]}\".format(teams, scores)", "import re\nscore_dict = {'Quaffle goal' : 10, 'Caught Snitch' : 150}\n\ndef quidditch_scoreboard(teams, actions):\n    actions = re.sub(r'Caught Snitch.+', 'Caught Snitch', actions)\n    actions = [action.split(':') for action in actions.split(',')]\n    actions = [[item.strip() for item in action] for action in actions]\n    team_one, team_two = teams.split(' vs ')\n\n    team_one_sum = sum([score_dict.get(a[1], -30) for a in actions if a[0] == team_one])\n    team_two_sum = sum([score_dict.get(a[1], -30) for a in actions if a[0] == team_two])\n\n    return f'{team_one}: {team_one_sum}, {team_two}: {team_two_sum}'", "def quidditch_scoreboard(teams, actions):\n    \n    t = teams.split(' vs ')\n    D = {n:0 for n in t}\n    for a in actions.split(','):\n        D[a[:a.find(':')].strip()] += [p for w, p in [('Snitch', 150), ('goal', 10), ('foul', -30)] if w in a].pop()\n        if 'Snitch' in a: break\n    return f'{t[0]}: {D[t[0]]}, {t[1]}: {D[t[1]]}'", "def quidditch_scoreboard(t,s,x=0,y=0):\n    a,b=t.split(' vs ')\n    for X in s.split(','):\n        k,v =X.strip().split(':')\n        if k==a:x+=10if' Quaffle goal'==v else 150if' Caught Snitch'==v else -30\n        if k==b:y+=10if' Quaffle goal'==v else 150if' Caught Snitch'==v else -30\n        if ' Caught Snitch'==v:break\n    return '%s: %d, %s: %d'%(a,x,b,y)", "def quidditch_scoreboard(teams, actions):\n    team_1, team_2 = teams.split(' vs ')[0], teams.split(' vs ')[1]\n    fouls = ['Blatching foul', 'Blurting foul', 'Bumphing foul', 'Haverstacking foul', 'Quaffle-pocking foul', 'Stooging foul']\n    scores = {'Quaffle goal': 10, 'Caught Snitch': 150 }\n    scores_1, scores_2 = 0,0\n    for i in actions.split(','):\n        if i.split(\": \")[0].strip() == team_1:\n                if i.split(\": \")[1].strip() in scores:\n                    if i.split(\": \")[1].strip() == 'Caught Snitch':\n                        scores_1 += scores[i.split(\": \")[1].strip()]\n                        break\n                    else: scores_1 += scores[i.split(\": \")[1].strip()]\n                if i.split(\": \")[1].strip() in fouls: scores_1 -= 30\n        else:\n            if i.split(\": \")[0].strip() == team_2:\n                if i.split(\": \")[1].strip() in scores:\n                    if i.split(\": \")[1].strip() == 'Caught Snitch':\n                        scores_2 += scores[i.split(\": \")[1].strip()]\n                        break\n                    else: scores_2 += scores[i.split(\": \")[1].strip()]\n                if i.split(\": \")[1].strip() in fouls: scores_2 -= 30\n    return \"{}: {}, {}: {}\".format(team_1, scores_1, team_2, scores_2)                    "]