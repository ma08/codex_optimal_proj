["def example_sort(arr, example_arr):\n    return sorted(arr, key=example_arr.index)", "def example_sort(arr, example_arr):\n    keys = {k: i for i, k in enumerate(example_arr)}\n    return sorted(arr, key=lambda a: keys[a])", "def example_sort(a, b):\n    return sorted(a, key=b.index)", "from collections import Counter\n\ndef example_sort(arr, example_arr):\n    c = Counter(arr)\n    return [n for n in example_arr for _ in range(c[n])]", "def example_sort(arr, example_arr):\n    empty = []\n    for i in example_arr:\n        if i in arr:\n            empty.extend([i] * arr.count(i))\n\n\n    return empty", "example_sort=lambda x,y:sorted(x,key=y.index)", "def example_sort(arr, example_arr):\n    d = {x: i for i, x in enumerate(example_arr)}\n    return sorted(arr, key=d.__getitem__)\n", "def example_sort(arr, example_arr):\n    return [x for x in example_arr for y in arr if x == y]", "def example_sort(arr, example_arr):\n    sorted_arr = []\n    number_count = {}\n\n    # Iterate through array and count number of items\n    for n in arr:\n        number_count[n] = number_count.get(n, 0) + 1\n\n    # Iterate through example ordered array\n    for n in example_arr:\n        num_count = number_count.get(n, 0)\n        for i in range(num_count):\n            sorted_arr.append(n) # Push array count number of times in number_count\n\n    return sorted_arr", "def example_sort(arr, example_arr):\n    return [a for e in example_arr for a in arr if a == e]"]