["#read input\ncases = int(input())\ncaselist = []\nfor i in range(0, cases):\n caselist.append(input())\n\n#iterate each case\nfor j in range(0, cases):\n\n #current case's parameters:\n current_input = caselist[j].split(' ')\n bots = int(current_input[0])\n switch = int(current_input[1])\n\n #generate botlist and cakelist\n botlist = list(range(switch, bots)) + list(range(0, switch))\n cakelist = [False] * bots\n\n\n counter = 0\n index = 0\n for i in range(0,bots):\n  if cakelist[index] == False:\n   cakelist[index] = True\n   counter += 1\n   index = botlist[index]\n  else:\n   break\n\n if counter == bots:\n  print(\"Yes\")\n else:\n  print(\"No\", counter)\n  \n\n \n", "def ggt(a, b):\n while b != 0:\n  c = a % b\n  a = b\n  b = c\n return a\n\ndef kgv(a, b):\n return (a * b) / ggt(a, b)\n\n\ncase = int(input())\n\nfor l in range(case):\n n, k = list(map(int, input().split()))\n if n == 1:\n  print(\"Yes\")\n elif k == 0:\n  print(\"No 1\") \n else:   \n  remaining = kgv(n, k)/k\n  if remaining == n:\n   print(\"Yes\") \n  \n  else:\n   print(\"No %d\" % remaining)\n \n\n\n \n", "import array\nT = int(input())\nfor _ in range(T):\n N,M = list(map(int,input().split()))\n robots = array.array('I')\n robots.extend((0,)*((N>>5)+1))\n c = 0\n Id = M\n while robots[Id>>5] & (1 << (Id&31))==0:\n  robots[Id>>5]+=1<<(Id&31)\n  c+=1\n  Id = (Id+M)%N\n if c==N:\n  print(\"Yes\")\n else:\n  print(\"No\",c)", "import fractions\n\ndef eval(n, m):\n g = fractions.gcd(n, m)\n\n if g == n:\n  if n == 1:\n   print(\"Yes\")\n  else:\n   print(\"No 1\")\n elif g == 1:\n  print(\"Yes\")\n else:\n  print(\"No %d\" % (n / g))\n\nt = int(input())\n\nfor _ in range(t):\n (n, m) = [int(x) for x in input().split()]\n eval(n, m)\n", "T = int(input())\nfor _ in range(T):\n N,M = list(map(int,input().split()))\n robots = [0]*N\n c = 0\n Id = M\n while robots[Id]!=1:\n  robots[Id]=1\n  c+=1\n  Id = (Id+M)%N\n if c==N:\n  print(\"Yes\")\n else:\n  print(\"No\",c)", "def idat(pos,M,N):\n return (pos+M)%N\n\nT = eval(input())\nfor _ in range(T):\n N,M = list(map(int,input().split(\" \")))\n robots = [0]*N\n#     print range(1,N+1)[M:]+range(1,N+1)[:M]\n Id = idat(0,M,N)\n while robots[Id]!=1:\n  robots[Id]=1\n  newpos = Id\n  Id = idat(newpos,M,N)\n#         print robots[M:]+robots[:M]\n if robots.count(1)==N:\n  print(\"Yes\")\n else:\n  print(\"No\",robots.count(1))", "def gcd(n,m):\n if m==0:\n  return n\n else:\n  return gcd(m,n%m)\nt=int(input())\nwhile t:\n par=[int(i) for i in input().split(' ')]\n n,m=par[0],par[1]\n g_div=gcd(n,m)\n if g_div==1:\n  print(\"Yes\")\n else:\n  print(\"No \"+str(int(n/g_div)))\n t=t-1\n", "t=int(input())\nwhile t>0:\n t-=1\n l=input().split(' ')\n m=int(l[0])\n n=int(l[1])\n k=n+1\n c=1\n while k!=1:\n  c+=1\n  k=n+k\n  if k>m:\n   k=k-m\n if c==m:\n  print(\"Yes\")\n else:\n  print(\"No\",c)\n", "def ggt(a, b):\n while b != 0:\n  c = a % b\n  a, b = b, c\n return a\n\ndef kgv(a, b):\n return (a * b) / ggt(a, b)\n\n\ncase = int(input())\n\nfor l in range(case):\n n, k = list(map(int, input().split()))\n if n == 1:\n  print(\"Yes\")\n elif k == 0:\n  print(\"No 1\") \n else:   \n  cak = kgv(n, k)/k\n  if cak == n:\n   print(\"Yes\") \n  \n  else:\n   print(\"No %d\" % cak)\n \n\n\n \n", "# your code goes here\nt = eval(input())\n\nfor i in range(t):\n n,m = list(map(int, input().split()))\n hsck = 0\n z = list(range(1,n+1))\n \n \n z = z[m:]+z[:m]\n \n arr = {j:0 for j in z}\n \n y = z[0]\n while arr[y]!=1:\n  arr[y] = 1\n  y = z[y-1]\n c = 0\n for j in list(arr.keys()):\n  c+=arr[j]\n \n if c==n:\n  print('Yes')\n else:\n  print('No',c)\n \n", "import numpy as np\n\nt=int(input())\nwhile(t):\n t-=1\n n,m=list(map(int,input().split()))\n '''\n    a=range(1,n+1)\n    if m!=0:\n     a=a[m:]+a[:m]\n    ''' \n b=np.zeros(n,dtype='bool')\n \n \n #print b\n pos=0\n while(True):\n  if b[(pos+m)%n]==True:\n   break\n  else:\n   b[(pos+m)%n]=True\n   pos=(pos+m)%n\n   \n  #print b,pos    \n \n s=sum(b)\n if s==n:\n  print('Yes')\n else:\n  print('No'+' '+str(s))", "for i in range(int(input())):\n l = [int(j) for j in input().split()]\n n, m = l[0], l[1]\n count = 0\n j = 1\n while j <= n:\n  j = j + m\n  if j > n:\n   j = j - n\n  count += 1\n  if j == 1:\n   break\n if count == n:\n  print('Yes')\n else:\n  print('No ' + str(count))", "for i in range(int(input())):\n l = [int(j) for j in input().split()]\n n, m = l[0], l[1]\n idx = 0\n count = 0\n arr = []\n for j in range(m, n):\n  arr.append(j + 1)\n for j in range(m):\n  arr.append(j + 1)\n for j in range(n):\n  idx = (arr[idx] - 1)\n  count += 1\n  if idx == 0:\n   break\n if count == n:\n  print('Yes')\n else:\n  print('No ' + str(count))", "import sys\nT=int(input())\nwhile T>0:\n t=sys.stdin.readline().split()\n N=int(t[0])\n M=int(t[1])\n A=[i for i in range(1,N+1)]\n A=A[M:]+A[0:M]\n count=1\n flag=True\n i=A[0]-1\n A[0]=(-1)*A[0]\n while (flag and (count<N)):\n  if A[i]<0:\n   flag=False\n  else:\n   j=A[i]-1\n   A[i]=(-1)*A[i]\n   i=j\n   count+=1\n if not flag:\n  print('No',count)\n else:\n  print('Yes')\n T=T-1\n", "T=int(input())\nwhile T>0:\n N,M=list(map(int,input().strip().split()))\n A=[i for i in range(1,N+1)]\n A=A[M:]+A[0:M]\n count=1\n flag=True\n i=A[0]-1\n A[0]=(-1)*A[0]\n while (flag and (count<N)):\n  if A[i]<0:\n   flag=False\n  else:\n   j=A[i]-1\n   A[i]=(-1)*A[i]\n   i=j\n   count+=1\n if not flag:\n  print('No',count)\n else:\n  print('Yes')\n T=T-1\n", "n=list(map(int,input().split()))\ng=[]\nl=[]\nfor i in range(n[0]):\n m=[]\n l=list(map(int,input().split()))\n for j in range(l[1]+1,l[0]+1):\n  m.append(j)\n for j in range(1,l[1]+1):\n  m.append(j) \n c=0\n f=0\n d={}\n for j in range(0,len(m)):\n  if f not in d:d[f]=\"No\"\n  if d[f]==\"Yes\":\n   break\n  else:\n   d[f]=\"Yes\"\n   f=m[f]-1\n  c=c+1\n if c==len(m):\n  g.append(\"Yes\")\n else:\n  g.append(\"No\"+\" \"+str(c))\nfor i in range(len(g)):\n print(g[i])"]