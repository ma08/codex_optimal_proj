["def treeProduct(num, h, root, ch):\n if ch >= h:\n  return num[root]\n\n left = (root * 2) + 1\n right = (root * 2) + 2\n\n ret1 = treeProduct(num, h, left, ch + 1)\n ret2 = treeProduct(num, h, right, ch + 1)\n\n return num[root] * max(ret1, ret2)\n\ndef main():\n n = int(input())\n while n!=0:\n  line = str(input())\n  s = line.split()\n  num = [int((e)) for e in s]\n  print(int(treeProduct(num,n,0,1)%1000000007))\n  n = int(input())\n  \n \ndef __starting_point():\n main()\n\n__starting_point()", "a=[]\ndef maxx(a,b):\n if(a>b):\n  return a;\n return b\n\n\ndef fnd(cur,mx):\n if(cur>mx):\n  return 1;\n f=fnd(2*cur,mx)\n g=fnd(2*cur+1,mx)\n return (a[cur]*maxx(f,g));\n\n\ndef main():\n while(1):\n  n=eval(input());\n  if(n==0 ):\n   break\n  while(len(a)!=0):\n   a.pop();\n  a.append(0);\n  x=input().split();\n  mx=2**n -1;\n  for i in range(0,2**n-1):\n   a.append(int(x[i]));\n  print(fnd(1,mx)%1000000007)\n\n\nmain()\n", "import sys\n\ndef f(a,b,c,l,d):\n #   print a,b,c\n if a>l:\n  return 1\n if b == c:\n  return d[a]\n else:\n  mid = (b+c)/2\n  id1 = f(2*a,b,mid,l,d) \n  id2 = f(2*a+1,mid+1,c,l,d) \n  \n  id1 = id1*d[a]\n  id2 = id2*d[a]\n  \n#       print id1,id2\n\n  if id1 > id2:\n   return id1\n  else:\n   return id2\n \n\nt = int(sys.stdin.readline())\n\nwhile t:\n d = []\n d.append(0)\n x = sys.stdin.readline().split()\n l = len(x)\n for i in range(l):\n  d.append(int(x[i]))\n\n ans = f(1,1,(1<<t)-1,(1<<t)-1,d)\n ans = ans % 1000000007\n print(ans)\n \n t = int(sys.stdin.readline())\n", "import sys\n\nwhile(1):\n\n n = int(sys.stdin.readline().strip())\n if (n==0):\n  return;\n\n a=list(map(int,input().split()))\n\n for i in range((2**(n-1))-2,-1,-1):\n  a[i]=max(a[i]*a[2*(i+1)-1],a[i]*a[2*i+2])\n print(a[0]%1000000007)\n  \n  \n\n\n\n", "def main():\n while(True):\n  h = int(input())\n  if h==0:\n   break\n  lineproc = input().split()\n  nodes = []\n  nodes.append(int(lineproc[0]))\n  for i in range(1, int(2**h)-1):\n   number = int(lineproc[i])*nodes[int((i+1)/2)-1]\n   nodes.append(number)\n  print(max(nodes)%1000000007)\nmain()\n", "while 1:\n N=eval(input())\n if N==0:\n  break\n A=list(map(int,input().split(' ')))\n for i in range(N-1,0,-1):\n  C=1<<(i-1)\n  B=1<<i\n  for j in range(C-1,B-1,1):\n   A[j]=A[j]*max(A[2*j+1],A[2*j+2])\n print(A[0]%1000000007)\n", "import sys \n\n#f = open(\"test.in\")\nf = sys.stdin\n\nwhile (True):\n H = int(f.readline())\n if (H == 0):\n  break\n \n v = list(map(int, f.readline().split()))\n p = [0] * (2 ** H)\n\n for i in range(2 ** H - 1, 0, -1):\n  if (i * 2 >= 2 ** H):\n   p[i] = v[i - 1]\n  else:\n   p[i] = v[i - 1] * max(p[2 * i], p[2 * i + 1])\n\n r = p[1] % 1000000007\n print(r)\n", "#! /usr/bin/env python\n\nfrom math import ceil as ceil\n\ndef parent(index):\n return int(ceil(index / 2) - 1);\n\nwhile True:\n length = int(input());\n\n if length == 0:\n  break;\n\n numbers = input().split();\n tree = [0] * len(numbers);\n\n for i in range(0, len(numbers)):\n  tree[i] = int(numbers[i]);\n\n lastIndex = len(tree) - 1;\n\n if lastIndex & 1:\n  tree[parent(lastIndex)] = tree[parent(lastIndex)] * tree[lastIndex];\n  --lastIndex;\n\n for i in range(lastIndex, 0, -2):\n  parentIndex = parent(i);\n  tree[parentIndex] = max(tree[parentIndex] * tree[i], \n            tree[parentIndex] * tree[i - 1]);\n\n print((tree[0] % 1000000007));\n", "import math\n\ndef Left(i):\n return 2*i\n\ndef Right(i):\n return (2*i)+1\n\ndef levelOf(x):\n return int( math.floor( (math.log10(x)/math.log10(2))+1) )\n\ndef treeProduct(numList, n, i):\n if levelOf(i)==n:\n  return numList[i]\n else:\n  tpl = treeProduct(numList,n,Left(i))\n  tpr = treeProduct(numList,n,Right(i))\n  if (tpl>tpr):\n   return ( (numList[i]*tpl))\n  else:\n   return ( (numList[i]*tpr))\n\ndef main():\n n = int(input())\n while n!=0:\n  line = '-1 '+str(input())\n  s = line.split()\n  num = [int(e) for e in s]\n  print(int(treeProduct(num,n,1)%1000000007))\n  n = int(input())\n \ndef __starting_point():\n main()\n\n__starting_point()"]