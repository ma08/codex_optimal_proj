["class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count = 0\n        for arr in grid:\n            for num in arr:\n                if num < 0:\n                    count +=1\n        return count", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        counter = 0\n        \n        for i in grid:\n            for j in i:\n                if j < 0:\n                    counter += 1\n                    \n        return counter", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        length = len(grid[0])\n        count = 0\n        \n        for inside in grid:\n            a = 0\n            b = len(inside) - 1\n            \n            while a <= b:\n                middle = (a + b)//2\n                if inside[middle] < 0:\n                    if middle > 0 and inside[middle-1] >= 0:\n                        count += (length - middle)\n                        break\n                    elif middle == 0 and inside[middle-1] < 0:\n                        count += length\n                        break\n                    else:\n                        b -= 1\n                else:\n                    a += 1\n                    \n        return count\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                print((grid[i][j]))\n                if grid[i][j]<0:\n                    count+=1\n        return count\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        i = 0 \n        j = 0 \n        count = 0\n        while i < len(grid):\n            while j < len(grid[i]):\n                print(grid[i][j])\n                if grid[i][j] < 0:\n                    count+=1\n                j+=1\n            \n            i+=1\n            j = 0\n        return count", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        somme = 0\n        for row in grid:\n            for el in row:\n                if el < 0:\n                    somme += 1\n        return somme", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        \n        def binarysearch(arr):\n            low=0;high=len(arr)-1\n\n            while low<=high:\n                mid=(low+high)//2\n                if arr[mid]<0:\n                    high=mid-1\n                else:\n                    low=mid+1\n            return low\n        count=0\n        for arr in grid:\n            val=binarysearch(arr)\n            count+=len(arr)-val\n        return count\n", "import numpy as np\nclass Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        g=np.array(grid)\n        g=list(np.concatenate(g))\n        count=0\n        sum=0\n        for i in g:\n            if sum+i<sum:\n                count+=1\n            sum=sum+i\n        return count", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        # counter = 0\n        # for i in range(len(grid)):\n        #     for j in range(len(grid[0])):\n        #         if grid[i][j] < 0:\n        #             counter += 1\n        # return counter\n        return str(grid).count('-')", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count = 0\n        for i in range(0, len(grid)):\n            for j in range(0, len(grid[i])):\n                if grid[i][j] <0:\n                    count += 1\n        return count\n        \n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        c = 0\n        for r in grid:\n            for i in range(len(r)):\n                if r[i] < 0:\n                    c += (len(r) - i)\n                    break\n        return c                    \n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        return len([c for r in grid for c in r if c<0])", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n            y=0\n            for row in grid:\n                l = 0;\n                r = len(row)\n                while l < r:\n                    mid = l + (r-l)//2\n                    if (row[mid] < 0):\n                        r = mid\n                    else:\n                        l = mid+1\n                y+=len(row)-r\n            return y\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count = 0\n        for i in range(len(grid), 0, -1):\n            for j in range(len(grid[i-1]), 0, -1):\n                if grid[i-1][j-1] < 0:\n                    count += 1\n                else:\n                    break\n        return count\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        \n        count = 0\n        for arr in grid:\n            count += len(arr)-self.NegStart(arr)\n        return count\n        \n    def NegStart(self, arr):\n        first = 0\n        last = len(arr)-1\n        found = False\n        while first<=last:\n            midpoint = (first + last)//2\n            if arr[midpoint] < 0:\n                last = midpoint-1\n            else:\n                first = midpoint+1\n        return first\n            \n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n      ct = 0\n      \n      for i in grid:\n        for j in i:\n          if j < 0:\n            ct += 1\n            \n      return ct", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        #counter set to 0\n        counter = 0\n        \n        #loop thru arr of arr\n        for arr in grid:\n        \n            #loop thru every single num in arr\n            for num in arr:\n            \n                #if num is less than 0:\n                if num < 0:\n                    #counter += 1\n                    counter += 1\n        #return counter\n        return counter\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count=0 \n        for i in grid:\n            for j in i:\n                if j<0:\n                    count+=1\n        return count\n", "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        count=0\n        for i in grid:\n            for j in i:\n                if(j<0):\n                    count+=1\n                \n            \n        return count\n"]