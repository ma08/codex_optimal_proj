["def bs(arr, val, key=lambda x:x):\n     l, r = 0, len(arr)-1\n     if key(arr[l])>val:\n         return l\n     if key(arr[r])<=val:\n         return r+1\n     while l+1<r:\n         m = (l+r)>>1\n         v = key(arr[m])\n         if v<=val:\n             l = m\n         else:\n             r = m\n     return r\n \n def bs_left(arr, val, key=lambda x:x):\n     l, r = 0, len(arr)-1\n     if key(arr[l])>=val:\n         return l\n     if key(arr[r])<val:\n         return r+1\n     while l+1<r:\n         m = (l+r)>>1\n         v = key(arr[m])\n         if v<val:\n             l = m\n         else:\n             r = m\n     return r\n             \n \n class Solution:\n     def findNumberOfLIS(self, nums):\n         if not nums: return 0\n         N = len(nums)\n         l, dp = 0, [[] for _ in range(N)]\n         for n in nums:\n             idx1 = bs_left(dp, n, lambda _:_[-1][0] if _ else sys.maxsize)\n             if idx1==l:\n                 l += 1\n             if idx1==0:\n                 dp[0].append([n, (dp[0][-1][1] if dp[0] else 0)+1])\n             else:\n                 idx2 = bs(dp[idx1-1], -n, lambda _:-_[0])\n                 dp[idx1].append([n, (dp[idx1][-1][1] if dp[idx1] else 0)+(dp[idx1-1][-1][1] if idx2==0 else (dp[idx1-1][-1][1]-dp[idx1-1][idx2-1][1]))])\n         return dp[l-1][-1][1]", "def bs(arr, val, key=lambda x:x):\n     l, r = 0, len(arr)-1\n     if key(arr[l])>val:\n         return l\n     if key(arr[r])<=val:\n         return r+1\n     while l+1<r:\n         m = (l+r)>>1\n         v = key(arr[m])\n         if v<=val:\n             l = m\n         else:\n             r = m\n     return r\n \n def bs_left(arr, val, key=lambda x:x):\n     l, r = 0, len(arr)-1\n     if key(arr[l])>=val:\n         return l\n     if key(arr[r])<val:\n         return r+1\n     while l+1<r:\n         m = (l+r)>>1\n         v = key(arr[m])\n         if v<val:\n             l = m\n         else:\n             r = m\n     return r\n             \n \n class Solution:\n     def findNumberOfLIS(self, nums):\n         if not nums: return 0\n         N = len(nums)\n         l, dp = 0, [[] for _ in range(N)]\n         for n in nums:\n             idx1 = bs_left(dp, n, lambda _:_[-1][0] if _ else sys.maxsize)\n             if idx1==l:\n                 l += 1\n             if idx1==0:\n                 dp[0].append([n, (dp[0][-1][1] if dp[0] else 0)+1])\n             else:\n                 idx2 = bs(dp[idx1-1], -n, lambda _:-_[0])\n                 dp[idx1].append([n, (dp[idx1][-1][1] if dp[idx1] else 0)+(dp[idx1-1][-1][1] if idx2==0 else (dp[idx1-1][-1][1]-dp[idx1-1][idx2-1][1]))])\n         return dp[l-1][-1][1]"]