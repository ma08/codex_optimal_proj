["from collections import Counter\n\ndef solve(a):\n    c = Counter(a)\n    return sorted(a, key=lambda k: (-c[k], k))", "def solve(arr):\n    return sorted(arr, key= lambda x: (-arr.count(x), x))", "def solve(arr):\n    return sorted(sorted(arr), key=lambda n: arr.count(n), reverse=True)", "def solve(arr):\n    freq = {n: -arr.count(n) for n in set(arr)}\n    return sorted(sorted(arr), key=freq.get)", "from collections import Counter\n\ndef solve(xs):\n    fs = Counter(xs)\n    return sorted(xs, key=lambda x: (-fs[x], x))", "from collections import Counter\n\ndef solve(arr):\n    c = Counter(arr)\n    return sorted(arr, key=lambda x: (-c[x], x))", "def solve(arr):\n    return sorted(arr, key=lambda x: (arr.count(x),-x), reverse=True)", "def solve(array):\n    return sorted(sorted(array), key=array.count, reverse=True)", "from collections import Counter\nfrom itertools import groupby\n\ndef unpack_fun(l):\n    return sorted([k for k,v in l for i in range(v)])\n\ndef solve(arr):\n    out_lst=[]\n    l=[list(v) for k,v in groupby(Counter(arr).most_common(),key=lambda x:x[1])]\n    for v in l:\n        out_lst.extend(unpack_fun(v))\n    return out_lst", "def solve(arr):\n    c=[]\n    answer = []\n    for n in range(0,max(arr)+1):\n        c.append(arr.count(n))\n    x = sorted(c, reverse=True)\n    for i in x:\n        m = i\n        while(m>0):\n            answer.append(c.index(i))\n            m-=1\n        c[c.index(i)]=-1\n    return answer"]