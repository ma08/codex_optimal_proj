["#\n#    ------------------------------------------------\n#           ____          _     Generatered using\n#          / ___|        | |\n#         | |    __ _  __| | ___ _ __  ______ _\n#         | |   / _` |/ _` |/ _ \\ '_ \\|_  / _` |\n#         | |__| (_| | (_| |  __/ | | |/ / (_| |\n#          \\____\\____|\\____|\\___|_| |_/___\\____|\n#\n#      GNU Affero General Public License v3.0\n#    ------------------------------------------------\n#    Author   : prophet\n#    Created  : 2020-07-12 11:19:01.523119\n#    UUID     : aXsU7xuXyjk3Ky2f\n#    ------------------------------------------------\n#\nproduction = True\n\nimport sys, math, collections\n\ndef input(input_format = 0, multi = 0):\n\n    if multi > 0: return [input(input_format) for i in range(multi)]\n    else:\n        next_line = sys.stdin.readline()[:-1]\n\n        if input_format >= 10:\n            use_list = False\n            input_format = int(str(input_format)[-1])\n        else: use_list = True\n\n        if input_format == 0: formatted_input = [next_line]\n        elif input_format == 1: formatted_input = list(map(int, next_line.split()))\n        elif input_format == 2: formatted_input = list(map(float, next_line.split()))\n        elif input_format == 3: formatted_input = list(next_line)\n        elif input_format == 4: formatted_input = list(map(int, list(next_line)))\n        elif input_format == 5: formatted_input = next_line.split()\n        else: formatted_input = [next_line]\n\n        return formatted_input if use_list else formatted_input[0]\n\ndef out(output_line, output_format = 0, newline = True):\n\n    formatted_output = \"\"\n\n    if output_format == 0: formatted_output = str(output_line)\n    elif output_format == 1: formatted_output = \" \".join(map(str, output_line))\n    elif output_format == 2: formatted_output = \"\\n\".join(map(str, output_line))\n\n    print(formatted_output, end = \"\\n\" if newline else \"\")\n\ndef log(*args):\n    if not production:\n        print(\"$$$\", end = \"\")\n        print(*args)\n\nenu = enumerate\n\nter = lambda a, b, c: b if a else c\n\nceil = lambda a, b: -(-a // b)\n\ndef mapl(iterable, format = 0):\n    \n    if format == 0: return list(map(int, iterable))\n    elif format == 1: return list(map(str, iterable))\n    elif format == 2: return list(map(list, iterable))\n#\n#   >>>>>>>>>>>>>>> START OF SOLUTION <<<<<<<<<<<<<<\n#\n\n\ndef solve():\n\n    s = input(3)\n\n    u = [0] * 3\n\n    for i in s:\n        if i == \"R\":\n            u[0] += 1\n        elif i == \"P\":\n            u[1] += 1\n        elif i == \"S\":\n            u[2] += 1\n\n    log(u)\n    y = 0\n    p = 0\n\n    for i, j in enu(u):\n        if j > y:\n            y = j\n            p = i\n\n    if p == 0:\n        a = \"P\"\n    elif p == 1:\n        a = \"S\"\n    elif p == 2:\n        a = \"R\"\n\n    out(a * len(s))\n\n    return\n\n\nfor i in range(input(11)): solve()\n# solve()\n\n#\n#   >>>>>>>>>>>>>>>> END OF SOLUTION <<<<<<<<<<<<<<<\n#\n", "# import sys\nfrom collections import Counter\n# input = sys.stdin.readline\n\n# T = int(input())\n\n# for t in range(T):\n#     s = input()\n#     pos = set(range(len(s)))\n\n#     answer = ['']\n\n#     for i in range(len(s)):\n#         lets = [s[k] for k in pos]\n#         if not pos:\n#             break\n#         cc = Counter(lets)\n#         fl = cc.most_common()[0][0]\n#         choice = ''\n#         if fl == 'R':\n#             choice = 'P'\n#         elif fl == 'S':\n#             choice = 'R'\n#         else:\n#             choice = 'S'\n#         answer.append(choice)\n#         next_pos = set()\n#         for p in pos:\n#             if s[p] == choice:\n#                 np = p+1\n#                 if np >= len(s):\n#                     np = 0\n#                 next_pos.add(np)\n#         pos = next_pos\n\n#     while len(answer) < len(s):\n#         answer.append('R')\n\n#     print(''.join(answer))\n\nT = int(input())\n\nfor t in range(T):\n    s = input()\n    cc = Counter(s)\n    fl = cc.most_common()[0][0]\n    if fl == 'R':\n        choice = 'P'\n    elif fl == 'S':\n        choice = 'R'\n    else:\n        choice = 'S'\n    print(choice*len(s))\n", "T = int(input())\nfor _ in range(T):\n    s = input().strip()\n    rc = 0\n    sc = 0\n    pc = 0\n    for c in s:\n        if c == 'R':\n            rc += 1\n        elif c == 'S':\n            sc += 1\n        else:\n            pc += 1\n    if rc == max(rc,sc,pc):\n        print('P'*len(s))\n    elif sc == max(rc,sc,pc):\n        print('R'*len(s))\n    else:\n        print('S'*len(s))\n", "\nt=int(input())\nfor you in range(t):\n    s=input()\n    n=len(s)\n    numofr=0\n    numofs=0\n    numofp=0\n    for i in s:\n        if(i=='R'):\n            numofr+=1\n        elif(i=='S'):\n            numofs+=1\n        else:\n            numofp+=1\n    z=max(numofr,numofp,numofs)\n    if(z==numofr):\n        print('P'*n)\n    elif(z==numofs):\n        print('R'*n)\n    else:\n        print('S'*n)", "import sys\nimport math\nimport collections\nimport heapq\n\ndef set_debug(debug_mode=False):\n    if debug_mode:\n        fin = open('input.txt', 'r')\n        sys.stdin = fin\n\n\ndef int_input():\n    return list(map(int, input().split()))\n\n\ndef __starting_point():\n    # set_debug(True)\n\n    t = int(input())\n    # t = 1\n\n    for ti in range(1, t + 1):\n        # n = int(input())\n        s = input()\n\n        c = collections.Counter(s)\n        m = max(c['R'], c['S'], c['P'])\n\n        if m == c['R']:\n            print('P' * len(s))\n        elif m == c['S']:\n            print('R' * len(s))\n        else:\n            print('S' * len(s))\n\n__starting_point()", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    cnt_r = s.count(\"R\")\n    cnt_s = s.count(\"S\")\n    cnt_p = s.count(\"P\")\n    max_cnt = max(cnt_r, cnt_s, cnt_p)\n\n    if max_cnt == cnt_r:\n        print(\"P\" * n)\n    elif max_cnt == cnt_s:\n        print(\"R\" * n)\n    else:\n        print(\"S\" * n)", "for _ in range(int(input())):\n\ts = input()\n\td = dict()\n\td['R'] = 0\n\td['S'] = 0\n\td['P'] = 0\n\td1 = dict()\n\td1['R'] = 'P'\n\td1['S'] = 'R'\n\td1['P'] = 'S'\n\tfor i in s:\n\t\td[i] += 1\n\tans = ''\n\tc = ''\n\tmx = -1\n\tfor i in list(d.items()):\n\t\tif mx < i[1]:\n\t\t\tc = d1[i[0]]\n\t\t\tmx = i[1]\n\tprint(c * len(s))\n", "import sys\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n\ts = sys.stdin.readline().strip()\n\tx, y, z = s.count('R'), s.count('S'), s.count('P')\n\tif max(x, y, z) == x:\n\t\tprint('P'*len(s))\n\telif max(x, y, z) == y:\n\t\tprint('R'*len(s))\n\telse:\n\t\tprint('S'*len(s))", "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ndef ans(S):\n\tfreqs = Counter(S)\n\targ_max = max(freqs, key=freqs.get)\n\td = {\n\t\t'R': 'P',\n\t\t'P': 'S',\n\t\t'S': 'R'\n\t}\n\treturn d[arg_max]*len(S)\n\nT = int(input())\nfor t in range(T):\n\tS = input()\n\tprint(ans(S))\n", "t=int(input())\nfor _ in range(t):\n  s=input()\n  rcount=0\n  pcount=0\n  scount=0\n  for i in range(len(s)):\n    if s[i]=='R':\n      rcount+=1\n    if s[i]=='S':\n      scount+=1\n    if s[i]=='P':\n      pcount+=1\n  ans=[]\n  if rcount>=pcount and rcount>=scount:\n    for i in range(len(s)):\n      ans.append('P')\n  elif scount>=pcount and scount>=rcount:\n    for i in range(len(s)):\n      ans.append('R')\n  else:\n    for i in range(len(s)):\n      ans.append('S')\n  print(''.join(ans))", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\ts = SI()\n\tans = \"\"\n\td = {\"R\":\"P\",\"S\":\"R\",\"P\":\"S\"}\n\tm = 0\n\tif s.count(\"R\")>m:\n\t\tm = s.count(\"R\")\n\t\tans = \"R\"\n\tif s.count(\"S\")>m:\n\t\tm = s.count(\"S\")\n\t\tans = \"S\"\n\tif s.count(\"P\")>m:\n\t\tans = \"P\"\n\tans = d[ans]\n\tprint(ans*len(s))"]