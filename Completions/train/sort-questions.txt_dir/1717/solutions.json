["from collections import Counter\nimport re\n\n\ndef top_3_words(text):\n    c = Counter(re.findall(r\"[a-z']+\", re.sub(r\" '+ \", \" \", text.lower())))\n    return [w for w,_ in c.most_common(3)]", "import re\nfrom collections import Counter\n\ntop_3_words=lambda t:[w for w,c in Counter(re.findall(\"'*[a-z][a-z']*\",t.lower())).most_common(3)]", "import re\nfrom collections import Counter\n\ndef top_3_words(text):\n    words = re.findall(r\"[a-z']*[a-z]+[a-z']*\", text.lower())\n    top_3 = Counter(words).most_common(3)\n    return [tup[0] for tup in top_3]", "from collections import Counter\nimport re\n\ndef top_3_words(text):\n    words = re.findall(r\"[a-z][a-z']*|[a-z']*[a-z]\", text, re.IGNORECASE)\n    topchart = Counter([word.lower() for word in words]).most_common(3)\n    return [top[0] for top in topchart]", "import re\n\ndef top_3_words(text):\n    re_non_valid = re.compile('[^a-z\\' ]')\n    re_chars = re.compile('[a-z]')\n    text = text.lower()\n    text = ' '.join([x for x in re_non_valid.sub(' ',text).split() if re_chars.search(x)])\n    words = {}\n    top = {}                    # Dictionary with no more than 3 words\n    for word in text.split():\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n        top[word] = words[word] # Add the new word to the top\n        if len(top) > 3:        # If the top is too big remove the worst word\n            top.pop(min(top, key=top.get))\n    return sorted(top, key=top.get, reverse=True)", "from collections import Counter\nfrom string import ascii_letters, printable\n\nkeep = ascii_letters + \"'\"\nremove = printable.translate(str.maketrans('', '', keep))\ntable = str.maketrans(keep + remove, keep.lower() + ' ' * len(remove))\n\ndef top_3_words(text):\n    words = (word for word in text.translate(table).split() if set(word) != {\"'\"})\n    return [word for word, freq in Counter(words).most_common(3)]", "from operator import itemgetter\n\ndef top_3_words(text):\n    text0 = \"\".join([ c if c in \"abcdefghijklmnopqrstuvwxyz'\" else \" \" for c in text.lower() ])#change rubbish to \" \"\n    check_dict = {} #create dictionary\n    text0 = text0.split() #convert text to a list\n    for x in text0: #remove lone \"'\"s\n        if not any(i.isalpha() for i in x):\n            text0.pop(text0.index(x))\n    for x in text0:\n        if x in check_dict:\n            check_dict[x] += 1 #count each use\n        else:\n            check_dict.update({x: 1}) #create keys and values\n    top_3_list = list(sorted(list(check_dict.items()), key = itemgetter(1), reverse = True)[:3]) #sorts\n    return list(map(itemgetter(0), top_3_list))#returns only the word\n", "from string import punctuation\n\ndef top_3_words(text):\n    for p in punctuation: \n        if p != \"'\": text = text.replace(p, \" \")\n    count = {}\n    for w in text.lower().split():\n        if w.strip(punctuation) == '':\n            pass\n        elif w in count.keys():\n            count[w] += 1\n        else:\n            count[w] = 1\n    lcount = [(w,c) for w,c in count.items()]\n    lcount.sort(key=lambda x: x[1], reverse=True)\n    return [x[0] for x in lcount[:3]]", "from collections import Counter as C\nfrom re import sub as s\nfrom string import punctuation as p\ndef top_3_words(__):\n    __ = s('[{}]'.format(p.replace(\"'\",'')),' ',__).lower() \n    return list(filter(lambda c: c.replace(\"'\",'').isalnum(),(_[0] for _ in C(__.split()).most_common(3))))", "import re\ndef top_3_words(text):\n    panctuation = '_\\''\n    list_word = re.findall(r'[a-z0-9A-Z\\']+',text.lower())\n    result = []\n    dict1 = {}\n    for word in list_word:\n        if word and word != \"'\" and word != \"'''\":\n            if word in dict1:\n                dict1[word]+=1\n            else:\n                dict1[word] = 1\n    result = sorted(list(dict1.items()), reverse=True, key=lambda x: x[1])\n    result = result[:3] if len(result)>3 else result\n    return [res[0] for res in result]\n    \n        \n"]