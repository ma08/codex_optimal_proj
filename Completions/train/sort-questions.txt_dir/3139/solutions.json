["def index(array, n):\n    try:\n        return array[n]**n\n    except:\n        return -1", "def index(array, n):\n    return array[n]**n if n < len(array) else -1", "def index(array, n):\n    try:\n        return pow(array[n],n)\n    except IndexError:\n        return -1", "def index(array, n):\n    if n < len(array):\n        return (array[n])**n\n    else:\n        return -1", "from typing import List\n\ndef index(array: List[int], n: int) -> int:\n    \"\"\" Get the N-th power of the element in the array with the index N. \"\"\"\n    try:\n        return pow(array[n], n)\n    except IndexError:\n        return -1", "def index(array, n):\n    return array[n]**n if n <= len(array) - 1 else -1", "def index(array, n):\n    return array[n] ** n if len(array) >= n + 1 else -1", "def index(array, n):\n    return -1 if n >= len(array) else array[n] ** n", "def index(arr, n):\n    return arr[n] ** n if n < len(arr) else -1", "def index(array, n):\n    return array[n] ** n if len(array) > n else -1", "index = lambda a, n: -1 if len(a)<=n else a[n]**n", "def index(array, n):\n    if (n < len(array)):\n        return pow(array[n], n)\n    return -1    ", "import math\ndef index(array, n):\n    if len(array) > n:\n        return math.pow(array[n], n)\n    else:\n        return -1", "def index(array, n):\n    return pow(array[n], n) if n < len(array) else -1", "def index(array, n):\n    return array[n] ** n if n in range(len(array)) else -1", "def index(array, n):\n    return array[n] ** n if 0 <= n < len(array) else -1", "def index(array, n):\n    if n >= len(array):\n            return -1\n    else:\n            return array[n]**n", "def index(a, n):\n    if (len(a)-1)<n:\n        return -1\n    return a[n]**n", "def index(arr, n):\n  try:\n    return arr[n] ** n\n  except:\n    return -1", "index = lambda a, n: a[n] ** n if n + 1 <= len(a) else -1", "index = lambda a,n: -1 if n+1 > len(a) else a[n]**n ", "index=lambda a,n:-(n>=len(a))or a[n]**n", "index = lambda a,i : a[i]**i if len(a)-1 >= i else -1", "def index(array, n):\n    for idx in range(len(array)):\n        if idx == n:\n            return array[idx] ** n\n    return -1", "def index(array, n):\n    if n>=len(array) or n<0:\n        return -1\n    else:\n        return (array[n])**n", "def index(array, n):\n    if 0<=n<len(array):\n        return pow(array[n],n)\n    else:return -1", "def index(array, n):\n    if(n<=len(array)-1):\n        array[n]=array[n]**n\n        return array[n]\n    else:\n        return -1\n", "def index(array, n):\n    try:\n        return array[n]**n\n    except:\n        return -1\nprint(index([1,2,3,4],2))", "def index(array, n):\n    \n    if n < len(array):\n        x = array[n] **n;\n    else:\n        x = -1;\n        \n    return x;", "def index(array, n):\n    if (len(array)-1)>=n:\n        for i in range(len(array)):\n            return array[n]**n\n    else:\n        return -1", "def index(array: list, n: int) -> int:\n    \"\"\" This function find the N-th power of the element in the array with the index N. \"\"\"\n    for k, i in enumerate(range(len(array))):\n        if i == n:\n            return (array[i] ** n)\n    return -1", "def index(array, n):\n    if array==[]:\n        return -1\n    if len(array)>n:\n        return array[n]**n\n    else: return -1\n", "def index(array, n):\n        if n+1<len(array):\n            return (array[n])**n\n        else:\n            if n+1>len(array):\n                return -1\n            else:\n                return (array[n])**n\n", "def index(array: list, n: int) -> int:\n    return array[n]**n if n < len(array) else -1", "def index(array, n):\n    if (len(array)<n+1):\n        return -1\n    else:\n        return pow(array[n],n)", "def index(array, n):\n    try: \n        return array[n] ** n\n    except:\n        return -1\n        \n\nprint(index ([1, 2, 3, 4], 2  ))    \n\nprint(index([1, 3, 10, 100],3))\n\nprint(index([1, 3, 10, 100],10))", "import math\ndef index(array, n):\n    if(len(array)==0):\n        return -1\n    for i in array:\n        if (n>len(array)-1):\n            return -1\n        if i is array[n]:\n            return(math.pow(i,n))", "import math\n\ndef index(array, n):\n    for i in range(len(array)):\n        if i == n:\n            return array[i] ** n\n    return -1", "def index(array, n):\n    if len(array) <= n :\n        return -1 \n    else:\n        nth = array[n]\n        nth_sq = nth ** n\n    return nth_sq\n", "def index(array, n):\n    if len(array) <= n:\n        return -1\n    for i in range(len(array)):\n        if i == n:\n            return array[i] ** n\n", "def index(array, n):\n    while n >= len(array):\n        return -1\n    else:\n        return array[n] ** n", "index = lambda l,n:l[n]**n if n<len(l) else -1", "def index(array, n):\n\n    for i, val in enumerate(array):\n        if n == i:\n            return  val ** n\n    else:\n        return -1\n        \n", "def index(array, n):\n    result = 1\n    if n > len(array) - 1 :\n        return -1 \n    else:\n        for index in range(n):\n            result = result * array[n]\n    return result\n", "def index(array, n):\n    if n<len(array):\n        return int(array[n]**n)\n    if n>=len(array):\n        return -1\n", "def index(array, n=0):\n    if n > len(array)-1:\n        return -1\n    else:\n        return array[n]**n\n\n", "def index(array, n):\n    print((len(array)))\n    if n >= len(array):\n        return(-1)\n        print((-1))\n    else:\n        return(array[n]**n)\n", "index = lambda a, n: -1 if n >= len(a) else a[n] ** n", "def index(array, n):\n    try:   \n        x = array[n]\n    except IndexError:\n        return -1\n    y = x**n\n    return y\n", "def index(array, n):\n    x=len(array)\n    if n > x - 1:\n        return -1\n    else:\n        return array[n] ** n", "def index(array, n):\n    return pow(array[n],n) if n <= len(array)-1 else -1", "def index(array, n):\n    if len(array) < n+1:\n        return -1\n    elif len(array) >= n+1:\n        number = array[abs(n)]\n        return number ** n\n    else:\n        pass", "def index(array, n):\n    if n >= len(array): # Here, the nth index will be outside the array.\n        return -1\n    else:\n        return array[n] ** n", "def index(array, n):\n    \n    try:\n        if (n - 1) > len(array):\n            return -1\n        else:\n            return array[n] ** n\n\n    except IndexError:\n        return -1", "def index(array, n):\n    if len(array)-1<n:\n        a=-1\n        return(a)\n    else:\n        return(array[n]**n)", "def index(array, n):\n    for idx, i in enumerate(array):\n        if idx == n:\n            x = array[idx] ** n\n            return x\n    else:\n        return -1", "def index(array, n):\n    list(array)\n    if n>len(array)-1 :\n      return -1\n    else:\n      return (array[n]**n)\n", "def index(array, n):\n    ans = 1\n    if n > len(array)-1:\n        return -1\n    else:\n        for i in range (n):\n           ans *= array[n] \n        return ans", "def index(array, n):\n    if n < len(array):\n        a = array[n]\n        num = a ** n\n        return num\n    else:\n        return -1\n", "def index(array, n):\n    if n > len(array)-1:\n        return -1\n    else:\n        number = array[n]\n        return number**n", "def index(array, n):\n    list(array)\n    while n < len(array):\n        return (array[n])**n\n    else:\n        return -1", "def index(array, n):\n    list(array)\n    if n < len(array):\n        return (array[n])**n\n    else:\n        return -1\n", "def index(array, n):\n    contar = 0\n    for numero in array:\n        contar = contar + 1\n    if (contar) > n:\n        y = array[n]\n        x = y**n\n        return x\n    else:\n        return -1", "def index(array, n):\n    if n < len(array):\n        target = array[n]\n        ans = target ** n\n        \n        return ans\n    else:\n        return -1", "def index(array, n):\n    dlina = len(array)\n    if n <= dlina - 1:\n        return(array[n]**n)\n    else:\n        return (-1)\n    \n", "def index(array, n):\n    while True:\n        try:\n            return array[n] ** n \n            break\n        except IndexError:\n            return -1", "def index(array, n):\n    try:\n        if len(array) >= n:\n            return array[n] ** n\n        else:\n            return -1\n    except IndexError:\n        return -1\n", "def index(array, n):\n    if len(array)>n:\n        a=array[n]  \n        return a**n\n    else: \n        return -1", "index=lambda a,n:a[n]**n if n<len(a)else~0", "def index(array, n):\n    return array [n]**n if n <len(array) else -1\n\n    \n    '''\n    if n < len(array):\n        return (array[n]**n) \n    else:\n        return -1\n    '''", "def index(array, n):\n    try:\n        a = array[n]**n\n        return a\n    except IndexError:\n        return -1", "def index(array, n):\n    \n    if len(array) > n:\n        nTh = array[n]**n\n    else:\n        nTh = -1\n    return nTh", "def index(array, n):\n    try:\n        a = array[n]**n\n        return a\n    except:\n        return -1\n", "def index(array, n):\n    nth_power = None\n    try: nth_power = array[n]**n\n    except: nth_power = -1\n    return nth_power", "def index(array, n):\n    try:\n        x = array.pop(n)\n    except IndexError:\n        return -1\n    return x**n", "def index(array, n):\n    length = len(array)\n    if n <= length - 1:\n        return array[n]**n\n    else:\n        return -1", "def index(array, n):\n    if (n > len(array) - 1):\n        return -1\n    else:\n        result = 1\n        i = 0\n        while (i < n):\n            result *= array[n]\n            i += 1\n        return result", "def index(array, n):\n    if n > len(array) - 1:\n        return(-1)\n    elif n == 0:\n        return(1)\n    else:\n        pw = array[n]\n        i = 1\n        while i !=  n:\n            array[n] *= pw\n            i += 1\n        return(array[n])\n", "def index(array, n):\n    try:\n        if n:\n            index = array[n]\n            return index**n\n        elif n == 0:\n            return 1\n    except:\n        return -1\n", "def index(array, n):\n    y = 0\n    if n > len(array)-1:\n        y = -1\n    else:\n        y = pow(array[n],n)\n    return y", "def index(array, n):\n    if len(array)-1<n:\n        otvet=-1\n    else:\n        otvet=array[n]**n\n    return otvet", "def index(array, n):\n    print(array)\n    print(n)\n    if(n >= len(array)):\n        return -1\n    else:\n        return array[n] ** n", "def index(array, n):\n    if n <= (len(array)-1):\n        n=array[n]**n\n        return n\n    else:\n        return (-1)", "def index(array, N):\n    res = 0\n    uzunluk = len(array)\n    if N>=uzunluk:\n        return -1\n    \n    ussuAlinacakSayi = array[N]\n    return ussuAlinacakSayi**N", "def index(array, n):\n    return pow(array.pop(n), n) if len(array) > n else -1", "def index(array, n):\n    if n >= len(array) or n < 0:\n        return -1\n    else:\n#         if n in array:\n#             return array[n] ** n\n        return array[n] ** n;", "def index(array, n):\n    arr = len(array)\n    if n >= arr:\n        return -1\n    return array[n]**n", "def index(array, n):\n    if n > -1 and n < len(array):\n        product = array[n]**n    \n    else:\n        product = -1\n        \n    return product", "def index(array, n):\n    if n >= 0 and n < len(array):\n        x = 1\n        for i in range(n):\n            x = x * array[n]\n        return x\n    else:\n        return -1\n", "def index(array, n):\n    try:\n        return array[n]**n\n    except IndexError:\n        return -1\n    finally:\n        pass", "def index(array, n):\n    for i in array :\n        return pow(array[n],n) if len(array)-1 >= n else -1\n    else :\n        return -1", "def index(array, n):\n    try:\n        return array[n]**n\n    except:\n        return -1\narray=[1,3,10,100]\nindex(array,3)", "def index(array, n):\n    if n >= len(array):\n        return -1\n    print(array, n,\"\", array[n], \"\", array[n]**2)\n    return array[n]**n", "def index(array, n):\n    try:\n        return array[n] ** n\n    except (IndexError, TypeError):\n        return -1", "def index(array, n):\n    if len(array) - 1 < n: return - 1\n    for ind, value in enumerate(array):\n        if ind == n:\n            return(value**n)\n    \n\n\n\n", "def index(array, n):\n    if((len(array))-1) < n:\n        return(-1)\n    else:\n        for i in range(len(array)):\n            print((n,i))\n            if (n == i):\n                return(array[i]**n)\n       \n\n", "def index(array, n):\n    return -1 if n < 0 or n > len(array)-1 else array[n]**n;\n", "def index(array, n):\n    arr = []\n    for i in array:\n        arr.append(pow(i, n))\n    if n > len(arr) - 1:\n        return -1\n    return arr[n]", "def index(array = [], n = 0):\n    if n >= len(array):\n        return -1\n    else:\n        return array[n]**n", "def index(array, n = -1):\n    if n < 0 or n > len(array)-1 or n == None:\n        val = -1\n        return val\n    elif n <= len(array)-1:\n        val = array[n]\n        val = val ** n\n        return val\n"]