["for __ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input()))\n    r = [0] * n\n    for i in range(10):\n        left_lim = 0\n        for j, c in enumerate(s):\n            if c < i: left_lim = j + 1\n        prv = [-1, -1, -1]\n        flg = True\n        for j, c in enumerate(s):\n            r[j] = 1 if c < i or (c == i and j >= left_lim) else 2\n            if c < prv[r[j]]: flg = False; break\n            prv[r[j]] = c\n        if flg:\n            print(''.join(map(str, r)))\n            break\n    if not flg:\n        print('-')", "def calc(X):\n    for i in range(10):\n        RET = []\n        h = i\n        l = 0\n        for j in range(len(X)):\n            if X[j] >= h:\n                h = X[j]\n                RET.append(\"2\")\n            elif l <= X[j] <= i:\n                l = X[j]\n                RET.append(\"1\")\n            else:\n                break\n        else:\n            print(\"\".join(RET))\n            break\n    else:\n        print(\"-\")\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(a) for a in input()]\n    calc(A)\n\n", "def main():\n    from sys import stdin, stdout\n    input1 = stdin.readline\n    print1 = stdout.write\n    for _ in range(int(input1())):\n        input1()\n        t = tuple(map(int, input1().rstrip('\\n')))\n        for mid in range(10):\n            ans = []\n            lasts = [0, 0, 0]\n            lasts[2] = mid\n            for ti in t:\n                if ti < lasts[1]:\n                    break\n                if ti < lasts[2]:\n                    color = 1\n                else:\n                    color = 2\n                ans.append(str(color))\n                lasts[color] = ti\n            else:\n                if lasts[1] == mid:\n                    print1(''.join(ans) + '\\n')\n                    break\n        else:\n            print1('-\\n')\n\n\nmain()\n", "import sys\nl1 = []\nl2 = []\n\n\ndef iss():\n    for i in range(len(l1) - 1):\n        if l1[i+1] < l1[i]:\n            return False\n    for i in range(len(l2) - 1):\n        if l2[i+1] < l2[i]:\n            return False\n    return True\n\n\n\n\n\n\nfor q in range(int(input())):\n    n = int(sys.stdin.readline())\n    data = [int(i) for i in sys.stdin.readline().strip()]\n    done = False\n    for d in range(10):\n        mnl2 = -1\n        mxl1 = -1\n        same = []\n        l1 = []\n        l2 = []\n        ans = ['0']*n\n        for i in range(n):\n            f = data[i]\n            if f > d:\n                l2.append(f)\n                ans[i] = '2'\n               \n                if mnl2 == -1:\n                    mnl2 = i\n            elif f < d:\n                ans[i] = '1'\n                l1.append(f)\n                mxl1 = i\n            else:\n                same.append(i)\n        # print(d, same, l1, l2, iss(), mxl1, mnl2)\n        if not iss():\n            continue\n        good = True\n        for s in same:\n            if s > mxl1:\n                ans[s] = '1'\n            elif s < mnl2:\n                ans[s] = '2'\n            else:\n                good = False\n                break\n        if not good:\n            continue\n        sys.stdout.write(\"\".join(ans) + '\\n')\n        done = True\n        break\n    if not done:\n        sys.stdout.write('-\\n')\n\n        \n\n\n", "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    d_str = input()\n    d = []\n    for i in range(n):\n        d.append(int(d_str[i]))\n    #print(d)\n    di=[]\n    for i in range(n):\n        di.append(i)\n    #print(d)\n    for b in range(10):\n        one_min = -1\n        two_min = -1\n        not_ok = 0\n        ans = []\n        for i in range(n):\n            if d[i] < b:\n                if d[i] < one_min:\n                    not_ok = 1\n                    break\n                one_min = d[i]\n                ans.append(1)\n\n            elif d[i] > b:\n                if d[i] < two_min:\n                    not_ok = 1\n                    break\n                two_min = d[i]\n                ans.append(2)\n            else:\n                if b >= two_min:\n                    two_min = b\n                    ans.append(2)\n                elif b >= one_min:\n                    one_min = b\n                    ans.append(1)\n                else:\n                    not_ok = 1\n                    break\n        if not_ok != 1:\n            print(\"\".join(map(str,ans)))\n            break\n    else:\n        print(\"-\")\n\n\n\n\n\n", "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = input().rstrip()\n    sint = [int(item) for item in s]\n    for div in range(10):\n        is_ok = True\n        ga = []; gb = []\n        a = 0; b = div \n        for i, item in enumerate(sint):\n            # b should take\n            if item > div:\n                if b > item:\n                    is_ok = False\n                    break\n                else:\n                    gb.append(i)\n                    b = item\n            elif item == div:\n                if b == div:\n                    gb.append(i)\n                else:\n                    a = item\n                    ga.append(i)\n            else:\n                if a > item:\n                    is_ok = False\n                    break\n                else:\n                    ga.append(i)\n                    a = item\n        if is_ok:\n            break\n    if is_ok:\n        ans = [1] * n\n        for item in gb:\n            ans[item] = 2\n        print(\"\".join([str(item) for item in ans]))\n    else:\n        print(\"-\")", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    sequence = input().strip()\n    digits = set(sequence)\n    isPossible = False\n    number = \"\"\n    ret = []\n    for minTwo in digits:\n        ret = []\n        one = str(0)\n        two = minTwo\n        for i, digit in enumerate(sequence):\n            if digit < one:\n                break\n            elif digit >= two:\n                two = digit\n                ret.append(\"2\")\n            elif digit > minTwo:\n                break\n            else:\n                one = digit\n                ret.append(\"1\")\n            if i == len(sequence) - 1:\n                isPossible = True\n        if isPossible:\n            break\n    if isPossible:\n        ret = \"\".join(ret)\n        print(ret)\n    else:\n        print(\"-\")\n", "for t in range(int(input())):\n    n = int(input())\n    ans = [2]*n\n    d = list(map(int,input()))\n    k = d[0]\n    ind_1 = -1\n    for i in range(n):\n        if d[i] > k:\n            k = d[i]\n        if d[i] < k:\n            ans[i] = 1\n            if ind_1 == -1:\n                ind_1 = i\n    for i in range(ind_1):\n        if d[i] <= d[ind_1]:\n            ans[i] = 1\n    itog = []\n    for i in range(n):\n        if ans[i] == 1:\n            itog.append(d[i])\n    for i in range(n):\n        if ans[i] == 2:\n            itog.append(d[i])\n    for i in range(1,n):\n        if itog[i] < itog[i-1]:\n            print('-')\n            break\n    else:\n        print(''.join(map(str,ans)))\n\n\n\n", "import sys\ndef main():\n    def input():\n        return sys.stdin.readline()[:-1]\n    t = int(input())\n    for z in range(t):\n        flag = 0\n        n = int(input())\n        s = [int(x) for x in input()]\n        for limit in range(10):\n            ans = [0 for k in range(n)]\n            p = 0\n            for now in range(limit+1):\n                for k in range(p,n):\n                    if s[k] == now:\n                        p = k\n                        ans[k] = 1\n            p = 0\n            for now in range(limit,10):\n                for k in range(p,n):\n                    if s[k] == now and ans[k] == 0:\n                        p = k\n                        ans[k] = 2\n            if 0 not in ans:\n                flag = 1\n                print(*ans,sep=\"\")\n                break\n        if flag == 0:\n            print(\"-\")\n\ndef __starting_point():\n    main()\n\n__starting_point()"]