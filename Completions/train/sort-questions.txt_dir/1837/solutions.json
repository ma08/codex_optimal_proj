["class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        answer = []\n        \n        if orders is None or len(orders) == 0 or len(orders[0]) == 0:\n            return answer\n        \n        items = set()\n        \n        for order in orders:\n            items.add(order[2])\n            \n        items = sorted(list(items))\n        answer.append([\\\"Table\\\"])\n        \n        for item in items:\n            answer[0].append(item)\n            \n        hashMap = collections.defaultdict(list)\n        itemIndex = self.convertItemToIndex(answer[0])\n        m = len(answer[0])\n        \n        for order in orders:\n            hashMap[int(order[1])].append(order[2])\n            \n        hashMap = {key : hashMap[key] for key in sorted(hashMap.keys())}\n        currentIndex = 1\n        \n        for key in hashMap.keys():\n            answer.append([\\\"0\\\"] * m)\n            answer[currentIndex][0] = str(key)\n            countMap = defaultdict(lambda: 0)\n            \n            for currentItem in hashMap[key]:\n                countMap[currentItem] += 1\n            \n            for currentItem in countMap.keys():\n                answer[currentIndex][itemIndex[currentItem]] = str(countMap[currentItem])\n            \n            currentIndex += 1\n            \n        return answer\n    \n    def convertItemToIndex(self, tempAns):\n        itemToIndex = {}\n        \n        for i, curr in enumerate(tempAns):\n            itemToIndex[curr] = i\n            \n        return itemToIndex\n            \n                    ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        \n#         food = dict()\n        \n#         for order in orders:\n            \n#             name, table, item = order[0], order[1], order[2]\n            \n#             if item not in food:\n#                 food[item] = {}\n#             if table not in food[item]:\n#                 food[item][table] = 0\n#             food[item][table] += 1\n        \n#         print(food)\n#         dishes = [[\\\"Table\\\"] + sorted(food)]\n        \n#         print(dishes)\n        \n#         rowSize = len(dishes[0])\n#         for i, f in enumerate(sorted(food)):\n#             l = ['0'] * rowSize\n#             tables = food[f]\n#             for table in sorted(tables):\n#                 l[0] = table\n#                 l[i+1] = str(tables[table])\n#             dishes.append(l)\n#         print(dishes)\n        \n        tables = dict()\n        \n        foodSet = set()\n        for order in orders:\n            \n            name, table, item = order[0], order[1], order[2]\n            foodSet.add(item)\n            if int(table) not in tables:\n                tables[int(table)] = {}\n            if item not in tables[int(table)]:\n                tables[int(table)][item] = 0\n            tables[int(table)][item] += 1\n        \n        row = [\\\"Table\\\"] + sorted(foodSet)\n        dishes = [row]\n        index = dict()\n        \n        for i, r in enumerate(row):\n            index[r] = i\n            \n        rowSize = len(dishes[0])\n        \n        for table in sorted(tables):\n     \n            foods = tables[table]\n            l = [\\\"0\\\"] * rowSize\n            l[0] = str(table)\n            for food in sorted(foods):\n                l[index[food]] = str(foods[food])\n       \n            dishes.append(l)\n        return dishes\n        ", "from collections import defaultdict\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        record = defaultdict(lambda: defaultdict(int))\n        for _, table, item in orders:\n            record[table][item] += 1\n        \n        res = []\n        items = sorted(set(i for v in list(record.values()) for i in list(v.keys())))\n        \n        for table, v in list(record.items()):\n            res.append([table] + ['0' if i not in v else str(v[i]) for i in items])\n        \n        res.sort(key=lambda x: [int(i) for i in x])\n        res = [['Table'] + items] + res\n        return res\n", "class Solution:\n    def displayTable(self, orders):\n        food, table = [0]*len(orders), ['']*len(orders)\n        \n        for i, item in enumerate(orders):\n            table[i], food[i] = int(item[1]), item[2]\n            \n        food = sorted(set(food))\n        table = sorted(set(table))\n        \n        dic = {str(key): [0]*len(food) for key in table}\n        \n        for item in orders:\n            dic[item[1]][food.index(item[2])] += 1\n            \n        res = [['Table'] + food]\n        for key, val in dic.items():\n            res.append([key] + list(map(str, val)))\n            \n        return res", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        Items = []\n        for item in orders:\n            if item[2] not in Items:\n                Items.append(item[2])\n                \n        Items = [\\\"Table\\\"] + sorted(Items)\n        \n        dic = {}\n        for table in orders:\n            if table[1] not in dic:\n                dic[table[1]] = [table[1]] + ['0']*(len(Items)-1)\n        \n        for order in orders:\n            table = order[1]\n            item = order[2]\n            idx = Items.index(item)\n            temp = int(dic[table][idx]) + 1\n            dic[table][idx] = str(temp)\n            \n            \n        temp = []\n        for key in dic:\n            temp.append(dic[key])\n            \n        ans = sorted(temp, key = lambda x: int(x[0]))\n        \n        return [Items] + ans\n        \n        \n        \n        \n            \n                \n        \n                \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food, table = [0]*len(orders), ['']*len(orders)\n\n        for i, item in enumerate(orders):\n            table[i], food[i] = int(item[1]), item[2]\n\n        food = sorted(set(food))\n        table = sorted(set(table))\n     \n        my_dict = {str(key): [0]*len(food) for key in table}\n\n        for item in orders:\n            my_dict[item[1]][food.index(item[2])] += 1\n        \n        result = [['Table'] + food]\n        for key, val in my_dict.items():\n            result.append([key]+list(map(str,val)))\n        \n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        Items = []\n        for item in orders:\n            if item[2] not in Items:\n                Items.append(item[2])\n                \n        Items = [\\\"Table\\\"] + sorted(Items)\n        \n        dic = {}\n        for table in orders:\n            if table[1] not in dic:\n                dic[table[1]] = [table[1]] + ['0']*(len(Items)-1)\n        \n        for order in orders:\n            table = order[1]\n            item = order[2]\n            idx = Items.index(item)\n            temp = int(dic[table][idx]) + 1\n            dic[table][idx] = str(temp)\n\n        temp = []\n        for key in dic:\n            temp.append(dic[key])\n        ans = sorted(temp, key = lambda x: int(x[0]))\n        \n        return [Items] + ans\n        \n        \n        \n        \n            \n                \n        \n                \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        keys, table = [], []\n        for order in orders:\n            keys.append(order[2])\n            table.append(int(order[1]))\n        keys = sorted(set(keys))\n        table = [str(i) for i in sorted(set(table))] \n        d = {t : {k : 0 for k in keys} for t in table}\n        for order in orders:\n            d[order[1]][order[2]] += 1\n        ans = [[\\\"Table\\\"] + keys]\n        for tab in table:\n            temp = [tab]\n            for food in keys:\n                temp.append(str(d[tab][food]))\n            ans.append(temp)\n        return ans", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        desk = collections.defaultdict(collections.Counter)\n        meal = set()\n        for _, table, food in orders:\n            meal.add(food)\n            desk[table][food] += 1\n        foods = sorted(meal)\n        result = [['Table'] + [food for food in foods]]\n        for table in sorted(desk, key=int):\n            result.append([table] + [str(desk[table][food]) for food in foods])\n        return result       ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        dishes = list({order[2] for order in orders})\n        dishes.sort()\n        res = [[\\\"Table\\\"]]\n        res[0].extend(dishes)\n        hashmap = collections.defaultdict(dict)\n        for o in orders:\n            if o[2] in hashmap[o[1]]:\n                hashmap[o[1]][o[2]] += 1\n            else:\n                hashmap[o[1]][o[2]] = 1\n        \n        cust = sorted({int(c[1]) for c in orders})\n        for c in cust:\n            no = str(c)\n            lst = []\n            order = hashmap[no]\n            for od in dishes:\n                if od in order:\n                    lst.append(str(order[od]))\n                else:\n                    lst.append(\\\"0\\\")\n            lst = [no] + lst\n            res.append(lst)\n        return res\n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tableOrders = defaultdict(lambda: defaultdict(int))\n        for order in orders:\n            name,table,food = order\n            tableOrders[table][food] += 1\n        \n        foods = set()\n        for table in tableOrders:\n            for key in tableOrders[table]:\n                foods.add(key)\n        foods = sorted(list(foods))\n        tables = sorted(list(tableOrders.keys()),key=lambda x: int(x))\n        # print(tables)\n        result = [[\\\"Table\\\"]+foods]\n        for table in tables:\n            toAppend = [table]\n            for food in foods:\n                toAppend.append(str(tableOrders[table][food]))\n            result.append(toAppend)\n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table = collections.defaultdict(dict)\n        food = set()\n        for _,i,j in orders:\n            table[i][j] = table[i].get(j, 0)+1\n            food.add(j)\n        \n        res = [ ['Table']+sorted(food) ]\n        for i in sorted(table, key=lambda x:int(x)):\n            tmp = [ str(i) ]\n            for j in range(1, len(res[0])):\n                tmp.append( str( table[str(i)].get(res[0][j], 0) ) )\n            res.append(tmp)\n        \n        return res\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        desk = collections.defaultdict(collections.Counter)\n        meal = set()\n        for _, table, food in orders:\n            meal.add(food)\n            desk[table][food] += 1\n        foods = sorted(meal)\n        result = [['Table'] + [food for food in foods]]\n        for table in sorted(desk, key=int):\n            result.append([table] + [str(desk[table][food]) for food in foods])\n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table_numbers =sorted(set( [int(i[1]) for i in orders]))\n        items = sorted(set([i[2] for i in orders]))\n        temp_dict = {str(key):[0]*len(items) for key in table_numbers}\n        for item in orders: \n            temp_dict[item[1]][items.index(item[2])] = temp_dict[item[1]][items.index(item[2])]+1\n        result = [['Table']+items]\n        for key,val in temp_dict.items(): \n            result.append([key]+list(map(str,val)))\n        return(result)", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        table = {}\n        dishes = set()\n        \n        for order in orders:\n            if order[1] not in table:\n                table[order[1]] = {}\n                \n            if order[2] not in table[order[1]]:\n                table[order[1]][order[2]] = 1\n            else:\n                table[order[1]][order[2]] += 1\n                \n            dishes.add(order[2])\n            \n        dishes = sorted(list(dishes))\n        table_ints = [int(x) for x in table.keys()]\n        table_nums = sorted(table_ints, reverse=False)\n        \n        template = [\\\"Table\\\"] + dishes\n        display = [template]\n        for num in table_nums:\n            order = [str(num)]\n            for dish in dishes:\n                order.append(str(table.get(str(num), {}).get(dish, 0)))\n                \n            display.append(order)\n            \n        return display", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        # runtime: O(nlogn + mlogm), where n = number of unique tables and m = # of unique foods\n        # space: O(mn)\n        foods = set()\n        tables = set()\n        for o in orders:\n            tables.add(int(o[1]))\n            foods.add(o[2])\n        tables = sorted(tables)\n        foods = sorted(foods)\n        result = [([0] * (len(foods) + 1)) for i in range(len(tables) + 1)]\n        # print(result)\n        result[0][0] = \\\"Table\\\"\n        reverse_foods = {}\n        for i, food in enumerate(foods):\n            result[0][i + 1] = food\n            reverse_foods[food] = i + 1\n        reverse_tables = {}\n        for i, table in enumerate(tables):\n            result[i + 1][0] = table\n            reverse_tables[table] = i + 1\n        for o in orders:\n            result[reverse_tables[int(o[1])]][reverse_foods[o[2]]] += 1\n        for i in range(1, len(result)):\n            for j in range(len(result[0])):\n                result[i][j] = str(result[i][j])\n        return result\n        \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = {}\n        dishes = {}\n        for name, table, dish in orders:\n            if table not in tables:\n                tables[table] = 0\n            if dish not in dishes:\n                dishes[dish] = 0\n        tables = sorted(tables.keys(), key=lambda x: int(x))\n        dishes = sorted(dishes.keys())\n        tables.insert(0, 'Table')\n        dishes.insert(0, 'Table')\n        nrows = len(tables)\n        ncolumns = len(dishes)\n        \n        results = [[0 for j in range(ncolumns)] for i in range(nrows)]\n        results[0] = dishes\n        tables = {table:index for index, table in enumerate(tables)}\n        dishes = {dish:index for index, dish in enumerate(dishes)}\n\n        for name, table, dish in orders:\n            i = tables[table]# + 1\n            j = dishes[dish]# + 1\n            results[i][0] = table\n            results[i][j] = results[i][j] + 1\n        #print(results)\n        for i in range(nrows):\n            for j in range(ncolumns):\n                results[i][j] = str(results[i][j])\n        return results", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food=[]\n        t={}\n        disp=[]\n        for i in orders:\n            food.append(i[2])\n            if i[1] in t:\n                t[i[1]].append(i[2])\n            else:\n                t[i[1]]=[]\n                t[i[1]].append(i[2])\n        tmp =[\\\"Table\\\"]\n        food=sorted(set(food))\n        tmp.extend(food)\n        disp.append(tmp)\n\n        for k in sorted(t.keys(), key=lambda i:int(i)):\n            tmp=[]\n            tmp.append(k)\n            for f in food:\n                foodct=0\n                if f in t[k]:\n                    foodct = t[k].count(f)\n                tmp.append(str(foodct))\n            disp.append(tmp)\n        print(disp)\n        return disp\n", "from collections import Counter, defaultdict\nclass Solution:\n    def displayTable(self, orders):\n        foods = set()\n        table_to_food = defaultdict(Counter)\n        for customer, table, food in orders:\n            table_to_food[table][food] += 1\n            foods.add(food)\n        foods = sorted(foods)\n        m = len(table_to_food)\n        n = len(foods)\n        res = [[None for j in range(n + 1)] for i in range(m + 1)] \n        res[0] = ['Table'] + foods \n        for i, table in enumerate(sorted(table_to_food.keys(), key=int)):\n            res[i + 1][0] = str(table)\n            for j in range(0, n):\n                food = foods[j]\n                res[i + 1][j + 1] = str(table_to_food[table][food])\n        return res", "\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        foods = set()\n        tables = set()\n        \n        for _, table, food in orders:\n            foods.add(food)\n            tables.add(table)\n        \n        foodcounts = {f:{t:0 for t in tables} for f in foods}\n        for _, table, food in orders:\n            foodcounts[food][table] += 1\n            \n        output = []\n        output.append([\\\"Table\\\"] + sorted(foods))\n        for table in sorted(map(int,tables)):\n            table = str(table)\n            counts = [table]\n            for food in sorted(foods):\n                counts.append(str(foodcounts[food][table]))\n            output.append(counts)\n        return output\n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        dishes = list({order[2] for order in orders})\n        dishes.sort()\n        res=[[\\\"Table\\\"]]\n        res[0].extend(dishes)\n        hashmap=defaultdict(dict)\n        for order in orders:\n            if order[2] in hashmap[order[1]]:\n                hashmap[order[1]][order[2]]+=1\n            else:\n                hashmap[order[1]][order[2]]=1\n        cust = sorted({int(c[1]) for c in orders})\n        for cus in cust:\n            cus=str(cus)\n            alist = []\n            order = hashmap[cus]\n            for dish in dishes:\n                if dish in order:\n                    alist.append(str(order[dish]))\n                else:\n                    alist.append(\\\"0\\\")\n            alist=[cus] + alist\n            res.append(alist)\n        return res\n", "# Dict of Dicts For food counts on a table\n#   tables[5][\\\"Ceviche\\\"] = 1\n# Set unique foods\n# 1. Time O(N) Space: O(N)\n# 2. Time O(I*J)\n\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        table_foods = collections.defaultdict(lambda: collections.defaultdict(int))\n        unique_food = set()\n        \n        for _, table_number, food in orders:\n            table_foods[int(table_number)][food] += 1\n            unique_food.add(food)\n        \n        headers = sorted(unique_food)\n        data = [[\\\"Table\\\"] + headers]\n        \n        for table_number in sorted(table_foods.keys()):\n            table_row = [str(table_number)]\n            for food in headers:\n                table_row.append(str(table_foods[table_number][food]))\n            data.append(table_row)\n        return data\n\n    ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        desk = collections.defaultdict(collections.Counter)\n        meal = set()\n        for _, table, food in orders:\n            meal.add(food)\n            desk[table][food] += 1\n        foods = sorted(meal)\n        result = [['Table'] + [food for food in foods]]\n\n        for table in sorted(desk,key = int):\n            result.append([table] + [str(desk[table][food]) for food in foods])\n        return result\n        \n        \n", "# Dict of Dicts For food counts on a table\n#   tables[5][\\\"Ceviche\\\"] = 1\n# Set unique foods\n# 1. Time O(N) Space: O(N)\n# 2. Time O(I*J)\n\nfrom collections import defaultdict\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        table_foods = defaultdict(lambda: defaultdict(int))\n        unique_food = set()\n        \n        for _, table_number, food in orders:\n            table_foods[int(table_number)][food] += 1\n            unique_food.add(food)\n        \n        headers = sorted(unique_food)\n        data = [[\\\"Table\\\"] + headers]\n        \n        for table_number in sorted(table_foods.keys()):\n            table_row = [str(table_number)]\n            for food in headers:\n                table_row.append(str(table_foods[table_number][food]))\n            data.append(table_row)\n        return data\n\n    ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = {}\n        dishes = {}\n        for name, table, dish in orders:\n            if table not in tables:\n                tables[table] = 0\n            if dish not in dishes:\n                dishes[dish] = 0\n        tables = sorted(tables.keys(), key=lambda x: int(x))\n        dishes = sorted(dishes.keys())\n        results = [[\\\"0\\\" for j in range(len(dishes) + 1)] for i in range(len(tables) + 1)]\n        results[0] = [\\\"Table\\\"] + dishes\n        for name, table, dish in orders:\n            i = tables.index(table) + 1\n            j = dishes.index(dish) + 1\n            results[i][0] = table\n            results[i][j] = str(int(results[i][j]) + 1)\n        return results", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        mytables = set()\n        \n        header = set(\\\" \\\")\n        mytablefood = collections.Counter()\n        \n        for customerName, table, food in orders:\n            header.add(food)\n            mytables.add(table)\n            mytablefood[table+food] += 1\n        \n        header = list(header)\n        header.sort()\n        header[0] = \\\"Table\\\"\n        output = [header]\n        \n        mytables = sorted(mytables, key=int)\n        for table in mytables:\n            T = [table]\n            for food in header[1:]:\n                T.append(str(mytablefood[table+food]))\n            output.append(T)\n        return output", "from collections import defaultdict\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        result = []\n        table_dct = defaultdict(list)\n        items = set()\n        tables = set()\n        for order in orders:\n            table_dct[order[1]].append(order[2])\n            items.add(order[2])\n            tables.add(int(order[1]))\n        items = sorted(list(items))\n        tables = sorted(list(tables))\n        result.append(['Table'] + items)\n        for table in tables:\n            table_result = [str(table)]\n            for item in items:\n                table_result.append(str(table_dct[str(table)].count(item)))\n            result.append(table_result)\n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table = {}        \n        header = []\n        result = []\n        for i,lst in enumerate(orders):   \n            if lst[2] not in header:\n                header.append(lst[2])\n            tmp_lst = table.get(int(lst[1]),[])\n            tmp_lst.append(lst[2]) \n            table[int(lst[1])] = tmp_lst    \n            \n        header.sort()      \n        \n        for k in table:\n            tmp_lst = []\n            tmp_lst.append(k)\n            for pos in header:                         \n                tmp_lst.append(table[k].count(pos))\n            result.append(tmp_lst)\n        result.sort()       \n        header.insert(0,\\\"Table\\\")\n        result.insert(0,header)\n        \n        for i,lst in enumerate(result):\n            result[i] = list(map(str,lst))\n    \n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        items_all = sorted(list(set([ele[2] for ele in orders])))\n        tb_disp = {}\n        for od in orders:\n            tbn = od[1]\n            itm = od[2]\n            if tbn not in tb_disp:\n                tb_disp[tbn] = [0 for _ in range(len(items_all))]\n            tb_disp[tbn][items_all.index(itm)] +=1\n        ans_li = sorted([[tb,itm] for tb,itm in tb_disp.items()],key=lambda x:int(x[0]))\n        ans = [[\\\"Table\\\"]+items_all]\n        for ele in ans_li:\n            temp = [str(ele[0])]\n            for it in ele[1]:\n                temp.append(str(it))\n            ans.append(temp)\n        return ans\n            \n        \n        \n                ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        tables = {} \n        menu = set()\n        \n        for o in orders:\n            num, food = int(o[1]), o[2]\n            \n            if num not in tables:\n                tables[num] = {}\n            \n            if food not in tables[num]:\n                tables[num][food] = 0 \n            \n            tables[num][food] += 1 \n            \n            if food not in menu:\n                menu.add(food)\n        \n        menu = sorted(menu)\n        res = [['Table'] + menu] \n        \n        for table_num in sorted(tables, key=lambda n:n):\n            row = [str(table_num)]\n            table_order = tables[table_num]\n\n            for food in menu:\n                food_count = table_order.get(food, 0)\n                row.append(str(food_count)) \n            res.append(row)\n        \n        return res ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        dishes = []\n        dishesSet = set()\n        tables = []\n        tableSet = set()\n        \n        orderDict = {}\n        \n        for order in orders:\n            tableID = int(order[1])\n            \n            if tableID not in tableSet:\n                tableSet.add(tableID)\n                tables.append(tableID)\n                orderDict[tableID] = {}\n            \n            if order[2] not in dishesSet:\n                dishesSet.add(order[2])\n                dishes.append(order[2])\n            \n            orderDict[tableID][order[2]] = orderDict[tableID].get(order[2], 0) + 1\n        \n        dishes.sort()\n        tables.sort()\n            \n        orderTable = [[\\\"Table\\\"] + dishes]\n        \n        for table in tables:\n            curr = []\n            curr.append(str(table))\n            for dish in dishes:\n                if dish in orderDict[table]:\n                    curr.append(str(orderDict[table][dish]))\n                else:\n                    curr.append(\\\"0\\\")\n            \n            orderTable.append(curr)\n        \n        return orderTable\n        \n        \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table = OrderedDict()\n        \n        for k in orders:\n            if k[1] not in table:\n                table[k[1]]={}\n            \n            if k[2] in table[k[1]]:\n                table[k[1]][k[2]] += 1\n            else:\n                table[k[1]][k[2]] = 1\n        \n        d_order = sorted([int(i) for i in table.keys()])\n        \n        d_order = [str(i) for i in d_order]\n        \n        f_order = sorted(set([k[2] for k in orders]))\n        \n        print(d_order, f_order)\n        print(table)\n        res = []\n        \n        res.append([\\\"Table\\\"] + f_order)\n        \n        for k in d_order:\n            tmp = [k]\n            for _k in f_order:\n                if _k in table[k]:\n                    tmp.append(str(table[k][_k]))\n                else:\n                    tmp.append(\\\"0\\\")\n            res.append(tmp)\n        return res\n\n            \n            ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n\n        \n        table = []\n        food = []\n        \n        for item in orders:\n            table.append(int(item[1]))\n            food.append(item[2])\n\n        \n        food = sorted(list(set(food)))\n        table = sorted(list(set(table)))\n        \n        \n        \n        \n        #my_dict = {str(key): ['0']*len(food) for key in table}\n        my_dict = {str(key): [0]*len(food) for key in table}\n\n\n\n        \n        for item in orders:\n            my_dict[item[1]] [food.index(item[2])] = my_dict[item[1]][food.index(item[2])] +  1\n            # my_dict[item[1]] [food.index(item[2])] = int(my_dict[item[1]][food.index(item[2])]) +  1\n            # my_dict[item[1]][food.index(item[2])] = str(my_dict[item[1]][food.index(item[2])])\n\n\n        \n        \n            \n            \n        \n        header = ['Table'] + food\n        \n        footer = []\n        for key, val in list(my_dict.items()):\n            # footer.append([key]+val)\n            footer.append([key]+list(map(str,val)))\n\n  \n        \n        return [header]+footer\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n      table_dicts = {}\n      dicts = {}\n      for order in orders:\n        if (int)(order[1]) not in table_dicts: table_dicts[(int)(order[1])] = 1\n        if order[2] not in dicts:\n          dicts[order[2]] = {order[1]:1}\n        else:\n          if order[1] in dicts[order[2]]:\n            dicts[order[2]][order[1]] += 1\n          else:\n            dicts[order[2]][order[1]] = 1\n      tables = []\n      for key,value in table_dicts.items(): tables.append(key)\n      tables.sort()\n      tables = [str(x) for x in tables]\n      dishes = []\n      for key,value in dicts.items(): dishes.append(key)\n      dishes.sort()\n      res = []\n      res.append([\\\"Table\\\"] + dishes)\n      for i in range(len(tables)):\n        temp_res = [tables[i]]\n        for dis in dishes:\n          if tables[i] in dicts[dis]:\n            temp_res.append((str)(dicts[dis][tables[i]]))\n          else:\n            temp_res.append('0')\n        res.append(temp_res)\n      return res\n        \n      \n        ", "from collections import defaultdict\n# table nuber in string\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food_set = set()\n        table_orders = defaultdict(lambda : defaultdict(int))\n        ans = []\n        \n        \n        for ix, val in enumerate(orders):\n            _ , table_no , food_name = val[0] , int(val[1]) , val[2]\n            if table_no not in table_orders:\n                table_orders[table_no][food_name] = 1\n            else:\n                # table number is inside\n                table_orders[table_no][food_name] += 1\n            food_set.add(food_name)\n        \n        \n        temp = [\\\"Table\\\"]\n        for food_name in sorted(food_set):\n            temp.append(food_name)\n        ans.append(temp)\n        \n        food_mapping = {}\n        for ix in range(1,len(temp)):\n            food_mapping[temp[ix]] = ix\n        \n        \n        for table_num in sorted(table_orders.keys()):\n            insert_list = [\\\"0\\\" for _ in range(len(food_mapping)+1)]\n            insert_list[0] = str(table_num)\n            order_dict = table_orders[table_num]\n            for food_name in order_dict.keys():\n                ix_add = food_mapping[food_name]\n                insert_list[ix_add] = str(order_dict[food_name])\n            ans.append(insert_list)\n        return ans\n            \n            ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        menu = sorted(set([i[2] for i in orders]))\n        wat = sorted(orders, key=lambda order: int(order[1]))\n        wat2 = itertools.groupby(wat, key=lambda order: order[1])\n        alpha_cust = [[c, [i[2] for i in cgen]] for c, cgen in wat2]\n        \n        ans = [['Table'] + menu]\n        \n        for table in alpha_cust:\n            ans.append([table[0]] + [str(table[1].count(i)) for i in menu])\n        return ans\n        \n#         print(menu)\n#         print(alpha_cust)\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n\n        \n        table = []\n        food = []\n        \n        for item in orders:\n            table.append(int(item[1]))\n            food.append(item[2])\n\n        \n        food = sorted(list(set(food)))\n        table = sorted(list(set(table)))\n        \n        \n        \n        \n        my_dict = {str(key): ['0']*len(food) for key in table}\n\n\n        \n        for item in orders:\n            my_dict[item[1]][food.index(item[2])] = int(my_dict[item[1]][food.index(item[2])]) +  1\n            my_dict[item[1]][food.index(item[2])] = str(my_dict[item[1]][food.index(item[2])])\n\n\n        \n        \n            \n            \n        \n        header = ['Table'] + food\n        \n        footer = []\n        for key, val in list(my_dict.items()):\n            #footer.append([key]+list(map(str,val)))\n            footer.append([key]+val)\n            \n\n        \n        result = [header]+footer\n  \n        \n        return result\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = {}\n        dishes = {}\n        for name, table, dish in orders:\n            if table not in tables:\n                tables[table] = 0\n            if dish not in dishes:\n                dishes[dish] = 0\n        tables = sorted(tables.keys(), key=lambda x: int(x))\n        dishes = sorted(dishes.keys())\n        tables.insert(0, 'Table')\n        dishes.insert(0, 'Table')\n        nrows = len(tables)\n        ncolumns = len(dishes)\n        results = [[0 for j in range(ncolumns)] for i in range(nrows)]\n        results[0] = dishes\n        for name, table, dish in orders:\n            i = tables.index(table)# + 1\n            j = dishes.index(dish)# + 1\n            results[i][0] = table\n            results[i][j] = results[i][j] + 1\n        for i in range(nrows):\n            for j in range(ncolumns):\n                results[i][j] = str(results[i][j])\n        return results", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = {}\n        top_row = set()\n        \n        for order in orders:            \n            _name, num, item = order\n            top_row.add(item)\n            if tables.get(num):\n                tables[num].append(item)\n            else: \n                tables[num] = [item]\n                \n        top_row = list(top_row)\n        top_row.sort()\n        top_row = [\\\"Table\\\", *top_row]\n        all_items = [(top_row[idx], idx) for idx in range(len(top_row))]\n\n        food_indexes = dict(all_items)\n        \n        output = []\n\n        for table, orders in tables.items():\n            row = [0 for i in range(1, len(top_row))]\n            row = [table, *row]\n            for food in tables[table]:\n                row[food_indexes[food]] += 1;\n            row = [str(num) for num in row]\n            output.append(row)\n        \n        output.sort(key=lambda row: int(row[0]))\n        output.insert(0, top_row)\n        return output\n        \n        \n        \n\n# var displayTable = function(orders) {\n#     let tables = {};\n#     let allItems = new Set();\n#     //get tables first, and an array of items. if table exists, push. if not, create then oush\n#     for(let o of orders){\n#         let [_name, num, item] = o;\n#         tables[num]\n#         ? tables[num].push(item)\n#         : tables[num] = [item];\n#         allItems.add(item);\n#     }\n#     let sortedItems = [\\\"Table\\\", ...[...allItems].sort()];\n#     let foodIndexes = {};\n#     for(let i = 1; i < sortedItems.length; i++){\n#         let key = sortedItems[i];\n#         foodIndexes[key] = i;\n#     }\n\n#     //then add orders to the table\n#     let output = [sortedItems];\n#     for(let t of Object.keys(tables)){\n#         //an array from sortedItems.length, filled with zeroes\n#         let row = new Array(sortedItems.length).fill(0);\n#         row[0] = t;\n#         // increment the food based on the index of foodIndexes\n#         tables[t].forEach(f => {\n#             let index = foodIndexes[f];\n#             row[index] ++;\n#         })\n#         row = row.map(x => `${x}`);\n#         output.push(row);\n#     }\n#     return output;\n# };", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d={}\n        t=set()\n        for o in orders:\n            if o[2] in d:\n                d[o[2]].append(o[0])\n            else:\n                d[o[2]]=[o[0]]\n                \n        for o in orders:\n            t.add(int(o[1]))\n        dictionary_items = d.items()\n        dd = sorted(dictionary_items)\n        \n        t=sorted(t)\n        ans=[[\\\"Table\\\"]]\n        \n        m={}\n        for o in orders:\n            if o[1] in m:\n                m[o[1]].append(o[2])\n            else:\n                m[o[1]]=[o[2]]\n        \n        for k,v in dd:\n            ans[0].append(k)\n            \n        for k in t:\n            ans.append([str(k)])\n        \n        for l in range(1,len(t)+1): # 1 -> table nums\n            for y in range(1,len(ans[0])): # 0 -> food num\n                ans[l].append(str(m[ans[l][0]].count(ans[0][y])))\n            \n        return ans\n            \n            \n            ", "from collections import defaultdict\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        record = defaultdict(lambda: defaultdict(int))\n        for _, table, item in orders:\n            record[table][item] += 1\n        \n        res = []\n        items = sorted(set(i for v in list(record.values()) for i in list(v.keys())))\n        \n        for table, v in list(record.items()):\n            res.append([table] + ['0' if i not in v else str(v[i]) for i in items])\n        \n        res.sort(key=lambda x: int(x[0]))\n        res = [['Table'] + items] + res\n        return res\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d = {}\n        foods = set()\n        \n        for x in orders:\n            table = x[1]\n            food = x[2]\n            foods.add(food)\n            \n            if table not in d:\n                d[table] = {}\n                \n            if food in d[table]:\n                d[table][food] +=1 \n            else:\n                d[table][food] = 1\n                \n        print(d)\n        \n        foodList = list(foods)\n        foodList.sort()\n        foodList.insert(0,'Table')\n        \n        hold = foodList\n        f = [hold.copy()]\n        dTemp = sorted(list(d.items()),key=lambda x:int(x[0]))\n        for (tableNo,tableFood) in dTemp:\n            a = []\n            for colName in hold:\n                if colName == 'Table':\n                    a.append(str(tableNo))\n                elif colName in tableFood:\n                    a.append(str(tableFood[colName]))\n                else:\n                    a.append('0')\n            f.append(a)\n            \n        \n        return f\n                \n                \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table = []\n        output = [[]]\n        temp = []\n\n        for i in range(len(orders)):\n            if orders[i][1] not in table:\n                table.append(orders[i][1])\n\n        for j in range(len(table)):\n            temp.append(int(table[j]))\n\n        temp = sorted(temp)\n\n        temp2 = []\n        for k in range(len(table)):\n            temp2.append(str(temp[k]))\n            output.append(temp2)\n            temp2 = []\n\n        for l in range(len(orders)):\n            if orders[l][2] not in output[0]:\n                output[0].append(orders[l][2])\n\n        temp2 = sorted(output[0])\n        output[0] = [\\\"Table\\\"]+temp2\n\n        for r in range(1,len(output)):\n            for n in range(len(output[0])-1):\n                output[r].append(\\\"0\\\")\n\n        for m in range(len(orders)):\n            tab = int(orders[m][1])\n            idxt = temp.index(tab)+1\n            meal = orders[m][2]\n            idxm = output[0].index(meal)\n\n            stack = int(output[idxt][idxm])\n            stack += 1\n            output[idxt][idxm] = str(stack)\n            \n        return output", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tables = []\n        dishes = []\n        for name, table, dish in orders:\n            if table not in tables:\n                tables.append(table)\n            if dish not in dishes:\n                dishes.append(dish)\n        tables = sorted(tables, key=lambda x: int(x))\n        dishes = sorted(dishes)\n        results = [[\\\"0\\\" for j in range(len(dishes) + 1)] for i in range(len(tables) + 1)]\n        results[0] = [\\\"Table\\\"] + dishes\n        for name, table, dish in orders:\n            i = tables.index(table) + 1\n            j = dishes.index(dish) + 1\n            results[i][0] = table\n            results[i][j] = str(int(results[i][j]) + 1)\n        return results", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        orders.sort(key=lambda x: int(x[1]))\n        record = defaultdict(lambda: defaultdict(int))\n        foods = []\n        for name, table, food in orders:\n            if food not in foods:\n                foods.append(food)\n            record[table][food] += 1\n\n        foods = sorted(foods)\n        out = [['Table'] + foods]\n\n        for k, v in record.items():\n            tmp = [k]\n            for f in foods:\n                tmp += [str(v.get(f)) if v.get(f) else '0']\n            out.append(tmp)\n        \n        return out", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        ht1 = {}    #for table order\n        col = []\n        display = []\n        \n        for i, item in enumerate(orders):\n            table = int(item[1])\n            dish = item[2]\n            if table in ht1:\n                ht1[table].append(i)\n            else:\n                ht1[table] = [i]\n            \n            if dish not in col:\n                col.append(dish)\n        \n        #to display, row is sorted tables, col is sorted dishes        \n        row = list(ht1.keys())\n        row.sort()\n        col.sort()\n        \n        #initialize display matrix\n        display = [[]]*(len(row)+1)\n        display[0] = ['Table']\n        for item in col:\n            display[0].append(item)\n        \n        #fill out the blanks\n        for i, item in enumerate(row):\n            display[i+1] = [str(item)]\n            for j in range(len(col)):\n                display[i+1].append(0)\n            for o in ht1[item]:\n                dish = orders[o][2]\n                c = col.index(dish)\n                display[i+1][c+1] += 1\n            for j in range(len(col)):\n                display[i+1][j+1] = str(display[i+1][j+1])\n        return display\n                \n                \n            \n            \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        ss = set()\n        for (x, y, z) in orders:\n            ss.add(z)\n        foods = list(ss)\n        foods.sort()\n        foodHt = {v:i for (i, v) in enumerate(foods)}\n        ans = []\n        firstRow = [\\\"Table\\\"] + foods\n        ans.append(firstRow)\n        \n        ht = {}\n        for x, y, z in orders:\n            if not y in ht:\n                ht[y] = [0 for i in range(len(foods))]\n            ht[y][foodHt[z]] += 1\n        \n        tables = list(ht.keys())\n        tables.sort(key=lambda x :int(x))\n        for t in tables:\n            row = [str(t)]\n            for i in range(len(foods)):\n                row.append(str(ht[t][i]))\n            ans.append(row)\n        return ans", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n\n        \n        table = []\n        food = []\n        \n        for item in orders:\n            table.append(int(item[1]))\n            food.append(item[2])\n\n        \n        food = sorted(list(set(food)))\n        table = sorted(list(set(table)))\n        \n        \n        \n        \n        my_dict = {str(key): ['0']*len(food) for key in table}\n        \n        print(('My Dict :',my_dict))\n\n\n        \n        for item in orders:\n            my_dict[item[1]][food.index(item[2])] = int(my_dict[item[1]][food.index(item[2])]) +  1\n            my_dict[item[1]][food.index(item[2])] = str(my_dict[item[1]][food.index(item[2])])\n\n\n        \n        \n            \n            \n        \n        header = ['Table'] + food\n        \n        footer = []\n        for key, val in list(my_dict.items()):\n            #footer.append([key]+list(map(str,val)))\n            footer.append([key]+val)\n            \n\n        \n        result = [header]+footer\n  \n        \n        return result\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food=[]\n        d=OrderedDict()\n        for _,_,k in orders:\n            if k not in food:\n                food.append(k)\n        food.sort()\n        n=len(food)\n        new=[(i,f) for i,f in enumerate(food)]\n        for _,j,k in orders:\n            if j not in d:\n                d[j]=[0 for _ in range(n)]\n                for i,f in new:\n                    if k==f:\n                        d[j][i]=1\n                        break               \n            else:\n                for i,f in new:\n                    if k==f:\n                        d[j][i]+=1\n                        break\n        d=OrderedDict(sorted(d.items(),key=lambda x:int(x[0])))\n        title=['Table']+food\n        details=[[k]+[str(i) for i in v] for k,v in d.items()]\n        details.insert(0,title)\n        return details", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d = collections.defaultdict(collections.Counter)\n        meal = set()\n        for _, table, dish in orders:\n            meal.add(dish)\n            d[table][dish] += 1\n        meal = sorted(meal)\n        result = [['Table'] + [food for food in meal]]\n        \n        for table in sorted(d, key = int):\n            result.append([table] + [str(d[table][food]) for food in meal])\n        return result", "from collections import defaultdict\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d = defaultdict(lambda: defaultdict(int))\n        foods = set()\n        for _, table, order in orders:\n            d[int(table)][order]+=1\n            foods.add(order)\n        foods = sorted(foods)\n        ret = [['Table']+foods]\n        for table in sorted(d.keys()):\n            ret.append([str(table)]+[str(d[table][f]) for f in foods])\n        return ret", "from collections import defaultdict\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        tableFood = {}\n        tableFreq = {}\n        foods = set()\n        nums = set()\n        for order in orders:\n            tableNumber = order[1]\n            food = order[2]\n            foods.add(food)\n            nums.add(tableNumber)\n            idx = (tableNumber, food)\n            \n            \n            if idx in tableFreq:\n                tableFreq[idx] += 1\n            else:\n                tableFreq[idx] = 1\n        \n        cols = [\\\"Table\\\"] + sorted(foods)\n        ans = [cols]\n        N = len(cols)\n        \n        sortedKeys = sorted(nums, key = lambda k: int(k))\n        \n        for key in sortedKeys:\n            col = [\\\"0\\\"] * N\n            col[0] = key\n            for i in range(1,N):\n                idx = (key,cols[i])\n                if idx in tableFreq:\n                    col[i] = str(tableFreq[idx])\n            ans.append(col)\n\n        return ans\n            \n            \n            \n                \n            \n            \n            \n            \n            \n        ", "from collections import defaultdict\n\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food_items = set()\n        tables = defaultdict(lambda: defaultdict(int))\n        \n        for o in orders:\n            table_number = int(o[1])\n            food_item = o[2]\n            tables[table_number][food_item] += 1\n            food_items.add(food_item)\n            \n        food_items = sorted(food_items)\n        result = [[\\\"Table\\\"]]\n        for food_item in food_items:\n            result[0].append(food_item)\n            \n        for table_number in sorted(tables.keys()):\n            record = [str(table_number)]            \n            for food_item in food_items:\n                record.append(str(tables[table_number][food_item]))\n            result.append(record)\n                \n        return result\n        ", "from collections import defaultdict\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        #having a dictionary of dictionaries?\n        #should have a set of all the items?\n        #ex: {2:{ceviche: 1}, {burrito: 2}, 3: {ceviche: 0}}\n        \n        items = set()\n        tableorders = defaultdict(lambda: {})\n        \n        for i in orders:\n            table = int(i[1])\n            if tableorders[table] == {}:\n                tableorders[table] = defaultdict(lambda: 0)\n                tableorders[table][i[2]] += 1\n                items.add(i[2])\n            else:\n                tableorders[table][i[2]] += 1\n                items.add(i[2])\n    \n        items = sorted(items)\n        chartorders = []\n        column1 = [\\\"Table\\\"]\n        for i in items:\n            column1.append(i)\n        chartorders.append(column1)\n        for c in sorted(tableorders.keys()):\n            tablerow = []\n            tablerow.append(str(c))\n            for z in items:\n                if z in tableorders[c].keys():\n                    tablerow.append(str(tableorders[c][z]))\n                else:\n                    tablerow.append(str(0))\n            chartorders.append(tablerow)\n        return chartorders\n        \n                    ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        item_list = []\n        order_dict = {}\n        for order in orders:\n            table = order[1]\n            item = order[2]\n            if item not in item_list:\n                item_list.append(item)\n            if int(table) not in order_dict:\n                order_dict[int(table)] = []\n            order_dict[int(table)].append(item)\n                        \n        item_list.sort()\n        item_list.insert(0, 'Table')\n        # print(item_list)\n        order_dict = dict(sorted(order_dict.items()))\n        # print(order_dict)\n        \n        sol = []\n        sol.append(item_list)\n        for table_name, table_orders in list(order_dict.items()):\n            table_sol = ['0' for i in range(len(item_list))]\n            table_sol[0] = table_name\n            # print(table_orders)\n            for order in table_orders:\n                ind = item_list.index(order)\n                # print(ind)\n                table_sol[ind] = str(int(table_sol[ind]) + 1)\n            sol.append(table_sol)\n            \n        for i in range(1, len(sol)):\n            sol[i][0] = str(sol[i][0])\n        return sol\n        \n        \n                \n                \n        \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        foods = set([])\n        table_idx_to_orders = {} \n        \n        for order in orders:\n            food = order[2]\n            if food not in foods:\n                foods.add(food)\n                        \n        foods_list = sorted(list(foods))\n        total_foods = len(foods_list)\n        food_to_idx = { foods_list[i] : i for i in range(len(foods_list)) }\n        for order in orders:\n            _, table_idx, food = order\n            table_idx = int(table_idx)\n            if table_idx not in table_idx_to_orders:\n                table_idx_to_orders[table_idx] = [0] * total_foods\n                \n            table_idx_to_orders[table_idx][food_to_idx[food]] += 1\n            \n        result = [[\\\"Table\\\"] + list(food_to_idx)]\n        print(table_idx_to_orders)\n        for table_idx in sorted(table_idx_to_orders.keys()):\n            print(table_idx)\n            crt_orders_str = list(map(str, list(table_idx_to_orders[table_idx])))\n            crt_result = [str(table_idx)] + crt_orders_str\n            result.append(crt_result)\n        return result\n        \n        ", "from collections import defaultdict\n\nclass Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        table_to_dishes = defaultdict(lambda: defaultdict(int))\n        dishes = set()\n        \n        for order in orders:\n            table = int(order[1])\n            dish = order[2]\n            \n            table_to_dishes[table][dish] += 1\n            dishes.add(dish)\n            \n        headers = ['Table']\n        headers += [dish for dish in sorted(dishes)]\n        \n        result = [headers]\n        \n        # print (table_to_dishes.keys())\n        \n        for table in sorted(table_to_dishes.keys()):\n            table_order = [str(table)]\n            \n            for ind in range(1, len(headers)):\n                dish = headers[ind]\n                table_order.append(str(table_to_dishes[table][dish]))\n            \n            result.append(table_order)\n            \n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        hm = {}\n        food = sorted(set([x[2] for x in orders]))\n        tables = sorted(set([int(x[1]) for x in orders]))\n        res = [['Table']+list(food)]+[[str(x)] for x in tables]\n        \n        for item in orders:\n            cur = hm.get(item[1], {})\n            num = cur.get(item[2], 0)\n            cur[item[2]] = num+1\n            hm[item[1]] = cur\n\n        for i in range(1, len(tables)+1):\n            cur = hm[str(tables[i-1])]\n            for f in food:\n                res[i].append(str(cur.get(f, 0)))\n        \n        return res\n            \n                \n        \n        \n        \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        display=[]\n        tableList=set()\n        foodList=set()\n        \n        for order in orders:\n            foodList.add(order[2])\n            tableList.add(int(order[1]))\n            \n        display.append([\\\"Table\\\"]+sorted(list(foodList)))\n        tableList=sorted(list(tableList))\n        for table in tableList:\n            display.append([table]+[0]*len(foodList))\n        tableToIndex={}\n        for i in range(1,len(display)):\n            tableToIndex[display[i][0]]=i\n            \n        foodToIndex={}\n        for i in range(1,len(display[0])):\n            foodToIndex[display[0][i]]=i\n            \n        for order in orders:\n            display[tableToIndex[int(order[1])]][foodToIndex[order[2]]]=display[tableToIndex[int(order[1])]][foodToIndex[order[2]]]+1\n            \n        display=[[str(ele) for ele in table] for table in display]\n                \n        return display\n        \n            \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        unique_tables = []\n        unique_dishes = []\n        ans = [['Table']]\n        for i in orders:\n            if int(i[1]) not in unique_tables:\n                unique_tables.append(int(i[1]))\n            if i[2] not in unique_dishes:\n                unique_dishes.append(i[2])\n        unique_tables.sort()\n        unique_dishes.sort()\n        ans[0].extend(unique_dishes)\n        for i in range(len(unique_tables)):\n            listt = [unique_tables[i]]\n            listt.extend([0]*len(unique_dishes))\n            ans.append(listt)\n        for i in orders:\n            ans[unique_tables.index(int(i[1]))+1][unique_dishes.index(i[2])+1]+=1\n        for i in range(len(ans)):\n            for j in range(len(ans[0])):\n                ans[i][j]= str(ans[i][j])\n        return(ans)\n                \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        table = []\n        table.append(\\\"Table\\\")\n        res = []\n        final_ans = []\n        dict = {}\n        \n        dish_list = []\n        for dish in orders:\n            if dish[2] not in dish_list:\n                dish_list.append(dish[2])\n        \n        dish_list.sort()\n        \n        \n        for i in range(0, len(dish_list)):\n            dict[dish_list[i]] = []\n            table.append(dish_list[i])\n            \n        final_ans.append(table)\n        \n        for i in range(0, len(orders)):\n            dict[orders[i][2]].append(orders[i][1])\n       \n        table_nos = []\n        for num in orders:\n            if int(num[1]) not in table_nos:\n                table_nos.append(int(num[1]))\n        \n        table_nos.sort()\n        \n        for i in range(0, len(table_nos)):\n            op = []\n            op.append(str(table_nos[i]))\n            for key in dict:\n                op.append(str(dict[key].count(str(table_nos[i]))))\n                \n                \n            if op not in res:\n                res.append(op)\n        \n        for x in res:\n            final_ans.append(x)\n            \n        return final_ans", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        ords= defaultdict(collections.Counter)\n        meals = set()\n        for _, T, M in orders:\n            meals.add(M)\n            ords[T][M] += 1\n        foods = sorted(meals)\n        result = [['Table'] + [food for food in foods]]\n        for T in sorted(ords, key = int):\n            result.append([T] + [str(ords[T][M]) for M in foods])\n        return result   \n            \n\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        food, table = [0]*len(orders), ['']*len(orders)\n        #print(food, table)\n        \n        for i, item in enumerate(orders):\n            table[i], food[i] = int(item[1]), item[2]\n        #print(food, table)\n        \n        food = sorted(set(food))\n        table = sorted(set(table))\n        #print(food, table)\n        \n        my_dict = {}\n        for i in table:\n            my_dict[str(i)] = [0]*len(food)\n        #print(my_dict)\n        \n        for item in orders:\n            my_dict[item[1]][food.index(item[2])] += 1\n        #print(my_dict)\n        \n        result = [['Table'] + food]\n        for key, val in my_dict.items():\n            result.append([key]+list(map(str,val)))\n        \n        return result", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        table = {}\n        fooditems = []\n        for order in orders:\n            if order[1] in table:\n                table[order[1]][order[2]] = table[order[1]].get(order[2],0) + 1\n            \n            else:\n                table[order[1]] = {}\n                table[order[1]][order[2]] = 1\n     \n            fooditems.append(order[2])\n            \n        fooditems = sorted(list(set(fooditems)))\n\n        row = [[\\\"Table\\\"] + fooditems]\n      \n        for o in sorted(table.keys(), key=lambda x:int(x)):\n         \n            r = [o] + [str(table[o].get(food,0)) for food in fooditems]\n            row.append(r)\n            \n        return row   \n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        all_foods = set()\n        all_tables = set()\n        mapping = defaultdict()\n        for order in orders:\n            _, table_id, food_name = order[0], int(order[1]), order[2]\n            all_foods.add(food_name)\n            all_tables.add(table_id)\n            if table_id not in mapping:\n                mapping[table_id] = defaultdict(int) \n            mapping[table_id][food_name] += 1\n            \n        all_foods = sorted(list(all_foods))\n        all_tables = sorted(list(all_tables))\n        labels = ['Table'] + all_foods\n        data_table = [labels]\n        for table in all_tables:\n            temp = [str(table)]\n            for food in all_foods:\n                temp.append(str(mapping[table][food]))\n            \n            data_table.append(temp.copy())\n            \n        return data_table\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        \n        #iterate through input list of lists\n        tableFood = {}\n        Fooditems = set()\n        for i in orders:\n            if i[1] in list(tableFood.keys()):\n                tableFood[i[1]].append(i[2])\n            else:\n                tableFood[i[1]] = [i[2]]\n            Fooditems.add(i[2])\n            \n        Fooditems = list(Fooditems)\n        Fooditems.sort()\n        \n        outTable = []\n        \n        for k, v in list(tableFood.items()):\n            tmp = [k]\n            for i in Fooditems:\n                tmp.append(str(v.count(i)))\n            outTable.append(tmp)\n        \n        outTable.sort(key = lambda outTable: int(outTable[0]))\n        # print([['Table'] + Fooditems] + outTable)\n        \n        return [['Table'] + Fooditems] + outTable\n        \n        # test_list.sort(key = lambda test_list: test_list[1]) \n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        foods = {}\n        tables = {}\n        nos = set()\n        for order in orders:\n            nos.add(order[1])\n            foods[order[2]] = 0\n            \n        for order in orders:\n            if order[1] not in tables:\n                tables[order[1]] = foods.copy()\n            tables[order[1]][order[2]] += 1\n        titles = [\\\"Table\\\"]\n        foodkeys = sorted(foods.keys())\n        for key in foodkeys:\n            titles.append(key)\n            \n        nos = list(nos)\n        nos = list(map(int,nos))\n        nos = sorted(nos)\n        print(nos)\n        ans = []\n        ans.append(titles)\n        for i in nos:\n            tmp = [str(i)]\n            \n            for key in foodkeys:\n                tmp.append(str(tables[str(i)][key]))\n            ans.append(tmp)\n            \n        return ans\n        \n        \n            ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d = {}\n        dn = []\n        for o in orders:\n            if o[2] not in dn:\n                dn.append(o[2])\n                \n            if o[1] in d:\n                if o[2] in d[o[1]]:\n                    d[o[1]][o[2]] += 1\n                else:\n                    d[o[1]][o[2]] = 1\n            else:\n                d[o[1]] = {}\n                d[o[1]][o[2]] = 1\n             \n        dn.sort()\n        fr = ['Table']\n        for n in dn:\n            fr.append(n)\n        ans = [fr]\n        st = list(d.keys())\n        st.sort(key=lambda x:int(x))\n        for t in st:\n            r = [t]\n            for n in dn:\n                if n in d[t]:\n                    r.append(str(d[t][n]))\n                else:\n                    r.append('0')\n            ans.append(r)\n        \n        return ans\n                \n", "from collections import defaultdict\n\nclass Solution:\n    \n    def tables_to_lists(self, tables):\n        for table in tables:\n            temp = tables[table]\n            temp[0] = int(table)\n            yield temp\n            \n    \n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        all_foods = sorted(list(set(map(lambda x: x[2], orders))))\n        all_foods.insert(0, \\\"Table\\\")\n        \n        result = []\n        result.append(all_foods)\n        \n        \n        tables = defaultdict(lambda: [0] * (len(all_foods)) )\n        \n        for order in orders:\n            name, table, item = order\n            tables[table][all_foods.index(item)] += 1\n          \n        subresult = [t for t in self.tables_to_lists(tables)]\n        \n        result.extend(sorted(subresult, key=lambda x: x[0]))\n        \n        for i in range(1, len(result)):\n            result[i] = list(map(str, result[i]))\n        \n        return result\n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d =collections.defaultdict(lambda: collections.defaultdict(int))\n        foods = set()\n        for _, table, food in orders:\n            foods.add(food)\n            d[int(table)][food]+=1\n        \n        res = [[0]*(len(foods)+1) for _ in range(len(list(d.keys()))+1)]\n        columns = {food: i+1 for i, food in enumerate(sorted(foods))}\n        res[0] = ['Table']+sorted(foods)\n        for i,table in enumerate(sorted(d.keys())):\n            res[i+1][0]=table\n            for food in d[table]:\n                res[i+1][columns[food]]+=d[table][food]\n        return [list(map(str, x)) for x in res]\n", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        order = {}\n        uniquefood = set()\n        for o in orders:\n            tableno = o[1]\n            item = o[2]\n            uniquefood.add(item)\n            if tableno not in order:\n                order[tableno] = {item:1}\n            else:\n                if item not in order[tableno]:\n                    order[tableno][item] = 1\n                else:\n                    order[tableno][item] += 1\n        header = [\\\"Table\\\"]\n        for i in sorted(uniquefood):\n            header.append(i)\n        res = [header]\n        for o in sorted(order, key = lambda x:int(x)):\n            temp = []\n            temp.append(o)\n            for i in header[1:]:\n                if i in order[o]:\n                    temp.append(str(order[o][i]))\n                else:\n                    temp.append(\\\"0\\\")\n            res.append(temp)\n        return res\n        ", "class Solution:\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\n        d = dict()\n        food_items = set()\n        \n        for _, table, food in orders:\n            table = int(table)\n            if table not in d:\n                d[table] = collections.Counter()\n            d[table][food] += 1\n            food_items.add(food)\n        \n        food_items = sorted(food_items)\n        cols = ['Table'] + food_items\n        \n        \n        out = [cols]\n        for table in sorted(d.keys()):\n            \n            l = [str(table)]\n            for f in food_items:\n                if f not in d[table]:\n                    l.append(\\\"0\\\")\n                else:\n                    l.append(str(d[table][f]))\n            out.append(l)\n        return out\n                \n        \n        \n        \n            \n            \n            \n        \n        \n        "]