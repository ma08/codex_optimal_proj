["def to_bits(s):\n    lst = [0] * 5000\n    for i in map(int,s.split()): lst[i] = 1\n    return lst", "def to_bits(s):\n    return [1 if i in set(map(int, s.split(\"\\n\"))) else 0 for i in range(5000)]", "def to_bits(string):\n    bitmap = [0] * 5000\n    for x in map(int, string.split()):\n        bitmap[x] = 1\n    return bitmap", "to_bits=lambda s:list(map(set(map(int,s.split('\\n'))).__contains__,range(5000)))", "def to_bits(string):\n    \n    input=sorted([int(x) for x in string.split(\"\\n\")])\n    bitmap=[0]*5000\n    for i in input:\n        bitmap[i]=1\n    return bitmap", "import numpy as np\ndef to_bits(string):\n    arr = [int(s) for s in string.split('\\n')]\n    bm = np.zeros(5000)\n    for i in arr:\n        bm[i] += 1*(1-bm[i])\n    return list(bm)", "def to_bits(string):\n    numbers = set(int(s) for s in string.split())\n    return [(0,1)[n in numbers] for n in range(5000)]\n", "def to_bits(string):\n    ret = [0] * 5000\n    for i in string.split('\\n'):\n        ret[int(i)] = 1\n    return ret", "def to_bits(string):\n    a=list(string)\n    words = [w.replace('\\n', ' ') for w in a]\n    b=''.join(words)\n    lst=b.split(' ')\n    lst2=[]\n    for x in lst:\n        if x.isdigit():\n            lst2.append(x )\n#     print(lst2)        \n    lst3 = [int(i) for i in lst2]\n    lst3.sort()\n    max(lst3)\n    print(len(lst3))\n    print( (lst3))\n    a=[]\n    for x in range(5000):\n        a.append(0)\n    len(a)    \n    for i in range(len(lst3)):\n        a[lst3[i]]=1 \n    print(sum(a))\n    return a    "]