["class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         left, right = 0, sum(nums)\n         for index, num in enumerate(nums):\n             right -= num\n             if left == right:\n                 return index\n             left += num\n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if(len(nums) == 0 ):\n             return -1\n         leftSum = sum(nums) \n         rightSum = 0 \n \n         for i in range(len(nums)):\n             leftSum = leftSum - nums[i]\n             if(rightSum == leftSum):\n                 return i\n             rightSum = rightSum + nums[i]\n             \n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         ret = sum(nums)\n         left = 0\n         for k, v in enumerate(nums):\n             if left * 2 + v == ret:\n                 return k\n             left += v\n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         left_sum = 0\n         right_sum = sum(nums)\n         for index in range(0, len(nums)):\n             right_sum -= nums[index]\n             if left_sum == right_sum:\n                 return index\n             left_sum += nums[index]\n         return -1\n     \n", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = sum(nums)\n         sum_num = n\n         for i in range(len(nums)):\n             n-=nums[i]\n             if (sum_num-nums[i])/2 == n:\n                 return i\n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         tot = sum(nums)\n         n = tot\n         for i in range(0,len(nums)):\n             n = n - nums[i]\n             if (tot - nums[i])/2 == n:\n                 return i\n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         #nums = [-1,-1,-1,1,1,1]\n         \n         \n         if len(nums) == 0:\n             return -1\n         \n         \n         if len(nums) == 1:\n             return nums[0]\n         \n         \n         left = 0\n         right = 0\n         \n         for i in range(1,len(nums)):\n             right += nums[i]\n         \n         \n         if left == right:\n             return 0\n         \n         \n         for i in range(1,len(nums)):\n             left += nums[i-1]\n             right -= nums[i]\n             \n             #print(\"l=\" + str(left))\n             #print(\"r=\" + str(right))\n             \n             \n             if left == right:\n                 return i\n         \n         \n         \n         \n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if nums == []:\n             return -1\n         sum = 0\n         for i in range(len(nums)):\n             sum += nums[i]\n         if nums[0] == sum:\n             return 0\n         left_sum = 0\n         for i in range(len(nums)-1):\n             left_sum += nums[i]\n             if left_sum*2 == sum - nums[i+1]:\n                 return i+1\n         if nums[len(nums)-1] == sum:\n             return len(nums)-1\n         return -1", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l < 3:\n             return -1\n         \n         s = [0] * l\n         s[0] = nums[0]\n         for i in range(1, l):\n             s[i] = s[i-1]+ nums[i]\n         \n         d=[0]* l\n         d[l-1] = nums[l-1]\n         for j in range(l-2,-1,-1):\n             d[j] = d[j+1] + nums[j]\n         \n         for i in range(0, l):\n             if(s[i] == d[i]):\n                 return i\n \n         return -1  ", "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return -1\n         \n         left = [0]\n         for num in nums:\n             left.append(left[-1] + num)\n         right = [0]\n         for i in range(len(nums)-1, -1, -1):\n             right.append(right[-1] + nums[i])\n         \n         length = len(nums)\n         for i in range(len(left)-1):\n             if left[i] == right[length-i-1]:\n                 return i\n         return -1"]