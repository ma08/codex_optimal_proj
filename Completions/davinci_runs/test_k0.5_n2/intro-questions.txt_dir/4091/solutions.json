["\ndef mi():\n\treturn map(int, input().split())\n\nn, k = mi()\na = list(mi())\nfor i in range(n):\n\ta[i] = [a[i],i]\n\na.sort(reverse= True)\n\na = a[:k]\ns = 0\nind = []\nfor i in a:\n\ts+=i[0]\n\tind.append(i[1])\nind.sort()\nfor i in range(k):\n\tind[i]+=1\nind1 = ind.copy()\nfor i in range(1,len(ind)):\n\tind[i]-=ind1[i-1]\nind[-1] = n-sum(ind[:k-1])\nprint (s)\nfor i in ind:\n\tprint (i, end = ' ')", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\n\nl = sorted([(x,i) for i,x in enumerate(l)],key = lambda x: (x[0],x[1]))\nused = l[-k:]\n\ns = sum(x[0] for x in used)\ndays = sorted(x[1] for x in used)\nprint (s)\n\nd = []\nt = 0\nfor x in days[:-1]:\n    d.append(x-t + 1)\n    t = x + 1\nd.append(n-t)\nprint (*d)", "import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n\n\"\"\"\n\nif stream_enable:\n    sys.stdin = io.StringIO(inpstream)\n    input()\n\ndef inpmap():\n    return list(map(int, input().split()))\n\nn, k = inpmap()\narr = inpmap()\nar = arr[:]\nar.sort()\nb = ar[-k:]\nprint(sum(b))\nm = 0\nr = []\nfor i, x in enumerate(arr):\n    if x in b:\n        b.remove(x)\n        r.append(i - m + 1)\n        m = i + 1\nr[-1] += n - m\nprint(*r)\n", "n, k = map(int, input().split())\na=sorted(enumerate(map(int, input().split())), key=lambda x:-x[1])[:k]\ns=0\nfor i in a:\n    s+=i[1]\na.sort(key=lambda x:x[0])\nprint(s)\nprev=-1\nfor i in a[:-1]:\n    print(i[0]-prev, end=' ')\n    prev=i[0]\nprint(n-prev-1)\n", "import heapq\n\nn,k = map(int, input().split())\na = list(enumerate(map(int, input().split()), 1))\ns = heapq.nlargest(k, a, key = lambda x: x[1])\nsu = sum([si[1] for si in s])\ns = sorted([si[0] for si in s])\ns[-1] = n\nfor i in range(len(s)-1, 0, -1):\n    s[i] -= s[i-1]\n\nprint(su)\nprint(*s)", "problems, days = list(map(int, input().split(\" \")))\ndifficulties = list(map(int, input().split(\" \")))\n\ncopyDifficulties = difficulties.copy()\ncopyDifficulties.sort()\nmaxValues = {}\n\nfor i in range(days):\n    if copyDifficulties[problems - 1 - i] in maxValues:\n        maxValues[copyDifficulties[problems - i - 1]] += 1\n    else:\n        maxValues[copyDifficulties[problems - i - 1]] = 1\n\ngained = 0\nsolved = []\nsolvedDay = 0\nfor i in range(problems):\n    solvedDay += 1\n    if difficulties[i] in maxValues and maxValues.get(difficulties[i]) >= 1:\n        gained += difficulties[i]\n        maxValues[difficulties[i]] -= 1\n        solved.append(solvedDay)\n        solvedDay = 0\nsolved[len(solved) - 1] += problems - sum(solved)\nprint(gained)\nres = \" \"\nfor i in solved:\n    res += str(i) + \" \"\nprint(res.strip())\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [0] * 3000\n\nfor i in range(n):\n    a[i] = (i, a[i])\n\na.sort(key=lambda x: x[1], reverse=True)\n\nfor i in range(k):\n    b[a[i][0]] = 1\n\ncur = 0\nans = []\ntotal = 0\naddtolast = 0\na.sort(key=lambda x: x[0])\n\nfor i in range(n):\n    if b[i] == 1:\n        total += a[i][1]\n        ans.append(i - cur + 1)\n        addtolast = n - i - 1\n        cur = i + 1\n\nans[-1] += addtolast\n\nprint(total)\nprint(*ans)", "n, m = map(int, input().split())\nls = [int(i) for i in input().split()]\n\nt = sorted(ls)\nt.reverse()\nans = 0\nst = []\nfor i in range(m):\n    ans += t[i]\n    st.append(t[i])\n\nprint(ans)\n\nl = -1\nfor i in range(n):\n    if ls[i] in st:\n        if len(st) == 1:\n            print(n - 1 - l);return\n\n        st.pop(st.index(ls[i]))\n        print(i - l, end=' ')\n        l = i\n\n", "length, k = map(int, input().split())\n\nproblems = list(enumerate(map(int, input().split(' '))))\n\nproblems.sort(key=lambda i: i[1], reverse=True)\n\nmaxs = problems[:k]\n\nmaxs.sort()\n\ndistr = []\n\nprev = -1\ntotal = 0\nfor i in range(k):\n    distr.append(maxs[i][0] - prev)\n    prev = maxs[i][0]\n    total += distr[-1]\n\ndistr[-1] += length - total\n\nprint(sum(map(lambda i: i[1], maxs)))\nprint(*distr)", "n, k = list(map(int, input().split(\" \")))\n\nnumbers = [int(i) for i in input().split(\" \")]\nnumbers = [(num, i + 1) for i, num in enumerate(numbers)]\n\nnumbers = sorted(numbers)\nnumbers = numbers[::-1][:k]\nindices = [i[1] for i in numbers]\nindices = sorted(indices)\n\nfor i in range(k -1, 0, -1):\n    indices[i] -= indices[i - 1]\n\ns = sum(indices)\nindices[-1] += n - s\nprint(sum([i[0] for i in numbers]))\nprint(*indices)\n", "R = lambda: map(int, input().split())\n\nn, k = R()\na = list(R())\nb = sorted(a)\nb = b[n-k:]\nans = []\n\nprint(sum(b))\n\nk = 0\nfor t in a:\n    k += 1\n    if t in b:\n        del b[b.index(t)]\n        ans.append(k)\n        k = 0\nif k:\n    ans[-1] += k\n\nprint(*ans, sep=' ')", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nneed = sorted(a, reverse=True)\n\nind = list()\nfor el in need[:k]:\n    ind.append(a.index(el))\n    a[a.index(el)] = 0\n\nind.sort()\n\nprint(sum(need[:k]))\n\nind[-1] = n - 1\nind.insert(0, -1)\nans = [el - ind[i] for i, el in enumerate(ind[1:])]\n\nprint(' '.join(map(str, ans)))\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nb = b[:k]\ns = sum(b)\nrec = []\nk = 1\nfor i in range(n):\n    if a[i] not in b:\n        k += 1\n        continue\n    else:\n        b.remove(a[i])\n        rec.append(k)\n        k = 1\n\nrec[-1] += n - sum(rec)\nprint(s)\nprint(\" \".join(map(str, rec)))", "n, k = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\n\nres = sorted(a, reverse = True)\nres = res[0:k]\nprint(sum(res))\ns = res\nprev = 0\ncounter = 1\nfor i in range(len(a)):\n\tif a[i] in s:\n\t\ts.pop(s.index(a[i]))\n\t\tif counter == k:\n\t\t\tprint(n - prev)\n\t\telse:\n\t\t\tprint(i + 1 - prev, end=' ')\n\t\tcounter += 1\n\t\tprev = i + 1\n", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nat = []\n\nz = 0\nfor i in a:\n    at.append( (z, i) )\n    z = z + 1\n\nat.sort(key = lambda x:-x[1])\n\nzt = sorted(at[:k], key = lambda x:x[0])\n\nprev = -1\nai = []\nsuma = 0\nfor i in zt:\n    ai.append(i[0] - prev)\n    prev = i[0]\n    suma += i[1]\n\n\nai[-1] = ai[-1] + (n - sum(ai))\n\nprint(suma)\nprint(\" \".join(str(i) for i in ai))\n", "n, k  =map(int,input().split())\n\ndata = list(map(int,input().split()))\n\n\nan_data = [(data[i],i ) for i in range(n)]\n\nan_data.sort(key = lambda x:x[0])\nan_data = an_data[::-1]\nans = 0\nanswer = []\nfor i in range(k):\n    ans += an_data[i][0]\n    answer.append(an_data[i][1])\n\n\nprint(ans)\n\nprev = 0\nanswer.sort()\n\nfor i in range(k):\n    el = answer[i]\n    if i == k - 1:\n        print(n - prev)\n        break\n    \n    if prev == 0:\n        print(el  + 1 ,end=\" \")\n        prev = el  +1\n        continue\n        \n    print(el - prev  +1, end = \" \")\n    prev = el  + 1\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append((a[i], i))\nb.sort(reverse=True)\nsum = 0\nlol = [-1]\nfor i in range(k):\n    sum += b[i][0]\n    lol.append(b[i][1])\nlol.sort()\nans = []\nfor i in range(1, k + 1):\n    ans.append(lol[i] - lol[i - 1])\nans[k - 1] += n - 1 - lol[k]\nprint(sum)\nprint(*ans)", "# from collections import Counter as cc\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\ns = sorted(zip(arr, list(range(n))), reverse=True)\ns = s[:k]\nprint(sum(x for x, _ in s))\ns.sort(key=lambda x: x[1])\nprev = -1\nans = []\nfor x, i in s[:-1]:\n    n -= i - prev\n    ans.append(i - prev)\n    prev = i\nans.append(n)\nprint(*ans)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = sorted(a)[-k:]\nprint(sum(b))\nused = [0 for i in range(n)]\nfor elem in b:\n    for i in range(n):\n        if a[i] == elem and used[i] == 0:\n            used[i] = 1\n            break\nlast = 0\ncount = 0\nans = []\nfor i in range(n):\n    if used[i]:\n        ans.append(i - last + 1)\n        last = i + 1\n        count += 1\n    if count == k:\n        ans.pop()\n        ans.append(n - sum(ans))\nprint(*ans)\n", "#codeforces_1006_B\nn,k = [ int(e) for e in input().split(\" \") ]\nL = [ int(e) for e in input().split(\" \") ]\nM = L[:]\nM.sort()\nM = M[-1:-k-1:-1]\ncursor = 0\nprint(sum(M))\nfor e in L:\n    cursor += 1\n    if e in M:\n        M.remove(e)\n        if M != []:\n            print(cursor,end=\" \")\n            cursor = 0\n        else:\n            pass;\nprint(cursor)", "n, k = map(int, input().split())\ns = [int(elem) for elem in input().split()]\nanses = []\ns2 = s[:]\ns2.sort(reverse = True)\ns2 = s2[:k]\nans = sum(s2)\narr = []\ne = 0\nfor i in range(n):\n    if s[i] in s2:\n        anses.append(str(i - e + 1))\n        e = i + 1\n        b = s2.index(s[i])\n        del s2[b]\nif e - 1 < n:\n    anses[len(anses) - 1] = str(int(anses[len(anses) - 1]) + n - e)\nprint(ans)\nprint(' '.join(anses))", "n, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [[a[i], i] for i in range(n)]\nb.sort(reverse = True)\n# print(b)\nb = b[:k]\nb.sort( key = lambda x : x[1])\n# print(b)\nans = 0\nfor i in b:\n    ans += i[0]\nprint(ans)\nprev = 0\nfor iter, i  in enumerate(b):\n    if iter != len(b) - 1:\n        print(i[1] + 1 - prev, end = ' ')\n        prev = i[1] + 1\n    else:\n        print(n - prev)", "n, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [i for i in a]\na.sort()\nd = {}\ncount = 0\nans = []\nans_sum = 0\nfor i in range(n):\n    if not b[i] in d:\n        d[b[i]] = []\n    d[b[i]].append(i)\n\nfor i in reversed(range(n)):\n    ans_sum += a[i]\n    ans.append(d[a[i]][0])\n    d[a[i]] = d[a[i]][1:]\n    count += 1\n    if count == k:\n        break\n\nprint(ans_sum)\nans.sort()\nans = [-1] + ans\nl = len(ans)\nfor i in range(1, l - 1):\n    print(ans[i] - ans[i - 1], end = \" \")\nprint(n - ans[-2] - 1)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nq = []\nfor i in range(n):\n    q.append(a[i])\nq.sort()\nq = q[(-m):]\ns = 0\nfor i in range(m):\n    s += q[i]\nprint(s)\ns = 1\nw = []\nf = 1\nfor i in range(n):\n    if(a[0] in q):\n        w.append(s)\n        f+=s\n        s = 0\n        q.remove(a[0])\n    a.remove(a[0])\n    s+=1\nw[-1] += n-f+1\nfor i in range(m):\n    print(w[i], end = \" \")\n"]