"""
You are given a matrix $a$ of size $n \times m$ consisting of integers.

You can choose no more than $\left\lfloor\frac{m}{2}\right\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.

Note that you can choose zero elements (and the sum of such set is $0$).


-----Input-----

The first line of the input contains three integers $n$, $m$ and $k$ ($1 \le n, m, k \le 70$) — the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \le a_{i, j} \le 70$).


-----Output-----

Print one integer — the maximum sum divisible by $k$ you can obtain.


-----Examples-----
Input
3 4 3
1 2 3 4
5 2 2 2
7 1 1 4

Output
24

Input
5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6

Output
56



-----Note-----

In the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef solve(n, m, k, matrix):\n    dp = [[0 for i in range(m + 1)] for j in range(n)]\n    for i in range(m):\n        dp[0][i] = matrix[0][i]\n    for i in range(1, n):\n        for j in range(m):\n            for k in range(j + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + matrix[i][j])\n    return dp[n - 1][m - 1] % k\n\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    matrix = [[int(x) for x in input().split()] for i in range(n)]\n    print(solve(n, m, k, matrix))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n\n    dp = [[0] * (k+1) for i in range(m+1)]\n    for i in range(n):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]\n\n        for j in range(m):\n            for l in range(k):\n                dp[i][(l+a[i][j]) % k] = max(dp[i][(l+a[i][j]) % k], dp[i-1][l] + a[i][j])\n\n    print(dp[n-1][0])\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1648682680,
  "id": "cmpl-4rby4gvfrGy4V79qq4wwNf9IBV3C3",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef solve(n, m, k, matrix):\n    dp = [[0 for i in range(m + 1)] for j in range(n)]\n    for i in range(m):\n        dp[0][i] = matrix[0][i]\n    for i in range(1, n):\n        for j in range(m):\n            for k in range(j + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + matrix[i][j])\n    return dp[n - 1][m - 1] % k\n\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    matrix = [[int(x) for x in input().split()] for i in range(n)]\n    print(solve(n, m, k, matrix))\n\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n\n    dp = [[0] * (k+1) for i in range(m+1)]\n    for i in range(n):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]\n\n        for j in range(m):\n            for l in range(k):\n                dp[i][(l+a[i][j]) % k] = max(dp[i][(l+a[i][j]) % k], dp[i-1][l] + a[i][j])\n\n    print(dp[n-1][0])\n\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
