["A, B, C = list(map(int, input().split()))\n\ng = min(A//3,B//2,C//2)\n\nA -= g*3\nB -= g*2\nC -= g*2\n\nL = [0,0,1,2,0,2,1]\ndef calc(today, x):\n    if x[L[today]] == 0:\n        return 0\n    y = [xx for xx in x]\n    y[L[today]] -= 1\n    return calc((today+1)%7, y) + 1\n\nma = 0\nfor i in range(7):\n    ma = max(ma, calc(i, [A,B,C]))\n\nprint(ma+g*7)\n", "def f(a, b, c):\n    kek = [a, b, c]\n    arr = [0, 0, 1, 2, 0, 2, 1] * 100\n    ans = 0\n    for i in range(7):\n        tmp = kek + []\n        j = i\n        while tmp[arr[j]]:\n            tmp[arr[j]] -= 1\n            j += 1\n        ans = max(ans, j - i)\n    return ans\n\ndef main():\n    a, b, c = map(int, input().split())\n    d = min(a // 3, b >> 1, c >> 1)\n    ans = 7 * d\n    a -= 3 * d\n    b -= d << 1\n    c -= d << 1\n    ans += f(a, b, c)\n    print(ans)\n    return 0\n\nmain()", "A = list(map(int, input().split()))\nX = [0, 1, 2, 0, 2, 1, 0]\na, b, c = A\nres = min(min(a//3, b//2), c//2)\na -= res*3\nb -= res*2\nc -= res*2\nres *= 7\nA = [a, b, c]\nmaxc = -1\nfor i in range(0, 7):\n\tA0 = A[:]\n\tc = 0\n\twhile True:\n\t\tif A0[X[i]] > 0:\n\t\t\tA0[X[i]] -= 1\n\t\t\tc += 1\n\t\t\ti = (i + 1) % 7\n\t\telse:\n\t\t\tbreak\n\tif c > maxc:\n\t\tmaxc = c\nprint(res + maxc)", "IN = input\nrint = lambda: int(IN())\nrmint = lambda: list(map(int, IN().split()))\nrlist = lambda: list(rmint())\n\nw = [0, 1, 2, 0, 2, 1, 0]\nh = rlist()\nans = 0\n\n\ndef g(x):\n    p = w[x:]\n    a = h[:]\n    v = 0\n    for f in p:\n        if not a[f]: return v\n        a[f] -= 1\n        v += 1\n    u = min([a[0] // 3, a[1] // 2, a[2] // 2])\n    a[0] -= u*3\n    a[1] -= u*2\n    a[2] -= u*2\n    v += u * 7\n    for f in w:\n        if not a[f]: return v\n        a[f] -= 1\n        v += 1\n    return v\n\n\nfor i in range(7): ans = max(ans, g(i))\nprint(ans)\n", "a, b, c = list(map(int, input().split()))\ncost = [0, 1, 2, 0, 2, 1, 0]\ndcost = [3, 2, 2]\nweeks = min(a // 3, b // 2, c // 2)\nleft = [a - 3 * weeks, b - 2 * weeks, c - 2 * weeks]\ncost = cost + cost\nmaxdays = 0\nfor i in range(7):\n    l = left[:]\n    days = 0\n    for j in range(i, i + 7):\n        if l[cost[j]] == 0:\n            break\n        days += 1\n        l[cost[j]] -= 1\n    maxdays = max(maxdays, days)\nprint(weeks * 7 + maxdays)\n", "a = list(map(int, input().split()))\nwek = min(a[0] // 3, a[1] // 2, a[2] // 2)\na[0] -= wek * 3\na[1] -= wek * 2\na[2] -= wek * 2\nA = [0, 0, 1, 2, 0, 2, 1]\nA = A + A\nmx = 0\nfor i in range(7):\n    ans = 0\n    cur = i\n    b = a.copy()\n    while b[A[cur]]:\n        ans += 1\n        b[A[cur]] -= 1\n        cur += 1\n    mx = max(mx, ans)\nprint(mx + wek * 7)\n", "import copy\nl=list(map(int,input().split()))\nans=min(l[0]//3,l[1]//2,l[2]//2)\nl[0]-=ans*3\nl[1]-=ans*2\nl[2]-=ans*2\nans*=7\nl1=[0,1,2,0,2,1,0]\nl1+=l1\nv=ans\nfor i in range(7) :\n    k=0\n    L=copy.copy(l)\n    for j in range(i,i+7) :\n        if L[l1[j]]<=0 :\n            break\n        L[l1[j]]-=1\n        k+=1\n    \n    ans=max(ans,v+k)\nprint(ans)\n    \n    \n", "E = [0, 1, 2, 0, 2, 1, 0]\na = list(map(int, input().split()))\nans = 0\nfor d in range(7):\n  e = E[d:] + E[:d]\n  b = a.copy()\n  pas = min(a[0] // 3, a[1] // 2, a[2] // 2)\n  b[0] -= pas * 3\n  b[1] -= pas * 2\n  b[2] -= pas * 2\n  it = 0\n  while b[e[it]]:\n    b[e[it]] -= 1\n    it += 1\n  ans = max(ans, pas * 7 + it)\nprint(ans)\n", "a, b, c = list(map(int, input().split()))\n\na_week = a // 3\nb_week = b // 2\nc_week = c // 2\n\nweek = min(a_week, b_week, c_week)\n\na -= week * 3\nb -= week * 2\nc -= week * 2\n\n# Do simulation\nmax_day = 0\n\nfor i in range(7):\n\n\taa = a\n\tbb = b\n\tcc = c\n\tcount = 0\n\n\tfor j in range(7):\n\n\t\tday = (i + j) % 7\n\n\t\tif day == 0 or day == 3 or day == 6:\n\t\t\taa -= 1\n\t\telif day == 1 or day == 5:\n\t\t\tbb -= 1\n\t\telse:\n\t\t\tcc -= 1\n\n\t\tif aa < 0 or bb < 0 or cc < 0:\n\t\t\tbreak\n\t\tcount += 1\n\n\tif count > max_day:\n\t\tmax_day = count\n\nresult = week * 7 + max_day\nprint(result)\n", "a,b,c = list(map(int,input().split()))\nweek = [0,1,2,0,2,1,0]\nnums = [3,2,2]\nnum = min(min(a // nums[0],b // nums[1]), c // nums[2])\nnum2 = [a - nums[0] * num,b - nums[1] * num,c - nums[2] * num]\nans = 0\nfor j in range(7):\n    num3 = [num2[0],num2[1],num2[2]]\n    i = j\n    temp = num * 7\n    while True:\n        if num3[week[i]] == 0:\n            break\n        num3[week[i]] -= 1\n        temp += 1\n        i += 1\n        i %= 7\n    ans = max(temp,ans)\nprint(ans)\n    \n", "a, b, c = list(map(int, input().split()))\nweeks = min(a//3, b//2, c//2)\na -= weeks * 3\nb -= weeks * 2\nc -= weeks * 2\n\ndays = [\"f\", \"r\", \"c\", \"f\", \"c\", \"r\", \"f\"]\nans = 0\n\nfor i in range(7):\n    day = i\n    anstemp = 0\n    A = a\n    B = b\n    C = c\n    for j in range(50):\n        if days[day] == \"f\":\n            if A > 0:\n                A -= 1\n                day += 1\n                anstemp += 1\n            else:\n                break\n        elif days[day] == \"r\":\n            if B > 0:\n                B -= 1\n                day += 1\n                anstemp += 1\n            else:\n                break\n        else:\n            if C > 0:\n                C -= 1\n                day += 1\n                anstemp += 1\n        if day == 7:\n            day = 0\n    ans = max(anstemp, ans)\n\nans += weeks * 7\nprint(ans)\n", "a, b, c = map(int, input().split())\ncnt = 0\ncnt += min(a // 3, b // 2, c // 2)\na -= 3 * cnt\nb -= 2 * cnt\nc -= 2 * cnt\nsas = 0\nQ = [0, 1, 2, 0, 2, 1, 0]\nfor first_day in range(7):\n    heh = 0\n    aa, bb, cc = a, b, c\n    W = [a, b, c]\n    while W[Q[first_day]]:\n        if Q[first_day] == 0:\n            aa -= 1\n        elif Q[first_day] == 1:\n            bb -= 1\n        else:\n            cc -= 1\n        first_day += 1\n        heh += 1\n        first_day %= 7\n        W = [aa, bb, cc]\n    sas = max(sas, heh)\nprint(sas + 7 * cnt)", "d = [0, 1, 2, 0, 2, 1, 0]\n\na, b, c = [int(item) for item in input().split()]\n\nans = -float(\"inf\")\n\nk = min(a // 3, b // 2, c // 2)\ng = k * 7\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\nfor s in range(7):\n    days = 0\n    ca, cb, cc = a, b, c\n    for day in range(s, s + 7):\n        if d[day % 7] == 0:\n            if ca == 0:\n                break\n            ca -= 1\n        elif d[day % 7] == 1:\n            if cb == 0:\n                break\n            cb -= 1\n        else:\n            if cc == 0:\n                break\n            cc -= 1\n        days += 1\n\n    ans = max(ans, days)\n\n\nprint(ans + g)\n", "a, b, c = list(map(int, input().split()))\nd = min(a // 3, b // 2, c // 2)\np = [0] * 3\np[0] = a - (3 * d) if d > 0 else a\np[1] = b - (2 * d) if d > 0 else b\np[2] = c - (2 * d) if d > 0 else c\nr = [0,1,2,0,2,1,0] * 2\n#print(d)\n#print(p)\ni = 0\nj = 0\nans = 0\nwhile i < 14 and j < 14:\n    if p[r[j]]:\n        p[r[j]] -= 1\n        j += 1\n    elif i != j:\n        p[r[i]] += 1\n        i += 1\n    else:\n        i += 1\n        j += 1\n    ans = max(ans, j - i)\n\nprint(d * 7 + ans)\n", "import sys\ninput = sys.stdin.readline\n\na,b,c=list(map(int,input().split()))\n\naw=a//3\nbw=b//2\ncw=c//2\n\nMIN=min(aw,bw,cw)\n\nANS=MIN*7\n\na-=MIN*3\nb-=MIN*2\nc-=MIN*2\nSCOREMAX=0\n\nfor start in range(7):\n    ax=a\n    bx=b\n    cx=c\n    SCORE=0\n    R=[0,1,2,0,2,1,0][start:]+[0,1,2,0,2,1,0][:start]\n\n    for k in R*100:\n        if k==0:\n            if ax==0:\n                break\n            else:\n                ax-=1\n        if k==1:\n            if bx==0:\n                break\n            else:\n                bx-=1\n\n        if k==2:\n            if cx==0:\n                break\n            else:\n                cx-=1\n\n        SCORE+=1\n\n    SCOREMAX=max(SCOREMAX,SCORE)\n\nprint(ANS+SCOREMAX)\n\n", "a, b, c = list(map(int, input().split()))\n\na1, b1, c1 = a, b, c\n\nk = min(a // 3, b // 2, c // 2)\n\n\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\naa = [1, 2, 3, 1, 3, 2, 1]\n\naa += aa[:]\n\nmx = 0\nind = 1\n\nfor i in range(7):\n\tvar = [0, a, b, c]\n\tkol = 0\n\t\n\tfor j in range(i, 7 + 7):\n\t\tif var[aa[j]] == 0:\n\t\t\tbreak\n\t\tvar[aa[j]] -= 1\n\t\tkol += 1\n\t\n\tif kol > mx:\n\t\tmx = kol\n\t\tind = i + 1\n\n\nprint(k * 7 + mx)\n", "a, b, c = [int(elem) for elem in input().split()]\n\nnum_weeks = min(a // 3, b // 2, c // 2)\na -= 3 * num_weeks\nb -= 2 * num_weeks\nc -= 2 * num_weeks\n\n# rest_rations = [a, b, c]\nmax_num_additional_days = 0\n\nwhat_to_eat = [0, 0, 1, 2, 0, 2, 1]\nfor start in range(7):\n    rest_rations = [a, b, c]\n    num_additional_days = 0\n    for i in range(start, start + 7):\n        day = i % 7\n        food_to_eat_today = what_to_eat[day]\n        if rest_rations[food_to_eat_today] == 0:\n            break\n        rest_rations[food_to_eat_today] -= 1\n        num_additional_days += 1\n    max_num_additional_days = max(max_num_additional_days, num_additional_days)\n\nprint(max_num_additional_days + num_weeks * 7)\n", "import collections\n\ndef calc(day,a,b,c):\n    ret=0\n    while True:\n        if a>300000000 and b>200000000 and c>200000000:\n            a-=300000000\n            b-=200000000\n            c-=200000000\n            ret+=700000000\n        elif a>3000000 and b>2000000 and c>2000000:\n            a-=3000000\n            b-=2000000\n            c-=2000000\n            ret+=7000000\n        elif a>30000 and b>20000 and c>20000:\n            a-=30000\n            b-=20000\n            c-=20000\n            ret+=70000\n        elif a>300 and b>200 and c>200:\n            a-=300\n            b-=200\n            c-=200\n            ret+=700\n        elif a>3 and b>2 and c>2:\n            a-=3\n            b-=2\n            c-=2\n            ret+=7\n        else:\n            break\n\n    while True:\n        # 0=Monday\n        if day==0 or day==3 or day==6:\n            a-=1\n            if a<0: return ret\n        elif day==1 or day==5:\n            b-=1\n            if b<0: return ret\n        elif day==2 or day==4:\n            c-=1\n            if c<0: return ret\n        ret+=1\n        day=(day+1)%7\n\ndef solve():\n    a,b,c=list(map(int,input().split()))\n    ans=0\n    for i in range(7):\n        ans=max(ans,calc(i,a,b,c))\n    return ans\n\nprint(solve())\n", "f = [0, 1, 2, 0, 2, 1, 0]\nl = [int(i) for i in input().split()]\nmn = min([l[i] // f.count(i) for i in range(3)])\nl = [l[i] - mn * f.count(i) for i in range(3)]\n\nmx = 0\nfor i in range(7):\n    tmp = l.copy()\n    j = 0\n    while tmp[f[(i + j) % 7]] > 0:\n        tmp[f[(i + j) % 7]] -= 1\n        j += 1\n    if j > mx:\n        mx = j\nprint(mn * 7 + mx)\n", "nums = [int(i) for i in input().split()]\na, b, c = nums[0], nums[1], nums[2]\n\nmode = 'abcacba'\n\nmin_weeks = 10 ** 9\n\nmin_weeks = min(min_weeks, a // 3)\nmin_weeks = min(min_weeks, b // 2)\nmin_weeks = min(min_weeks, c // 2)\n\na, b, c = a - min_weeks * 3, b - min_weeks * 2, c - min_weeks * 2\n\nmax_days = 0\nfor i in range(7):\n    j = 0\n    left_a, left_b, left_c = a, b, c\n\n    while True:\n        eat = mode[(i + j) % 7]\n        \n        if eat == 'a':\n            if left_a == 0:\n                break\n            left_a -= 1\n        elif eat == 'b':\n            if left_b == 0:\n                break\n            left_b -= 1\n        else:\n            if left_c == 0:\n                break\n            left_c -= 1\n        \n        j += 1\n    \n    max_days = max(max_days, j)\n\nprint(min_weeks * 7 + max_days)\n", "def mp():\n    return list(map(int, input().split()))\n\na, b, c = mp()\n\nk = min(a // 3, b // 2, c // 2)\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\nm = 0\nfor i in range(7):\n    d = i\n    cnt = 0\n    x, y, z = a, b, c\n    while not(x < 0 or y < 0 or z < 0):\n        if d in [0, 3, 6]:\n            x -= 1\n        elif d in [1, 5]:\n            y -= 1\n        else:\n            z -= 1\n        d = (d + 1) % 7\n        cnt += 1\n    cnt -= 1\n    #print(cnt)\n    m = max(m, cnt)\n    cnt = 0\n    \nprint(7 * k + m)\n", "a, b, c = map(int, input().split())\nsa, sb, sc = a // 3, b // 2, c // 2\nm = min(sa, sb, sc)\npa, pb, pc = a - 3 * m, b - 2 * m, c - 2 * m\nd = [1,2,3,1,3,2,1,1,2,3,1,3,2,1,1,2,3,1,3,2,1]\nmr = 0\nfor i in range(7):\n\ta,b,c = pa, pb, pc\n\tk = i\n\tr = 0\n\twhile not -1 in [a,b,c]:\n\t\tif d[k] == 1:\n\t\t\ta -= 1\n\t\telif d[k] == 2:\n\t\t\tb -= 1\n\t\telse:\n\t\t\tc -= 1\n\t\tk += 1\n\t\tr += 1\n\tmr = max(r, mr)\nprint(7 * m + mr - 1)", "a,b,c=list(map(int,input().split()))\ns={0:0,3:0,6:0,1:1,5:1,2:2,4:2}\noo=0\naa,bb,cc=a,b,c\nif True:\n    kk=(a+b+c)//7\n    if min([a//3,b//2,c//2])==a//3:\n        nn=a//3\n        a=a%3\n        b-=nn*2\n        c-=nn*2\n    elif min([a//3,b//2,c//2])==b//2:\n        nn=b//2\n        b=b%2\n        a-=nn*3\n        c-=nn*2\n    elif min([a//3,b//2,c//2])==c//2:\n        nn=c//2\n        c=c%2\n        a-=nn*3\n        b-=nn*2\n#print(a,b,c)\nst=(aa+bb+cc)-(a+b+c)\nfor i in range(7):\n    mm=[a,b,c]\n    ind=i\n    while True:\n        ind+=1\n        ind=ind%7\n        if mm[s[ind]]==0:\n            break\n        else:\n            mm[s[ind]]-=1\n    oo=max(oo,(a+b+c)-sum(mm))\nprint(oo+st)\n    \n", "a, b, c = (int(i) for i in input().split())\nj = min(a // 3, min(b // 2, c // 2))\na = a - j * 3\nb = b - j * 2\nc = c - j * 2\nG = [1, 2, 3, 1, 3, 2, 1]\nma = 0\nfor i in range(7):\n    a1, b1, c1 = a, b, c\n    s = 0\n    for h in range(7):\n        if G[h] == 1:\n            if a1:\n                a1 -= 1\n            else:\n                break\n        elif G[h] == 2:\n            if b1:\n                b1 -= 1\n            else:\n                break\n        else:\n            if c1:\n                c1 -= 1\n            else:\n                break\n        s += 1\n    if s > ma:\n        ma = s\n    v = G[0]\n    del(G[0])\n    G.append(v)\n    #print(G)\nprint(j * 7 + ma)\n", "a, b, c = list(map(int,input().split()))\nchuj = ['a', 'b', 'c', 'a', 'c', 'b', 'a', 'a', 'b', 'c', 'a', 'c', 'b', 'a']\np = min(a // 3, b // 2, c // 2)\na = a - p * 3\nb = b - p * 2\nc = c - p * 2\nwyn = 7 * p\nres = 0\nfor i in range(7):\n\tpom = 0\n\taa = a\n\tbb = b\n\tcc = c\n\tfor j in range(7):\n\t\tif chuj[i + j] == \"a\":\n\t\t\taa -= 1\n\t\tif chuj[i + j] == \"b\":\n\t\t\tbb -= 1\n\t\tif chuj[i + j] == \"c\":\n\t\t\tcc -= 1\n\t\tif aa < 0 or bb < 0 or cc < 0:\n\t\t\tres = max(pom,res)\n\t\t\tbreak\n\t\tpom += 1\nprint(res+wyn)"]