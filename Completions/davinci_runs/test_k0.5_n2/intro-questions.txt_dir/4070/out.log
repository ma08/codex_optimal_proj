"""
Programmers' kids solve this riddle in 5-10 minutes. How fast can you do it?


-----Input-----

The input contains a single integer n (0 ≤ n ≤ 2000000000).


-----Output-----

Output a single integer.


-----Examples-----
Input
11

Output
2

Input
14

Output
0

Input
61441

Output
2

Input
571576

Output
10

Input
2128506

Output
3
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Function\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef get_odd_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1648683832,
  "id": "cmpl-4rcGe1DpdlffWPQ7ejhIkgyPqOvbH",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Function\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef get_odd_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
