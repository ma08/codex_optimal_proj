"""
You are given a bracket sequence $s$ consisting of $n$ opening '(' and closing ')' brackets.

A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences "()()", "(())" are regular (the resulting expressions are: "(1)+(1)", "((1+1)+1)"), and ")(" and "(" are not.

You can change the type of some bracket $s_i$. It means that if $s_i = $ ')' then you can change it to '(' and vice versa.

Your task is to calculate the number of positions $i$ such that if you change the type of the $i$-th bracket, then the resulting bracket sequence becomes regular.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 10^6$) — the length of the bracket sequence.

The second line of the input contains the string $s$ consisting of $n$ opening '(' and closing ')' brackets.


-----Output-----

Print one integer — the number of positions $i$ such that if you change the type of the $i$-th bracket, then the resulting bracket sequence becomes regular.


-----Examples-----
Input
6
(((())

Output
3

Input
6
()()()

Output
0

Input
1
)

Output
0

Input
8
)))(((((

Output
0
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r)\n\nsolve()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)"
    }
  ],
  "created": 1648683636,
  "id": "cmpl-4rcDUI93487Ct3fIfCFaoGdKdiI8h",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r)\n\nsolve()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)"
}
REASON stop
