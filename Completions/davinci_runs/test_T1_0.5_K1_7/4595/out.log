2022-04-13 21:57:24.639537 """
Snuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).
Find the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.

-----Constraints-----
 - 1 ≦ |s| ≦ 200{,}000
 - s consists of uppercase English letters.
 - There exists a substring of s that starts with A and ends with Z.

-----Input-----
The input is given from Standard Input in the following format:
s

-----Output-----
Print the answer.

-----Sample Input-----
QWERTYASDFZXCV

-----Sample Output-----
5

By taking out the seventh through eleventh characters, it is possible to construct ASDFZ, which starts with A and ends with Z.
"""
2022-04-13 21:57:24.639547 --------------------------
2022-04-13 21:58:06.457884 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ns = input()\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\nA = ord(\"A\")\nZ = ord(\"Z\")\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u306b\u683c\u7d0d\nalphabet = {}\nfor i in range(26):\n    alphabet[chr(A + i)] = A + i\n\n# \u6587\u5b57\u5217s\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\ns_list = []\nfor i in range(len(s)):\n    s_list.append(s[i])\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(26):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(25, -1, -1):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(26):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(25, -1, -1):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u524a\u9664\u3057\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u51fa\u529b\nprint(len(s) - len(s_list))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\n\nans = 0\n\nfor i in range(len(s)):\n    if s[i] == 'A':\n        for j in range(i, len(s)):\n            if s[j] == 'Z':\n                ans = max(ans, j - i + 1)\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\n\n# find the first and last occurence of 'A' and 'Z'\nstart = s.find('A')\nend = s.rfind('Z')\n\n# the length of the substring is the difference between the two\nprint(end - start + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    s = stdin.readline().rstrip()\n    s_len = len(s)\n    ans = 0\n    start = deque()\n    end = deque()\n\n    for i in range(s_len):\n        if s[i] == \"A\":\n            start.append(i)\n        if s[i] == \"Z\":\n            end.append(i)\n\n    while start:\n        if start[0] < end[0]:\n            ans = max(ans, end[0] - start[0] + 1)\n            start.popleft()\n        else:\n            end.popleft()\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    as_index = s.find(\"A\")\n    z_index = s.rfind(\"Z\")\n    print(z_index - as_index + 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nfrom collections import deque\n\ndef find_max_len(s):\n  start_idx = deque()\n  end_idx = deque()\n  for i, c in enumerate(s):\n    if c == 'A':\n      start_idx.append(i)\n    if c == 'Z':\n      end_idx.append(i)\n  return end_idx[0] - start_idx[-1] + 1\n\ndef main():\n  s = input()\n  print(find_max_len(s))\n\nif __name__ == '__main__':\n  main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ns = input()\n\nl = s.find('A')\nr = s.rfind('Z')\n\nprint(r - l + 1)"
    }
  ],
  "created": 1649887044,
  "id": "cmpl-4wfHIOsX8JjzNPWKx2Msb61rCw4dK",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:58:06.458158 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ns = input()\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\nA = ord(\"A\")\nZ = ord(\"Z\")\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u306b\u683c\u7d0d\nalphabet = {}\nfor i in range(26):\n    alphabet[chr(A + i)] = A + i\n\n# \u6587\u5b57\u5217s\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\ns_list = []\nfor i in range(len(s)):\n    s_list.append(s[i])\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(26):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(25, -1, -1):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(26):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6587\u5b57\u5217s\u304b\u3089\u63a2\u3059\nfor i in range(25, -1, -1):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eASCII\u30b3\u30fc\u30c9\u3092\u8f9e\u66f8\u304b\u3089\u53d6\u5f97\n    code = alphabet[chr(A + i)]\n    # \u6587\u5b57\u5217s\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u3042\u308b\u5834\u5408\n    if code in s_list:\n        # \u6587\u5b57\u5217s\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\n        index = s_list.index(code)\n        # \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f4d\u7f6e\u3092\u524a\u9664\n        s_list.pop(index)\n        break\n\n# \u6587\u5b57\u5217s\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u524a\u9664\u3057\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u51fa\u529b\nprint(len(s) - len(s_list))"
}
2022-04-13 21:58:06.458268 REASON stop
2022-04-13 21:58:06.458678 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\n\nans = 0\n\nfor i in range(len(s)):\n    if s[i] == 'A':\n        for j in range(i, len(s)):\n            if s[j] == 'Z':\n                ans = max(ans, j - i + 1)\n\nprint(ans)"
}
2022-04-13 21:58:06.458786 REASON stop
2022-04-13 21:58:06.459197 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\n\n# find the first and last occurence of 'A' and 'Z'\nstart = s.find('A')\nend = s.rfind('Z')\n\n# the length of the substring is the difference between the two\nprint(end - start + 1)"
}
2022-04-13 21:58:06.459239 REASON stop
2022-04-13 21:58:06.475019 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    s = stdin.readline().rstrip()\n    s_len = len(s)\n    ans = 0\n    start = deque()\n    end = deque()\n\n    for i in range(s_len):\n        if s[i] == \"A\":\n            start.append(i)\n        if s[i] == \"Z\":\n            end.append(i)\n\n    while start:\n        if start[0] < end[0]:\n            ans = max(ans, end[0] - start[0] + 1)\n            start.popleft()\n        else:\n            end.popleft()\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:58:06.475144 REASON stop
2022-04-13 21:58:06.475724 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    as_index = s.find(\"A\")\n    z_index = s.rfind(\"Z\")\n    print(z_index - as_index + 1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:58:06.475790 REASON stop
2022-04-13 21:58:06.491709 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nfrom collections import deque\n\ndef find_max_len(s):\n  start_idx = deque()\n  end_idx = deque()\n  for i, c in enumerate(s):\n    if c == 'A':\n      start_idx.append(i)\n    if c == 'Z':\n      end_idx.append(i)\n  return end_idx[0] - start_idx[-1] + 1\n\ndef main():\n  s = input()\n  print(find_max_len(s))\n\nif __name__ == '__main__':\n  main()"
}
2022-04-13 21:58:06.491798 REASON stop
2022-04-13 21:58:06.492591 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ns = input()\n\nl = s.find('A')\nr = s.rfind('Z')\n\nprint(r - l + 1)"
}
2022-04-13 21:58:06.492654 REASON stop
