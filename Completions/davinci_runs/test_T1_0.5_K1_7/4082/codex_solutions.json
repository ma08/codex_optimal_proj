["\n\nn = int(input())\na = list(map(int, input().split()))\n\nbest_len = 1\ncurrent_len = 1\n\nfor i in range(1, n):\n    if a[i] > a[i - 1]:\n        current_len += 1\n    else:\n        best_len = max(best_len, current_len)\n        current_len = 1\n\nbest_len = max(best_len, current_len)\n\nbest_len_without_removed = best_len\n\nfor i in range(n):\n    if i == 0:\n        if a[i] < a[i + 1]:\n            best_len_without_removed = max(best_len_without_removed, current_len - 1)\n    elif i == n - 1:\n        if a[i - 1] < a[i]:\n            best_len_without_removed = max(best_len_without_removed, current_len - 1)\n    else:\n        if a[i - 1] < a[i + 1]:\n            best_len_without_removed = max(best_len_without_removed, current_len - 1)\nprint(best_len_without_removed)", "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# Approach 1: O(n) Time | O(1) Space\ndef longestIncreasingSubsequence(array):\n    if len(array) == 0:\n        return 0\n    maxLength = 1\n    currentLength = 1\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            currentLength += 1\n        else:\n            maxLength = max(maxLength, currentLength)\n            currentLength = 1\n    return max(maxLength, currentLength)\n\n# Approach 2: O(n^2) Time | O(n) Space\ndef longestIncreasingSubsequence(array):\n    lengths = [1 for x in array]\n    for i in range(1, len(array)):\n        for j in range(i):\n            if array[j] < array[i]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    return max(lengths)\n\n# Approach 3: O(n log n) Time | O(n) Space\ndef longestIncreasingSubsequence(array):\n    sequences = []\n    for i in range(len(array)):\n        newSequence = binarySearch(sequences, array[i])\n        if newSequence == len(sequences):\n            sequences.append([array[i]])\n        else:\n            sequences[newSequence] = [array[i]]\n    return len(sequences)\n\ndef binarySearch(array, target):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        potentialMatch = array[mid][0]\n        if target < potentialMatch:\n            high = mid - 1\n        elif target > potentialMatch:\n            low = mid + 1\n        else:\n            return mid\n    return low\n\nprint(longestIncreasingSubsequence(arr))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ncurr = 1\nmx = 1\nfor i in range(1, n):\n    if a[i] > a[i-1]:\n        curr += 1\n        mx = max(mx, curr)\n    else:\n        curr = 1\n\nprint(mx)", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef solve(n, a):\n    ans = 1\n    cur = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            cur += 1\n        else:\n            ans = max(ans, cur)\n            cur = 1\n    ans = max(ans, cur)\n    return ans\n\nprint(solve(n, a))", "\n\ndef get_max_increasing_subarray(input_list):\n    \"\"\"\n    Get the maximum length of the increasing subarray\n    :param input_list: list of integers\n    :return: maximum length of the increasing subarray\n    \"\"\"\n    max_length = 0\n    current_length = 1\n    previous_value = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > previous_value:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n        previous_value = input_list[i]\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n\nif __name__ == '__main__':\n    input_list = [int(x) for x in input().split()]\n    print(get_max_increasing_subarray(input_list))", "\n\ndef main(n, a):\n    max_len = 1\n    for i in range(n):\n        if i==0:\n            if a[i]<a[i+1]:\n                max_len = 2\n        elif i==n-1:\n            if a[i]>a[i-1]:\n                max_len = 2\n        else:\n            if a[i]>a[i-1] and a[i]<a[i+1]:\n                max_len = 3\n    print(max_len)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    main(n, a)", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        print(2)\n        return\n\n    if a[0] < a[1]:\n        curr = 2\n        best = 2\n    else:\n        curr = 1\n        best = 1\n    for i in range(1, n):\n        if a[i - 1] < a[i]:\n            curr += 1\n        else:\n            best = max(best, curr)\n            curr = 1\n    best = max(best, curr)\n\n    print(best)\n\nif __name__ == '__main__':\n    main()"]