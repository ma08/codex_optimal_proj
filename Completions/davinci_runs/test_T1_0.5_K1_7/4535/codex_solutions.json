["\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            if n % 2 == 1:\n                count += 1\n            n //= 2\n        return count\n\n\nclass Solution2:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n != 0:\n            count += n & 1\n            n = n >> 1\n        return count", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        mask = 1\n        for i in range(32):\n            if n & mask:\n                count += 1\n            mask <<= 1\n        return count", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        for _ in range(32):\n            count += n & 1\n            n >>= 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count", "\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n\n        for i in range(32):\n            res += n & 1\n            n >>= 1\n\n        return res\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n\n        while n:\n            res += n & 1\n            n >>= 1\n\n        return res\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n\n        while n:\n            res += 1\n            n &= (n - 1)\n\n        return res"]