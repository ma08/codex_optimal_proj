["\n\n# SOLUTION\n# The problem can be solved using a greedy approach.\n# Let's sort the skills in descending order.\n# Then, we can greedily construct the first team (with unique skills)\n# and then, greedily construct the second team (with the same skill)\n# The answer is the sum of the sizes of the two teams.\n# The problem can also be solved using a DP approach.\n# The idea is to use a DP state where we keep the current index,\n# the last skill used, and the number of times that skill has already been used.\n# The state transition is:\n# - If we are at the last skill, we can only use the last skill\n# - If we are not at the last skill, then we can either use the last skill or the current skill\n# The answer is the maximum value (size of the team) using the last skill.\n\n# Time complexity: O(n log n)\n# Space complexity: O(n)\n\ndef solve(n, skills):\n    # Sort the skills in descending order\n    skills.sort(reverse=True)\n\n    # Greedily construct the first team\n    team1 = []\n    last_skill = None\n    for skill in skills:\n        if skill != last_skill:\n            team1.append(skill)\n            last_skill = skill\n\n    # Greedily construct the second team\n    team2 = []\n    last_skill = None\n    for skill in skills:\n        if skill == last_skill:\n            team2.append(skill)\n        else:\n            last_skill = skill\n\n    # Return the sum of the sizes of the teams\n    return len(team1) + len(team2)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        skills = list(map(int, input().split()))\n        print(solve(n, skills))", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(a, n))\n\ndef solve(a, n):\n    a.sort()\n    i = 0\n    while i < n-1 and a[i] == a[i+1]:\n        i += 1\n    if i == n-1:\n        return 0\n    j = n-1\n    while j > 0 and a[j] == a[j-1]:\n        j -= 1\n    if j == 0:\n        return 0\n    if i == j:\n        return 1\n    return min(i+1, n-j)\n\nif __name__ == \"__main__\":\n    main()", "\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(0)\n    ans = 0\n    cur = 0\n    for j in range(n):\n        if a[j] != a[j+1]:\n            cur = 1\n        else:\n            cur += 1\n            ans = max(ans, cur)\n    print(ans)", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a = list(set(a))\n    n = len(a)\n    if n < 2:\n        return 0\n    a.sort()\n    if n == 2:\n        if a[0] == a[1]:\n            return 1\n        else:\n            return 0\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return 2\n        elif a[0] != a[1] and a[1] != a[2] and a[0] != a[2]:\n            return 1\n        else:\n            return 0\n    if a[0] == a[n-1]:\n        return n\n    if a[0] == a[1] and a[n-2] == a[n-1]:\n        return 2\n    if a[0] == a[1]:\n        return 1\n    if a[n-2] == a[n-1]:\n        return 1\n    return 0\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    c = {}\n    for i in a:\n        c[i] = c.get(i,0)+1\n    c = list(c.values())\n    print(max(min(c),len(c)-1))", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = {}\n        for j in range(n):\n            if a[j] not in d:\n                d[a[j]] = 1\n            else:\n                d[a[j]] += 1\n        max_key = max(d, key=d.get)\n        max_value = d[max_key]\n        d.pop(max_key)\n        max_value_2 = 0\n        for key, value in d.items():\n            if value > max_value_2:\n                max_value_2 = value\n        print(max_value + max_value_2)\nmain()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        num_students = int(input())\n        skills = [int(skill) for skill in input().split()]\n        first_team = set()\n        second_team = set()\n        for skill in skills:\n            if skill not in first_team:\n                first_team.add(skill)\n            else:\n                second_team.add(skill)\n        print(min(len(first_team), len(second_team)))\n\nif __name__ == \"__main__\":\n    main()"]