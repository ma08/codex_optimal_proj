["\n\nimport sys\nimport itertools\n\ndef get_difference(arr):\n    diff = []\n    for i in range(len(arr) - 1):\n        diff.append(abs(arr[i] - arr[i + 1]))\n    return diff\n\ndef get_k_acceptable_traversal(arr):\n    n = len(arr)\n    m = len(arr[0])\n    diff = [0] * (n * m)\n    for i in range(n):\n        diff[i] = arr[i][0]\n    k = 0\n    for idx in range(1, m):\n        for i in range(n):\n            diff[idx * n + i] = arr[i][idx]\n        for i in range(n):\n            for j in range(i + 1, n):\n                k = max(k, abs(diff[idx * n + i] - diff[idx * n + j]))\n                k = max(k, abs(diff[(idx - 1) * n + i] - diff[idx * n + j]))\n    return k\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, sys.stdin.readline().split())))\n    print(get_k_acceptable_traversal(arr))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef solver(n, m, a):\n    for i in range(n):\n        a[i].sort()\n    b = [0] * m\n    for i in range(n):\n        for j in range(m):\n            b[j] += a[i][j]\n    b.sort()\n    ans, cur = 0, 0\n    for i in range(m-1):\n        cur += b[i]\n        ans = max(ans, abs(cur - (sum(b) - cur)))\n    return ans\n\nn, m = map(int, input().split())\na = [[int(x) for x in input().split()] for _ in range(n)]\nprint(solver(n, m, a))", "\n\nfrom collections import defaultdict\n\ndef get_max_acceptable_traversal(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    if n == 1:\n        return max(matrix[0]) - min(matrix[0])\n    if m == 1:\n        return max(matrix) - min(matrix)\n    col_max = defaultdict(int)\n    col_min = defaultdict(int)\n    for col in range(m):\n        col_max[col] = max(matrix[row][col] for row in range(n))\n        col_min[col] = min(matrix[row][col] for row in range(n))\n    max_diff = 0\n    for col in range(m):\n        max_diff = max(max_diff, col_max[col] - col_min[col])\n    return max_diff\n\n\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(get_max_acceptable_traversal(matrix))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\n# a = [[9, 9],\n#      [10, 8],\n#      [5, 3],\n#      [4, 3]]\n# n = 4\n# m = 2\n\n# a = [[1, 2, 3, 4],\n#      [10, 3, 7, 3]]\n# n = 2\n# m = 4\n\n# a = [[3],\n#      [6],\n#      [2],\n#      [5],\n#      [1],\n#      [4]]\n# n = 6\n# m = 1\n\n# a = [[3, 4],\n#      [6, 2],\n#      [2, 5],\n#      [5, 1],\n#      [1, 4],\n#      [4, 3]]\n# n = 6\n# m = 2\n\nb = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        b[i][j] = a[i][j]\n\n# print(a)\n# print(b)\n\nfor i in range(n):\n    for j in range(m - 1):\n        for k in range(j + 1, m):\n            if b[i][j] < b[i][k]:\n                b[i][j], b[i][k] = b[i][k], b[i][j]\n\n# print(b)\n\nc = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        c[i][j] = b[i][j]\n\n# print(c)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if c[i][0] < c[j][0]:\n            c[i], c[j] = c[j], c[i]\n\n# print(c)\n\nd = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        d[i][j] = c[i][j]\n\n# print(d)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if d[i][0] == d[j][0]:\n            for k in range(m - 1):\n                if d[i][k] < d[j][k]:\n                    d[i], d[j] = d[j], d[i]\n\n# print(d)\n\ne = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        e[i][j] = d[i][j]\n\n# print(e)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if e[i][0] == e[j][0]:\n            for k in range(m - 1):\n                if e[i][k] == e[j][k]:\n                    if e[i][k + 1] < e[j][k + 1]:\n                        e[i], e[j] = e[j], e[i]\n\n# print(e)\n\nf = [0] * n\nfor i in range(n):\n    f[i] = e[i][0]\n\n# print(f)\n\ng = [0] * n\nfor i in range(n):\n    g[i] = f[i]\n\n# print(g)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if g[i] < g[j]:\n            g[i], g[j] = g[j], g[i]\n\n# print(g)\n\nh = [0] * n\nfor i in range(n):\n    h[i] = g[i]\n\n# print(h)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if h[i] == h[j]:\n            if e[i][0] < e[j][0]:\n                h[i], h[j] = h[j], h[i]\n\n# print(h)\n\n# print(h)\n\nl = [0] * (n * m)\nfor i in range(n):\n    for j in range(m):\n        l[i * m + j] = h[i]\n\n# print(l)\n\nans = 0\nfor i in range(n * m - 1):\n    ans = max(ans, abs(l[i] - l[i + 1]))\n\nprint(ans)", "\n\nfrom itertools import permutations\n\ndef main():\n    n, m = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for perm in permutations(range(n)):\n        k = 0\n        for i in range(m):\n            for j in range(n):\n                k = max(k, abs(A[perm[j]][i] - A[perm[j - 1]][i]))\n        ans = max(ans, k)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\ndef is_acceptable(a, k):\n    for i in range(len(a)-1):\n        if abs(a[i] - a[i+1]) < k:\n            return False\n    return True\n\ndef get_max_k(a, n, m):\n    a_flat = [a[i][j] for i in range(n) for j in range(m)]\n    min_a = min(a_flat)\n    max_a = max(a_flat)\n    max_k = 0\n    for k in range(max_a-min_a, -1, -1):\n        if is_acceptable(a_flat, k):\n            max_k = k\n            break\n    return max_k\n\ndef main():\n    line = sys.stdin.readline().strip()\n    n, m = [int(s) for s in line.split()]\n    a = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        a_row = [int(s) for s in line.split()]\n        a.append(a_row)\n    print(get_max_k(a, n, m))\n\nif __name__ == \"__main__\":\n    main()"]