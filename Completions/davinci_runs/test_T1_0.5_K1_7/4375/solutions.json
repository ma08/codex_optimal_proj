["n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ng = {}\n\ndef dfs(v, p=-1):\n\tc = [dfs(child, v) for child in g.get(v, set()) - {p}]\n\tc.sort(key=len, reverse=True)\n\tr = []\n\ti = 0\n\twhile c:\n\t\tif i >= len(c[-1]):\n\t\t\tc.pop()\n\t\telse:\n\t\t\to = max(i, k - i - 1)\n\t\t\ts = q = 0\n\t\t\tfor x in c:\n\t\t\t\tif len(x) <= o:\n\t\t\t\t\tq = max(q, x[i])\n\t\t\t\telse:\n\t\t\t\t\ts += x[o]\n\t\t\t\t\tq = max(q, x[i] - x[o])\n\t\t\tr.append(q + s)\n\t\t\ti += 1\n\tr.append(0)\n\tfor i in range(len(r) - 1, 0, -1):\n\t\tr[i - 1] = max(r[i - 1], r[i])\n\twhile len(r) > 1 and r[-2] == 0:\n\t\tr.pop()\n\to = (r[k] if k < len(r) else 0) + a[v]\n\tr.insert(0, max(o, r[0]))\n\treturn r\n\n\nfor _ in range(1, n):\n\tu, v = [int(x) - 1 for x in input().split()]\n\tg.setdefault(u, set()).add(v)\n\tg.setdefault(v, set()).add(u)\n\nprint(dfs(0)[0])\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ng = {}\n \ndef dfs(v, p=-1):\n\tc = [dfs(child, v) for child in g.get(v, set()) - {p}]\n\tc.sort(key=len, reverse=True)\n\tr = []\n\ti = 0\n\twhile c:\n\t\tif i >= len(c[-1]):\n\t\t\tc.pop()\n\t\telse:\n\t\t\to = max(i, k - i - 1)\n\t\t\ts = q = 0\n\t\t\tfor x in c:\n\t\t\t\tif len(x) <= o:\n\t\t\t\t\tq = max(q, x[i])\n\t\t\t\telse:\n\t\t\t\t\ts += x[o]\n\t\t\t\t\tq = max(q, x[i] - x[o])\n\t\t\tr.append(q + s)\n\t\t\ti += 1\n\tr.append(0)\n\tfor i in range(len(r) - 1, 0, -1):\n\t\tr[i - 1] = max(r[i - 1], r[i])\n\twhile len(r) > 1 and r[-2] == 0:\n\t\tr.pop()\n\to = (r[k] if k < len(r) else 0) + a[v]\n\tr.insert(0, max(o, r[0]))\n\treturn r\n \n \nfor _ in range(1, n):\n\tu, v = map(lambda x: int(x) - 1, input().split())\n\tg.setdefault(u, set()).add(v)\n\tg.setdefault(v, set()).add(u)\n \nprint(dfs(0)[0])", "n, k = map(int, input().split())\n\na = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n\tv, u = map(int, input().split())\n\tv -= 1\n\tu -= 1\n\tg[v].append(u)\n\tg[u].append(v)\n\ndp = [[] for i in range(n)]\nd = [1 for i in range(n)]\n\ndef dfs(v, p = -1):\n\tdp[v].append(a[v])\n\tfor u in g[v]:\n\t\tif u == p:\n\t\t\tcontinue\n\t\tdfs(u, v)\n\t\ttmp = [-10**18 for i in range(max(d[v], d[u] + 1))]\n\t\tfor i in range(d[v]):\n\t\t\tfor j in range(max(0, k - i), d[u]):\n\t\t\t\ttmp[min(i, j + 1)] = max(tmp[min(i, j + 1)], dp[v][i] + dp[u][j])\n\t\tfor i in range(d[u]):\n\t\t\ttmp[i + 1] = max(tmp[i + 1], dp[u][i])\n\t\tfor i in range(d[v]):\n\t\t\tdp[v][i] = max(dp[v][i], tmp[i])\n\t\tdp[v] += tmp[d[v]:]\n\t\td[v] = max(d[v], d[u] + 1)\n\t\tfor i in range(d[v] - 1, 0, -1):\n\t\t\tdp[v][i - 1] = max(dp[v][i - 1], dp[v][i])\n\ndfs(0)\nprint(max(dp[0]))", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ng = {}\n \ndef dfs(v, p=-1):\n\tc = [dfs(child, v) for child in g.get(v, set()) - {p}]\n\tc.sort(key=len, reverse=True)\n\tr = []\n\ti = 0\n\twhile c:\n\t\tif i >= len(c[-1]):\n\t\t\tc.pop()\n\t\telse:\n\t\t\to = max(i, k - i - 1)\n\t\t\ts = q = 0\n\t\t\tfor x in c:\n\t\t\t\tif len(x) <= o:\n\t\t\t\t\tq = max(q, x[i])\n\t\t\t\telse:\n\t\t\t\t\ts += x[o]\n\t\t\t\t\tq = max(q, x[i] - x[o])\n\t\t\tr.append(q + s)\n\t\t\ti += 1\n\tr.append(0)\n\tfor i in range(len(r) - 1, 0, -1):\n\t\tr[i - 1] = max(r[i - 1], r[i])\n\twhile len(r) > 1 and r[-2] == 0:\n\t\tr.pop()\n\to = (r[k] if k < len(r) else 0) + a[v]\n\tr.insert(0, max(o, r[0]))\n\treturn r\n \n \nfor _ in range(1, n):\n\tu, v = map(lambda x: int(x) - 1, input().split())\n\tg.setdefault(u, set()).add(v)\n\tg.setdefault(v, set()).add(u)\n \nprint(dfs(0)[0])", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ng = {}\n\ndef dfs(v, p=-1):\n\tc = [dfs(child, v) for child in g.get(v, set()) - {p}]\n\tc.sort(key=len, reverse=True)\n\tr = []\n\ti = 0\n\twhile c:\n\t\tif i >= len(c[-1]):\n\t\t\tc.pop()\n\t\telse:\n\t\t\to = max(i, k - i - 1)\n\t\t\ts = q = 0\n\t\t\tfor x in c:\n\t\t\t\tif len(x) <= o:\n\t\t\t\t\tq = max(q, x[i])\n\t\t\t\telse:\n\t\t\t\t\ts += x[o]\n\t\t\t\t\tq = max(q, x[i] - x[o])\n\t\t\tr.append(q + s)\n\t\t\ti += 1\n\tr.append(0)\n\tfor i in range(len(r) - 1, 0, -1):\n\t\tr[i - 1] = max(r[i - 1], r[i])\n\twhile len(r) > 1 and r[-2] == 0:\n\t\tr.pop()\n\to = (r[k] if k < len(r) else 0) + a[v]\n\tr.insert(0, max(o, r[0]))\n\treturn r\n\n\nfor _ in range(1, n):\n\tu, v = [int(x) - 1 for x in input().split()]\n\tg.setdefault(u, set()).add(v)\n\tg.setdefault(v, set()).add(u)\n\nprint(dfs(0)[0])\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ng = {}\n\n\ndef dfs(v, p=-1):\n\tc = [dfs(child, v) for child in g.get(v, set()) - {p}]\n\tc.sort(key=len, reverse=True)\n\tr = []\n\ti = 0\n\twhile c:\n\t\tif i >= len(c[-1]):\n\t\t\tc.pop()\n\t\telse:\n\t\t\to = max(i, k - i - 1)\n\t\t\ts = q = 0\n\t\t\tfor x in c:\n\t\t\t\tif len(x) <= o:\n\t\t\t\t\tq = max(q, x[i])\n\t\t\t\telse:\n\t\t\t\t\ts += x[o]\n\t\t\t\t\tq = max(q, x[i] - x[o])\n\t\t\tr.append(q + s)\n\t\t\ti += 1\n\tr.append(0)\n\tfor i in range(len(r) - 1, 0, -1):\n\t\tr[i - 1] = max(r[i - 1], r[i])\n\twhile len(r) > 1 and r[-2] == 0:\n\t\tr.pop()\n\to = (r[k] if k < len(r) else 0) + a[v]\n\tr.insert(0, max(o, r[0]))\n\treturn r\n\n    \nfor _ in range(1, n):\n\tu, v = map(lambda x: int(x) - 1, input().split())\n\tg.setdefault(u, set()).add(v)\n\tg.setdefault(v, set()).add(u)\nprint(dfs(0)[0])"]