2022-04-13 22:52:50.735234 """
For a string of letters, define the Simplicity of the string to be the number of distinct letters in the string. For example, the string string has simplicity $6$, and the string letter has simplicity $4$.

You like strings which have simplicity either $1$ or $2$. Your friend has given you a string and you want to turn it into a string that you like. You have a magic eraser which will delete one letter from any string. Compute the minimum number of letters you must erase in order to turn the string into a string with simplicity at most $2$.

-----Input-----
Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a line with a single string consisting of at least $1$ and at most $100$ lowercase letters ‘a’-‘z’.

-----Output-----
Output a single integer, indicating the minimum number letters you need to erase in order to give the string a simplicity of $1$ or $2$.

-----Examples-----
Sample Input 1:
string
Sample Output 1:
4

Sample Input 2:
letter
Sample Output 2:
2

Sample Input 3:
aaaaaa
Sample Output 3:
0

Sample Input 4:
uncopyrightable
Sample Output 4:
13

Sample Input 5:
ambidextrously
Sample Output 5:
12

Sample Input 6:
assesses
Sample Output 6:
1
"""
2022-04-13 22:52:50.735244 --------------------------
2022-04-13 22:53:05.944347 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef solve(string):\n    if len(string) <= 2:\n        return 0\n    elif len(set(string)) <= 2:\n        return 0\n    else:\n        return len(string) - 2\n\nprint(solve(input()))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    string = input()\n    simplicities = {}\n    for letter in string:\n        if letter not in simplicities:\n            simplicities[letter] = 0\n        simplicities[letter] += 1\n    if len(simplicities) == 1 or len(simplicities) == 2:\n        print(0)\n    else:\n        print(len(string) - max(simplicities.values()) - (len(simplicities) - 2))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    # Get string\n    string = input()\n    # Get number of letters\n    num_letters = len(string)\n    # Get number of unique letters\n    num_unique = len(set(string))\n    # Get the number of letters needed to erase\n    num_erase = num_letters - min(2, num_unique)\n    # Print the number of letters needed to erase\n    print(num_erase)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    string = input()\n    if len(set(string)) == 1:\n        print(0)\n    elif len(set(string)) == 2:\n        print(1)\n    else:\n        print(len(string)-2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = input()\n\nif len(n) == 1:\n    print(0)\nelif len(n) == 2:\n    if n[0] == n[1]:\n        print(1)\n    else:\n        print(0)\nelse:\n    if n[0] == n[1]:\n        print(1)\n    elif n[0] == n[2] or n[1] == n[2]:\n        print(2)\n    else:\n        print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    # Parse the input\n    word = input()\n    # Count the number of unique letters\n    unique = set(word)\n    if len(unique) <= 2:\n        print(0)\n    else:\n        # Create a list of tuples of (letter, count)\n        lst = []\n        for letter in unique:\n            lst.append((letter, word.count(letter)))\n        lst.sort(key=lambda x: x[1])\n        # Remove the letter with the least amount of occurences\n        lst.pop(0)\n        # Sum the occurences of the remaining letters\n        total = 0\n        for letter, count in lst:\n            total += count\n        print(total)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    l = len(s)\n\n    if l == 1:\n        print(0)\n        return\n\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    if len(d) == 1:\n        print(0)\n    elif len(d) == 2:\n        print(l - max(d.values()))\n    else:\n        print(l - max(d.values()) - min(d.values()))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649890370,
  "id": "cmpl-4wg8wcsdpzu9pGA94rv6PUz2tFxnG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:53:05.944611 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef solve(string):\n    if len(string) <= 2:\n        return 0\n    elif len(set(string)) <= 2:\n        return 0\n    else:\n        return len(string) - 2\n\nprint(solve(input()))"
}
2022-04-13 22:53:05.944645 REASON stop
2022-04-13 22:53:05.944976 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.944992 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    string = input()\n    simplicities = {}\n    for letter in string:\n        if letter not in simplicities:\n            simplicities[letter] = 0\n        simplicities[letter] += 1\n    if len(simplicities) == 1 or len(simplicities) == 2:\n        print(0)\n    else:\n        print(len(string) - max(simplicities.values()) - (len(simplicities) - 2))\n\nmain()"
}
2022-04-13 22:53:05.945099 REASON stop
2022-04-13 22:53:05.945352 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.945399 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    # Get string\n    string = input()\n    # Get number of letters\n    num_letters = len(string)\n    # Get number of unique letters\n    num_unique = len(set(string))\n    # Get the number of letters needed to erase\n    num_erase = num_letters - min(2, num_unique)\n    # Print the number of letters needed to erase\n    print(num_erase)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:53:05.945451 REASON stop
2022-04-13 22:53:05.965891 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.965920 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    string = input()\n    if len(set(string)) == 1:\n        print(0)\n    elif len(set(string)) == 2:\n        print(1)\n    else:\n        print(len(string)-2)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:53:05.965985 REASON stop
2022-04-13 22:53:05.979911 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.979940 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = input()\n\nif len(n) == 1:\n    print(0)\nelif len(n) == 2:\n    if n[0] == n[1]:\n        print(1)\n    else:\n        print(0)\nelse:\n    if n[0] == n[1]:\n        print(1)\n    elif n[0] == n[2] or n[1] == n[2]:\n        print(2)\n    else:\n        print(0)"
}
2022-04-13 22:53:05.980015 REASON stop
2022-04-13 22:53:05.987900 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.987928 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    # Parse the input\n    word = input()\n    # Count the number of unique letters\n    unique = set(word)\n    if len(unique) <= 2:\n        print(0)\n    else:\n        # Create a list of tuples of (letter, count)\n        lst = []\n        for letter in unique:\n            lst.append((letter, word.count(letter)))\n        lst.sort(key=lambda x: x[1])\n        # Remove the letter with the least amount of occurences\n        lst.pop(0)\n        # Sum the occurences of the remaining letters\n        total = 0\n        for letter, count in lst:\n            total += count\n        print(total)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:53:05.988032 REASON stop
2022-04-13 22:53:05.988634 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
2022-04-13 22:53:05.988650 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    l = len(s)\n\n    if l == 1:\n        print(0)\n        return\n\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    if len(d) == 1:\n        print(0)\n    elif len(d) == 2:\n        print(l - max(d.values()))\n    else:\n        print(l - max(d.values()) - min(d.values()))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:53:05.988701 REASON stop
2022-04-13 22:53:05.989305 test/intro-questions.txt_dir/4725/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4725/solutions.json'
