["\n\ndef main():\n    s = input()\n    l = len(s)\n\n    if l == 1:\n        print(0)\n        return\n\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    if len(d) == 1:\n        print(0)\n    elif len(d) == 2:\n        print(l - max(d.values()))\n    else:\n        print(l - max(d.values()) - min(d.values()))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    # Get string\n    string = input()\n    # Get number of letters\n    num_letters = len(string)\n    # Get number of unique letters\n    num_unique = len(set(string))\n    # Get the number of letters needed to erase\n    num_erase = num_letters - min(2, num_unique)\n    # Print the number of letters needed to erase\n    print(num_erase)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    string = input()\n    simplicities = {}\n    for letter in string:\n        if letter not in simplicities:\n            simplicities[letter] = 0\n        simplicities[letter] += 1\n    if len(simplicities) == 1 or len(simplicities) == 2:\n        print(0)\n    else:\n        print(len(string) - max(simplicities.values()) - (len(simplicities) - 2))\n\nmain()", "\n\ndef main():\n    \"\"\"main\"\"\"\n    string = input()\n    if len(set(string)) == 1:\n        print(0)\n    elif len(set(string)) == 2:\n        print(1)\n    else:\n        print(len(string)-2)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    # Parse the input\n    word = input()\n    # Count the number of unique letters\n    unique = set(word)\n    if len(unique) <= 2:\n        print(0)\n    else:\n        # Create a list of tuples of (letter, count)\n        lst = []\n        for letter in unique:\n            lst.append((letter, word.count(letter)))\n        lst.sort(key=lambda x: x[1])\n        # Remove the letter with the least amount of occurences\n        lst.pop(0)\n        # Sum the occurences of the remaining letters\n        total = 0\n        for letter, count in lst:\n            total += count\n        print(total)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef solve(string):\n    if len(string) <= 2:\n        return 0\n    elif len(set(string)) <= 2:\n        return 0\n    else:\n        return len(string) - 2\n\nprint(solve(input()))", "\n\nn = input()\n\nif len(n) == 1:\n    print(0)\nelif len(n) == 2:\n    if n[0] == n[1]:\n        print(1)\n    else:\n        print(0)\nelse:\n    if n[0] == n[1]:\n        print(1)\n    elif n[0] == n[2] or n[1] == n[2]:\n        print(2)\n    else:\n        print(0)"]