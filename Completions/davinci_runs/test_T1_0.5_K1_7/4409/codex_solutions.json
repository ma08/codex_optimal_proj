["\n\nn = int(input())\nA = [int(x) for x in input().split()]\n\ndef find_min_ops(A):\n    n = len(A)\n    ops = []\n    for i in range(n-1):\n        if A[i] == A[i+1]:\n            continue\n        elif A[i] < A[i+1]:\n            A[i] += abs(A[i] - A[i+1])\n            ops.append((1, i+1, i+2))\n        else:\n            A[i] -= abs(A[i] - A[i+1])\n            ops.append((2, i+1, i+2))\n    return ops\n\nops = find_min_ops(A)\nprint(len(ops))\nfor op in ops:\n    print(*op)", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[:]\n    b.sort()\n    if a == b:\n        print(0)\n        return\n    m = min(a)\n    for i in range(n):\n        if a[i] > m:\n            a[i] = m\n    print(1)\n    print(1, 1, 2)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\ndef operation(a, t, i, j):\n    if t == 1:\n        a[i-1] += abs(a[i-1] - a[j-1])\n    else:\n        a[i-1] -= abs(a[i-1] - a[j-1])\n    return a\n\ndef print_operations(a):\n    n = len(a)\n    while not all(e == a[0] for e in a):\n        # find the first element that doesn't match the first element\n        i = 0\n        while i < n and a[i] == a[0]:\n            i += 1\n        # increment the element before it\n        a = operation(a, 1, i, i-1)\n        # print the operation\n        print(\"1 {} {}\".format(i, i-1))\n        # find the first element that doesn't match the first element\n        i = 0\n        while i < n and a[i] == a[0]:\n            i += 1\n        # decrement the element before it\n        a = operation(a, 2, i, i-1)\n        # print the operation\n        print(\"2 {} {}\".format(i, i-1))\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint_operations(a)", "\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ndef solve(a, n):\n    if len(set(a)) == 1:\n        return 0, []\n    else:\n        j = [i for i, x in enumerate(a) if x == max(a)][0]\n        if j == 0:\n            k = 1\n        elif j == n - 1:\n            k = n - 2\n        else:\n            k = j - 1 if abs(a[j] - a[j - 1]) < abs(a[j] - a[j + 1]) else j + 1\n        if a[j] > a[k]:\n            a[j] -= abs(a[j] - a[k])\n            t = 1\n        else:\n            a[j] += abs(a[j] - a[k])\n            t = 2\n        x, y = solve(a, n)\n        return x + 1, y + [(t, j + 1, k + 1)]\n\nx, y = solve(a, n)\nprint(x)\nfor t, i, j in y:\n    print(t, i, j)", "\n\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip()\n    line2 = sys.stdin.readline().strip()\n    n = int(line1)\n    a = list(map(int, line2.split()))\n    print(n)\n    print(a)\n\nif __name__ == '__main__':\n    main()", "\n\n# n = int(input())\n# a = [int(i) for i in input().split()]\n\nn = 5\na = [2, 4, 6, 6, 6]\n\ndef solve(n, a):\n    # find the median\n    a = sorted(a)\n    median = a[n // 2]\n    print(median)\n\n    # find the number of operations\n    k = 0\n    for i in range(n):\n        if a[i] < median:\n            k += median - a[i]\n        elif a[i] > median:\n            k += a[i] - median\n    print(k)\n\n    # find the operations\n    for i in range(n):\n        if a[i] < median:\n            print(\"1\", i, i+1)\n            a[i] += 1\n        elif a[i] > median:\n            print(\"2\", i, i+1)\n            a[i] -= 1\n\nsolve(n, a)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# a[i] = a[i-1] + a[i+1] - a[i]\n# a[i] = a[i-1] - a[i+1] + a[i]\n\na.insert(0, 0)\na.append(0)\n\noperations = []\n\nfor i in range(1, n+1):\n    if a[i-1] != a[i+1]:\n        if a[i-1] < a[i+1]:\n            operations.append((1, i, i+1))\n            a[i] = a[i-1] + a[i+1] - a[i]\n        else:\n            operations.append((2, i, i+1))\n            a[i] = a[i-1] - a[i+1] + a[i]\n\nprint(len(operations))\nfor op in operations:\n    print(*op)"]