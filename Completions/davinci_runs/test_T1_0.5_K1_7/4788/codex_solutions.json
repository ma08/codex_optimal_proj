["\n\nn1 = int(input())\nn2 = int(input())\n\nif n1 < n2:\n    if n2-n1 <= 180:\n        print(n2-n1)\n    else:\n        print(n1-n2)\nelse:\n    if n1-n2 <= 180:\n        print(n1-n2)\n    else:\n        print(n2-n1)", "\n\n#import sys\n\n#def minimumDistance(n1, n2):\n#    return (n2 - n1 + 180) % 360 - 180\n\n#n1 = int(sys.stdin.readline())\n#n2 = int(sys.stdin.readline())\n#print minimumDistance(n1, n2)\n\n#-----Alternate Method-----\ndef minimumDistance(n1, n2):\n    return min([(n2 - n1) % 360, (n1 - n2) % 360])\n\nn1 = int(input())\nn2 = int(input())\nprint(minimumDistance(n1, n2))", "\n\n# Workaround for input() in Python 2 and 3\ndef get_int():\n    try:\n        line = raw_input()\n    except NameError:\n        line = input()\n    return int(line)\n\nn1 = get_int()\nn2 = get_int()\n\nif abs(n2 - n1) <= 180:\n    print(n2 - n1)\nelse:\n    print(360 - abs(n2 - n1))", "\n\ndef main():\n    n1 = int(input())\n    n2 = int(input())\n    if abs(n1-n2) <= 180:\n        print(n2-n1)\n    else:\n        if n1 > n2:\n            print(360-n1+n2)\n        else:\n            print(360-n2+n1)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn1 = int(input())\nn2 = int(input())\n\nif abs(n1 - n2) > 180:\n    print(min(abs(n1 - n2) - 360, abs(n2 - n1) - 360))\nelse:\n    print(min(abs(n1 - n2), abs(n2 - n1)))", "\n\nimport sys\nimport math\n\n#Read input\nn1 = int(input())\nn2 = int(input())\n\n#Find the shortest distance\ndist = n2 - n1\nif dist > 180:\n    dist -= 360\nelif dist < -180:\n    dist += 360\n\n#Print output\nprint(dist)", "\n\ndef minimumDistance(current, correct):\n    if current == correct:\n        return 0\n    elif current == correct + 180:\n        return 180\n    elif current == correct - 180:\n        return -180\n    elif (current < correct and current + 180 >= correct) or (current > correct and current - 180 <= correct):\n        return correct - current\n    else:\n        return (correct - current) - 360\n\ndef main():\n    print(minimumDistance(int(input()), int(input())))\n\nif __name__ == \"__main__\":\n    main()"]