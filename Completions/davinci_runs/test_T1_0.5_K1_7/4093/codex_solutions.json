["\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    else:\n        print(m - 1)", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(m)\n        elif m == n:\n            print((n-1)*n)\n        else:\n            print(2*m - n)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if m % n == 0:\n        print((n-1) * m//n)\n    else:\n        print(((n-1) * m//n) + (m % n))", "\n\n# SOLUTION\n# For a given sum, we can maximize the absolute difference by making\n# the array as uneven as possible.\n# For example, for sum=10, we can have [5,5] or [1,9], or [2,8], etc.\n# But the most uneven is [1,9], so that's the best we can do.\n# So, we can just iterate from 1 to sum/2 and find the max.\n# (The reason we can't go to sum is that we can't use the number sum\n# in the array, since it would mean the difference is 0.)\n# For example, for sum=10, we can use [1,9], but not [10,0].\n\n# We can do this in O(sqrt(sum)) time, since we only need to go up to\n# sum/2, and we can use the fact that if i+j=sum, then i*j=sum^2/4.\n# So, we can iterate over the possible values of i*j, and the value\n# of i will be sqrt(sum^2/4-j). We can do this using the floor function.\n\n# CODE\n\n# For each test case, print the answer.\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    # Iterate over the possible values of i*j,\n    # where i+j=sum, and i*j=sum^2/4.\n    max_diff = 0\n    for j in range(1, m // 2 + 1):\n        # Calculate the value of i, and add the difference.\n        i = m * m // (4 * j)\n        max_diff = max(max_diff, i + j - m)\n    print(max_diff)", "\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    if n==1:\n        print(0)\n    elif n==2:\n        print(m)\n    else:\n        if m%2==0:\n            print(m)\n        else:\n            print(m-1)", "\n\ndef max_sum_of_abs_diff(n, m):\n    if n == 1:\n        return 0\n    if m == 0:\n        return n - 1\n    if m < n:\n        return max_sum_of_abs_diff(n - 1, m) + n - 1\n    if m > n * (n - 1) / 2:\n        return max_sum_of_abs_diff(n - 1, m - n) + n - 1\n    if m > n * (n - 1) / 4:\n        return m - n * (n - 1) / 4\n    if m >= n:\n        return n - m\n    return n - 2 * m\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(max_sum_of_abs_diff(n, m))", "\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        if m % 2 == 0:\n            print(m)\n        else:\n            print(m - 1)"]