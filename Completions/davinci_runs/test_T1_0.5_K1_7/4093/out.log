2022-04-13 18:13:58.980513 """
You are given two integers $n$ and $m$. You have to construct the array $a$ of length $n$ consisting of non-negative integers (i.e. integers greater than or equal to zero) such that the sum of elements of this array is exactly $m$ and the value $\sum\limits_{i=1}^{n-1} |a_i - a_{i+1}|$ is the maximum possible. Recall that $|x|$ is the absolute value of $x$.

In other words, you have to maximize the sum of absolute differences between adjacent (consecutive) elements. For example, if the array $a=[1, 3, 2, 5, 5, 0]$ then the value above for this array is $|1-3| + |3-2| + |2-5| + |5-5| + |5-0| = 2 + 1 + 3 + 0 + 5 = 11$. Note that this example doesn't show the optimal answer but it shows how the required value for some array is calculated.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases. Then $t$ test cases follow.

The only line of the test case contains two integers $n$ and $m$ ($1 \le n, m \le 10^9$) — the length of the array and its sum correspondingly.


-----Output-----

For each test case, print the answer — the maximum possible value of $\sum\limits_{i=1}^{n-1} |a_i - a_{i+1}|$ for the array $a$ consisting of $n$ non-negative integers with the sum $m$.


-----Example-----
Input
5
1 100
2 2
5 5
2 1000000000
1000000000 1000000000

Output
0
2
10
1000000000
2000000000



-----Note-----

In the first test case of the example, the only possible array is $[100]$ and the answer is obviously $0$.

In the second test case of the example, one of the possible arrays is $[2, 0]$ and the answer is $|2-0| = 2$.

In the third test case of the example, one of the possible arrays is $[0, 2, 0, 3, 0]$ and the answer is $|0-2| + |2-0| + |0-3| + |3-0| = 10$.
"""
2022-04-13 18:13:58.980528 --------------------------
2022-04-13 18:14:24.585855 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if m % n == 0:\n        print((n-1) * m//n)\n    else:\n        print(((n-1) * m//n) + (m % n))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        if m % 2 == 0:\n            print(m)\n        else:\n            print(m - 1)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# For a given sum, we can maximize the absolute difference by making\n# the array as uneven as possible.\n# For example, for sum=10, we can have [5,5] or [1,9], or [2,8], etc.\n# But the most uneven is [1,9], so that's the best we can do.\n# So, we can just iterate from 1 to sum/2 and find the max.\n# (The reason we can't go to sum is that we can't use the number sum\n# in the array, since it would mean the difference is 0.)\n# For example, for sum=10, we can use [1,9], but not [10,0].\n\n# We can do this in O(sqrt(sum)) time, since we only need to go up to\n# sum/2, and we can use the fact that if i+j=sum, then i*j=sum^2/4.\n# So, we can iterate over the possible values of i*j, and the value\n# of i will be sqrt(sum^2/4-j). We can do this using the floor function.\n\n# CODE\n\n# For each test case, print the answer.\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    # Iterate over the possible values of i*j,\n    # where i+j=sum, and i*j=sum^2/4.\n    max_diff = 0\n    for j in range(1, m // 2 + 1):\n        # Calculate the value of i, and add the difference.\n        i = m * m // (4 * j)\n        max_diff = max(max_diff, i + j - m)\n    print(max_diff)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef max_sum_of_abs_diff(n, m):\n    if n == 1:\n        return 0\n    if m == 0:\n        return n - 1\n    if m < n:\n        return max_sum_of_abs_diff(n - 1, m) + n - 1\n    if m > n * (n - 1) / 2:\n        return max_sum_of_abs_diff(n - 1, m - n) + n - 1\n    if m > n * (n - 1) / 4:\n        return m - n * (n - 1) / 4\n    if m >= n:\n        return n - m\n    return n - 2 * m\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(max_sum_of_abs_diff(n, m))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(m)\n        elif m == n:\n            print((n-1)*n)\n        else:\n            print(2*m - n)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    if n==1:\n        print(0)\n    elif n==2:\n        print(m)\n    else:\n        if m%2==0:\n            print(m)\n        else:\n            print(m-1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    else:\n        print(m - 1)"
    }
  ],
  "created": 1649873639,
  "id": "cmpl-4wbn5WujaKWpuY9hzEzwOELlJ3C4m",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:14:24.586152 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if m % n == 0:\n        print((n-1) * m//n)\n    else:\n        print(((n-1) * m//n) + (m % n))"
}
2022-04-13 18:14:24.586190 REASON stop
2022-04-13 18:14:24.586641 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        if m % 2 == 0:\n            print(m)\n        else:\n            print(m - 1)"
}
2022-04-13 18:14:24.586758 REASON stop
2022-04-13 18:14:24.587121 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# For a given sum, we can maximize the absolute difference by making\n# the array as uneven as possible.\n# For example, for sum=10, we can have [5,5] or [1,9], or [2,8], etc.\n# But the most uneven is [1,9], so that's the best we can do.\n# So, we can just iterate from 1 to sum/2 and find the max.\n# (The reason we can't go to sum is that we can't use the number sum\n# in the array, since it would mean the difference is 0.)\n# For example, for sum=10, we can use [1,9], but not [10,0].\n\n# We can do this in O(sqrt(sum)) time, since we only need to go up to\n# sum/2, and we can use the fact that if i+j=sum, then i*j=sum^2/4.\n# So, we can iterate over the possible values of i*j, and the value\n# of i will be sqrt(sum^2/4-j). We can do this using the floor function.\n\n# CODE\n\n# For each test case, print the answer.\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    # Iterate over the possible values of i*j,\n    # where i+j=sum, and i*j=sum^2/4.\n    max_diff = 0\n    for j in range(1, m // 2 + 1):\n        # Calculate the value of i, and add the difference.\n        i = m * m // (4 * j)\n        max_diff = max(max_diff, i + j - m)\n    print(max_diff)"
}
2022-04-13 18:14:24.587170 REASON stop
2022-04-13 18:14:24.606533 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef max_sum_of_abs_diff(n, m):\n    if n == 1:\n        return 0\n    if m == 0:\n        return n - 1\n    if m < n:\n        return max_sum_of_abs_diff(n - 1, m) + n - 1\n    if m > n * (n - 1) / 2:\n        return max_sum_of_abs_diff(n - 1, m - n) + n - 1\n    if m > n * (n - 1) / 4:\n        return m - n * (n - 1) / 4\n    if m >= n:\n        return n - m\n    return n - 2 * m\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(max_sum_of_abs_diff(n, m))"
}
2022-04-13 18:14:24.606668 REASON stop
2022-04-13 18:14:24.634058 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(m)\n        elif m == n:\n            print((n-1)*n)\n        else:\n            print(2*m - n)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:14:24.634166 REASON stop
2022-04-13 18:14:24.634927 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    if n==1:\n        print(0)\n    elif n==2:\n        print(m)\n    else:\n        if m%2==0:\n            print(m)\n        else:\n            print(m-1)"
}
2022-04-13 18:14:24.634995 REASON stop
2022-04-13 18:14:24.636031 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n\n    if n == 1:\n        print(0)\n    else:\n        print(m - 1)"
}
2022-04-13 18:14:24.636101 REASON stop
