["n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))", "n, k = list(map(int, input().split()))\nprint((k*pow(k-1, n-1)))\n", "N,K = map(int,input().split())\nP = K\nfor i in range(N-1):\n  P *= K-1\nprint(P)", "N, K=map(int, input().split(\" \"))\n\nprint(K*(K-1)**(N-1))", "N, K = map(int, input().split())\n\nans = K * (K - 1)**(N - 1)\nprint(ans)", "N, K = map(int, input().split())\n\nres = 1\n\nfor i in range(N):\n    if i == 0:\n        res *= K\n    else:\n        res *= (K-1)\n\nprint(res)", "N,K=list(map(int,input().split()))\nans = K\nfor i in range(N-1):\n  ans *= (K-1)\nprint(ans)\n", "N, K = map(int,input().split())\nnum = K;\n\nif N != 1 :\n  for i in range(1,N):\n    num *= K-1\n\nprint(num)", "N, K = map(int, input().split())\nprint(K * pow(K-1,N-1))", "n, k = map(int, input().split())\n\nprint(k * ((k - 1) ** (n - 1)))", "N, K = map(int, input().split())\nprint(K * ((K - 1) ** (N - 1)))", "N,K=map(int,input().split())\nprint(K*((K-1)**(N-1)))", "n,k=list(map(int,input().split()))\n\nprint((k * (k-1)**(n-1)))\n", "n, k = map(int, input().split())\nans = k * pow(k-1, n-1)\nprint(ans)", "n, k = map(int, input().split())\nans = k\nfor _ in range(n-1):\n    ans *= k-1\nprint(ans)", "N,K = map(int, input().split())\npattern = K*(K-1)**(N-1)\nprint(pattern)", "n, k = map(int, input().split())\nans = k\nfor i in range(n-1):\n        ans = ans * (k -1)\n\nprint(ans)", "n,k = map(int,input().split())\nprint(k*((k-1)**(n-1)))", "n,k = map(int, input().split())\nprint(k*(k-1)**(n-1))", "N,K = map(int,input().split())\n\nans = K*(K-1)**(N-1)\nprint(ans)", "lst = input().split()\n\nN = int(lst[0])\nK = int(lst[1])\n\nprint(K * ((K-1) ** (N-1)))", "n,k=map(int,input().split())\nprint(k*((k-1)**(n-1)))", "n, k = map(int, input().split())\nprint(k*((k-1)**(n-1)))", "N,K = map(int,input().split())\n\ndef calculate(n, k):\n    print(k * pow(k-1,n-1))\n\ncalculate(N, K)", "n,k = map(int,input().split())\nprint(k*((k-1)**(n-1)))", "n, k = list(map(int, input().split()))\nprint((k * (k-1) ** (n-1)))\n", "n,k=map(int,input().split())\nif n==1:\n  print(k)\nelse:\n  print(k*(k-1)**(n-1))", "n, k = list(map(int, input().split()))\n\nans = 0\nans += k * (k - 1) ** (n - 1)\nprint(ans)\n", "a,b=input().split()\na=int(a)\nb=int(b)\nprint(b*(b-1)**(a-1))", "a = list(map(int ,input().split()))\nsum = 0\nfor i in range(a[0]):\n    if i == 0:\n        sum = a[1]\n    else:\n        sum *= a[1]-1\n\nprint(sum)", "N, K = map(int, input().split())\nx = K*(K-1)**(N-1)\nprint(x)", "N, K = map(int, input().split())\ntotal = K\nfor i in range(N-1):\n    total *= (K-1)\nprint(total)", "n,k = map(int,input().split())\nans = k\nfor i in range(n-1):\n  ans *= k-1\nprint(ans)", "n,k = map(int,input().split())\n\nprint(k*(k-1)**(n-1))", "N, K = map(int,input().split())\nprint(K * (K - 1)**(N - 1))", "n,k=map(int, input().split())\nprint(k*(k-1)**(n-1))", "N, K  = [int(x) for x in input().split()]\nans = (K-1)**(N-1)*K\nprint(ans)", "nk = input().split()\n\nn = int(nk[0])\nk = int(nk[1])\n\np = k * (k-1)**(n-1)\n\nprint(p)\n", "n, k = map(int, input().split())\n\nprint(k * (k - 1) ** (n - 1))", "N, K = map(int, input().split())\n\ncnt = K\nfor i in range(N - 1):\n    cnt *= (K - 1)\nprint(cnt)", "N, K = list(map(int, input().split()))\n\nprint((K * pow(K-1, N-1)))\n", "N, K = map(int,input().split())\n\nans = K * ((K-1)**(N-1))\nprint(ans)", "n, k = map(int, input().split())\nans = k\nfor i in range(n-1):\n    ans *= k-1\nprint(ans)", "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))", "n,k=list(map(int,input().split()))\nprint((k*((k-1)**(n-1))))\n", "n, k = list(map(int, input().split()))\n\nans = k * (k-1)**(n-1)\nprint(ans)\n", "n, k = map(int, input().split())\nprint(k * pow(k - 1, n - 1))", "a,b=map(int,input().split());print(b*(b-1)**(a-1))", "\ndef resolve():\n    n, k = list(map(int, input().split()))\n\n    print((k * (k-1) ** (n-1)))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N,K = map(int,input().split())\n\nprint(K * (K - 1) ** (N - 1))", "n,k = list(map(int,input().split()))\nprint((k*((k-1)**(n-1))))\n", "n,k = map(int,input().split())\nprint(k* ((k-1)**(n-1)))", "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))", "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))", "n, k = map(int, input().split())\n\nans = k * pow(k - 1, n-1)\n\nprint(ans)", "a,b=map(int,input().split())\nprint(b*(b-1)**(a-1))", "N, K = map(int, input().split())\nans = K * ((K-1) ** (N-1))\nprint(ans)", "N,K = list(map(int,input().split()))\nprint((K * (K-1)**(N-1)))\n", "n,k = map(int,input().split())\nprint(k*(k-1)**(n-1))", "N, K = list(map(int,input().split()))\nans = 1\n\nans = K * (K - 1) ** (N - 1)\n\nprint(ans)\n    \n", "N,K = map(int, input().split())\n\npr = K\nfor _ in range(1,N):\n  pr *= K-1\nprint(pr)", "n,k=list(map(int,input().split()))\nif(n!=1 and n!=1 ):\n    print((k*(k-1)**(n-1)))\nif(n == 1):\n    print(k)\n", "n,k=map(int,input().split())\na=k*(k-1)**(n-1)\nprint(a)", "n,k = list(map(int,input().split()))\nprint((k*((k-1)**(n-1))))\n", "n,k = map(int,input().split())\nif n == 1:\n    print(k)\n    return\nsu = k\nfor i in range(n-1):\n    su *= (k-1)\nprint(su)", "N, K = list(map(int, input().split()))\nprint((K * pow(K - 1, N - 1)))\n", "MOD = 10**11\n\ndef fast_pow(x, n, MOD):\n    res = 1\n    while n:\n        if n & 1:\n            res = res * x % MOD\n        x = x * x % MOD\n        n >>= 1\n    return res\n\n\nn, k = map(int,input().split())\nif n == 1:\n    print(k)\nelse:\n    print(k * fast_pow(k-1, n-1, MOD))", "n,k=list(map(int,input().split()))\nprint((k*(k-1)**(n-1)))\n", "a,b = map(int,input().split())\n\nprint((b-1)**(a-1)*b)", "N,K=map(int,input().split())\nprint(K*(K-1)**(N-1))", "N, K = map(int, input().split())\n\nprint(K*((K-1)**(N-1)))", "n,k = map(int,input().split())\nprint(k*((k-1)**(n-1)))", "\n# ABC046\nN, K = map(int, input().split())\nprint(K*(K-1)**(N-1))", "a,b = map(int,input().split())\nprint(b*(b-1)**(a-1))", "n, k = tuple([int(x) for x in input().split(\" \")])\n\nprint((k * pow(k - 1, n - 1)))\n", "N, K = list(map(int, input().split()))\nans = K\nfor i in range(N - 1):\n  ans *= K - 1\n  \nprint(ans)  \n\n\n", "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))", "str_line = input().split(\" \")\nnum = int(str_line[0])\nkind = int(str_line[1])\nans = kind \n\nfor i in range(num-1):\n    ans *=(kind - 1)\n    \nprint(ans)", "n,k = map(int,input().split())\nprint(k*(k-1)**(n-1))", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N, K = [int(x) for x in input().split()]\n\n    print((K * (K - 1) ** (N - 1)))\n\n    \n\ndef __starting_point():\n    main()\n\n\n\n__starting_point()", "n,k=map(int,input().split())\nm=1\nif n==1:\n    print(k)\nelse:\n    m *= k\n    for i in range(n-1):\n        m *= (k-1)\n    print(m)", "# -*- coding: utf-8 -*-\n\nN,K = map(int, input().split())\n\nans = K * ((K-1) ** (N-1)) \n\nprint(ans)", "n,k = [int(x) for x in input().split()]\nres = k\nfor i in range(1,n):\n  res *= k - 1\nprint(res)", "def si(): return input()\ndef ii(): return int(input())\ndef fi(): return float(input())\ndef lint(): return list(map(int, input().split()))\ndef lint_dec(): return list([int(x) - 1 for x in input().split()])\ndef lnstr(n): return [input() for _ in range(n)]\ndef lnint(n): return [int(input()) for _ in range(n)]\ndef graph_input(G, m):\n    for _ in range(m):\n        a, b = lint_dec()\n        G[a].append(b)\n        G[b].append(a)\n\n\n\n############################################################\nN, K = lint()\nprint((K * pow(K - 1, N - 1)))\n", "def answer(n: int, k: int) -> int:\n    return k * (k - 1) ** (n - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(answer(n, k))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N, K = map(int, input().split(' '))\n\nanswer = (K-1)**(N-1) * K\nprint(answer)", "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))", "n,k = map(int, input().split())\nans=k*((k-1)**(n-1))\nprint(ans)", "N, K = list(map(int, input().split()))\n\nprint((K * (K - 1) ** (N - 1)))\n", "n,k = list(map(int, input().split()))\np=k\nfor i in range(n-1):\n  p *= k-1\nprint(p)\n", "N, K = [int(x) for x in input().split()]\nprint(K*(K-1)**(N-1))", "N, K = map(int, input().split())\nprint(K * ((K - 1) **(N - 1)))", "n, k = list(map(int, input().split()))\nprint((k * pow((k-1), (n-1))))\n", "N,K = list(map(int,input().split()))\n\nprint((K*(K-1)**(N-1)))\n", "n,k=map(int,input().split())\nans = k*(k-1)**(n-1)\nprint(ans)", "N,K=map(int,input().split())\n\ns=K*(K-1)**(N-1)\n\nprint(int(s))", "N, K = map(int, input().split())\nprint(K*(K-1)**(N-1))", "N, K =map(int, input().split())\nprint(K*((K-1)**(N-1)))", "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))", "import re\nimport copy\n\ndef accept_input():\n    N,K = list(map(int,input().split()))\n    return N,K\n\nN,K = accept_input()\n\n\nif K == 1:\n    print(N)\nelse:\n    print((K*((K-1)**(N-1))))\n"]