["\n\ndef subsequences(s):\n    n = len(s)\n    dp = [[0] * 3 for _ in range(n)]\n    if s[0] == '?' or s[0] == 'a':\n        dp[0][0] = 1\n    if s[0] == '?' or s[0] == 'b':\n        dp[0][1] = dp[0][0]\n    if s[0] == '?' or s[0] == 'c':\n        dp[0][2] = dp[0][1]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0]\n        if s[i] == '?' or s[i] == 'a':\n            dp[i][0] += 1\n        dp[i][1] = dp[i - 1][1]\n        if s[i] == '?' or s[i] == 'b':\n            dp[i][1] += dp[i - 1][0]\n        dp[i][2] = dp[i - 1][2]\n        if s[i] == '?' or s[i] == 'c':\n            dp[i][2] += dp[i - 1][1]\n    return dp[-1][-1]\n\ndef main():\n    n = int(input())\n    s = list(input())\n    print(subsequences(s) % (10 ** 9 + 7))\n\nif __name__ == '__main__':\n    main()", "\n\n# n = int(input())\n# s = input()\n\n# dp = [[0] * 3 for _ in range(n)]\n\n# for i, c in enumerate(s):\n#     if c == '?':\n#         if i == 0:\n#             dp[i][0] = 1\n#             dp[i][1] = 1\n#             dp[i][2] = 1\n#         else:\n#             dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % (10 ** 9 + 7)\n#             dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % (10 ** 9 + 7)\n#             dp[i][2] = (dp[i - 1][1] + dp[i - 1][2]) % (10 ** 9 + 7)\n#     else:\n#         if i == 0:\n#             dp[i][ord(c) - ord('a')] = 1\n#         else:\n#             dp[i][ord(c) - ord('a')] = (dp[i - 1][ord(c) - ord('a')] + dp[i - 1][(ord(c) - ord('a') + 1) % 3]) % (10 ** 9 + 7)\n\n# print(dp[n - 1][2])\n\n\ndef main():\n    n = int(input())\n    s = input()\n\n    dp = [[0] * 3 for _ in range(n)]\n\n    for i, c in enumerate(s):\n        if c == '?':\n            if i == 0:\n                dp[i][0] = 1\n                dp[i][1] = 1\n                dp[i][2] = 1\n            else:\n                dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % (10 ** 9 + 7)\n                dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % (10 ** 9 + 7)\n                dp[i][2] = (dp[i - 1][1] + dp[i - 1][2]) % (10 ** 9 + 7)\n        else:\n            if i == 0:\n                dp[i][ord(c) - ord('a')] = 1\n            else:\n                dp[i][ord(c) - ord('a')] = (dp[i - 1][ord(c) - ord('a')] + dp[i - 1][(ord(c) - ord('a') + 1) % 3]) % (10 ** 9 + 7)\n\n    print(dp[n - 1][2])\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\ns = input()\n\n# We count the number of \"a\", \"b\" and \"c\" in s.\n# Then, for each question mark, we add the number of \"a\", \"b\" and \"c\" in s to the total number of \"abc\".\n# Because we can replace the question mark with any of the three letters, we add the number of \"a\", \"b\" and \"c\" in s.\n\nMOD = 10**9 + 7\n\na = s.count(\"a\")\nb = s.count(\"b\")\nc = s.count(\"c\")\n\nans = 0\n\nfor i in range(n):\n    if s[i] == \"?\":\n        ans += a + b + c\n        ans %= MOD\n    elif s[i] == \"a\":\n        a += 1\n    elif s[i] == \"b\":\n        b += 1\n    elif s[i] == \"c\":\n        c += 1\n\nprint(ans)", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()", "\n\n#-----Solution-----\n\n# The solution is based on the fact that we can split the string into groups of consecutive characters that are the same.\n# The number of subsequences \"abc\" in a group of one character is the number of characters in the group.\n# The number of subsequences \"abc\" in a group of two characters is the number of characters in the group plus the number of characters in the group minus one.\n# For a group of three characters, the number of subsequences \"abc\" is the number of characters in the group plus the number of characters in the group minus one plus the number of characters in the group minus two.\n# We can generalize this idea to any group of characters, and we can also generalize it to any subsequence.\n# For example, the number of subsequences \"abc\" in a group of four characters is the number of characters in the group plus the number of characters in the group minus one plus the number of characters in the group minus two plus the number of characters in the group minus three.\n# The number of subsequences \"abb\" in a group of four characters is the number of characters in the group plus the number of characters in the group minus one.\n# The number of subsequences \"ab\" in a group of four characters is the number of characters in the group.\n# The number of subsequences \"a\" in a group of four characters is the number of characters in the group.\n# We can generalize this idea to any subsequence.\n# This means that we can calculate the number of subsequences \"abc\" in a group of characters by multiplying the numbers of the subsequences \"a\", \"ab\", \"abb\" and \"abc\" in that group and adding the results.\n# We can calculate the numbers of the subsequences \"a\", \"ab\", \"abb\" and \"abc\" in a group of characters by multiplying the numbers of the subsequences \"a\", \"ab\", \"abb\" and \"abc\" in a single character by the number of characters in the group.\n# We can do this for all groups of characters, and then add the results.\n# This is the algorithm we will use.\n\n# The number of subsequences \"abc\" in a single character.\ndef single_subseq_abc(c):\n    # If the character is \"a\", the number of subsequences \"abc\" is 1.\n    if c == \"a\":\n        return 1\n\n    # If the character is \"b\", the number of subsequences \"abc\" is 0.\n    if c == \"b\":\n        return 0\n\n    # If the character is \"c\", the number of subsequences \"abc\" is 0.\n    if c == \"c\":\n        return 0\n\n    # If the character is \"?\", the number of subsequences \"abc\" is 3.\n    if c == \"?\":\n        return 3\n\n# The number of subsequences \"ab\" in a single character.\ndef single_subseq_ab(c):\n    # If the character is \"a\", the number of subsequences \"ab\" is 1.\n    if c == \"a\":\n        return 1\n\n    # If the character is \"b\", the number of subsequences \"ab\" is 1.\n    if c == \"b\":\n        return 1\n\n    # If the character is \"c\", the number of subsequences \"ab\" is 0.\n    if c == \"c\":\n        return 0\n\n    # If the character is \"?\", the number of subsequences \"ab\" is 3.\n    if c == \"?\":\n        return 3\n\n# The number of subsequences \"a\" in a single character.\ndef single_subseq_a(c):\n    # If the character is \"a\", the number of subsequences \"a\" is 1.\n    if c == \"a\":\n        return 1\n\n    # If the character is \"b\", the number of subsequences \"a\" is 0.\n    if c == \"b\":\n        return 0\n\n    # If the character is \"c\", the number of subsequences \"a\" is 0.\n    if c == \"c\":\n        return 0\n\n    # If the character is \"?\", the number of subsequences \"a\" is 3.\n    if c == \"?\":\n        return 3\n\n# The number of subsequences \"abc\" in a group of characters.\ndef group_subseq_abc(group):\n    # The number of characters in the group.\n    n = len(group)\n\n    # The number of subsequences \"abc\" in the group.\n    subseq_abc = 0\n\n    # The number of subsequences \"a\" in the group.\n    subseq_a = single_subseq_a(group[0]) * n\n\n    # The number of subsequences \"ab\" in the group.\n    subseq_ab = single_subseq_ab(group[0]) * n\n\n    # The number of subsequences \"abb\" in the group.\n    subseq_abb = single_subseq_abc(group[0]) * n\n\n    # The number of subsequences \"abc\" in the group.\n    subseq_abc = single_subseq_abc(group[0]) * n\n\n    # Add the numbers of subsequences \"a\", \"ab\", \"abb\" and \"abc\" in the group.\n    subseq_abc += subseq_a\n    subseq_abc += subseq_ab\n    subseq_abc += subseq_abb\n    subseq_abc += subseq_abc\n\n    # Return the number of subsequences \"abc\" in the group.\n    return subseq_abc\n\n# The number of subsequences \"abc\" in the string.\ndef subseq_abc(s):\n    # The number of subsequences \"abc\" in the string.\n    subseq_abc = 0\n\n    # The current group of characters.\n    current_group = \"\"\n\n    # The current character.\n    current_char = \"\"\n\n    # Loop through the characters in the string.\n    for char in s:\n        # If the current character is the same as the current group, add the current character to the current group.\n        if char == current_char:\n            current_group += char\n        # Otherwise, add the current group to the number of subsequences \"abc\" in the string, and set the current group to the current character.\n        else:\n            subseq_abc += group_subseq_abc(current_group)\n            current_group = char\n            current_char = char\n\n    # Add the last group to the number of subsequences \"abc\" in the string.\n    subseq_abc += group_subseq_abc(current_group)\n\n    # Return the number of subsequences \"abc\" in the string.\n    return subseq_abc\n\n# The number of subsequences \"abc\" in the string modulo 10^9 + 7.\ndef subseq_abc_mod(s):\n    # The number of subsequences \"abc\" in the string modulo 10^9 + 7.\n    subseq_abc_mod = subseq_abc(s) % (10 ** 9 + 7)\n\n    # Return the number of subsequences \"abc\" in the string modulo 10^9 + 7.\n    return subseq_abc_mod\n\n# The number of subsequences \"abc\" in the string read from standard input.\ndef subseq_abc_stdin():\n    # Read the number of characters in the string.\n    n = int(input())\n\n    # Read the string.\n    s = input()\n\n    # Print the number of subsequences \"abc\" in the string modulo 10^9 + 7.\n    print(subseq_abc_mod(s))\n\n# The number of subsequences \"abc\" in the string read from standard input.\nsubseq_abc_stdin()", "\n\ndef main():\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n-2):\n        if s[i] == 'a' and s[i+1] == 'b' and s[i+2] == 'c':\n            count += 1\n    print(count)\n\nmain()"]