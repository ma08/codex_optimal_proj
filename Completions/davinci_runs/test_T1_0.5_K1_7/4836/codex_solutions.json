["\n\nn, c = map(int, input().split())\nweights = list(map(int, input().split()))\n\n# total = 0\n# count = 0\n# for w in weights:\n#     if total + w <= c:\n#         count += 1\n#         total += w\n#\n# print(count)\n\n# if we want to use a set, we have to use a list of tuples to preserve the order of the fruits\n\n# total = 0\n# count = 0\n# fruits = []\n# for w in weights:\n#     if total + w <= c:\n#         count += 1\n#         total += w\n#         fruits.append((w, count))\n#     else:\n#         fruits.append((w, count))\n#\n# print(len(set(fruits)))\n\n# total = 0\n# count = 0\n# fruits = []\n# for w in weights:\n#     if total + w <= c:\n#         count += 1\n#         total += w\n#         fruits.append((w, count))\n#     else:\n#         fruits.append((w, count))\n#\n# print(len(set(fruits)))\n\n# total = 0\n# count = 0\n# fruits = []\n# for w in weights:\n#     if total + w <= c:\n#         count += 1\n#         total += w\n#         fruits.append((w, count))\n#     else:\n#         fruits.append((w, count))\n#\n# print(len(set(fruits)))\n\ntotal = 0\ncount = 0\nfruits = []\nfor w in weights:\n    if total + w <= c:\n        count += 1\n        total += w\n        fruits.append((w, count))\n    else:\n        fruits.append((w, count))\n\nprint(len(set(fruits)))", "\n\nn, c = map(int, input().split())\nweights = list(map(int, input().split()))\n\n# greedy algorithm\n\nbag = set()\ncounter = 0\n\nfor weight in weights:\n    if weight <= c and weight not in bag:\n        bag.add(weight)\n        c -= weight\n        counter += 1\n\nprint(counter)", "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = map(int, sys.stdin.readline().split())\n    fruits = list(map(int, sys.stdin.readline().split()))\n\n    # used to store the different fruits that Mislav can eat\n    different_fruits = []\n    # used to store the weight of the fruits that Mislav ate\n    weight = 0\n\n    for f in fruits:\n        # if the weight of the current fruit is less than the remaining capacity\n        # and the current fruit is not already eaten, eat it\n        if f <= C - weight and f not in different_fruits:\n            different_fruits.append(f)\n            weight += f\n\n    print(len(different_fruits))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, c = map(int, input().split())\n    w = list(map(int, input().split()))\n    dp = [0] * (c+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(c, w[i]-1, -1):\n            dp[j] = max(dp[j], dp[j-w[i]] + 1)\n    print(dp[-1]-1)\n\nif __name__ == \"__main__\":\n    sys.exit(main())", "\n\ndef main():\n    n, c = map(int, input().split())\n    w = list(map(int, input().split()))\n    w.sort()\n    i = 0\n    total = 0\n    while i < n and total + w[i] <= c:\n        total += w[i]\n        i += 1\n    print(i)\n\nmain()", "\n\n#-----main-----\n\nN, C = map(int, input().split(\" \"))\n\nfruits = list(map(int, input().split(\" \")))\n\n#initialize an empty list to store the weight of fruits that Mislav can eat\neaten = []\n\n#iterate through each fruit and check if it can be eaten\nfor i in fruits:\n    if i <= C:\n        if i not in eaten:\n            eaten.append(i)\n        else:\n            continue\n    else:\n        continue\n\nprint(len(eaten))", "\n\n# Get input\nn, c = map(int, input().split())\nw = list(map(int, input().split()))\n\n# DP\ndp = [0] * (c + 1)\nfor i in range(n):\n    if w[i] <= c:\n        dp[w[i]] = 1\n\nfor i in range(1, c + 1):\n    if dp[i] == 0:\n        dp[i] = dp[i - 1]\n    else:\n        for j in range(1, i):\n            if w[i] != w[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n# Print answer\nprint(dp[c])"]