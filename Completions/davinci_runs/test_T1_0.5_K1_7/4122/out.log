2022-04-13 18:31:01.663895 """
A superhero fights with a monster. The battle consists of rounds, each of which lasts exactly $n$ minutes. After a round ends, the next round starts immediately. This is repeated over and over again.

Each round has the same scenario. It is described by a sequence of $n$ numbers: $d_1, d_2, \dots, d_n$ ($-10^6 \le d_i \le 10^6$). The $i$-th element means that monster's hp (hit points) changes by the value $d_i$ during the $i$-th minute of each round. Formally, if before the $i$-th minute of a round the monster's hp is $h$, then after the $i$-th minute it changes to $h := h + d_i$.

The monster's initial hp is $H$. It means that before the battle the monster has $H$ hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to $0$. Print -1 if the battle continues infinitely.


-----Input-----

The first line contains two integers $H$ and $n$ ($1 \le H \le 10^{12}$, $1 \le n \le 2\cdot10^5$). The second line contains the sequence of integers $d_1, d_2, \dots, d_n$ ($-10^6 \le d_i \le 10^6$), where $d_i$ is the value to change monster's hp in the $i$-th minute of a round.


-----Output-----

Print -1 if the superhero can't kill the monster and the battle will last infinitely. Otherwise, print the positive integer $k$ such that $k$ is the first minute after which the monster is dead.


-----Examples-----
Input
1000 6
-100 -200 -300 125 77 -4

Output
9

Input
1000000000000 5
-1 0 0 0 0

Output
4999999999996

Input
10 4
-3 -6 5 4

Output
-1
"""
2022-04-13 18:31:01.663903 --------------------------
2022-04-13 18:32:42.895638 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nH, n = map(int, sys.stdin.readline().split())\nd = list(map(int, sys.stdin.readline().split()))\n\nh = H\nfor i in range(n):\n    h += d[i]\n    if h <= 0:\n        break\nif h <= 0:\n    print(i+1)\nelse:\n    print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nH, n = map(int, input().split())\nd = [int(x) for x in input().split()]\n\nif H <= 0:\n    print(1)\n    exit()\n\nhp = H\nfor i in range(n):\n    hp += d[i]\n    if hp <= 0:\n        print(i + 1)\n        exit()\n\nprint(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nh, n = map(int, input().split())\nd = list(map(int, input().split()))\n\nif sum(d) >= 0:\n    print(-1)\nelse:\n    print(h // min(-x for x in d) + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef solve(H, n, d):\n    for i in range(n):\n        H += d[i]\n        if H <= 0:\n            return i + 1\n    return -1\n\n\ndef main():\n    H, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    print(solve(H, n, d))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Function to check if a number is a perfect square\ndef isSquare(x):\n    s = int(x ** 0.5)\n    return s*s == x\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares(a, b):\n    return int(b**0.5 - (a-1)**0.5)\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares2(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares3(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + 1\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares4(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + 1 if y*y == a-1 else x - y\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares5(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y if y*y == a-1 else x - y + 1\n\ndef countSquares6(a, b):\n    return int(b**0.5 - (a-1)**0.5) if (a-1)**0.5 == int((a-1)**0.5) else int(b**0.5 - (a-1)**0.5) + 1\n\ndef countSquares7(a, b):\n    return int(b**0.5 - (a-1)**0.5) if (a-1)**0.5 != int((a-1)**0.5) else int(b**0.5 - (a-1)**0.5) + 1\n\ndef countSquares8(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (1 if y*y == a-1 else 0)\n\ndef countSquares9(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (1 if y*y != a-1 else 0)\n\ndef countSquares10(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (0 if y*y == a-1 else 1)\n\ndef countSquares11(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (0 if y*y != a-1 else 1)\n\ndef countSquares12(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y == a-1 else 0) if y*y == a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares13(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y == a-1 else 0) if y*y != a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares14(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y != a-1 else 0) if y*y == a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares15(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y != a-1 else 0) if y*y != a-1 else (1 if y*y != a-1 else 0))\n\n# Driver code\n# print(countSquares(1, 9))\n# print(countSquares(2, 9))\n# print(countSquares(3, 9))\n# print(countSquares(4, 9))\n# print(countSquares(5, 9))\n# print(countSquares(6, 9))\n# print(countSquares(7, 9))\n# print(countSquares(8, 9))\n# print(countSquares(9, 9))\n# print(countSquares(10, 9))\n# print(countSquares(11, 9))\n# print(countSquares(12, 9))\n\nprint(countSquares(1, 9))\nprint(countSquares2(1, 9))\nprint(countSquares3(1, 9))\nprint(countSquares4(1, 9))\nprint(countSquares5(1, 9))\nprint(countSquares6(1, 9))\nprint(countSquares7(1, 9))\nprint(countSquares8(1, 9))\nprint(countSquares9(1, 9))\nprint(countSquares10(1, 9))\nprint(countSquares11(1, 9))\nprint(countSquares12(1, 9))\nprint(countSquares13(1, 9))\nprint(countSquares14(1, 9))\nprint(countSquares15(1, 9))\n\nprint(countSquares(2, 9))\nprint(countSquares2(2, 9))\nprint(countSquares3(2, 9))\nprint(countSquares4(2, 9))\nprint(countSquares5(2, 9))\nprint(countSquares6(2, 9))\nprint(countSquares7(2, 9))\nprint(countSquares8(2, 9))\nprint(countSquares9(2, 9))\nprint(countSquares10(2, 9))\nprint(countSquares11(2, 9))\nprint(countSquares12(2, 9))\nprint(countSquares13(2, 9))\nprint(countSquares14(2, 9))\nprint(countSquares15(2, 9))\n\nprint(countSquares(3, 9))\nprint(countSquares2(3, 9))\nprint(countSquares3(3, 9))\nprint(countSquares4(3, 9))\nprint(countSquares5(3, 9))\nprint(countSquares6(3, 9))\nprint(countSquares7(3, 9))\nprint(countSquares8(3, 9))\nprint(countSquares9(3, 9))\nprint(countSquares10(3, 9))\nprint(countSquares11(3, 9))\nprint(countSquares12(3, 9))\nprint(countSquares13(3, 9))\nprint(countSquares14(3, 9))\nprint(countSquares15(3, 9))\n\nprint(countSquares(4, 9))\nprint(countSquares2(4, 9))\nprint(countSquares3(4, 9))\nprint(countSquares4(4, 9))\nprint(countSquares5(4, 9))\nprint(countSquares6(4, 9))\nprint(countSquares7(4, 9))\nprint(countSquares8(4, 9))\nprint(countSquares9(4, 9))\nprint(countSquares10(4, 9))\nprint(countSquares11(4, 9))\nprint(countSquares12(4, 9))\nprint(countSquares13(4, 9))\nprint(countSquares14(4, 9))\nprint(countSquares15(4, 9))\n\nprint(countSquares(5, 9))\nprint(countSquares2(5, 9))\nprint(countSquares3(5, 9))\nprint(countSquares4(5, 9))\nprint(countSquares5(5, 9))\nprint(countSquares6(5, 9))\nprint(countSquares7(5, 9))\nprint(countSquares8(5, 9))\nprint(countSquares9(5, 9))\nprint(countSquares10(5, 9))\nprint(countSquares11(5, 9))\nprint(countSquares12(5, 9))\nprint(countSquares13(5, 9))\nprint(countSquares14(5, 9))\nprint(countSquares15(5, 9))\n\nprint(countSquares(6, 9))\nprint(countSquares2(6, 9))\nprint(countSquares3(6, 9))\nprint(countSquares4(6, 9))\nprint(countSquares5(6, 9))\nprint(countSquares6(6, 9))\nprint(countSquares7(6, 9))\nprint(countSquares8(6, 9))\nprint(countSquares9(6, 9))\nprint(countSquares10(6, 9))\nprint(countSquares11(6, 9))\nprint(countSquares12(6, 9))\nprint(countSquares13(6, 9))\nprint(countSquares14(6, 9))\nprint(countSquares15(6, 9))\n\nprint(countSquares(7, 9))\nprint(countSquares2(7, 9))\nprint(countSquares3(7, 9))\nprint(countSquares4(7, 9))\nprint(countSquares5(7, 9))\nprint(countSquares6(7, 9))\nprint(countSquares7(7, 9))\nprint(countSquares8(7, 9))\nprint(countSquares9(7, 9))\nprint(countSquares10(7, 9))\nprint(countSquares11(7, 9))\nprint(countSquares12(7, 9))\nprint(countSquares13(7, 9))\nprint(countSquares14(7, 9))\nprint(countSquares15(7, 9))\n\nprint(countSquares(8, 9))\nprint(countSquares2(8, 9))\nprint(countSquares3(8, 9))\nprint(countSquares4(8, 9))\nprint(countSquares5(8, 9))\nprint(countSquares6(8, 9))\nprint(countSquares7(8, 9))\nprint(countSquares8(8, 9))\nprint(countSquares9(8, 9))\nprint(countSquares10(8, 9))\nprint(countSquares11(8, 9))\nprint(countSquares12(8, 9))\nprint(countSquares13(8, 9))\nprint(countSquares14(8, 9))\nprint(countSquares15(8, 9))\n\nprint(countSquares(9, 9))\nprint(countSquares2(9, 9))\nprint(countSquares3(9, 9))\nprint(countSquares4(9, 9))\nprint(countSquares5(9, 9))\nprint(countSquares6(9, 9))\nprint(countSquares7(9, 9))\nprint(countSquares8(9, 9))\nprint(countSquares9(9, 9))\nprint(countSquares10(9, 9))\nprint(countSquares11(9, 9))\nprint(countSquares12(9, 9))\nprint(countSquares13(9, 9))\nprint(countSquares14(9, 9))\nprint(countSquares15(9, 9))\n\nprint(countSquares(10, 9))\nprint(countSquares2(10, 9))\nprint(countSquares3(10, 9))\nprint(countSquares4(10, 9))\nprint(countSquares5(10, 9))\nprint(countSquares6(10, 9))\nprint(countSquares7(10, 9))\nprint(countSquares8(10, 9))\nprint(countSquares9(10, 9))\nprint(countSquares10(10, 9))\nprint(countSquares11(10, 9))\nprint(countSquares12(10, 9))\nprint(countSquares13(10, 9))\nprint(countSquares14(10, 9))\nprint(countSquares15(10, 9))\n\nprint(countSquares(11, 9))\nprint(countSquares2(11, 9))\nprint(countSquares3(11, 9))\nprint(countSquares4(11, 9))\nprint(countSquares5(11, 9))\nprint(countSquares6(11, 9))\nprint(countSquares7(11, 9))\nprint(countSquares8(11, 9))\nprint(countSquares9(11, 9))\nprint(countSquares10(11, 9))\nprint(countSquares11(11, 9))\nprint(countSquares12(11, 9))\nprint(countSquares13(11, 9))\nprint(countSquares14(11, 9))\nprint(countSquares15(11, 9))\n\nprint(countSquares(12, 9))\nprint(countSquares2(12, 9))\nprint(countSquares3(12, 9))\nprint(countSquares4(12, 9))\nprint(countSquares5(12, 9))\nprint(countSquares6(12, 9))\nprint(countSquares7(12, 9))\nprint(countSquares8(12, 9))\nprint(countSquares9(12, 9))\nprint(countSquares10(12, 9))\nprint(countSquares11(12, 9))\nprint(countSquares12(12, 9))\nprint(countSquares13(12, 9))\nprint(countSquares14(12, 9))\nprint(countSquares15(12, 9))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    H, n = map(int, sys.stdin.readline().split())\n    d = list(map(int, sys.stdin.readline().split()))\n\n    if H <= 0:\n        print(1)\n        return\n\n    h = H\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            print(i + 1)\n            return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\ndef main():\n    h, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        h -= d[i]\n        ans += 1\n        if h <= 0:\n            break\n    print(-1 if h > 0 else ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649874661,
  "id": "cmpl-4wc3Z2wOPrsIGK3ospeKfp7e5s5ot",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:32:42.896024 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nH, n = map(int, sys.stdin.readline().split())\nd = list(map(int, sys.stdin.readline().split()))\n\nh = H\nfor i in range(n):\n    h += d[i]\n    if h <= 0:\n        break\nif h <= 0:\n    print(i+1)\nelse:\n    print(-1)"
}
2022-04-13 18:32:42.896060 REASON stop
2022-04-13 18:32:42.896458 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nH, n = map(int, input().split())\nd = [int(x) for x in input().split()]\n\nif H <= 0:\n    print(1)\n    exit()\n\nhp = H\nfor i in range(n):\n    hp += d[i]\n    if hp <= 0:\n        print(i + 1)\n        exit()\n\nprint(-1)"
}
2022-04-13 18:32:42.896568 REASON stop
2022-04-13 18:32:42.896918 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nh, n = map(int, input().split())\nd = list(map(int, input().split()))\n\nif sum(d) >= 0:\n    print(-1)\nelse:\n    print(h // min(-x for x in d) + 1)"
}
2022-04-13 18:32:42.896961 REASON stop
2022-04-13 18:32:42.918857 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef solve(H, n, d):\n    for i in range(n):\n        H += d[i]\n        if H <= 0:\n            return i + 1\n    return -1\n\n\ndef main():\n    H, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    print(solve(H, n, d))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:32:42.918947 REASON stop
2022-04-13 18:32:42.937436 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Function to check if a number is a perfect square\ndef isSquare(x):\n    s = int(x ** 0.5)\n    return s*s == x\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares(a, b):\n    return int(b**0.5 - (a-1)**0.5)\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares2(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares3(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + 1\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares4(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + 1 if y*y == a-1 else x - y\n\n# Function to calculate the number of perfect squares in a range\ndef countSquares5(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y if y*y == a-1 else x - y + 1\n\ndef countSquares6(a, b):\n    return int(b**0.5 - (a-1)**0.5) if (a-1)**0.5 == int((a-1)**0.5) else int(b**0.5 - (a-1)**0.5) + 1\n\ndef countSquares7(a, b):\n    return int(b**0.5 - (a-1)**0.5) if (a-1)**0.5 != int((a-1)**0.5) else int(b**0.5 - (a-1)**0.5) + 1\n\ndef countSquares8(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (1 if y*y == a-1 else 0)\n\ndef countSquares9(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (1 if y*y != a-1 else 0)\n\ndef countSquares10(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (0 if y*y == a-1 else 1)\n\ndef countSquares11(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + (0 if y*y != a-1 else 1)\n\ndef countSquares12(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y == a-1 else 0) if y*y == a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares13(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y == a-1 else 0) if y*y != a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares14(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y != a-1 else 0) if y*y == a-1 else (1 if y*y != a-1 else 0))\n\ndef countSquares15(a, b):\n    x = int(b**0.5)\n    y = int((a-1)**0.5)\n    return x - y + ((1 if y*y != a-1 else 0) if y*y != a-1 else (1 if y*y != a-1 else 0))\n\n# Driver code\n# print(countSquares(1, 9))\n# print(countSquares(2, 9))\n# print(countSquares(3, 9))\n# print(countSquares(4, 9))\n# print(countSquares(5, 9))\n# print(countSquares(6, 9))\n# print(countSquares(7, 9))\n# print(countSquares(8, 9))\n# print(countSquares(9, 9))\n# print(countSquares(10, 9))\n# print(countSquares(11, 9))\n# print(countSquares(12, 9))\n\nprint(countSquares(1, 9))\nprint(countSquares2(1, 9))\nprint(countSquares3(1, 9))\nprint(countSquares4(1, 9))\nprint(countSquares5(1, 9))\nprint(countSquares6(1, 9))\nprint(countSquares7(1, 9))\nprint(countSquares8(1, 9))\nprint(countSquares9(1, 9))\nprint(countSquares10(1, 9))\nprint(countSquares11(1, 9))\nprint(countSquares12(1, 9))\nprint(countSquares13(1, 9))\nprint(countSquares14(1, 9))\nprint(countSquares15(1, 9))\n\nprint(countSquares(2, 9))\nprint(countSquares2(2, 9))\nprint(countSquares3(2, 9))\nprint(countSquares4(2, 9))\nprint(countSquares5(2, 9))\nprint(countSquares6(2, 9))\nprint(countSquares7(2, 9))\nprint(countSquares8(2, 9))\nprint(countSquares9(2, 9))\nprint(countSquares10(2, 9))\nprint(countSquares11(2, 9))\nprint(countSquares12(2, 9))\nprint(countSquares13(2, 9))\nprint(countSquares14(2, 9))\nprint(countSquares15(2, 9))\n\nprint(countSquares(3, 9))\nprint(countSquares2(3, 9))\nprint(countSquares3(3, 9))\nprint(countSquares4(3, 9))\nprint(countSquares5(3, 9))\nprint(countSquares6(3, 9))\nprint(countSquares7(3, 9))\nprint(countSquares8(3, 9))\nprint(countSquares9(3, 9))\nprint(countSquares10(3, 9))\nprint(countSquares11(3, 9))\nprint(countSquares12(3, 9))\nprint(countSquares13(3, 9))\nprint(countSquares14(3, 9))\nprint(countSquares15(3, 9))\n\nprint(countSquares(4, 9))\nprint(countSquares2(4, 9))\nprint(countSquares3(4, 9))\nprint(countSquares4(4, 9))\nprint(countSquares5(4, 9))\nprint(countSquares6(4, 9))\nprint(countSquares7(4, 9))\nprint(countSquares8(4, 9))\nprint(countSquares9(4, 9))\nprint(countSquares10(4, 9))\nprint(countSquares11(4, 9))\nprint(countSquares12(4, 9))\nprint(countSquares13(4, 9))\nprint(countSquares14(4, 9))\nprint(countSquares15(4, 9))\n\nprint(countSquares(5, 9))\nprint(countSquares2(5, 9))\nprint(countSquares3(5, 9))\nprint(countSquares4(5, 9))\nprint(countSquares5(5, 9))\nprint(countSquares6(5, 9))\nprint(countSquares7(5, 9))\nprint(countSquares8(5, 9))\nprint(countSquares9(5, 9))\nprint(countSquares10(5, 9))\nprint(countSquares11(5, 9))\nprint(countSquares12(5, 9))\nprint(countSquares13(5, 9))\nprint(countSquares14(5, 9))\nprint(countSquares15(5, 9))\n\nprint(countSquares(6, 9))\nprint(countSquares2(6, 9))\nprint(countSquares3(6, 9))\nprint(countSquares4(6, 9))\nprint(countSquares5(6, 9))\nprint(countSquares6(6, 9))\nprint(countSquares7(6, 9))\nprint(countSquares8(6, 9))\nprint(countSquares9(6, 9))\nprint(countSquares10(6, 9))\nprint(countSquares11(6, 9))\nprint(countSquares12(6, 9))\nprint(countSquares13(6, 9))\nprint(countSquares14(6, 9))\nprint(countSquares15(6, 9))\n\nprint(countSquares(7, 9))\nprint(countSquares2(7, 9))\nprint(countSquares3(7, 9))\nprint(countSquares4(7, 9))\nprint(countSquares5(7, 9))\nprint(countSquares6(7, 9))\nprint(countSquares7(7, 9))\nprint(countSquares8(7, 9))\nprint(countSquares9(7, 9))\nprint(countSquares10(7, 9))\nprint(countSquares11(7, 9))\nprint(countSquares12(7, 9))\nprint(countSquares13(7, 9))\nprint(countSquares14(7, 9))\nprint(countSquares15(7, 9))\n\nprint(countSquares(8, 9))\nprint(countSquares2(8, 9))\nprint(countSquares3(8, 9))\nprint(countSquares4(8, 9))\nprint(countSquares5(8, 9))\nprint(countSquares6(8, 9))\nprint(countSquares7(8, 9))\nprint(countSquares8(8, 9))\nprint(countSquares9(8, 9))\nprint(countSquares10(8, 9))\nprint(countSquares11(8, 9))\nprint(countSquares12(8, 9))\nprint(countSquares13(8, 9))\nprint(countSquares14(8, 9))\nprint(countSquares15(8, 9))\n\nprint(countSquares(9, 9))\nprint(countSquares2(9, 9))\nprint(countSquares3(9, 9))\nprint(countSquares4(9, 9))\nprint(countSquares5(9, 9))\nprint(countSquares6(9, 9))\nprint(countSquares7(9, 9))\nprint(countSquares8(9, 9))\nprint(countSquares9(9, 9))\nprint(countSquares10(9, 9))\nprint(countSquares11(9, 9))\nprint(countSquares12(9, 9))\nprint(countSquares13(9, 9))\nprint(countSquares14(9, 9))\nprint(countSquares15(9, 9))\n\nprint(countSquares(10, 9))\nprint(countSquares2(10, 9))\nprint(countSquares3(10, 9))\nprint(countSquares4(10, 9))\nprint(countSquares5(10, 9))\nprint(countSquares6(10, 9))\nprint(countSquares7(10, 9))\nprint(countSquares8(10, 9))\nprint(countSquares9(10, 9))\nprint(countSquares10(10, 9))\nprint(countSquares11(10, 9))\nprint(countSquares12(10, 9))\nprint(countSquares13(10, 9))\nprint(countSquares14(10, 9))\nprint(countSquares15(10, 9))\n\nprint(countSquares(11, 9))\nprint(countSquares2(11, 9))\nprint(countSquares3(11, 9))\nprint(countSquares4(11, 9))\nprint(countSquares5(11, 9))\nprint(countSquares6(11, 9))\nprint(countSquares7(11, 9))\nprint(countSquares8(11, 9))\nprint(countSquares9(11, 9))\nprint(countSquares10(11, 9))\nprint(countSquares11(11, 9))\nprint(countSquares12(11, 9))\nprint(countSquares13(11, 9))\nprint(countSquares14(11, 9))\nprint(countSquares15(11, 9))\n\nprint(countSquares(12, 9))\nprint(countSquares2(12, 9))\nprint(countSquares3(12, 9))\nprint(countSquares4(12, 9))\nprint(countSquares5(12, 9))\nprint(countSquares6(12, 9))\nprint(countSquares7(12, 9))\nprint(countSquares8(12, 9))\nprint(countSquares9(12, 9))\nprint(countSquares10(12, 9))\nprint(countSquares11(12, 9))\nprint(countSquares12(12, 9))\nprint(countSquares13(12, 9))\nprint(countSquares14(12, 9))\nprint(countSquares15(12, 9))"
}
2022-04-13 18:32:42.937592 REASON stop
2022-04-13 18:32:42.938361 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    H, n = map(int, sys.stdin.readline().split())\n    d = list(map(int, sys.stdin.readline().split()))\n\n    if H <= 0:\n        print(1)\n        return\n\n    h = H\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            print(i + 1)\n            return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:32:42.938427 REASON stop
2022-04-13 18:32:42.939699 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\ndef main():\n    h, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        h -= d[i]\n        ans += 1\n        if h <= 0:\n            break\n    print(-1 if h > 0 else ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:32:42.939757 REASON stop
