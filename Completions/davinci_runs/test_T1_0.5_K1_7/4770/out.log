2022-04-13 23:16:00.927458 """
Dr. Chaz is hosting a programming contest wrap up dinner. Dr. Chaz has severe OCD and is very strict on rules during dinner, specifically, he needs to be sure that everyone take exactly $1$ piece of chicken at his buffet, even if that will result in an enormous amount of leftovers. This is why every year before the dinner, Dr. Chaz would give a powerful speech: “Everyone, one chicken per person!”

However, Dr. Chaz does not always have an idea how many pieces of chicken he needs, he believes if there are $N$ people at the buffet and everyone takes exactly $1$ piece of chicken, providing $M$ pieces of chicken will be perfect, i.e., is enough and will have no leftovers. Help Dr. Chaz find out whether his decision is good or not!

-----Input-----
The first line contain integers $0\leq N\leq 1000$, $0\leq M\leq 1000$, $N\neq M$ , the number of people at the buffet and the number of pieces of chicken Dr. Chaz is providing.

-----Output-----
Output a single line of the form “Dr. Chaz will have $P$ piece[s] of chicken left over!”, if Dr. Chaz has enough chicken and $P$ pieces of chicken will be left over, or “Dr. Chaz needs $Q$ more piece[s] of chicken!” if Dr. Chaz does not have enough pieces of chicken and needs $Q$ more.

-----Examples-----
Sample Input 1:
20 100
Sample Output 1:
Dr. Chaz will have 80 pieces of chicken left over!

Sample Input 2:
2 3
Sample Output 2:
Dr. Chaz will have 1 piece of chicken left over!
"""
2022-04-13 23:16:00.927473 --------------------------
2022-04-13 23:16:14.098123 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#-----main-----\nn,m = map(int,input().split())\n\nif n == m:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(n-m))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(m-n))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs \" + str(n - m) + \" more piece[s] of chicken!\")\nelif n < m:\n    print(\"Dr. Chaz will have \" + str(m - n) + \" piece[s] of chicken left over!\")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs %d more piece[s] of chicken!\" % (n - m))\nelse:\n    print(\"Dr. Chaz will have %d piece[s] of chicken left over!\" % (m - n))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\n\nif N == M:\n    print('Dr. Chaz will have 0 piece of chicken left over!')\nelif N > M:\n    print(f'Dr. Chaz needs {N - M} more piece[s] of chicken!')\nelse:\n    print(f'Dr. Chaz will have {M - N} piece[s] of chicken left over!')"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\nif m < n:\n    print('Dr. Chaz needs ' + str(n - m) + ' more piece[s] of chicken!')\nelse:\n    print('Dr. Chaz will have ' + str(m - n) + ' piece[s] of chicken left over!')"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N-M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M-N))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, m = [int(x) for x in input().split()]\n\nif n < m:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(m - n))\nelse:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(n - m))"
    }
  ],
  "created": 1649891761,
  "id": "cmpl-4wgVNVytGSKCww0t2w8XDp0Sk7cnp",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:16:14.098416 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#-----main-----\nn,m = map(int,input().split())\n\nif n == m:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(n-m))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(m-n))"
}
2022-04-13 23:16:14.098457 REASON stop
2022-04-13 23:16:14.098785 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.098800 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs \" + str(n - m) + \" more piece[s] of chicken!\")\nelif n < m:\n    print(\"Dr. Chaz will have \" + str(m - n) + \" piece[s] of chicken left over!\")"
}
2022-04-13 23:16:14.098903 REASON stop
2022-04-13 23:16:14.099135 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.099146 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs %d more piece[s] of chicken!\" % (n - m))\nelse:\n    print(\"Dr. Chaz will have %d piece[s] of chicken left over!\" % (m - n))"
}
2022-04-13 23:16:14.099182 REASON stop
2022-04-13 23:16:14.100159 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.100175 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\n\nif N == M:\n    print('Dr. Chaz will have 0 piece of chicken left over!')\nelif N > M:\n    print(f'Dr. Chaz needs {N - M} more piece[s] of chicken!')\nelse:\n    print(f'Dr. Chaz will have {M - N} piece[s] of chicken left over!')"
}
2022-04-13 23:16:14.100222 REASON stop
2022-04-13 23:16:14.115230 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.115263 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\nif m < n:\n    print('Dr. Chaz needs ' + str(n - m) + ' more piece[s] of chicken!')\nelse:\n    print('Dr. Chaz will have ' + str(m - n) + ' piece[s] of chicken left over!')"
}
2022-04-13 23:16:14.115362 REASON stop
2022-04-13 23:16:14.116067 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.116085 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N-M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M-N))"
}
2022-04-13 23:16:14.116139 REASON stop
2022-04-13 23:16:14.130379 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
2022-04-13 23:16:14.130413 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, m = [int(x) for x in input().split()]\n\nif n < m:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(m - n))\nelse:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(n - m))"
}
2022-04-13 23:16:14.130486 REASON stop
2022-04-13 23:16:14.131082 test/intro-questions.txt_dir/4770/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4770/solutions.json'
