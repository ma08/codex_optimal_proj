2022-04-13 21:43:31.221151 """
There are N + 1 squares arranged in a row, numbered 0, 1, ..., N from left to right.
Initially, you are in Square X.
You can freely travel between adjacent squares. Your goal is to reach Square 0 or Square N.
However, for each i = 1, 2, ..., M, there is a toll gate in Square A_i, and traveling to Square A_i incurs a cost of 1.
It is guaranteed that there is no toll gate in Square 0, Square X and Square N.
Find the minimum cost incurred before reaching the goal.

-----Constraints-----
 - 1 \leq N \leq 100
 - 1 \leq M \leq 100
 - 1 \leq X \leq N - 1
 - 1 \leq A_1 < A_2 < ... < A_M \leq N
 - A_i \neq X
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M X
A_1 A_2 ... A_M

-----Output-----
Print the minimum cost incurred before reaching the goal.

-----Sample Input-----
5 3 3
1 2 4

-----Sample Output-----
1

The optimal solution is as follows:
 - First, travel from Square 3 to Square 4. Here, there is a toll gate in Square 4, so the cost of 1 is incurred.
 - Then, travel from Square 4 to Square 5. This time, no cost is incurred.
 - Now, we are in Square 5 and we have reached the goal.
In this case, the total cost incurred is 1.
"""
2022-04-13 21:43:31.221158 --------------------------
2022-04-13 21:43:56.210960 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn, m, x = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = x\nright = n - x\n\nif left > right:\n    left, right = right, left\n\nfor i in range(m):\n    if a[i] < x:\n        left -= 1\n    else:\n        right -= 1\n\nprint(left)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Python 2.7.6\n\nimport sys\n\ndef main():\n    N, M, X = [int(x) for x in sys.stdin.readline().split()]\n    A = [int(x) for x in sys.stdin.readline().split()]\n\n    # cost to reach 0 from X\n    cost_to_0 = 0\n    for i in range(X-1, -1, -1):\n        if i in A:\n            cost_to_0 += 1\n    # cost to reach N from X\n    cost_to_N = 0\n    for i in range(X+1, N+1):\n        if i in A:\n            cost_to_N += 1\n    # print the smaller cost\n    print min(cost_to_0, cost_to_N)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nN, M, X = map(int, input().split())\nA = list(map(int, input().split()))\n\n# \u73fe\u5728\u4f4d\u7f6e\u304b\u3089\u8d77\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u8d77\u70b9\u304b\u3089\u73fe\u5728\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndistance_from_start = [0] * (N + 1)\ndistance_from_goal = [0] * (N + 1)\nfor i in range(X):\n    distance_from_start[i + 1] = distance_from_start[i] + 1\n    distance_from_goal[N - i] = distance_from_goal[N - i + 1] + 1\n\n# \u969c\u5bb3\u7269\u304c\u3042\u308b\u5834\u5408\u3001\u8ddd\u96e2\u3092+1\u3059\u308b\nfor i in range(M):\n    distance_from_start[A[i]] += 1\n    distance_from_goal[A[i]] += 1\n\n# \u8d77\u70b9\u304b\u3089\u73fe\u5728\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u3068\u73fe\u5728\u4f4d\u7f6e\u304b\u3089\u8d77\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6bd4\u8f03\u3057\u3001\u77ed\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\nprint(min(distance_from_start[X], distance_from_goal[X]))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, m, x = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = 0\nfor i in range(x):\n    if i in a:\n        left += 1\nright = 0\nfor i in range(x, n):\n    if i in a:\n        right += 1\nprint(min(left, right))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# read lines from standard input\nN, M, X = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\n# calculate the minimum cost\ncost = 0\n\n# from X to N\nfor i in range(X, N):\n    if i in A:\n        cost += 1\n\n# from X to 0\nfor i in range(X, 0, -1):\n    if i in A:\n        cost += 1\n\nprint(cost)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN, M, X = map(int, input().split())\nA = list(map(int, input().split()))\n\ngate_count = [0] * N\n\nfor i in A:\n    gate_count[i] += 1\n\ncost_left = sum(gate_count[:X])\ncost_right = sum(gate_count[X:])\n\nprint(min(cost_left, cost_right))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\nN, M, X = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nif N == 1:\n    print(0)\nelse:\n    cost = 0\n    # X\u304b\u30890\u65b9\u5411\u3078\u79fb\u52d5\n    for i in range(X):\n        if i in A:\n            cost += 1\n    # X\u304b\u3089N\u65b9\u5411\u3078\u79fb\u52d5\n    for i in range(X, N):\n        if i in A:\n            cost += 1\n    print(cost)"
    }
  ],
  "created": 1649886211,
  "id": "cmpl-4wf3rcQsDeu2EyjxX0fRgIiIzzQVO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:43:56.211218 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn, m, x = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = x\nright = n - x\n\nif left > right:\n    left, right = right, left\n\nfor i in range(m):\n    if a[i] < x:\n        left -= 1\n    else:\n        right -= 1\n\nprint(left)"
}
2022-04-13 21:43:56.211256 REASON stop
2022-04-13 21:43:56.211684 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Python 2.7.6\n\nimport sys\n\ndef main():\n    N, M, X = [int(x) for x in sys.stdin.readline().split()]\n    A = [int(x) for x in sys.stdin.readline().split()]\n\n    # cost to reach 0 from X\n    cost_to_0 = 0\n    for i in range(X-1, -1, -1):\n        if i in A:\n            cost_to_0 += 1\n    # cost to reach N from X\n    cost_to_N = 0\n    for i in range(X+1, N+1):\n        if i in A:\n            cost_to_N += 1\n    # print the smaller cost\n    print min(cost_to_0, cost_to_N)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:43:56.211792 REASON stop
2022-04-13 21:43:56.212194 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nN, M, X = map(int, input().split())\nA = list(map(int, input().split()))\n\n# \u73fe\u5728\u4f4d\u7f6e\u304b\u3089\u8d77\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u8d77\u70b9\u304b\u3089\u73fe\u5728\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndistance_from_start = [0] * (N + 1)\ndistance_from_goal = [0] * (N + 1)\nfor i in range(X):\n    distance_from_start[i + 1] = distance_from_start[i] + 1\n    distance_from_goal[N - i] = distance_from_goal[N - i + 1] + 1\n\n# \u969c\u5bb3\u7269\u304c\u3042\u308b\u5834\u5408\u3001\u8ddd\u96e2\u3092+1\u3059\u308b\nfor i in range(M):\n    distance_from_start[A[i]] += 1\n    distance_from_goal[A[i]] += 1\n\n# \u8d77\u70b9\u304b\u3089\u73fe\u5728\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u3068\u73fe\u5728\u4f4d\u7f6e\u304b\u3089\u8d77\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6bd4\u8f03\u3057\u3001\u77ed\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\nprint(min(distance_from_start[X], distance_from_goal[X]))"
}
2022-04-13 21:43:56.212242 REASON stop
2022-04-13 21:43:56.226380 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, m, x = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = 0\nfor i in range(x):\n    if i in a:\n        left += 1\nright = 0\nfor i in range(x, n):\n    if i in a:\n        right += 1\nprint(min(left, right))"
}
2022-04-13 21:43:56.226456 REASON stop
2022-04-13 21:43:56.256194 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# read lines from standard input\nN, M, X = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\n# calculate the minimum cost\ncost = 0\n\n# from X to N\nfor i in range(X, N):\n    if i in A:\n        cost += 1\n\n# from X to 0\nfor i in range(X, 0, -1):\n    if i in A:\n        cost += 1\n\nprint(cost)"
}
2022-04-13 21:43:56.256349 REASON stop
2022-04-13 21:43:56.256971 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN, M, X = map(int, input().split())\nA = list(map(int, input().split()))\n\ngate_count = [0] * N\n\nfor i in A:\n    gate_count[i] += 1\n\ncost_left = sum(gate_count[:X])\ncost_right = sum(gate_count[X:])\n\nprint(min(cost_left, cost_right))"
}
2022-04-13 21:43:56.257040 REASON stop
2022-04-13 21:43:56.257868 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\nN, M, X = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nif N == 1:\n    print(0)\nelse:\n    cost = 0\n    # X\u304b\u30890\u65b9\u5411\u3078\u79fb\u52d5\n    for i in range(X):\n        if i in A:\n            cost += 1\n    # X\u304b\u3089N\u65b9\u5411\u3078\u79fb\u52d5\n    for i in range(X, N):\n        if i in A:\n            cost += 1\n    print(cost)"
}
2022-04-13 21:43:56.257927 REASON stop
