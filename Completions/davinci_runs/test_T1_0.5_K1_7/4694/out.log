2022-04-13 22:43:14.189212 """
It is only six months until Christmas, and AtCoDeer the reindeer is now planning his travel to deliver gifts.

There are N houses along TopCoDeer street. The i-th house is located at coordinate a_i. He has decided to deliver gifts to all these houses.

Find the minimum distance to be traveled when AtCoDeer can start and end his travel at any positions.  

-----Constraints-----
 - 1 ≤ N ≤ 100
 - 0 ≤ a_i ≤ 1000
 - a_i is an integer.

-----Input-----
Input is given from Standard Input in the following format:
N
a_1 a_2 ... a_N

-----Output-----
Print the minimum distance to be traveled.  

-----Sample Input-----
4
2 3 7 9

-----Sample Output-----
7

The travel distance of 7 can be achieved by starting at coordinate 9 and traveling straight to coordinate 2.

It is not possible to do with a travel distance of less than 7, and thus 7 is the minimum distance to be traveled.
"""
2022-04-13 22:43:14.189228 --------------------------
2022-04-13 22:43:28.620873 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    print(min(min(a[i + 1] - a[i] for i in range(len(a) - 1)), a[0] + 1000 - a[-1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n#print(n,a)\n\na = sorted(a)\n#print(a)\n\nL = []\nfor i in range(1,len(a)):\n    L.append(a[i]-a[i-1])\n#print(L)\n\nprint(sum(L)-max(L)//2)\n\n#print(a[-1]-a[0]-sum(L))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\"\"\"\nN = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmin_distance = float('inf')\nfor i in range(N-1):\n    min_distance = min(min_distance, abs(a[i+1] - a[i]))\n\nprint(min_distance)\n\"\"\"\n\n# \u5225\u89e3\n\nN = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmin_distance = float('inf')\nfor i in range(N-1):\n    min_distance = min(min_distance, abs(a[i+1] - a[i]))\n\nprint(min_distance)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na.sort()\n\nmin_dist = sys.maxsize\n\nfor i in range(n-1):\n    min_dist = min(min_dist, a[i+1] - a[i])\n\nprint(min_dist)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nhouses = [int(x) for x in input().split()]\nhouses.sort()\n\nmin_distance = houses[-1] - houses[0]\n\nfor i in range(1, n):\n    min_distance = min(min_distance, houses[i] - houses[i - 1])\n\nprint(min_distance)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    # Read input\n    N = int(input())\n    a = [int(i) for i in input().split()]\n    # Initialize min distance\n    min_dist = float('inf')\n    # Loop through coordinates\n    for i in range(N):\n        # Loop through coordinates\n        for j in range(N):\n            # If i and j are not the same\n            if i != j:\n                # Calculate distance\n                dist = abs(a[i] - a[j])\n                # If distance is less than current minimum\n                if dist < min_dist:\n                    # Set new minimum\n                    min_dist = dist\n    # Print minimum distance\n    print(min_dist)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, abs(a[i] - a[i-1]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649889794,
  "id": "cmpl-4wfzeH693ZgF7cl63dZSLeMbzy2wy",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:43:28.621141 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    print(min(min(a[i + 1] - a[i] for i in range(len(a) - 1)), a[0] + 1000 - a[-1]))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:43:28.621186 REASON stop
2022-04-13 22:43:28.621650 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n#print(n,a)\n\na = sorted(a)\n#print(a)\n\nL = []\nfor i in range(1,len(a)):\n    L.append(a[i]-a[i-1])\n#print(L)\n\nprint(sum(L)-max(L)//2)\n\n#print(a[-1]-a[0]-sum(L))"
}
2022-04-13 22:43:28.621765 REASON stop
2022-04-13 22:43:28.622122 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\"\"\"\nN = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmin_distance = float('inf')\nfor i in range(N-1):\n    min_distance = min(min_distance, abs(a[i+1] - a[i]))\n\nprint(min_distance)\n\"\"\"\n\n# \u5225\u89e3\n\nN = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmin_distance = float('inf')\nfor i in range(N-1):\n    min_distance = min(min_distance, abs(a[i+1] - a[i]))\n\nprint(min_distance)"
}
2022-04-13 22:43:28.622170 REASON stop
2022-04-13 22:43:28.629432 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na.sort()\n\nmin_dist = sys.maxsize\n\nfor i in range(n-1):\n    min_dist = min(min_dist, a[i+1] - a[i])\n\nprint(min_dist)"
}
2022-04-13 22:43:28.629527 REASON stop
2022-04-13 22:43:28.634607 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nhouses = [int(x) for x in input().split()]\nhouses.sort()\n\nmin_distance = houses[-1] - houses[0]\n\nfor i in range(1, n):\n    min_distance = min(min_distance, houses[i] - houses[i - 1])\n\nprint(min_distance)"
}
2022-04-13 22:43:28.634706 REASON stop
2022-04-13 22:43:28.654332 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    # Read input\n    N = int(input())\n    a = [int(i) for i in input().split()]\n    # Initialize min distance\n    min_dist = float('inf')\n    # Loop through coordinates\n    for i in range(N):\n        # Loop through coordinates\n        for j in range(N):\n            # If i and j are not the same\n            if i != j:\n                # Calculate distance\n                dist = abs(a[i] - a[j])\n                # If distance is less than current minimum\n                if dist < min_dist:\n                    # Set new minimum\n                    min_dist = dist\n    # Print minimum distance\n    print(min_dist)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:43:28.654435 REASON stop
2022-04-13 22:43:28.655119 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, abs(a[i] - a[i-1]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:43:28.655187 REASON stop
