2022-04-13 17:14:20.942922 """
You are given a matrix $a$ of size $n \times m$ consisting of integers.

You can choose no more than $\left\lfloor\frac{m}{2}\right\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.

Note that you can choose zero elements (and the sum of such set is $0$).


-----Input-----

The first line of the input contains three integers $n$, $m$ and $k$ ($1 \le n, m, k \le 70$) — the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \le a_{i, j} \le 70$).


-----Output-----

Print one integer — the maximum sum divisible by $k$ you can obtain.


-----Examples-----
Input
3 4 3
1 2 3 4
5 2 2 2
7 1 1 4

Output
24

Input
5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6

Output
56



-----Note-----

In the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.
"""
2022-04-13 17:14:20.942931 --------------------------
2022-04-13 17:14:44.973336 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        dp[i][j] = dp[i][j-1]\n        for l in range(1, min(j, int(m/2))+1):\n            dp[i][j] = max(dp[i][j], dp[i-1][j-l] + sum(a[i-1][j-l:j]))\n\nprint(dp[n][m] - dp[n][m-int(m/2)])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    dp = [[0 for i in range(k)] for j in range(m+1)]\n    for i in range(n):\n        for j in range(m+1):\n            for p in range(k):\n                if j < m:\n                    dp[j+1][(p+a[i][j])%k] = max(dp[j+1][(p+a[i][j])%k], dp[j][p])\n        for j in range(m//2+1, m+1):\n            dp[j][0] = max(dp[j][0], dp[j-1][0])\n    print(dp[m][0])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, m, k = map(int, input().split())\na = [[int(x) for x in input().split()] for _ in range(n)]\n\ndef solve(n, m, k, a):\n    dp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, min(m // 2 + 1, i + 1)):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i - 1][j][r], dp[i - 1][j - 1][(r - a[i - 1][0] + k) % k] + a[i - 1][0],\n                                  dp[i - 1][j - 1][(r - a[i - 1][m - 1] + k) % k] + a[i - 1][m - 1])\n                if m > 2:\n                    for l in range(1, m - 1):\n                        dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j - 1][(r - a[i - 1][l] + k) % k] + a[i - 1][l])\n    return dp[n][m // 2][0]\n\nprint(solve(n, m, k, a))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solve(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    dp = [[[0, 0] for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j == 1:\n                dp[i][j][0] = dp[i - 1][j][0]\n                dp[i][j][1] = dp[i - 1][j][1] + matrix[i - 1][j - 1]\n            else:\n                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + matrix[i - 1][j - 1])\n                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] + matrix[i - 1][j - 1])\n\n    return dp[n][m][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(solve(matrix, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, m, k, a):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m]\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split(\" \"))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, sys.stdin.readline().split(\" \"))))\n    print(solve(n, m, k, a))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, m, k, a):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < m - j + 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n    return dp[n][m]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    res = solve(n, m, k, a)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649870061,
  "id": "cmpl-4warNaAdmiG0ndJ9ODhKf4wv9xnqD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 17:14:44.973654 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        dp[i][j] = dp[i][j-1]\n        for l in range(1, min(j, int(m/2))+1):\n            dp[i][j] = max(dp[i][j], dp[i-1][j-l] + sum(a[i-1][j-l:j]))\n\nprint(dp[n][m] - dp[n][m-int(m/2)])"
}
2022-04-13 17:14:44.973692 REASON stop
2022-04-13 17:14:44.974146 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    dp = [[0 for i in range(k)] for j in range(m+1)]\n    for i in range(n):\n        for j in range(m+1):\n            for p in range(k):\n                if j < m:\n                    dp[j+1][(p+a[i][j])%k] = max(dp[j+1][(p+a[i][j])%k], dp[j][p])\n        for j in range(m//2+1, m+1):\n            dp[j][0] = max(dp[j][0], dp[j-1][0])\n    print(dp[m][0])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 17:14:44.974270 REASON stop
2022-04-13 17:14:44.974656 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": ""
}
2022-04-13 17:14:44.974703 REASON stop
2022-04-13 17:14:44.991896 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, m, k = map(int, input().split())\na = [[int(x) for x in input().split()] for _ in range(n)]\n\ndef solve(n, m, k, a):\n    dp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, min(m // 2 + 1, i + 1)):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i - 1][j][r], dp[i - 1][j - 1][(r - a[i - 1][0] + k) % k] + a[i - 1][0],\n                                  dp[i - 1][j - 1][(r - a[i - 1][m - 1] + k) % k] + a[i - 1][m - 1])\n                if m > 2:\n                    for l in range(1, m - 1):\n                        dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j - 1][(r - a[i - 1][l] + k) % k] + a[i - 1][l])\n    return dp[n][m // 2][0]\n\nprint(solve(n, m, k, a))"
}
2022-04-13 17:14:44.992004 REASON stop
2022-04-13 17:14:44.993787 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solve(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    dp = [[[0, 0] for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j == 1:\n                dp[i][j][0] = dp[i - 1][j][0]\n                dp[i][j][1] = dp[i - 1][j][1] + matrix[i - 1][j - 1]\n            else:\n                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + matrix[i - 1][j - 1])\n                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] + matrix[i - 1][j - 1])\n\n    return dp[n][m][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(solve(matrix, k))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:44.993868 REASON stop
2022-04-13 17:14:44.994862 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, m, k, a):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m]\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split(\" \"))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, sys.stdin.readline().split(\" \"))))\n    print(solve(n, m, k, a))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:44.994935 REASON stop
2022-04-13 17:14:44.995895 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, m, k, a):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < m - j + 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n    return dp[n][m]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    res = solve(n, m, k, a)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:44.995965 REASON stop
