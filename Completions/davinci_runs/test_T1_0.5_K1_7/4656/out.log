2022-04-13 22:30:36.587003 """
The store sells $n$ beads. The color of each bead is described by a lowercase letter of the English alphabet ("a"–"z"). You want to buy some beads to assemble a necklace from them.

A necklace is a set of beads connected in a circle.

For example, if the store sells beads "a", "b", "c", "a", "c", "c", then you can assemble the following necklaces (these are not all possible options): [Image] 

And the following necklaces cannot be assembled from beads sold in the store: [Image] The first necklace cannot be assembled because it has three beads "a" (of the two available). The second necklace cannot be assembled because it contains a bead "d", which is not sold in the store. 

We call a necklace $k$-beautiful if, when it is turned clockwise by $k$ beads, the necklace remains unchanged. For example, here is a sequence of three turns of a necklace.  [Image]  As you can see, this necklace is, for example, $3$-beautiful, $6$-beautiful, $9$-beautiful, and so on, but it is not $1$-beautiful or $2$-beautiful.

In particular, a necklace of length $1$ is $k$-beautiful for any integer $k$. A necklace that consists of beads of the same color is also beautiful for any $k$.

You are given the integers $n$ and $k$, and also the string $s$ containing $n$ lowercase letters of the English alphabet — each letter defines a bead in the store. You can buy any subset of beads and connect them in any order. Find the maximum length of a $k$-beautiful necklace you can assemble.


-----Input-----

The first line contains a single integer $t$ ($1 \le t \le 100$) — the number of test cases in the test. Then $t$ test cases follow.

The first line of each test case contains two integers $n$ and $k$ ($1 \le n, k \le 2000$).

The second line of each test case contains the string $s$ containing $n$ lowercase English letters — the beads in the store.

It is guaranteed that the sum of $n$ for all test cases does not exceed $2000$.


-----Output-----

Output $t$ answers to the test cases. Each answer is a positive integer — the maximum length of the $k$-beautiful necklace you can assemble.


-----Example-----
Input
6
6 3
abcbac
3 6
aaa
7 1000
abczgyo
5 4
ababa
20 10
aaebdbabdbbddaadaadc
20 5
ecbedececacbcbccbdec

Output
6
3
5
4
15
10



-----Note-----

The first test case is explained in the statement.

In the second test case, a $6$-beautiful necklace can be assembled from all the letters.

In the third test case, a $1000$-beautiful necklace can be assembled, for example, from beads "abzyo".
"""
2022-04-13 22:30:36.587017 --------------------------
2022-04-13 22:30:55.521151 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef is_beautiful(s, k):\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[(i+k)%n]:\n            return False\n    return True\n\ndef solve(s, k):\n    n = len(s)\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n    ans = 1\n    for i in range(1, n):\n        if is_beautiful(s[i:], k):\n            ans = max(ans, i + solve(s[:i], k))\n    return ans\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        print(solve(s, k))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#Solution:\n\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input()\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    print(max(d.values()))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, s):\n    #print(f\"{n}, {k}, {s}\")\n    if(n == 1):\n        return 1\n    if(k == 0):\n        return len(s)\n    if(n == len(s)):\n        return 1\n    if(n == 2):\n        return 2\n    if(s[0] == s[-1]):\n        return solve(n, k-1, s[1:-1]) + 2\n    return max(solve(n, k, s[1:]), solve(n, k, s[:-1]))\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    d = {}\n    for letter in s:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n\n    max_len = 0\n    for key, value in d.items():\n        if value >= k:\n            max_len = max(max_len, k)\n        else:\n            max_len = max(max_len, value)\n\n    print(max_len)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, s):\n    def is_k_beautiful(s):\n        for i in range(k):\n            if s[i] != s[i % k]:\n                return False\n        return True\n\n    longest = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_k_beautiful(s[i:j+1]):\n                longest = max(longest, j - i + 1)\n    return longest\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        print(solve(n, k, s))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\n# Solution\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nfrom sys import stdin\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\n\ndef solve(n,k,s):\n    freq = Counter(s)\n    ans = 0\n    for x in freq:\n        ans = max(ans,freq[x])\n    if k == 1:\n        return ans\n    for x in freq:\n        if freq[x] >= k:\n            return k\n    ans = 0\n    for x in freq:\n        ans = max(ans,freq[x] - (freq[x]%k))\n    return ans\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    s = input()\n    print(solve(n,k,s))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1649889036,
  "id": "cmpl-4wfnQQK4gbTxE98otR0uRvq1MKkJD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:30:55.521483 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef is_beautiful(s, k):\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[(i+k)%n]:\n            return False\n    return True\n\ndef solve(s, k):\n    n = len(s)\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n    ans = 1\n    for i in range(1, n):\n        if is_beautiful(s[i:], k):\n            ans = max(ans, i + solve(s[:i], k))\n    return ans\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        print(solve(s, k))"
}
2022-04-13 22:30:55.521523 REASON stop
2022-04-13 22:30:55.521923 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#Solution:\n\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input()\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    print(max(d.values()))"
}
2022-04-13 22:30:55.522031 REASON stop
2022-04-13 22:30:55.522377 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, s):\n    #print(f\"{n}, {k}, {s}\")\n    if(n == 1):\n        return 1\n    if(k == 0):\n        return len(s)\n    if(n == len(s)):\n        return 1\n    if(n == 2):\n        return 2\n    if(s[0] == s[-1]):\n        return solve(n, k-1, s[1:-1]) + 2\n    return max(solve(n, k, s[1:]), solve(n, k, s[:-1]))\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))"
}
2022-04-13 22:30:55.522423 REASON stop
2022-04-13 22:30:55.546551 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    d = {}\n    for letter in s:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n\n    max_len = 0\n    for key, value in d.items():\n        if value >= k:\n            max_len = max(max_len, k)\n        else:\n            max_len = max(max_len, value)\n\n    print(max_len)"
}
2022-04-13 22:30:55.546676 REASON stop
2022-04-13 22:30:55.554235 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, s):\n    def is_k_beautiful(s):\n        for i in range(k):\n            if s[i] != s[i % k]:\n                return False\n        return True\n\n    longest = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_k_beautiful(s[i:j+1]):\n                longest = max(longest, j - i + 1)\n    return longest\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        print(solve(n, k, s))"
}
2022-04-13 22:30:55.554343 REASON stop
2022-04-13 22:30:55.555067 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\n# Solution\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nfrom sys import stdin\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\n\ndef solve(n,k,s):\n    freq = Counter(s)\n    ans = 0\n    for x in freq:\n        ans = max(ans,freq[x])\n    if k == 1:\n        return ans\n    for x in freq:\n        if freq[x] >= k:\n            return k\n    ans = 0\n    for x in freq:\n        ans = max(ans,freq[x] - (freq[x]%k))\n    return ans\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    s = input()\n    print(solve(n,k,s))"
}
2022-04-13 22:30:55.555157 REASON stop
2022-04-13 22:30:55.555847 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-13 22:30:55.555897 REASON stop
