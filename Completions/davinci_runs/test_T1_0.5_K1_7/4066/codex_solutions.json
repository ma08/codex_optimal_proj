["\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    min_lcm = lcm(a[0], a[1])\n    min_lcm_index = (0, 1)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_lcm_index = (i, j)\n    print(min_lcm_index[0] + 1, min_lcm_index[1] + 1)\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    for i in range(n):\n        for j in range(i + 1, n):\n            l = lcm(a[i], a[j])\n            if l < min_lcm:\n                min_lcm = l\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\n\nmain()", "\nimport sys\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = sys.maxsize\n    ans = [0, 0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm(a[i], a[j]) < m:\n                m = lcm(a[i], a[j])\n                ans = [i+1, j+1]\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()", "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Suresh Saini\n# @Date:   2014-11-09 18:03:55\n# @Last Modified by:   Suresh Saini\n# @Last Modified time: 2014-11-09 18:03:55\n\n# def gcd(a,b):\n#     \"\"\"Compute the greatest common divisor of a and b\"\"\"\n#     while b > 0:\n#         a, b = b, a % b\n#     return a\n    \n# def lcm(a, b):\n#     \"\"\"Compute the lowest common multiple of a and b\"\"\"\n#     return a * b / gcd(a, b)\n\n# def lcm_min(arr):\n#     \"\"\"Compute the lowest common multiple of a and b\"\"\"\n#     min_lcm=float(\"inf\")\n#     for i in range(len(arr)):\n#         for j in range(i+1,len(arr)):\n#             lcm_v=lcm(arr[i],arr[j])\n#             if lcm_v < min_lcm:\n#                 min_lcm=lcm_v\n#                 min_i=i\n#                 min_j=j\n#     return min_i,min_j\n\ndef lcm_min(arr):\n    \"\"\"Compute the lowest common multiple of a and b\"\"\"\n    min_lcm=float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            lcm_v=(arr[i]*arr[j])/(gcd(arr[i],arr[j]))\n            if lcm_v < min_lcm:\n                min_lcm=lcm_v\n                min_i=i\n                min_j=j\n    return min_i,min_j\n\n\ndef gcd(a,b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    n=int(input())\n    arr=[int(x) for x in input().split()]\n    i,j=lcm_min(arr)\n    print(i+1,j+1)", "\n\nimport sys\n\n# lcm(a, b) = a * b / gcd(a, b)\n# gcd(a, b) = gcd(b, a%b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # set up the gcd table\n    gcd_table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        gcd_table[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_table[i][j] = gcd(gcd_table[i][j - 1], a[j])\n\n    # set up the lcm table\n    lcm_table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        lcm_table[i][i] = a[i]\n        for j in range(i + 1, n):\n            lcm_table[i][j] = lcm(lcm_table[i][j - 1], a[j])\n\n    # find the minimum lcm\n    min_lcm = lcm_table[0][1]\n    min_i = 0\n    min_j = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm_table[i][j] < min_lcm:\n                min_lcm = lcm_table[i][j]\n                min_i = i\n                min_j = j\n\n    print(min_i + 1, min_j + 1)\n\nmain()", "\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\ndef solve(a):\n    n = len(a)\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = gcd(pre[i], a[i])\n\n    suf = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        suf[i] = gcd(suf[i + 1], a[i])\n\n    ans = lcm(a[0], a[1])\n    i, j = 1, 2\n    for k in range(2, n):\n        if lcm(pre[k], suf[k]) < ans:\n            ans = lcm(pre[k], suf[k])\n            i, j = pre[k], suf[k]\n    return i, j\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    i, j = solve(a)\n    print(i, j)\n\nmain()", "\nimport math\n\ndef lcm(a, b):\n    return (a * b) // math.gcd(a, b)\n\n\ndef get_min_lcm(a):\n    min_lcm = float('inf')\n    min_i = min_j = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    return min_i, min_j\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*get_min_lcm(a))"]