["\n\ndef main():\n    H, N, M = map(int, input().split())\n    A = 0\n    B = 0\n    for k in range(1, H + 1):\n        A += (2 * k) * (2 * k) - (2 * k - 2) * (2 * k - 2)\n        B += 4 * (2 * k - 2)\n    A -= N\n    B -= M\n    if A < 0:\n        A = 0\n        B -= 4 * (2 * H - 2) - A\n    if B < 0:\n        B = 0\n        A -= (2 * H) * (2 * H) - (2 * H - 2) * (2 * H - 2) - 4 * (2 * H - 2)\n    print(A, B)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef solve(h, n, m):\n    a = 0\n    b = 0\n    if h == 1:\n        if n < 1:\n            a = 1\n            n = 1\n    elif h == 2:\n        if n < 4:\n            a = 4 - n\n            n = 4\n        if m < 2:\n            b = 2 - m\n            m = 2\n    elif h == 3:\n        if n < 9:\n            a = 9 - n\n            n = 9\n        if m < 4:\n            b = 4 - m\n            m = 4\n    elif h == 4:\n        if n < 16:\n            a = 16 - n\n            n = 16\n        if m < 7:\n            b = 7 - m\n            m = 7\n    return a, b\n\ndef main():\n    h, n, m = map(int, sys.stdin.readline().strip().split())\n    a, b = solve(h, n, m)\n    print(a, b)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# read input\nh, n, m = [int(x) for x in input().split()]\n\n# calculate number of bricks needed for each layer\nbricks_needed = []\nfor k in range(1,h+1):\n    bricks_needed.append(2*k)\n\n# calculate number of bricks available\nbricks_available = 2*n + 4*m\n\n# if number of bricks available is greater than or equal to number of bricks needed, no extra bricks are needed\nif bricks_available >= sum(bricks_needed):\n    print(0,0)\nelse:\n    # calculate number of bricks needed for each layer\n    bricks_needed = []\n    for k in range(1,h+1):\n        bricks_needed.append(2*k)\n\n    # calculate number of bricks available\n    bricks_available = 2*n + 4*m\n\n    # if number of bricks available is greater than or equal to number of bricks needed, no extra bricks are needed\n    if bricks_available >= sum(bricks_needed):\n        print(0,0)\n    else:\n        # find the maximum number of bricks that can be added to the first layer\n        bricks_to_add = int(bricks_available/2)\n        bricks_to_add += 2\n        bricks_to_add -= bricks_needed[0]\n        bricks_needed[0] += bricks_to_add\n\n        # calculate number of bricks needed to finish the rest of the pyramid\n        bricks_needed = bricks_needed[1:]\n\n        # if number of bricks available is greater than or equal to number of bricks needed, no extra bricks are needed\n        if bricks_available >= sum(bricks_needed):\n            print(0,0)\n        else:\n            # calculate number of extra bricks needed\n            bricks_needed = []\n            for k in range(1,h+1):\n                bricks_needed.append(2*k)\n            bricks_needed[0] += bricks_to_add\n            bricks_needed = bricks_needed[1:]\n            bricks_needed = sum(bricks_needed) - bricks_available\n            bricks_needed = bricks_needed/2\n\n            # calculate number of extra 2x2 bricks needed\n            bricks_2x2 = int(bricks_needed)\n\n            # calculate number of extra 4x2 bricks needed\n            bricks_4x2 = bricks_needed - bricks_2x2\n\n            # print output\n            print(bricks_2x2, bricks_4x2)", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    height = int(input[0])\n    n = int(input[1])\n    m = int(input[2])\n    width = 1\n    bricks = 0\n    for i in range(height):\n        width += 2\n        bricks += width\n    bricks -= height\n    bricks *= 2\n    bricks -= n * 4\n    bricks -= m * 8\n    if bricks < 0:\n        print(0, 0)\n    else:\n        bricks_2 = bricks % 4\n        bricks_4 = (bricks - bricks_2) // 4\n        print(bricks_2, bricks_4)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    h, n, m = map(int, sys.stdin.readline().strip().split())\n    # number of bricks in each layer\n    layer = [2*k for k in range(1, h+1)]\n    # number of bricks needed for each layer\n    layer_needed = [layer[k] - (n + 2*m)//4 for k in range(h)]\n    # number of bricks needed for all layers\n    num_needed = sum(layer_needed)\n    # number of bricks needed for each layer\n    num_needed_each_layer = [max(0, layer_needed[k]) for k in range(h)]\n    # number of 4x2 bricks needed for each layer\n    num_needed_each_layer_4x2 = [num_needed_each_layer[k]//2 for k in range(h)]\n    # number of 2x2 bricks needed for each layer\n    num_needed_each_layer_2x2 = [num_needed_each_layer[k] - 2*num_needed_each_layer_4x2[k] for k in range(h)]\n    # total number of 4x2 bricks needed\n    num_needed_4x2 = sum(num_needed_each_layer_4x2)\n    # total number of 2x2 bricks needed\n    num_needed_2x2 = sum(num_needed_each_layer_2x2)\n    print(num_needed_2x2, num_needed_4x2)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\nH, N, M = [int(x) for x in sys.stdin.readline().split()]\n\n# H = 1\n# N = 1\n# M = 0\n\n# H = 4\n# N = 2\n# M = 7\n\n# H = 3\n# N = 0\n# M = 0\n\n# H = 1000\n# N = 1000000\n# M = 1000000\n\n# H = 1000\n# N = 1000000\n# M = 0\n\n# H = 1000\n# N = 0\n# M = 1000000\n\n# H = 1000\n# N = 0\n# M = 0\n\n\ndef get_bricks(H, N, M):\n    # H = height of the pyramid\n    # N = number of bricks of size 2x2\n    # M = number of bricks of size 4x2\n\n    # if not enough bricks, print -1\n    if N < H or M < H:\n        print(\"-1\")\n        return\n\n    # if enough bricks, calculate how many bricks are needed\n    # we need to find the number of bricks of size 2x2 and 4x2\n    # that we need to add to the pyramid\n    # we need to find the number of bricks of size 2x2 and 4x2\n    # that we need to add to the pyramid\n    # we need to find the number of bricks of size 2x2 and 4x2\n    # that we need to add to the pyramid\n\n    # we start by calculating the number of bricks of size 2x2 and 4x2\n    # that we already have in the pyramid\n    bricks_2x2_in_pyramid = 0\n    bricks_4x2_in_pyramid = 0\n    for i in range(1, H + 1):\n        bricks_2x2_in_pyramid += i * i\n        bricks_4x2_in_pyramid += i * i * 2\n\n    # we calculate the number of bricks of size 2x2 and 4x2\n    # that we need to add to the pyramid\n    bricks_2x2_needed = (H * H) - bricks_2x2_in_pyramid\n    bricks_4x2_needed = (H * H * 2) - bricks_4x2_in_pyramid\n\n    # we calculate the number of bricks of size 2x2 and 4x2\n    # that we have left after the pyramid is complete\n    bricks_2x2_left = N - bricks_2x2_in_pyramid\n    bricks_4x2_left = M - bricks_4x2_in_pyramid\n\n    # we calculate the number of bricks of size 2x2 and 4x2\n    # that we have left after the pyramid is complete\n    # and we have used all the bricks of size 2x2\n    bricks_4x2_left_after_using_2x2 = bricks_4x2_left - bricks_2x2_needed\n\n    # if we have enough 2x2 bricks and 4x2 bricks, we use 2x2 bricks only\n    if bricks_2x2_needed <= N and bricks_4x2_needed <= M:\n        print(bricks_2x2_needed, 0)\n        return\n\n    # if we have enough 2x2 bricks and 4x2 bricks, we use 2x2 bricks only\n    # if we have enough 2x2 bricks and 4x2 bricks, we use 2x2 bricks only\n    # if we have enough 2x2 bricks and 4x2 bricks, we use 2x2 bricks only\n\n    # if we have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 2x2 bricks\n    if bricks_2x2_needed <= N and bricks_4x2_left_after_using_2x2 >= 0:\n        print(bricks_2x2_needed, 0)\n        return\n\n    # if we have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 2x2 bricks\n    # if we have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 2x2 bricks\n\n    # if we don't have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 4x2 bricks\n    if bricks_2x2_needed > N and bricks_4x2_left_after_using_2x2 >= 0:\n        print(0, bricks_4x2_left_after_using_2x2)\n        return\n\n    # if we don't have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 4x2 bricks\n    # if we don't have enough 2x2 bricks and we have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use only 4x2 bricks\n\n    # if we don't have enough 2x2 bricks and we don't have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use 2x2 bricks and 4x2 bricks\n    if bricks_2x2_needed > N and bricks_4x2_left_after_using_2x2 < 0:\n        bricks_4x2_needed_after_using_2x2 = -bricks_4x2_left_after_using_2x2\n        bricks_2x2_needed_after_using_4x2 = bricks_2x2_needed - bricks_4x2_left\n        bricks_4x2_needed_after_using_4x2 = bricks_4x2_needed_after_using_2x2 - bricks_2x2_needed_after_using_4x2\n        print(bricks_2x2_needed_after_using_4x2, bricks_4x2_needed_after_using_4x2)\n        return\n\n    # if we don't have enough 2x2 bricks and we don't have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use 2x2 bricks and 4x2 bricks\n    # if we don't have enough 2x2 bricks and we don't have enough 4x2 bricks\n    # after using all the 2x2 bricks, we use 2x2 bricks and 4x2 bricks\n\n\nget_bricks(H, N, M)"]