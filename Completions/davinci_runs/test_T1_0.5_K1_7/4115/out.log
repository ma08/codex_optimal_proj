2022-04-13 18:25:10.716994 """
Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.
Given is a string S. Find the minimum number of hugs needed to make S palindromic.

-----Constraints-----
 - S is a string consisting of lowercase English letters.
 - The length of S is between 1 and 100 (inclusive).

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the minimum number of hugs needed to make S palindromic.

-----Sample Input-----
redcoder

-----Sample Output-----
1

For example, we can change the fourth character to o and get a palindrome redooder.
"""
2022-04-13 18:25:10.717002 --------------------------
2022-04-13 18:25:25.670474 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    s = input()\n    l = len(s)\n    count = 0\n    for i in range(l//2):\n        if s[i] != s[l-1-i]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef MinHugs(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        if s[i] != s[-i-1]:\n            return 1\n    return 2\n\ns = sys.stdin.readline()\nprint(MinHugs(s))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef palindrome(s):\n    if s == s[::-1]:\n        return 0\n    else:\n        return 1\n\ndef main():\n    s = input()\n    print(palindrome(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    sys.exit()\n\nfor i in range(len(s) // 2):\n    if s[i] != s[-i-1]:\n        print(1)\n        sys.exit()\n\nprint(2)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ns = input()\n\ndef palindrome(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == s[-1]:\n        return palindrome(s[1:-1])\n    else:\n        return min(palindrome(s[1:]), palindrome(s[:-1])) + 1\n\nprint(palindrome(s))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#S = input()\nS = \"redcoder\"\n\ndef palindrome(S):\n    l = len(S)\n    for i in range(l//2):\n        if S[i] != S[l-i-1]:\n            return False\n    return True\n\ndef palindrome_2(S):\n    if S == S[::-1]:\n        return True\n    return False\n\ndef palindrome_3(S):\n    return S == S[::-1]\n\ndef palindrome_4(S):\n    return all(S[i] == S[~i] for i in range(len(S)//2))\n\ndef palindrome_5(S):\n    return all(S[i] == S[-1-i] for i in range(len(S)//2))\n\nprint(palindrome_4(S))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        print(1)\n        exit()\n\nprint(2)"
    }
  ],
  "created": 1649874310,
  "id": "cmpl-4wbxury8V34e5mwjID2icefGLBNwd",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:25:25.670762 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    s = input()\n    l = len(s)\n    count = 0\n    for i in range(l//2):\n        if s[i] != s[l-1-i]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:25:25.670795 REASON stop
2022-04-13 18:25:25.671247 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef MinHugs(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        if s[i] != s[-i-1]:\n            return 1\n    return 2\n\ns = sys.stdin.readline()\nprint(MinHugs(s))"
}
2022-04-13 18:25:25.671369 REASON stop
2022-04-13 18:25:25.671767 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef palindrome(s):\n    if s == s[::-1]:\n        return 0\n    else:\n        return 1\n\ndef main():\n    s = input()\n    print(palindrome(s))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:25:25.671817 REASON stop
2022-04-13 18:25:25.690466 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    sys.exit()\n\nfor i in range(len(s) // 2):\n    if s[i] != s[-i-1]:\n        print(1)\n        sys.exit()\n\nprint(2)"
}
2022-04-13 18:25:25.690578 REASON stop
2022-04-13 18:25:25.691214 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ns = input()\n\ndef palindrome(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == s[-1]:\n        return palindrome(s[1:-1])\n    else:\n        return min(palindrome(s[1:]), palindrome(s[:-1])) + 1\n\nprint(palindrome(s))"
}
2022-04-13 18:25:25.691292 REASON stop
2022-04-13 18:25:25.703387 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#S = input()\nS = \"redcoder\"\n\ndef palindrome(S):\n    l = len(S)\n    for i in range(l//2):\n        if S[i] != S[l-i-1]:\n            return False\n    return True\n\ndef palindrome_2(S):\n    if S == S[::-1]:\n        return True\n    return False\n\ndef palindrome_3(S):\n    return S == S[::-1]\n\ndef palindrome_4(S):\n    return all(S[i] == S[~i] for i in range(len(S)//2))\n\ndef palindrome_5(S):\n    return all(S[i] == S[-1-i] for i in range(len(S)//2))\n\nprint(palindrome_4(S))"
}
2022-04-13 18:25:25.703486 REASON stop
2022-04-13 18:25:25.704329 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        print(1)\n        exit()\n\nprint(2)"
}
2022-04-13 18:25:25.704419 REASON stop
