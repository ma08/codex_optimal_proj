["\n\nimport sys\n\ninput = sys.stdin.readline\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    sys.exit()\n\nfor i in range(len(s) // 2):\n    if s[i] != s[-i-1]:\n        print(1)\n        sys.exit()\n\nprint(2)", "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        print(1)\n        exit()\n\nprint(2)", "\n\nimport sys\n\ndef MinHugs(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        if s[i] != s[-i-1]:\n            return 1\n    return 2\n\ns = sys.stdin.readline()\nprint(MinHugs(s))", "\n\ns = input()\n\ndef palindrome(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == s[-1]:\n        return palindrome(s[1:-1])\n    else:\n        return min(palindrome(s[1:]), palindrome(s[:-1])) + 1\n\nprint(palindrome(s))", "\n\n#S = input()\nS = \"redcoder\"\n\ndef palindrome(S):\n    l = len(S)\n    for i in range(l//2):\n        if S[i] != S[l-i-1]:\n            return False\n    return True\n\ndef palindrome_2(S):\n    if S == S[::-1]:\n        return True\n    return False\n\ndef palindrome_3(S):\n    return S == S[::-1]\n\ndef palindrome_4(S):\n    return all(S[i] == S[~i] for i in range(len(S)//2))\n\ndef palindrome_5(S):\n    return all(S[i] == S[-1-i] for i in range(len(S)//2))\n\nprint(palindrome_4(S))", "\n\n\ndef main():\n    s = input()\n    l = len(s)\n    count = 0\n    for i in range(l//2):\n        if s[i] != s[l-1-i]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef palindrome(s):\n    if s == s[::-1]:\n        return 0\n    else:\n        return 1\n\ndef main():\n    s = input()\n    print(palindrome(s))\n\nif __name__ == '__main__':\n    main()"]