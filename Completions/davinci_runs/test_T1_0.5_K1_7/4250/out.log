2022-04-13 19:36:05.047507 """
You are given an array $s$ consisting of $n$ integers.

You have to find any array $t$ of length $k$ such that you can cut out maximum number of copies of array $t$ from array $s$.

Cutting out the copy of $t$ means that for each element $t_i$ of array $t$ you have to find $t_i$ in $s$ and remove it from $s$. If for some $t_i$ you cannot find such element in $s$, then you cannot cut out one more copy of $t$. The both arrays can contain duplicate elements.

For example, if $s = [1, 2, 3, 2, 4, 3, 1]$ and $k = 3$ then one of the possible answers is $t = [1, 2, 3]$. This array $t$ can be cut out $2$ times.   To cut out the first copy of $t$ you can use the elements $[1, \underline{\textbf{2}}, 3, 2, 4, \underline{\textbf{3}}, \underline{\textbf{1}}]$ (use the highlighted elements). After cutting out the first copy of $t$ the array $s$ can look like $[1, 3, 2, 4]$.  To cut out the second copy of $t$ you can use the elements $[\underline{\textbf{1}}, \underline{\textbf{3}}, \underline{\textbf{2}}, 4]$. After cutting out the second copy of $t$ the array $s$ will be $[4]$. 

Your task is to find such array $t$ that you can cut out the copy of $t$ from $s$ maximum number of times. If there are multiple answers, you may choose any of them.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 2 \cdot 10^5$) — the number of elements in $s$ and the desired number of elements in $t$, respectively.

The second line of the input contains exactly $n$ integers $s_1, s_2, \dots, s_n$ ($1 \le s_i \le 2 \cdot 10^5$).


-----Output-----

Print $k$ integers — the elements of array $t$ such that you can cut out maximum possible number of copies of this array from $s$. If there are multiple answers, print any of them. The required array $t$ can contain duplicate elements. All the elements of $t$ ($t_1, t_2, \dots, t_k$) should satisfy the following condition: $1 \le t_i \le 2 \cdot 10^5$.


-----Examples-----
Input
7 3
1 2 3 2 4 3 1

Output
1 2 3 

Input
10 4
1 3 1 3 10 3 7 7 12 3

Output
7 3 1 3

Input
15 2
1 2 1 1 1 2 1 1 2 1 2 1 1 1 1

Output
1 1 



-----Note-----

The first example is described in the problem statement.

In the second example the only answer is $[7, 3, 1, 3]$ and any its permutations. It can be shown that you cannot choose any other array such that the maximum number of copies you can cut out would be equal to $2$.

In the third example the array $t$ can be cut out $5$ times.
"""
2022-04-13 19:36:05.047522 --------------------------
2022-04-13 19:36:25.969415 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_max_count(s, k):\n    c = Counter(s)\n    c_items = c.most_common()\n    t = []\n    for i in range(k):\n        t.append(c_items[i][0])\n    return t\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = get_max_count(s, k)\n    print(*t)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def solve(self, n, k, s):\n        counts = {}\n        for i in s:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n        sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n        t = []\n        for i in range(k):\n            t.append(sorted_counts[i][0])\n        return t\n\nn, k = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\nsolution = Solution()\n\nprint(*solution.solve(n, k, s))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    s = [int(i) for i in sys.stdin.readline().split()]\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    l = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    t = []\n    for i in range(k):\n        t.append(l[i][0])\n    print(' '.join([str(i) for i in t]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().strip().split()]\n    s = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    #print(n, k, s)\n\n    # create dictionary of s\n    # key: element value\n    # value: count of elements\n    s_dict = {}\n    for el in s:\n        if el in s_dict:\n            s_dict[el] += 1\n        else:\n            s_dict[el] = 1\n\n    #print(s_dict)\n\n    # sort s_dict by count of elements\n    s_dict_sorted = sorted(s_dict.items(), key=lambda x: x[1], reverse=True)\n\n    #print(s_dict_sorted)\n\n    # cut out maximum number of copies of t from s\n    t = []\n    for i in range(k):\n        t.append(s_dict_sorted[i][0])\n\n    #print(t)\n\n    print(' '.join([str(x) for x in t]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solve(s, k):\n    counts = {}\n    for i in range(len(s)):\n        if s[i] not in counts:\n            counts[s[i]] = 0\n        counts[s[i]] += 1\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    res = []\n    for i in range(k):\n        res.append(sorted_counts[i][0])\n    return res\n\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    print(*solve(s, k))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nc = Counter(a)\nans = []\n\nfor i in range(k):\n    mx = max(c, key=c.get)\n    ans.append(mx)\n    c[mx] -= 1\n\nprint(*ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\n# 1. Count the number of times each element appears in the list\n# 2. Sort the list in descending order by the number of times each element appears\n# 3. Print the first k elements\n\nsorted_s = sorted(Counter(s).items(), key=lambda x: x[1], reverse=True)\nprint(*[sorted_s[i][0] for i in range(k)])"
    }
  ],
  "created": 1649878565,
  "id": "cmpl-4wd4X4Ph9xvFGI8m7O37ReBk43fMN",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 19:36:25.969690 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_max_count(s, k):\n    c = Counter(s)\n    c_items = c.most_common()\n    t = []\n    for i in range(k):\n        t.append(c_items[i][0])\n    return t\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = get_max_count(s, k)\n    print(*t)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:36:25.969722 REASON stop
2022-04-13 19:36:25.971513 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def solve(self, n, k, s):\n        counts = {}\n        for i in s:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n        sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n        t = []\n        for i in range(k):\n            t.append(sorted_counts[i][0])\n        return t\n\nn, k = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\nsolution = Solution()\n\nprint(*solution.solve(n, k, s))"
}
2022-04-13 19:36:25.971653 REASON stop
2022-04-13 19:36:25.971999 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    s = [int(i) for i in sys.stdin.readline().split()]\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    l = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    t = []\n    for i in range(k):\n        t.append(l[i][0])\n    print(' '.join([str(i) for i in t]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:36:25.972096 REASON stop
2022-04-13 19:36:25.997606 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().strip().split()]\n    s = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    #print(n, k, s)\n\n    # create dictionary of s\n    # key: element value\n    # value: count of elements\n    s_dict = {}\n    for el in s:\n        if el in s_dict:\n            s_dict[el] += 1\n        else:\n            s_dict[el] = 1\n\n    #print(s_dict)\n\n    # sort s_dict by count of elements\n    s_dict_sorted = sorted(s_dict.items(), key=lambda x: x[1], reverse=True)\n\n    #print(s_dict_sorted)\n\n    # cut out maximum number of copies of t from s\n    t = []\n    for i in range(k):\n        t.append(s_dict_sorted[i][0])\n\n    #print(t)\n\n    print(' '.join([str(x) for x in t]))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:36:25.997708 REASON stop
2022-04-13 19:36:25.998637 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solve(s, k):\n    counts = {}\n    for i in range(len(s)):\n        if s[i] not in counts:\n            counts[s[i]] = 0\n        counts[s[i]] += 1\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    res = []\n    for i in range(k):\n        res.append(sorted_counts[i][0])\n    return res\n\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    print(*solve(s, k))"
}
2022-04-13 19:36:25.998726 REASON stop
2022-04-13 19:36:26.013612 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nc = Counter(a)\nans = []\n\nfor i in range(k):\n    mx = max(c, key=c.get)\n    ans.append(mx)\n    c[mx] -= 1\n\nprint(*ans)"
}
2022-04-13 19:36:26.013711 REASON stop
2022-04-13 19:36:26.014423 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\n# 1. Count the number of times each element appears in the list\n# 2. Sort the list in descending order by the number of times each element appears\n# 3. Print the first k elements\n\nsorted_s = sorted(Counter(s).items(), key=lambda x: x[1], reverse=True)\nprint(*[sorted_s[i][0] for i in range(k)])"
}
2022-04-13 19:36:26.014491 REASON stop
