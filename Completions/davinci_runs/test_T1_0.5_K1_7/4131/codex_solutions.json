["\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    prefectures = [0] * n\n    cities = []\n    for i in range(m):\n        p, y = map(int, sys.stdin.readline().split())\n        prefectures[p - 1] += 1\n        cities.append((p, y, prefectures[p - 1]))\n    for p, y, c in cities:\n        print('{:06}{:06}'.format(p, c))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    p_y = []\n    for i in range(m):\n        p, y = map(int, input().split())\n        p_y.append((p, y))\n    p_y.sort(key=lambda x: x[1])\n    count = [1 for _ in range(n+1)]\n    for p, y in p_y:\n        print(\"%06d%06d\" % (p, count[p]))\n        count[p] += 1\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    PY = [list(map(int, input().split())) for _ in range(M)]\n    PY.sort(key=lambda x:x[1])\n    city_cnt = [0 for _ in range(N+1)]\n    for p, y in PY:\n        city_cnt[p] += 1\n    ans = []\n    for p, y in PY:\n        ans.append(str(p).zfill(6)+str(city_cnt[p]).zfill(6))\n    print(\"\\n\".join(ans))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport heapq\n\nn, m = map(int, sys.stdin.readline().rstrip().split())\npref_dict = {}\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().rstrip().split())\n    if p in pref_dict:\n        pref_dict[p].append(y)\n    else:\n        pref_dict[p] = [y]\n\nfor p in pref_dict:\n    pref_dict[p].sort()\n\nfor p in pref_dict:\n    for i in range(len(pref_dict[p])):\n        print('{:06d}{:06d}'.format(p, i+1))", "\n\nn, m = map(int, input().split())\n\ndict_p = {}\nfor i in range(m):\n    p, y = map(int, input().split())\n    if p in dict_p:\n        dict_p[p].append(y)\n    else:\n        dict_p[p] = [y]\n\nfor k, v in dict_p.items():\n    v.sort()\n\nfor i in range(m):\n    p, y = map(int, input().split())\n    print('%06d%06d' % (p, dict_p[p].index(y) + 1))", "\n\n# N: number of prefectures\n# M: number of cities\n# P_i: prefecture of city i\n# Y_i: year city i was established\nN, M = map(int, input().split())\n\n# cities[p] is a list of years that the cities in prefecture p were established\ncities = [[] for _ in range(N+1)]\nfor _ in range(M):\n    p, y = map(int, input().split())\n    cities[p].append(y)\n\nfor p in range(1, N+1):\n    # Sort the years the cities in prefecture p were established\n    cities[p].sort()\n\nfor p in range(1, N+1):\n    # For each city in prefecture p\n    for i, y in enumerate(cities[p]):\n        # Print the ID number of city i in prefecture p\n        print(\"0\"*(6-len(str(p))) + str(p) + \"0\"*(6-len(str(i+1))) + str(i+1))", "\n\nN, M = map(int, input().split())\n\nC = [[] for _ in range(N)]\nfor _ in range(M):\n    P, Y = map(int, input().split())\n    C[P-1].append(Y)\n\nfor i in range(N):\n    C[i].sort()\n    for j in range(len(C[i])):\n        print('{0:06d}{1:06d}'.format(i+1, j+1))"]