["\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    ans = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\nimport sys\nfrom collections import Counter\nS = sys.stdin.readline().rstrip()\nT = sys.stdin.readline().rstrip()\n\ndef main():\n    # T is a substring of S\n    if T in S:\n        print(0)\n        return\n    # T is not a substring of S\n    else:\n        # Count the number of each character in S\n        counter_S = Counter(S)\n        # Count the number of each character in T\n        counter_T = Counter(T)\n        # Count the number of characters that are different between S and T\n        count = 0\n        for key in counter_T:\n            if key not in counter_S:\n                count += counter_T[key]\n            else:\n                if counter_T[key] > counter_S[key]:\n                    count += counter_T[key] - counter_S[key]\n        print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\nS = input()\nT = input()\n\ndef substring_matching(S, T):\n    # convert S and T to lists\n    S = list(S)\n    T = list(T)\n    # initialize a counter\n    count = 0\n    # iterate through the string S\n    for i in range(len(S)):\n        # if the letter in S matches the letter in T\n        if S[i] == T[0]:\n            # iterate through the rest of the string T\n            for j in range(len(T)):\n                # if the letter in S matches the letter in T\n                if S[i+j] == T[j]:\n                    # increment the counter\n                    count += 1\n                # if the letter in S does not match the letter in T\n                else:\n                    # reset the counter\n                    count = 0\n                    # break out of the loop\n                    break\n            # if the counter equals the length of T\n            if count == len(T):\n                # return the counter\n                return count\n            # if the counter does not equal the length of T\n            else:\n                # reset the counter\n                count = 0\n    # if the counter does not equal the length of T\n    if count != len(T):\n        # return 0\n        return 0\n\n# call the function\nprint(len(S) - substring_matching(S, T))", "\n\nS = input()\nT = input()\n\n# create a list of lists of each character in S that matches T\n# ex: S = 'cabacc' and T = 'abc'\n# matches = [['a', 'b', 'c'], ['a', 'b', 'c']]\nmatches = []\nfor i in range(len(S)):\n    if S[i] == T[0]:\n        matches.append([S[i]])\n        for j in range(1, len(T)):\n            if i+j < len(S):\n                if S[i+j] == T[j]:\n                    matches[-1].append(S[i+j])\n                else:\n                    matches[-1] = []\n                    break\n            else:\n                matches[-1] = []\n                break\n\n# remove any empty lists\nmatches = [match for match in matches if match]\n\n# if there are no matches, then the answer is len(T)\nif not matches:\n    print(len(T))\n\n# otherwise, find the minimum number of characters needed to change\n# to make the match a substring\nelse:\n    # find the length of the longest match\n    longest_match = max([len(match) for match in matches])\n\n    # if the longest match is the same length as T, then the answer is 0\n    if longest_match == len(T):\n        print(0)\n\n    # otherwise, the answer is len(T) - longest_match\n    else:\n        print(len(T) - longest_match)", "\n\n# ==========\n# Solution 1\n# ==========\n\ns = input()\nt = input()\n\n# find the index of the first character of t in s\nfirst_t_index = s.find(t[0])\n\n# if the first character of t is not found in s, the answer is the length of t\nif first_t_index == -1:\n  print(len(t))\n  exit()\n\n# if the first character of t is found in s, the answer is the length of t minus the length of the substring of s that matches t\nprint(len(t) - len(s[first_t_index:first_t_index + len(t)]))\n\n# ==========\n# Solution 2\n# ==========\n\ns = input()\nt = input()\n\n# if the length of t is greater than the length of s, the answer is the length of t\nif len(t) > len(s):\n  print(len(t))\n  exit()\n\n# initialize a variable to track the number of characters in s that need to be changed to match t\ncharacters_to_change = 0\n\n# iterate over the length of t\nfor i in range(len(t)):\n  # if the character at index i in t does not match the character at index i in s, increment the number of characters to change\n  if t[i] != s[i]:\n    characters_to_change += 1\n\nprint(characters_to_change)\n\n# ==========\n# Solution 3\n# ==========\n\ns = input()\nt = input()\n\n# if the length of t is greater than the length of s, the answer is the length of t\nif len(t) > len(s):\n  print(len(t))\n  exit()\n\n# initialize a variable to track the number of characters in s that need to be changed to match t\ncharacters_to_change = 0\n\n# iterate over the length of t\nfor i in range(len(t)):\n  # if the character at index i in t does not match the character at index i in s, increment the number of characters to change\n  if t[i] != s[i]:\n    characters_to_change += 1\n\n# if the number of characters to change is greater than the length of t, the answer is the length of t\nif characters_to_change > len(t):\n  print(len(t))\n  exit()\n\n# if the number of characters to change is less than or equal to the length of t, the answer is the number of characters to change\nprint(characters_to_change)", "\n\n#import sys\n#sys.setrecursionlimit(10**6)\n\ndef LCS(s, t):\n    s_len = len(s)\n    t_len = len(t)\n    dp = [[0]*(t_len+1) for _ in range(s_len+1)]\n    for i in range(s_len):\n        for j in range(t_len):\n            if s[i]==t[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n    return dp[-1][-1]\n\ndef main():\n    s = list(input())\n    t = list(input())\n    s_len = len(s)\n    t_len = len(t)\n    print(s_len-LCS(s, t))\n\nif __name__ == '__main__':\n    main()"]