["\n\nimport sys\n\ndef round_dance(n, p):\n    if n == 1:\n        return 'YES'\n    for i in range(n):\n        test = True\n        for j in range(1, n):\n            if p[(i+j)%n] != j+1:\n                test = False\n                break\n        if test:\n            return 'YES'\n    return 'NO'\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().strip().split()))\n    print(round_dance(n, p))", "\n\ndef round_dance(p):\n    # Returns True if a round dance can be started with the given order of students.\n    # Otherwise returns False.\n    n = len(p)\n    # Check if the round dance can be started in clockwise order.\n    for i in range(1, n):\n        if (p[i] - p[i - 1] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            break\n    else:\n        # The round dance can be started in clockwise order.\n        return True\n    # Check if the round dance can be started in counterclockwise order.\n    for i in range(1, n):\n        if (p[i - 1] - p[i] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            return False\n    # The round dance can be started in counterclockwise order.\n    return True\n\n# Read the input.\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    # Print the answer to the query.\n    print(\"YES\" if round_dance(p) else \"NO\")", "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    if n == 1:\n        print(\"YES\")\n        continue\n\n    cw = True\n    ccw = True\n\n    for i in range(1, n):\n        if cw and (i+1) % n != p[i-1]:\n            cw = False\n        if ccw and (i+1) % n != p[n-i]:\n            ccw = False\n\n    if cw or ccw:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "\n\ndef round_dance(n, p):\n    \"\"\"\n    >>> round_dance(4, [1, 2, 3, 4])\n    'YES'\n    >>> round_dance(3, [1, 3, 2])\n    'YES'\n    >>> round_dance(5, [1, 2, 3, 5, 4])\n    'NO'\n    >>> round_dance(1, [1])\n    'YES'\n    >>> round_dance(5, [3, 2, 1, 5, 4])\n    'YES'\n    \"\"\"\n    for i in range(1, n + 1):\n        if i not in p:\n            return \"NO\"\n    if p == list(range(1, n + 1)):\n        return \"YES\"\n    if p == list(range(1, n + 1))[::-1]:\n        return \"YES\"\n    return \"NO\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(round_dance(n, p))", "\n\n# SOLUTION\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    i = 0\n    while True:\n        if p[i] == 1:\n            break\n        i += 1\n    if p[i+1] == n:\n        print('YES')\n    else:\n        print('NO')", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        n = int(sys.stdin.readline())\n        p = list(map(int, sys.stdin.readline().split()))\n        if n % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()", "\n\ndef round_dance(n, p):\n    for i in range(1, n+1):\n        if p[i%n] != i:\n            return False\n    return True\n\nimport sys\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    if round_dance(n, p):\n        print(\"YES\")\n    else:\n        print(\"NO\")"]