2022-04-13 22:29:28.031847 """
There are $n$ students standing in a circle in some order. The index of the $i$-th student is $p_i$. It is guaranteed that all indices of students are distinct integers from $1$ to $n$ (i. e. they form a permutation).

Students want to start a round dance. A clockwise round dance can be started if the student $2$ comes right after the student $1$ in clockwise order (there are no students between them), the student $3$ comes right after the student $2$ in clockwise order, and so on, and the student $n$ comes right after the student $n - 1$ in clockwise order. A counterclockwise round dance is almost the same thing — the only difference is that the student $i$ should be right after the student $i - 1$ in counterclockwise order (this condition should be met for every $i$ from $2$ to $n$). 

For example, if the indices of students listed in clockwise order are $[2, 3, 4, 5, 1]$, then they can start a clockwise round dance. If the students have indices $[3, 2, 1, 4]$ in clockwise order, then they can start a counterclockwise round dance.

Your task is to determine whether it is possible to start a round dance. Note that the students cannot change their positions before starting the dance; they cannot swap or leave the circle, and no other student can enter the circle. 

You have to answer $q$ independent queries.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 200$) — the number of queries. Then $q$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 200$) — the number of students.

The second line of the query contains a permutation of indices $p_1, p_2, \dots, p_n$ ($1 \le p_i \le n$), where $p_i$ is the index of the $i$-th student (in clockwise order). It is guaranteed that all $p_i$ are distinct integers from $1$ to $n$ (i. e. they form a permutation).


-----Output-----

For each query, print the answer on it. If a round dance can be started with the given order of students, print "YES". Otherwise print "NO".


-----Example-----
Input
5
4
1 2 3 4
3
1 3 2
5
1 2 3 5 4
1
1
5
3 2 1 5 4

Output
YES
YES
NO
YES
YES
"""
2022-04-13 22:29:28.031873 --------------------------
2022-04-13 22:29:50.096976 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    i = 0\n    while True:\n        if p[i] == 1:\n            break\n        i += 1\n    if p[i+1] == n:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef round_dance(p):\n    # Returns True if a round dance can be started with the given order of students.\n    # Otherwise returns False.\n    n = len(p)\n    # Check if the round dance can be started in clockwise order.\n    for i in range(1, n):\n        if (p[i] - p[i - 1] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            break\n    else:\n        # The round dance can be started in clockwise order.\n        return True\n    # Check if the round dance can be started in counterclockwise order.\n    for i in range(1, n):\n        if (p[i - 1] - p[i] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            return False\n    # The round dance can be started in counterclockwise order.\n    return True\n\n# Read the input.\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    # Print the answer to the query.\n    print(\"YES\" if round_dance(p) else \"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    if n == 1:\n        print(\"YES\")\n        continue\n\n    cw = True\n    ccw = True\n\n    for i in range(1, n):\n        if cw and (i+1) % n != p[i-1]:\n            cw = False\n        if ccw and (i+1) % n != p[n-i]:\n            ccw = False\n\n    if cw or ccw:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef round_dance(n, p):\n    if n == 1:\n        return 'YES'\n    for i in range(n):\n        test = True\n        for j in range(1, n):\n            if p[(i+j)%n] != j+1:\n                test = False\n                break\n        if test:\n            return 'YES'\n    return 'NO'\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().strip().split()))\n    print(round_dance(n, p))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        n = int(sys.stdin.readline())\n        p = list(map(int, sys.stdin.readline().split()))\n        if n % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef round_dance(n, p):\n    \"\"\"\n    >>> round_dance(4, [1, 2, 3, 4])\n    'YES'\n    >>> round_dance(3, [1, 3, 2])\n    'YES'\n    >>> round_dance(5, [1, 2, 3, 5, 4])\n    'NO'\n    >>> round_dance(1, [1])\n    'YES'\n    >>> round_dance(5, [3, 2, 1, 5, 4])\n    'YES'\n    \"\"\"\n    for i in range(1, n + 1):\n        if i not in p:\n            return \"NO\"\n    if p == list(range(1, n + 1)):\n        return \"YES\"\n    if p == list(range(1, n + 1))[::-1]:\n        return \"YES\"\n    return \"NO\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(round_dance(n, p))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef round_dance(n, p):\n    for i in range(1, n+1):\n        if p[i%n] != i:\n            return False\n    return True\n\nimport sys\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    if round_dance(n, p):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    }
  ],
  "created": 1649888968,
  "id": "cmpl-4wfmKgpQ5f8pd72P1em4owVMWEh3C",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:29:50.097254 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    i = 0\n    while True:\n        if p[i] == 1:\n            break\n        i += 1\n    if p[i+1] == n:\n        print('YES')\n    else:\n        print('NO')"
}
2022-04-13 22:29:50.097294 REASON stop
2022-04-13 22:29:50.097771 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef round_dance(p):\n    # Returns True if a round dance can be started with the given order of students.\n    # Otherwise returns False.\n    n = len(p)\n    # Check if the round dance can be started in clockwise order.\n    for i in range(1, n):\n        if (p[i] - p[i - 1] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            break\n    else:\n        # The round dance can be started in clockwise order.\n        return True\n    # Check if the round dance can be started in counterclockwise order.\n    for i in range(1, n):\n        if (p[i - 1] - p[i] + n) % n != 1:\n            # The student with index p[i] is not right after the student with index p[i - 1].\n            return False\n    # The round dance can be started in counterclockwise order.\n    return True\n\n# Read the input.\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    # Print the answer to the query.\n    print(\"YES\" if round_dance(p) else \"NO\")"
}
2022-04-13 22:29:50.097913 REASON stop
2022-04-13 22:29:50.098267 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    if n == 1:\n        print(\"YES\")\n        continue\n\n    cw = True\n    ccw = True\n\n    for i in range(1, n):\n        if cw and (i+1) % n != p[i-1]:\n            cw = False\n        if ccw and (i+1) % n != p[n-i]:\n            ccw = False\n\n    if cw or ccw:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
}
2022-04-13 22:29:50.098324 REASON stop
2022-04-13 22:29:50.116193 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef round_dance(n, p):\n    if n == 1:\n        return 'YES'\n    for i in range(n):\n        test = True\n        for j in range(1, n):\n            if p[(i+j)%n] != j+1:\n                test = False\n                break\n        if test:\n            return 'YES'\n    return 'NO'\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().strip().split()))\n    print(round_dance(n, p))"
}
2022-04-13 22:29:50.116291 REASON stop
2022-04-13 22:29:50.133064 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        n = int(sys.stdin.readline())\n        p = list(map(int, sys.stdin.readline().split()))\n        if n % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:29:50.133176 REASON stop
2022-04-13 22:29:50.133818 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef round_dance(n, p):\n    \"\"\"\n    >>> round_dance(4, [1, 2, 3, 4])\n    'YES'\n    >>> round_dance(3, [1, 3, 2])\n    'YES'\n    >>> round_dance(5, [1, 2, 3, 5, 4])\n    'NO'\n    >>> round_dance(1, [1])\n    'YES'\n    >>> round_dance(5, [3, 2, 1, 5, 4])\n    'YES'\n    \"\"\"\n    for i in range(1, n + 1):\n        if i not in p:\n            return \"NO\"\n    if p == list(range(1, n + 1)):\n        return \"YES\"\n    if p == list(range(1, n + 1))[::-1]:\n        return \"YES\"\n    return \"NO\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(round_dance(n, p))"
}
2022-04-13 22:29:50.133889 REASON stop
2022-04-13 22:29:50.134584 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef round_dance(n, p):\n    for i in range(1, n+1):\n        if p[i%n] != i:\n            return False\n    return True\n\nimport sys\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    if round_dance(n, p):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
}
2022-04-13 22:29:50.134643 REASON stop
