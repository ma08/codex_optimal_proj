2022-04-13 23:09:58.373501 """
Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
"""
2022-04-13 23:09:58.373509 --------------------------
2022-04-13 23:10:12.417690 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n\n\"\"\"\nRuntime: 44 ms, faster than 97.35% of Python3 online submissions for Linked List Cycle.\nMemory Usage: 17.4 MB, less than 5.22% of Python3 online submissions for Linked List Cycle.\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n        return True"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow and fast and fast.next:\n            if slow == fast:\n                return True\n            slow = slow.next\n            fast = fast.next.next\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n\n        slow, fast = head, head.next\n\n        while slow and fast:\n            if slow == fast:\n                return True\n\n            slow = slow.next\n            fast = fast.next.next if fast.next else None\n\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow and fast and fast.next:\n            if slow == fast:\n                return True\n            slow = slow.next\n            fast = fast.next.next\n        return False"
    }
  ],
  "created": 1649891398,
  "id": "cmpl-4wgPWHeJSFMhYILbZ4Utj9XfXRs4x",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:10:12.417963 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
}
2022-04-13 23:10:12.418003 REASON stop
2022-04-13 23:10:12.418440 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n\n\"\"\"\nRuntime: 44 ms, faster than 97.35% of Python3 online submissions for Linked List Cycle.\nMemory Usage: 17.4 MB, less than 5.22% of Python3 online submissions for Linked List Cycle.\n\"\"\""
}
2022-04-13 23:10:12.418554 REASON stop
2022-04-13 23:10:12.418893 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n        return True"
}
2022-04-13 23:10:12.418939 REASON stop
2022-04-13 23:10:12.434834 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
}
2022-04-13 23:10:12.434964 REASON stop
2022-04-13 23:10:12.458050 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow and fast and fast.next:\n            if slow == fast:\n                return True\n            slow = slow.next\n            fast = fast.next.next\n        return False"
}
2022-04-13 23:10:12.458152 REASON stop
2022-04-13 23:10:12.458819 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n\n        slow, fast = head, head.next\n\n        while slow and fast:\n            if slow == fast:\n                return True\n\n            slow = slow.next\n            fast = fast.next.next if fast.next else None\n\n        return False"
}
2022-04-13 23:10:12.458878 REASON stop
2022-04-13 23:10:12.459619 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow and fast and fast.next:\n            if slow == fast:\n                return True\n            slow = slow.next\n            fast = fast.next.next\n        return False"
}
2022-04-13 23:10:12.459672 REASON stop
