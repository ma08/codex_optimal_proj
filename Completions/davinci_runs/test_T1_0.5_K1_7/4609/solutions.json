["n=int(input())\nd=dict()\nfor _ in range(n):\n    hoge=int(input())\n    if d.get(hoge,0)==0:\n        d[hoge]=1\n    else:\n        d[hoge]+=1\nans=0\nfor i in d.values():\n    if i%2==1:\n        ans+=1\nprint(ans)", "import collections\n\nn = int(input())\narr = [int(input()) for _ in range(n)]\n\nc = collections.Counter(arr)\nans = 0\nfor v in c.values():\n  if v % 2:\n    ans += 1\nprint(ans)", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\ndic = defaultdict(int)\nfor i in range(n):\n    a = I()\n    dic[a] += 1\nans = 0\nfor k,v in list(dic.items()):\n    ans += v%2\nprint(ans)\n", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\nd = {}\n#key\u8a2d\u5b9a\nfor i in A:\n    d[i]=0\n#\u6570\u5b57key\u304c\u5076\u6570\u56de\u51fa\u305f\u30890,\u5947\u6570\u56de\u51fa\u305f\u30891\u306b\u306a\u308b\u3088\u3046\u306bvalue\u3092\u8a2d\u5b9a\nfor i in A:\n    if d[i]==1:\n        d[i]=0\n    else:\n        d[i]=1\n    \nprint(sum(d.values()))", "from collections import Counter\nN=int(input())\nA=[int(input()) for i in range(N)]\n\ncnt=Counter(A)\nans=0\nfor k,v in cnt.items():\n    if v%2==1:\n        ans+=1\n\nprint(ans)", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\nc = {}\nans = 0\n\nfor i in A:\n    if i not in c.keys():\n        c[i] = 0\n    c[i] += 1\n    \nfor j in c.values():\n    if j % 2 ==1:\n        ans += 1\n\n#print(A)\n#print(c)\nprint(ans)", "import collections\nn = int(input())\nl = list(int(input()) for i in range(n))\nd = collections.Counter(l)\nans = 0\nfor v in d.values():\n  ans += v % 2\nprint(ans)", "N = int(input())\nA = [0]*N\n\nfor i in range(N):\n  A[i] = int(input())\n\nA.sort()\n\ncount = 1\nans = 0\nfor i in range(N-1):\n  if A[i] == A[i+1]:\n    count+=1\n  else:\n    ans+=count%2\n    count=1\n\nans+=count%2\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\nN =int(input())\nA = {}\nfor i in range(N):\n    val = int(input())\n    if val in A:\n        A[val] += 1\n    else:\n        A[val] = 1\n\nans = 0\nfor k, v in A.items():\n    if v % 2 != 0:\n        ans += 1\n\nprint(ans)", "from collections import Counter\nn = int(input())\nans = 0\nC = Counter(int(input()) for _ in range(n))\nfor c in list(C.values()):\n    if c % 2 == 1:\n        ans += 1\nprint(ans)\n", "from sys import stdin, stdout # only need for big input\n\n\ndef solve():\n    n = int(input())\n    st = set()\n    for _ in range(n):\n        a = int(input())\n        if a in st:\n            st.remove(a)\n        else:\n            st.add(a)\n    print(len(st))\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import  Counter\n\nn = int(input())\nA = [int(input()) for _ in range(n)]\ncnt_A = Counter(A)\n\nans = 0\nfor v in cnt_A.values():\n    if v % 2 == 1:\n        ans += 1\nprint(ans)", "from collections import defaultdict\n\nd = defaultdict(int)\n\nn = int(input())\nfor i in range(n):\n  a = int(input())\n  d[a] = int(not(d[a]))\nans=0\nfor k,v in d.items():\n  if v == 1:\n    ans += 1\n\nprint(ans)", "n = int(input())\nkami = set()\n\nfor i in range(n) :\n    a = int(input())\n    if a in kami :\n        kami.remove(a)\n    else :\n        kami.add(a)\n\nprint((len(kami)))\n", "import collections\nn=int(input())\na=[int(input()) for i in range(n)]\nprint(sum([i%2==1 for i in collections.Counter(a).values()]))", "# coding: utf-8\n\n\ndef main():\n    N = int(input())\n    ans = 0\n    dic = {}\n    for _ in range(N):\n        a = int(input())\n        if a not in list(dic.keys()):\n            dic[a] = 1\n            ans += 1\n        elif dic[a] == 0:\n            dic[a] += 1\n            ans += 1\n        else:\n            dic[a] -= 1\n            ans -= 1\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nans = {}\nfor i in range(N):\n    A = input()\n    if  A in ans:\n        ans[A] += 1\n    else:\n        ans[A] = 1\nc = 0\nfor i in ans:\n    if ans[i] % 2 == 1:\n        c += 1\nprint(c)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep 23 16:50:38 2020\n\n@author: liang\n\"\"\"\nN = int(input())\nd = dict()\nans = 0 \nA = [int(input()) for _ in range(N)]\nfor a in A:\n    if a in d:\n        d[a] += 1\n    else:\n        d[a] = 1\n#print(d)\nfor key in d.keys():\n    if d[key] %2 ==1:\n        ans += 1\n        d[key] = 0\n#print(d)\nprint(ans)", "from collections import Counter\nN = int(input())\nA = [int(input()) for _ in range(N)]\ncnt = dict(Counter(A))\nans = []\nfor k, v in list(cnt.items()):\n    if v % 2 != 0:\n        ans.append(k)\nprint((len(ans)))\n", "from collections import Counter\n\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\nprint(sum(c%2 for c in Counter(A).values()))", "import collections\n\nn = int(input())\na = [int(input()) for _ in range(n)]\nc = collections.Counter(a)\n\ncnt = 0\nfor x in c.values():\n    if x % 2 == 1:\n        cnt += 1\nprint(cnt)", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\ndic = {}\n\nfor i in range(N):\n  if A[i] in dic.keys():\n    dic[A[i]] += 1\n  else:\n    dic[A[i]] = 1\n    \ncnt = 0\n\nfor j in dic.keys():\n  if dic[j] % 2 == 1:\n    cnt += 1\n    \nprint(cnt)", "# 20\nn = int(input())\na = {}\ncnt = 0\n\nfor i in range(n):\n    num = int(input())\n    a[num] = a.get(num,0)+1\n    a[num] %= 2\n    \nfor i in a.values():\n    cnt += i\n\n\n\nprint(cnt)", "import collections \nN = int(input())\nlsA = []\nfor i in range(N):\n    lsA.append(int(input()))\ncounterA = collections.Counter(lsA)\nans = 0\nfor i in counterA.values():\n    ans += i%2\nprint(ans)", "N = int(input())\nnumbers = {}\nfor i in range(N):\n    x = int(input())\n    if x in numbers:\n        del numbers[x]\n    else:\n        numbers[x] = 1\nprint(len(numbers))", "n = int(input())\nli = set()\n\nfor i in range(n):\n    x = int(input())\n    if x in li:\n        li.remove(x)\n    else:\n        li.add(x)\nprint((len(li)))\n", "n = int(input())\na = list()\nfor i in range(n):\n    a.append(int(input()))\nimport collections\nb = collections.Counter(a)\nc = list(map(lambda x: x%2, list(b.values())))\nprint(c.count(1))", "N = int(input())\nS = set()\nfor _ in range(N):\n  a = int(input())\n  if a in S:\n    S.remove(a)\n  else:\n    S.add(a)\n    \nprint((len(S)))\n", "n = int(input())\na = []\nfor i in range(n):\n  a.append(int(input()))\na.sort()\njud = 1\nq = a[0]\nans = 0\nfor i in range(1,n):\n  if(q==a[i]):\n    jud += 1\n  else: \n    if(jud%2==1):\n      ans += 1\n    jud = 1\n    q = a[i]\nif (jud%2==1):\n  ans += 1\nif(n==1):\n  ans = 1\nprint(ans)\n", "from collections import Counter\nn = int(input())\na = []\nfor i in range(n):\n  a.append(int(input()))\na = dict(Counter(a))\ncount = 0\nfor i in a.values():\n    if i % 2 == 1:\n        count += 1\nprint(count)", "#!/usr/bin/env python\n\nn = int(input())\na = [int(input()) for _ in range(n)]\n\nd = {}\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = 1 \n    else:\n        d[a[i]] += 1\n\nans = 0 \nfor s in list(d.values()):\n    if s%2 == 1:\n        ans += 1\n\nprint(ans)\n", "n=int(input())\ns=set()\nfor i in range(n):\n    a=int(input())\n    if a in s:\n        s.remove(a)\n    else:\n        s.add(a)\nprint(len(s))", "N = int(input())\nA = [int(input()) for _ in range(N)]\ndic = {num: 0 for num in set(A)}\nfor i in range(N):\n    dic[A[i]] = 1 if dic[A[i]]==0 else 0\nans = 0\nfor num in set(A):\n    ans += dic[num]\nprint(ans)", "N = int(input())\nnum = {}\nfor i in range(N):\n    A = int(input())\n    if A in list(num.keys()):\n        num[A] += 1\n    else:\n        num[A] = 1\nans = 0\nfor i, j in list(num.items()):\n    if j%2 == 1:\n        ans += 1\nprint(ans)\n", "n = int(input())\npaper = dict()\nfor i in range(n):\n    a = int(input())\n    if a not in paper:\n        paper[a] = 1\n    else:\n        paper.pop(a)\n\nres = 0\nfor value in list(paper.values()):\n    if value == 1:\n        res += 1\nprint(res)\n", "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN = INT()\nl = [int(input()) for _ in range(N)]\n\nc = Counter(l)\n\nans = 0\nfor i, j in zip(list(c.keys()), list(c.values())):\n    if j % 2 != 0:\n        ans += 1\n\nprint(ans)\n", "import collections\nn = int(input())\nalist = [int(input()) for i in range(n)]\ncole = collections.Counter(alist)\ncount = 0\nfor i in cole.values():\n  if i%2==1:\n    count+=1\nprint(count)", "n = int(input())\nA = [int(input()) for _ in range(n)]\na = sorted(A)\ni = 0\nans = 0\nwhile i < n:\n    if i == 0:\n        if a[0] == a[1]:\n            cnt = 2\n            i = 2\n            while i < n and a[i-1] == a[i]:\n                cnt += 1\n                i += 1\n            ans += cnt%2\n        else:\n            ans += 1\n            cnt = 1\n            i = 2\n            while i < n and a[i-1] == a[i]:\n                cnt += 1\n                i += 1\n            ans += cnt%2\n    else:\n        cnt = 1\n        i += 1\n        while i < n and a[i-1] == a[i]:\n            cnt += 1\n            i += 1\n        ans += cnt%2\nprint(ans)", "n = int(input())\na = [int(input()) for _ in range(n)]\ns = set()\nfor x in a:\n  if x in s:\n    s.remove(x)\n  else:\n    s.add(x)\nprint(len(s))", "from collections import defaultdict\nd = defaultdict(int)\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    if d[a] > 0:\n        d[a] -= 1\n    else:\n        d[a] += 1\n\nans = 0\nfor v in list(d.values()):\n    if v > 0:\n        ans += 1\nprint(ans)\n", "P = set()\nN = int(input())\nfor i in range(N):\n  A = int(input())\n  if A in P:\n    P.remove(A)\n  else:\n    P.add(A)\nprint(len(P))", "n=int(int(input()))\ns=set()\nfor i in range(n):\n    s^= set([input()])\nprint(len(s))", "import sys\nmod=10**9+7 ; inf=float(\"inf\")\nfrom math import sqrt, ceil\nfrom collections import deque, Counter, defaultdict #\u3059\u3079\u3066\u306ekey\u304c\u7528\u610f\u3055\u308c\u3066\u308b defaultdict(int)\u3067\u521d\u671f\u5316\ninput=lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(11451419)\nfrom decimal import ROUND_HALF_UP,Decimal  #\u5909\u63db\u5f8c\u306e\u672b\u5c3e\u6841\u30920\u30840.01\u3067\u6307\u5b9a\n  #Decimal((str(0.5)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))\nfrom functools import lru_cache\nfrom bisect import bisect_left as bileft, bisect_right as biright\n#\u30e1\u30e2\u5316\u518d\u5e30def\u306e\u5192\u982d\u306b\u6bce\u56de @lru_cache(maxsize=10**10)\n#\u5f15\u6570\u306blist\u306f\u3060\u3081\n#######\u3053\u3053\u307e\u3067\u30c6\u30f3\u30d7\u30ec#######\n#\u30bd\u30fc\u30c8\u3001\"a\"+\"b\"\u3001\u518d\u5e30\u306a\u3089Python3\u306e\u65b9\u304c\u3044\u3044\n#######\u3053\u3053\u304b\u3089\u5929\u3077\u3089########\n\nn=int(input())\nA=[int(input()) for i in range(n)]\nC=Counter(A)\nprint(len([i for i in C.values() if i%2==1]))", "import collections\nn = int(input())\naa = [int(input()) for a in range(n)]\n\ncaa = collections.Counter(aa) # couter aa\ncnt = 0\nlaa = [x[1] for x in caa.items()]\nfor la in laa:\n  if la % 2 == 1:\n    cnt += 1\nprint(cnt)", "n = int(input())\nA = {}\nfor i in range(n):\n    a = int(input())\n    A[a] = A.get(a, 0)+1\n    A[a] %= 2\ns = 0\nfor v in list(A.values()):\n    s += v\nprint(s)\n", "N=int(input())\nA=dict()\nfor _ in range(N):\n    a=int(input())\n    if a not in A:\n        A[a]=0\n    A[a]=1-A[a]\nprint((sum(A.values())))\n", "import collections\na = int(input())\ns = [input() for i in range(a)]\nc = collections.Counter(s)\nb = []\nfor myvalue in list(c.values()):\n    b.append(myvalue)\n\nd = len(b)\nans = int(0)\nfor i in range(int(d)):\n    if b[i] % 2 == 0:\n        pass\n    else:\n        ans += 1\n        \nprint(ans)\n    \n", "n=int(input())\na=[]\nfor i in range(n):\n    a.append(int(input()))\na=sorted(a)\nans=0\ncnt=1\nfor i in range(n-1):\n\n    if a[i]==a[i+1]:\n        cnt+=1\n    else:\n        if cnt%2==1:ans+=1\n        cnt=1\nif cnt%2==1:ans+=1\nprint(ans)\n", "N=int(input())\nA=[]\nfor n in range(N):\n    A.append(int(input()))\n\nA.sort()\n\ncnt=1\nans=0\nfor n in range(1,N):\n    if A[n]==A[n-1]:\n        cnt+=1\n    else:\n        if cnt%2==1:\n            ans+=1\n        cnt=1\n    if n==N-1 and cnt%2==1:\n        ans+=1\nprint(ans)", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int, A: \"List[int]\"):\n    from collections import Counter    \n    return sum([x%2==1 for x in list(Counter(A).values())])\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print((solve(N, A)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "import collections\nn = int(input())\nx = [int(input()) for i in range(n)]\nc = collections.Counter(x)\ncc = list(c.values())\ncnt = 0\nfor i in range(len(cc)):\n    if cc[i] % 2 == 1:\n        cnt += 1\nprint(cnt)", "from collections import Counter\nn = int(input())\na = [int(input()) for i in range(n)]\nc = Counter(a).values()\nans = 0\nfor i in c:\n    if i % 2 == 1:\n        ans += 1\nprint(ans)", "n=int(input())\na={}\nfor i in range(n):\n  a_=int(input())\n  if a_ not in a:\n    a[a_]=1\n  else:\n    a[a_]+=1\nans=0\nfor i in a:\n  if a[i]%2==1:\n    ans+=1\nprint(ans)", "#20 C - Write and Erase\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\npaper = set()\nfor a in A:\n    if not(a in paper):\n        paper.add(a)\n    else:\n        paper.remove(a)\nprint(len(paper))", "n = int(input())\nsum = 0\nnums = {}\n\nfor _ in range(n):\n    a = input()\n    if a not in nums:\n        nums[a] = 1\n    else:\n        nums[a] += 1\n\nfor i in list(nums.values()):\n    sum += i % 2\n\nprint(sum)\n", "N, *A = map(int, open(0).read().split())\n\nimport collections\n\nc = collections.Counter(A)\n\nprint(sum([1 for x in c.values() if x%2==1]))", "n=int(input())\na=set()\nfor i in range(n):\n  x=int(input())\n  if x in a:\n    a.discard(x)\n  else:\n    a.add(x)\n\nprint(len(a))", "N=int(input())\nd={}\nfor _ in range(N):\n  a=int(input())\n  if a in d:\n    d[a]+=1\n  else:\n    d[a]=1\nans=0\nfor k,v in d.items():\n  ans+=v%2\nprint(ans)", "N = int(input())\nA = [0] * N\nfor i in range(N):\n    A[i] = int(input())\n\nfrom collections import Counter\nc = Counter(A)\ncc = list(c.values())\nans = 0\nfor i in range(len(cc)):\n    if cc[i] % 2 == 1:\n        ans += 1\n\nprint(ans)", "n=int(input())\nd={}\nfor i in range(n):\n  A=int(input())\n  if A not in d:\n    d[A]=1\n  elif d[A]==1:\n    d[A]=0\n  else:\n    d[A]=1\nprint(sum(d.values()))", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep 23 16:58:10 2020\n\n@author: liang\n\"\"\"\n\n\n\"\"\"\n\u3010\u30d1\u30c7\u30a3\u30f3\u30b0\u306f\u30bd\u30fc\u30c8\u5f8c\u3011\n\"\"\"\nN = int(input())\nA = [int(input()) for _ in range(N)]\nA.sort()\nA += [-1]\nans = 0\ncount = 1\nfor i in range(N):\n    #print(count)\n    if A[i] == A[i+1]:\n        #print(\"A\")\n        count += 1\n    else:\n        #print(\"B\")\n        if count%2 == 1:\n            ans += 1\n        count = 1\nprint(ans)", "import collections\nn=int(input())\na=[]\nfor i in range(n):\n   A=int(input()) \n   a.append(A)\nc=collections.Counter(a)\nans=0\nfor i in c:\n    if c[i]%2==1:\n        ans+=1\nprint(ans)", "n=int(input())\n\ncount_dict={}\n\nfor i in range(n):\n    new=int(input())\n    if new in count_dict:\n        count_dict[new]+=1\n    else:\n        count_dict[new]=1\nans=0\nfor i in count_dict.values():\n    if i%2==1:\n        ans+=1\nprint(ans)", "N = int(input())\ndic = {}\n\nfor i in range(N):\n    a = int(input())\n    \n    if a not in dic:\n        dic[a] = 1\n    else:\n        del dic[a]\n\nprint(len(dic))", "import collections\nN = int(input())\nA = []\nfor _ in range(N):\n    A.append(int(input()))\n    \ncnt = collections.Counter(A)\nans = 0\nfor v in cnt.values():\n    if v % 2 != 0:\n        ans += 1\n        \nprint(ans)", "N = int(input())\nA = [int(input()) for i in range(N)]\nA.sort()\n\nans = 0\ncnt = 1\nfor i in range(1, N):\n    if A[i] == A[i-1]:\n        cnt += 1\n    else:\n        if cnt % 2 != 0:\n            ans += 1\n        cnt = 1\nif cnt % 2 != 0:\n    ans += 1\nprint(ans)", "def main():\n    n = int(input())\n    ans = set()\n    for _ in range(n):\n        a = int(input())\n        if a in ans:\n            ans.discard(a)\n        else:\n            ans.add(a)\n\n    print((len(ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\nN=int(input())\nA=[]\n\nfor i in range(N):\n    A.append(int(input()))\n\ncc=collections.Counter(A)\nans=0\nfor nums in list(cc.values()):\n    if nums%2==1:\n        ans+=1\nprint(ans)", "import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: list(map(int, sys.stdin.readline().split()))\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn = ri()\ncnt = 0\nfor v in list(collections.Counter([ri() for _ in range(n)]).values()):\n    if v&1:\n        cnt += 1\nprint(cnt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n = int(input())\na = []\n\nfor i in range(n):\n    a.append(int(input()))\n\na = sorted(a)\n\nhoge = 0\nfoo = 0\nans = 0\n\nfor i in range(n):\n    if i == 0:\n        foo = a[i]\n        hoge = 1\n    elif i == n-1:\n        if foo != a[i]:\n            if hoge == 1:\n                ans += 1\n            ans += 1\n        else:\n            if hoge == 0:\n                ans += 1\n    elif foo == a[i]:\n        hoge = 1-hoge\n    else:\n        if hoge == 1:\n            ans += 1\n        foo = a[i]\n        hoge = 1\n\nprint(ans)\n", "import collections\nn=int(input())\na=[0]*n\nans=0\nfor i in range(n):\n    a[i]=input()\nc=collections.Counter(a)\nl=list(set(a))\nfor i in range(len(l)):\n    if c[l[i]]%2==1:\n        ans+=1\nprint(ans)", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\nA.sort()\n\nans = 0\nprev = -1\ncnt = 0\nfor a in A:\n    if a == prev:\n        cnt += 1\n    else:\n        ans += cnt % 2\n        prev = a\n        cnt = 1\nelse:\n    ans += cnt % 2\n\nprint(ans)", "import collections\nimport numpy as np\nn = int(input())\na = []\nfor _ in range(n):\n    a.append(int(input()))\nans = collections.Counter(a)\nc=list(ans.values())\nc=np.array(c)\nprint(sum(c%2))", "from collections import defaultdict\n\n\nN, *A = list(map(int, open(0).read().split()))\nans = defaultdict(int)\nfor a in A:\n    ans[a] += 1\nprint((sum(v % 2 for v in list(ans.values()))))\n", "import sys\ndef IS(): return sys.stdin.readline().rstrip()\ndef II(): return int(IS())\nfrom functools import partial, reduce\nfrom collections import Counter\n\n\ndef f_chain(*args):\n    return reduce(lambda x, f: f(x), args)\n\ndef main():\n    n = II()\n    aa = [II() for _ in range(n)]\n    c_cnt = Counter(aa).values()\n    f_chain(c_cnt,\n            partial(map, lambda x: 1 if x%2==1 else 0),\n            sum,\n            print)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    n = i_input()\n    dic = {}\n    for i in range(n):\n        a = i_input()\n        dic[a] = dic.get(a,0) + 1\n\n    ans = 0\n\n    for i,k in list(dic.items()):\n        if k % 2 == 1:\n            ans += 1\n    print(ans)\n\n\n\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\na=int(input())\nb=[int(input()) for i in range(a)]\n\nn=collections.Counter(b)\nm,ans=zip(*n.most_common())\nans=[i for i in ans if i%2==1]\nprint(len(ans))", "N = int(input())\nA = [int(input()) for c in range(N)]\nA = sorted(A)\n\ntmp = 1\ncnt = 0\nfor i in range(N):    \n    if i+1<N:\n        if A[i] == A[i+1]:\n            tmp += 1\n        else:\n            cnt += tmp%2\n            tmp = 1\n    else:\n        cnt += tmp%2\n\nprint(cnt)\n", "n = int(input())\ncnt_l = {}\nfor _ in range(n):\n    a = int(input())\n    if a in cnt_l:\n        cnt_l[a] ^= 1\n    else:\n        cnt_l[a] = 1\nprint((sum(cnt_l.values())))\n", "n = int(input())\nlis = [0]*n\nfor i in range(n):\n    lis[i] = int(input())\n\nimport collections\n\nans = 0\nlis = collections.Counter(lis)\n\nfor i in lis.values():\n    if i%2 == 1:\n        ans += 1\n\nprint(ans)", "N = int(input())\nA = [int(input()) for _ in range(N)]\nA.sort()\n\ni = 0\nans = 0\nwhile i < N:\n    tmp = A[i]\n    count = 0\n    while i < N and A[i] == tmp:\n        count += 1\n        i += 1\n    ans += count % 2\n\nprint(ans)\n", "N = int(input())\nA = []\ncount = 1\nans = 0\n\nfor _ in range(N):\n  A.append(int(input()))\n\nA.sort()\n\nfor i in range(N-1):\n  if A[i] == A[i+1]:\n    count += 1\n  else:\n    if count%2 == 1:\n      ans += 1\n    count = 1\nelse:\n  if count%2 == 1:\n    ans += 1\n  else:\n    count = 1\n\nprint(ans)", "from collections import Counter\nprint(sum(x % 2 for x in Counter([int(input())\n                                  for _ in range(int(input()))]).values()))", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(input()) for _ in range(n)]\n\nimport collections\nc = collections.Counter(a)\ncnt = 0\n\nfor i,v in list(c.items()):\n    if v%2 != 0:\n        cnt += 1\nprint(cnt)\n", "from collections import Counter\n\nn = int(input())\nal = list(int(input()) for _ in range(n))\nc = Counter(al)\nans = 0\nfor k, v in c.items():\n    if v%2 != 0:\n        ans += 1\n\nprint(ans)", "from collections import Counter\nwith open(0) as f:\n    N, *A = map(int, f.read().split())\nans = sum(1 for v in Counter(A).values() if v&1)\nprint(ans)", "n = int(input())\nal = []\nfor i in range(n):\n    al.append(int(input()))\n\nal.sort()\nal.append(10**9+1)\ncnt = 1\nans = 0\nfor j in range(n):\n    if al[j] == al[j+1]:\n        cnt += 1\n    elif cnt%2 == 0:\n        cnt = 1\n    elif cnt%2 == 1:\n        cnt = 1\n        ans += 1\nprint(ans)", "import collections\nn=int(input())\nl = [input() for i in range(n)]\nc = collections.Counter(l)\nans = 0\n\nfor x,y in c.items():\n    if y%2 != 0:\n        ans += 1\nprint(ans)", "n = int(input())\na = [int(input()) for _ in range(n)]\nimport collections\ncnt = 0\nb = collections.Counter(a)\nfor k in b:\n    if b[k]%2==1:\n        cnt +=1\nprint(cnt)", "from collections import Counter\n\n\ndef main():\n    n = int(input())\n    data =Counter(int(input()) for _ in range(n))\n    ans = sum(num % 2 != 0 \n              for num in data.values()\n              )\n    print(ans)\n\n\nmain()", "from collections import Counter\nn = int(input())\na = Counter([input() for _ in range(n)])\nans = 0\nfor x in a.values():\n    if x%2!=0: ans += 1\nprint(ans)", "from collections import Counter\n\nn=int(input())\nl=[int(input()) for i in range(n)]\n\nl=Counter(l)\n\ncnt=0\n\nfor i in list(l.values()):\n  if i%2==0:\n    cnt+=1\n    \nprint((len(l)-cnt))\n", "N = int(input())\npaper = set([])\n\nfor _ in range(N):\n    a = int(input())\n    if a in paper:\n        paper.discard(a)\n    else:\n        paper.add(a)\n    \nprint((len(paper)))\n", "from collections import defaultdict\nn = int(input())\nli = []\ns = set()\nfor val in range(n):\n    i = int(input())\n    if i in s:\n        s.remove(i)\n    else:\n        s.add(i)\n\nprint(len(s))", "import sys\n## io ##\ndef IS(): return sys.stdin.readline().rstrip()\ndef II(): return int(IS())\ndef MII(): return list(map(int, IS().split()))\nfrom functools import partial, reduce\nfrom collections import Counter\n#======================================================#\ndef f_chain(*args):\n    return reduce(lambda x, f: f(x), args)\ndef is_odd(n):\n    return n%2==1\n\ndef main():\n    n = II()\n    aa = [II() for _ in range(n)]\n    c = Counter(aa)\n    f_chain(c.values(),\n            partial(filter, is_odd),\n            list,\n            len,\n            print,\n    )\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(int(input()))\ns=set()\nfor i in range(n):\n    s^= {input()}\nprint(len(s))", "\nfrom collections import Counter\n\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\nL = Counter(A)\n\nprint(sum( 1 for c in L.values() if c%2 ))", "n = int(input())\n\nd = {}\nfor i in range(n):\n    a = int(input())\n    if a in d:\n        d[a] ^= 1\n    else:\n        d[a] = 1\nprint(sum(d.values()))", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\npaper = set()\nfor a in A:\n    if a in paper:\n        paper.remove(a)\n    else:\n        paper.add(a)\nans = len(paper)\nprint(ans)", "import collections\nn=int(input())\na=[int(input()) for _ in range(n)]\nb=collections.Counter(a)\nans=0\nfor i in b.keys():\n  if b[i]%2:\n    ans+=1\nprint(ans)"]