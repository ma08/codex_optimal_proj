["\n\nfrom collections import defaultdict\nimport sys\n\ndef get_input(source=sys.stdin):\n    \"\"\"\n    source: file-like object (stream); defaults to sys.stdin\n    returns: a tuple of strings\n    \"\"\"\n    return tuple(source.readline().strip() for _ in range(2))\n\ndef process(s):\n    \"\"\"\n    s: a string of lowercase letters\n    returns: a tuple of strings\n    \"\"\"\n    #base case\n    if len(s) == 1:\n        return ('YES', '0')\n    \n    #sort the string\n    sorted_s = sorted(s)\n    #create a defaultdict to keep track of the indices of each letter\n    letters = defaultdict(list)\n    for i, c in enumerate(sorted_s):\n        letters[c].append(i)\n    #create a list to keep track of the colors\n    colors = ['0'] * len(s)\n    \n    #check whether the sorted string is in alphabetical order\n    for i, c in enumerate(sorted_s):\n        #if the letter is not in alphabetical order, then the string can be sorted with swaps\n        if c != s[i]:\n            break\n    else:\n        #if the string is already in alphabetical order, then we don't need to do anything\n        return ('YES', ''.join(colors))\n    \n    #if the string is not in alphabetical order, then we need to change the colors of some letters\n    #we will start by changing the colors of the first letter that is not in alphabetical order\n    #we change the colors of all the letters that are before the letter in the sorted string\n    for i in range(letters[c][0]):\n        colors[i] = '1'\n    \n    #now we need to check whether the string can be sorted with swaps after changing the colors\n    #we will start by checking the first letter that is not in alphabetical order\n    #we need to check whether the letter is in the right position\n    if letters[c][0] != i:\n        #if the letter is not in the right position, then we need to change the color of the letter that is in the right position\n        #we will change the color of the letter that is in the right position to the opposite color\n        colors[letters[c][0]] = '1' if colors[letters[c][0]] == '0' else '0'\n        #we will change the color of the letter that is in the wrong position to the opposite color\n        colors[i] = '1' if colors[i] == '0' else '0'\n    \n    #now we need to check the rest of the letters\n    for i, c in enumerate(sorted_s):\n        #if the letter is not in the right position, then we need to change the color of the letter that is in the right position\n        if letters[c][0] != i:\n            #if the letter is not in the right position, then we need to change the color of the letter that is in the right position\n            #we will change the color of the letter that is in the right position to the opposite color\n            colors[letters[c][0]] = '1' if colors[letters[c][0]] == '0' else '0'\n            #we will change the color of the letter that is in the wrong position to the opposite color\n            colors[i] = '1' if colors[i] == '0' else '0'\n        \n        #we need to check if the letter that is in the right position is in alphabetical order\n        if c != s[i]:\n            #if the letter is not in alphabetical order, then we need to change the color of the letter that is in the wrong position\n            #we will change the color of the letter that is in the wrong position to the opposite color\n            colors[i] = '1' if colors[i] == '0' else '0'\n            #we will change the color of the letter that is in the right position to the opposite color\n            colors[letters[c][0]] = '1' if colors[letters[c][0]] == '0' else '0'\n        \n        #we will remove the letter from the list of indices\n        letters[c].pop(0)\n    \n    #if we reach this point, then the string can be sorted with swaps\n    return ('YES', ''.join(colors))\n\ndef print_answer(answer):\n    \"\"\"\n    answer: a tuple of strings\n    This function prints the first element of answer and then prints the second element of answer in a separate line\n    \"\"\"\n    print(answer[0])\n    print(answer[1])\n\ndef main():\n    s = get_input()\n    answer = process(s[1])\n    print_answer(answer)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nn = int(input())\ns = input()\n\nif \"\".join(sorted(s)) == s:\n    print(\"YES\")\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"\".join(str(int(s[i] != s[i+1])) for i in range(n-1)))", "\n\ndef main():\n    \"\"\"\n    The main function for this program.\n    \"\"\"\n\n    # Get input.\n    length = int(input())\n    string = input()\n\n    # Print the output.\n    print(\"YES\")\n    print(\"\".join([\"0\"] * length))\n\nif __name__ == \"__main__\":\n    main()", "\n\n#-----Solution-----\n\nn = int(input())\ns = input()\n\nif n == 1:\n    print(\"YES\")\n    print(\"0\")\nelse:\n    if n == 2:\n        if s[0] > s[1]:\n            print(\"YES\")\n            print(\"10\")\n        else:\n            print(\"YES\")\n            print(\"00\")\n    else:\n        if s[0] > s[1]:\n            print(\"YES\")\n            print(\"1\", end='')\n            for i in range(1, n - 1):\n                if s[i] <= s[i - 1]:\n                    print(\"1\", end='')\n                else:\n                    print(\"0\", end='')\n            if s[n - 1] <= s[n - 2]:\n                print(\"1\")\n            else:\n                print(\"0\")\n        else:\n            print(\"YES\")\n            print(\"0\", end='')\n            for i in range(1, n - 1):\n                if s[i] <= s[i - 1]:\n                    print(\"1\", end='')\n                else:\n                    print(\"0\", end='')\n            if s[n - 1] <= s[n - 2]:\n                print(\"1\")\n            else:\n                print(\"0\")", "\n\ndef solve(s):\n    n = len(s)\n    res = []\n    for i in range(n):\n        if i == 0:\n            res.append(0)\n        elif s[i] >= s[i-1]:\n            res.append(res[i-1])\n        else:\n            res.append(1 - res[i-1])\n    return res\n\nn = int(input())\ns = input()\nres = solve(s)\nif res is None:\n    print('NO')\nelse:\n    print('YES')\n    print(''.join(map(str, res)))", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    if s == ''.join(sorted(s)):\n        return 'YES\\n0' * n\n    if s == ''.join(sorted(s)[::-1]):\n        return 'YES\\n1' * n\n    if s[0] == s[-1]:\n        return 'NO'\n    if s[0] < s[-1]:\n        return 'YES\\n0' * n\n    return 'YES\\n1' * n\n\nif __name__ == '__main__':\n    print(main())", "\n\nimport sys\n\ndef is_sorted(string):\n    for i in range(len(string)-1):\n        if string[i] > string[i+1]:\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    s = input()\n    if is_sorted(s):\n        print('YES')\n        print('0'*n)\n        return\n    s = list(s)\n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            s[i] = '0'\n            s[i+1] = '1'\n            break\n    if is_sorted(s):\n        print('YES')\n        print(''.join(s))\n        return\n    print('NO')\n\nif __name__ == '__main__':\n    main()"]