2022-04-13 17:58:52.657398 """
There is a staircase with N steps. Takahashi is now standing at the foot of the stairs, that is, on the 0-th step.
He can climb up one or two steps at a time.
However, the treads of the a_1-th, a_2-th, a_3-th, \ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.
How many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps?
Find the count modulo 1\ 000\ 000\ 007.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - 0 \leq M \leq N-1
 - 1 \leq a_1 < a_2 <  ...  < a_M \leq N-1

-----Input-----
Input is given from Standard Input in the following format:
N M
a_1
a_2
 .
 .
 .
a_M

-----Output-----
Print the number of ways to climb up the stairs under the condition, modulo 1\ 000\ 000\ 007.

-----Sample Input-----
6 1
3

-----Sample Output-----
4

There are four ways to climb up the stairs, as follows:
 - 0 \to 1 \to 2 \to 4 \to 5 \to 6
 - 0 \to 1 \to 2 \to 4 \to 6
 - 0 \to 2 \to 4 \to 5 \to 6
 - 0 \to 2 \to 4 \to 6
"""
2022-04-13 17:58:52.657407 --------------------------
2022-04-13 17:59:10.903011 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\nN, M = map(int, input().split())\nbroken = set()\nfor i in range(M):\n    broken.add(int(input()))\n\n# dp[i]: the number of ways to climb up to the i-th step\ndp = [0] * (N+1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, N+1):\n    if i in broken:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [int(input()) for i in range(m)]\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        if i in a:\n            continue\n        if i == 1:\n            dp[i] = 1\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    broken_steps = []\n    for _ in range(m):\n        broken_steps.append(int(input()))\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if i not in broken_steps:\n            dp[i] = dp[i-1] + dp[i-2]\n        else:\n            dp[i] = 0\n    print(dp[n] % 1000000007)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\nN = 6\nM = 1\nA = [3]\n\ndp = [0] * (N+1)\n\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, N+1):\n    if i in A:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\nbroken = [int(sys.stdin.readline().strip()) for _ in range(m)]\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(n + 1):\n    if i not in broken:\n        if i + 1 <= n:\n            dp[i + 1] += dp[i]\n        if i + 2 <= n:\n            dp[i + 2] += dp[i]\n\nprint(dp[-1] % 1000000007)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, [input() for _ in range(m)]))\n\ndp = [0 for _ in range(n+1)]\ndp[0] = 1\n\nfor i in range(1, n+1):\n    if i not in a:\n        dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[-1] % 1000000007)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# \u4ee5\u4e0b\u306fTLE\nn, m = map(int, input().split())\nbroken_stairs = [int(input()) for _ in range(m)]\n\n# n\u6bb5\u968e\u6bb5\u3092\u767b\u308b\u5834\u5408\u306e\u6570\u3092\u8fd4\u3059\ndef count_climb(n, broken_stairs):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        if 2 in broken_stairs:\n            return 1\n        else:\n            return 2\n    elif n in broken_stairs:\n        return count_climb(n-1, broken_stairs)\n    else:\n        return count_climb(n-1, broken_stairs) + count_climb(n-2, broken_stairs)\n\nprint(count_climb(n, broken_stairs) % 1000000007)"
    }
  ],
  "created": 1649872732,
  "id": "cmpl-4wbYS7q026zsqPrXYc8lLNx2IIfWV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 17:59:10.903330 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\nN, M = map(int, input().split())\nbroken = set()\nfor i in range(M):\n    broken.add(int(input()))\n\n# dp[i]: the number of ways to climb up to the i-th step\ndp = [0] * (N+1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, N+1):\n    if i in broken:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])"
}
2022-04-13 17:59:10.903369 REASON stop
2022-04-13 17:59:10.906745 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [int(input()) for i in range(m)]\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        if i in a:\n            continue\n        if i == 1:\n            dp[i] = 1\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 17:59:10.906899 REASON stop
2022-04-13 17:59:10.934391 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    broken_steps = []\n    for _ in range(m):\n        broken_steps.append(int(input()))\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if i not in broken_steps:\n            dp[i] = dp[i-1] + dp[i-2]\n        else:\n            dp[i] = 0\n    print(dp[n] % 1000000007)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 17:59:10.934505 REASON stop
2022-04-13 17:59:10.954034 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\nN = 6\nM = 1\nA = [3]\n\ndp = [0] * (N+1)\n\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, N+1):\n    if i in A:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])"
}
2022-04-13 17:59:10.954147 REASON stop
2022-04-13 17:59:10.973933 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\nbroken = [int(sys.stdin.readline().strip()) for _ in range(m)]\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(n + 1):\n    if i not in broken:\n        if i + 1 <= n:\n            dp[i + 1] += dp[i]\n        if i + 2 <= n:\n            dp[i + 2] += dp[i]\n\nprint(dp[-1] % 1000000007)"
}
2022-04-13 17:59:10.974053 REASON stop
2022-04-13 17:59:10.990382 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, [input() for _ in range(m)]))\n\ndp = [0 for _ in range(n+1)]\ndp[0] = 1\n\nfor i in range(1, n+1):\n    if i not in a:\n        dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[-1] % 1000000007)"
}
2022-04-13 17:59:10.990492 REASON stop
2022-04-13 17:59:11.006726 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# \u4ee5\u4e0b\u306fTLE\nn, m = map(int, input().split())\nbroken_stairs = [int(input()) for _ in range(m)]\n\n# n\u6bb5\u968e\u6bb5\u3092\u767b\u308b\u5834\u5408\u306e\u6570\u3092\u8fd4\u3059\ndef count_climb(n, broken_stairs):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        if 2 in broken_stairs:\n            return 1\n        else:\n            return 2\n    elif n in broken_stairs:\n        return count_climb(n-1, broken_stairs)\n    else:\n        return count_climb(n-1, broken_stairs) + count_climb(n-2, broken_stairs)\n\nprint(count_climb(n, broken_stairs) % 1000000007)"
}
2022-04-13 17:59:11.006911 REASON stop
