["\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\nN = 6\nM = 1\nA = [3]\n\ndp = [0] * (N+1)\n\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, N+1):\n    if i in A:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])", "\n\nn, m = map(int, input().split())\na = list(map(int, [input() for _ in range(m)]))\n\ndp = [0 for _ in range(n+1)]\ndp[0] = 1\n\nfor i in range(1, n+1):\n    if i not in a:\n        dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[-1] % 1000000007)", "\n\n# \u4ee5\u4e0b\u306fTLE\nn, m = map(int, input().split())\nbroken_stairs = [int(input()) for _ in range(m)]\n\n# n\u6bb5\u968e\u6bb5\u3092\u767b\u308b\u5834\u5408\u306e\u6570\u3092\u8fd4\u3059\ndef count_climb(n, broken_stairs):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        if 2 in broken_stairs:\n            return 1\n        else:\n            return 2\n    elif n in broken_stairs:\n        return count_climb(n-1, broken_stairs)\n    else:\n        return count_climb(n-1, broken_stairs) + count_climb(n-2, broken_stairs)\n\nprint(count_climb(n, broken_stairs) % 1000000007)", "\nN, M = map(int, input().split())\nbroken = set()\nfor i in range(M):\n    broken.add(int(input()))\n\n# dp[i]: the number of ways to climb up to the i-th step\ndp = [0] * (N+1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, N+1):\n    if i in broken:\n        dp[i] = 0\n    else:\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n\nprint(dp[N])", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [int(input()) for i in range(m)]\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        if i in a:\n            continue\n        if i == 1:\n            dp[i] = 1\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    broken_steps = []\n    for _ in range(m):\n        broken_steps.append(int(input()))\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if i not in broken_steps:\n            dp[i] = dp[i-1] + dp[i-2]\n        else:\n            dp[i] = 0\n    print(dp[n] % 1000000007)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\nbroken = [int(sys.stdin.readline().strip()) for _ in range(m)]\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(n + 1):\n    if i not in broken:\n        if i + 1 <= n:\n            dp[i + 1] += dp[i]\n        if i + 2 <= n:\n            dp[i + 2] += dp[i]\n\nprint(dp[-1] % 1000000007)"]