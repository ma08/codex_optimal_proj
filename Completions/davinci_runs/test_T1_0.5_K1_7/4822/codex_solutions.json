["\n\nimport sys\n\n# read input\nr, s, k = map(int, sys.stdin.readline().strip().split())\npicture = []\nfor line in sys.stdin:\n    picture.append(list(line.strip()))\n\n# find the maximum number of flies that can be killed\nmax_flies = 0\nfor i in range(r-k+1):\n    for j in range(s-k+1):\n        count = 0\n        for x in range(i, i+k):\n            for y in range(j, j+k):\n                if picture[x][y] == '*':\n                    count += 1\n        if count > max_flies:\n            max_flies = count\n            racket = [i, j]\n\n# print the maximum number of flies that can be killed\nprint max_flies\n\n# print the picture with the racket\nfor i in range(r):\n    for j in range(s):\n        if i == racket[0] and j == racket[1]:\n            print '+',\n        elif i == racket[0] and j == racket[1]+k-1:\n            print '+',\n        elif i == racket[0]+k-1 and j == racket[1]:\n            print '+',\n        elif i == racket[0]+k-1 and j == racket[1]+k-1:\n            print '+',\n        elif i == racket[0] and j > racket[1] and j < racket[1]+k-1:\n            print '-',\n        elif i == racket[0]+k-1 and j > racket[1] and j < racket[1]+k-1:\n            print '-',\n        elif j == racket[1] and i > racket[0] and i < racket[0]+k-1:\n            print '|',\n        elif j == racket[1]+k-1 and i > racket[0] and i < racket[0]+k-1:\n            print '|',\n        else:\n            print picture[i][j],\n    print", "\n\n#gets the racket's area\ndef getRacket(R, S, K):\n    #finds the racket's width\n    for i in range(S-K+1):\n        for j in range(S-K+1):\n            if (i, j) == (0, 0):\n                width = 1\n            else:\n                width = 0\n            for k in range(K):\n                if board[0][i+k] == '*':\n                    width += 1\n            #finds the racket's height\n            for k in range(R-K+1):\n                if board[k][0] == '*':\n                    height = 1\n                else:\n                    height = 0\n                for l in range(K):\n                    if board[k+l][0] == '*':\n                        height += 1\n                #finds the racket's area\n                if width * height > maxArea:\n                    maxArea = width * height\n                    maxWidth = width\n                    maxHeight = height\n                    maxX = i\n                    maxY = j\n\n#marks the racket in the board\ndef markRacket(maxX, maxY, maxWidth, maxHeight, K):\n    for i in range(K):\n        board[maxY][maxX+i] = '-'\n        board[maxY+K-1][maxX+i] = '-'\n    for i in range(K):\n        board[maxY+i][maxX] = '|'\n        board[maxY+i][maxX+K-1] = '|'\n    board[maxY][maxX] = '+'\n    board[maxY][maxX+K-1] = '+'\n    board[maxY+K-1][maxX] = '+'\n    board[maxY+K-1][maxX+K-1] = '+'\n\n#gets the board\nR, S, K = [int(x) for x in input().split()]\nboard = []\nfor i in range(R):\n    board.append(list(input()))\n\n#marks the racket\nmaxArea = 0\ngetRacket(R, S, K)\nmarkRacket(maxX, maxY, maxWidth, maxHeight, K)\n\n#prints the answers\nprint(maxWidth*maxHeight)\nfor i in board:\n    for j in i:\n        print(j, end='')\n    print()", "\n\nfrom sys import stdin\n\nR, S, K = map(int, stdin.readline().split())\nwindow = [stdin.readline().strip() for _ in range(R)]\n\ndef find_max_flies(window, K):\n    max_flies = 0\n    max_flies_row = None\n    max_flies_col = None\n    for row in range(R):\n        for col in range(S):\n            if window[row][col] == '.':\n                continue\n            num_flies = 0\n            for i in range(-K // 2, K // 2):\n                for j in range(-K // 2, K // 2):\n                    if 0 <= row + i < R and 0 <= col + j < S:\n                        num_flies += window[row + i][col + j] == '*'\n            if num_flies > max_flies:\n                max_flies = num_flies\n                max_flies_row = row\n                max_flies_col = col\n    return max_flies, max_flies_row, max_flies_col\n\nmax_flies, max_flies_row, max_flies_col = find_max_flies(window, K)\nprint(max_flies)\n\nfor row in range(R):\n    for col in range(S):\n        if max_flies_row - K // 2 <= row <= max_flies_row + K // 2 and max_flies_col - K // 2 <= col <= max_flies_col + K // 2:\n            if row == max_flies_row - K // 2 or row == max_flies_row + K // 2 or col == max_flies_col - K // 2 or col == max_flies_col + K // 2:\n                print('+', end='')\n            else:\n                print('|', end='')\n        else:\n            print(window[row][col], end='')\n    print()", "\n\nR, S, K = map(int, input().split())\n\n# read the picture\npicture = []\nfor i in range(R):\n    picture.append(list(input()))\n\n# find the flies\nflies = []\nfor i in range(R):\n    for j in range(S):\n        if picture[i][j] == '*':\n            flies.append((i, j))\n\n# find the most flies that can be killed in one shot\nmax_flies = 0\nmax_pos = None\n\nfor i in range(R - K + 1):\n    for j in range(S - K + 1):\n        # count the flies\n        flies_in_shot = 0\n        for x, y in flies:\n            if i <= x < i + K and j <= y < j + K:\n                flies_in_shot += 1\n\n        # update the max\n        if flies_in_shot > max_flies:\n            max_flies = flies_in_shot\n            max_pos = (i, j)\n\n# print the results\nprint(max_flies)\n\nfor i in range(max_pos[0]):\n    print(''.join(picture[i]))\n\nprint('+' + '-' * (K - 2) + '+' + ''.join(picture[max_pos[0]][max_pos[1] + K:]))\n\nfor i in range(max_pos[0] + 1, max_pos[0] + K - 1):\n    print('|' + ''.join(picture[i][max_pos[1]:max_pos[1] + K - 1]) + '|' + ''.join(picture[i][max_pos[1] + K:]))\n\nprint('+' + '-' * (K - 2) + '+' + ''.join(picture[max_pos[0] + K - 1][max_pos[1] + K:]))\n\nfor i in range(max_pos[0] + K, R):\n    print(''.join(picture[i]))", "\n\nif __name__ == '__main__':\n    R, S, K = map(int, input().split())\n    picture = []\n    for _ in range(R):\n        picture.append(input())\n\n    # COUNTING\n    max_count = 0\n    for r in range(R):\n        for s in range(S):\n            if picture[r][s] == '*':\n                # Counting\n                # Horizontal\n                count = 1\n                for k in range(1, K):\n                    if s+k < S and picture[r][s+k] == '*':\n                        count += 1\n                # Vertical\n                for k in range(1, K):\n                    if r+k < R and picture[r+k][s] == '*':\n                        count += 1\n                if count > max_count:\n                    max_count = count\n                    x = s\n                    y = r\n\n    # PRINTING\n    for r in range(R):\n        for s in range(S):\n            if r == y and s >= x and s < x+K:\n                print('-', end='')\n            elif r > y and r < y+K and s == x:\n                print('|', end='')\n            elif r == y and s == x:\n                print('+', end='')\n            else:\n                print(picture[r][s], end='')\n        print()", "\n\n#parsing input\nR, S, K = [int(x) for x in raw_input().split()]\n\n#creating a list of lists to represent the window\nwindow = []\nfor i in xrange(R):\n    window.append([x for x in raw_input()])\n\n#function to count flies in a given square\ndef count_flies(x, y, k):\n    #initializing the count\n    count = 0\n    #iterating over the square\n    for i in xrange(y, y+k):\n        for j in xrange(x, x+k):\n            #if a fly is found, increase the count\n            if window[i][j] == \"*\":\n                count += 1\n    return count\n\n#function to print the window\ndef print_window():\n    for i in xrange(R):\n        print \"\".join(window[i])\n\n#function to print the racket\ndef print_racket(x, y, k):\n    for i in xrange(y, y+k):\n        for j in xrange(x, x+k):\n            if i == y or i == y+k-1:\n                window[i][j] = \"-\"\n            elif j == x or j == x+k-1:\n                window[i][j] = \"|\"\n\n#maximal number of flies\nmax_flies = 0\n#coordinates of the square with maximal number of flies\nmax_x = 0\nmax_y = 0\n\n#iterating over the window\nfor i in xrange(R-K+1):\n    for j in xrange(S-K+1):\n        #counting flies in the current square\n        flies = count_flies(j, i, K)\n        #if the current number of flies is larger than the maximal number of flies so far\n        if flies > max_flies:\n            #update the maximal number of flies and the coordinates of the square with maximal number of flies\n            max_flies = flies\n            max_x = j\n            max_y = i\n\n#print the maximal number of flies\nprint max_flies\n#print the racket\nprint_racket(max_x, max_y, K)\n#print the window with the racket\nprint_window()", "\n\ndef main():\n    \"\"\"Young Marin\"\"\"\n    row, col, side = [int(i) for i in input().split()]\n    picture = [input() for _ in range(row)]\n    # print(picture)\n    count = 0\n    for i in range(row-side+1):\n        for j in range(col-side+1):\n            temp = 0\n            for k in range(i, i+side):\n                for l in range(j, j+side):\n                    if picture[k][l] == \"*\":\n                        temp += 1\n            if temp > count:\n                count = temp\n                pos = [i, j]\n    print(count)\n    for i in range(row):\n        for j in range(col):\n            if i == pos[0] and j in range(pos[1], pos[1]+side):\n                print(\"-\", end=\"\")\n            elif i in range(pos[0], pos[0]+side) and j == pos[1]:\n                print(\"|\", end=\"\")\n            elif i == pos[0] and j == pos[1]:\n                print(\"+\", end=\"\")\n            elif i in range(pos[0], pos[0]+side) and j == pos[1]+side-1:\n                print(\"|\", end=\"\")\n            elif i == pos[0]+side-1 and j == pos[1]:\n                print(\"+\", end=\"\")\n            elif i == pos[0]+side-1 and j in range(pos[1], pos[1]+side):\n                print(\"-\", end=\"\")\n            elif i == pos[0]+side-1 and j == pos[1]+side-1:\n                print(\"+\", end=\"\")\n            else:\n                print(picture[i][j], end=\"\")\n        print()\n\nmain()"]