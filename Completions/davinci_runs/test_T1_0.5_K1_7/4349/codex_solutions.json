["", "\n\n#-----Solution-----\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nmin_day = 0\nfor i in range(m):\n    day, type = map(int, input().split())\n    min_day = max(min_day, day + (k[type - 1] - 1) // 2)\n\nprint(min_day + sum(k))", "\n\n# SOLUTION\nimport sys\nfrom collections import defaultdict\nread = sys.stdin.readline\n\nn, m = map(int, read().split())\nk = list(map(int, read().split()))\n\nsales = defaultdict(int)\nfor i in range(m):\n    d, t = map(int, read().split())\n    sales[d] += k[t-1]\n\n# print(sales)\n\ndays = 0\nfor d in sorted(sales.keys()):\n    if sales[d] == 0:\n        continue\n    days += 1\n    for i in range(d, max(sales.keys())+1):\n        sales[i] -= sales[d]\n    sales[d] = 0\n\n# print(sales)\n\ndays += sum(sales.values())//2 + sum(sales.values())%2\n\nprint(days)", "\n\n# n, m = map(int, input().split())\n# k = list(map(int, input().split()))\n#\n# d, t = [], []\n# for i in range(m):\n#     d_t = list(map(int, input().split()))\n#     d.append(d_t[0])\n#     t.append(d_t[1])\n#\n# day = 0\n# while True:\n#     if sum(k) == 0:\n#         break\n#\n#     if day in d:\n#         index = d.index(day)\n#         t_index = t[index]\n#         if k[t_index-1] > 0:\n#             k[t_index-1] -= 1\n#\n#     for i in range(len(k)):\n#         if k[i] > 0:\n#             k[i] -= 1\n#\n#     day += 1\n#\n# print(day)\n\n# \uc815\ub2f5\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nd, t = [], []\nfor i in range(m):\n    d_t = list(map(int, input().split()))\n    d.append(d_t[0])\n    t.append(d_t[1])\n\nday = 0\nwhile True:\n    if sum(k) == 0:\n        break\n\n    if day in d:\n        index = d.index(day)\n        t_index = t[index]\n        if k[t_index-1] > 0:\n            k[t_index-1] -= 1\n\n    for i in range(len(k)):\n        if k[i] > 0:\n            k[i] -= 1\n\n    day += 1\n\nprint(day)", "\n\nfrom sys import stdin\n\ndef readLine():\n\treturn stdin.readline().strip()\n\ndef readInts():\n\treturn list(map(int, readLine().split()))\n\ndef main():\n\tn, m = readInts()\n\tk = readInts()\n\ts = [0] * (n + 1)\n\tfor i in range(m):\n\t\td, t = readInts()\n\t\ts[t] = max(s[t], d)\n\tans = 0\n\tfor i in range(1, n + 1):\n\t\tans += (k[i - 1] + 1) // 2\n\t\tif k[i - 1] % 2 == 1:\n\t\t\tans = max(ans, s[i] + 1)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()", "\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\n# Requests\nrequests = []\nfor i in range(m):\n    d, t = map(int, input().split())\n    requests.append((d, t))\n\n# Sort requests\nrequests.sort()\n\n# Calculate the minimum number of days needed for each type of microtransaction\ndays = [0] * n\nfor i in range(n):\n    if k[i] == 0:\n        continue\n\n    # Calculate the minimum number of days needed for each sale\n    sales = []\n    for j in range(m):\n        if requests[j][1] == i + 1:\n            sales.append(requests[j][0])\n\n    if len(sales) == 0:\n        days[i] = 2 * k[i]\n        continue\n\n    # Calculate the minimum number of days needed for each sale\n    sales_days = [0] * len(sales)\n    for j in range(len(sales)):\n        sales_days[j] = 2 * (sales[j] - 1)\n        if j > 0:\n            sales_days[j] += sales_days[j - 1]\n        if j > 1:\n            sales_days[j] += sales_days[j - 2]\n\n    # Calculate the minimum number of days needed for each type of microtransaction\n    days[i] = 2 * sales[0] - 1\n    if len(sales) > 1:\n        days[i] += sales_days[-1]\n\n# Calculate the minimum number of days needed for all microtransactions\ndays_total = max(days)\nprint(days_total)", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d = [0] * (max(n, m) + 1)\n    for i in range(m):\n        d_i, t_i = map(int, input().split())\n        d[t_i] = max(d[t_i], d_i)\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, (k[i - 1] + 1) // 2 + d[i])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"]