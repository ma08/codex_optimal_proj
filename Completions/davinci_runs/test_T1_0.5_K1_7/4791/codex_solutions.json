["\n\ndef main():\n    # Read input\n    s = [int(x) for x in input().split()]\n    s.sort()\n\n    # Calculate maximum area\n    area = 0\n    for i in range(4):\n        for j in range(i+1, 4):\n            for k in range(j+1, 4):\n                for l in range(k+1, 4):\n                    a = s[i]\n                    b = s[j]\n                    c = s[k]\n                    d = s[l]\n                    if a+b>c and a+c>b and b+c>a:\n                        area = max(area, (a+b+c+d)*(a+b+c-d)*(a+b-c+d)*(-a+b+c+d)/16)\n\n    # Print answer\n    print(area)\n\nif __name__ == \"__main__\":\n    main()", "\n\n#----Solution-----\n\n#Input\nsides = input()\nsides = sides.split()\nsides = [int(i) for i in sides]\n\n#Find the maximum area of a quadrilateral with side lengths s1, s2, s3, s4\ndef max_area(s1, s2, s3, s4):\n    #The maximum area is determined by the two largest side lengths\n    #The two largest side lengths are also the two sides of a rectangle with the maximum area\n    #The two remaining sides are the base and height of the rectangle\n    #The maximum area is thus (s1*s2)/2\n    s1, s2, s3, s4 = sorted([s1, s2, s3, s4])\n    return (s1*s2)/2\n\n#Output\nprint(max_area(sides[0], sides[1], sides[2], sides[3]))", "\n\nimport math\n\ndef main():\n\ts = list(map(int, input().split()))\n\tss = sum(s)\n\tp = ss/2\n\tarea = math.sqrt((p-s[0])*(p-s[1])*(p-s[2])*(p-s[3]))\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()", "\n\nimport sys\nimport math\n\n# Grab the side lengths\ns1, s2, s3, s4 = [int(x) for x in sys.stdin.readline().split(' ')]\n\n# Use Heron's formula to compute the area\ndef area(s1, s2, s3):\n    p = (s1 + s2 + s3) / 2\n    return math.sqrt(p * (p - s1) * (p - s2) * (p - s3))\n\n# Compute the area of the triangle formed by the three sides given\ndef areaTriangle(s1, s2, s3):\n    return area(s1, s2, s3)\n\n# Compute the area of the quadrilateral formed by the four sides given\ndef areaQuadrilateral(s1, s2, s3, s4):\n    # Compute the height of the quadrilateral\n    h = (2 * areaTriangle(s1, s2, s3)) / s4\n\n    # Compute the area of the quadrilateral\n    return (s4 * h) / 2\n\n# Compute the maximum area of a quadrilateral formed by the given side lengths\ndef maxArea(s1, s2, s3, s4):\n    maxArea = 0\n    for i in range(1, 4):\n        area = areaQuadrilateral(s1, s2, s3, s4)\n        if area > maxArea:\n            maxArea = area\n        s1, s2, s3, s4 = s2, s3, s4, s1\n    return maxArea\n\nprint(maxArea(s1, s2, s3, s4))", "\n\ndef main():\n    s = list(map(int, input().split()))\n    s.sort()\n    x = s[0]\n    y = s[1]\n    z = s[2]\n    w = s[3]\n    if x + y > w or x + z > y + w:\n        print((x + y + z + w) / 4)\n    else:\n        print((x + y + z + w - 2 * max(x, y)) / 4)\n\nmain()", "\n\ndef main():\n    # read input\n    s = list(map(int, input().split()))\n\n    # calculate area\n    s.sort()\n    a = (s[0] + s[1] + s[2] + s[3]) / 2\n    area = (a - s[0]) * (a - s[1]) * (a - s[2]) * (a - s[3])\n    area = (area * 4 * a * a) ** 0.5\n\n    # print area\n    print(area)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    # read input\n    sides = [int(x) for x in input().split()]\n    assert len(sides) == 4\n    assert 1 <= sides[0] <= 1000\n    assert 1 <= sides[1] <= 1000\n    assert 1 <= sides[2] <= 1000\n    assert 1 <= sides[3] <= 1000\n    assert 2*sides[0] < sum(sides)\n    assert 2*sides[1] < sum(sides)\n    assert 2*sides[2] < sum(sides)\n    assert 2*sides[3] < sum(sides)\n\n    # solve problem\n    max_area = 0\n    for i in range(4):\n        # rotate sides\n        sides = sides[1:] + sides[0:1]\n\n        # find area of triangle with largest base\n        max_base = 0\n        max_base_index = 0\n        for j in range(3):\n            if sides[j] > max_base:\n                max_base = sides[j]\n                max_base_index = j\n        assert max_base > 0\n\n        # find area of triangle with largest height\n        max_height = 0\n        max_height_index = 0\n        for j in range(3):\n            if j != max_base_index:\n                height = sides[j]\n                base = sides[3]\n                side = sides[3-j]\n                area = area_of_triangle(height, base, side)\n                if area > max_height:\n                    max_height = area\n                    max_height_index = j\n        assert max_height > 0\n\n        # find area of trapezoid\n        height = sides[max_height_index]\n        base1 = sides[3]\n        base2 = sides[3-max_height_index]\n        area = area_of_trapezoid(height, base1, base2)\n        if area > max_area:\n            max_area = area\n\n    # print answer\n    print(max_area)\n\ndef area_of_triangle(height, base, side):\n    assert height > 0\n    assert base > 0\n    assert side > 0\n    assert height + base > side\n    assert base + side > height\n    assert side + height > base\n    s = (height + base + side)/2\n    return (s*(s-height)*(s-base)*(s-side))**0.5\n\ndef area_of_trapezoid(height, base1, base2):\n    assert height > 0\n    assert base1 > 0\n    assert base2 > 0\n    return (base1 + base2)*height/2\n\nif __name__ == \"__main__\":\n    main()"]