["\n\nt = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    k += 1\n    count = 0\n    if s[0] == '0':\n        count += 1\n        if k > 1:\n            s = s[1:]\n    for i in range(len(s)-1):\n        if s[i] == '1':\n            if i+k < len(s):\n                s = s[:i+k] + '0'*(len(s)-i-k)\n            else:\n                s = s[:i+k]\n        if s[i] == '0':\n            if s[i+1] == '0':\n                count += 1\n            else:\n                if i+k < len(s):\n                    s = s[:i+k] + '0'*(len(s)-i-k)\n                else:\n                    s = s[:i+k]\n    if s[-1] == '0':\n        count += 1\n    print(count)", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        t, k = [int(x) for x in sys.stdin.readline().split()]\n        s = sys.stdin.readline()\n        print(solve(t, k, s))\n\ndef solve(t, k, s):\n    if k == 0:\n        return sum(map(lambda x: int(x == '0'), s))\n    if k == 1:\n        return sum(map(lambda x: int(x == '0'), s)) - 1\n\n    free = 0\n    for i in range(k):\n        if s[i] == '0':\n            free += 1\n        if s[t - 1 - i] == '0':\n            free += 1\n    for i in range(k, t - k):\n        if s[i] == '0':\n            free += 1\n\n    return free\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n, k = map(int, sys.stdin.readline().split())\n        s = sys.stdin.readline()\n        if k == 1:\n            print(n - s.count('1'))\n        else:\n            count = 0\n            for j in range(n):\n                if s[j] == '1':\n                    if j + k + 1 < n and s[j + k + 1] == '0':\n                        s = s[:j + k + 1] + '1' + s[j + k + 2:]\n                        count += 1\n                    if j - k - 1 >= 0 and s[j - k - 1] == '0':\n                        s = s[:j - k - 1] + '1' + s[j - k:]\n                        count += 1\n            print(count)\n\nmain()", "\n\nt=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    s=input()\n    c=0\n    for j in range(n):\n        if s[j]==\"0\":\n            if j-k>=0 and s[j-k]==\"0\":\n                c+=1\n                s=s[:j]+\"1\"+s[j+1:]\n            elif j+k<n and s[j+k]==\"0\":\n                c+=1\n                s=s[:j]+\"1\"+s[j+1:]\n    print(c)", "\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    # Iterate over test cases\n    for i in range(t):\n        # Read the number of tables and the minimum distance between people\n        n, k = map(int, input().split())\n        # Read the state of the restaurant\n        s = input()\n        # Compute the solution\n        sol = compute_solution(n, k, s)\n        # Print the solution\n        print(sol)\n\ndef compute_solution(n, k, s):\n    \"\"\"\n    Compute the solution to the problem.\n\n    Parameters:\n    n: the number of tables in the restaurant\n    k: the minimum allowed distance between two people\n    s: the state of the restaurant\n\n    Returns:\n    The number of tables that you can occupy so as not to violate the rules of the restaurant\n    \"\"\"\n    # Initialize the number of tables that you can occupy\n    sol = 0\n    # Iterate over the tables\n    for i in range(n):\n        # Check if the table is empty\n        if s[i] == '0':\n            # Check if the table can be occupied\n            if (i == 0) or (i == n-1) or (s[i-1] == '0') or (s[i+1] == '0'):\n                # Update the number of tables that you can occupy\n                sol += 1\n    # Return the number of tables that you can occupy\n    return sol\n\nif __name__ == '__main__':\n    main()", "\n\ndef solution(n, k, s):\n    if k == 0:\n        return n\n    if k == 1:\n        return s.count(\"0\")\n    if k > n:\n        return 0\n    if s == \"0\" * n:\n        return n\n    if s == \"1\" * n:\n        return 0\n    if s[0] == \"1\":\n        s = \"0\" + s[1:]\n    if s[-1] == \"1\":\n        s = s[:-1] + \"0\"\n    if s[0] == \"0\":\n        s = \"1\" + s[1:]\n    if s[-1] == \"0\":\n        s = s[:-1] + \"1\"\n    if s == \"1\" * n:\n        return 0\n    if s == \"0\" * n:\n        return n\n    if s[0] == \"1\":\n        s = \"0\" + s[1:]\n    if s[-1] == \"1\":\n        s = s[:-1] + \"0\"\n    if s == \"1\" * n:\n        return 0\n    if s == \"0\" * n:\n        return n\n    if s[0] == \"0\":\n        s = \"1\" + s[1:]\n    if s[-1] == \"0\":\n        s = s[:-1] + \"1\"\n    if s == \"1\" * n:\n        return 0\n    if s == \"0\" * n:\n        return n\n    if s[0] == \"1\":\n        s = \"0\" + s[1:]\n    if s[-1] == \"1\":\n        s = s[:-1] + \"0\"\n    if s == \"1\" * n:\n        return 0\n    if s == \"0\" * n:\n        return n\n\n    # print(s)\n    # print(k)\n    max_0 = 0\n    count = 0\n    for i in s:\n        if i == \"0\":\n            count += 1\n            if count > max_0:\n                max_0 = count\n        else:\n            count = 0\n    # print(max_0)\n    if max_0 < k:\n        return max_0\n    else:\n        return max_0 - k + 1\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        print(solution(n, k, s))", "\n\n# SOLUTION\n\n#!/usr/bin/python3\n\nfor _ in range(int(input())):\n    n,k = map(int, input().split())\n    s = input()\n    cnt = 0\n    for i in range(n):\n        if s[i] == '0':\n            if i == 0:\n                if (s[i+1] == '0'):\n                    cnt += 1\n                    s = s[:i] + '1' + s[i+1:]\n            elif i == n-1:\n                if (s[i-1] == '0'):\n                    cnt += 1\n                    s = s[:i] + '1' + s[i+1:]\n            elif s[i-1] == '0' and s[i+1] == '0':\n                cnt += 1\n                s = s[:i] + '1' + s[i+1:]\n    print(cnt)"]