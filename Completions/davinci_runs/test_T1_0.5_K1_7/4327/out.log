2022-04-13 20:04:05.805810 """
We have A apples and P pieces of apple.
We can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.
Find the maximum number of apple pies we can make with what we have now.

-----Constraints-----
 - All values in input are integers.
 - 0 \leq A, P \leq 100

-----Input-----
Input is given from Standard Input in the following format:
A P

-----Output-----
Print the maximum number of apple pies we can make with what we have.

-----Sample Input-----
1 3

-----Sample Output-----
3

We can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.
"""
2022-04-13 20:04:05.805817 --------------------------
2022-04-13 20:04:18.239103 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\na, p = map(int, input().split())\nprint((p//2) + (a*3))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nA, P = map(int, input().split())\n\nprint(min(A, P//2) + (P - A * 2) // 4)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\na, p = map(int, input().split())\n\nprint((p // 2) + (a * 3))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nA, P = map(int, input().split())\n\nprint((P // 2) + ((P + 3) // 4) * (A - 1))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\na, p = map(int, input().split())\nprint((p // 2) + (a * 3))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Return the maximum number of apple pie we can make with the given number of whole apples and pieces of apple.\ndef make_apple_pie_maximally(apples, pie_pieces):\n    # TODO: Implement this function\n    return 0\n\n# Read the input\napples, pie_pieces = map(int, input().split())\n\n# Print the result\nprint(make_apple_pie_maximally(apples, pie_pieces))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    input_data = input()\n    input_data = input_data.split()\n    apple = int(input_data[0])\n    pieces = int(input_data[1])\n    if apple == 0:\n        print(0)\n    else:\n        print((2*apple + pieces) // 3)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649880245,
  "id": "cmpl-4wdVdbOqvjEkiVA5rWseetAZiy0Yn",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:04:18.239407 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\na, p = map(int, input().split())\nprint((p//2) + (a*3))"
}
2022-04-13 20:04:18.239443 REASON stop
2022-04-13 20:04:18.239867 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nA, P = map(int, input().split())\n\nprint(min(A, P//2) + (P - A * 2) // 4)"
}
2022-04-13 20:04:18.239978 REASON stop
2022-04-13 20:04:18.240331 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\na, p = map(int, input().split())\n\nprint((p // 2) + (a * 3))"
}
2022-04-13 20:04:18.240375 REASON stop
2022-04-13 20:04:18.251659 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nA, P = map(int, input().split())\n\nprint((P // 2) + ((P + 3) // 4) * (A - 1))"
}
2022-04-13 20:04:18.251733 REASON stop
2022-04-13 20:04:18.269760 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\na, p = map(int, input().split())\nprint((p // 2) + (a * 3))"
}
2022-04-13 20:04:18.269857 REASON stop
2022-04-13 20:04:18.270484 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Return the maximum number of apple pie we can make with the given number of whole apples and pieces of apple.\ndef make_apple_pie_maximally(apples, pie_pieces):\n    # TODO: Implement this function\n    return 0\n\n# Read the input\napples, pie_pieces = map(int, input().split())\n\n# Print the result\nprint(make_apple_pie_maximally(apples, pie_pieces))"
}
2022-04-13 20:04:18.270544 REASON stop
2022-04-13 20:04:18.271130 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    input_data = input()\n    input_data = input_data.split()\n    apple = int(input_data[0])\n    pieces = int(input_data[1])\n    if apple == 0:\n        print(0)\n    else:\n        print((2*apple + pieces) // 3)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:04:18.271190 REASON stop
