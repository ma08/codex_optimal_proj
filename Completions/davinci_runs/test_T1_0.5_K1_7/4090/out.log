2022-04-13 18:12:18.029344 """
You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.

Let's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \ge i_1$, $j_2 \ge i_2$, and for every $t \in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text "to be or not to be" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words "to be".

An abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text "a ab a a b ab a a b c" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation "AAA" and obtain the text "a AAA b AAA b c", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation "AAAB" and obtain the text "a AAAB AAAB c".

What is the minimum length of the text after at most one abbreviation?


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 300$) — the number of words in the text.

The next line contains $n$ space-separated words of the text $w_1, w_2, \dots, w_n$. Each word consists only of lowercase Latin letters.

It is guaranteed that the length of text does not exceed $10^5$.


-----Output-----

Print one integer — the minimum length of the text after at most one abbreviation.


-----Examples-----
Input
6
to be or not to be

Output
12

Input
10
a ab a a b ab a a b c

Output
13

Input
6
aa bb aa aa bb bb

Output
11



-----Note-----

In the first example you can obtain the text "TB or not TB".

In the second example you can obtain the text "a AAAB AAAB c".

In the third example you can obtain the text "AB aa AB bb".
"""
2022-04-13 18:12:18.029376 --------------------------
2022-04-13 18:12:54.404041 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nwords = input().split()\n\ndef min_len(w):\n    max_len = 0\n    max_count = 0\n    cur_len = 0\n    cur_count = 0\n    for i in range(n):\n        if i == 0 or w[i-1] != w[i]:\n            if cur_count > max_count:\n                max_count = cur_count\n                max_len = cur_len\n            cur_count = 1\n            cur_len = len(w[i])\n        else:\n            cur_count += 1\n            cur_len += len(w[i])\n    if cur_count > max_count:\n        max_count = cur_count\n        max_len = cur_len\n    return max_count * len(w[0]) + (n - max_count * max_count)\n\nprint(min(min_len(words), min_len([word.capitalize() for word in words])))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    \n    if n == 1:\n        print(len(words[0]))\n    else:\n        min_len = len(words[0])\n        for i in range(n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    min_len += 1\n                    break\n        \n        print(min_len)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    m = {}\n    for i in range(n):\n        if words[i] in m:\n            m[words[i]] += 1\n        else:\n            m[words[i]] = 1\n\n    if len(m) == 1:\n        print(len(words[0]) + n - 1)\n    else:\n        print(len(s))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    print(solve(n, words))\n\ndef solve(n, words):\n    # Find the shortest word\n    shortest_word = min(len(word) for word in words)\n    # Find the longest word\n    longest_word = max(len(word) for word in words)\n    # Find the most common word\n    most_common_word = max(words, key=words.count)\n    # Find the length of the most common word\n    most_common_word_length = len(most_common_word)\n    # Find the number of times the most common word appears\n    most_common_word_count = words.count(most_common_word)\n    # Find the number of words\n    number_of_words = len(words)\n\n    # If the most common word appears more than once\n    if most_common_word_count > 1:\n        # If the most common word appears more than twice\n        if most_common_word_count > 2:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus one\n                return most_common_word_length + (number_of_words - 1)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n        # If the most common word appears exactly twice\n        else:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus three\n                return most_common_word_length + (number_of_words - 3)\n    # If the most common word appears exactly once\n    else:\n        # Return the length of the most common word plus the number of words minus two\n        return most_common_word_length + (number_of_words - 2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nwords = input().split()\n\n# use a dictionary to keep track of how many times each word occurs\nword_counts = dict()\nfor w in words:\n    if w in word_counts:\n        word_counts[w] += 1\n    else:\n        word_counts[w] = 1\n\n# get the length of the text without abbreviations\ntext_length = sum([len(w) for w in words])\n\n# the minimum length of the text after one abbreviation is the length of the\n# text without abbreviations minus the length of the longest word that occurs\n# more than once, plus the length of the abbreviation (the first letter of the\n# word)\nmin_text_length = text_length - max([len(w) for w in word_counts if word_counts[w] > 1]) + 1\n\nprint(min_text_length)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    num_words = int(input())\n    words = input().split()\n    if num_words == 1:\n        print(len(words[0]))\n        return\n    word_length = len(words[0])\n    for i in range(1, num_words):\n        if words[i] == words[i-1]:\n            word_length += len(words[i]) - 1\n        else:\n            word_length += len(words[i])\n    print(word_length)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    result = len(words)\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                result = min(result, len(words[:i]) + len(words[j+1:]) + len(words[i][0].upper()))\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649873538,
  "id": "cmpl-4wblSC8AUw3Rb3WuRkMLhYAk9Z4Kv",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:12:54.404399 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nwords = input().split()\n\ndef min_len(w):\n    max_len = 0\n    max_count = 0\n    cur_len = 0\n    cur_count = 0\n    for i in range(n):\n        if i == 0 or w[i-1] != w[i]:\n            if cur_count > max_count:\n                max_count = cur_count\n                max_len = cur_len\n            cur_count = 1\n            cur_len = len(w[i])\n        else:\n            cur_count += 1\n            cur_len += len(w[i])\n    if cur_count > max_count:\n        max_count = cur_count\n        max_len = cur_len\n    return max_count * len(w[0]) + (n - max_count * max_count)\n\nprint(min(min_len(words), min_len([word.capitalize() for word in words])))"
}
2022-04-13 18:12:54.404446 REASON stop
2022-04-13 18:12:54.404803 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    \n    if n == 1:\n        print(len(words[0]))\n    else:\n        min_len = len(words[0])\n        for i in range(n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    min_len += 1\n                    break\n        \n        print(min_len)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:12:54.404905 REASON stop
2022-04-13 18:12:54.405286 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    m = {}\n    for i in range(n):\n        if words[i] in m:\n            m[words[i]] += 1\n        else:\n            m[words[i]] = 1\n\n    if len(m) == 1:\n        print(len(words[0]) + n - 1)\n    else:\n        print(len(s))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:12:54.405339 REASON stop
2022-04-13 18:12:54.427808 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    print(solve(n, words))\n\ndef solve(n, words):\n    # Find the shortest word\n    shortest_word = min(len(word) for word in words)\n    # Find the longest word\n    longest_word = max(len(word) for word in words)\n    # Find the most common word\n    most_common_word = max(words, key=words.count)\n    # Find the length of the most common word\n    most_common_word_length = len(most_common_word)\n    # Find the number of times the most common word appears\n    most_common_word_count = words.count(most_common_word)\n    # Find the number of words\n    number_of_words = len(words)\n\n    # If the most common word appears more than once\n    if most_common_word_count > 1:\n        # If the most common word appears more than twice\n        if most_common_word_count > 2:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus one\n                return most_common_word_length + (number_of_words - 1)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n        # If the most common word appears exactly twice\n        else:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus three\n                return most_common_word_length + (number_of_words - 3)\n    # If the most common word appears exactly once\n    else:\n        # Return the length of the most common word plus the number of words minus two\n        return most_common_word_length + (number_of_words - 2)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:12:54.427923 REASON stop
2022-04-13 18:12:54.445787 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nwords = input().split()\n\n# use a dictionary to keep track of how many times each word occurs\nword_counts = dict()\nfor w in words:\n    if w in word_counts:\n        word_counts[w] += 1\n    else:\n        word_counts[w] = 1\n\n# get the length of the text without abbreviations\ntext_length = sum([len(w) for w in words])\n\n# the minimum length of the text after one abbreviation is the length of the\n# text without abbreviations minus the length of the longest word that occurs\n# more than once, plus the length of the abbreviation (the first letter of the\n# word)\nmin_text_length = text_length - max([len(w) for w in word_counts if word_counts[w] > 1]) + 1\n\nprint(min_text_length)"
}
2022-04-13 18:12:54.445900 REASON stop
2022-04-13 18:12:54.446677 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    num_words = int(input())\n    words = input().split()\n    if num_words == 1:\n        print(len(words[0]))\n        return\n    word_length = len(words[0])\n    for i in range(1, num_words):\n        if words[i] == words[i-1]:\n            word_length += len(words[i]) - 1\n        else:\n            word_length += len(words[i])\n    print(word_length)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:12:54.446738 REASON stop
2022-04-13 18:12:54.447599 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    result = len(words)\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                result = min(result, len(words[:i]) + len(words[j+1:]) + len(words[i][0].upper()))\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:12:54.447653 REASON stop
