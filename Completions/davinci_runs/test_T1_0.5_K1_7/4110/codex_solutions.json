["\n\n# ====\n# main\n# ====\n\n# --- input ---\nD, G = map(int, input().split())\ns = []\nc = []\nfor i in range(D):\n    si, ci = map(int, input().split())\n    s.append(si)\n    c.append(ci)\n\n# --- solve ---\nans = float('inf')\nfor i in range(2**D):\n    # --- init ---\n    t = 0\n    cnt = 0\n    for j in range(D):\n        if (i >> j) & 1:\n            t += 100 * (j + 1) * s[j] + c[j]\n            cnt += s[j]\n    \n    # --- solve ---\n    for j in range(D-1, -1, -1):\n        if (i >> j) & 1:\n            continue\n        for k in range(s[j] - 1):\n            t += 100 * (j + 1)\n            cnt += 1\n            if t >= G:\n                break\n        if t >= G:\n            break\n    \n    # --- update ---\n    ans = min(ans, cnt)\n\n# --- output ---\nprint(ans)", "\n\nimport math\n\ndef main():\n    d, g = map(int, input().split())\n    p = []\n    c = []\n    for i in range(d):\n        tmp_p, tmp_c = map(int, input().split())\n        p.append(tmp_p)\n        c.append(tmp_c)\n    ans = float('inf')\n    for bit in range(1 << d):\n        score = 0\n        num = 0\n        rest_max = -1\n        rest_num = 0\n        for i in range(d):\n            if (bit >> i) & 1:\n                score += 100 * (i + 1) * p[i] + c[i]\n                num += p[i]\n            else:\n                rest_max = i\n                rest_num = p[i]\n        if score < g:\n            score += 100 * (rest_max + 1)\n            num += -(-g - score) // (100 * (rest_max + 1))\n        if num < ans:\n            ans = num\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    d, g = map(int, input().split())\n    p = []\n    c = []\n    for i in range(d):\n        tmp = list(map(int, input().split()))\n        p.append(tmp[0])\n        c.append(tmp[1])\n    ans = float('inf')\n    for i in range(2**d):\n        score = 0\n        cnt = 0\n        for j in range(d):\n            if (i >> j) & 1:\n                score += p[j] * (j + 1) * 100 + c[j]\n                cnt += p[j]\n        for j in range(d - 1, -1, -1):\n            if ((i >> j) & 1) == 0:\n                k = (g - score) // ((j + 1) * 100)\n                if k < p[j]:\n                    cnt += k\n                    break\n                else:\n                    cnt += p[j]\n        ans = min(ans, cnt)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nD, G = map(int, input().split())\nperfect_bonus = []\nnum_problems = []\n\nfor i in range(D):\n    p, c = map(int, input().split())\n    perfect_bonus.append(c)\n    num_problems.append(p)\n\nnum_problems_solved = 0\ntotal_score = 0\n\nfor i in reversed(range(D)):\n    if total_score >= G:\n        break\n\n    num_problems_solved += num_problems[i]\n    total_score += num_problems[i] * (i+1) * 100\n\n    if total_score < G:\n        num_problems_solved += min(num_problems[i], (G - total_score + (i+1) * 100 - 1) // ((i+1) * 100))\n        total_score += min(num_problems[i], (G - total_score + (i+1) * 100 - 1) // ((i+1) * 100)) * (i+1) * 100\n\nprint(num_problems_solved)", "\n\nD,G = map(int,input().split())\npc_list = [[int(x) for x in input().split()] for _ in range(D)]\n\n# \u5168\u90e8\u89e3\u3044\u305f\u5834\u5408\u306e\u30b9\u30b3\u30a2\u304c\u6700\u5927\u306e\u3082\u306e\u304b\u3089\u9806\u306b\u89e3\u304f\n# \u5404\u554f\u984c\u6570\u306b\u3064\u3044\u3066\u3001\u5168\u90e8\u89e3\u304f\u304b\u89e3\u304b\u306a\u3044\u304b\u3092\u5168\u63a2\u7d22\u3057\u305f\u304c\u3001TLE\n# \u5168\u90e8\u89e3\u304f\u554f\u984c\u6570\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u9806\u306b\u89e3\u304f\u3068\u3001\u89e3\u304b\u306a\u3044\u554f\u984c\u6570\u304c\u5c11\u306a\u3044\u3082\u306e\u3092\u89e3\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\n# \u3064\u307e\u308a\u3001\u5168\u90e8\u89e3\u304f\u554f\u984c\u6570\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u9806\u306b\u89e3\u304f\u3068\u3001\u89e3\u304f\u5fc5\u8981\u306e\u3042\u308b\u554f\u984c\u6570\u304c\u5c11\u306a\u304f\u306a\u308b\n\npc_list = sorted(pc_list, key=lambda x: x[0]*100*x[1], reverse=True)\n\ncnt = 0\nfor i, pc in enumerate(pc_list):\n    p, c = pc\n    # \u5168\u90e8\u89e3\u3044\u305f\u5834\u5408\u306e\u30b9\u30b3\u30a2\n    score = p * 100 * (i+1) + c\n    # \u5168\u90e8\u89e3\u304b\u306a\u3044\u5834\u5408\u306e\u30b9\u30b3\u30a2\n    score_not_all = (p-1) * 100 * (i+1)\n    # \u5168\u90e8\u89e3\u304f\u304b\u89e3\u304b\u306a\u3044\u304b\u3092\u6c7a\u3081\u308b\n    if score_not_all < G - score:\n        cnt += p\n    else:\n        cnt += (G - score) // (100 * (i+1)) + 1\n        break\nelse:\n    # \u5168\u90e8\u89e3\u304b\u306a\u3044\u5834\u5408\u306e\u30b9\u30b3\u30a2\n    score_not_all = (p-1) * 100 * (i+1)\n    cnt += (G - score_not_all) // (100 * (i+1)) + 1\n\nprint(cnt)", "\n\nd, g = map(int, input().split())\np = []\nc = []\nfor i in range(d):\n    a, b = map(int, input().split())\n    p.append(a)\n    c.append(b)\n\nans = float('inf')\nfor i in range(2**d):\n    total_score = 0\n    num_problem = 0\n    for j in range(d):\n        if (i >> j) & 1:\n            total_score += 100 * (j + 1) * p[j] + c[j]\n            num_problem += p[j]\n    for k in range(d-1, -1, -1):\n        if (i >> k) & 1:\n            continue\n        else:\n            if total_score >= g:\n                ans = min(ans, num_problem)\n            else:\n                num_problem += min(p[k], (g - total_score) // (100 * (k + 1)) + 1)\n                total_score += min(p[k], (g - total_score) // (100 * (k + 1)) + 1) * 100 * (k + 1)\n                ans = min(ans, num_problem)\nprint(ans)", "\n\n\ndef main():\n    d, g = map(int, input().split())\n    p_c = [tuple(map(int, input().split())) for _ in range(d)]\n    ans = float(\"inf\")\n    for i in range(1 << d):\n        s = 0\n        c = 0\n        for j in range(d):\n            if (i >> j) & 1:\n                s += p_c[j][0] * (j + 1) * 100 + p_c[j][1]\n                c += p_c[j][0]\n        for j in range(d - 1, -1, -1):\n            if (i >> j) & 1:\n                continue\n            if s >= g:\n                break\n            need = (g - s + (j + 1) * 100 - 1) // ((j + 1) * 100)\n            if need >= p_c[j][0]:\n                continue\n            s += need * (j + 1) * 100\n            c += need\n        if s < g:\n            continue\n        ans = min(ans, c)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"]