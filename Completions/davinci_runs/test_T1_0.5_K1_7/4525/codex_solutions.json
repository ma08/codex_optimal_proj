["\n\n# SOLUTION\n# This is a dynamic programming problem.\n# The key observation is that\n# if we have two arrays of length n/2,\n# the sum of the first half of the first array is\n# equal to the sum of the second half of the second array\n# then we can combine the two arrays to form a new array\n# of length n where the first half and the second half\n# have the same sum.\n#\n# We can use dynamic programming to form all the possible sums\n# of the first half of an array of length n/2.\n# Then we can use these sums to form the second half of the array.\n#\n# The time complexity is O(n^2).\n# The space complexity is O(n^2).\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(n):\n    # dynamic programming\n    # dp[i][j] is the number of ways to form the sum j\n    # using the first i numbers\n    dp = [[0 for _ in range(n * 10 + 1)] for _ in range(n // 2 + 1)]\n    dp[0][0] = 1\n\n    # iterate through the first half of the array\n    for i in range(1, n // 2 + 1):\n        # iterate through the possible sums\n        for j in range(n * 10 + 1):\n            # if we can form the sum j without using the ith number,\n            # then we can form the sum j using the ith number\n            dp[i][j] += dp[i - 1][j]\n            # if we can form the sum j - i using the first i - 1 numbers,\n            # then we can form the sum j using the first i numbers\n            if j - i >= 0:\n                dp[i][j] += dp[i - 1][j - i]\n\n    # iterate through the possible sums\n    for j in range(n * 10 + 1):\n        # if we can form the sum j using the first n // 2 numbers,\n        # and we can form the sum j using the last n // 2 numbers,\n        # then we can form the required array\n        if dp[n // 2][j] > 0 and dp[n // 2][j] > 0:\n            # form the first half of the array\n            first_half = [i for i in range(1, n // 2 + 1) if dp[n // 2][j - i] > 0]\n            # form the second half of the array\n            second_half = [i for i in range(n // 2 + 1, n + 1) if dp[n // 2][j - i] > 0]\n            # combine the two halves\n            return 'YES\\n' + ' '.join(map(str, first_half + second_half))\n\n    return 'NO'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = solve(n)\n\n        fptr.write(result)\n        fptr.write('\\n')\n\n    fptr.close()", "\n\n\n\n\ndef main(n):\n    if n<=2:\n        return \"NO\"\n    else:\n        if n%4==0:\n            return \"YES\\n\"+\" \".join([str(i) for i in range(1,n//2+1)]+[str(i) for i in range(n//2+1,n+1)])\n        else:\n            return \"YES\\n\"+\" \".join([str(i) for i in range(1,n//2)]+[str(i) for i in range(n//2+1,n+1)])\n\nn=int(input())\nfor i in range(n):\n    print(main(int(input())))", "\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    if n == 2:\n        print('YES')\n        print('1 2')\n    elif n == 4:\n        print('YES')\n        print('1 2 3 4')\n    else:\n        print('YES')\n        print('2 4', end=' ')\n        for i in range(6, n, 2):\n            print(i, i+1, end=' ')\n        print()", "\n\n# cook your dish here\nimport math\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    if n==2:\n        print('NO')\n    else:\n        print('YES')\n        if n==4:\n            print('2 4 1 3')\n        elif n==6:\n            print('2 4 1 5 3 6')\n        else:\n            print('2 4 6 8 1 3 5 7',end=' ')\n            if n==8:\n                print('9')\n            else:\n                if n%4==0:\n                    print(n-1,end=' ')\n                    for i in range(10,n+1,2):\n                        print(i,end=' ')\n                else:\n                    print(n-1,end=' ')\n                    for i in range(10,n,2):\n                        print(i,end=' ')", "\n\nfrom sys import stdin\nfrom math import ceil\n\ndef solve(n):\n    if n == 2:\n        return \"NO\"\n\n    arr = [2*i for i in range(1, ceil(n/2))]\n\n    if n % 4 == 0:\n        arr.append(n//2 + 1)\n        arr.append(n//2 + 2)\n    else:\n        arr.append(n//2)\n        arr.append(n//2 + 1)\n        arr.append(n//2 + 2)\n\n    for i in range(ceil(n/2) + 1, n):\n        arr.append(2*i - 1)\n\n    return \"YES\\n{}\".format(\" \".join(map(str, arr)))\n\nif __name__ == \"__main__\":\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        print(solve(n))", "\n\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(\"NO\")\n    elif n == 4:\n        print(\"YES\")\n        print(\"2 4 1 3\")\n    elif n == 6:\n        print(\"YES\")\n        print(\"2 4 6 1 5 3\")\n    elif n == 8:\n        print(\"YES\")\n        print(\"2 4 6 8 1 3 5 7\")\n    elif n == 10:\n        print(\"YES\")\n        print(\"2 4 6 8 10 1 3 5 7 9\")", "\n\n#Solution\n\ndef solve(n):\n    if n == 2:\n        return 'NO'\n    if n == 4:\n        return 'YES\\n2 4 1 3'\n    if n == 6:\n        return 'YES\\n2 4 6 1 3 5'\n    if n == 8:\n        return 'YES\\n2 4 6 8 1 3 5 7'\n    if n == 10:\n        return 'YES\\n2 4 6 8 10 1 3 5 7 9'\n    if n > 10:\n        if n % 4 == 0:\n            return 'YES\\n' + ' '.join(map(str, range(2, n + 2, 2))) + ' ' + ' '.join(map(str, range(1, n + 1, 2)))\n        if n % 4 == 2:\n            return 'YES\\n' + ' '.join(map(str, range(2, n + 2, 2))) + ' ' + ' '.join(map(str, range(1, n + 1, 2))) + ' ' + str(n + 2)\n\nfor _ in range(int(input())):\n    print(solve(int(input())))"]