["\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nm = n - 1\nwhile m > 1:\n    if n % m == 0:\n        m -= 1\n    else:\n        break\n\nprint(m)", "\n\nn = int(input())\n\nfor i in range(2,n):\n    if n % i != 0:\n        print(i)\n        break", "\n\nimport sys\n\ndef is_squarefree(n):\n    \"\"\"Returns True if n is squarefree, False otherwise.\"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_factors(n):\n    \"\"\"Returns a list of all the factors of n.\"\"\"\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    factors = find_factors(n)\n    for m in factors:\n        if m < n and is_squarefree(n * m):\n            print(m)\n            return\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(2, n):\n        if n % i == 0:\n            print(i)\n            return\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    for m in range(2, n):\n        if n%m == 0:\n            continue\n        if (n*m)%(m+n) != 0:\n            print(m)\n            break\n\nif __name__ == '__main__':\n    main()", "\n\nfrom sys import stdin\n\ndef primeFactors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef solution(n):\n    factors = primeFactors(n)\n    return factors[-1]\n\ndef main():\n    n = int(stdin.readline().strip())\n    print(solution(n))\n\nif __name__ == '__main__':\n    main()", "\n\n#Solution\nimport sys\ndef sieve(n):\n    \"\"\"\n    Input: an integer n > 1.\n\n    Let A be an array of Boolean values, indexed by integers 2 to n,\n    initially all set to true.\n\n    for i = 2, 3, 4, ..., not exceeding \u221an:\n      if A[i] is true:\n        for j = i2, i2+i, i2+2i, i2+3i, ..., not exceeding n:\n          A[j] := false.\n\n    Output: all i such that A[i] is true.\n    \"\"\"\n    sieve = [True] * (n+1)\n    for p in range(2, int(n**0.5)+1):\n        if (sieve[p]):\n            for i in range(p*p, n+1, p):\n                sieve[i] = False\n    return sieve\n\ndef main():\n    n = int(input())\n    s = sieve(n)\n    for i in range(2, n):\n        if s[i] and n%i != 0:\n            print(i)\n            break\n\nif __name__ == '__main__':\n    main()"]