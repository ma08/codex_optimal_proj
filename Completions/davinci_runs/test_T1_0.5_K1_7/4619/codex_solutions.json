["\n\ndef main():\n\t# Read the first line of input\n\tw, h, n = map(int, input().split())\n\n\t# Read the points and actions\n\tpoints = []\n\tfor _ in range(n):\n\t\tx, y, a = map(int, input().split())\n\t\tpoints.append((x, y, a))\n\n\t# Sort the points by the x-coordinate\n\tpoints.sort(key=lambda x: x[0])\n\n\t# The area of the rectangle\n\tarea = w * h\n\n\t# Loop through the points to find the area of the white region\n\tfor i in range(n - 1):\n\t\tx1, y1, a1 = points[i]\n\t\tx2, y2, a2 = points[i + 1]\n\n\t\t# If the points are on the same x-coordinate, the area of the white region is the same\n\t\tif x1 == x2:\n\t\t\tcontinue\n\n\t\t# If the first point is on the left side of the rectangle\n\t\tif a1 == 1:\n\t\t\t# If the second point is on the left side of the rectangle, the area of the white region is the same\n\t\t\tif a2 == 1:\n\t\t\t\tcontinue\n\t\t\t# If the second point is on the right side of the rectangle, the area of the white region is the difference between the x-coordinates\n\t\t\telse:\n\t\t\t\tarea -= (x2 - x1) * h\n\n\t\t# If the first point is on the right side of the rectangle\n\t\telse:\n\t\t\t# If the second point is on the left side of the rectangle, the area of the white region is the difference between the x-coordinates\n\t\t\tif a2 == 1:\n\t\t\t\tarea -= (x2 - x1) * h\n\n\t# Sort the points by the y-coordinate\n\tpoints.sort(key=lambda x: x[1])\n\n\t# Loop through the points to find the area of the white region\n\tfor i in range(n - 1):\n\t\tx1, y1, a1 = points[i]\n\t\tx2, y2, a2 = points[i + 1]\n\n\t\t# If the points are on the same y-coordinate, the area of the white region is the same\n\t\tif y1 == y2:\n\t\t\tcontinue\n\n\t\t# If the first point is on the bottom side of the rectangle\n\t\tif a1 == 3:\n\t\t\t# If the second point is on the bottom side of the rectangle, the area of the white region is the same\n\t\t\tif a2 == 3:\n\t\t\t\tcontinue\n\t\t\t# If the second point is on the top side of the rectangle, the area of the white region is the difference between the y-coordinates\n\t\t\telse:\n\t\t\t\tarea -= (y2 - y1) * w\n\n\t\t# If the first point is on the top side of the rectangle\n\t\telse:\n\t\t\t# If the second point is on the bottom side of the rectangle, the area of the white region is the difference between the y-coordinates\n\t\t\tif a2 == 3:\n\t\t\t\tarea -= (y2 - y1) * w\n\n\t# Print the area of the white region\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()", "\n\nw,h,n = map(int,input().split())\nx = []\ny = []\na = []\nfor i in range(n):\n    x_,y_,a_ = map(int,input().split())\n    x.append(x_)\n    y.append(y_)\n    a.append(a_)\n\nx_min = 0\nx_max = w\ny_min = 0\ny_max = h\n\nfor i in range(n):\n    if a[i] == 1:\n        x_min = max(x_min, x[i])\n    elif a[i] == 2:\n        x_max = min(x_max, x[i])\n    elif a[i] == 3:\n        y_min = max(y_min, y[i])\n    else:\n        y_max = min(y_max, y[i])\n\nif x_min > x_max or y_min > y_max:\n    print(0)\nelse:\n    print((x_max - x_min) * (y_max - y_min))", "\n\nimport sys\n\ndef main():\n    W, H, N = map(int, sys.stdin.readline().split())\n    xy_list = []\n    for i in range(N):\n        xy_list.append(list(map(int, sys.stdin.readline().split())))\n    x_min = 0\n    x_max = W\n    y_min = 0\n    y_max = H\n    for i in range(N):\n        if xy_list[i][2] == 1:\n            if x_min < xy_list[i][0]:\n                x_min = xy_list[i][0]\n        elif xy_list[i][2] == 2:\n            if x_max > xy_list[i][0]:\n                x_max = xy_list[i][0]\n        elif xy_list[i][2] == 3:\n            if y_min < xy_list[i][1]:\n                y_min = xy_list[i][1]\n        else:\n            if y_max > xy_list[i][1]:\n                y_max = xy_list[i][1]\n    if x_min >= x_max or y_min >= y_max:\n        print(0)\n    else:\n        print((x_max-x_min)*(y_max-y_min))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\n# Read input\nW, H, N = map(int, sys.stdin.readline().split())\n\n# Create list of points\npoints = []\nfor _ in range(N):\n    x, y, a = map(int, sys.stdin.readline().split())\n    points.append((x, y, a))\n\n# Sort points by x-coordinate\npoints.sort(key=lambda p: p[0])\n\n# Initialize start and end x-coordinates of white region\nwhite_start = 0\nwhite_end = W\n\n# Initialize start and end y-coordinates of white region\nwhite_bottom = 0\nwhite_top = H\n\n# For each point, update white region coordinates\nfor x, y, a in points:\n    if a == 1:\n        white_start = max(x, white_start)\n    elif a == 2:\n        white_end = min(x, white_end)\n    elif a == 3:\n        white_bottom = max(y, white_bottom)\n    elif a == 4:\n        white_top = min(y, white_top)\n\n# If white region is not empty, print area\nif white_start < white_end and white_bottom < white_top:\n    print((white_end - white_start) * (white_top - white_bottom))\nelse:\n    print(0)", "\n\n#-----function for number of white region----\ndef white_region(l, W, H):\n    #l is list of points\n    #W, H are width and height of rectangle\n    #x and y are coordinates of points\n    x, y, a = list(zip(*l))\n    #a is list of actions\n    #count number of points in each action\n    a1 = a.count(1)\n    a2 = a.count(2)\n    a3 = a.count(3)\n    a4 = a.count(4)\n    #initialize white region area\n    area = 0\n    #if a1 is even, the region between 0 and x is white\n    if a1 % 2 == 0:\n        area += x[0]\n    #if a1 is odd, the region between x and W is white\n    else:\n        area += W - x[-1]\n    #if a2 is even, the region between x and W is white\n    if a2 % 2 == 0:\n        area += W - x[-1]\n    #if a2 is odd, the region between 0 and x is white\n    else:\n        area += x[0]\n    #if a3 is even, the region between 0 and y is white\n    if a3 % 2 == 0:\n        area += y[0]\n    #if a3 is odd, the region between y and H is white\n    else:\n        area += H - y[-1]\n    #if a4 is even, the region between y and H is white\n    if a4 % 2 == 0:\n        area += H - y[-1]\n    #if a4 is odd, the region between 0 and y is white\n    else:\n        area += y[0]\n    #return white region area\n    return area\n\n#-----main-----\n#input width W, height H and number of points N\nW, H, N = map(int, input().split())\n#input points\nl = [list(map(int, input().split())) for _ in range(N)]\n#sort points by x coordinate\nl.sort(key=lambda x: x[0])\n#output white region area\nprint(white_region(l, W, H))", "\n\nimport sys\nfrom fractions import gcd\n\ndef get_lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef get_ans(w, h, n, xy, a):\n    # \u5168\u90e8\u9ed2\u5857\u308a\n    if len(a) == n and sum(a) == 4 * n:\n        return 0\n\n    # \u5168\u90e8\u767d\u5857\u308a\n    if len(a) == n and not sum(a):\n        return w * h\n\n    # \u5168\u90e8\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u5168\u90e8\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # \u6a2a\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u7e26\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # \u6a2a\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u7e26\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # \u6a2a\u6a2a\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u6a2a\u7e26\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u6a2a\u7e26\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # \u7e26\u6a2a\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u7e26\u6a2a\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # \u7e26\u7e26\u6a2a\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][0])\n        return lcm * h\n\n    # \u7e26\u7e26\u7e26\n    if len(a) == n and sum(a) == 2 * n:\n        lcm = 1\n        for i in range(n):\n            lcm = get_lcm(lcm, xy[i][1])\n        return w * lcm\n\n    # 1\u3064\u305a\u3064\u8db3\u3057\u3066\u3044\u304f\n    if len(a) < n:\n        ans = 0\n        # 1\n        ans += get_ans(w, h, n, xy, a + [1])\n        # 2\n        ans += get_ans(w, h, n, xy, a + [2])\n        # 3\n        ans += get_ans(w, h, n, xy, a + [3])\n        # 4\n        ans += get_ans(w, h, n, xy, a + [4])\n        return ans\n\n\ndef main():\n    w, h, n = [int(x) for x in sys.stdin.readline().split()]\n    xy = [0] * n\n    for i in range(n):\n        xy[i] = [int(x) for x in sys.stdin.readline().split()]\n    print(get_ans(w, h, n, xy, []))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    W, H, N = map(int, input().split())\n    x_min = 0\n    x_max = W\n    y_min = 0\n    y_max = H\n    for _ in range(N):\n        x, y, a = map(int, input().split())\n        if a == 1:\n            x_min = max(x_min, x)\n        elif a == 2:\n            x_max = min(x_max, x)\n        elif a == 3:\n            y_min = max(y_min, y)\n        else:\n            y_max = min(y_max, y)\n    print((x_max - x_min) * (y_max - y_min))\n\nif __name__ == '__main__':\n    main()"]