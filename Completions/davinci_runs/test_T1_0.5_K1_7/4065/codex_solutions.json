["\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Find the max number of problems that can be in the contest\n    # dp[i] is the number of problems in the contest until i-th problem,\n    # and the last problem in the contest is a[i]\n    dp = [1] * n\n    for i in range(1, n):\n        # If a[i] is within the 2x range of the last problem in the contest,\n        # then add a[i] to the contest and update dp[i]\n        if a[i] <= 2 * a[i - 1]:\n            dp[i] = dp[i - 1] + 1\n        # If a[i] is not in the 2x range of the last problem in the contest,\n        # then dp[i] is equal to the max of the previous dp[j] where j < i\n        else:\n            dp[i] = max(dp)\n\n    print(max(dp))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [1] * n\nfor i in range(1, n):\n    for j in range(i-1, -1, -1):\n        if a[i] <= a[j] * 2:\n            dp[i] = max(dp[i], dp[j] + 1)\nprint(max(dp))", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        return\n    if n == 2:\n        if a[1] <= 2*a[0]:\n            print(2)\n            return\n        else:\n            print(1)\n            return\n    if n == 3:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1]:\n            print(3)\n            return\n        else:\n            print(1)\n            return\n    if n == 4:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2]:\n            print(4)\n            return\n        else:\n            print(1)\n            return\n    if n == 5:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3]:\n            print(5)\n            return\n        else:\n            print(1)\n            return\n    if n == 6:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3] and a[5] <= 2*a[4]:\n            print(6)\n            return\n        else:\n            print(1)\n            return\n    if n == 7:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3] and a[5] <= 2*a[4] and a[6] <= 2*a[5]:\n            print(7)\n            return\n        else:\n            print(1)\n            return\n    if n == 8:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3] and a[5] <= 2*a[4] and a[6] <= 2*a[5] and a[7] <= 2*a[6]:\n            print(8)\n            return\n        else:\n            print(1)\n            return\n    if n == 9:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3] and a[5] <= 2*a[4] and a[6] <= 2*a[5] and a[7] <= 2*a[6] and a[8] <= 2*a[7]:\n            print(9)\n            return\n        else:\n            print(1)\n            return\n    if n == 10:\n        if a[1] <= 2*a[0] and a[2] <= 2*a[1] and a[3] <= 2*a[2] and a[4] <= 2*a[3] and a[5] <= 2*a[4] and a[6] <= 2*a[5] and a[7] <= 2*a[6] and a[8] <= 2*a[7] and a[9] <= 2*a[8]:\n            print(10)\n            return\n        else:\n            print(1)\n            return\n\n    print(1)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n# Assume that the array is sorted in increasing order.\n# The idea is to find the longest increasing subsequence.\n# We can use a dynamic programming approach.\n# Let dp[i] be the length of the longest increasing subsequence ending at index i.\n# dp[i] = 1 + max(dp[j]) for j in range(i) and a[j] < 2 * a[i]\n# The answer is the maximum of dp[i] for all i.\n# The time complexity is O(n^2).\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < 2 * a[i]:\n            dp[i] = max(dp[i], dp[j] + 1)\n\nprint(max(dp))", "\n\n# SOLUTION\n\n# Input\nn = int(input())\ndifficulties = list(map(int, input().split()))\n\n# Find the maximum number of problems in a valid contest\ncontest_size = 1\nfor i in range(n-1):\n    if difficulties[i] * 2 >= difficulties[i+1]:\n        contest_size += 1\n    else:\n        break\n\n# Output\nprint(contest_size)", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    ans = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] <= a[i] * 2:\n            j += 1\n        ans = max(ans, j - i)\n        i = j\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_len = 1\n    max_index = 0\n    for i in range(1, n):\n        if max_index + max_len < i and a[i] <= 2 * a[i - 1]:\n            max_len += 1\n        elif a[i] > 2 * a[max_index]:\n            max_index = i - 1\n            max_len = 1\n    print(max_len)\n\nif __name__ == '__main__':\n    main()"]