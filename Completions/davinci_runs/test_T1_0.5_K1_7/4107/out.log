2022-04-13 18:20:20.132565 """
You work as a system administrator in a dormitory, which has $n$ rooms one after another along a straight hallway. Rooms are numbered from $1$ to $n$.

You have to connect all $n$ rooms to the Internet.

You can connect each room to the Internet directly, the cost of such connection for the $i$-th room is $i$ coins. 

Some rooms also have a spot for a router. The cost of placing a router in the $i$-th room is also $i$ coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room $i$, you connect all rooms with the numbers from $max(1,~i - k)$ to $min(n,~i + k)$ inclusive to the Internet, where $k$ is the range of router. The value of $k$ is the same for all routers. 

Calculate the minimum total cost of connecting all $n$ rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n, k \le 2 \cdot 10^5$) — the number of rooms and the range of each router.

The second line of the input contains one string $s$ of length $n$, consisting only of zeros and ones. If the $i$-th character of the string equals to '1' then there is a spot for a router in the $i$-th room. If the $i$-th character of the string equals to '0' then you cannot place a router in the $i$-th room.


-----Output-----

Print one integer — the minimum total cost of connecting all $n$ rooms to the Internet.


-----Examples-----
Input
5 2
00100

Output
3

Input
6 1
000000

Output
21

Input
4 1
0011

Output
4

Input
12 6
000010000100

Output
15



-----Note-----

In the first example it is enough to place the router in the room $3$, then all rooms will be connected to the Internet. The total cost of connection is $3$.

In the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is $1 + 2 + 3 + 4 + 5 + 6 = 21$.

In the third example you need to connect the room $1$ directly and place the router in the room $3$. Thus, the total cost of connection of all rooms is $1 + 3 = 4$.

In the fourth example you need to place routers in rooms $5$ and $10$. Then all rooms will be connected to the Internet. The total cost of connection is $5 + 10 = 15$.
"""
2022-04-13 18:20:20.132579 --------------------------
2022-04-13 18:20:49.323665 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i > k:\n                ans += i\n            else:\n                ans += k\n        else:\n            ans += i\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    sb = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sb[i] = sb[i - 1] + int(s[i - 1])\n    for i in range(k + 1, n + 1):\n        sb[i] += sb[i - k - 1]\n    for i in range(k + 1, n + 1):\n        sb[i] = min(sb[i], sb[i - 1])\n    print(sum(i + sb[i] for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\n\ndef solve(n, k, s):\n\n    # cost of connecting a room directly\n    direct_cost = [i for i in range(1, n+1)]\n\n    # cost of connecting a room via a router\n    router_cost = [0 for i in range(n)]\n\n    # count of routers that can be placed in a room\n    router_count = [0 for i in range(n)]\n\n    # initialize the router count and router cost\n    for i in range(n):\n        if s[i] == '1':\n            router_count[i] = 1\n            router_cost[i] = i+1\n\n    # update the router cost for each room\n    for i in range(n):\n        if router_count[i] > 0:\n            start = max(0, i-k)\n            end = min(n-1, i+k)\n            router_cost[start] += router_cost[i]\n            router_cost[end] -= router_cost[i]\n\n    # update the direct cost for each room\n    for i in range(1, n):\n        direct_cost[i] += direct_cost[i-1]\n\n    # update the router cost for each room\n    for i in range(1, n):\n        router_cost[i] += router_cost[i-1]\n\n    # initialize the minimum cost for each room to be the direct cost\n    min_cost = direct_cost\n\n    # update the min cost for each room\n    for i in range(n):\n        min_cost[i] = min(min_cost[i], router_cost[i])\n\n    # return the sum of the min cost\n    return sum(min_cost)\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(solve(n, k, s))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    s = list(s)\n    total = 0\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n            if i-k >= 0:\n                s[i-k] = '0'\n            if i+k < n:\n                s[i+k] = '0'\n\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\nans = 0\ncnt = 0\nfor i in range(n):\n    if s[i] == '1':\n        cnt += 1\n    else:\n        ans += i + 1\n\nprint(ans + (cnt - 1) * 2 * k + cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    # print(n, k, s)\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += i + 1\n    # print(cost)\n    router = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            router[i] = i + 1\n    # print(router)\n    if k == 0:\n        print(cost)\n    else:\n        router = [0] + router\n        router.append(0)\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = router[i - 1]\n        # print(router)\n        for i in range(n, 0, -1):\n            if router[i] == 0:\n                router[i] = router[i + 1]\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = i\n        # print(router)\n        for i in range(1, n + 1):\n            cost1 = router[i] + router[i + k] - i - 1\n            cost2 = router[i - 1] + router[i + k] - i - 1\n            cost3 = router[i - 1] + router[i + k + 1] - i - 1\n            cost = min(cost, cost1, cost2, cost3)\n        print(cost)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\nif s.count('1') == 0:\n    print(sum(range(1, n + 1)))\nelse:\n    ans = 0\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i + 1)\n    routers.append(n + 1)\n    for i in range(1, len(routers)):\n        if routers[i] - routers[i - 1] > k + 1:\n            ans += routers[i - 1] + (routers[i] - routers[i - 1] - 1 - k) // 2\n    print(ans)"
    }
  ],
  "created": 1649874020,
  "id": "cmpl-4wbtEtVHl5Dk27wQfI24dscSEDZFW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:20:49.323940 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i > k:\n                ans += i\n            else:\n                ans += k\n        else:\n            ans += i\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:20:49.324039 REASON stop
2022-04-13 18:20:49.324434 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    sb = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sb[i] = sb[i - 1] + int(s[i - 1])\n    for i in range(k + 1, n + 1):\n        sb[i] += sb[i - k - 1]\n    for i in range(k + 1, n + 1):\n        sb[i] = min(sb[i], sb[i - 1])\n    print(sum(i + sb[i] for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:20:49.324547 REASON stop
2022-04-13 18:20:49.324906 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\n\ndef solve(n, k, s):\n\n    # cost of connecting a room directly\n    direct_cost = [i for i in range(1, n+1)]\n\n    # cost of connecting a room via a router\n    router_cost = [0 for i in range(n)]\n\n    # count of routers that can be placed in a room\n    router_count = [0 for i in range(n)]\n\n    # initialize the router count and router cost\n    for i in range(n):\n        if s[i] == '1':\n            router_count[i] = 1\n            router_cost[i] = i+1\n\n    # update the router cost for each room\n    for i in range(n):\n        if router_count[i] > 0:\n            start = max(0, i-k)\n            end = min(n-1, i+k)\n            router_cost[start] += router_cost[i]\n            router_cost[end] -= router_cost[i]\n\n    # update the direct cost for each room\n    for i in range(1, n):\n        direct_cost[i] += direct_cost[i-1]\n\n    # update the router cost for each room\n    for i in range(1, n):\n        router_cost[i] += router_cost[i-1]\n\n    # initialize the minimum cost for each room to be the direct cost\n    min_cost = direct_cost\n\n    # update the min cost for each room\n    for i in range(n):\n        min_cost[i] = min(min_cost[i], router_cost[i])\n\n    # return the sum of the min cost\n    return sum(min_cost)\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(solve(n, k, s))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:20:49.324960 REASON stop
2022-04-13 18:20:49.349752 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    s = list(s)\n    total = 0\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n            if i-k >= 0:\n                s[i-k] = '0'\n            if i+k < n:\n                s[i+k] = '0'\n\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:20:49.349851 REASON stop
2022-04-13 18:20:49.370382 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ns = input()\n\nans = 0\ncnt = 0\nfor i in range(n):\n    if s[i] == '1':\n        cnt += 1\n    else:\n        ans += i + 1\n\nprint(ans + (cnt - 1) * 2 * k + cnt)"
}
2022-04-13 18:20:49.370492 REASON stop
2022-04-13 18:20:49.371185 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    # print(n, k, s)\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += i + 1\n    # print(cost)\n    router = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            router[i] = i + 1\n    # print(router)\n    if k == 0:\n        print(cost)\n    else:\n        router = [0] + router\n        router.append(0)\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = router[i - 1]\n        # print(router)\n        for i in range(n, 0, -1):\n            if router[i] == 0:\n                router[i] = router[i + 1]\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = i\n        # print(router)\n        for i in range(1, n + 1):\n            cost1 = router[i] + router[i + k] - i - 1\n            cost2 = router[i - 1] + router[i + k] - i - 1\n            cost3 = router[i - 1] + router[i + k + 1] - i - 1\n            cost = min(cost, cost1, cost2, cost3)\n        print(cost)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:20:49.371253 REASON stop
2022-04-13 18:20:49.371849 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ns = input()\n\nif s.count('1') == 0:\n    print(sum(range(1, n + 1)))\nelse:\n    ans = 0\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i + 1)\n    routers.append(n + 1)\n    for i in range(1, len(routers)):\n        if routers[i] - routers[i - 1] > k + 1:\n            ans += routers[i - 1] + (routers[i] - routers[i - 1] - 1 - k) // 2\n    print(ans)"
}
2022-04-13 18:20:49.371908 REASON stop
