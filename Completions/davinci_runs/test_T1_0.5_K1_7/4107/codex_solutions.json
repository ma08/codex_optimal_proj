["\n\nn, k = map(int, input().split())\ns = input()\n\nans = 0\ncnt = 0\nfor i in range(n):\n    if s[i] == '1':\n        cnt += 1\n    else:\n        ans += i + 1\n\nprint(ans + (cnt - 1) * 2 * k + cnt)", "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    sb = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sb[i] = sb[i - 1] + int(s[i - 1])\n    for i in range(k + 1, n + 1):\n        sb[i] += sb[i - k - 1]\n    for i in range(k + 1, n + 1):\n        sb[i] = min(sb[i], sb[i - 1])\n    print(sum(i + sb[i] for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i > k:\n                ans += i\n            else:\n                ans += k\n        else:\n            ans += i\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    s = list(s)\n    total = 0\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n            if i-k >= 0:\n                s[i-k] = '0'\n            if i+k < n:\n                s[i+k] = '0'\n\n    for i in range(n):\n        if s[i] == '1':\n            total += i\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k = map(int, input().split())\ns = input()\n\nif s.count('1') == 0:\n    print(sum(range(1, n + 1)))\nelse:\n    ans = 0\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i + 1)\n    routers.append(n + 1)\n    for i in range(1, len(routers)):\n        if routers[i] - routers[i - 1] > k + 1:\n            ans += routers[i - 1] + (routers[i] - routers[i - 1] - 1 - k) // 2\n    print(ans)", "\n\nimport sys\nimport math\nimport heapq\nimport bisect\n\ndef solve(n, k, s):\n\n    # cost of connecting a room directly\n    direct_cost = [i for i in range(1, n+1)]\n\n    # cost of connecting a room via a router\n    router_cost = [0 for i in range(n)]\n\n    # count of routers that can be placed in a room\n    router_count = [0 for i in range(n)]\n\n    # initialize the router count and router cost\n    for i in range(n):\n        if s[i] == '1':\n            router_count[i] = 1\n            router_cost[i] = i+1\n\n    # update the router cost for each room\n    for i in range(n):\n        if router_count[i] > 0:\n            start = max(0, i-k)\n            end = min(n-1, i+k)\n            router_cost[start] += router_cost[i]\n            router_cost[end] -= router_cost[i]\n\n    # update the direct cost for each room\n    for i in range(1, n):\n        direct_cost[i] += direct_cost[i-1]\n\n    # update the router cost for each room\n    for i in range(1, n):\n        router_cost[i] += router_cost[i-1]\n\n    # initialize the minimum cost for each room to be the direct cost\n    min_cost = direct_cost\n\n    # update the min cost for each room\n    for i in range(n):\n        min_cost[i] = min(min_cost[i], router_cost[i])\n\n    # return the sum of the min cost\n    return sum(min_cost)\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(solve(n, k, s))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    # print(n, k, s)\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += i + 1\n    # print(cost)\n    router = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            router[i] = i + 1\n    # print(router)\n    if k == 0:\n        print(cost)\n    else:\n        router = [0] + router\n        router.append(0)\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = router[i - 1]\n        # print(router)\n        for i in range(n, 0, -1):\n            if router[i] == 0:\n                router[i] = router[i + 1]\n        # print(router)\n        for i in range(1, n + 1):\n            if router[i] == 0:\n                router[i] = i\n        # print(router)\n        for i in range(1, n + 1):\n            cost1 = router[i] + router[i + k] - i - 1\n            cost2 = router[i - 1] + router[i + k] - i - 1\n            cost3 = router[i - 1] + router[i + k + 1] - i - 1\n            cost = min(cost, cost1, cost2, cost3)\n        print(cost)\n\nif __name__ == '__main__':\n    main()"]