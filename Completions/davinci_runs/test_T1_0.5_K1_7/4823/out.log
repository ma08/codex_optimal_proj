2022-04-13 23:31:55.948740 """
You are given a five-card hand drawn from a standard $52$-card deck. The strength of your hand is the maximum value $k$ such that there are $k$ cards in your hand that have the same rank.

Compute the strength of your hand.

-----Input-----
The input will consist of a single line, with five two-character strings separated by spaces.

The first character in each string will be the rank of the card, and will be one of A23456789TJQK. The second character in the string will be the suit of the card, and will be one of CDHS.

You may assume all the strings are distinct.

-----Output-----
Output, on a single line, the strength of your hand.

-----Examples-----
Sample Input 1:
AC AD AH AS KD
Sample Output 1:
4

Sample Input 2:
2C 4D 4H 2D 2H
Sample Output 2:
3
"""
2022-04-13 23:31:55.948748 --------------------------
2022-04-13 23:32:35.744708 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef hand(cards):\n    ranks = [card[0] for card in cards]\n    counts = [ranks.count(rank) for rank in set(ranks)]\n    return max(counts)\n\ndef main():\n    cards = input().split()\n    print(hand(cards))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\n# The input is a string of 5 cards\n# Convert the string into a list of cards\ncards = input().split()\n\n# The strength of the hand is the maximum number of cards with the same rank\n# We can find this by counting the number of cards with each rank\n# and then taking the maximum of these counts\ncounts = {}\nfor card in cards:\n    counts[card[0]] = counts.get(card[0], 0) + 1\n\n# Print the maximum count\nprint(max(counts.values()))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    '''\n    Read input from stdin, provide input before running code\n    '''\n    inp = input()\n    lis = inp.split()\n    dic = {}\n    for i in lis:\n        if i[0] not in dic.keys():\n            dic[i[0]] = 1\n        else:\n            dic[i[0]] += 1\n    print(max(dic.values()))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\nimport sys\nfrom collections import Counter\n\n\ndef main():\n    data = sys.stdin.readline().strip().split()\n    counts = Counter(data)\n    print(max(counts.values()))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\ndef get_strength(hand):\n    ranks = [card[0] for card in hand]\n    rank_counts = Counter(ranks)\n    return max(rank_counts.values())\n\ndef main():\n    hand = input()\n    print(get_strength(hand.split()))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# def card_strength(cards):\n#     strength = 0\n#     for card in cards:\n#         if cards.count(card) > strength:\n#             strength = cards.count(card)\n#     return strength\n\ndef card_strength(cards):\n    return max([cards.count(card) for card in cards])\n\nif __name__ == \"__main__\":\n    cards = input().split()\n    print(card_strength(cards))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    # Read Input\n    cards = input().split()\n\n    # Create a dictionary of card ranks\n    ranks = {'A':0, '2':1, '3':2, '4':3, '5':4, '6':5, '7':6, '8':7, '9':8, 'T':9, 'J':10, 'Q':11, 'K':12}\n\n    # Create a dictionary of card suits\n    suits = {'C':0, 'D':1, 'H':2, 'S':3}\n\n    # Create a dictionary of card ranks and suits\n    card_dict = {}\n    for card in cards:\n        card_dict[card] = [ranks[card[0]], suits[card[1]]]\n\n    # Create a dictionary of card ranks and number of cards\n    rank_dict = {}\n    for card in cards:\n        if card[0] in rank_dict:\n            rank_dict[card[0]] += 1\n        else:\n            rank_dict[card[0]] = 1\n\n    # Create a dictionary of card suits and number of cards\n    suit_dict = {}\n    for card in cards:\n        if card[1] in suit_dict:\n            suit_dict[card[1]] += 1\n        else:\n            suit_dict[card[1]] = 1\n\n    # Find the maximum number of cards with the same rank\n    max_rank = max(rank_dict.values())\n\n    # Find the maximum number of cards with the same suit\n    max_suit = max(suit_dict.values())\n\n\n    # Find the strength of the hand\n    # Royal Flush\n    if max_suit == 5 and max_rank == 1:\n        if card_dict['AC'][0] == 0 and card_dict['AD'][0] == 9 and card_dict['AH'][0] == 10 and card_dict['AS'][0] == 11 and card_dict['KD'][0] == 12:\n            strength = 10\n    # Straight Flush\n    elif max_suit == 5 and max_rank == 1:\n        strength = 9\n    # Four of a Kind\n    elif max_rank == 4:\n        strength = 8\n    # Full House\n    elif max_rank == 3 and max_suit == 2:\n        strength = 7\n    # Flush\n    elif max_suit == 5:\n        strength = 6\n    # Straight\n    elif max_rank == 1:\n        strength = 5\n    # Three of a Kind\n    elif max_rank == 3:\n        strength = 4\n    # Two Pair\n    elif max_rank == 2 and max_suit == 2:\n        strength = 3\n    # One Pair\n    elif max_rank == 2:\n        strength = 2\n    # High Card\n    else:\n        strength = 1\n\n    print(strength)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649892716,
  "id": "cmpl-4wgkmIdY0oPMWNU0gKV35wmVmEEbF",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:32:35.744980 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef hand(cards):\n    ranks = [card[0] for card in cards]\n    counts = [ranks.count(rank) for rank in set(ranks)]\n    return max(counts)\n\ndef main():\n    cards = input().split()\n    print(hand(cards))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:32:35.745013 REASON stop
2022-04-13 23:32:35.745410 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.745433 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\n# The input is a string of 5 cards\n# Convert the string into a list of cards\ncards = input().split()\n\n# The strength of the hand is the maximum number of cards with the same rank\n# We can find this by counting the number of cards with each rank\n# and then taking the maximum of these counts\ncounts = {}\nfor card in cards:\n    counts[card[0]] = counts.get(card[0], 0) + 1\n\n# Print the maximum count\nprint(max(counts.values()))"
}
2022-04-13 23:32:35.745543 REASON stop
2022-04-13 23:32:35.745794 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.745807 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    '''\n    Read input from stdin, provide input before running code\n    '''\n    inp = input()\n    lis = inp.split()\n    dic = {}\n    for i in lis:\n        if i[0] not in dic.keys():\n            dic[i[0]] = 1\n        else:\n            dic[i[0]] += 1\n    print(max(dic.values()))\n\nmain()"
}
2022-04-13 23:32:35.745845 REASON stop
2022-04-13 23:32:35.746931 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.746946 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\nimport sys\nfrom collections import Counter\n\n\ndef main():\n    data = sys.stdin.readline().strip().split()\n    counts = Counter(data)\n    print(max(counts.values()))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:32:35.746986 REASON stop
2022-04-13 23:32:35.759448 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.759518 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\ndef get_strength(hand):\n    ranks = [card[0] for card in hand]\n    rank_counts = Counter(ranks)\n    return max(rank_counts.values())\n\ndef main():\n    hand = input()\n    print(get_strength(hand.split()))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:32:35.759597 REASON stop
2022-04-13 23:32:35.760218 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.760236 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# def card_strength(cards):\n#     strength = 0\n#     for card in cards:\n#         if cards.count(card) > strength:\n#             strength = cards.count(card)\n#     return strength\n\ndef card_strength(cards):\n    return max([cards.count(card) for card in cards])\n\nif __name__ == \"__main__\":\n    cards = input().split()\n    print(card_strength(cards))"
}
2022-04-13 23:32:35.760287 REASON stop
2022-04-13 23:32:35.773899 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
2022-04-13 23:32:35.773924 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    # Read Input\n    cards = input().split()\n\n    # Create a dictionary of card ranks\n    ranks = {'A':0, '2':1, '3':2, '4':3, '5':4, '6':5, '7':6, '8':7, '9':8, 'T':9, 'J':10, 'Q':11, 'K':12}\n\n    # Create a dictionary of card suits\n    suits = {'C':0, 'D':1, 'H':2, 'S':3}\n\n    # Create a dictionary of card ranks and suits\n    card_dict = {}\n    for card in cards:\n        card_dict[card] = [ranks[card[0]], suits[card[1]]]\n\n    # Create a dictionary of card ranks and number of cards\n    rank_dict = {}\n    for card in cards:\n        if card[0] in rank_dict:\n            rank_dict[card[0]] += 1\n        else:\n            rank_dict[card[0]] = 1\n\n    # Create a dictionary of card suits and number of cards\n    suit_dict = {}\n    for card in cards:\n        if card[1] in suit_dict:\n            suit_dict[card[1]] += 1\n        else:\n            suit_dict[card[1]] = 1\n\n    # Find the maximum number of cards with the same rank\n    max_rank = max(rank_dict.values())\n\n    # Find the maximum number of cards with the same suit\n    max_suit = max(suit_dict.values())\n\n\n    # Find the strength of the hand\n    # Royal Flush\n    if max_suit == 5 and max_rank == 1:\n        if card_dict['AC'][0] == 0 and card_dict['AD'][0] == 9 and card_dict['AH'][0] == 10 and card_dict['AS'][0] == 11 and card_dict['KD'][0] == 12:\n            strength = 10\n    # Straight Flush\n    elif max_suit == 5 and max_rank == 1:\n        strength = 9\n    # Four of a Kind\n    elif max_rank == 4:\n        strength = 8\n    # Full House\n    elif max_rank == 3 and max_suit == 2:\n        strength = 7\n    # Flush\n    elif max_suit == 5:\n        strength = 6\n    # Straight\n    elif max_rank == 1:\n        strength = 5\n    # Three of a Kind\n    elif max_rank == 3:\n        strength = 4\n    # Two Pair\n    elif max_rank == 2 and max_suit == 2:\n        strength = 3\n    # One Pair\n    elif max_rank == 2:\n        strength = 2\n    # High Card\n    else:\n        strength = 1\n\n    print(strength)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:32:35.773999 REASON stop
2022-04-13 23:32:35.774611 test/intro-questions.txt_dir/4823/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4823/solutions.json'
