2022-04-13 21:31:16.426175 """
There are $n$ points on a coordinate axis $OX$. The $i$-th point is located at the integer point $x_i$ and has a speed $v_i$. It is guaranteed that no two points occupy the same coordinate. All $n$ points move with the constant speed, the coordinate of the $i$-th point at the moment $t$ ($t$ can be non-integer) is calculated as $x_i + t \cdot v_i$.

Consider two points $i$ and $j$. Let $d(i, j)$ be the minimum possible distance between these two points over any possible moments of time (even non-integer). It means that if two points $i$ and $j$ coincide at some moment, the value $d(i, j)$ will be $0$.

Your task is to calculate the value $\sum\limits_{1 \le i < j \le n}$ $d(i, j)$ (the sum of minimum distances over all pairs of points).


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of points.

The second line of the input contains $n$ integers $x_1, x_2, \dots, x_n$ ($1 \le x_i \le 10^8$), where $x_i$ is the initial coordinate of the $i$-th point. It is guaranteed that all $x_i$ are distinct.

The third line of the input contains $n$ integers $v_1, v_2, \dots, v_n$ ($-10^8 \le v_i \le 10^8$), where $v_i$ is the speed of the $i$-th point.


-----Output-----

Print one integer — the value $\sum\limits_{1 \le i < j \le n}$ $d(i, j)$ (the sum of minimum distances over all pairs of points).


-----Examples-----
Input
3
1 3 2
-100 2 3

Output
3

Input
5
2 1 4 3 5
2 2 2 3 4

Output
19

Input
2
2 1
-3 0

Output
0
"""
2022-04-13 21:31:16.426190 --------------------------
2022-04-13 21:31:36.736885 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef distance(x1, v1, x2, v2):\n    if v1 == v2:\n        return 0\n    else:\n        if (x2-x1)%(v1-v2) == 0:\n            return (x2-x1)/(v1-v2)\n        else:\n            return -1\n\ndef distance_sum(x, v):\n    s = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            d = distance(x[i], v[i], x[j], v[j])\n            if d >= 0:\n                s += d\n    return s\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\nprint(distance_sum(x, v))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n  n = int(input())\n  x = list(map(int, input().split()))\n  v = list(map(int, input().split()))\n  x = list(zip(x, v))\n  x.sort()\n  x = list(zip(*x))\n  x = list(map(list, x))\n  x[0].sort()\n  x[1].sort()\n  res = 0\n  i = 0\n  while i < n - 1:\n    if x[1][i] == x[1][i + 1]:\n      res += abs(x[0][i] - x[0][i + 1])\n    i += 1\n  print(res)\n\nif __name__ == \"__main__\":\n  main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nv = [int(i) for i in input().split()]\n\n#print(x)\n#print(v)\n\nd_min = [0]*n\nd_max = [0]*n\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if x[i] < x[j]:\n            d_min[i] = max(d_min[i], x[j] - x[i])\n        else:\n            d_max[i] = max(d_max[i], x[i] - x[j])\n\n#print(d_min)\n#print(d_max)\n\nans = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if v[i] > v[j]:\n            ans += d_min[i]\n        else:\n            ans += d_max[i]\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n\n    # calculate distance of each point\n    dist = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            dist[i] += abs(x[i] - x[j])\n\n    # calculate the sum of distances\n    total_dist = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if v[i] > v[j]:\n                total_dist += dist[i]\n            else:\n                total_dist += dist[j]\n\n    print(total_dist)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nx.sort()\n\nfrom itertools import combinations\n\nresult = 0\n\nfor i, j in combinations(range(n), 2):\n    if v[i] > v[j]:\n        result += x[j] - x[i]\n    else:\n        result += x[i] - x[j]\n\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Python 2\n\nn = int(raw_input())\nxs = map(int, raw_input().split())\nvs = map(int, raw_input().split())\n\nmin_dist = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        min_dist += min(abs(xs[i] - xs[j]), abs(xs[i] - xs[j] - vs[j] + vs[i]), abs(xs[i] - xs[j] + vs[j] - vs[i]))\n\nprint min_dist"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    t = [x[i]/v[i] for i in range(n)]\n    t_sorted = sorted(t)\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s += abs(t_sorted[i] - t_sorted[j])\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649885476,
  "id": "cmpl-4wes0FqFkLYR1ZZu06zwklYTwiQ5U",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:31:36.737145 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef distance(x1, v1, x2, v2):\n    if v1 == v2:\n        return 0\n    else:\n        if (x2-x1)%(v1-v2) == 0:\n            return (x2-x1)/(v1-v2)\n        else:\n            return -1\n\ndef distance_sum(x, v):\n    s = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            d = distance(x[i], v[i], x[j], v[j])\n            if d >= 0:\n                s += d\n    return s\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\nprint(distance_sum(x, v))"
}
2022-04-13 21:31:36.737183 REASON stop
2022-04-13 21:31:36.737641 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n  n = int(input())\n  x = list(map(int, input().split()))\n  v = list(map(int, input().split()))\n  x = list(zip(x, v))\n  x.sort()\n  x = list(zip(*x))\n  x = list(map(list, x))\n  x[0].sort()\n  x[1].sort()\n  res = 0\n  i = 0\n  while i < n - 1:\n    if x[1][i] == x[1][i + 1]:\n      res += abs(x[0][i] - x[0][i + 1])\n    i += 1\n  print(res)\n\nif __name__ == \"__main__\":\n  main()"
}
2022-04-13 21:31:36.737745 REASON stop
2022-04-13 21:31:36.738083 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nv = [int(i) for i in input().split()]\n\n#print(x)\n#print(v)\n\nd_min = [0]*n\nd_max = [0]*n\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if x[i] < x[j]:\n            d_min[i] = max(d_min[i], x[j] - x[i])\n        else:\n            d_max[i] = max(d_max[i], x[i] - x[j])\n\n#print(d_min)\n#print(d_max)\n\nans = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if v[i] > v[j]:\n            ans += d_min[i]\n        else:\n            ans += d_max[i]\n\nprint(ans)"
}
2022-04-13 21:31:36.738145 REASON stop
2022-04-13 21:31:36.752284 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n\n    # calculate distance of each point\n    dist = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            dist[i] += abs(x[i] - x[j])\n\n    # calculate the sum of distances\n    total_dist = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if v[i] > v[j]:\n                total_dist += dist[i]\n            else:\n                total_dist += dist[j]\n\n    print(total_dist)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:31:36.752403 REASON stop
2022-04-13 21:31:36.768727 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nx.sort()\n\nfrom itertools import combinations\n\nresult = 0\n\nfor i, j in combinations(range(n), 2):\n    if v[i] > v[j]:\n        result += x[j] - x[i]\n    else:\n        result += x[i] - x[j]\n\nprint(result)"
}
2022-04-13 21:31:36.768840 REASON stop
2022-04-13 21:31:36.769618 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Python 2\n\nn = int(raw_input())\nxs = map(int, raw_input().split())\nvs = map(int, raw_input().split())\n\nmin_dist = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        min_dist += min(abs(xs[i] - xs[j]), abs(xs[i] - xs[j] - vs[j] + vs[i]), abs(xs[i] - xs[j] + vs[j] - vs[i]))\n\nprint min_dist"
}
2022-04-13 21:31:36.769676 REASON stop
2022-04-13 21:31:36.770392 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    t = [x[i]/v[i] for i in range(n)]\n    t_sorted = sorted(t)\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s += abs(t_sorted[i] - t_sorted[j])\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:31:36.770454 REASON stop
