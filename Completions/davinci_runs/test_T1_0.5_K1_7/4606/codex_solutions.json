["\n\nn = int(input())\nprint(\"ABC\" + str(n))", "\n\nN = int(input())\n\nprint(\"ABC\" + str(N))", "\n\ndef main():\n    N = int(input())\n    print(\"ABC{}\".format(N))\n\nif __name__ == '__main__':\n    main()", "\n\nnum = int(input())\nprint(\"ABC\"+str(num))", "\n\n# print(\"ABC\" + str(input()))\n\n\"\"\"\n-----Problem B-----\n\n-----Description-----\nYou are given a string S.\nIs it possible to rearrange the letters in S so that it becomes a palindrome? If it is possible, print \"YES\". Otherwise, print \"NO\".\n\n-----Constraints-----\n - 1 \u2264 |S| \u2264 100\n - S consists only of lowercase letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf it is possible to rearrange the letters in S so that it becomes a palindrome, print \"YES\". Otherwise, print \"NO\".\n\n-----Sample Input-----\naabb\n\n-----Sample Output-----\nYES\n\nIn this case, you can rearrange the letters in S so that it becomes a palindrome by rearranging it as follows: aabb \u2192 abab \u2192 abba\n\"\"\"\n\n# s = input()\n# ss = list(s)\n# ss.sort()\n# if ss == ss[::-1]:\n#     print(\"YES\")\n# else:\n#     print(\"NO\")\n\n\"\"\"\n-----Problem C-----\n\n-----Description-----\nYou are given n integers a1,a2,...,an.\nFind the number of pairs (i,j) (1\u2264i<j\u2264n) that satisfy ai+aj\u2265ak for all k (i<k<j).\n\n-----Constraints-----\n - 1 \u2264 n \u2264 2000\n - 0 \u2264 ai \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na1 a2 ... an\n\n-----Output-----\nPrint the number of pairs (i,j) (1\u2264i<j\u2264n) that satisfy ai+aj\u2265ak for all k (i<k<j).\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n10\n\nThe pairs are (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), and (4,5).\n\"\"\"\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# ans = 0\n# for i in range(n):\n#     for j in range(i+1, n):\n#         if all(a[i] + a[j] >= a[k] for k in range(i+1, j)):\n#             ans += 1\n# print(ans)\n\n\"\"\"\n-----Problem D-----\n\n-----Description-----\nYou are given a string S.\nFind the number of distinct, non-empty substrings of S.\n\n-----Constraints-----\n - 1 \u2264 |S| \u2264 10^5\n - S consists only of lowercase letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the number of distinct, non-empty substrings of S.\n\n-----Sample Input-----\natcoderandatcodeer\n\n-----Sample Output-----\n15\n\nThe distinct, non-empty substrings of S are \"a\", \"t\", \"c\", \"o\", \"d\", \"e\", \"r\", \"n\", \"a\", \"n\", \"d\", \"at\", \"co\", \"de\", \"er\".\n\"\"\"\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1, len(s)+1):\n#         if s[i:j] == \"\".join(reversed(s[i:j])):\n#             ans += 1\n# print(ans)", "\n\nn = int(input())\nprint(\"ABC\"+str(n))"]