2022-04-13 22:33:57.851174 """
=====Problem Statement=====
You are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.

=====Input Format=====
The first line contains N, the number of lines in the XML document.
The next N lines follow containing the XML document.

=====Output Format=====
Output a single line, the integer value of the maximum level of nesting in the XML document.
"""
2022-04-13 22:33:57.851188 --------------------------
2022-04-13 22:34:13.903954 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    level += 1\n    if level >= maxdepth:\n        maxdepth = level\n    for child in elem:\n        depth(child, level)\n\nif __name__ == '__main__':\n    n = int(input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n  # your code goes here\n  return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n  sys.stdin.readline()\n  xml = sys.stdin.read()\n  tree = etree.ElementTree(etree.fromstring(xml))\n  root = tree.getroot()\n  print get_attr_number(root)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node:\n        count += get_attr_number(child)\n    return count + len(node.attrib)\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for i in node.iter():\n        count += len(i.attrib)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n\n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n\n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + raw_input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print maxdepth"
    }
  ],
  "created": 1649889237,
  "id": "cmpl-4wfqfx50ITjr3t5Sr7L4MiT6zsuD3",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:34:13.904215 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    level += 1\n    if level >= maxdepth:\n        maxdepth = level\n    for child in elem:\n        depth(child, level)\n\nif __name__ == '__main__':\n    n = int(input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)"
}
2022-04-13 22:34:13.904252 REASON stop
2022-04-13 22:34:13.904672 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n  # your code goes here\n  return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n  sys.stdin.readline()\n  xml = sys.stdin.read()\n  tree = etree.ElementTree(etree.fromstring(xml))\n  root = tree.getroot()\n  print get_attr_number(root)"
}
2022-04-13 22:34:13.904782 REASON stop
2022-04-13 22:34:13.905145 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node:\n        count += get_attr_number(child)\n    return count + len(node.attrib)\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
}
2022-04-13 22:34:13.905190 REASON stop
2022-04-13 22:34:13.917727 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
}
2022-04-13 22:34:13.917812 REASON stop
2022-04-13 22:34:13.939453 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for i in node.iter():\n        count += len(i.attrib)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
}
2022-04-13 22:34:13.939554 REASON stop
2022-04-13 22:34:13.940252 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n\n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)"
}
2022-04-13 22:34:13.940333 REASON stop
2022-04-13 22:34:13.941086 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n\n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    xml = \"\"\n    for i in range(n):\n        xml =  xml + raw_input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print maxdepth"
}
2022-04-13 22:34:13.941186 REASON stop
