2022-04-13 18:30:44.496415 """
Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.

The current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.

Vova can only use $2 \times 1$ bricks to put in the wall (he has infinite supply of them, however).

Vova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).

The next paragraph is specific to the version 1 of the problem.

Vova can also put bricks vertically. That means increasing height of any part of the wall by 2.

Vova is a perfectionist, so he considers the wall completed when:

  all parts of the wall has the same height;  the wall has no empty spaces inside it. 

Can Vova complete the wall using any amount of bricks (possibly zero)?


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of parts in the wall.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$) — the initial heights of the parts of the wall.


-----Output-----

Print "YES" if Vova can complete the wall using any amount of bricks (possibly zero).

Print "NO" otherwise.


-----Examples-----
Input
5
2 1 1 2 5

Output
YES

Input
3
4 5 3

Output
YES

Input
2
10 10

Output
YES

Input
3
1 2 3

Output
NO



-----Note-----

In the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.

In the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.

In the third example the wall is already complete.
"""
2022-04-13 18:30:44.496430 --------------------------
2022-04-13 18:31:01.261602 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_a = max(a)\nmin_a = min(a)\n\nif max_a - min_a > 1:\n    print(\"NO\")\nelse:\n    if max_a - min_a == 0:\n        print(\"YES\")\n    else:\n        if a.count(max_a) > 1 and a.count(min_a) > 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a) - 1):\n        if a[i] != a[i + 1]:\n            print(\"NO\")\n            exit()\n    print(\"YES\")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef great_vova_wall():\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print('YES')\n        return\n    if n==2:\n        if a[0]==a[1]:\n            print('YES')\n            return\n        else:\n            print('NO')\n            return\n    if n>2:\n        if a[0]==a[1]:\n            for i in range(1,n-1):\n                if a[i]!=a[i+1]:\n                    print('NO')\n                    return\n            print('YES')\n            return\n        else:\n            print('NO')\n            return\n\ngreat_vova_wall()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        i = 0\n        while i < n - 1:\n            if a[i] == a[i + 1]:\n                i += 1\n            elif a[i] + 1 == a[i + 1] or a[i] - 1 == a[i + 1]:\n                a[i + 1] = a[i]\n            else:\n                print('NO')\n                return\n        print('YES')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(i) for i in input().split()]\nif (a[0] == a[-1]) and (a[0] == a[n//2]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    min_a = a[0]\n    max_a = a[-1]\n    if min_a == max_a:\n        print('YES')\n    elif max_a - min_a == 1:\n        if (len([i for i in a if i == min_a]) == 1 and len([i for i in a if i == max_a]) == len(a) - 1) or \\\n                (len([i for i in a if i == min_a]) == len(a) - 1 and len([i for i in a if i == max_a]) == 1):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, a):\n    if n == 1:\n        return True\n    if a[0] != a[1]:\n        return False\n    if a[-1] != a[-2]:\n        return False\n    for i in range(1, n - 1):\n        if a[i] != a[i - 1] and a[i] != a[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES' if solve(n, a) else 'NO')\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649874644,
  "id": "cmpl-4wc3I1pF116B15qN2amL7sXAe4BuM",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:31:01.261883 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_a = max(a)\nmin_a = min(a)\n\nif max_a - min_a > 1:\n    print(\"NO\")\nelse:\n    if max_a - min_a == 0:\n        print(\"YES\")\n    else:\n        if a.count(max_a) > 1 and a.count(min_a) > 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
}
2022-04-13 18:31:01.261921 REASON stop
2022-04-13 18:31:01.262368 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a) - 1):\n        if a[i] != a[i + 1]:\n            print(\"NO\")\n            exit()\n    print(\"YES\")"
}
2022-04-13 18:31:01.262491 REASON stop
2022-04-13 18:31:01.262868 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef great_vova_wall():\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print('YES')\n        return\n    if n==2:\n        if a[0]==a[1]:\n            print('YES')\n            return\n        else:\n            print('NO')\n            return\n    if n>2:\n        if a[0]==a[1]:\n            for i in range(1,n-1):\n                if a[i]!=a[i+1]:\n                    print('NO')\n                    return\n            print('YES')\n            return\n        else:\n            print('NO')\n            return\n\ngreat_vova_wall()"
}
2022-04-13 18:31:01.262919 REASON stop
2022-04-13 18:31:01.265056 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        i = 0\n        while i < n - 1:\n            if a[i] == a[i + 1]:\n                i += 1\n            elif a[i] + 1 == a[i + 1] or a[i] - 1 == a[i + 1]:\n                a[i + 1] = a[i]\n            else:\n                print('NO')\n                return\n        print('YES')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:31:01.265125 REASON stop
2022-04-13 18:31:01.287390 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(i) for i in input().split()]\nif (a[0] == a[-1]) and (a[0] == a[n//2]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"
}
2022-04-13 18:31:01.287530 REASON stop
2022-04-13 18:31:01.288316 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    min_a = a[0]\n    max_a = a[-1]\n    if min_a == max_a:\n        print('YES')\n    elif max_a - min_a == 1:\n        if (len([i for i in a if i == min_a]) == 1 and len([i for i in a if i == max_a]) == len(a) - 1) or \\\n                (len([i for i in a if i == min_a]) == len(a) - 1 and len([i for i in a if i == max_a]) == 1):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:31:01.288393 REASON stop
2022-04-13 18:31:01.289237 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, a):\n    if n == 1:\n        return True\n    if a[0] != a[1]:\n        return False\n    if a[-1] != a[-2]:\n        return False\n    for i in range(1, n - 1):\n        if a[i] != a[i - 1] and a[i] != a[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES' if solve(n, a) else 'NO')\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:31:01.289307 REASON stop
