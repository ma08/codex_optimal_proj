2022-04-13 23:51:57.556196 """
Pubnite is an epic battle royale game featuring unique gameplay mechanics such as dancing! Every player enjoys dancing in the middle of fierce and brutal tactical firefights.

This unique feature has made Pubnite the second most popular game on the internet, next to none but BeeLizard’s first person shooter game OvalWatch! Epig Games, the developer of Pubnite, is thinking of pulling one last trick to outsell OverWatch, and defeat its competitor, BeeLizard, once and for all.

Announcing Epig Games’s new limited-time global event: Epig Dance Off!

In Epig Dance Off, players can invent dance moves, videotape themselves dancing and submit their dance moves to Epig Games, where Epig Games will rate the moves. At the end of the event, Epig Games will announce the moves with the best ratings, and incorporate those dance moves into the game. The inventors of the moves will be crowned Supreme Winners of Epig Dance Off, and there is no greater glory than that.

Epig Games ran into an issue. Too many players are eager to join the Epig Dance Off and there are too many submissions to rate. The incredibly smart designers at Epig Games came up with yet another ingenious idea – they shall use software to determine the rating of a dance!

Having not enough engineering power at Epig Games, they have hired an intern – you – to write software that rates a dance!

The rating system is designed as follows: Each dance is composed of a sequence of moves. The rating of the dance is the number of moves performed in the sequence.

The dance is described by a grid with $N$ rows and $M$ columns. Each character in the grid is either a ‘$’, denoting the dancer is seen in this position, or a ‘_’, denoting the dancer is not seen in this position. When there is a single blank column, that denotes a frame is completed and the dancer has completed one move, where a blank column is defined to contain only ‘_’.

-----Input-----
The first line contains two integers $N$ and $M$. It is guaranteed that $1\leq N, M\leq 2000$.

The next $N$ lines contains $M$ characters each. It is guaranteed that each character is either ‘_’or ‘$’. It is also guaranteed that both the first and last columns are non-blank, and no two consecutive columns are both blank.

-----Output-----
Output a single integer $T$, the rating of the dance, i.e. number of dance moves in the recording.

-----Examples-----
Sample Input:
13 50
____$$$_______$$$______$$$________$$$______$$$____
____$$$_______$$$______$$$________$$$______$$$____
_____$_________$________$__________$________$_____
___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___
__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__
_$____$$____$__$__$___$$____$___$__$__$___$$____$_
$_____$$___$___$___$__$$_____$_$___$___$__$$_____$
_____$_$______$_$_____$_$_________$_$_____$_$_____
____$___$____$___$____$___$______$___$____$___$___
___$____$___$_____$___$____$____$_____$___$____$__
__$_____$___$_____$___$_____$___$_____$___$_____$_
__$_____$___$_____$___$_____$___$_____$___$_____$_
_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$
Sample Output:
5
"""
2022-04-13 23:51:57.556212 --------------------------
2022-04-13 23:52:13.940062 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m = [int(x) for x in input().split()]\n\nboard = []\nfor _ in range(n):\n    board.append(input())\n\nframes = 0\nfor i in range(m):\n    if board[0][i] == '_':\n        frames += 1\n\nprint(frames)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    count = 0\n    for i in range(m):\n        if grid[0][i] == '_':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nif __name__ == \"__main__\":\n    N, M = map(int, input().split())\n    arr = []\n    for i in range(N):\n        arr.append(input())\n    ans = 0\n    moves = 0\n    for i in range(M):\n        if arr[0][i] == '$':\n            moves += 1\n        if i > 0 and arr[0][i] == '_' and arr[0][i - 1] == '$':\n            ans += moves\n            moves = 0\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# TODO: Use a faster method\ndef find_move(grid):\n    move = 0\n    for i in range(1, len(grid[0])):\n        if grid[0][i] == '_':\n            move += 1\n            for row in grid:\n                if row[i] != '_':\n                    move -= 1\n                    break\n    return move\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    print(find_move(grid))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n,m = [int(i) for i in input().split()]\n    grid = [input() for i in range(n)]\n    moves = 0\n    for j in range(m):\n        s = ''.join([grid[i][j] for i in range(n)])\n        if s.count('$') == 0:\n            moves += 1\n    print(moves)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    N, M = map(int, readline().split())\n    moves = [readline() for _ in range(N)]\n\n    count = 0\n\n    for j in range(M):\n        all_blank = True\n        for i in range(N):\n            if moves[i][j] != '_':\n                all_blank = False\n                break\n        if all_blank:\n            count += 1\n\n    print count\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN, M = list(map(int, input().split()))\n\ndance = []\nfor i in range(N):\n    dance.append(input())\n\n\"\"\"\n1. Find the first non-blank column\n2. Find the next blank column\n3. Find the next non-blank column\n4. Find the next blank column\n5. Repeat until the last column\n\"\"\"\n\ncolumn = 0\ndance_moves = 0\n\nwhile column < M:\n    # Find the first non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    # Find the next non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    dance_moves += 1\n\nprint(dance_moves)"
    }
  ],
  "created": 1649893917,
  "id": "cmpl-4wh49QQ4G9vP9IQOziUXMh6icH69d",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:52:13.940348 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m = [int(x) for x in input().split()]\n\nboard = []\nfor _ in range(n):\n    board.append(input())\n\nframes = 0\nfor i in range(m):\n    if board[0][i] == '_':\n        frames += 1\n\nprint(frames)"
}
2022-04-13 23:52:13.940381 REASON stop
2022-04-13 23:52:13.940701 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.940716 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    count = 0\n    for i in range(m):\n        if grid[0][i] == '_':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:52:13.940822 REASON stop
2022-04-13 23:52:13.941071 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.941083 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nif __name__ == \"__main__\":\n    N, M = map(int, input().split())\n    arr = []\n    for i in range(N):\n        arr.append(input())\n    ans = 0\n    moves = 0\n    for i in range(M):\n        if arr[0][i] == '$':\n            moves += 1\n        if i > 0 and arr[0][i] == '_' and arr[0][i - 1] == '$':\n            ans += moves\n            moves = 0\n    print(ans)"
}
2022-04-13 23:52:13.941145 REASON stop
2022-04-13 23:52:13.958933 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.958964 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# TODO: Use a faster method\ndef find_move(grid):\n    move = 0\n    for i in range(1, len(grid[0])):\n        if grid[0][i] == '_':\n            move += 1\n            for row in grid:\n                if row[i] != '_':\n                    move -= 1\n                    break\n    return move\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    print(find_move(grid))"
}
2022-04-13 23:52:13.959025 REASON stop
2022-04-13 23:52:13.973477 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.973504 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n,m = [int(i) for i in input().split()]\n    grid = [input() for i in range(n)]\n    moves = 0\n    for j in range(m):\n        s = ''.join([grid[i][j] for i in range(n)])\n        if s.count('$') == 0:\n            moves += 1\n    print(moves)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:52:13.973569 REASON stop
2022-04-13 23:52:13.992737 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.992763 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    N, M = map(int, readline().split())\n    moves = [readline() for _ in range(N)]\n\n    count = 0\n\n    for j in range(M):\n        all_blank = True\n        for i in range(N):\n            if moves[i][j] != '_':\n                all_blank = False\n                break\n        if all_blank:\n            count += 1\n\n    print count\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:52:13.992817 REASON stop
2022-04-13 23:52:13.993399 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
2022-04-13 23:52:13.993417 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN, M = list(map(int, input().split()))\n\ndance = []\nfor i in range(N):\n    dance.append(input())\n\n\"\"\"\n1. Find the first non-blank column\n2. Find the next blank column\n3. Find the next non-blank column\n4. Find the next blank column\n5. Repeat until the last column\n\"\"\"\n\ncolumn = 0\ndance_moves = 0\n\nwhile column < M:\n    # Find the first non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    # Find the next non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    dance_moves += 1\n\nprint(dance_moves)"
}
2022-04-13 23:52:13.993467 REASON stop
2022-04-13 23:52:13.994089 test/intro-questions.txt_dir/4874/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4874/solutions.json'
