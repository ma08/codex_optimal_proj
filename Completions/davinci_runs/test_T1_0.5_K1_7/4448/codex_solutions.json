["\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nk = list(map(int, sys.stdin.readline().split()))\n\n# The number of days required to buy each of the $n$ types of microtransactions\ndays = [0] * n\n\nfor _ in range(m):\n    d, t = map(int, sys.stdin.readline().split())\n    days[t - 1] = max(days[t - 1], d)\n\nprint(max(days) + sum(k) // 2 + sum(k) % 2)", "\n\n# SOLUTION\nimport sys\n\n# read from input\nn, m = map(int, sys.stdin.readline().split())\nk = list(map(int, sys.stdin.readline().split()))\n\n# create a list of lists of days for each item\ndays = [[] for i in range(n)]\nfor i in range(m):\n    d, t = map(int, sys.stdin.readline().split())\n    days[t-1].append(d)\n\n# sort the days for each item\nfor i in range(n):\n    days[i].sort()\n\n# create a list of the number of items bought per day\nitems_bought = [0] * n\n\n# create a list of the number of items required per day\nitems_required = [0] * n\nfor i in range(n):\n    items_required[i] = k[i]\n\n# create a list of the number of burles per day\nburles = [0] * 1000\nburles[0] = 1\n\n# create a list of the number of days required per item\ndays_required = [0] * n\n\n# create a list of the number of items required per day\nitems_required = [0] * n\nfor i in range(n):\n    items_required[i] = k[i]\n\n# create a list of the number of burles per day\nburles = [0] * 1000\nburles[0] = 1\n\n# create a list of the number of days required per item\ndays_required = [0] * n\n\n# create a list of the number of items required per day\nitems_required = [0] * n\nfor i in range(n):\n    items_required[i] = k[i]\n\n# create a list of the number of burles per day\nburles = [0] * 1000\nburles[0] = 1\n\n# create a list of the number of days required per item\ndays_required = [0] * n\n\n# create a list of the number of items required per day\nitems_required = [0] * n\nfor i in range(n):\n    items_required[i] = k[i]\n\n# create a list of the number of burles per day\nburles = [0] * 1000\nburles[0] = 1\n\n# create a list of the number of days required per item\ndays_required = [0] * n\n\n# loop through each day\nfor day in range(1, 1000):\n    # add 1 burle to the day\n    burles[day] = burles[day-1] + 1\n\n    # loop through each item\n    for i in range(n):\n        # if the day is in the list of days for the item\n        if day in days[i]:\n            # if the item is on sale, buy it\n            if burles[day] >= 1:\n                items_bought[i] += 1\n                burles[day] -= 1\n        # if the item is not on sale\n        else:\n            # if the item is not on sale, buy it\n            if burles[day] >= 2:\n                items_bought[i] += 1\n                burles[day] -= 2\n\n    # loop through each item\n    for i in range(n):\n        # if the item is not bought\n        if items_bought[i] < items_required[i]:\n            # add 1 day to the days required for the item\n            days_required[i] += 1\n        # if the item is bought\n        else:\n            # add the number of days required for the item to the total number of days required\n            days_required[0] += days_required[i]\n            # break\n            break\n\n# print the total number of days required\nprint(days_required[0])", "\n\nimport math\n\ndef main():\n    # Read input\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n\n    # Initialize the special offer list\n    s = []\n    for i in range(m):\n        d, t = map(int, input().split())\n        s.append((d, t))\n\n    # Initialize the cost list\n    c = [0] * n\n\n    # Initialize the days list\n    d = [0] * n\n\n    # Iterate through the days\n    for i in range(1, 1001):\n        # Iterate through the special offers\n        for s_i in s:\n            # If the special offer is on today\n            if s_i[0] == i:\n                # Change the cost of the special offer to 1\n                c[s_i[1] - 1] = 1\n            else:\n                # Change the cost of the special offer to 2\n                c[s_i[1] - 1] = 2\n\n        # Iterate through the microtransactions\n        for j in range(n):\n            # If the number of microtransactions left to buy is not 0\n            if k[j] != 0:\n                # If the number of microtransactions left to buy is less than or equal to the number of burles left\n                if k[j] <= i:\n                    # Add the number of microtransactions left to buy to the number of days\n                    d[j] += k[j]\n                    # Subtract the number of microtransactions left to buy from the number of burles left\n                    i -= k[j]\n                    # Set the number of microtransactions left to buy to 0\n                    k[j] = 0\n                else:\n                    # Add the number of burles left to the number of days\n                    d[j] += i\n                    # Subtract the number of burles left from the number of microtransactions left to buy\n                    k[j] -= i\n                    # Set the number of burles left to 0\n                    i = 0\n\n    # Print the minimum day\n    print(max(d) * 2 + min(d))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\ns = []\n\nfor i in range(m):\n    s.append(list(map(int, input().split())))\n\ns.sort(key=lambda x: x[0])\n\n# print(s)\n\nd = 0\np = 0\n\nfor i in range(n):\n    p += k[i]\n\nfor i in range(m):\n    # print(d)\n    # print(p)\n    # print(s[i][0])\n    if s[i][0] > d:\n        if p % 2 == 1:\n            d += 1\n        d += p // 2\n    p -= k[s[i][1] - 1]\n    k[s[i][1] - 1] = 0\n\nif p > 0:\n    if p % 2 == 1:\n        d += 1\n    d += p // 2\n\nprint(d)", "\n\nn,m = [int(x) for x in input().split()]\nk = [int(x) for x in input().split()]\n\n#print(n,m)\n#print(k)\n\ns = 0\nfor i in range(n):\n    s += k[i]\n\n#print(s)\n\nd = [0]*n\n\nfor i in range(m):\n    t = [int(x) for x in input().split()]\n    d[t[1]-1] = t[0]\n\n#print(d)\n\nd.sort()\n\n#print(d)\n\nif s > 1000:\n    print(\"impossible\")\nelif s == 0:\n    print(0)\nelif s == 1:\n    print(1)\nelse:\n    i = 0\n    if d[0] == 0:\n        i = 1\n    r = s//2 + s%2 + d[i]\n    if s % 2 == 0:\n        r -= 1\n    print(r)", "\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\non_sale = [0 for i in range(n+1)]\n\nfor i in range(m):\n    d, t = map(int, input().split())\n    on_sale[t] = d\n\ndays = 0\n\nfor i in range(n):\n    if k[i] == 0:\n        continue\n    if on_sale[i+1] == 0:\n        days += 2*k[i]\n    else:\n        days += on_sale[i+1] + (k[i]-1)\n\nprint(days)"]