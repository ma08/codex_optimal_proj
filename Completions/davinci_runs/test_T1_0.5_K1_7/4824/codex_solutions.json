["\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input from stdin and returns the number of columns and initial height of each column\n    \"\"\"\n    lines = sys.stdin.readlines()\n    num_columns = int(lines[0].split()[0])\n    heights = map(int, lines[1].split())\n    return num_columns, heights\n\ndef get_piece(piece_number):\n    \"\"\"\n    Returns the piece with the given number as a 2D array\n    \"\"\"\n    pieces = [\n        [[1]],\n        [[1, 1], [1, 1]],\n        [[1, 1], [1, 0], [1, 0]],\n        [[1, 1], [0, 1], [0, 1]],\n        [[1, 0], [1, 0], [1, 1]],\n        [[0, 1], [0, 1], [1, 1]],\n        [[1, 1, 1], [0, 1, 0]]\n    ]\n    return pieces[piece_number - 1]\n\ndef get_num_rotations(piece):\n    \"\"\"\n    Returns the number of rotations possible for the given piece\n    \"\"\"\n    # Pieces 1 and 2 can be rotated only once\n    if len(piece) == 1 or len(piece) == 2:\n        return 1\n\n    # Pieces 3, 4 and 5 can be rotated twice\n    if len(piece) == 3:\n        return 2\n\n    # Piece 6 can be rotated four times\n    return 4\n\ndef is_valid_rotation(piece, rotation, column_heights):\n    \"\"\"\n    Returns True if the given rotation of the piece can be placed in the columns\n    \"\"\"\n    for i in range(len(piece[rotation])):\n        if column_heights[i] - piece[rotation][i] < 0:\n            return False\n    return True\n\ndef get_valid_rotations(piece, column_heights):\n    \"\"\"\n    Returns a list of valid rotations for the given piece\n    \"\"\"\n    valid_rotations = []\n    num_rotations = get_num_rotations(piece)\n    for i in range(num_rotations):\n        if is_valid_rotation(piece, i, column_heights):\n            valid_rotations.append(i)\n    return valid_rotations\n\ndef is_valid_shift(piece, rotation, shift, column_heights):\n    \"\"\"\n    Returns True if the given shift of the given rotation of the piece can be placed in the columns\n    \"\"\"\n    for i in range(len(piece[rotation])):\n        if column_heights[i + shift] - piece[rotation][i] < 0:\n            return False\n    return True\n\ndef get_valid_shifts(piece, rotation, column_heights):\n    \"\"\"\n    Returns a list of valid shifts for the given piece and rotation\n    \"\"\"\n    valid_shifts = []\n    for i in range(len(column_heights) - len(piece[rotation]) + 1):\n        if is_valid_shift(piece, rotation, i, column_heights):\n            valid_shifts.append(i)\n    return valid_shifts\n\ndef get_num_ways_to_place_piece(piece, column_heights):\n    \"\"\"\n    Returns the number of ways the given piece can be placed in the columns\n    \"\"\"\n    num_ways = 0\n    valid_rotations = get_valid_rotations(piece, column_heights)\n    for rotation in valid_rotations:\n        valid_shifts = get_valid_shifts(piece, rotation, column_heights)\n        num_ways += len(valid_shifts)\n    return num_ways\n\ndef main():\n    num_columns, column_heights = read_input()\n    piece = get_piece(int(sys.argv[1]))\n    print get_num_ways_to_place_piece(piece, column_heights)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    #read input\n    input = sys.stdin.read().splitlines()\n    input = [line.split(' ') for line in input]\n    input = [[int(x) for x in line] for line in input]\n    C = input[0][0] #number of columns\n    P = input[0][1] #number of piece\n    heights = input[1] #heights of columns\n\n    #calculate number of possible ways to place the piece\n    possible_ways = 0\n    for i in range(C - P + 1):\n        #check if the piece can be placed in this column\n        if min(heights[i:i+P]) == heights[i]:\n            possible_ways += 1\n    print(possible_ways)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef tetris(C, P, heights):\n    if P == 1:\n        return sum(heights)\n    elif P == 2:\n        return sum(heights) + 2**(C-2)\n    elif P == 3:\n        return sum(heights) + 2**(C-2) + 2**(C-1)\n    elif P == 4:\n        return sum(heights) + 2**(C-2) + 2**(C-1) + 2**(C-3)\n    elif P == 5:\n        return sum(heights) + 2**(C-2) + 2**(C-1) + 2**(C-3) + 2**(C-1)\n    elif P == 6:\n        return sum(heights) + 2**(C-2) + 2**(C-1) + 2**(C-3) + 2**(C-1) + 2**(C-1)\n    elif P == 7:\n        return sum(heights) + 2**(C-2) + 2**(C-1) + 2**(C-3) + 2**(C-1) + 2**(C-1) + 2**(C-1)\n\ndef main():\n    C, P = map(int, sys.stdin.readline().strip().split())\n    heights = map(int, sys.stdin.readline().strip().split())\n    print tetris(C, P, heights)\n\nif __name__ == '__main__':\n    main()", "\n\n# Get input\nC, P = map(int, input().split())\nheights = list(map(int, input().split()))\n\n# Create the board\nboard = [[0 for _ in range(C)] for _ in range(max(heights))]\nfor c, height in enumerate(heights):\n    for r in range(height):\n        board[r][c] = 1\n\n# Create the piece\nif P == 1:\n    piece = [[1, 1], [1, 1]]\nelif P == 2:\n    piece = [[1, 1, 1], [1, 0, 0]]\nelif P == 3:\n    piece = [[1, 1, 1], [0, 0, 1]]\nelif P == 4:\n    piece = [[1, 1, 1, 1]]\nelif P == 5:\n    piece = [[1, 0], [1, 0], [1, 1]]\nelif P == 6:\n    piece = [[0, 1], [0, 1], [1, 1]]\nelif P == 7:\n    piece = [[1, 1, 1], [0, 1, 0]]\n\n# Rotate the piece\ndef rotate(piece):\n    return [[piece[j][i] for j in range(len(piece))] for i in range(len(piece[0]) - 1, -1, -1)]\n\n# Check if the piece can be put in the board\ndef valid(piece, board, r, c):\n    for i in range(len(piece)):\n        for j in range(len(piece[0])):\n            if piece[i][j] == 1 and (r + i >= len(board) or c + j >= len(board[0]) or board[r + i][c + j] == 1):\n                return False\n    return True\n\n# Put the piece in the board\ndef put(piece, board, r, c):\n    for i in range(len(piece)):\n        for j in range(len(piece[0])):\n            if piece[i][j] == 1:\n                board[r + i][c + j] = 1\n\n# Remove the piece from the board\ndef remove(piece, board, r, c):\n    for i in range(len(piece)):\n        for j in range(len(piece[0])):\n            if piece[i][j] == 1:\n                board[r + i][c + j] = 0\n\n# Recursive function to find the number of ways to put the piece in the board\ndef find(piece, board, r, c):\n    if r == len(board):\n        return 1\n    if c == len(board[0]):\n        return find(piece, board, r + 1, 0)\n    count = 0\n    for i in range(4):\n        if valid(piece, board, r, c):\n            put(piece, board, r, c)\n            count += find(piece, board, r, c + 1)\n            remove(piece, board, r, c)\n        piece = rotate(piece)\n    return count\n\n# Find the number of ways to put the piece in the board\nprint(find(piece, board, 0, 0))", "\n\nimport sys\n\ndef readline():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    C, P = readline()\n    heights = readline()\n\n    if P == 1:\n        print(7)\n    elif P == 2:\n        print(6)\n    elif P == 3:\n        print(5)\n    elif P == 4:\n        print(4)\n    elif P == 5:\n        print(5)\n    elif P == 6:\n        print(6)\n    elif P == 7:\n        print(7)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    This is the main function\n    \"\"\"\n    c_p = input()\n    c_p = c_p.split()\n    c_p = [int(x) for x in c_p]\n    c = c_p[0]\n    p = c_p[1]\n    heights = input()\n    heights = heights.split()\n    heights = [int(x) for x in heights]\n    count = 0\n    if p == 1:\n        for i in range(c):\n            if heights[i] == 0:\n                count += 1\n        print(count)\n    elif p == 2:\n        for i in range(c-1):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        print(count)\n    elif p == 3:\n        for i in range(c-1):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        if heights[c-1] == 0:\n            count += 1\n        print(count)\n    elif p == 4:\n        for i in range(c-1):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        if heights[c-1] == 0:\n            count += 1\n        print(count)\n    elif p == 5:\n        for i in range(c-1):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        if heights[c-1] == 0:\n            count += 1\n        print(count)\n    elif p == 6:\n        for i in range(c-2):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        if heights[c-2] == 0:\n            if heights[c-1] == 0:\n                count += 1\n            elif heights[c-1] == 1:\n                count += 2\n        print(count)\n    elif p == 7:\n        for i in range(c-2):\n            if heights[i] == 0:\n                if heights[i+1] == 0:\n                    count += 1\n                elif heights[i+1] == 1:\n                    count += 2\n        if heights[c-2] == 0:\n            if heights[c-1] == 0:\n                count += 1\n            elif heights[c-1] == 1:\n                count += 2\n        print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_input():\n    C, P = [int(x) for x in input().split()]\n    heights = [int(x) for x in input().split()]\n    return C, P, heights\n\ndef get_piece(P):\n    if P == 1:\n        return [[1, 1, 1, 1]]\n    elif P == 2:\n        return [[1, 1, 1], [0, 1, 0]]\n    elif P == 3:\n        return [[1, 1, 1], [0, 0, 1]]\n    elif P == 4:\n        return [[1, 1], [1, 1]]\n    elif P == 5:\n        return [[1, 1, 1], [1, 0, 0]]\n    elif P == 6:\n        return [[1, 1, 0], [0, 1, 1]]\n    elif P == 7:\n        return [[0, 1, 0], [1, 1, 1]]\n\ndef get_rotations(piece):\n    rotations = []\n    for i in range(4):\n        rotations.append(piece)\n        piece = list(zip(*piece[::-1]))\n    return rotations\n\ndef get_flips(rotations):\n    flips = []\n    for rotation in rotations:\n        flip = [row[::-1] for row in rotation]\n        flips.append(flip)\n    return flips\n\ndef get_all_orientations(piece):\n    rotations = get_rotations(piece)\n    flips = get_flips(rotations)\n    return rotations + flips\n\ndef get_all_pieces():\n    all_pieces = []\n    for i in range(1, 8):\n        piece = get_piece(i)\n        orientations = get_all_orientations(piece)\n        all_pieces.append(orientations)\n    return all_pieces\n\ndef get_all_positions(piece, C, heights):\n    num_rows = len(piece)\n    num_cols = len(piece[0])\n    positions = []\n    for col_start in range(C - num_cols + 1):\n        for row_start in range(heights[col_start] + 1):\n            # check if piece fits\n            fits = True\n            for i in range(num_cols):\n                for j in range(num_rows):\n                    if piece[j][i] == 1:\n                        if heights[col_start + i] - row_start < j:\n                            fits = False\n                            break\n                if fits == False:\n                    break\n            if fits:\n                positions.append((col_start, row_start))\n    return positions\n\ndef get_num_positions(C, P, heights, pieces):\n    num_positions = 0\n    piece = pieces[P - 1]\n    for orientation in piece:\n        num_positions += len(get_all_positions(orientation, C, heights))\n    return num_positions\n\ndef main():\n    C, P, heights = get_input()\n    pieces = get_all_pieces()\n    print(get_num_positions(C, P, heights, pieces))\n\nif __name__ == '__main__':\n    main()"]