["\n\nimport sys\n\ndef efficiency_gap(results):\n    \"\"\"\n    Compute the efficiency gap for a given set of results.\n    \"\"\"\n    V = 0\n    w_a = 0\n    w_b = 0\n    for district_results in results:\n        V += district_results['V']\n        if district_results['winner'] == 'A':\n            w_a += district_results['w_b']\n            w_b += district_results['w_a']\n        else:\n            w_a += district_results['w_a']\n            w_b += district_results['w_b']\n    return abs(w_a - w_b) / V\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input\n    lines = sys.stdin.readlines()\n    P, D = map(int, lines[0].split())\n    precincts = []\n    for i in range(1, P+1):\n        precincts.append(map(int, lines[i].split()))\n    # Compute results\n    results = []\n    for d in range(1, D+1):\n        precincts_in_d = [p for p in precincts if p[0] == d]\n        V = sum([p[1] + p[2] for p in precincts_in_d])\n        a = sum([p[1] for p in precincts_in_d])\n        b = sum([p[2] for p in precincts_in_d])\n        if a > b:\n            winner = 'A'\n            w_a = b - (V // 2 + 1)\n            w_b = a - (V // 2 + 1)\n        else:\n            winner = 'B'\n            w_a = a - (V // 2 + 1)\n            w_b = b - (V // 2 + 1)\n        results.append({\n            'V': V,\n            'a': a,\n            'b': b,\n            'winner': winner,\n            'w_a': w_a,\n            'w_b': w_b\n        })\n    # Print results\n    for r in results:\n        print(r['winner'], r['w_a'], r['w_b'])\n    print('{:.10f}'.format(efficiency_gap(results)))\n\nif __name__ == '__main__':\n    main()", "\ndef get_winner(votes):\n    party_a = 0\n    party_b = 0\n    for vote in votes:\n        party_a += vote[0]\n        party_b += vote[1]\n    if party_a > party_b:\n        return 'A'\n    else:\n        return 'B'\n\ndef get_wasted_votes(votes):\n    party_a = 0\n    party_b = 0\n    for vote in votes:\n        party_a += vote[0]\n        party_b += vote[1]\n    winner = get_winner([(party_a, party_b)])\n    if winner == 'A':\n        wasted_a = 0\n        wasted_b = party_b - (party_a/2 + 1)\n    else:\n        wasted_a = party_a - (party_b/2 + 1)\n        wasted_b = 0\n    return wasted_a, wasted_b\n\ndef get_efficiency_gap(votes):\n    party_a = 0\n    party_b = 0\n    for vote in votes:\n        party_a += vote[0]\n        party_b += vote[1]\n    return abs(party_a - party_b)/(party_a + party_b)\n\np, d = map(int, input().split())\nprecincts = []\ndistricts = {}\nfor i in range(p):\n    precinct = list(map(int, input().split()))\n    districts.setdefault(precinct[0], []).append((precinct[1], precinct[2]))\n    precincts.append((precinct[1], precinct[2]))\n\nfor district in districts:\n    votes = districts[district]\n    winner = get_winner(votes)\n    wasted_a, wasted_b = get_wasted_votes(votes)\n    print(winner, wasted_a, wasted_b)\n\nprint(get_efficiency_gap(precincts))", "\n\nimport sys\n\ndef efficiency_gap(V, w_A, w_B):\n    return abs(w_A - w_B) / V\n\ndef lost_votes(a, b):\n    return a\n\ndef excess_votes(a, b, V):\n    return b - (V // 2 + 1)\n\ndef main():\n    P, D = map(int, sys.stdin.readline().split())\n    precincts = [(int(x), int(y), int(z)) for x, y, z in [sys.stdin.readline().split() for _ in range(P)]]\n    districts = [[] for _ in range(D)]\n    for precinct in precincts:\n        districts[precinct[0] - 1].append(precinct)\n    for district in districts:\n        votes = sum([precinct[1] + precinct[2] for precinct in district])\n        if sum([precinct[1] for precinct in district]) > sum([precinct[2] for precinct in district)]:\n            print('A', sum([lost_votes(precinct[1], precinct[2]) for precinct in district]), sum([excess_votes(precinct[1], precinct[2], votes) for precinct in district]))\n        else:\n            print('B', sum([lost_votes(precinct[2], precinct[1]) for precinct in district]), sum([excess_votes(precinct[2], precinct[1], votes) for precinct in district]))\n    print(efficiency_gap(sum([precinct[1] + precinct[2] for precinct in precincts]), sum([lost_votes(precinct[1], precinct[2]) for precinct in precincts]), sum([lost_votes(precinct[2], precinct[1]) for precinct in precincts])))\n\nif __name__ == '__main__':\n    main()", "\n\ndef calc_efficiency_gap(p, d):\n    districts = [[] for _ in range(d)]\n    for i in range(p):\n        district = int(input().split()[0]) - 1\n        districts[district].append(input())\n\n    efficiency_gap = 0\n    for district in districts:\n        votes = [0, 0]\n        for precinct in district:\n            votes[0] += int(precinct.split()[1])\n            votes[1] += int(precinct.split()[2])\n        wasted_votes = [0, 0]\n        if votes[0] > votes[1]:\n            wasted_votes[0] = votes[0] - (votes[0] + votes[1]) // 2 - 1\n            wasted_votes[1] = votes[1]\n            print(\"A\", wasted_votes[0], wasted_votes[1])\n        else:\n            wasted_votes[0] = votes[0]\n            wasted_votes[1] = votes[1] - (votes[0] + votes[1]) // 2 - 1\n            print(\"B\", wasted_votes[0], wasted_votes[1])\n        efficiency_gap += abs(wasted_votes[0] - wasted_votes[1]) / (votes[0] + votes[1])\n\n    print(efficiency_gap)\n\ncalc_efficiency_gap(*[int(i) for i in input().split()])", "\n\ndef main():\n    \"\"\"Wasted Votes\"\"\"\n    num_precincts, num_districts = [int(i) for i in input().split()]\n    prec_list = []\n    for i in range(num_precincts):\n        prec_list.append([int(i) for i in input().split()])\n    prec_list.sort(key=lambda x: x[0])\n    # print(prec_list)\n    district = []\n    for i in range(num_districts):\n        district.append([])\n    for i in range(num_precincts):\n        district[prec_list[i][0]-1].append(prec_list[i][1:])\n    # print(district)\n    for i in range(num_districts):\n        if sum([j[0] for j in district[i]]) > sum([j[1] for j in district[i]]):\n            print(\"A\", sum([j[0] for j in district[i]]) - (sum([j[0] for j in district[i]])//2+1), sum([j[1] for j in district[i]]) - (sum([j[0] for j in district[i]])//2+1))\n        else:\n            print(\"B\", sum([j[0] for j in district[i]]) - (sum([j[1] for j in district[i]])//2+1), sum([j[1] for j in district[i]]) - (sum([j[1] for j in district[i]])//2+1))\n    print(\"{0:.12f}\".format(abs(sum([sum([j[0] for j in district[i]]) - (sum([j[0] for j in district[i]])//2+1) for i in range(num_districts)]) - sum([sum([j[1] for j in district[i]]) - (sum([j[1] for j in district[i]])//2+1) for i in range(num_districts)]))/sum([sum([j[0] for j in district[i]]) for i in range(num_districts)]) + sum([sum([j[1] for j in district[i]]) for i in range(num_districts)])))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    precinct_count, district_count = [int(x) for x in lines[0].split()]\n    precincts = [x.split() for x in lines[1:]]\n\n    # Initialize district_results to an empty list of length district_count.\n    district_results = [[] for _ in range(district_count)]\n    for precinct in precincts:\n        district_idx = int(precinct[0]) - 1\n        district_results[district_idx].append(precinct)\n\n    for district_result in district_results:\n        a_votes = 0\n        b_votes = 0\n        for precinct in district_result:\n            a_votes += int(precinct[1])\n            b_votes += int(precinct[2])\n        if a_votes > b_votes:\n            print('A', end=' ')\n            print(b_votes, end=' ')\n            print(a_votes - (a_votes + b_votes) // 2 - 1)\n        else:\n            print('B', end=' ')\n            print(a_votes, end=' ')\n            print(b_votes - (a_votes + b_votes) // 2 - 1)\n\n    total_voters = sum([int(x[1]) + int(x[2]) for x in precincts])\n    total_wasted_a = sum([int(x[2]) if int(x[1]) < int(x[2]) else 0 for x in precincts])\n    total_wasted_b = sum([int(x[1]) if int(x[1]) > int(x[2]) else 0 for x in precincts])\n    print(abs(total_wasted_a - total_wasted_b) / total_voters)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    precincts = int(sys.stdin.readline().strip())\n    districts = int(sys.stdin.readline().strip())\n    votes = []\n    for i in range(precincts):\n        votes.append([int(x) for x in sys.stdin.readline().strip().split()])\n    # print(votes)\n    total = 0\n    for i in range(districts):\n        a = 0\n        b = 0\n        for j in range(precincts):\n            if votes[j][0] == i + 1:\n                a += votes[j][1]\n                b += votes[j][2]\n        if a > b:\n            print(\"A\", b, a - b - (a + b) // 2 - 1)\n            total += a - b - (a + b) // 2 - 1\n        else:\n            print(\"B\", a, b - a - (a + b) // 2 - 1)\n            total += b - a - (a + b) // 2 - 1\n    print(total / precincts)\n\nif __name__ == \"__main__\":\n    main()"]