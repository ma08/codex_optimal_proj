2022-04-13 20:34:11.197948 """
There are $n$ players sitting at the card table. Each player has a favorite number. The favorite number of the $j$-th player is $f_j$.

There are $k \cdot n$ cards on the table. Each card contains a single integer: the $i$-th card contains number $c_i$. Also, you are given a sequence $h_1, h_2, \dots, h_k$. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly $k$ cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals $h_t$ if the player holds $t$ cards containing his favorite number. If a player gets no cards with his favorite number (i.e., $t=0$), his joy level is $0$.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence $h_1, \dots, h_k$ is the same for all the players.


-----Input-----

The first line of input contains two integers $n$ and $k$ ($1 \le n \le 500, 1 \le k \le 10$) — the number of players and the number of cards each player will get.

The second line contains $k \cdot n$ integers $c_1, c_2, \dots, c_{k \cdot n}$ ($1 \le c_i \le 10^5$) — the numbers written on the cards.

The third line contains $n$ integers $f_1, f_2, \dots, f_n$ ($1 \le f_j \le 10^5$) — the favorite numbers of the players.

The fourth line contains $k$ integers $h_1, h_2, \dots, h_k$ ($1 \le h_t \le 10^5$), where $h_t$ is the joy level of a player if he gets exactly $t$ cards with his favorite number written on them. It is guaranteed that the condition $h_{t - 1} < h_t$ holds for each $t \in [2..k]$.


-----Output-----

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.


-----Examples-----
Input
4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7

Output
21

Input
3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3

Output
0



-----Note-----

In the first example, one possible optimal card distribution is the following:  Player $1$ gets cards with numbers $[1, 3, 8]$;  Player $2$ gets cards with numbers $[2, 2, 8]$;  Player $3$ gets cards with numbers $[2, 2, 8]$;  Player $4$ gets cards with numbers $[5, 5, 5]$. 

Thus, the answer is $2 + 6 + 6 + 7 = 21$.

In the second example, no player can get a card with his favorite number. Thus, the answer is $0$.
"""
2022-04-13 20:34:11.197962 --------------------------
2022-04-13 20:34:28.152457 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    fav = list(map(int, input().split()))\n    joy = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if fav[i] in d:\n            d[fav[i]] += 1\n        else:\n            d[fav[i]] = 1\n\n    res = 0\n    for i in range(n):\n        if fav[i] in d:\n            res += joy[d[fav[i]]]\n            d[fav[i]] -= 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, k, c, f, h):\n    count = {}\n    for i in range(k * n):\n        if c[i] not in count:\n            count[c[i]] = 0\n        count[c[i]] += 1\n\n    total_joy = 0\n    for i in range(n):\n        if f[i] in count:\n            total_joy += h[count[f[i]]]\n    return total_joy\n\n\nif __name__ == \"__main__\":\n    n, k = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n\n    print(solve(n, k, c, f, h))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn,k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ncards.sort()\nfav.sort()\n\noccur = []\nfor i in range(len(fav)):\n    cnt = 0\n    j = 0\n    while j < len(cards):\n        if cards[j] == fav[i]:\n            cnt += 1\n            del cards[j]\n        else:\n            j += 1\n    occur.append(cnt)\n\noccur.sort()\n\nans = 0\nfor i in range(len(occur)):\n    if occur[i] < k:\n        ans += h[occur[i]]\n    else:\n        ans += h[k-1]\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef max_total_joy(n, k, c, f, h):\n    c.sort()\n    f.sort()\n    h.sort()\n    total = 0\n    for x in range(n):\n        total += h[min(k, f.count(f[x]))]\n        f = f[f.count(f[x]):]\n    return total\n\nif __name__ == \"__main__\":\n    n, k = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    f = list(map(int, sys.stdin.readline().split()))\n    h = list(map(int, sys.stdin.readline().split()))\n    print(max_total_joy(n, k, c, f, h))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    cards = [int(x) for x in input().split()]\n    favs = [int(x) for x in input().split()]\n    joys = [int(x) for x in input().split()]\n    favs = list(zip(favs, joys))\n    favs.sort(key=lambda x: x[1])\n    favs = [x[0] for x in favs]\n    cards.sort()\n    count = 0\n    while len(cards)>0:\n        card = cards.pop()\n        if card in favs:\n            count += joys[favs.index(card)]\n        else:\n            cards.remove(card)\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav_nums = list(map(int, input().split()))\njoy_levels = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    d[fav_nums[i]] = joy_levels\n\ndef max_joy(cards, d):\n    max_joy = 0\n    for card in cards:\n        if card in d:\n            max_joy += max(d[card])\n    return max_joy\n\ncards.sort()\nprint(max_joy(cards, d))"
    }
  ],
  "created": 1649882051,
  "id": "cmpl-4wdyl53UW5wWYsdAPureqeMYe1OdH",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:34:28.152736 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    fav = list(map(int, input().split()))\n    joy = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if fav[i] in d:\n            d[fav[i]] += 1\n        else:\n            d[fav[i]] = 1\n\n    res = 0\n    for i in range(n):\n        if fav[i] in d:\n            res += joy[d[fav[i]]]\n            d[fav[i]] -= 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:34:28.152777 REASON stop
2022-04-13 20:34:28.153210 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, k, c, f, h):\n    count = {}\n    for i in range(k * n):\n        if c[i] not in count:\n            count[c[i]] = 0\n        count[c[i]] += 1\n\n    total_joy = 0\n    for i in range(n):\n        if f[i] in count:\n            total_joy += h[count[f[i]]]\n    return total_joy\n\n\nif __name__ == \"__main__\":\n    n, k = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n\n    print(solve(n, k, c, f, h))"
}
2022-04-13 20:34:28.153341 REASON stop
2022-04-13 20:34:28.153772 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn,k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ncards.sort()\nfav.sort()\n\noccur = []\nfor i in range(len(fav)):\n    cnt = 0\n    j = 0\n    while j < len(cards):\n        if cards[j] == fav[i]:\n            cnt += 1\n            del cards[j]\n        else:\n            j += 1\n    occur.append(cnt)\n\noccur.sort()\n\nans = 0\nfor i in range(len(occur)):\n    if occur[i] < k:\n        ans += h[occur[i]]\n    else:\n        ans += h[k-1]\n\nprint(ans)"
}
2022-04-13 20:34:28.153852 REASON stop
2022-04-13 20:34:28.173181 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-13 20:34:28.173262 REASON stop
2022-04-13 20:34:28.191007 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef max_total_joy(n, k, c, f, h):\n    c.sort()\n    f.sort()\n    h.sort()\n    total = 0\n    for x in range(n):\n        total += h[min(k, f.count(f[x]))]\n        f = f[f.count(f[x]):]\n    return total\n\nif __name__ == \"__main__\":\n    n, k = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    f = list(map(int, sys.stdin.readline().split()))\n    h = list(map(int, sys.stdin.readline().split()))\n    print(max_total_joy(n, k, c, f, h))"
}
2022-04-13 20:34:28.191113 REASON stop
2022-04-13 20:34:28.191747 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    cards = [int(x) for x in input().split()]\n    favs = [int(x) for x in input().split()]\n    joys = [int(x) for x in input().split()]\n    favs = list(zip(favs, joys))\n    favs.sort(key=lambda x: x[1])\n    favs = [x[0] for x in favs]\n    cards.sort()\n    count = 0\n    while len(cards)>0:\n        card = cards.pop()\n        if card in favs:\n            count += joys[favs.index(card)]\n        else:\n            cards.remove(card)\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 20:34:28.191811 REASON stop
2022-04-13 20:34:28.192392 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav_nums = list(map(int, input().split()))\njoy_levels = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    d[fav_nums[i]] = joy_levels\n\ndef max_joy(cards, d):\n    max_joy = 0\n    for card in cards:\n        if card in d:\n            max_joy += max(d[card])\n    return max_joy\n\ncards.sort()\nprint(max_joy(cards, d))"
}
2022-04-13 20:34:28.192451 REASON stop
