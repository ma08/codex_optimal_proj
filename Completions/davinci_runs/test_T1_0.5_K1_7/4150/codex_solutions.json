["\n\n# SOLUTION\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nans = [0] * n\n\ncur = 0\n\nfor i in range(n):\n    l = max(0, cur - k)\n    r = min(cur + k, n - 1)\n\n    if i % 2 == 0:\n        ans[a.index(cur + 1)] = 1\n        cur = a[l:r + 1].index(cur + 1) + l\n    else:\n        ans[a.index(cur + 1)] = 2\n        cur = a[l:r + 1].index(cur + 1) + l\n\nprint(''.join(map(str, ans)))", "\n\n# This problem is solved using a greedy algorithm\n# The first coach will always choose the student with the maximum programming skill\n# If there are multiple students with the maximum programming skill, then the coach will choose the student that is closest to the right\n# The second coach will always choose the student with the second highest programming skill\n# If there are multiple students with the second highest programming skill, then the coach will choose the student that is closest to the right\n# This is repeated until all students are chosen\n\n# Note that the second coach will never choose the student with the maximum programming skill\n# This is because the first coach will always choose the student with the maximum programming skill\n\n# Function to get the maximum programming skill\ndef maxSkill(skills):\n    maximum = 0\n    for i in range(len(skills)):\n        if skills[i] > maximum:\n            maximum = skills[i]\n    return maximum\n\n# Function to get the second highest programming skill\ndef secondMaxSkill(skills):\n    secondMax = 0\n    for i in range(len(skills)):\n        if skills[i] > secondMax and skills[i] < maxSkill(skills):\n            secondMax = skills[i]\n    return secondMax\n\n# Function to get the index of the student with the maximum programming skill\ndef maxSkillIndex(skills):\n    index = 0\n    for i in range(len(skills)):\n        if skills[i] == maxSkill(skills):\n            index = i\n    return index\n\n# Function to get the index of the student with the second highest programming skill\ndef secondMaxSkillIndex(skills):\n    index = 0\n    for i in range(len(skills)):\n        if skills[i] == secondMaxSkill(skills):\n            index = i\n    return index\n\n# Function to get the indices of the students that are closest to the student with the maximum programming skill\ndef closestStudents(skills, k, index):\n    closest = []\n    for i in range(len(skills)):\n        if i != index:\n            closest.append(i)\n    closest.sort(key=lambda x: abs(x - index))\n    return closest[:k]\n\n# Function to get the indices of the students that are closest to the student with the second highest programming skill\ndef secondClosestStudents(skills, k, index):\n    closest = []\n    for i in range(len(skills)):\n        if i != index:\n            closest.append(i)\n    closest.sort(key=lambda x: abs(x - index))\n    return closest[:k]\n\n# Function to remove the student with the maximum programming skill\ndef removeMaxSkill(skills):\n    skills.remove(maxSkill(skills))\n\n# Function to remove the student with the second highest programming skill\ndef removeSecondMaxSkill(skills):\n    skills.remove(secondMaxSkill(skills))\n\n# Function to remove the indices of the students that are closest to the student with the maximum programming skill\ndef removeClosestStudents(skills, index):\n    closest = closestStudents(skills, k, index)\n    for i in range(len(closest)):\n        skills.remove(skills[closest[i]])\n\n# Function to remove the indices of the students that are closest to the student with the second highest programming skill\ndef removeSecondClosestStudents(skills, index):\n    closest = secondClosestStudents(skills, k, index)\n    for i in range(len(closest)):\n        skills.remove(skills[closest[i]])\n\n# Function to determine which students will be taken into the first team\ndef firstTeam(skills, k):\n    team = []\n    for i in range(len(skills)):\n        team.append(1)\n    while len(skills) > 0:\n        index = maxSkillIndex(skills)\n        removeMaxSkill(skills)\n        removeClosestStudents(skills, index)\n        for i in range(len(skills)):\n            team[i] = 2\n    return team\n\n# Function to determine which students will be taken into the second team\ndef secondTeam(skills, k):\n    team = []\n    for i in range(len(skills)):\n        team.append(2)\n    while len(skills) > 0:\n        index = secondMaxSkillIndex(skills)\n        removeSecondMaxSkill(skills)\n        removeSecondClosestStudents(skills, index)\n        for i in range(len(skills)):\n            team[i] = 1\n    return team\n\n# Function to determine which students will be taken into the first team\ndef firstTeam(skills, k):\n    team = []\n    for i in range(len(skills)):\n        team.append(1)\n    while len(skills) > 0:\n        index = maxSkillIndex(skills)\n        removeMaxSkill(skills)\n        removeClosestStudents(skills, index)\n        for i in range(len(skills)):\n            team[i] = 2\n    return team\n\n# Function to determine which students will be taken into the second team\ndef secondTeam(skills, k):\n    team = []\n    for i in range(len(skills)):\n        team.append(2)\n    while len(skills) > 0:\n        index = secondMaxSkillIndex(skills)\n        removeSecondMaxSkill(skills)\n        removeSecondClosestStudents(skills, index)\n        for i in range(len(skills)):\n            team[i] = 1\n    return team\n\n# Main function\ndef main():\n    # Get the number of students and the value determining the range of chosen students during each move\n    n, k = map(int, input().split())\n\n    # Get the programming skill of each student\n    skills = list(map(int, input().split()))\n\n    # Determine which students will be taken into the first team\n    team = firstTeam(skills, k)\n\n    # Print the team\n    print(''.join(map(str, team)))\n\n# Run program\nmain()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# a[i] is the skill of ith student\n# a[i] is the index of the student who has skill i\n# a[a[i]] is the skill of the student who has skill i\n\n# First, get the index of the student with the maximum skill\nmax_skill = max(a)\nmax_index = a.index(max_skill)\n\n# Then, get the closest k students to the left and the right of him\nleft_bound = max(0, max_index - k)\nright_bound = min(n-1, max_index + k)\n\n# All students that are chosen leave the row and join the first team.\n# Then, the second coach will make the same move (but all students chosen by him join the second team).\n# Then again the first coach will make such move, and so on.\n\n# This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).\n\nans = [0]*n\n\nfor i in range(left_bound, right_bound+1):\n    ans[i] = 1\n\n# for i in range(n):\n#     print(i, a[i], ans[i])\n\n# Then, get the closest k students to the left and the right of him\nleft_bound = max(0, max_index - k)\nright_bound = min(n-1, max_index + k)\n\n# All students that are chosen leave the row and join the first team.\n# Then, the second coach will make the same move (but all students chosen by him join the second team).\n# Then again the first coach will make such move, and so on.\n\n# This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).\n\nfor i in range(left_bound, right_bound+1):\n    if ans[i] == 0:\n        ans[i] = 2\n    else:\n        ans[i] = 1\n\n# for i in range(n):\n#     print(i, a[i], ans[i])\n\n# Then, get the closest k students to the left and the right of him\nleft_bound = max(0, max_index - k)\nright_bound = min(n-1, max_index + k)\n\n# All students that are chosen leave the row and join the first team.\n# Then, the second coach will make the same move (but all students chosen by him join the second team).\n# Then again the first coach will make such move, and so on.\n\n# This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).\n\nfor i in range(left_bound, right_bound+1):\n    if ans[i] == 0:\n        ans[i] = 1\n    else:\n        ans[i] = 2\n\n# for i in range(n):\n#     print(i, a[i], ans[i])\n\n# Then, get the closest k students to the left and the right of him\nleft_bound = max(0, max_index - k)\nright_bound = min(n-1, max_index + k)\n\n# All students that are chosen leave the row and join the first team.\n# Then, the second coach will make the same move (but all students chosen by him join the second team).\n# Then again the first coach will make such move, and so on.\n\n# This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).\n\nfor i in range(left_bound, right_bound+1):\n    if ans[i] == 0:\n        ans[i] = 2\n    else:\n        ans[i] = 1\n\n# for i in range(n):\n#     print(i, a[i], ans[i])\n\nfor i in range(n):\n    print(ans[i], end=\"\")\nprint()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    skills = map(int, sys.stdin.readline().strip().split())\n    skills = [skills[i] - 1 for i in range(n)]\n    teams = [1] * n\n\n    for i in range(n):\n        max_skill = max(skills)\n        max_skill_pos = skills.index(max_skill)\n\n        left_range = max(0, max_skill_pos - k)\n        right_range = min(n, max_skill_pos + k + 1)\n\n        for j in range(left_range, right_range):\n            if teams[j] == 1:\n                teams[j] = 2\n\n        skills = [skills[j] for j in range(n) if j not in range(left_range, right_range)]\n        teams = [teams[j] for j in range(n) if j not in range(left_range, right_range)]\n\n    print ''.join([str(team) for team in teams])\n\nif __name__ == '__main__':\n    main()", "\n\ndef read_ints():\n    temp = input().split()\n    temp = [int(t) for t in temp]\n    return temp\n\ndef main():\n    n, k = read_ints()\n    a = read_ints()\n    res = [0] * n\n    while a:\n        max_a = max(a)\n        max_a_index = a.index(max_a)\n        left_index = max(max_a_index - k, 0)\n        right_index = min(max_a_index + k, len(a) - 1)\n        res[left_index : right_index+1] = [1] * (right_index - left_index + 1)\n        a = a[:left_index] + a[right_index+1:]\n        if a:\n            max_a = max(a)\n            max_a_index = a.index(max_a)\n            left_index = max(max_a_index - k, 0)\n            right_index = min(max_a_index + k, len(a) - 1)\n            res[left_index : right_index+1] = [2] * (right_index - left_index + 1)\n            a = a[:left_index] + a[right_index+1:]\n    print(''.join(map(str, res)))\n\nmain()", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = list(zip(a, range(n)))\n    a.sort(reverse=True)\n    a = [i[1] for i in a]\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if i % 2 == 0:\n            ans[a[i]] = 1\n        else:\n            ans[a[i]] = 2\n        if i < n - 1:\n            if a[i] - a[i + 1] >= 2 * k:\n                a = a[:i + 1] + a[i + 1:][::-1]\n    print(''.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    a = sorted(enumerate(a), key=lambda x: x[1], reverse=True)\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(max(0, a[i][0] - k), min(n, a[i][0] + k + 1)):\n                ans[j] = 1\n        else:\n            for j in range(max(0, a[i][0] - k), min(n, a[i][0] + k + 1)):\n                ans[j] = 2\n    print(\"\".join(map(str, ans)))\n\nif __name__ == \"__main__\":\n    main()"]