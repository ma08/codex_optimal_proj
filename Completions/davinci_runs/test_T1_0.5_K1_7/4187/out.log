2022-04-13 19:05:32.872528 """
Each day in Berland consists of $n$ hours. Polycarp likes time management. That's why he has a fixed schedule for each day — it is a sequence $a_1, a_2, \dots, a_n$ (each $a_i$ is either $0$ or $1$), where $a_i=0$ if Polycarp works during the $i$-th hour of the day and $a_i=1$ if Polycarp rests during the $i$-th hour of the day.

Days go one after another endlessly and Polycarp uses the same schedule for each day.

What is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.


-----Input-----

The first line contains $n$ ($1 \le n \le 2\cdot10^5$) — number of hours per day.

The second line contains $n$ integer numbers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 1$), where $a_i=0$ if the $i$-th hour in a day is working and $a_i=1$ if the $i$-th hour is resting. It is guaranteed that $a_i=0$ for at least one $i$.


-----Output-----

Print the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.


-----Examples-----
Input
5
1 0 1 0 1

Output
2

Input
6
0 1 0 1 1 0

Output
2

Input
7
1 0 1 1 1 0 1

Output
3

Input
3
0 0 0

Output
0



-----Note-----

In the first example, the maximal rest starts in last hour and goes to the first hour of the next day.

In the second example, Polycarp has maximal rest from the $4$-th to the $5$-th hour.

In the third example, Polycarp has maximal rest from the $3$-rd to the $5$-th hour.

In the fourth example, Polycarp has no rest at all.
"""
2022-04-13 19:05:32.872542 --------------------------
2022-04-13 19:05:47.460901 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmax_rest = 0\nrest = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        rest += 1\n    else:\n        max_rest = max(rest, max_rest)\n        rest = 0\n\nmax_rest = max(rest, max_rest)\n\nprint(max_rest)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\nli = list(map(int, input().split()))\n\n# print(li)\n\nmax_rest = 0\nmax_rest_index = 0\n\nrest_hours = 0\nrest_start_index = 0\nfor i in range(n):\n    if li[i] == 1:\n        rest_hours += 1\n        if rest_hours > max_rest:\n            max_rest = rest_hours\n            max_rest_index = rest_start_index\n    else:\n        rest_start_index = i+1\n        rest_hours = 0\n\nif max_rest > 0:\n    print(max_rest)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\n# Find the first zero\ni = 0\nwhile a[i] != 0:\n    i += 1\n\n# Find the last zero\nj = n - 1\nwhile a[j] != 0:\n    j -= 1\n\n# Find the maximum\nprint(max(a[i:j+1].count(1), a[i+1:j+2].count(1), a[i+2:j+3].count(1)))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    max_rest = 0\n    cur_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            cur_rest += 1\n        else:\n            cur_rest = 0\n        max_rest = max(max_rest, cur_rest)\n    print(max_rest)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# The maximal rest is the longest sequence of 1's, and the length of this sequence\n# is the length of the longest sequence of 0's + 1 (because the last 1 is not\n# included in the length of the longest sequence of 0's)\n\n# The longest sequence of 0's is the maximal difference between adjacent\n# entries of the list after adding 1 to all entries\n\n# Add 1 to all entries\nfor i in range(n):\n    a[i] += 1\n\n# Create a list of differences between adjacent entries\nd = []\nfor i in range(n - 1):\n    d.append(a[i + 1] - a[i])\n\n# Find the maximum difference\nprint(max(d))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif a[0] == 0:\n    a.append(0)\nelse:\n    a.append(1)\n\nb = []\ncount = 0\nfor i in a:\n    if i == 0:\n        count += 1\n    else:\n        b.append(count)\n        count = 0\n\nprint(max(b))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif a[-1] == 0:\n    a.append(a[0])\n\ncnt = 0\nans = 0\nfor i in range(n):\n    if a[i] == 0:\n        cnt = 0\n    else:\n        cnt += 1\n        ans = max(ans, cnt)\n\nprint(ans)"
    }
  ],
  "created": 1649876733,
  "id": "cmpl-4wcazbqYIDtkA96R3XA57swVYo5OH",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 19:05:47.461167 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmax_rest = 0\nrest = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        rest += 1\n    else:\n        max_rest = max(rest, max_rest)\n        rest = 0\n\nmax_rest = max(rest, max_rest)\n\nprint(max_rest)"
}
2022-04-13 19:05:47.461197 REASON stop
2022-04-13 19:05:47.461665 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\nli = list(map(int, input().split()))\n\n# print(li)\n\nmax_rest = 0\nmax_rest_index = 0\n\nrest_hours = 0\nrest_start_index = 0\nfor i in range(n):\n    if li[i] == 1:\n        rest_hours += 1\n        if rest_hours > max_rest:\n            max_rest = rest_hours\n            max_rest_index = rest_start_index\n    else:\n        rest_start_index = i+1\n        rest_hours = 0\n\nif max_rest > 0:\n    print(max_rest)\nelse:\n    print(0)"
}
2022-04-13 19:05:47.461780 REASON stop
2022-04-13 19:05:47.462136 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\n# Find the first zero\ni = 0\nwhile a[i] != 0:\n    i += 1\n\n# Find the last zero\nj = n - 1\nwhile a[j] != 0:\n    j -= 1\n\n# Find the maximum\nprint(max(a[i:j+1].count(1), a[i+1:j+2].count(1), a[i+2:j+3].count(1)))"
}
2022-04-13 19:05:47.462192 REASON stop
2022-04-13 19:05:47.475956 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    max_rest = 0\n    cur_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            cur_rest += 1\n        else:\n            cur_rest = 0\n        max_rest = max(max_rest, cur_rest)\n    print(max_rest)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 19:05:47.476044 REASON stop
2022-04-13 19:05:47.486384 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# The maximal rest is the longest sequence of 1's, and the length of this sequence\n# is the length of the longest sequence of 0's + 1 (because the last 1 is not\n# included in the length of the longest sequence of 0's)\n\n# The longest sequence of 0's is the maximal difference between adjacent\n# entries of the list after adding 1 to all entries\n\n# Add 1 to all entries\nfor i in range(n):\n    a[i] += 1\n\n# Create a list of differences between adjacent entries\nd = []\nfor i in range(n - 1):\n    d.append(a[i + 1] - a[i])\n\n# Find the maximum difference\nprint(max(d))"
}
2022-04-13 19:05:47.486491 REASON stop
2022-04-13 19:05:47.487132 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif a[0] == 0:\n    a.append(0)\nelse:\n    a.append(1)\n\nb = []\ncount = 0\nfor i in a:\n    if i == 0:\n        count += 1\n    else:\n        b.append(count)\n        count = 0\n\nprint(max(b))"
}
2022-04-13 19:05:47.487213 REASON stop
2022-04-13 19:05:47.488253 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif a[-1] == 0:\n    a.append(a[0])\n\ncnt = 0\nans = 0\nfor i in range(n):\n    if a[i] == 0:\n        cnt = 0\n    else:\n        cnt += 1\n        ans = max(ans, cnt)\n\nprint(ans)"
}
2022-04-13 19:05:47.488309 REASON stop
