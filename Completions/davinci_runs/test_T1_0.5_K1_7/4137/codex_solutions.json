["\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport re\n\ndef bf(prog):\n\t\"\"\"\n\tRun a brainfuck program.\n\t\"\"\"\n\tcode = list(prog)\n\tdata = [0] * 30000\n\tdp = 0\n\tcp = 0\n\tloops = []\n\tout = []\n\twhile cp < len(code):\n\t\tc = code[cp]\n\t\tif c == '>':\n\t\t\tdp += 1\n\t\telif c == '<':\n\t\t\tdp -= 1\n\t\telif c == '+':\n\t\t\tdata[dp] += 1\n\t\telif c == '-':\n\t\t\tdata[dp] -= 1\n\t\telif c == '.':\n\t\t\tout.append(data[dp])\n\t\telif c == '[':\n\t\t\tloops.append(cp)\n\t\telif c == ']':\n\t\t\tif data[dp] != 0:\n\t\t\t\tcp = loops[-1]\n\t\t\telse:\n\t\t\t\tloops.pop()\n\t\tcp += 1\n\treturn out\n\ndef bf_add(a, b):\n\t\"\"\"\n\tCreate a brainfuck program that adds two numbers.\n\t\"\"\"\n\tprog = ''\n\twhile a > 0 or b > 0:\n\t\tif a > 0:\n\t\t\tprog += '+'\n\t\t\ta -= 1\n\t\tif b > 0:\n\t\t\tprog += '>'\n\t\t\tprog += '+'\n\t\t\tb -= 1\n\t\tprog += '<'\n\tprog += '.'\n\treturn prog\n\ndef bf_sub(a, b):\n\t\"\"\"\n\tCreate a brainfuck program that subtracts two numbers.\n\t\"\"\"\n\tprog = ''\n\twhile a > 0 or b > 0:\n\t\tif a > 0:\n\t\t\tprog += '+'\n\t\t\ta -= 1\n\t\tif b > 0:\n\t\t\tprog += '>'\n\t\t\tprog += '-'\n\t\t\tb -= 1\n\t\tprog += '<'\n\tprog += '.'\n\treturn prog\n\ndef bf_calc(expr):\n\t\"\"\"\n\tCreate a brainfuck program that calculates an expression.\n\t\"\"\"\n\tprog = ''\n\tnum = ''\n\tfor c in expr:\n\t\tif c in '+-':\n\t\t\tif num:\n\t\t\t\tprog += bf_add(int(num), 0)\n\t\t\t\tnum = ''\n\t\t\tif c == '+':\n\t\t\t\tprog += '>'\n\t\t\telse:\n\t\t\t\tprog += '<'\n\t\telse:\n\t\t\tnum += c\n\tif num:\n\t\tprog += bf_add(int(num), 0)\n\treturn prog\n\ndef main():\n\texpr = input()\n\tprog = bf_calc(expr)\n\tprint(prog)\n\nif __name__ == '__main__':\n\tmain()", "\n\n# TODO: This solution is not efficient enough to pass the last test case.\n\nfrom random import randint, choice\n\n\ndef generate_program(expression):\n    \"\"\"\n    Generate Brainfuck program from arithmetic expression.\n    :param expression: arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them.\n    :return: Brainfuck program which, when executed, will print the result of evaluating this expression.\n    \"\"\"\n    operands = expression.split('+')\n    if len(operands) == 1:\n        operands = expression.split('-')\n        sign = '-'\n    else:\n        sign = '+'\n    operands = [int(x) for x in operands]\n    result = operands[0]\n    if sign == '+':\n        for i in range(1, len(operands)):\n            result += operands[i]\n    else:\n        for i in range(1, len(operands)):\n            result -= operands[i]\n    result = 256 + result if result < 0 else result\n\n    program = ''\n    for i in range(len(operands)):\n        program += '+' * operands[i]\n        program += '>'\n    program += '[<'\n    program += '+' if sign == '+' else '-'\n    program += '>-]<'\n    program += '.'\n    return program\n\n\ndef random_expression(operands_num=randint(2, 10)):\n    \"\"\"\n    Generate random arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them.\n    :param operands_num: number of operands in expression\n    :return: arithmetic expression\n    \"\"\"\n    expression = ''\n    for i in range(operands_num):\n        expression += str(randint(0, 255))\n        if i < operands_num - 1:\n            expression += choice(['+', '-'])\n    return expression\n\n\ndef main():\n    print(generate_program(random_expression()))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport re\n\ndef get_program(expression):\n    \"\"\"\n    >>> get_program(\"2+3\")\n    '++>\\\\n+++>\\\\n<[<+>-]<\\\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n    >>> get_program(\"9-7\")\n    '+++++++++>\\\\n+++++++>\\\\n<[<->-]<\\\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n    \"\"\"\n    tokens = re.split(\"[+-]\", expression)\n    signs = re.findall(\"[+-]\", expression)\n    signs.append(\"+\")\n    result = \"\"\n    for i, token in enumerate(tokens):\n        sign = signs[i]\n        result += get_program_for_number(int(token))\n        if sign == \"+\":\n            result += \"+\"\n        else:\n            result += \"-\"\n    result += get_program_for_number(0)\n    result += \"<[<\"\n    for sign in signs:\n        if sign == \"+\":\n            result += \"+\"\n        else:\n            result += \"-\"\n        result += \">-]\"\n    result += \"<\"\n    result += \".\"\n    return result\n\ndef get_program_for_number(n):\n    \"\"\"\n    >>> get_program_for_number(2)\n    '++>\\\\n+++>\\\\n'\n    >>> get_program_for_number(9)\n    '+++++++++>\\\\n+++++++>\\\\n'\n    \"\"\"\n    result = \"\"\n    while n > 0:\n        result += \">\"\n        n -= 1\n    result += \"\\\\n\"\n    while n < 0:\n        result += \"<\"\n        n += 1\n    result += \"\\\\n\"\n    return result\n\nif __name__ == \"__main__\":\n    expression = sys.stdin.read().strip()\n    print(get_program(expression))", "\n\ndef brainfuck(expression):\n\toutput = ''\n\toutput += ('+' * (int(expression[0]) + 1))\n\toutput += '>'\n\tfor i in range(1, len(expression), 2):\n\t\tif expression[i] == '+':\n\t\t\toutput += ('+' * (int(expression[i + 1]) + 1))\n\t\t\toutput += '>'\n\t\telse:\n\t\t\toutput += ('-' * (int(expression[i + 1]) + 1))\n\t\t\toutput += '>'\n\toutput += '<' * len(expression)\n\toutput += '[<'\n\tfor i in range(1, len(expression), 2):\n\t\tif expression[i] == '+':\n\t\t\toutput += '+>'\n\t\telse:\n\t\t\toutput += '->'\n\toutput += '-]<'\n\toutput += '+' * 256\n\toutput += '.'\n\treturn output\n\nprint(brainfuck(input()))", "\n\nimport sys\nimport math\n\ndef bf(n):\n    if n == 0:\n        return \"\"\n    if n > 0:\n        return \"+\"*n\n    if n < 0:\n        return \"-\"*(-n)\n\ndef main(data):\n    l = data.split(\"+\")\n    result = 0\n    for i in l:\n        result += int(i)\n    print(bf(result))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read())"]