2022-04-13 20:30:03.316327 """
You have a garland consisting of $n$ lamps. Each lamp is colored red, green or blue. The color of the $i$-th lamp is $s_i$ ('R', 'G' and 'B' — colors of lamps in the garland).

You have to recolor some lamps in this garland (recoloring a lamp means changing its initial color to another) in such a way that the obtained garland is nice.

A garland is called nice if any two lamps of the same color have distance divisible by three between them. I.e. if the obtained garland is $t$, then for each $i, j$ such that $t_i = t_j$ should be satisfied $|i-j|~ mod~ 3 = 0$. The value $|x|$ means absolute value of $x$, the operation $x~ mod~ y$ means remainder of $x$ when divided by $y$.

For example, the following garlands are nice: "RGBRGBRG", "GB", "R", "GRBGRBG", "BRGBRGB". The following garlands are not nice: "RR", "RGBG".

Among all ways to recolor the initial garland to make it nice you have to choose one with the minimum number of recolored lamps. If there are multiple optimal solutions, print any of them.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of lamps.

The second line of the input contains the string $s$ consisting of $n$ characters 'R', 'G' and 'B' — colors of lamps in the garland.


-----Output-----

In the first line of the output print one integer $r$ — the minimum number of recolors needed to obtain a nice garland from the given one.

In the second line of the output print one string $t$ of length $n$ — a nice garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, print any of them.


-----Examples-----
Input
3
BRB

Output
1
GRB

Input
7
RGBGRBB

Output
3
RGBRGBR
"""
2022-04-13 20:30:03.316347 --------------------------
2022-04-13 20:30:35.405701 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#input\nn = int(input())\ns = input()\n\n#helper function to check if garland is nice\ndef is_nice(garland):\n    #check if any two lamps of the same color have distance divisible by three between them\n    for i in range(len(garland)):\n        for j in range(i+1, len(garland)):\n            if garland[i] == garland[j] and (j - i) % 3 != 0:\n                return False\n    return True\n\n#helper function to change a lamp\ndef change_lamp(garland, i):\n    if garland[i] == 'R':\n        return garland[:i] + 'G' + garland[i+1:]\n    elif garland[i] == 'G':\n        return garland[:i] + 'B' + garland[i+1:]\n    else:\n        return garland[:i] + 'R' + garland[i+1:]\n\n#helper function to count the number of lamps changed\ndef count_changes(garland):\n    count = 0\n    for lamp in garland:\n        if lamp == 'R':\n            count += 1\n        elif lamp == 'G':\n            count += 2\n    return count\n\n#helper function to change a garland\ndef change_garland(garland):\n    #check if garland is nice\n    if is_nice(garland):\n        return garland\n\n    #create a list of garlands\n    garlands = []\n    for i in range(len(garland)):\n        garlands.append(change_lamp(garland, i))\n\n    #sort the garlands by number of lamps changed\n    garlands.sort(key=count_changes)\n    return garlands[0]\n\n#change garland\nt = change_garland(s)\n\n#output\nprint(count_changes(t))\nprint(t)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\ns = list(s)\n\ncount = 0\n\nfor i in range(n):\n    if i % 3 == 0:\n        if s[i] == 'R':\n            s[i] = 'G'\n            count += 1\n        elif s[i] == 'G':\n            s[i] = 'R'\n            count += 1\n    elif i % 3 == 1:\n        if s[i] == 'R':\n            s[i] = 'B'\n            count += 1\n        elif s[i] == 'B':\n            s[i] = 'R'\n            count += 1\n    elif i % 3 == 2:\n        if s[i] == 'B':\n            s[i] = 'G'\n            count += 1\n        elif s[i] == 'G':\n            s[i] = 'B'\n            count += 1\n\nprint(count)\nprint(''.join(s))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef check_garland(garland):\n    for i in range(0, len(garland)-2):\n        if garland[i] == garland[i+1] and garland[i+1] == garland[i+2]:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    garland = input()\n    if check_garland(garland):\n        print(0)\n        print(garland)\n    else:\n        for i in range(0, n):\n            for j in range(0, n):\n                if garland[i] == garland[j] and (j - i) % 3 == 0:\n                    garland = garland[:i] + garland[i:j+1].replace(garland[i], 'G' if garland[i] == 'R' else 'R') + garland[j+1:]\n                    break\n        print(garland.count('G'))\n        print(garland)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef garland(s):\n    \"\"\"\n    >>> garland('BRB')\n    (1, 'GRB')\n    >>> garland('RGBGRBB')\n    (3, 'RGBRGBR')\n    \"\"\"\n    n = len(s)\n    if n <= 3:\n        return (0, s)\n    else:\n        if n % 3 == 0:\n            return (0, s)\n        elif n % 3 == 1:\n            return (1, s[:n - 1] + 'G')\n        else:\n            return (2, s[:n - 1] + 'G')\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    n = int(input())\n    s = input()\n    print(*garland(s))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\"\"\"\nThis problem is easy to solve if we use the following observation.\n\nLet's consider the following three cases.\n\nCase 1. If the initial garland consists of only one color, then the initial garland is nice and we don't need to recolor any lamps.\n\nCase 2. If the initial garland consists of two colors, then the initial garland is not nice. Let's recolor any lamp to the third color. After recoloring the garland will be nice.\n\nCase 3. If the initial garland consists of three colors, then the initial garland is not nice. Let's recolor any lamp to the fourth color. After recoloring the garland will be nice.\n\nSo, we can see that if the initial garland consists of only one color, then we don't need to recolor any lamps. Otherwise, we can recolor any lamp to the fourth color.\n\nNow let's consider the following algorithm.\n\nLet's initialize the variable $r$ with $0$.\n\nIf the initial garland consists of only one color, then the algorithm will stop. Otherwise, let's recolor any lamp to the fourth color, increase the value of $r$ by $1$ and continue.\n\nThis algorithm will work correctly and will stop in $n$ steps.\n\nSo, the answer to the problem is the number of times we recolored lamps.\n\"\"\"\n\nn = int(input())\ns = input()\n\n\"\"\"\nFind the number of times we recolored lamps\n\"\"\"\nr = 0\n\n\"\"\"\nIf the initial garland consists of only one color, then we don't need to recolor any lamps.\n\"\"\"\nwhile len(set(s)) > 1:\n    \"\"\"\n    Let's recolor any lamp to the fourth color, increase the value of $r$ by $1$ and continue.\n    \"\"\"\n    s = s.replace(\"R\", \"Z\").replace(\"G\", \"R\").replace(\"B\", \"G\").replace(\"Z\", \"B\")\n    r += 1\n\n\"\"\"\nPrint the answer\n\"\"\"\nprint(r)\nprint(s)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\ndef recolor(s, i, c):\n    \"\"\"\n    Recolor s[i] to c\n    \"\"\"\n    return s[:i] + c + s[i+1:]\n\ndef solve(s):\n    \"\"\"\n    Return the minimum number of recolors needed to obtain a nice garland from the given one\n    \"\"\"\n    n = len(s)\n    # If the garland is already nice, we don't need to change anything\n    if all([abs(i - j) % 3 == 0 for i, c in enumerate(s) for j, d in enumerate(s) if c == d and i != j]):\n        return 0\n    # Otherwise, we need to recolor at least one lamp\n    else:\n        # For each lamp, we try to recolor it to each of the remaining two colors\n        for i in range(n):\n            for c in ['R', 'G', 'B']:\n                if c != s[i]:\n                    # If the garland is nice after recoloring this lamp, we're done\n                    if all([abs(i - j) % 3 == 0 for i, c in enumerate(recolor(s, i, c)) for j, d in enumerate(recolor(s, i, c)) if c == d and i != j]):\n                        return 1\n        # If we didn't find any single lamp that makes the garland nice after recoloring, we need to recolor at least two lamps\n        return 2\n\nprint(solve(s))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(3, 'BRB')\n    (1, 'GRB')\n    >>> solve(7, 'RGBGRBB')\n    (3, 'RGBRGBR')\n    \"\"\"\n    s = list(s)\n    count = 0\n    for i in range(n):\n        if s[i] == 'R':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'G':\n                    s[i + 1] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'G'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'G':\n                    s[i] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'G'\n                    count += 1\n        if s[i] == 'G':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i + 1] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n        if s[i] == 'B':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i + 1] = 'G'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i] = 'G'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n    return count, ''.join(s)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(*solve(n, s))"
    }
  ],
  "created": 1649881803,
  "id": "cmpl-4wdulipPzKdPcx2Z7wuASJyp34Z2h",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:30:35.406053 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#input\nn = int(input())\ns = input()\n\n#helper function to check if garland is nice\ndef is_nice(garland):\n    #check if any two lamps of the same color have distance divisible by three between them\n    for i in range(len(garland)):\n        for j in range(i+1, len(garland)):\n            if garland[i] == garland[j] and (j - i) % 3 != 0:\n                return False\n    return True\n\n#helper function to change a lamp\ndef change_lamp(garland, i):\n    if garland[i] == 'R':\n        return garland[:i] + 'G' + garland[i+1:]\n    elif garland[i] == 'G':\n        return garland[:i] + 'B' + garland[i+1:]\n    else:\n        return garland[:i] + 'R' + garland[i+1:]\n\n#helper function to count the number of lamps changed\ndef count_changes(garland):\n    count = 0\n    for lamp in garland:\n        if lamp == 'R':\n            count += 1\n        elif lamp == 'G':\n            count += 2\n    return count\n\n#helper function to change a garland\ndef change_garland(garland):\n    #check if garland is nice\n    if is_nice(garland):\n        return garland\n\n    #create a list of garlands\n    garlands = []\n    for i in range(len(garland)):\n        garlands.append(change_lamp(garland, i))\n\n    #sort the garlands by number of lamps changed\n    garlands.sort(key=count_changes)\n    return garlands[0]\n\n#change garland\nt = change_garland(s)\n\n#output\nprint(count_changes(t))\nprint(t)"
}
2022-04-13 20:30:35.406103 REASON stop
2022-04-13 20:30:35.406511 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\ns = list(s)\n\ncount = 0\n\nfor i in range(n):\n    if i % 3 == 0:\n        if s[i] == 'R':\n            s[i] = 'G'\n            count += 1\n        elif s[i] == 'G':\n            s[i] = 'R'\n            count += 1\n    elif i % 3 == 1:\n        if s[i] == 'R':\n            s[i] = 'B'\n            count += 1\n        elif s[i] == 'B':\n            s[i] = 'R'\n            count += 1\n    elif i % 3 == 2:\n        if s[i] == 'B':\n            s[i] = 'G'\n            count += 1\n        elif s[i] == 'G':\n            s[i] = 'B'\n            count += 1\n\nprint(count)\nprint(''.join(s))"
}
2022-04-13 20:30:35.406615 REASON stop
2022-04-13 20:30:35.406966 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef check_garland(garland):\n    for i in range(0, len(garland)-2):\n        if garland[i] == garland[i+1] and garland[i+1] == garland[i+2]:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    garland = input()\n    if check_garland(garland):\n        print(0)\n        print(garland)\n    else:\n        for i in range(0, n):\n            for j in range(0, n):\n                if garland[i] == garland[j] and (j - i) % 3 == 0:\n                    garland = garland[:i] + garland[i:j+1].replace(garland[i], 'G' if garland[i] == 'R' else 'R') + garland[j+1:]\n                    break\n        print(garland.count('G'))\n        print(garland)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:30:35.407010 REASON stop
2022-04-13 20:30:35.427463 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef garland(s):\n    \"\"\"\n    >>> garland('BRB')\n    (1, 'GRB')\n    >>> garland('RGBGRBB')\n    (3, 'RGBRGBR')\n    \"\"\"\n    n = len(s)\n    if n <= 3:\n        return (0, s)\n    else:\n        if n % 3 == 0:\n            return (0, s)\n        elif n % 3 == 1:\n            return (1, s[:n - 1] + 'G')\n        else:\n            return (2, s[:n - 1] + 'G')\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    n = int(input())\n    s = input()\n    print(*garland(s))"
}
2022-04-13 20:30:35.427550 REASON stop
2022-04-13 20:30:35.450729 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\"\"\"\nThis problem is easy to solve if we use the following observation.\n\nLet's consider the following three cases.\n\nCase 1. If the initial garland consists of only one color, then the initial garland is nice and we don't need to recolor any lamps.\n\nCase 2. If the initial garland consists of two colors, then the initial garland is not nice. Let's recolor any lamp to the third color. After recoloring the garland will be nice.\n\nCase 3. If the initial garland consists of three colors, then the initial garland is not nice. Let's recolor any lamp to the fourth color. After recoloring the garland will be nice.\n\nSo, we can see that if the initial garland consists of only one color, then we don't need to recolor any lamps. Otherwise, we can recolor any lamp to the fourth color.\n\nNow let's consider the following algorithm.\n\nLet's initialize the variable $r$ with $0$.\n\nIf the initial garland consists of only one color, then the algorithm will stop. Otherwise, let's recolor any lamp to the fourth color, increase the value of $r$ by $1$ and continue.\n\nThis algorithm will work correctly and will stop in $n$ steps.\n\nSo, the answer to the problem is the number of times we recolored lamps.\n\"\"\"\n\nn = int(input())\ns = input()\n\n\"\"\"\nFind the number of times we recolored lamps\n\"\"\"\nr = 0\n\n\"\"\"\nIf the initial garland consists of only one color, then we don't need to recolor any lamps.\n\"\"\"\nwhile len(set(s)) > 1:\n    \"\"\"\n    Let's recolor any lamp to the fourth color, increase the value of $r$ by $1$ and continue.\n    \"\"\"\n    s = s.replace(\"R\", \"Z\").replace(\"G\", \"R\").replace(\"B\", \"G\").replace(\"Z\", \"B\")\n    r += 1\n\n\"\"\"\nPrint the answer\n\"\"\"\nprint(r)\nprint(s)"
}
2022-04-13 20:30:35.450834 REASON stop
2022-04-13 20:30:35.451541 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\ndef recolor(s, i, c):\n    \"\"\"\n    Recolor s[i] to c\n    \"\"\"\n    return s[:i] + c + s[i+1:]\n\ndef solve(s):\n    \"\"\"\n    Return the minimum number of recolors needed to obtain a nice garland from the given one\n    \"\"\"\n    n = len(s)\n    # If the garland is already nice, we don't need to change anything\n    if all([abs(i - j) % 3 == 0 for i, c in enumerate(s) for j, d in enumerate(s) if c == d and i != j]):\n        return 0\n    # Otherwise, we need to recolor at least one lamp\n    else:\n        # For each lamp, we try to recolor it to each of the remaining two colors\n        for i in range(n):\n            for c in ['R', 'G', 'B']:\n                if c != s[i]:\n                    # If the garland is nice after recoloring this lamp, we're done\n                    if all([abs(i - j) % 3 == 0 for i, c in enumerate(recolor(s, i, c)) for j, d in enumerate(recolor(s, i, c)) if c == d and i != j]):\n                        return 1\n        # If we didn't find any single lamp that makes the garland nice after recoloring, we need to recolor at least two lamps\n        return 2\n\nprint(solve(s))"
}
2022-04-13 20:30:35.451602 REASON stop
2022-04-13 20:30:35.452537 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(3, 'BRB')\n    (1, 'GRB')\n    >>> solve(7, 'RGBGRBB')\n    (3, 'RGBRGBR')\n    \"\"\"\n    s = list(s)\n    count = 0\n    for i in range(n):\n        if s[i] == 'R':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'G':\n                    s[i + 1] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'G'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'G':\n                    s[i] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'G'\n                    count += 1\n        if s[i] == 'G':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i + 1] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i] = 'B'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n        if s[i] == 'B':\n            if i % 3 == 0:\n                continue\n            if i % 3 == 1:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i + 1] = 'G'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n            if i % 3 == 2:\n                if (i + 1) < n and s[i + 1] == 'R':\n                    s[i] = 'G'\n                    count += 1\n                else:\n                    s[i] = 'R'\n                    count += 1\n    return count, ''.join(s)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(*solve(n, s))"
}
2022-04-13 20:30:35.452620 REASON stop
