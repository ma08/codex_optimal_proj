["\nimport math\n\ndef calculate_divisors(n):\n    ans = 1\n    for i in range(2, n + 1):\n        ans *= i\n    ans = list(str(ans))\n    ans = [int(i) for i in ans]\n    return sum(ans)\n\nn = int(input())\nprint(calculate_divisors(n))", "\n\n\ndef divisor_count(n: int) -> int:\n    \"\"\"\n    Count the number of positive divisors of n!\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 1000000007\n    return result\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(divisor_count(n))", "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef get_divisor(num):\n    divisor = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisor.append(i)\n            if i != num // i:\n                divisor.append(num//i)\n    return divisor\n\ndef get_divisor_count(num):\n    count = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            count += 1\n            if i != num // i:\n                count += 1\n    return count\n\ndef get_divisor_count_memo(num, memo):\n    if num in memo:\n        return memo[num]\n    count = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            count += 1\n            if i != num // i:\n                count += 1\n    memo[num] = count\n    return count\n\ndef get_divisor_count_memo2(num, memo):\n    if num in memo:\n        return memo[num]\n    count = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            count += 1\n            if i != num // i:\n                count += 1\n    memo[num] = count\n    return count\n\ndef get_divisor_count_memo3(num, memo):\n    if num in memo:\n        return memo[num]\n    count = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            count += 1\n            if i != num // i:\n                count += 1\n    memo[num] = count\n    return count\n\nif __name__ == '__main__':\n    N = int(input())\n    # print(get_divisor_count(N))\n    # print(get_divisor_count_memo(N, {}))\n    # print(get_divisor_count_memo2(N, {}))\n    print(get_divisor_count_memo3(N, {}))", "\nfrom math import factorial\n\ndef number_of_divisors(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\ndef main():\n    n = int(input())\n    print(number_of_divisors(factorial(n)))\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef solution(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return len(get_divisors(result))\n\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solution(n))"]