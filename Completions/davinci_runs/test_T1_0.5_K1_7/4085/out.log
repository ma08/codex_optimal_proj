2022-04-13 18:07:18.715720 """
We guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.

Your task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.

You have to answer $t$ independent queries.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 25$) — the number of queries. Then $t$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 300$) — the number of divisors in the list.

The second line of the query contains $n$ integers $d_1, d_2, \dots, d_n$ ($2 \le d_i \le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.


-----Output-----

For each query print the answer to it.

If the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.


-----Example-----
Input
2
8
8 2 12 6 4 24 16 3
1
2

Output
48
4
"""
2022-04-13 18:07:18.715730 --------------------------
2022-04-13 18:07:43.597022 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef is_power(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    return n == 1\n\ndef get_min_x(n):\n    if is_prime(n):\n        return 2 * n\n    elif is_power(n):\n        return 2 * (n + 1)\n    else:\n        return n + 1\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    min_x = get_min_x(divisors[0])\n    for divisor in divisors:\n        min_x = max(min_x, get_min_x(divisor))\n    print(min_x)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef divisors(n):\n\tdiv = []\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\tdiv.append(i)\n\t\t\tdiv.append(n//i)\n\treturn sorted(div)\n\ndef guess(div):\n\tfor i in range(2, 10**6):\n\t\tif divisors(i) == div:\n\t\t\treturn i\n\treturn -1\n\nif __name__ == \"__main__\":\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tdiv = list(map(int, input().split()))\n\t\tprint(guess(div))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(divisors):\n    divisors.sort()\n    # print(divisors)\n    max_div = divisors[-1]\n    for i in range(len(divisors)-1, -1, -1):\n        if max_div % divisors[i] != 0:\n            return -1\n    return max_div\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    divisors = list(map(int, input().split()))\n    print(solve(divisors))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    divs = list(map(int, input().split()))\n    if n == 1:\n        print(divs[0]*2)\n    else:\n        print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef get_divisors(n):\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors.append(i)\n            if i != math.sqrt(n):\n                divisors.append(n / i)\n    return divisors\n\ndef get_minimum_x(divisors):\n    divisors = sorted(divisors)\n    for i in range(len(divisors)):\n        if divisors[i] != i + 2:\n            return divisors[i - 1] * (i + 2)\n    return divisors[-1] * (len(divisors) + 1)\n\ndef get_input():\n    return sys.stdin.readline().strip().split(' ')\n\ndef main():\n    t = int(get_input()[0])\n    for i in range(t):\n        n = int(get_input()[0])\n        divisors = list(map(int, get_input()))\n        x = get_minimum_x(divisors)\n        if len(get_divisors(x)) == len(divisors):\n            print(x)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    if n == 1:\n        print(l[0]*2)\n    else:\n        if l[0]*l[1] == l[-1]:\n            print(l[-1])\n        else:\n            print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divs = list(map(int, input().split()))\n        divs.sort()\n        if divs[0] == 2:\n            print(divs[-1] * 2)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649873238,
  "id": "cmpl-4wbgcnnbpUCMSWkuQnUxrNbEJpbgG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:07:43.597307 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef is_power(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    return n == 1\n\ndef get_min_x(n):\n    if is_prime(n):\n        return 2 * n\n    elif is_power(n):\n        return 2 * (n + 1)\n    else:\n        return n + 1\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    min_x = get_min_x(divisors[0])\n    for divisor in divisors:\n        min_x = max(min_x, get_min_x(divisor))\n    print(min_x)"
}
2022-04-13 18:07:43.597343 REASON stop
2022-04-13 18:07:43.597832 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef divisors(n):\n\tdiv = []\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\tdiv.append(i)\n\t\t\tdiv.append(n//i)\n\treturn sorted(div)\n\ndef guess(div):\n\tfor i in range(2, 10**6):\n\t\tif divisors(i) == div:\n\t\t\treturn i\n\treturn -1\n\nif __name__ == \"__main__\":\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tdiv = list(map(int, input().split()))\n\t\tprint(guess(div))"
}
2022-04-13 18:07:43.597954 REASON stop
2022-04-13 18:07:43.598344 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(divisors):\n    divisors.sort()\n    # print(divisors)\n    max_div = divisors[-1]\n    for i in range(len(divisors)-1, -1, -1):\n        if max_div % divisors[i] != 0:\n            return -1\n    return max_div\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    divisors = list(map(int, input().split()))\n    print(solve(divisors))"
}
2022-04-13 18:07:43.598395 REASON stop
2022-04-13 18:07:43.599785 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    divs = list(map(int, input().split()))\n    if n == 1:\n        print(divs[0]*2)\n    else:\n        print(-1)"
}
2022-04-13 18:07:43.599866 REASON stop
2022-04-13 18:07:43.601033 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef get_divisors(n):\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors.append(i)\n            if i != math.sqrt(n):\n                divisors.append(n / i)\n    return divisors\n\ndef get_minimum_x(divisors):\n    divisors = sorted(divisors)\n    for i in range(len(divisors)):\n        if divisors[i] != i + 2:\n            return divisors[i - 1] * (i + 2)\n    return divisors[-1] * (len(divisors) + 1)\n\ndef get_input():\n    return sys.stdin.readline().strip().split(' ')\n\ndef main():\n    t = int(get_input()[0])\n    for i in range(t):\n        n = int(get_input()[0])\n        divisors = list(map(int, get_input()))\n        x = get_minimum_x(divisors)\n        if len(get_divisors(x)) == len(divisors):\n            print(x)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:07:43.601140 REASON stop
2022-04-13 18:07:43.602206 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    if n == 1:\n        print(l[0]*2)\n    else:\n        if l[0]*l[1] == l[-1]:\n            print(l[-1])\n        else:\n            print(-1)"
}
2022-04-13 18:07:43.602278 REASON stop
2022-04-13 18:07:43.624085 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divs = list(map(int, input().split()))\n        divs.sort()\n        if divs[0] == 2:\n            print(divs[-1] * 2)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:07:43.624197 REASON stop
