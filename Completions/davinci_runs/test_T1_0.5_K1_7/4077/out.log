2022-04-13 17:59:56.270247 """
You are given an integer sequence $a_1, a_2, \dots, a_n$.

Find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.

The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.

For example, if $a=[4, 2, 7, 5]$ then its median is $4$ since after sorting the sequence, it will look like $[2, 4, 5, 7]$ and the left of two middle elements is equal to $4$. The median of $[7, 1, 2, 9, 6]$ equals $6$ since after sorting, the value $6$ will be in the middle of the sequence.

Write a program to find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.


-----Input-----

The first line contains integers $n$ and $m$ ($1 \le n,m \le 2\cdot10^5$) â€” the length of the given sequence and the required value of the median.

The second line contains an integer sequence $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2\cdot10^5$).


-----Output-----

Print the required number.


-----Examples-----
Input
5 4
1 4 5 60 4

Output
8

Input
3 1
1 1 1

Output
6

Input
15 2
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3

Output
97



-----Note-----

In the first example, the suitable pairs of indices are: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 2)$, $(2, 3)$, $(2, 5)$, $(4, 5)$ and $(5, 5)$.
"""
2022-04-13 17:59:56.270259 --------------------------
2022-04-13 18:00:13.637498 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport time\nstart_time = time.time()\n\n\ndef median(seq):\n    if len(seq) % 2 == 0:\n        median = (seq[int(len(seq)/2)] + seq[int(len(seq)/2)-1])/2\n    else:\n        median = seq[int(len(seq)/2)]\n    return median\n\n\ndef count_median(seq, m):\n    count = 0\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if median(seq[i:j]) == m:\n                count += 1\n    return count\n\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    print(count_median(seq, m))\n\n\nif __name__ == \"__main__\":\n    main()\n    print(\"Program run time(in s): \", time.time() - start_time)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    if a[i] == m:\n        count += 1\n    else:\n        count += 2\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport bisect\n\n\ndef find_median(a, m, n):\n    res = 0\n    l = 0\n    while l < n:\n        r = bisect.bisect_right(a, a[l] + m - 1) - 1\n        if r < l:\n            l += 1\n            continue\n        res += r - l + 1\n        l += 1\n    return res\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(find_median(a, m, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = 0\nright = 0\n\ncnt = 0\nleft_dict = {}\nright_dict = {}\n\nwhile left < n:\n    while right < n and (not 2 in left_dict or left_dict[2] <= right_dict.get(2,0)):\n        right_dict[a[right]] = right_dict.get(a[right], 0) + 1\n        right += 1\n\n    if right - left > 1 and 2 in right_dict and right_dict[2] > left_dict.get(2,0):\n        cnt += n - right + 1\n\n    left_dict[a[left]] = left_dict.get(a[left], 0) + 1\n    if left_dict[a[left]] == right_dict[a[left]]:\n        del right_dict[a[left]]\n    left += 1\n\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split(\" \")]\n\n\ndef main():\n    N, M = read_ints()\n    A = read_ints()\n    cnt = [0] * (N + 1)\n    for i in range(N):\n        cnt[i + 1] = cnt[i] + (1 if A[i] <= M else 0)\n    res = 0\n    for i in range(N):\n        res += cnt[N] - cnt[i + 1] + (1 if A[i] <= M else 0)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#!/bin/python3\n\nimport sys\n\ndef median(arr, m):\n    # Complete this function\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (arr[i:j+1] == sorted(arr[i:j+1])):\n                if (arr[i:j+1][len(arr[i:j+1])//2] == m):\n                    count += 1\n    return count\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\narr = list(map(int, input().strip().split(' ')))\nresult = median(arr, m)\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n\n    for i in range(n):\n        left[i + 1] = left[i] + (a[i] <= m)\n        right[i + 1] = right[i] + (a[i] < m)\n\n    ans = 0\n    for i in range(n + 1):\n        ans += left[i] * (n - i - right[i]) + right[i] * (n - i - left[i])\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649872796,
  "id": "cmpl-4wbZUVP23yAHPRakECXnzzB1HnUOj",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:00:13.637779 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport time\nstart_time = time.time()\n\n\ndef median(seq):\n    if len(seq) % 2 == 0:\n        median = (seq[int(len(seq)/2)] + seq[int(len(seq)/2)-1])/2\n    else:\n        median = seq[int(len(seq)/2)]\n    return median\n\n\ndef count_median(seq, m):\n    count = 0\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if median(seq[i:j]) == m:\n                count += 1\n    return count\n\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    print(count_median(seq, m))\n\n\nif __name__ == \"__main__\":\n    main()\n    print(\"Program run time(in s): \", time.time() - start_time)"
}
2022-04-13 18:00:13.637817 REASON stop
2022-04-13 18:00:13.638234 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    if a[i] == m:\n        count += 1\n    else:\n        count += 2\n\nprint(count)"
}
2022-04-13 18:00:13.638376 REASON stop
2022-04-13 18:00:13.638743 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport bisect\n\n\ndef find_median(a, m, n):\n    res = 0\n    l = 0\n    while l < n:\n        r = bisect.bisect_right(a, a[l] + m - 1) - 1\n        if r < l:\n            l += 1\n            continue\n        res += r - l + 1\n        l += 1\n    return res\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(find_median(a, m, n))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:00:13.638788 REASON stop
2022-04-13 18:00:13.640162 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = 0\nright = 0\n\ncnt = 0\nleft_dict = {}\nright_dict = {}\n\nwhile left < n:\n    while right < n and (not 2 in left_dict or left_dict[2] <= right_dict.get(2,0)):\n        right_dict[a[right]] = right_dict.get(a[right], 0) + 1\n        right += 1\n\n    if right - left > 1 and 2 in right_dict and right_dict[2] > left_dict.get(2,0):\n        cnt += n - right + 1\n\n    left_dict[a[left]] = left_dict.get(a[left], 0) + 1\n    if left_dict[a[left]] == right_dict[a[left]]:\n        del right_dict[a[left]]\n    left += 1\n\nprint(cnt)"
}
2022-04-13 18:00:13.640238 REASON stop
2022-04-13 18:00:13.659329 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split(\" \")]\n\n\ndef main():\n    N, M = read_ints()\n    A = read_ints()\n    cnt = [0] * (N + 1)\n    for i in range(N):\n        cnt[i + 1] = cnt[i] + (1 if A[i] <= M else 0)\n    res = 0\n    for i in range(N):\n        res += cnt[N] - cnt[i + 1] + (1 if A[i] <= M else 0)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:00:13.659440 REASON stop
2022-04-13 18:00:13.673511 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#!/bin/python3\n\nimport sys\n\ndef median(arr, m):\n    # Complete this function\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (arr[i:j+1] == sorted(arr[i:j+1])):\n                if (arr[i:j+1][len(arr[i:j+1])//2] == m):\n                    count += 1\n    return count\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\narr = list(map(int, input().strip().split(' ')))\nresult = median(arr, m)\nprint(result)"
}
2022-04-13 18:00:13.673609 REASON stop
2022-04-13 18:00:13.682320 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n\n    for i in range(n):\n        left[i + 1] = left[i] + (a[i] <= m)\n        right[i + 1] = right[i] + (a[i] < m)\n\n    ans = 0\n    for i in range(n + 1):\n        ans += left[i] * (n - i - right[i]) + right[i] * (n - i - left[i])\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:00:13.682433 REASON stop
