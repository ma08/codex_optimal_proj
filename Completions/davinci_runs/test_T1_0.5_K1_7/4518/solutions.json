["from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n = val()\n    l = li()\n    \n    if max(l) == min(l):\n        print('NO')\n        continue\n    \n    print('YES')\n    root = l[0]\n    same = set()\n    other = -1\n    for i in range(1, n):\n        if l[i] == root:\n            same.add(i)\n        else:\n            other = i\n            print(1, i + 1)\n    \n    for i in same:\n        print(i + 1, other + 1)", "for _ in range(int(input())):\n    am = int(input())\n    arr = list(map(int,input().split()))\n    if len(set(arr)) == 1:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n    f = (0,arr[0])\n    s = (0,0)\n    for i in range(am):\n        if arr[i] != f[1]:\n            s = (i, arr[i])\n    print(f[0]+1,s[0]+1)\n    for i in range(am):\n        if i != f[0] and i != s[0]:\n            if arr[i] == f[1]:\n                print(i+1,s[0]+1)\n            else:\n                print(i+1,f[0]+1)\n", "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return list(map(int,input().split()))\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\nfile = 1\n\n\n\n    \ndef solve():\n\n\n    \n\n    for _ in range(ii()):\n\n        n = ii()\n        a = li()\n        if len(set(a)) == 1:\n            print('NO')\n            continue\n        print('YES')\n        ans,p = [],[]\n        x = a[0]\n        y = -1\n        for i in range(1,n):\n            if a[i] != x:\n                y = i+1\n                ans.append([1,i+1])\n            else:\n                p.append(i+1)\n\n        for i in p:\n            ans.append([y,i])\n\n        for i in ans:\n            print(*i)\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \ndef __starting_point():\n\n    if(file):\n\n        if path.exists('input.txt'):\n            sys.stdin=open('input.txt', 'r')\n            sys.stdout=open('output.txt','w')\n        else:\n            input=sys.stdin.readline\n    solve()\n\n__starting_point()", "import sys\ninput=sys.stdin.readline\nT=int(input())\nfor _ in range(T):\n    n=int(input())\n    A=list(map(int,input().split()))\n    D={}\n    flag=0\n    for i in range(n):\n        if A[i] in D:\n            D[A[i]].append(i+1)\n\n        else:\n            D[A[i]]=[i+1]\n            flag=flag+1\n\n    if (flag==1):\n        print(\"NO\")\n\n    else:\n        print(\"YES\")\n\n        v=A[0]\n        v1=0\n        for i in range(n):\n            if (i+1 not in D[v]):\n                print(D[v][0],i+1)\n                v1=i+1\n\n        l=len(D[v])\n        for i in range(1,l):\n            print(v1,D[v][i])\n", "\"\"\"\n                            pppppppppppppppppppp\n                         ppppp  ppppppppppppppppppp\n                      ppppppp    ppppppppppppppppppppp\n                      pppppppp  pppppppppppppppppppppp\n                      pppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppppp\n       ppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppp\n      pppppppppppppppppppppppppppppppppppppppppppppppp  ppppppppppppppppppppp\n     ppppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppppp\n    ppppppppppppppppppppppppppppppppppppppppppppppp    pppppppppppppppppppppppp\n   pppppppppppppppppppppppppppppppppppppppppppppp     pppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppppppppppppppppppppp      pppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppppppp               pppppppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppp     pppppppppppppppppppppppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppp    pppppppppppppppppppppppppppppppppppppppppppppppp\n    pppppppppppppppppppppppp  pppppppppppppppppppppppppppppppppppppppppppppppppp\n     ppppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppppp\n      pppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppp\n       ppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppppp\n                              pppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppp  pppppppp\n                              ppppppppppppppppppppp    ppppppp\n                                 ppppppppppppppppppp  ppppp\n                                    pppppppppppppppppppp\n\"\"\"\n\n\nimport sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nfrom decimal import Decimal\nfrom copy import deepcopy\n# sys.setrecursionlimit(pow(10, 6))\n# sys.stdin = open(\"input.txt\", \"r\")\n# sys.stdout = open(\"output.txt\", \"w\")\n# mod = 10 ** 9 + 7\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(var, end=\"\\n\"): sys.stdout.write(str(var)+end)\ndef outa(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var)) + end)\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return list(map(int, data().split()))\ndef ssp(): return list(map(str, data().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n\nfor _ in range(int(data())):\n    n = int(data())\n    arr = l()\n    if len(set(arr)) == 1:\n        out(\"NO\")\n        continue\n    out(\"YES\")\n    no, L = -1, []\n    for i in range(1, n):\n        if arr[i] == arr[0]:\n            L.append(i + 1)\n        else:\n            no = i + 1\n            outa(1, i + 1)\n    for i in L:\n        outa(no, i)\n"]