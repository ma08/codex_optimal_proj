["\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    flag = False\n    for i in range(n):\n        if a[i] >= 2:\n            flag = True\n            a[i] += 2\n            break\n\n    if flag:\n        for i in range(n):\n            if a[i] > 0:\n                a[i] -= 1\n    else:\n        print(\"NO\")\n        continue\n\n    while True:\n        if all(x <= 0 for x in a):\n            print(\"YES\")\n            break\n\n        flag = False\n        for i in range(n):\n            if a[i] >= 2:\n                flag = True\n                a[i] += 2\n                break\n\n        if flag:\n            for i in range(n):\n                if a[i] > 0:\n                    a[i] -= 1\n        else:\n            print(\"NO\")\n            break", "\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    if A.count(1) % 2 == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n\"\"\"\n# Alternate solution\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # If the number of 1's is odd, then we can never clear the field\n    if A.count(1) % 2 == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\"\"\"", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = \"YES\"\n        if sum(a) % 2 == 1:\n            ans = \"NO\"\n        else:\n            for i in range(n):\n                if a[i] % 2 == 1:\n                    ans = \"NO\"\n                    break\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a) % 2 == 0 and min(a) >= 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(a))\n\n\ndef solve(a):\n    a = sorted(a, reverse=True)\n    while a[0] > 0:\n        a[0] -= 1\n        if len(a) > 1:\n            a[1] -= 1\n        a = sorted(a, reverse=True)\n        if a[0] == 0:\n            break\n        a[0] += 2\n        a = sorted(a, reverse=True)\n    if a[0] == 0:\n        return \"YES\"\n    return \"NO\"\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a) % 2 == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")", "\n\ndef solve():\n    pass\n\n\"\"\"\n-----Solution-----\n\nLet's first show that if there is a solution, then the sum of the initial heights of the columns is even.\n\nLet's prove this by induction on the number of steps of the process.\n\nBase: if the sum of the initial heights of the columns is odd, then the sum of the current heights of the columns is also odd. Since the sum of the heights of the columns decreases by $1$ at each step of the process, it is impossible to clear the whole field if the sum of the initial heights of the columns is odd.\n\nInduction step: let's assume that this statement is true for $k$ steps of the process. If the sum of the initial heights of the columns is odd, then the sum of the current heights of the columns is also odd. Since the sum of the heights of the columns decreases by $1$ at each step of the process, it is impossible to clear the whole field if the sum of the initial heights of the columns is odd.\n\nIt is easy to see that the sum of the heights of the columns decreases by $2$ at each step of the process when the figure $2 \\times 1$ is placed.\n\nSo, if the sum of the initial heights of the columns is even, then the sum of the heights of the columns decreases by $2$ at each step of the process.\n\nLet's consider the following algorithm:\n\nWhile there is a column with an even height, place the figure $2 \\times 1$ in this column.\n\nIf the sum of the initial heights of the columns is even, then after performing this algorithm, the sum of the heights of the columns will be equal to the sum of the initial heights of the columns minus $2$ times the number of steps of the process.\n\nIt is easy to see that this algorithm is correct.\n\nNow we can answer the question.\n\nIf the sum of the initial heights of the columns is even, then we can clear the whole field.\n\nIf the sum of the initial heights of the columns is odd, then we cannot clear the whole field.\n\"\"\""]