["\n\nn, x, y = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if a[i] <= x:\n        cnt += 1\n    else:\n        break\n\nprint(cnt)", "\n\ndef main():\n    n, x, y = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    a.sort()\n    c = 1\n    if x > y:\n        c = x // y\n        x = x % y\n    if x == y:\n        print(n)\n    else:\n        i = 0\n        while i < n and x < a[i]:\n            i += 1\n        print(n - i * c)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = a.copy()\n    for i in range(n):\n        a[i] -= x * i\n        b[i] -= x * (n - i - 1)\n    c = []\n    for i in range(n):\n        if a[i] <= 0:\n            c.append(i)\n    if len(c) == n:\n        print(n)\n        return\n    d = []\n    for i in range(n):\n        if b[i] <= 0:\n            d.append(i)\n    if len(d) == n:\n        print(0)\n        return\n    c.sort(key=lambda x: a[x])\n    d.sort(key=lambda x: b[x])\n    count = 0\n    for i in range(n):\n        if a[c[i]] <= 0:\n            count += 1\n        else:\n            break\n    for i in range(n):\n        if b[d[i]] <= 0:\n            count += 1\n        else:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    doors = list(map(int, input().split()))\n    doors.sort()\n    #print(doors)\n    cnt = 0\n    for door in doors:\n        if door <= x:\n            cnt += 1\n        else:\n            break\n    #print(cnt)\n    if x > y:\n        cnt += (n - cnt) // 2\n    else:\n        cnt += (n - cnt) // 3\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sum([1 if a[i] <= x else 0 for i in range(n)]))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"]