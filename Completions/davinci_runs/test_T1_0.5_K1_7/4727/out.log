2022-04-13 22:53:29.090274 """
2048 is a single-player puzzle game created by Gabriele Cirulli1. It is played on a $4 \times 4$ grid that contains integers $\geq 2$ that are powers of 2. The player can use a keyboard arrow key (left/up/right/down) to move all the tiles simultaneously. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move. Please observe this merging behavior carefully in all Sample Inputs and Outputs.

-----Input-----
The input is always a valid game state of a 2048 puzzle. The first four lines of input, that each contains four integers, describe the 16 integers in the $4 \times 4$ grid of 2048 puzzle. The $j$-th integer in the $i$-th line denotes the content of the cell located at the $i$-th row and the $j$-th cell. For this problem, all integers in the input will be either {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}. Integer 0 means an empty cell.

The fifth line of input contains an integer 0, 1, 2, or 3 that denotes a left, up, right, or down move executed by the player, respectively.

-----Output-----
Output four lines with four integers each. Two integers in a line must be separated by a single space. This describes the new state of the $4 \times 4$ grid of 2048 puzzle. Again, integer 0 means an empty cell. Note that in this problem, you can ignore the part from the 2048 puzzle where it introduces a new random tile with a value of either 2 or 4 in an empty spot of the board at the start of a new turn.

-----Examples-----
Sample Input 1:
2 0 0 2
4 16 8 2
2 64 32 4
1024 1024 64 0
0
Sample Output 1:
4 0 0 0
4 16 8 2
2 64 32 4
2048 64 0 0

Sample Input 2:
2 0 0 2
4 16 8 2
2 64 32 4
1024 1024 64 0
1
Sample Output 2:
2 16 8 4
4 64 32 4
2 1024 64 0
1024 0 0 0

Sample Input 3:
2 0 0 2
4 16 8 2
2 64 32 4
1024 1024 64 0
2
Sample Output 3:
0 0 0 4
4 16 8 2
2 64 32 4
0 0 2048 64

Sample Input 4:
2 0 0 2
4 16 8 2
2 64 32 4
1024 1024 64 0
3
Sample Output 4:
2 0 0 0
4 16 8 0
2 64 32 4
1024 1024 64 4

Sample Input 5:
2 2 4 8
4 0 4 4
16 16 16 16
32 16 16 32
0
Sample Output 5:
4 4 8 0
8 4 0 0
32 32 0 0
32 32 32 0
"""
2022-04-13 22:53:29.090281 --------------------------
2022-04-13 22:54:21.542541 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n# n = [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\n#\n# print(n[0][0])\n# print(n[0][3])\n\n\ndef move(n, dir):\n    # n = [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\n    # dir = 0\n    # dir = 1\n    # dir = 2\n    # dir = 3\n\n    if dir == 0:\n        for i in range(4):\n            for j in range(4):\n                if n[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if n[i][k] != 0:\n                            if n[i][j] == n[i][k]:\n                                n[i][j] *= 2\n                                n[i][k] = 0\n                            break\n                        else:\n                            n[i][k], n[i][k - 1] = n[i][k - 1], n[i][k]\n\n    if dir == 1:\n        for i in range(4):\n            for j in range(4):\n                if n[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if n[k][i] != 0:\n                            if n[j][i] == n[k][i]:\n                                n[j][i] *= 2\n                                n[k][i] = 0\n                            break\n                        else:\n                            n[k][i], n[k - 1][i] = n[k - 1][i], n[k][i]\n\n    if dir == 2:\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if n[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if n[i][k] != 0:\n                            if n[i][j] == n[i][k]:\n                                n[i][j] *= 2\n                                n[i][k] = 0\n                            break\n                        else:\n                            n[i][k], n[i][k + 1] = n[i][k + 1], n[i][k]\n\n    if dir == 3:\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if n[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if n[k][i] != 0:\n                            if n[j][i] == n[k][i]:\n                                n[j][i] *= 2\n                                n[k][i] = 0\n                            break\n                        else:\n                            n[k][i], n[k + 1][i] = n[k + 1][i], n[k][i]\n\n    for i in range(4):\n        for j in range(4):\n            print(n[i][j], end=\" \")\n        print()\n\n\ndef main():\n    n = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    for i in range(4):\n        n[i] = list(map(int, input().split()))\n    dir = int(input())\n    move(n, dir)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    grid = [list(map(int, input().split())) for _ in range(4)]\n    direction = int(input())\n    if direction == 0:\n        # left\n        for r in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[r][j] == 0:\n                    j += 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i += 1\n                    j += 1\n        for r in range(4):\n            i = 0\n            while i < 3:\n                if grid[r][i] == grid[r][i + 1]:\n                    grid[r][i] *= 2\n                    grid[r][i + 1] = 0\n                    i += 2\n                else:\n                    i += 1\n        for r in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[r][j] == 0:\n                    j += 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i += 1\n                    j += 1\n    elif direction == 1:\n        # up\n        for c in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[j][c] == 0:\n                    j += 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i += 1\n                    j += 1\n        for c in range(4):\n            i = 0\n            while i < 3:\n                if grid[i][c] == grid[i + 1][c]:\n                    grid[i][c] *= 2\n                    grid[i + 1][c] = 0\n                    i += 2\n                else:\n                    i += 1\n        for c in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[j][c] == 0:\n                    j += 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i += 1\n                    j += 1\n    elif direction == 2:\n        # right\n        for r in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[r][j] == 0:\n                    j -= 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i -= 1\n                    j -= 1\n        for r in range(4):\n            i = 3\n            while i > 0:\n                if grid[r][i] == grid[r][i - 1]:\n                    grid[r][i] *= 2\n                    grid[r][i - 1] = 0\n                    i -= 2\n                else:\n                    i -= 1\n        for r in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[r][j] == 0:\n                    j -= 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i -= 1\n                    j -= 1\n    elif direction == 3:\n        # down\n        for c in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[j][c] == 0:\n                    j -= 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i -= 1\n                    j -= 1\n        for c in range(4):\n            i = 3\n            while i > 0:\n                if grid[i][c] == grid[i - 1][c]:\n                    grid[i][c] *= 2\n                    grid[i - 1][c] = 0\n                    i -= 2\n                else:\n                    i -= 1\n        for c in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[j][c] == 0:\n                    j -= 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i -= 1\n                    j -= 1\n    for row in grid:\n        print(*row)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    grid = [list(map(int, sys.stdin.readline().split())) for _ in range(4)]\n    direction = int(sys.stdin.readline())\n\n    grid = move(grid, direction)\n    print_grid(grid)\n\ndef move(grid, direction):\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    return grid\n\ndef move_left(grid):\n    for i in range(4):\n        grid[i] = merge_left(grid[i])\n    return grid\n\ndef move_up(grid):\n    grid = transpose(grid)\n    grid = move_left(grid)\n    grid = transpose(grid)\n    return grid\n\ndef move_right(grid):\n    grid = reverse_rows(grid)\n    grid = move_left(grid)\n    grid = reverse_rows(grid)\n    return grid\n\ndef move_down(grid):\n    grid = transpose(grid)\n    grid = move_right(grid)\n    grid = transpose(grid)\n    return grid\n\ndef merge_left(row):\n    new_row = [0 for _ in range(4)]\n    j = 0\n    i = 0\n    while i < 4:\n        if row[i] == 0:\n            i += 1\n            continue\n        if new_row[j] == 0:\n            new_row[j] = row[i]\n            i += 1\n        elif new_row[j] == row[i]:\n            new_row[j] += row[i]\n            j += 1\n            i += 1\n        else:\n            j += 1\n            new_row[j] = row[i]\n            i += 1\n    return new_row\n\ndef transpose(grid):\n    return [list(x) for x in zip(*grid)]\n\ndef reverse_rows(grid):\n    return [row[::-1] for row in grid]\n\ndef print_grid(grid):\n    for row in grid:\n        print(\" \".join(map(str, row)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\nimport copy\n\nclass GameState:\n    def __init__(self, board, move):\n        self.board = board\n        self.move = move\n\n    def slide_left(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(4):\n                if new_board[i][j] == 0:\n                    for k in range(j + 1, 4):\n                        if new_board[i][k] != 0:\n                            new_board[i][j] = new_board[i][k]\n                            new_board[i][k] = 0\n                            break\n        for i in range(4):\n            for j in range(4):\n                if new_board[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if new_board[i][k] == new_board[i][j]:\n                            new_board[i][j] *= 2\n                            new_board[i][k] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def slide_right(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[i][j] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[i][k] != 0:\n                            new_board[i][j] = new_board[i][k]\n                            new_board[i][k] = 0\n                            break\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[i][k] == new_board[i][j]:\n                            new_board[i][j] *= 2\n                            new_board[i][k] = 0\n                            break\n        return GameState(new_board, self.move)\n        \n    def slide_up(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(4):\n                if new_board[j][i] == 0:\n                    for k in range(j + 1, 4):\n                        if new_board[k][i] != 0:\n                            new_board[j][i] = new_board[k][i]\n                            new_board[k][i] = 0\n                            break\n        for i in range(4):\n            for j in range(4):\n                if new_board[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if new_board[k][i] == new_board[j][i]:\n                            new_board[j][i] *= 2\n                            new_board[k][i] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def slide_down(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[j][i] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[k][i] != 0:\n                            new_board[j][i] = new_board[k][i]\n                            new_board[k][i] = 0\n                            break\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[k][i] == new_board[j][i]:\n                            new_board[j][i] *= 2\n                            new_board[k][i] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def next(self):\n        if self.move == 0:\n            return self.slide_left()\n        elif self.move == 1:\n            return self.slide_up()\n        elif self.move == 2:\n            return self.slide_right()\n        elif self.move == 3:\n            return self.slide_down()\n        else:\n            raise Exception('invalid move')\n\n    def __str__(self):\n        return '\\n'.join([' '.join([str(x) for x in row]) for row in self.board])\n\n\ndef main():\n    board = []\n    for _ in range(4):\n        board.append([int(x) for x in input().split()])\n    move = int(input())\n    game_state = GameState(board, move)\n    print(game_state.next())\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        grid = left(grid)\n    elif direction == 1:\n        grid = up(grid)\n    elif direction == 2:\n        grid = right(grid)\n    else:\n        grid = down(grid)\n    for row in grid:\n        print(*row)\n\ndef left(grid):\n    for i in range(4):\n        grid[i] = left_row(grid[i])\n    return grid\n\ndef left_row(row):\n    new_row = [0, 0, 0, 0]\n    i = 0\n    for j in range(4):\n        if row[j] != 0:\n            if new_row[i] == row[j]:\n                new_row[i] *= 2\n                i += 1\n            else:\n                if new_row[i] != 0:\n                    i += 1\n                new_row[i] = row[j]\n    return new_row\n\ndef up(grid):\n    grid = transpose_grid(grid)\n    grid = left(grid)\n    grid = transpose_grid(grid)\n    return grid\n\ndef right(grid):\n    grid = reverse_rows(grid)\n    grid = left(grid)\n    grid = reverse_rows(grid)\n    return grid\n\ndef down(grid):\n    grid = transpose_grid(grid)\n    grid = right(grid)\n    grid = transpose_grid(grid)\n    return grid\n\ndef transpose_grid(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[j][i] for j in range(4)])\n    return new_grid\n\ndef reverse_rows(grid):\n    new_grid = []\n    for row in grid:\n        new_grid.append(row[::-1])\n    return new_grid\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef move(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_grid.append(new_row)\n    for i in range(4):\n        for j in range(4):\n            if new_grid[i][j] == 0:\n                for k in range(i+1,4):\n                    if new_grid[k][j] != 0:\n                        new_grid[i][j] = new_grid[k][j]\n                        new_grid[k][j] = 0\n                        break\n    return new_grid\n\ndef merge(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_grid.append(new_row)\n    for i in range(4):\n        for j in range(3):\n            if new_grid[i][j] == new_grid[i][j+1] and new_grid[i][j] != 0:\n                new_grid[i][j] = new_grid[i][j]*2\n                new_grid[i][j+1] = 0\n    return new_grid\n\ndef move_left(grid):\n    new_grid = move(grid)\n    new_grid = merge(new_grid)\n    new_grid = move(new_grid)\n    return new_grid\n\ndef move_up(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[0][i],grid[1][i],grid[2][i],grid[3][i]])\n    new_grid = move_left(new_grid)\n    for i in range(4):\n        grid[0][i] = new_grid[0][i]\n        grid[1][i] = new_grid[1][i]\n        grid[2][i] = new_grid[2][i]\n        grid[3][i] = new_grid[3][i]\n    return grid\n\ndef move_right(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_row.reverse()\n        new_grid.append(new_row)\n    new_grid = move_left(new_grid)\n    for i in range(4):\n        new_grid[i].reverse()\n    for i in range(4):\n        grid[i] = new_grid[i]\n    return grid\n\ndef move_down(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[0][i],grid[1][i],grid[2][i],grid[3][i]])\n    new_grid = move_right(new_grid)\n    for i in range(4):\n        grid[0][i] = new_grid[0][i]\n        grid[1][i] = new_grid[1][i]\n        grid[2][i] = new_grid[2][i]\n        grid[3][i] = new_grid[3][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    move = int(input())\n    if move == 0:\n        grid = move_left(grid)\n    elif move == 1:\n        grid = move_up(grid)\n    elif move == 2:\n        grid = move_right(grid)\n    elif move == 3:\n        grid = move_down(grid)\n    for row in grid:\n        for col in row:\n            print(col, end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# main method\nif __name__ == \"__main__\":\n    # input\n    a = [list(map(int, input().split())) for i in range(4)]\n    b = int(input())\n    # define a dictionary to store the direction\n    d = {0: [0, 1, 2, 3], 1: [0, 4, 8, 12], 2: [3, 2, 1, 0], 3: [12, 8, 4, 0]}\n    # define a dictionary to store the sign\n    s = {0: 1, 1: 1, 2: -1, 3: -1}\n    # define a dictionary to store the sign\n    r = {0: 0, 1: 1, 2: 2, 3: 3}\n    # define a dictionary to store the sign\n    c = {0: 0, 1: 0, 2: 3, 3: 3}\n    # define a dictionary to store the sign\n    m = {0: 3, 1: 3, 2: 0, 3: 0}\n    # define a dictionary to store the sign\n    t = {0: 3, 1: 2, 2: 1, 3: 0}\n\n    # move the row or column\n    for i in d[b]:\n        # move the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # move the row or column\n            for k in range(m[b], t[b], s[b]):\n                # move the row or column\n                if a[j][i + k * s[b]] == 0:\n                    a[j][i + k * s[b]] = a[j][i + (k - 1) * s[b]]\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # move the row or column\n                    if k != t[b]:\n                        k -= 2\n    # merge the row or column\n    for i in d[b]:\n        # merge the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # merge the row or column\n            for k in range(m[b], t[b], s[b]):\n                # merge the row or column\n                if a[j][i + k * s[b]] == a[j][i + (k - 1) * s[b]] and a[j][i + k * s[b]] != 0:\n                    a[j][i + k * s[b]] *= 2\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # merge the row or column\n                    if k != t[b]:\n                        k -= 2\n    # move the row or column\n    for i in d[b]:\n        # move the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # move the row or column\n            for k in range(m[b], t[b], s[b]):\n                # move the row or column\n                if a[j][i + k * s[b]] == 0:\n                    a[j][i + k * s[b]] = a[j][i + (k - 1) * s[b]]\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # move the row or column\n                    if k != t[b]:\n                        k -= 2\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(a[i][j], end=\" \")\n        print()"
    }
  ],
  "created": 1649890409,
  "id": "cmpl-4wg9Z0cUvBLjsXZlY4WTxDKIsOZ9h",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:54:21.542990 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n# n = [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\n#\n# print(n[0][0])\n# print(n[0][3])\n\n\ndef move(n, dir):\n    # n = [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\n    # dir = 0\n    # dir = 1\n    # dir = 2\n    # dir = 3\n\n    if dir == 0:\n        for i in range(4):\n            for j in range(4):\n                if n[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if n[i][k] != 0:\n                            if n[i][j] == n[i][k]:\n                                n[i][j] *= 2\n                                n[i][k] = 0\n                            break\n                        else:\n                            n[i][k], n[i][k - 1] = n[i][k - 1], n[i][k]\n\n    if dir == 1:\n        for i in range(4):\n            for j in range(4):\n                if n[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if n[k][i] != 0:\n                            if n[j][i] == n[k][i]:\n                                n[j][i] *= 2\n                                n[k][i] = 0\n                            break\n                        else:\n                            n[k][i], n[k - 1][i] = n[k - 1][i], n[k][i]\n\n    if dir == 2:\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if n[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if n[i][k] != 0:\n                            if n[i][j] == n[i][k]:\n                                n[i][j] *= 2\n                                n[i][k] = 0\n                            break\n                        else:\n                            n[i][k], n[i][k + 1] = n[i][k + 1], n[i][k]\n\n    if dir == 3:\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if n[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if n[k][i] != 0:\n                            if n[j][i] == n[k][i]:\n                                n[j][i] *= 2\n                                n[k][i] = 0\n                            break\n                        else:\n                            n[k][i], n[k + 1][i] = n[k + 1][i], n[k][i]\n\n    for i in range(4):\n        for j in range(4):\n            print(n[i][j], end=\" \")\n        print()\n\n\ndef main():\n    n = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    for i in range(4):\n        n[i] = list(map(int, input().split()))\n    dir = int(input())\n    move(n, dir)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.543048 REASON stop
2022-04-13 22:54:21.543359 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.543374 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    grid = [list(map(int, input().split())) for _ in range(4)]\n    direction = int(input())\n    if direction == 0:\n        # left\n        for r in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[r][j] == 0:\n                    j += 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i += 1\n                    j += 1\n        for r in range(4):\n            i = 0\n            while i < 3:\n                if grid[r][i] == grid[r][i + 1]:\n                    grid[r][i] *= 2\n                    grid[r][i + 1] = 0\n                    i += 2\n                else:\n                    i += 1\n        for r in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[r][j] == 0:\n                    j += 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i += 1\n                    j += 1\n    elif direction == 1:\n        # up\n        for c in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[j][c] == 0:\n                    j += 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i += 1\n                    j += 1\n        for c in range(4):\n            i = 0\n            while i < 3:\n                if grid[i][c] == grid[i + 1][c]:\n                    grid[i][c] *= 2\n                    grid[i + 1][c] = 0\n                    i += 2\n                else:\n                    i += 1\n        for c in range(4):\n            i, j = 0, 0\n            while j < 4:\n                if grid[j][c] == 0:\n                    j += 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i += 1\n                    j += 1\n    elif direction == 2:\n        # right\n        for r in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[r][j] == 0:\n                    j -= 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i -= 1\n                    j -= 1\n        for r in range(4):\n            i = 3\n            while i > 0:\n                if grid[r][i] == grid[r][i - 1]:\n                    grid[r][i] *= 2\n                    grid[r][i - 1] = 0\n                    i -= 2\n                else:\n                    i -= 1\n        for r in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[r][j] == 0:\n                    j -= 1\n                else:\n                    grid[r][i] = grid[r][j]\n                    if i != j:\n                        grid[r][j] = 0\n                    i -= 1\n                    j -= 1\n    elif direction == 3:\n        # down\n        for c in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[j][c] == 0:\n                    j -= 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i -= 1\n                    j -= 1\n        for c in range(4):\n            i = 3\n            while i > 0:\n                if grid[i][c] == grid[i - 1][c]:\n                    grid[i][c] *= 2\n                    grid[i - 1][c] = 0\n                    i -= 2\n                else:\n                    i -= 1\n        for c in range(4):\n            i, j = 3, 3\n            while j >= 0:\n                if grid[j][c] == 0:\n                    j -= 1\n                else:\n                    grid[i][c] = grid[j][c]\n                    if i != j:\n                        grid[j][c] = 0\n                    i -= 1\n                    j -= 1\n    for row in grid:\n        print(*row)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.543493 REASON stop
2022-04-13 22:54:21.543742 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.543755 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    grid = [list(map(int, sys.stdin.readline().split())) for _ in range(4)]\n    direction = int(sys.stdin.readline())\n\n    grid = move(grid, direction)\n    print_grid(grid)\n\ndef move(grid, direction):\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    return grid\n\ndef move_left(grid):\n    for i in range(4):\n        grid[i] = merge_left(grid[i])\n    return grid\n\ndef move_up(grid):\n    grid = transpose(grid)\n    grid = move_left(grid)\n    grid = transpose(grid)\n    return grid\n\ndef move_right(grid):\n    grid = reverse_rows(grid)\n    grid = move_left(grid)\n    grid = reverse_rows(grid)\n    return grid\n\ndef move_down(grid):\n    grid = transpose(grid)\n    grid = move_right(grid)\n    grid = transpose(grid)\n    return grid\n\ndef merge_left(row):\n    new_row = [0 for _ in range(4)]\n    j = 0\n    i = 0\n    while i < 4:\n        if row[i] == 0:\n            i += 1\n            continue\n        if new_row[j] == 0:\n            new_row[j] = row[i]\n            i += 1\n        elif new_row[j] == row[i]:\n            new_row[j] += row[i]\n            j += 1\n            i += 1\n        else:\n            j += 1\n            new_row[j] = row[i]\n            i += 1\n    return new_row\n\ndef transpose(grid):\n    return [list(x) for x in zip(*grid)]\n\ndef reverse_rows(grid):\n    return [row[::-1] for row in grid]\n\ndef print_grid(grid):\n    for row in grid:\n        print(\" \".join(map(str, row)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.543821 REASON stop
2022-04-13 22:54:21.553410 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.553443 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\nimport copy\n\nclass GameState:\n    def __init__(self, board, move):\n        self.board = board\n        self.move = move\n\n    def slide_left(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(4):\n                if new_board[i][j] == 0:\n                    for k in range(j + 1, 4):\n                        if new_board[i][k] != 0:\n                            new_board[i][j] = new_board[i][k]\n                            new_board[i][k] = 0\n                            break\n        for i in range(4):\n            for j in range(4):\n                if new_board[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if new_board[i][k] == new_board[i][j]:\n                            new_board[i][j] *= 2\n                            new_board[i][k] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def slide_right(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[i][j] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[i][k] != 0:\n                            new_board[i][j] = new_board[i][k]\n                            new_board[i][k] = 0\n                            break\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[i][k] == new_board[i][j]:\n                            new_board[i][j] *= 2\n                            new_board[i][k] = 0\n                            break\n        return GameState(new_board, self.move)\n        \n    def slide_up(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(4):\n                if new_board[j][i] == 0:\n                    for k in range(j + 1, 4):\n                        if new_board[k][i] != 0:\n                            new_board[j][i] = new_board[k][i]\n                            new_board[k][i] = 0\n                            break\n        for i in range(4):\n            for j in range(4):\n                if new_board[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if new_board[k][i] == new_board[j][i]:\n                            new_board[j][i] *= 2\n                            new_board[k][i] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def slide_down(self):\n        new_board = copy.deepcopy(self.board)\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[j][i] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[k][i] != 0:\n                            new_board[j][i] = new_board[k][i]\n                            new_board[k][i] = 0\n                            break\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if new_board[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if new_board[k][i] == new_board[j][i]:\n                            new_board[j][i] *= 2\n                            new_board[k][i] = 0\n                            break\n        return GameState(new_board, self.move)\n\n    def next(self):\n        if self.move == 0:\n            return self.slide_left()\n        elif self.move == 1:\n            return self.slide_up()\n        elif self.move == 2:\n            return self.slide_right()\n        elif self.move == 3:\n            return self.slide_down()\n        else:\n            raise Exception('invalid move')\n\n    def __str__(self):\n        return '\\n'.join([' '.join([str(x) for x in row]) for row in self.board])\n\n\ndef main():\n    board = []\n    for _ in range(4):\n        board.append([int(x) for x in input().split()])\n    move = int(input())\n    game_state = GameState(board, move)\n    print(game_state.next())\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.553526 REASON stop
2022-04-13 22:54:21.568965 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.568999 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        grid = left(grid)\n    elif direction == 1:\n        grid = up(grid)\n    elif direction == 2:\n        grid = right(grid)\n    else:\n        grid = down(grid)\n    for row in grid:\n        print(*row)\n\ndef left(grid):\n    for i in range(4):\n        grid[i] = left_row(grid[i])\n    return grid\n\ndef left_row(row):\n    new_row = [0, 0, 0, 0]\n    i = 0\n    for j in range(4):\n        if row[j] != 0:\n            if new_row[i] == row[j]:\n                new_row[i] *= 2\n                i += 1\n            else:\n                if new_row[i] != 0:\n                    i += 1\n                new_row[i] = row[j]\n    return new_row\n\ndef up(grid):\n    grid = transpose_grid(grid)\n    grid = left(grid)\n    grid = transpose_grid(grid)\n    return grid\n\ndef right(grid):\n    grid = reverse_rows(grid)\n    grid = left(grid)\n    grid = reverse_rows(grid)\n    return grid\n\ndef down(grid):\n    grid = transpose_grid(grid)\n    grid = right(grid)\n    grid = transpose_grid(grid)\n    return grid\n\ndef transpose_grid(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[j][i] for j in range(4)])\n    return new_grid\n\ndef reverse_rows(grid):\n    new_grid = []\n    for row in grid:\n        new_grid.append(row[::-1])\n    return new_grid\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.569087 REASON stop
2022-04-13 22:54:21.569725 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.569744 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef move(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_grid.append(new_row)\n    for i in range(4):\n        for j in range(4):\n            if new_grid[i][j] == 0:\n                for k in range(i+1,4):\n                    if new_grid[k][j] != 0:\n                        new_grid[i][j] = new_grid[k][j]\n                        new_grid[k][j] = 0\n                        break\n    return new_grid\n\ndef merge(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_grid.append(new_row)\n    for i in range(4):\n        for j in range(3):\n            if new_grid[i][j] == new_grid[i][j+1] and new_grid[i][j] != 0:\n                new_grid[i][j] = new_grid[i][j]*2\n                new_grid[i][j+1] = 0\n    return new_grid\n\ndef move_left(grid):\n    new_grid = move(grid)\n    new_grid = merge(new_grid)\n    new_grid = move(new_grid)\n    return new_grid\n\ndef move_up(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[0][i],grid[1][i],grid[2][i],grid[3][i]])\n    new_grid = move_left(new_grid)\n    for i in range(4):\n        grid[0][i] = new_grid[0][i]\n        grid[1][i] = new_grid[1][i]\n        grid[2][i] = new_grid[2][i]\n        grid[3][i] = new_grid[3][i]\n    return grid\n\ndef move_right(grid):\n    new_grid = []\n    for row in grid:\n        new_row = []\n        for col in row:\n            new_row.append(col)\n        new_row.reverse()\n        new_grid.append(new_row)\n    new_grid = move_left(new_grid)\n    for i in range(4):\n        new_grid[i].reverse()\n    for i in range(4):\n        grid[i] = new_grid[i]\n    return grid\n\ndef move_down(grid):\n    new_grid = []\n    for i in range(4):\n        new_grid.append([grid[0][i],grid[1][i],grid[2][i],grid[3][i]])\n    new_grid = move_right(new_grid)\n    for i in range(4):\n        grid[0][i] = new_grid[0][i]\n        grid[1][i] = new_grid[1][i]\n        grid[2][i] = new_grid[2][i]\n        grid[3][i] = new_grid[3][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    move = int(input())\n    if move == 0:\n        grid = move_left(grid)\n    elif move == 1:\n        grid = move_up(grid)\n    elif move == 2:\n        grid = move_right(grid)\n    elif move == 3:\n        grid = move_down(grid)\n    for row in grid:\n        for col in row:\n            print(col, end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:54:21.569834 REASON stop
2022-04-13 22:54:21.585592 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
2022-04-13 22:54:21.585624 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# main method\nif __name__ == \"__main__\":\n    # input\n    a = [list(map(int, input().split())) for i in range(4)]\n    b = int(input())\n    # define a dictionary to store the direction\n    d = {0: [0, 1, 2, 3], 1: [0, 4, 8, 12], 2: [3, 2, 1, 0], 3: [12, 8, 4, 0]}\n    # define a dictionary to store the sign\n    s = {0: 1, 1: 1, 2: -1, 3: -1}\n    # define a dictionary to store the sign\n    r = {0: 0, 1: 1, 2: 2, 3: 3}\n    # define a dictionary to store the sign\n    c = {0: 0, 1: 0, 2: 3, 3: 3}\n    # define a dictionary to store the sign\n    m = {0: 3, 1: 3, 2: 0, 3: 0}\n    # define a dictionary to store the sign\n    t = {0: 3, 1: 2, 2: 1, 3: 0}\n\n    # move the row or column\n    for i in d[b]:\n        # move the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # move the row or column\n            for k in range(m[b], t[b], s[b]):\n                # move the row or column\n                if a[j][i + k * s[b]] == 0:\n                    a[j][i + k * s[b]] = a[j][i + (k - 1) * s[b]]\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # move the row or column\n                    if k != t[b]:\n                        k -= 2\n    # merge the row or column\n    for i in d[b]:\n        # merge the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # merge the row or column\n            for k in range(m[b], t[b], s[b]):\n                # merge the row or column\n                if a[j][i + k * s[b]] == a[j][i + (k - 1) * s[b]] and a[j][i + k * s[b]] != 0:\n                    a[j][i + k * s[b]] *= 2\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # merge the row or column\n                    if k != t[b]:\n                        k -= 2\n    # move the row or column\n    for i in d[b]:\n        # move the row or column\n        for j in range(r[b], c[b] + 1, s[b]):\n            # move the row or column\n            for k in range(m[b], t[b], s[b]):\n                # move the row or column\n                if a[j][i + k * s[b]] == 0:\n                    a[j][i + k * s[b]] = a[j][i + (k - 1) * s[b]]\n                    a[j][i + (k - 1) * s[b]] = 0\n                    # move the row or column\n                    if k != t[b]:\n                        k -= 2\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(a[i][j], end=\" \")\n        print()"
}
2022-04-13 22:54:21.585708 REASON stop
2022-04-13 22:54:21.586605 test/intro-questions.txt_dir/4727/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4727/solutions.json'
