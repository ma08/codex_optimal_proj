2022-04-13 17:12:02.238325 """
You are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.

Your task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.

The simple path is the path that visits each vertex at most once.


-----Input-----

The first line contains one integer number $n$ ($3 \le n \le 2 \cdot 10^5$) — the number of vertices in the tree. 

Next $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \le a_i$, $b_i \le n$, $a_i \ne b_i$). It is guaranteed that given graph is a tree.


-----Output-----

In the first line print one integer $res$ — the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.

In the second line print three integers $a, b, c$ such that $1 \le a, b, c \le n$ and $a \ne, b \ne c, a \ne c$.

If there are several answers, you can print any.


-----Example-----
Input
8
1 2
2 3
3 4
4 5
4 6
3 7
3 8

Output
5
1 8 6



-----Note-----

The picture corresponding to the first example (and another one correct answer):

[Image]

If you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.
"""
2022-04-13 17:12:02.238345 --------------------------
2022-04-13 17:14:02.105413 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport math\nimport bisect\nimport numpy as np\n\ndef main():\n\tpass\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef dfs(v, p, g, dp):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v, g, dp)\n            dp[v] += dp[u]\n\ndef dfs2(v, p, g, dp, ans):\n    for u in g[v]:\n        if u != p:\n            dp[u] = dp[v] + (len(g) - 1) - 2 * dp[u]\n            dfs2(u, v, g, dp, ans)\n    ans[0] = max(ans[0], dp[v])\n\ndef solve(g):\n    dp = [1] * len(g)\n    ans = [0]\n    dfs(0, -1, g, dp)\n    dfs2(0, -1, g, dp, ans)\n    return ans[0]\n\ndef main():\n    n = int(input())\n    g = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    print(solve(g))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    # The solution is to find the longest path in the tree.\n    # Then the two farthest vertices from the path will be the answer.\n    # This is because the path between the two farthest vertices will be the longest path.\n    # Thus, the path between the two farthest vertices and the path between the path and the farthest vertex\n    # will be the longest path in the tree.\n\n    # By using BFS, we can find the longest path in the tree.\n    # We can find the farthest vertex from the starting vertex by using BFS.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    #"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport math\nimport bisect\n\n# freopen equivalent\nabs_dir = os.path.dirname(os.path.abspath(__file__))\nsys.stdin = open(os.path.join(abs_dir, \"input.txt\"), \"r\")\n\n\nclass Node:\n    def __init__(self, idx):\n        self.idx = idx\n        self.children = []\n\n    def add_child(self, child):\n        self.children.append(child)\n\n\nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.nodes = [Node(i) for i in range(n)]\n\n    def add_edge(self, a, b):\n        self.nodes[a - 1].add_child(self.nodes[b - 1])\n        self.nodes[b - 1].add_child(self.nodes[a - 1])\n\n    def __str__(self):\n        s = \"\"\n        for node in self.nodes:\n            s += \"{}: {}\\n\".format(node.idx, node.children)\n        return s\n\n\ndef get_edge_counts(tree):\n    # return an array of tuples: (node, # of edges from root to node)\n    # for each node in the tree\n    edge_counts = [0] * tree.n\n    stack = [tree.nodes[0]]\n    while stack:\n        node = stack.pop()\n        for child in node.children:\n            if edge_counts[child.idx] == 0:\n                edge_counts[child.idx] = edge_counts[node.idx] + 1\n                stack.append(child)\n    return edge_counts\n\n\ndef get_max_edge_count(tree, edge_counts):\n    # return a tuple of three nodes with max edge count\n    # between any two nodes\n    max_edge_count = 0\n    a, b, c = None, None, None\n    for i in range(tree.n - 1):\n        for j in range(i + 1, tree.n):\n            for k in range(j + 1, tree.n):\n                # for each triple of nodes\n                edge_count = edge_counts[i] + edge_counts[j] + edge_counts[k]\n                if edge_count > max_edge_count:\n                    max_edge_count = edge_count\n                    a, b, c = i, j, k\n    return max_edge_count, a, b, c\n\n\ndef main():\n    n = int(input())\n    tree = Tree(n)\n    for i in range(n - 1):\n        a, b = [int(x) for x in input().split()]\n        tree.add_edge(a, b)\n\n    edge_counts = get_edge_counts(tree)\n    max_edge_count, a, b, c = get_max_edge_count(tree, edge_counts)\n\n    print(max_edge_count)\n    print(a + 1, b + 1, c + 1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in sys.stdin.readline().split()]\n        adj[a].append(b)\n        adj[b].append(a)\n\n    ans = 0\n    res = [0, 0, 0]\n    for a in range(1, n + 1):\n        for b in adj[a]:\n            if b < a:\n                continue\n            for c in adj[b]:\n                if c < b:\n                    continue\n                if a in adj[c]:\n                    tmp = len(set(adj[a]) & set(adj[b])) + len(set(adj[a]) & set(adj[c])) + len(set(adj[b]) & set(adj[c]))\n                    if tmp > ans:\n                        ans = tmp\n                        res = [a, b, c]\n    print(ans)\n    print(' '.join([str(x) for x in res]))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649869923,
  "id": "cmpl-4wap9kUmPF3EjTvL9IyA1qfavWPPO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 17:14:02.105947 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport math\nimport bisect\nimport numpy as np\n\ndef main():\n\tpass\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-13 17:14:02.106015 REASON stop
2022-04-13 17:14:02.106505 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef dfs(v, p, g, dp):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v, g, dp)\n            dp[v] += dp[u]\n\ndef dfs2(v, p, g, dp, ans):\n    for u in g[v]:\n        if u != p:\n            dp[u] = dp[v] + (len(g) - 1) - 2 * dp[u]\n            dfs2(u, v, g, dp, ans)\n    ans[0] = max(ans[0], dp[v])\n\ndef solve(g):\n    dp = [1] * len(g)\n    ans = [0]\n    dfs(0, -1, g, dp)\n    dfs2(0, -1, g, dp, ans)\n    return ans[0]\n\ndef main():\n    n = int(input())\n    g = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    print(solve(g))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 17:14:02.106666 REASON stop
2022-04-13 17:14:02.107249 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    # The solution is to find the longest path in the tree.\n    # Then the two farthest vertices from the path will be the answer.\n    # This is because the path between the two farthest vertices will be the longest path.\n    # Thus, the path between the two farthest vertices and the path between the path and the farthest vertex\n    # will be the longest path in the tree.\n\n    # By using BFS, we can find the longest path in the tree.\n    # We can find the farthest vertex from the starting vertex by using BFS.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    # Then we can find the farthest vertex from the farthest vertex by using BFS again.\n    # The length of the path between the two farthest vertices will be the longest path in the tree.\n\n    # To find the farthest vertex from the starting vertex, we can use BFS.\n    # By using BFS, we can find the farthest vertex from the starting vertex.\n    #"
}
2022-04-13 17:14:02.107458 REASON length
2022-04-13 17:14:02.107472 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:02.107529 REASON stop
2022-04-13 17:14:02.127772 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport math\nimport bisect\n\n# freopen equivalent\nabs_dir = os.path.dirname(os.path.abspath(__file__))\nsys.stdin = open(os.path.join(abs_dir, \"input.txt\"), \"r\")\n\n\nclass Node:\n    def __init__(self, idx):\n        self.idx = idx\n        self.children = []\n\n    def add_child(self, child):\n        self.children.append(child)\n\n\nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.nodes = [Node(i) for i in range(n)]\n\n    def add_edge(self, a, b):\n        self.nodes[a - 1].add_child(self.nodes[b - 1])\n        self.nodes[b - 1].add_child(self.nodes[a - 1])\n\n    def __str__(self):\n        s = \"\"\n        for node in self.nodes:\n            s += \"{}: {}\\n\".format(node.idx, node.children)\n        return s\n\n\ndef get_edge_counts(tree):\n    # return an array of tuples: (node, # of edges from root to node)\n    # for each node in the tree\n    edge_counts = [0] * tree.n\n    stack = [tree.nodes[0]]\n    while stack:\n        node = stack.pop()\n        for child in node.children:\n            if edge_counts[child.idx] == 0:\n                edge_counts[child.idx] = edge_counts[node.idx] + 1\n                stack.append(child)\n    return edge_counts\n\n\ndef get_max_edge_count(tree, edge_counts):\n    # return a tuple of three nodes with max edge count\n    # between any two nodes\n    max_edge_count = 0\n    a, b, c = None, None, None\n    for i in range(tree.n - 1):\n        for j in range(i + 1, tree.n):\n            for k in range(j + 1, tree.n):\n                # for each triple of nodes\n                edge_count = edge_counts[i] + edge_counts[j] + edge_counts[k]\n                if edge_count > max_edge_count:\n                    max_edge_count = edge_count\n                    a, b, c = i, j, k\n    return max_edge_count, a, b, c\n\n\ndef main():\n    n = int(input())\n    tree = Tree(n)\n    for i in range(n - 1):\n        a, b = [int(x) for x in input().split()]\n        tree.add_edge(a, b)\n\n    edge_counts = get_edge_counts(tree)\n    max_edge_count, a, b, c = get_max_edge_count(tree, edge_counts)\n\n    print(max_edge_count)\n    print(a + 1, b + 1, c + 1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:02.127903 REASON stop
2022-04-13 17:14:02.128610 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:02.128699 REASON stop
2022-04-13 17:14:02.129376 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in sys.stdin.readline().split()]\n        adj[a].append(b)\n        adj[b].append(a)\n\n    ans = 0\n    res = [0, 0, 0]\n    for a in range(1, n + 1):\n        for b in adj[a]:\n            if b < a:\n                continue\n            for c in adj[b]:\n                if c < b:\n                    continue\n                if a in adj[c]:\n                    tmp = len(set(adj[a]) & set(adj[b])) + len(set(adj[a]) & set(adj[c])) + len(set(adj[b]) & set(adj[c]))\n                    if tmp > ans:\n                        ans = tmp\n                        res = [a, b, c]\n    print(ans)\n    print(' '.join([str(x) for x in res]))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:14:02.129454 REASON stop
