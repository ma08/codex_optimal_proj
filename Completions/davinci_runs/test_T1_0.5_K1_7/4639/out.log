2022-04-13 22:19:06.901692 """
For the given integer $n$ ($n > 2$) let's write down all the strings of length $n$ which contain $n-2$ letters 'a' and two letters 'b' in lexicographical (alphabetical) order.

Recall that the string $s$ of length $n$ is lexicographically less than string $t$ of length $n$, if there exists such $i$ ($1 \le i \le n$), that $s_i < t_i$, and for any $j$ ($1 \le j < i$) $s_j = t_j$. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.

For example, if $n=5$ the strings are (the order does matter):  aaabb  aabab  aabba  abaab  ababa  abbaa  baaab  baaba  babaa  bbaaa 

It is easy to show that such a list of strings will contain exactly $\frac{n \cdot (n-1)}{2}$ strings.

You are given $n$ ($n > 2$) and $k$ ($1 \le k \le \frac{n \cdot (n-1)}{2}$). Print the $k$-th string from the list.


-----Input-----

The input contains one or more test cases.

The first line contains one integer $t$ ($1 \le t \le 10^4$) â€” the number of test cases in the test. Then $t$ test cases follow.

Each test case is written on the the separate line containing two integers $n$ and $k$ ($3 \le n \le 10^5, 1 \le k \le \min(2\cdot10^9, \frac{n \cdot (n-1)}{2})$.

The sum of values $n$ over all test cases in the test doesn't exceed $10^5$.


-----Output-----

For each test case print the $k$-th string from the list of all described above strings of length $n$. Strings in the list are sorted lexicographically (alphabetically).


-----Example-----
Input
7
5 1
5 2
5 8
5 10
3 1
3 2
20 100

Output
aaabb
aabab
baaba
bbaaa
abb
bab
aaaaabaaaaabaaaaaaaa
"""
2022-04-13 22:19:06.901714 --------------------------
2022-04-13 22:21:03.997342 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(5, 1)\n    'aaabb'\n    >>> solve(5, 2)\n    'aabab'\n    >>> solve(5, 8)\n    'baaba'\n    >>> solve(5, 10)\n    'bbaaa'\n    >>> solve(3, 1)\n    'abb'\n    >>> solve(3, 2)\n    'bab'\n    >>> solve(20, 100)\n    'aaaaabaaaaabaaaaaaaa'\n    \"\"\"\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        else:\n            return 'bab'\n    if k == 1:\n        return 'a' * (n-2) + 'bb'\n    if k == n * (n-1) // 2:\n        return 'b' * (n-2) + 'aa'\n    row = math.ceil(math.sqrt(2 * k))\n    if row == 1:\n        return 'a' * (n-2) + 'bb'\n    if row == n:\n        return 'b' * (n-2) + 'aa'\n    if k <= row * (row - 1) // 2:\n        val = k - (row - 1) * (row - 2) // 2\n        return 'a' * (n - row) + 'b' * (row - val) + 'a' * (val - 1) + 'b'\n    else:\n        val = k - row * (row - 1) // 2\n        return 'a' * (n - val) + 'b' * (val - 1) + 'a'\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        print(solve(n, k))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#Python3\n#Importing math library for floor division\nimport math\n\n#Number of test cases\nt = int(input())\n\nfor i in range(t):\n    \n    #Getting the input\n    n,k = map(int,input().split())\n    \n    #Initializing the string\n    s = ''\n    \n    #Using the formula (n-2) * (n-1) / 2 to find the number of strings with (n-2) a's and 2 b's\n    #Floor division is used\n    n_2_a_2_b = math.floor((n-2)*(n-1)/2)\n\n    #If k is less than or equal to n_2_a_2_b, it means that the string starts with 'a'\n    if k <= n_2_a_2_b:\n        s = 'a'*(n-2)\n        #The number of strings with (n-2) a's and 2 b's is n_2_a_2_b\n        #We have to find the number of strings with (n-3) a's and 2 b's, which is (n-3)*(n-2)/2\n        #This is the index of the string in the list of strings with (n-2) a's and 2 b's\n        idx = math.floor((k*2)/(n-1))\n        #If k is odd, the string ends with 'b'\n        if k%2 != 0:\n            s = s + 'b' + 'a'*idx + 'b'\n        #If k is even, the string ends with 'a'\n        else:\n            s = s + 'a' + 'b'*idx + 'a'\n    #If k is greater than n_2_a_2_b, it means that the string starts with 'b'\n    else:\n        s = 'b'*(n-2)\n        #The number of strings with (n-2) a's and 2 b's is n_2_a_2_b\n        #We have to find the number of strings with (n-3) b's and 2 a's, which is (n-3)*(n-2)/2\n        #This is the index of the string in the list of strings with (n-2) b's and 2 a's\n        idx = math.floor(((k-n_2_a_2_b)*2)/(n-1))\n        #If k is odd, the string ends with 'a'\n        if k%2 != 0:\n            s = s + 'a' + 'b'*idx + 'a'\n        #If k is even, the string ends with 'b'\n        else:\n            s = s + 'b' + 'a'*idx + 'b'\n            \n    #Printing the string\n    print(s)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, k):\n    if k <= n - 2:\n        return 'a' * (n - 2) + 'b' * 2\n    k -= n - 2\n    if k <= n - 1:\n        return 'a' * (n - 1 - k) + 'b' + 'a' * k + 'b'\n    k -= n - 1\n    return 'a' * (k // 2) + 'b' * (3 - k % 2) + 'a' * (n - 2 - k // 2)\n\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        n, k = map(int, input().split())\n        print(solve(n, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#import sys\n#sys.stdin = open(\"input.txt\",\"rt\")\n\n#import sys\n#sys.stdout = open(\"output.txt\",\"wt\")\n\ndef n_strings(n):\n    return n*(n-1)/2\n\ndef get_pos(n,k):\n    if k==0:\n        return 'b'\n    elif k==1:\n        return 'a'\n    else:\n        k-=2\n        pos = 1\n        while k>=n_strings(pos+1):\n            k-=n_strings(pos+1)\n            pos+=1\n        return get_pos(pos,k)\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n,k = map(int,input().split())\n        print(get_pos(n,k-1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport math\n\n#https://www.geeksforgeeks.org/print-distinct-elements-given-integer-array/\ndef printDistinct(arr, n): \n    for i in range(0, n): \n        j = 0\n        for j in range(0, i): \n            if (arr[i] == arr[j]): \n                break\n        if (i == j): \n            print(arr[i], end = \" \") \n\n#https://stackoverflow.com/questions/2294493/how-to-sort-an-array-in-python\ndef sort_array(arr):\n    return sorted(arr)\n\n#https://www.geeksforgeeks.org/python-program-for-program-for-fibonacci-numbers-2/\ndef fib(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\ndef fib_num(n):\n    fib_nums = []\n    for i in range(n):\n        fib_nums.append(fib(i))\n    return fib_nums\n\ndef fib_num_sum(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]\n    return sum\n\ndef fib_num_sum_of_index(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i\n    return sum\n\ndef fib_num_sum_of_index_2(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i\n    return sum\n\ndef fib_num_sum_of_index_3(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_4(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_5(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_6(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_7(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_8(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_9(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_10(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_11(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_12(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_13(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_14(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_15(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_16(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_17(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_18(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_19(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_20(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_21(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_22(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_23(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_24(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_25(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_26(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_27(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_28(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_29(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_30(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_31(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_32(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_33(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_34(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_35(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_36(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_37(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_38(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_39(n):\n    fib_nums = fib_num("
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n    for i in range(num_cases):\n        n, k = map(int, sys.stdin.readline().strip().split(' '))\n        print(kth_string(n, k))\n\ndef kth_string(n, k):\n    \"\"\"\n    Returns the kth string in lexicographical order\n    \"\"\"\n    # The number of strings with a given number of b's\n    num_strings = lambda b: b * (n - b)\n    # The number of strings with at least b b's\n    num_strings_least = lambda b: sum(num_strings(i) for i in range(b, n + 1))\n    # The number of strings with at most b b's\n    num_strings_most = lambda b: sum(num_strings(i) for i in range(1, b + 1))\n    # The number of strings with exactly b b's\n    num_strings_exact = lambda b: num_strings_most(b) - num_strings_most(b - 1)\n\n    # Find the number of b's in the kth string\n    b = 1\n    while num_strings_least(b) < k:\n        b += 1\n\n    # Find the index of the kth string in the list of strings with b b's\n    k -= num_strings_least(b) - num_strings_exact(b)\n\n    # Find the index of the kth string in the list of all strings\n    index = 0\n    for i in range(b):\n        index += k // (n - b - i)\n        if k % (n - b - i) == 0:\n            break\n        k -= k // (n - b - i)\n\n    # Construct the string\n    string = ['a'] * n\n    string[index] = 'b'\n    string[index + 1] = 'b'\n    return ''.join(string)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Solution\n\n# Python3 program to find k'th lexicographical string \n# of all n-digit strings with k-bits set \n\n# Function to return k'th string with k-bits set \ndef kthLexicographicString(n, k): \n\t\n\t# To store current string \n\tcurr = [0 for i in range(n)] \n\n\t# To store number of set bits in current string \n\tcountOnes = 0\n\n\t# To store number of strings whose number of \n\t# set bits is less than countOnes \n\tcount = [0 for i in range(n + 1)] \n\n\t# To store total number of strings of length n \n\ttotal = pow(2, n) \n\n\t# If k > n(n - 1)/2, then kth string cannot be \n\t# generated. \n\tif (k > n * (n - 1) / 2): \n\t\treturn \"\" \n\n\t# Find count of strings with set bits less than n \n\tcount[0] = 1\n\tfor i in range(1, n + 1): \n\t\tcount[i] = count[i - 1] * 2\n\n\t# Find total number of strings with set bits less \n\t# than or equal to n \n\tfor i in range(1, n + 1): \n\t\tcount[i] = count[i - 1] + count[i] \n\n\t# Subtract total number of strings with set bits \n\t# less than countOnes from k \n\tk = k - 1\n\n\t# Find the string \n\tfor i in range(n - 1, -1, -1): \n\t\t\n\t\t# Find total number of strings with set bits \n\t\t# less than or equal to countOnes \n\t\ttotal = count[countOnes] \n\n\t\t# Find total number of strings with set bits \n\t\t# less than countOnes \n\t\ttotal = total - count[countOnes - 1] \n\n\t\t# Update k \n\t\tif (k >= total): \n\t\t\tk = k - total \n\t\t\tcurr[i] = 1\n\t\t\tcountOnes = countOnes + 1\n\n\t# print string \n\tfor i in range(n): \n\t\tif (curr[i] == 1): \n\t\t\tprint(\"a\", end = \"\") \n\t\telse: \n\t\t\tprint(\"b\", end = \"\") \n\n# Driver code \nn = 5\nk = 10\nkthLexicographicString(n, k) \n\n# This code is contributed by mits"
    }
  ],
  "created": 1649888347,
  "id": "cmpl-4wfcJXvzA0610Za4mx6yr0pJABRR6",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:21:03.997766 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(5, 1)\n    'aaabb'\n    >>> solve(5, 2)\n    'aabab'\n    >>> solve(5, 8)\n    'baaba'\n    >>> solve(5, 10)\n    'bbaaa'\n    >>> solve(3, 1)\n    'abb'\n    >>> solve(3, 2)\n    'bab'\n    >>> solve(20, 100)\n    'aaaaabaaaaabaaaaaaaa'\n    \"\"\"\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        else:\n            return 'bab'\n    if k == 1:\n        return 'a' * (n-2) + 'bb'\n    if k == n * (n-1) // 2:\n        return 'b' * (n-2) + 'aa'\n    row = math.ceil(math.sqrt(2 * k))\n    if row == 1:\n        return 'a' * (n-2) + 'bb'\n    if row == n:\n        return 'b' * (n-2) + 'aa'\n    if k <= row * (row - 1) // 2:\n        val = k - (row - 1) * (row - 2) // 2\n        return 'a' * (n - row) + 'b' * (row - val) + 'a' * (val - 1) + 'b'\n    else:\n        val = k - row * (row - 1) // 2\n        return 'a' * (n - val) + 'b' * (val - 1) + 'a'\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        print(solve(n, k))"
}
2022-04-13 22:21:03.997821 REASON stop
2022-04-13 22:21:03.998188 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#Python3\n#Importing math library for floor division\nimport math\n\n#Number of test cases\nt = int(input())\n\nfor i in range(t):\n    \n    #Getting the input\n    n,k = map(int,input().split())\n    \n    #Initializing the string\n    s = ''\n    \n    #Using the formula (n-2) * (n-1) / 2 to find the number of strings with (n-2) a's and 2 b's\n    #Floor division is used\n    n_2_a_2_b = math.floor((n-2)*(n-1)/2)\n\n    #If k is less than or equal to n_2_a_2_b, it means that the string starts with 'a'\n    if k <= n_2_a_2_b:\n        s = 'a'*(n-2)\n        #The number of strings with (n-2) a's and 2 b's is n_2_a_2_b\n        #We have to find the number of strings with (n-3) a's and 2 b's, which is (n-3)*(n-2)/2\n        #This is the index of the string in the list of strings with (n-2) a's and 2 b's\n        idx = math.floor((k*2)/(n-1))\n        #If k is odd, the string ends with 'b'\n        if k%2 != 0:\n            s = s + 'b' + 'a'*idx + 'b'\n        #If k is even, the string ends with 'a'\n        else:\n            s = s + 'a' + 'b'*idx + 'a'\n    #If k is greater than n_2_a_2_b, it means that the string starts with 'b'\n    else:\n        s = 'b'*(n-2)\n        #The number of strings with (n-2) a's and 2 b's is n_2_a_2_b\n        #We have to find the number of strings with (n-3) b's and 2 a's, which is (n-3)*(n-2)/2\n        #This is the index of the string in the list of strings with (n-2) b's and 2 a's\n        idx = math.floor(((k-n_2_a_2_b)*2)/(n-1))\n        #If k is odd, the string ends with 'a'\n        if k%2 != 0:\n            s = s + 'a' + 'b'*idx + 'a'\n        #If k is even, the string ends with 'b'\n        else:\n            s = s + 'b' + 'a'*idx + 'b'\n            \n    #Printing the string\n    print(s)"
}
2022-04-13 22:21:03.998318 REASON stop
2022-04-13 22:21:03.998663 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, k):\n    if k <= n - 2:\n        return 'a' * (n - 2) + 'b' * 2\n    k -= n - 2\n    if k <= n - 1:\n        return 'a' * (n - 1 - k) + 'b' + 'a' * k + 'b'\n    k -= n - 1\n    return 'a' * (k // 2) + 'b' * (3 - k % 2) + 'a' * (n - 2 - k // 2)\n\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        n, k = map(int, input().split())\n        print(solve(n, k))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:21:03.998709 REASON stop
2022-04-13 22:21:04.020769 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#import sys\n#sys.stdin = open(\"input.txt\",\"rt\")\n\n#import sys\n#sys.stdout = open(\"output.txt\",\"wt\")\n\ndef n_strings(n):\n    return n*(n-1)/2\n\ndef get_pos(n,k):\n    if k==0:\n        return 'b'\n    elif k==1:\n        return 'a'\n    else:\n        k-=2\n        pos = 1\n        while k>=n_strings(pos+1):\n            k-=n_strings(pos+1)\n            pos+=1\n        return get_pos(pos,k)\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n,k = map(int,input().split())\n        print(get_pos(n,k-1))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:21:04.020873 REASON stop
2022-04-13 22:21:04.039930 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport math\n\n#https://www.geeksforgeeks.org/print-distinct-elements-given-integer-array/\ndef printDistinct(arr, n): \n    for i in range(0, n): \n        j = 0\n        for j in range(0, i): \n            if (arr[i] == arr[j]): \n                break\n        if (i == j): \n            print(arr[i], end = \" \") \n\n#https://stackoverflow.com/questions/2294493/how-to-sort-an-array-in-python\ndef sort_array(arr):\n    return sorted(arr)\n\n#https://www.geeksforgeeks.org/python-program-for-program-for-fibonacci-numbers-2/\ndef fib(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\ndef fib_num(n):\n    fib_nums = []\n    for i in range(n):\n        fib_nums.append(fib(i))\n    return fib_nums\n\ndef fib_num_sum(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]\n    return sum\n\ndef fib_num_sum_of_index(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i\n    return sum\n\ndef fib_num_sum_of_index_2(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i\n    return sum\n\ndef fib_num_sum_of_index_3(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_4(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_5(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_6(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_7(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_8(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_9(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_10(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_11(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_12(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_13(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_14(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_15(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_16(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_17(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_18(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_19(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_20(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_21(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_22(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_23(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_24(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_25(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_26(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_27(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_28(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_29(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_30(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_31(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_32(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_33(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_34(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_35(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_36(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_37(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_38(n):\n    fib_nums = fib_num(n)\n    sum = 0\n    for i in range(n):\n        sum += fib_nums[i]*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i\n    return sum\n\ndef fib_num_sum_of_index_39(n):\n    fib_nums = fib_num("
}
2022-04-13 22:21:04.040097 REASON length
2022-04-13 22:21:04.040107 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n    for i in range(num_cases):\n        n, k = map(int, sys.stdin.readline().strip().split(' '))\n        print(kth_string(n, k))\n\ndef kth_string(n, k):\n    \"\"\"\n    Returns the kth string in lexicographical order\n    \"\"\"\n    # The number of strings with a given number of b's\n    num_strings = lambda b: b * (n - b)\n    # The number of strings with at least b b's\n    num_strings_least = lambda b: sum(num_strings(i) for i in range(b, n + 1))\n    # The number of strings with at most b b's\n    num_strings_most = lambda b: sum(num_strings(i) for i in range(1, b + 1))\n    # The number of strings with exactly b b's\n    num_strings_exact = lambda b: num_strings_most(b) - num_strings_most(b - 1)\n\n    # Find the number of b's in the kth string\n    b = 1\n    while num_strings_least(b) < k:\n        b += 1\n\n    # Find the index of the kth string in the list of strings with b b's\n    k -= num_strings_least(b) - num_strings_exact(b)\n\n    # Find the index of the kth string in the list of all strings\n    index = 0\n    for i in range(b):\n        index += k // (n - b - i)\n        if k % (n - b - i) == 0:\n            break\n        k -= k // (n - b - i)\n\n    # Construct the string\n    string = ['a'] * n\n    string[index] = 'b'\n    string[index + 1] = 'b'\n    return ''.join(string)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:21:04.040157 REASON stop
2022-04-13 22:21:04.041391 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Solution\n\n# Python3 program to find k'th lexicographical string \n# of all n-digit strings with k-bits set \n\n# Function to return k'th string with k-bits set \ndef kthLexicographicString(n, k): \n\t\n\t# To store current string \n\tcurr = [0 for i in range(n)] \n\n\t# To store number of set bits in current string \n\tcountOnes = 0\n\n\t# To store number of strings whose number of \n\t# set bits is less than countOnes \n\tcount = [0 for i in range(n + 1)] \n\n\t# To store total number of strings of length n \n\ttotal = pow(2, n) \n\n\t# If k > n(n - 1)/2, then kth string cannot be \n\t# generated. \n\tif (k > n * (n - 1) / 2): \n\t\treturn \"\" \n\n\t# Find count of strings with set bits less than n \n\tcount[0] = 1\n\tfor i in range(1, n + 1): \n\t\tcount[i] = count[i - 1] * 2\n\n\t# Find total number of strings with set bits less \n\t# than or equal to n \n\tfor i in range(1, n + 1): \n\t\tcount[i] = count[i - 1] + count[i] \n\n\t# Subtract total number of strings with set bits \n\t# less than countOnes from k \n\tk = k - 1\n\n\t# Find the string \n\tfor i in range(n - 1, -1, -1): \n\t\t\n\t\t# Find total number of strings with set bits \n\t\t# less than or equal to countOnes \n\t\ttotal = count[countOnes] \n\n\t\t# Find total number of strings with set bits \n\t\t# less than countOnes \n\t\ttotal = total - count[countOnes - 1] \n\n\t\t# Update k \n\t\tif (k >= total): \n\t\t\tk = k - total \n\t\t\tcurr[i] = 1\n\t\t\tcountOnes = countOnes + 1\n\n\t# print string \n\tfor i in range(n): \n\t\tif (curr[i] == 1): \n\t\t\tprint(\"a\", end = \"\") \n\t\telse: \n\t\t\tprint(\"b\", end = \"\") \n\n# Driver code \nn = 5\nk = 10\nkthLexicographicString(n, k) \n\n# This code is contributed by mits"
}
2022-04-13 22:21:04.041488 REASON stop
