["", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    last = -1\n    ans = []\n    while l <= r:\n        if a[l] > last and a[r] > last:\n            if a[l] <= a[r]:\n                ans.append('L')\n                last = a[l]\n                l += 1\n            else:\n                ans.append('R')\n                last = a[r]\n                r -= 1\n        elif a[l] > last:\n            ans.append('L')\n            last = a[l]\n            l += 1\n        elif a[r] > last:\n            ans.append('R')\n            last = a[r]\n            r -= 1\n        else:\n            break\n    print(len(ans))\n    print(''.join(ans))\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef longest_increasing_seq(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef find_seq(a, dp):\n    n = len(a)\n    ans = []\n    while dp:\n        if dp[0] == dp[-1]:\n            ans.append('L')\n            a.pop(0)\n            dp.pop(0)\n        elif dp[0] > dp[-1]:\n            ans.append('L')\n            a.pop(0)\n            dp.pop(0)\n        else:\n            ans.append('R')\n            a.pop()\n            dp.pop()\n    return ans\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = longest_increasing_seq(a)\n    ans = find_seq(a, dp)\n    print(dp)\n    print(ans)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = the maximum number of elements in a strictly increasing sequence you can obtain from the elements a[i], a[i+1], ..., a[j]\n# dp[i][j] = max(dp[i+1][j], dp[i][j-1]) if a[i] >= a[i+1] or a[j] <= a[j-1]\n#           = dp[i+1][j-1] + 1 if a[i] < a[i+1] and a[j] > a[j-1]\n\n# dp_left[i][j] = the maximum number of elements in a strictly increasing sequence you can obtain from the elements a[i], a[i+1], ..., a[j] if you take the leftmost element during the first move\n# dp_left[i][j] = dp[i+1][j] if a[i] >= a[i+1]\n#               = dp[i+1][j-1] + 1 if a[i] < a[i+1] and a[j] > a[j-1]\n#               = dp_left[i+1][j-1] + 1 if a[i] < a[i+1] and a[j] <= a[j-1]\n\n# dp_right[i][j] = the maximum number of elements in a strictly increasing sequence you can obtain from the elements a[i], a[i+1], ..., a[j] if you take the rightmost element during the first move\n# dp_right[i][j] = dp[i][j-1] if a[j] <= a[j-1]\n#                = dp[i+1][j-1] + 1 if a[i] < a[i+1] and a[j] > a[j-1]\n#                = dp_right[i+1][j-1] + 1 if a[i] >= a[i+1] and a[j] > a[j-1]\n\ndp = [[0 for _ in range(n)] for _ in range(n)]\ndp_left = [[0 for _ in range(n)] for _ in range(n)]\ndp_right = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n    dp_left[i][i] = 1\n    dp_right[i][i] = 1\n\nfor length in range(2, n+1):\n    for i in range(n-length+1):\n        j = i + length - 1\n        if a[i] >= a[i+1]:\n            dp[i][j] = dp[i+1][j]\n            dp_left[i][j] = dp[i+1][j]\n            dp_right[i][j] = dp[i+1][j]\n        elif a[j] <= a[j-1]:\n            dp[i][j] = dp[i][j-1]\n            dp_left[i][j] = dp[i][j-1]\n            dp_right[i][j] = dp[i][j-1]\n        elif a[i] < a[i+1] and a[j] > a[j-1]:\n            dp[i][j] = dp[i+1][j-1] + 1\n            dp_left[i][j] = dp[i+1][j-1] + 1\n            dp_right[i][j] = dp[i+1][j-1] + 1\n        elif a[i] < a[i+1] and a[j] <= a[j-1]:\n            dp[i][j] = dp_left[i+1][j-1] + 1\n            dp_left[i][j] = dp_left[i+1][j-1] + 1\n            dp_right[i][j] = dp[i+1][j-1]\n        elif a[i] >= a[i+1] and a[j] > a[j-1]:\n            dp[i][j] = dp_right[i+1][j-1] + 1\n            dp_left[i][j] = dp[i+1][j-1]\n            dp_right[i][j] = dp_right[i+1][j-1] + 1\n\nans = dp[0][n-1]\nprint(ans)\n\n# reconstruct the answer\ns = ''\ni, j = 0, n-1\nwhile i < j:\n    if a[i] >= a[i+1]:\n        s += 'L'\n        i += 1\n    elif a[j] <= a[j-1]:\n        s += 'R'\n        j -= 1\n    elif a[i] < a[i+1] and a[j] > a[j-1]:\n        s += 'L'\n        i += 1\n        j -= 1\n    elif a[i] < a[i+1] and a[j] <= a[j-1]:\n        s += 'L'\n        i += 1\n    elif a[i] >= a[i+1] and a[j] > a[j-1]:\n        s += 'R'\n        j -= 1\nprint(s)", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = [0] * n\n    stack = []\n    for i in range(n):\n        while stack and a[stack[-1]] < a[i]:\n            result[stack.pop()] = i + 1\n        stack.append(i)\n    while stack:\n        result[stack.pop()] = n + 1\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    for i in range(1, n + 1):\n        left[i] = left[i - 1]\n        if result[i - 1] > i:\n            left[i] += 1\n    for i in range(n - 1, -1, -1):\n        right[i] = right[i + 1]\n        if result[i] < i + 1:\n            right[i] += 1\n    m = 0\n    for i in range(n):\n        m = max(m, left[i] + right[i + 1] + 1)\n    print(m)\n    ans = ['L'] * m\n    for i in range(n):\n        if result[i] > i + 1:\n            ans[left[i]] = 'R'\n    print(''.join(ans))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] not in b:\n            b.append(a[i])\n            c.append(i+1)\n    b.sort()\n    c.sort()\n    d = []\n    e = []\n    for i in range(len(b)):\n        if b[i] != c[i]:\n            d.append(b[i])\n            e.append(c[i])\n    d.sort()\n    e.sort()\n    f = []\n    for i in range(len(d)):\n        f.append(d.index(e[i])+1)\n    g = []\n    for i in range(len(e)):\n        g.append(e[i]-f[i])\n    h = []\n    for i in range(len(g)):\n        if g[i] == 0:\n            h.append(0)\n        else:\n            h.append(1)\n    j = 0\n    for i in range(len(h)):\n        if h[i] == 1:\n            j += 1\n    print(j)\n    k = []\n    for i in range(len(h)):\n        if h[i] == 1:\n            k.append('R')\n        else:\n            k.append('L')\n    print(\"\".join(k))\n\nif __name__ == '__main__':\n    main()"]