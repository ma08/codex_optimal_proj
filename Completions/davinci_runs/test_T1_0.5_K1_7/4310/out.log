2022-04-13 19:55:44.845537 """
You have three tasks, all of which need to be completed.
First, you can complete any one task at cost 0.
Then, just after completing the i-th task, you can complete the j-th task at cost |A_j - A_i|.
Here, |x| denotes the absolute value of x.
Find the minimum total cost required to complete all the task.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq A_1, A_2, A_3 \leq 100

-----Input-----
Input is given from Standard Input in the following format:
A_1 A_2 A_3

-----Output-----
Print the minimum total cost required to complete all the task.

-----Sample Input-----
1 6 3

-----Sample Output-----
5

When the tasks are completed in the following order, the total cost will be 5, which is the minimum:
 - Complete the first task at cost 0.
 - Complete the third task at cost 2.
 - Complete the second task at cost 3.
"""
2022-04-13 19:55:44.845545 --------------------------
2022-04-13 19:56:03.159780 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\na = list(map(int, sys.stdin.readline().rstrip().split()))\na.sort()\nprint(a[1] - a[0] + a[2] - a[1])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\na = list(map(int, input().split()))\n\na.sort()\n\nprint(a[1]-a[0]+a[2]-a[1])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the three tasks from standard input\n    a1, a2, a3 = map(int, sys.stdin.readline().split())\n\n    # Sort the tasks in ascending order\n    tasks = [a1, a2, a3]\n    tasks.sort()\n\n    # The cost of the first task is always 0\n    cost = 0\n\n    # The cost of the second task is the absolute value of the difference\n    # between the second and first tasks\n    cost += abs(tasks[1] - tasks[0])\n\n    # The cost of the third task is the absolute value of the difference\n    # between the third and second tasks\n    cost += abs(tasks[2] - tasks[1])\n\n    # Print the total cost\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nprint(min(sum(map(abs, A[i+1:]-A[i])) for i in range(3)))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom itertools import permutations\n\ndef min_cost(lst):\n    p = permutations(lst)\n    costs = []\n    for i in p:\n        cost = 0\n        for j in range(1, len(i)):\n            cost += abs(i[j] - i[j-1])\n        costs.append(cost)\n    return min(costs)\n\nif __name__ == '__main__':\n    lst = list(map(int, input().split()))\n    print(min_cost(lst))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # Read input from stdin\n    A = [int(x) for x in sys.stdin.readline().split()]\n\n    # Sort A and find the minimum cost\n    A.sort()\n    cost = A[1] - A[0] + A[2] - A[1]\n\n    # Print the minimum cost\n    print(cost)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nfrom itertools import permutations\n\nA_1, A_2, A_3 = map(int, input().split())\n\ncosts = [A_1, A_2, A_3]\n\nans = float(\"inf\")\n\nfor p in permutations(costs):\n    ans = min(ans, abs(p[0] - p[1]) + abs(p[1] - p[2]))\n\nprint(ans)"
    }
  ],
  "created": 1649879744,
  "id": "cmpl-4wdNYHZITg2H6sPACOmASEaPSbGWX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 19:56:03.160066 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\na = list(map(int, sys.stdin.readline().rstrip().split()))\na.sort()\nprint(a[1] - a[0] + a[2] - a[1])"
}
2022-04-13 19:56:03.160116 REASON stop
2022-04-13 19:56:03.160553 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\na = list(map(int, input().split()))\n\na.sort()\n\nprint(a[1]-a[0]+a[2]-a[1])"
}
2022-04-13 19:56:03.160663 REASON stop
2022-04-13 19:56:03.161004 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # Read the three tasks from standard input\n    a1, a2, a3 = map(int, sys.stdin.readline().split())\n\n    # Sort the tasks in ascending order\n    tasks = [a1, a2, a3]\n    tasks.sort()\n\n    # The cost of the first task is always 0\n    cost = 0\n\n    # The cost of the second task is the absolute value of the difference\n    # between the second and first tasks\n    cost += abs(tasks[1] - tasks[0])\n\n    # The cost of the third task is the absolute value of the difference\n    # between the third and second tasks\n    cost += abs(tasks[2] - tasks[1])\n\n    # Print the total cost\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:56:03.161049 REASON stop
2022-04-13 19:56:03.180180 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nprint(min(sum(map(abs, A[i+1:]-A[i])) for i in range(3)))"
}
2022-04-13 19:56:03.180272 REASON stop
2022-04-13 19:56:03.200130 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom itertools import permutations\n\ndef min_cost(lst):\n    p = permutations(lst)\n    costs = []\n    for i in p:\n        cost = 0\n        for j in range(1, len(i)):\n            cost += abs(i[j] - i[j-1])\n        costs.append(cost)\n    return min(costs)\n\nif __name__ == '__main__':\n    lst = list(map(int, input().split()))\n    print(min_cost(lst))"
}
2022-04-13 19:56:03.200233 REASON stop
2022-04-13 19:56:03.201467 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # Read input from stdin\n    A = [int(x) for x in sys.stdin.readline().split()]\n\n    # Sort A and find the minimum cost\n    A.sort()\n    cost = A[1] - A[0] + A[2] - A[1]\n\n    # Print the minimum cost\n    print(cost)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:56:03.201531 REASON stop
2022-04-13 19:56:03.202189 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nfrom itertools import permutations\n\nA_1, A_2, A_3 = map(int, input().split())\n\ncosts = [A_1, A_2, A_3]\n\nans = float(\"inf\")\n\nfor p in permutations(costs):\n    ans = min(ans, abs(p[0] - p[1]) + abs(p[1] - p[2]))\n\nprint(ans)"
}
2022-04-13 19:56:03.202254 REASON stop
