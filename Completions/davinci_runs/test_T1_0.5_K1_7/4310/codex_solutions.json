["\n\nfrom itertools import permutations\n\ndef min_cost(lst):\n    p = permutations(lst)\n    costs = []\n    for i in p:\n        cost = 0\n        for j in range(1, len(i)):\n            cost += abs(i[j] - i[j-1])\n        costs.append(cost)\n    return min(costs)\n\nif __name__ == '__main__':\n    lst = list(map(int, input().split()))\n    print(min_cost(lst))", "\n\nimport sys\n\ndef main():\n    # Read input from stdin\n    A = [int(x) for x in sys.stdin.readline().split()]\n\n    # Sort A and find the minimum cost\n    A.sort()\n    cost = A[1] - A[0] + A[2] - A[1]\n\n    # Print the minimum cost\n    print(cost)\n\n\nif __name__ == '__main__':\n    main()", "\n\nprint(min(sum(map(abs, A[i+1:]-A[i])) for i in range(3)))", "\n\nimport sys\n\na = list(map(int, sys.stdin.readline().rstrip().split()))\na.sort()\nprint(a[1] - a[0] + a[2] - a[1])", "\n\nfrom itertools import permutations\n\nA_1, A_2, A_3 = map(int, input().split())\n\ncosts = [A_1, A_2, A_3]\n\nans = float(\"inf\")\n\nfor p in permutations(costs):\n    ans = min(ans, abs(p[0] - p[1]) + abs(p[1] - p[2]))\n\nprint(ans)", "\n\na = list(map(int, input().split()))\n\na.sort()\n\nprint(a[1]-a[0]+a[2]-a[1])", "\n\nimport sys\n\ndef main():\n    # Read the three tasks from standard input\n    a1, a2, a3 = map(int, sys.stdin.readline().split())\n\n    # Sort the tasks in ascending order\n    tasks = [a1, a2, a3]\n    tasks.sort()\n\n    # The cost of the first task is always 0\n    cost = 0\n\n    # The cost of the second task is the absolute value of the difference\n    # between the second and first tasks\n    cost += abs(tasks[1] - tasks[0])\n\n    # The cost of the third task is the absolute value of the difference\n    # between the third and second tasks\n    cost += abs(tasks[2] - tasks[1])\n\n    # Print the total cost\n    print(cost)\n\nif __name__ == '__main__':\n    main()"]