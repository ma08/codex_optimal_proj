["\n\nimport sys\n\n# read inputs\nM, N = map(int, sys.stdin.readline().split())\nT = list(map(int, sys.stdin.readline().split()))\nX = list(map(int, sys.stdin.readline().split()))\n\n# compute all possible speeds\nspeeds = set()\nfor i in range(M-1):\n    for j in range(i+1, M):\n        speeds.add((X[j] - X[i]) / (T[j] - T[i]))\n\n# print the number of possible speeds\nprint(len(speeds))\n\n# print the distances between the first and second milestones seen\ndistances = set()\nfor speed in speeds:\n    distances.add(speed * T[1])\nprint(' '.join(map(str, sorted(distances))))", "\n\n# Solution 1:\n#\n# import itertools\n#\n# def main():\n#     M, N = map(int, input().split())\n#     T = list(map(int, input().split()))\n#     X = list(map(int, input().split()))\n#     possible_distances = set()\n#     for x in itertools.combinations(X, M):\n#         if x[0] != X[0]:\n#             continue\n#         if x[-1] != X[-1]:\n#             continue\n#         distances = []\n#         for i in range(1, M):\n#             distances.append(x[i] - x[i-1])\n#         if set(distances) == set(T):\n#             possible_distances.add(x[1] - x[0])\n#     print(len(possible_distances))\n#     print(' '.join([str(d) for d in sorted(possible_distances)]))\n#\n# if __name__ == '__main__':\n#     main()\n\n# Solution 2:\n\nimport itertools\n\ndef main():\n    M, N = map(int, input().split())\n    T = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n    possible_distances = set()\n    for x in itertools.combinations(X, M):\n        if x[0] != X[0]:\n            continue\n        if x[-1] != X[-1]:\n            continue\n        distances = []\n        for i in range(1, M):\n            distances.append(x[i] - x[i-1])\n        if set(distances) == set(T):\n            possible_distances.add(x[1] - x[0])\n    print(len(possible_distances))\n    print(' '.join([str(d) for d in sorted(possible_distances)]))\n\nif __name__ == '__main__':\n    main()", "\n\n# imports\nimport copy\n\n# functions\ndef get_milestone_times(milestone_count, milestones):\n    # get milestone times\n    milestone_times = []\n    for i in range(milestone_count):\n        milestone_times.append(milestones[i])\n    return milestone_times\n\ndef get_milestone_distances(milestone_count, milestones):\n    # get milestone distances\n    milestone_distances = []\n    for i in range(milestone_count):\n        milestone_distances.append(milestones[i])\n    return milestone_distances\n\ndef get_distances_between_milestones(milestone_distances):\n    # get distances between milestones\n    distances_between_milestones = []\n    for i in range(len(milestone_distances)):\n        if i == 0:\n            distances_between_milestones.append(milestone_distances[i])\n        else:\n            distances_between_milestones.append(milestone_distances[i] - milestone_distances[i-1])\n    return distances_between_milestones\n\ndef get_times_between_milestones(milestone_times):\n    # get times between milestones\n    times_between_milestones = []\n    for i in range(len(milestone_times)):\n        if i == 0:\n            times_between_milestones.append(milestone_times[i])\n        else:\n            times_between_milestones.append(milestone_times[i] - milestone_times[i-1])\n    return times_between_milestones\n\ndef get_speeds_between_milestones(distances_between_milestones, times_between_milestones):\n    # get speeds between milestones\n    speeds_between_milestones = []\n    for i in range(len(distances_between_milestones)):\n        speeds_between_milestones.append(distances_between_milestones[i] / times_between_milestones[i])\n    return speeds_between_milestones\n\ndef get_distinct_speeds_between_milestones(speeds_between_milestones):\n    # get distinct speeds between milestones\n    distinct_speeds_between_milestones = []\n    for i in range(len(speeds_between_milestones)):\n        if speeds_between_milestones[i] not in distinct_speeds_between_milestones:\n            distinct_speeds_between_milestones.append(speeds_between_milestones[i])\n    return distinct_speeds_between_milestones\n\ndef get_distinct_speeds_between_milestones_count(distinct_speeds_between_milestones):\n    # get distinct speeds between milestones count\n    distinct_speeds_between_milestones_count = len(distinct_speeds_between_milestones)\n    return distinct_speeds_between_milestones_count\n\ndef get_distances_between_first_and_second_milestones(distances_between_milestones):\n    # get distances between first and second milestones\n    distances_between_first_and_second_milestones = []\n    for i in range(len(distances_between_milestones)):\n        if i == 0:\n            distances_between_first_and_second_milestones.append(distances_between_milestones[i])\n        else:\n            distances_between_first_and_second_milestones.append(distances_between_milestones[i] + distances_between_milestones[i-1])\n    return distances_between_first_and_second_milestones\n\ndef get_distinct_distances_between_first_and_second_milestones(distances_between_first_and_second_milestones):\n    # get distinct distances between first and second milestones\n    distinct_distances_between_first_and_second_milestones = []\n    for i in range(len(distances_between_first_and_second_milestones)):\n        if distances_between_first_and_second_milestones[i] not in distinct_distances_between_first_and_second_milestones:\n            distinct_distances_between_first_and_second_milestones.append(distances_between_first_and_second_milestones[i])\n    return distinct_distances_between_first_and_second_milestones\n\ndef get_distinct_distances_between_first_and_second_milestones_count(distinct_distances_between_first_and_second_milestones):\n    # get distinct distances between first and second milestones count\n    distinct_distances_between_first_and_second_milestones_count = len(distinct_distances_between_first_and_second_milestones)\n    return distinct_distances_between_first_and_second_milestones_count\n\ndef print_distinct_distances_between_first_and_second_milestones(distinct_distances_between_first_and_second_milestones):\n    # print distinct distances between first and second milestones\n    for i in range(len(distinct_distances_between_first_and_second_milestones)):\n        print(distinct_distances_between_first_and_second_milestones[i], end=\" \")\n\n# main\ndef main():\n    # get milestone count and total milestone count\n    milestone_count, total_milestone_count = map(int, input().split())\n\n    # get milestones\n    milestones = list(map(int, input().split()))\n\n    # get milestone times\n    milestone_times = get_milestone_times(milestone_count, milestones)\n\n    # get milestone distances\n    milestone_distances = get_milestone_distances(total_milestone_count, milestones)\n\n    # get distances between milestones\n    distances_between_milestones = get_distances_between_milestones(milestone_distances)\n\n    # get times between milestones\n    times_between_milestones = get_times_between_milestones(milestone_times)\n\n    # get speeds between milestones\n    speeds_between_milestones = get_speeds_between_milestones(distances_between_milestones, times_between_milestones)\n\n    # get distinct speeds between milestones\n    distinct_speeds_between_milestones = get_distinct_speeds_between_milestones(speeds_between_milestones)\n\n    # get distinct speeds between milestones count\n    distinct_speeds_between_milestones_count = get_distinct_speeds_between_milestones_count(distinct_speeds_between_milestones)\n\n    # get distances between first and second milestones\n    distances_between_first_and_second_milestones = get_distances_between_first_and_second_milestones(distances_between_milestones)\n\n    # get distinct distances between first and second milestones\n    distinct_distances_between_first_and_second_milestones = get_distinct_distances_between_first_and_second_milestones(distances_between_first_and_second_milestones)\n\n    # get distinct distances between first and second milestones count\n    distinct_distances_between_first_and_second_milestones_count = get_distinct_distances_between_first_and_second_milestones_count(distinct_distances_between_first_and_second_milestones)\n\n    # print distinct speeds between milestones count\n    print(distinct_speeds_between_milestones_count)\n\n    # print distinct distances between first and second milestones\n    print_distinct_distances_between_first_and_second_milestones(distinct_distances_between_first_and_second_milestones)\n\n    # exit\n    exit(0)\n\n# entry point\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    M, N = map(int, input().split())\n    T = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n\n    # store the distances between the stones\n    distances = []\n    for i in range(M-1):\n        distances.append(X[i+1] - X[i])\n\n    # store the times between the stones\n    times = []\n    for i in range(M-1):\n        times.append(T[i+1] - T[i])\n\n    # calculate the speeds between the stones\n    speeds = []\n    for i in range(M-1):\n        speeds.append(distances[i]/times[i])\n\n    # store the unique speeds\n    unique_speeds = []\n    for speed in speeds:\n        if speed not in unique_speeds:\n            unique_speeds.append(speed)\n\n    # calculate the distances between the first and second milestone for each unique speed\n    distances_to_second_milestone = []\n    for speed in unique_speeds:\n        distances_to_second_milestone.append(int(speed*times[0]))\n\n    # print the number of unique speeds\n    print(len(unique_speeds))\n\n    # print the distances between the first and second milestone in increasing order\n    print(*sorted(distances_to_second_milestone))\n\nmain()", "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\ndef main():\n    # Read input\n    M, N = [int(x) for x in stdin.readline().split()]\n    T = [int(x) for x in stdin.readline().split()]\n    X = [int(x) for x in stdin.readline().split()]\n    # Calculate distance between each milestone\n    D = [X[i+1]-X[i] for i in range(N-1)]\n    # Calculate time between each milestone\n    dT = [T[i+1]-T[i] for i in range(M-1)]\n    # Calculate speed between each milestone\n    V = [D[i]/dT[i] for i in range(M-1)]\n    # Find all possible speeds\n    speeds = defaultdict(int)\n    for v in V:\n        speeds[v] += 1\n    # Find all unique speeds\n    unique_speeds = set(V)\n    # Find all possible distances between the first two milestones\n    distances = []\n    for v in unique_speeds:\n        distances.append(X[1]-X[0]-v*dT[0])\n    # Print results\n    print(len(unique_speeds))\n    print(*sorted(distances))\n\nif __name__ == \"__main__\":\n    main()"]