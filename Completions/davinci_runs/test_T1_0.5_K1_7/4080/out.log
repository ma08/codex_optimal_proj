2022-04-13 18:02:29.601228 """
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 10^5, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
4 1 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
2022-04-13 18:02:29.601244 --------------------------
2022-04-13 18:02:57.143176 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    n, m = map(int, line.split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a_min = min(a)\n    a_max = max(a)\n    a_len = len(a)\n    l = [0] * a_len\n    r = [0] * a_len\n    for i in range(m):\n        line = sys.stdin.readline()\n        l_i, r_i = map(int, line.split())\n        l[l_i - 1] += 1\n        r[r_i - 1] += 1\n    l_sum = l[0]\n    r_sum = r[-1]\n    for i in range(1, a_len):\n        l_sum += l[i]\n        r_sum += r[a_len - i - 1]\n        if l_sum > a[i] - a_min:\n            a_min = a[i] - l_sum\n        if r_sum > a_max - a[a_len - i - 1]:\n            a_max = a[a_len - i - 1] + r_sum\n    print(a_max - a_min)\n    print(0)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport random\n\n\ndef solve(n, m, a, segments):\n    def get_result(a, segments):\n        b = [x for x in a]\n        for i in range(len(segments)):\n            if segments[i]:\n                l, r = segments[i]\n                for j in range(l - 1, r):\n                    b[j] -= 1\n        return max(b) - min(b)\n\n    result = get_result(a, [None] * m)\n    answer = []\n    for i in range(m):\n        segments[i] = None\n        r = get_result(a, segments)\n        if r > result:\n            result = r\n            answer = [i]\n        elif r == result:\n            answer.append(i)\n        segments[i] = [segments[i][0], segments[i][1]]\n\n    print(result)\n    print(len(answer))\n    for i in answer:\n        print(i + 1, end=' ')\n    print()\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    solve(n, m, a, segments)\n\n\ndef stress():\n    while True:\n        n = random.randint(1, 10 ** 5)\n        m = random.randint(0, 300)\n        a = [random.randint(-10 ** 6, 10 ** 6) for _ in range(n)]\n        segments = []\n        for i in range(m):\n            l = random.randint(1, n)\n            r = random.randint(l, n)\n            segments.append([l, r])\n        solve(n, m, a, segments)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nsegs = []\nfor i in range(m):\n    segs.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n# print(segs)\n\n# sort by right endpoints\nsegs.sort(key=lambda x: x[1])\n\n# print(segs)\n\n# dp[i][j] = max-min of a[i:] if we apply segs[:j]\ndp = [[-1] * (m + 1) for _ in range(n + 1)]\n\n# base case\nfor i in range(n + 1):\n    dp[i][m] = 0\n\n# recurrence\nfor i in range(n - 1, -1, -1):\n    for j in range(m - 1, -1, -1):\n        seg = segs[j]\n        diff = a[seg[0] - 1] - a[seg[1] - 1]\n        dp[i][j] = max(dp[i][j + 1], dp[seg[1]][j + 1] + diff)\n\n# print(dp)\n\n# print answer\nprint(dp[0][0])\n\n# find which segments we apply\nans = []\ni = 0\nj = 0\nwhile i < n and j < m:\n    if dp[i][j] == dp[i][j + 1]:\n        j += 1\n    else:\n        seg = segs[j]\n        ans.append(j + 1)\n        i = seg[1]\n        j += 1\n\nprint(len(ans))\nprint(*ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for _ in range(m):\n        segs.append(list(map(int, input().split())))\n    segs.sort(key = lambda x: x[1] - x[0])\n    #print(segs)\n    res = 0\n    cnt = 0\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        res += a[seg[1] - 1] - a[seg[0] - 2]\n        for i in range(seg[0] - 1, seg[1]):\n            a[i] = a[seg[0] - 2]\n        cnt += 1\n    print(res)\n    print(cnt)\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        print(seg[0], end = ' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solution():\n    # read inputs\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    r = []\n    for _ in range(m):\n        l_, r_ = map(int, input().split())\n        l.append(l_-1)\n        r.append(r_-1)\n\n    # find the maximum and minimum value of a\n    a_max = max(a)\n    a_min = min(a)\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a\n    a_max_new = a_max\n    a_min_new = a_min\n    for j in range(m):\n        if a[l[j]] < a[r[j]]:\n            if a[l[j]] < a_min_new:\n                a_min_new = a[l[j]]\n            if a[r[j]] > a_max_new:\n                a_max_new = a[r[j]]\n        else:\n            if a[r[j]] < a_min_new:\n                a_min_new = a[r[j]]\n            if a[l[j]] > a_max_new:\n                a_max_new = a[l[j]]\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a,\n    # and print the number of segments you apply\n    d = a_max_new - a_min_new\n    print(d)\n    if d > 0:\n        q = 0\n        for j in range(m):\n            if (a[l[j]] < a[r[j]] and a_min_new == a[l[j]]) or (a[l[j]] > a[r[j]] and a_min_new == a[r[j]]):\n                q += 1\n                print(j+1, end=' ')\n        print()\n    else:\n        print(0)\n\n\nsolution()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segs = []\n    for i in range(m):\n        segs.append([int(x) for x in sys.stdin.readline().split()])\n    max_diff = 0\n    min_ind = 0\n    max_ind = 0\n    for i in range(n):\n        if a[i] > a[max_ind]:\n            max_ind = i\n        if a[i] < a[min_ind]:\n            min_ind = i\n    max_diff = a[max_ind] - a[min_ind]\n    segs.sort(key=lambda x: x[1])\n    for seg in segs:\n        if seg[0] <= min_ind and seg[1] >= max_ind:\n            for i in range(seg[0], seg[1]+1):\n                a[i] -= 1\n            max_diff += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_a = max(a)\n    min_a = min(a)\n    #print(max_a, min_a)\n    #print(segments)\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    #print(segments)\n    max_d = max_a - min_a\n    max_segments = []\n    for segment in segments:\n        #print(segment)\n        l, r = segment\n        max_in_segment = max(a[l-1:r])\n        min_in_segment = min(a[l-1:r])\n        if max_in_segment - min_in_segment > max_d:\n            max_d = max_in_segment - min_in_segment\n            max_segments = [segment]\n        elif max_in_segment - min_in_segment == max_d:\n            max_segments.append(segment)\n    print(max_d)\n    print(len(max_segments))\n    for i in range(len(max_segments)):\n        print(segments.index(max_segments[i]) + 1, end=\" \")\n    print()\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649872949,
  "id": "cmpl-4wbbxAlj3KEYP3KLR5PIz8JAlgJcC",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:02:57.143601 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    n, m = map(int, line.split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a_min = min(a)\n    a_max = max(a)\n    a_len = len(a)\n    l = [0] * a_len\n    r = [0] * a_len\n    for i in range(m):\n        line = sys.stdin.readline()\n        l_i, r_i = map(int, line.split())\n        l[l_i - 1] += 1\n        r[r_i - 1] += 1\n    l_sum = l[0]\n    r_sum = r[-1]\n    for i in range(1, a_len):\n        l_sum += l[i]\n        r_sum += r[a_len - i - 1]\n        if l_sum > a[i] - a_min:\n            a_min = a[i] - l_sum\n        if r_sum > a_max - a[a_len - i - 1]:\n            a_max = a[a_len - i - 1] + r_sum\n    print(a_max - a_min)\n    print(0)\n\nmain()"
}
2022-04-13 18:02:57.143641 REASON stop
2022-04-13 18:02:57.144127 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport random\n\n\ndef solve(n, m, a, segments):\n    def get_result(a, segments):\n        b = [x for x in a]\n        for i in range(len(segments)):\n            if segments[i]:\n                l, r = segments[i]\n                for j in range(l - 1, r):\n                    b[j] -= 1\n        return max(b) - min(b)\n\n    result = get_result(a, [None] * m)\n    answer = []\n    for i in range(m):\n        segments[i] = None\n        r = get_result(a, segments)\n        if r > result:\n            result = r\n            answer = [i]\n        elif r == result:\n            answer.append(i)\n        segments[i] = [segments[i][0], segments[i][1]]\n\n    print(result)\n    print(len(answer))\n    for i in answer:\n        print(i + 1, end=' ')\n    print()\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    solve(n, m, a, segments)\n\n\ndef stress():\n    while True:\n        n = random.randint(1, 10 ** 5)\n        m = random.randint(0, 300)\n        a = [random.randint(-10 ** 6, 10 ** 6) for _ in range(n)]\n        segments = []\n        for i in range(m):\n            l = random.randint(1, n)\n            r = random.randint(l, n)\n            segments.append([l, r])\n        solve(n, m, a, segments)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:02:57.144285 REASON stop
2022-04-13 18:02:57.144709 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nsegs = []\nfor i in range(m):\n    segs.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n# print(segs)\n\n# sort by right endpoints\nsegs.sort(key=lambda x: x[1])\n\n# print(segs)\n\n# dp[i][j] = max-min of a[i:] if we apply segs[:j]\ndp = [[-1] * (m + 1) for _ in range(n + 1)]\n\n# base case\nfor i in range(n + 1):\n    dp[i][m] = 0\n\n# recurrence\nfor i in range(n - 1, -1, -1):\n    for j in range(m - 1, -1, -1):\n        seg = segs[j]\n        diff = a[seg[0] - 1] - a[seg[1] - 1]\n        dp[i][j] = max(dp[i][j + 1], dp[seg[1]][j + 1] + diff)\n\n# print(dp)\n\n# print answer\nprint(dp[0][0])\n\n# find which segments we apply\nans = []\ni = 0\nj = 0\nwhile i < n and j < m:\n    if dp[i][j] == dp[i][j + 1]:\n        j += 1\n    else:\n        seg = segs[j]\n        ans.append(j + 1)\n        i = seg[1]\n        j += 1\n\nprint(len(ans))\nprint(*ans)"
}
2022-04-13 18:02:57.144764 REASON stop
2022-04-13 18:02:57.151452 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for _ in range(m):\n        segs.append(list(map(int, input().split())))\n    segs.sort(key = lambda x: x[1] - x[0])\n    #print(segs)\n    res = 0\n    cnt = 0\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        res += a[seg[1] - 1] - a[seg[0] - 2]\n        for i in range(seg[0] - 1, seg[1]):\n            a[i] = a[seg[0] - 2]\n        cnt += 1\n    print(res)\n    print(cnt)\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        print(seg[0], end = ' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:02:57.151554 REASON stop
2022-04-13 18:02:57.153027 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solution():\n    # read inputs\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    r = []\n    for _ in range(m):\n        l_, r_ = map(int, input().split())\n        l.append(l_-1)\n        r.append(r_-1)\n\n    # find the maximum and minimum value of a\n    a_max = max(a)\n    a_min = min(a)\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a\n    a_max_new = a_max\n    a_min_new = a_min\n    for j in range(m):\n        if a[l[j]] < a[r[j]]:\n            if a[l[j]] < a_min_new:\n                a_min_new = a[l[j]]\n            if a[r[j]] > a_max_new:\n                a_max_new = a[r[j]]\n        else:\n            if a[r[j]] < a_min_new:\n                a_min_new = a[r[j]]\n            if a[l[j]] > a_max_new:\n                a_max_new = a[l[j]]\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a,\n    # and print the number of segments you apply\n    d = a_max_new - a_min_new\n    print(d)\n    if d > 0:\n        q = 0\n        for j in range(m):\n            if (a[l[j]] < a[r[j]] and a_min_new == a[l[j]]) or (a[l[j]] > a[r[j]] and a_min_new == a[r[j]]):\n                q += 1\n                print(j+1, end=' ')\n        print()\n    else:\n        print(0)\n\n\nsolution()"
}
2022-04-13 18:02:57.153120 REASON stop
2022-04-13 18:02:57.178770 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segs = []\n    for i in range(m):\n        segs.append([int(x) for x in sys.stdin.readline().split()])\n    max_diff = 0\n    min_ind = 0\n    max_ind = 0\n    for i in range(n):\n        if a[i] > a[max_ind]:\n            max_ind = i\n        if a[i] < a[min_ind]:\n            min_ind = i\n    max_diff = a[max_ind] - a[min_ind]\n    segs.sort(key=lambda x: x[1])\n    for seg in segs:\n        if seg[0] <= min_ind and seg[1] >= max_ind:\n            for i in range(seg[0], seg[1]+1):\n                a[i] -= 1\n            max_diff += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:02:57.178909 REASON stop
2022-04-13 18:02:57.180202 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_a = max(a)\n    min_a = min(a)\n    #print(max_a, min_a)\n    #print(segments)\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    #print(segments)\n    max_d = max_a - min_a\n    max_segments = []\n    for segment in segments:\n        #print(segment)\n        l, r = segment\n        max_in_segment = max(a[l-1:r])\n        min_in_segment = min(a[l-1:r])\n        if max_in_segment - min_in_segment > max_d:\n            max_d = max_in_segment - min_in_segment\n            max_segments = [segment]\n        elif max_in_segment - min_in_segment == max_d:\n            max_segments.append(segment)\n    print(max_d)\n    print(len(max_segments))\n    for i in range(len(max_segments)):\n        print(segments.index(max_segments[i]) + 1, end=\" \")\n    print()\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:02:57.180312 REASON stop
