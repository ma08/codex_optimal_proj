["\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segs = []\n    for i in range(m):\n        segs.append([int(x) for x in sys.stdin.readline().split()])\n    max_diff = 0\n    min_ind = 0\n    max_ind = 0\n    for i in range(n):\n        if a[i] > a[max_ind]:\n            max_ind = i\n        if a[i] < a[min_ind]:\n            min_ind = i\n    max_diff = a[max_ind] - a[min_ind]\n    segs.sort(key=lambda x: x[1])\n    for seg in segs:\n        if seg[0] <= min_ind and seg[1] >= max_ind:\n            for i in range(seg[0], seg[1]+1):\n                a[i] -= 1\n            max_diff += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for _ in range(m):\n        segs.append(list(map(int, input().split())))\n    segs.sort(key = lambda x: x[1] - x[0])\n    #print(segs)\n    res = 0\n    cnt = 0\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        res += a[seg[1] - 1] - a[seg[0] - 2]\n        for i in range(seg[0] - 1, seg[1]):\n            a[i] = a[seg[0] - 2]\n        cnt += 1\n    print(res)\n    print(cnt)\n    for seg in segs:\n        if seg[0] == 1:\n            break\n        if seg[0] == seg[1]:\n            continue\n        if a[seg[0] - 2] >= a[seg[1] - 1]:\n            continue\n        print(seg[0], end = ' ')\n    print()\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    n, m = map(int, line.split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a_min = min(a)\n    a_max = max(a)\n    a_len = len(a)\n    l = [0] * a_len\n    r = [0] * a_len\n    for i in range(m):\n        line = sys.stdin.readline()\n        l_i, r_i = map(int, line.split())\n        l[l_i - 1] += 1\n        r[r_i - 1] += 1\n    l_sum = l[0]\n    r_sum = r[-1]\n    for i in range(1, a_len):\n        l_sum += l[i]\n        r_sum += r[a_len - i - 1]\n        if l_sum > a[i] - a_min:\n            a_min = a[i] - l_sum\n        if r_sum > a_max - a[a_len - i - 1]:\n            a_max = a[a_len - i - 1] + r_sum\n    print(a_max - a_min)\n    print(0)\n\nmain()", "\n\nimport random\n\n\ndef solve(n, m, a, segments):\n    def get_result(a, segments):\n        b = [x for x in a]\n        for i in range(len(segments)):\n            if segments[i]:\n                l, r = segments[i]\n                for j in range(l - 1, r):\n                    b[j] -= 1\n        return max(b) - min(b)\n\n    result = get_result(a, [None] * m)\n    answer = []\n    for i in range(m):\n        segments[i] = None\n        r = get_result(a, segments)\n        if r > result:\n            result = r\n            answer = [i]\n        elif r == result:\n            answer.append(i)\n        segments[i] = [segments[i][0], segments[i][1]]\n\n    print(result)\n    print(len(answer))\n    for i in answer:\n        print(i + 1, end=' ')\n    print()\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    solve(n, m, a, segments)\n\n\ndef stress():\n    while True:\n        n = random.randint(1, 10 ** 5)\n        m = random.randint(0, 300)\n        a = [random.randint(-10 ** 6, 10 ** 6) for _ in range(n)]\n        segments = []\n        for i in range(m):\n            l = random.randint(1, n)\n            r = random.randint(l, n)\n            segments.append([l, r])\n        solve(n, m, a, segments)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef solution():\n    # read inputs\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    r = []\n    for _ in range(m):\n        l_, r_ = map(int, input().split())\n        l.append(l_-1)\n        r.append(r_-1)\n\n    # find the maximum and minimum value of a\n    a_max = max(a)\n    a_min = min(a)\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a\n    a_max_new = a_max\n    a_min_new = a_min\n    for j in range(m):\n        if a[l[j]] < a[r[j]]:\n            if a[l[j]] < a_min_new:\n                a_min_new = a[l[j]]\n            if a[r[j]] > a_max_new:\n                a_max_new = a[r[j]]\n        else:\n            if a[r[j]] < a_min_new:\n                a_min_new = a[r[j]]\n            if a[l[j]] > a_max_new:\n                a_max_new = a[l[j]]\n\n    # find the maximum and minimum value of a which can be obtained by applying some subset of the given segments to the array a,\n    # and print the number of segments you apply\n    d = a_max_new - a_min_new\n    print(d)\n    if d > 0:\n        q = 0\n        for j in range(m):\n            if (a[l[j]] < a[r[j]] and a_min_new == a[l[j]]) or (a[l[j]] > a[r[j]] and a_min_new == a[r[j]]):\n                q += 1\n                print(j+1, end=' ')\n        print()\n    else:\n        print(0)\n\n\nsolution()", "\n\nimport sys\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nsegs = []\nfor i in range(m):\n    segs.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n# print(segs)\n\n# sort by right endpoints\nsegs.sort(key=lambda x: x[1])\n\n# print(segs)\n\n# dp[i][j] = max-min of a[i:] if we apply segs[:j]\ndp = [[-1] * (m + 1) for _ in range(n + 1)]\n\n# base case\nfor i in range(n + 1):\n    dp[i][m] = 0\n\n# recurrence\nfor i in range(n - 1, -1, -1):\n    for j in range(m - 1, -1, -1):\n        seg = segs[j]\n        diff = a[seg[0] - 1] - a[seg[1] - 1]\n        dp[i][j] = max(dp[i][j + 1], dp[seg[1]][j + 1] + diff)\n\n# print(dp)\n\n# print answer\nprint(dp[0][0])\n\n# find which segments we apply\nans = []\ni = 0\nj = 0\nwhile i < n and j < m:\n    if dp[i][j] == dp[i][j + 1]:\n        j += 1\n    else:\n        seg = segs[j]\n        ans.append(j + 1)\n        i = seg[1]\n        j += 1\n\nprint(len(ans))\nprint(*ans)", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_a = max(a)\n    min_a = min(a)\n    #print(max_a, min_a)\n    #print(segments)\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    #print(segments)\n    max_d = max_a - min_a\n    max_segments = []\n    for segment in segments:\n        #print(segment)\n        l, r = segment\n        max_in_segment = max(a[l-1:r])\n        min_in_segment = min(a[l-1:r])\n        if max_in_segment - min_in_segment > max_d:\n            max_d = max_in_segment - min_in_segment\n            max_segments = [segment]\n        elif max_in_segment - min_in_segment == max_d:\n            max_segments.append(segment)\n    print(max_d)\n    print(len(max_segments))\n    for i in range(len(max_segments)):\n        print(segments.index(max_segments[i]) + 1, end=\" \")\n    print()\n\nif __name__ == \"__main__\":\n    main()"]