["\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    stack = []\n    for i in range(n):\n        if s[i] == ')':\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                stack.pop()\n        else:\n            stack.append(i)\n    print(len(stack))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(n, s):\n    cnt = 0\n    for i, c in enumerate(s):\n        if c == ')':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return i\n    return n\n\n\ndef main():\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n\nn = int(input())\ns = input()\n\n# If the sequence is already valid, there are no positions that can be changed\nif s.count('(') != s.count(')'):\n    print(0)\n    exit()\n\n# Create a stack to keep track of the open parentheses\nstack = []\nans = 0\nfor i in range(n):\n    if s[i] == '(':\n        stack.append(i)\n    else:\n        # If the stack is empty, it means that the current position is valid\n        if not stack:\n            ans += 1\n        else:\n            # If the stack is not empty, it means that the current position is not valid\n            stack.pop()\n\n# If the stack is empty, it means that the current position is valid\nif not stack:\n    ans += 1\nelse:\n    # If the stack is not empty, it means that the current position is not valid\n    stack.pop()\n\nprint(ans)", "\n\n\ndef solve(n, s):\n    stack = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '(':\n            stack += 1\n        else:\n            if stack > 0:\n                stack -= 1\n            else:\n                ans += 1\n    return ans + stack\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    if n % 2 == 1:\n        print(0)\n        return\n\n    stack = 0\n    res = 0\n    for i in range(0, n):\n        if s[i] == '(':\n            stack += 1\n        else:\n            stack -= 1\n\n        if stack == 0:\n            res += 1\n\n    if stack < 0:\n        print(0)\n        return\n    if stack == 0:\n        print(res)\n        return\n    if stack > 0:\n        print(res - 1)\n        return\n\nif __name__ == '__main__':\n    main()", "\n\n#-----Solution-----\n\nn = int(input())\ns = input()\n\nopened = 0\nclosed = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        opened += 1\n    else:\n        closed += 1\n\nprint(min(opened, closed))"]