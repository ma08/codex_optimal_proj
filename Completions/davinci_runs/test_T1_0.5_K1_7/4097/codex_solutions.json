["\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 1:\n        print(0)\n        return\n    if n == 2:\n        print(0)\n        return\n    if n == 3:\n        if arr[0] + arr[2] == 2 * arr[1]:\n            print(0)\n        else:\n            print(-1)\n        return\n    \n    diffs = []\n    for i in range(n - 1):\n        diffs.append(arr[i+1] - arr[i])\n    \n    diff = diffs[0]\n    for i in diffs:\n        if i != diff:\n            print(-1)\n            return\n    \n    count = 0\n    for i in range(n - 1):\n        if arr[i+1] - arr[i] != diff:\n            count += 1\n    \n    print(count)\n    return\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef min_changes_to_arithmetic_progression(n, b):\n    if n <= 2:\n        return 0\n    b.sort()\n    if n % 2 == 0:\n        d = (b[-1] - b[0]) // (n - 1)\n        if b[0] + d * (n - 1) != b[-1]:\n            return -1\n        changes_left = 0\n        for i in range(n):\n            if b[i] != b[0] + d * i:\n                changes_left += 1\n        changes_right = 0\n        for i in range(n):\n            if b[i] != b[-1] - d * (n - 1 - i):\n                changes_right += 1\n        return min(changes_left, changes_right)\n    else:\n        d = (b[n // 2] - b[0]) // (n // 2)\n        d2 = (b[-1] - b[n // 2]) // (n // 2)\n        if b[0] + d * (n // 2) != b[n // 2] or b[n // 2] + d2 * (n // 2) != b[-1]:\n            return -1\n        changes_left = 0\n        for i in range(n // 2):\n            if b[i] != b[0] + d * i:\n                changes_left += 1\n        changes_right = 0\n        for i in range(n // 2):\n            if b[i + n // 2] != b[n // 2] + d2 * i:\n                changes_right += 1\n        return min(changes_left, changes_right)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(min_changes_to_arithmetic_progression(n, b))", "\n\nn = int(input())\nb = list(map(int, input().split()))\n\nb = [b[i] - i for i in range(n)]\n\nb.sort()\n\nans = 0\n\nfor i in range(n):\n    ans += abs(b[i] - b[n//2])\n\nprint(ans)", "\n\nn = int(input())\nb = [int(x) for x in input().split()]\nb_diff = [b[i+1] - b[i] for i in range(len(b)-1)]\nif len(set(b_diff)) == 1:\n    print(0)\nelif len(set(b_diff)) == 2:\n    if b_diff.count(b_diff[0]) == 1 or b_diff.count(b_diff[0]) == len(b_diff)-1:\n        print(1)\n    else:\n        print(-1)\nelse:\n    print(-1)", "\n\n# TODO:", "\nimport math\n\ndef main():\n    n = int(input())\n    seq = [int(x) for x in input().split()]\n    seq.sort()\n    if n == 1:\n        print(0)\n        return\n    if n == 2:\n        if seq[0] == seq[1]:\n            print(0)\n        else:\n            print(1)\n        return\n    diff = seq[1] - seq[0]\n    for i in range(1, n-1):\n        if seq[i+1] - seq[i] != diff:\n            diff = math.gcd(diff, seq[i+1] - seq[i])\n    if diff == 1:\n        print(2)\n        return\n    if n == 3:\n        if (seq[1] - seq[0]) % diff == 0 and (seq[2] - seq[1]) % diff == 0:\n            print(1)\n        else:\n            print(2)\n        return\n    if (seq[1] - seq[0]) % diff == 0 and (seq[2] - seq[1]) % diff == 0:\n        print(1)\n        return\n    if (seq[2] - seq[1]) % diff == 0 and (seq[3] - seq[2]) % diff == 0:\n        print(1)\n        return\n    print(2)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    if n == 1:\n        print(0)\n    elif n == 2:\n        if lst[0] == lst[1]:\n            print(0)\n        else:\n            print(1)\n    else:\n        check = True\n        diff = lst[1] - lst[0]\n        for i in range(1, n - 1):\n            if lst[i + 1] - lst[i] != diff:\n                check = False\n                break\n        if check:\n            print(0)\n        else:\n            check = True\n            for i in range(n - 1):\n                if lst[i + 1] - lst[i] != diff or lst[i + 1] - lst[i] != diff + 1 or lst[i + 1] - lst[i] != diff - 1:\n                    check = False\n                    break\n            if check:\n                print(1)\n            else:\n                print(-1)\n\nif __name__ == \"__main__\":\n    main()"]