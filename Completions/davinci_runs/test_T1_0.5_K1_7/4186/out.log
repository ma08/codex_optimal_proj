2022-04-13 19:05:15.865846 """
There are $n$ students in a university. The number of students is even. The $i$-th student has programming skill equal to $a_i$. 

The coach wants to form $\frac{n}{2}$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).

Students can solve problems to increase their skill. One solved problem increases the skill by one.

The coach wants to know the minimum total number of problems students should solve to form exactly $\frac{n}{2}$ teams (i.e. each pair of students should form a team). Your task is to find this number.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 100$) — the number of students. It is guaranteed that $n$ is even.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 100$), where $a_i$ is the skill of the $i$-th student.


-----Output-----

Print one number — the minimum total number of problems students should solve to form exactly $\frac{n}{2}$ teams.


-----Examples-----
Input
6
5 10 2 3 14 5

Output
5

Input
2
1 100

Output
99



-----Note-----

In the first example the optimal teams will be: $(3, 4)$, $(1, 6)$ and $(2, 5)$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $1$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $4$ problems so the answer is $1 + 4 = 5$.

In the second example the first student should solve $99$ problems to form a team with the second one.
"""
2022-04-13 19:05:15.865861 --------------------------
2022-04-13 19:05:32.477984 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = [0]*101\nfor i in a:\n    count[i] += 1\n\nans = 0\nfor i in range(1, 101):\n    if count[i] % 2 == 1:\n        ans += count[i]\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    ans = 0\n    for k in d.keys():\n        ans += d[k] // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int,input().split()))\n\n# find the minimum and maximum value\nmin_val = min(a)\nmax_val = max(a)\n\n# create a dictionary to count the frequency of each number\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\n# if the minimum value is 0, then the answer is 0\nif min_val == 0:\n    print(0)\n\n# if the minimum value is not 0, then the answer is the difference between the maximum and minimum values\nelse:\n    print(max_val-min_val)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] == a[j]:\n            count += 1\n            a[i] = a[j] = 101\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = set(a)\n\nd = {}\nfor i in s:\n    d[i] = 0\n\nfor i in a:\n    d[i] += 1\n\nres = 0\nfor i in d.values():\n    if i % 2 != 0:\n        res += i - 1\n    else:\n        res += i\n\nprint(res)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sort the list so that all equal values are together\na.sort()\n\n# create a dictionary of the number of times each number appears in the list\ncount = {}\nfor i in a:\n    if i in count:\n        count[i] += 1\n    else:\n        count[i] = 1\n\n# sort the dictionary by the number of times each number appeared\ncount = sorted(count.items(), key=lambda x: x[1])\n\n# initialize the number of problems solved to 0\nproblems_solved = 0\n\n# for each number in the list, if it has appeared an odd number of times, we need to solve a problem to make it even\nfor i in count:\n    if i[1] % 2 != 0:\n        problems_solved += 1\n\nprint(problems_solved)"
    }
  ],
  "created": 1649876715,
  "id": "cmpl-4wcah4RXYPnXdWJdgiWJisOjfsVOP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 19:05:32.478236 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = [0]*101\nfor i in a:\n    count[i] += 1\n\nans = 0\nfor i in range(1, 101):\n    if count[i] % 2 == 1:\n        ans += count[i]\nprint(ans)"
}
2022-04-13 19:05:32.478269 REASON stop
2022-04-13 19:05:32.480235 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    ans = 0\n    for k in d.keys():\n        ans += d[k] // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 19:05:32.480376 REASON stop
2022-04-13 19:05:32.480823 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int,input().split()))\n\n# find the minimum and maximum value\nmin_val = min(a)\nmax_val = max(a)\n\n# create a dictionary to count the frequency of each number\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\n# if the minimum value is 0, then the answer is 0\nif min_val == 0:\n    print(0)\n\n# if the minimum value is not 0, then the answer is the difference between the maximum and minimum values\nelse:\n    print(max_val-min_val)"
}
2022-04-13 19:05:32.480878 REASON stop
2022-04-13 19:05:32.501676 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] == a[j]:\n            count += 1\n            a[i] = a[j] = 101\n\nprint(count)"
}
2022-04-13 19:05:32.501766 REASON stop
2022-04-13 19:05:32.502684 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-13 19:05:32.502746 REASON stop
2022-04-13 19:05:32.504559 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = set(a)\n\nd = {}\nfor i in s:\n    d[i] = 0\n\nfor i in a:\n    d[i] += 1\n\nres = 0\nfor i in d.values():\n    if i % 2 != 0:\n        res += i - 1\n    else:\n        res += i\n\nprint(res)"
}
2022-04-13 19:05:32.504611 REASON stop
2022-04-13 19:05:32.505432 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sort the list so that all equal values are together\na.sort()\n\n# create a dictionary of the number of times each number appears in the list\ncount = {}\nfor i in a:\n    if i in count:\n        count[i] += 1\n    else:\n        count[i] = 1\n\n# sort the dictionary by the number of times each number appeared\ncount = sorted(count.items(), key=lambda x: x[1])\n\n# initialize the number of problems solved to 0\nproblems_solved = 0\n\n# for each number in the list, if it has appeared an odd number of times, we need to solve a problem to make it even\nfor i in count:\n    if i[1] % 2 != 0:\n        problems_solved += 1\n\nprint(problems_solved)"
}
2022-04-13 19:05:32.505494 REASON stop
