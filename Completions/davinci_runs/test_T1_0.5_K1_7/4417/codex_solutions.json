["\nimport sys\n\ndef equalize_prices(n, k, a):\n    \"\"\"\n    >>> equalize_prices(5, 1, [1, 1, 2, 3, 1])\n    2\n    >>> equalize_prices(4, 2, [6, 4, 8, 5])\n    6\n    >>> equalize_prices(2, 2, [1, 6])\n    -1\n    >>> equalize_prices(3, 5, [2, 5, 7])\n    7\n    \"\"\"\n    a.sort()\n    if k < a[0]:\n        return -1\n    elif k > a[-1]:\n        return -1\n    else:\n        return a[(n-1)//2]\n\nif __name__ == \"__main__\":\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        a = [int(x) for x in sys.stdin.readline().split()]\n        print(equalize_prices(n, k, a))", "\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if max(a) - min(a) <= 2 * k:\n        print(int((max(a) + min(a)) / 2))\n    else:\n        print(-1)", "\n\n#from sys import stdin\n#from collections import deque\n#import queue\n\n#def main():\n#    q = int(stdin.readline())\n#    for _ in range(q):\n#        n,k = map(int,stdin.readline().split())\n#        a = list(map(int,stdin.readline().split()))\n#        a.sort()\n#        ans = 0\n#        if a[0]>k:\n#            ans = -1\n#        else:\n#            ans = a[0]\n#            for i in range(n-1):\n#                if a[i+1]-a[i]>2*k:\n#                    ans = -1\n#                    break\n#                else:\n#                    ans = a[i+1]\n#        print(ans)\n\n#if __name__ == '__main__':\n#    main()\n\nfrom sys import stdin\nfrom collections import deque\nimport queue\n\ndef main():\n    q = int(stdin.readline())\n    for _ in range(q):\n        n,k = map(int,stdin.readline().split())\n        a = list(map(int,stdin.readline().split()))\n        a.sort()\n        ans = 0\n        if a[0]>k:\n            ans = -1\n        else:\n            ans = a[0]\n            for i in range(n-1):\n                if a[i+1]-a[i]>2*k:\n                    ans = -1\n                    break\n                else:\n                    ans = a[i+1]\n        print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\n# SOLUTION\n# This is a simple greedy problem.\n# We want to find the maximum possible value B such that\n# |a_i - B| <= k for all i\n# We can see that if we take B = max(a_i) - k, then we will have\n# a_i - (max(a_i) - k) <= k\n# a_i - max(a_i) <= k\n# - k <= a_i - max(a_i) <= k\n# |a_i - max(a_i)| <= k\n# Thus, B = max(a_i) - k is a valid answer.\n# We can also see that we don't need to consider any other values of B.\n# If we have B < max(a_i) - k, then we have\n# a_i - (max(a_i) - k) > k\n# a_i - max(a_i) > k\n# k < a_i - max(a_i)\n# |a_i - max(a_i)| > k\n# Thus, B < max(a_i) - k is not a valid answer.\n# If we have B > max(a_i) - k, then we have\n# a_i - (max(a_i) - k) < -k\n# a_i - max(a_i) < -k\n# -k < a_i - max(a_i)\n# |a_i - max(a_i)| > k\n# Thus, B > max(a_i) - k is not a valid answer.\n# Thus, the answer is max(a_i) - k if max(a_i) - k > 0, and -1 otherwise.\n\n# CODE\n# This problem is solved by the code below.\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef find_max_price(n, k, prices):\n    \"\"\"\n    Find the maximum possible price B such that |a_i - B| <= k for all i.\n    If such a price B does not exist, return -1.\n    \"\"\"\n    max_price = max(prices)\n    if max_price - k <= 0:\n        return -1\n    else:\n        return max_price - k\n\ndef main():\n    # Read the number of queries\n    q = int(input())\n\n    # Read and process each query\n    for i in range(q):\n        # Read the number of products and the maximum price difference\n        n, k = map(int, input().split())\n\n        # Read the prices of the products\n        prices = list(map(int, input().split()))\n\n        # Find the maximum possible price B\n        B = find_max_price(n, k, prices)\n\n        # Print the answer to the query\n        print(B)\n\nif __name__ == '__main__':\n    main()", "\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_price = a[0]\n    max_price = a[-1]\n    if min_price + k >= max_price - k:\n        print(min_price + k)\n    else:\n        print(-1)", "\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        ans = -1\n        for i in range(n):\n            if a[i] + k >= a[-1]:\n                ans = a[i] + k\n                break\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport fileinput\n\ndef solve(n, k, a):\n    max_a = max(a)\n    min_a = min(a)\n    if max_a - min_a > 2*k:\n        return -1\n    return (max_a + min_a + k) // 2\n\ndef main():\n    f = fileinput.input()\n    q = int(f.readline())\n    for i in range(q):\n        n, k = map(int, f.readline().split())\n        a = list(map(int, f.readline().split()))\n        print(solve(n, k, a))\n\nif __name__ == '__main__':\n    main()"]