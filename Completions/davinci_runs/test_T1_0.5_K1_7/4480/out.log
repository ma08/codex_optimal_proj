2022-04-13 21:10:22.455156 """
Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.
Formally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])
 
Example 1:
Input: A = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:
Input: A = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false

Example 3:
Input: A = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

 
Constraints:

3 <= A.length <= 50000
-10^4 <= A[i] <= 10^4
"""
2022-04-13 21:10:22.455165 --------------------------
2022-04-13 21:11:09.639281 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        avg = total // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == avg:\n                count += 1\n                cur_sum = 0\n        if count == 3 and cur_sum == 0:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    A = [0,2,1,-6,6,-7,9,1,2,0,1]\n    print(Solution().canThreePartsEqualSum(A))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total, part = sum(A), 0\n        if total % 3 != 0:\n            return False\n\n        for i, a in enumerate(A):\n            part += a\n            if part == total // 3:\n                part = 0\n                if i == len(A) - 2:\n                    return True\n                continue\n\n        return False\n\n\nif __name__ == '__main__':\n    A = [0,2,1,-6,6,-7,9,1,2,0,1]\n    s = Solution()\n    print(s.canThreePartsEqualSum(A))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        s = sum(A)\n        if s%3 != 0:\n            return False\n        target = s//3\n        cur_sum = 0\n        cnt = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == target:\n                cnt += 1\n                cur_sum = 0\n        return cnt == 3"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        target = sum(A)\n        if target % 3 != 0:\n            return False\n        target = target // 3\n        cnt = 0\n        s = 0\n        for a in A:\n            s += a\n            if s == target:\n                cnt += 1\n                s = 0\n        if cnt == 3:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == part_sum:\n                cur_sum = 0\n                count += 1\n        return count >= 3"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum_1(self, A: List[int]) -> bool:\n        \"\"\"\n        \u5148\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u4e0d\u80fd\u6574\u96643\uff0c\u5219\u76f4\u63a5\u8fd4\u56deFalse\n        \u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8bb0\u5f55\u4e3a\u7b2c\u4e00\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\n        \u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n        \"\"\"\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        first_part_sum = 0\n        for i in range(len(A)):\n            first_part_sum += A[i]\n            if first_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        second_part_sum = 0\n        for i in range(i+1, len(A)):\n            second_part_sum += A[i]\n            if second_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        return True\n\n    def canThreePartsEqualSum_2(self, A: List[int]) -> bool:\n        \"\"\"\n        \u5148\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u4e0d\u80fd\u6574\u96643\uff0c\u5219\u76f4\u63a5\u8fd4\u56deFalse\n        \u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8bb0\u5f55\u4e3a\u7b2c\u4e00\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\n        \u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n        \"\"\"\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        first_part_sum = 0\n        for i in range(len(A)):\n            first_part_sum += A[i]\n            if first_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        second_part_sum = 0\n        for i in range(i+1, len(A)):\n            second_part_sum += A[i]\n            if second_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        return True"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        sum_ = sum(A)\n        if sum_ % 3 != 0:\n            return False\n        target = sum_ // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == target:\n                cur_sum = 0\n                count += 1\n        return count == 3\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))"
    }
  ],
  "created": 1649884222,
  "id": "cmpl-4weXmDj8yv4iQRDdrwQD9HlHqcSF9",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:11:09.639543 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        avg = total // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == avg:\n                count += 1\n                cur_sum = 0\n        if count == 3 and cur_sum == 0:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    A = [0,2,1,-6,6,-7,9,1,2,0,1]\n    print(Solution().canThreePartsEqualSum(A))"
}
2022-04-13 21:11:09.639578 REASON stop
2022-04-13 21:11:09.640078 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total, part = sum(A), 0\n        if total % 3 != 0:\n            return False\n\n        for i, a in enumerate(A):\n            part += a\n            if part == total // 3:\n                part = 0\n                if i == len(A) - 2:\n                    return True\n                continue\n\n        return False\n\n\nif __name__ == '__main__':\n    A = [0,2,1,-6,6,-7,9,1,2,0,1]\n    s = Solution()\n    print(s.canThreePartsEqualSum(A))"
}
2022-04-13 21:11:09.640206 REASON stop
2022-04-13 21:11:09.640587 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        s = sum(A)\n        if s%3 != 0:\n            return False\n        target = s//3\n        cur_sum = 0\n        cnt = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == target:\n                cnt += 1\n                cur_sum = 0\n        return cnt == 3"
}
2022-04-13 21:11:09.640632 REASON stop
2022-04-13 21:11:09.667720 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        target = sum(A)\n        if target % 3 != 0:\n            return False\n        target = target // 3\n        cnt = 0\n        s = 0\n        for a in A:\n            s += a\n            if s == target:\n                cnt += 1\n                s = 0\n        if cnt == 3:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))"
}
2022-04-13 21:11:09.667813 REASON stop
2022-04-13 21:11:09.679410 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == part_sum:\n                cur_sum = 0\n                count += 1\n        return count >= 3"
}
2022-04-13 21:11:09.679480 REASON stop
2022-04-13 21:11:09.680509 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum_1(self, A: List[int]) -> bool:\n        \"\"\"\n        \u5148\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u4e0d\u80fd\u6574\u96643\uff0c\u5219\u76f4\u63a5\u8fd4\u56deFalse\n        \u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8bb0\u5f55\u4e3a\u7b2c\u4e00\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\n        \u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n        \"\"\"\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        first_part_sum = 0\n        for i in range(len(A)):\n            first_part_sum += A[i]\n            if first_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        second_part_sum = 0\n        for i in range(i+1, len(A)):\n            second_part_sum += A[i]\n            if second_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        return True\n\n    def canThreePartsEqualSum_2(self, A: List[int]) -> bool:\n        \"\"\"\n        \u5148\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u4e0d\u80fd\u6574\u96643\uff0c\u5219\u76f4\u63a5\u8fd4\u56deFalse\n        \u7136\u540e\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff0c\u5982\u679c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8bb0\u5f55\u4e3a\u7b2c\u4e00\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5230\u7b2c\u4e8c\u4e2a\u548c\u7684\u4f4d\u7f6e\uff0c\n        \u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n        \"\"\"\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        part_sum = total_sum // 3\n        first_part_sum = 0\n        for i in range(len(A)):\n            first_part_sum += A[i]\n            if first_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        second_part_sum = 0\n        for i in range(i+1, len(A)):\n            second_part_sum += A[i]\n            if second_part_sum == part_sum:\n                break\n        else:\n            return False\n\n        return True"
}
2022-04-13 21:11:09.680572 REASON stop
2022-04-13 21:11:09.681449 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        sum_ = sum(A)\n        if sum_ % 3 != 0:\n            return False\n        target = sum_ // 3\n        cur_sum = 0\n        count = 0\n        for a in A:\n            cur_sum += a\n            if cur_sum == target:\n                cur_sum = 0\n                count += 1\n        return count == 3\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))"
}
2022-04-13 21:11:09.681505 REASON stop
