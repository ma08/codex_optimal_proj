["\n\ndef main():\n    n, p = map(int, input().split())\n    d = sorted(map(int, input().split()))\n    print(min(d[i] - d[i-1] for i in range(1, n)))\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom math import inf\n\nn, p = map(int, input().split())\n\ndistances = sorted(map(int, input().split()))\n\nmin_dist_from_last = distances[-1]\n\nfor i in range(len(distances) - 2, -1, -1):\n    min_dist_from_last = min(min_dist_from_last, distances[i] + p * (n - i))\n\nprint(min_dist_from_last)", "\n\nn, p = map(int, input().split())\n\ndistances = list(map(int, input().split()))\ndistances.sort()\n\nmin_dist = distances[0]\nfor i in range(1, n):\n    min_dist = min(min_dist, distances[i] - distances[i - 1])\n\nprint(min_dist)", "\n\ndef min_distance(cars, p):\n    cars.sort()\n    dist = cars[0]\n    for i in range(1, len(cars)):\n        if cars[i] - cars[i - 1] < dist:\n            dist = cars[i] - cars[i - 1]\n    return dist - p\n\nif __name__ == '__main__':\n    n, p = [int(i) for i in input().split()]\n    cars = [int(i) for i in input().split()]\n    print(min_distance(cars, p))", "\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, p = [int(i) for i in stdin.readline().split()]\n    distances = [int(i) for i in stdin.readline().split()]\n    distances.sort()\n    heap = [distances[0]]\n    for i in range(1, n):\n        if distances[i] - heappop(heap) >= p:\n            heappush(heap, distances[i])\n        else:\n            heappush(heap, heappop(heap) + p)\n    print(heappop(heap))\n\nmain()", "\n\nn, p = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nfor i in range(1, n):\n    a[i] = min(a[i], a[i-1]+p)\nprint(a[-1])", "\ndef min_distance(n, p, distances):\n    distances = sorted(distances, reverse=True)\n    current_distance = distances[0]\n    for i in range(1, n):\n        current_distance = max(current_distance - p, distances[i])\n    return current_distance\n\nif __name__ == \"__main__\":\n    n, p = map(int, raw_input().split())\n    distances = map(int, raw_input().split())\n    print min_distance(n, p, distances)"]