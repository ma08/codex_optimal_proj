2022-04-13 18:32:43.311314 """
Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, "AZ", "AA", "ZA" — three distinct two-grams.

You are given a string $s$ consisting of $n$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $s$ = "BBAABBBA" the answer is two-gram "BB", which contained in $s$ three times. In other words, find any most frequent two-gram.

Note that occurrences of the two-gram can overlap with each other.


-----Input-----

The first line of the input contains integer number $n$ ($2 \le n \le 100$) — the length of string $s$. The second line of the input contains the string $s$ consisting of $n$ capital Latin letters.


-----Output-----

Print the only line containing exactly two capital Latin letters — any two-gram contained in the given string $s$ as a substring (i.e. two consecutive characters of the string) maximal number of times.


-----Examples-----
Input
7
ABACABA

Output
AB

Input
5
ZZZAA

Output
ZZ



-----Note-----

In the first example "BA" is also valid answer.

In the second example the only two-gram "ZZ" can be printed because it contained in the string "ZZZAA" two times.
"""
2022-04-13 18:32:43.311324 --------------------------
2022-04-13 18:33:00.650844 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\ns = input()\nresult = \"\"\nmax_count = 0\nfor i in range(len(s)-1):\n    if s.count(s[i:i+2]) > max_count:\n        max_count = s.count(s[i:i+2])\n        result = s[i:i+2]\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_char = None\n    for i in range(n-1):\n        count = s.count(s[i:i+2])\n        if count > max_count:\n            max_count = count\n            max_char = s[i:i+2]\n    print(max_char)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main(n, s):\n    count = 0\n    result = \"\"\n    for i in range(n-1):\n        if s[i:i+2] in s[i+1:]:\n            temp = s[i+1:]\n            temp_count = temp.count(s[i:i+2])\n            if temp_count > count:\n                count = temp_count\n                result = s[i:i+2]\n    print(result)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    main(n, s)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\nprint(c.most_common(1)[0][0])"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef two_gram():\n    n = int(input())\n    s = input()\n    two_grams = {}\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams.keys():\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    print(max(two_grams, key=two_grams.get))\n\nif __name__ == \"__main__\":\n    two_gram()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nimport string\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    assert(len(s) == n)\n    assert(all(c in string.ascii_uppercase for c in s))\n    assert(n >= 2 and n <= 100)\n\n    two_grams = [s[i:i+2] for i in range(len(s)-1)]\n    counts = [0]*26**2\n    for two_gram in two_grams:\n        counts[string.ascii_uppercase.index(two_gram[0])*26 + string.ascii_uppercase.index(two_gram[1])] += 1\n    two_gram_max = two_grams[counts.index(max(counts))]\n    print(two_gram_max)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_two_gram = \"\"\n\nfor i in range(n - 1):\n    count = 0\n    for j in range(i, n - 1):\n        if s[j] == s[j + 1]:\n            count += 1\n        else:\n            break\n\n    if count > max_count:\n        max_count = count\n        max_two_gram = s[i] + s[i + 1]\n\nprint(max_two_gram)"
    }
  ],
  "created": 1649874763,
  "id": "cmpl-4wc5Dm1Jzc1utDBCYjV6Y5sFt66TQ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:33:00.651117 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\ns = input()\nresult = \"\"\nmax_count = 0\nfor i in range(len(s)-1):\n    if s.count(s[i:i+2]) > max_count:\n        max_count = s.count(s[i:i+2])\n        result = s[i:i+2]\nprint(result)"
}
2022-04-13 18:33:00.651155 REASON stop
2022-04-13 18:33:00.651572 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_char = None\n    for i in range(n-1):\n        count = s.count(s[i:i+2])\n        if count > max_count:\n            max_count = count\n            max_char = s[i:i+2]\n    print(max_char)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:33:00.651715 REASON stop
2022-04-13 18:33:00.652046 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main(n, s):\n    count = 0\n    result = \"\"\n    for i in range(n-1):\n        if s[i:i+2] in s[i+1:]:\n            temp = s[i+1:]\n            temp_count = temp.count(s[i:i+2])\n            if temp_count > count:\n                count = temp_count\n                result = s[i:i+2]\n    print(result)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    main(n, s)"
}
2022-04-13 18:33:00.652089 REASON stop
2022-04-13 18:33:00.675477 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\nprint(c.most_common(1)[0][0])"
}
2022-04-13 18:33:00.675580 REASON stop
2022-04-13 18:33:00.690763 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef two_gram():\n    n = int(input())\n    s = input()\n    two_grams = {}\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams.keys():\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    print(max(two_grams, key=two_grams.get))\n\nif __name__ == \"__main__\":\n    two_gram()"
}
2022-04-13 18:33:00.690878 REASON stop
2022-04-13 18:33:00.692083 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nimport string\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    assert(len(s) == n)\n    assert(all(c in string.ascii_uppercase for c in s))\n    assert(n >= 2 and n <= 100)\n\n    two_grams = [s[i:i+2] for i in range(len(s)-1)]\n    counts = [0]*26**2\n    for two_gram in two_grams:\n        counts[string.ascii_uppercase.index(two_gram[0])*26 + string.ascii_uppercase.index(two_gram[1])] += 1\n    two_gram_max = two_grams[counts.index(max(counts))]\n    print(two_gram_max)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:33:00.692160 REASON stop
2022-04-13 18:33:00.692921 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_two_gram = \"\"\n\nfor i in range(n - 1):\n    count = 0\n    for j in range(i, n - 1):\n        if s[j] == s[j + 1]:\n            count += 1\n        else:\n            break\n\n    if count > max_count:\n        max_count = count\n        max_two_gram = s[i] + s[i + 1]\n\nprint(max_two_gram)"
}
2022-04-13 18:33:00.692985 REASON stop
