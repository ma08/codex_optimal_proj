["\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    dp2 = dp[:]  # copy.deepcopy(dp)\n    for j in range(h):\n        if dp[j]:\n            dp2[(j + a[i]) % h] = 1\n            dp2[(j + a[i] - 1) % h] = 1  # dp2[(j + a[i] - 1) % h] = 1\n    dp = dp2\n\nprint(sum(dp[l:r + 1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef solve(n, h, l, r, a):\n    dp = [0] * (h + 1)\n    dp[0] = 0\n    for i in range(n):\n        dp2 = [0] * (h + 1)\n        for j in range(h + 1):\n            dp2[j] = dp[j]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp[j - a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j - a[i] + 1])\n            if l <= j <= r:\n                dp2[j] += 1\n        dp = dp2[:]\n    return max(dp)\n\nprint(solve(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * h for _ in range(n)]\ndp[0][0] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if dp[i - 1][j]:\n            dp[i][(j + a[i]) % h] = 1\n            dp[i][(j + a[i] - 1) % h] = 1\n\nprint(sum(dp[-1][l:r + 1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef solve(n, h, l, r, a):\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, h):\n        dp[i] = dp[i-1]\n        if i >= a[0]:\n            dp[i] = max(dp[i], dp[i-a[0]])\n    for i in range(1, n):\n        dp2 = [0] * h\n        dp2[0] = 1\n        for j in range(1, h):\n            dp2[j] = dp2[j-1]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp2[j-a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j-a[i]+1])\n        dp = dp2\n    return sum(dp[l:r+1])\n\nprint(solve(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    dp2 = dp[:]\n    for j in range(h):\n        if dp[j]:\n            dp2[(j + a[i]) % h] = 1\n            dp2[(j + a[i] - 1) % h] = 1\n    dp = dp2\n\nprint(sum(dp[l:r + 1]))\n", "\n\nn = int(input())\na = list(map(int, input().split())\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    dp2 = [0] * h\n    for j in range(h):\n        if dp[j]:\n            dp2[(j + a[i]) % h] = 1\n            dp2[(j + a[i] - 1) % h] = 1\n    dp = dp2\n\nprint(sum(dp[l:r + 1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * h for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, h):\n    dp[0][i] = dp[0][i-1]\n    if i >= a[0]:\n        dp[0][i] = max(dp[0][i], dp[0][i-a[0]])\nfor i in range(1, n):\n    dp[i][0] = 1\n    for j in range(1, h):\n        dp[i][j] = dp[i][j-1]\n        if j >= a[i]:\n            dp[i][j] = max(dp[i][j], dp[i][j-a[i]])\n        if j >= a[i] - 1:\n            dp[i][j] = max(dp[i][j], dp[i-1][j-a[i]+1])\n\nprint(sum(dp[n-1][l:r+1]))\n", "# https://atcoder.jp/contests/dp/tasks/dp_e\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    dp2 = dp[:]\n    for j in range(h):\n        if dp[j]:\n            dp2[(j + a[i]) % h] = 1\n            dp2[(j + a[i] - 1) % h] = 1\n    dp = dp2\n\nprint(sum(dp[l:r + 1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef solve(n, h, l, r, a):\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, h):\n        dp[i] = dp[i-1]\n        if i >= a[0]:\n            dp[i] = max(dp[i], dp[i-a[0]])\n    for i in range(1, n):\n        dp2 = [0] * h\n        dp2[0] = 1\n        for j in range(1, h):\n            dp2[j] = dp2[j-1]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp2[j-a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j-a[i]+1])\n        dp = dp2\n    return sum(dp[l:r+1])\n\nprint(solve(n, h, l, r, a))\n", "#!/usr/bin/env python3\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef solve(n, h, l, r, a):\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, h):\n        dp[i] = dp[i-1]\n        if i >= a[0]:\n            dp[i] = max(dp[i], dp[i-a[0]])\n    for i in range(1, n):\n        dp2 = [0] * h\n        dp2[0] = 1\n        for j in range(1, h):\n            dp2[j] = dp2[j-1]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp2[j-a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j-a[i]+1])\n        dp = dp2\n    return sum(dp[l:r+1])\n\nprint(solve(n, h, l, r, a))\n", "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef solve(n, h, l, r, a):\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, h):\n        dp[i] = dp[i-1]\n        if i >= a[0]:\n            dp[i] = max(dp[i], dp[i-a[0]])\n    for i in range(1, n):\n        dp2 = [0] * h\n        dp2[0] = 1\n        for j in range(1, h):\n            dp2[j] = dp2[j-1]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp2[j-a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j-a[i]+1])\n        dp = dp2\n    return sum(dp[l:r+1])\n\nprint(solve(n, h, l, r, a))\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef solve(n, h, l, r, a):\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, h):\n        dp[i] = dp[i-1]\n        if i >= a[0]:\n            dp[i] = max(dp[i], dp[i-a[0]])\n    for i in range(1, n):\n        dp2 = [0] * h\n        dp2[0] = 1\n        for j in range(1, h):\n            dp2[j] = dp2[j-1]\n            if j >= a[i]:\n                dp2[j] = max(dp2[j], dp2[j-a[i]])\n            if j >= a[i] - 1:\n                dp2[j] = max(dp2[j], dp[j-a[i]+1])\n        dp = dp2\n    return sum(dp[l:r+1])\n\nprint(solve(n, h, l, r, a))\n", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    dp2 = dp[:]\n    for j in range(h):\n        if dp[j]:\n            dp2[(j + a[i]) % h] = 1\n            dp2[(j + a[i] - 1) % h] = 1\n    dp = dp2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(sum(dp[l:r + 1]))\n"]