2022-04-20 10:37:05.846482 num operations 1
2022-04-20 10:37:05.846501 size on input set 1
2022-04-20 10:37:05.846710 using api key kouti
2022-04-20 10:37:12.747224 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0, 0] for i in range(M)]\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = [a, b]\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = [a, b]\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = set()\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.add((a, b))\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())  # N: number of people, M: number of pairs\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])  # a, b: a pair of people\n    print(A)  # A: a list of pairs\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\n\nif __name__ == \"__main__\":\n\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n\n    for i in range(M):\n        for j in range(M):\n            if A[i] == B[j]:\n                print(A[i])\n                exit()\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650451026,
  "object": "edit"
}
2022-04-20 10:37:12.747545 fix syntax errors 8 ['\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0, 0] for i in range(M)]\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = [a, b]\n    print(A)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = [a, b]\n    print(A)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = set()\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.add((a, b))\n    print(A)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())  # N: number of people, M: number of pairs\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])  # a, b: a pair of people\n    print(A)  # A: a list of pairs\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\n\nif __name__ == "__main__":\n\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n\n    for i in range(M):\n        for j in range(M):\n            if A[i] == B[j]:\n                print(A[i])\n                exit()\n    print(-1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 10:37:12.747590 size on output set 8
2022-04-20 10:37:12.747602 num operations 1
2022-04-20 10:37:12.747608 size on input set 1
2022-04-20 10:37:12.747759 using api key sourya
2022-04-20 10:37:22.875542 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451032,
  "object": "edit"
}
2022-04-20 10:37:22.875957 fix syntax errors 8 ["\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:37:22.876064 size on output set 5
