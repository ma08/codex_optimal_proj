2022-04-20 10:54:35.467982 num operations 1
2022-04-20 10:54:35.468012 size on input set 1
2022-04-20 10:54:35.468194 using api key sourya
2022-04-20 10:54:52.199394 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return \"Impossible\"\n    if k < n*a:\n        return n\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 1,
      "text": "\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <numeric>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <list>\n#include <bitset>\n#include <utility>\n#include <cassert>\n#include <iomanip>\n#include <ctime>\n#include <fstream>\n#include <bitset>\nusing namespace std;\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 2,
      "text": "\n#\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 3,
      "text": "import sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 4,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n\n# import sys\n#\n# class Query:\n#     def __init__(self):\n#         self.k = 0\n#         self.n = 0\n#         self.a = 0\n#         self.b = 0\n#\n# def read_queries():\n#     q = int(input())\n#     queries = []\n#     for _ in range(q):\n#         query = Query()\n#         query.k, query.n, query.a, query.b = map(int, input().split())\n#         queries.append(query)\n#     return queries\n#\n# def write_responses(result):\n#     print('\\n'.join(map(str, result)))\n#\n# def solve_query(query):\n#     k = query.k\n#     n = query.n\n#     a = query.a\n#     b = query.b\n#     if k < n*b:\n#         return -1\n#     if k < n*a:\n#         return 0\n#     k -= n*a\n#     return n - k//(a-b)\n#\n# def solve(queries):\n#     result = []\n#     for query in queries:\n#         result.append(solve_query(query))\n#     return result\n#\n# if __name__ == '__main__':\n#     write_responses(solve(read_queries()))\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 7,
      "text": "\n#include<bits/stdc++.h>\n# SOLUTION\nusing namespace std;\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)));\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    }
  ],
  "created": 1650452075,
  "object": "edit"
}
2022-04-20 10:54:52.199745 fix syntax errors 8 ['\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print(\'\\n\'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return "Impossible"\n    if k < n*a:\n        return n\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == \'__main__\':\n    write_responses(solve(read_queries()))\n', "\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <numeric>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <list>\n#include <bitset>\n#include <utility>\n#include <cassert>\n#include <iomanip>\n#include <ctime>\n#include <fstream>\n#include <bitset>\nusing namespace std;\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n#\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "import sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n\n# SOLUTION\n\n# import sys\n#\n# class Query:\n#     def __init__(self):\n#         self.k = 0\n#         self.n = 0\n#         self.a = 0\n#         self.b = 0\n#\n# def read_queries():\n#     q = int(input())\n#     queries = []\n#     for _ in range(q):\n#         query = Query()\n#         query.k, query.n, query.a, query.b = map(int, input().split())\n#         queries.append(query)\n#     return queries\n#\n# def write_responses(result):\n#     print('\\n'.join(map(str, result)))\n#\n# def solve_query(query):\n#     k = query.k\n#     n = query.n\n#     a = query.a\n#     b = query.b\n#     if k < n*b:\n#         return -1\n#     if k < n*a:\n#         return 0\n#     k -= n*a\n#     return n - k//(a-b)\n#\n# def solve(queries):\n#     result = []\n#     for query in queries:\n#         result.append(solve_query(query))\n#     return result\n#\n# if __name__ == '__main__':\n#     write_responses(solve(read_queries()))\n", "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n#include<bits/stdc++.h>\n# SOLUTION\nusing namespace std;\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)));\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"]
2022-04-20 10:54:52.199919 size on output set 8
2022-04-20 10:54:52.199932 num operations 1
2022-04-20 10:54:52.199939 size on input set 1
2022-04-20 10:54:52.200094 using api key derek
2022-04-20 10:54:52.241165 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 10:54:53.742678 using api key sunu
2022-04-20 10:55:05.353117 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k < b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a <= k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef max_play_turns(k, n, a, b, i):\n    if i == k:\n        return 0\n    if i % a == 0 or i % b == 0:\n        return 1 + max_play_turns(k, n, a, b, i + 1)\n    return max_play_turns(k, n, a, b, i + 1)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b, 1))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k // a)\n    return n - (k // b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef max_play_turns(n, a, b):\n    if a == b: return n\n    if a < b: return n - 1\n    if a % b == 0: return n - (a // b)\n    return n - (a // b) - 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        print(max_play_turns(n, a, b))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef max_play_turns(k, n, a, b, c):\n    if k <= b and k <= c:\n        return -1\n    if a == b and a == c:\n        return n\n    if k % a == 0 or k % b == 0 or k % c == 0:\n        return n - 1\n    if k % a < k % b and k % a < k % c:\n        return n - (k % a) - 1\n    if k % b < k % a and k % b < k % c:\n        return n - (k % b) - 1\n    return n - (k % c) - 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b, c = map(int, input().split())\n        print(max_play_turns(k, n, a, b, c))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0 or k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:  # k % a == 0 or k % b == 0\n        return n - (k % a) - 1\n    return n - (k % b) - 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 7,
      "text": "\n\nif __name__ == \"__main__\":\n    pass\n"
    }
  ],
  "created": 1650452093,
  "object": "edit"
}
2022-04-20 10:55:05.353483 fix syntax errors 8 ['\n\ndef max_play_turns(k, n, a, b):\n    if k < b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a <= k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b, i):\n    if i == k:\n        return 0\n    if i % a == 0 or i % b == 0:\n        return 1 + max_play_turns(k, n, a, b, i + 1)\n    return max_play_turns(k, n, a, b, i + 1)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b, 1))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k // a)\n    return n - (k // b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(n, a, b):\n    if a == b: return n\n    if a < b: return n - 1\n    if a % b == 0: return n - (a // b)\n    return n - (a // b) - 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        print(max_play_turns(n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b, c):\n    if k <= b and k <= c:\n        return -1\n    if a == b and a == c:\n        return n\n    if k % a == 0 or k % b == 0 or k % c == 0:\n        return n - 1\n    if k % a < k % b and k % a < k % c:\n        return n - (k % a) - 1\n    if k % b < k % a and k % b < k % c:\n        return n - (k % b) - 1\n    return n - (k % c) - 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b, c = map(int, input().split())\n        print(max_play_turns(k, n, a, b, c))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0 or k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:  # k % a == 0 or k % b == 0\n        return n - (k % a) - 1\n    return n - (k % b) - 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\nif __name__ == "__main__":\n    pass\n']
2022-04-20 10:55:05.353537 size on output set 8
