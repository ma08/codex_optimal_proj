2022-04-20 09:38:58.588991 num operations 1
2022-04-20 09:38:58.589007 size on input set 1
2022-04-20 09:38:58.589186 using api key derek
2022-04-20 09:38:58.816071 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 09:39:00.317960 using api key sunu
2022-04-20 09:39:18.011258 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]\n    # Fill in the first row and column\n    for i in range(len(s)+1):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)+1):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)+1):\n        for j in range(1, len(t)+1):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = \"bbaba\"\n    # t = \"bb\"\n    # s = \"baaba\"\n    # t = \"ab\"\n    # s = \"abcde\"\n    # t = \"abcde\"\n    # s = \"asdfasdf\"\n    # t = \"fasd\"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(1, len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = \"bbaba\"\n    # t = \"bb\"\n    # s = \"baaba\"\n    # t = \"ab\"\n    # s = \"abcde\"\n    # t = \"abcde\"\n    # s = \"asdfasdf\"\n    # t = \"fasd\"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650447540,
  "object": "edit"
}
2022-04-20 09:39:18.011703 fix syntax errors 8 ['\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]\n    # Fill in the first row and column\n    for i in range(len(s)+1):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)+1):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)+1):\n        for j in range(1, len(t)+1):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = "bbaba"\n    # t = "bb"\n    # s = "baaba"\n    # t = "ab"\n    # s = "abcde"\n    # t = "abcde"\n    # s = "asdfasdf"\n    # t = "fasd"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(1, len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = "bbaba"\n    # t = "bb"\n    # s = "baaba"\n    # t = "ab"\n    # s = "abcde"\n    # t = "abcde"\n    # s = "asdfasdf"\n    # t = "fasd"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    """\n    Returns the length of the longest common subsequence of s and t\n    """\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 09:39:18.011824 size on output set 6
2022-04-20 09:39:18.011839 num operations 1
2022-04-20 09:39:18.011846 size on input set 1
2022-04-20 09:39:18.012005 using api key sunu
2022-04-20 09:39:48.477250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef max_substring(s, t):\n\t# Initialize the max_length to be the length of the first character\n\tmax_length = len(t)\n\t# Initialize the current_length to be the length of the first character\n\tcurrent_length = len(t)\n\t# Initialize the index to be 0\n\tindex = 0\n\t# Initialize the current_index to be 0\n\tcurrent_index = 0\n\t# Loop through the length of the string\n\tfor i in range(len(s)):\n\t\t# If the current character is equal to the current character in t\n\t\tif s[i] == t[current_index]:\n\t\t\t# Increment the current_index\n\t\t\tcurrent_index += 1\n\t\t\t# If the current_index is equal to the length of t\n\t\t\tif current_index == len(t):\n\t\t\t\t# Increment the current_index\n\t\t\t\tcurrent_index += 1\n\t\t\t\t# Set the index to be the current index\n\t\t\t\tindex = current_index\n\t\t\t\t# Set the current_length to be the current index\n\t\t\t\tcurrent_length = current_index\n\t\t\t# If the current index is greater than the length of t\n\t\t\telif current_index > len(t):\n\t\t\t\t# Set the current_length to be the current index minus the index\n\t\t\t\tcurrent_length = current_index - index\n\t\t# If the current character is not equal to the current character in t\n\t\telse:\n\t\t\t# If the current index is greater than the length of t\n\t\t\tif current_index > len(t):\n\t\t\t\t# Set the current_length to be the current index minus the index\n\t\t\t\tcurrent_length = current_index - index\n\t\t\t# If the current index is less than the length of t\n\t\t\telse:\n\t\t\t\t# Set the current_length to be the current index\n\t\t\t\tcurrent_length = current_index\n\t\t# If the current length is greater than the max length\n\t\tif current_length > max_length:\n\t\t\t# Set the max length to be the current length\n\t\t\tmax_length = current_length\n\t# Return the max length\n\treturn max_length\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nsys.stdout.write(str(max_substring(s, t)))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the current_index to be 0\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 2,
      "text": "# s = input()\n# t = input()\n\n\ns = \"bbaba\"\nt = \"bb\"\n\n# # s = \"baaba\"\n# # t = \"ab\"\n\n# # s = \"abcde\"\n# # t = \"abcde\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 3,
      "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 4,
      "text": "\n\ns = input()\nt = input()\n\ns = \"bbaba\"\nt = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of t\n    max_length = len(t)\n    # Initialize the current_length to be the length of t\n    current_length = len(t)\n    # Initialize the index to be the length of t\n    index = 0\n    # Initialize the current_index to be the length of t\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the current_index to be 0\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t and the index is greater than 0\n            elif current_index > len(t) and index > 0:\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t and the index is greater than 0\n            if current_index > len(t) and index > 0:\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 5,
      "text": "\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 6,
      "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t) - 1:\n                # Increment the current_index\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index >= len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index >= len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    },
    {
      "index": 7,
      "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n"
    }
  ],
  "created": 1650447558,
  "object": "edit"
}
2022-04-20 09:39:48.477725 fix syntax errors 8 ['\nimport sys\n\ndef max_substring(s, t):\n\t# Initialize the max_length to be the length of the first character\n\tmax_length = len(t)\n\t# Initialize the current_length to be the length of the first character\n\tcurrent_length = len(t)\n\t# Initialize the index to be 0\n\tindex = 0\n\t# Initialize the current_index to be 0\n\tcurrent_index = 0\n\t# Loop through the length of the string\n\tfor i in range(len(s)):\n\t\t# If the current character is equal to the current character in t\n\t\tif s[i] == t[current_index]:\n\t\t\t# Increment the current_index\n\t\t\tcurrent_index += 1\n\t\t\t# If the current_index is equal to the length of t\n\t\t\tif current_index == len(t):\n\t\t\t\t# Increment the current_index\n\t\t\t\tcurrent_index += 1\n\t\t\t\t# Set the index to be the current index\n\t\t\t\tindex = current_index\n\t\t\t\t# Set the current_length to be the current index\n\t\t\t\tcurrent_length = current_index\n\t\t\t# If the current index is greater than the length of t\n\t\t\telif current_index > len(t):\n\t\t\t\t# Set the current_length to be the current index minus the index\n\t\t\t\tcurrent_length = current_index - index\n\t\t# If the current character is not equal to the current character in t\n\t\telse:\n\t\t\t# If the current index is greater than the length of t\n\t\t\tif current_index > len(t):\n\t\t\t\t# Set the current_length to be the current index minus the index\n\t\t\t\tcurrent_length = current_index - index\n\t\t\t# If the current index is less than the length of t\n\t\t\telse:\n\t\t\t\t# Set the current_length to be the current index\n\t\t\t\tcurrent_length = current_index\n\t\t# If the current length is greater than the max length\n\t\tif current_length > max_length:\n\t\t\t# Set the max length to be the current length\n\t\t\tmax_length = current_length\n\t# Return the max length\n\treturn max_length\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nsys.stdout.write(str(max_substring(s, t)))\n', '\n\ns = input()\nt = input()\n\n# s = "bbaba"\n# t = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the current_index to be 0\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '# s = input()\n# t = input()\n\n\ns = "bbaba"\nt = "bb"\n\n# # s = "baaba"\n# # t = "ab"\n\n# # s = "abcde"\n# # t = "abcde"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '\n\ns = input()\nt = input()\n\n# s = "bbaba"\n# t = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '\n\ns = input()\nt = input()\n\ns = "bbaba"\nt = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of t\n    max_length = len(t)\n    # Initialize the current_length to be the length of t\n    current_length = len(t)\n    # Initialize the index to be the length of t\n    index = 0\n    # Initialize the current_index to be the length of t\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the current_index to be 0\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t and the index is greater than 0\n            elif current_index > len(t) and index > 0:\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t and the index is greater than 0\n            if current_index > len(t) and index > 0:\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '\ns = input()\nt = input()\n\n# s = "bbaba"\n# t = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '\n\ns = input()\nt = input()\n\n# s = "bbaba"\n# t = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t) - 1:\n                # Increment the current_index\n                current_index = 0\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index >= len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index >= len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n', '\n\ns = input()\nt = input()\n\n# s = "bbaba"\n# t = "bb"\n\n# s = "baaba"\n# t = "ab"\n\n# s = "abcde"\n# t = "abcde"\n\n# s = "asdfasdf"\n# t = "fasd"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))\n']
2022-04-20 09:39:48.477923 size on output set 8
