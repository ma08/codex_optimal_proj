2022-04-20 09:23:29.297124 num operations 1
2022-04-20 09:23:29.297142 size on input set 1
2022-04-20 09:23:29.297349 using api key sourya
2022-04-20 09:23:37.951885 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for i, exam in enumerate(exams):\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = i + 1\n        schedule[d - 1] = i + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        start, end, count = exam\n        if end - start < count:\n            print(-1)\n            return\n        for i in range(start, end):\n            if schedule[i] != 0:\n                print(-1)\n                return\n            schedule[start + i] = exam[0]\n        schedule[end - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * (n + 1)\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[2])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        if schedule[s] != 0:\n            print(-1)\n            return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[2]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n            schedule[s + i] = exam[2]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650446609,
  "object": "edit"
}
2022-04-20 09:23:37.952192 fix syntax errors 8 ['\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for i, exam in enumerate(exams):\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = i + 1\n        schedule[d - 1] = i + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        start, end, count = exam\n        if end - start < count:\n            print(-1)\n            return\n        for i in range(start, end):\n            if schedule[i] != 0:\n                print(-1)\n                return\n            schedule[start + i] = exam[0]\n        schedule[end - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * (n + 1)\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[2])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        if schedule[s] != 0:\n            print(-1)\n            return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[0]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n        for i in range(c):\n            schedule[s + i] = exam[2]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    schedule = [0] * n\n    for exam in exams:\n        s, d, c = exam\n        if d - s < c:\n            print(-1)\n            return\n        for i in range(s, d):\n            if schedule[i] != 0:\n                print(-1)\n                return\n            schedule[s + i] = exam[2]\n        schedule[d - 1] = m + 1\n    print(*schedule)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 09:23:37.952360 size on output set 7
