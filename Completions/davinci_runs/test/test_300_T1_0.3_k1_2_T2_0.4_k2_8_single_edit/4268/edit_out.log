2022-04-20 10:48:50.057267 num operations 1
2022-04-20 10:48:50.057288 size on input set 1
2022-04-20 10:48:50.057685 using api key sourya
2022-04-20 10:48:56.274860 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import math\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if math.sqrt(dist) == int(math.sqrt(dist)):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, input().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451730,
  "object": "edit"
}
2022-04-20 10:48:56.275183 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if math.sqrt(dist) == int(math.sqrt(dist)):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, input().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:48:56.275338 size on output set 5
2022-04-20 10:48:56.275352 num operations 1
2022-04-20 10:48:56.275359 size on input set 1
2022-04-20 10:48:56.275515 using api key soukgp
2022-04-20 10:49:06.123998 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())  # n is number of points, d is dimension\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))  # points[i][j] is j-th coordinate of i-th point\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\nn, d = map(int, input().split())\npoints = []\nfor i in range(n):\n    points.append(list(map(int, input().split())))\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        distance = 0\n        for k in range(d):\n            distance += (points[i][k] - points[j][k]) ** 2\n        if math.sqrt(distance).is_integer():\n            count += 1\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "import math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451736,
  "object": "edit"
}
2022-04-20 10:49:06.124288 fix syntax errors 8 ["\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())  # n is number of points, d is dimension\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))  # points[i][j] is j-th coordinate of i-th point\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", '\nimport math\n\nn, d = map(int, input().split())\npoints = []\nfor i in range(n):\n    points.append(list(map(int, input().split())))\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        distance = 0\n        for k in range(d):\n            distance += (points[i][k] - points[j][k]) ** 2\n        if math.sqrt(distance).is_integer():\n            count += 1\nprint(count)\n', "import math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:49:06.124500 size on output set 5
