2022-04-20 10:41:23.236672 num operations 1
2022-04-20 10:41:23.236693 size on input set 1
2022-04-20 10:41:23.236904 using api key kouti
2022-04-20 10:41:39.999007 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1] + 1\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max_subarray_sum(a))\n\ndef max_subarray_sum(a):\n    \"\"\"\n    Returns the maximum subarray sum of a.\n    \"\"\"\n    max_sum = a[0]\n    for i in range(len(a)):\n        sum = 0\n        for j in range(i, len(a)):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451283,
  "object": "edit"
}
2022-04-20 10:41:39.999488 fix syntax errors 8 ['\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1] + 1\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    """\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    """\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    """\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    """\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max_subarray_sum(a))\n\ndef max_subarray_sum(a):\n    """\n    Returns the maximum subarray sum of a.\n    """\n    max_sum = a[0]\n    for i in range(len(a)):\n        sum = 0\n        for j in range(i, len(a)):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 10:41:39.999640 size on output set 4
2022-04-20 10:41:39.999653 num operations 1
2022-04-20 10:41:39.999659 size on input set 1
2022-04-20 10:41:39.999818 using api key gabby
2022-04-20 10:41:47.440766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nfor i in range(1,n+1):\n    print(i,end='')\n"
    },
    {
      "index": 1,
      "text": "\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"
    },
    {
      "index": 2,
      "text": "\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"
    },
    {
      "index": 3,
      "text": "\nS = input() \nT = input() \n\n# initialize the number of changes needed\nchanges = 0 \n\n# iterate through the string\nfor i in range(len(S)): \n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]: \n        # increment the number of changes needed\n        changes += 1 \n\n# print the number of changes needed\nprint(changes) \n"
    },
    {
      "index": 4,
      "text": "\n\nS = input(\"\")\nT = input(\"\")\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"
    },
    {
      "index": 5,
      "text": "\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T:\n    if S[i] != T[i]:\n        # increment the number of changes needed:\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"
    },
    {
      "index": 6,
      "text": "\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed \nprint(changes) \n"
    },
    {
      "index": 7,
      "text": "\n\nS = input().rstrip()\nT = input().rstrip()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"
    }
  ],
  "created": 1650451300,
  "object": "edit"
}
2022-04-20 10:41:47.441053 fix syntax errors 8 ["\nn = int(input())\nfor i in range(1,n+1):\n    print(i,end='')\n", '\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n', '\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n', '\nS = input() \nT = input() \n\n# initialize the number of changes needed\nchanges = 0 \n\n# iterate through the string\nfor i in range(len(S)): \n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]: \n        # increment the number of changes needed\n        changes += 1 \n\n# print the number of changes needed\nprint(changes) \n', '\n\nS = input("")\nT = input("")\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n', '\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T:\n    if S[i] != T[i]:\n        # increment the number of changes needed:\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n', '\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed \nprint(changes) \n', '\n\nS = input().rstrip()\nT = input().rstrip()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n']
2022-04-20 10:41:47.441105 size on output set 7
