2022-04-20 10:07:58.739920 num operations 1
2022-04-20 10:07:58.739940 size on input set 1
2022-04-20 10:07:58.740153 using api key sourya
2022-04-20 10:08:12.402403 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\n\ndef find_divisor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 1,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2 * i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 2,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2 * i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a, sep=' ')\n"
    },
    {
      "index": 4,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 5,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\n\ndef find_divisor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 6,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):  # O(sqrt(n))\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):  # O(n * sqrt(n))\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):  # O(sqrt(n))\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    },
    {
      "index": 7,
      "text": "\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n"
    }
  ],
  "created": 1650449278,
  "object": "edit"
}
2022-04-20 10:08:12.402732 fix syntax errors 8 ['\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\n\ndef find_divisor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', '\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2 * i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', '\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2 * i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', "\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a, sep=' ')\n", '\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', '\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\n\ndef find_divisor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2 * i] == b[2 * i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2 * i] * b[2 * i + 1] // find_divisor(b[2 * i] * b[2 * i + 1]))\n    return a\n\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', '\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):  # O(sqrt(n))\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):  # O(n * sqrt(n))\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):  # O(sqrt(n))\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n', '\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef find_divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef solve(n, b):\n    a = []\n    for i in range(n):\n        if b[2*i] == b[2*i + 1]:\n            a.append(find_prime(b[2*i]))\n        else:\n            a.append(b[2*i] * b[2*i + 1] // find_divisor(b[2*i] * b[2*i + 1]))\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\na = solve(n, b)\nprint(*a)\n']
2022-04-20 10:08:12.402928 size on output set 5
2022-04-20 10:08:12.402944 num operations 1
2022-04-20 10:08:12.402951 size on input set 1
2022-04-20 10:08:12.403107 using api key sourya
2022-04-20 10:08:24.293758 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\nn = int(input())\nb = list(map(int, input().split()))\na = []\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input()) \nb = list(map(int, input().split())) \n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n - i - 1])\n\nprint(*a)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\np = []\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[i + n])\n\nprint(*a)\n"
    },
    {
      "index": 5,
      "text": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[i + n])\n\nprint(*a)\n"
    },
    {
      "index": 7,
      "text": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = []\n\nfor i in range(n):\n    if is_prime(a[i]):\n        b.append(a[i])\n    else:\n        b.append(a[i] // a[n + i])\n\nprint(*a)\n"
    }
  ],
  "created": 1650449292,
  "object": "edit"
}
2022-04-20 10:08:24.294057 fix syntax errors 8 ['\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n', 'import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\nn = int(input())\nb = list(map(int, input().split()))\na = []\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n', '#!/usr/bin/env python3\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input()) \nb = list(map(int, input().split())) \n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n', '\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n - i - 1])\n\nprint(*a)\n', '\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\np = []\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[i + n])\n\nprint(*a)\n', 'import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[n + i])\n\nprint(*a)\n', '\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n    if is_prime(b[i]):\n        a.append(b[i])\n    else:\n        a.append(b[i] // b[i + n])\n\nprint(*a)\n', 'import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = []\n\nfor i in range(n):\n    if is_prime(a[i]):\n        b.append(a[i])\n    else:\n        b.append(a[i] // a[n + i])\n\nprint(*a)\n']
2022-04-20 10:08:24.294186 size on output set 8
