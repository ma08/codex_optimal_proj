2022-04-20 09:37:54.868261 num operations 1
2022-04-20 09:37:54.868283 size on input set 1
2022-04-20 09:37:54.868463 using api key soukgp
2022-04-20 09:38:14.270263 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n, r = map(int, input().split())\n# a = list(map(int, input().split()))\n\n# def is_heated(i):\n#     for j in range(i - r + 1, i + r):\n#         if j >= 0 and j < n:\n#             if a[j] == 1:\n#                 return True\n#     return False\n\n# def is_possible():\n#     for i in range(n):\n#         if not is_heated(i):\n#             return False\n#     return True\n\n# def solve():\n#     if not is_possible():\n#         return -1\n#     ans = 0\n#     for i in range(n):\n#         if a[i] == 0:\n#             ans += 1\n#             a[i] = 1\n#             if not is_possible():\n#                 return -1\n#     return ans\n\n# print(solve())\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 1,
      "text": "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 2,
      "text": "# coding: utf-8\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def is_heated(i):\n        for j in range(i - r + 1, i + r):\n            if j >= 0 and j < n:\n                if a[j] == 1:\n                    return True\n        return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 4,
      "text": "import sys\nsys.setrecursionlimit(10**7)\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i, a):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible(a):\n    for i in range(n):\n        if not is_heated(i, a):\n            return False\n    return True\n\n    if not is_possible(a):\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible(a):\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 6,
      "text": "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    },
    {
      "index": 7,
      "text": "\n\nn, r = map(int, input().split()) # \u5165\u529b\na = list(map(int, input().split())) # \u5165\u529b\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n"
    }
  ],
  "created": 1650447475,
  "object": "edit"
}
2022-04-20 09:38:14.270635 fix syntax errors 8 ['\n\n# n, r = map(int, input().split())\n# a = list(map(int, input().split()))\n\n# def is_heated(i):\n#     for j in range(i - r + 1, i + r):\n#         if j >= 0 and j < n:\n#             if a[j] == 1:\n#                 return True\n#     return False\n\n# def is_possible():\n#     for i in range(n):\n#         if not is_heated(i):\n#             return False\n#     return True\n\n# def solve():\n#     if not is_possible():\n#         return -1\n#     ans = 0\n#     for i in range(n):\n#         if a[i] == 0:\n#             ans += 1\n#             a[i] = 1\n#             if not is_possible():\n#                 return -1\n#     return ans\n\n# print(solve())\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', '\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', '# coding: utf-8\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', '\n\ndef solve():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def is_heated(i):\n        for j in range(i - r + 1, i + r):\n            if j >= 0 and j < n:\n                if a[j] == 1:\n                    return True\n        return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', 'import sys\nsys.setrecursionlimit(10**7)\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i, a):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible(a):\n    for i in range(n):\n        if not is_heated(i, a):\n            return False\n    return True\n\n    if not is_possible(a):\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible(a):\n                return -1\n    return ans\n\nprint(solve())\n', '\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', '\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n', '\n\nn, r = map(int, input().split()) # 入力\na = list(map(int, input().split())) # 入力\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n']
2022-04-20 09:38:14.270878 size on output set 8
2022-04-20 09:38:14.270898 num operations 1
2022-04-20 09:38:14.270906 size on input set 1
2022-04-20 09:38:14.271070 using api key sourya
2022-04-20 09:38:20.494648 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----#\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 2,
      "text": "#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 3,
      "text": "\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\nunwarmed = 0\nheaters = 0\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 4,
      "text": "\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r + 1] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 5,
      "text": "\n#\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 6,
      "text": "\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    },
    {
      "index": 7,
      "text": "\n\n# -----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"
    }
  ],
  "created": 1650447494,
  "object": "edit"
}
2022-04-20 09:38:20.494935 fix syntax errors 8 ['\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n\n#-----Solution-----#\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\nunwarmed = 0\nheaters = 0\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r + 1] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n#\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n', '\n\n# -----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n']
2022-04-20 09:38:20.495085 size on output set 7
