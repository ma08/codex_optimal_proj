["S,W=list(map(int,input().split()))\nif W<S:\n    print('safe')\nelse:\n    print('unsafe')\n", "S,W=map(int,input().split())\n\nif S>W:\n  print('safe')\nelse:\n  print('unsafe')", "s, w = map(int, input().split())\nif s <= w:\n  print('unsafe')\nelse:\n  print('safe')", "def resolve():\n    s, w = map(int,input().split())\n    print('safe' if s>w else 'unsafe')\n\nresolve()", "S, W = map(int, input().split())\nif S > W:\n    print('safe')\nelse:\n    print('unsafe')", "s, w = list(map(int, input().split()))\nprint(('unsafe' if w >= s else 'safe'))\n", "s,w = map(int,input().split())\nif s <= w :\n    print('unsafe')\nelse :\n    print('safe')", "s,w = list(map(int,input().split()))\n\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')\n", "s,w = list(map(int,input().split()))\n\nif s > w:\n    print('safe')\nelse:\n    print('unsafe')", "S,W=map(int,input().split())\nif S<=W:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "s, w = map(int,input().split())\n\nif w >= s :\n    print('unsafe')\n\nelse :\n    print('safe')", "S, W = map(int,input().split())\nif S > W:\n  print('safe')\nelse:\n  print('unsafe')", "s, w = list(map(int, input().split()))\nif s <= w:\n    print('unsafe')\nelse:\n    print('safe')\n", "S,W = map(int,input().split())\nif W>=S:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "S,W = map(int,input().split())\nprint(\"unsafe\") if S<=W else print(\"safe\")", "a, b = map(int, input().split())\nif a <= b:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "s, w = list(map(int, input().split()))\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')\n", "S, W = map(int,input().split())\nif S <= W:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "def __starting_point():\n    s,w = list(map(int,input().split()))\n    if s > w:\n        print(\"safe\")\n    else:\n        print(\"unsafe\")\n\n__starting_point()", "S, W = map(int, input().split())\nprint('unsafe' if W >= S else 'safe')", "S,W = list(map(int, input().split()))\nprint(('unsafe' if S <= W else 'safe'))\n", "a,w=map(int,input().split())\n\nif w>=a:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "s,w=map(int,input().split())\nprint(['safe','unsafe'][s<=w])", "S, W = map(int, input().split())\nif S <= W:\n    print('unsafe')\n    return\nelse:\n    print('safe')\n    return", "s, w = list(map(int, input().split()))\nif w >= s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")\n", "s,w = map(int,input().split())\nprint(['safe','unsafe'][w>=s])", "S,W = map(int,input().split())\nif W >= S:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "def main() -> None:\n    s, w = list(map(int, input().split()))\n\n    print(('unsafe' if s <= w else 'safe'))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S,W = map(int,input().split())\nif S<=W:print(\"unsafe\")\nelse:print(\"safe\")", "s, w = map(int, input().split())\n\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nS, W = na()\nprint('unsafe') if W >= S else print('safe')", "s,w=map(int,input().split())\nif s<=w:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "S, W = map(int, input().split())\n\nif W >= S:\n    print('unsafe')\nelse:\n    print('safe')", "s,w = map(int,input().split())\nif(s <= w): print(\"unsafe\")\nelse: print(\"safe\")", "S,W=map(int, input().split())\nif S<=W:\n    print('unsafe')\nelse:\n    print('safe')", "s,w = map(int, input().split())\n\nif(s>w):\n    print(\"safe\")\nelse:\n    print(\"unsafe\")", "s,w = list(map(int,input().split()))\n\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')\n", "s,w=map(int,input().split())\nif s>w:\n  print('safe')\nelse:\n  print('unsafe')", "s, w = map(int, input().split())\nif w >= s:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "s,w = input().split()\n\nif int(s) <= int(w):\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "s, w = map(int, input().split())\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')", "s, w = map(int, input().split())\nprint('unsafe') if s <= w else print('safe')", "S,W = map(int,input().split())\n\nif  S <= W :\n    print(\"unsafe\")\nelse :\n    print(\"safe\")", "s,w= map(int, input().split())\n\nif s>w:\n  print('safe')\nelse:\n    print('unsafe')", "S,W = list(map(int, input().split()))\n\nif S<=W:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")\n", "s, w = map(int, input().split())\nif w >= s:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "S,W=list(map(int,input().split()))\nif S>W:\n    print('safe')\nelse:\n    print('unsafe')\n", "s,w=map(int,input().split())\nprint('unsafe') if w>=s else print('safe')", "S,W = map(int,input().split())\nif S <= W:\n  print('unsafe')\nelse:\n  print('safe')", "s, w = list(map(int, input().split()))\n\nif w >= s:\n    print('unsafe')\nelse:\n    print('safe')\n", "a,b = map(int,input().split())\n\nif a <= b:\n    print(\"unsafe\")\n\nelse:\n    print(\"safe\")", "s, w = map(int, input().split())\nif w >= s:\n  print('unsafe')\nelse:\n  print('safe')", "S,W = map(int,input().split())\nif(S <= W):\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "# 164 A\nS,W = list(map(int, input().split()))\nprint('safe') if S > W else print('unsafe')", "S,W=map(int,input().split())\nif S<=W:print('unsafe')\nelse:print('safe')", "s,w = list(map(int,input().split()))\nif(w >= s):\n    print(\"unsafe\")\nelse:\n    print(\"safe\")\n", "number = input().split(\" \")\nS = int(number[0])\nW = int(number[1])\n\nif S > W:\n    print(\"safe\")\nelse:\n    print(\"unsafe\")", "nums = [int(e) for e in input().split()]\n\nSheep = nums[0]\nWolves = nums[1]\n\nif Sheep > Wolves:\n  print(\"safe\")\nelse:\n  print(\"unsafe\")  ", "import sys\n\nS, W = map(int, input().split())\n\nif S > W:\n    print('safe')\nelse:\n    print('unsafe')", "S,W=list(map(int,input().split()))\nif S>W:\n    print(\"safe\")\nelse:\n    print(\"unsafe\")\n", "s, w = map(int, input().split())\nif s <= w:\n    print('unsafe')\nelse:\n    print('safe')", "# coding: utf-8\n# Your code here!\n\n[s,w] = input().split()\ns = int(s)\nw = int(w)\n\nif w >= s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")\n", "S,W = map(int,input().split())\nprint('safe' if S > W else 'unsafe')", "s, w = map(int, input().split())\n\nif s <= w:\n    print('unsafe')\nelse:\n    print('safe')", "a, b = map(int, input().split())\nif a > b:\n  print('safe')\nelse:\n  print('unsafe')", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\ns, w = [int(i) for i in input().split()]\n\ntmp = 0\nres = \"safe\"\n\nif w >= s:\n    res = \"unsafe\"\n\nprint(res)\n", "s,w=list(map(int,input().split()))\n\nif w>=s:\n    print('unsafe')\nelse :\n    print('safe')\n", "S,W = map(int, input().split())\nif W >= S:\n  print('unsafe')\nelse:\n  print('safe')", "s,w = map(int,input().split())\nprint('unsafe' if s<=w else 'safe')", "s,w = map(int,input().split())\nprint(\"unsafe\" if w>=s else \"safe\")", "def sheep_and_wolves():\n    S, W = map(int,input().split())\n    res = \"safe\"\n    if W >= S:\n        res = \"unsafe\"\n    print(res)\n    \nsheep_and_wolves()", "s, w = map(int, input().split())\nif w >= s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "S,W=map(int,input().split())\nif S<=W:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "S, W = list(map(int, input().split()))\n\nif S <= W:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")\n", "s, w = map(int, input().split())\nprint('unsafe' if s <= w else 'safe')", "s,w=map(int,input().split())\nif w>=s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "s,w=list(map(int,input().split()))\nprint(('unsafe' if s<=w else 'safe'))\n", "S, W = list(map(int, input().split()))\n\nif S <= W:\n    print('unsafe')\nelse:\n    print('safe')\n", "s,w = map(int,input().split())\nif s <= w :\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "a = input().split()\na = [ int(i) for i in a ]\n\nif a[0] <= a[1]:\n  print(\"unsafe\")\nelse:\n  print(\"safe\")", "sheep, wolves = map(int, input().split())\n\nif sheep > wolves:\n    print(\"safe\")\nelif sheep <= wolves:\n    print(\"unsafe\")", "S,F= map(int,input().split())\nif S <= F:\n    print('unsafe')\nelse:\n    print('safe')", "s, w = list(map(int, input().split()))\nif w >= s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")\n", "S, W = map(int, input().split())\nif W >= S:\n\tprint('unsafe')\nelse:\n  \tprint('safe')", "s,w = map(int,input().split())\nprint('unsafe' if w >= s else 'safe')", "s, w = map(int, input().split())\nif w>=s:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "S,W = map(int,input().split())\nprint('unsafe' if S <= W else 'safe')", "s,w=map(int, input().split())\nif s>w:\n    print(\"safe\")\nelse:\n    print(\"unsafe\")", "a, b = map(int, input().split())\n\nif a > b:\n    print('safe')\nelse:\n    print('unsafe')", "a,b = map(int,input().split())\nprint('safe' if a > b else 'unsafe')", "#ABC164\nS,W=map(int,input().split())\n#----------\u4ee5\u4e0a\u5165\u529b----------\nif S <= W:\n    print ('unsafe')\nelse:\n    print ('safe')", "S,W=map(int,input().split())\nif S<W:\n    print('unsafe')\nelif S==W:\n    print('unsafe')\nelse:\n    print('safe')", "S,W = map(int,input().split())\nif S <= W:\n    print(\"unsafe\")\nelse:\n    print(\"safe\")", "s,w = map(int,input().split())\nif s > w:\n  print('safe')\nelse:\n  print('unsafe')", "S, W = list(map(int, input().split()))\n\nprint((\"unsafe\" if S <= W else \"safe\"))\n", "S,W=map(int,input().split())\nif W>=S:\n    print(\"unsafe\")\nelse:print(\"safe\")", "s,w= list(map(int,input().split()))\nif s >w:\n  print(\"safe\")\nelse:\n  print(\"unsafe\")\n"]