2022-04-20 10:49:20.909305 num operations 1
2022-04-20 10:49:20.909328 size on input set 1
2022-04-20 10:49:20.909498 using api key kouti
2022-04-20 10:49:34.306987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    ingredients = [int(x) for x in sys.stdin.readline().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport heapq\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    heapq.heapify(arr)\n    while len(arr) > 1:\n        heapq.heappush(arr, (heapq.heappop(arr) + heapq.heappop(arr)) / 2)\n    print(arr[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [float(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] # [1, 2, 3, 4, 5]\n    heapq.heapify(ingredients) # [1, 2, 3, 4, 5]\n    while len(ingredients) > 1: # 5 > 1\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2) # [1, 2, 3, 4, 5] -> [1.5, 2, 3, 4, 5] -> [2, 2, 3, 4, 5] -> [2.5, 3, 3, 4, 5] -> [3, 3, 3, 4, 5] -> [3.5, 3, 4, 4, 5] -> [4, 3, 4, 4, 5] -> [4.5, 4, 4, 4, 5] -> [4, 4, 4, 4, 5] -> [4.5, 4, 4, 5, 5] -> [4, 4, 4, 5, 5] -> [4.5, 4, 5, 5, 5] -> [4, 4, 5, 5, 5] -> [4.5, 5, 5, 5, 5] -> [5, 5, 5, 5, 5] -> [5, 5, 5, 5]\n    print(ingredients[0]) # 5\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] # [1, 2, 3, 4, 5]\n    heapq.heapify(ingredients) # [1, 2, 3, 4, 5]\n    while len(ingredients) > 1: # 4\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2) # [1.5, 2.5, 3, 4, 5]\n    print(ingredients[0]) # 1.5\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] #split the string by space\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451761,
  "object": "edit"
}
2022-04-20 10:49:34.307321 fix syntax errors 8 ["import sys\n\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    ingredients = [int(x) for x in sys.stdin.readline().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    heapq.heapify(arr)\n    while len(arr) > 1:\n        heapq.heappush(arr, (heapq.heappop(arr) + heapq.heappop(arr)) / 2)\n    print(arr[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [float(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] # [1, 2, 3, 4, 5]\n    heapq.heapify(ingredients) # [1, 2, 3, 4, 5]\n    while len(ingredients) > 1: # 5 > 1\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2) # [1, 2, 3, 4, 5] -> [1.5, 2, 3, 4, 5] -> [2, 2, 3, 4, 5] -> [2.5, 3, 3, 4, 5] -> [3, 3, 3, 4, 5] -> [3.5, 3, 4, 4, 5] -> [4, 3, 4, 4, 5] -> [4.5, 4, 4, 4, 5] -> [4, 4, 4, 4, 5] -> [4.5, 4, 4, 5, 5] -> [4, 4, 4, 5, 5] -> [4.5, 4, 5, 5, 5] -> [4, 4, 5, 5, 5] -> [4.5, 5, 5, 5, 5] -> [5, 5, 5, 5, 5] -> [5, 5, 5, 5]\n    print(ingredients[0]) # 5\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] # [1, 2, 3, 4, 5]\n    heapq.heapify(ingredients) # [1, 2, 3, 4, 5]\n    while len(ingredients) > 1: # 4\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2) # [1.5, 2.5, 3, 4, 5]\n    print(ingredients[0]) # 1.5\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()] #split the string by space\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:49:34.307376 size on output set 8
2022-04-20 10:49:34.307389 num operations 1
2022-04-20 10:49:34.307396 size on input set 1
2022-04-20 10:49:34.307558 using api key kouti
2022-04-20 10:49:43.243613 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    _ = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1: \n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n    \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * max(0, min(k, n - i))\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if a[-1] < b[0]:\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650451774,
  "object": "edit"
}
2022-04-20 10:49:43.244029 fix syntax errors 8 ["\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    _ = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1: \n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n    \n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * max(0, min(k, n - i))\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if a[-1] < b[0]:\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:49:43.244075 size on output set 5
