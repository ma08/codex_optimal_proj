["#!/usr/bin/env python3\n\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    while len(A) > 1:\n        i = random.randint(0, len(A) - 1)\n        j = random.randint(0, len(A) - 1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "# coding: utf-8\n\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, sys.stdin.readline().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Get input\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Sort A in descending order\n    A.sort(reverse=True)\n    # Initialize the minimum final health of the last monster alive to the first monster's health\n    min_health = A[0] + 1\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, N):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Print the minimum final health of the last monster alive\n    print(min_health)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport random\n\ndef main():\n    A = list(map(int, input().split()))\n    while len(A) > 1:\n        i = random.randint(0, len(A) - 1)\n        j = random.randint(0, len(A) - 1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] == 0:\n            A.pop(i)\n        if A[j] == 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, sys.stdin.readline().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_min_health(A):\n    # Initialize the minimum final health of the last monster alive\n    min_health = A[0]\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, len(A)):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Return the minimum final health of the last monster alive\n    return min_health\n\ndef main():\n    # Get input\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Sort A in descending order\n    A.sort(reverse=True)\n    # Initialize the minimum final health of the last monster alive\n    min_health = A[0]\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, N):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Print the minimum final health of the last monster alive\n    print(min_health)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    # Get input\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Sort A in descending order\n    A.sort(reverse=True)\n    # Initialize the minimum final health of the last monster alive\n    min_health = A[0]\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, N):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Print the minimum final health of the last monster alive\n    print(min_health)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Get input\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Sort A in descending order\n    A.sort(reverse=True)\n    # Initialize the minimum final health of the last monster alive to the health of the first monster\n    min_health = A[0] // 1\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, N):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Print the minimum final health of the last monster alive\n    print(min_health)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # Get input\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Sort A in descending order\n    A.sort(reverse=True)\n    # Initialize the minimum final health of the last monster alive\n    min_health = A[0]\n    # For each monster, find the minimum final health of the last monster alive\n    for i in range(1, N):\n        min_health = min(min_health, A[i] // (i + 1))\n    # Print the minimum final health of the last monster alive\n    print(min_health)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main() \n", "import sys\nimport random\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    while len(A) > 1:\n        i = random.randint(0, len(A)-1)\n        j = random.randint(0, len(A)-1)\n        if i == j:\n            continue\n        A[i] -= A[j]\n        if A[i] <= 0:\n            A.pop(i)\n        if A[j] <= 0:\n            A.pop(j)\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n"]