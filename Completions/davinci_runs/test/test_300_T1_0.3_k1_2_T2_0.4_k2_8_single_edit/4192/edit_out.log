2022-04-20 10:23:15.176899 num operations 1
2022-04-20 10:23:15.176918 size on input set 1
2022-04-20 10:23:15.177106 using api key soukgp
2022-04-20 10:23:20.263384 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 1,
      "text": "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 2,
      "text": "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 3,
      "text": "\n\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 4,
      "text": "\n\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 5,
      "text": "d, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 6,
      "text": "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 7,
      "text": "\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650450195,
  "object": "edit"
}
2022-04-20 10:23:20.263700 fix syntax errors 8 ["\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\n\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\n\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "d, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\nd, t, s = map(int, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n", "\nd, t, s = map(float, input().split())\n\nif d / s <= t:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-20 10:23:20.263734 size on output set 4
2022-04-20 10:23:20.263747 num operations 1
2022-04-20 10:23:20.263754 size on input set 1
2022-04-20 10:23:20.263926 using api key soukgp
2022-04-20 10:23:59.595968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d <= t * s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:  # \u5c0f\u6570\u70b9\u4ee5\u4e0b\u5207\u308a\u6368\u3066\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import os\nimport re\n\nimport math\nimport itertools\nimport collections\nimport bisect\nimport heapq\nimport fractions\nimport random\nimport string\nimport copy\nimport time\nimport functools\nimport operator\nimport numpy\nimport scipy\nimport numpy.linalg\nimport scipy.linalg\nimport numpy.random\nimport scipy.random\nimport numpy.fft\nimport scipy.fft\nimport numpy.fft.fftpack\nimport scipy.fft.fftpack\nimport numpy.fft.helper\nimport scipy.fft.helper\nimport numpy.ma\nimport scipy.ma\nimport numpy.lib\nimport scipy.lib\nimport numpy.lib.stride_tricks\nimport scipy.lib.stride_tricks\nimport numpy.polynomial\nimport scipy.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t: # <=\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650450200,
  "object": "edit"
}
2022-04-20 10:23:59.596369 fix syntax errors 8 ['\n\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d <= t * s:\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print("Yes")\n    else:\n        print("No")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:  # 小数点以下切り捨て\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', 'import os\nimport re\n\nimport math\nimport itertools\nimport collections\nimport bisect\nimport heapq\nimport fractions\nimport random\nimport string\nimport copy\nimport time\nimport functools\nimport operator\nimport numpy\nimport scipy\nimport numpy.linalg\nimport scipy.linalg\nimport numpy.random\nimport scipy.random\nimport numpy.fft\nimport scipy.fft\nimport numpy.fft.fftpack\nimport scipy.fft.fftpack\nimport numpy.fft.helper\nimport scipy.fft.helper\nimport numpy.ma\nimport scipy.ma\nimport numpy.lib\nimport scipy.lib\nimport numpy.lib.stride_tricks\nimport scipy.lib.stride_tricks\nimport numpy.polynomial\nimport scipy.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.hermite_e\nimport scipy.polynomial.hermite_e\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.polynomial\nimport scipy.polynomial.polynomial\nimport numpy.polynomial.chebyshev\nimport scipy.polynomial.chebyshev\nimport numpy.polynomial.legendre\nimport scipy.polynomial.legendre\nimport numpy.polynomial.hermite\nimport scipy.polynomial.hermite\nimport numpy.polynomial.laguerre\nimport scipy.polynomial.laguerre\nimport numpy.\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t: # <=\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    d, t, s = map(int, sys.stdin.readline().split())\n    if d / s <= t:\n        print("Yes")\n    else:\n        print("No")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 10:23:59.596504 size on output set 6
