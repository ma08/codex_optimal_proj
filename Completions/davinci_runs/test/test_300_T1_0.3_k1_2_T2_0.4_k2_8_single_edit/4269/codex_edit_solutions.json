["#!/usr/bin/env python3\n\nimport sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code) - 1):\n        if code[i] == code[i + 1]:\n            return True\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip()\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n", "\nimport sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code) - 1):\n        if code[i] == code[i+1]:\n            return True\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip() # readline() reads a single line from the file; a newline character (\\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn\u2019t end in a newline.\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n\n", "import sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code) - 1):\n        if code[i] == code[i+1]:\n            return True\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip()  # remove the trailing newline\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code)-1):\n        if code[i] == code[i + 1]:\n            return True\n\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip()\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns = input()\n\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n", "\n\ns = input()\n\nprint(\"Good\" if len(set(s)) == len(s) else \"Bad\")\n", "\nimport sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code) - 1):\n        if code[i] == code[i+1]:\n            return True\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip()\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport os\nimport sys\n\ndef is_hard_to_enter(code):\n    \"\"\"\n    Returns True if the code is hard to enter, False otherwise.\n    \"\"\"\n    for i in range(len(code) - 1):\n        if code[i] == code[i+1]:\n            return True\n    return False\n\ndef main():\n    code = os.read(0,100).rstrip()\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_hard_to_enter(code):\n    # Returns True if the code is hard to enter, False otherwise.\n    for i in range(len(code) - 1):\n        if code[i] == code[i+1]:\n            return True\n    return False\n\ndef main():\n    code = sys.stdin.readline().rstrip()\n    if is_hard_to_enter(code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print(\"Bad\")\nelse:\n    print(\"Good\")\n"]