2022-04-20 09:48:47.279106 num operations 1
2022-04-20 09:48:47.279126 size on input set 1
2022-04-20 09:48:47.279283 using api key derek
2022-04-20 09:48:47.406541 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 09:48:48.908436 using api key derek
2022-04-20 09:48:48.947603 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 09:48:51.950977 using api key kouti
2022-04-20 09:49:06.705732 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans[j - 1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans[j - 1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n: number of problems, k: number of days\n    a = list(map(int, input().split()))  # a[i]: number of problems for the ith day\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650448131,
  "object": "edit"
}
2022-04-20 09:49:06.706036 fix syntax errors 8 ["\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans[j - 1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans[j - 1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())  # n: number of problems, k: number of days\n    a = list(map(int, input().split()))  # a[i]: number of problems for the ith day\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = max profit if we use j days to solve the first i problems\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    print(dp[n][k])\n\n    # backtrack to find the number of problems for each day\n    ans = [0] * k\n    i = n\n    j = k\n    while i > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            ans[j-1] += 1\n            i -= 1\n            j -= 1\n\n    print(*ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 09:49:06.706252 size on output set 6
2022-04-20 09:49:06.706273 num operations 1
2022-04-20 09:49:06.706282 size on input set 1
2022-04-20 09:49:06.706505 using api key jaanu
2022-04-20 09:49:13.708540 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650448146,
  "object": "edit"
}
2022-04-20 09:49:13.708883 fix syntax errors 8 ["#!/usr/bin/python\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print dp[n][k]\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print ' '.join(map(str, ans))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.append(0)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, -1, -1):\n                if dp[i][j] < dp[l][j-1] + max(a[l:i]):\n                    dp[i][j] = dp[l][j-1] + max(a[l:i])\n    print(dp[n][k])\n    i = n\n    j = k\n    ans = []\n    while i > 0 and j > 0:\n        if dp[i][j] != dp[i-1][j]:\n            for l in range(i-1, -1, -1):\n                if dp[i][j] == dp[l][j-1] + max(a[l:i]):\n                    ans.append(i-l)\n                    i = l\n                    j -= 1\n                    break\n    ans.reverse()\n    print(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 09:49:13.709075 size on output set 7
