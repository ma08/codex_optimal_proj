["# \u5165\u529b\nN = int(input())\nA = list(map(int, input().split()))\n\n\n# \u521d\u671f\u5316\nans = 0\n\n# \u5168\u63a2\u7d22\nans = 0\nfor i in range(2 ** N):\n    # \u5404\u6841\u30671\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    A = [0] * N\n    for j in range(N):\n        if (i >> j) & 1:\n            A[j] = 1\n\n    # \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u78ba\u8a8d\n    score = 0\n    for a, b, c, d in abcd:\n        a -= 1\n        b -= 1\n        if A[b] - A[a] == c:\n            score += d\n    ans = max(ans, score)\n\n# \u51fa\u529b\nprint(ans)\n", "\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [0] * (n + 1)\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[ai] += di\n        a[bi] -= di\n    for i in range(1, n):\n        a[i + 1] += a[i]\n    print(max(a))\n\nif __name__ == '__main__':\n    main()\n", "# \u5165\u529b\nN, A, B = map(int, input().split())\n\n\n# \u51e6\u7406\nif A * N > B:\n    print(B)\nelse:\n    print(A * N)\n", "\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [0] * (n + 1) # a[0] = 0\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[ai] += di # ai = 1, a[1] += di\n        a[bi] -= di # bi = 2, a[2] -= di\n    for i in range(1, n + 1): # a[1] = a[0] + a[1]\n        a[i] += a[i - 1]\n    print(max(a))\n\nif __name__ == '__main__':\n    main()\n", "\n# \u5165\u529b\nN, M, Q = map(int, input().split())\nabcd = [list(map(int, input().split())) for i in range(Q)]\n\n# \u5168\u63a2\u7d22\nans = 0\nfor i in range(2 ** N):\n    # \u5404\u6841\u30671\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    A = [0] * N\n    for j in range(N):\n        if (i >> j) & 1:\n            A[j] = 1\n\n    # \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u78ba\u8a8d\n    score = 0\n    for a, b, c, d in abcd:\n        a -= 1\n        b -= 1\n        if A[b] - A[a] == c:\n            score += d\n    ans = max(ans, score)\n\n# \u51fa\u529b\nprint(ans)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        if a[i] == 0:\n            print(0)\n            return\n    ans = 1\n    for i in range(n):\n        ans *= a[i]\n        if ans > 10 ** 18:\n            print(-1)\n            return\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\n\n# \u5165\u529b\nN, M, Q = map(int, input().split())\nabcd = [list(map(int, input().split())) for i in range(Q)]\n\n# \u5168\u63a2\u7d22\nans = 0\nfor i in range(1 << N):\n    # \u5404\u6841\u30671\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    A = [0] * N\n    for j in range(N):\n        if (i >> j) & 1:\n            A[j] = 1\n\n    # \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u78ba\u8a8d\n    score = 0\n    for a, b, c, d in abcd:\n        a -= 1\n        b -= 1\n        if A[b] - A[a] == c:\n            score += d\n    ans = max(ans, score)\n\n# \u51fa\u529b\nprint(ans)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [0] * (n + 1)\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[ai] += di\n        a[bi] -= di\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    print(max(a))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [0] * (m + 1)\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[ai] += di\n        a[bi] -= di\n    for i in range(1, m + 1):\n        a[i] += a[i - 1]\n    print(max(a))\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\nimport os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(__file__), '../../../'))\nfrom koshort.datasets import load_movie_review\nfrom koshort.preprocessing import Tokenizer\nfrom koshort.preprocessing import Normalizer\nfrom koshort.preprocessing import PadSequence\nfrom koshort.preprocessing import WordEmbedding\nfrom koshort.preprocessing import LabelEncoder\nfrom koshort.preprocessing import OneHotEncoder\nfrom koshort.preprocessing import TextVectorization\nfrom koshort.preprocessing import Dataset\nfrom koshort.preprocessing import DataLoader\nfrom koshort.preprocessing import Pipeline\nfrom koshort.preprocessing import FeatureUnion\nfrom koshort.preprocessing import FunctionTransformer\nfrom koshort.preprocessing import StandardScaler\nfrom koshort.preprocessing import MinMaxScaler\nfrom koshort.preprocessing import MaxAbsScaler\nfrom koshort.preprocessing import RobustScaler\nfrom koshort.preprocessing import Normalizer\nfrom koshort.preprocessing import QuantileTransformer\nfrom koshort.preprocessing import PowerTransformer\nfrom koshort.preprocessing import PolynomialFeatures\nfrom koshort.preprocessing import TruncatedSVD\nfrom koshort.preprocessing import PCA\nfrom koshort.preprocessing import KernelPCA\nfrom koshort.preprocessing import FastICA\nfrom koshort.preprocessing import FactorAnalysis\nfrom koshort.preprocessing import SparsePCA\nfrom koshort.preprocessing import MiniBatchDictionaryLearning\nfrom koshort.preprocessing import DictionaryLearning\nfrom koshort.preprocessing import IncrementalPCA\nfrom koshort.preprocessing import NMF\nfrom koshort.preprocessing import LatentDirichletAllocation\nfrom koshort.preprocessing import TruncatedSVD\nfrom koshort.preprocessing import SelectKBest\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import SelectFromModel\nfrom koshort.preprocessing import VarianceThreshold\nfrom koshort.preprocessing import SelectPercentile\nfrom koshort.preprocessing import SelectFpr\nfrom koshort.preprocessing import SelectFdr\nfrom koshort.preprocessing import SelectFwe\nfrom koshort.preprocessing import GenericUnivariateSelect\nfrom koshort.preprocessing import RFE\nfrom koshort.preprocessing import RFECV\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [0] * (n + 1)\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[ai] += di\n        a[bi] -= di\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    print(max(a))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# \u5165\u529b\u4f8b\n# 5 2 3\n# 1 5 2 1\n# 2 5 1 2\n# 3 5 1 1\nN, M, Q = map(int, input().split())  # 5 2 3\nabcd = [list(map(int, input().split())) for i in range(Q)]  # 1 5 2 1  2 5 1 2  3 5 1 1\n# [[1, 5, 2, 1], [2, 5, 1, 2], [3, 5, 1, 1]]\n\n# \u5168\u63a2\u7d22\nans = 0\nfor i in range(2 ** N):\n    # \u5404\u6841\u30671\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    A = [0] * N\n    for j in range(N):\n        if (i >> j) & 1:\n            A[j] = 1\n\n    # \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u78ba\u8a8d\n    score = 0\n    for a, b, c, d in abcd:\n        a -= 1\n        b -= 1\n        if A[b] - A[a] == c:\n            score += d\n    ans = max(ans, score)\n\n# \u51fa\u529b\nprint(ans)\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        for j in range(m):\n            print(a[i] * b[j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"]