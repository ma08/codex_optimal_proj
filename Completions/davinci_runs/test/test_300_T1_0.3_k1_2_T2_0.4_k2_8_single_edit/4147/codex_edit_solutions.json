["\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort(reverse=True)\n    print(solve(l, A, B, C, 0))\n\ndef solve(l, A, B, C, cnt):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return cnt\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return cnt + 10\n    else:\n        return solve(l[1:], A - l[0], B - l[0], C - l[0], cnt + 10)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort(reverse=True)\n    print(solve(l, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    C = list(map(int, sys.stdin.readline().split()))\n    print(solve(N, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)] # \u5165\u529b\u3092\u30ea\u30b9\u30c8\u5316\n    l.sort(reverse=True) # \u964d\u9806\u306b\u30bd\u30fc\u30c8\n    print(solve(l, A, B, C)) # \u51fa\u529b\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n-1):\n                if l[i] < a and l[j] < b and l[k] < c and (l[i] + l[j] + l[k]) < (a + b + c):\n                    ans = min(ans, abs(a - l[i]) + abs(b - l[j]) + abs(c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] < a and l[j] < b and l[k] < c:\n                    ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] < a and l[j] < b and l[k] < c:\n                    ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n        if l[i] > a:\n            break\n    for i in range(n):\n            if l[j] > b:\n                break\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[k] > c:\n                    break\n                ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] < a and l[j] < b and l[k] < c:\n                    ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nfrom collections import deque\nfrom itertools import combinations\nfrom math import sqrt\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left\nfrom copy import deepcopy\nfrom fractions import gcd\nfrom random import randint\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left\nfrom math import sqrt\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom random import randint\nfrom bisect import bisect_left\nfrom heapq import heappop, heappush\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom decimal import Decimal\nfrom copy import deepcopy\nfrom string import ascii_lowercase, asci\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] < a and l[j] < b and l[k] < c:\n                    ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n    l.sort()\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] < a and l[j] < b and l[k] < c:\n                    ans = min(ans, (a - l[i]) + (b - l[j]) + (c - l[k]))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort()\n    print(solve(l, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[3:], A - l[0], B - l[1], C - l[2])\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort(reverse=True)\n    print(solve(l, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)] # l = [int(input()) for _ in range(N)]\n    l.sort(reverse=True)\n    print(solve(l, A, B, C)) # print(solve(l, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C:\n        return 0\n    elif (l[0] + l[1] + l[2] >= A + B + C) and (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort(reverse=True)\n    print(solve(l, A, B, C))\n\ndef solve(l, A, B, C):\n    if l[0] >= A and l[1] >= B and l[2] >= C and l[0] + l[1] + l[2] >= A + B + C:\n        return 0\n    elif (l[0] + l[1] >= A + B or l[1] + l[2] >= B + C or l[0] + l[2] >= A + C):\n        return 10\n    else:\n        return 10 + solve(l[1:], A - l[0], B - l[0], C - l[0])\n\nif __name__ == '__main__':\n    main()\n"]