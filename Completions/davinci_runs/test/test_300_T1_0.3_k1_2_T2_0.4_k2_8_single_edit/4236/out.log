2022-04-18 21:34:46.460394 """
You are given a set of $n$ segments on the axis $Ox$, each segment has integer endpoints between $1$ and $m$ inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — coordinates of the left and of the right endpoints. 

Consider all integer points between $1$ and $m$ inclusive. Your task is to print all such points that don't belong to any segment. The point $x$ belongs to the segment $[l; r]$ if and only if $l \le x \le r$.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 100$) — the number of segments and the upper bound for coordinates.

The next $n$ lines contain two integers each $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — the endpoints of the $i$-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that $l_i=r_i$, i.e. a segment can degenerate to a point.


-----Output-----

In the first line print one integer $k$ — the number of points that don't belong to any segment.

In the second line print exactly $k$ integers in any order — the points that don't belong to any segment. All points you print should be distinct.

If there are no such points at all, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.


-----Examples-----
Input
3 5
2 2
1 2
5 5

Output
2
3 4 

Input
1 7
1 7

Output
0




-----Note-----

In the first example the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. The points $3$ and $4$ do not belong to any segment.

In the second example all the points from $1$ to $7$ belong to the first segment.
"""
2022-04-18 21:34:46.460420 --------------------------
2022-04-18 21:35:08.834477 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    points = []\n    for i in range(n-1):\n        if segments[i][1] < segments[i+1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)"
    }
  ],
  "created": 1650317686,
  "id": "cmpl-4yTJ8PBKNgW0cIG1AbwvhUxS6K79R",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 21:35:08.834745 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    points = []\n    for i in range(n-1):\n        if segments[i][1] < segments[i+1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 21:35:08.834791 REASON stop
2022-04-18 21:35:08.858196 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)"
}
2022-04-18 21:35:08.858338 REASON stop
