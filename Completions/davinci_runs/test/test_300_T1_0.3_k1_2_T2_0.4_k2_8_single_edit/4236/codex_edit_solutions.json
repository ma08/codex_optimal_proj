["def main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    points = []\n    for i in range(m-1):\n        if segments[i][1] < segments[i+1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    # points = []\n    # for i in range(n-1):\n    #     if segments[i][1] < segments[i+1][0]:\n    #         points.append(segments[i][1])\n    # print(len(points))\n    # print(*points)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    points = []\n    for i in range(n - 1):\n        if segments[i][1] < segments[i + 1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()\n", "\n \nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    print(segments)\n    points = []\n    for i in range(n-1):\n        if segments[i][1] < segments[i+1][0]:\n    if segments[n-1][1] < segments[n][1]:\n        points.append(segments[n-1][1])\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    print(segments)\n    points = []\n    for i in range(n - 1):\n        if segments[i][1] < segments[i + 1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    print(segments)\n    points = []\n    for i in range(n):\n        if i == n-1:\n            points.append(segments[i][1])\n        else:\n            if segments[i][1] < segments[i+1][0]:\n                points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    print(segments)\n    points = []\n    for i in range(n - 1):\n        if segments[i][1] < segments[i + 1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = map(int, input().split())\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\nans = []\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\nprint(len(ans))\nprint(*ans)\n\n\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)\n", "\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m + 1):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)\n", "\n# n, m = map(int, input().split())\n\n# left = [0] * (m + 1)\n# right = [0] * (m + 1)\n\n# for i in range(n):\n#     l, r = map(int, input().split())\n#     left[l] += 1\n#     right[r] += 1\n\n# ans = []\n\n# for i in range(1, m + 1):\n#     left[i] += left[i - 1]\n#     right[i] += right[i - 1]\n\n# for i in range(1, m + 1):\n#     if left[i] == right[i]:\n#         ans.append(i)\n\n# print(len(ans))\n# print(*ans)\n\n\n\nn, m = map(int, input().split())\n\nleft = [0] * m\nright = [0] * m\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\nans = []\n\nfor i in range(1, m):\n    left[i] += left[i - 1]\n    right[i] += right[i - 1]\n\nfor i in range(1, m):\n    if left[i] == right[i]:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    print(segments)\n    points = []\n    for i in range(n-1):\n        if segments[i][1] < segments[i+1][0]:\n            points.append(segments[i][1])\n    print(len(points))\n    print(*points)\n\nif __name__ == \"__main__\":\n    main()\n"]