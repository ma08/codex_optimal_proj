["import sys\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= MOD\n    return dp[n][s.count('(') - s.count(')')] % MOD\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\ndef solve(n, s):\n    return '0'\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(n, s))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= MOD\n    return dp[n][s.count('(') - s.count(')')]\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s.split()\n\ndef solve(n, s_list):\n    return len(s_list)\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\ndef solve(n, s):\n    return 0\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= MOD\n    return dp[n][s.count('(') - s.count(')')]\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\ndef solve(n, s):\n    return n\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(n, s))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(2)]\n    dp[0][0] = 1\n        for i in range(1, n + 1):\n            dp[i % 2] = [0] * (n + 1)\n        for j in range(i + 1):\n            if j > 0:\n                dp[i % 2][j] += dp[(i - 1) % 2][j - 1]\n            if j < i:\n                dp[i % 2][j] += dp[(i - 1) % 2][j + 1]\n            dp[i % 2][j] %= MOD\n    return dp[n % 2][s.count('(') - s.count(')')]\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(n, s))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= MOD\n    return dp[n][s.count('(') - s.count(')')]\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\ndef solve(n):\n    MOD = 1000000007\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i + 1):\n            if i + j + 1 <= n:\n                dp[i + j + 1] += dp[i]\n                dp[i + j + 1] %= MOD\n    return dp[n]\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(n, s))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= MOD\n    return dp[n][s.count('(') - s.count(')')]\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n\n    return n, s\n\ndef solve(n, s):\n\n    return 0\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\ndef solve(n, s):\n    return 0\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\ndef solve(n, s):\n    return 0\n\ndef main():\n    n, s = get_input()\n    print(solve(n, s))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(n, s))\n\ndef solve(n, s):\n    MOD = 1000000007\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if s[i - 1] == '(':\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] * 2\n            if i >= 2:\n                dp[i] -= dp[i - 2]\n            dp[i] %= MOD\n    return dp[n]\n\nif __name__ == '__main__':\n    main()\n"]