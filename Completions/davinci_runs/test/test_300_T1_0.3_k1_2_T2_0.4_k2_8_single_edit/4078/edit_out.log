2022-04-20 09:45:20.764976 num operations 1
2022-04-20 09:45:20.764995 size on input set 1
2022-04-20 09:45:20.765172 using api key soukgp
2022-04-20 09:45:25.779875 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n    print(0)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans, 0)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650447920,
  "object": "edit"
}
2022-04-20 09:45:25.780185 fix syntax errors 8 ["\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n    print(0)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans, 0)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        if a[l - 1] > a[r - 1]:\n            a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        ans = max(ans, a[l - 1] - a[r - 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 09:45:25.780366 size on output set 5
2022-04-20 09:45:25.780381 num operations 1
2022-04-20 09:45:25.780387 size on input set 1
2022-04-20 09:45:25.780542 using api key gabby
2022-04-20 09:45:35.238459 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments, max_diff, num_segments, segments_to_apply):\n    # TODO: Implement solution\n    return max_diff, num_segments, segments_to_apply\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments, 0, 0, [])\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply, sep=\" \")\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments, k):\n    # TODO: Implement solution\n    return 0, 0, []\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    k = []\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments, k)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, input().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, input().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef get_max_diff(n, m, a, segments, k):\n    # TODO: Implement solution    \n    return 0, []\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    k = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, segments_to_apply = get_max_diff(n, m, a, segments, k)\n\n    print(max_diff)\n    print(*segments_to_apply)\n"
    }
  ],
  "created": 1650447925,
  "object": "edit"
}
2022-04-20 09:45:35.238791 fix syntax errors 8 ['\n\nfrom collections import defaultdict\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments, max_diff, num_segments, segments_to_apply):\n    # TODO: Implement solution\n    return max_diff, num_segments, segments_to_apply\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments, 0, 0, [])\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply, sep=" ")\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments, k):\n    # TODO: Implement solution\n    return 0, 0, []\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    k = []\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments, k)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, input().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\n\nimport sys\n\ndef get_max_diff(n, m, a, segments):\n    # TODO: Implement solution\n    return 0, 0, [0]\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, input().split())))\n\n    max_diff, num_segments, segments_to_apply = get_max_diff(n, m, a, segments)\n\n    print(max_diff)\n    print(num_segments)\n    print(*segments_to_apply)\n', '\nimport sys\n\ndef get_max_diff(n, m, a, segments, k):\n    # TODO: Implement solution    \n    return 0, []\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    k = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n\n    max_diff, segments_to_apply = get_max_diff(n, m, a, segments, k)\n\n    print(max_diff)\n    print(*segments_to_apply)\n']
2022-04-20 09:45:35.238933 size on output set 7
