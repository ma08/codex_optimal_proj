["\nfrom collections import defaultdict\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    # print(n, m, k)\n    # print(roads)\n    \n    graph = defaultdict(set)\n    for road in roads:\n        graph[road[0]].add(road[1])\n        graph[road[1]].add(road[0])\n\n    print(graph)\n\nif __name__ == \"__main__\":\n    main()\n", "import heapq\n\nimport sys\n\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]  # list of list\n    # roads = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]  # list of list\n    # roads = [list(map(int, input().split())) for _ in range(m)]  # list of list\n    # roads = [list(map(int, input().split())) for _ in range(m)]  # list of list\n    # roads = [list(map(int, input().split())) for _ in range(m)]  # list of list\n    print(n, m, k)\n    print(roads)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n\n    #print(n, m, k)\n    #print(roads)\n\n    # get the distance between each city\n    distances = [[0 for x in range(n)] for y in range(n)]\n    for road in roads:\n        distances[road[0]][road[1]] = road[2]\n        distances[road[1]][road[0]] = road[2]\n\n    #print(distances)\n\n    # get the distance between each city and the warehouse\n    warehouse = []\n    for i in range(k):\n        warehouse.append(int(sys.stdin.readline()))\n\n    #print(warehouse)\n\n    # get the distance between each city and the warehouse\n    for i in range(n):\n        for j in range(k):\n            distances[i][warehouse[j]] = math.sqrt(distances[i][warehouse[j]] ** 2 + 1 ** 2)\n            distances[warehouse[j]][i] = distances[i][warehouse[j]]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if distances[i][j] > distances[i][k] + distances[k][j]:\n                    distances[i][j] = distances[i][k] + distances[k][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][0] + distances[0][j]:\n                distances[i][j] = distances[i][0] + distances[0][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][1] + distances[1][j]:\n                distances[i][j] = distances[i][1] + distances[1][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][2] + distances[2][j]:\n                distances[i][j] = distances[i][2] + distances[2][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][3] + distances[3][j]:\n                distances[i][j] = distances[i][3] + distances[3][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][4] + distances[4][j]:\n                distances[i][j] = distances[i][4] + distances[4][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][5] + distances[5][j]:\n                distances[i][j] = distances[i][5] + distances[5][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][6] + distances[6][j]:\n                distances[i][j] = distances[i][6] + distances[6][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][7] + distances[7][j]:\n                distances[i][j] = distances[i][7] + distances[7][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][8] + distances[8][j]:\n                distances[i][j] = distances[i][8] + distances[8][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][9] + distances[9][j]:\n                distances[i][j] = distances[i][9] + distances[9][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][10] + distances[10][j]:\n                distances[i][j] = distances[i][10] + distances[10][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][11] + distances[11][j]:\n                distances[i][j] = distances[i][11] + distances[11][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][12] + distances[12][j]:\n                distances[i][j] = distances[i][12] + distances[12][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][13] + distances[13][j]:\n                distances[i][j] = distances[i][13] + distances[13][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][14] + distances[14][j]:\n                distances[i][j] = distances[i][14] + distances[14][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][15] + distances[15][j]:\n                distances[i][j] = distances[i][15] + distances[15][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][16] + distances[16][j]:\n                distances[i][j] = distances[i][16] + distances[16][j]\n\n    #print(distances)\n\n    # get the shortest distance between each city\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] > distances[i][17] + distances[17][j]:\n                distances[i][j] = distances[i][17\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, k = map(int, input().split())\n    roads = [[int(x) for x in input().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def BFS(self, s):\n        visited = [False] * (len(self.graph))\n        queue = []\n        queue.append(s)\n        visited[s] = True\n\n        while queue:\n            s = queue.pop(0)\n            print(s, end=\" \")\n\n            for i in self.graph[s]:\n                if visited[i] == False:\n                    queue.append(i)\n                    visited[i] = True\n\n    def DFS(self, s):\n        visited = [False] * (len(self.graph))\n        stack = []\n        stack.append(s)\n        visited[s] = True\n\n        while stack:\n            s = stack.pop()\n            print(s, end=\" \")\n\n            for i in self.graph[s]:\n                if visited[i] == False:\n                    stack.append(i)\n                    visited[i] = True\n\n\ndef BFS(graph, s):\n    visited = [False] * (len(graph))\n    queue = []\n    queue.append(s)\n    visited[s] = True\n\n    while queue:\n        s = queue.pop(0)\n        print(s, end=\" \")\n\n        for i in graph[s]:\n            if visited[i] == False:\n                queue.append(i)\n                visited[i] = True\n\n\ndef DFS(graph, s):\n    visited = [False] * (len(graph))\n    stack = []\n    stack.append(s)\n    visited[s] = True\n\n    while stack:\n        s = stack.pop()\n        print(s, end=\" \")\n\n        for i in graph[s]:\n            if visited[i] == False:\n                stack.append(i)\n                visited[i] = True\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    graph = defaultdict(list)\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    # print(graph)\n    for i in range(k):\n        node = int(sys.stdin.readline())\n        # BFS(graph, node)\n        # DFS(graph, node)\n        g = Graph()\n        for road in roads:\n            g.addEdge(road[0], road[1])\n            g.addEdge(road[1], road[0])\n        g.BFS(node)\n        print(\"\")\n        g.DFS(node)\n        print(\"\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\n\nclass Graph:\n    def __init__(self, n, m, k, roads):\n        self.n = n\n        self.m = m\n        self.k = k\n        self.roads = roads\n\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k)\n    print(roads)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    roads = [[int(x) for x in input().split()] for _ in range(m)]\n    print(n, m, k)\n    print(roads)\n\nif __name__ == \"__main__\":\n    main()\n"]