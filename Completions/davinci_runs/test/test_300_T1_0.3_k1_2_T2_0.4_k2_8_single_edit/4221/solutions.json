["s = input()\nprint((s + \"es\" if s[len(s) - 1] == 's' else s + 's'))\n", "s = list(input())\nif s[-1] == \"s\":\n    s.append(\"e\")\n    s.append(\"s\")\nelse:\n\n    s.append(\"s\")\nfor i in range(len(s)):\n    print(s[i], end =\"\")\n", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    s = input()\n\n    if s[-1] == 's':\n        print((s + 'es'))\n    else:\n        print((s + 's'))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    s = input()\n    if s[-1] == 's':\n        s += 'es'\n    else:\n        s += 's'\n    print(s)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "a=list(input())\nif a[len(a)-1]==\"s\":\n    a.append(\"e\")\na.append(\"s\")\nprint(*a, sep=\"\")\n", "a = input()\n\nif a[len(a)-1] == 's':\n  a = a + 'es'\nelse:\n  a = a + 's'\n  \nprint(a)", "a = input()\n\nif a[-1] == \"s\":\n    a += \"es\"\nelse:\n    a += \"s\"\n\n\nprint(a)", "n=  input()\n\nif n[-1] == \"s\":\n  n = n + \"es\"\nelse:\n  n = n + \"s\"\n\nprint(n)", "s = list(input())\n\nif s[-1] == 's':\n    s.append('e')\n    s.append('s')\nelse:\n    s.append('s')\n\nprint(''.join(s)) ", "s = input()\n\nif s[-1] == 's':\n    print(s + 'es')\nelse:\n    print(s + 's')", "s = input()\nl = len(s)\nif s[l-1] == \"s\":\n  ans = s + \"es\"\nelse:\n  ans = s + \"s\"\nprint(ans)", "string = input()\n \nif string[-1] == \"s\":\n  string += \"es\"\nelse:\n  string += \"s\"\n  \nprint(string)", "a = input()\nif a[len(a)-1] == 's':\n  print(a+'es')\nelse:\n  print(a+'s')", "s = input()\n\nif s[-1] == 's':\n    s += 'es'\nelse:\n    s += 's'\n    \nprint(s)", "n = input()\nif n[-1:] == 's':\n  n = n + 'es'\nelse:\n  n = n + 's'\n  \nprint(n)", "s = input()\nif s[-1] == \"s\":\n  print(s + \"es\")\nelse:\n  print(s + \"s\")", "#!/usr/bin/env python3\n\ndef main():\n\ta = str(input())\n\tif a[-1] == 's':\n\t\tprint((a + 'es'))\n\telse:\n\t\tprint((a + 's'))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "s = input()\nlc = s[-1]\n\nif lc != \"s\":\n    s += \"s\"\nelse:\n    s += \"es\"\n\nprint(s)", "s = input()\nif s[-1] == 's':\n  print('{}es'.format(s))\nelse:\n  print('{}s'.format(s))", "s = input()\nif s[-1] == 's':\n    print(s + 'es')\nelse:\n    print(s + 's')", "S = input()\nif S[-1] == 's':\n  S += 'es'\nelse:\n  S += 's'\nprint(S)\n", "s=input()\nif s[-1]=='s':\n    print(s+'es')\nelse:\n    print(s+'s')", "w = input()\nif w[-1] == 's':\n  print(str(w) + 'es')\nelse:\n  print(str(w) + 's')", "s=input()\nif s[len(s)-1]=='s':\n\ts=s+'es'\nelse:\n\ts=s+'s'\nprint(s)\n", "x = input()\nl=list(x)\nif l[-1]!='s':\n    print(x+'s')\nelse:\n    print(x+'es')", "w=str(input())\nif w[-1]=='s':\n  print(w+'es')\nelse:\n  print(w+'s')", "s=input()\nprint(s+\"s\" if s[-1:]!=\"s\" else s+\"es\")", "s = input()\nif s[-1]=='s':\n    print((s+'es'))\nelse:\n    print((s+'s'))\n", "S=input()\n\nif S[-1] is 's':\n    print(str(S)+'es')\nelse:\n     print (str(S)+'s')", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    s = input().strip()\n    print((s + \"es\" if s[-1] == \"s\" else s + \"s\"))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = str(input())\n\ntext = [S+'es' if x == 's' else S+'s' for x in S[-1]]\nprint(text[0])", "s = input()\nif s[-1] == 's':\n  print('{}es'.format(s))\nelse:\n  print('{}s'.format(s))", "S = str(input())\nif S[-1]=='s':\n    S += 'es'\nelse:\n    S += 's'\nprint(S)", "s=input()\nprint(s+'es'[s[-1]!='s':])", "from sys import stdin\ns = stdin.readline().rstrip()\nif s[-1] == 's':\n    print((s + 'es'))\nelse:\n    print((s + 's'))\n", "a = input()\nif a[-1] == \"s\":\n  a += \"es\"\nelse:\n  a+= \"s\"\nprint(a)  ", "s=input()\nprint(s+'es' if s[-1]=='s' else s+'s')", "s = input()\nif s[-1] != 's':\n    print(s+'s')\nelse:\n    print(s+'es')", "from sys import stdin\ns = input()\nif s[-1] == 's':\n    print((s + 'es'))\nelse:\n    print((s + 's'))\n", "s = input()\nprint(s + (\"es\" if s[-1] == \"s\" else \"s\"))", "a = input()\nif a[-1] == \"s\":\n  print(a+\"es\")\nelse:\n  print(a+\"s\")", "s=input();print(s+'es'[s[-1]!='s':])", "S = input()\nif S[-1] == 's':\n    S = S + 'es'\nelse:\n    S = S + 's'\nprint(S)", "S=input();print(S+\"e\"*(S[-1]==\"s\")+\"s\")", "s=input()\nif s[-1] == 's':\n    print((s+'es'))\nelse:\n    print((s+'s'))\n", "s = input()\n\nif (s[-1] == \"s\"):\n    s = s + \"es\"\nelse:\n    s = s + \"s\"\n\nprint(s)\n", "s = input()\nif s[-1] != 's':\n  print(s+\"s\")\nelse:\n  print(s+'es')", "s = input()\n\nif s[-1] == 's':\n    print(s+\"es\")\nelse:\n    print(s+\"s\")", "S = input()\nif S[-1] =='s':\n    print(S + \"es\")\nelse:\n    print(S+\"s\")", "s = input() \n(print(s + \"es\") if s[-1:]==\"s\" else print(s + \"s\"))", "s = str(input())\nif s[-1] == 's':\n    print(s+'es')\nelse:\n    print(s+'s')", "letter=str(input())\n\nif letter[-1] == \"s\":print((letter + \"es\"))\nelse:print((letter + \"s\"))\n", "S = input()\n\ntext = [S+'es' if x == 's' else S+'s' for x in S[-1]]\n\nprint(text[0])", "a = input()\nb = list(a)\n\nif b[-1] == 's':\n  print((a + 'es'))\nelse:\n  print((a + 's'))\n\n", "s = input()\nif s[-1] == 's' : print(s+\"es\")\nelse: print(s+\"s\")", "S = input()\nif S[-1] == \"s\":\n    S += \"es\"\nelse:\n    S += \"s\"\nprint(S)\n", "S = str(input())\n\nif S[len(S)-1] == \"s\":\n   print(S+\"es\")\nelse:\n   print(S+\"s\")", "# -*- coding: utf-8 -*-\ns = input()\nif s[-1] == \"s\":\n    t_lang = s + \"es\"\nelse:\n    t_lang = s + \"s\"\n\nprint((\"{}\".format(t_lang)))\n\n", "S = input()\nif S[-1] == \"s\":\n    print(\"{}{}\".format(S,\"es\"))\nelse:\n    print(\"{}{}\".format(S,\"s\"))", "S = input()\n\nif S[-1] == 's':\n    print((S + 'es'))\nelse:\n    print((S + 's'))\n", "S=input()\nprint(S+['s','es'][S[-1]=='s'])", "#!/usr/bin/env python3\n\ndef main():\n\ta = str(input())\n\tif a[-1] == 's':\n\t\tprint((a + 'es'))\n\telse:\n\t\tprint((a + 's'))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "s=str(input())\nif s[-1]=='s':\n    s+='es'\n    print(s)\nelse:\n    s+='s'\n    print(s)", "S = input()\nif S[-1] == 's':\n  print(S + 'es')\nelse:\n  print(S + 's')", "S = input()\n     \nif S[-1] == \"s\":\n    S += \"es\"\nelse:\n    S += \"s\"\n \nprint(S)", "s = input()\nList = list(s)\n\nif List[-1] == 's':\n     print((s + \"es\"))\nelse:\n     print((s + 's'))\n", "word = input()\n\nif word[len(word) - 1] == \"s\":\n    print(word + \"es\")\nelse:\n    print(word + \"s\")", "s=[]\ns=str(input())\ndef plural(s):\n    if s[-1]=='s':\n        print(s+'es')\n    else:\n        print(s+'s')\nplural(s)", "S = list(input())\n\nif (S[-1] == 's'):\n    S.append(\"es\")\n    print(\"\".join(S))\nelse:\n    S.append(\"s\")\n    print(\"\".join(S))", "S= input()\nif S[-1:]==\"s\":\n    print(S+\"es\")\nelse:\n    print(S+\"s\")", "s = input()\n \nif s[-1] == 's':\n  print(s + 'es')\nelse:\n  print(s + 's')", "import sys\nimport heapq\nimport math\nimport fractions\nimport bisect\nimport itertools\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\ndef input(): return sys.stdin.readline().strip()\ndef mp(): return map(int,input().split())\ndef lmp(): return list(map(int,input().split()))\n\ns = input()\nif s[len(s)-1] == \"s\":\n  print(s + \"es\")\nelse:\n  print(s + \"s\")", "w = input()\n\nif w.endswith(\"s\"):\n\tw += \"es\"\nelse:\n\tw += \"s\"\n\nprint(w)", "S = input()\n \nif S[-1] == \"s\":\n    S += \"es\"\nelse:\n    S += \"s\"\n \nprint(S)", "# -*- coding: utf-8 -*-\nimport re\ns = input()\n\nif re.search(r's$', s):\n    print(s + \"es\")\nelse:\n    print(s + \"s\")", "S = input()\nif S[len(S)-1] == \"s\":\n    S = S + \"es\"\nelse:\n    S = S + \"s\"\nprint(S)", "s = input()\n\nif s[-1] == \"s\":\n    print((s + \"es\"))\nelse:\n    print((s + \"s\"))\n", "s=input()\nif(s[-1]==\"s\"):\n    print(s+\"es\")\nelse:\n    print(s+\"s\")", "S = input()\n\nif S[-1] == \"s\":\n    print((''.join(S) + 'es'))\nelse:\n    print((''.join(S) + 's'))\n", "s = str(input())\nif s[-1] == \"s\":\n  print(s+\"es\")\nelse:\n  print(s+\"s\")", "N=input()\nif N[-1]==\"s\":\n    N+=\"es\"\nelse:\n    N+=\"s\"\n\nprint(N)\n", "S = input()\nif S[-1] != 's':\n    print(S + 's')\nelse:\n    print(S + 'es')", "S = input()\nif S[-1] == 's':\n\tS = S+'es'\nelse:\n\tS = S + 's'\nprint(S)", "S = input()\n\nif S[-1] == 's':\n    S += \"es\"\n\nelse:\n    S += \"s\"\n\nprint(S)", "word = input()\nif word[-1] == 's':\n    print((word + 'es'))\nelse:\n    print((word + 's'))\n", "S = input()\n\nif S[-1]== \"s\":\n    S += \"es\"\nelse:\n    S += \"s\"\n\nprint(S)", "def main():\n    s = input()\n    \n    if s[-1] != \"s\":\n        result = s +\"s\"\n    else:\n        result = s + \"es\"\n    \n    print(result)\n\n\nmain()", "S = input()\nif S[-1] != 's':\n    print((S + 's'))\nelse:\n    print((S + 'es'))\n", "S = input()\nprint((S + 'es' if S[-1] == 's' else S + 's'))", "s=[]\ns=str(input())\ndef plural(s):\n    if s[-1]=='s':\n        print(s+'es')\n    else:\n        print(s+'s')\nplural(s)", "import math  # noqa: F401\nfrom collections import deque  # noqa: F401\nfrom typing import Deque, Dict, List, Optional, Tuple, Union  # noqa: F401\n\n\ndef main(S: str):\n    if S[-1] != \"s\":\n        print((S + \"s\"))\n    else:\n        print((S + \"es\"))\n\n\ndef __starting_point():\n    S = input()\n    main(S)\n\n__starting_point()", "S = input()\n\nif S[-1] == \"s\":\n    S += \"es\"\n    \nelse:\n    S += \"s\"\n\nprint(S)", "s = input()\n\nif s[-1] == 's':\n  print(s+'es')\n  \nelse:\n  print(s+'s')", "S = input()\nif S[-1] == 's':\n    print(S + 'es')\nelse:\n    print(S + 's')", "a = str(input())\n\nb = list(a)\n\nif b[len(b) - 1] == \"s\":\n    b.append(\"es\")\nelse:\n    b.append(\"s\")\n\nans = \"\".join(b)\nprint(ans)", "S = input()\n\nif len(S)>=1 and len(S)<=1000 and str.islower(S):\n    if S[-1] != 's':\n        print(S+'s')\n    else:\n        print(S+'es')", "s = input()\nif s[-1] == \"s\":\n  print((s + \"es\"))\nelse:\n  print((s + \"s\"))\n\n", "s = input()\n\nif s[-1] == 's':\n    print(s,'es', sep='')\nelse:\n    print(s, 's', sep='')", "# coding:utf-8\n\ns = input()\nif s[-1] == 's':\n    print((s + 'es'))\nelse:\n    print((s+'s'))\n", "S = input()\nif S[-1] == 's':\n  print(S + 'es')\nelse:\n  print(S + 's')"]