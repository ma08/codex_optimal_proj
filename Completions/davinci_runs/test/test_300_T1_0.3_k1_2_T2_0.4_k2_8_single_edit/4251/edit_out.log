2022-04-20 10:43:54.776799 num operations 1
2022-04-20 10:43:54.776821 size on input set 1
2022-04-20 10:43:54.777020 using api key gabby
2022-04-20 10:44:06.477137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])  # sort by x\n    ans = 0\n    for i in range(1, n):  # get max distance between two points\n        ans = max(ans, a[i][0] - a[i - 1][0])\n\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][1] - a[i-1][1])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 3,
      "text": "\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n-1):\n        ans = max(ans, a[i+1][0] - a[i-1][0])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 4,
      "text": "\n\n# Problem\n\n# You are given a sequence of N (1\u2264N\u2264100) integers A1,A2,\u2026,AN.\n# You want to partition the sequence into some number of (not necessarily contiguous) subsequences,\n# such that each element appears in exactly one of the subsequences.\n#\n# The sum of the elements in a subsequence must be greater than or equal to M (1\u2264M\u226410^9).\n#\n# Find the maximum number of subsequences that you can obtain.\n\n# Input\n# The first line of the input contains two space-separated integers N and M.\n#\n# The second line contains N space-separated integers A1,A2,\u2026,AN.\n#\n# Output\n# Print a single line containing one integer \u2015 the maximum number of subsequences that you can obtain.\n#\n# Examples\n# Input\n# 5 2\n# 2 1 4 5 3\n# Output\n# 3\n#\n# Input\n# 8 3\n# 1 1 1 1 1 1 1 1\n# Output\n# 5\n#\n# Note\n# In the first sample, one optimal solution is to partition the sequence into the subsequences {2}, {1,4}, and {5,3}.\n#\n# In the second sample, one optimal solution is to partition the sequence into the subsequences {1,1,1}, {1,1,1}, {1,1}, {1}, and {1}.\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][1] - a[i-1][1])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    },
    {
      "index": 6,
      "text": "\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0]) #\u6642\u9593\u3067\u30bd\u30fc\u30c8\n    ans = 0\n    for i in range(1, n): #1\u3064\u76ee\u30682\u3064\u76ee\u3092\u6bd4\u8f03\n        ans = max(ans, a[i][0] - a[i-1][0]) #\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split()) #n,m\u3092\u5165\u529b\n    a = []\n    for i in range(n): #n\u500b\u306e\u6642\u9593\u3092\u5165\u529b\n        a.append(list(map(int, input().split()))) #a\u306b\u5165\u529b\u3092\u8ffd\u52a0\n    print(solve(n, m, a)) #\u89e3\u7b54\u3092\u51fa\u529b\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\n# Solution\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"
    }
  ],
  "created": 1650451434,
  "object": "edit"
}
2022-04-20 10:44:06.477461 fix syntax errors 8 ['\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])  # sort by x\n    ans = 0\n    for i in range(1, n):  # get max distance between two points\n        ans = max(ans, a[i][0] - a[i - 1][0])\n\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][1] - a[i-1][1])\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n-1):\n        ans = max(ans, a[i+1][0] - a[i-1][0])\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '\n\n# Problem\n\n# You are given a sequence of N (1≤N≤100) integers A1,A2,…,AN.\n# You want to partition the sequence into some number of (not necessarily contiguous) subsequences,\n# such that each element appears in exactly one of the subsequences.\n#\n# The sum of the elements in a subsequence must be greater than or equal to M (1≤M≤10^9).\n#\n# Find the maximum number of subsequences that you can obtain.\n\n# Input\n# The first line of the input contains two space-separated integers N and M.\n#\n# The second line contains N space-separated integers A1,A2,…,AN.\n#\n# Output\n# Print a single line containing one integer ― the maximum number of subsequences that you can obtain.\n#\n# Examples\n# Input\n# 5 2\n# 2 1 4 5 3\n# Output\n# 3\n#\n# Input\n# 8 3\n# 1 1 1 1 1 1 1 1\n# Output\n# 5\n#\n# Note\n# In the first sample, one optimal solution is to partition the sequence into the subsequences {2}, {1,4}, and {5,3}.\n#\n# In the second sample, one optimal solution is to partition the sequence into the subsequences {1,1,1}, {1,1,1}, {1,1}, {1}, and {1}.\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '#!/usr/bin/env python3\n\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][1] - a[i-1][1])\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n', '\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0]) #時間でソート\n    ans = 0\n    for i in range(1, n): #1つ目と2つ目を比較\n        ans = max(ans, a[i][0] - a[i-1][0]) #最大値を求める\n    return ans\n\nif __name__ == "__main__":\n    n, m = map(int, input().split()) #n,mを入力\n    a = []\n    for i in range(n): #n個の時間を入力\n        a.append(list(map(int, input().split()))) #aに入力を追加\n    print(solve(n, m, a)) #解答を出力\n', "\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\n# Solution\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n"]
2022-04-20 10:44:06.477620 size on output set 8
2022-04-20 10:44:06.477632 num operations 1
2022-04-20 10:44:06.477638 size on input set 1
2022-04-20 10:44:06.477794 using api key jaanu
2022-04-20 10:44:18.709406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    },
    {
      "index": 3,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    },
    {
      "index": 4,
      "text": "\n#\n# def solution(matrix):\n#     n = len(matrix)\n#     m = len(matrix[0])\n#     k = 0\n#     for i in range(m):\n#         col = [matrix[j][i] for j in range(n)]\n#         col.sort()\n#         for j in range(1, n):\n#             k = max(k, col[j] - col[j - 1])\n#     return k\n#\n# if __name__ == \"__main__\":\n#     n, m = [int(s) for s in input().split(\" \")]\n#     matrix = []\n#     for i in range(n):\n#         matrix.append([int(s) for s in input().split(\" \")])\n#     print(solution(matrix))\n"
    },
    {
      "index": 5,
      "text": "\n"
    },
    {
      "index": 6,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    },
    {
      "index": 7,
      "text": "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = -1\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(n - 1):\n            k = max(k, col[j + 1] - col[j])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"
    }
  ],
  "created": 1650451446,
  "object": "edit"
}
2022-04-20 10:44:18.709707 fix syntax errors 8 ['\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n', '\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n', '\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n', '\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n', '\n#\n# def solution(matrix):\n#     n = len(matrix)\n#     m = len(matrix[0])\n#     k = 0\n#     for i in range(m):\n#         col = [matrix[j][i] for j in range(n)]\n#         col.sort()\n#         for j in range(1, n):\n#             k = max(k, col[j] - col[j - 1])\n#     return k\n#\n# if __name__ == "__main__":\n#     n, m = [int(s) for s in input().split(" ")]\n#     matrix = []\n#     for i in range(n):\n#         matrix.append([int(s) for s in input().split(" ")])\n#     print(solution(matrix))\n', '\n', '\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n', '\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = -1\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(n - 1):\n            k = max(k, col[j + 1] - col[j])\n    return k\n\nif __name__ == "__main__":\n    n, m = [int(s) for s in input().split(" ")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(" ")])\n    print(solution(matrix))\n']
2022-04-20 10:44:18.709765 size on output set 4
