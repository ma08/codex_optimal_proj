2022-04-20 10:01:34.754956 num operations 1
2022-04-20 10:01:34.754976 size on input set 1
2022-04-20 10:01:34.755182 using api key sunu
2022-04-20 10:01:42.637599 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n#\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650448894,
  "object": "edit"
}
2022-04-20 10:01:42.637916 fix syntax errors 8 ["import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if not visited[u]:\n            visited[u] = True\n            for v in adj[u]:\n                stack.append(v)\n    print(sum(1 for i in range(1, n+1) if not visited[i]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 10:01:42.638060 size on output set 4
2022-04-20 10:01:42.638074 num operations 1
2022-04-20 10:01:42.638081 size on input set 1
2022-04-20 10:01:42.638256 using api key sunu
2022-04-20 10:01:51.055516 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split()) # n: number of nodes, m: number of edges, s: start node\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1) # u, v: edge between u and v\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if v))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "import sys\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())  # n: number of nodes, m: number of edges, s: start node\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())  # u: start node, v: end node\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n"
    }
  ],
  "created": 1650448902,
  "object": "edit"
}
2022-04-20 10:01:51.055838 fix syntax errors 8 ['import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', 'import sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split()) # n: number of nodes, m: number of edges, s: start node\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1) # u, v: edge between u and v\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if v))\n\nmain()\n', 'import sys\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())  # n: number of nodes, m: number of edges, s: start node\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())  # u: start node, v: end node\n        graph[u-1].append(v-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    print(sum(1 for v in visited if not v))\n\nmain()\n']
2022-04-20 10:01:51.055983 size on output set 6
