["import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)) - 1)\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % (block_length + 1)\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\n\nif __name__ == '__main__':\n    main()\n"]