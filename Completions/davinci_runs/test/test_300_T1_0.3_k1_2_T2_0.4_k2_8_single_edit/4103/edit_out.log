2022-04-20 09:52:30.714070 num operations 1
2022-04-20 09:52:30.714091 size on input set 1
2022-04-20 09:52:30.714255 using api key sunu
2022-04-20 09:52:48.851200 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(1, n):\n    if a[i] < a[i - 1]:\n        c += a[i - 1] - a[i]\n        a[i] = a[i - 1]\nprint(c)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty. The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty. The battery is used when the accumulator is empty and the battery is not empty. The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty. The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    },
    {
      "index": 2,
      "text": "\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nj = 10\nk = 11\nl = 12\nm = 13\nn = 14\no = 15\np = 16\nq = 17\nr = 18\ns = 19\nt = 20\nu = 21\nv = 22\nw = 23\nx = 24\ny = 25\nz = 26\n"
    },
    {
      "index": 3,
      "text": "\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty\n# The battery is used when the accumulator is empty and the battery is not empty\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator.\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator.\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n"
    }
  ],
  "created": 1650448350,
  "object": "edit"
}
2022-04-20 09:52:48.851656 fix syntax errors 8 ['\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(1, n):\n    if a[i] < a[i - 1]:\n        c += a[i - 1] - a[i]\n        a[i] = a[i - 1]\nprint(c)\n', '\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty. The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty. The battery is used when the accumulator is empty and the battery is not empty. The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty. The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n', '\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nj = 10\nk = 11\nl = 12\nm = 13\nn = 14\no = 15\np = 16\nq = 17\nr = 18\ns = 19\nt = 20\nu = 21\nv = 22\nw = 23\nx = 24\ny = 25\nz = 26\n', '\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n', '\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n', '\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n', '\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty.\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty.\n# The battery is used when the accumulator is empty and the battery is not empty.\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty.\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight.\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n', '\n\n# SOLUTION\n# The solution is to use the accumulator when it is possible and use the battery when the accumulator is empty\n# The accumulator is used when the current segment is exposed to sunlight and the accumulator is not empty\n# The battery is used when the accumulator is empty and the battery is not empty\n# The accumulator is recharged when the current segment is exposed to sunlight and the accumulator is empty\n# The accumulator is recharged when the battery is used and the current segment is exposed to sunlight\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Initialize the accumulator and the battery\naccumulator = a\nbattery = b\n\n# Initialize the number of segments passed\nsegments_passed = 0\n\n# Go through all the segments\nfor i in range(n):\n    # If the accumulator is not empty and the current segment is exposed to sunlight, use the accumulator\n    if accumulator > 0 and s[i] == 1:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty, use the battery\n    elif accumulator == 0 and battery > 0:\n        battery -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is empty, stop\n    elif accumulator == 0 and battery == 0:\n        break\n    # If the accumulator is not empty and the current segment is not exposed to sunlight, use the accumulator.\n    elif accumulator > 0 and s[i] == 0:\n        accumulator -= 1\n        segments_passed += 1\n    # If the accumulator is empty and the battery is not empty and the current segment is exposed to sunlight, recharge the accumulator.\n    elif accumulator == 0 and battery > 0 and s[i] == 1:\n        accumulator += 1\n        battery -= 1\n        segments_passed += 1\n\n# Print the number of segments passed\nprint(segments_passed)\n']
2022-04-20 09:52:48.851796 size on output set 6
2022-04-20 09:52:48.851810 num operations 1
2022-04-20 09:52:48.851816 size on input set 1
2022-04-20 09:52:48.851986 using api key soukgp
2022-04-20 09:53:01.456768 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n"
    },
    {
      "index": 1,
      "text": "\ndef max_segments(n, b, a, s):\n    # Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef max_segments(n, b, a, s, dp):\n    # TODO: Write your code here\n    if n == 0:\n        return 0\n    if dp[n][b][a] == -1:\n        if s[n - 1] == 0:\n            if b > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b - 1, a, s, dp) + 1)\n            if a > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a - 1, s, dp) + 1)\n        else:\n            if a > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a - 1, s, dp) + 1)\n            else:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a, s, dp))\n    return dp[n][b][a]\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\ndp = [[[-1 for _ in range(a + 1)] for _ in range(b + 1)] for _ in range(n + 1)]\nprint(max_segments(n, b, a, s, dp))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef max_segments(n, b, a, s, k):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a, k = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s, k))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a = map(int, input().strip().split())\ns = list(map(int, input().strip().split()))\nprint(max_segments(n, b, a, s))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef max_segments(n, b, a, s, dp):\n    if n <= 0:\n        return 0\n    if n in dp:\n        return dp[n]\n    if n == 1:\n        if s[0] >= b:\n            dp[n] = 1\n        else:\n            dp[n] = 0\n        return dp[n]\n    if n == 2:\n        if s[1] >= b and s[0] >= b:\n            dp[n] = 2\n        elif s[1] >= b and s[0] < b:\n            dp[n] = 1\n        elif s[1] < b and s[0] >= b:\n            dp[n] = 1\n        else:\n            dp[n] = 0\n        return dp[n]\n    if s[n - 1] >= b:\n        dp[n] = max_segments(n - 1, b, a, s, dp) + 1\n    elif s[n - 1] < b and s[n - 2] >= b:\n        dp[n] = max_segments(n - 2, b, a, s, dp) + 1\n    else:\n        dp[n] = max_segments(n - 1, b, a, s, dp)\n    return dp[n]\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\ndp = {}\nprint(max_segments(n, b, a, s, dp))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef max_segments(n, b, a, s):\n    # Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n"
    }
  ],
  "created": 1650448368,
  "object": "edit"
}
2022-04-20 09:53:01.457111 fix syntax errors 8 ['\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n', '\ndef max_segments(n, b, a, s):\n    # Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n', '\n\ndef max_segments(n, b, a, s, dp):\n    # TODO: Write your code here\n    if n == 0:\n        return 0\n    if dp[n][b][a] == -1:\n        if s[n - 1] == 0:\n            if b > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b - 1, a, s, dp) + 1)\n            if a > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a - 1, s, dp) + 1)\n        else:\n            if a > 0:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a - 1, s, dp) + 1)\n            else:\n                dp[n][b][a] = max(dp[n][b][a], max_segments(n - 1, b, a, s, dp))\n    return dp[n][b][a]\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\ndp = [[[-1 for _ in range(a + 1)] for _ in range(b + 1)] for _ in range(n + 1)]\nprint(max_segments(n, b, a, s, dp))\n', '\n\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n', '\n\ndef max_segments(n, b, a, s, k):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a, k = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s, k))\n', '\n\ndef max_segments(n, b, a, s):\n    # TODO: Write your code here\n    pass\n\n\nn, b, a = map(int, input().strip().split())\ns = list(map(int, input().strip().split()))\nprint(max_segments(n, b, a, s))\n', '\n\ndef max_segments(n, b, a, s, dp):\n    if n <= 0:\n        return 0\n    if n in dp:\n        return dp[n]\n    if n == 1:\n        if s[0] >= b:\n            dp[n] = 1\n        else:\n            dp[n] = 0\n        return dp[n]\n    if n == 2:\n        if s[1] >= b and s[0] >= b:\n            dp[n] = 2\n        elif s[1] >= b and s[0] < b:\n            dp[n] = 1\n        elif s[1] < b and s[0] >= b:\n            dp[n] = 1\n        else:\n            dp[n] = 0\n        return dp[n]\n    if s[n - 1] >= b:\n        dp[n] = max_segments(n - 1, b, a, s, dp) + 1\n    elif s[n - 1] < b and s[n - 2] >= b:\n        dp[n] = max_segments(n - 2, b, a, s, dp) + 1\n    else:\n        dp[n] = max_segments(n - 1, b, a, s, dp)\n    return dp[n]\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\ndp = {}\nprint(max_segments(n, b, a, s, dp))\n', '\n\ndef max_segments(n, b, a, s):\n    # Write your code here\n    return 0\n\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max_segments(n, b, a, s))\n']
2022-04-20 09:53:01.457181 size on output set 8
