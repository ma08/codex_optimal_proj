2022-04-20 10:09:24.724408 num operations 1
2022-04-20 10:09:24.724428 size on input set 1
2022-04-20 10:09:24.724668 using api key kouti
2022-04-20 10:09:45.907492 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\ns = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(n):\n    # If the cube is red\n    if s[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed, the number of consecutive red cubes, and the number of consecutive blue cubes\nnum_cubes_removed, num_consec_red, num_consec_blue = 0, 0, 0\n\n# Iterate through each cube in the tower\nfor cube in S:\n    # If the cube is red\n    if cube == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 5,
      "text": "\nN, S = input().split()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N = int(input())\n    S = input()\n\n    # Initialize the number of cubes that can be removed\n    num_cubes_removed = 0\n\n    # Initialize the number of consecutive red cubes\n    num_consec_red = 0\n\n    # Initialize the number of consecutive blue cubes\n    num_consec_blue = 0\n\n    # Iterate through each cube\n    for i in range(N):\n        # If the cube is red\n        if S[i] == '0':\n            # Increment the number of consecutive red cubes\n            num_consec_red += 1\n            # If there are two or more consecutive red cubes\n            if num_consec_red >= 2:\n                # Increment the number of cubes that can be removed\n                num_cubes_removed += 1\n                # Reset the number of consecutive red cubes\n                num_consec_red = 0\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # If the cube is blue\n        else:\n            # Increment the number of consecutive blue cubes\n            num_consec_blue += 1\n            # If there are two or more consecutive blue cubes\n            if num_consec_blue >= 2:\n                # Increment the number of cubes that can be removed\n                num_cubes_removed += 1\n                # Reset the number of consecutive blue cubes\n                num_consec_blue = 0\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n\n    # Print the number of cubes that can be removed\n    print(num_cubes_removed)\n\n    if __name__ == '__main__':\n        main()\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"
    }
  ],
  "created": 1650449364,
  "object": "edit"
}
2022-04-20 10:09:45.907930 fix syntax errors 8 ["#!/usr/bin/env python3\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\n\nn = int(input())\ns = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(n):\n    # If the cube is red\n    if s[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed, the number of consecutive red cubes, and the number of consecutive blue cubes\nnum_cubes_removed, num_consec_red, num_consec_blue = 0, 0, 0\n\n# Iterate through each cube in the tower\nfor cube in S:\n    # If the cube is red\n    if cube == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nN, S = input().split()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\n\ndef main():\n    N = int(input())\n    S = input()\n\n    # Initialize the number of cubes that can be removed\n    num_cubes_removed = 0\n\n    # Initialize the number of consecutive red cubes\n    num_consec_red = 0\n\n    # Initialize the number of consecutive blue cubes\n    num_consec_blue = 0\n\n    # Iterate through each cube\n    for i in range(N):\n        # If the cube is red\n        if S[i] == '0':\n            # Increment the number of consecutive red cubes\n            num_consec_red += 1\n            # If there are two or more consecutive red cubes\n            if num_consec_red >= 2:\n                # Increment the number of cubes that can be removed\n                num_cubes_removed += 1\n                # Reset the number of consecutive red cubes\n                num_consec_red = 0\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # If the cube is blue\n        else:\n            # Increment the number of consecutive blue cubes\n            num_consec_blue += 1\n            # If there are two or more consecutive blue cubes\n            if num_consec_blue >= 2:\n                # Increment the number of cubes that can be removed\n                num_cubes_removed += 1\n                # Reset the number of consecutive blue cubes\n                num_consec_blue = 0\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n\n    # Print the number of cubes that can be removed\n    print(num_cubes_removed)\n\n    if __name__ == '__main__':\n        main()\n", "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n"]
2022-04-20 10:09:45.908061 size on output set 6
2022-04-20 10:09:45.908073 num operations 1
2022-04-20 10:09:45.908079 size on input set 1
2022-04-20 10:09:45.908236 using api key soukgp
2022-04-20 10:09:53.226326 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\nS = input()\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nprint(A)\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\nS = input()\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\n\nprint(N - len(stack))\n"
    },
    {
      "index": 5,
      "text": "\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    },
    {
      "index": 6,
      "text": "\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n"
    }
  ],
  "created": 1650449385,
  "object": "edit"
}
2022-04-20 10:09:53.226611 fix syntax errors 8 ['\nN = int(input())\nS = input()\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n', '\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nprint(A)\n', '\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n', '\nN = int(input())\nS = input()\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n', '\n\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\n\nprint(N - len(stack))\n', '\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n', '\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n', '\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n']
2022-04-20 10:09:53.226651 size on output set 4
