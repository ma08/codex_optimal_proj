["# https://atcoder.jp/contests/abc138/tasks/abc138_d\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs,\n# and a list of the children of each node\nac_indices = {}\nchildren = [[] for i in range(n)]\nfor i in range(n):\n    if s[i] == 'A':\n        ac_indices[i] = 0\n    else:\n        children[int(s[i])-1].append(i)\n\n# for each query, find the number of ACs in the subtree\nfor i in range(q):\n    l, r = map(int, input().split())\n    ac_indices[l-1] += 1\n    if r < n:\n        ac_indices[r] -= 1\n\n# find the cumulative sum of the ac_indices\nfor i in range(1, n):\n    ac_indices[i] += ac_indices[i-1]\n\n# add the ac_indices to the children\nfor i in range(n):\n    for j in children[i]:\n        ac_indices[j] += ac_indices[i]\n\n# print the ac_indices\nfor i in range(n):\n    print(ac_indices[i], end=' ')\nprint()\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs,\n# and a list of the number of ACs in each substring\nac_counts = [0] * n\nac_indices = []\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_counts[i] = 1\n    if i > 0:\n        ac_counts[i] += ac_counts[i-1]\n        ac_indices.append(i)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_counts[r-1] - ac_counts[l-1])\n", "# https://atcoder.jp/contests/abc086/tasks/abc086_b\n\nn, q = map(int, input().split())\ns = input()\na = list(map(int, input().split()))\na.sort()\nprint(a[0] + a[1])\n", "\n\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C' and S[l-2] == 'A':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the number of ACs in the substring\nac_counts = []\ncount = 0\nfor i in range(n):\n    if s[i] == 'C':\n        count = 0\n    elif s[i] == 'A':\n        count += 1\n    ac_counts.append(count)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_counts[r-1] - ac_counts[l-1])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize the list\ncount = [0]\nans = []\n\n# count the number of ACs in the substring\nfor i in range(N):\n    if i != 0:\n        count.append(count[i-1])\n    if S[i] == 'C':\n        count[i] += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N - 1):\n    if S[i] == 'A' and S[i + 1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l - 1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "# ABC085C - Otoshidama\n\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    for j in range(l-1, r-1):\n        if S[j] == 'A' and S[j+1] == 'C':\n            count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-2] == 'A' and S[l-1] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs\nac_indices = []\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_indices.append(i)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    count = 0\n    for j in ac_indices:\n        if l <= j+1 <= r:\n            count += 1\n    print(count)\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs, and a list of the number of ACs in each substring\nac_indices = [0]\nac_count = [0]\nfor i in range(1, n):\n    if s[i-1] == 'A' and s[i] == 'C':\n        ac_indices.append(i)\n        ac_count.append(ac_count[i-1] + 1)\n    else:\n        ac_indices.append(i)\n        ac_count.append(ac_count[i-1])\n\n# for each query, find the number of ACs in the substring by subtracting the count of ACs in the previous substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_count[r-1] - ac_count[l-1])\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the number of ACs up to each index\nac_counts = [0]\nfor i in range(n):\n    if s[i] == 'A' and s[i-1] == 'C':\n        ac_counts.append(ac_counts[-1] + 1)\n    else:\n        ac_counts.append(ac_counts[-1])\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_counts[r] - ac_counts[l-1])\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(s[l-1:r].count('AC'))\n"]