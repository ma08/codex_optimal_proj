["def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, k = read_ints()\n    i = 1\n    largest = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i <= k:\n                largest = max(largest, i)\n            if n // i <= k:\n                largest = max(largest, n // i)\n        i += 1\n    print(n // largest)\n", "def make_divisors(n: int) -> list:\n    divisors = []\n    for k in range(1, int(n ** 0.5) + 1):\n        if n % k == 0:\n            divisors.append(k)\n            if k != n // k: \n                divisors.append(n // k)\n    divisors = sorted(divisors)\n    return divisors\n\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    divs = make_divisors(n)\n    ans = 10 ** 18\n    for div in divs:\n        if div <= k:\n            ans = min(ans, n // div)\n    print(ans)", "\nimport math\n\nT = int(input())\n\nfor _ in range(T):\n    n, k = list(map(int, input().split()))\n\n    divs = set()\n    for d in range(1, int(math.sqrt(n)) + 2):\n        if n % d == 0:\n            divs.add(d)\n            divs.add(n // d)\n\n    ans = 10**10\n    for d in divs:\n        if d > k:\n            continue\n        else:\n            ans = min(ans, n // d)\n\n    print(ans)\n", "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    ar = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            ar.append(i)\n            ar.append(n // i)\n        i += 1\n    ar.sort()\n    i = len(ar) - 1\n    ans = n\n    while i >= 0:\n        if ar[i] <= k:\n            ans = n // ar[i]\n            break\n        i -= 1\n    print(ans)", "import bisect\nt=int(input())\nfor you in range(t):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    lfi=[]\n    i=1\n    maxa=1\n    while(i*i<=n):\n        if(n%i==0):\n            lfi.append(i)\n            if(i>maxa and i<=k):\n                maxa=i\n            if(i!=n//i):\n                lfi.append(n//i)\n                if(n//i>maxa and n//i<=k):\n                    maxa=n//i\n        i+=1\n    print(n//maxa)\n", "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    i = 1\n    ans = n\n    while i * i <= n:\n        if n % i == 0:\n            if i <= k:\n                ans = min(ans, n // i)\n            if n // i <= k:\n                ans = min(ans, i)\n        i += 1\n    print(ans)\n", "import sys\nimport heapq\nimport random\nimport collections\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\nfrom functools import reduce\n\ndef all_divisors(n):    \n    return set(reduce(list.__add__, \n    ([i, n//i] for i in \n    range(1, int(n**0.5) + 1) if n % i == 0)))\n\n\ndef solve(n,k):  # fix inputs here\n    lst = all_divisors(n)\n    # print(lst)\n    lst = sorted(list(lst))\n    for i in lst[::-1]:\n        if i <= k:\n            return n//i\n    return n\n\n\n\n\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    # _ = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    # _,_ = list(map(int,input().split()))\n    n,k = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(input()))\n\n    res = solve(n,k)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "import math\n\nT = int(input())\n\n\ndef divs(n):\n    d = []\n    for i in range(1, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            d.extend([i, n//i])\n    return sorted(d)\n\nfor t in range(T):\n    N, K = [int(_) for _ in input().split()]\n    for d in divs(N):\n        if N / d <= K:\n            print(d)\n            break\n"]