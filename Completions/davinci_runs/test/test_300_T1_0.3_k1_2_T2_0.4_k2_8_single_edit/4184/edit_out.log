2022-04-20 10:19:46.426405 num operations 1
2022-04-20 10:19:46.426435 size on input set 1
2022-04-20 10:19:46.426606 using api key soukgp
2022-04-20 10:20:28.792433 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nN = int(input())\nW = list(map(int, input().split()))\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# dp[i][j] = min(dp[i-1][j], dp[i-1][j-W[i]] + W[i])\n# dp[i][j] = dp[i-1][j] if j < W[i]\n# dp[i][j] = min(dp[i-1][j], dp[i-1][j-W[i]] + W[i]) if j >= W[i]\n\ndp = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\ndp[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = min(dp[i][j], dp[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(dp[N][i] - (sum(W)-dp[N][i])))\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u5dee\u306e\u6700\u5c0f\u5024\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n\nN = int(input())\nW = list(map(int, input().split()))\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nA = list(map(int, input().split()))\n\ndef f(i, m):\n    if m == 0:\n        return True\n    if i >= N:\n        return False\n    res = f(i+1, m) or f(i+1, m-A[i])\n    return res\n\nQ = int(input())\nM = list(map(int, input().split()))\n\nfor i in range(Q):\n    if f(0, M[i]):\n        print('yes')\n    else:\n        print('no')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u304b\u3089\u91cd\u3055\u306e\u548c\u304cj\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u6700\u5c0f\u306e\u91cd\u3055\u306e\u5dee\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"
    }
  ],
  "created": 1650449986,
  "object": "edit"
}
2022-04-20 10:20:28.792910 fix syntax errors 8 ["\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nN = int(input())\nW = list(map(int, input().split()))\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# dp[i][j] = min(dp[i-1][j], dp[i-1][j-W[i]] + W[i])\n# dp[i][j] = dp[i-1][j] if j < W[i]\n# dp[i][j] = min(dp[i-1][j], dp[i-1][j-W[i]] + W[i]) if j >= W[i]\n\ndp = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\ndp[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = min(dp[i][j], dp[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(dp[N][i] - (sum(W)-dp[N][i])))\nprint(ans)\n", "\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、重さの差の最小値\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n\nN = int(input())\nW = list(map(int, input().split()))\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nA = list(map(int, input().split()))\n\ndef f(i, m):\n    if m == 0:\n        return True\n    if i >= N:\n        return False\n    res = f(i+1, m) or f(i+1, m-A[i])\n    return res\n\nQ = int(input())\nM = list(map(int, input().split()))\n\nfor i in range(Q):\n    if f(0, M[i]):\n        print('yes')\n    else:\n        print('no')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN = int(input())\nW = list(map(int, input().split()))\n\n# DP[i][j] = i番目までの荷物から重さの和がjになるように選んだときの、最小の重さの差\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i])\n# DP[i][j] = DP[i-1][j] if j < W[i]\n# DP[i][j] = min(DP[i-1][j], DP[i-1][j-W[i]] + W[i]) if j >= W[i]\n\nDP = [[float('inf') for _ in range(sum(W)+1)] for _ in range(N+1)]\nDP[0][0] = 0\n\nfor i in range(N):\n    for j in range(sum(W)+1):\n        if j < W[i]:\n            DP[i+1][j] = DP[i][j]\n        else:\n            DP[i+1][j] = min(DP[i][j], DP[i][j-W[i]] + W[i])\n\nans = float('inf')\nfor i in range(sum(W)//2+1):\n    ans = min(ans, abs(DP[N][i] - (sum(W)-DP[N][i])))\nprint(ans)\n"]
2022-04-20 10:20:28.793036 size on output set 6
2022-04-20 10:20:28.793048 num operations 1
2022-04-20 10:20:28.793054 size on input set 1
2022-04-20 10:20:28.793211 using api key soukgp
2022-04-20 10:20:41.757029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\u3002\n# dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\ndp = [[0] * (sum(W) + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    for j in range(sum(W) + 1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]] + W[i-1])\n\nans = sum(W)\nfor j in range(sum(W) + 1):\n    ans = min(ans, abs(2 * dp[N][j] - sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W) + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    for j in range(sum(W) + 1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u8377\u7269\u3092\u4f7f\u3063\u3066\u3001\u91cd\u3055\u306e\u5dee\u304cj\u4ee5\u5185\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u3051\u305f\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u548c\u306e\u6700\u5927\u5024\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n"
    }
  ],
  "created": 1650450028,
  "object": "edit"
}
2022-04-20 10:20:41.757328 fix syntax errors 8 ['\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値。\n# dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\ndp = [[0] * (sum(W) + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    for j in range(sum(W) + 1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]] + W[i-1])\n\nans = sum(W)\nfor j in range(sum(W) + 1):\n    ans = min(ans, abs(2 * dp[N][j] - sum(W)))\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n', '\n\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W) + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    for j in range(sum(W) + 1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n', '\nN = int(input())\nW = list(map(int, input().split()))\n\n# dp[i][j] = i番目までの荷物を使って、重さの差がj以内になるように分けたときの、重さの和の最大値\ndp = [[0] * (sum(W)+1) for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    for j in range(sum(W)+1):\n        if j < W[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W[i-1]]+W[i-1])\n\nans = sum(W)\nfor j in range(sum(W)+1):\n    ans = min(ans, abs(2*dp[N][j]-sum(W)))\n\nprint(ans)\n']
2022-04-20 10:20:41.757488 size on output set 4
