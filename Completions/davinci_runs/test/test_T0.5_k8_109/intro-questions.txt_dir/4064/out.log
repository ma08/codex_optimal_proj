2022-04-09 23:22:02.812608 """
Vova had a pretty weird sleeping schedule. There are $h$ hours in a day. Vova will sleep exactly $n$ times. The $i$-th time he will sleep exactly after $a_i$ hours from the time he woke up. You can assume that Vova woke up exactly at the beginning of this story (the initial time is $0$). Each time Vova sleeps exactly one day (in other words, $h$ hours).

Vova thinks that the $i$-th sleeping time is good if he starts to sleep between hours $l$ and $r$ inclusive.

Vova can control himself and before the $i$-th time can choose between two options: go to sleep after $a_i$ hours or after $a_i - 1$ hours.

Your task is to say the maximum number of good sleeping times Vova can obtain if he acts optimally.


-----Input-----

The first line of the input contains four integers $n, h, l$ and $r$ ($1 \le n \le 2000, 3 \le h \le 2000, 0 \le l \le r < h$) — the number of times Vova goes to sleep, the number of hours in a day and the segment of the good sleeping time.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i < h$), where $a_i$ is the number of hours after which Vova goes to sleep the $i$-th time.


-----Output-----

Print one integer — the maximum number of good sleeping times Vova can obtain if he acts optimally.


-----Example-----
Input
7 24 21 23
16 17 14 20 20 11 22

Output
3



-----Note-----

The maximum number of good times in the example is $3$.

The story starts from $t=0$. Then Vova goes to sleep after $a_1 - 1$ hours, now the time is $15$. This time is not good. Then Vova goes to sleep after $a_2 - 1$ hours, now the time is $15 + 16 = 7$. This time is also not good. Then Vova goes to sleep after $a_3$ hours, now the time is $7 + 14 = 21$. This time is good. Then Vova goes to sleep after $a_4 - 1$ hours, now the time is $21 + 19 = 16$. This time is not good. Then Vova goes to sleep after $a_5$ hours, now the time is $16 + 20 = 12$. This time is not good. Then Vova goes to sleep after $a_6$ hours, now the time is $12 + 11 = 23$. This time is good. Then Vova goes to sleep after $a_7$ hours, now the time is $23 + 22 = 21$. This time is also good.
"""
2022-04-09 23:22:02.812640 --------------------------
2022-04-09 23:22:32.169971 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_max_good_times(n, h, l, r, a):\n    good_times = 0\n    for i in range(n):\n        if l <= a[i] % h <= r:\n            good_times += 1\n            a[i] += 1\n        else:\n            a[i] += 2\n    return good_times\n\nif __name__ == \"__main__\":\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(get_max_good_times(n, h, l, r, a))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, h, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\ndp[0][0] = 1 if l <= a[0] <= r else 0\ndp[0][1] = 1 if l <= a[0] - 1 <= r else 0\n\nfor i in range(1, n):\n    if a[i] - a[i - 1] <= 1:\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i][0]\n    else:\n        dp[i][0] = dp[i - 1][0] + 1 if l <= a[i] <= r else dp[i - 1][0]\n        dp[i][1] = dp[i - 1][1] + 1 if l <= a[i] - 1 <= r else dp[i - 1][1]\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i] = the maximum number of good sleeping times Vova can obtain if he acts optimally\ndp = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    dp[i] = max(dp[i + 1], dp[i + 1] + (l <= (a[i] - 1) % h <= r))\nprint(dp[0])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    # dp[i][j] is the max number of good sleeping times if Vova goes to sleep after a[i] hours for the next j times.\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n, i - 1, -1):\n            # Case 1: Vova goes to sleep after a[i] hours\n            t = (a[i] + h - 1) % h\n            dp[i][j] = dp[i + 1][j - 1] + (1 if l <= t <= r else 0)\n            # Case 2: Vova goes to sleep after a[i] - 1 hours\n            t = (a[i] - 1 + h - 1) % h\n            dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + (1 if l <= t <= r else 0))\n    return dp[0][n]\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, h, l, r, a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum number of good times Vova can obtain by sleeping n times,\n# where the last time he slept is at time j\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0] % h] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        # Vova can't sleep at time j, so he has to sleep at time j-1\n        if j == 0:\n            dp[i][j] = dp[i - 1][h - 1]\n        else:\n            dp[i][j] = dp[i - 1][j - 1]\n\n        # Vova can sleep at time j, so he has to sleep at time j-a[i]\n        if l <= j < r:\n            dp[i][j] += 1\n        if j - a[i] < 0:\n            dp[i][j] += dp[i - 1][j - a[i] + h]\n        else:\n            dp[i][j] += dp[i - 1][j - a[i]]\n\nprint(max(dp[n - 1]))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] > h:\n            a[i] -= h\n\n    ans = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            ans += 1\n        if i + 1 < n:\n            if (l <= a[i] <= r) and (l <= a[i] + a[i+1] <= r):\n                a[i+1] += a[i]\n\n    if ans == n:\n        print(n)\n    else:\n        print(ans + 1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n\tn,h,l,r = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tcurr = 0\n\tcount = 0\n\tfor i in range(n):\n\t\tcurr += a[i]-1\n\t\tif curr >= h:\n\t\t\tcurr -= h\n\t\tif curr >= l and curr <= r:\n\t\t\tcount += 1\n\t\tcurr += 1\n\tprint(count)\n\nif __name__ == \"__main__\":\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0]*(h+1) for _ in range(n+1)]\n\ndp[0][0] = 1\n\nfor i in range(1, n+1):\n    for j in range(h+1):\n        dp[i][j] = dp[i-1][j]\n        if j >= a[i-1]:\n            dp[i][j] += dp[i-1][j-a[i-1]]\n        if j >= a[i-1]+1:\n            dp[i][j] += dp[i-1][j-a[i-1]-1]\n\nans = 0\nfor i in range(l, r+1):\n    ans += dp[n][i]\n\nprint(ans)"
    }
  ],
  "created": 1649560923,
  "id": "cmpl-4vIRHwf5pCbMgADagBUG04NaF3lJw",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:22:32.170269 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_max_good_times(n, h, l, r, a):\n    good_times = 0\n    for i in range(n):\n        if l <= a[i] % h <= r:\n            good_times += 1\n            a[i] += 1\n        else:\n            a[i] += 2\n    return good_times\n\nif __name__ == \"__main__\":\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(get_max_good_times(n, h, l, r, a))"
}
2022-04-09 23:22:32.170313 REASON stop
2022-04-09 23:22:32.171566 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, h, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\ndp[0][0] = 1 if l <= a[0] <= r else 0\ndp[0][1] = 1 if l <= a[0] - 1 <= r else 0\n\nfor i in range(1, n):\n    if a[i] - a[i - 1] <= 1:\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i][0]\n    else:\n        dp[i][0] = dp[i - 1][0] + 1 if l <= a[i] <= r else dp[i - 1][0]\n        dp[i][1] = dp[i - 1][1] + 1 if l <= a[i] - 1 <= r else dp[i - 1][1]\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))"
}
2022-04-09 23:22:32.171649 REASON stop
2022-04-09 23:22:32.172062 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i] = the maximum number of good sleeping times Vova can obtain if he acts optimally\ndp = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    dp[i] = max(dp[i + 1], dp[i + 1] + (l <= (a[i] - 1) % h <= r))\nprint(dp[0])"
}
2022-04-09 23:22:32.172159 REASON stop
2022-04-09 23:22:32.172511 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    # dp[i][j] is the max number of good sleeping times if Vova goes to sleep after a[i] hours for the next j times.\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n, i - 1, -1):\n            # Case 1: Vova goes to sleep after a[i] hours\n            t = (a[i] + h - 1) % h\n            dp[i][j] = dp[i + 1][j - 1] + (1 if l <= t <= r else 0)\n            # Case 2: Vova goes to sleep after a[i] - 1 hours\n            t = (a[i] - 1 + h - 1) % h\n            dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + (1 if l <= t <= r else 0))\n    return dp[0][n]\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, h, l, r, a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:22:32.172544 REASON stop
2022-04-09 23:22:32.172734 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum number of good times Vova can obtain by sleeping n times,\n# where the last time he slept is at time j\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0] % h] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        # Vova can't sleep at time j, so he has to sleep at time j-1\n        if j == 0:\n            dp[i][j] = dp[i - 1][h - 1]\n        else:\n            dp[i][j] = dp[i - 1][j - 1]\n\n        # Vova can sleep at time j, so he has to sleep at time j-a[i]\n        if l <= j < r:\n            dp[i][j] += 1\n        if j - a[i] < 0:\n            dp[i][j] += dp[i - 1][j - a[i] + h]\n        else:\n            dp[i][j] += dp[i - 1][j - a[i]]\n\nprint(max(dp[n - 1]))"
}
2022-04-09 23:22:32.172764 REASON stop
2022-04-09 23:22:32.172957 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] > h:\n            a[i] -= h\n\n    ans = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            ans += 1\n        if i + 1 < n:\n            if (l <= a[i] <= r) and (l <= a[i] + a[i+1] <= r):\n                a[i+1] += a[i]\n\n    if ans == n:\n        print(n)\n    else:\n        print(ans + 1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:22:32.172983 REASON stop
2022-04-09 23:22:32.173171 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n\tn,h,l,r = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tcurr = 0\n\tcount = 0\n\tfor i in range(n):\n\t\tcurr += a[i]-1\n\t\tif curr >= h:\n\t\t\tcurr -= h\n\t\tif curr >= l and curr <= r:\n\t\t\tcount += 1\n\t\tcurr += 1\n\tprint(count)\n\nif __name__ == \"__main__\":\n\tmain()"
}
2022-04-09 23:22:32.173195 REASON stop
2022-04-09 23:22:32.173379 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0]*(h+1) for _ in range(n+1)]\n\ndp[0][0] = 1\n\nfor i in range(1, n+1):\n    for j in range(h+1):\n        dp[i][j] = dp[i-1][j]\n        if j >= a[i-1]:\n            dp[i][j] += dp[i-1][j-a[i-1]]\n        if j >= a[i-1]+1:\n            dp[i][j] += dp[i-1][j-a[i-1]-1]\n\nans = 0\nfor i in range(l, r+1):\n    ans += dp[n][i]\n\nprint(ans)"
}
2022-04-09 23:22:32.173405 REASON stop
