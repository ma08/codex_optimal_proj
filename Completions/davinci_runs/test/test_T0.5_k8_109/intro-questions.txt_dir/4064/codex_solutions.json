["\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i] = the maximum number of good sleeping times Vova can obtain if he acts optimally\ndp = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    dp[i] = max(dp[i + 1], dp[i + 1] + (l <= (a[i] - 1) % h <= r))\nprint(dp[0])", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum number of good times Vova can obtain by sleeping n times,\n# where the last time he slept is at time j\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0] % h] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        # Vova can't sleep at time j, so he has to sleep at time j-1\n        if j == 0:\n            dp[i][j] = dp[i - 1][h - 1]\n        else:\n            dp[i][j] = dp[i - 1][j - 1]\n\n        # Vova can sleep at time j, so he has to sleep at time j-a[i]\n        if l <= j < r:\n            dp[i][j] += 1\n        if j - a[i] < 0:\n            dp[i][j] += dp[i - 1][j - a[i] + h]\n        else:\n            dp[i][j] += dp[i - 1][j - a[i]]\n\nprint(max(dp[n - 1]))", "\n\ndef get_max_good_times(n, h, l, r, a):\n    good_times = 0\n    for i in range(n):\n        if l <= a[i] % h <= r:\n            good_times += 1\n            a[i] += 1\n        else:\n            a[i] += 2\n    return good_times\n\nif __name__ == \"__main__\":\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(get_max_good_times(n, h, l, r, a))", "\n\nn, h, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\ndp[0][0] = 1 if l <= a[0] <= r else 0\ndp[0][1] = 1 if l <= a[0] - 1 <= r else 0\n\nfor i in range(1, n):\n    if a[i] - a[i - 1] <= 1:\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i][0]\n    else:\n        dp[i][0] = dp[i - 1][0] + 1 if l <= a[i] <= r else dp[i - 1][0]\n        dp[i][1] = dp[i - 1][1] + 1 if l <= a[i] - 1 <= r else dp[i - 1][1]\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))", "\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] > h:\n            a[i] -= h\n\n    ans = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            ans += 1\n        if i + 1 < n:\n            if (l <= a[i] <= r) and (l <= a[i] + a[i+1] <= r):\n                a[i+1] += a[i]\n\n    if ans == n:\n        print(n)\n    else:\n        print(ans + 1)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n\tn,h,l,r = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tcurr = 0\n\tcount = 0\n\tfor i in range(n):\n\t\tcurr += a[i]-1\n\t\tif curr >= h:\n\t\t\tcurr -= h\n\t\tif curr >= l and curr <= r:\n\t\t\tcount += 1\n\t\tcurr += 1\n\tprint(count)\n\nif __name__ == \"__main__\":\n\tmain()", "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    # dp[i][j] is the max number of good sleeping times if Vova goes to sleep after a[i] hours for the next j times.\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n, i - 1, -1):\n            # Case 1: Vova goes to sleep after a[i] hours\n            t = (a[i] + h - 1) % h\n            dp[i][j] = dp[i + 1][j - 1] + (1 if l <= t <= r else 0)\n            # Case 2: Vova goes to sleep after a[i] - 1 hours\n            t = (a[i] - 1 + h - 1) % h\n            dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + (1 if l <= t <= r else 0))\n    return dp[0][n]\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, h, l, r, a))\n\nif __name__ == '__main__':\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0]*(h+1) for _ in range(n+1)]\n\ndp[0][0] = 1\n\nfor i in range(1, n+1):\n    for j in range(h+1):\n        dp[i][j] = dp[i-1][j]\n        if j >= a[i-1]:\n            dp[i][j] += dp[i-1][j-a[i-1]]\n        if j >= a[i-1]+1:\n            dp[i][j] += dp[i-1][j-a[i-1]-1]\n\nans = 0\nfor i in range(l, r+1):\n    ans += dp[n][i]\n\nprint(ans)"]