2022-04-09 23:30:42.788621 """
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 300, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
1 4 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
2022-04-09 23:30:42.788643 --------------------------
2022-04-09 23:33:06.363726 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport collections\n\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.parent = self\n        self.rank = 0\n\nclass DisjointSet:\n    def __init__(self, vertexes):\n        self.vertexes = vertexes\n\n    def find(self, v):\n        if v.parent != v:\n            v.parent = self.find(v.parent)\n        return v.parent\n\n    def union(self, v1, v2):\n        v1Root = self.find(v1)\n        v2Root = self.find(v2)\n        if v1Root == v2Root:\n            return\n\n        if v1Root.rank < v2Root.rank:\n            v1Root.parent = v2Root\n        elif v1Root.rank > v2Root.rank:\n            v2Root.parent = v1Root\n        else:\n            v2Root.parent = v1Root\n            v1Root.rank += 1\n\ndef get_max_diff(n, m, a, segments):\n    vertexes = [Vertex(i) for i in range(n)]\n    ds = DisjointSet(vertexes)\n    graph = collections.defaultdict(list)\n    for i in range(m):\n        graph[segments[i][0] - 1].append(segments[i][1] - 1)\n        graph[segments[i][1] - 1].append(segments[i][0] - 1)\n    for i in range(n):\n        for j in graph[i]:\n            ds.union(vertexes[i], vertexes[j])\n    max_diff = 0\n    for v in vertexes:\n        root = ds.find(v)\n        if max_diff < a[v.key] - a[root.key]:\n            max_diff = a[v.key] - a[root.key]\n    return max_diff\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    print(get_max_diff(n, m, a, segments))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_diff = max(a) - min(a)\n    if max_diff == 0:\n        print(0)\n        print(0)\n        return\n    # print(segments)\n    # print(max_diff)\n    # print(max(a))\n    # print(min(a))\n    # print(a)\n    # print(\"----\")\n    # print(segments)\n    # print(a)\n    # print(max_diff)\n    # print(\"----\")\n    for i in range(m):\n        for j in range(i+1, m):\n            # print(\"----\")\n            # print(i, j)\n            # print(segments[i])\n            # print(segments[j])\n            # print(\"----\")\n            left = max(segments[i][0], segments[j][0])\n            right = min(segments[i][1], segments[j][1])\n            # print(\"----\")\n            # print(left, right)\n            # print(\"----\")\n            if left <= right:\n                # print(\"----\")\n                # print(left, right)\n                # print(\"----\")\n                for k in range(left, right+1):\n                    a[k] -= 1\n                # print(a)\n                diff = max(a) - min(a)\n                # print(diff)\n                if diff > max_diff:\n                    max_diff = diff\n                for k in range(left, right+1):\n                    a[k] += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\nimport sys\nimport math\n\ndef main():\n  n, m = map(int, raw_input().split())\n  a = map(int, raw_input().split())\n  segs = []\n  for i in xrange(m):\n    l, r = map(int, raw_input().split())\n    segs.append((l, r, i+1))\n  segs.sort()\n  segs = [(l, r, i) for (l, r, i) in segs if l <= r]\n  dp = [[0] * (m + 1) for i in xrange(n + 1)]\n  for i in xrange(1, n + 1):\n    for j in xrange(1, m + 1):\n      dp[i][j] = dp[i][j - 1]\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          dp[i][j] = max(dp[i][j], dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]))\n  #print dp\n  sol = dp[n][m]\n  #print sol\n  print sol\n  if sol == 0:\n    print 0\n    return\n  ans = []\n  i = n\n  j = m\n  while i > 0 and j > 0:\n    if dp[i][j] == dp[i][j - 1]:\n      j -= 1\n    else:\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          if dp[i][j] == dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]):\n            ans.append(k)\n            i = l - 1\n            j -= 1\n            break\n  ans.reverse()\n  print len(ans)\n  print \" \".join(map(str, ans))\n\nif __name__ == \"__main__\":\n  main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#The number of elements in the array.\nn = int(input())\n\n#The number of segments.\nm = int(input())\n\n#The array.\na = list(map(int, input().split()))\n\n#The list of segments.\nsegments = []\n\n#The list of values of the given segments.\nvalues = []\n\n#The list of indices of the given segments.\nindices = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef get_max_diff(n, m, a, segs):\n    diff = 0\n    for i in range(n):\n        for j in range(m):\n            if segs[j][0] <= i + 1 <= segs[j][1]:\n                a[i] -= 1\n        if i == 0:\n            min_a = a[i]\n            max_a = a[i]\n        else:\n            min_a = min(min_a, a[i])\n            max_a = max(max_a, a[i])\n    diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_2(n, m, a, segs):\n    diff = 0\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        if i == 0:\n            min_a = min(a)\n            max_a = max(a)\n        else:\n            min_a = min(min_a, min(a))\n            max_a = max(max_a, max(a))\n    diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_3(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_4(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_5(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_6(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_7(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_8(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_9(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_10(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_11(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_12(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_13(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_14(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_15(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_16(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_17(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_18(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_19(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_20(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_21(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_22(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_23(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_24(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_25(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_26(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport numpy as np\n\ndef main():\n    n, m = map(int, input().split())\n    a = np.array(list(map(int, input().split())))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    d = 0\n    q = 0\n    c = []\n    for s in segments:\n        if np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) > d:\n            d = np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1])\n            q = 1\n            c = [segments.index(s)+1]\n        elif np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) == d:\n            q += 1\n            c.append(segments.index(s)+1)\n    print(d)\n    print(q)\n    print(*c)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, m, a, segments):\n    if n == 1:\n        return 0, []\n\n    # sort segments by length\n    segments.sort(key=lambda s: s[1] - s[0])\n\n    # find min and max elements\n    min_a = min(a)\n    max_a = max(a)\n    min_idx = a.index(min_a)\n    max_idx = a.index(max_a)\n\n    # if min and max are in the same segment, then there is no need to choose any segments\n    if any(min_idx >= s[0] and min_idx <= s[1] and max_idx >= s[0] and max_idx <= s[1] for s in segments):\n        return max_a - min_a, []\n\n    # otherwise, find the segments that contain min and max\n    min_segment = None\n    max_segment = None\n    for s in segments:\n        if min_idx >= s[0] and min_idx <= s[1]:\n            min_segment = s\n        if max_idx >= s[0] and max_idx <= s[1]:\n            max_segment = s\n\n    if min_segment is None or max_segment is None:\n        raise ValueError(\"min and max must be in some segment\")\n\n    # choose the segments that contain min and max\n    chosen_segments = [min_segment, max_segment]\n    chosen_segments_idx = [segments.index(s) for s in chosen_segments]\n\n    # apply the chosen segments\n    for s in chosen_segments:\n        for i in range(s[0] - 1, s[1]):\n            a[i] -= 1\n\n    # find new min and max\n    new_min_a = min(a)\n    new_max_a = max(a)\n\n    return new_max_a - new_min_a, chosen_segments_idx\n\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segments = []\n    for i in range(m):\n        segments.append([int(x) for x in sys.stdin.readline().split()])\n\n    d, chosen_segments_idx = solve(n, m, a, segments)\n    print(d)\n    print(len(chosen_segments_idx))\n    print(' '.join([str(x) for x in chosen_segments_idx]))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649561443,
  "id": "cmpl-4vIZfFOUp2KAs52xvKikBntnzdsOM",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:33:06.364187 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport collections\n\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.parent = self\n        self.rank = 0\n\nclass DisjointSet:\n    def __init__(self, vertexes):\n        self.vertexes = vertexes\n\n    def find(self, v):\n        if v.parent != v:\n            v.parent = self.find(v.parent)\n        return v.parent\n\n    def union(self, v1, v2):\n        v1Root = self.find(v1)\n        v2Root = self.find(v2)\n        if v1Root == v2Root:\n            return\n\n        if v1Root.rank < v2Root.rank:\n            v1Root.parent = v2Root\n        elif v1Root.rank > v2Root.rank:\n            v2Root.parent = v1Root\n        else:\n            v2Root.parent = v1Root\n            v1Root.rank += 1\n\ndef get_max_diff(n, m, a, segments):\n    vertexes = [Vertex(i) for i in range(n)]\n    ds = DisjointSet(vertexes)\n    graph = collections.defaultdict(list)\n    for i in range(m):\n        graph[segments[i][0] - 1].append(segments[i][1] - 1)\n        graph[segments[i][1] - 1].append(segments[i][0] - 1)\n    for i in range(n):\n        for j in graph[i]:\n            ds.union(vertexes[i], vertexes[j])\n    max_diff = 0\n    for v in vertexes:\n        root = ds.find(v)\n        if max_diff < a[v.key] - a[root.key]:\n            max_diff = a[v.key] - a[root.key]\n    return max_diff\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    print(get_max_diff(n, m, a, segments))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:33:06.364212 REASON stop
2022-04-09 23:33:06.375824 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_diff = max(a) - min(a)\n    if max_diff == 0:\n        print(0)\n        print(0)\n        return\n    # print(segments)\n    # print(max_diff)\n    # print(max(a))\n    # print(min(a))\n    # print(a)\n    # print(\"----\")\n    # print(segments)\n    # print(a)\n    # print(max_diff)\n    # print(\"----\")\n    for i in range(m):\n        for j in range(i+1, m):\n            # print(\"----\")\n            # print(i, j)\n            # print(segments[i])\n            # print(segments[j])\n            # print(\"----\")\n            left = max(segments[i][0], segments[j][0])\n            right = min(segments[i][1], segments[j][1])\n            # print(\"----\")\n            # print(left, right)\n            # print(\"----\")\n            if left <= right:\n                # print(\"----\")\n                # print(left, right)\n                # print(\"----\")\n                for k in range(left, right+1):\n                    a[k] -= 1\n                # print(a)\n                diff = max(a) - min(a)\n                # print(diff)\n                if diff > max_diff:\n                    max_diff = diff\n                for k in range(left, right+1):\n                    a[k] += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:33:06.375933 REASON stop
2022-04-09 23:33:06.376684 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\nimport sys\nimport math\n\ndef main():\n  n, m = map(int, raw_input().split())\n  a = map(int, raw_input().split())\n  segs = []\n  for i in xrange(m):\n    l, r = map(int, raw_input().split())\n    segs.append((l, r, i+1))\n  segs.sort()\n  segs = [(l, r, i) for (l, r, i) in segs if l <= r]\n  dp = [[0] * (m + 1) for i in xrange(n + 1)]\n  for i in xrange(1, n + 1):\n    for j in xrange(1, m + 1):\n      dp[i][j] = dp[i][j - 1]\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          dp[i][j] = max(dp[i][j], dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]))\n  #print dp\n  sol = dp[n][m]\n  #print sol\n  print sol\n  if sol == 0:\n    print 0\n    return\n  ans = []\n  i = n\n  j = m\n  while i > 0 and j > 0:\n    if dp[i][j] == dp[i][j - 1]:\n      j -= 1\n    else:\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          if dp[i][j] == dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]):\n            ans.append(k)\n            i = l - 1\n            j -= 1\n            break\n  ans.reverse()\n  print len(ans)\n  print \" \".join(map(str, ans))\n\nif __name__ == \"__main__\":\n  main()"
}
2022-04-09 23:33:06.376794 REASON stop
2022-04-09 23:33:06.377510 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-09 23:33:06.377599 REASON stop
2022-04-09 23:33:06.377969 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#The number of elements in the array.\nn = int(input())\n\n#The number of segments.\nm = int(input())\n\n#The array.\na = list(map(int, input().split()))\n\n#The list of segments.\nsegments = []\n\n#The list of values of the given segments.\nvalues = []\n\n#The list of indices of the given segments.\nindices = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_descending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_descending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_descending_descending_ascending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_descending_descending_ascending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_descending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_descending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_ascending_ascending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_descending_descending_descending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_descending_descending_descending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending order.\nsorted_values_descending_descending_descending_ascending_ascending_descending = []\n\n#The list of indices of the given segments sorted in descending order.\nsorted_indices_descending_descending_descending_ascending_ascending_descending = []\n\n#The list of values of the given segments sorted in ascending order.\nsorted_values_ascending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of indices of the given segments sorted in ascending order.\nsorted_indices_ascending_ascending_ascending_ascending_ascending_ascending = []\n\n#The list of values of the given segments sorted in descending"
}
2022-04-09 23:33:06.378066 REASON length
2022-04-09 23:33:06.378070 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef get_max_diff(n, m, a, segs):\n    diff = 0\n    for i in range(n):\n        for j in range(m):\n            if segs[j][0] <= i + 1 <= segs[j][1]:\n                a[i] -= 1\n        if i == 0:\n            min_a = a[i]\n            max_a = a[i]\n        else:\n            min_a = min(min_a, a[i])\n            max_a = max(max_a, a[i])\n    diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_2(n, m, a, segs):\n    diff = 0\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        if i == 0:\n            min_a = min(a)\n            max_a = max(a)\n        else:\n            min_a = min(min_a, min(a))\n            max_a = max(max_a, max(a))\n    diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_3(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n    return diff\n\n\ndef get_max_diff_4(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_5(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_6(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_7(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_8(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_9(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_10(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_11(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_12(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_13(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_14(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_15(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_16(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_17(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_18(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_19(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_20(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_21(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_22(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_23(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_24(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_25(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff = max_a - min_a\n            seg_i = i\n    return diff, seg_i\n\n\ndef get_max_diff_26(n, m, a, segs):\n    diff = 0\n    min_a = min(a)\n    max_a = max(a)\n    for i in range(m):\n        for j in range(segs[i][0] - 1, segs[i][1]):\n            a[j] -= 1\n        min_a = min(min_a, min(a))\n        max_a = max(max_a, max(a))\n        if max_a - min_a > diff:\n            diff"
}
2022-04-09 23:33:06.378115 REASON length
2022-04-09 23:33:06.378119 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport numpy as np\n\ndef main():\n    n, m = map(int, input().split())\n    a = np.array(list(map(int, input().split())))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    d = 0\n    q = 0\n    c = []\n    for s in segments:\n        if np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) > d:\n            d = np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1])\n            q = 1\n            c = [segments.index(s)+1]\n        elif np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) == d:\n            q += 1\n            c.append(segments.index(s)+1)\n    print(d)\n    print(q)\n    print(*c)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:33:06.378133 REASON stop
2022-04-09 23:33:06.378367 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, m, a, segments):\n    if n == 1:\n        return 0, []\n\n    # sort segments by length\n    segments.sort(key=lambda s: s[1] - s[0])\n\n    # find min and max elements\n    min_a = min(a)\n    max_a = max(a)\n    min_idx = a.index(min_a)\n    max_idx = a.index(max_a)\n\n    # if min and max are in the same segment, then there is no need to choose any segments\n    if any(min_idx >= s[0] and min_idx <= s[1] and max_idx >= s[0] and max_idx <= s[1] for s in segments):\n        return max_a - min_a, []\n\n    # otherwise, find the segments that contain min and max\n    min_segment = None\n    max_segment = None\n    for s in segments:\n        if min_idx >= s[0] and min_idx <= s[1]:\n            min_segment = s\n        if max_idx >= s[0] and max_idx <= s[1]:\n            max_segment = s\n\n    if min_segment is None or max_segment is None:\n        raise ValueError(\"min and max must be in some segment\")\n\n    # choose the segments that contain min and max\n    chosen_segments = [min_segment, max_segment]\n    chosen_segments_idx = [segments.index(s) for s in chosen_segments]\n\n    # apply the chosen segments\n    for s in chosen_segments:\n        for i in range(s[0] - 1, s[1]):\n            a[i] -= 1\n\n    # find new min and max\n    new_min_a = min(a)\n    new_max_a = max(a)\n\n    return new_max_a - new_min_a, chosen_segments_idx\n\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segments = []\n    for i in range(m):\n        segments.append([int(x) for x in sys.stdin.readline().split()])\n\n    d, chosen_segments_idx = solve(n, m, a, segments)\n    print(d)\n    print(len(chosen_segments_idx))\n    print(' '.join([str(x) for x in chosen_segments_idx]))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:33:06.378399 REASON stop
