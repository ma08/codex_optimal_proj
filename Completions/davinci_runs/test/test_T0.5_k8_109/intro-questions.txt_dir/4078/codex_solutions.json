["", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    max_diff = max(a) - min(a)\n    if max_diff == 0:\n        print(0)\n        print(0)\n        return\n    # print(segments)\n    # print(max_diff)\n    # print(max(a))\n    # print(min(a))\n    # print(a)\n    # print(\"----\")\n    # print(segments)\n    # print(a)\n    # print(max_diff)\n    # print(\"----\")\n    for i in range(m):\n        for j in range(i+1, m):\n            # print(\"----\")\n            # print(i, j)\n            # print(segments[i])\n            # print(segments[j])\n            # print(\"----\")\n            left = max(segments[i][0], segments[j][0])\n            right = min(segments[i][1], segments[j][1])\n            # print(\"----\")\n            # print(left, right)\n            # print(\"----\")\n            if left <= right:\n                # print(\"----\")\n                # print(left, right)\n                # print(\"----\")\n                for k in range(left, right+1):\n                    a[k] -= 1\n                # print(a)\n                diff = max(a) - min(a)\n                # print(diff)\n                if diff > max_diff:\n                    max_diff = diff\n                for k in range(left, right+1):\n                    a[k] += 1\n    print(max_diff)\n    print(0)\n\nif __name__ == '__main__':\n    main()", "\nimport sys\nimport math\n\ndef main():\n  n, m = map(int, raw_input().split())\n  a = map(int, raw_input().split())\n  segs = []\n  for i in xrange(m):\n    l, r = map(int, raw_input().split())\n    segs.append((l, r, i+1))\n  segs.sort()\n  segs = [(l, r, i) for (l, r, i) in segs if l <= r]\n  dp = [[0] * (m + 1) for i in xrange(n + 1)]\n  for i in xrange(1, n + 1):\n    for j in xrange(1, m + 1):\n      dp[i][j] = dp[i][j - 1]\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          dp[i][j] = max(dp[i][j], dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]))\n  #print dp\n  sol = dp[n][m]\n  #print sol\n  print sol\n  if sol == 0:\n    print 0\n    return\n  ans = []\n  i = n\n  j = m\n  while i > 0 and j > 0:\n    if dp[i][j] == dp[i][j - 1]:\n      j -= 1\n    else:\n      for seg in segs:\n        l, r, k = seg\n        if l <= i <= r:\n          if dp[i][j] == dp[l - 1][j - 1] + (a[i - 1] - a[l - 1]):\n            ans.append(k)\n            i = l - 1\n            j -= 1\n            break\n  ans.reverse()\n  print len(ans)\n  print \" \".join(map(str, ans))\n\nif __name__ == \"__main__\":\n  main()", "\n\nimport sys\n\ndef solve(n, m, a, segments):\n    if n == 1:\n        return 0, []\n\n    # sort segments by length\n    segments.sort(key=lambda s: s[1] - s[0])\n\n    # find min and max elements\n    min_a = min(a)\n    max_a = max(a)\n    min_idx = a.index(min_a)\n    max_idx = a.index(max_a)\n\n    # if min and max are in the same segment, then there is no need to choose any segments\n    if any(min_idx >= s[0] and min_idx <= s[1] and max_idx >= s[0] and max_idx <= s[1] for s in segments):\n        return max_a - min_a, []\n\n    # otherwise, find the segments that contain min and max\n    min_segment = None\n    max_segment = None\n    for s in segments:\n        if min_idx >= s[0] and min_idx <= s[1]:\n            min_segment = s\n        if max_idx >= s[0] and max_idx <= s[1]:\n            max_segment = s\n\n    if min_segment is None or max_segment is None:\n        raise ValueError(\"min and max must be in some segment\")\n\n    # choose the segments that contain min and max\n    chosen_segments = [min_segment, max_segment]\n    chosen_segments_idx = [segments.index(s) for s in chosen_segments]\n\n    # apply the chosen segments\n    for s in chosen_segments:\n        for i in range(s[0] - 1, s[1]):\n            a[i] -= 1\n\n    # find new min and max\n    new_min_a = min(a)\n    new_max_a = max(a)\n\n    return new_max_a - new_min_a, chosen_segments_idx\n\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    segments = []\n    for i in range(m):\n        segments.append([int(x) for x in sys.stdin.readline().split()])\n\n    d, chosen_segments_idx = solve(n, m, a, segments)\n    print(d)\n    print(len(chosen_segments_idx))\n    print(' '.join([str(x) for x in chosen_segments_idx]))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport collections\n\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.parent = self\n        self.rank = 0\n\nclass DisjointSet:\n    def __init__(self, vertexes):\n        self.vertexes = vertexes\n\n    def find(self, v):\n        if v.parent != v:\n            v.parent = self.find(v.parent)\n        return v.parent\n\n    def union(self, v1, v2):\n        v1Root = self.find(v1)\n        v2Root = self.find(v2)\n        if v1Root == v2Root:\n            return\n\n        if v1Root.rank < v2Root.rank:\n            v1Root.parent = v2Root\n        elif v1Root.rank > v2Root.rank:\n            v2Root.parent = v1Root\n        else:\n            v2Root.parent = v1Root\n            v1Root.rank += 1\n\ndef get_max_diff(n, m, a, segments):\n    vertexes = [Vertex(i) for i in range(n)]\n    ds = DisjointSet(vertexes)\n    graph = collections.defaultdict(list)\n    for i in range(m):\n        graph[segments[i][0] - 1].append(segments[i][1] - 1)\n        graph[segments[i][1] - 1].append(segments[i][0] - 1)\n    for i in range(n):\n        for j in graph[i]:\n            ds.union(vertexes[i], vertexes[j])\n    max_diff = 0\n    for v in vertexes:\n        root = ds.find(v)\n        if max_diff < a[v.key] - a[root.key]:\n            max_diff = a[v.key] - a[root.key]\n    return max_diff\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    print(get_max_diff(n, m, a, segments))\n\nif __name__ == '__main__':\n    main()", "\n\nimport numpy as np\n\ndef main():\n    n, m = map(int, input().split())\n    a = np.array(list(map(int, input().split())))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    d = 0\n    q = 0\n    c = []\n    for s in segments:\n        if np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) > d:\n            d = np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1])\n            q = 1\n            c = [segments.index(s)+1]\n        elif np.max(a[s[0]:s[1]+1]) - np.min(a[s[0]:s[1]+1]) == d:\n            q += 1\n            c.append(segments.index(s)+1)\n    print(d)\n    print(q)\n    print(*c)\n\nif __name__ == '__main__':\n    main()"]