2022-04-09 23:33:31.871424 """
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).

You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.

You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).

For example, for the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$), where $a_i$ is the $i$-th element of $a$. All these integers are pairwise distinct.


-----Output-----

In the first line of the output print $k$ — the maximum number of elements in a strictly increasing sequence you can obtain.

In the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.


-----Examples-----
Input
5
2 1 5 4 3

Output
4
LRRR

Input
7
1 3 5 6 7 4 2

Output
7
LRLRLLL

Input
3
1 2 3

Output
3
LLL

Input
4
1 2 4 3

Output
4
LLRL



-----Note-----

The first example is described in the problem statement.
"""
2022-04-09 23:33:31.871450 --------------------------
2022-04-09 23:35:49.294690 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # The idea is to maintain a list of numbers that are \"out of order\"\n    # and a list of the indexes that are out of order\n    # We can then greedily choose the minimum number in the out of order list\n    # and then move the index to the next number in the list\n    # We can do this by adding the index of the minimum number to the end of the out of order list\n    # and then removing the first element from the list\n    \n    # For example, if our list is [2, 1, 5, 4, 3]\n    # Our out of order list is [1, 4, 3] with indexes [1, 3, 4]\n    # We can then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = deque()\nr = deque()\n\nfor i in range(n):\n    l.append(a[i])\n    r.appendleft(a[n-i-1])\n\nans = []\nwhile len(l) > 0:\n    if l[0] < r[0]:\n        ans.append('L')\n        l.popleft()\n    else:\n        ans.append('R')\n        r.popleft()\n\nprint(len(ans))\nprint(''.join(ans))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = max length of increasing sequence with leftmost element a[i] and rightmost element a[j]\n# dp[i][j] = 0 if i > j\n# dp[i][j] = 1 if i == j\n# dp[i][j] = dp[i][j - 1] + 1 if a[j] > a[j - 1]\n# dp[i][j] = max(dp[i][k] + dp[k + 1][j]) for all k in [i, j) if a[j] < a[j - 1]\n\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor length in range(2, n + 1):\n    for i in range(n - length + 1):\n        j = i + length - 1\n        if a[j] > a[j - 1]:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i][k] + dp[k + 1][j] for k in range(i, j))\n\nprint(dp[0][n - 1])\n\n# reconstruct solution\ni, j = 0, n - 1\nsolution = []\nwhile i <= j:\n    if a[j] > a[j - 1]:\n        solution.append('R')\n        j -= 1\n    else:\n        k = i\n        while dp[i][j] != dp[i][k] + dp[k + 1][j]:\n            k += 1\n        solution.extend(['L'] * (k - i + 1))\n        i = k + 1\n\nprint(''.join(solution))"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na_sorted = sorted(a)\n\n# print(a)\n# print(a_sorted)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n)\n    print('L'*n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na_sorted = sorted(a)\n\nd = {a_sorted[i]: i for i in range(n)}\n\nans = []\n\nfor i in range(n):\n    if d[a[i]] < i:\n        ans.append('L')\n    else:\n        ans.append('R')\n\nprint(len(ans))\nprint(''.join(ans))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # find the longest increasing subsequence\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] <= lis[j]:\n                lis[i] = lis[j] + 1\n\n    # find the longest decreasing subsequence\n    lds = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] <= lds[j]:\n                lds[i] = lds[j] + 1\n\n    # find the longest common subsequence\n    lcs = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lcs[i] <= lcs[j]:\n                lcs[i] = lcs[j] + 1\n\n    # find the longest alternating subsequence\n    la = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n\n    # find the maximum length of any subsequence\n    print(max(lis + lds + lcs + la))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# a = [2, 1, 5, 4, 3]\n\n# n = 5\n# a = [1, 3, 5, 6, 7, 4, 2]\n\n# n = 3\n# a = [1, 2, 3]\n\n# n = 4\n# a = [1, 2, 4, 3]\n\n# n = 2\n# a = [1, 2]\n\n# n = 2\n# a = [2, 1]\n\n# n = 4\n# a = [1, 4, 2, 3]\n\n# n = 4\n# a = [1, 3, 2, 4]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [5, 4, 3, 2, 1]\n\n# n = 5\n# a = [1, 3, 2, 4, 5]\n\n# n = 5\n# a = [1, 4, 2, 3, 5]\n\n# n = 5\n# a = [1, 4, 5, 3, 2]\n\n# n = 5\n# a = [1, 2, 3, 5, 4]\n\n# n = 5\n# a = [1, 5, 3, 4, 2]\n\n# n = 5\n# a = [1, 5, 4, 3, 2]\n\n# n = 5\n# a = [2, 3, 1, 4, 5]\n\n# n = 5\n# a = [2, 5, 1, 4, 3]\n\n# n = 5\n# a = [3, 4, 1, 2, 5]\n\n# n = 5\n# a = [3, 5, 1, 4, 2]\n\n# n = 5\n# a = [4, 5, 1, 2, 3]\n\n# n = 5\n# a = [5, 4, 1, 3, 2]\n\n# n = 5\n# a = [5, 4, 2, 1, 3]\n\n# n = 5\n# a = [5, 4, 3, 1, 2]\n\n# n = 5\n# a = [5, 4, 3, 2, 1]\n\n# n = 5\n# a = [2, 1, 3, 5, 4]\n\n# n = 5\n# a = [2, 1, 4, 5, 3]\n\n# n = 5\n# a = [2, 1, 5, 3, 4]\n\n# n = 5\n# a = [3, 1, 2, 4, 5]\n\n# n = 5\n# a = [3, 1, 5, 2, 4]\n\n# n = 5\n# a = [4, 1, 2, 3, 5]\n\n# n = 5\n# a = [5, 1, 2, 4, 3]\n\n# n = 5\n# a = [5, 1, 4, 2, 3]\n\n# n = 5\n# a = [5, 1, 4, 3, 2]\n\n# n = 5\n# a = [5, 1, 5, 3, 4]\n\n# n = 6\n# a = [1, 2, 3, 4, 6, 5]\n\n# n = 6\n# a = [1, 2, 3, 5, 6, 4]\n\n# n = 6\n# a = [1, 2, 3, 6, 5, 4]\n\n# n = 6\n# a = [1, 2, 4, 3, 5, 6]\n\n# n = 6\n# a = [1, 2, 4, 3, 6, 5]\n\n# n = 6\n# a = [1, 2, 4, 5, 3, 6]\n\n# n = 6\n# a = [1, 2, 4, 5, 6, 3]\n\n# n = 6\n# a = [1, 2, 4, 6, 3, 5]\n\n# n = 6\n# a = [1, 2, 4, 6, 5, 3]\n\n# n = 6\n# a = [1, 2, 5, 3, 4, 6]\n\n# n = 6\n# a = [1, 2, 5, 3, 6, 4]\n\n# n = 6\n# a = [1, 2, 5, 4, 3, 6]\n\n# n = 6\n# a = [1, 2, 5, 4, 6, 3]\n\n# n = 6\n# a = [1, 2, 5, 6, 3, 4]\n\n# n = 6\n# a = [1, 2, 5, 6, 4, 3]\n\n# n = 6\n# a = [1, 2, 6, 3, 4, 5]\n\n# n = 6\n# a = [1, 2, 6, 3, 5, 4]\n\n# n = 6\n# a = [1, 2, 6, 4, 3, 5]\n\n# n = 6\n# a = [1, 2, 6, 4, 5, 3]\n\n# n = 6\n# a = [1, 2, 6, 5, 3, 4]\n\n# n = 6\n# a = [1, 2, 6, 5, 4, 3]\n\n# n = 6\n# a = [1, 3, 2, 4, 5, 6]\n\n# n = 6\n# a = [1, 3, 2, 4, 6, 5]\n\n# n = 6\n# a = [1, 3, 2, 5, 4, 6]\n\n# n = 6\n# a = [1, 3, 2, 5, 6, 4]\n\n# n = 6\n# a = [1, 3, 2, 6, 4, 5]\n\n# n = 6\n# a = [1, 3, 2, 6, 5, 4]\n\n# n = 6\n# a = [1, 3, 4, 2, 5, 6]\n\n# n = 6\n# a = [1, 3, 4, 2, 6, 5]\n\n# n = 6\n# a = [1, 3, 4, 5, 2, 6]\n\n# n = 6\n# a = [1, 3, 4, 5, 6, 2]\n\n# n = 6\n# a = [1, 3, 4, 6, 2, 5]\n\n# n = 6\n# a = [1, 3, 4, 6, 5, 2]\n\n# n = 6\n# a = [1, 3, 5, 2, 4, 6]\n\n# n = 6\n# a = [1, 3, 5, 2, 6, 4]\n\n# n = 6\n# a = [1, 3, 5, 4, 2, 6]\n\n# n = 6\n# a = [1, 3, 5, 4, 6, 2]\n\n# n = 6\n# a = [1, 3, 5, 6, 2, 4]\n\n# n = 6\n# a = [1, 3, 5, 6, 4, 2]\n\n# n = 6\n# a = [1, 3, 6, 2, 4, 5]\n\n# n = 6\n# a = [1, 3, 6, 2, 5, 4]\n\n# n = 6\n# a = [1, 3, 6, 4, 2, 5]\n\n# n = 6\n# a = [1, 3, 6, 4, 5, 2]\n\n# n = 6\n# a = [1, 3, 6, 5, 2, 4]\n\n# n = 6\n# a = [1, 3, 6, 5, 4, 2]\n\n# n = 6\n# a = [1, 4, 2, 3, 5, 6]\n\n# n = 6\n# a = [1, 4, 2, 3, 6, 5]\n\n# n = 6\n# a = [1, 4, 2, 5, 3, 6]\n\n# n = 6\n# a = [1, 4, 2, 5, 6, 3]\n\n# n = 6\n# a = [1, 4, 2, 6, 3, 5]\n\n# n = 6\n# a = [1, 4, 2, 6, 5, 3]\n\n# n = 6\n# a = [1, 4, 3, 2, 5, 6]\n\n# n = 6\n# a = [1, 4, 3, 2, 6, 5]\n\n# n = 6\n# a = [1, 4, 3, 5, 2, 6]\n\n# n = 6\n# a = [1, 4, 3, 5, 6, 2]\n\n# n = 6\n# a = [1, 4, 3, 6, 2, 5]\n\n# n = 6\n# a = [1, 4, 3, 6, 5, 2]\n\n# n = 6\n# a = [1, 4, 5, 2, 3, 6]\n\n# n = 6\n# a = [1, 4, 5, 2, 6, 3]\n\n# n = 6\n# a = [1, 4, 5, 3, 2, 6]\n\n# n = 6\n# a = [1, 4, 5, 3, 6, 2]\n\n# n = 6\n# a = [1, 4, 5, 6, 2, 3]\n\n# n = 6\n# a = [1, 4, 5, 6, 3, 2]\n\n# n = 6\n# a = [1, 4, 6, 2, 3, 5]\n\n# n = 6\n# a = [1, 4, 6, 2, 5, 3]\n\n# n = 6\n# a = [1, 4, 6, 3, 2, 5]\n\n# n = 6\n# a = [1, 4, 6, 3, 5, 2]\n\n# n = 6\n# a = [1, 4, 6, 5, 2, 3]\n\n# n = 6\n# a = [1, 4, 6, 5, 3, 2]\n\n# n = 6\n# a = [1, 5, 2, 3, 4, 6]\n\n# n = 6\n# a = [1, 5, 2, 3, 6, 4]\n\n# n = 6\n# a = [1, 5, 2, 4, 3, 6]\n\n# n = 6\n# a = [1, 5, 2, 4, 6, 3]\n\n# n = 6\n# a = [1, 5, 2, 6, 3, 4]\n\n# n = 6\n# a = [1, 5, 2, 6, 4, 3]\n\n# n = 6\n# a = [1, 5, 3, 2, 4, 6]\n\n# n = 6\n# a = [1, 5, 3, 2, 6, 4]\n\n# n = 6\n# a = [1, 5, 3, 4, 2, 6]\n\n# n = 6\n# a = [1, 5, 3, 4, 6, 2]\n\n# n = 6\n# a = [1, 5, 3, 6, 2, 4]\n\n# n = 6\n# a = [1, 5, 3, 6, 4, 2]\n\n# n = 6\n# a = [1, 5, 4, 2, 3, 6]\n\n# n = 6\n# a = [1, 5, 4, 2, 6, 3]\n\n# n = 6\n# a = [1, 5, 4, 3, 2, 6]\n\n# n = 6\n# a = [1, 5, 4, 3, 6, 2]\n\n# n = 6\n# a = [1, 5, 4, 6, 2, 3]\n\n# n = 6\n# a = [1, 5, 4, 6, 3, 2]\n\n# n = 6\n# a = [1, 5, 6, 2, 3, 4]\n\n# n = 6\n# a = [1, 5, 6, 2, 4, 3]\n\n# n = 6\n# a = [1, 5, 6, 3, 2, 4]\n\n# n = 6\n# a = [1, 5, 6, 3, 4, 2]\n\n# n = 6\n# a = [1, 5, 6, 4, 2, 3]\n\n# n = 6\n# a = [1, 5, 6, 4, 3, 2]\n\n# n = 6\n# a = [1, 6, 2, 3, 4, 5]\n\n# n = 6\n# a = [1, 6, 2, 3, 5, 4]\n\n# n = 6\n# a = [1, 6, 2, 4, 3, 5]\n\n# n = 6\n# a = [1, 6, 2, 4, 5, 3]\n\n# n = 6\n# a = [1, 6, 2, 5, 3, 4]\n\n# n = 6\n# a = [1, 6, 2, 5, 4, 3]\n\n# n = 6\n# a = [1, 6, 3, 2, 4, 5]\n\n# n = 6\n# a = [1, 6, 3, 2, 5, 4]\n\n# n = 6\n# a = [1, 6, 3, 4, 2, 5]\n\n# n = 6\n# a = [1, 6, 3, 4, 5, 2]\n\n# n = 6\n# a = [1, 6, 3, 5, 2, 4]\n\n# n = 6\n# a = [1, 6, 3, 5, 4, 2]\n\n# n = 6\n# a = [1, 6, 4, 2, 3, 5]\n\n# n = 6\n# a = [1, 6, 4, 2, 5, 3]\n\n# n = 6\n# a = [1, 6, 4, 3, 2, 5]\n\n# n = 6\n# a = [1, 6, 4, 3, 5, 2]\n\n# n = 6\n# a = [1, 6, 4, 5, 2, 3]\n\n# n = 6\n# a = [1, 6, 4, 5, 3, 2]\n\n# n = 6\n# a = [1, 6, 5, 2, 3, 4]\n\n# n = 6\n# a = [1, 6, 5, 2, 4, 3]\n\n# n = 6\n# a = [1, 6, 5, 3, 2, 4]\n\n# n = 6\n# a = [1, 6, 5, 3, 4, 2]\n\n# n = 6\n# a = [1, 6, 5, 4, 2, 3]\n\n# n = 6\n# a = [1, 6, 5, 4, 3, 2]\n\n# n = 6\n# a = [2, 1, 3, 4, 5, 6]\n\n# n = 6\n# a = [2, 1, 3, 4, 6, 5]\n\n# n = 6\n# a = [2, 1, 3, 5, 4, 6]\n\n# n = 6\n# a = [2, 1, 3, 5, 6, 4]\n\n# n = 6\n# a = [2, 1, 3, 6, 4, 5]\n\n# n = 6\n# a = [2, 1, 3, 6, 5, 4]\n\n# n = 6\n# a = [2, 1, 4, 3, 5, 6]\n\n# n = 6\n# a = [2, 1, 4, 3, 6, 5]\n\n# n = 6\n# a = [2, 1, 4, 5, 3, 6]\n\n# n = 6\n# a = [2, 1, 4, 5, 6, 3]\n\n# n = 6\n# a = [2, 1, 4, 6, 3, 5]\n\n# n = 6\n# a = [2, 1, 4, 6, 5, 3]\n\n# n = 6\n# a = [2, 1, 5, 3, 4, 6]\n\n# n = 6\n# a = [2, 1, 5, 3, 6, 4]\n\n# n = 6\n# a = [2, 1, 5, 4, 3, 6]\n\n# n = 6\n# a = [2, 1, 5, 4, 6, 3]\n\n# n = 6\n# a = [2, 1, 5, 6, 3, 4]\n\n# n = 6\n# a = [2, 1, 5, 6, 4, 3]\n\n# n = 6\n# a = [2, 1, 6, 3, 4, 5]\n\n# n = 6\n# a = [2, 1, 6, 3, 5, 4]\n\n# n = 6\n# a = [2, 1, 6, 4, 3, 5]\n\n# n = 6\n# a = [2, 1, 6, 4, 5, 3]\n\n# n = 6\n# a = [2, 1, 6, 5, 3, 4]\n\n# n = 6\n# a = [2, 1, 6, 5, 4, 3]\n\n# n = 6\n# a = [2, 3, 1, 4, 5, 6]\n\n# n = 6\n# a = [2, 3, 1, 4, 6, 5]\n\n# n = 6\n# a = [2, 3, 1, 5, 4, 6]\n\n# n = 6\n# a = [2, 3, 1, 5, 6, 4]\n\n# n = 6\n# a = [2, 3, 1, 6, 4, 5]\n\n# n"
    }
  ],
  "created": 1649561612,
  "id": "cmpl-4vIcOD8SartZUifWTQ16agbtLlEUP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:35:49.295391 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # The idea is to maintain a list of numbers that are \"out of order\"\n    # and a list of the indexes that are out of order\n    # We can then greedily choose the minimum number in the out of order list\n    # and then move the index to the next number in the list\n    # We can do this by adding the index of the minimum number to the end of the out of order list\n    # and then removing the first element from the list\n    \n    # For example, if our list is [2, 1, 5, 4, 3]\n    # Our out of order list is [1, 4, 3] with indexes [1, 3, 4]\n    # We can then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [1, 4, 3] with indexes [1, 3, 4]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This gives us [4, 3, 1] with indexes [3, 4, 1]\n    # We then choose the minimum number 3 and the index 3\n    # We then add 3 to the end of the out of order list and remove the first element\n    # This gives us [3, 1, 4] with indexes [4, 1, 3]\n    # We then choose the minimum number 1 and the index 1\n    # We then add 1 to the end of the out of order list and remove the first element\n    # This"
}
2022-04-09 23:35:49.295562 REASON length
2022-04-09 23:35:49.295572 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = deque()\nr = deque()\n\nfor i in range(n):\n    l.append(a[i])\n    r.appendleft(a[n-i-1])\n\nans = []\nwhile len(l) > 0:\n    if l[0] < r[0]:\n        ans.append('L')\n        l.popleft()\n    else:\n        ans.append('R')\n        r.popleft()\n\nprint(len(ans))\nprint(''.join(ans))"
}
2022-04-09 23:35:49.295614 REASON stop
2022-04-09 23:35:49.307256 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = max length of increasing sequence with leftmost element a[i] and rightmost element a[j]\n# dp[i][j] = 0 if i > j\n# dp[i][j] = 1 if i == j\n# dp[i][j] = dp[i][j - 1] + 1 if a[j] > a[j - 1]\n# dp[i][j] = max(dp[i][k] + dp[k + 1][j]) for all k in [i, j) if a[j] < a[j - 1]\n\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor length in range(2, n + 1):\n    for i in range(n - length + 1):\n        j = i + length - 1\n        if a[j] > a[j - 1]:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i][k] + dp[k + 1][j] for k in range(i, j))\n\nprint(dp[0][n - 1])\n\n# reconstruct solution\ni, j = 0, n - 1\nsolution = []\nwhile i <= j:\n    if a[j] > a[j - 1]:\n        solution.append('R')\n        j -= 1\n    else:\n        k = i\n        while dp[i][j] != dp[i][k] + dp[k + 1][j]:\n            k += 1\n        solution.extend(['L'] * (k - i + 1))\n        i = k + 1\n\nprint(''.join(solution))"
}
2022-04-09 23:35:49.307355 REASON stop
2022-04-09 23:35:49.308072 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na_sorted = sorted(a)\n\n# print(a)\n# print(a_sorted)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)\n# \tprint('R' * n)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# a_sorted = sorted(a)\n\n# if a == a_sorted:\n# \tprint(n)\n# \tprint('L' * n)\n# else:\n# \tprint(n)"
}
2022-04-09 23:35:49.308329 REASON length
2022-04-09 23:35:49.308342 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n)\n    print('L'*n)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:35:49.308386 REASON stop
2022-04-09 23:35:49.309358 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na_sorted = sorted(a)\n\nd = {a_sorted[i]: i for i in range(n)}\n\nans = []\n\nfor i in range(n):\n    if d[a[i]] < i:\n        ans.append('L')\n    else:\n        ans.append('R')\n\nprint(len(ans))\nprint(''.join(ans))"
}
2022-04-09 23:35:49.309461 REASON stop
2022-04-09 23:35:49.309944 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # find the longest increasing subsequence\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] <= lis[j]:\n                lis[i] = lis[j] + 1\n\n    # find the longest decreasing subsequence\n    lds = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] <= lds[j]:\n                lds[i] = lds[j] + 1\n\n    # find the longest common subsequence\n    lcs = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lcs[i] <= lcs[j]:\n                lcs[i] = lcs[j] + 1\n\n    # find the longest alternating subsequence\n    la = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n\n    # find the maximum length of any subsequence\n    print(max(lis + lds + lcs + la))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:35:49.310034 REASON stop
2022-04-09 23:35:49.310360 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# a = [2, 1, 5, 4, 3]\n\n# n = 5\n# a = [1, 3, 5, 6, 7, 4, 2]\n\n# n = 3\n# a = [1, 2, 3]\n\n# n = 4\n# a = [1, 2, 4, 3]\n\n# n = 2\n# a = [1, 2]\n\n# n = 2\n# a = [2, 1]\n\n# n = 4\n# a = [1, 4, 2, 3]\n\n# n = 4\n# a = [1, 3, 2, 4]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [5, 4, 3, 2, 1]\n\n# n = 5\n# a = [1, 3, 2, 4, 5]\n\n# n = 5\n# a = [1, 4, 2, 3, 5]\n\n# n = 5\n# a = [1, 4, 5, 3, 2]\n\n# n = 5\n# a = [1, 2, 3, 5, 4]\n\n# n = 5\n# a = [1, 5, 3, 4, 2]\n\n# n = 5\n# a = [1, 5, 4, 3, 2]\n\n# n = 5\n# a = [2, 3, 1, 4, 5]\n\n# n = 5\n# a = [2, 5, 1, 4, 3]\n\n# n = 5\n# a = [3, 4, 1, 2, 5]\n\n# n = 5\n# a = [3, 5, 1, 4, 2]\n\n# n = 5\n# a = [4, 5, 1, 2, 3]\n\n# n = 5\n# a = [5, 4, 1, 3, 2]\n\n# n = 5\n# a = [5, 4, 2, 1, 3]\n\n# n = 5\n# a = [5, 4, 3, 1, 2]\n\n# n = 5\n# a = [5, 4, 3, 2, 1]\n\n# n = 5\n# a = [2, 1, 3, 5, 4]\n\n# n = 5\n# a = [2, 1, 4, 5, 3]\n\n# n = 5\n# a = [2, 1, 5, 3, 4]\n\n# n = 5\n# a = [3, 1, 2, 4, 5]\n\n# n = 5\n# a = [3, 1, 5, 2, 4]\n\n# n = 5\n# a = [4, 1, 2, 3, 5]\n\n# n = 5\n# a = [5, 1, 2, 4, 3]\n\n# n = 5\n# a = [5, 1, 4, 2, 3]\n\n# n = 5\n# a = [5, 1, 4, 3, 2]\n\n# n = 5\n# a = [5, 1, 5, 3, 4]\n\n# n = 6\n# a = [1, 2, 3, 4, 6, 5]\n\n# n = 6\n# a = [1, 2, 3, 5, 6, 4]\n\n# n = 6\n# a = [1, 2, 3, 6, 5, 4]\n\n# n = 6\n# a = [1, 2, 4, 3, 5, 6]\n\n# n = 6\n# a = [1, 2, 4, 3, 6, 5]\n\n# n = 6\n# a = [1, 2, 4, 5, 3, 6]\n\n# n = 6\n# a = [1, 2, 4, 5, 6, 3]\n\n# n = 6\n# a = [1, 2, 4, 6, 3, 5]\n\n# n = 6\n# a = [1, 2, 4, 6, 5, 3]\n\n# n = 6\n# a = [1, 2, 5, 3, 4, 6]\n\n# n = 6\n# a = [1, 2, 5, 3, 6, 4]\n\n# n = 6\n# a = [1, 2, 5, 4, 3, 6]\n\n# n = 6\n# a = [1, 2, 5, 4, 6, 3]\n\n# n = 6\n# a = [1, 2, 5, 6, 3, 4]\n\n# n = 6\n# a = [1, 2, 5, 6, 4, 3]\n\n# n = 6\n# a = [1, 2, 6, 3, 4, 5]\n\n# n = 6\n# a = [1, 2, 6, 3, 5, 4]\n\n# n = 6\n# a = [1, 2, 6, 4, 3, 5]\n\n# n = 6\n# a = [1, 2, 6, 4, 5, 3]\n\n# n = 6\n# a = [1, 2, 6, 5, 3, 4]\n\n# n = 6\n# a = [1, 2, 6, 5, 4, 3]\n\n# n = 6\n# a = [1, 3, 2, 4, 5, 6]\n\n# n = 6\n# a = [1, 3, 2, 4, 6, 5]\n\n# n = 6\n# a = [1, 3, 2, 5, 4, 6]\n\n# n = 6\n# a = [1, 3, 2, 5, 6, 4]\n\n# n = 6\n# a = [1, 3, 2, 6, 4, 5]\n\n# n = 6\n# a = [1, 3, 2, 6, 5, 4]\n\n# n = 6\n# a = [1, 3, 4, 2, 5, 6]\n\n# n = 6\n# a = [1, 3, 4, 2, 6, 5]\n\n# n = 6\n# a = [1, 3, 4, 5, 2, 6]\n\n# n = 6\n# a = [1, 3, 4, 5, 6, 2]\n\n# n = 6\n# a = [1, 3, 4, 6, 2, 5]\n\n# n = 6\n# a = [1, 3, 4, 6, 5, 2]\n\n# n = 6\n# a = [1, 3, 5, 2, 4, 6]\n\n# n = 6\n# a = [1, 3, 5, 2, 6, 4]\n\n# n = 6\n# a = [1, 3, 5, 4, 2, 6]\n\n# n = 6\n# a = [1, 3, 5, 4, 6, 2]\n\n# n = 6\n# a = [1, 3, 5, 6, 2, 4]\n\n# n = 6\n# a = [1, 3, 5, 6, 4, 2]\n\n# n = 6\n# a = [1, 3, 6, 2, 4, 5]\n\n# n = 6\n# a = [1, 3, 6, 2, 5, 4]\n\n# n = 6\n# a = [1, 3, 6, 4, 2, 5]\n\n# n = 6\n# a = [1, 3, 6, 4, 5, 2]\n\n# n = 6\n# a = [1, 3, 6, 5, 2, 4]\n\n# n = 6\n# a = [1, 3, 6, 5, 4, 2]\n\n# n = 6\n# a = [1, 4, 2, 3, 5, 6]\n\n# n = 6\n# a = [1, 4, 2, 3, 6, 5]\n\n# n = 6\n# a = [1, 4, 2, 5, 3, 6]\n\n# n = 6\n# a = [1, 4, 2, 5, 6, 3]\n\n# n = 6\n# a = [1, 4, 2, 6, 3, 5]\n\n# n = 6\n# a = [1, 4, 2, 6, 5, 3]\n\n# n = 6\n# a = [1, 4, 3, 2, 5, 6]\n\n# n = 6\n# a = [1, 4, 3, 2, 6, 5]\n\n# n = 6\n# a = [1, 4, 3, 5, 2, 6]\n\n# n = 6\n# a = [1, 4, 3, 5, 6, 2]\n\n# n = 6\n# a = [1, 4, 3, 6, 2, 5]\n\n# n = 6\n# a = [1, 4, 3, 6, 5, 2]\n\n# n = 6\n# a = [1, 4, 5, 2, 3, 6]\n\n# n = 6\n# a = [1, 4, 5, 2, 6, 3]\n\n# n = 6\n# a = [1, 4, 5, 3, 2, 6]\n\n# n = 6\n# a = [1, 4, 5, 3, 6, 2]\n\n# n = 6\n# a = [1, 4, 5, 6, 2, 3]\n\n# n = 6\n# a = [1, 4, 5, 6, 3, 2]\n\n# n = 6\n# a = [1, 4, 6, 2, 3, 5]\n\n# n = 6\n# a = [1, 4, 6, 2, 5, 3]\n\n# n = 6\n# a = [1, 4, 6, 3, 2, 5]\n\n# n = 6\n# a = [1, 4, 6, 3, 5, 2]\n\n# n = 6\n# a = [1, 4, 6, 5, 2, 3]\n\n# n = 6\n# a = [1, 4, 6, 5, 3, 2]\n\n# n = 6\n# a = [1, 5, 2, 3, 4, 6]\n\n# n = 6\n# a = [1, 5, 2, 3, 6, 4]\n\n# n = 6\n# a = [1, 5, 2, 4, 3, 6]\n\n# n = 6\n# a = [1, 5, 2, 4, 6, 3]\n\n# n = 6\n# a = [1, 5, 2, 6, 3, 4]\n\n# n = 6\n# a = [1, 5, 2, 6, 4, 3]\n\n# n = 6\n# a = [1, 5, 3, 2, 4, 6]\n\n# n = 6\n# a = [1, 5, 3, 2, 6, 4]\n\n# n = 6\n# a = [1, 5, 3, 4, 2, 6]\n\n# n = 6\n# a = [1, 5, 3, 4, 6, 2]\n\n# n = 6\n# a = [1, 5, 3, 6, 2, 4]\n\n# n = 6\n# a = [1, 5, 3, 6, 4, 2]\n\n# n = 6\n# a = [1, 5, 4, 2, 3, 6]\n\n# n = 6\n# a = [1, 5, 4, 2, 6, 3]\n\n# n = 6\n# a = [1, 5, 4, 3, 2, 6]\n\n# n = 6\n# a = [1, 5, 4, 3, 6, 2]\n\n# n = 6\n# a = [1, 5, 4, 6, 2, 3]\n\n# n = 6\n# a = [1, 5, 4, 6, 3, 2]\n\n# n = 6\n# a = [1, 5, 6, 2, 3, 4]\n\n# n = 6\n# a = [1, 5, 6, 2, 4, 3]\n\n# n = 6\n# a = [1, 5, 6, 3, 2, 4]\n\n# n = 6\n# a = [1, 5, 6, 3, 4, 2]\n\n# n = 6\n# a = [1, 5, 6, 4, 2, 3]\n\n# n = 6\n# a = [1, 5, 6, 4, 3, 2]\n\n# n = 6\n# a = [1, 6, 2, 3, 4, 5]\n\n# n = 6\n# a = [1, 6, 2, 3, 5, 4]\n\n# n = 6\n# a = [1, 6, 2, 4, 3, 5]\n\n# n = 6\n# a = [1, 6, 2, 4, 5, 3]\n\n# n = 6\n# a = [1, 6, 2, 5, 3, 4]\n\n# n = 6\n# a = [1, 6, 2, 5, 4, 3]\n\n# n = 6\n# a = [1, 6, 3, 2, 4, 5]\n\n# n = 6\n# a = [1, 6, 3, 2, 5, 4]\n\n# n = 6\n# a = [1, 6, 3, 4, 2, 5]\n\n# n = 6\n# a = [1, 6, 3, 4, 5, 2]\n\n# n = 6\n# a = [1, 6, 3, 5, 2, 4]\n\n# n = 6\n# a = [1, 6, 3, 5, 4, 2]\n\n# n = 6\n# a = [1, 6, 4, 2, 3, 5]\n\n# n = 6\n# a = [1, 6, 4, 2, 5, 3]\n\n# n = 6\n# a = [1, 6, 4, 3, 2, 5]\n\n# n = 6\n# a = [1, 6, 4, 3, 5, 2]\n\n# n = 6\n# a = [1, 6, 4, 5, 2, 3]\n\n# n = 6\n# a = [1, 6, 4, 5, 3, 2]\n\n# n = 6\n# a = [1, 6, 5, 2, 3, 4]\n\n# n = 6\n# a = [1, 6, 5, 2, 4, 3]\n\n# n = 6\n# a = [1, 6, 5, 3, 2, 4]\n\n# n = 6\n# a = [1, 6, 5, 3, 4, 2]\n\n# n = 6\n# a = [1, 6, 5, 4, 2, 3]\n\n# n = 6\n# a = [1, 6, 5, 4, 3, 2]\n\n# n = 6\n# a = [2, 1, 3, 4, 5, 6]\n\n# n = 6\n# a = [2, 1, 3, 4, 6, 5]\n\n# n = 6\n# a = [2, 1, 3, 5, 4, 6]\n\n# n = 6\n# a = [2, 1, 3, 5, 6, 4]\n\n# n = 6\n# a = [2, 1, 3, 6, 4, 5]\n\n# n = 6\n# a = [2, 1, 3, 6, 5, 4]\n\n# n = 6\n# a = [2, 1, 4, 3, 5, 6]\n\n# n = 6\n# a = [2, 1, 4, 3, 6, 5]\n\n# n = 6\n# a = [2, 1, 4, 5, 3, 6]\n\n# n = 6\n# a = [2, 1, 4, 5, 6, 3]\n\n# n = 6\n# a = [2, 1, 4, 6, 3, 5]\n\n# n = 6\n# a = [2, 1, 4, 6, 5, 3]\n\n# n = 6\n# a = [2, 1, 5, 3, 4, 6]\n\n# n = 6\n# a = [2, 1, 5, 3, 6, 4]\n\n# n = 6\n# a = [2, 1, 5, 4, 3, 6]\n\n# n = 6\n# a = [2, 1, 5, 4, 6, 3]\n\n# n = 6\n# a = [2, 1, 5, 6, 3, 4]\n\n# n = 6\n# a = [2, 1, 5, 6, 4, 3]\n\n# n = 6\n# a = [2, 1, 6, 3, 4, 5]\n\n# n = 6\n# a = [2, 1, 6, 3, 5, 4]\n\n# n = 6\n# a = [2, 1, 6, 4, 3, 5]\n\n# n = 6\n# a = [2, 1, 6, 4, 5, 3]\n\n# n = 6\n# a = [2, 1, 6, 5, 3, 4]\n\n# n = 6\n# a = [2, 1, 6, 5, 4, 3]\n\n# n = 6\n# a = [2, 3, 1, 4, 5, 6]\n\n# n = 6\n# a = [2, 3, 1, 4, 6, 5]\n\n# n = 6\n# a = [2, 3, 1, 5, 4, 6]\n\n# n = 6\n# a = [2, 3, 1, 5, 6, 4]\n\n# n = 6\n# a = [2, 3, 1, 6, 4, 5]\n\n# n"
}
2022-04-09 23:35:49.310399 REASON length
