["\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # find the longest increasing subsequence\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] <= lis[j]:\n                lis[i] = lis[j] + 1\n\n    # find the longest decreasing subsequence\n    lds = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] <= lds[j]:\n                lds[i] = lds[j] + 1\n\n    # find the longest common subsequence\n    lcs = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lcs[i] <= lcs[j]:\n                lcs[i] = lcs[j] + 1\n\n    # find the longest alternating subsequence\n    la = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and la[i] <= la[j]:\n                la[i] = la[j] + 1\n\n    # find the maximum length of any subsequence\n    print(max(lis + lds + lcs + la))\n\n\nif __name__ == '__main__':\n    main()", "\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = deque()\nr = deque()\n\nfor i in range(n):\n    l.append(a[i])\n    r.appendleft(a[n-i-1])\n\nans = []\nwhile len(l) > 0:\n    if l[0] < r[0]:\n        ans.append('L')\n        l.popleft()\n    else:\n        ans.append('R')\n        r.popleft()\n\nprint(len(ans))\nprint(''.join(ans))", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na_sorted = sorted(a)\n\nd = {a_sorted[i]: i for i in range(n)}\n\nans = []\n\nfor i in range(n):\n    if d[a[i]] < i:\n        ans.append('L')\n    else:\n        ans.append('R')\n\nprint(len(ans))\nprint(''.join(ans))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n)\n    print('L'*n)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = max length of increasing sequence with leftmost element a[i] and rightmost element a[j]\n# dp[i][j] = 0 if i > j\n# dp[i][j] = 1 if i == j\n# dp[i][j] = dp[i][j - 1] + 1 if a[j] > a[j - 1]\n# dp[i][j] = max(dp[i][k] + dp[k + 1][j]) for all k in [i, j) if a[j] < a[j - 1]\n\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor length in range(2, n + 1):\n    for i in range(n - length + 1):\n        j = i + length - 1\n        if a[j] > a[j - 1]:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i][k] + dp[k + 1][j] for k in range(i, j))\n\nprint(dp[0][n - 1])\n\n# reconstruct solution\ni, j = 0, n - 1\nsolution = []\nwhile i <= j:\n    if a[j] > a[j - 1]:\n        solution.append('R')\n        j -= 1\n    else:\n        k = i\n        while dp[i][j] != dp[i][k] + dp[k + 1][j]:\n            k += 1\n        solution.extend(['L'] * (k - i + 1))\n        i = k + 1\n\nprint(''.join(solution))"]