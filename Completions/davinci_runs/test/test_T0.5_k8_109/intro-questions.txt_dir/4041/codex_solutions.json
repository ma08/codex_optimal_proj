["\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    s_i = 0\n    t_i = 0\n    res = 0\n    while s_i < len(s) and t_i < len(t):\n        if s[s_i] == t[t_i]:\n            s_i += 1\n            t_i += 1\n        else:\n            res += 1\n            s_i += 1\n    res += len(s) - s_i\n    print(res)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(s: str, t: str) -> int:\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return len(s) - j\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))", "\n\nimport sys\nimport re\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    print(len(s) - len(re.sub(f'[^{t}]', '', s)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve(\"bbaba\", \"bb\")\n    3\n    >>> solve(\"baaba\", \"ab\")\n    2\n    >>> solve(\"abcde\", \"abcde\")\n    0\n    >>> solve(\"asdfasdf\", \"fasd\")\n    3\n    \"\"\"\n    for i in range(len(s), 0, -1):\n        for j in range(len(s) - i + 1):\n            if t in s[j:j+i]:\n                return i\n\nif __name__ == \"__main__\":\n    print(solve(input(), input()))", "\n\ndef main():\n    \"\"\"main\"\"\"\n    _ = input()\n    t = input()\n    ans = 0\n    i = 0\n    j = 0\n    while i < len(t):\n        if j == len(t):\n            break\n        if t[i] == t[j]:\n            i += 1\n        j += 1\n    ans = len(t) - i\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    s = input()\n    t = input()\n    s_len = len(s)\n    t_len = len(t)\n    dp = [0] * (s_len + 1)\n    for i in range(t_len):\n        dp[i] = i\n    for i in range(t_len, s_len):\n        dp[i] = t_len\n    for i in range(t_len - 1, -1, -1):\n        for j in range(s_len - 1, -1, -1):\n            if s[j] == t[i]:\n                dp[j] = min(dp[j], dp[j + 1] + 1)\n    print(s_len - dp[0])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    s = input()\n    t = input()\n\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(len(s) - 1, -1, -1):\n        for j in range(len(t) - 1, -1, -1):\n            if s[i] == t[j]:\n                dp[i][j] = 1 + dp[i + 1][j + 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n\n    print(len(s) - dp[0][0])\n\nif __name__ == '__main__':\n    main()", "\n\n# TODO:\n# - This solution is not very efficient.\n# - Need to find a better solution.\n\ns = input()\nt = input()\n\nsubstring_length = 0\n\nfor i in range(len(s)):\n    if s[i] in t:\n        substring_length = 0\n        if t == s[i:]:\n            break\n        else:\n            t = t[1:]\n    else:\n        substring_length += 1\n\nprint(substring_length)"]