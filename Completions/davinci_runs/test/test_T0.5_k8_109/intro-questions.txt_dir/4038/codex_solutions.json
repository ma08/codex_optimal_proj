["\n\n#SOLUTION\n\ndef solve(n, a):\n    if n == 1:\n        return \"YES\\n\" + str(a[0])\n    if n % 2 == 0:\n        return \"NO\"\n    m = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = a[i * n + j]\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] != m[n - 1 - i][n - 1 - j] or m[i][j] != m[j][i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), m))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    if n % 2 == 1:\n        matrix[n // 2][n // 2] = nums.pop()\n    for i in range(n):\n        for j in range(n // 2):\n            matrix[i][j] = nums.pop()\n            matrix[i][n - j - 1] = matrix[i][j]\n    for i in range(n // 2):\n        for j in range(n):\n            matrix[i][j] = nums.pop()\n            matrix[n - i - 1][j] = matrix[i][j]\n    if len(nums) == 0:\n        print(\"YES\")\n        for i in range(n):\n            print(' '.join(map(str, matrix[i])))\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n > 1:\n        for i in range(n):\n            for j in range(n):\n                if a[i] == a[j]:\n                    a[i], a[j] = a[j], a[i]\n                    break\n    print('YES')\n    for i in range(n):\n        print(*a[i*n:(i+1)*n])\n\nmain()", "\n\ndef main():\n    \"\"\"\n    This is just a brute force solution.\n    \"\"\"\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    nums = sorted(nums)\n\n    # First, we need to check if the numbers are even.\n    # If they are not even, then it is impossible to construct the matrix.\n    if sum(nums) % 2 != 0:\n        print(\"NO\")\n        return\n\n    # Now we need to check if the numbers are symmetric.\n    # If they are not symmetric, then it is impossible to construct the matrix.\n    unique_nums = set(nums)\n    for num in unique_nums:\n        if nums.count(num) % 2 != 0:\n            print(\"NO\")\n            return\n\n    # Now we need to construct the matrix.\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    i = 0\n    j = 0\n    while nums:\n        if i == j:\n            # We are on the diagonal.\n            matrix[i][j] = nums.pop()\n            j += 1\n            if j >= n:\n                i += 1\n                j = 0\n        else:\n            # We are not on the diagonal.\n            matrix[i][j] = nums.pop()\n            matrix[j][i] = nums.pop()\n            j += 1\n            if j >= n:\n                i += 1\n                j = 0\n    print(\"YES\")\n    for row in matrix:\n        print(\" \".join([str(x) for x in row]))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n\tn = int(input())\n\tnums = list(map(int, input().split()))\n\tnums.sort()\n\tif nums[0] != nums[-1]:\n\t\tprint(\"NO\")\n\t\treturn\n\tif nums[0] == nums[-1]:\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i] != nums[0]:\n\t\t\t\tprint(\"NO\")\n\t\t\t\treturn\n\t\tprint(\"YES\")\n\t\tfor i in range(n):\n\t\t\tprint(*[nums[0]]*n)\n\t\treturn\n\tprint(\"YES\")\n\tfor i in range(n):\n\t\tprint(*[nums[i*n+j] for j in range(n)])\n\nif __name__ == '__main__':\n\tmain()", "\n\ndef main():\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    nums.sort()\n    if n % 2 == 1:\n        center = nums[len(nums) // 2]\n        nums = nums[:len(nums) // 2] + nums[len(nums) // 2 + 1:]\n    else:\n        center = None\n    if len(nums) % 2 == 1:\n        print(\"NO\")\n        return\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    for i in range(len(nums) // 2):\n        matrix[i][i] = nums[i]\n        matrix[n - i - 1][i] = nums[i]\n        matrix[i][n - i - 1] = nums[len(nums) // 2 + i]\n        matrix[n - i - 1][n - i - 1] = nums[len(nums) // 2 + i]\n    if center is not None:\n        matrix[n // 2][n // 2] = center\n    print(\"YES\")\n    for row in matrix:\n        print(\" \".join(str(x) for x in row))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = [int(x) for x in input().split()]\n    if len(numbers) != n**2:\n        print(\"NO\")\n        return\n    numbers.sort()\n    if numbers[0] != numbers[-1]:\n        print(\"NO\")\n        return\n    if n%2 == 0:\n        if numbers[0] != numbers[n**2//2]:\n            print(\"NO\")\n            return\n    matrix = []\n    for i in range(n):\n        matrix.append([])\n        for j in range(n):\n            matrix[i].append(-1)\n    if n%2 == 1:\n        matrix[n//2][n//2] = numbers[0]\n        numbers.pop(0)\n    for i in range(n//2):\n        for j in range(n//2):\n            matrix[i][j] = numbers[0]\n            matrix[i][n-j-1] = numbers[0]\n            matrix[n-i-1][j] = numbers[0]\n            matrix[n-i-1][n-j-1] = numbers[0]\n            numbers.pop(0)\n    if len(numbers) != 0:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=\" \")\n        print()\n\nif __name__ == '__main__':\n    main()"]