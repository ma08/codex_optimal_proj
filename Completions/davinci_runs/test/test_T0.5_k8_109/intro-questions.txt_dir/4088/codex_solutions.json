["\n\nimport random\n\ndef gen_test_cases(q):\n    for i in range(q):\n        s = \"\"\n        for j in range(random.randint(1,50)):\n            s += chr(random.randint(97,122))\n        m = random.randint(1,len(s))\n        b = []\n        for j in range(m):\n            b.append(random.randint(0,1225))\n        print(s)\n        print(m)\n        print(\" \".join(str(k) for k in b))\n\nif __name__ == \"__main__\":\n    gen_test_cases(4)", "", "\n\n# cook your dish here\nt=int(input())\nfor _ in range(t):\n    s=input()\n    m=int(input())\n    b=list(map(int,input().split()))\n    l=list(s)\n    l.sort()\n    ans=''\n    for i in range(m):\n        if(b[i]==0):\n            ans+=l[i]\n            l.remove(l[i])\n        else:\n            j=i\n            k=b[i]\n            while(k>0):\n                if(l[j]>l[i]):\n                    ans+=l[j]\n                    l.remove(l[j])\n                    k-=1\n                else:\n                    j+=1\n    print(ans)", "\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        s = list(sys.stdin.readline().strip())\n        m = int(sys.stdin.readline().strip())\n        b = [int(i) for i in sys.stdin.readline().strip().split()]\n        #print(s,m,b)\n        t = []\n        for i in range(len(b)):\n            curr_char = s[i]\n            curr_b = b[i]\n            for j in range(26):\n                if chr(ord('a') + j) > curr_char:\n                    curr_b -= abs(ord(curr_char) - ord('a') - j)\n            t.append(chr(ord('a') + curr_b))\n        print(''.join(t))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int,input().split()))\n        #print(s,m,b)\n        t = \"\"\n        for i in range(m):\n            if b[i] == 0:\n                t += s[i]\n            elif b[i] == 1:\n                if s[i] == 'z':\n                    t += 'a'\n                else:\n                    t += chr(ord(s[i])+1)\n            else:\n                t += 'b'\n        print(t)\n\nif __name__ == \"__main__\":\n    main()", "\n\nq = int(input())\nfor _ in range(q):\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n    res = \"\"\n    for i in range(m):\n        # find the minimum distance in b[i:]\n        min_idx = min(range(i, m), key=lambda x: b[x])\n        res += s[min_idx]\n        s = s[:min_idx] + s[min_idx+1:]\n    print(res)", "\n\n#from collections import defaultdict\n\ndef solve(s, b):\n\t#print(\"s: \", s)\n\t#print(\"b: \", b)\n\t#print(\"\")\n\tres = []\n\tif len(b) == 0:\n\t\treturn s\n\tif len(s) == 0:\n\t\treturn \"\"\n\tfor i in range(len(s)):\n\t\tif s[i] == 'a':\n\t\t\tcontinue\n\t\tb[0] -= (len(s) - i)\n\t\tb[i] -= i\n\t\t#print(\"i: \", i)\n\t\t#print(\"b: \", b)\n\t\tif b[0] >= 0 and b[i] >= 0:\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"s[:i]: \", s[:i])\n\t\t\t#print(\"s[i+1:]: \", s[i+1:])\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"s[:i] + s[i+1:]: \", s[:i] + s[i+1:])\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"b[1:]: \", b[1:])\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"solve(s[:i] + s[i+1:], b[1:]): \", solve(s[:i] + s[i+1:], b[1:]))\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"s[i] + solve(s[:i] + s[i+1:], b[1:]): \", s[i] + solve(s[:i] + s[i+1:], b[1:]))\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"res.append(s[i] + solve(s[:i] + s[i+1:], b[1:])): \", res.append(s[i] + solve(s[:i] + s[i+1:], b[1:])))\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\t#print(\"res: \", res)\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\t\tres.append(s[i] + solve(s[:i] + s[i+1:], b[1:]))\n\t\t\t#print(\"res: \", res)\n\t\t\t#print(\"s: \", s)\n\t\t\t#print(\"b: \", b)\n\t\t\t#print(\"\")\n\t\tb[0] += (len(s) - i)\n\t\tb[i] += i\n\t#print(\"res: \", res)\n\t#print(\"s: \", s)\n\t#print(\"b: \", b)\n\t#print(\"\")\n\tif len(res) > 0:\n\t\treturn min(res)\n\treturn \"\"\n\nq = int(input())\nfor i in range(q):\n\ts = input()\n\tm = int(input())\n\tb = [int(x) for x in input().split()]\n\tprint(solve(s, b))", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        s = sys.stdin.readline().strip()\n        m = int(sys.stdin.readline().strip())\n        b = [int(x) for x in sys.stdin.readline().strip().split()]\n        t = []\n        for i in range(m):\n            if b[i] <= i:\n                t.append(s[i-b[i]])\n            else:\n                t.append(s[i])\n        print(''.join(t))\n\nif __name__ == \"__main__\":\n    main()"]