2022-04-09 22:29:36.189717 """
You are given an array $a$ consisting of $n$ integer numbers.

You have to color this array in $k$ colors in such a way that:   Each element of the array should be colored in some color;  For each $i$ from $1$ to $k$ there should be at least one element colored in the $i$-th color in the array;  For each $i$ from $1$ to $k$ all elements colored in the $i$-th color should be distinct. 

Obviously, such coloring might be impossible. In this case, print "NO". Otherwise print "YES" and any coloring (i.e. numbers $c_1, c_2, \dots c_n$, where $1 \le c_i \le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 5000$) — the length of the array $a$ and the number of colors, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 5000$) — elements of the array $a$.


-----Output-----

If there is no answer, print "NO". Otherwise print "YES" and any coloring (i.e. numbers $c_1, c_2, \dots c_n$, where $1 \le c_i \le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.


-----Examples-----
Input
4 2
1 2 2 3

Output
YES
1 1 2 2

Input
5 2
3 2 1 2 3

Output
YES
2 1 1 2 1

Input
5 2
2 1 1 2 1

Output
NO



-----Note-----

In the first example the answer $2~ 1~ 2~ 1$ is also acceptable.

In the second example the answer $1~ 1~ 1~ 2~ 2$ is also acceptable.

There exist other acceptable answers for both examples.
"""
2022-04-09 22:29:36.189739 --------------------------
2022-04-09 22:31:48.245343 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k > n:\n    print(\"NO\")\n    exit()\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n\tn, k = map(int, sys.stdin.readline().strip().split())\n\ta = map(int, sys.stdin.readline().strip().split())\n\t\n\tif n < k:\n\t\tprint 'NO'\n\t\treturn\n\t\n\tc = [0] * n\n\t\n\td = {}\n\t\n\tfor i in xrange(n):\n\t\tif a[i] not in d:\n\t\t\td[a[i]] = []\n\t\td[a[i]].append(i)\n\t\n\tcurr_color = 1\n\t\n\tfor i in xrange(1, n+1):\n\t\tif i not in d:\n\t\t\tcontinue\n\t\t\n\t\tfor j in d[i]:\n\t\t\tc[j] = curr_color\n\t\t\n\t\tcurr_color += 1\n\t\tif curr_color > k:\n\t\t\tcurr_color = 1\n\t\n\tprint 'YES'\n\tprint ' '.join(map(str, c))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# dic = {}\n# for i in range(n):\n#     if a[i] in dic:\n#         dic[a[i]].append(i)\n#     else:\n#         dic[a[i]] = [i]\n#\n# if len(dic) > k:\n#     print(\"NO\")\n# else:\n#     print(\"YES\")\n#     ans = [0] * n\n#     count = 1\n#     for i in dic:\n#         for j in dic[i]:\n#             ans[j] = count\n#         count += 1\n#         if count > k:\n#             count = 1\n#     print(*ans)\n\n\"\"\"\nThe problem is to find a coloring of the given numbers using at most $k$ colors\nsuch that no two elements of the same color are equal.\n\nLet us first find out what is the maximum number of colors we can use.\nWe can use at most $k$ colors, and there are $n$ numbers.\nIf $k \\ge n$, then it is always possible to color each number with a different color,\nso we can use $k$ colors.\nOtherwise, we can use at most $n$ colors.\n\nNow, let us find out what is the minimum number of colors we can use.\nFor each number $x$ we should have at least one color $c_x$\nsuch that all the elements of $a$ with this color are equal to $x$.\nSo, the number of colors we should use is equal to the number of different numbers in $a$.\n\nIf the number of different numbers in $a$ is greater than $k$, then it is impossible to color $a$\nusing at most $k$ colors, because we can't use more than $k$ different colors.\nOtherwise, it is possible to color $a$ using at most $k$ colors.\n\nNow, let us find out how to color $a$.\nWe can iterate over all the numbers $x$ in the array $a$ in any order.\nFor each number $x$ we will color all the elements of $a$ equal to $x$\nusing some color $c_x$.\nIf we have already colored all the elements of $a$ using $k$ different colors,\nthen we can start using these colors again.\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\n\n# print(n, k, a)\n\ndef check(a):\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return False\n    return True\n\nif check(a):\n    print(\"YES\")\n    print(\" \".join(str(i % k + 1) for i in range(n)))\nelse:\n    print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\nif(n==1):\n    c = 1\nelse:\n    c = max(a)\n\nif(c<k):\n    c = k\n\nx = [0]*(c+1)\n\nfor i in a:\n    x[i] = x[i] + 1\n\nfor i in range(1,c+1):\n    if(x[i]>k):\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")\n\nfor i in a:\n    x[i] = x[i] - 1\n    for j in range(1,c+1):\n        if(x[j]>0):\n            print(j,end=\" \")\n            x[j] = x[j] - 1\n            break"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k < n:\n    print('NO')\nelse:\n    k = n\n    print('YES')\n    for i in a:\n        print(i, end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k == 1:\n    print(\"YES\")\n    print(\"1 \" * n)\n    exit()\n\nif k > n:\n    print(\"NO\")\n    exit()\n\n# if k > 1:\n#     k = k - 1\n\n# if k == 1:\n#     print(\"YES\")\n#     print(\"1 \" * n)\n#     exit()\n\na_set = set(a)\n\nif len(a_set) < k:\n    print(\"NO\")\n    exit()\n\n# print(a)\n# print(a_set)\n\na_set = list(a_set)\na_set.sort()\n\n# print(a_set)\n\na_set_dict = {}\n\nfor i in range(len(a_set)):\n    a_set_dict[a_set[i]] = i % (k - 1) + 1\n\n# print(a_set_dict)\n\n# for i in range(len(a)):\n#     a[i] = a_set_dict[a[i]]\n\n# print(a)\n\nprint(\"YES\")\nfor i in range(len(a)):\n    print(a_set_dict[a[i]], end=\" \")"
    }
  ],
  "created": 1649557776,
  "id": "cmpl-4vHcWJ0g2NVz3yRIyg8UuYBsjwkyF",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:31:48.245808 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k > n:\n    print(\"NO\")\n    exit()\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For example, [1, 2, 2, 3] would be [1, 1, 2, 2].\nnums = []\nfor i in range(len(a)):\n    nums.append(a.count(a[i]))\n\n# Creates a list of the distinct numbers in a.\n# For example, [1, 2, 2, 3] would be [1, 2, 3].\ndistinct_nums = []\nfor i in range(len(a)):\n    if a[i] not in distinct_nums:\n        distinct_nums.append(a[i])\n\n# Create a list of the distinct numbers in a, and how many times each number appears.\n# For example, [1, 2, 2, 3] would be [1, 2, 2].\ndistinct_nums_count = []\nfor i in range(len(distinct_nums)):\n    distinct_nums_count.append(a.count(distinct_nums[i]))\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Sums the number of elements in distinct_nums_count_sorted that are greater than 1.\n# For example, [1, 2, 2, 3] would be 2.\nnumber_of_duplicates = 0\nfor i in range(len(distinct_nums_count_sorted)):\n    if distinct_nums_count_sorted[i] > 1:\n        number_of_duplicates += 1\n\n# If there are more duplicates than the number of colors, then it is impossible to color the array.\nif number_of_duplicates > k:\n    print(\"NO\")\n    exit()\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of the distinct numbers in a, and how many times each number appears,\n# sorted from greatest to least.\n# For example, [1, 2, 2, 3] would be [2, 2, 1].\ndistinct_nums_count_sorted = distinct_nums_count\ndistinct_nums_count_sorted.sort(reverse=True)\n\n# Creates a list of all the numbers in a, and how many times they appear.\n# For"
}
2022-04-09 22:31:48.245943 REASON length
2022-04-09 22:31:48.245964 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n\tn, k = map(int, sys.stdin.readline().strip().split())\n\ta = map(int, sys.stdin.readline().strip().split())\n\t\n\tif n < k:\n\t\tprint 'NO'\n\t\treturn\n\t\n\tc = [0] * n\n\t\n\td = {}\n\t\n\tfor i in xrange(n):\n\t\tif a[i] not in d:\n\t\t\td[a[i]] = []\n\t\td[a[i]].append(i)\n\t\n\tcurr_color = 1\n\t\n\tfor i in xrange(1, n+1):\n\t\tif i not in d:\n\t\t\tcontinue\n\t\t\n\t\tfor j in d[i]:\n\t\t\tc[j] = curr_color\n\t\t\n\t\tcurr_color += 1\n\t\tif curr_color > k:\n\t\t\tcurr_color = 1\n\t\n\tprint 'YES'\n\tprint ' '.join(map(str, c))\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-09 22:31:48.246022 REASON stop
2022-04-09 22:31:48.246547 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# dic = {}\n# for i in range(n):\n#     if a[i] in dic:\n#         dic[a[i]].append(i)\n#     else:\n#         dic[a[i]] = [i]\n#\n# if len(dic) > k:\n#     print(\"NO\")\n# else:\n#     print(\"YES\")\n#     ans = [0] * n\n#     count = 1\n#     for i in dic:\n#         for j in dic[i]:\n#             ans[j] = count\n#         count += 1\n#         if count > k:\n#             count = 1\n#     print(*ans)\n\n\"\"\"\nThe problem is to find a coloring of the given numbers using at most $k$ colors\nsuch that no two elements of the same color are equal.\n\nLet us first find out what is the maximum number of colors we can use.\nWe can use at most $k$ colors, and there are $n$ numbers.\nIf $k \\ge n$, then it is always possible to color each number with a different color,\nso we can use $k$ colors.\nOtherwise, we can use at most $n$ colors.\n\nNow, let us find out what is the minimum number of colors we can use.\nFor each number $x$ we should have at least one color $c_x$\nsuch that all the elements of $a$ with this color are equal to $x$.\nSo, the number of colors we should use is equal to the number of different numbers in $a$.\n\nIf the number of different numbers in $a$ is greater than $k$, then it is impossible to color $a$\nusing at most $k$ colors, because we can't use more than $k$ different colors.\nOtherwise, it is possible to color $a$ using at most $k$ colors.\n\nNow, let us find out how to color $a$.\nWe can iterate over all the numbers $x$ in the array $a$ in any order.\nFor each number $x$ we will color all the elements of $a$ equal to $x$\nusing some color $c_x$.\nIf we have already colored all the elements of $a$ using $k$ different colors,\nthen we can start using these colors again.\n\"\"\""
}
2022-04-09 22:31:48.246615 REASON stop
2022-04-09 22:31:48.247043 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:31:48.247090 REASON stop
2022-04-09 22:31:48.258309 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\n\n# print(n, k, a)\n\ndef check(a):\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return False\n    return True\n\nif check(a):\n    print(\"YES\")\n    print(\" \".join(str(i % k + 1) for i in range(n)))\nelse:\n    print(\"NO\")"
}
2022-04-09 22:31:48.258431 REASON stop
2022-04-09 22:31:48.259174 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\nif(n==1):\n    c = 1\nelse:\n    c = max(a)\n\nif(c<k):\n    c = k\n\nx = [0]*(c+1)\n\nfor i in a:\n    x[i] = x[i] + 1\n\nfor i in range(1,c+1):\n    if(x[i]>k):\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")\n\nfor i in a:\n    x[i] = x[i] - 1\n    for j in range(1,c+1):\n        if(x[j]>0):\n            print(j,end=\" \")\n            x[j] = x[j] - 1\n            break"
}
2022-04-09 22:31:48.259279 REASON stop
2022-04-09 22:31:48.259769 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k < n:\n    print('NO')\nelse:\n    k = n\n    print('YES')\n    for i in a:\n        print(i, end=' ')"
}
2022-04-09 22:31:48.259818 REASON stop
2022-04-09 22:31:48.260218 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif k == 1:\n    print(\"YES\")\n    print(\"1 \" * n)\n    exit()\n\nif k > n:\n    print(\"NO\")\n    exit()\n\n# if k > 1:\n#     k = k - 1\n\n# if k == 1:\n#     print(\"YES\")\n#     print(\"1 \" * n)\n#     exit()\n\na_set = set(a)\n\nif len(a_set) < k:\n    print(\"NO\")\n    exit()\n\n# print(a)\n# print(a_set)\n\na_set = list(a_set)\na_set.sort()\n\n# print(a_set)\n\na_set_dict = {}\n\nfor i in range(len(a_set)):\n    a_set_dict[a_set[i]] = i % (k - 1) + 1\n\n# print(a_set_dict)\n\n# for i in range(len(a)):\n#     a[i] = a_set_dict[a[i]]\n\n# print(a)\n\nprint(\"YES\")\nfor i in range(len(a)):\n    print(a_set_dict[a[i]], end=\" \")"
}
2022-04-09 22:31:48.260301 REASON stop
