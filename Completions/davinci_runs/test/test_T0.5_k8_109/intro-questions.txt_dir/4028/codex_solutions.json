["\n\ndef main():\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n\ndef solve(n, s):\n    pass\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    s = input()\n    dp = [[0 for _ in range(n*2+1)] for _ in range(n*2+1)]\n    dp[0][0] = 1\n    for i in range(1,n*2+1):\n        for j in range(i+1):\n            if j>0:\n                dp[i][j] += dp[i-1][j-1]\n            if j<i:\n                dp[i][j] += dp[i-1][j+1]\n    count = 0\n    for i in range(len(s)+1):\n        if i==0:\n            count += dp[n*2][0]\n        elif i==len(s):\n            count += dp[n*2][n*2]\n        else:\n            count += dp[n*2-i][n*2-i-len(s)+1]\n    print(count%(10**9+7))\n\nmain()", "\n\nn=int(input())\ns=input()\n\ndef count(n,s):\n    \n    if n==0:\n        return 1\n    elif len(s)==0:\n        return 0\n    elif s[0]=='(':\n        return count(n-1,s[1:])+count(n,s[1:])\n    else:\n        return count(n,s[1:])\n\nprint(count(n,s))", "\n\n# SOLUTION\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\ns = input().strip()\n\ndp = [[0 for _ in range(n + 2)] for _ in range(n + 2)]\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(n + 1):\n        if dp[i][j] > 0:\n            dp[i + 1][j + 1] += dp[i][j]\n            dp[i + 1][j - 1] += dp[i][j]\n\nprint(dp[n][s.count('(') - s.count(')')])", "\n\n#from math import factorial\n#from collections import Counter\n\n#def nCr(n,r):\n#    f = factorial(n)\n#    f /= factorial(r)\n#    f /= factorial(n-r)\n#    return f\n\n#def nPr(n,r):\n#    f = factorial(n)\n#    f /= factorial(n-r)\n#    return f\n\n#def nCrModp(n, r, p): \n#    numerator = 1\n#    for i in range(r): \n#        numerator = (numerator * (n - i)) % p  \n#    denominator = 1\n#    for i in range(1, r + 1): \n#        denominator = (denominator * i) % p \n#    return (numerator * pow(denominator, p - 2, p)) % p\n\n#def nPrModp(n, r, p): \n#    numerator = 1\n#    for i in range(r): \n#        numerator = (numerator * (n - i)) % p  \n#    return numerator\n\n#def modinv(a, m):\n#    for x in range(1, m) : \n#        if ((a * x) % m == 1) : \n#            return x \n#    return 1\n\ndef solve(n,s):\n    #code here\n    return 0\n\nMOD = 10**9 + 7\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(solve(n,s))", "\n\nimport sys\n\ndef find_combinations(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        if s[0] == '(' and s[1] == '(' and s[2] == ')':\n            return 2\n        return 0\n    # n > 3\n    if s[1] == '(' and s[-2] == ')':\n        return find_combinations(s[1:-1])\n    if s[0] == '(' and s[-1] == ')':\n        return find_combinations(s[1:-1])\n    return 0\n\n\ndef read_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n, s\n\n\ndef solve(n, s):\n    return find_combinations(s)\n\n\ndef main():\n    n, s = read_input()\n    print(solve(n, s))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(n)\n    print(s)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\n#%%\n\nn = 5\ns = \"()))()\"\n\n#%%\n\ndef valid_bracket(s):\n    count = 0\n    for char in s:\n        if char == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\n#%%\n\ndef generate_bracket(n):\n    if n == 0:\n        return [\"\"]\n    if n == 1:\n        return [\"()\"]\n    result = []\n    for i in range(n):\n        l = generate_bracket(i)\n        r = generate_bracket(n-i-1)\n        for l_bracket in l:\n            for r_bracket in r:\n                result.append(\"(\" + l_bracket + \")\" + r_bracket)\n    return result\n\n#%%\n\nresult = generate_bracket(n)\nresult = [r for r in result if s in r]\n# print(result)\nprint(len(result))\n\n#%%"]