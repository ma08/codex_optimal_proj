["\n\nimport sys\n\ndef main():\n    n, x, y = [int(i) for i in sys.stdin.readline().split()]\n    num = sys.stdin.readline().strip()\n    #print(n, x, y)\n    #print(num)\n    #print(num[y:x])\n    #print(num[y:x].count('0'))\n    print(num[y:x].count('0'))\n\nmain()", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    a = list(map(int, input()))\n    if a[y] == a[x]:\n        a[x] = 1 - a[x]\n    print(sum(a))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn,x,y = map(int,input().split())\ns = input()\n\nif s[:x] == '1' + '0'*(x-1):\n    print(0)\nelse:\n    if s[:x] == '0'*x:\n        print(1)\n    else:\n        if s[:y] == '1' + '0'*(y-1):\n            print(x-y)\n        else:\n            print(x-y+1)", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(n-1, max(n-x-1, 0), -1):\n        if s[i] == \"0\":\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\n#-----Solution-----\n\ndef get_number(number, x, y):\n    #number = [int(i) for i in number]\n    #print(number)\n    number = [int(i) for i in number]\n    #print(number)\n    answer = 0\n    for i in range(len(number) - 1, -1, -1):\n        if i >= x:\n            if number[i] == 1:\n                answer += 1\n                number[i] = 0\n        elif i >= y:\n            if number[i] == 0:\n                answer += 1\n                number[i] = 1\n        else:\n            if number[i] == 1:\n                answer += 1\n                number[i] = 0\n    return answer\n\nn, x, y = input().split()\nn, x, y = int(n), int(x), int(y)\nnumber = input()\n\nprint(get_number(number, x, y))", "\n\nimport sys\n\ndef main():\n    n, x, y = [int(i) for i in sys.stdin.readline().split()]\n    number = sys.stdin.readline().strip()\n    print(min_operations_to_get_remainder(number, x, y))\n\n\ndef min_operations_to_get_remainder(number, x, y):\n    \"\"\"\n    :param number: decimal number without leading zeros, only 0 or 1 digits\n    :param x: x\n    :param y: y\n    :return: minimum number of operations required to get the number having remainder 10^y modulo 10^x\n    \"\"\"\n    remainder = int(number[-x:], 2)\n    remainder_to_get = 10 ** y\n    if remainder == remainder_to_get:\n        return 0\n    elif remainder < remainder_to_get:\n        if remainder_to_get - remainder < remainder_to_get // 2:\n            return remainder_to_get - remainder\n        else:\n            return remainder_to_get - remainder - remainder_to_get // 2\n    else:\n        if remainder - remainder_to_get < remainder_to_get // 2:\n            return remainder - remainder_to_get\n        else:\n            return remainder - remainder_to_get - remainder_to_get // 2\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n,x,y = map(int,input().split())\n    num = input()\n    num = list(num)\n    ans = 0\n    for i in range(n-1,x-1,-1):\n        if num[i] != '1':\n            ans += 1\n        else:\n            break\n    for i in range(x-1,y-1,-1):\n        if num[i] != '0':\n            ans += 1\n        else:\n            break\n    print(ans)\n\nmain()", "\n\ndef main():\n    n, x, y = map(int, input().split())\n    num = list(map(int, input()))\n\n    # find the first digit that is not 1\n    i = 0\n    while num[i] == 1:\n        i += 1\n\n    # now i is the first digit that is not 1\n    # we need to change i+y digits to make the number % 10^x == 10^y\n    # the first digit that is not changed is the (i+y)-th digit\n    # so we need to change i+y-1 digits\n    # we can change the first digit to 0 and change the rest of the digits to 1\n    # so we need to change i+y-1-i = y-1 digits\n    # if y-1 < 0, then the number is already satisfy the condition\n    if y-1 < 0:\n        print(0)\n    else:\n        print(y-1)\n\n\nif __name__ == '__main__':\n    main()"]