2022-04-09 23:08:14.109486 """
You are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.

You can perform each of the two following types of moves any (possibly, zero) number of times on any chip:

  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$);  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). 

Note that it's allowed to move chips to any integer coordinate, including negative and zero.

Your task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 100$) — the number of chips.

The second line of the input contains $n$ integers $x_1, x_2, \dots, x_n$ ($1 \le x_i \le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.


-----Output-----

Print one integer — the minimum total number of coins required to move all $n$ chips to the same coordinate.


-----Examples-----
Input
3
1 2 3

Output
1

Input
5
2 2 2 3 3

Output
2



-----Note-----

In the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.

In the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.
"""
2022-04-09 23:08:14.109520 --------------------------
2022-04-09 23:08:41.420872 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\n# calculate the minimum and maximum values of the chips\nm = min(x)\nM = max(x)\n\n# find the number of chips with the minimum value\nm_count = x.count(m)\n\n# find the number of chips with the maximum value\nM_count = x.count(M)\n\n# find the number of chips with values between the minimum and maximum values\nbetween_count = n - m_count - M_count\n\n# find the best case for the number of coins to move the chips\nbest_case = M_count*(M-m) + between_count*(M-m-1)\n\n# print the best case for the number of coins to move the chips\nprint(best_case)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    print(min(x[i] - x[i-1] for i in range(1, n)))\n\nif __name__ == \"__main__\":\n    solve()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nchips = list(map(int, input().split()))\n\nmin_chip = min(chips)\nmin_chip_count = chips.count(min_chip)\n\n# print(min_chip)\n# print(min_chip_count)\n\nmin_cost = 0\n\nfor i in range(n):\n    if chips[i] > min_chip:\n        min_cost += chips[i] - min_chip\n\nif min_chip_count == 1:\n    min_cost += 1\n\nprint(min_cost)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx.sort()\n\nif n == 1:\n    print(0)\nelif n == 2:\n    print(abs(x[0] - x[1]) // 2)\nelse:\n    if x[0] == x[n - 1]:\n        print(0)\n    elif x[0] == x[1]:\n        print(abs(x[0] - x[n - 1]) // 2)\n    elif x[n - 2] == x[n - 1]:\n        print(abs(x[0] - x[n - 1]) // 2)\n    else:\n        print(min(abs(x[0] - x[n - 2]), abs(x[1] - x[n - 1])) // 2 + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nx.sort()\n\nl = 0\nr = 1000000000\n\nwhile l < r:\n    m = (l + r) // 2\n    c = 0\n    for i in x:\n        c += abs(m - i)\n    if c <= n:\n        r = m\n    else:\n        l = m + 1\n\nc = 0\nfor i in x:\n    c += abs(l - i)\n\nprint(c // 2)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn=int(input())\nx=list(map(int,input().split()))\nx=sorted(x)\nans=0\nif x[0]!=x[-1]:\n    ans+=1\n    for i in range(1,n):\n        if x[i]==x[i-1]:\n            ans+=1\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nmin_x = min(x)\nmax_x = max(x)\n\nprint(min(max_x - min_x, (max_x - min_x) // 2 + (max_x - min_x) % 2))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nmin_x = min(x)\nmax_x = max(x)\n\n# The answer is the number of chips with the minimum coordinate + the number of chips with the maximum coordinate.\nprint(x.count(min_x) + x.count(max_x))"
    }
  ],
  "created": 1649560094,
  "id": "cmpl-4vIDulB8CvPvN64jT6WZzA26F5ler",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:08:41.421134 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\n# calculate the minimum and maximum values of the chips\nm = min(x)\nM = max(x)\n\n# find the number of chips with the minimum value\nm_count = x.count(m)\n\n# find the number of chips with the maximum value\nM_count = x.count(M)\n\n# find the number of chips with values between the minimum and maximum values\nbetween_count = n - m_count - M_count\n\n# find the best case for the number of coins to move the chips\nbest_case = M_count*(M-m) + between_count*(M-m-1)\n\n# print the best case for the number of coins to move the chips\nprint(best_case)"
}
2022-04-09 23:08:41.421173 REASON stop
2022-04-09 23:08:41.433136 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    print(min(x[i] - x[i-1] for i in range(1, n)))\n\nif __name__ == \"__main__\":\n    solve()"
}
2022-04-09 23:08:41.433234 REASON stop
2022-04-09 23:08:41.433914 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nchips = list(map(int, input().split()))\n\nmin_chip = min(chips)\nmin_chip_count = chips.count(min_chip)\n\n# print(min_chip)\n# print(min_chip_count)\n\nmin_cost = 0\n\nfor i in range(n):\n    if chips[i] > min_chip:\n        min_cost += chips[i] - min_chip\n\nif min_chip_count == 1:\n    min_cost += 1\n\nprint(min_cost)"
}
2022-04-09 23:08:41.434024 REASON stop
2022-04-09 23:08:41.434720 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx.sort()\n\nif n == 1:\n    print(0)\nelif n == 2:\n    print(abs(x[0] - x[1]) // 2)\nelse:\n    if x[0] == x[n - 1]:\n        print(0)\n    elif x[0] == x[1]:\n        print(abs(x[0] - x[n - 1]) // 2)\n    elif x[n - 2] == x[n - 1]:\n        print(abs(x[0] - x[n - 1]) // 2)\n    else:\n        print(min(abs(x[0] - x[n - 2]), abs(x[1] - x[n - 1])) // 2 + 1)"
}
2022-04-09 23:08:41.434819 REASON stop
2022-04-09 23:08:41.435352 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nx.sort()\n\nl = 0\nr = 1000000000\n\nwhile l < r:\n    m = (l + r) // 2\n    c = 0\n    for i in x:\n        c += abs(m - i)\n    if c <= n:\n        r = m\n    else:\n        l = m + 1\n\nc = 0\nfor i in x:\n    c += abs(l - i)\n\nprint(c // 2)"
}
2022-04-09 23:08:41.435483 REASON stop
2022-04-09 23:08:41.436119 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn=int(input())\nx=list(map(int,input().split()))\nx=sorted(x)\nans=0\nif x[0]!=x[-1]:\n    ans+=1\n    for i in range(1,n):\n        if x[i]==x[i-1]:\n            ans+=1\nprint(ans)"
}
2022-04-09 23:08:41.436210 REASON stop
2022-04-09 23:08:41.436727 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nmin_x = min(x)\nmax_x = max(x)\n\nprint(min(max_x - min_x, (max_x - min_x) // 2 + (max_x - min_x) % 2))"
}
2022-04-09 23:08:41.436850 REASON stop
2022-04-09 23:08:41.437567 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nmin_x = min(x)\nmax_x = max(x)\n\n# The answer is the number of chips with the minimum coordinate + the number of chips with the maximum coordinate.\nprint(x.count(min_x) + x.count(max_x))"
}
2022-04-09 23:08:41.437663 REASON stop
