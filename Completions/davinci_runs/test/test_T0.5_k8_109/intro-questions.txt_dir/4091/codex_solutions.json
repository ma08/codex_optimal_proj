["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    dp = [0 for _ in range(n+1)]\n    for i in range(n):\n        dp[i+1] = max(dp[i], a[i])\n    dp2 = [0 for _ in range(n+1)]\n    for i in range(n):\n        dp2[i+1] = max(dp2[i], a[n-1-i])\n    ans = 0\n    for i in range(k):\n        ans += dp[n-i]\n    for i in range(k):\n        ans += dp2[n-i]\n    print(ans)\n    t = [1]*k\n    t[0] = n-k+1\n    print(\" \".join(map(str, t)))\n\nmain()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n+1)\n\nfor i in range(1, n+1):\n    dp[i] = max(dp[i-1], a[i-1])\n\nans = [0] * k\n\nfor i in range(k-1, 0, -1):\n    for j in range(i, n+1):\n        if dp[j] - dp[j-i] > dp[n] - dp[n-i]:\n            dp[j] = dp[j-i]\n            ans[i-1] = j - i\n            n = j\n            break\n\nprint(dp[n])\n\nfor i in range(k):\n    if i == 0:\n        print(ans[i]+1)\n    else:\n        print(ans[i]-ans[i-1])", "\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum total profit for problems [i, j]\ndp = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n        for m in range(i, j):\n            dp[i][j] = max(dp[i][j], dp[i][m] + dp[m + 1][j])\n\n# dp2[i][j] = maximum total profit for problems [i, j] and j - i + 1 days\ndp2 = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp2[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j])\n        for m in range(i, j):\n            dp2[i][j] = max(dp2[i][j], dp2[i][m] + dp[m + 1][j])\n\nprint(dp2[0][n - 1])\n\n# dp3[i][j] = maximum total profit for problems [i, j] and j - i + 1 days and last day is i\ndp3 = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp3[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        dp3[i][j] = max(dp3[i][j - 1], dp3[i + 1][j])\n        for m in range(i, j):\n            dp3[i][j] = max(dp3[i][j], dp3[i][m] + dp[m + 1][j])\n\n# ans[i][j] = maximum total profit for problems [i, j] and j - i + 1 days and last day is i and k days\nans = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    ans[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        ans[i][j] = max(ans[i][j - 1], ans[i + 1][j])\n        for m in range(i + 1, j + 1):\n            ans[i][j] = max(ans[i][j], dp3[i][m - 1] + ans[m][j])\n\nprint(ans[0][n - 1])\n\n# dp4[i][j] = maximum total profit for problems [i, j] and j - i + 1 days and last day is i and k days\ndp4 = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp4[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        dp4[i][j] = max(dp4[i][j - 1], dp4[i + 1][j])\n        for m in range(i, j):\n            dp4[i][j] = max(dp4[i][j], dp4[i][m] + dp[m + 1][j])\n\n# ans[i][j] = maximum total profit for problems [i, j] and j - i + 1 days and last day is i and k days\nans = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    ans[i][i] = a[i]\n\nfor l in range(2, n + 1):\n    for i in range(n - l + 1):\n        j = i + l - 1\n        ans[i][j] = max(ans[i][j - 1], ans[i + 1][j])\n        for m in range(i + 1, j + 1):\n            ans[i][j] = max(ans[i][j], dp4[i][m - 1] + ans[m][j])\n\nprint(ans[0][n - 1])", "\n\nimport sys\n\ndef main():\n    f = open(sys.argv[1]) if len(sys.argv) > 1 else sys.stdin\n    n, k = [int(x) for x in f.readline().split()]\n    a = [int(x) for x in f.readline().split()]\n    # TODO: solve the problem\n    # print(n, k)\n    # print(a)\n    \n    # TODO: output the result\n    # print(n, k)\n    # print(a)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nif k == 1:\n    print(sum(a))\n    print(n)\nelse:\n    score = [0] * n\n    for i in range(n - k + 1):\n        score[i] = max(a[i:i + k])\n\n    s = [0] * (n + 1)\n    for i in range(n):\n        s[i + 1] = s[i] + score[i]\n\n    dp = [0] * (n + 1)\n    for i in range(2, k + 1):\n        for j in range(i, n + 1):\n            dp[j] = max(dp[j - 1], s[j] - s[j - i])\n\n    print(dp[n])\n    j = n\n    for i in range(k, 0, -1):\n        while j >= i and dp[j] == dp[j - 1]:\n            j -= 1\n        print(j - (n - j) + 1, end=' ')\n        j -= 1", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    arr = list(map(int, sys.stdin.readline().split()))\n\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for j in range(1, k+1):\n        for i in range(1, n+1):\n            if j == 1:\n                dp[j][i] = arr[i-1]\n            else:\n                max_val = -1\n                for l in range(i):\n                    max_val = max(max_val, dp[j-1][l] + max(arr[l:i]))\n                dp[j][i] = max_val\n\n    print(dp[k][n])\n    i = n\n    j = k\n    while j > 0:\n        while dp[j][i] == dp[j][i-1]:\n            i -= 1\n        print(i, end=' ')\n        j -= 1\n        i -= 1\n    print()\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i >= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[n][k])\n    i = n\n    j = k\n    result = []\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            result.append(i-j+1)\n            i -= i-j+1\n            j -= 1\n    result.reverse()\n    print(' '.join(map(str, result)))\n\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * n\ndp[0] = a[0]\nfor i in range(1, n):\n    dp[i] = max(dp[i-1] + a[i], a[i])\n\nprint(max(dp))\n\n# dp = [0] * n\n# dp[0] = a[0]\n# for i in range(1, n):\n#     dp[i] = max(dp[i-1] + a[i], a[i])\n\n# print(max(dp))\n\n# ans = [0] * k\n# i = n - 1\n# while i >= 0:\n#     if i == n - 1:\n#         ans[k-1] += 1\n#     else:\n#         if dp[i] == dp[i+1] + a[i]:\n#             ans[k-1] += 1\n#         else:\n#             j = i + 1\n#             while j < n and dp[j] == dp[j-1] + a[j]:\n#                 j += 1\n#             ans[k-1] += j - i\n#             i = j - 1\n#             k -= 1\n#     i -= 1\n\n# print(*ans)\n\n# # dp = [0] * n\n# # dp[0] = a[0]\n# # for i in range(1, n):\n# #     dp[i] = max(dp[i-1] + a[i], a[i])\n\n# # print(max(dp))\n\n# # ans = [0] * k\n# # i = n - 1\n# # while i >= 0:\n# #     if i == n - 1:\n# #         ans[k-1] += 1\n# #     else:\n# #         if dp[i] == dp[i+1] + a[i]:\n# #             ans[k-1] += 1\n# #         else:\n# #             j = i + 1\n# #             while j < n and dp[j] == dp[j-1] + a[j]:\n# #                 j += 1\n# #             ans[k-1] += j - i\n# #             i = j - 1\n# #             k -= 1\n# #     i -= 1\n\n# # print(*ans)"]