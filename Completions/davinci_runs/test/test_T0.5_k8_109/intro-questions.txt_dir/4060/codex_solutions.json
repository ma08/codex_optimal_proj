["\n\nimport sys\n\n# s = sys.stdin.readline().strip()\n# n = len(s)\n\ns = '(((()'\nn = len(s)\n\nstack = []\n\nfor i in range(n):\n    if s[i] == '(':\n        stack.append(s[i])\n    else:\n        if len(stack) == 0:\n            stack.append(s[i])\n        else:\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(s[i])\n\n# print(stack)\n\nif len(stack) == 0:\n    print(n)\nelse:\n    count = 0\n    for i in range(len(stack)):\n        if stack[i] == '(':\n            count += 1\n    print(count)", "\n\nn = int(input())\ns = input()\n\n# \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u0431\u043a\u0438\ncount = 0\n# \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u0431\u043a\u0438\nresult = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        count += 1\n    else:\n        if count > 0:\n            count -= 1\n        else:\n            result += 1\n\nprint(result)", "\n\ndef is_valid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef solve(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n        else:\n            s[i] = '('\n        if is_valid(s):\n            ans += 1\n        if s[i] == '(':\n            s[i] = ')'\n        else:\n            s[i] = '('\n    return ans\n\ndef main():\n    n = int(input())\n    s = input()\n    print(solve(list(s)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    s = input()\n    open_brackets = 0\n    close_brackets = 0\n    for i in range(n):\n        if s[i] == '(':\n            open_brackets += 1\n        else:\n            close_brackets += 1\n    if open_brackets == close_brackets:\n        print(0)\n    else:\n        print(max(open_brackets, close_brackets))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\ns = input()\n\ndef valid_brackets(s):\n    stack = []\n    for bracket in s:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif stack:\n            stack.pop()\n        else:\n            return False\n    return not stack\n\ndef count_swaps(s):\n    count = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            count += 1\n    return min(count, n - count)\n\nif valid_brackets(s):\n    print(count_swaps(s))\nelse:\n    print(0)", "\n\nimport sys\n\nn = int(input())\ns = input()\n\nif s[0] == ')' or s[-1] == '(':\n    print(0)\n    sys.exit(0)\n\ndef is_regular(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(s[i])\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef change_type(s, i):\n    return s[:i] + '(' if s[i] == ')' else ')' + s[i+1:]\n\ncount = 0\nfor i in range(len(s)):\n    if not is_regular(s):\n        count += 1\n    s = change_type(s, i)\n\nprint(count)", "\n\nn = int(input())\ns = input()\n\nans = 0\ncnt = 0\nfor i in range(n):\n    if s[i] == '(':\n        cnt += 1\n        ans += 1\n    else:\n        if cnt > 0:\n            cnt -= 1\n        else:\n            ans += 1\n\nprint(ans)", "\n\ndef isRegular(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(s[i])\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True\n\nn = int(input())\ns = input()\n\ncount = 0\nfor i in range(n):\n    if s[i] == '(':\n        if not isRegular(s[:i] + ')' + s[i+1:]):\n            count += 1\n    else:\n        if not isRegular(s[:i] + '(' + s[i+1:]):\n            count += 1\n\nprint(count)"]