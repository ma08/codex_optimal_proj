2022-04-09 23:17:37.760577 """
The only difference between easy and hard versions is the length of the string.

You are given a string $s$ and a string $t$, both consisting only of lowercase Latin letters. It is guaranteed that $t$ can be obtained from $s$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $s$ without changing order of remaining characters (in other words, it is guaranteed that $t$ is a subsequence of $s$).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from $s$ of maximum possible length such that after removing this substring $t$ will remain a subsequence of $s$.

If you want to remove the substring $s[l;r]$ then the string $s$ will be transformed to $s_1 s_2 \dots s_{l-1} s_{r+1} s_{r+2} \dots s_{|s|-1} s_{|s|}$ (where $|s|$ is the length of $s$).

Your task is to find the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.


-----Input-----

The first line of the input contains one string $s$ consisting of at least $1$ and at most $2 \cdot 10^5$ lowercase Latin letters.

The second line of the input contains one string $t$ consisting of at least $1$ and at most $2 \cdot 10^5$ lowercase Latin letters.

It is guaranteed that $t$ is a subsequence of $s$.


-----Output-----

Print one integer â€” the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.


-----Examples-----
Input
bbaba
bb

Output
3

Input
baaba
ab

Output
2

Input
abcde
abcde

Output
0

Input
asdfasdf
fasd

Output
3
"""
2022-04-09 23:17:37.760602 --------------------------
2022-04-09 23:19:49.298982 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\n# input\ns = input()\nt = input()\n\n# get the indexes of all letters of t in s\nresult = 0\nfor i in range(len(t)):\n    result = max(result, s.index(t[i]) - i)\n\nprint(result)"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\n#print(s,t)\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfas"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\n\ndef solve(s, t):\n    l = 0\n    r = 0\n    n = len(t)\n    ans = 0\n    while l < n:\n        if r >= len(s):\n            return 0\n        if s[r] == t[l]:\n            l += 1\n        r += 1\n    r -= 1\n    while r < len(s):\n        while l < n and s[r] != t[l]:\n            r += 1\n        if r >= len(s):\n            return 0\n        ans = max(ans, r - l)\n        l += 1\n        r += 1\n    return ans\n\n\nprint(solve(s, t))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# TODO: Solve with dynamic programming\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    # Build suffix array\n    suffixes = []\n    for i in range(len(s)):\n        suffixes.append(s[i:])\n\n    # Sort suffixes\n    suffixes.sort()\n\n    # Build LCP array\n    lcp = [0] * len(s)\n    for i in range(1, len(s)):\n        j = 0\n        while suffixes[i][j] == suffixes[i-1][j]:\n            j += 1\n        lcp[i] = j\n\n    print(lcp)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve(\"bbaba\", \"bb\")\n    3\n    >>> solve(\"baaba\", \"ab\")\n    2\n    >>> solve(\"abcde\", \"abcde\")\n    0\n    >>> solve(\"asdfasdf\", \"fasd\")\n    3\n    \"\"\"\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return n - dp[n][m]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    s = input()\n    t = input()\n    print(solve(s, t))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef subsequence(s, t):\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)\n\ndef solve(s, t):\n    if subsequence(s, t):\n        return 0\n    s = s[::-1]\n    t = t[::-1]\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return len(s) - i\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    s = input().strip()\n    t = input().strip()\n\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n\n    print(len(s) - i)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    print(n - dp[n-1][m-1])\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649560658,
  "id": "cmpl-4vIN0ONm8Ujcry1infJoS93hk39ga",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:19:49.299450 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\n# input\ns = input()\nt = input()\n\n# get the indexes of all letters of t in s\nresult = 0\nfor i in range(len(t)):\n    result = max(result, s.index(t[i]) - i)\n\nprint(result)"
}
2022-04-09 23:19:49.299510 REASON stop
2022-04-09 23:19:49.300429 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\n#print(s,t)\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\n# t = \"fasd\"\n\n# s = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfas"
}
2022-04-09 23:19:49.300519 REASON length
2022-04-09 23:19:49.300538 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\n\ndef solve(s, t):\n    l = 0\n    r = 0\n    n = len(t)\n    ans = 0\n    while l < n:\n        if r >= len(s):\n            return 0\n        if s[r] == t[l]:\n            l += 1\n        r += 1\n    r -= 1\n    while r < len(s):\n        while l < n and s[r] != t[l]:\n            r += 1\n        if r >= len(s):\n            return 0\n        ans = max(ans, r - l)\n        l += 1\n        r += 1\n    return ans\n\n\nprint(solve(s, t))"
}
2022-04-09 23:19:49.300556 REASON stop
2022-04-09 23:19:49.300965 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# TODO: Solve with dynamic programming\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    # Build suffix array\n    suffixes = []\n    for i in range(len(s)):\n        suffixes.append(s[i:])\n\n    # Sort suffixes\n    suffixes.sort()\n\n    # Build LCP array\n    lcp = [0] * len(s)\n    for i in range(1, len(s)):\n        j = 0\n        while suffixes[i][j] == suffixes[i-1][j]:\n            j += 1\n        lcp[i] = j\n\n    print(lcp)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:19:49.301055 REASON stop
2022-04-09 23:19:49.301588 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve(\"bbaba\", \"bb\")\n    3\n    >>> solve(\"baaba\", \"ab\")\n    2\n    >>> solve(\"abcde\", \"abcde\")\n    0\n    >>> solve(\"asdfasdf\", \"fasd\")\n    3\n    \"\"\"\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return n - dp[n][m]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    s = input()\n    t = input()\n    print(solve(s, t))"
}
2022-04-09 23:19:49.301677 REASON stop
2022-04-09 23:19:49.302273 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef subsequence(s, t):\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)\n\ndef solve(s, t):\n    if subsequence(s, t):\n        return 0\n    s = s[::-1]\n    t = t[::-1]\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return len(s) - i\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))"
}
2022-04-09 23:19:49.302344 REASON stop
2022-04-09 23:19:49.302687 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    s = input().strip()\n    t = input().strip()\n\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n\n    print(len(s) - i)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:19:49.302756 REASON stop
2022-04-09 23:19:49.303197 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    print(n - dp[n-1][m-1])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:19:49.303288 REASON stop
