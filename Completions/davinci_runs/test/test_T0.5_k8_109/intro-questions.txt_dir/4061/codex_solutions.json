["\n\ndef main():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    print(n - dp[n-1][m-1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve(\"bbaba\", \"bb\")\n    3\n    >>> solve(\"baaba\", \"ab\")\n    2\n    >>> solve(\"abcde\", \"abcde\")\n    0\n    >>> solve(\"asdfasdf\", \"fasd\")\n    3\n    \"\"\"\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return n - dp[n][m]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    s = input()\n    t = input()\n    print(solve(s, t))", "\n\n# SOLUTION\n\n# input\ns = input()\nt = input()\n\n# get the indexes of all letters of t in s\nresult = 0\nfor i in range(len(t)):\n    result = max(result, s.index(t[i]) - i)\n\nprint(result)", "\n\n# TODO: Solve with dynamic programming\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    # Build suffix array\n    suffixes = []\n    for i in range(len(s)):\n        suffixes.append(s[i:])\n\n    # Sort suffixes\n    suffixes.sort()\n\n    # Build LCP array\n    lcp = [0] * len(s)\n    for i in range(1, len(s)):\n        j = 0\n        while suffixes[i][j] == suffixes[i-1][j]:\n            j += 1\n        lcp[i] = j\n\n    print(lcp)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    s = input().strip()\n    t = input().strip()\n\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n\n    print(len(s) - i)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef subsequence(s, t):\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)\n\ndef solve(s, t):\n    if subsequence(s, t):\n        return 0\n    s = s[::-1]\n    t = t[::-1]\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return len(s) - i\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))", "\n\ns = input()\nt = input()\n\n\ndef solve(s, t):\n    l = 0\n    r = 0\n    n = len(t)\n    ans = 0\n    while l < n:\n        if r >= len(s):\n            return 0\n        if s[r] == t[l]:\n            l += 1\n        r += 1\n    r -= 1\n    while r < len(s):\n        while l < n and s[r] != t[l]:\n            r += 1\n        if r >= len(s):\n            return 0\n        ans = max(ans, r - l)\n        l += 1\n        r += 1\n    return ans\n\n\nprint(solve(s, t))"]