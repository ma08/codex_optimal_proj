["\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ndef min_moves(n):\n    moves = 0\n    i = 1\n    j = 1\n    while True:\n        if n == i:\n            return moves + 1\n        elif n == j:\n            return moves + 1\n        elif n < i:\n            if n > j:\n                return moves + n - j\n            else:\n                return moves + i - n\n        else:\n            moves += 1\n            i += 1\n            j += 1\n\nprint(min_moves(n))", "\n\n# Read input\nN = int(input())\n\n# Initialize\nmoves = 0\n\n# Loop until N is reached\nwhile N > 1:\n    # If N is even, divide by 2\n    if N % 2 == 0:\n        N //= 2\n    # If N is odd, subtract 1\n    else:\n        N -= 1\n    # Increase number of moves\n    moves += 1\n\n# Print result\nprint(moves)", "\n\nn = int(input())\n\ndef solve(n):\n    if n == 1:\n        return 0\n    elif n % 2 == 1:\n        return solve(n-1) + 1\n    else:\n        return solve(n//2) + 1\n\nprint(solve(n))", "\n\nimport math\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        x = int(math.sqrt(n))\n        if x * x == n:\n            print(2 * x - 2)\n        else:\n            if x * (x + 1) >= n:\n                print(2 * x - 1)\n            else:\n                print(2 * x)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\nn = int(input())\n\nx = int(math.sqrt(n))\n\nif x ** 2 == n:\n    print(x * 2 - 1)\nelif x ** 2 + x >= n:\n    print(x * 2)\nelse:\n    print(x * 2 + 1)", "\n\n# Accepted.\n\nimport math\n\ndef main():\n    N = int(input())\n    x, y = 1, 1\n    count = 0\n\n    while True:\n        count += 1\n        if N == x * y:\n            break\n        elif N > x * y:\n            if x < y:\n                x += 1\n            else:\n                y += 1\n        elif N < x * y:\n            if x < y:\n                y -= 1\n            else:\n                x -= 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\nN = int(input())\n\n# The minimum number of moves needed to reach a square that contains N is\n# the sum of the minimum number of moves needed to reach a square that contains\n# the largest square number that is smaller than N and the number of moves needed\n# to reach the square that contains N from the square that contains the largest\n# square number that is smaller than N.\n# Because Takahashi can only move right and down, it is enough to calculate the\n# minimum number of moves needed to reach a square that contains the largest\n# square number that is smaller than N.\n\n# Find the largest square number that is smaller than N.\nlargest_sq = int(math.floor(math.sqrt(N)))\n\n# Find the minimum number of moves needed to reach a square that contains the\n# largest square number that is smaller than N.\n# The minimum number of moves needed to reach a square that contains n is n - 1\n# because Takahashi can reach a square that contains n from a square that contains 1\n# in n - 1 moves.\nprint(largest_sq - 1 + N - largest_sq ** 2)"]