2022-04-09 23:49:21.288559 """
You are a coach at your local university. There are $n$ students under your supervision, the programming skill of the $i$-th student is $a_i$.

You have to form $k$ teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than $k$ (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than $5$. Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).

It is possible that some students not be included in any team at all.

Your task is to report the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 5000$) — the number of students and the maximum number of teams, correspondingly.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is a programming skill of the $i$-th student.


-----Output-----

Print one integer — the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.


-----Examples-----
Input
5 2
1 2 15 15 15

Output
5

Input
6 1
36 4 1 25 9 16

Output
2

Input
4 4
1 10 100 1000

Output
4
"""
2022-04-09 23:49:21.288589 --------------------------
2022-04-09 23:50:21.084433 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    # Each team must have at least one member.\n    # The number of teams is the number of students\n    # divided by the team size, rounded up.\n    # The team size is the number of students divided\n    # by the number of teams, rounded down.\n    num_teams = (n + k - 1) // k\n    team_size = n // k\n\n    # The number of teams that are one size larger\n    # than the team size is the remainder of n\n    # divided by the team size.\n    num_large_teams = n % k\n\n    # The number of teams that are one size smaller\n    # than the team size is the number of teams\n    # minus the number of large teams.\n    num_small_teams = num_teams - num_large_teams\n\n    # The sum of the largest team sizes is the sum\n    # of the smallest team sizes plus the number\n    # of large teams times 5.\n    largest_team_sum = team_size * num_small_teams + num_large_teams * (team_size + 1)\n\n    # The sum of the smallest team sizes is the sum\n    # of the smallest team sizes plus the number\n    # of large teams times 5.\n    smallest_team_sum = team_size * num_small_teams + num_large_teams * (team_size - 1)\n\n    # The largest team size is the team size plus one.\n    largest_team_size = team_size + 1\n\n    # The smallest team size is the team size minus one.\n    smallest_team_size = team_size - 1\n\n    # The largest team size is the team size plus one.\n    largest_team_size = team_size + 1\n\n    # The smallest team size is the team size minus one.\n    smallest_team_size = team_size - 1\n\n    # The largest teams are formed by taking the largest\n    # team size elements from the start of the sorted array.\n    largest_team_sum += sum(a[:largest_team_size * num_large_teams])\n\n    # The smallest teams are formed by taking the smallest\n    # team size elements from the end of the sorted array.\n    smallest_team_sum += sum(a[-smallest_team_size * num_small_teams:])\n\n    print(largest_team_sum if largest_team_sum >= smallest_team_sum else smallest_team_sum)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef get_max_students(students, num_teams):\n    students.sort()\n\n    max_students = 0\n    for team_size in range(1, len(students) + 1):\n        if num_teams < len(students) / team_size:\n            continue\n\n        total_students = 0\n        for i in range(0, len(students), team_size):\n            team = students[i:i + team_size]\n            if team[-1] - team[0] > 5:\n                continue\n\n            total_students += len(team)\n\n        max_students = max(max_students, total_students)\n\n    return max_students\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    students = [int(x) for x in input().split()]\n\n    print(get_max_students(students, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    skills = sorted(map(int, sys.stdin.readline().split()))\n\n    # If we have less teams than students, then we can't have a team with more than 1 student.\n    # So, the answer is the number of students.\n    if k < n:\n        print(n)\n        return\n\n    # If the difference between the highest and lowest skill is less than 5, then\n    # the answer is the number of students.\n    if skills[-1] - skills[0] < 5:\n        print(n)\n        return\n\n    # If the difference between the highest and lowest skill is more than 5, then\n    # the answer is the number of teams.\n    if skills[-1] - skills[0] > 5:\n        print(k)\n        return\n\n    # If we have the same number of teams as students, then we can have a team with all\n    # students. So, the answer is the number of students.\n    if n == k:\n        print(n)\n        return\n\n    # Otherwise, we have to find the maximum number of teams we can have, such that\n    # the difference between the highest and lowest skill is less than 5.\n    #\n    # To do this, we start from the smallest skill and find the number of teams we can\n    # have with this skill as the lowest skill. Then, we try the next-highest skill\n    # and find the number of teams we can have with this skill as the lowest skill.\n    # We repeat this until the difference between the lowest skill and the highest\n    # skill is 5.\n    #\n    # We keep track of the maximum number of teams we can have.\n    max_teams = 0\n    i = 0\n    while i < n:\n        num_teams = 1\n        j = i + 1\n        while j < n and skills[j] - skills[i] <= 5:\n            num_teams += 1\n            j += 1\n        if num_teams > max_teams:\n            max_teams = num_teams\n        i += 1\n\n    print(max_teams)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# Solution 1\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n\n# Solution 2\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 3\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 4\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 5\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 6\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 7\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 8\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 9\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 10\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, raw_input().split())\n    a = map(int, raw_input().split())\n    a.sort()\n    print a\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Solution\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n# sort the array\na.sort()\n\n# get minimum and maximum elements\nmin_elem = a[0]\nmax_elem = a[-1]\n\n# check if the minimum and maximum elements are within the threshold\nif max_elem - min_elem <= 5:\n    print(n)\nelse:\n    # get the middle elements\n    mid_elem = a[n//2]\n    mid_elem_2 = a[n//2 - 1]\n    if mid_elem - min_elem > 5:\n        print(n//2)\n    else:\n        print(n//2 + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    teams = [[a[0]]]\n    for i in range(1, n):\n        for j in range(len(teams)):\n            if a[i] <= teams[j][-1] + 5:\n                teams[j].append(a[i])\n                break\n            if j == len(teams) - 1:\n                teams.append([a[i]])\n                break\n    for i in range(len(teams)):\n        if len(teams[i]) > k:\n            teams[i] = teams[i][:k]\n    print(sum([len(x) for x in teams]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport itertools\n\ndef max_students_in_k_teams(skills, k):\n    if k == 1:\n        return 1\n\n    skills.sort()\n    n = len(skills)\n\n    # Generate the indices of all possible teams\n    team_idx = list(itertools.combinations(range(n), k))\n\n    # Compute the number of students in each team\n    team_size = []\n    for i in range(len(team_idx)):\n        team_size.append(len(team_idx[i]))\n\n    # Compute the maximum skill and minimum skill of each team\n    max_skills = []\n    min_skills = []\n    for i in range(len(team_idx)):\n        max_skills.append(max(skills[j] for j in team_idx[i]))\n        min_skills.append(min(skills[j] for j in team_idx[i]))\n\n    # Compute the difference between the maximum skill and minimum skill of each team\n    diff = []\n    for i in range(len(team_idx)):\n        diff.append(max_skills[i] - min_skills[i])\n\n    # Find all teams with difference of 5 or less\n    max_students = 0\n    for i in range(len(team_idx)):\n        if diff[i] <= 5:\n            max_students = max(max_students, team_size[i])\n\n    return max_students\n\n\nif __name__ == \"__main__\":\n    n, k = [int(s) for s in input().split()]\n    skills = [int(s) for s in input().split()]\n    max_students = max_students_in_k_teams(skills, k)\n    print(max_students)"
    }
  ],
  "created": 1649562561,
  "id": "cmpl-4vIrhugTEY0kJDCdYOsa3V4NwQCwb",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:50:21.085000 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    # Each team must have at least one member.\n    # The number of teams is the number of students\n    # divided by the team size, rounded up.\n    # The team size is the number of students divided\n    # by the number of teams, rounded down.\n    num_teams = (n + k - 1) // k\n    team_size = n // k\n\n    # The number of teams that are one size larger\n    # than the team size is the remainder of n\n    # divided by the team size.\n    num_large_teams = n % k\n\n    # The number of teams that are one size smaller\n    # than the team size is the number of teams\n    # minus the number of large teams.\n    num_small_teams = num_teams - num_large_teams\n\n    # The sum of the largest team sizes is the sum\n    # of the smallest team sizes plus the number\n    # of large teams times 5.\n    largest_team_sum = team_size * num_small_teams + num_large_teams * (team_size + 1)\n\n    # The sum of the smallest team sizes is the sum\n    # of the smallest team sizes plus the number\n    # of large teams times 5.\n    smallest_team_sum = team_size * num_small_teams + num_large_teams * (team_size - 1)\n\n    # The largest team size is the team size plus one.\n    largest_team_size = team_size + 1\n\n    # The smallest team size is the team size minus one.\n    smallest_team_size = team_size - 1\n\n    # The largest team size is the team size plus one.\n    largest_team_size = team_size + 1\n\n    # The smallest team size is the team size minus one.\n    smallest_team_size = team_size - 1\n\n    # The largest teams are formed by taking the largest\n    # team size elements from the start of the sorted array.\n    largest_team_sum += sum(a[:largest_team_size * num_large_teams])\n\n    # The smallest teams are formed by taking the smallest\n    # team size elements from the end of the sorted array.\n    smallest_team_sum += sum(a[-smallest_team_size * num_small_teams:])\n\n    print(largest_team_sum if largest_team_sum >= smallest_team_sum else smallest_team_sum)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:50:21.085075 REASON stop
2022-04-09 23:50:21.086750 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef get_max_students(students, num_teams):\n    students.sort()\n\n    max_students = 0\n    for team_size in range(1, len(students) + 1):\n        if num_teams < len(students) / team_size:\n            continue\n\n        total_students = 0\n        for i in range(0, len(students), team_size):\n            team = students[i:i + team_size]\n            if team[-1] - team[0] > 5:\n                continue\n\n            total_students += len(team)\n\n        max_students = max(max_students, total_students)\n\n    return max_students\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    students = [int(x) for x in input().split()]\n\n    print(get_max_students(students, k))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:50:21.086860 REASON stop
2022-04-09 23:50:21.087427 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    skills = sorted(map(int, sys.stdin.readline().split()))\n\n    # If we have less teams than students, then we can't have a team with more than 1 student.\n    # So, the answer is the number of students.\n    if k < n:\n        print(n)\n        return\n\n    # If the difference between the highest and lowest skill is less than 5, then\n    # the answer is the number of students.\n    if skills[-1] - skills[0] < 5:\n        print(n)\n        return\n\n    # If the difference between the highest and lowest skill is more than 5, then\n    # the answer is the number of teams.\n    if skills[-1] - skills[0] > 5:\n        print(k)\n        return\n\n    # If we have the same number of teams as students, then we can have a team with all\n    # students. So, the answer is the number of students.\n    if n == k:\n        print(n)\n        return\n\n    # Otherwise, we have to find the maximum number of teams we can have, such that\n    # the difference between the highest and lowest skill is less than 5.\n    #\n    # To do this, we start from the smallest skill and find the number of teams we can\n    # have with this skill as the lowest skill. Then, we try the next-highest skill\n    # and find the number of teams we can have with this skill as the lowest skill.\n    # We repeat this until the difference between the lowest skill and the highest\n    # skill is 5.\n    #\n    # We keep track of the maximum number of teams we can have.\n    max_teams = 0\n    i = 0\n    while i < n:\n        num_teams = 1\n        j = i + 1\n        while j < n and skills[j] - skills[i] <= 5:\n            num_teams += 1\n            j += 1\n        if num_teams > max_teams:\n            max_teams = num_teams\n        i += 1\n\n    print(max_teams)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:50:21.087531 REASON stop
2022-04-09 23:50:21.087970 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# Solution 1\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n\n# Solution 2\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 3\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 4\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 5\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 6\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 7\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 8\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 9\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)\n\n# Solution 10\nN, K = map(int, input().split())\nA = sorted(map(int, input().split()))\n\ncur = 0\nans = 0\n\nfor i in range(N):\n    if i > 0 and A[i] - A[i-1] > 5:\n        ans = max(ans, cur)\n        cur = 0\n    cur += 1\n\nans = max(ans, cur)\nprint(ans)"
}
2022-04-09 23:50:21.088079 REASON stop
2022-04-09 23:50:21.088800 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, raw_input().split())\n    a = map(int, raw_input().split())\n    a.sort()\n    print a\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:50:21.088972 REASON stop
2022-04-09 23:50:21.089644 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Solution\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n# sort the array\na.sort()\n\n# get minimum and maximum elements\nmin_elem = a[0]\nmax_elem = a[-1]\n\n# check if the minimum and maximum elements are within the threshold\nif max_elem - min_elem <= 5:\n    print(n)\nelse:\n    # get the middle elements\n    mid_elem = a[n//2]\n    mid_elem_2 = a[n//2 - 1]\n    if mid_elem - min_elem > 5:\n        print(n//2)\n    else:\n        print(n//2 + 1)"
}
2022-04-09 23:50:21.089740 REASON stop
2022-04-09 23:50:21.090446 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    teams = [[a[0]]]\n    for i in range(1, n):\n        for j in range(len(teams)):\n            if a[i] <= teams[j][-1] + 5:\n                teams[j].append(a[i])\n                break\n            if j == len(teams) - 1:\n                teams.append([a[i]])\n                break\n    for i in range(len(teams)):\n        if len(teams[i]) > k:\n            teams[i] = teams[i][:k]\n    print(sum([len(x) for x in teams]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:50:21.090546 REASON stop
2022-04-09 23:50:21.091188 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport itertools\n\ndef max_students_in_k_teams(skills, k):\n    if k == 1:\n        return 1\n\n    skills.sort()\n    n = len(skills)\n\n    # Generate the indices of all possible teams\n    team_idx = list(itertools.combinations(range(n), k))\n\n    # Compute the number of students in each team\n    team_size = []\n    for i in range(len(team_idx)):\n        team_size.append(len(team_idx[i]))\n\n    # Compute the maximum skill and minimum skill of each team\n    max_skills = []\n    min_skills = []\n    for i in range(len(team_idx)):\n        max_skills.append(max(skills[j] for j in team_idx[i]))\n        min_skills.append(min(skills[j] for j in team_idx[i]))\n\n    # Compute the difference between the maximum skill and minimum skill of each team\n    diff = []\n    for i in range(len(team_idx)):\n        diff.append(max_skills[i] - min_skills[i])\n\n    # Find all teams with difference of 5 or less\n    max_students = 0\n    for i in range(len(team_idx)):\n        if diff[i] <= 5:\n            max_students = max(max_students, team_size[i])\n\n    return max_students\n\n\nif __name__ == \"__main__\":\n    n, k = [int(s) for s in input().split()]\n    skills = [int(s) for s in input().split()]\n    max_students = max_students_in_k_teams(skills, k)\n    print(max_students)"
}
2022-04-09 23:50:21.091303 REASON stop
