["\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ndef find_min_pockets(a):\n    a.sort()\n    curr_pockets = 1\n    curr_pocket = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] in curr_pocket:\n            curr_pocket = [a[i]]\n            curr_pockets += 1\n        else:\n            curr_pocket.append(a[i])\n    return curr_pockets\n\nprint(find_min_pockets(a))", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    coins = map(int, sys.stdin.readline().split())\n    # print n, coins\n\n    coins.sort()\n    # print coins\n\n    pockets = [coins[0]]\n    for i in range(1, n):\n        if coins[i] != coins[i-1]:\n            pockets.append(coins[i])\n\n    print len(pockets)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    c = 0\n    for i in a:\n        if i in s:\n            c += 1\n            s = set()\n        s.add(i)\n    print(c + 1)\n\nmain()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(len(set(a)))\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\na = list(set(a))\nprint(len(a))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(a):\n    # sort the array\n    a.sort()\n    # loop over the array\n    # if the next value is the same as the current value, then increment the number of pockets\n    # otherwise, keep the number of pockets the same\n    pockets = 1\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            pockets += 1\n    return pockets\n\nprint(solve(a))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 1\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        ans += 1\n\nprint(ans)", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    coins = set(a)\n    print(len(coins))\n\n\nif __name__ == \"__main__\":\n    main()"]