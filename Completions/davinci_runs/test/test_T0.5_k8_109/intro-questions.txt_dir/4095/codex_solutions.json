["\n\nimport sys\nimport math\n\ndef get_median(nums, length):\n    if length % 2 == 0:\n        return (nums[length//2] + nums[length//2 - 1]) // 2\n    else:\n        return nums[length//2]\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    nums = list(map(int, sys.stdin.readline().split()))\n    nums.sort()\n    ans = 0\n    for i in range(n):\n        start = i\n        end = n\n        while start <= end:\n            mid = (start + end) // 2\n            median = get_median(nums[i:mid + 1], mid - i + 1)\n            if median == m:\n                ans += 1\n                break\n            elif median > m:\n                end = mid - 1\n            else:\n                start = mid + 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    \"\"\"\n    The main function contains the main logic of the program.\n    \"\"\"\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[(i + j) // 2] == m:\n                count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main(N, M, P):\n    # sort the array\n    P = sorted(P)\n    # get the median\n    median = P[(N-1)//2]\n    # count the number of instances of the median\n    count = P.count(median)\n    # get the number of pairs\n    pairs = count*(count-1)//2\n    print(pairs)\n\n\nif __name__ == '__main__':\n    N, M = map(int, input().split())\n    P = list(map(int, input().split()))\n    main(N, M, P)", "\n\ndef median(nums):\n    nums = sorted(nums)\n    if len(nums) % 2 == 1:\n        return nums[len(nums)//2]\n    else:\n        return nums[len(nums)//2 - 1]\n\ndef main():\n    n, m = map(int, input().split())\n    nums = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(nums[i:j+1]) == m:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()", "\n\n#submitted by thr3sh0ld\n#programming language: Python3\n\nn, m = map(int,input().split())\na = list(map(int,input().split()))\nb = [0]*n\nc = [0]*n\nfor i in range(n):\n    b[i] = a[i]\n    c[i] = a[i]\nb.sort()\nc.sort()\nc.reverse()\nans = 0\nfor i in range(n):\n    if(b[i]==m):\n        ans += i\n    if(c[i]==m):\n        ans += i\nprint(ans)", "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n\n\ndef read_int():\n    return int(stdin.readline())\n\n\ndef read_str():\n    return stdin.readline().strip()\n\n\ndef read_strs():\n    return list(map(str, stdin.readline().split()))\n\n\ndef is_odd(n):\n    return n % 2 == 1\n\n\ndef is_even(n):\n    return n % 2 == 0\n\n\ndef median(n):\n    if is_odd(n):\n        return (n + 1) // 2\n    else:\n        return n // 2\n\n\nn, m = read_ints()\narr = read_ints()\n\nleft_count = defaultdict(int)\nright_count = defaultdict(int)\n\nres = 0\n\nfor i, num in enumerate(arr):\n    left_count[num] += 1\n    right_count[arr[i]] += 1\n\n    if left_count[m] > median(i+1):\n        res += 1\n    if right_count[m] > median(n - i):\n        res += 1\n\nprint(res)", "\n\n#First solution\n\"\"\"\nn, m = map(int, input().split())\np = list(map(int, input().split()))\n\npairs = 0\nfor i in range(n):\n    for j in range(i+1, n+1):\n        if len(p[i:j])%2 == 0:\n            if p[i:j][len(p[i:j])//2-1] == m or p[i:j][len(p[i:j])//2] == m:\n                pairs += 1\n        else:\n            if p[i:j][len(p[i:j])//2] == m:\n                pairs += 1\n\nprint(pairs)\n\"\"\"\n\n#Second solution\nn, m = map(int, input().split())\np = list(map(int, input().split()))\n\nif len(p)%2 == 0:\n    median = p[len(p)//2-1]\nelse:\n    median = p[len(p)//2]\n\nif median == m:\n    print(n*(n+1)//2)\nelse:\n    left_count = 0\n    right_count = 0\n    for i in range(n):\n        if p[i] > median:\n            right_count += 1\n        elif p[i] < median:\n            left_count += 1\n    print(left_count*right_count)", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = Counter(p)\n    c_keys = sorted(c.keys())\n    c_values = sorted(c.values())\n    c_values = list(map(lambda x: x//2, c_values))\n\n    c_idx = 0\n    c_sum = 0\n    while c_sum < m:\n        c_sum += c_values[c_idx]\n        c_idx += 1\n\n    c_idx -= 1\n    c_sum -= c_values[c_idx]\n\n    ans = 0\n    for i in range(c_idx, n):\n        if c_keys[i] > m:\n            break\n        if c_keys[i] == m:\n            ans += c_values[i]**2\n\n    for i in range(c_idx):\n        if c_keys[i] >= m:\n            break\n        if c_keys[i] == m:\n            ans += c_values[i]**2\n\n    for i in range(c_idx):\n        for j in range(c_idx, n):\n            if c_keys[i] + c_keys[j] < 2*m:\n                ans += c_values[i]*c_values[j]\n            else:\n                break\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"]