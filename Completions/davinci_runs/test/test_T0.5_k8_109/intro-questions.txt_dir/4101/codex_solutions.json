["\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin:\n        lines.append(line)\n    n, m = map(int, lines[0].split())\n    matrix = [list(map(int, line.split())) for line in lines[1:]]\n    res = solve(matrix, n, m)\n    if res is None:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(res[0])\n        print(res[1])\n\ndef solve(matrix, n, m):\n    row_counts = [sum(row) for row in matrix]\n    col_counts = [sum([matrix[i][j] for i in range(n)]) for j in range(m)]\n    row_invert = [0 for _ in range(n)]\n    col_invert = [0 for _ in range(m)]\n    for i in range(n):\n        if row_counts[i] > m / 2:\n            row_invert[i] = 1\n    for j in range(m):\n        if col_counts[j] > n / 2:\n            col_invert[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if row_invert[i] ^ col_invert[j] != matrix[i][j]:\n                return None\n    return (\"\".join(map(str, row_invert)), \"\".join(map(str, col_invert)))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append([int(x) for x in sys.stdin.readline().split()])\n\nrow_inverted = [False for i in range(n)]\ncol_inverted = [False for i in range(m)]\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 1:\n            row_inverted[i] = not row_inverted[i]\n            col_inverted[j] = not col_inverted[j]\n\nfor i in range(n):\n    for j in range(m):\n        if row_inverted[i] and col_inverted[j]:\n            matrix[i][j] = 1\n        elif row_inverted[i] or col_inverted[j]:\n            matrix[i][j] = 0\n\nsorted_matrix = sorted([matrix[i][j] for i in range(n) for j in range(m)])\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != sorted_matrix[i * m + j]:\n            print(\"NO\")\n            sys.exit(0)\n\nprint(\"YES\")\nprint(\"\".join([str(int(x)) for x in row_inverted]))\nprint(\"\".join([str(int(x)) for x in col_inverted]))", "\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    row_invert = [0 for _ in range(n)]\n    column_invert = [0 for _ in range(m)]\n    for i in range(n):\n        if sum(a[i]) == m:\n            row_invert[i] = 1\n    for j in range(m):\n        if sum([a[i][j] for i in range(n)]) == n:\n            column_invert[j] = 1\n    if sum(row_invert) + sum(column_invert) != n + m:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in row_invert]))\n        print(\"\".join([str(x) for x in column_invert]))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = [list(map(int, sys.stdin.readline().split())) for i in range(n)]\n    r = ''\n    c = ''\n    for i in range(n):\n        if sum(a[i]) % 2 == 1:\n            r += '1'\n        else:\n            r += '0'\n    for j in range(m):\n        if sum(a[i][j] for i in range(n)) % 2 == 1:\n            c += '1'\n        else:\n            c += '0'\n    if r.count('1') + c.count('1') <= n + m - 1:\n        print('YES')\n        print(r)\n        print(c)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef is_sorted(matrix):\n    n, m = len(matrix), len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            if i == n - 1 and j == m - 1:\n                break\n            if matrix[i][j] > matrix[i][j + 1]:\n                return False\n    return True\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, sys.stdin.readline().split())))\n\n    rows = [0] * n\n    cols = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                continue\n            if matrix[i][j] < matrix[i - 1][j]:\n                rows[i] = 1\n                break\n\n    for j in range(m):\n        for i in range(n):\n            if j == 0:\n                continue\n            if matrix[i][j] < matrix[i][j - 1]:\n                cols[j] = 1\n                break\n\n    for i in range(n):\n        for j in range(m):\n            if i == n - 1 and j == m - 1:\n                break\n            if matrix[i][j] > matrix[i][j + 1]:\n                if rows[i] == 0:\n                    rows[i] = 1\n                else:\n                    print(\"NO\")\n                    return\n            if matrix[i][j] > matrix[i + 1][j]:\n                if cols[j] == 0:\n                    cols[j] = 1\n                else:\n                    print(\"NO\")\n                    return\n\n    print(\"YES\")\n    print(\"\".join(map(str, rows)))\n    print(\"\".join(map(str, cols)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    r = [0] * n\n    c = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                if i % 2 == 0:\n                    r[i] = 1 - r[i]\n                if j % 2 == 0:\n                    c[j] = 1 - c[j]\n            else:\n                if i % 2 == 1:\n                    r[i] = 1 - r[i]\n                if j % 2 == 1:\n                    c[j] = 1 - c[j]\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                if (i % 2 == 0 and r[i] == 0) or (i % 2 == 1 and r[i] == 1):\n                    if (j % 2 == 0 and c[j] == 0) or (j % 2 == 1 and c[j] == 1):\n                        print('NO')\n                        return\n            else:\n                if (i % 2 == 0 and r[i] == 1) or (i % 2 == 1 and r[i] == 0):\n                    if (j % 2 == 0 and c[j] == 1) or (j % 2 == 1 and c[j] == 0):\n                        print('NO')\n                        return\n\n    print('YES')\n    print(''.join(map(str, r)))\n    print(''.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    r = ''\n    c = ''\n    for i in range(n):\n        if sum(matrix[i]) > m // 2:\n            r += '1'\n        else:\n            r += '0'\n    for j in range(m):\n        if sum([matrix[i][j] for i in range(n)]) > n // 2:\n            c += '1'\n        else:\n            c += '0'\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] ^= int(r[i]) ^ int(c[j])\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > matrix[i][j - 1]:\n                return 'NO'\n    return 'YES\\n' + r + '\\n' + c\n\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\nprint(solve(matrix))", "\n\nn, m = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\nrow_inverted = []\ncol_inverted = []\n\nfor i in range(n):\n    row_inverted.append(0)\n\nfor i in range(m):\n    col_inverted.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if i != 0 and i != n - 1 and j != 0 and j != m - 1:\n            if matrix[i][j] == 1:\n                row_inverted[i] = 1\n                col_inverted[j] = 1\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n            if matrix[i][j] == 0:\n                row_inverted[i] = 1\n                col_inverted[j] = 1\n\nfor i in range(1, n - 1):\n    if row_inverted[i] == 1:\n        if matrix[i - 1][0] == 1 or matrix[i + 1][0] == 1:\n            row_inverted[i - 1] = 1\n            row_inverted[i + 1] = 1\n\nfor j in range(1, m - 1):\n    if col_inverted[j] == 1:\n        if matrix[0][j - 1] == 1 or matrix[0][j + 1] == 1:\n            col_inverted[j - 1] = 1\n            col_inverted[j + 1] = 1\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != (row_inverted[i] ^ col_inverted[j]):\n            print(\"NO\")\n            exit(0)\n\nprint(\"YES\")\n\nfor i in range(n):\n    print(row_inverted[i], end='')\n\nprint()\n\nfor i in range(m):\n    print(col_inverted[i], end='')"]