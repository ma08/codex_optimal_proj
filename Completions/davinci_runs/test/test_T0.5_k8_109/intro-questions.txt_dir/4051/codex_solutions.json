["\n\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(n):\n    if a[i] == a[i-1] + 1:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")", "\n\nfrom sys import stdin, stdout\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = deque()\n    for i in a:\n        d.append(i)\n\n    p = 0\n    l = []\n    while d:\n        i = d.popleft()\n        if len(l) > 0 and l[-1] > i + 1:\n            p = 1\n            break\n        l.append(i)\n    \n    if p == 1:\n        stdout.write(\"NO\")\n    else:\n        stdout.write(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n# cook your dish here\n\nn = int(input())\na = list(map(int, input().split()))\n\nyes = True\n\nfor i in range(n-1):\n    if abs(a[i]-a[i+1]) >= 2:\n        yes = False\n        break\n\nif yes:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\t\n\t# Initialize a list of lists, each sublist containing the number of raviolis in a stack\n\tstacks = []\n\tfor i in range(n):\n\t\tstacks.append([a[i]])\n\t\n\t# Sort the stacks in descending order\n\tstacks.sort(key = lambda x: x[0], reverse = True)\n\t\n\t# Check if the raviolis will slide down and make the sorting wrong\n\tfor i in range(len(stacks)-1):\n\t\tif stacks[i][0] - stacks[i+1][0] > 1:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\n\tprint(\"YES\")\n\treturn\n\nmain()", "\n\ndef ravioli_sort(arr):\n\t# print(arr)\n\twhile len(arr) > 0:\n\t\tmax_height = max(arr)\n\t\tmax_index = arr.index(max_height)\n\t\tif max_index == len(arr)-1:\n\t\t\treturn \"NO\"\n\t\tif max_height - arr[max_index+1] >= 2:\n\t\t\treturn \"NO\"\n\t\tarr.pop(max_index)\n\treturn \"YES\"\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(ravioli_sort(arr))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif a[0] < a[1]:\n    for i in range(1, n-1):\n        if a[i] < a[i+1]:\n            continue\n        elif a[i] == a[i+1]:\n            if a[i] <= a[i-1]:\n                continue\n            else:\n                print(\"NO\")\n                break\n        elif a[i] - a[i+1] == 1 and a[i] >= a[i-1]:\n            continue\n        elif a[i] - a[i+1] > 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\nelif a[0] > a[1]:\n    for i in range(1, n-1):\n        if a[i] > a[i+1]:\n            continue\n        elif a[i] == a[i+1]:\n            if a[i] >= a[i-1]:\n                continue\n            else:\n                print(\"NO\")\n                break\n        elif a[i+1] - a[i] == 1 and a[i] <= a[i-1]:\n            continue\n        elif a[i+1] - a[i] > 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\nelse:\n    for i in range(1, n-1):\n        if a[i] == a[i+1]:\n            if a[i] == a[i-1]:\n                continue\n            else:\n                print(\"NO\")\n                break\n        elif a[i] < a[i+1]:\n            for j in range(i+1, n-1):\n                if a[j] < a[j+1]:\n                    continue\n                elif a[j] == a[j+1]:\n                    if a[j] <= a[j-1]:\n                        continue\n                    else:\n                        print(\"NO\")\n                        break\n                elif a[j] - a[j+1] == 1 and a[j] >= a[j-1]:\n                    continue\n                elif a[j] - a[j+1] > 1:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n            break\n        elif a[i] > a[i+1]:\n            for j in range(i+1, n-1):\n                if a[j] > a[j+1]:\n                    continue\n                elif a[j] == a[j+1]:\n                    if a[j] >= a[j-1]:\n                        continue\n                    else:\n                        print(\"NO\")\n                        break\n                elif a[j+1] - a[j] == 1 and a[j] <= a[j-1]:\n                    continue\n                elif a[j+1] - a[j] > 1:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n            break\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin\n    next(lines)\n    data = [int(x) for x in next(lines).split()]\n    if can_sort(data):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef can_sort(data):\n    if len(data) <= 2:\n        return True\n    else:\n        max_index = index_max(data)\n        current_max = data[max_index]\n        data = data[:max_index] + data[max_index+1:]\n        if len(data) > 2:\n            if data[-1] == current_max - 1:\n                if data[-2] == current_max - 2:\n                    return can_sort(data[:-2] + [current_max - 1])\n                else:\n                    return can_sort(data[:-1] + [current_max - 1])\n            else:\n                return can_sort(data)\n        else:\n            return data[0] == current_max - 1\n\ndef index_max(data):\n    max_index = 0\n    for i in range(len(data)):\n        if data[i] > data[max_index]:\n            max_index = i\n    return max_index\n\nif __name__ == '__main__':\n    main()", "\n\n\"\"\"\nThis is a simulation problem.\n\"\"\"\n\ndef is_sorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\ndef simulate(arr):\n    stack_arr = [[x] for x in arr]\n    sorted_arr = []\n    while len(stack_arr) > 0:\n        # find the tallest stack\n        tallest_stack = stack_arr[0]\n        tallest_stack_idx = 0\n        for i in range(1, len(stack_arr)):\n            if len(stack_arr[i]) > len(tallest_stack):\n                tallest_stack = stack_arr[i]\n                tallest_stack_idx = i\n        # remove the tallest stack\n        sorted_arr.append(len(tallest_stack))\n        stack_arr.pop(tallest_stack_idx)\n        # shift the remaining stacks to the left\n        for i in range(len(stack_arr)):\n            if len(stack_arr[i]) > 0 and len(stack_arr[i]) < len(stack_arr[i - 1]):\n                stack_arr[i - 1].append(stack_arr[i].pop())\n    return sorted_arr\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if is_sorted(simulate(arr)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"]