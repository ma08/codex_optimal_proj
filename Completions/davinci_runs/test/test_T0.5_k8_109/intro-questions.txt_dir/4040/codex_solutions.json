["", "\n\nimport sys\n\ndef main():\n    n,m,d = map(int, sys.stdin.readline().strip().split(' '))\n    c = map(int, sys.stdin.readline().strip().split(' '))\n    print n,m,d\n    print c\n    if len(c) != m:\n        print \"Invalid input\"\n        return\n    # Construct the river\n    river = [0] * n\n    left = 0\n    right = 0\n    for i in xrange(m):\n        if left + c[i] > n:\n            print \"Invalid input\"\n            return\n        river[left:left+c[i]] = [i+1] * c[i]\n        left += c[i]\n    print river\n    # Construct the graph\n    graph = {}\n    for i in xrange(n):\n        if river[i] == 0:\n            continue\n        for j in xrange(1, d+1):\n            if i+j >= n:\n                break\n            if river[i+j] == 0:\n                continue\n            if river[i] not in graph:\n                graph[river[i]] = {}\n            if river[i+j] not in graph[river[i]]:\n                graph[river[i]][river[i+j]] = 0\n            graph[river[i]][river[i+j]] += 1\n    print graph\n    # Find the path\n    path = []\n    while m > 0:\n        if 1 not in graph:\n            print \"NO\"\n            return\n        path.append(1)\n        m -= 1\n        while path[-1] in graph and len(graph[path[-1]]) > 0:\n            path.append(graph[path[-1]].keys()[0])\n            graph[path[-2]][path[-1]] -= 1\n            if graph[path[-2]][path[-1]] == 0:\n                del graph[path[-2]][path[-1]]\n        if len(path) > 1:\n            if path[-2] in graph and path[-1] in graph[path[-2]]:\n                graph[path[-2]][path[-1]] += 1\n            else:\n                graph[path[-2]] = {path[-1]:1}\n        path = path[:-1]\n    print \"YES\"\n    print ' '.join(map(str, path))\n\nif __name__ == '__main__':\n    main()", "\n\nn,m,d=map(int,input().split())\nc=list(map(int,input().split()))\n\n# n,m,d=10,1,11\n# c=[1]\n\n# n,m,d=7,3,2\n# c=[1,2,1]\n\n# n,m,d=10,1,5\n# c=[2]\n\ndef ispossible(n,m,d,c):\n\tif m==1:\n\t\tif c[0]<=d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\tif m==2:\n\t\t\tif c[0]+c[1]<=d:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\tif c[0]+c[1]<=d:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\nif ispossible(n,m,d,c):\n\tprint('YES')\n\ta=[0]*(n)\n\tfor i in range(m):\n\t\tfor j in range(c[i]):\n\t\t\ta[j]=i+1\n\tprint(*a)\nelse:\n\tprint('NO')", "\n\nimport sys\n\ndef main():\n    n, m, d = [int(x) for x in sys.stdin.readline().strip().split()]\n    c = [int(x) for x in sys.stdin.readline().strip().split()]\n    assert(len(c) == m)\n    assert(sum(c) <= n)\n    assert(1 <= n <= 1000)\n    assert(1 <= m <= n)\n    assert(1 <= d <= 1000)\n    for i in range(m):\n        assert(1 <= c[i] <= n)\n    print(\"YES\")\n    print(\"0 \" * n)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Solution \n\n#!/usr/bin/python\n\nn, m, d = map(int, raw_input().split())\nc = map(int, raw_input().split())\n\nif sum(c) > n:\n    print \"NO\"\n    exit()\n\nif d == 1:\n    print \"YES\"\n    print \" \".join(map(str, [0] * (n + 2)))\n    exit()\n\ndef solve(n, m, d, c):\n    p = [0] * (n + 2)\n    p[0] = -1\n    p[n + 1] = -1\n    pos = 1\n    for i in range(m):\n        for j in range(c[i]):\n            p[pos] = i + 1\n            pos += 1\n    for i in range(n + 2):\n        if p[i] == 0:\n            p[i] = -1\n    return p\n\np = solve(n, m, d, c)\n\nans = []\nfor i in range(n + 2):\n    ans.append(p[i])\n\nfor i in range(n + 2):\n    if p[i] > 0:\n        if p[i - 1] == 0 and i - 1 >= 0:\n            ans[i - 1] = p[i]\n        elif p[i + 1] == 0 and i + 1 <= n + 1:\n            ans[i + 1] = p[i]\n\nif -1 in ans:\n    print \"NO\"\nelse:\n    print \"YES\"\n    print \" \".join(map(str, ans))", "\n\nimport sys\n\ndef main():\n  lines = [line.strip() for line in sys.stdin]\n  n, m, d = [int(x) for x in lines[0].split()]\n  c = [int(x) for x in lines[1].split()]\n  if (sum(c) > n):\n    print('NO')\n    return\n  for i in range(1, m):\n    if (c[i] > d):\n      print('NO')\n      return\n  a = [0 for x in range(n)]\n  for i in range(m):\n    j = 0\n    while (c[i] > 0):\n      a[j] = i + 1\n      c[i] -= 1\n      j += 1\n  print('YES')\n  print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n  main()", "\n\n# cook your dish here\nn,m,d = map(int,input().split())\nc = list(map(int,input().split()))\n\n# print(n,m,d)\n# print(c)\n\n# check if the sum of c is less than n\nif sum(c) > n:\n    print(\"NO\")\n    exit()\n\n# check if d is less than n\nif d > n:\n    print(\"YES\")\n    print(\"0 \"*n)\n    exit()\n\n# check if d is less than or equal to n-m\nif d <= n-m:\n    print(\"YES\")\n    print(\"0 \"*d+\"1 \"*c[0]+\"0 \"*(n-d-c[0]))\n    exit()\n\n# check if d is more than n-m\nif d > n-m:\n    print(\"NO\")\n    exit()"]