["\n\nfrom sys import stdin\nfrom collections import Counter\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\ncnt = Counter(a)\n\nif len(cnt) == 1:\n    print(n)\n    for i in range(1, n+1):\n        print(i, i)\nelse:\n    print(1)\n    print(1, n)", "\n\ndef solution(arr):\n    pass", "\n\n# Solution\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = [0] * (n + 1)\nfor i in range(n):\n    s[i + 1] = s[i] + a[i]\n\nd = {}\nfor i in range(n + 1):\n    for j in range(i + 1, n + 1):\n        d[s[j] - s[i]] = d.get(s[j] - s[i], []) + [(i, j)]\n\nans = []\nfor i in range(n + 1):\n    for j in range(i + 1, n + 1):\n        if s[j] - s[i] in d:\n            for x in d[s[j] - s[i]]:\n                if x[1] <= i or x[0] >= j:\n                    ans.append((i, j))\nans = sorted(list(set(ans)))\nprint(len(ans))\nfor x in ans:\n    print(*x)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][i] = a[i - 1]\n\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i == j:\n            continue\n        dp[i][j] = dp[i][j - 1] + a[j - 1]\n\n# print(dp)\n\n# dp[i][j] = k\n# k - sum of elements from i to j\n# dp[i][j] = dp[i][j - 1] + a[j - 1]\n\ndp2 = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp2[i][i] = 1\n\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i == j:\n            continue\n        dp2[i][j] = dp2[i][j - 1]\n\n# print(dp2)\n\n# dp2[i][j] = k\n# k - number of blocks from i to j\n# dp2[i][j] = dp2[i][j - 1]\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        for k in range(i, j):\n            if dp[i][k] == dp[k + 1][j]:\n                dp2[i][j] = max(dp2[i][j], dp2[i][k] + dp2[k + 1][j])\n\n# print(dp2)\n\n# dp2[i][j] = k\n# k - max number of blocks from i to j\n# dp2[i][j] = max(dp2[i][j], dp2[i][k] + dp2[k + 1][j])\n\n# print(dp2)\n\nprint(dp2[1][n])\n\ndp3 = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp3[i][i] = 1\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        for k in range(i, j):\n            if dp[i][k] == dp[k + 1][j]:\n                if dp2[i][j] == dp2[i][k] + dp2[k + 1][j]:\n                    dp3[i][j] = max(dp3[i][j], dp3[i][k] + dp3[k + 1][j])\n\n# print(dp3)\n\n# dp3[i][j] = k\n# k - number of ways to get max number of blocks from i to j\n# dp3[i][j] = max(dp3[i][j], dp3[i][k] + dp3[k + 1][j])\n\n# print(dp3)\n\n# print(dp3)\n\ndef print_blocks(i, j):\n    if i == j:\n        print(i, i)\n        return\n    for k in range(i, j):\n        if dp[i][k] == dp[k + 1][j] and dp3[i][j] == dp3[i][k] + dp3[k + 1][j]:\n            print_blocks(i, k)\n            print_blocks(k + 1, j)\n            return\n\nprint_blocks(1, n)", "\n\ndef find_blocks(a):\n    n = len(a)\n    k = 1\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if a[i] == a[j] and l[i] < l[j] + 1:\n                l[i] = l[j] + 1\n                r[i] = j\n        if l[i] > l[k]:\n            k = i\n    print(l[k])\n    while k >= 0:\n        print(k+1, r[k]+1)\n        k = r[k]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    find_blocks(a)", "\n\ndef solution(n, a):\n    sum = 0\n    s = set()\n    for i in range(n):\n        sum += a[i]\n        s.add(sum)\n        if sum == 0:\n            return n\n    if sum % (n-1) == 0:\n        return n-1\n    return len(s)\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(n, a))", "\n\ndef maxBlock(n, a):\n    pass\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    maxBlock(n, a)", "\n\ndef solve(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    for i in range(1,n+1):\n        dp[i] = dp[i-1] + arr[i-1]\n    dp = set(dp)\n    # print(dp)\n    dp = list(dp)\n    dp.sort()\n    # print(dp)\n    dp2 = {}\n    for i in range(len(dp)):\n        dp2[dp[i]] = i\n    # print(dp2)\n    dp3 = [0]*(n+1)\n    for i in range(1,n+1):\n        dp3[i] = dp2[dp3[i-1] + arr[i-1]]\n    # print(dp3)\n    dp4 = [0]*(n+1)\n    ans = []\n    for i in range(1,n+1):\n        dp4[i] = dp4[i-1]\n        if dp3[i] != dp3[i-1]:\n            dp4[i] += 1\n            ans.append([i,i])\n    # print(dp4)\n    # print(dp4[-1])\n    # print(ans)\n    dp5 = [0]*(n+1)\n    for i in range(1,n+1):\n        dp5[i] = dp5[i-1]\n        if dp3[i] != dp3[i-1]:\n            dp5[i] += 1\n    # print(dp5)\n\n    dp6 = [0]*(n+1)\n    for i in range(1,n+1):\n        dp6[i] = dp6[i-1]\n        if dp5[i] == dp4[i]:\n            dp6[i] += 1\n    # print(dp6)\n    # print(dp6[-1])\n    # print(ans)\n\n    dp7 = [0]*(n+1)\n    for i in range(1,n+1):\n        dp7[i] = dp7[i-1]\n        if dp6[i] == dp6[i-1]:\n            dp7[i] += 1\n    # print(dp7)\n    # print(dp7[-1])\n    # print(ans)\n\n    print(dp7[-1])\n    for i in range(dp7[-1]):\n        print(ans[i][0],ans[i][1])\n\n\nn = int(input())\narr = list(map(int,input().split()))\nsolve(arr)"]