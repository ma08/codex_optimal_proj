["\n\nimport sys\nimport heapq\n\nclass Node:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n        self.len = r - l\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.l < other.l\n\n    def __eq__(self, other):\n        return self.l == other.l\n\ndef build(segments):\n    if len(segments) == 0:\n        return None\n\n    segments.sort()\n\n    mid = len(segments) // 2\n    node = segments[mid]\n\n    node.left = build(segments[:mid])\n    node.right = build(segments[mid+1:])\n\n    return node\n\ndef get_max_len(root):\n    if root is None:\n        return 0\n\n    if root.left is None and root.right is None:\n        return root.len\n\n    left_len = right_len = 0\n    if root.left is not None:\n        left_len = get_max_len(root.left)\n\n    if root.right is not None:\n        right_len = get_max_len(root.right)\n\n    return max(left_len, right_len)\n\ndef solve(segments):\n    root = build(segments)\n    return get_max_len(root)\n\ndef main():\n    n = int(input())\n\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split(' '))\n        segments.append(Node(l, r))\n\n    print(solve(segments))\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\n# sort by left and right\nsegments = sorted(segments, key=lambda x: x[0])\nsegments = sorted(segments, key=lambda x: x[1])\n\n# find the maximum length of the intersection of all segments\nmax_length = segments[0][1] - segments[0][0]\nfor i in range(1, n):\n    if segments[i][0] <= max_length:\n        max_length = segments[i][1] - segments[i][0]\n    else:\n        max_length = segments[i][0] - segments[i - 1][1]\n\n# find the maximum length of the intersection of all segments - 1\nmax_length_1 = 0\nfor i in range(n):\n    if i == 0:\n        length = segments[i + 1][1] - segments[i + 1][0]\n    elif i == n - 1:\n        length = segments[i - 1][1] - segments[i - 1][0]\n    else:\n        length = max(segments[i - 1][1] - segments[i - 1][0], segments[i + 1][1] - segments[i + 1][0])\n    if length > max_length_1:\n        max_length_1 = length\n\nprint(max_length_1)", "\n\n\ndef main():\n    n = int(input())\n    lines = [list(map(int, input().split())) for _ in range(n)]\n    lines.sort()\n\n    # find the maximum length of the intersection\n    # if we remove the first segment\n    max_length = lines[1][1] - lines[1][0]\n    for i in range(2, n):\n        if lines[i][0] <= lines[1][1]:\n            max_length = max(max_length, lines[i][1] - lines[1][0])\n\n    # find the maximum length of the intersection\n    # if we remove the last segment\n    max_length = max(max_length, lines[n - 2][1] - lines[n - 2][0])\n    for i in range(n - 3, -1, -1):\n        if lines[i][1] >= lines[n - 2][0]:\n            max_length = max(max_length, lines[n - 2][1] - lines[i][0])\n\n    print(max_length)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\n\ndef main():\n    n = int(input())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort()\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans = max(ans, segments[i][1] - segments[i + 1][0])\n        elif i == n - 1:\n            ans = max(ans, segments[i - 1][1] - segments[i][0])\n        else:\n            ans = max(ans, segments[i - 1][1] - segments[i + 1][0])\n            ans = max(ans, segments[i][1] - segments[i + 1][0])\n            ans = max(ans, segments[i - 1][1] - segments[i][0])\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\nsegments = []\n\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nsegments.sort(key=lambda x: x[0])\n\nlengths = []\nfor i in range(n):\n    if segments[i][0] <= segments[i-1][1]:\n        lengths.append(segments[i][1] - segments[i-1][0])\n    else:\n        lengths.append(segments[i][1] - segments[i][0])\n\nprint(max(lengths))", "\n\n# n = int(input())\n# l = []\n# for i in range(n):\n#     l.append(list(map(int, input().split())))\n# l.sort()\n#\n# max_inter = 0\n# for i in range(n):\n#     if i == 0:\n#         r = l[i][1]\n#         while i+1 < n and l[i+1][0] <= r:\n#             r = max(r, l[i+1][1])\n#             i += 1\n#         max_inter = max(max_inter, r-l[0][0])\n#     elif i == n-1:\n#         l_ = l[i][0]\n#         while i-1 >= 0 and l[i-1][1] >= l_:\n#             l_ = min(l_, l[i-1][0])\n#             i -= 1\n#         max_inter = max(max_inter, l[-1][1]-l_)\n#     else:\n#         l_ = l[i][0]\n#         r = l[i][1]\n#         while i-1 >= 0 and l[i-1][1] >= l_:\n#             l_ = min(l_, l[i-1][0])\n#             i -= 1\n#         while i+1 < n and l[i+1][0] <= r:\n#             r = max(r, l[i+1][1])\n#             i += 1\n#         max_inter = max(max_inter, r-l_)\n#\n# print(max_inter)\n\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\nl.sort()\n\nmax_inter = 0\nfor i in range(n):\n    if i == 0:\n        r = l[i][1]\n        while i+1 < n and l[i+1][0] <= r:\n            r = max(r, l[i+1][1])\n            i += 1\n        max_inter = max(max_inter, r-l[0][0])\n    elif i == n-1:\n        l_ = l[i][0]\n        while i-1 >= 0 and l[i-1][1] >= l_:\n            l_ = min(l_, l[i-1][0])\n            i -= 1\n        max_inter = max(max_inter, l[-1][1]-l_)\n    else:\n        l_ = l[i][0]\n        r = l[i][1]\n        while i-1 >= 0 and l[i-1][1] >= l_:\n            l_ = min(l_, l[i-1][0])\n            i -= 1\n        while i+1 < n and l[i+1][0] <= r:\n            r = max(r, l[i+1][1])\n            i += 1\n        max_inter = max(max_inter, r-l_)\n\nprint(max_inter)", "\n\n\ndef main():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort(key=lambda x: x[1])\n    ans = l[0][1] - l[0][0]\n    for i in range(1, n):\n        if l[i][1] - l[i][0] > ans:\n            ans = l[i][1] - l[i][0]\n        if l[i][1] - l[i][0] < l[i][1] - l[i - 1][0]:\n            ans = l[i][1] - l[i - 1][0]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"]