2022-04-09 23:16:33.576735 """
Vova's house is an array consisting of $n$ elements (yeah, this is the first problem, I think, where someone lives in the array). There are heaters in some positions of the array. The $i$-th element of the array is $1$ if there is a heater in the position $i$, otherwise the $i$-th element of the array is $0$.

Each heater has a value $r$ ($r$ is the same for all heaters). This value means that the heater at the position $pos$ can warm up all the elements in range $[pos - r + 1; pos + r - 1]$.

Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. 

Vova's target is to warm up the whole house (all the elements of the array), i.e. if $n = 6$, $r = 2$ and heaters are at positions $2$ and $5$, then Vova can warm up the whole house if he switches all the heaters in the house on (then the first $3$ elements will be warmed up by the first heater and the last $3$ elements will be warmed up by the second heater).

Initially, all the heaters are off.

But from the other hand, Vova didn't like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater.

Your task is to find this number of heaters or say that it is impossible to warm up the whole house.


-----Input-----

The first line of the input contains two integers $n$ and $r$ ($1 \le n, r \le 1000$) — the number of elements in the array and the value of heaters.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 1$) — the Vova's house description.


-----Output-----

Print one integer — the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.


-----Examples-----
Input
6 2
0 1 1 0 0 1

Output
3

Input
5 3
1 0 0 0 1

Output
2

Input
5 10
0 0 0 0 0

Output
-1

Input
10 3
0 0 1 1 0 1 0 0 0 1

Output
3



-----Note-----

In the first example the heater at the position $2$ warms up elements $[1; 3]$, the heater at the position $3$ warms up elements $[2, 4]$ and the heater at the position $6$ warms up elements $[5; 6]$ so the answer is $3$.

In the second example the heater at the position $1$ warms up elements $[1; 3]$ and the heater at the position $5$ warms up elements $[3; 5]$ so the answer is $2$.

In the third example there are no heaters so the answer is -1.

In the fourth example the heater at the position $3$ warms up elements $[1; 5]$, the heater at the position $6$ warms up elements $[4; 8]$ and the heater at the position $10$ warms up elements $[8; 10]$ so the answer is $3$.
"""
2022-04-09 23:16:33.576764 --------------------------
2022-04-09 23:17:09.006980 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    n, r = map(int, input().split())\n    arr = list(map(int, input().split()))\n    heater = 0\n    heater_arr = []\n    for i in range(n):\n        if arr[i] == 1:\n            heater_arr.append(i+1)\n\n    if heater_arr == []:\n        print(-1)\n    else:\n        i = 0\n        while i < len(heater_arr):\n            if i == 0:\n                if heater_arr[i] - 1 > r:\n                    heater += 1\n                    i += 1\n                else:\n                    heater += 1\n                    i += 1\n            else:\n                if heater_arr[i] - heater_arr[i-1] > 2*r:\n                    heater += 1\n                    i += 1\n                else:\n                    i += 1\n        print(heater)\n\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    # First check if there are any heaters at all\n    if sum(house) == 0:\n        print(-1)\n        return\n\n    # Next check if we can just turn all the heaters on\n    if sum(house) + 2*r - 1 == n:\n        print(n)\n        return\n\n    # Now check if we can warm up the house\n    # If we can't, return -1\n    # If we can, return the minimum number of heaters we need to turn on\n    count = 0\n    for i in range(n):\n        if house[i] == 1:\n            count += 1\n            i += 2*r - 1\n    if count < n:\n        print(-1)\n        return\n    else:\n        # Now we know we can warm up the house\n        # We need to turn on heaters at the first and last positions\n        # Then we need to turn on a heater at each position that is not warmed up by the previous heater\n        # We know we can warm up the house, so we know all the positions in between will be warmed up\n        # The minimum number of heaters we need to turn on is the number of intervals between heaters + 1\n        # The +1 is for the first and last positions\n        count = 1\n        for i in range(n):\n            if house[i] == 1:\n                count += 1\n                i += 2*r - 1\n        print(count)\n        return\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef heaters(n, r, a):\n    if sum(a) == 0:\n        return -1\n\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == 1:\n            i += 2*r - 1\n        else:\n            count += 1\n            i += 2*r - 1\n    return count\n\nprint(heaters(n, r, a))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = 0\n    warmed_up = []\n    for i in range(len(house)):\n        if house[i] == 1:\n            warmed_up.extend(range(i-r+1, i+r))\n    warmed_up = set(warmed_up)\n    if len(warmed_up) == n:\n        print(sum(house))\n    else:\n        print(-1)\n\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    # read input\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # find heaters and unheated positions\n    heaters = [i for i in range(n) if a[i]]\n    unheated = [i for i in range(n) if not a[i]]\n\n    # find the minimum number of heaters needed to warm up the whole house\n    ans = 0\n    for pos in unheated:\n        # find the closest heater to the left\n        left = 0\n        right = len(heaters) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if heaters[mid] < pos:\n                left = mid + 1\n            else:\n                right = mid\n        if heaters[left] >= pos:\n            left -= 1\n\n        # find the closest heater to the right\n        left = 0\n        right = len(heaters) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if heaters[mid] <= pos:\n                left = mid + 1\n            else:\n                right = mid\n\n        # if the closest heaters cannot warm up the position, add a new heater\n        if left >= len(heaters) or heaters[left] > pos + r - 1:\n            ans += 1\n            heaters.insert(left, pos)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            j = i + 1\n            while j < n and a[j] == 0:\n                j += 1\n            if j == n:\n                ans = -1\n                break\n            ans += 1\n            i = j + r - 1\n        else:\n            i += r\n    print(ans)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = 0\n    for i in range(n):\n        if house[i] == 1:\n            heaters += 1\n            for j in range(i-r+1, i+r):\n                if j >= 0 and j < n:\n                    house[j] = 2\n    if 1 in house:\n        print(-1)\n    else:\n        print(heaters)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        j = i - 1\n        while j >= 0 and i - j <= r - 1:\n            if a[j] == 1:\n                ans += 1\n                break\n            j -= 1\n        j = i + 1\n        while j < n and j - i <= r - 1:\n            if a[j] == 1:\n                ans += 1\n                break\n            j += 1\n        if j == n and j - i > r - 1:\n            print(-1)\n            exit()\n\nprint(ans)"
    }
  ],
  "created": 1649560593,
  "id": "cmpl-4vILxw8pDx80MWC0G6G6xWzzJP9XD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:17:09.007301 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    n, r = map(int, input().split())\n    arr = list(map(int, input().split()))\n    heater = 0\n    heater_arr = []\n    for i in range(n):\n        if arr[i] == 1:\n            heater_arr.append(i+1)\n\n    if heater_arr == []:\n        print(-1)\n    else:\n        i = 0\n        while i < len(heater_arr):\n            if i == 0:\n                if heater_arr[i] - 1 > r:\n                    heater += 1\n                    i += 1\n                else:\n                    heater += 1\n                    i += 1\n            else:\n                if heater_arr[i] - heater_arr[i-1] > 2*r:\n                    heater += 1\n                    i += 1\n                else:\n                    i += 1\n        print(heater)\n\n\nmain()"
}
2022-04-09 23:17:09.007341 REASON stop
2022-04-09 23:17:09.008412 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    # First check if there are any heaters at all\n    if sum(house) == 0:\n        print(-1)\n        return\n\n    # Next check if we can just turn all the heaters on\n    if sum(house) + 2*r - 1 == n:\n        print(n)\n        return\n\n    # Now check if we can warm up the house\n    # If we can't, return -1\n    # If we can, return the minimum number of heaters we need to turn on\n    count = 0\n    for i in range(n):\n        if house[i] == 1:\n            count += 1\n            i += 2*r - 1\n    if count < n:\n        print(-1)\n        return\n    else:\n        # Now we know we can warm up the house\n        # We need to turn on heaters at the first and last positions\n        # Then we need to turn on a heater at each position that is not warmed up by the previous heater\n        # We know we can warm up the house, so we know all the positions in between will be warmed up\n        # The minimum number of heaters we need to turn on is the number of intervals between heaters + 1\n        # The +1 is for the first and last positions\n        count = 1\n        for i in range(n):\n            if house[i] == 1:\n                count += 1\n                i += 2*r - 1\n        print(count)\n        return\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 23:17:09.008520 REASON stop
2022-04-09 23:17:09.008917 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef heaters(n, r, a):\n    if sum(a) == 0:\n        return -1\n\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == 1:\n            i += 2*r - 1\n        else:\n            count += 1\n            i += 2*r - 1\n    return count\n\nprint(heaters(n, r, a))"
}
2022-04-09 23:17:09.009004 REASON stop
2022-04-09 23:17:09.009351 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = 0\n    warmed_up = []\n    for i in range(len(house)):\n        if house[i] == 1:\n            warmed_up.extend(range(i-r+1, i+r))\n    warmed_up = set(warmed_up)\n    if len(warmed_up) == n:\n        print(sum(house))\n    else:\n        print(-1)\n\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:17:09.009384 REASON stop
2022-04-09 23:17:09.009585 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    # read input\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # find heaters and unheated positions\n    heaters = [i for i in range(n) if a[i]]\n    unheated = [i for i in range(n) if not a[i]]\n\n    # find the minimum number of heaters needed to warm up the whole house\n    ans = 0\n    for pos in unheated:\n        # find the closest heater to the left\n        left = 0\n        right = len(heaters) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if heaters[mid] < pos:\n                left = mid + 1\n            else:\n                right = mid\n        if heaters[left] >= pos:\n            left -= 1\n\n        # find the closest heater to the right\n        left = 0\n        right = len(heaters) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if heaters[mid] <= pos:\n                left = mid + 1\n            else:\n                right = mid\n\n        # if the closest heaters cannot warm up the position, add a new heater\n        if left >= len(heaters) or heaters[left] > pos + r - 1:\n            ans += 1\n            heaters.insert(left, pos)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:17:09.009617 REASON stop
2022-04-09 23:17:09.009837 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            j = i + 1\n            while j < n and a[j] == 0:\n                j += 1\n            if j == n:\n                ans = -1\n                break\n            ans += 1\n            i = j + r - 1\n        else:\n            i += r\n    print(ans)\n\nmain()"
}
2022-04-09 23:17:09.009862 REASON stop
2022-04-09 23:17:09.010074 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = 0\n    for i in range(n):\n        if house[i] == 1:\n            heaters += 1\n            for j in range(i-r+1, i+r):\n                if j >= 0 and j < n:\n                    house[j] = 2\n    if 1 in house:\n        print(-1)\n    else:\n        print(heaters)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:17:09.010101 REASON stop
2022-04-09 23:17:09.010298 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        j = i - 1\n        while j >= 0 and i - j <= r - 1:\n            if a[j] == 1:\n                ans += 1\n                break\n            j -= 1\n        j = i + 1\n        while j < n and j - i <= r - 1:\n            if a[j] == 1:\n                ans += 1\n                break\n            j += 1\n        if j == n and j - i > r - 1:\n            print(-1)\n            exit()\n\nprint(ans)"
}
2022-04-09 23:17:09.010324 REASON stop
