["\n\ndef get_max_sum(n, m, k, a):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j <= m//2:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1][j-1])\n    return max(dp[n])\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(get_max_sum(n, m, k, a))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp[i][j] = a[i][j]\n        else:\n            if j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1]) + a[i][j]\n            elif j == m - 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + a[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + a[i][j]\n\nprint(dp[n - 1][m // 2])", "\n\n# Solution\n\nn, m, k = map(int, input().split())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\n# dp[i][j][k] = maximum sum of elements in the first i rows with j elements in the last row and the sum is divisible by k\ndp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m // 2 + 1):\n        for l in range(k):\n            dp[i][j][l] = dp[i - 1][j][l]\n            if j <= m - j:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j - 1][(l - matrix[i - 1][j - 1]) % k] + matrix[i - 1][j - 1])\n            if j <= m - j + 1:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j][(l - matrix[i - 1][m - j]) % k] + matrix[i - 1][m - j])\n\nprint(dp[n][m // 2][0])", "\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    dp = [[0] * (m // 2 + 1) for i in range(n + 1)]\n    for i in range(n):\n        for j in range(min(m // 2 + 1, m - j + 1)):\n            if j == 0:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - 1], dp[i][j - 1] + a[i][j * 2 - 1])\n    print(dp[n][m // 2])\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef sub_matrix_sum(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n    dp = [[[0 for _ in range(k)] for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i][j][r], dp[i][j - 1][r])\n                if j - 1 >= 0:\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i][j - 1][r] + matrix[i][j])\n                if i - 1 >= 0:\n                    dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r])\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i - 1][j][r] + matrix[i][j])\n    return dp[n - 1][m - 1][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(sub_matrix_sum(matrix, k))\n\n\nif __name__ == '__main__':\n    main()", "\nn,m,k = map(int,input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int,input().split())))\ndp = [[0] * (k+1) for _ in range(m+1)]\nfor i in range(n):\n    for j in range(1,m+1):\n        for l in range(k):\n            if j+1>m:\n                dp[j][l] = dp[j-1][l]\n            else:\n                dp[j][l] = max(dp[j-1][l],dp[j-1][(l-a[i][j-1]%k+k)%k]+a[i][j-1])\nprint(dp[m][0])", "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    f = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                f[i][j] = a[i][j]\n            else:\n                f[i][j] = a[i][j] + max(f[i - 1][j - 1] if j - 1 >= 0 else 0, f[i - 1][j] if j < m else 0, f[i - 1][j + 1] if j + 1 < m else 0)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if f[i][j] % k == 0:\n                ans = max(ans, f[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn,m,k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndef max_sum(a, k):\n    dp = [[0] * (m//2 + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m//2 + 1):\n            if j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m//2]\n\ndef max_sum_divisible(a, k):\n    max_sum = 0\n    for i in range(n):\n        for j in range(m//2 + 1):\n            max_sum += a[i][j]\n    for i in range(n):\n        for j in range(m//2 + 1):\n            for l in range(j+1, m//2 + 1):\n                max_sum = max(max_sum, max_sum(a[i][j:l], k))\n    return max_sum\n\nprint(max_sum_divisible(a, k))"]