2022-04-09 22:24:32.292118 """
You are given a matrix $a$ of size $n \times m$ consisting of integers.

You can choose no more than $\left\lfloor\frac{m}{2}\right\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.

Note that you can choose zero elements (and the sum of such set is $0$).


-----Input-----

The first line of the input contains three integers $n$, $m$ and $k$ ($1 \le n, m, k \le 70$) — the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \le a_{i, j} \le 70$).


-----Output-----

Print one integer — the maximum sum divisible by $k$ you can obtain.


-----Examples-----
Input
3 4 3
1 2 3 4
5 2 2 2
7 1 1 4

Output
24

Input
5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6

Output
56



-----Note-----

In the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.
"""
2022-04-09 22:24:32.292138 --------------------------
2022-04-09 22:25:02.112339 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    dp = [[0] * (m // 2 + 1) for i in range(n + 1)]\n    for i in range(n):\n        for j in range(min(m // 2 + 1, m - j + 1)):\n            if j == 0:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - 1], dp[i][j - 1] + a[i][j * 2 - 1])\n    print(dp[n][m // 2])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp[i][j] = a[i][j]\n        else:\n            if j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1]) + a[i][j]\n            elif j == m - 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + a[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + a[i][j]\n\nprint(dp[n - 1][m // 2])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef sub_matrix_sum(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n    dp = [[[0 for _ in range(k)] for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i][j][r], dp[i][j - 1][r])\n                if j - 1 >= 0:\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i][j - 1][r] + matrix[i][j])\n                if i - 1 >= 0:\n                    dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r])\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i - 1][j][r] + matrix[i][j])\n    return dp[n - 1][m - 1][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(sub_matrix_sum(matrix, k))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    f = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                f[i][j] = a[i][j]\n            else:\n                f[i][j] = a[i][j] + max(f[i - 1][j - 1] if j - 1 >= 0 else 0, f[i - 1][j] if j < m else 0, f[i - 1][j + 1] if j + 1 < m else 0)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if f[i][j] % k == 0:\n                ans = max(ans, f[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Solution\n\nn, m, k = map(int, input().split())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\n# dp[i][j][k] = maximum sum of elements in the first i rows with j elements in the last row and the sum is divisible by k\ndp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m // 2 + 1):\n        for l in range(k):\n            dp[i][j][l] = dp[i - 1][j][l]\n            if j <= m - j:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j - 1][(l - matrix[i - 1][j - 1]) % k] + matrix[i - 1][j - 1])\n            if j <= m - j + 1:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j][(l - matrix[i - 1][m - j]) % k] + matrix[i - 1][m - j])\n\nprint(dp[n][m // 2][0])"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef get_max_sum(n, m, k, a):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j <= m//2:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1][j-1])\n    return max(dp[n])\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(get_max_sum(n, m, k, a))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn,m,k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndef max_sum(a, k):\n    dp = [[0] * (m//2 + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m//2 + 1):\n            if j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m//2]\n\ndef max_sum_divisible(a, k):\n    max_sum = 0\n    for i in range(n):\n        for j in range(m//2 + 1):\n            max_sum += a[i][j]\n    for i in range(n):\n        for j in range(m//2 + 1):\n            for l in range(j+1, m//2 + 1):\n                max_sum = max(max_sum, max_sum(a[i][j:l], k))\n    return max_sum\n\nprint(max_sum_divisible(a, k))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\nn,m,k = map(int,input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int,input().split())))\ndp = [[0] * (k+1) for _ in range(m+1)]\nfor i in range(n):\n    for j in range(1,m+1):\n        for l in range(k):\n            if j+1>m:\n                dp[j][l] = dp[j-1][l]\n            else:\n                dp[j][l] = max(dp[j-1][l],dp[j-1][(l-a[i][j-1]%k+k)%k]+a[i][j-1])\nprint(dp[m][0])"
    }
  ],
  "created": 1649557472,
  "id": "cmpl-4vHXcEfraWJlEH41vwV4AHGbKCgHm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:25:02.112657 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    dp = [[0] * (m // 2 + 1) for i in range(n + 1)]\n    for i in range(n):\n        for j in range(min(m // 2 + 1, m - j + 1)):\n            if j == 0:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - 1], dp[i][j - 1] + a[i][j * 2 - 1])\n    print(dp[n][m // 2])\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:25:02.112774 REASON stop
2022-04-09 22:25:02.113083 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp[i][j] = a[i][j]\n        else:\n            if j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1]) + a[i][j]\n            elif j == m - 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + a[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + a[i][j]\n\nprint(dp[n - 1][m // 2])"
}
2022-04-09 22:25:02.113108 REASON stop
2022-04-09 22:25:02.113338 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef sub_matrix_sum(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n    dp = [[[0 for _ in range(k)] for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i][j][r], dp[i][j - 1][r])\n                if j - 1 >= 0:\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i][j - 1][r] + matrix[i][j])\n                if i - 1 >= 0:\n                    dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r])\n                    dp[i][j][(r + matrix[i][j]) % k] = max(dp[i][j][(r + matrix[i][j]) % k], dp[i - 1][j][r] + matrix[i][j])\n    return dp[n - 1][m - 1][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(sub_matrix_sum(matrix, k))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:25:02.113361 REASON stop
2022-04-09 22:25:02.124361 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    f = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                f[i][j] = a[i][j]\n            else:\n                f[i][j] = a[i][j] + max(f[i - 1][j - 1] if j - 1 >= 0 else 0, f[i - 1][j] if j < m else 0, f[i - 1][j + 1] if j + 1 < m else 0)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if f[i][j] % k == 0:\n                ans = max(ans, f[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:25:02.124470 REASON stop
2022-04-09 22:25:02.125184 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Solution\n\nn, m, k = map(int, input().split())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\n# dp[i][j][k] = maximum sum of elements in the first i rows with j elements in the last row and the sum is divisible by k\ndp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m // 2 + 1):\n        for l in range(k):\n            dp[i][j][l] = dp[i - 1][j][l]\n            if j <= m - j:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j - 1][(l - matrix[i - 1][j - 1]) % k] + matrix[i - 1][j - 1])\n            if j <= m - j + 1:\n                dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j][(l - matrix[i - 1][m - j]) % k] + matrix[i - 1][m - j])\n\nprint(dp[n][m // 2][0])"
}
2022-04-09 22:25:02.125297 REASON stop
2022-04-09 22:25:02.125903 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef get_max_sum(n, m, k, a):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j <= m//2:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1][j-1])\n    return max(dp[n])\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(get_max_sum(n, m, k, a))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:25:02.125971 REASON stop
2022-04-09 22:25:02.126191 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn,m,k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndef max_sum(a, k):\n    dp = [[0] * (m//2 + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m//2 + 1):\n            if j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m//2]\n\ndef max_sum_divisible(a, k):\n    max_sum = 0\n    for i in range(n):\n        for j in range(m//2 + 1):\n            max_sum += a[i][j]\n    for i in range(n):\n        for j in range(m//2 + 1):\n            for l in range(j+1, m//2 + 1):\n                max_sum = max(max_sum, max_sum(a[i][j:l], k))\n    return max_sum\n\nprint(max_sum_divisible(a, k))"
}
2022-04-09 22:25:02.126215 REASON stop
2022-04-09 22:25:02.126410 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\nn,m,k = map(int,input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int,input().split())))\ndp = [[0] * (k+1) for _ in range(m+1)]\nfor i in range(n):\n    for j in range(1,m+1):\n        for l in range(k):\n            if j+1>m:\n                dp[j][l] = dp[j-1][l]\n            else:\n                dp[j][l] = max(dp[j-1][l],dp[j-1][(l-a[i][j-1]%k+k)%k]+a[i][j-1])\nprint(dp[m][0])"
}
2022-04-09 22:25:02.126434 REASON stop
