["\n\nn, k = map(int, input().split())\ns = input()\n\ns = list(s)\n\ncost = 0\nfor i in range(n):\n    if s[i] == '1':\n        cost += i+1\n        j = i\n        while j-k >= 0:\n            j -= k\n            s[j] = '1'\n        j = i\n        while j+k < n:\n            j += k\n            s[j] = '1'\n\nfor i in range(n):\n    if s[i] == '0':\n        cost += i+1\n\nprint(cost)", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    router_array = []\n    router_cost = 0\n    direct_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            router_array.append(i)\n        else:\n            direct_cost += i+1\n    router_array.append(n)\n    router_array.insert(0, 0)\n    for i in range(len(router_array)-1):\n        router_cost += (router_array[i+1] - router_array[i]) * (router_array[i+1] - router_array[i] + 1) // 2\n    print(router_cost + direct_cost)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    s = [0] + [int(i) for i in s]\n    for i in range(1, n + 1):\n        s[i] += s[i - 1]\n    ans = 10**20\n    for i in range(1, n + 1):\n        if s[i] > k:\n            ans = min(ans, (s[i] - 1) * i - (s[i] - 1 - k) * (s[i] - 1 - k + 1) // 2)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n,k = map(int,input().split())\n    s = input()\n    routers = [i for i in range(n) if s[i] == '1']\n    ans = 0\n    if len(routers) == 0:\n        ans = sum(range(n))\n    else:\n        routers.append(n)\n        routers.insert(0,0)\n        for i in range(1,len(routers)):\n            ans += min(routers[i] - routers[i-1],routers[i] - routers[i-1] - 1)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef minCost(n, k, s):\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i + 1\n        else:\n            if i - k >= 0 and s[i - k] == '1':\n                cost += i + 1\n            elif i + k < n and s[i + k] == '1':\n                cost += i + 1\n            else:\n                cost += i + 1\n                if i + 1 < n and s[i + 1] == '1':\n                    s[i + 1] = '0'\n    return cost\n\n\nn, k = map(int, input().split())\ns = list(input())\nprint(minCost(n, k, s))", "\n\ndef solve(rooms, k, s):\n    cost = 0\n    routers = 0\n    for i in range(rooms):\n        if s[i] == '1':\n            routers += 1\n        elif i > 0 and s[i-1] == '1':\n            routers -= 1\n        if i >= k and s[i-k] == '1':\n            routers += 1\n        if routers == 0:\n            cost += i+1\n    return cost\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))", "\n\nimport sys\n\ndef main():\n    # read input\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    # find the number of routers needed\n    routers_needed = 0\n    for i in range(n):\n        if s[i] == '0' and i + 1 > k:\n            routers_needed += 1\n    # find the minimum cost\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += min(i + 1, n - i, n - routers_needed)\n        else:\n            cost += i + 1\n    print(cost)\n\nif __name__ == '__main__':\n    main()"]