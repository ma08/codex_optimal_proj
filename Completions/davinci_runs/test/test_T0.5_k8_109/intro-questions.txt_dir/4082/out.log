2022-04-09 23:35:49.668333 """
You are given an array $a$ consisting of $n$ integers.

You can remove at most one element from this array. Thus, the final length of the array is $n-1$ or $n$.

Your task is to calculate the maximum possible length of the strictly increasing contiguous subarray of the remaining array.

Recall that the contiguous subarray $a$ with indices from $l$ to $r$ is $a[l \dots r] = a_l, a_{l + 1}, \dots, a_r$. The subarray $a[l \dots r]$ is called strictly increasing if $a_l < a_{l+1} < \dots < a_r$.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

Print one integer — the maximum possible length of the strictly increasing contiguous subarray of the array $a$ after removing at most one element.


-----Examples-----
Input
5
1 2 5 3 4

Output
4

Input
2
1 2

Output
2

Input
7
6 5 4 3 2 4 3

Output
2



-----Note-----

In the first example, you can delete $a_3=5$. Then the resulting array will be equal to $[1, 2, 3, 4]$ and the length of its largest increasing subarray will be equal to $4$.
"""
2022-04-09 23:35:49.668368 --------------------------
2022-04-09 23:36:20.667420 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na_sorted = sorted(a)\n\nif a == a_sorted:\n    print(n)\nelse:\n    print(n - 1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#Solution:\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    longest = 0\n    for i in range(1, n - 1):\n        l = 1\n        r = 1\n        if a[i] > a[i - 1]:\n            l = 2\n        if a[i] > a[i + 1]:\n            r = 2\n        tmp = l + r\n        if a[i - 1] < a[i + 1]:\n            tmp -= 1\n        if tmp > longest:\n            longest = tmp\n    print(longest)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    max_len = 1\n    incr_len = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            incr_len += 1\n        else:\n            max_len = max(max_len, incr_len)\n            incr_len = 1\n\n    max_len = max(max_len, incr_len)\n    print(max_len)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    ans = 1\n    c = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            c += 1\n        else:\n            ans = max(ans, c)\n            c = 1\n    ans = max(ans, c)\n    c = 1\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            c += 1\n        else:\n            ans = max(ans, c)\n            c = 1\n    ans = max(ans, c)\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\ndef max_increasing_subarray(a):\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 2\n    max_len = 0\n    for i in range(len(a)):\n        if i == 0:\n            tmp = [a[i], a[i+1]]\n        elif i == len(a) - 1:\n            tmp = [a[i-1], a[i]]\n        else:\n            tmp = [a[i-1], a[i], a[i+1]]\n        tmp.sort()\n        if tmp[1] == a[i]:\n            cur_len = 0\n            for j in range(len(a)):\n                if a[j] < a[i]:\n                    continue\n                cur_len += 1\n                if j == len(a) - 1 or a[j+1] <= a[i]:\n                    break\n            max_len = max(max_len, cur_len)\n    return max_len\n\nassert(max_increasing_subarray([1,2,5,3,4]) == 4)\nassert(max_increasing_subarray([1,2]) == 2)\nassert(max_increasing_subarray([6,5,4,3,2,4,3]) == 2)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        curr = 1\n        for j in range(i+1, n):\n            if a[j] > a[j-1]:\n                curr += 1\n            else:\n                break\n        ans = max(ans, curr)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        j = i\n        while j + 1 < n and a[j] < a[j + 1]:\n            j += 1\n        ans = max(ans, j - i + 1)\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"
    }
  ],
  "created": 1649561750,
  "id": "cmpl-4vIecXKLweTFNOBnABPwUfEmGjTlm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 23:36:20.667739 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na_sorted = sorted(a)\n\nif a == a_sorted:\n    print(n)\nelse:\n    print(n - 1)"
}
2022-04-09 23:36:20.667785 REASON stop
2022-04-09 23:36:20.679646 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
2022-04-09 23:36:20.679767 REASON stop
2022-04-09 23:36:20.680570 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#Solution:\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    longest = 0\n    for i in range(1, n - 1):\n        l = 1\n        r = 1\n        if a[i] > a[i - 1]:\n            l = 2\n        if a[i] > a[i + 1]:\n            r = 2\n        tmp = l + r\n        if a[i - 1] < a[i + 1]:\n            tmp -= 1\n        if tmp > longest:\n            longest = tmp\n    print(longest)"
}
2022-04-09 23:36:20.680648 REASON stop
2022-04-09 23:36:20.681082 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    max_len = 1\n    incr_len = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            incr_len += 1\n        else:\n            max_len = max(max_len, incr_len)\n            incr_len = 1\n\n    max_len = max(max_len, incr_len)\n    print(max_len)"
}
2022-04-09 23:36:20.681226 REASON stop
2022-04-09 23:36:20.681650 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    ans = 1\n    c = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            c += 1\n        else:\n            ans = max(ans, c)\n            c = 1\n    ans = max(ans, c)\n    c = 1\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            c += 1\n        else:\n            ans = max(ans, c)\n            c = 1\n    ans = max(ans, c)\n    print(ans)"
}
2022-04-09 23:36:20.681741 REASON stop
2022-04-09 23:36:20.682010 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\ndef max_increasing_subarray(a):\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 2\n    max_len = 0\n    for i in range(len(a)):\n        if i == 0:\n            tmp = [a[i], a[i+1]]\n        elif i == len(a) - 1:\n            tmp = [a[i-1], a[i]]\n        else:\n            tmp = [a[i-1], a[i], a[i+1]]\n        tmp.sort()\n        if tmp[1] == a[i]:\n            cur_len = 0\n            for j in range(len(a)):\n                if a[j] < a[i]:\n                    continue\n                cur_len += 1\n                if j == len(a) - 1 or a[j+1] <= a[i]:\n                    break\n            max_len = max(max_len, cur_len)\n    return max_len\n\nassert(max_increasing_subarray([1,2,5,3,4]) == 4)\nassert(max_increasing_subarray([1,2]) == 2)\nassert(max_increasing_subarray([6,5,4,3,2,4,3]) == 2)"
}
2022-04-09 23:36:20.682123 REASON stop
2022-04-09 23:36:20.682428 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        curr = 1\n        for j in range(i+1, n):\n            if a[j] > a[j-1]:\n                curr += 1\n            else:\n                break\n        ans = max(ans, curr)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 23:36:20.682501 REASON stop
2022-04-09 23:36:20.682707 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        j = i\n        while j + 1 < n and a[j] < a[j + 1]:\n            j += 1\n        ans = max(ans, j - i + 1)\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"
}
2022-04-09 23:36:20.682734 REASON stop
