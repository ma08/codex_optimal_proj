["\n\ndef find_common_divisors(numbers):\n    \"\"\"\n    Find the number of common divisors of all elements in the array\n    :param numbers: an array of numbers\n    :return: the number of common divisors\n    \"\"\"\n    # Find the GCD of all numbers\n    gcd = numbers[0]\n    for i in range(1, len(numbers)):\n        gcd = gcd_naive(gcd, numbers[i])\n\n    # Find the number of divisors of the GCD\n    return find_divisors(gcd)\n\n\ndef gcd_naive(a, b):\n    \"\"\"\n    Find the greatest common divisor of two numbers\n    :param a: first number\n    :param b: second number\n    :return: the greatest common divisor\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd_naive(b, a % b)\n\n\ndef find_divisors(n):\n    \"\"\"\n    Find the number of divisors of a number\n    :param n: a number\n    :return: the number of divisors\n    \"\"\"\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n\n    return divisors\n\n\nif __name__ == '__main__':\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    print(find_common_divisors(numbers))", "\n\nimport sys\n\ndef main(n, array):\n    # find the gcd of all numbers in the array\n    gcd = array[0]\n    for i in range(1, len(array)):\n        gcd = compute_gcd(gcd, array[i])\n    print(count_divisors(gcd))\n\ndef compute_gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef count_divisors(x):\n    count = 0\n    i = 1\n    while(i * i <= x):\n        if(x % i == 0):\n            if(x / i == i):\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    array = list(map(int, sys.stdin.readline().split()))\n    main(n, array)", "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = a[0]\n    for i in range(1, n):\n        ans = lcm(ans, a[i])\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    # Read the input data.\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    \n    # Compute the answer.\n    answer = solve(n, a)\n    \n    # Print the answer.\n    print(answer)\n\ndef solve(n, a):\n    # Compute the GCD of all elements in the array.\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    \n    # The number of divisors of the GCD is the answer.\n    return count_divisors(gcd)\n\n# Returns the number of divisors of a.\ndef count_divisors(a):\n    # Compute the prime factorization of a.\n    factorization = prime_factorization(a)\n    \n    # The number of divisors of a is the product of the exponents plus one.\n    return product(factorization.values()) + 1\n\n# Returns the prime factorization of a.\ndef prime_factorization(a):\n    # Base case: a is prime.\n    if is_prime(a):\n        return {a : 1}\n    \n    # Find the smallest prime factor of a.\n    factor = smallest_prime_factor(a)\n    \n    # Recursively factor a.\n    factorization = prime_factorization(a // factor)\n    \n    # Update the factorization.\n    if factor in factorization:\n        factorization[factor] += 1\n    else:\n        factorization[factor] = 1\n    \n    return factorization\n\n# Returns the smallest prime factor of a.\ndef smallest_prime_factor(a):\n    # Check if a is divisible by 2.\n    if a % 2 == 0:\n        return 2\n    \n    # Check if a is divisible by odd numbers.\n    for i in range(3, int(math.sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return i\n    \n    # a is prime.\n    return a\n\n# Returns whether a is prime.\ndef is_prime(a):\n    # Check if a is divisible by 2.\n    if a % 2 == 0:\n        return a == 2\n    \n    # Check if a is divisible by odd numbers.\n    for i in range(3, int(math.sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    \n    # a is prime.\n    return True\n\n# Returns the product of the values in a dictionary.\ndef product(dictionary):\n    product = 1\n    for key in dictionary:\n        product *= dictionary[key]\n    return product\n\n# Call the main function.\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef lcm_of_list(a):\n    return reduce(lcm, a)\n\ndef count_divisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n\nprint(count_divisors(lcm_of_list(a)))", "\n\ndef solve(a):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    ans = a[0]\n    for i in range(1, len(a)):\n        ans = gcd(ans, a[i])\n\n    cnt = 0\n    i = 1\n    while i * i <= ans:\n        if ans % i == 0:\n            cnt += 2\n            if i * i == ans:\n                cnt -= 1\n        i += 1\n\n    return cnt\n\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(solve(a))", "\n\nimport sys\nimport math\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef factorize(n, primes):\n    factors = []\n    for p in primes:\n        if p > n:\n            break\n        if n % p == 0:\n            factors.append(p)\n    return factors\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    primes = get_primes(int(math.sqrt(max(a))))\n    factors = [factorize(x, primes) for x in a]\n    lcm_factors = []\n    for f in factors:\n        lcm_factors.append(f[0])\n        for i in range(1, len(f)):\n            lcm_factors[-1] = lcm(lcm_factors[-1], f[i])\n    answer = 1\n    for f in lcm_factors:\n        answer *= f\n    print(answer)\n\nif __name__ == '__main__':\n    main()", "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nn = input()\na = map(int, raw_input().split())\n\nres = a[0]\nfor i in xrange(1, n):\n    res = gcd(res, a[i])\n\nprint res"]