["\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 1:\n        print(0)\n    elif a[0] == a[-1]:\n        print(0)\n    elif k == n:\n        print(1)\n    else:\n        print(2)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    print(a)\n\n    ans = 0\n    while a[0] < a[-1]:\n        a[0] //= 2\n        a.sort()\n        ans += 1\n\n    print(ans)\n\nmain()", "\n\n# Solution\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef check(x):\n    return sum(1 for i in a if i >= x) >= k\n\nl = 1\nr = max(a)\n\nwhile l < r:\n    m = (l + r) // 2\n    if not check(m):\n        l = m + 1\n    else:\n        r = m\n\nprint(l - 1)", "\n\ndef main():\n    \"\"\"\n    The idea is to add up all the numbers. If the sum is divisible by k, then the answer is 0.\n    Otherwise, if the sum is not divisible by k, then the answer is -1.\n    \"\"\"\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % k == 0:\n        print(0)\n    else:\n        print(-1)\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\nimport math\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef count(arr, x):\n    return arr.count(x)\n\n\ndef min_ops(arr, k):\n    min_num = min(arr)\n    min_count = count(arr, min_num)\n    if min_count >= k:\n        return 0\n    else:\n        return math.ceil(math.log(k / min_count, 2))\n\n\nprint(min_ops(a, k))", "\n\n# Code Section\n\ndef getMinDivisions(array: list, equalNumbers: int) -> int:\n    \"\"\"\n    We need to find the minimum number of divisions to be done to get\n    equal numbers.\n\n    A division can be done only on an odd number, as even numbers will\n    divide down to even numbers.\n\n    We need to find the maximum number of odd numbers in the array, as\n    they will be the ones that will be divided.\n\n    We can divide a number by 2, till it's odd.\n    \"\"\"\n\n    # This is the count of odd numbers\n    oddNumbers = 0\n\n    # Iterate the array\n    for number in array:\n\n        # If the number is odd, increment\n        if number % 2 == 1:\n            oddNumbers += 1\n\n    # If there are no odd numbers, we can't divide\n    if oddNumbers == 0:\n        return 0\n\n    # If the odd numbers are less than the required equal numbers,\n    # then we can't divide\n    if oddNumbers < equalNumbers:\n        return -1\n\n    # The minimum number of divisions is the difference of the odd\n    # numbers and the required equal numbers\n    return oddNumbers - equalNumbers\n\n\n# Read the number of elements and the number of equal numbers\narraySize, equalNumbers = [int(x) for x in input().split()]\n\n# Read the array\narray = [int(x) for x in input().split()]\n\n# Get the minimum number of divisions\nminDivisions = getMinDivisions(array, equalNumbers)\n\n# Print the result\nif minDivisions == -1:\n    print(\"IMPOSSIBLE\")\nelse:\n    print(minDivisions)", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    if a[0] == a[n - 1]:\n        print(0)\n        return\n\n    if n == k:\n        print(1)\n        return\n\n    if k == 1:\n        print(a[n - 1] - a[0])\n        return\n\n    if a[0] * 2 > a[n - 1]:\n        print(-1)\n        return\n\n    if n == k + 1:\n        if a[0] * 2 <= a[n - 1]:\n            print(1)\n            return\n        else:\n            print(-1)\n            return\n\n    if a[1] == a[0]:\n        print(-1)\n        return\n\n    count = 1\n    while a[0] * 2 <= a[n - 1]:\n        a[0] *= 2\n        count += 1\n\n    if a[1] * 2 <= a[n - 1]:\n        print(count + 1)\n        return\n\n    print(-1)\n\n\nif __name__ == '__main__':\n    main()"]