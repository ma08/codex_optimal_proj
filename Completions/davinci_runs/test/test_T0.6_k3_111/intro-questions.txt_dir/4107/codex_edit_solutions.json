["\nn, k = map(int, input().split())\ns = input()\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1\n# if j-i <= 2*k+1, we connect j\n\nans = 0\ni = 1\nfor j in range(1, n+1):\n    if j-i > 2*k+1:\n        ans += 1\n        i = i+k+1\n    if s[j-1] == \"1\":\n        ans += 1\n        i = j\n\nprint(ans)\n", "\nimport sys\nn,k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n \ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)\n", "#input\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n\ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)\n", "\n#input\nimport sys\n\nn,k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n\ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    def cost(l, r):\n        return sum(map(int, s[l+1:r+1]))\n\n    def f(l, r):\n        if l == r:\n            return 1\n        if s[l] == '1' and s[r] == '1':\n            return min(f(l+1, r), f(l, r-1), cost(l+k, r-k))\n        if s[l] == '1':\n            return min(f(l+1, r), cost(l+k, r))\n        if s[r] == '1':\n            return min(f(l, r-1), cost(l, r-k+1))\n        return cost(l, r)\n\n    print(f(0, n-1))\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\ns = input()\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1 and connect i+k+1 to j\n# if j-i <= 2*k+1, we connect j\n\nans = 0\ni = 1\nfor j in range(1, n+1):\n    if j-i > 2*k+1:\n        ans += i+k+1\n        i = i+k+1\n    if s[j-1] == \"1\":\n        ans += j\n        i = j\n\nprint(ans)\n", "\n\nimport sys\nn,k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n \ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    def cost(l, r):\n        return sum(map(int, s[l+1:r+1]))\n\n    def f(l, r):\n        if l == r:\n            return 1\n        if s[l] == '1' and s[r] == '1':\n            return min(f(l+1, r), f(l, r-1), cost(l+k-1, r-k))\n        if s[l] == '1':\n            return min(f(l+1, r), cost(l+k-1, r))\n        if s[r] == '1':\n            return min(f(l, r-1), cost(l, r-k))\n        return cost(l, r)\n\n    print(f(0, n-1))\n\nif __name__ == '__main__':\n    main()\n"]