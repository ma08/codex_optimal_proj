2022-04-10 12:16:29.353668 num operations 2
2022-04-10 12:16:29.353688 size on input set 1
2022-04-10 12:16:35.552096 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t# print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t# print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    }
  ],
  "created": 1649607389,
  "object": "edit"
}
2022-04-10 12:16:35.552328 fix spelling mistakes 2 ['\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n', '\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t# print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t# print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n']
2022-04-10 12:16:35.552372 size on output set 2
2022-04-10 12:16:35.552379 size on input set 2
2022-04-10 12:16:51.826490 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    }
  ],
  "created": 1649607395,
  "object": "edit"
}
2022-04-10 12:16:51.827728 fix syntax errors 2 ['\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations / 2\n\t\tn1_operations = n1_operations / 2\n\t\tn3_operations = n3_operations / 2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n', '\n\ndef find_min_operations(a, b, c): # function to find minimum operations\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n']
2022-04-10 12:17:14.152327 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1 * 2 == n2 and n2 * 2 == n3:\n\t\treturn [0, n1, n2, n3], n1, n2, n3\n\telif n1 * 2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2 * 2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t# print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3], n1, n2, n3\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t# print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)[0]\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n"
    }
  ],
  "created": 1649607412,
  "object": "edit"
}
2022-04-10 12:17:14.152650 fix syntax errors 2 ['\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1 * 2 == n2 and n2 * 2 == n3:\n\t\treturn [0, n1, n2, n3], n1, n2, n3\n\telif n1 * 2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2 * 2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations // 2\n\t\tn1_operations = n1_operations // 2\n\t\tn3_operations = n3_operations // 2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t# print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3], n1, n2, n3\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t# print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)[0]\n\tprint(res)\n\tprint(n1, n2, n3)\n', '\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)\n']
2022-04-10 12:17:14.152708 size on output set 4
2022-04-10 12:17:14.152735 num operations 2
2022-04-10 12:17:14.152743 size on input set 1
2022-04-10 12:17:20.740173 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n"
    }
  ],
  "created": 1649607434,
  "object": "edit"
}
2022-04-10 12:17:20.740538 fix spelling mistakes 2 ['\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == "__main__":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n', '\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == "__main__":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n']
2022-04-10 12:17:20.740727 size on output set 1
2022-04-10 12:17:20.740744 size on input set 1
2022-04-10 12:17:25.697913 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n"
    }
  ],
  "created": 1649607440,
  "object": "edit"
}
2022-04-10 12:17:25.698219 fix syntax errors 2 ['\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == "__main__":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n', '\n\ndef get_number_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == "__main__":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_number_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)\n']
2022-04-10 12:17:25.698345 size on output set 1
2022-04-10 12:17:25.698360 num operations 2
2022-04-10 12:17:25.698367 size on input set 1
2022-04-10 12:17:31.067969 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution 1 - with while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 - without while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution 1 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    }
  ],
  "created": 1649607445,
  "object": "edit"
}
2022-04-10 12:17:31.068195 fix spelling mistakes 2 ['\n\n# Solution 1 - with while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 - without while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n', '\n\n# Solution 1 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n']
2022-04-10 12:17:31.068217 size on output set 2
2022-04-10 12:17:31.068222 size on input set 2
2022-04-10 12:17:36.988637 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution 1 - with while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n\n# Solution 2 - without while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution 1 - with while loop and if condition\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 - without while loop and if condition\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    }
  ],
  "created": 1649607451,
  "object": "edit"
}
2022-04-10 12:17:36.988863 fix syntax errors 2 ['\n\n# Solution 1 - with while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n\n# Solution 2 - without while loop\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n', '\n\n# Solution 1 - with while loop and if condition\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 - without while loop and if condition\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n']
2022-04-10 12:17:50.111969 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0: break\n        if a > b:\n            b += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    },
    {
      "index": 1,
      "text": "\n# Solution 1 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n"
    }
  ],
  "created": 1649607457,
  "object": "edit"
}
2022-04-10 12:17:50.112609 fix syntax errors 2 ['\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0: break\n        if a > b:\n            b += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n', '\n# Solution 1 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2 (wrong)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)\n']
2022-04-10 12:17:50.112696 size on output set 4
