["#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n#define MAX_LENGTH 100\n\nint main(int argc, char *argv[])\n{\n  if (argc != 2)\n  {\n    printf(\"Usage: %s <filename>\\n\", argv[0]);\n    return 1;\n  }\n\n  FILE *file = fopen(argv[1], \"r\");\n  if (file == NULL)\n  {\n    printf(\"Error: File not found\\n\");\n    return 1;\n  }\n\n  char line[MAX_LENGTH];\n  while (fgets(line, MAX_LENGTH, file))\n  {\n    size_t length = strlen(line);\n    if (line[length - 1] == '\\n')\n    {\n      line[length - 1] = '\\0';\n    }\n\n    int i = 0;\n    while (line[i] != '\\0')\n    {\n      if (isalpha(line[i]))\n      {\n        if (isupper(line[i]))\n        {\n          line[i] = tolower(line[i]);\n        }\n        else\n        {\n          line[i] = toupper(line[i]);\n        }\n      }\n      i++;\n    }\n\n    printf(\"%s\\n\", line);\n  }\n\n  fclose(file);\n  return 0;\n}\n", "\n\nimport sys\n\n\ndef solve(s, b):\n    pos = []\n    for i in range(len(s)):\n        pos.append([s[i], b[i], i + 1])\n    pos = sorted(pos)\n    res = \"\"\n    start = 0\n    end = len(s) - 1\n    for i in range(len(s)):\n        if pos[i][1] == 0:\n            res += pos[i][0]\n            continue\n        if i == 0:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if i == len(s) - 1:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] > pos[i - 1][1]:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if pos[i][1] < pos[i - 1][1]:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] == pos[i - 1][1]:\n            if pos[i][2] < start:\n                res += pos[i][0]\n                start = pos[i][2]\n            elif pos[i][2] > end:\n                res += pos[i][0]\n                end = pos[i][2]\n            else:\n                res += pos[i][0]\n    return res\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    ans = []\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        ans.append(solve(s, b))\n    for i in range(q):\n        print(ans[i])\n", "\n\nimport sys\n\n\ndef solve(s, b, m):\n    pos = []\n    for i in range(len(s)):\n        pos.append([s[i], b[i], i+1])\n    pos = sorted(pos)\n    res = \"\"\n    start = 0\n    end = len(s)-1\n    for i in range(len(s)):\n        if pos[i][1] == 0:\n            res += pos[i][0]\n            continue\n        if i == 0:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if i == len(s)-1:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] > pos[i-1][1]:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if pos[i][1] < pos[i-1][1]:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] == pos[i-1][1]:\n            if pos[i][2] < start:\n                res += pos[i][0]\n                start = pos[i][2]\n            elif pos[i][2] > end:\n                res += pos[i][0]\n                end = pos[i][2]\n            else:\n                res += pos[i][0]\n    return res\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    ans = []\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        ans.append(solve(s, b, m))\n    for i in range(q):\n        print(ans[i])\n", "\nimport sys\n\n\ndef solve(s, b):\n    pos = []\n    for i in range(len(s)):\n        pos.append([s[i], b[i], i+1])\n    pos = sorted(pos)\n    res = \"\"\n    start = 0\n    end = len(s) - 1\n    for i in range(len(s)):\n        if pos[i][1] == 0:\n            res += pos[i][0]\n            continue\n        if i == 0:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if i == len(s) - 1:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] > pos[i-1][1]:\n            res += pos[i][0]\n            start = pos[i][2]\n            continue\n        if pos[i][1] < pos[i-1][1]:\n            res += pos[i][0]\n            end = pos[i][2]\n            continue\n        if pos[i][1] == pos[i-1][1]:\n            if pos[i][2] < start:\n                res += pos[i][0]\n                start = pos[i][2]\n            elif pos[i][2] > end:\n                res += pos[i][0]\n                end = pos[i][2]\n            else:\n                res += pos[i][0]\n    return res\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    ans = []\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        ans.append(solve(s, b))\n    for i in range(q):\n        print(ans[i])\n", "\n\ndef solve(s, m, b):\n\t\"\"\"\n\t>>> solve('abac', 3, [2, 1, 0])\n\t'aac'\n\t>>> solve('abc', 1, [0])\n\t'b'\n\t>>> solve('abba', 3, [1, 0, 1])\n\t'aba'\n\t>>> solve('ecodsefr', 10, [38, 13, 24, 14, 11, 5, 3, 24, 17, 0])\n\t'codeforces'\n\t\"\"\"\n\ts = list(s)\n\ts.sort()\n\tres = ''\n\n\tfor i, v in enumerate(b):\n\t\tidx, s = get_idx(s, v)\n\t\tres += s[idx]\n\t\tdel s[idx]\n\n\treturn res\n\ndef get_idx(s, b):\n\t\"\"\"\n\t>>> get_idx(['a', 'b', 'c'], 0) == (0, ['a', 'b', 'c'])\n\tTrue\n\t>>> get_idx(['a', 'b', 'c'], 1) == (1, ['a', 'b', 'c'])\n\tTrue\n\t>>> get_idx(['a', 'b', 'c'], 2) == (2, ['a', 'b', 'c'])\n\tTrue\n\t\"\"\"\n\tidx = b % len(s)\n\treturn idx, s\n\nif __name__ == '__main__':\n\tq = int(input())\n\tfor i in range(q):\n\t\ts = input()\n\t\tm = int(input())\n\t\tb = [int(x) for x in input().split()]\n\t\tprint(solve(s, m, b))\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n#define MAX_LENGTH 100\n\nint main(int argc, char *argv[])\n{\n  if (argc != 2)\n  {\n    printf(\"Usage: %s <filename>\\n\", argv[0]);\n    return 1;\n  }\n\n  FILE *file = fopen(argv[1], \"r\");\n  if (file == NULL)\n  {\n    printf(\"Error: File not found\\n\");\n    return 1;\n  }\n\n  char line[MAX_LENGTH];\n  while (fgets(line, MAX_LENGTH, file))\n  {\n    size_t length = strlen(line);\n    if (line[length - 1] == '\\n')\n    {\n      line[length - 1] = '\\0';\n    }\n\n    size_t i = 0;\n    while (line[i] != '\\0')\n    {\n      if (isalpha(line[i]))\n      {\n        if (isupper(line[i]))\n        {\n          line[i] = tolower(line[i]);\n        }\n        else\n        {\n          line[i] = toupper(line[i]);\n        }\n      }\n      i++;\n    }\n\n    printf(\"%s\\n\", line);\n  }\n\n  fclose(file);\n  return 0;\n}\n", "#!/usr/bin/python3\n\nimport os\n\ndef main():\n    print(os.getcwd())\n    print(os.listdir())\n    print(os.listdir('/home/student/mycode/'))\n    print(os.listdir('/home/student/mycode/')) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(s, m, b):\n\t\"\"\"\n\t>>> solve('abac', 3, [2, 1, 0])\n\t'aac'\n\t>>> solve('abc', 1, [0])\n\t'b'\n\t>>> solve('abba', 3, [1, 0, 1])\n\t'aba'\n\t>>> solve('ecodsefr', 10, [38, 13, 24, 14, 11, 5, 3, 24, 17, 0])\n\t'codeforces'\n\t\"\"\"\n\ts = sorted(s)\n\tres = ''\n\n\tfor i, v in enumerate(b):\n\t\tidx = get_idx(s, v)\n\t\tres += s[idx]\n\t\tdel s[idx]\n\n\treturn res\n\ndef get_idx(s, b):\n\t\"\"\"\n\t>>> get_idx(['a', 'b', 'c'], 0)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 1)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 2)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 3)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 4)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 5)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 6)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 7)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 8)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 9)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 10)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 11)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 12)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 13)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 14)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 15)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 16)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 17)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 18)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 19)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 20)\n\t(2, ['a', 'b', 'c'])\n\t\"\"\"\n\tidx = b % len(s)\n\treturn idx, s\n\nif __name__ == '__main__':\n\tq = int(input())\n\tfor i in range(q):\n\t\ts = input()\n\t\tm = int(input())\n\t\tb = [int(x) for x in input().split()]\n\t\tprint(solve(s, m, b))\n", "\n\ndef solve(s, m, b):\n\t\"\"\"\n\t>>> solve('abac', 3, [2, 1, 0])\n\t'aac'\n\t>>> solve('abc', 1, [0])\n\t'b'\n\t>>> solve('abba', 3, [1, 0, 1])\n\t'aba'\n\t>>> solve('codeforces', 10, [38, 13, 24, 14, 11, 5, 3, 24, 17, 0])\n\t'codeforces'\n\t\"\"\"\n\ts = sorted(s)\n\tres = ''\n\n\tfor i, v in enumerate(b):\n\t\tidx = get_idx(s, v)\n\t\tres += s.pop(idx)\n\n\treturn res\n\ndef get_idx(s, b):\n\t\"\"\"\n\t>>> get_idx(['a', 'b', 'c'], 0)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 1)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 2)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 3)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 4)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 5)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 6)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 7)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 8)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 9)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 10)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 11)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 12)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 13)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 14)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 15)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 16)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 17)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 18)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 19)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 20)\n\t(2, ['a', 'b', 'c'])\n\t\"\"\"\n\tidx = b % len(s)\n\treturn idx, s\n\nif __name__ == '__main__':\n\tq = int(input())\n\tfor i in range(q):\n\t\ts = input()\n\t\tm = int(input())\n\t\tb = [int(x) for x in input().split()]\n\t\tprint(solve(s, m, b))\n", "\n\ndef solve(s, m, b):\n\t\"\"\"\n\t>>> solve('abac', 3, [2, 1, 0])\n\t'aac'\n\t>>> solve('abc', 1, [0])\n\t'b'\n\t>>> solve('abba', 3, [1, 0, 1])\n\t'aba'\n\t>>> solve('codeforces', 10, [38, 13, 24, 14, 11, 5, 3, 24, 17, 0])\n\t'codeforces'\n\t\"\"\"\n\ts = list(s)\n\ts.sort(reverse=True)\n\tres = ''\n\n\tfor i, v in enumerate(b):\n\t\tidx, _ = get_idx(s, v)\n\t\tres += _[idx]\n\t\tdel _[idx]\n\n\treturn res\n\ndef get_idx(s, b):\n\t\"\"\"\n\t>>> get_idx(['a', 'b', 'c'], 0)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 1)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 2)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 3)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 4)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 5)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 6)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 7)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 8)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 9)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 10)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 11)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 12)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 13)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 14)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 15)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 16)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 17)\n\t(2, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 18)\n\t(0, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 19)\n\t(1, ['a', 'b', 'c'])\n\t>>> get_idx(['a', 'b', 'c'], 20)\n\t(2, ['a', 'b', 'c'])\n\t\"\"\"\n\tidx = b % len(s)\n\treturn idx, s\n\nif __name__ == '__main__':\n\tq = int(input())\n\tfor i in range(q):\n\t\ts = input()\n\t\tm = int(input())\n\t\tb = [int(x) for x in input().split()]\n\t\tprint(solve(s, m, b))\n"]