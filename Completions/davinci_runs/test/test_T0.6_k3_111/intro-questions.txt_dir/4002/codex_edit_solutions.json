["#\n\nn, m, k = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# dp[i][j] = max sum of the first j elements of the ith row\ndp = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            dp[i][j] = matrix[i][j]\n        else:\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n# dp2[i][j] = max sum of the first i rows, ending with the jth element of the ith row\ndp2 = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp2[i][j] = dp[i][j]\n        else:\n            for k in range(j+1):\n                dp2[i][j] = max(dp2[i][j], dp2[i-1][k] + dp[i][j])\n\nprint(max(dp2[-1]))\n", "\ndef solve(n, m, k, matrix):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0] = [0 for _ in range(m)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= (m // 2):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + matrix[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    n, m, k = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, matrix))\n", "\ndef solve(n, m, k, matrix):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0] = [0] * (m + 1)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= (m // 2):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + matrix[i - 1][j - 1] - k)\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    n, m, k = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, matrix))\n", "\n#\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# dp[i][j] = max sum of the first j elements of the ith row\ndp = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            dp[i][j] = matrix[i][j]\n        else:\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n# dp2[i][j] = max sum of the first i rows, ending with the jth element of the ith row\ndp2 = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp2[i][j] = dp[i][j]\n        else:\n            for k in range(j+1):\n                dp2[i][j] = max(dp2[i][j], dp2[i-1][k] + dp[i][j])\n\nprint(max(dp2[-1]))\n", "def main():\n    print('Hello, world!')\n\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\n\n\ndef main():\n    print(\"hello world\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\n\ndef main():\n\tpass\n\n\nif __name__ == '__main__':\n\tmain()\n"]