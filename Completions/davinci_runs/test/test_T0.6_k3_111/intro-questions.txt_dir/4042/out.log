"""
$\text{A}$ 


-----Input-----

The input contains a single floating-point number x with exactly 6 decimal places (0 < x < 5).


-----Output-----

Output two integers separated by a single space. Each integer should be between 1 and 10, inclusive. If several solutions exist, output any of them. Solution will exist for all tests.


-----Examples-----
Input
1.200000

Output
3 2

Input
2.572479

Output
10 3

Input
4.024922

Output
9 9
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    x = float(input())\n    a = int(x)\n    b = round((x - int(x)) * 100)\n    print(a, b)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nimport math\n\nx = float(input())\n\n# round to 3 digits\nx *= 1000\n\na = x // 100\nb = x % 100\n\n# find the two closest integers that sum to a\na_1 = math.ceil(a/2)\na_2 = math.floor(a/2)\n\n# find the two closest integers that sum to b\nb_1 = math.ceil(b/2)\nb_2 = math.floor(b/2)\n\n# if a_1 + a_2 = a, but b_1 + b_2 != b, then b_1 and b_2 are too far apart\n# and we need to adjust them\nif a_1 + a_2 == a and b_1 + b_2 != b:\n    if b_1 > b_2:\n        b_1 -= 1\n    else:\n        b_2 -= 1\n\n# if a_1 + a_2 != a, but b_1 + b_2 = b, then a_1 and a_2 are too far apart\n# and we need to adjust them\nif a_1 + a_2 != a and b_1 + b_2 == b:\n    if a_1 > a_2:\n        a_1 -= 1\n    else:\n        a_2 -= 1\n\n# if a_1 + a_2 != a, and b_1 + b_2 != b, then a_1 and a_2 are too far apart,\n# and we need to adjust them\nif a_1 + a_2 != a and b_1 + b_2 != b:\n    if a_1 > a_2:\n        a_1 -= 1\n    else:\n        a_2 -= 1\n\nprint(a_1, a_2)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\nx = float(raw_input())\n\ns = str(x)\n\ns = s.split('.')\n\ninteger_part = int(s[0])\n\ndecimal_part = int(s[1])\n\na = 0\nb = 0\n\nfor i in range(1,11):\n\tfor j in range(1,11):\n\t\tif (i * integer_part + j * decimal_part) == int(math.pow(10,6)):\n\t\t\ta = i\n\t\t\tb = j\n\t\t\tbreak\n\t\nprint str(a) + \" \" + str(b)"
    }
  ],
  "created": 1648692795,
  "id": "cmpl-4rebDTF6Sh5Ko7bjr5B4aSRxTr6H5",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    x = float(input())\n    a = int(x)\n    b = round((x - int(x)) * 100)\n    print(a, b)\n\nmain()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nimport math\n\nx = float(input())\n\n# round to 3 digits\nx *= 1000\n\na = x // 100\nb = x % 100\n\n# find the two closest integers that sum to a\na_1 = math.ceil(a/2)\na_2 = math.floor(a/2)\n\n# find the two closest integers that sum to b\nb_1 = math.ceil(b/2)\nb_2 = math.floor(b/2)\n\n# if a_1 + a_2 = a, but b_1 + b_2 != b, then b_1 and b_2 are too far apart\n# and we need to adjust them\nif a_1 + a_2 == a and b_1 + b_2 != b:\n    if b_1 > b_2:\n        b_1 -= 1\n    else:\n        b_2 -= 1\n\n# if a_1 + a_2 != a, but b_1 + b_2 = b, then a_1 and a_2 are too far apart\n# and we need to adjust them\nif a_1 + a_2 != a and b_1 + b_2 == b:\n    if a_1 > a_2:\n        a_1 -= 1\n    else:\n        a_2 -= 1\n\n# if a_1 + a_2 != a, and b_1 + b_2 != b, then a_1 and a_2 are too far apart,\n# and we need to adjust them\nif a_1 + a_2 != a and b_1 + b_2 != b:\n    if a_1 > a_2:\n        a_1 -= 1\n    else:\n        a_2 -= 1\n\nprint(a_1, a_2)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\nx = float(raw_input())\n\ns = str(x)\n\ns = s.split('.')\n\ninteger_part = int(s[0])\n\ndecimal_part = int(s[1])\n\na = 0\nb = 0\n\nfor i in range(1,11):\n\tfor j in range(1,11):\n\t\tif (i * integer_part + j * decimal_part) == int(math.pow(10,6)):\n\t\t\ta = i\n\t\t\tb = j\n\t\t\tbreak\n\t\nprint str(a) + \" \" + str(b)"
}
REASON stop
