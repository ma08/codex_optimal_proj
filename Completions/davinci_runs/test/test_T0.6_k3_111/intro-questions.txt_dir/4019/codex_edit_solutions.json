["\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if d >= n - 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i)\n        return\n    \n    if n - 1 == m:\n        print(\"NO\")\n        return\n        \n    visited = [True] + [False] * (n - 1)\n    parent = [0] * n\n    Q = [(0, 1)]\n    heapify(Q)\n    \n    while Q:\n        d, u = heappop(Q)\n        visited[u] = True\n        \n        for v in graph[u]:\n            if not visited[v]:\n                heappush(Q, (d + 1, v))\n                parent[v] = u\n    \n    if d == 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n        return\n    \n    if d == n - 2:\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, parent[i])\n        return\n    \n    print(\"YES\")\n    for i in range(2, d + 1):\n        print(1, i)\n    for i in range(d + 1, n):\n        print(i, parent[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n#fix syntax errors\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    n, m, D = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if D >= n - 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i)\n        return\n    \n    if n - 1 == m:\n        print(\"NO\")\n        return\n        \n    visited = [True] + [False] * (n - 1)\n    parent = [0] * n\n    Q = [(0, 1)]\n    heapify(Q)\n    \n    while Q:\n        d, u = heappop(Q)\n        visited[u] = True\n        \n        for v in graph[u]:\n            if not visited[v]:\n                heappush(Q, (d + 1, v))\n                parent[v] = u\n    \n    if D == 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n        return\n    \n    if D == n - 2:\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, parent[i])\n        return\n    \n    print(\"YES\")\n    for i in range(2, D + 1):\n        print(1, i)\n    for i in range(D + 1, n):\n        print(i, parent[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    n, m, D = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if D >= n - 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i)\n        return\n    \n    if n - 1 == m:\n        print(\"NO\")\n        return\n        \n    visited = [True] + [False] * (n - 1)\n    parent = [0] * n\n    Q = [(0, 1)]\n    heapify(Q)\n    \n    while Q:\n        d, u = heappop(Q)\n        visited[u] = True\n        \n        for v in graph[u]:\n            if not visited[v]:\n                heappush(Q, (d + 1, v))\n                parent[v] = u\n    \n    if D == 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n        return\n    \n    if D == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, parent[i])\n        return\n    \n    print(\"YES\")\n    for i in range(2, D + 1):\n        print(1, i)\n    for i in range(D + 1, n):\n        print(i, parent[i])\n\nif __name__ == \"__main__\":\n    main()\n", "#fix spelling mistakes\n\ndef main():\n    print(\"hello world\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\n\ndef main():\n    print(\"Hello World\")\n    sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    main()\n"]