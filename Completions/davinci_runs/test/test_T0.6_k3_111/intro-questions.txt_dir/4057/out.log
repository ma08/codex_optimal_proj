"""
Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array $a = [1, 2, 4, 3, 3, 2]$, he can distribute the coins into two pockets as follows: $[1, 2, 3], [2, 3, 4]$.

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 100$) — the number of coins.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 100$) — values of coins.


-----Output-----

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.


-----Examples-----
Input
6
1 2 4 3 3 2

Output
2

Input
1
100

Output
1
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = 0\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)"
    }
  ],
  "created": 1648693083,
  "id": "cmpl-4refrSKDt5ICrqkShyEAPXZfZCtE8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = 0\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)"
}
REASON stop
