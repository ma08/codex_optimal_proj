["n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n", "\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n", "\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0].copy()\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n"]