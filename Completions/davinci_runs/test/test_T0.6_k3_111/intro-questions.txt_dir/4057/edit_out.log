2022-04-10 13:06:29.552032 num operations 2
2022-04-10 13:06:29.552057 size on input set 1
2022-04-10 13:06:34.634809 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = 0\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649610390,
  "object": "edit"
}
2022-04-10 13:06:34.634999 fix spelling mistakes 2 ["\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = 0\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:06:34.635025 size on output set 2
2022-04-10 13:06:34.635033 size on input set 2
2022-04-10 13:06:41.182834 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649610394,
  "object": "edit"
}
2022-04-10 13:06:41.182978 fix syntax errors 2 ["\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:06:46.234747 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649610401,
  "object": "edit"
}
2022-04-10 13:06:46.234968 fix syntax errors 2 ["\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] != prev:\n            cnt += 1\n            prev = a[i]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:06:46.235008 size on output set 3
2022-04-10 13:06:46.235029 num operations 2
2022-04-10 13:06:46.235037 size on input set 1
2022-04-10 13:06:50.754811 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n"
    }
  ],
  "created": 1649610406,
  "object": "edit"
}
2022-04-10 13:06:50.754973 fix spelling mistakes 2 ['\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n', '\nn = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n']
2022-04-10 13:06:50.755001 size on output set 1
2022-04-10 13:06:50.755005 size on input set 1
2022-04-10 13:06:56.338876 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n"
    }
  ],
  "created": 1649610410,
  "object": "edit"
}
2022-04-10 13:06:56.339235 fix syntax errors 2 ['n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n', 'n = int(input())\n\ncoins = list(map(int, input().split()))\ncoins.sort()\n\ncount = 1\nlast = coins[0]\nfor coin in coins:\n    if coin != last:\n        count += 1\n    last = coin\n\nprint(count)\n']
2022-04-10 13:06:56.339275 size on output set 2
2022-04-10 13:06:56.339292 num operations 2
2022-04-10 13:06:56.339299 size on input set 1
2022-04-10 13:07:01.926902 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    }
  ],
  "created": 1649610416,
  "object": "edit"
}
2022-04-10 13:07:01.927320 fix spelling mistakes 2 ['\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n', '\n\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n']
2022-04-10 13:07:01.927514 size on output set 2
2022-04-10 13:07:01.927522 size on input set 2
2022-04-10 13:07:07.323093 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    }
  ],
  "created": 1649610422,
  "object": "edit"
}
2022-04-10 13:07:07.323440 fix syntax errors 2 ['\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n', '#!/usr/bin/env python3\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coins\npockets = [coins.pop(0)]\n\n# Add coins to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n']
2022-04-10 13:07:13.462773 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0].copy()\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n"
    }
  ],
  "created": 1649610427,
  "object": "edit"
}
2022-04-10 13:07:13.463017 fix syntax errors 2 ['\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0].copy()\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pocket.append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n', '\n# SOLUTION\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Start with one pocket and add coin\npockets = [coins.pop(0)]\n\n# Add coin to pockets\nfor coin in coins:\n    # If coin is already in a pocket, add a new pocket\n    if coin in pockets:\n        pockets.append(coin)\n    # If coin is not in a pocket, add it to an existing pocket\n    else:\n        pocket = pockets[0]\n        for i in range(1, len(pockets)):\n            if coin not in pockets[i]:\n                pocket = pockets[i]\n                break\n        pockets[pockets.index(pocket)].append(coin)\n\n# Print number of pockets\nprint(len(pockets))\n']
2022-04-10 13:07:13.463047 size on output set 4
