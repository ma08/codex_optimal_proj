2022-04-10 13:57:36.282302 num operations 2
2022-04-10 13:57:36.282325 size on input set 1
2022-04-10 13:57:44.202817 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef process(n, k, x, a_list, b_list):\n    if x < n - k + 1:\n        return -1\n    else:\n        return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef process(n, k, x, aList):\n    if x < n - k + 1:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, aList)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613456,
  "object": "edit"
}
2022-04-10 13:57:44.203102 fix spelling mistakes 2 ['\n\ndef process(n, k, x, a_list, b_list):\n    if x < n - k + 1:\n        return -1\n    else:\n        return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef process(n, k, x, aList):\n    if x < n - k + 1:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, aList)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:57:44.203135 size on output set 2
2022-04-10 13:57:44.203145 size on input set 2
2022-04-10 13:57:49.646802 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef process(n, k, x, a_list, b_list):\n    if x < n - k + 1:\n        return -1\n    else:\n\n        return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef process(n, k, x, a_list, b_list):\n    return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613464,
  "object": "edit"
}
2022-04-10 13:57:49.647365 fix syntax errors 2 ['\ndef process(n, k, x, a_list, b_list):\n    if x < n - k + 1:\n        return -1\n    else:\n\n        return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef process(n, k, x, a_list, b_list):\n    return sum(a_list) + sum(b_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    b_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list, b_list)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:57:56.806732 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef process(n, k, aList):\n    if n < k:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, aList)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef process(n, k, x, aList):\n    if x < n - k + 1 or x > n:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, aList)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613469,
  "object": "edit"
}
2022-04-10 13:57:56.807069 fix syntax errors 2 ['\n\ndef process(n, k, aList):\n    if n < k:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, aList)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef process(n, k, x, aList):\n    if x < n - k + 1 or x > n:\n        return -1\n    else:\n        return sum(aList)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    aList = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, aList)\n    print(result)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:57:56.807129 size on output set 4
2022-04-10 13:57:56.807203 num operations 2
2022-04-10 13:57:56.807214 size on input set 1
2022-04-10 13:58:07.750736 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nbest = 0\nfor i in range(k):\n    best = max(best, dp[n - i])\n\nfor i in range(k, n - x + 1):\n    best = max(best, dp[i + x] - dp[i])\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n"
    }
  ],
  "created": 1649613476,
  "object": "edit"
}
2022-04-10 13:58:07.750959 fix spelling mistakes 2 ['\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nbest = 0\nfor i in range(k):\n    best = max(best, dp[n - i])\n\nfor i in range(k, n - x + 1):\n    best = max(best, dp[i + x] - dp[i])\n\nprint(best)\n', '\n\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n']
2022-04-10 13:58:07.751032 size on output set 2
2022-04-10 13:58:07.751039 size on input set 2
2022-04-10 13:58:17.982821 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nbest = 0\nfor i in range(k):\n    best = max(best, dp[n - i])\n\nfor i in range(k, n - x + 1):\n    best = max(best, dp[i + x] - dp[i])\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n)\nfor i in range(n - 1):\n    dp[i + 1] = dp[i] + a[i + 1]\n\nbest = 0\nfor i in range(n - k):\n    best = max(best, dp[i + k] - dp[i])\n\nfor i in range(n - k - x + 1):\n    best = max(best, dp[i + k + x] - dp[i])\n\nprint(best)\n"
    }
  ],
  "created": 1649613487,
  "object": "edit"
}
2022-04-10 13:58:17.983137 fix syntax errors 2 ['n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nbest = 0\nfor i in range(k):\n    best = max(best, dp[n - i])\n\nfor i in range(k, n - x + 1):\n    best = max(best, dp[i + x] - dp[i])\n\nprint(best)\n', 'n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n)\nfor i in range(n - 1):\n    dp[i + 1] = dp[i] + a[i + 1]\n\nbest = 0\nfor i in range(n - k):\n    best = max(best, dp[i + k] - dp[i])\n\nfor i in range(n - k - x + 1):\n    best = max(best, dp[i + k + x] - dp[i])\n\nprint(best)\n']
2022-04-10 13:58:22.538767 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n"
    }
  ],
  "created": 1649613498,
  "object": "edit"
}
2022-04-10 13:58:22.539227 fix syntax errors 2 ['\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n', '\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\nans = 0\nfor i in range(n + 1):\n    if a[i] > k:\n        continue\n    j = m\n    while j > 0 and a[i] + b[j] > k:\n        j -= 1\n    ans = max(ans, i + j)\n\nprint(ans)\n']
2022-04-10 13:58:22.539288 size on output set 3
2022-04-10 13:58:22.539307 num operations 2
2022-04-10 13:58:22.539319 size on input set 1
2022-04-10 13:58:39.911158 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649613502,
  "object": "edit"
}
2022-04-10 13:58:39.911521 fix spelling mistakes 2 ["\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:58:39.911710 size on output set 2
2022-04-10 13:58:39.911733 size on input set 2
2022-04-10 13:58:45.022770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import unittest\nimport sys\nimport random\n\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import unittest\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649613520,
  "object": "edit"
}
2022-04-10 13:58:45.023057 fix syntax errors 2 ["import unittest\nimport sys\nimport random\n\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n", "import unittest\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:58:50.710731 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649613525,
  "object": "edit"
}
2022-04-10 13:58:50.710998 fix syntax errors 2 ["\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n", "import unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map_[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map_[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map_\n\n    def contains_value(self, value):\n        return value in self.hash_map_.values()\n\n    def remove(self, key):\n        del self.hash_map_[key]\n\n    def clear(self):\n        self.hash_map_ = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map_.keys()\n\n    def value_set(self):\n        return self.hash_map_.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map_ = HashMap()\n    hash_map_.put(0, 0)\n    hash_map_.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map_.put(i, max(hash_map_.get(i), hash_map_.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map_.contains_key(n):\n        return hash_map_.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:58:50.711177 size on output set 4
