["\nn, m, d = map(int, input().split())  # n: number of soldiers, m: number of groups, d: distance\nc = list(map(int, input().split()))  # c[i]: number of soldiers in group i\n\nif sum(c) > n or max(c) > d or d == 1 or (m == 1 and c[0] == 1) or (m == 1 and c[0] > 1):  # impossible\n    print('NO')\n    exit()\n\nprint('YES')\n\nfor i in range(n):\n    if i % 2 == 0:\n        print(1, end=' ')\n        c[0] -= 1\n        if c[0] == 0:\n            c.pop(0)\n            m -= 1\n    else:\n        print(2, end=' ')\n        c[1] -= 1\n        if c[1] == 0:\n            c.pop(1)\n            m -= 1\n    if m == 0:  # all groups are used\n        print('0 ' * (n - i - 1), end='')\n        exit()\n", "#!/usr/bin/env python\n\nimport os\nimport sys\nimport time\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: %s <filename>\" % sys.argv[0])\n        sys.exit(1)\n\n    filename = sys.argv[1]\n    if not os.path.exists(filename):\n        print(\"Error: File '%s' not found\" % filename)\n        sys.exit(1)\n\n    f = open(filename, 'r')\n    while True:\n        where = f.tell()\n        line = f.readline()\n        if not line:\n            time.sleep(1)\n            f.seek(where)\n        else:\n            print(line, end=\"\") # already has newline\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    river = [0] * n\n    i = 0\n\n    for platform_size in c:\n        if i + platform_size + d > n:\n            i = 0\n        river[i:i + platform_size] = [i + 1] * platform_size\n        i += platform_size\n\n    if 0 in river:\n        print('NO')\n        return\n\n    print('YES')\n    print(' '.join(map(str, river)))\n\nmain()\n", "n, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nif sum(c) > n:\n    print('NO')\n    exit()\n\nif max(c) > d:\n    print('NO')\n    exit()\n\nif d == 1:\n    print('NO')\n    exit()\n\nif m == 1 and c[0] == 1:\n    print('YES')\n    print('0 ' * n)\n    exit()\n\nif m == 1 and c[0] > 1:\n    print('YES')\n    print('0 ' * (n - c[0]) + '1 ' * c[0])\n    exit()\n\nprint('YES')\n\ni = 0\nwhile i < n:\n    if m == 0:\n        print('0 ' * (n - i), end='')\n        break\n    if c[0] > d:\n        print('0 ' * d + '1 ' * (c[0] - d), end='')\n        i += c[0]\n    else:\n        print('1 ' * c[0], end='')\n        i += c[0]\n    c.pop(0)\n    m -= 1\n    if m == 0:\n        print('0 ' * (n - i), end='')\n        break\n    if c[0] > d:\n        print('0 ' * (d - 1) + '2 ' * (c[0] - d + 1), end='')\n        i += c[0]\n    else:\n        print('2 ' * c[0], end='')\n        i += c[0]\n    c.pop(0)\n    m -= 1\n", "import sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    river = [0] * n\n    i = 0\n\n    for platform_size in c:\n        if i + platform_size + d > n:\n            i = 0\n        river[i:i + platform_size] = [i + 1] * platform_size\n        i += platform_size\n\n    if 0 in river:\n        print(river)\n        print('NO')\n\n    print('YES')\n    print(' '.join(map(str, river)))\n\nmain()\n", "\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nif sum(c) > n or max(c) > d or d == 1 or (m == 1 and c[0] == 1) or (m == 1 and c[0] > 1) or (m == 2 and c[0] == 1 and c[1] == 1):\n    print('NO')\n    exit()\n\nprint('YES')\n\ni = 0\nwhile i < n:\n    if m == 0:\n        print('0 ' * (n - i), end='')\n        break\n    if c[0] > d:\n        print('0 ' * d + '1 ' * (c[0] - d), end='')  # 1\n        i += c[0]\n    else:\n        print('1 ' * c[0], end='')\n        i += c[0]\n    c.pop(0)\n    m -= 1\n    if m == 0:\n        print('0 ' * (n - i), end='')\n        break\n    if c[0] > d:\n        print('0 ' * (d - 1) + '2 ' * (c[0] - d + 1), end='')  # 2\n        i += c[0]\n    else:\n        print('2 ' * c[0], end='')\n        i += c[0]\n    c.pop(0)\n    m -= 1\n", "#!/usr/bin/env python\n\nimport os\nimport sys\nimport time\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: %s <filename>\" % sys.argv[0])\n        sys.exit(1)\n\n    filename = sys.argv[1]\n    if not os.path.exists(filename):\n        print(\"Error: File '%s' not found\" % filename)\n        sys.exit(1)\n\n    f = open(filename, 'r')\n    while True:\n        where = f.tell()\n        line = f.readline()\n        if not line:\n            time.sleep(1)\n            f.seek(where)\n        else:\n            print(line, end='') # already has newline\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(a[-1] - a[0])\n", "const fs = require('fs');\n\nfs.writeFile('test.txt', 'Hello world!', err => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n});\n\nfs.readFile('test.txt', 'utf8', (err, data) =>\n    if (err) throw err;\n    console.log(data);\n);\n\nfs.appendFile('test.txt', '\\nHello again!', err => {\n    if (err) throw err;\n    console.log('The file has been appended!');\n});\n\nfs.readFile('test.txt', 'utf8', (err, data) =>\n    if (err) throw err;\n    console.log(data);\n);\n\nfs.rename('test.txt', 'renamed.txt', err => {\n    if (err) throw err;\n    console.log('The file has been renamed!');\n});\n\nfs.readFile('renamed.txt', 'utf8', (err, data) =>\n    if (err) throw err;\n    console.log(data);\n);\n\nfs.unlink('renamed.txt', err => {\n    if (err) throw err;\n    console.log('The file has been deleted!');\n});\n"]