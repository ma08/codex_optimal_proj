2022-04-10 13:31:42.046268 num operations 2
2022-04-10 13:31:42.046289 size on input set 1
2022-04-10 13:31:47.438726 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, 0, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    }
  ],
  "created": 1649611902,
  "object": "edit"
}
2022-04-10 13:31:47.438955 fix spelling mistakes 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, 0, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n']
2022-04-10 13:31:47.438982 size on output set 2
2022-04-10 13:31:47.438990 size on input set 2
2022-04-10 13:31:52.701561 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    }
  ],
  "created": 1649611907,
  "object": "edit"
}
2022-04-10 13:31:52.701753 fix syntax errors 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n']
2022-04-10 13:31:57.154803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n"
    }
  ],
  "created": 1649611912,
  "object": "edit"
}
2022-04-10 13:31:57.154989 fix syntax errors 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, -1, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)\n']
2022-04-10 13:31:57.155016 size on output set 1
2022-04-10 13:31:57.155041 num operations 2
2022-04-10 13:31:57.155048 size on input set 1
2022-04-10 13:32:07.782838 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n"
    }
  ],
  "created": 1649611917,
  "object": "edit"
}
2022-04-10 13:32:07.783012 fix spelling mistakes 2 ['\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n']
2022-04-10 13:32:07.783145 size on output set 2
2022-04-10 13:32:07.783155 size on input set 2
2022-04-10 13:32:14.410788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [1, 2, 5, 3, 4]\n# n = 2\n# a = [1, 2]\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n# n = 5\n# a = [1, 2, 3, 4, 5]\n# n = 5\n# a = [1, 2, 1, 2, 1]\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n"
    }
  ],
  "created": 1649611927,
  "object": "edit"
}
2022-04-10 13:32:14.410967 fix syntax errors 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [1, 2, 5, 3, 4]\n# n = 2\n# a = [1, 2]\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n# n = 5\n# a = [1, 2, 3, 4, 5]\n# n = 5\n# a = [1, 2, 1, 2, 1]\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))\n']
2022-04-10 13:32:19.056786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n"
    }
  ],
  "created": 1649611934,
  "object": "edit"
}
2022-04-10 13:32:19.057062 fix syntax errors 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subsequence(a):\n    """\n    :param a: list\n    :return: int\n    """\n    n = len(a)\n    ans = max_increasing_subsequence(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subsequence(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subsequence(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subsequence(a))\n']
2022-04-10 13:32:19.057126 size on output set 3
2022-04-10 13:32:19.057139 num operations 2
2022-04-10 13:32:19.057147 size on input set 1
2022-04-10 13:32:24.258787 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    }
  ],
  "created": 1649611939,
  "object": "edit"
}
2022-04-10 13:32:24.259147 fix spelling mistakes 2 ['\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n']
2022-04-10 13:32:24.259180 size on output set 2
2022-04-10 13:32:24.259191 size on input set 2
2022-04-10 13:32:28.842802 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    }
  ],
  "created": 1649611944,
  "object": "edit"
}
2022-04-10 13:32:28.842985 fix syntax errors 2 ['n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n', 'n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] <= a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n']
2022-04-10 13:32:33.730982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit(0)\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n"
    }
  ],
  "created": 1649611949,
  "object": "edit"
}
2022-04-10 13:32:33.731300 fix syntax errors 2 ['n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n', 'n = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit(0)\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)\n']
2022-04-10 13:32:33.731335 size on output set 3
