["\n\ndef solution(n, array):\n    l = 1\n    r = 1\n    i = 1\n    j = 1\n    temp = array[0]\n    while i < n:\n        if array[i] > temp:\n            l += 1\n            temp = array[i]\n        i += 1\n    temp = array[n-1]\n    while j < n:\n        if array[n-1-j] < temp:\n            r += 1\n            temp = array[n-1-j]\n        j += 1\n    if l > r:\n        return l\n    else:\n        return r\n\n\nn = int(input())\narray = [int(x) for x in input().split()]\n\nprint(solution(n, array))\n", "\n\ndef solution(n, array):\n    l = 1\n    r = 1\n    i = 1\n    j = 1\n    temp = array[0]\n    string = 'L'\n    while i < n:\n        if array[i] > temp:\n            l += 1\n            temp = array[i]\n            string += 'L'\n        i += 1\n    temp = array[n-1]\n    string = 'R'\n    while j < n:\n        if array[n-1-j] < temp:\n            r += 1\n            temp = array[n-1-j]\n            string += 'R'\n        j += 1\n    if l > r:\n        return l, string\n    else:\n        return r, string[::-1]\n\n\nn = int(input())\narray = [int(x) for x in input().split()]\n\nprint(solution(n, array)[0])\nprint(solution(n, array)[1])\n", "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R', end='')\n    print()\n    exit()\n\n# lis_len[i] is the length of the longest increasing subsequence ending at index i\nlis_len = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < a[i] and lis_len[j] + 1 > lis_len[i]:\n            lis_len[i] = lis_len[j] + 1\n\n# lds_len[i] is the length of the longest decreasing subsequence starting at index i\nlds_len = [1] * n\nfor i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n        if a[j] < a[i] and lds_len[j] + 1 > lds_len[i]:\n            lds_len[i] = lds_len[j] + 1\n\n# lcs_len[i] is the length of the longest increasing subsequence ending before index i and\n# the longest decreasing subsequence starting at index i, i.e. the length of the longest\n# increasing subsequence ending at index i\nlcs_len = [0] * n\nfor i in range(n):\n    lcs_len[i] = lis_len[i] + lds_len[i] - 1\n\n# the answer is the maximum of the lcs lengths\nprint(max(lcs_len))\n\n# reconstruct the answer\nans = []\nmax_len = max(lcs_len)\nfor i in range(n):\n    if lcs_len[i] == max_len:\n        # we can start at index i because it is the start of a longest decreasing subsequence\n        ans.append(i)\n        break\n\n# reconstruct the answer from left to right\nfor i in range(ans[-1] + 1, n):\n    if a[ans[-1]] < a[i] and lis_len[i] + 1 == lis_len[ans[-1]]:\n        ans.append(i)\n\n# reconstruct the answer from right to left\nfor i in range(ans[0] - 1, -1, -1):\n    if a[ans[0]] > a[i] and lds_len[i] + 1 == lds_len[ans[0]]:\n        ans.insert(0, i)\n\n# output which side was chosen at each step\nfor i in range(max_len):\n    if ans[i] == i:\n        print('R', end='')\n    else:\n        print('L', end='')\nprint()\n", "\n\ndef solution(n, array, string):\n    l = 1\n    r = 1\n    i = 1\n    j = 1\n    temp = array[0]\n    while i < n:\n        if array[i] > temp:\n            l += 1\n            temp = array[i]\n            string += 'L'\n        i += 1\n    temp = array[n-1]\n    while j < n:\n        if array[n-1-j] < temp:\n            r += 1\n            temp = array[n-1-j]\n            string += 'R'\n        j += 1\n    if l > r:\n        return l\n    else:\n        return r\n\n\nn = int(input())\narray = [int(x) for x in input().split()]\n\nprint(solution(n, array, 'L'))\nprint(solution(n, array, 'R'))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Feb  1 15:27:40 2018\n@author: joseph\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n# lis_len[i] is the longest increasing subsequence ending before index i\nlis_len = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < a[i] and lis_len[j] + 1 > lis_len[i]:\n            lis_len[i] = lis_len[j] + 1\n# lds_len[i] is the longest decreasing subsequence starting after index i\nlds_len = [1] * n\nfor i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n        if a[j] < a[i] and lds_len[j] + 1 > lds_len[i]:\n            lds_len[i] = lds_len[j] + 1\n# lcs_len[i] is the longest increasing subsequence ending before index i and\n# the longest decreasing subsequence starting after index i\nlcs_len = [0] * n\nfor i in range(n):\n    lcs_len[i] = lis_len[i] + lds_len[i] - 1\n# the answer is the maximum of the lcs lengths\nprint(max(lcs_len))\n# reconstruct the answer\nans = []\nmax_len = max(lcs_len)\nfor i in range(n):\n    if lcs_len[i] == max_len:\n        # we can start at index i because it is the start of a longest decreasing subsequence\n        ans.append(i)\n        break\n# reconstruct the answer from left to right\nfor i in range(ans[-1] + 1, n):\n    if a[ans[-1]] < a[i] and lis_len[i] + 1 == lis_len[ans[-1]]:\n        ans.append(i)\n# reconstruct the answer from right to left\nfor i in range(ans[0] - 1, -1, -1):\n    if a[ans[0]] > a[i] and lds_len[i] + 1 == lds_len[ans[0]]:\n        ans.insert(0, i)\n# output which side was chosen at each step\nfor i in range(max_len):\n    if ans[i] == i:\n        print('R', end='')\n    else:\n        print('L', end='')\nprint()\n", "from collections import deque\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = deque()\n    r = deque()\n    ans = []\n    while a:\n        if not l:\n            l.append(a.pop(0))  # pop(0) is O(n)\n            ans.append('L')\n        elif not r:\n            r.append(a.pop())  # pop() is O(1)\n            ans.append('R')\n        elif l[-1] < r[0]:\n            r.appendleft(a.pop())\n            ans.append('R')\n        elif l[-1] < a[0]:\n            l.append(a.pop(0))\n            ans.append('L')\n        elif r[-1] < a[-1]:\n            r.appendleft(a.pop())\n            ans.append('R')\n        else:\n            break\n    print(len(l) + len(r))\n    print(''.join(ans))\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\n# lis_len[i] is the length of the longest increasing subsequence ending at index i\nlis_len = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < a[i] and lis_len[j] + 1 > lis_len[i]:\n            lis_len[i] = lis_len[j] + 1\n\n# lds_len[i] is the length of the longest decreasing subsequence starting at index i\nlds_len = [1] * n\nfor i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n        if a[j] < a[i] and lds_len[j] + 1 > lds_len[i]:\n            lds_len[i] = lds_len[j] + 1\n\n# lcs_len[i] is the length of the longest increasing subsequence ending before index i and\n# the longest decreasing subsequence starting at index i, i.e. the length of the longest\n# increasing subsequence ending at index i\nlcs_len = [0] * n\nfor i in range(n):\n    lcs_len[i] = lis_len[i] + lds_len[i] - 1\n\n# the answer is the maximum of the lcs lengths\nprint(max(lcs_len))\n\n# reconstruct the answer\nans = []\nmax_len = max(lcs_len)\nfor i in range(n):\n    if lcs_len[i] == max_len:\n        # we can start at index i because it is the start of a longest decreasing subsequence\n        ans.append(i)\n        break\n\n# reconstruct the answer from left to right\nfor i in range(ans[-1] + 1, n):\n    if a[ans[-1]] < a[i] and lis_len[i] + 1 == lis_len[ans[-1]]:\n        ans.append(i)\n\n# reconstruct the answer from right to left\nfor i in range(ans[0] - 1, -1, -1):\n    if a[ans[0]] > a[i] and lds_len[i] + 1 == lds_len[ans[0]]:\n        ans.insert(0, i)\n\n# output which side was chosen at each step\nfor i in range(max_len):\n    if ans[i] == i:\n        print('R', end='')\n    else:\n        print('L', end='')\nprint()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\n# lis_len[i] is the longest increasing subsequence ending before index i\nlis_len = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < a[i] and lis_len[j] + 1 > lis_len[i]:\n            lis_len[i] = lis_len[j] + 1\n\n# lds_len[i] is the longest decreasing subsequence starting after index i\nlds_len = [1] * n\nfor i in range(n - 2, -1, -1):\n    for j in range(i + 1, n):\n        if a[j] < a[i] and lds_len[j] + 1 > lds_len[i]:\n            lds_len[i] = lds_len[j] + 1\n\n# lcs_len[i] is the longest increasing subsequence ending before index i and\n# the longest decreasing subsequence starting after index i\nlcs_len = [0] * n\nfor i in range(n):\n    lcs_len[i] = lis_len[i] + lds_len[i] - 1\n\n# the answer is the maximum of the lcs lengths\nprint(max(lcs_len))\n\n# reconstruct the answer\nans = []\nmax_len = max(lcs_len)\nfor i in range(n):\n    if lcs_len[i] == max_len:\n        # we can start at index i because it is the start of a longest\n        # decreasing subsequence\n        ans.append(i)\n        break\n\n# reconstruct the answer from left to right\nfor i in range(ans[-1] + 1, n):\n    if a[ans[-1]] < a[i] and lis_len[i] + 1 == lis_len[ans[-1]]:\n        ans.append(i)\n\n# reconstruct the answer from right to left\nfor i in range(ans[0] - 1, -1, -1):\n    if a[ans[0]] > a[i] and lds_len[i] + 1 == lds_len[ans[0]]:\n        ans.insert(0, i)\n\n# output which side was chosen at each step\nfor i in range(max_len):\n    if ans[i] == i:\n        print('R', end='')\n    else:\n        print('L', end='')\nprint()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    left = []\n    right = []\n    answer = []\n    while a:\n        if not left:\n            left.append(a.pop(0))\n            answer.append('L')\n        elif not right:\n            right.append(a.pop())\n            answer.append('R')\n        elif left[-1] < right[-1]:\n            right.append(a.pop())\n            answer.append('R')\n        elif left[-1] < a[0]:\n            left.append(a.pop(0))\n            answer.append('L')\n        elif right[-1] < a[-1]:\n            right.append(a.pop())\n            answer.append('R')\n        else:\n            break\n    print(len(left) + len(right), ''.join(answer))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d = [0] * n\n    e = [0] * m\n    for i in range(n):\n        if a[i] < b[0]:\n            d[i] = 0\n        else:\n            d[i] = bisect.bisect_left(b, a[i])\n    for i in range(m):\n        if b[i] < c[0]:\n            e[i] = 0\n        else:\n            e[i] = bisect.bisect_left(c, b[i])\n    print(d)\n    print(e)\n    print(sum(d))\n    print(sum(e))\n    print(sum(d) * sum(e))\n\n\nif __name__ == '__main__':\n    main()\n"]