["n = int(input())\na = list(map(int, input().split()))\nmaxs = [0] * n\n\nfor i in range(1, n):\n    if a[i] <= 2 * a[i - 1]:\n        maxs[i] = maxs[i - 1] + 1\n    else:\n        maxs[i] = maxs[i - 1]\n\nprint(maxs[-1] + 1)\n", "\n\ndef check_contest(num, prev_diff, max_diff):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    else:\n        if max_diff > 2 * prev_diff:\n            return check_contest(num - 1, prev_diff, max_diff)\n        else:\n            return check_contest(num - 1, max_diff, max_diff)\n\nnum_probs = int(input())\ndifficulties = [int(x) for x in input().split()]\nmax_diff = difficulties[-1]\nprint(check_contest(num_probs, 0, max_diff))\n", "n = int(input())\na = list(map(int, input().split()))\n\nmaxs = [0] * n\n\nfor i in range(1, n):\n    if a[i] <= 2 * a[i - 1]:\n        maxs[i] = maxs[i - 1] + 1\n    else:\n        maxs[i] = maxs[i - 1]\n\nprint(maxs[-1] + 1)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\nmax_length = [0] * n\n\nfor i in range(1, n):\n    if a[i] <= 2 * a[i - 1]:\n        max_length[i] = max_length[i - 1] + 1\n    else:\n        max_length[i] = max_length[i - 1]\n\nprint(max_length[-1] + 1)\n", "\n\ndef check_contest(num, prev_diff, max_diff, count):\n    if num == 1:\n        return count + 1\n    elif num == 2:\n        return count + 2\n    elif num == 3:\n        return count + 3\n    else:\n        if max_diff > 2 * prev_diff:\n            return check_contest(num - 1, prev_diff, max_diff, count + 1)\n        else:\n            return check_contest(num - 1, max_diff, max_diff, count + 1)\n\nnum_probs = int(input())\ndifficulties = [int(x) for x in input().split()]\nmax_diff = difficulties[-1]\nprint(check_contest(num_probs, 0, max_diff, 0))\n", "\n\ndef check_contest(num, prev_diff, max_diff):\n    count = 0\n    if num == 1:\n        return count\n    elif num == 2:\n        return count + 1\n    elif num == 3:\n        return count + 2\n    else:\n        if max_diff > 2 * prev_diff:\n            return check_contest(num - 1, prev_diff, max_diff)\n        else:\n            return check_contest(num - 1, max_diff, max_diff) + 1\n\nnum_probs = int(input())\ndifficulties = [int(x) for x in input().split()]\nmax_diff = difficulties[-1]\nprint(check_contest(num_probs, 0, max_diff))\n", "\ndef check_contest(num, prev_diff, max_diff, count):\n    if num == 1:\n        return count\n    elif num == 2:\n        return count + 1\n    elif num == 3:\n        return count + 2\n    else:\n        if max_diff > 2 * prev_diff:\n            return check_contest(num - 1, prev_diff, max_diff, count)\n        else:\n            return check_contest(num - 1, max_diff, max_diff, count + 1)\n\nnum_probs = int(input())\ndifficulties = [int(x) for x in input().split()]\nmax_diff = difficulties[-1]\nprint(check_contest(num_probs, 0, max_diff, 0))\n"]