2022-04-10 13:52:03.842058 num operations 2
2022-04-10 13:52:03.842082 size on input set 1
2022-04-10 13:52:24.322792 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n#If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n#If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n#If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n#The columns are sorted in the same way.\n#If it is possible, then print \"YES\" and the rows and columns that were inverted. If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n#Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n#Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n#Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n#Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n#Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n#Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to keep track of the number of 1s in each column, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print \"YES\" and the rows and columns that were inverted. If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each column\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each row\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    }
  ],
  "created": 1649613124,
  "object": "edit"
}
2022-04-10 13:52:24.323123 fix spelling mistakes 2 ['\n\n#The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n#If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n#If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n#If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n#The columns are sorted in the same way.\n#If it is possible, then print "YES" and the rows and columns that were inverted. If not, then print "NO".\n\nn, m = map(int, input().split())\n\n#Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n#Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n#Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n#Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n#Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n#Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n#Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n', '\n\n# The idea is to keep track of the number of 1s in each column, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print "YES" and the rows and columns that were inverted. If not, then print "NO".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each column\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each row\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n']
2022-04-10 13:52:24.323259 size on output set 2
2022-04-10 13:52:24.323269 size on input set 2
2022-04-10 13:52:44.795232 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print \"YES\" and the rows and columns that were inverted. If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print \"YES\" and the rows and columns that were inverted. If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    }
  ],
  "created": 1649613144,
  "object": "edit"
}
2022-04-10 13:52:44.795692 fix syntax errors 2 ['\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print "YES" and the rows and columns that were inverted. If not, then print "NO".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n', '\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print "YES" and the rows and columns that were inverted. If not, then print "NO".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each row\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n']
2022-04-10 13:52:54.718705 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print \"YES\" and the rows and columns that were inverted. If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to keep track of the number of 1s in each column, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print \"YES\" and the rows and columns that were inverted.\n# If not, then print \"NO\".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each column\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each row\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print(\"YES\")\n    for i in range(n):\n        print(row_count[i][0], end = \"\")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = \"\")\nelse:\n    print(\"NO\")\n"
    }
  ],
  "created": 1649613165,
  "object": "edit"
}
2022-04-10 13:52:54.719068 fix syntax errors 2 ['\n\n# The idea is to keep track of the number of 1s in each row, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print "YES" and the rows and columns that were inverted. If not, then print "NO".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each row\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each column\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n', '\n\n# The idea is to keep track of the number of 1s in each column, and sort the rows based on the number of 1s in each row.\n# If the number of 1s in the first row is greater than the number of 1s in the second row, invert the first row.\n# If the number of 1s in the second row is greater than the number of 1s in the first row, invert the second row.\n# If the number of 1s in the first row and second row are the same, then check the third row, and so on...\n# The columns are sorted in the same way.\n# If it is possible, then print "YES" and the rows and columns that were inverted.\n# If not, then print "NO".\n\nn, m = map(int, input().split())\n\n# Create a 2D array that stores the number of 1s in each column\nmatrix = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = int(input())\n\n# Create a 2D array that stores the number of 1s in each row\nrow_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each row\nfor i in range(n):\n    for j in range(m):\n        row_count[i][j] = matrix[i][j]\n\n# Create a 2D array that stores the number of 1s in each column\ncolumn_count = [[0 for i in range(m)] for j in range(n)]\n\n# Store the number of 1s in each column\nfor i in range(n):\n    for j in range(m):\n        column_count[j][i] = matrix[i][j]\n\n# Sort the rows based on the number of 1s\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if row_count[i][0] > row_count[j][0]:\n            for k in range(m):\n                row_count[i][k] = 1 - row_count[i][k]\n        elif row_count[i][0] == row_count[j][0]:\n            if row_count[i][1] > row_count[j][1]:\n                for k in range(m):\n                    row_count[i][k] = 1 - row_count[i][k]\n            elif row_count[i][1] == row_count[j][1]:\n                if row_count[i][2] > row_count[j][2]:\n                    for k in range(m):\n                        row_count[i][k] = 1 - row_count[i][k]\n                elif row_count[i][2] == row_count[j][2]:\n                    if row_count[i][3] > row_count[j][3]:\n                        for k in range(m):\n                            row_count[i][k] = 1 - row_count[i][k]\n                    elif row_count[i][3] == row_count[j][3]:\n                        if row_count[i][4] > row_count[j][4]:\n                            for k in range(m):\n                                row_count[i][k] = 1 - row_count[i][k]\n\n# Sort the columns based on the number of 1s\nfor i in range(m - 1):\n    for j in range(i + 1, m):\n        if column_count[i][0] > column_count[j][0]:\n            for k in range(n):\n                column_count[i][k] = 1 - column_count[i][k]\n        elif column_count[i][0] == column_count[j][0]:\n            if column_count[i][1] > column_count[j][1]:\n                for k in range(n):\n                    column_count[i][k] = 1 - column_count[i][k]\n            elif column_count[i][1] == column_count[j][1]:\n                if column_count[i][2] > column_count[j][2]:\n                    for k in range(n):\n                        column_count[i][k] = 1 - column_count[i][k]\n                elif column_count[i][2] == column_count[j][2]:\n                    if column_count[i][3] > column_count[j][3]:\n                        for k in range(n):\n                            column_count[i][k] = 1 - column_count[i][k]\n                    elif column_count[i][3] == column_count[j][3]:\n                        if column_count[i][4] > column_count[j][4]:\n                            for k in range(n):\n                                column_count[i][k] = 1 - column_count[i][k]\n\n# Check if the matrix is sorted\nsorted = True\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] != row_count[i][j]:\n            sorted = False\n            break\n    if not sorted:\n        break\nif sorted:\n    print("YES")\n    for i in range(n):\n        print(row_count[i][0], end = "")\n    print()\n    for i in range(m):\n        print(column_count[i][0], end = "")\nelse:\n    print("NO")\n']
2022-04-10 13:52:54.719190 size on output set 3
2022-04-10 13:52:54.719211 num operations 2
2022-04-10 13:52:54.719219 size on input set 1
2022-04-10 13:53:02.658807 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_2 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_2[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_2[j]:\n                print('NO')\n                return\n    print('YES')\n    print(''.join(map(str, ans)))\n    print(''.join(map(str, ans_2)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_ = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_[j]:\n                print('NO')\n                return\n    print('YES')\n    print(''.join(map(str, ans)))\n    print(''.join(map(str, ans_)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613174,
  "object": "edit"
}
2022-04-10 13:53:02.659152 fix spelling mistakes 2 ['\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_2 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_2[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_2[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(\'\'.join(map(str, ans)))\n    print(\'\'.join(map(str, ans_2)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_ = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(\'\'.join(map(str, ans)))\n    print(\'\'.join(map(str, ans_)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:53:02.659222 size on output set 2
2022-04-10 13:53:02.659238 size on input set 2
2022-04-10 13:53:11.950726 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * m\n    ans_ = [0] * n\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans_[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans_[i] ^ ans[j]:\n                print('NO')\n                return\n    print('YES')\n    print(*ans_)\n    print(*ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_ = [0] * n\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for i in range(n):\n        if [a[i][j] for j in range(m)].count(1) % 2 == 1:\n            ans_[i] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_[j]:\n                print('NO')\n                return\n    print('YES')\n    print(''.join(map(str, ans)))\n    print(''.join(map(str, ans_)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613182,
  "object": "edit"
}
2022-04-10 13:53:11.950895 fix syntax errors 2 ['\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * m\n    ans_ = [0] * n\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans_[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans_[i] ^ ans[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(*ans_)\n    print(*ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_ = [0] * n\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for i in range(n):\n        if [a[i][j] for j in range(m)].count(1) % 2 == 1:\n            ans_[i] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(\'\'.join(map(str, ans)))\n    print(\'\'.join(map(str, ans_)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:53:19.326726 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_1 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_1[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_1[j]:\n                print('NO')\n                return\n    print('YES')\n    print(''.join(map(str, ans)))\n    print(''.join(map(str, ans_1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().rstrip().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_2 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_2[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_2[j]:\n                print('NO')\n                return\n    print('YES')\n    print(' '.join(map(str, ans)))\n    print(' '.join(map(str, ans_2)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649613192,
  "object": "edit"
}
2022-04-10 13:53:19.327030 fix syntax errors 2 ['\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_1 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_1[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_1[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(\'\'.join(map(str, ans)))\n    print(\'\'.join(map(str, ans_1)))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().rstrip().split())) for _ in range(n)]\n    ans = [0] * n\n    ans_2 = [0] * m\n    for i in range(n):\n        if a[i].count(1) % 2 == 1:\n            ans[i] = 1\n    for j in range(m):\n        if [a[i][j] for i in range(n)].count(1) % 2 == 1:\n            ans_2[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != ans[i] ^ ans_2[j]:\n                print(\'NO\')\n                return\n    print(\'YES\')\n    print(\' \'.join(map(str, ans)))\n    print(\' \'.join(map(str, ans_2)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:53:19.327184 size on output set 4
