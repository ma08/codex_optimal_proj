["\nfrom sys import stdin\nfrom math import gcd\n\ndef solve(a):\n    n = len(a)\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return len(list(divisors(g))\n\ndef divisors(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            yield i\n            if n // i != i:\n                yield n // i\n        i += 1\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split())))\n    print(solve(a))\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef lcm(a, b):\n\treturn a * b // gcd(a, b)\n\ndef find_factors(n):\n\tfactors = []\n\tfor i in range(1, n + 1):\n\t\tif n % i == 0:\n\t\t\tfactors.append(i)\n\treturn factors\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\n\tsmallest_number = a[0]\n\tfor i in range(1, n):\n\t\tsmallest_number = lcm(smallest_number, a[i])\n\n\tprint(len(find_factors(smallest_number)))\n\nmain()\n", "\n", "from sys import stdin\nfrom math import gcd\n\ndef solve(a):\n    n = len(a)\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return len(list(divisors(g)))\n\ndef divisors(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            yield i\n            if n // i != i:\n                yield n // i\n        i += 1\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(a))\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\narr = list(map(int, input().split()))\n\n\nimport math\n\n\ndef factorize(num):\n    factors = []\n    while num > 1:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.append(i)\n                num //= i\n                break\n        else:\n            factors.append(num)\n            break\n    return factors\n\n\n\ndef factorize_efficient(num):\n    factors = []\n    while num % 2 == 0:\n        factors.append(2)\n        num //= 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n    if num > 1:\n        factors.append(num)\n    return factors\n\n\n\ndef common_factors(arr):\n    factor_dict = {}\n    for num in arr:\n        factors = factorize_efficient(num)\n        for factor in factors:\n            factor_dict[factor] = factor_dict.get(factor, 0) + 1\n\n    max_occur = max(factor_dict.values())\n    return max_occur\n\n\nprint(common_factors(arr))\n", "\nfrom sys import stdin\nfrom math import gcd\n\ndef solve(a):\n    n = len(a)\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return len(list(divisor(g)))\n\ndef divisor(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            yield i\n            if n // i != i:\n                yield n // i\n        i += 1\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(a))\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    smallest_number = a[0]\n    for i in range(1, n):\n        smallest_number = lcm(smallest_number, a[i])\n\n    print(len(find_factors(smallest_number)))\n\nmain()\n", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    smallest_num = a[0]  # \u521d\u671f\u5024\n    for i in range(1, n):\n        smallest_num = lcm(smallest_num, a[i])\n\n    print(len(find_factors(smallest_num)))\n\nmain()\n", "import math\n\nn = int(input())\narr = list(map(int, input().split()))\n\n\ndef factorize(num):\n    factors = []\n    while num > 1:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.append(i)\n                num //= i\n                break\n        else:\n            factors.append(num)\n            break\n    return factors\n\ndef factorize_efficient(num):\n    factors = []\n    while num % 2 == 0:\n        factors.append(2)\n        num //= 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n    if num > 1:\n        factors.append(num)\n    return factors\n\ndef common_factors(arr):\n    factor_dict = {}\n    for num in arr:\n        factors = factorize_efficient(num)\n        for factor in factors:\n            factor_dict[factor] = factor_dict.get(factor, 0) + 1\n\n    max_occur = max(factor_dict.values())\n    return max_occur\n\n\nprint(common_factors(arr))\n", "\nfrom sys import stdin\nfrom math import gcd\n\ndef solve(a):\n    n = len(a)\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return len(list(divisors(g)))\n\ndef divisors(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            yield i\n            if n // i != i:\n                yield n // i\n        i += 1\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(a))\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    smallest_num = a[0]\n    for i in range(1, n):\n        smallest_num = lcm(smallest_num, a[i])\n\n    print(len(find_factors(smallest_num)))\n\nmain()\n", "\nn = int(input())\narr = list(map(int, input().split()))\nimport math\n\ndef factorize(num):\n    factors = []\n    while num > 1:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.append(i)\n                num //= i\n                break\n        else:\n            factors.append(num)\n            break\n    return factors\n\ndef factorize_efficient(num):\n    factors = []\n    while num % 2 == 0:\n        factors.append(2)\n        num //= 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n    if num > 1:\n        factors.append(num)\n    return factors\n\ndef common_factors(arr):\n    factor_dict = {}\n    for num in arr:\n        factors = factorize_efficient(num)\n        for factor in factors:\n            factor_dict[factor] = factor_dict.get(factor, 0) + 1\n\n    max_occur = max(factor_dict.values())\n    return max_occur\n\n\nprint(common_factors(arr))\n"]