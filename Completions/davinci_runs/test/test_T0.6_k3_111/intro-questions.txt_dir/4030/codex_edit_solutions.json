["\n\n# TODO\n# I can't solve the problem.\n# I tried to sort the string using a merge sort,\n# and then assign colors to the sorted string.\n# Although it is not optimal, it is still quite fast. \n", "import os\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[n//2])\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\nimport math\nimport random\nimport heapq \nimport time\nimport copy\nimport itertools\nfrom collections import deque\nfrom functools import reduce\nsys.setrecursionlimit(10**7)\ninf = 10**10\nmod = 10**9 + 7\n\ndr = [1, -1, 0, 0]\ndc = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main2():\n    n = I()\n    a = LI()\n    a.sort()\n    print(a[n//2])\n\ndef main():\n    main2()\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\ns = input()\n\n\ndef solve(n, s,):\n    c = [1] * n\n    for i in range(n - 1):\n        if s[i] < s[i + 1]:\n            continue\n        c[i] = 2\n        for j in range(i + 1, n):\n            if s[j] > s[i]:\n                c[j] = 2\n    if c == [1] * n:\n        return 1, c\n    for i in range(n - 1):\n        if c[i] != c[i + 1]:\n            continue\n        c[i + 1] = 3\n        for j in range(i + 1, n):\n            if c[j] == c[i]:\n                c[j] = 3\n        break\n    return max(c), c\n\nans, c = solve(n, s)\nprint(ans)\nprint(*c)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    a = [0] * n\n    c = [0] * n\n    for i in range(n):\n        a[i] = ord(s[i])-ord('a')\n    ans = 1\n    for i in range(1,n):\n        if a[i]<a[i-1]:\n            ans+=1\n        c[i] = ans\n    print(ans)\n    print(*c, sep=' ')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n# I can't solve the problem.\n# I tried to sort the string using a merge sort algorithm\n# and then assign colors to the sorted strings.\n# Although it is not optimal, it is still quite fast.\n", "\n\n# TODO\n# I can't solve the problem.\n# I tried to sort the string using a merge sort algorithm and then assign colors to the sorted string.\n# Although it is not optimal, it is still quite fast. \n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    a = [0] * n\n    c = [0] * n\n    for i in range(n):\n        a[i] = ord(s[i])-ord('a')\n    ans = 1\n    for i in range(1,n):\n        if a[i]<a[i-1]:\n            ans+=1\n        c[i] = ans\n    print(ans)\n    print(*c)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO:\n# I can't solve the problem. I tried to sort the string using a merge sort,\n# and then assign colors to the sorted string. Although it is not optimal, it is still quite fast.\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    c = [1] * n\n    for i in range(n - 1):\n        if s[i] < s[i + 1]:\n            continue\n        c[i] = 2\n        for j in range(i + 1, n):\n            if s[j] > s[i]:\n                c[j] = 2\n    if c == [1] * n:\n        return 1, c\n    for i in range(n - 1):\n        if c[i] != c[i + 1]:\n            continue\n        c[i + 1] = 3\n        for j in range(i + 1, n):\n            if c[j] == c[i]:\n                c[j] = 3\n        break\n    return max(c), c\n\nans, c = solve(n, s)\nprint(ans)\nprint(*c)\n"]