["#\n# exp = input()\n#\n# # Convert to list of numbers and list of operators\n# nums = []\n# op = []\n#\n# n = ''\n# for c in exp:\n#     if c.isdigit():\n#         n += c\n#     else:\n#         nums.append(int(n))\n#         op.append(c)\n#         n = ''\n# nums.append(int(n))\n#\n# # Evaluate expression using order of operations\n# total = nums[0]\n# for i in range(len(op)):\n#     if op[i] == '+':\n#         total += nums[i+1]\n#     elif op[i] == '-':\n#         total -= nums[i+1]\n#\n# print(total)\n\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef is_palindrome_prime(n):\n    return is_prime(n) and is_palindrome(str(n))\n\n\ndef main():\n    for i in range(100, 1001):\n        if is_palindrome_prime(i):\n            print(i)\n\n\nmain()\n", "\n# Get expression\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "\nexpression = input(\"Enter a expression: \")\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)\n", "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip().split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip() # strip() removes the newline character\n    num = num.split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n", "\n\nexpression = input(\"Enter the expression: \")\n\na = int(expression.split('+')[0])\nb = int(expression.split('+')[1])\nc = int(expression.split('+')[2])\n\nprint(a + b + c)\n", "\nexpression = input(\"Enter an expression: \")\n\na = int(expression.split('+')[0])\nb = int(expression.split('+')[1])\nc = int(expression.split('+')[2])\n\nprint(a - b + c)\n", "exp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operation\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "\n\nexp = input('Enter expression: ')\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "\nexpression = input(\"Enter the expression: \")\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\nprint(a - b + c)\n"]