2022-04-10 13:55:33.051381 num operations 2
2022-04-10 13:55:33.051425 size on input set 1
2022-04-10 13:55:37.838754 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"
    }
  ],
  "created": 1649613333,
  "object": "edit"
}
2022-04-10 13:55:37.839007 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"]
2022-04-10 13:55:37.839046 size on output set 1
2022-04-10 13:55:37.839057 size on input set 1
2022-04-10 13:55:44.043154 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip() # strip() removes the newline character\n    num = num.split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip().split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"
    }
  ],
  "created": 1649613338,
  "object": "edit"
}
2022-04-10 13:55:44.043420 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip() # strip() removes the newline character\n    num = num.split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip().split('-')\n    num = list(map(int, num))\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()\n"]
2022-04-10 13:55:44.043454 size on output set 2
2022-04-10 13:55:44.043472 num operations 2
2022-04-10 13:55:44.043481 size on input set 1
2022-04-10 13:55:48.766753 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "\n\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operation\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"
    }
  ],
  "created": 1649613344,
  "object": "edit"
}
2022-04-10 13:55:48.767096 fix spelling mistakes 2 ["\n#\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "\n\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operation\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"]
2022-04-10 13:55:48.767132 size on output set 2
2022-04-10 13:55:48.767139 size on input set 2
2022-04-10 13:56:04.414755 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get expression\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "#\n# exp = input()\n#\n# # Convert to list of numbers and list of operators\n# nums = []\n# op = []\n#\n# n = ''\n# for c in exp:\n#     if c.isdigit():\n#         n += c\n#     else:\n#         nums.append(int(n))\n#         op.append(c)\n#         n = ''\n# nums.append(int(n))\n#\n# # Evaluate expression using order of operations\n# total = nums[0]\n# for i in range(len(op)):\n#     if op[i] == '+':\n#         total += nums[i+1]\n#     elif op[i] == '-':\n#         total -= nums[i+1]\n#\n# print(total)\n\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef is_palindrome_prime(n):\n    return is_prime(n) and is_palindrome(str(n))\n\n\ndef main():\n    for i in range(100, 1001):\n        if is_palindrome_prime(i):\n            print(i)\n\n\nmain()\n"
    }
  ],
  "created": 1649613348,
  "object": "edit"
}
2022-04-10 13:56:04.415137 fix syntax errors 2 ["\n# Get expression\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "#\n# exp = input()\n#\n# # Convert to list of numbers and list of operators\n# nums = []\n# op = []\n#\n# n = ''\n# for c in exp:\n#     if c.isdigit():\n#         n += c\n#     else:\n#         nums.append(int(n))\n#         op.append(c)\n#         n = ''\n# nums.append(int(n))\n#\n# # Evaluate expression using order of operations\n# total = nums[0]\n# for i in range(len(op)):\n#     if op[i] == '+':\n#         total += nums[i+1]\n#     elif op[i] == '-':\n#         total -= nums[i+1]\n#\n# print(total)\n\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef is_palindrome_prime(n):\n    return is_prime(n) and is_palindrome(str(n))\n\n\ndef main():\n    for i in range(100, 1001):\n        if is_palindrome_prime(i):\n            print(i)\n\n\nmain()\n"]
2022-04-10 13:56:10.750744 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nexp = input('Enter expression: ')\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "exp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operation\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"
    }
  ],
  "created": 1649613364,
  "object": "edit"
}
2022-04-10 13:56:10.751104 fix syntax errors 2 ["\n\nexp = input('Enter expression: ')\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n", "exp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operation\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)\n"]
2022-04-10 13:56:10.751129 size on output set 4
2022-04-10 13:56:10.751140 num operations 2
2022-04-10 13:56:10.751145 size on input set 1
2022-04-10 13:56:15.806768 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nexpression = input()\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)\n"
    },
    {
      "index": 1,
      "text": "\n\nexpression = input(\"Enter the expression: \")\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)\n"
    }
  ],
  "created": 1649613371,
  "object": "edit"
}
2022-04-10 13:56:15.806983 fix spelling mistakes 2 ["\nexpression = input()\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)\n", '\n\nexpression = input("Enter the expression: ")\n\na = int(expression.split(\'-\')[0])\nb = int(expression.split(\'-\')[1])\nc = int(expression.split(\'-\')[2])\n\nprint(a - b + c)\n']
2022-04-10 13:56:15.807006 size on output set 2
2022-04-10 13:56:15.807012 size on input set 2
2022-04-10 13:56:25.202759 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nexpression = input(\"Enter an expression: \")\n\na = int(expression.split('+')[0])\nb = int(expression.split('+')[1])\nc = int(expression.split('+')[2])\n\nprint(a - b + c)\n"
    },
    {
      "index": 1,
      "text": "\nexpression = input(\"Enter a expression: \")\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)\n"
    }
  ],
  "created": 1649613376,
  "object": "edit"
}
2022-04-10 13:56:25.203068 fix syntax errors 2 ['\nexpression = input("Enter an expression: ")\n\na = int(expression.split(\'+\')[0])\nb = int(expression.split(\'+\')[1])\nc = int(expression.split(\'+\')[2])\n\nprint(a - b + c)\n', '\nexpression = input("Enter a expression: ")\n\na = int(expression.split(\'-\')[0])\nb = int(expression.split(\'-\')[1])\nc = int(expression.split(\'-\')[2])\n\nprint(a - b + c)\n']
2022-04-10 13:56:31.974739 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nexpression = input(\"Enter the expression: \")\n\na = int(expression.split('+')[0])\nb = int(expression.split('+')[1])\nc = int(expression.split('+')[2])\n\nprint(a + b + c)\n"
    },
    {
      "index": 1,
      "text": "\nexpression = input(\"Enter the expression: \")\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\nprint(a - b + c)\n"
    }
  ],
  "created": 1649613385,
  "object": "edit"
}
2022-04-10 13:56:31.975016 fix syntax errors 2 ['\n\nexpression = input("Enter the expression: ")\n\na = int(expression.split(\'+\')[0])\nb = int(expression.split(\'+\')[1])\nc = int(expression.split(\'+\')[2])\n\nprint(a + b + c)\n', '\nexpression = input("Enter the expression: ")\n\na = int(expression.split(\'-\')[0])\nb = int(expression.split(\'-\')[1])\nc = int(expression.split(\'-\')[2])\nprint(a - b + c)\n']
2022-04-10 13:56:31.975044 size on output set 4
