2022-04-10 13:42:06.703848 num operations 2
2022-04-10 13:42:06.703882 size on input set 1
2022-04-10 13:42:13.430939 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print \" \".join(map(str, t))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print \" \".join(map(str, t))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649612527,
  "object": "edit"
}
2022-04-10 13:42:13.431171 fix spelling mistakes 2 ['\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print " ".join(map(str, t))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print " ".join(map(str, t))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:42:13.431208 size on output set 1
2022-04-10 13:42:13.431216 size on input set 1
2022-04-10 13:42:19.914766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print(sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j])))\n    print(\" \".join(map(str, t)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print \" \".join(map(str, t))\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649612533,
  "object": "edit"
}
2022-04-10 13:42:19.915177 fix syntax errors 2 ['\n\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print(sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j])))\n    print(" ".join(map(str, t)))\n\nif __name__ == "__main__":\n    main()\n', '\nimport fileinput\n\ndef solve(n, k, a):\n    t = []\n    while len(a) > 0:\n        t.append(sum(1 for i in range(k) if len(a) > 0 and a[i] == max(a)))\n        a = a[t[-1]:]\n    return t\n\ndef main():\n    f = fileinput.input()\n    n, k = map(int, f.readline().split())\n    a = map(int, f.readline().split())\n    t = solve(n, k, a)\n    print sum(max(a[i:i+t[j]]) for j in range(len(t)) for i in range(0, n, t[j]))\n    print " ".join(map(str, t))\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:42:19.915218 size on output set 2
2022-04-10 13:42:19.915238 num operations 2
2022-04-10 13:42:19.915248 size on input set 1
2022-04-10 13:42:30.106817 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j].\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * n for _ in range(n)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"
    }
  ],
  "created": 1649612540,
  "object": "edit"
}
2022-04-10 13:42:30.107091 fix spelling mistakes 2 ["\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j].\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n", "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * n for _ in range(n)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"]
2022-04-10 13:42:30.107299 size on output set 2
2022-04-10 13:42:30.107317 size on input set 2
2022-04-10 13:42:39.170739 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom typing import List\n\n\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))  # type: List[int]\n\n    # dp[i][j] means max profit from first i problems, divided into j groups.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j].\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j]\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"
    }
  ],
  "created": 1649612550,
  "object": "edit"
}
2022-04-10 13:42:39.170923 fix syntax errors 2 ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom typing import List\n\n\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))  # type: List[int]\n\n    # dp[i][j] means max profit from first i problems, divided into j groups.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j].\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n", "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j]\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"]
2022-04-10 13:42:50.214721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * n for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i + 1] = a[i]\n        for j in range(i + 2, n + 1):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j - 1])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 2):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 2):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1]]), end=' ')\n\nsolve()\n"
    }
  ],
  "created": 1649612559,
  "object": "edit"
}
2022-04-10 13:42:50.215022 fix syntax errors 2 ["\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * n for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i] = a[i]\n        for j in range(i + 1, n):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 1):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(i - j + 1):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1] + 1]), end=' ')\n\nsolve()\n", "\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] means max profit from first i problems, divided into j groups\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # max_profit[i][j] means max profit from a[i] to a[j - 1]\n    max_profit = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        max_profit[i][i + 1] = a[i]\n        for j in range(i + 2, n + 1):\n            max_profit[i][j] = max(max_profit[i][j - 1], a[j - 1])\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                for l in range(0, i - j + 2):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + max_profit[l][i - 1])\n\n    print(dp[n][k])\n\n    groups = []\n    group_size = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        for l in range(0, i - j + 2):\n            if dp[i][j] == dp[l][j - 1] + max_profit[l][i - 1]:\n                groups.append((l, i - 1))\n                group_size.append(i - l)\n                i, j = l, j - 1\n                break\n\n    for g in reversed(groups):\n        print(max(a[g[0]:g[1]]), end=' ')\n\nsolve()\n"]
2022-04-10 13:42:50.215064 size on output set 4
2022-04-10 13:42:50.215078 num operations 2
2022-04-10 13:42:50.215085 size on input set 1
2022-04-10 13:43:02.451468 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n is number of days, k is number of workers\n    a = [int(x) for x in input().split()]  # a is the list of profits for each day\n    total_profit = 0\n    days = [0] * k\n\n    for i in range(n):\n        j = (i % k)\n        days[j] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week\n    a = [int(x) for x in input().split()]  # a is the list of profits\n    total_profit = 0  # total profit\n    days = [0] * k  # days is the list of days per week\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days\n        days[j] += 1  # increase the value of days[j] by 1\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit\n            total_profit = a[i]  # then total profit is the profit of day i\n\n    print(total_profit)  # print the total profit\n    print(' '.join(map(str, days)))  # print the days per week\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649612570,
  "object": "edit"
}
2022-04-10 13:43:02.451653 fix spelling mistakes 2 ["\n\ndef main():\n    n, k = map(int, input().split())  # n is number of days, k is number of workers\n    a = [int(x) for x in input().split()]  # a is the list of profits for each day\n    total_profit = 0\n    days = [0] * k\n\n    for i in range(n):\n        j = (i % k)\n        days[j] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week\n    a = [int(x) for x in input().split()]  # a is the list of profits\n    total_profit = 0  # total profit\n    days = [0] * k  # days is the list of days per week\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days\n        days[j] += 1  # increase the value of days[j] by 1\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit\n            total_profit = a[i]  # then total profit is the profit of day i\n\n    print(total_profit)  # print the total profit\n    print(' '.join(map(str, days)))  # print the days per week\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:43:02.451684 size on output set 2
2022-04-10 13:43:02.451692 size on input set 2
2022-04-10 13:43:09.774725 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n is number of days, k is number of workers\n    a = [int(x) for x in input().split()]  # a is the list of profits for each day\n    total_profit = 0\n    days = [0] * k\n\n    for i in range(n):\n        days[i % k] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    total_profit = 0\n    days = [0] * k  # days is a list of the number of days each worker works\n\n    for i in range(n):\n        j = (i % k)  # j is the index of the worker\n        days[j] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649612582,
  "object": "edit"
}
2022-04-10 13:43:09.774938 fix syntax errors 2 ["\n\ndef main():\n    n, k = map(int, input().split())  # n is number of days, k is number of workers\n    a = [int(x) for x in input().split()]  # a is the list of profits for each day\n    total_profit = 0\n    days = [0] * k\n\n    for i in range(n):\n        days[i % k] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    total_profit = 0\n    days = [0] * k  # days is a list of the number of days each worker works\n\n    for i in range(n):\n        j = (i % k)  # j is the index of the worker\n        days[j] += 1\n        if a[i] > total_profit:\n            total_profit = a[i]\n\n    print(total_profit)\n    print(' '.join(map(str, days)))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:43:22.634717 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week.\n    a = [int(x) for x in input().split()]  # a is the list of profits.\n    total_profit = 0  # total profit.\n    days = [0] * k  # days is the list of days per week.\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days.\n        days[j] += 1  # increase the value of days[j] by 1.\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit.\n            total_profit = a[i]  # then total profit is the profit of day i.\n\n    print(total_profit)  # print the total profit.\n    print(' '.join(map(str, days)))  # print the days per week.\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week.\n    a = [int(x) for x in input().split()]  # a is the list of profits.\n    total_profit = 0  # total profit.\n    days = [0] * k  # days is the list of days per week.\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days.\n        days[j] += 1  # increase the value of days[j] by 1.\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit.\n            total_profit = a[i]  # then total profit is the profit of day i.\n\n    print(total_profit)  # print the total profit.\n    print(' '.join(map(str, days)))  # print the days per week.\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649612589,
  "object": "edit"
}
2022-04-10 13:43:22.634918 fix syntax errors 2 ["\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week.\n    a = [int(x) for x in input().split()]  # a is the list of profits.\n    total_profit = 0  # total profit.\n    days = [0] * k  # days is the list of days per week.\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days.\n        days[j] += 1  # increase the value of days[j] by 1.\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit.\n            total_profit = a[i]  # then total profit is the profit of day i.\n\n    print(total_profit)  # print the total profit.\n    print(' '.join(map(str, days)))  # print the days per week.\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())  # n is the number of days, k is the number of days per week.\n    a = [int(x) for x in input().split()]  # a is the list of profits.\n    total_profit = 0  # total profit.\n    days = [0] * k  # days is the list of days per week.\n\n    for i in range(n):\n        j = (i % k)  # j is the index of days.\n        days[j] += 1  # increase the value of days[j] by 1.\n        if a[i] > total_profit:  # if the profit of day i is greater than total profit.\n            total_profit = a[i]  # then total profit is the profit of day i.\n\n    print(total_profit)  # print the total profit.\n    print(' '.join(map(str, days)))  # print the days per week.\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-10 13:43:22.634946 size on output set 3
