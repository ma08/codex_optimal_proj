2022-04-10 13:15:21.271016 num operations 2
2022-04-10 13:15:21.271213 size on input set 1
2022-04-10 13:15:27.047063 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649610921,
  "object": "edit"
}
2022-04-10 13:15:27.047389 fix spelling mistakes 2 ['\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:15:27.047429 size on output set 1
2022-04-10 13:15:27.047436 size on input set 1
2022-04-10 13:15:34.710765 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m, l, r = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % m\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % m\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0, 0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0, 0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649610927,
  "object": "edit"
}
2022-04-10 13:15:34.711153 fix syntax errors 2 ['\n\ndef main():\n    n, m, l, r = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0]\n    for i in range(n):\n        time = a[i] % m\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0]\n    for i in range(n):\n        time = a[i] % m\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be good\n    good = [0, 0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be bad\n    bad = [0, 0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:15:34.711215 size on output set 2
2022-04-10 13:15:34.711245 num operations 2
2022-04-10 13:15:34.711255 size on input set 1
2022-04-10 13:15:39.188153 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n"
    },
    {
      "index": 1,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n"
    }
  ],
  "created": 1649610934,
  "object": "edit"
}
2022-04-10 13:15:39.188570 fix spelling mistakes 2 ['\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n']
2022-04-10 13:15:39.188596 size on output set 1
2022-04-10 13:15:39.188601 size on input set 1
2022-04-10 13:15:49.898772 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n"
    },
    {
      "index": 1,
      "text": "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * 2 for _ in range(n)]\ndp[0][0] = dp[0][1] = 0\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]) + (l <= (a[i - 1] + a[i]) % h < r)\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + (l <= (a[i - 1] + a[i] - 1) % h < r)\n\nprint(max(dp[-1]))\n"
    }
  ],
  "created": 1649610939,
  "object": "edit"
}
2022-04-10 13:15:49.899089 fix syntax errors 2 ['n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))\n', 'n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * 2 for _ in range(n)]\ndp[0][0] = dp[0][1] = 0\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]) + (l <= (a[i - 1] + a[i]) % h < r)\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + (l <= (a[i - 1] + a[i] - 1) % h < r)\n\nprint(max(dp[-1]))\n']
2022-04-10 13:15:49.899131 size on output set 2
2022-04-10 13:15:49.899145 num operations 2
2022-04-10 13:15:49.899155 size on input set 1
2022-04-10 13:15:58.166772 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    #print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    #print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\n    # \u5373d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    #print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    #print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\u9009\u62e9\u6700\u5927\u7684\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649610950,
  "object": "edit"
}
2022-04-10 13:15:58.166991 fix spelling mistakes 2 ['\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    #print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    #print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，\n    # 即d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    #print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    #print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，选择最大的\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:15:58.167132 size on output set 2
2022-04-10 13:15:58.167138 size on input set 2
2022-04-10 13:16:03.658789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\u9009\u62e9\u6700\u5927\u7684\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\u9009\u62e9\u6700\u5927\u7684\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649610958,
  "object": "edit"
}
2022-04-10 13:16:03.659203 fix syntax errors 2 ['\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，选择最大的\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，选择最大的\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:16:14.726859 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\n    # \u5373d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0], c[1])\n    for i in range(2, n):\n        d[i] = max(d[i-1], d[i-2]+c[i])\n    print(d[n-1]) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\uff0c\n    # \u5373d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649610963,
  "object": "edit"
}
2022-04-10 13:16:14.727118 fix syntax errors 2 ['\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，\n    # 即d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0], c[1])\n    for i in range(2, n):\n        d[i] = max(d[i-1], d[i-2]+c[i])\n    print(d[n-1]) \n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # 计算n个时间段内，经过h小时后，每个小时是否在[l,r]内\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    # print(b)\n    # 如果第i个时间段内，经过h小时后，存在a >= l and a <=r，则该时间段是好的\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    # print(c)\n    # 如果第i个时间段是好的，则可以选择在第i-1个时间段，睡i-1天，或者i天，\n    # 即d[i] = max(d[i-1],d[i-2]+c[i])\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 13:16:14.727150 size on output set 3
