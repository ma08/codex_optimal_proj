["\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n", "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\ninstability_max = instability(a)\nfor i in range(n):\n    a_temp = a[:i] + a[i+1:]\n    instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n    if instability_temp < instability_max:\n        instability_max = instability_temp\nprint(instability_max)\n\n# solution 2:\n# a_min = min(a)\n# a_max = max(a)\n# if a.count(a_min) > 1:\n#     instability_max = a_max - a_min\n# else:\n#     instability_max = a_max - a_min\n#     a.remove(a_min)\n#     a_new_max = max(a)\n#     instability_max = min(instability_max, a_new_max - a_min)\n\n# if a.count(a_max) > 1:\n#     instability_max = min(instability_max, a_max - a_min)\n# else:\n#     instability_max = min(instability_max, a_max - a_min)\n#     a.remove(a_max)\n#     a_new_min = min(a)\n#     instability_max = min(instability_max, a_max - a_new_min)\n# print(instability_max)\n", "n = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n", "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    # Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n    min_val = min(a)\n    max_val = max(a)\n    min_idx = a.index(min_val)\n    max_idx = a.index(max_val)\n\n    # If the minimum and maximum values are at different indices, then we can remove either\n    # the minimum value or the maximum value and get instability of zero\n    if min_idx != max_idx:\n        print(0)\n    else:\n        # Otherwise, we need to find the second smallest and second largest value in the array\n        a.remove(min_val)\n        a.remove(max_val)\n        min_val2 = min(a)\n        max_val2 = max(a)\n\n        # The minimum possible instability is the difference between the second largest and\n        # second smallest value\n        print(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\nelse:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min) # instability_max is the instability of the new array\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\nelse:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min) # instability_max is the instability of the new array\nprint(instability_max)\n", "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n"]