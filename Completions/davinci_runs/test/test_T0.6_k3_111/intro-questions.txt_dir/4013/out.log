"""
You are given an array $a$ consisting of $n$ integer numbers.

Let instability of the array be the following value: $\max\limits_{i = 1}^{n} a_i - \min\limits_{i = 1}^{n} a_i$.

You have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 10^5$) — the number of elements in the array $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^5$) — elements of the array $a$.


-----Output-----

Print one integer — the minimum possible instability of the array if you have to remove exactly one element from the array $a$.


-----Examples-----
Input
4
1 3 3 7

Output
2

Input
2
1 100000

Output
0



-----Note-----

In the first example you can remove $7$ then instability of the remaining array will be $3 - 1 = 2$.

In the second example you can remove either $1$ or $100000$ then instability of the remaining array will be $100000 - 100000 = 0$ and $1 - 1 = 0$ correspondingly.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indeces of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indeces, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp)\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - 1)"
    }
  ],
  "created": 1648692133,
  "id": "cmpl-4reQX9zPbyJX3T4euckJPr71qWV0s",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indeces of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indeces, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n\tmain()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp)\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - 1)"
}
REASON stop
