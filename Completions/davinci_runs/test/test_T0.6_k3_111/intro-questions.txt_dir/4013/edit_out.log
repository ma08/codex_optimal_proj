2022-04-10 12:17:50.608073 num operations 2
2022-04-10 12:17:50.608097 size on input set 1
2022-04-10 12:17:57.275989 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indices, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indices, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    }
  ],
  "created": 1649607470,
  "object": "edit"
}
2022-04-10 12:17:57.276398 fix spelling mistakes 2 ['\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indices, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == "__main__":\n\tmain()\n', '\n\ndef main():\n\t# Read input\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\t# Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n\tmin_val = min(a)\n\tmax_val = max(a)\n\tmin_idx = a.index(min_val)\n\tmax_idx = a.index(max_val)\n\n\t# If the minimum and maximum values are at different indices, then we can remove either\n\t# the minimum value or the maximum value and get instability of zero\n\tif min_idx != max_idx:\n\t\tprint(0)\n\telse:\n\t\t# Otherwise, we need to find the second smallest and second largest value in the array\n\t\ta.remove(min_val)\n\t\ta.remove(max_val)\n\t\tmin_val2 = min(a)\n\t\tmax_val2 = max(a)\n\n\t\t# The minimum possible instability is the difference between the second largest and\n\t\t# second smallest value\n\t\tprint(max_val2 - min_val2)\n\nif __name__ == "__main__":\n\tmain()\n']
2022-04-10 12:17:57.276451 size on output set 1
2022-04-10 12:17:57.276460 size on input set 1
2022-04-10 12:18:14.708030 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    # Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n    min_val = min(a)\n    max_val = max(a)\n    min_idx = a.index(min_val)\n    max_idx = a.index(max_val)\n\n    # If the minimum and maximum values are at different indices, then we can remove either\n    # the minimum value or the maximum value and get instability of zero\n    if min_idx != max_idx:\n        print(0)\n    else:\n        # Otherwise, we need to find the second smallest and second largest value in the array\n        a.remove(min_val)\n        a.remove(max_val)\n        min_val2 = min(a)\n        max_val2 = max(a)\n\n        # The minimum possible instability is the difference between the second largest and\n        # second smallest value\n        print(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read input\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    # Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n    min_val = min(a)\n    max_val = max(a)\n    min_idx = a.index(min_val)\n    max_idx = a.index(max_val)\n\n    # If the minimum and maximum values are at different indices, then we can remove either\n    # the minimum value or the maximum value and get instability of zero\n    if min_idx != max_idx:\n        print(0)\n    else:\n        # Otherwise, we need to find the second smallest and second largest value in the array\n        a.remove(min_val)\n        a.remove(max_val)\n        min_val2 = min(a)\n        max_val2 = max(a)\n\n        # The minimum possible instability is the difference between the second largest and\n        # second smallest value\n        print(max_val2 - min_val2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649607477,
  "object": "edit"
}
2022-04-10 12:18:14.708271 fix syntax errors 2 ['\n\ndef main():\n    # Read input\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    # Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n    min_val = min(a)\n    max_val = max(a)\n    min_idx = a.index(min_val)\n    max_idx = a.index(max_val)\n\n    # If the minimum and maximum values are at different indices, then we can remove either\n    # the minimum value or the maximum value and get instability of zero\n    if min_idx != max_idx:\n        print(0)\n    else:\n        # Otherwise, we need to find the second smallest and second largest value in the array\n        a.remove(min_val)\n        a.remove(max_val)\n        min_val2 = min(a)\n        max_val2 = max(a)\n\n        # The minimum possible instability is the difference between the second largest and\n        # second smallest value\n        print(max_val2 - min_val2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    # Find the minimum and maximum value in the array, and the indices of the minimum and maximum values\n    min_val = min(a)\n    max_val = max(a)\n    min_idx = a.index(min_val)\n    max_idx = a.index(max_val)\n\n    # If the minimum and maximum values are at different indices, then we can remove either\n    # the minimum value or the maximum value and get instability of zero\n    if min_idx != max_idx:\n        print(0)\n    else:\n        # Otherwise, we need to find the second smallest and second largest value in the array\n        a.remove(min_val)\n        a.remove(max_val)\n        min_val2 = min(a)\n        max_val2 = max(a)\n\n        # The minimum possible instability is the difference between the second largest and\n        # second smallest value\n        print(max_val2 - min_val2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-10 12:18:14.708312 size on output set 1
2022-04-10 12:18:14.708325 num operations 2
2022-04-10 12:18:14.708331 size on input set 1
2022-04-10 12:18:19.868345 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - 1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n"
    }
  ],
  "created": 1649607494,
  "object": "edit"
}
2022-04-10 12:18:19.868722 fix spelling mistakes 2 ['\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - 1)\n', '\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n']
2022-04-10 12:18:19.868754 size on output set 2
2022-04-10 12:18:19.868764 size on input set 2
2022-04-10 12:18:24.384899 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n"
    }
  ],
  "created": 1649607500,
  "object": "edit"
}
2022-04-10 12:18:24.385081 fix syntax errors 2 ['\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n', '\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n']
2022-04-10 12:18:29.619963 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n"
    }
  ],
  "created": 1649607504,
  "object": "edit"
}
2022-04-10 12:18:29.620121 fix syntax errors 2 ['n = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n', '\nn = int(input())\narr = [int(x) for x in input().split()]\n\nprint(max(arr) - min(arr) - n)\n']
2022-04-10 12:18:29.620139 size on output set 2
2022-04-10 12:18:29.620149 num operations 2
2022-04-10 12:18:29.620155 size on input set 1
2022-04-10 12:18:44.384613 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min\nelse:\n    instability_max = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min)\nelse:\n    instability_max = min(instability_max, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min)\nprint(instability_max)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min\nelse:\n    instability_max = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min)\nelse:\n    instability_max = min(instability_max, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min)\nprint(instability_max)\n"
    }
  ],
  "created": 1649607509,
  "object": "edit"
}
2022-04-10 12:18:44.385019 fix spelling mistakes 2 ['\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min\nelse:\n    instability_max = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min)\nelse:\n    instability_max = min(instability_max, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min)\nprint(instability_max)\n', '\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min\nelse:\n    instability_max = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min)\nelse:\n    instability_max = min(instability_max, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min)\nprint(instability_max)\n']
2022-04-10 12:18:44.385068 size on output set 2
2022-04-10 12:18:44.385079 size on input set 2
2022-04-10 12:19:03.168051 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\ninstability_max = instability(a)\nfor i in range(n):\n    a_temp = a[:i] + a[i+1:]\n    instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n    if instability_temp < instability_max:\n        instability_max = instability_temp\nprint(instability_max)\n\n# solution 2:\n# a_min = min(a)\n# a_max = max(a)\n# if a.count(a_min) > 1:\n#     instability_max = a_max - a_min\n# else:\n#     instability_max = a_max - a_min\n#     a.remove(a_min)\n#     a_new_max = max(a)\n#     instability_max = min(instability_max, a_new_max - a_min)\n\n# if a.count(a_max) > 1:\n#     instability_max = min(instability_max, a_max - a_min)\n# else:\n#     instability_max = min(instability_max, a_max - a_min)\n#     a.remove(a_max)\n#     a_new_min = min(a)\n#     instability_max = min(instability_max, a_max - a_new_min)\n# print(instability_max)\n"
    }
  ],
  "created": 1649607524,
  "object": "edit"
}
2022-04-10 12:19:03.168318 fix syntax errors 2 ['\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n', '\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\ninstability_max = instability(a)\nfor i in range(n):\n    a_temp = a[:i] + a[i+1:]\n    instability_temp = instability(a_temp) # instability(a_temp) = max(a_temp) - min(a_temp)\n    if instability_temp < instability_max:\n        instability_max = instability_temp\nprint(instability_max)\n\n# solution 2:\n# a_min = min(a)\n# a_max = max(a)\n# if a.count(a_min) > 1:\n#     instability_max = a_max - a_min\n# else:\n#     instability_max = a_max - a_min\n#     a.remove(a_min)\n#     a_new_max = max(a)\n#     instability_max = min(instability_max, a_new_max - a_min)\n\n# if a.count(a_max) > 1:\n#     instability_max = min(instability_max, a_max - a_min)\n# else:\n#     instability_max = min(instability_max, a_max - a_min)\n#     a.remove(a_max)\n#     a_new_min = min(a)\n#     instability_max = min(instability_max, a_max - a_new_min)\n# print(instability_max)\n']
2022-04-10 12:19:15.951707 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\nelse:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min) # instability_max is the instability of the new array\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\nelse:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min) # instability_max is the instability of the new array\nprint(instability_max)\n"
    }
  ],
  "created": 1649607543,
  "object": "edit"
}
2022-04-10 12:19:15.952013 fix syntax errors 2 ['\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_min = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_min:\n#         instability_min = instability_temp\n# print(instability_min)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_min = a_max - a_min\nelse:\n    instability_min = a_max - a_min\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_min = min(instability_min, a_new_max - a_min)\n\nif a.count(a_max) > 1:\n    instability_min = min(instability_min, a_max - a_min)\nelse:\n    instability_min = min(instability_min, a_max - a_min)\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_min = min(instability_min, a_max - a_new_min)\nprint(instability_min)\n', '\n\ndef instability(a):\n    return max(a) - min(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\n# solution 1:\n# instability_max = instability(a)\n# for i in range(n):\n#     a_temp = a[:i] + a[i+1:]\n#     instability_temp = instability(a_temp) # instability_temp is the instability of the new array\n#     if instability_temp < instability_max:\n#         instability_max = instability_temp\n# print(instability_max)\n\n# solution 2:\na_min = min(a)\na_max = max(a)\nif a.count(a_min) > 1:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\nelse:\n    instability_max = a_max - a_min # instability_max is the instability of the new array\n    a.remove(a_min)\n    a_new_max = max(a)\n    instability_max = min(instability_max, a_new_max - a_min) # instability_max is the instability of the new array\n\nif a.count(a_max) > 1:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\nelse:\n    instability_max = min(instability_max, a_max - a_min) # instability_max is the instability of the new array\n    a.remove(a_max)\n    a_new_min = min(a)\n    instability_max = min(instability_max, a_max - a_new_min) # instability_max is the instability of the new array\nprint(instability_max)\n']
2022-04-10 12:19:15.952212 size on output set 4
