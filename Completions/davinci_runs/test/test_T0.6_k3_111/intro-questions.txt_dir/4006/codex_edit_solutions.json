["\n\ndef f(n):\n    while n % 10 == 0 and n != 0:\n        n /= 10\n    return n + 1\n\ndef main():\n    n = int(input())\n    reachable = set()\n    reachable.add(n)\n    while True:\n        n = f(n)\n        if n in reachable:\n            break\n        reachable.add(n)\n    print(len(reachable))\n\nmain()\n", "#!/bin/bash\n\n# this script is used to create a new file\n\nif [ -f \"$1\" ]\nthen\n\techo \"File '$1' already exists\"\nelse\n\ttouch \"$1\"\n\techo \"File '$1' has been created\"\nfi\n", "#!/bin/bash\n\n# this script is used to create a new file\n\nif [ -f \"$1\" ]\nthen\n\techo \"File $1 already exists.\"\nelse\n\ttouch \"$1\"\n\techo \"File $1 has been created.\"\nfi\n", "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <complex>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <numeric>\nusing namespace std;\ntypedef long long int ll;\ntypedef pair<ll, ll> P;\n#define EPS (1e-7)\n#define INF (1e9)\n#define PI (acos(-1))\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define rrep(i, n) for (int i = (n)-1; i >= 0; i--)\n#define all(v) v.begin(), v.end()\n#define pb push_back\n#define mp make_pair\n#define mod 1000000007\n#define mod2 998244353\n#define MAX 200000\n#define int long long\ntemplate <class T>\ninline bool chmin(T &a, T b)\n{\n    if (a > b)\n    {\n        a = b;\n        return true;\n    }\n    return false;\n}\ntemplate <class T>\ninline bool chmax(T &a, T b)\n{\n    if (a < b)\n    {\n        a = b;\n        return true;\n    }\n    return false;\n}\nint gcd(int a, int b) { return b ? gcd(b, a % b) : a; }\nint lcm(int a, int b) { return a / gcd(a, b) * b; }\nint ceil(int a, int b) { return (a + b - 1) / b; }\nint digitlen(int n) { return ceil(log10(n)); }\nint digit(int n, int k) { return (n / pow(10, k - 1)) % 10; }\nint digitcount(int n) { return digitlen(n) * 9; }\nint digitcount(int n, int k) { return digitlen(n) * (k - 1); }\nint digitfirst(int n) { return n / pow(10, digitlen(n) - 1); }\nint digitlast(int n) { return n % 10; }\nint bitcount(int n)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n = n & (n - 1);\n    }\n    return ret;\n}\nint bitfirst(int n)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n = n >> 1;\n    }\n    return ret;\n}\nint bitlast(int n)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n = (n & (n - 1));\n    }\n    return ret;\n}\nint bitcount(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret += n % k;\n        n /= k;\n    }\n    return ret;\n}\nint bitfirst(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n /= k;\n    }\n    return ret;\n}\nint bitlast(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n %= k;\n    }\n    return ret;\n}\nint digitcount(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret += n % k;\n        n /= k;\n    }\n    return ret;\n}\nint digitfirst(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n /= k;\n    }\n    return ret;\n}\nint digitlast(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n %= k;\n    }\n    return ret;\n}\nint bitcount(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret += n % k;\n        n /= k;\n    }\n    return ret;\n}\nint bitfirst(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n /= k;\n    }\n    return ret;\n}\nint bitlast(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n %= k;\n    }\n    return ret;\n}\nint digitcount(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret += n % k;\n        n /= k;\n    }\n    return ret;\n}\nint digitfirst(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n /= k;\n    }\n    return ret;\n}\nint digitlast(int n, int k)\n{\n    int ret = 0;\n    while (n)\n    {\n        ret++;\n        n %= k;\n    }\n    return ret;\n}\n", "\n\ndef f(n):\n    while n % 10 == 0:\n        n /= 10\n    return n + 1\n\ndef main():\n    n = int(input())\n    reachable_set = set()\n    reachable_set.add(n)\n    while(True):\n        n = f(n)\n        if(n in reachable_set):\n            break\n        reachable_set.add(n)\n    print(len(reachable_set))\n\nmain()\n", "n = int(input())\n\ns = set()\nwhile True:\n    s.add(n)\n    n = f(n + 1)\nprint(len(s))\n", "const fs = require('fs');\n\nfs.writeFileSync('notes.txt', 'My name is Ankit');\nfs.appendFileSync('notes.txt', ' I am a developer');\n\nconst name = require('./utils.js');\nconst sum = require('./utils.js');\n\nconst add = sum(4, -2);\nconsole.log(add);\n\nconst validator = require('validator');\n\nconsole.log(validator.isEmail('ankit@gmail.com'));\nconsole.log(validator.isURL('https://mead.io'));\n\nconst chalk = require('chalk');\n\nconsole.log(chalk.green('Success!'));\nconsole.log(chalk.red('Error!'));\n", "\n\ndef f(n):\n    while(n % 10 == 0):\n        n = n / 10\n    return n + 1\n\ndef main():\n    n = int(input())\n    reachable_set = set()\n    reachable_set.add(n)\n    while(True):\n        n = f(n)\n        if(n in reachable_set):\n            break\n        reachable_set.add(n)\n    print(len(reachable_set))\n\nmain()\n"]