


def solve(n, d):
    # 上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなる最大のKを求める
    # 全探索ではTLE
    # d_iが昇順に並んでいるとき、d_i <= d_j \forall i < jとなる
    # すなわち、上からK問選んだとき、K以下のd_iの個数はK個であり、Kより大きいd_iの個数はN-K個である
    # このとき、K個のd_iの合計と(N-K)個のd_iの合計は等しい
    # すべてのd_iの合計はS=d_1+d_2+...+d_N
    # これを利用して、全探索ではなく、二分探索を行う
    # ただし、二分探索では、Kが固定されたとき、上からK問選んだときのd_iの合計を求める必要がある
    # これは、Kが連続して増加するとき、d_iの合計は増加するから、Kが1増加すると、d_iの合計が1増加する
    # すなわち、d_iの合計はKと線形に依存する
    # つまり、Kが固定されたとき、d_iの合計は、K*(K+1)/2となる
    # これを利用して、二分探索を行う

    # d_iの合計
    S = sum(d)

    # 上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなる最大のKを求める
    # すなわち、K*(K+1)/2=S-K*(N-K)を満たす最大のKを求める
    # このとき、左辺と右辺が等しいとき、Kが答えである
    # このとき、左辺と右辺が等しいとき、
    # K*(K+1)=2S-2K*N+N*(N-1)
    # となる
    # これを変形すると、
    # K^2+K-2S+2K*N-N*(N-1)=0
    # となる
    # これは、二次方程式である
    # このとき、K=(-1+sqrt(1+8S-8N*(N-1)))/2
    # これを利用して、二分探索を行う
    # ただし、8S-8N*(N-1)が負のとき、Kは虚数であるため、このとき、Kは存在しない
    # すなわち、このとき、上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなる最大のKは存在しない
    # このとき、答えは0である
    # ただし、8S-8N*(N-1)が0のとき、K=0である
    # このとき、答えは1である
    # これらを考慮して、二分探索を行う
    if 8 * S - 8 * n * (n - 1) < 0:
        return 0
    else:
        # K=(-1+sqrt(1+8S-8N*(N-1)))/2を切り上げる
        K = -1 + int(math.sqrt(1 + 8 * S - 8 * n * (n - 1)))
        K = K // 2 + 1

        # 上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなるKの個数を求める
        # すなわち、K*(K+1)/2=S-K*(N-K)を満たすKの個数を求める
        # このとき、左辺と右辺が等しいとき、Kが答えである
        # ただし、左辺と右辺が等しいとき、
        # K*(K+1)=2S-2K*N+N*(N-1)
        # となる
        # これを変形すると、
        # K^2+K-2S+2K*N-N*(N-1)=0
        # となる
        # これは、二次方程式である
        # このとき、K=(-1+sqrt(1+8S-8N*(N-1)))/2
        # これを利用して、二分探索を行う
        # ただし、8S-8N*(N-1)が負のとき、Kは虚数であるため、このとき、Kは存在しない
        # すなわち、このとき、上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなる最大のKは存在しない
        # このとき、答えは0である
        # ただし、8S-8N*(N-1)が0のとき、K=0である
        # このとき、答えは1である
        # これらを考慮して、二分探索を行う
        if 8 * S - 8 * n * (n - 1) == 0:
            return 1
        else:
            # K*(K+1)/2=S-K*(N-K)を満たすKの個数を求める
            # このとき、左辺と右辺が等しいとき、Kが答えである
            # ただし、左辺と右辺が等しいとき、
            # K*(K+1)=2S-2K*N+N*(N-1)
            # となる
            # これを変形すると、
            # K^2+K-2S+2K*N-N*(N-1)=0
            # となる
            # これは、二次方程式である
            # このとき、K=(-1+sqrt(1+8S-8N*(N-1)))/2
            # これを利用して、二分探索を行う
            # ただし、8S-8N*(N-1)が負のとき、Kは虚数であるため、このとき、Kは存在しない
            # すなわち、このとき、上からK問選んだときに確実にARCの問題数とABCの問題数が等しくなる最大のKは存在しない
            # このとき、答えは0である
            # ただし、8S-8N*(N-1)が0のとき、K=0である
            # このとき、答えは1である
            # これらを考慮して、二分探索を行う
            cnt = 0
            for k in range(K + 1):
                # 切り捨て
                if k * (k + 1) // 2 == S - k * (n - k):
                    cnt += 1
            return cnt


if __name__ == "__main__":
    n = int(input())
    d = list(map(int, input().split()))
    print(solve(n, d))