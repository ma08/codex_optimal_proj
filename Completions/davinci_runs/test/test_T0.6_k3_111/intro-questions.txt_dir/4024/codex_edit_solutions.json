["n, k = map(int, input().split())\ns = input().strip()\n\nif k > n:\n    print(-1)\n    exit()\n\nsubseqs = []\nsubseqs.append(s)\n\nfor i in range(1, n):\n    for j in range(i+1, n+1):\n        subseqs.append(s[i:j])\n\nsubseqs.sort(key= lambda x: len(x))\n\ncost = 0\nfor i in range(k):\n    cost += len(subseqs[i])\n\nprint(cost)\n", "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    print(subsequence(s, n, k))\n\n\n    if k == 1:\n        return 0\ndef subsequence(s, n, k):\n    if k == n:\n        return 0\n    elif k > n:\n        return -1\n\n    for i in range(n):\n        cost = i + subsequence(s[i:], n - i, k - 1)\n        if cost >= 0 and cost < n:\n            return cost + 1\n    return -1\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        s = sys.stdin.readline().strip()\n        print(subsequence(s))\n\n\ndef subsequence(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] > s[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    return max(dp)\n\n\nif __name__ == '__main__':\n    main()\n", "n, k = map(int, input().split())\ns = input().strip()\n\nif k > n:\n  print(-1)\n  exit()\n\nsubseq = []\nsubseq.append(s)\n\nfor i in range(1, n):\n  for j in range(i+1, n+1):\n    subseq.append(s[i:j])\n\nsubseq.sort(key= lambda x: len(x))\n\ncost = 0\nfor i in range(k):\n  cost += len(subseq[i])\n\nprint(cost)\n", "\ndef main():\n  n, k = map(int, input().split())\n  s = input().strip()\n\n  if k > n:\n    print(-1)\n    exit()\n\n  subseqs = []\n  subseqs.append(s)\n\n  for i in range(1, n):\n    for j in range(i+1, n+1):\n      subseqs.append(s[i:j])\n\n  subseqs.sort(key= lambda x: len(x))\n\n  cost = 0\n  for i in range(k):\n    cost += len(subseqs[i])\n\n  print(cost)\n\nif __name__ == '__main__':\n  main()\n", "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2018  David Arroyo Men\u00e9ndez\n\n# Author: David Arroyo Men\u00e9ndez <davidam@gnu.org>\n# Maintainer: David Arroyo Men\u00e9ndez <davidam@gnu.org>\n\n# This file is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3, or (at your option)\n# any later version.\n\n# This file is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with GNU Emacs; see the file COPYING.  If not, write to\n# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n# Boston, MA 02110-1301 USA,\n\nimport os\n\nprint(\"Current File Name : \", os.path.realpath(__file__)) # /home/davidam/git/python-examples/file.py\n\nprint(\"Current File Name : \", os.path.basename(__file__)) # file.py\n\nprint(\"Current File Name : \", os.path.dirname(__file__)) # /home/davidam/git/python-examples\n\nprint(\"Current File Name : \", os.path.abspath(__file__)) # /home/davidam/git/python-examples/file.py\n\nprint(\"Current File Name : \", os.path.splitext(__file__)) # ('/home/davidam/git/python-examples/file', '.py')\n", "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    if k == 1:\n        print(0)\n    else:\n        print(subsequence(s, n, k))\n\n\ndef subsequence(s, n, k):\n    if k > n:\n        return -1\n\n    cost = 0\n    for i in range(1, n):\n        cost += i\n        cost += subsequence(s[i:], n - i, k - 1)\n        if cost >= 0:\n            return cost\n    return -1\n\n\nif __name__ == '__main__':\n    main()\n", "import os\n\ndef create_file(name, text=None):\n    \"\"\"\n    Create a file\n    \"\"\"\n    with open(name, 'w') as f:\n        if text:\n            f.write(text)\n\n\ndef create_folder(name):\n    \"\"\"\n    Create a folder\n    \"\"\"\n    try:\n        os.mkdir(name)\n    except FileExistsError:\n        print('Folder already exist')\n\n\ndef get_list(folders_only=False):\n    \"\"\"\n    Get list of files/folders in current directory\n    \"\"\"\n    result = os.listdir()\n    if folders_only:\n        result = [f for f in result if os.path.isdir(f)]\n    print(result)\n\n\ndef delete_file(name):\n    \"\"\"\n    Delete a file\n    \"\"\"\n    if os.path.isdir(name):\n        os.rmdir(name)\n    else:\n        os.remove(name)\n\n\nif __name__ == '__main__':\n    create_file('text.dat', 'some text')\n    create_folder('new_folder')\n    get_list()\n    get_list(True)\n    delete_file('text.dat')\n    delete_file('new_folder')\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    print(subsequence(s, n, k))\n\n\ndef subsequence(s, n, k):\n    if k == 1:\n        return -1\n    elif k > n or k < 1:\n        return -1\n\n    cost = -1\n    for i in range(1, n):\n        cost += i\n        cost = max(cost, subsequence(s[i:], n-i, k-1))\n    return cost\n\n\nif __name__ == '__main__':\n    main()\n"]