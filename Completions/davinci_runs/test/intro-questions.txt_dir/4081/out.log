"""
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).

You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.

You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).

For example, for the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$), where $a_i$ is the $i$-th element of $a$. All these integers are pairwise distinct.


-----Output-----

In the first line of the output print $k$ — the maximum number of elements in a strictly increasing sequence you can obtain.

In the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.


-----Examples-----
Input
5
2 1 5 4 3

Output
4
LRRR

Input
7
1 3 5 6 7 4 2

Output
7
LRLRLLL

Input
3
1 2 3

Output
3
LLL

Input
4
1 2 4 3

Output
4
LLRL



-----Note-----

The first example is described in the problem statement.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Solution\n\nn = int(input())\n\na = list(input().split())\n\na = [int(i) for i in a]\n\n#print(a)\n\nind = [0]*n\n\nfor i in range(n):\n    ind[a[i]-1] = i\n\n#print(ind)\n\nleft = a[:]\n\nright = a[:]\n\n#print(left)\n\n#print(right)\n\n\nans = \"\"\n\nwhile len(left) > 0:\n    if len(right) > 0:\n        if ind[left[0]-1] < ind[right[0]-1]:\n            ans += \"L\"\n            left.pop(0)\n        elif ind[left[0]-1] > ind[right[0]-1]:\n            ans += \"R\"\n            right.pop(0)\n        else:\n            if ind[left[-1]-1] < ind[right[0]-1]:\n                ans += \"L\"\n                left.pop(0)\n            elif ind[left[-1]-1] > ind[right[0]-1]:\n                ans += \"R\"\n                right.pop(0)\n            else:\n                if left[0] > right[0]:\n                    ans += \"L\"\n                    left.pop(0)\n                else:\n                    ans += \"R\"\n                    right.pop(0)\n    else:\n        ans += \"L\"\n        left.pop(0)\n\nprint(len(ans))\n\nprint(ans)"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom typing import List\n\n\ndef solve(n: int, a: List[int]) -> List[str]:\n    # Find the next smallest element from the right\n    # Find the next smallest element from the left\n    # If either is the same, then we can increase the size of the subarray\n    # If not, then we must take the one that is smaller\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take the one that is smaller\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    # Create a list of lists of length n, where each sublist is a list of all indices of the element in the list \n    # Example: [1, 2, 3, 3, 3] -> [ [0], [1], [2], [3, 4, 5] ]\n    index_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        index_list[a[i]-1].append(i)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3, 3, 3], [3, 3, 3], [], [], [] ]\n    larger_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        larger_list[i] = a[i+1:]\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2, 3], [1, 2, 3, 3] ]\n    smaller_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        smaller_list[i] = a[:i]\n\n    # Create a list of booleans of length n, where each boolean is True if the element can be the last element of the sequence\n    # Start with all True, and then set False if there is a smaller element in the list\n    # Example: [1, 2, 3, 3, 3] -> [True, True, True, True, True]\n    last_list = [ True for _ in range(n) ]\n    for i in range(n):\n        if len(smaller_list[i]) > 0:\n            last_list[i] = False\n\n    # Create a list of booleans of length n, where each boolean is True if the element can be the first element of the sequence\n    # Start with all True, and then set False if there is a larger element in the list\n    # Example: [1, 2, 3, 3, 3] -> [False, True, True, True, True]\n    first_list = [ True for _ in range(n) ]\n    for i in range(n):\n        if len(larger_list[i]) > 0:\n            first_list[i] = False\n\n    # Create a list of lists of length n, where each sublist is a list of all unique elements that can follow the element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if j not in after_list[i]:\n                after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all unique elements that can preceed the element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if j not in before_list[i]:\n                before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [], [], [], [] ]\n    smaller_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1]:\n                smaller_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1]:\n                larger_first_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1]:\n                larger_first_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1]:\n                smaller_first_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(after_list[j-1]) > 0:\n                larger_first_last_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(before_list[j-1]) > 0:\n                smaller_first_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0:\n                larger_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0:\n                smaller_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or first_list[j-1]:\n                smaller_last_before_first_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be the first element of the sequence,\n    # or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or first_list[j-1] or len(after_list[j-1]) > 0:\n                smaller_last_before_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence, or can be followed by another element, or can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_after_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0 or last_list[j-1]:\n                larger_first_after_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence, or can be followed by another element, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_after_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(after_list[j-1]) > 0 or len(before_list[j-1]) > 0:\n                larger_first_last_after_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_first_last_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                smaller_first_last_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                smaller_first_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_last_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                larger_last_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0:\n                larger_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0:\n                smaller_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [], [], [], [] ]\n    smaller_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1]:\n                smaller_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n       "
    }
  ],
  "created": 1648693653,
  "id": "cmpl-4rep3RS3UF9Q35UOrYuvtuqof77zw",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Solution\n\nn = int(input())\n\na = list(input().split())\n\na = [int(i) for i in a]\n\n#print(a)\n\nind = [0]*n\n\nfor i in range(n):\n    ind[a[i]-1] = i\n\n#print(ind)\n\nleft = a[:]\n\nright = a[:]\n\n#print(left)\n\n#print(right)\n\n\nans = \"\"\n\nwhile len(left) > 0:\n    if len(right) > 0:\n        if ind[left[0]-1] < ind[right[0]-1]:\n            ans += \"L\"\n            left.pop(0)\n        elif ind[left[0]-1] > ind[right[0]-1]:\n            ans += \"R\"\n            right.pop(0)\n        else:\n            if ind[left[-1]-1] < ind[right[0]-1]:\n                ans += \"L\"\n                left.pop(0)\n            elif ind[left[-1]-1] > ind[right[0]-1]:\n                ans += \"R\"\n                right.pop(0)\n            else:\n                if left[0] > right[0]:\n                    ans += \"L\"\n                    left.pop(0)\n                else:\n                    ans += \"R\"\n                    right.pop(0)\n    else:\n        ans += \"L\"\n        left.pop(0)\n\nprint(len(ans))\n\nprint(ans)"
}
REASON stop
1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom typing import List\n\n\ndef solve(n: int, a: List[int]) -> List[str]:\n    # Find the next smallest element from the right\n    # Find the next smallest element from the left\n    # If either is the same, then we can increase the size of the subarray\n    # If not, then we must take the one that is smaller\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take the one that is smaller\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are the same, then we must take either\n    # And we must break the current subarray\n    # The new subarray starts at the index of the next smallest element\n    # If both are"
}
REASON length
2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    # Create a list of lists of length n, where each sublist is a list of all indices of the element in the list \n    # Example: [1, 2, 3, 3, 3] -> [ [0], [1], [2], [3, 4, 5] ]\n    index_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        index_list[a[i]-1].append(i)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3, 3, 3], [3, 3, 3], [], [], [] ]\n    larger_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        larger_list[i] = a[i+1:]\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2, 3], [1, 2, 3, 3] ]\n    smaller_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        smaller_list[i] = a[:i]\n\n    # Create a list of booleans of length n, where each boolean is True if the element can be the last element of the sequence\n    # Start with all True, and then set False if there is a smaller element in the list\n    # Example: [1, 2, 3, 3, 3] -> [True, True, True, True, True]\n    last_list = [ True for _ in range(n) ]\n    for i in range(n):\n        if len(smaller_list[i]) > 0:\n            last_list[i] = False\n\n    # Create a list of booleans of length n, where each boolean is True if the element can be the first element of the sequence\n    # Start with all True, and then set False if there is a larger element in the list\n    # Example: [1, 2, 3, 3, 3] -> [False, True, True, True, True]\n    first_list = [ True for _ in range(n) ]\n    for i in range(n):\n        if len(larger_list[i]) > 0:\n            first_list[i] = False\n\n    # Create a list of lists of length n, where each sublist is a list of all unique elements that can follow the element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if j not in after_list[i]:\n                after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all unique elements that can preceed the element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if j not in before_list[i]:\n                before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [], [], [], [] ]\n    smaller_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1]:\n                smaller_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1]:\n                larger_first_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1]:\n                larger_first_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1]:\n                smaller_first_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(after_list[j-1]) > 0:\n                larger_first_last_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(before_list[j-1]) > 0:\n                smaller_first_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0:\n                larger_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0:\n                smaller_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or first_list[j-1]:\n                smaller_last_before_first_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be the first element of the sequence,\n    # or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_last_before_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or first_list[j-1] or len(after_list[j-1]) > 0:\n                smaller_last_before_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence, or can be followed by another element, or can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_after_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0 or last_list[j-1]:\n                larger_first_after_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first or last element of the sequence, or can be followed by another element, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_last_after_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(after_list[j-1]) > 0 or len(before_list[j-1]) > 0:\n                larger_first_last_after_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first or last element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1], [1], [1] ]\n    smaller_first_last_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or last_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                smaller_first_last_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                smaller_first_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_last_before_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0 or len(after_list[j-1]) > 0:\n                larger_last_before_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the last element of the sequence, or can be preceeded by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [2], [3], [], [], [] ]\n    larger_last_before_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in larger_list[i]:\n            if last_list[j-1] or len(before_list[j-1]) > 0:\n                larger_last_before_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the first element of the sequence, or can be followed by another element\n    # Example: [1, 2, 3, 3, 3] -> [ [], [1], [1, 2], [1, 2], [1, 2] ]\n    smaller_first_after_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if first_list[j-1] or len(after_list[j-1]) > 0:\n                smaller_first_after_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are smaller than that element,\n    # and that can be the last element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [], [], [], [], [] ]\n    smaller_last_list = [ [] for _ in range(n) ]\n    for i in range(n):\n        for j in smaller_list[i]:\n            if last_list[j-1]:\n                smaller_last_list[i].append(j)\n\n    # Create a list of lists of length n, where each sublist is a list of all elements that are larger than that element,\n    # and that can be the first element of the sequence\n    # Example: [1, 2, 3, 3, 3] -> [ [2, 3], [3], [], [], [] ]\n    larger_first_list = [ [] for _ in range(n) ]\n    for i in range(n):\n       "
}
REASON length
