"""
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 300, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
1 4 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\ndef read_input():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    return a, segments\n\ndef solution(a, segments):\n    max_so_far = max(a)\n    min_so_far = min(a)\n    d = max_so_far - min_so_far\n    q = 0\n    chosen_segments = []\n    for l, r in segments:\n        min_in_segment = min(a[l-1:r])\n        max_in_segment = max(a[l-1:r])\n        if max_in_segment - min_in_segment > d:\n            q = 1\n            chosen_segments = [l]\n            d = max_in_segment - min_in_segment\n        elif max_in_segment - min_in_segment == d:\n            q += 1\n            chosen_segments.append(l)\n    print(d)\n    print(q)\n    print(*chosen_segments)\n\nif __name__ == \"__main__\":\n    a, segments = read_input()\n    solution(a, segments)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1648693607,
  "id": "cmpl-4reoJFzHoF33D2gVPNzJEs6ZDjg9F",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\ndef read_input():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    return a, segments\n\ndef solution(a, segments):\n    max_so_far = max(a)\n    min_so_far = min(a)\n    d = max_so_far - min_so_far\n    q = 0\n    chosen_segments = []\n    for l, r in segments:\n        min_in_segment = min(a[l-1:r])\n        max_in_segment = max(a[l-1:r])\n        if max_in_segment - min_in_segment > d:\n            q = 1\n            chosen_segments = [l]\n            d = max_in_segment - min_in_segment\n        elif max_in_segment - min_in_segment == d:\n            q += 1\n            chosen_segments.append(l)\n    print(d)\n    print(q)\n    print(*chosen_segments)\n\nif __name__ == \"__main__\":\n    a, segments = read_input()\n    solution(a, segments)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": ""
}
REASON stop
