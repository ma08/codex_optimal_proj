["def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn = ii()\ns = input().strip()\na = [0] * (n + 1)\nm = [0] * (n + 1)\nfor i in range(n):\n    a[i] = a[i - 1] + (1 if s[i] == '(' else -1)\n    m[i] = min(m[i - 1], a[i])\n\nans = 0\nmm = a[n - 1]\nfor j in range(n - 1, -1, -1):\n    mm = min(mm, a[j])\n    if s[j] == '(':\n        if a[n - 1] == 2 and mm == 2 and m[j - 1] >= 0:\n            ans += 1\n    else:\n        if a[n - 1] == -2 and mm == -2 and m[j - 1] >= 0:\n            ans += 1\n\nprint(ans)\n", "n = int( input() )\nl = list(input() )\ncptMoins = 0\ncptPlus = 0\ncpt = 0\ndead = False\nplusEnd = False\nfor k in range (n):\n\tif(l[k]=='('):\n\t\tcpt+=1\n\t\tcptMoins+=1\n\telse:\n\t\tcpt-=1\n\t\tif(not plusEnd):\n\t\t\tcptPlus+=1\n\tif( cpt < -2): # cas de fin\n\t\tdead = True\n\t\tbreak\n\tif ( cpt < 0): #on doit utiliser un joker avant\n\t\tif(plusEnd or cptPlus==0):#on en a pas ou d\u00e9j\u00e0 utilis\u00e9\n\t\t\tdead = True\n\t\t\tbreak\n\t\telse:\n\t\t\tplusEnd = True\n\t\t\t#on consid\u00e8re qu'on l'a fait\n\t\t\tcpt +=2\n\n\tif cpt<2:\n\t\tcptMoins =0\nif(dead):\n\tprint(0)\nelse:\n\tif( plusEnd and cpt ==0):\n\t\tprint(cptPlus)\n\telif ( not plusEnd and cpt ==2):\n\t\tprint(cptMoins)\n\telse:\n\t\tprint(0)\n", "n = int(input())\nskobs = input()\ncnt9 = 0\nfl = 0\ncnt0 = 0\ncnt10, cnt19 = 0, 0\nbz = float(\"inf\")\nbz2 = float(\"-inf\")\nfor y in range(n):\n    if skobs[y] == \"(\":\n        cnt9 += 1\n    else:\n        cnt0 += 1\n    if cnt0 - cnt9 > 2:\n        fl = 1\n    if cnt0 - cnt9 == 1:\n        bz = min(bz, y)\nfor y2 in range(n-1, -1, -1):\n    if skobs[y2] == \"(\":\n        cnt19 += 1\n    else:\n        cnt10 += 1\n    if cnt19 - cnt10 > 2:\n        fl = 1\n    if cnt19 - cnt10 == 1:\n        bz2 = max(bz2, y2)\nif abs(cnt9-cnt0) != 2 or fl or (bz2 != float(\"-inf\") and bz != float(\"inf\")):\n    print(0)\nelif bz == float(\"inf\") and bz2 != float(\"-inf\"):\n    ww = skobs[bz2:]\n    print(ww.count(\"(\"))\nelif bz2 == float(\"-inf\") and bz != float(\"inf\"):\n    ww = skobs[:bz+1]\n    print(ww.count(\")\"))\n\n\n\n", "_ = input()\ns = list(input())\n\ndef regular(s):\n    k = 0\n    for c in s:\n        if c == '(': k += 1\n        elif c == ')': k -= 1\n        if k < 0: return False\n    return k == 0\n\ndef regular_sums(s):\n    k = 0\n    ks = []\n    for c in s:\n        if c == '(': k += 1\n        elif c == ')': k -= 1\n        ks.append(k)\n    return ks\n\nsums = regular_sums(s)\n\nif sums[-1] == 2:\n    # x <= ia\n    ia = 0\n    while ia < len(sums) and sums[ia] >= 0:\n        ia += 1\n\n    # x > ib\n    ib = len(s) - 1\n    while ib >= 0 and sums[ib] >= 2:\n        ib -= 1\n\n    k = 0\n    for i in range(max(ib + 1, 0), min(ia + 1, len(s))):\n        if s[i] == '(':\n            k += 1\n    print(k)\nelif sums[-1] == -2:\n    # x <= ia\n    ia = 0\n    while ia < len(sums) and sums[ia] >= 0:\n        ia += 1\n\n    # x > ib\n    ib = len(s) - 1\n    while ib >= 0 and sums[ib] >= -2:\n        ib -= 1\n\n    k = 0\n    for i in range(max(ib + 1, 0), min(ia + 1, len(s))):\n        if s[i] == ')':\n            k += 1\n    print(k)\nelse:\n    print(0)\n", "size = int(input())\nseq = input()\noffsets = []\nif seq[0] == \"(\":\n  offsets.append(1)\nelse:\n  offsets.append(-1)\nfor char in seq[1:]:\n  if char == \"(\":\n    offsets.append(offsets[-1] + 1)\n  else:\n    offsets.append(offsets[-1] - 1)\nmin_offsets = [offsets[-1]]*size\nfor idx in range(size-2, -1, -1):\n  min_offsets[idx] = min(min_offsets[idx+1], offsets[idx])\ncounter = 0\nfor idx, char in enumerate(seq):\n  if idx >0:\n    if offsets[idx-1] < 0:\n      break\n  proposed_offset = -2\n  if char == \")\":\n    proposed_offset = 2\n  if min_offsets[idx] + proposed_offset >= 0 and offsets[-1] + proposed_offset == 0:\n    counter+=1\n#     print(idx)\n# print(offsets)\n# print(min_offsets)\nprint(counter)", "\nn = int(input())\ns = input()\np = 0\ngood = [0]*(n+1)\noptions = [0]*(n)\nfor i in range(n):\n    if s[i] == '(':\n        p += 1\n        options[i] = p\n        good[i+1] = good[i]+1\n    else:\n        p -= 1\n        options[i] = p\n        good[i+1] = good[i]\noptions2 = list(reversed(options))\n\nif abs(p) != 2:\n    print(0)\nelse:\n    small = min(options)\n    if p == 2:\n        if small >= 2:\n            print(good[n])\n        elif small < 0:\n            print(0)\n        else:\n            index = -1\n            while options[index] >= 2:\n                index -= 1\n            print(good[n]-good[index])\n    elif p == -2:\n        if small < -2:\n            print(0)\n        elif small == -2:\n            x = options.index(-1)\n            print(x+1-good[x+1])\n", "import sys\n\nn=int(input())\nS=input()\n\nL=[0]\nfor s in S:\n    if s==\"(\":\n        L.append(L[-1]+1)\n    else:\n        L.append(L[-1]-1)\n\nif L[-1]==2:\n    if min(L)<0:\n        print(0)\n        return\n    ANS=0\n\n    for j in range(n,-1,-1):\n        if L[j]<2:\n            #print(j)\n            break\n\n    for k in range(j,n):\n        if S[k]==\"(\":\n            ANS+=1\n\n    print(ANS)\n\nelif L[-1]==-2:\n    if min(L)<-2:\n        print(0)\n        return\n    ANS=0\n\n    for j in range(1,n+1):\n        if L[j]<0:\n            #print(j)\n            break\n\n    for k in range(j-1,-1,-1):\n        if S[k]==\")\":\n            ANS+=1\n\n    print(ANS)\n\nelse:\n    print(0)\n", "def read(type = 1):\n    if type:\n        file = open(\"input.dat\", \"r\")\n        n = int(file.readline())\n        a = file.readline()\n        file.close()\n    else:\n        n = int(input().strip())\n        a = input().strip()\n    return n, a\n\n\ndef solve():\n    sol = 0\n    vs = []\n    v = 0\n    for i in range(n):\n        if a[i] == \"(\":\n            v += 1\n        else:\n            v -= 1\n        vs.append(v)\n    mins = [10000000 for i in range(n)]\n    last = n\n    for i in range(n):\n        if i:\n            mins[n-i-1] = min(vs[n-i-1], mins[n-i])\n        else:\n            mins[n-i-1] = vs[n-i-1]\n        if vs[n-i-1] < 0:\n            last = n-i-1\n    for i in range(n):\n        if a[i] == \"(\" and vs[n-1] == 2:\n            if i:\n                if mins[i] >= 2:\n                    sol += 1\n        if a[i] == \")\" and vs[n-1] == -2:\n            if i != n-1:\n                if mins[i] >= -2:\n                    sol += 1\n        if i == last:\n            break\n    return sol\n\n\nn, a = read(0)\nsol = solve()\nprint(sol)", "#from random import random, randint\nfrom sys import stdout, stdin\nimport math\n\n#n, k = map(int, input().split())\nn = int(input())\ns = input()\n\nzuor = {'(':1, ')':-1}\narr = [zuor[c] for c in s]\nobpos = [z == 1 for z in arr]\n\nsuma, sume = [], []\nakt = 0\nfor z in arr:\n    akt += z\n    suma.append(akt)\nakt = 0\nfor z in reversed(arr):\n    akt -= z\n    sume.append(akt)\nsume = list(reversed(sume))\n\nsumme = sum(arr)\n\nif min(suma) < -2 or min(sume) < -2:\n    print(0)\nelif summe==2:\n    if min(suma)<0:\n        print(0)\n    else:\n        letzte1 = len(suma) - 1 - suma[::-1].index(1)\n        ok = [i>letzte1 for i in range(n)]\n        print(sum((b1 and b2 for b1, b2 in zip(ok, obpos))))\nelif summe==-2:\n    if min(sume)<0:\n        print(0)\n    else:\n        erste1 = sume.index(1)\n        ok = [i<erste1 for i in range(n)]\n        print(sum((b1 and not b2 for b1, b2 in zip(ok, obpos))))\nelse:\n    print(0)\n\n\n\n\n\n\n\n", "n=int(input())\ns=input()\nans = 0\ns1,s2=[],[]\nf1=[1]*n\nf2=[1]*n\nfor i in range(n):\n\ts1.append([0,0])\n\ts2.append([0,0])\n#s1[0][0]=8\n#print(s1,s2)\nif s[0]=='(':\n\ts1[0][0]+=1\nelse:\n\ts1[0][1]+=1\n#print(s1)\nfor i in range(1,n):\n\ts1[i][0]=s1[i-1][0]\n\ts1[i][1]=s1[i-1][1]\n\tif s[i]=='(':\n\t\ts1[i][0]+=1\n\telse:\n\t\ts1[i][1]+=1\n\t#print(s1)\nif s[-1]=='(':\n\ts2[-1][0]+=1\nelse:\n\ts2[-1][1]+=1\n#print(s2)\nfor i in range(n-2,-1,-1):\n\ts2[i][0]=s2[i+1][0]\n\ts2[i][1]=s2[i+1][1]\n\tif s[i]=='(':\n\t\ts2[i][0]+=1\n\telse:\n\t\ts2[i][1]+=1\n#print(s2)\nif s[0]==')':\n\tf1[0]=0\nfor i in range(1,n):\n\tif f1[i-1]==1 and s1[i][1]<=s1[i][0]:\n\t\tf1[i]=1\n\telse:\n\t\tf1[i]=0\nif s[-1]=='(':\n\tf2[-1]=0\nfor i in range(n-2,-1,-1):\n\tif f2[i+1]==1 and s2[i][0]<=s2[i][1]:\n\t\tf2[i]=1\n\telse:\n\t\tf2[i]=0\nfor i in range(n):\n\tt1=s1[-1][0]\n\tt2=s1[-1][1]\n\tif i%2==1:\n\t\tif i+1<n:\n\t\t\tp1=s2[i+1][0]\n\t\t\tp2=s2[i+1][1]\n\t\t\tif p1>p2 or f2[i+1]==0:\n\t\t\t\tcontinue\n\t\tp1=s1[i][0]\n\t\tp2=s1[i][1]\n\t\tq1=s2[i][0]\n\t\tq2=s2[i][1]\n\t\tif s[i]=='(':\n\t\t\tp1-=1\n\t\t\tp2+=1\n\t\t\tt1-=1\n\t\t\tt2+=1\n\t\t\tq1-=1\n\t\t\tq2+=1\n\t\telse:\n\t\t\tp2-=1\n\t\t\tp1+=1\n\t\t\tt1+=1\n\t\t\tt2-=1\n\t\t\tq2-=1\n\t\t\tq1+=1\n\t\tif p2>p1:\n\t\t\tcontinue\n\t\tif q1>q2:\n\t\t\tcontinue\n\t\tif i-1>=0 and f1[i-1]==0:\n\t\t\tcontinue\n\t\tif t1==t2:\n\t\t\tans+=1\n\telse:\n\t\tif i-1>=0:\n\t\t\tp1=s1[i-1][0]\n\t\t\tp2=s1[i-1][1]\n\t\t\tif p2> p1 or f1[i-1]==0:\n\t\t\t\tcontinue\n\t\t#print(\"CHECK\")\n\t\tp1=s2[i][0]\n\t\tp2=s2[i][1]\n\t\tq1=s1[i][0]\n\t\tq2=s1[i][1]\n\t\tif s[i]=='(':\n\t\t\tp1-=1\n\t\t\tp2+=1\n\t\t\tt1-=1\n\t\t\tt2+=1\n\t\t\tq1-=1\n\t\t\tq2+=1\n\t\telse:\n\t\t\tp1+=1\n\t\t\tp2-=1\n\t\t\tt1+=1\n\t\t\tt2-=1\n\t\t\tq1+=1\n\t\t\tq2-=1\n\t\tif p2<p1:\n\t\t\tcontinue\n\t\tif q1<q2:\n\t\t\tcontinue\n\t\tif i+1<n and f2[i+1]==0:\n\t\t\tcontinue\n\t\tif t1==t2:\n\t\t\tans+=1\n\t#print(i,ans)\nprint(ans)\n", "input()\nline = input()\nwasm = -1\nlast0 = 0\nlast1 = -1\ncurs = 0\nerr = False\nfor i in range(len(line)):\n    if line[i]=='(':\n        curs+=1\n    else:\n        curs-=1\n    if curs == 0:\n        last0=i\n    if curs == 1:\n        last1=i\n    if curs < 0:\n        if wasm == -1:\n            wasm=i\n        if curs < -2:\n            err = True\n            break\nif err:\n    print(0)\nelif wasm == -1:\n    if curs != 2:\n        print(0)\n    else:\n        print(int((len(line)-max(last0,last1))/2))\nelse:\n    if curs != -2:\n        print(0)\n    else:\n        print(int(wasm/2) + 1)", "input()\nline = input()\nwasm = -1\nlast0 = 0\nlast1 = -1\ncurs = 0\nerr = False\nfor i in range(len(line)):\n    if line[i]=='(':\n        curs+=1\n    else:\n        curs-=1\n    if curs == 0:\n        last0=i\n    if curs == 1:\n        last1=i\n    if curs < 0:\n        if wasm == -1:\n            wasm=i\n        if curs < -2:\n            err = True\n            break\nif err:\n    print(0)\nelif wasm == -1:\n    if curs != 2:\n        print(0)\n    else:\n        print(int((len(line)-max(last0,last1))/2))\nelse:\n    if curs != -2:\n        print(0)\n    else:\n        print(int(wasm/2) + 1)", "n = int(input())\ns = input()\n\ndef sol(n, S):\n    L = [0]\n    for s in S:\n        if s == \"(\":\n            L.append(L[-1] + 1)\n        else:\n            L.append(L[-1] - 1)\n    ANS = 0\n    L = L[1:]\n    if L[-1] == 2:\n        if min(L) < 0:\n            return 0\n        for j in range(n-1, -1, -1):\n            if L[j] < 2:\n                break\n        for k in range(j+1, n, 1):\n            if S[k] == '(':\n                ANS += 1\n    elif L[-1] == -2:\n        if min(L) < -2:\n            return 0\n        for j in range(n):\n            if L[j] < 0:\n                break\n        for k in range(j, -1, -1):\n            if S[k] == ')':\n                ANS += 1\n    else:\n        ANS = 0\n    return ANS\n\nprint(sol(n, s))", "n = int(input())\nstr = input()\nbalance = 0\nfor x in str:\n  if x == '(':\n    balance += 1\n  else:\n    balance -= 1\n\npre = []\npre_balance = 0\nfor x in str:\n  if x == '(':\n    pre_balance += 1\n  else:\n    pre_balance -= 1\n  pre.append(pre_balance)\n\nsuf = []\nlowest = []\nsuf_balance = 0\nhigh = 0\nlow = 0\nfor x in reversed(str):\n  suf.append(suf_balance)\n  high = max(high, suf_balance)\n  low = suf_balance - high\n  lowest.append(low)\n  if x == '(':\n    suf_balance += 1\n  else:\n    suf_balance -= 1\n  \nsuf.reverse()\nlowest.reverse()\nans = 0\n\nif balance == 2:\n  is_bad = False\n  for i, x in enumerate(str):\n    if is_bad:\n      break\n    if x == '(':\n      new_pre = pre[i] - 2\n      if new_pre >= 0 and new_pre == -suf[i] and new_pre >= -lowest[i]:\n        if i + 1 == n or str[-1] != '(':\n          ans += 1\n    if pre[i] < 0:\n      is_bad = True\nelif balance == -2:\n  is_bad = False\n  for i, x in enumerate(str):\n    if is_bad:\n      break\n    if x == ')':\n      new_pre = pre[i] + 2\n      if new_pre >= 0 and new_pre == -suf[i] and new_pre >= -lowest[i]:\n        if i + 1 == n or str[-1] != '(':\n          ans += 1\n    if pre[i] < 0:\n      is_bad = True\nprint(ans)", "n=int(input())\ns=input()\no=0\nc=0\nn=len(s)\nfor i in range(n):\n\tif s[i]=='(':\n\t\to+=1\n\telse:\n\t\tc+=1\nif n%2!=0:\n\tprint(0)\n\tquit()\n\nif abs(o-c)>2:\n\tprint(0)\n\tquit()\nt=0\ncount=0\nans=0\n\n\nfor i in range(n):\n\tif s[i]=='(':\n\t\tcount+=1\n\telse:\n\t\tcount-=1\n\tif count<-2:\n\t\tt=1\nif t==1:\n\tprint(0)\n\tquit()\n\nind=n-1\ncount=0\nif o>c:\n\tind=-1\n\tfor i in range(n):\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tprint(0)\n\t\t\tquit()\n\t\tif count<2:\n\t\t\tind=i\n\n\tfor i in range(ind+1,n):\n\t\tif count>0 and s[i]=='(':\n\t\t\tans+=1\n\t\t\t\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tt=1\nelif c>o:\n\tfor i in range(n):\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tind=i\n\t\t\tbreak\n\t\t\n\tfor i in range(ind+1):\n\t\tif s[i]==')':\n\t\t\tans+=1\nelse:\n\tprint(0)\n\tquit()\nprint(ans)\n\t\t\n", "n = int(input())\ns = input().strip()\na = [0] * (n + 1)\nm = [0] * (n + 1)\nfor i in range(n):\n    a[i] = a[i-1] + (1 if s[i] == \"(\" else -1)\n    m[i] = min(m[i-1], a[i])\nans = 0\nmm = a[n - 1]\nfor j in range(n - 1, -1, -1):\n    mm = min(mm, a[j])\n    if s[j] == \"(\":\n        ans += a[n - 1] == 2 and mm == 2   and m[j - 1] >= 0\n    else:\n        ans += a[n - 1] == -2 and mm == -2 and m[j - 1] >= 0\n\n\n\nprint(ans)", "def main():\n\tn = int(input())\n\ts = ' ' + input()\n\ta = [0] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tif s[i] == '(':\n\t\t\ta[i] = a[i - 1] + 1\n\t\telse:\n\t\t\ta[i] = a[i - 1] - 1\n\t# print(a) # debug\n\tif a[n] != 2 and a[n] != -2:\n\t\tprint(0)\n\t\treturn\n\tif min(a) < -2:\n\t\tprint(0)\n\t\treturn\n\tif a[n] == 2:\n\t\tif min(a) < 0:\n\t\t\tprint(0)\n\t\t\treturn\n\t\tfor i in range(n, -1, -1):\n\t\t\tif a[i] == 1:\n\t\t\t\tprint(s[(i + 1):].count('('))\n\t\t\t\tbreak\n\telse:\n\t\tfor i in range(n):\n\t\t\tif a[i] == -1:\n\t\t\t\tprint(s[:i + 1].count(')'))\n\t\t\t\tbreak\n\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n=int(input())\na=list(input())\nk=0\nst=[]\nfor i in range(n):\n    if a[i]==')' and len(st)>0 and st[-1][0]=='(':\n        k+=2\n        st.pop()\n    else:\n        st.append([a[i],i+1])\nif n%2==1 or len(st)==0:\n    print(0)\nelif len(st)==2 and st[0][0]==st[1][0]:\n    if st[0][0]=='(':\n        print((n-st[1][1])//2+1)\n    else:\n        print(st[0][1]//2+1)\nelse:\n    print(0)", "n=int(input())\ns=input().strip()\na=[0]*(n+5)\na2=[0]*(n+5)\nmn=[0]*(n+5)\nmn2=[0]*(n+5)\nfor i in range(1,n+1,1):\n    if s[i-1]=='(':\n        a[i]=a[i-1]+1\n    else:\n        a[i]=a[i-1]-1\n    mn[i]=min(mn[i-1],a[i])\n    \nfor i in range(n,0,-1):\n    if s[i-1]==')':\n        a2[i]=a2[i+1]+1\n    else:\n        a2[i]=a2[i+1]-1\n    mn2[i]=min(mn2[i+1],a2[i])\nans=0\nif a[n]!=2 and a[n]!=-2:\n    print((0));\n    return\nfor i in range(1,n+1,1):\n    if s[i-1]=='(' and a[n]==2:\n        if mn[i-1]>=0 and mn2[i+1]>=0 and a[i-1]>=1:\n            ans=ans+1\n    elif s[i-1]==')' and a[n]==-2:\n        if mn[i-1]>=0 and mn2[i+1]>=0 and a2[i+1]>=1:\n            ans=ans+1\n        \nprint(ans)\n    \n", "n = int(input());\ns = list(input())\nstk = []\n\nfor i in range(n):\n  if s[i] == ')' and len(stk) > 0 and stk[-1][0] == '(':\n    stk.pop()\n  else:\n    stk.append([s[i], i + 1])\n\nif n % 2 == 1 or len(stk) == 0:\n  print(0)\nelif len(stk) == 2 and stk[0][0] == stk[1][0]:\n  if stk[0][0] == '(':\n    print((n - stk[1][1]) // 2 + 1)\n  else:\n    print(stk[0][1] // 2 + 1)\nelse:\n  print(0)", "n = int(input())\nS = input()\n\ndef solve(s, counts):\n    openCount = 0\n    closeCount = 0\n    posCount = 0\n    if n % 2 == 1:\n        return posCount\n    for i in range(n):\n        if s[i] == '(':\n            openCount += 1\n        else:\n            closeCount += 1\n        if closeCount - openCount > 2:\n            return posCount\n        else:\n            counts.append([openCount, closeCount])\n    if abs(openCount-closeCount) == 2:\n        if openCount > closeCount:\n            s = s[::-1]\n            s = ['(' if c == ')' else ')' for c in s]\n            counts = []\n            openCount = 0\n            closeCount = 0\n            for i in range(n):\n                if s[i] == '(':\n                    openCount += 1\n                else:\n                    closeCount += 1\n                if closeCount - openCount > 2:\n                    return posCount\n                else:\n                    counts.append([openCount, closeCount])\n        for i in range(n):\n            if counts[i][1] - counts[i][0] < 2 and s[i] == ')':\n                posCount += 1\n            if counts[i][1] > counts[i][0]:\n                break\n        return posCount\n    else:\n        return posCount\n\nprint(solve(S,[]))", "n=int(input())\ns=input()\na=[]\nfor i in s:\n    if i=='(':\n        a.append(-1)\n    else:\n        a.append(1)\n#print (a)\nb=[0]*(n);b[0]=a[0]\nfor i in range(1,n):\n    b[i]=a[i]+b[i-1]\ne=[];c=d=0\nfor i in range(n-1,-1,-1):\n    if b[i]>=-1:\n        c+=1\n    if b[i]>=3:\n        d+=1\n    e.append((c,d))\ne=e[::-1];g=0;ans=0\nfor i in range(n):\n    if a[i]==-1:\n        if e[i][0]==0 and (b[-1]+2)==0 and g==0:\n            ans+=1\n    else:\n        if e[i][1]==0 and (b[-1]-2)==0 and g==0:\n            ans+=1\n    if b[i]>0:\n        g+=1\n#print (b)\n#print(e)\nprint (ans)\n", "def isregular(s):\n    ls=0\n    rs=0\n    for char in s:\n        if char==\"(\":\n            ls+=1\n        else:\n            rs+=1\n        if rs>ls:\n            return False\n    if ls==rs:\n        return True\n    return False\nn=int(input())\ns=input()\nif n%2==1:\n    print(0)\nelse:\n    a=s.count(\"(\")\n    b=n-a\n    diff=[0]\n    for i in range(n):\n        if s[i]==\"(\":\n            diff.append(diff[-1]+1)\n        else:\n            diff.append(diff[-1]-1)\n    if a==b+2:\n        if -1 in diff:\n            print(0)\n        else:\n            backdiff=diff[::-1]\n            last=backdiff.index(1)\n            print(s[-last:].count(\"(\"))\n    elif b==a+2:\n        if -3 in diff:\n            print(0)\n        else:\n            first=diff.index(-1)\n            print(s[:first].count(\")\"))\n    else:\n        print(0)", "# Created by nikita at 30/12/2018\n\nn = int(input())\ns = input()\n\nprefBal = [0] * n\nprefBal.append(0)\nprefCan = [False] * n\nprefCan.append(True)\nsuffBal = [0] * n\nsuffBal.append(0)\nsuffCan = [False] * n\nsuffCan.append(True)\n\ncurrBal = 0\ncurrCan = True\nfor i in range(n):\n    if s[i] == '(':\n        prefBal[i] = currBal + 1\n    else:\n        prefBal[i] = currBal - 1\n    currBal = prefBal[i]\n    prefCan[i] = currCan and (prefBal[i] >= 0)\n    currCan = prefCan[i]\n\ncurrBal = 0\ncurrCan = True\nfor i in range(n-1, -1,- 1):\n    if s[i] == ')':\n        suffBal[i] = currBal + 1\n    else:\n        suffBal[i] = currBal - 1\n    currBal = suffBal[i]\n    suffCan[i] = currCan and (suffBal[i] >= 0)\n    currCan = suffCan[i]\n\n# print(prefBal)\n# print(prefCan)\n# print(suffBal)\n# print(suffCan)\n\nans = 0\nfor i in range(n):\n    if s[i] == '(':\n        if prefCan[i-1] and suffCan[i+1] and prefBal[i-1] - 1 - suffBal[i+1] == 0:\n            ans += 1\n    if s[i] == ')':\n        if prefCan[i-1] and suffCan[i+1] and prefBal[i-1] + 1 - suffBal[i+1] == 0:\n            ans += 1\n\nprint(ans)"]