2022-04-17 21:12:16.381661 num operations 1
2022-04-17 21:12:16.381677 size on input set 1
2022-04-17 21:12:23.316698 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(n)]\n    states = list(map(int, input().split()))\n    switches = [[False] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = not switches[i][bulbs[i][j] - 1]\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** m):\n        flag = True\n        for j in range(n):\n            cnt = 0\n            for k in range(m):\n                if switches[j][k] and ((i >> k) & 1) == 1:\n                    cnt += 1\n            if cnt % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650229936,
  "object": "edit"
}
2022-04-17 21:12:23.316918 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(n)]\n    states = list(map(int, input().split()))\n    switches = [[False] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = not switches[i][bulbs[i][j] - 1]\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** m):\n        flag = True\n        for j in range(n):\n            cnt = 0\n            for k in range(m):\n                if switches[j][k] and ((i >> k) & 1) == 1:\n                    cnt += 1\n            if cnt % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-17 21:12:23.316982 size on output set 2
2022-04-17 21:12:23.316993 num operations 1
2022-04-17 21:12:23.316999 size on input set 1
2022-04-17 21:12:36.851080 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nprint(N, M)\nprint(k_list)\nprint(s_list)\nprint(p_list)\n\ndef make_light(state):\n    print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    print(state)\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 1,
      "text": "\n\n\n# N, M = map(int, input().split())\n#\n# k_list = []\n# s_list = []\n# for i in range(M):\n#     k_list.append(int(input().split()[0]))\n#     s_list.append(list(map(int, input().split())))\n#\n# p_list = list(map(int, input().split()))\n#\n# # print(N, M)\n# # print(k_list)\n# # print(s_list)\n# # print(p_list)\n#\n# def make_light(state):\n#     # print(state)\n#     for i in range(M):\n#         odd_even = 0\n#         for j in range(k_list[i]):\n#             if state[s_list[i][j]-1] == 1:\n#                 odd_even += 1\n#         if odd_even % 2 != p_list[i]:\n#             return False\n#     return True\n#\n# def make_state(state, n):\n#     if n == N:\n#         if make_light(state):\n#             return 1\n#         else:\n#             return 0\n#     else:\n#         return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n#\n# print(make_state([], 0))\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nprint(N, M)\n"
    }
  ],
  "created": 1650229943,
  "object": "edit"
}
2022-04-17 21:12:36.851270 fix syntax errors 2 ['\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nprint(N, M)\nprint(k_list)\nprint(s_list)\nprint(p_list)\n\ndef make_light(state):\n    print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    print(state)\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\n\n\n# N, M = map(int, input().split())\n#\n# k_list = []\n# s_list = []\n# for i in range(M):\n#     k_list.append(int(input().split()[0]))\n#     s_list.append(list(map(int, input().split())))\n#\n# p_list = list(map(int, input().split()))\n#\n# # print(N, M)\n# # print(k_list)\n# # print(s_list)\n# # print(p_list)\n#\n# def make_light(state):\n#     # print(state)\n#     for i in range(M):\n#         odd_even = 0\n#         for j in range(k_list[i]):\n#             if state[s_list[i][j]-1] == 1:\n#                 odd_even += 1\n#         if odd_even % 2 != p_list[i]:\n#             return False\n#     return True\n#\n# def make_state(state, n):\n#     if n == N:\n#         if make_light(state):\n#             return 1\n#         else:\n#             return 0\n#     else:\n#         return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n#\n# print(make_state([], 0))\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nprint(N, M)\n']
2022-04-17 21:12:36.851302 size on output set 2
