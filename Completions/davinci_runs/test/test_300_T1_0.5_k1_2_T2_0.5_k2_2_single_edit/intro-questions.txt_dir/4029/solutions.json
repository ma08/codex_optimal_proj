["import sys\nimport queue\n\nINFINITY = 10**10\n\ndef main():\n    n = input()\n    print(solve(n))\n\n\ndef solve(n):\n    if int(n) < 1000:\n        return brute(n)\n        \n    forward = min([calc(str(n), last_digits) for last_digits in [\"00\", \"25\", \"50\", \"75\"]])\n    reverse = min([calc(str(n), last_digits) + 1 for last_digits in [\"52\", \"05\", \"57\"]])\n    res = min(forward, reverse)\n    \n    if res >= INFINITY:\n        res = -1\n    \n    return res\n\n\ndef calc(n, last_digits):\n    if not last_digits:\n        return 0\n    \n    idx = n.rfind(last_digits[-1])\n    if idx == -1:\n        return INFINITY\n    \n    res = len(n) - idx - 1\n    n = n[:idx] + n[(idx+1):]\n    last_digits = last_digits[:-1]\n    \n    extra = 0\n    if n and n[0] == '0':\n        idx = len(n)\n        for digit in \"123456789\":\n            if n.find(digit) != -1:\n                idx = min(idx, n.find(digit))\n        \n        if idx == len(n):\n            return idx\n        \n        n = swap(n, 0, idx)\n        extra = idx\n    \n    return res + calc(n, last_digits) + extra\n\n\ndef brute(n):\n    q = queue.Queue()\n    dis = dict()\n    \n    q.put(str(n))\n    dis[str(n)] = 0\n    \n    while not q.empty():\n        s = q.get()\n        if int(s) % 25 == 0:\n            return dis[s]\n        \n        for i in range(1, len(s)):\n            j = i - 1\n            t = swap(s, i, j)\n            \n            if t not in dis and t[0] != '0':\n                dis[t] = dis[s] + 1\n                q.put(t)\n    \n    return -1\n\n\ndef swap(s, i, j):\n    chars = list(s)\n    chars[i], chars[j] = chars[j], chars[i]\n    return \"\".join(char for char in chars)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\n\nif int(s)%25 == 0:\n    print(0)\nelse:\n    sols = []\n    d = {}\n    n = list(s)\n    nr = s[::-1]\n    for c in ('0', '2', '5', '7'):\n        p = nr.find(c)\n        d[c] = p\n            \n    for c1, c2 in (('2', '5'),('5', '0') , ('7', '5')):\n        if c1 not in n or c2 not in n:\n            continue\n        \n        dc1 = d[c1]\n        dc2 = d[c2]\n        sol = 0\n        \n        if dc1 == len(n) - 1 and len(n)>1 and n[1] == '0':\n            i = 1\n            while i<len(n) and (n[i] == '0' or dc2 == i ):\n                i+=1\n            if i!=len(n):\n                i-=1\n                sol = i\n                dc1 -= 1\n                if dc2 > len(n) -i -1:\n                    dc2 -= 1\n        \n        if dc2 == len(n) - 1 and len(n)>1 and n[1] == '0':\n            \n            i = 1\n            while i<len(n) and (n[i] == '0' or dc1 == i ):\n                i+=1\n            if i!=len(n):\n                \n                sol = i\n                dc2 -= 1\n                if dc1 > len(n) -i -1:\n                    dc1 -= 1           \n        \n        \n        if dc1 == 0:\n            sols.append(dc2 + sol)\n            continue\n        \n        if dc1 < dc2:\n            sols.append(dc2 + dc1 + sol)\n            \n        else:\n            sols.append(dc2 + dc1 - 1 + sol)\n\n    z1 = nr.find('0')\n    if z1!=-1:\n        z2 = nr.find('0', z1+1)\n        if z2 != -1:\n            sols.append(z1 + z2 - 1)\n    if len(sols) == 0:\n        print(-1)\n    else:\n        print(min(sols))\n", "\ny = input()\nfives = (y.count('5'))\nzeroes = (y.count('0'))\ntwos = (y.count('2'))\nsevens = (y.count('7'))\n\nif fives == 0:\n    if zeroes < 2:\n        print(-1)\n        return\nelse:\n    if zeroes == 0 and twos == 0 and sevens == 0:\n        print(-1)\n        return\n\n\nbest = 5 * len(y)\ny = y[::-1]\nfor xx in [['5','2'], ['0','0'], ['5','7'], ['0','5'] ]:\n    z = y\n    count = 0\n    for x in xx:        \n        if not x in z:\n            count = 5 * len(y)\n            break\n        f = z.index(x)\n        z = z[:f] + z[f+1:]        \n        \n        count += f\n    if len(z) > 2 and z[-1] == '0':\n        valid = False \n        for x in z[::-1]:\n            if x == '0':\n                count += 1\n                continue\n            else:\n                valid = True\n                break\n        if not valid:\n            count += 5 * len(y)\n\n    if count < best:\n        best = count\n\nprint(best)", "inf = float('inf')\n\n\ndef find_right(s, c, j=-1):\n    for i in range(len(s)-1, -1, -1):\n        if i != j and s[i] == c:\n            return i\n    return inf\n\n\ndef swaps(s, c1, c2):\n    if len(s) > 1 and s[-2:] == c1 + c2:\n        return 0\n\n    if len(s) > 1 and s[-2:] == c2 + c1:\n        return 1\n\n    i2 = find_right(s, c2)\n    if i2 == inf:\n        return inf\n\n    i1 = find_right(s, c1, i2)\n    if i1 == inf:\n        return inf\n\n    ans = 0\n    if i2 < i1:\n        ans += abs(len(s) - 2 - (i1 - 1)) + abs(len(s) - 1 - i2)\n    else:\n        ans += abs(len(s) - 2 - i1) + abs(len(s) - 1 - i2)\n\n    s0 = ''.join([si for i, si in enumerate(s) if i != i1 and i != i2])\n    for i in range(len(s0)):\n        if s0[i] != '0':\n            ans += i\n            break\n    else:\n        return inf\n\n    return ans\n\n\nn = input().strip()\nans = min(swaps(n, \"0\", \"0\"), swaps(n, \"2\", \"5\"), swaps(n, \"5\", \"0\"), swaps(n, \"7\", \"5\"))\nprint(ans if ans != inf else -1)\n", "a = input()[::-1]\nd = ['52','05','57']\nif len(a)<2: print(-1)\nelse:\n    if a[:2] in d:\n        print(0)\n    else:\n        ans = 99999999\n        if len([i for i in a if i =='0']) >=2:\n            x,y=-1,-1\n            for i in range(len(a)):\n                if a[i] == '0':\n                    if x<0:x = i\n                    elif y<0:y = i\n                    else:break\n            ans = x+y-1\n            \n            \n        for p in d:\n            x,y = -1,-1\n            for i in range(len(a)):\n                if a[i] == p[0] and x<0:\n                    x = i\n                if a[i] == p[1] and y<0:\n                    y = i\n            if x<0 or y<0: continue\n            # print(x,y)\n            c = 0\n            if x>y:\n                c+=1\n                x,y = y,x\n            if y == len(a)-1 and a[-2] == '0' and x != len(a)-2:\n                # print('-', c)\n                z = -1\n                for i in range(len(a)-1):\n                    if a[i]!='0' and i != x:\n                        z=i\n                if z > 0:    \n                    c+=len(a)-2-z\n            c+=x+y-1\n            # print(c)\n            ans = min(ans,c)\n        if ans == 99999999: ans = -1\n        print(ans)", "k = input()\nimport sys\nMin = sys.maxsize\nif '5' in k and '0' in k:\n    temp = (len(k)-2) - k.rfind('5') + (len(k)-1) - k.rfind('0') \n    if (k.rfind('5') > k.rfind('0')):\n        add = 0\n        i = 1\n        while k[i] == '0':\n            add += 1\n            i += 1\n        temp += add\n    if (temp<Min):\n        Min = temp\nif '2' in k and '5' in k:\n    temp = (len(k)-2) - k.rfind('2') + (len(k)-1) - k.rfind('5') \n    if k.rfind('5')==0 and k[1]=='0' and len(k)>3:\n        add = 0\n        i = 1\n        while k[i] == '0':\n            add += 1\n            i += 1\n        temp += add\n    if (k.rfind('2') > k.rfind('5')):\n        temp += 1\n    if (temp<Min):\n        Min = temp\nif '7' in k and '5' in k:\n    temp = (len(k)-2) - k.rfind('7') + (len(k)-1) - k.rfind('5') \n    if k.rfind('5')==0 and k[1]=='0' and len(k)>3:\n        add = 0\n        i = 1\n        while k[i] == '0':\n            add += 1\n            i += 1\n        temp += add\n    if (k.rfind('7') > k.rfind('5')):\n        temp += 1\n    if (temp<Min):\n        Min = temp\nif k.count('0')>1:\n    css = k.rfind('0')\n    temp = (len(k)-1) - css\n    k = k[:css] + k[css+1:] \n    temp += (len(k)-1) - k.rfind('0') \n    if (temp<Min):\n        Min = temp\nif Min==sys.maxsize:\n    print(-1)\nelse:\n    print(Min)", "k = input()\nimport sys\nMin = sys.maxsize\nif '5' in k and '0' in k:\n    temp = (len(k)-2) - k.rfind('5') + (len(k)-1) - k.rfind('0') \n    if (k.rfind('5') > k.rfind('0')):\n        temp += 1\n    if (temp<Min):\n        Min = temp\nif '2' in k and '5' in k:\n    temp = (len(k)-2) - k.rfind('2') + (len(k)-1) - k.rfind('5') \n    if k.rfind('5')==0 and k[1]=='0' and len(k)>3:\n        add = 0\n        i = 1\n        while k[i] == '0':\n            add += 1\n            i += 1\n        temp += add\n    if (k.rfind('2') > k.rfind('5')):\n        temp += 1\n    if (temp<Min):\n        Min = temp\nif '7' in k and '5' in k:\n    temp = (len(k)-2) - k.rfind('7') + (len(k)-1) - k.rfind('5') \n    if k.rfind('5')==0 and k[1]=='0' and len(k)>3:\n        add = 0\n        i = 1\n        while k[i] == '0':\n            add += 1\n            i += 1\n        temp += add\n    if (k.rfind('7') > k.rfind('5')):\n        temp += 1\n    if (temp<Min):\n        Min = temp\nif k.count('0')>1:\n    css = k.rfind('0')\n    temp = (len(k)-1) - css\n    k = k[:css] + k[css+1:] \n    temp += (len(k)-1) - k.rfind('0') \n    if (temp<Min):\n        Min = temp\nif Min==sys.maxsize:\n    print(-1)\nelse:\n    print(Min)", "k = input()\nn = len(k)\nimport sys\nMin = sys.maxsize\nck = ['50','25','75']\nfor c in ck:\n    if c[0] in k and c[1] in k:\n        temp = 2*n - 3 - k.rfind(c[0]) - k.rfind(c[1]) \n        if (c[1]=='5'):\n            if k.rfind('5')==0 and k[1]=='0' and n>3:\n                add = 0\n                i = 1\n                while k[i] == '0':\n                    add += 1\n                    i += 1\n                temp += add\n        temp += k.rfind(c[0]) > k.rfind(c[1])\n        Min = min(temp,Min)\nif k.count('0')>1:\n    css = k.rfind('0')\n    temp = n-1 - css\n    k = k[:css] + k[css+1:] \n    temp += len(k)-1 - k.rfind('0')\n    Min = min(temp,Min)\nprint([Min,-1][Min==sys.maxsize])", "s = input();n=len(s)\ndef i(c,o=0): \n    try: return s[::-1].index(str(c),o)\n    except: return -1\noo=0\nwhile oo<n-1 and s[oo+1]=='0':oo+=1\no5=i(5)\no7=i(7)\no2=i(2)\no01=i(0);o02=i(0,o01+1) if o01>=0 else -1\nr=100\nif o01>=0 and o02>=0: r=min(r,o01+o02-1)\nif o01>=0 and o5>=0: r=min(r,o01+o5-int(o01<o5))\nif o5>=0 and o2>=0: r=min(r,o5+o2-int(o5<o2)+int(o5==n-1 and oo))\nif o5>=0 and o7>=0: r=min(r,o5+o7-int(o5<o7)+int(o5==n-1 and oo))\nprint(r if r<100 else -1)\n", "l = [int(e) for e in input().strip()]\n\ndef lei00(l):\n    result = []\n    for i in range(len(l)-1, -1, -1):\n        if l[i] == 0:\n            result.append(i)\n        if len(result) == 2:\n            break\n    if len(result) < 2:\n        return None\n    return 2 * len(l) - result[0] - result[1] - 3\n\ndef lei(l, x, y):\n    assert x != y\n\n    ix = None\n    iy = None\n\n    for i in range(len(l)-1, -1, -1):\n        if l[i] == x and ix == None:\n            ix = i\n        elif l[i] == y and iy == None:\n            iy = i\n\n        if ix != None and iy != None:\n            break\n\n    if ix == None or iy == None:\n        return None\n\n    result = 2 * len(l) - ix - iy - 3\n\n    if ix > iy:\n        result += 1\n\n    if x == 7 or x == 2:\n        assert y == 5\n        if iy == 0 and l[1] == 0:\n            if len(l) >= 4:\n                iii = 1\n                while True:\n                    iii += 1\n                    if l[iii] != 0:\n                        break\n                result += iii-1\n            if len(l) == 3:\n                return None\n\n\n    return result\n\n\nl = [lei00(l), lei(l, 5, 0), lei(l, 7, 5), lei(l, 2, 5)]\n\n\nresult = None\nfor e in l:\n    if e == None:\n        continue\n    if result == None or result > e:\n        result = e\n\nif result == None:\n    print(-1)\nelse:\n    print(result)\n\n\n\n\n\n", "l = [int(e) for e in input().strip()]\n\ndef lei00(l):\n    result = []\n    for i in range(len(l)-1, -1, -1):\n        if l[i] == 0:\n            result.append(i)\n        if len(result) == 2:\n            break\n    if len(result) < 2:\n        return None\n    return 2 * len(l) - result[0] - result[1] - 3\n\ndef lei(l, x, y):\n    assert x != y\n\n    ix = None\n    iy = None\n\n    for i in range(len(l)-1, -1, -1):\n        if l[i] == x and ix == None:\n            ix = i\n        elif l[i] == y and iy == None:\n            iy = i\n\n        if ix != None and iy != None:\n            break\n\n    if ix == None or iy == None:\n        return None\n\n    result = 2 * len(l) - ix - iy - 3\n\n    if ix > iy:\n        result += 1\n\n    if x == 7 or x == 2:\n        assert y == 5\n        if iy == 0 and l[1] == 0:\n            if len(l) >= 4:\n                iii = 1\n                while True:\n                    iii += 1\n                    if l[iii] != 0:\n                        break\n                result += iii-1\n            if len(l) == 3:\n                return None\n\n\n    return result\n\n\nl = [lei00(l), lei(l, 5, 0), lei(l, 7, 5), lei(l, 2, 5)]\n\n\nresult = None\nfor e in l:\n    if e == None:\n        continue\n    if result == None or result > e:\n        result = e\n\nif result == None:\n    print(-1)\nelse:\n    print(result)\n\n\n", "n = input()\n#if int(n) % 25 == 0:\n#\tprint(0)\n#\tquit()\n\nn = list(n)\nif (not(\"5\" in n)) and (not(\"0\" in n)) and (not(\"7\" in n)) and (not(\"2\" in n)):\n\tprint(-1)\n\tquit()\n\t\nwkn = []\nwkn[:] = n\nans = -1\nfor i in reversed(list(range(len(n)))):\n\tif (n[i] == \"0\"):\n\t\twk1 = n[:i] + n[i + 1:] + [n[i]]\n\t\tans = len(n) - i - 1\n\t\tif wk1[0] != \"0\":\n\t\t\tn[:] = wk1\n\t\t\tbreak\n\t\telse:\n\t\t\tcount = 0\n\t\t\tf1 = True\n\t\t\tfor j in wk1:\n\t\t\t\tcount += 1\n\t\t\t\tif j != \"0\":\n\t\t\t\t\tf1 = False\n\t\t\t\t\tbreak\n\t\t\tif f1:\n\t\t\t\tans = -1\n\t\t\t\tbreak\n\t\t\tans += count - 1\n\t\t\twk1 = [wk1[count - 1]] + wk1[:count - 1] + wk1[count:]\n\t\t\tn[:] = wk1\n\t\t\tbreak\n\nif ans != -1:\n\tf = True\n\tfor i in reversed(list(range(len(n) - 1))):\n\t\tif (n[i] == \"0\") or (n[i] == \"5\"):\n\t\t\twk1 = n[:i] + n[i + 1:-1] + [n[i]]\n\t\t\tans += len(n) - i - 2\n\t\t\tif wk1[0] != \"0\":\n\t\t\t\tf = False\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcount = 0\n\t\t\t\tf1 = True\n\t\t\t\tfor j in wk1:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tif j != \"0\":\n\t\t\t\t\t\tf1 = False\n\t\t\t\t\t\tbreak\n\t\t\t\tif f1:\n\t\t\t\t\tans = -1\n\t\t\t\t\tbreak\n\t\t\t\tans += count - 1\n\t\t\t\tf = False\n\t\t\t\tbreak\n\tif f:\n\t\tans = -1\n\t\t\t\nwkans = ans\n\nans = -1\nn = wkn\nfor i in reversed(list(range(len(n)))):\n\tif (n[i] == \"5\"):\n\t\twk1 = n[:i] + n[i + 1:] + [n[i]]\n\t\tans = len(n) - i - 1\n\t\tif wk1[0] != \"0\":\n\t\t\tn[:] = wk1\n\t\t\tbreak\n\t\telse:\n\t\t\tcount = 0\n\t\t\tf1 = True\n\t\t\tfor j in wk1:\n\t\t\t\tcount += 1\n\t\t\t\tif j != \"0\":\n\t\t\t\t\tf1 = False\n\t\t\t\t\tbreak\n\t\t\tif f1:\n\t\t\t\tans = -1\n\t\t\t\tbreak\n\t\t\tans += count - 1\n\t\t\twk1 = [wk1[count - 1]] + wk1[:count - 1] + wk1[count:]\n\t\t\tn[:] = wk1\n\t\t\tbreak\n\t\t\t\nif ans != -1:\n\tf = True\n\tfor i in reversed(list(range(len(n) - 1))):\n\t\tif (n[i] == \"7\") or (n[i] == \"2\"):\n\t\t\twk1 = n[:i] + n[i + 1: -1] + [n[i]]\n\t\t\tans += len(n) - i - 2\n\t\t\tif wk1[0] != \"0\":\n\t\t\t\tf = False\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcount = 0\n\t\t\t\tf1 = True\n\t\t\t\tfor j in wk1:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tif j != \"0\":\n\t\t\t\t\t\tf1 = False\n\t\t\t\t\t\tbreak\n\t\t\t\tif f1:\n\t\t\t\t\tans = -1\n\t\t\t\t\tbreak\n\t\t\t\tans += count - 1\n\t\t\t\tf = False\n\t\t\t\tbreak\n\tif f:\n\t\tans = -1\n\t\t\t\t\nif (wkans == -1):\n\tprint(ans)\n\tquit()\nif (ans == -1):\n\tprint(wkans)\n\tquit()\nprint(min(ans, wkans))\n", "num = str(input())\nn =len(num)\nnum_r = num[::-1]\ns0, s5 = num_r.find('0'),num_r.find('5')\nif s0 != -1:\n    newnum_r = num_r[:s0] + num_r[s0+1:]\n    c= []\n    for a in ['0','5']:\n        if newnum_r.find(a) != -1:\n            c.append(newnum_r.find(a))\n    if c != []:\n        s = min(c)\n        s0 = s0 + s\n    else:\n        s0 = 999999999\nelse:\n    s0 = 999999999\nif s5 != n-1 or num.find('0') != 1:\n    if s5 != -1:\n        newnum_r = num_r[:s5] + num_r[s5+1:]\n        c= []\n        for a in ['2','7']:\n            if newnum_r.find(a) != -1:\n                c.append(newnum_r.find(a))\n        if c != []:\n            s = min(c)\n            s5 = s5 + s\n        else:\n            s5 = 999999999\n    else:\n        s5 = 999999999\n    ssr = min(s0,s5)\n    if ssr != 999999999:\n        print(ssr)\n    else:\n        print(-1)\nelse:\n    if s5 != -1:\n        newnum_r = num_r[:s5] + num_r[s5+1:]\n        c= []\n        for a in ['2','7']:\n            if newnum_r.find(a) != -1:\n                c.append(newnum_r.find(a))\n        if c != []:\n            s = min(c)\n            sk = 0\n            for i in range(1,n-1):\n                if num[i] == '0':\n                    sk = sk + 1\n                else:\n                    break\n            s5 = s5 + s + sk\n        else:\n            s5 = 999999999\n    else:\n        s5 = 999999999\n    ssr = min(s0,s5)\n    if ssr != 999999999:\n        print(ssr)\n    else:\n        print(-1)", "import sys\nnum = input()\nlength = len(num)\nminimum = sys.maxsize\npossibles = [\"25\", \"50\", \"75\", \"00\"]\n\nfor possible in possibles:\n    if possible[0] == possible[1] and num.count('0') > 1:\n        first = num.rfind(possible[0])\n        second = num[:first].rfind(possible[1])\n        temp_min = length - 2 - second + length - 1 - first\n        minimum = min(minimum, temp_min)\n    elif possible[0] != possible[1] and possible[0] in num and possible[1] in num:\n        first = num.rfind(possible[0])\n        second = num.rfind(possible[1])\n            \n        temp_min = length - 2 - first + length - 1 - second\n        \n        if (second == 0) and length > 3:\n            i = 1\n            while num[i] == '0':\n                temp_min += 1\n                i += 1\n        \n        if first > second:\n            temp_min += 1\n        minimum = min(minimum, temp_min)\n\nif minimum == sys.maxsize:\n    print(-1)\nelse:\n    print(minimum)", "s = input();n=len(s)\ndef i(c,o=0): \n    try: return s[::-1].index(str(c),o)\n    except: return -1\noo=0\nwhile oo<n-1 and s[oo+1]=='0':oo+=1\no5=i(5)\no7=i(7)\no2=i(2)\no01=i(0);o02=i(0,o01+1) if o01>=0 else -1\nr=100\nif o01>=0 and o02>=0: r=min(r,o01+o02-1)\nif o01>=0 and o5>=0: r=min(r,o01+o5-int(o01<o5))\nif o5>=0 and o2>=0: r=min(r,o5+o2-int(o5<o2)+int(o5==n-1 and oo))\nif o5>=0 and o7>=0: r=min(r,o5+o7-int(o5<o7)+int(o5==n-1 and oo))\nprint(r if r<100 else -1)", "s=input()[::-1]\nm=I=41\nf=s.find('5')+1\ni=s.find('0')+1\nt=len(s)\nif i:\n j=min(s.find('0',i)+1or I,f or I)\n if j<I:\n  m=i+j-3\n  if j<i:m+=1\nif f:\n j=min(s.find('2')+1or I,s.find('7')+1or I)\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while i==j or s[i-1]=='0':\n    if i!=j:l+=1\n    i-=1\n   if i==j:l=I\n  m=min(m,l)\nprint((-1,m)[m<I])\n", "s=input()[::-1]\nm=I=41\nf=s.find('5')+1\ni=s.find('0')+1\nt=len(s)\nif i:\n j=min(s.find('0',i)+1or I,f or I)\n if j<I:\n  m=i+j-3\n  if j<i:m+=1\nif f:\n j=min(s.find('2')+1or I,s.find('7')+1or I)\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while i==j or s[i-1]=='0':\n    if i!=j:l+=1\n    i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])", "s=input()[::-1]\nm=I=41\nf=s.find('5')+1\ni=s.find('0')+1\nt=len(s)\nif i:\n j=min(s.find('0',i)+1or I,f or I)\n if j<I:\n  m=i+j-3\n  if j<i:m+=1\nif f:\n j=min(s.find('2')+1or I,s.find('7')+1or I)\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    if i!=j:l+=1\n    i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])\n", "s=input()[::-1]\nm=I=41\nf=s.find('5')+1\ni=s.find('0')+1\nt=len(s)\nif i:\n j=min(s.find('0',i)+1or I,f or I)\n if j<I:\n  m=i+j-3\n  if j<i:m+=1\nif f:\n j=min(s.find('2')+1or I,s.find('7')+1or I)\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    l+=1;i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])", "s=input()[::-1]\nt=len(s)\nm=I=40\ndef g(c,i=0):return s.find(str(c),i)+1 or I\ni,f=g(0),g(5)\nif i<I:\n j=min(g(0,i),f)\n if j<I:\n  m=i+j-3\n  if j<i:m+=1\nif f<I:\n j=min(g(2),g(7))\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    l+=1;i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])", "s=input()[::-1]\nt=len(s)\nm=I=40\ndef g(c,i=0):return s.find(str(c),i)+1 or I\ni,f=g(0),g(5)\nif i<I:\n j=min(g(0,i),f)\n if j<I:m=i+j-3+(j<i)\nif f<I:\n j=min(g(2),g(7))\n if j<I:\n  l=f+j-3\n  if j<f:l+=1\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    l+=1;i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])", "s=input()[::-1]\nt=len(s)\nm=I=40\ndef g(c,i=0):return s.find(str(c),i)+1 or I\ni,f=g(0),g(5)\nif i<I:\n j=min(g(0,i),f)\n if j<I:m=i+j-3+(j<i)\nif f<I:\n j=min(g(2),g(7))\n if j<I:\n  l=f+j-3+(j<f)\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    l+=1;i-=1\n  m=min(m,l)\nprint((-1,m)[m<I])", "s=input()[::-1]\nt=len(s)\nI=50\ndef g(c,i=0):return s.find(str(c),i)+1 or I\ni,f=g(0),g(5)\nj=min(g(0,i),f)\nm=i+j-3+(j<i)\nif f<I:\n j=min(g(2),g(7))\n if j<I:\n  l=f+j-3+(j<f)\n  if f==t:\n   i=t-1\n   while s[i-1]=='0':\n    l+=1;i-=1\n  m=min(m,l)\nprint((-1,m)[m<40])", "s=input()[::-1]\nt=len(s)\ndef g(c,i=0):return s.find(str(c),i)+1or 50\ni,f=g(0),g(5)\nj=min(g(0,i),f)\nm=i+j-3+(j<i)\nj=min(g(2),g(7))\nl=f+j-3+(j<f)\nif f==t:\n i=t-1\n while s[i-1]=='0':\n  l+=1;i-=1\nm=min(m,l)\nprint((-1,m)[m<40])"]