["function readFile(filename) {\n    return new Promise(function (resolve, reject) {\n        fs.readFile(filename, function (err, data) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n\nfunction handleError(err) {\n    console.log(err.message);\n}\n\nreadFile('file.txt')\n    .then(function (data) {\n        console.log(data.toString());\n    })\n    .catch(handleError);\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))[:n]\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split()))[:2])\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r - 1])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")  # noqa: W605\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "// var fs = require('fs');\n// var readStream = fs.createReadStream('/Users/shuvojit/Desktop/1.mp4');\n// var writeStream = fs.createWriteStream('/Users/shuvojit/Desktop/2.mp4');\n// readStream.pipe(writeStream);\n// console.log('done');\n\n\n// var fs = require('fs');\n// var readStream = fs.createReadStream('/Users/shuvojit/Desktop/1.mp4');\n// var writeStream = fs.createWriteStream('/Users/shuvojit/Desktop/2.mp4');\n\n// readStream.on('data',function(chunk){\n// \tif(writeStream.write(chunk) === false){\n// \t\tconsole.log('still cached');\n// \t\treadStream.pause();\n// \t}\n// });\n\n// readStream.on('end',function(){\n// \twriteStream.end();\n// });\n\n// writeStream.on('drain',function(){\n// \tconsole.log('data drains');\n// \treadStream.resume();\n// });\n\n\n// var fs = require('fs');\n// var readStream = fs.createReadStream('/Users/shuvojit/Desktop/1.mp4');\n// var n = 0;\n// readStream\n// \t.on('data',function(chunk){\n// \t\tn++;\n// \t\tconsole.log('data emits');\n// \t\tconsole.log(Buffer.isBuffer(chunk));\n// \t\tconsole.log(chunk.toString('utf8'));\n// \t})\n// \t.on('readable',function(){\n// \t\tconsole.log('data readable');\n// \t})\n// \t.on('end',function(){\n// \t\tconsole.log(n);\n// \t\tconsole.log('data ends');\n// \t})\n// \t.on('close',function(){\n// \t\tconsole.log('data close');\n// \t})\n// \t.on('error',function(e){\n// \t\tconsole.log('data read error'+e);\n// \t});\n\n\nvar fs = require('fs');\nvar readStream = fs.createReadStream('/Users/shuvojit/Desktop/1.mp4');\nvar writeStream = fs.createWriteStream('/Users/shuvojit/Desktop/2.mp4');\nreadStream.pipe(writeStream);\nconsole.log('done');\n", "\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str)\n    args = parser.parse_args()\n\n    main(args)\n"]