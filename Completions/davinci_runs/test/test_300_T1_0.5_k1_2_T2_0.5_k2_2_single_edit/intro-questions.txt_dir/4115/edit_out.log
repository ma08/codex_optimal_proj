2022-04-17 21:19:01.191167 num operations 1
2022-04-17 21:19:01.191185 size on input set 1
2022-04-17 21:19:07.393987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n'''\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n'''\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef dfs(i, j):\n    if i == n or j == n:\n        return 0\n    if dp[i][j] != -1:\n        return dp[i][j]\n    if s[i] == t[j]:\n        dp[i][j] = dfs(i + 1, j + 1) + 1\n    else:\n        dp[i][j] = max(dfs(i + 1, j), dfs(i, j + 1))\n    return dp[i][j]\n\nn = int(input())\ns = input()\nt = input()\n\ndp = [[-1] * n for _ in range(n)]\n\nprint(n - dfs(0, 0))\n\ns = input()\n"
    }
  ],
  "created": 1650230341,
  "object": "edit"
}
2022-04-17 21:19:07.394199 fix syntax errors 2 ["\n'''\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n'''\n    print(1)\n", '\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef dfs(i, j):\n    if i == n or j == n:\n        return 0\n    if dp[i][j] != -1:\n        return dp[i][j]\n    if s[i] == t[j]:\n        dp[i][j] = dfs(i + 1, j + 1) + 1\n    else:\n        dp[i][j] = max(dfs(i + 1, j), dfs(i, j + 1))\n    return dp[i][j]\n\nn = int(input())\ns = input()\nt = input()\n\ndp = [[-1] * n for _ in range(n)]\n\nprint(n - dfs(0, 0))\n\ns = input()\n']
2022-04-17 21:19:07.394224 size on output set 2
2022-04-17 21:19:07.394235 num operations 1
2022-04-17 21:19:07.394241 size on input set 1
2022-04-17 21:19:12.337315 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# \u89e3\u8aac\n# \u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n# \u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\u89e3\u8aac\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    }
  ],
  "created": 1650230347,
  "object": "edit"
}
2022-04-17 21:19:12.337478 fix syntax errors 2 ['\n\n# 解説\n# ・入力文字列が回文かどうかを判定する関数\n# ・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n']
2022-04-17 21:19:12.337535 size on output set 2
