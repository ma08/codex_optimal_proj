2022-04-17 21:22:27.799807 num operations 1
2022-04-17 21:22:27.799830 size on input set 1
2022-04-17 21:22:32.787643 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid, visited):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                visited[i][j] = 1\n                return 1\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid, arr):\n    return 0\n\ndef main():\n    arr = list(map(int, input().split()))\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid, arr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650230547,
  "object": "edit"
}
2022-04-17 21:22:32.787825 fix syntax errors 2 ["\n\ndef solve(n, m, k, grid, visited):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                visited[i][j] = 1\n                return 1\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, arr):\n    return 0\n\ndef main():\n    arr = list(map(int, input().split()))\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid, arr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-17 21:22:32.787852 size on output set 2
2022-04-17 21:22:32.787862 num operations 1
2022-04-17 21:22:32.787867 size on input set 1
2022-04-17 21:22:37.208561 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution by Andrew Xing, edited by Andrew\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for _ in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin, stdout\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in stdin.readline().split()]\n  grid = [[int(x) for x in stdin.readline().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  stdout.write(str(dp[n][m][k]))\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1650230552,
  "object": "edit"
}
2022-04-17 21:22:37.208754 fix syntax errors 2 ['\n# Solution by Andrew Xing, edited by Andrew\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for _ in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\nfrom sys import stdin, stdout\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in stdin.readline().split()]\n  grid = [[int(x) for x in stdin.readline().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  stdout.write(str(dp[n][m][k]))\n\nif __name__ == "__main__":\n  main()\n']
2022-04-17 21:22:37.208783 size on output set 2
