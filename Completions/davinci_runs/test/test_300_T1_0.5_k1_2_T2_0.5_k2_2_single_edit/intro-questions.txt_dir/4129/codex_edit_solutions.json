["\n\nimport sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n + 1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n + 1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n + 1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\n\nif __name__ == '__main__':\n    main()\n"]