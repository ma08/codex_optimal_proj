["import math\nn=int(input())\nans=0\nnum=int(math.sqrt(n)+1)\nfor i in range(1,num)[::-1]:\n    if n%i==0:\n        ans=i+(n//i)-2\n        break\nprint(ans)", "n = int(input())\nc = n-1\nfor i in range(1,int(n**0.5)+1):\n  if (n/i).is_integer():\n    j = n//i\n    c = min(c, i+j-2)\nprint(c)", "import math\n\nn = int(input())\nl = math.floor(math.sqrt(n))\nfor i in range(1, l + 1):\n    if n % i == 0:\n        x = i\n        y = n // i\nprint((x - 1) + (y - 1)) if x > 0 else print(n - 1)", "import math\nn=int(input())\nans=n-1\nfor i in range(2,int(math.sqrt(n))+1):\n  if n%i==0:\n    ans=min(ans,(i-1)+(n//i)-1)\nprint(ans)", "n = int(input())\na = 0\nfor i in reversed(range(1,int(n**(1/2))+1)):\n    if n % i == 0:\n        a = i\n        break\nb = int(n / a)\nprint(a+b-2)", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n    n = int(input())\n    ans=10**12\n    tmp=[]\n    for a in range(1,10**6+1):\n        if n%a==0 and n >=a:\n            b=n//a\n        elif n <a:\n            break\n        #a,b\u306e\u6700\u5c0f\u5024\u3092\u8a18\u61b6\u3057\u3066\u304f\u308c\u3066\u308b\uff1f\n        ans=min(ans,a+b-2)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nN = int(input())\ndivisors = []\nfor i in range(1, int(N**0.5)+1):\n    if N % i == 0:\n        divisors.append(i)\n        if i != N // i:\n            divisors.append(N//i)\n\ndivisors.sort()\nm=len(divisors)\n\nif m%2==0:\n  print(divisors[m//2]+divisors[m//2-1]-2)\nelse:\n  print(divisors[m//2]*2-2)", "#!/usr/bin/env python3\ndef main():\n    N = int(input())\n\n    candidate = []\n    for divisor in range(1, int(N ** 0.5) + 1):\n        if N % divisor == 0:\n            candidate.append((divisor, N // divisor))\n    ans = min([a + b - 2 for a, b in candidate])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nans = 10 ** 12 + 1\nfor a in range(1, int(N ** 0.5 + 2)):\n    if N % a == 0:\n        a_b = a + (N // a) - 2\n    if ans > a_b:\n        ans = a_b\n\nprint(int(ans))", "n=int(input())\nm=10**12\nfor i in range(1,10**6+1):\n  if n%i==0:\n    m=min(m,i+(n//i))\n\nprint(m-2)", "n = int(input())\nans = 10**12\nfor a in range(1,10**6+1):\n    if n%a==0:\n        b=n//a\n    ans = min(ans,a+b-2)\nprint(ans)", "N=int(input())\na=1\nfor i in range(1,int(N**(1/2))+2):\n    if N%i==0:\n        a=max(a,i)\nprint(a+N//a-2)", "import math\n\nN = int(input())\n\nmin_cost = N - 1\n\nfor i in range(1,int(math.sqrt(N))+1):\n    tmp = 0\n    if N % i == 0:\n        tmp = (i-1) + (N/i-1)\n        if tmp < min_cost:\n            min_cost = tmp\nprint(int(min_cost))", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nN = int(input())\n\nyakusu_list = make_divisors(N)\nif len(yakusu_list)%2 == 1:\n    ans = (yakusu_list[len(yakusu_list)//2]-1)*2\nelse:\n    ans = yakusu_list[len(yakusu_list)//2-1] - 1 + yakusu_list[len(yakusu_list)//2] - 1\n\nprint(ans)", "from math import sqrt\nn = int(input())\nminSoFar = 10**12+1\n\nfor a in range(1, int(sqrt(n))+1):\n    if n % a == 0:\n        b = n // a\n        minSoFar = min(minSoFar, a+b-2)\nprint(minSoFar)", "n=int(input())\nans=float('inf')\na=1\nwhile n**0.5>=a:\n  if n%a==0:\n    ans=min(ans,a+n//a-2)\n  a+=1\nprint(ans)\n", "N=int(input())\nans=N*2-2\nfor n in range(1,int(N**.5)+1):\n\tif N%n==0:\n\t\tans=min(ans,N//n+n-2)\n\nprint(ans)", "n = int(input())\nx = int(n**(1/2))+1\nfor i in range(1, x+1):\n    if n%i == 0:\n        p = i\n        q = n//i\nprint(p+q-2)", "n = int(input())\na,b = -1, -1\nfor i in range(int(n ** 0.5), 0, -1):\n  #print(i)\n  if n % i == 0:\n    a = i\n    b = n // i\n    break\nprint(a+b-2)", "n = int(input())\nfor i in range(int(n ** 0.5), 0, -1):\n  if n % i == 0:\n    print(i + n // i - 2)\n    break", "N=int(input())\n\nans=N*2\ni=1\nwhile i*i<=N:\n    if N%i==0:\n        ans=min(ans,N//i+i)\n    #print(ans,i+N//i)\n    i+=1\n    \nprint(ans-2)", "n = int(input())\n\nfor i in list(range(1, int(n**0.5)+1))[::-1]:\n    if n%i==0:\n        ans = i+n//i\n        break\nprint(ans-2)", "n=int(input())\nk = 1\nans = n - 1\nwhile k*k <= n:\n  if n % k == 0:\n    r = n // k\n    ans = min(ans, k + r - 2)\n  k += 1\nprint(ans)", "n = int(input())\n\na = int(n**(1/2))\nwhile True:\n    if n % a == 0:\n        print(a-1 + (n//a)-1)\n        return\n    a -= 1", "N = int(input())\ncnt =  10**12\nfor i in range(1, int(N**.5)+1):\n    if N%i == 0:\n        cnt = min(cnt, i+N//i-2)\nprint(cnt)", "n = int(input())\nans = 1001001001001\n\nfor i in range(1, int(n**0.5)+1):\n    if n%i == 0:\n        ans = min(ans, i+n//i-2)\n\nprint(ans)", "# coding: utf-8\nfrom math import sqrt\n\ndef main():\n    N = int(input())\n    ans = 1e12 + 1\n    for i in range(1, int(sqrt(N)) + 1):\n        if N % i == 0:\n            j = N // i\n            ans = min(ans, i + j - 2)\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(i, N))\nprint(a + N // a - 2)", "n = int(input())\nimport math\nt = math.ceil(math.sqrt(n))\nfor i in range(t,1,-1):\n    if n%i == 0:\n        print(i-1+(n//i)-1)\n        break\nelse:print(n-1)", "import sys\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\ninput = sys.stdin.readline\nn = int(input())\n\nyaku_list = make_divisors(n)\nindex = int(len(yaku_list)/2)\n\n\nif len(yaku_list) % 2 == 0:\n    result = yaku_list[index-1] - 1 + yaku_list[index] - 1 \nelse:\n    result = yaku_list[index] - 1 + yaku_list[index] - 1 \n\nprint(result)\n", "import math\n\nans = 1000000000000000000\nN = int(input())\nfor i in range(math.ceil(math.sqrt(N+1000))):\n  if i > 0 and N % i == 0:\n    ans = min(i + N/i - 2, ans)\nprint((int(ans)))\n", "N = int(input())\nanswer = 1000000000000\nfor i in range(1, int(N ** (0.5)) + 2):\n    if N % i == 0:\n        j = N // i\n        if i + j - 2 < answer:\n            answer = i + j - 2\nprint(answer)", "n=int(input())\n\nfor i in range(int(n**0.5),0,-1):\n    if n%i==0:\n        a=i\n        b=n//i\n        break\nprint((a-1+b-1))\n", "N = int(input())\n\nnum = set()\nfor n in range(2, 10**7):\n    if N % n == 0:\n        num.add(tuple(sorted([n, N//n])))\n    if N == n:\n        break\nans = (10**12, 10**12)\nif not num:\n    print(N - 1)\nelse:\n    for s in num:\n        if s[0]+s[1] < ans[0]+ans[1]:\n            ans = s\n    print(ans[0] + ans[1] - 2)", "import math\n\nn = int(input())\nList = []\nn_sqrt = int(math.sqrt(n))\n\nfor i in range(1,n_sqrt+1):\n    if n % i == 0:\n        number = i + (n // i) -2\n        List.append(number)\n        \nprint(min(List))", "def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n\ndef main():\n    N = int(input())\n    d = make_divisors(N)\n    d.reverse()\n    ans = float('inf')\n    for i in range(N):\n        if len(d) == 1:\n            a = d.pop()\n            ans = min(ans, 2*(a-1))\n            break\n        if len(d) == 0:\n            break\n        a = d.pop()-1\n        b = d.pop()-1\n        ans = min(ans, a+b)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nN = int(input())\n\nn = int(math.ceil(math.sqrt(N)))\n\nans = int(1e18)\nfor i in range(1,n+1):\n  j = N//i\n  if N%i==0:\n    ans =min(ans,j+i-2)\nprint(ans)", "def divisor(n):\n    i = 1\n    table = []\n    while i * i <= n:\n        if n%i == 0:\n            table.append(i)\n            table.append(n//i)\n        i += 1\n    table = list(set(table))\n    return table\ndef resolve():\n    n = int(input())\n    ans = float('inf')\n    c = divisor(n)\n    for a in c:\n        b = n//a\n        ans = min(ans,a+b-2)\n    print(ans)\nresolve()", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(N, i))\nprint(a + N // a - 2)", "import math\nn = int(input())\n\nans = float(\"inf\")\nfor i in range(1,int(math.sqrt(n)+1)):\n    if n%i == 0:\n        if (i-1)+(n//i-1) < ans:\n            ans = (i-1)+(n//i-1)\n\nprint(ans)   ", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(i, N))\nprint(a + N // a - 2)", "N = int(input())\n\ni = int(N**0.5)\n\nwhile N % i:\n    i -= 1\n\nprint(i + N//i - 2)", "from math import sqrt\nn = int(input())\ni = int(sqrt(n) + 1)\nwhile n % i > 0:\n    i -= 1\nj = n // i\nans = i + j - 2\nprint(ans)\n", "import math\nN = int(input())\n\nresult = [10**13]\ncnt = []\nfor i in range(1,int(math.sqrt(N))+1) :\n    if N % i == 0 :\n        buf = min(result[-1],i+(N//i))\n        result.append(buf)\n        if result[-1] != result[-2] :\n            cnt.append([i,N//i])\n\n\nprint(cnt[-1][0]-1+cnt[-1][1]-1)", "N = int(input())\nN_ri = round(pow(N, 1/2))\n\nfor i in range(N_ri, 0, -1):\n  if N % i == 0:\n    j = N // i\n    break\nprint(i + j - 2)", "N = int(input())\n\ndef low_divisors(N):\n  K=1\n  low_divs = []\n  while K*K <= N:\n    if N%K == 0:\n      low_divs.append(K)\n    K += 1\n\n  return low_divs\n\nL_divs = low_divisors(N)\nD = []\n\nfor i in range(len(L_divs)):\n  D.append(L_divs[i]+N//L_divs[i])\n  \nprint(min(D)-2)", "import math\nn = int(input())\n\ntop = int(math.sqrt(n))\na = 1\n\nfor x in range(1,top+1):\n  if n % x == 0:\n    a = x\n    \na_pair = n // a\nprint((a + a_pair -2))\n  \n  \n", "def enum_divisors(n):\n    res = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            res.append(i)\n    return res\n\n\nN = int(input())\ndivs = enum_divisors(N)\nans = float(\"inf\")\nfor d in divs:\n    ans = min(ans, (d - 1) + (N // d - 1))\nprint(ans)\n\n", "n = int(input())\nans = 10**12\nfor i in range(int(n**0.5)+1):\n    a = i + 1\n    if n % a == 0:\n        b = n//a\n        ans = min(ans,a+b-2)\nprint(ans)", "n = int(input())\nans = float('inf')\n\nfor i in range(1, int(n**0.5)+1):\n    if n%i == 0:\n        j = n//i\n        ans = min(ans, i-1+j-1)\n\nprint(ans)", "n = int(input())\n#a, b, c, x, y = map(int, input().split())\n#al = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\nx = 1\nmn = n-1\nwhile x**2 <= n:\n    if n % x == 0:\n        y = n//x\n        mn = min(mn, x+y-2)\n    x+=1\n    \nprint(mn)\n", "N=int(input())\nans=N-1\nx=1\nwhile x*x<=N:\n    if N%x==0:\n        y=N//x\n        ans=min(x-1+y-1,ans)\n    x+=1\nprint(ans)\n", "n = int(input())\nans = int(1e18)\nfor i in range(1,n):\n    if i*i <=n:\n        if n % i == 0:\n            j = int(n/i)\n            ans = min(ans,i+j-2)\n    else:\n        break\nprint(ans)", "N = int(input())\n\nm = 10**12\nfor i in range(1, 10**6+1):\n  if N % i == 0:\n    m = min(m, i + (N // i))\n    \n    \nprint(m-2)", "n = int(input())\nm = 10**13\nfor x in range(1,1000001):\n  y = n / x\n  if y % 1 == 0:\n    v = x + y -2\n    m = min(m, v)\nprint(int(m))", "import math\n\nN = int(input())\nN_ = int(math.sqrt(N)) + 1\n\nmin_distance = N - 1\nfor i in range(1, N_):\n    p, r = divmod(N, i)\n    if r == 0:\n        if 1 <= p <= N:\n            distance = (i-1) + (p-1)\n            min_distance = min(min_distance, distance)\n        else:\n            continue\n\nprint(min_distance)\n", "N = int(input())\nd = 10**20\nfor a in range(1,int(N ** 0.5)+1):\n  if N % a == 0:\n    b = N // a\n    c = a + b - 2\n    if d > c:\n      d = c\nprint(d)\n        \n", "import math\nn = int(input())\n\na,b = 1,n\nfor i in range(1,int(math.sqrt(n)+1)):\n    if n%i == 0:\n        q = n//i\n        if abs(a-b) > abs(q-i):\n            a,b = i,q\n\nprint((a-1) + (b-1))       ", "import math\nn = int(input())\nfor i in range(int(math.sqrt(n)),0,-1):\n    if n % i == 0:\n        print(int(i + (n / i) - 2))\n        break", "import math\nN=int(input())\nx=N+1\nfor i in range(1,int(math.sqrt(N))+1):\n    if N%i==0:\n        x=min(x,i+N//i)\nprint((x-2))\n", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n    n = int(input())\n    ans=10**12\n    for a in range(1,10**6+1):\n        if n%a==0:\n            b=n//a\n        ans=min(ans,a+b-2)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\nans = n-1\nfor i in range(1,int(n**(0.5))+1):\n        if n % i == 0:\n                ans = min(ans,i+n//i-2)\n        else:\n          continue\nprint(ans)", "n = int(input())\nans = 10000000000000\n\nfor i in range(1,int(n**0.5)+1):\n    if n%i != 0: continue\n\n    j = n//i\n    ans = min(ans,(i-1)+(j-1))\n\nprint(ans)", "n  = int(input())\nans = n\ncnt = 0\nfor i in range(2, int((n ** 0.5))+2):\n  if n % i == 0:\n    cnt += 1\n    if ans > i + n/i -2:\n      ans = i + n/i -2\n\nif cnt == 0:\n  ans = n-1\nprint(int(ans))", "import math\n\nN = int(input())\nans = 10**12\n\nfor i in range(1,math.ceil(math.sqrt(N))+2):\n    if N % i == 0:\n        tem = N//i + N//(N//i) -2\n        if tem <= ans:\n            ans = tem\n\nprint(ans)", "N = int(input())\nmini = float('inf')\n\nfor i in range(1, 10**6 + 1):\n    if N%i == 0:\n        mini = min(mini, i+(N//i))\n\nprint(mini - 2)", "import sys\n\nn=int(input())\n\nc=[]\n\nfor i in range(2,int(n**(1/2))+1):\n    if n%i==0:\n        c.append(i+n//i-2)\n\nif len(c)==0:\n    print(n-1)\n    return\n    \nprint(min(c))", "N=int(input())\nimport math\nK=math.sqrt(N)\nK=round(K)\nfor i in range(K):\n    L=N//K\n    if N==L*K:\n        break\n    else:\n        K-=1\nans=K+L\nans-=2\nprint(ans)", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(500000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef solve():\n    N = int(input())\n    ans = INF\n    for i in range(1, int(sqrt(N)) + 10):\n        j = N // i\n        if i * j == N:\n            ans = min(ans, i + j - 2)\n\n    print(ans)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(i, N))\nprint(a + N // a - 2)", "import math\nn = int(input())\nans = float('inf')\nfor i in range(1,int(math.sqrt(n))+1):\n    if n % i == 0:\n        ans = min(ans, i + n//i -2)\nprint(ans)", "import math\nn  = int(input())\nroot_n = math.floor(math.sqrt(n))\nans = 0\nfor i in range(1,root_n+1):\n    if n % i ==0:\n        ans = i\nprint(int(ans + n/ans -2))", "import math\nN = int(input())\nresult = N\nfor i in range(1, int(math.sqrt(N))+2):\n    if N % i == 0:\n        result = min(result, i - 1 + N//i - 1)\nprint(result)\n", "N=int(input())\na=1\nfor i in range(1,int(N**(1/2))+2):\n    if N%i==0:\n        a=max(a,i)\nprint(a+N//a-2)", "N = int(input())\nyakusu = []\n\nfor i in range(1,int((N**(0.5))+1)):\n  if N % i == 0:\n    j = int(N / i)\n    yakusu.append([i,j])\n    \nmin_dis = 1000000000000000000000000000000000000000000000000000\n\nfor k in range(len(yakusu)):\n  distance = yakusu[k][0] - 1 + yakusu[k][1] - 1\n  if distance < min_dis:\n    min_dis = distance\n    \nprint(min_dis)\n", "def divisor(n):\n    lower, upper = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower.append(i)\n            if i != n // i:\n                upper.append(n//i)\n        i += 1\n    return lower + upper[::-1]\n\nn = int(input())\nans = float(\"inf\")\nfor d in divisor(n):\n    i = n//d\n    tmp = i+d-2\n    ans = min(ans, tmp)\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 01:55:56 2020\n\n@author: liang\n\"\"\"\n\nimport math\nN = int(input())\nkey = int(math.sqrt(N))\n\nans = 10**12\nfor i in reversed(range(1,key+1)):\n    if N%i == 0:\n        ans = i-1 + N//i -1\n        break\nprint(ans)", "N = int(input())\nans = 10**12\nfor i in range(1,int(N**0.5)+1):\n    j = N/i\n    if(j == int(j)):\n        ans = i+j-2\nprint(int(ans))", "import math\nN = int(input())\nM = []\nsqr_N = math.floor(math.sqrt(N))\na = 0\n    \nfor i in range(1, (sqr_N + 1)):\n    if N % i == 0:\n        a = i\n\na_pair = N // a\nprint(a + a_pair - 2)", "N = int(input())\nx = int(N**0.5)+1\nans_1 = N\n\nfor i in range(x):\n    if N % x == 0:\n        ans_1 = x\n        break\n    else:\n        x -= 1\n\nans_2 = N//ans_1\nprint((ans_1 + ans_2 - 2))\n", "import math\nN = int(input())\n\nans = 10 ** 12\nfor i in range(1,int(math.sqrt(N)+1)):\n    if N%i == 0:\n        result = i + N//i -2\n        ans = min(ans, result)\n\nprint(ans)\n", "n=int(input())\nans=float('inf')\nfor a in range(1,int(n**0.5+1)):\n  if n%a==0:\n    ans=min(ans,a+n//a-2)\nprint(ans)\n", "import math\nn = int(input())\n\nx,y = n,1 \nfor i in range(int(math.sqrt(n)),0,-1):\n  if n%i == 0 :\n    if x+y > i+n//i:\n      x = i\n      y = n//x\n      \nprint(x-1+y-1)", "def div(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\ndef main():\n  import functools\n  import operator\n  import numpy as np\n  import itertools\n  import math\n  lis = [1]\n  N = int(input())\n  x = div(N)\n  A = []\n  for i in range(math.ceil(len(x)/2)):\n    A.append(x[i]+x[len(x)-i-1])\n  ans = min(A)-2\n  print(ans)\nmain()", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nN = int(input())\nA = make_divisors(N)\nans = pow(10,15)\nfor x in A:\n  temp = N//x + x\n  ans = min(ans,temp)\nprint((ans-2))\n", "import math\nn = int(input())\nz = math.floor(math.sqrt(n))\nans = 10 ** 12\nfor i in range(1,z+1):\n    if n % i == 0:\n        m = n // i\n        ans = min(ans,m+i-2)\nprint(ans)", "import math\nn = int(input())\nans = float('inf')\nfor i in range(1, int(math.sqrt(n)+1)):\n    if n%i==0:\n        ans = min(i + n//i - 2, ans)\nprint(ans)\n", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(N, i))\nprint(a + N // a - 2)", "import math\nN = int(input())\n\n# (1, 1)\u304b\u3089(a, b)\u306b\u81f3\u308b\u307e\u3067\u306e\u79fb\u52d5\u56de\u6570\u306f(a+b\u22122)\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3068\u3001\n# a*b=N \u3092\u6e80\u305f\u3059(a, b)\u306b\u3064\u3044\u3066(a+b\u22122)\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n# \u5bfe\u79f0\u6027\u3088\u308a\u3001O(\u221aN)\n# \u4eca\u56de\u306fN=O(10^12)\u306a\u306e\u3067\u9593\u306b\u5408\u3046\n\n# a+b-2\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\nans = N-1\nfor i in range(1, int(math.sqrt(N))+1):\n  if N % i == 0:\n    ans = min(ans, (N//i)+i-2)\n    \nprint(ans)", "n=int(input());ans=float('inf')\nfor i in range(1,int(n**.5)+1):\n  if i*(n//i)==n:\n    ans=min(ans,abs(i+(n//i))-2)\nprint(ans)", "import math\nN = int(input())\na = 0\nfor i in range(1, int(math.sqrt(N) // 1) + 1):\n    a = max(a, math.gcd(N, i))\nprint(a + N // a - 2)", "n = int(input())\n\nans = float(\"inf\")\nfor i in range(1, int(n**0.5)+1):\n  if n%i == 0:\n    t = n//i\n    if i-1+t-1 < ans: ans = i-1+t-1\nprint(ans)", "from math import sqrt as s\n\nN = int(input())\nx, y = [], []\nfor i in range(1, int(s(N))+1):\n  if N % i == 0:\n    x.append(i)\n    y.append(N // i)\n\nans, M = float(\"INF\"), len(x)\nfor i in range(M):\n  ans = min(ans, x[i] + y[i] - 2)\n\nprint(ans)", "import math\n\nn = int(input())\n\ndef p(x):\n  if x == 2:\n    return True\n  for i in range(2,int(math.sqrt(x))+1):\n    if x % i == 0:\n      return False\n  return True\n\ndef check(x):\n  res = 10 ** 12\n  for i in range(2,int(math.sqrt(x))+1):\n    if x % i == 0:\n      s = (i-1) + (x//i -1)\n      res = min(res,s)\n  return res\n\nif p(n):\n  print((n-1))\nelse:\n  print((check(n)))\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n\ndef main():\n    N = I()\n    num = math.ceil(math.sqrt(N))\n    ans = float('inf')\n    for a in range(1, num+1):\n        if N % a == 0:\n            b = N // a\n            ans = min(ans, a+b-2)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nn = int(input())\n\nans = float(\"inf\")\nflag = 0\nfor i in range(2,int(n**(1/2))+1):\n  if n%i == 0:\n    ans = min(ans, i+(n//i)-2)\n    flag = 1\n\nif flag:\n  print(ans)\nelse:\n  print(n-1)   ", "import math\nn = int(input())\n\na = 1\nfor i in reversed(list(range(1, int(math.sqrt(n))+1))):\n    if n%i == 0:\n        a = i\n        break\nprint((a+int(n//a)-2))\n", "def divisor(n): \n    i = 1\n    table = []\n    while i*i<=n:\n        if n%i==0:\n            table.append([i,n//i])\n        i+=1\n    return table\n\nN = int(input())\nm = N\n\nif len(divisor(N))==1:\n  print(N-1)\n\nelse:\n  for i,j in divisor(N):\n    m = min(m,i+j)\n  print(m-2)"]