2022-04-17 21:30:35.758436 num operations 1
2022-04-17 21:30:35.758452 size on input set 1
2022-04-17 21:30:37.312557 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    }
  ],
  "created": 1650231035,
  "object": "edit"
}
2022-04-17 21:30:37.312742 fix syntax errors 2 ['\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n', '\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n']
2022-04-17 21:30:37.312765 size on output set 1
2022-04-17 21:30:37.312777 num operations 1
2022-04-17 21:30:37.312783 size on input set 1
2022-04-17 21:30:57.587337 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order.\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments.\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap.\nh = []\n\n# Put the last element of A into the heap.\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap.\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times.\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    },
    {
      "index": 1,
      "text": "# import heapq\n#\n# # Input\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n#\n# # Sort A in ascending order\n# A.sort()\n#\n# # If N is smaller than A[-1], Takahashi cannot finish all of the assignments\n# if N < A[-1]:\n#     print(-1)\n#     exit()\n#\n# # Initialize a heap\n# h = []\n#\n# # Put the last element of A into the heap\n# heapq.heappush(h, -A[-1])\n#\n# # Put the second-last element of A into the heap\n# heapq.heappush(h, -A[-2])\n#\n# # Repeat M-2 times\n# for i in range(M-2):\n#     # Pop the largest element in the heap\n#     a = -heapq.heappop(h)\n#\n#     # If a is greater than N, Takahashi cannot finish all of the assignments\n#     if a > N:\n#         print(-1)\n#         exit()\n#\n#     # Push a-1 into the heap\n#     heapq.heappush(h, -(a-1))\n#\n# # Pop the largest element in the heap\n# a = -heapq.heappop(h)\n#\n# # If a is greater than N, Takahashi cannot finish all of the assignments\n# if a > N:\n#     print(-1)\n#     exit()\n#\n# # Print N-(a-1)\n# print(N-(a-1))\nimport heapq\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nif n < a[-1]:\n    print(-1)\n    exit()\nh = []\nheapq.heappush(h, -a[-1])\nheapq.heappush(h, -a[-2])\nfor i in range(m-2):\n    a = -heapq.heappop(h)\n    if a > n:\n        print(-1)\n        exit()\n    heapq.heappush(h, -(a-1))\n\na = -heapq.heappop(h)\nif a > n:\n    print(-1)\n    exit()\n\nprint(n-(a-1))\n"
    }
  ],
  "created": 1650231037,
  "object": "edit"
}
2022-04-17 21:30:57.587539 fix syntax errors 2 ['\nimport heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order.\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments.\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap.\nh = []\n\n# Put the last element of A into the heap.\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap.\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times.\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n', '# import heapq\n#\n# # Input\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n#\n# # Sort A in ascending order\n# A.sort()\n#\n# # If N is smaller than A[-1], Takahashi cannot finish all of the assignments\n# if N < A[-1]:\n#     print(-1)\n#     exit()\n#\n# # Initialize a heap\n# h = []\n#\n# # Put the last element of A into the heap\n# heapq.heappush(h, -A[-1])\n#\n# # Put the second-last element of A into the heap\n# heapq.heappush(h, -A[-2])\n#\n# # Repeat M-2 times\n# for i in range(M-2):\n#     # Pop the largest element in the heap\n#     a = -heapq.heappop(h)\n#\n#     # If a is greater than N, Takahashi cannot finish all of the assignments\n#     if a > N:\n#         print(-1)\n#         exit()\n#\n#     # Push a-1 into the heap\n#     heapq.heappush(h, -(a-1))\n#\n# # Pop the largest element in the heap\n# a = -heapq.heappop(h)\n#\n# # If a is greater than N, Takahashi cannot finish all of the assignments\n# if a > N:\n#     print(-1)\n#     exit()\n#\n# # Print N-(a-1)\n# print(N-(a-1))\nimport heapq\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nif n < a[-1]:\n    print(-1)\n    exit()\nh = []\nheapq.heappush(h, -a[-1])\nheapq.heappush(h, -a[-2])\nfor i in range(m-2):\n    a = -heapq.heappop(h)\n    if a > n:\n        print(-1)\n        exit()\n    heapq.heappush(h, -(a-1))\n\na = -heapq.heappop(h)\nif a > n:\n    print(-1)\n    exit()\n\nprint(n-(a-1))\n']
2022-04-17 21:30:57.587578 size on output set 2
