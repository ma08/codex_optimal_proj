2022-04-09 18:36:07.634525 """
A programming competition site AtCode provides algorithmic problems.
Each problem is allocated a score based on its difficulty.
Currently, for each integer i between 1 and D (inclusive), there are p_i problems with a score of 100i points.
These p_1 + … + p_D problems are all of the problems available on AtCode.
A user of AtCode has a value called total score.
The total score of a user is the sum of the following two elements:
 - Base score: the sum of the scores of all problems solved by the user.
 - Perfect bonuses: when a user solves all problems with a score of 100i points, he/she earns the perfect bonus of c_i points, aside from the base score (1 ≤ i ≤ D).
Takahashi, who is the new user of AtCode, has not solved any problem.
His objective is to have a total score of G or more points.
At least how many problems does he need to solve for this objective?

-----Constraints-----
 - 1 ≤ D ≤ 10
 - 1 ≤ p_i ≤ 100
 - 100 ≤ c_i ≤ 10^6
 - 100 ≤ G
 - All values in input are integers.
 - c_i and G are all multiples of 100.
 - It is possible to have a total score of G or more points.

-----Input-----
Input is given from Standard Input in the following format:
D G
p_1 c_1
:
p_D c_D

-----Output-----
Print the minimum number of problems that needs to be solved in order to have a total score of G or more points. Note that this objective is always achievable (see Constraints).

-----Sample Input-----
2 700
3 500
5 800

-----Sample Output-----
3

In this case, there are three problems each with 100 points and five problems each with 200 points. The perfect bonus for solving all the 100-point problems is 500 points, and the perfect bonus for solving all the 200-point problems is 800 points. Takahashi's objective is to have a total score of 700 points or more.
One way to achieve this objective is to solve four 200-point problems and earn a base score of 800 points. However, if we solve three 100-point problems, we can earn the perfect bonus of 500 points in addition to the base score of 300 points, for a total score of 800 points, and we can achieve the objective with fewer problems.
"""
2022-04-09 18:36:07.634566 --------------------------
2022-04-09 18:36:39.641085 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649543768,
  "id": "cmpl-4vDyacTSH8j4pcn6zvo8MgGUdgjva",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 18:36:39.641395 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 18:36:39.641478 REASON stop
2022-04-09 18:36:39.654650 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 18:36:39.654886 REASON stop
