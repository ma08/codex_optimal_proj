["import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n\n    inner([])\n\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\nimport itertools\nimport sys\nimport math\n\ndef main():\n    N = int(input())\n    coordinate = []\n    for i in range(N):\n        coordinate.append(list(map(int, input().split())))\n\n    # \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\n    all_path = list(itertools.permutations(coordinate))\n    total_length = 0\n\n    for path in all_path:\n        for i in range(N-1):\n            total_length += math.sqrt(\n                (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\n    print(total_length/len(all_path))\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import itertools\n# import math\n#\n# def calc_length(path):\n#     length = 0\n#     for i in range(len(path)-1):\n#         length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n#     return length\n#\n# def main():\n#     n = int(input())\n#     towns = []\n#     for i in range(n):\n#         x, y = map(int, input().split())\n#         towns.append((x, y))\n#     # print(towns)\n#\n#     routes = list(itertools.permutations(towns))\n#     # print(routes)\n#\n#     lengths = []\n#     for route in routes:\n#         lengths.append(calc_length(route))\n#     # print(lengths)\n#\n#     print(sum(lengths)/len(lengths))\n#\n# if __name__ == \"__main__\":\n#     main()\n", "\nimport itertools\nimport sys\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n", "\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n\n    routes = list(itertools.permutations(towns))\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n\n        else:\n            for i in range(n):\n\n                if i not in path:\n\n                    inner(path + [i])\n\n    inner([])\n\n    # All lengths of paths\n\n    lengths = [0] * n_factorial\n\n    for i, path in enumerate(paths):\n\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [list(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(round(avg_length, 2))\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\n\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 +\n                            (path[i][1]-path[i+1][1])**2)\n\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths) / len(lengths))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport itertools\nimport math\n\ndef calc_length(route):\n    length = 0\n    for i in range(len(route)-1):\n        length += math.sqrt((route[i][0]-route[i+1][0])**2 + (route[i][1]-route[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\nimport sys\nimport math\n\nn = int(input())\ncoordinate = []\nfor i in range(n):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(n-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n", "\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"]