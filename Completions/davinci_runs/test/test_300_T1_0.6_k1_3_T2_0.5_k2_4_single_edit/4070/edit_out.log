2022-04-23 16:17:27.906271 num operations 1
2022-04-23 16:17:27.906289 size on input set 1
2022-04-23 16:17:27.906431 using api key kouti
2022-04-23 16:17:34.684338 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n and p < 10**9:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n\ndef get_sum_of_digits_of_powers(num):\n    power = 1\n    sum = 0\n    while power <= num:\n        sum += get_sum_of_digits(power)\n        power *= 2\n    return sum\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    print(get_sum_of_digits_of_powers(int(input())))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650730648,
  "object": "edit"
}
2022-04-23 16:17:34.684580 fix syntax errors 4 ["\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n", '\ndef get_sum_of_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n and p < 10**9:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input("Enter a number: "))\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef get_sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n\ndef get_sum_of_digits_of_powers(num):\n    power = 1\n    sum = 0\n    while power <= num:\n        sum += get_sum_of_digits(power)\n        power *= 2\n    return sum\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    print(get_sum_of_digits_of_powers(int(input())))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 16:17:34.684617 size on output set 4
2022-04-23 16:17:34.684628 num operations 1
2022-04-23 16:17:34.684634 size on input set 1
2022-04-23 16:17:34.684759 using api key jaanu
2022-04-23 16:17:40.800805 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Version 1\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 1,
      "text": "\n\n# Version 1 -\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2 -\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 3,
      "text": "\n\n# Version 1\n\n# def solution(n):\n#     # Your code here\n#     nums = list(str(n))\n#     while len(nums) > 1:\n#         next_sum = 0\n#         for i in nums:\n#             next_sum += int(i) ** 2\n#         nums = list(str(next_sum))\n#     return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    }
  ],
  "created": 1650730654,
  "object": "edit"
}
2022-04-23 16:17:40.801152 fix syntax errors 4 ['\n\n# Version 1\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n\n# Version 1 -\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2 -\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n\n# Version 1\n\n# def solution(n):\n#     # Your code here\n#     nums = list(str(n))\n#     while len(nums) > 1:\n#         next_sum = 0\n#         for i in nums:\n#             next_sum += int(i) ** 2\n#         nums = list(str(next_sum))\n#     return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n']
2022-04-23 16:17:40.801270 size on output set 4
2022-04-23 16:17:40.801284 num operations 1
2022-04-23 16:17:40.801290 size on input set 1
2022-04-23 16:17:40.801412 using api key kouti
2022-04-23 16:17:48.365946 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef chess_knight(n, m):\n    if n == 1 or m == 1:\n        return 1\n    elif n == 2 or m == 2:\n        return 2\n    elif n == 3 or m == 3:\n        return 4\n    elif n % 2 == 0 or m % 2 == 0:\n        return chess_knight(n//2, m//2) + 1\n    elif n % 2 != 0 or m % 2 != 0:\n        return chess_knight(((n+1)//2), ((m+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(chess_knight(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input()))\n"
    }
  ],
  "created": 1650730660,
  "object": "edit"
}
2022-04-23 16:17:48.366323 fix syntax errors 4 ["\n\ndef chess_knight(n, m):\n    if n == 1 or m == 1:\n        return 1\n    elif n == 2 or m == 2:\n        return 2\n    elif n == 3 or m == 3:\n        return 4\n    elif n % 2 == 0 or m % 2 == 0:\n        return chess_knight(n//2, m//2) + 1\n    elif n % 2 != 0 or m % 2 != 0:\n        return chess_knight(((n+1)//2), ((m+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(chess_knight(n, m))\n", "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input()))\n"]
2022-04-23 16:17:48.366368 size on output set 3
