2022-04-23 16:34:15.118143 num operations 1
2022-04-23 16:34:15.118164 size on input set 1
2022-04-23 16:34:15.118299 using api key kouti
2022-04-23 16:34:21.184817 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(10**8)\n\n\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650731655,
  "object": "edit"
}
2022-04-23 16:34:21.185113 fix syntax errors 4 ['\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\nsys.setrecursionlimit(10**8)\n\n\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 16:34:21.185153 size on output set 3
2022-04-23 16:34:21.185164 num operations 1
2022-04-23 16:34:21.185169 size on input set 1
2022-04-23 16:34:21.185290 using api key kouti
2022-04-23 16:34:31.762341 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List, Dict\n\n\ndef num_buses_to_destination(routes: List[List[int]]) -> int:\n    \"\"\"\n    Time  : O(N * S * log(S)), where N = len(routes), S = len(routes[i])\n    Space : O(N * S)\n    \"\"\"\n    if not routes:\n        return 0\n\n    # MAP EACH STOP TO THE ROUTES THAT GO THROUGH IT\n    stops_to_routes = defaultdict(set)\n    for i, route in enumerate(routes):\n        for stop in route:\n            stops_to_routes[stop].add(i)\n\n    # INITIALIZE THE OUTPUT AND VISITED SET\n    buses = 0\n    visited = set()\n\n\n    # PERFORM BFS\n    q = [0]\n    while q:\n        curr = q.pop()\n        if curr in visited:\n            continue\n        visited.add(curr)\n        for route in stops_to_routes[curr]:\n            for stop in routes[route]:\n                if stop not in visited:\n                    q.append(stop)\n            buses += 1\n\n    return buses\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    }
  ],
  "created": 1650731661,
  "object": "edit"
}
2022-04-23 16:34:31.762585 fix syntax errors 4 ['\n\nfrom collections import defaultdict\nfrom typing import List, Dict\n\n\ndef num_buses_to_destination(routes: List[List[int]]) -> int:\n    """\n    Time  : O(N * S * log(S)), where N = len(routes), S = len(routes[i])\n    Space : O(N * S)\n    """\n    if not routes:\n        return 0\n\n    # MAP EACH STOP TO THE ROUTES THAT GO THROUGH IT\n    stops_to_routes = defaultdict(set)\n    for i, route in enumerate(routes):\n        for stop in route:\n            stops_to_routes[stop].add(i)\n\n    # INITIALIZE THE OUTPUT AND VISITED SET\n    buses = 0\n    visited = set()\n\n\n    # PERFORM BFS\n    q = [0]\n    while q:\n        curr = q.pop()\n        if curr in visited:\n            continue\n        visited.add(curr)\n        for route in stops_to_routes[curr]:\n            for stop in routes[route]:\n                if stop not in visited:\n                    q.append(stop)\n            buses += 1\n\n    return buses\n', "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"]
2022-04-23 16:34:31.762697 size on output set 3
2022-04-23 16:34:31.762712 num operations 1
2022-04-23 16:34:31.762718 size on input set 1
2022-04-23 16:34:31.762858 using api key kouti
2022-04-23 16:34:37.441679 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    X_min = X[0] - 1\n    X_max = X[-1] + 1\n    total = 0\n    for i in range(M):\n        total += abs(X[i] - X_min)\n    for i in range(M):\n        total += abs(X[i] - X_max)\n    print(total)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M + 1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650731671,
  "object": "edit"
}
2022-04-23 16:34:37.441905 fix syntax errors 4 ["\n\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    X_min = X[0] - 1\n    X_max = X[-1] + 1\n    total = 0\n    for i in range(M):\n        total += abs(X[i] - X_min)\n    for i in range(M):\n        total += abs(X[i] - X_max)\n    print(total)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M + 1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 16:34:37.441951 size on output set 3
