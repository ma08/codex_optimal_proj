["\n\n#-----main-----#\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n", "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n\n\n# Read in STDIN and save numbers\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# Read in STDIN\nn, q = map(int, input().split())\ns = list(input())\n\n# Initialize variables\nac_count = 0 # initial count of AC pairs\nrunning_ac_count = 0 # running count of AC pairs\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\nrunning_ac_count = ac_count # initialize running count of AC pairs\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split()) # get query\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "import sys\nimport os\nfrom collections import deque\nfrom collections import Counter\n\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n", "\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize running count of AC pairs\nrunning_ac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        running_ac_count += 1\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"]