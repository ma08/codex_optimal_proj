2022-04-23 17:18:58.839618 num operations 1
2022-04-23 17:18:58.839639 size on input set 1
2022-04-23 17:18:58.839776 using api key derek
2022-04-23 17:19:07.768585 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432.\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m].\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432.\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 2,
      "text": "\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u041f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    }
  ],
  "created": 1650734338,
  "object": "edit"
}
2022-04-23 17:19:07.768815 fix syntax errors 4 ['\n\n# SOLUTION\n\n# проверка попадания числа в один из интервалов.\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m].\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов.\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\n\n# SOLUTION\n\n# Проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# Перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# Отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n']
2022-04-23 17:19:07.768865 size on output set 3
2022-04-23 17:19:07.768897 num operations 1
2022-04-23 17:19:07.768905 size on input set 1
2022-04-23 17:19:07.769065 using api key jaanu
2022-04-23 17:19:12.734455 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i + 1 not in range(segments[k][0], segments[k][1] + 1):\n        print(i + 1, end=' ')\n    elif k + 1 < len(segments) and i + 1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 2,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n\tif i+1 not in range(segments[k][0], segments[k][1]+1):\n\t\tprint(i+1, end=' ')\n\telif k+1 < len(segments) and i+1 == segments[k][1]:\n\t\tk += 1\n\nprint()\n"
    },
    {
      "index": 3,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    }
  ],
  "created": 1650734347,
  "object": "edit"
}
2022-04-23 17:19:12.734893 fix syntax errors 4 ["\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i + 1 not in range(segments[k][0], segments[k][1] + 1):\n        print(i + 1, end=' ')\n    elif k + 1 < len(segments) and i + 1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n\tif i+1 not in range(segments[k][0], segments[k][1]+1):\n\t\tprint(i+1, end=' ')\n\telif k+1 < len(segments) and i+1 == segments[k][1]:\n\t\tk += 1\n\nprint()\n", "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"]
2022-04-23 17:19:12.734942 size on output set 3
2022-04-23 17:19:12.734957 num operations 1
2022-04-23 17:19:12.734964 size on input set 1
2022-04-23 17:19:12.735121 using api key soukgp
2022-04-23 17:19:24.007556 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# n, m = map(int, input().split())\n# segments = []\n# for i in range(n):\n#     segments.append(list(map(int, input().split())))\n#\n# l = []\n# for i in range(n):\n#     for j in range(segments[i][0], segments[i][1] + 1):\n#         l.append(j)\n#\n# l = list(set(l))\n# l.sort()\n#\n# i = 0\n# while i < len(l):\n#     if l[i] in range(segments[i][0], segments[i][1] + 1):\n#         l.pop(i)\n#     else:\n#         i += 1\n#\n# print(len(l))\n# for i in l:\n#     print(i, end=' ')\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n\n    l = []\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            l.append(j)\n\n    l = list(set(l))\n    l.sort()\n\n    i = 0\n    while i < len(l):\n        if l[i] in range(segments[i][0], segments[i][1] + 1):\n            l.pop(i)\n        else:\n            i += 1\n\n    print(len(l))\n    for i in l:\n        print(i, end=' ')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650734352,
  "object": "edit"
}
2022-04-23 17:19:24.007769 fix syntax errors 4 ["\n#\n# n, m = map(int, input().split())\n# segments = []\n# for i in range(n):\n#     segments.append(list(map(int, input().split())))\n#\n# l = []\n# for i in range(n):\n#     for j in range(segments[i][0], segments[i][1] + 1):\n#         l.append(j)\n#\n# l = list(set(l))\n# l.sort()\n#\n# i = 0\n# while i < len(l):\n#     if l[i] in range(segments[i][0], segments[i][1] + 1):\n#         l.pop(i)\n#     else:\n#         i += 1\n#\n# print(len(l))\n# for i in l:\n#     print(i, end=' ')\n", "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n\n    l = []\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            l.append(j)\n\n    l = list(set(l))\n    l.sort()\n\n    i = 0\n    while i < len(l):\n        if l[i] in range(segments[i][0], segments[i][1] + 1):\n            l.pop(i)\n        else:\n            i += 1\n\n    print(len(l))\n    for i in l:\n        print(i, end=' ')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 17:19:24.007810 size on output set 3
