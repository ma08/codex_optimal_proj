["import os\nimport time\nimport sys\n\n# file\ndef file():\n    try:\n        file = open(\"file.txt\", \"x\")\n        file.write(\"This is a test file\")\n    except FileExistsError:\n        print(\"File already exists\")\n\n# print file\ndef print_file():\n    try:\n        file = open(\"file.txt\", \"r\")\n        print(file.read())\n    except FileNotFoundError:\n        print(\"File doesn't exist\")\n\n# delete file\ndef delete_file():\n    try:\n        os.remove(\"file.txt\")\n        print(\"File has been deleted\")\n    except FileNotFoundError:\n        print(\"File doesn't exist\")\n\n# create directory\ndef directory():\n    try:\n        os.mkdir(\"test\")\n    except FileExistsError:\n        print(\"Directory already exists\")\n\n# delete directory\ndef delete_directory():\n    try:\n        os.rmdir(\"test\")\n    except FileNotFoundError:\n        print(\"Directory doesn't exist\")\n\n# rename directory\ndef rename_directory():\n    try:\n        os.rename(\"test\", \"test2\")\n    except FileNotFoundError:\n        print(\"Directory doesn't exist\")\n\n# rename file\ndef rename_file():\n    try:\n        os.rename(\"file.txt\", \"test.txt\")\n    except FileNotFoundError:\n        print(\"File doesn't exist\")\n\n# print working directory\ndef print_wd():\n    print(os.getcwd())\n\n# change working directory\ndef change_wd():\n    try:\n        os.chdir(\"/Users/mohammed/Desktop\")\n        print(os.getcwd())\n    except FileNotFoundError:\n        print(\"Directory doesn't exist\")\n\n# list directory\ndef list_directory():\n    print(os.listdir())\n\n# print system information\ndef system_info():\n    print(sys.version)\n\n# print current date and time\ndef date_time():\n    print(time.localtime())\n\n# exception handling\ndef exception():\n    try:\n        print(1 / 0)\n    except ZeroDivisionError:\n        print(\"You can't divide by zero\")\n\n# print menu\ndef menu():\n    options = {\n        \"a\": file,\n        \"b\": print_file,\n        \"c\": delete_file,\n        \"d\": directory,\n        \"e\": delete_directory,\n        \"f\": rename_directory,\n        \"g\": rename_file,\n        \"h\": print_wd,\n        \"i\": change_wd,\n        \"j\": list_directory,\n        \"k\": system_info,\n        \"l\": date_time,\n        \"m\": exception\n    }\n\n    print(\"(a) Create file\")\n    print(\"(b) Print file\")\n    print(\"(c) Delete file\")\n    print(\"(d) Create directory\")\n    print(\"(e) Delete directory\")\n    print(\"(f) Rename directory\")\n    print(\"(g) Rename file\")\n    print(\"(h) Print working directory\")\n    print(\"(i) Change working directory\")\n    print(\"(j) List directory\")\n    print(\"(k) System information\")\n    print(\"(l) Current date and time\")\n    print(\"(m) Exception handling\")\n\n    choice = input(\"Choose an option: \")\n\n    if choice in options:\n        options[choice]()\n    else:\n        print(\"Invalid option\")\n\n    menu()\n\nmenu()\n", "\n#\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\n\n\nclass File(object):\n    def __init__(self, path):\n        self.path = path\n\n    def read(self):\n        if os.path.exists(self.path):\n            with open(self.path) as f:\n                return f.read()\n        else:\n            raise FileNotFoundError('file not found')\n\n    def write(self, content):\n        with open(self.path, 'w') as f:\n            return f.write(content)\n\n    def append(self, content):\n        with open(self.path, 'a') as f:\n            return f.write(content)\n\n    def remove(self):\n        if os.path.exists(self.path):\n            os.remove(self.path)\n        else:\n            raise FileNotFoundError('file not found')\n\n    def copy(self, dst):\n        if os.path.exists(self.path):\n            with open(self.path) as rf:\n                with open(dst, 'w') as wf:\n                    for line in rf:\n                        wf.write(line)\n        else:\n            raise FileNotFoundError('file not found')\n\n\nif __name__ == '__main__':\n    file = File('/tmp/test.txt')\n    file.write('hello world')\n    file.append('\\nhello world')\n    print(file.read())\n    file.copy('/tmp/test2.txt')\n    file.remove()\n", "var fs = require(\"fs\");\n\nfs.readFile(\"file.js\", \"utf8\", function(err, data){\n\tif(err){\n\t\treturn console.log(\"Unable to read file\");\n\t}\n\tconsole.log(data);\n});\n", "\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n", "\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n /= 3\n    elif n % 2 == 0:\n        n /= 2\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m /= 3\n    elif m % 2 == 0:\n        m /= 2\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "\nimport math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if (m % n != 0):\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if (m % 2 != 0 and m % 3 != 0):\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if (m == 1):\n            print(count)\n", "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nclass File:\n\tdef __init__(self, name):\n\t\tself.name = name\n\t\tself.size = 0\n\t\tself.contents = \"\"\n\t\tself.children = []\n\t\tself.parent = None\n\n\tdef __str__(self):\n\t\treturn self.name\n\n\tdef __repr__(self):\n\t\treturn self.__str__()\n\n\tdef add_child(self, child):\n\t\tself.children.append(child)\n\t\tchild.parent = self\n\n\tdef get_size(self):\n\t\tif self.size == 0 and len(self.children) > 0:\n\t\t\tself.size = sum([child.get_size() for child in self.children])\n\t\treturn self.size\n\n\tdef get_path(self):\n\t\tif self.parent == None:\n\t\t\treturn \"/\"\n\t\telse:\n\t\t\treturn self.parent.get_path() + self.name + \"/\"\n\n\tdef get_contents(self):\n\t\tif self.contents == \"\" and len(self.children) > 0:\n\t\t\tself.contents = \"\".join([child.get_contents() for child in self.children])\n\t\treturn self.contents\n\n\tdef get_parent(self):\n\t\treturn self.parent\n\n\tdef get_children(self):\n\t\treturn self.children\n\n\tdef get_name(self):\n\t\treturn self.name\n\n\tdef set_name(self, name):\n\t\tself.name = name\n\n\tdef set_size(self, size):\n\t\tself.size = size\n\n\tdef set_contents(self, contents):\n\t\tself.contents = contents\n\n\tdef set_parent(self, parent):\n\t\tself.parent = parent\n\n\tdef set_children(self, children):\n\t\tself.children = children\n", "\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"]