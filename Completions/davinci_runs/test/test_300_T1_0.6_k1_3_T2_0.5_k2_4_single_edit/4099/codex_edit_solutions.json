["\n\n# S = sum(Ai) + x # S is sum of current scores of students\n# x = M * N - S # x is required score\n\nN, K, M = map(int, input().split()) # N is the number of students, K is the max score, M is the average score\nA = list(map(int, input().split())) # A is the list of current scores of students\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n\nN, K, M = map(int, sys.stdin.readline().split())\nscores = list(map(int, sys.stdin.readline().split()))\n\nlowest_score = M\nhighest_score = K\n\nwhile lowest_score < highest_score:\n    middle_score = (lowest_score + highest_score) // 2\n\n    total = sum(scores) + middle_score\n\n    if total >= N * M:\n        highest_score = middle_score\n    else:\n        lowest_score = middle_score + 1\n\nif lowest_score >= K:\n    print(-1)\nelse:\n    print(lowest_score)\n", "import sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nnum = list(map(int, sys.stdin.readline().split()))\n\nnum_set = set(num)\n\nif len(num_set) < K:\n    print(0)\nelse:\n    num_set = sorted(num_set)\n    num_len = len(num_set)\n    max_num = 0\n\n    for i in range(K):\n        max_num = max(max_num, num_set[i])\n\n    print(max_num)\n", "\n\nimport sys\n\ndef solve(n, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "import sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) \n    if required_final_score < 0: return -1\n    else: return required_final_score\n\nif __name__ == '__main__': n, k, m = list(map(int, sys.stdin.readline().split()))\nscores = list(map(int, sys.stdin.readline().split()))\nprint(solve(n, k, m, scores))\n", "\n\n# S = sum(A) + x\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A) + x\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "import sys\n\ndef solve(n, k, m, scores):\n    required_final_score = n * m - sum(scores)\n    if required_final_score < 0 or required_final_score > k:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\n\n# S = sum(Ai) + x\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find\n# a score that meets or exceeds the goal.\n# The highest possible score is the maximum score\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we\n    # can achieve the goal by scoring middle_score on the final subject\n    if total >= N * M:\n        # Set the highest possible score to the middle score\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we\n    # cannot achieve the goal by scoring middle_score on the final subject\n    else:\n        # Set the lowest possible score to 1 greater than the middle score\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot\n# achieve the goal\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final\n# subject\nelse:\n    print(lowest_score)\n"]