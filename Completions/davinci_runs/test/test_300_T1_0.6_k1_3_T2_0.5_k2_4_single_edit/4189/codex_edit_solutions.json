["console.log(\"Hello World!\");\n", "\n\ndef cheese_board():\n    num_cheeses = int(num_cheeses)\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[0])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "import os, sys\n\n# Open a file\npath = \"/Users/sarah/Documents/python/file.txt\"\nfo = open(path, \"wb\")\nprint \"Name of the file: \", fo.name\n\n# Close opend file\nfo.close()\n", "import os\n\ndef main():\n    print(\"hello world\")\n    print(\"test\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import os\nimport sys\nimport re\n\n\ndef openfile():\n    try:\n        f = open(\"/home/michael/c++_test/test.txt\", \"r\")\n        return f\n    except:\n        print(\"Error: file does not exist\")\n        return\n\n\ndef readfile(f):\n    try:\n        lines = f.readlines()\n        return lines\n    except:\n        print(\"Error: could not read file\")\n        return\n\n\ndef check_for_errors(f):\n    try:\n        lines = readfile(f)\n        if lines == None:\n            print(\"Error: could not read file\")\n            return\n        else:\n            for line in lines:\n                if re.search(\"^\\s*$\", line):\n                    print(\"Warning: empty line\")\n                if re.search(\"^\\s*#\", line):\n                    print(\"Warning: line starts with #\")\n                if re.search(\"using namespace\", line):\n                    print(\"Warning: using namespace\")\n                if re.search(\"^\\s*for\", line):\n                    print(\"Warning: for loop\")\n                if re.search(\"^\\s*while\", line):\n                    print(\"Warning: while loop\")\n                if re.search(\"^\\s*if\", line):\n                    print(\"Warning: if condition\")\n                if re.search(\"^\\s*else\", line):\n                    print(\"Warning: else condition\")\n                if re.search(\"^\\s*return\", line):\n                    print(\"Warning: return statement\")\n                if re.search(\"^\\s*break\", line):\n                    print(\"Warning: break statement\")\n                if re.search(\"^\\s*continue\", line):\n                    print(\"Warning: continue statement\")\n                if re.search(\"^\\s*switch\", line):\n                    print(\"Warning: switch statement\")\n                if re.search(\"^\\s*case\", line):\n                    print(\"Warning: case statement\")\n                if re.search(\"^\\s*default\", line):\n                    print(\"Warning: default statement\")\n                if re.search(\"^\\s*try\", line):\n                    print(\"Warning: try statement\")\n                if re.search(\"^\\s*catch\", line):\n                    print(\"Warning: catch statement\")\n                if re.search(\"^\\s*throw\", line):\n                    print(\"Warning: throw statement\")\n                if re.search(\"^\\s*do\", line):\n                    print(\"Warning: do statement\")\n                if re.search(\"^\\s*new\", line):\n                    print(\"Warning: new statement\")\n                if re.search(\"^\\s*delete\", line):\n                    print(\"Warning: delete statement\")\n                if re.search(\"^\\s*goto\", line):\n                    print(\"Warning: goto statement\")\n                if re.search(\"^\\s*const\", line):\n                    print(\"Warning: constant statement\")\n                if re.search(\"^\\s*static\", line):\n                    print(\"Warning: static statement\")\n                if re.search(\"^\\s*auto\", line):\n                    print(\"Warning: auto statement\")\n                if re.search(\"^\\s*extern\", line):\n                    print(\"Warning: extern statement\")\n                if re.search(\"^\\s*register\", line):\n                    print(\"Warning: register statement\")\n                if re.search(\"^\\s*volatile\", line):\n                    print(\"Warning: volatile statement\")\n                if re.search(\"^\\s*typedef\", line):\n                    print(\"Warning: typedef statement\")\n                if re.search(\"^\\s*sizeof\", line):\n                    print(\"Warning: sizeof statement\")\n                if re.search(\"^\\s*this\", line):\n                    print(\"Warning: this statement\")\n    except:\n        print(\"Error: could not check file for errors\")\n        return\n\n\ndef main():\n    try:\n        f = openfile()\n        if f == None:\n            print(\"Error: could not read file\")\n            return\n        else:\n            check_for_errors(f)\n    except:\n        print(\"Error: could not check file for errors\")\n        return\n\n\nmain()\n", "\n\ndef main():\n    n = int(input(\"\"))\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input(\"\").split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input(\"Please enter the number of cheeses: \"))\n    cheeses = []\n    while num_cheeses > 0:\n        line = input(\"Please enter the cheese name followed by the price: \").split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(\"There are\", count, \"different types of cheese.\")\n\n\ncheese_board()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 1\n    count = 0\n    while i < len(cheeses):\n        if cheeses[i] != cheeses[i - 1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input(\"\"))\n    cheeses = []\n    while num_cheeses > 0:\n        line = input(\"\").split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n"]