["\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    gates = [list(map(int, input().split())) for _ in range(m)]\n\n    # convert the input to a list of lists that contains the gates allowed by each ID card\n    allowed_gates = [[] for _ in range(n - 1)]\n    for i in range(m):\n        for j in range(gates[i][0] - 1, gates[i][1]):\n            allowed_gates[j].append(i)\n\n    # initialize the number of ID cards which allow to pass all the gates alone\n    num_cards = 0\n\n    # iterate through the list of lists of allowed gates for each ID card\n    for allowed in allowed_gates:\n        # find the number of gates which are allowed by only this ID card\n        # by finding the difference between the number of allowed gates and the number of gates allowed by all the other ID cards\n        num_alone = len(allowed) - len(set(allowed) - set(allowed_gates[0]) - set(allowed_gates[1]) - set(allowed_gates[2]) - set(allowed_gates[3]) - set(allowed_gates[4]))\n        # if the number of gates alone is equal to the total number of gates, then this ID card allows to pass all the gates alone\n        if num_alone == m:\n            num_cards += 1\n\n    print(num_cards)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    gates = [list(map(int, input().split())) for _ in range(m)]\n\n    # convert the input to a list of lists that contains the gates allowed by each ID card\n    allowed_gates = [[] for _ in range(n)]\n    for i in range(m): # for each gate\n        for j in range(gates[i][0] - 1, gates[i][1]):\n            allowed_gates[j].append(i) # add the gate to the list of allowed gates for the ID card\n\n    # initialize the number of ID cards which allow to pass all the gates alone\n    num_cards = 0\n\n    # iterate through the list of lists of allowed gates for each ID card\n    for allowed in allowed_gates:\n        # find the number of gates which are allowed by only this ID card\n        # by finding the difference between the number of allowed gates and the number of gates allowed by all the other ID cards\n        num_alone = len(allowed) - len(set(allowed) - set(allowed_gates[0]) - set(allowed_gates[1]) - set(allowed_gates[2]) - set(allowed_gates[3])) # TODO: find a better way to do this\n        # if the number of gates alone is equal to the total number of gates, then this ID card allows to pass all the gates alone\n        if num_alone == m:\n            num_cards += 1\n\n    print(num_cards)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    gates = [list(map(int, input().split())) for _ in range(m)]\n\n    # convert the input to a list of lists that contains the gates allowed by each ID card\n    allowed_gates = [[] for _ in range(n)]\n    for i in range(m):\n        for j in range(gates[i][0] - 1, gates[i][1]):\n            allowed_gates[j].append(i)\n\n    # initialize the number of ID cards which allow to pass all the gates alone\n    num_cards = 0\n\n    # iterate through the list of lists of allowed gates for each ID card\n    for allowed in allowed_gates:\n        # find the number of gates which are allowed by only this ID card\n        # by finding the difference between the number of allowed gates and the number of gates allowed by all the other ID cards\n        num_alone = len(allowed) - len(set(allowed) - set(allowed_gates[0]) - set(allowed_gates[1]) - set(allowed_gates[2]) - set(allowed_gates[3]) - set(allowed_gates[4]))\n        # if the number of gates alone is equal to the total number of gates, then this ID card allows to pass all the gates alone\n        if num_alone == m:\n            num_cards += 1\n\n    print(num_cards)\n\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\nL = []\nR = []\nfor _ in range(M):\n    l, r = map(int, input().split())\n    L.append(l)\n    R.append(r)\n\nL_min = min(L)\nR_max = max(R)\nif R_max - L_min + 1 >= 0:\n    print(R_max - L_min + 1)\nelse:\n    print(0)\n", "import sys\n\nn, m = map(int, input().split())\n\n# trange[i] \u306fi\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u304c\u901a\u308c\u308b\u9580\u306e\u6700\u5927\u5024\ntrange = [0] * n\n\n# \u9580\u304c\u901a\u308c\u308b\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6c42\u3081\u308b\nfor i in range(m):\n    l, r = map(int, input().split())\n    for j in range(l-1, r):\n        trange[j] = r\n\n# \u901a\u308c\u308b\u9580\u304cm\u4ee5\u4e0a\u3042\u308b\u30ab\u30fc\u30c9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6c42\u3081\u308b\nprint(len([i for i in trange if i >= m]))\n", "\n\n# N, M = map(int, input().split())\n# L = []\n# R = []\n# for _ in range(M):\n#     l, r = map(int, input().split())\n#     L.append(l)\n#     R.append(r)\n\n# L_min = min(L)\n# R_max = max(R)\n# print(R_max - L_min + 1)\n\n# N, A, B = map(int, input().split())\n# X = list(map(int, input().split()))\n# ans = 0\n# for i in range(1, N):\n#     d = X[i] - X[i - 1]\n#     if d * A > B:\n#         ans += B\n#     else:\n#         ans += d * A\n# print(ans)\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# A.sort()\n# B.sort()\n# ans = 0\n# for a in A:\n#     for b in B:\n#         if a < b:\n#             ans += 1\n#             B.remove(b)\n#             break\n# print(ans)\n\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for _ in range(N):\n#     a = A.pop(0)\n#     if a % 2 == 0:\n#         ans += 1\n#         A = [a // 2 for a in A]\n# print(ans)\n\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# A.sort()\n# B.sort(reverse=True)\n# ans = 0\n# for a, b in zip(A, B):\n#     ans += a * b\n# print(ans)\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# A.sort(reverse=True)\n# B.sort()\n# ans = 0\n# for a, b in zip(A, B):\n#     ans += a * b\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     if a < 0:\n#         ans += 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# A.sort()\n# ans = 0\n# for i in range(1, N):\n#     ans += A[i] - A[i - 1]\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# A.sort()\n# ans = 0\n# for i in range(1, N):\n#     ans += A[i] - A[i - 1]\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# A.sort()\n# ans = 0\n# for i in range(1, N):\n#     ans += A[i] - A[i - 1]\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n\n# N = int(input())\n# A = list(map(int, input().split()))\n# ans = 0\n# for a in A:\n#     ans += a - 1\n# print(ans)\n", "n, m = map(int, input().split())\n\n# trange[i] \u306fi\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u304c\u901a\u308c\u308b\u9580\u306e\u6700\u5927\u5024\ntrange = [0] * n\n\n# \u9580\u304c\u901a\u308c\u308b\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6c42\u3081\u308b\nfor i in range(m):\n    l, r = map(int, input().split())\n    for j in range(l-1, r):\n        trange[j] = r\n\n# \u901a\u308c\u308b\u9580\u304cm\u4ee5\u4e0a\u3042\u308b\u30ab\u30fc\u30c9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6c42\u3081\u308b\nprint(len([i for i in trange if i >= m]))\n", "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    gates = [list(map(int, input().split())) for _ in range(m)]\n\n    # convert the input to a list of lists that contains the gates allowed by each ID card\n    allowed_gates = [[] for _ in range(m)]\n    for i in range(m):\n        for j in range(gates[i][0] - 1, gates[i][1]):\n            allowed_gates[j].append(i)\n\n    # initialize the number of ID cards which allow to pass all the gates alone\n    num_cards = 0\n\n    # iterate through the list of lists of allowed gates for each ID card\n    for allowed in allowed_gates:\n        # find the number of gates which are allowed by only this ID card\n        # by finding the difference between the number of allowed gates and the number of gates allowed by all the other ID cards\n        num_alone = len(allowed) - len(set(allowed) - set(allowed_gates[0]) - set(allowed_gates[1]) - set(allowed_gates[2]) - set(allowed_gates[3]))\n        # if the number of gates alone is equal to the total number of gates, then this ID card allows to pass all the gates alone\n        if num_alone == m:\n            num_cards += 1\n\n    print(num_cards)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, m = map(int, input().split())\n\n# trange[i] \u306fi\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u304c\u901a\u308c\u308b\u9580\u306e\u6700\u5927\u5024\ntrange = [0] * n\n\n# \u9580\u304c\u901a\u308c\u308b\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6c42\u3081\u308b\nfor i in range(m):\n    l, r = map(int, input().split())\n    for j in range(l - 1, r):\n        trange[j] = r\n\n# \u901a\u308c\u308b\u9580\u304cm\u4ee5\u4e0a\u3042\u308b\u30ab\u30fc\u30c9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6c42\u3081\u308b\nprint(len([i for i in trange if i >= m]))\n", "\nN, M = map(int, input().split())\nL = []\nR = []\nfor _ in range(M):\n    l, r = map(int, input().split())\n    L.append(l)\n    R.append(r)\n\nL_min = min(L)\nR_max = max(R)\nprint(R_max - L_min + 1)\n", "\nprint(len(set(input().split())))\n", "\nimport sys\n\nn, m = map(int, input().split())\n\n# trange[i] \u306fi\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u304c\u901a\u308c\u308b\u9580\u306e\u6700\u5927\u5024\ntrange = [0] * n\n\n# \u9580\u304c\u901a\u308c\u308b\u30ab\u30fc\u30c9\u756a\u53f7\u3092\u6c42\u3081\u308b\nfor i in range(m):\n    l, r = map(int, input().split())\n    for j in range(l-1, r):\n        trange[j] = r\n\n# \u901a\u308c\u308b\u9580\u304cm\u4ee5\u4e0a\u3042\u308b\u30ab\u30fc\u30c9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6c42\u3081\u308b\nprint(len([i for i in trange if i >= m]))\n"]