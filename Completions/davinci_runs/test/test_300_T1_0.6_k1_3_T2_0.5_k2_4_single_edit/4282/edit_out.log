2022-04-23 17:33:39.225685 num operations 1
2022-04-23 17:33:39.225706 size on input set 1
2022-04-23 17:33:39.225987 using api key derek
2022-04-23 17:33:50.376318 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef f(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[1]+s[0]\n    return s[len(s)-1] + f(s[1:len(s)-1]) + s[0]\nprint(f('abcde'))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i + 1)\n        kids[input[i][1]].add(i + 1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n"
    }
  ],
  "created": 1650735219,
  "object": "edit"
}
2022-04-23 17:33:50.376593 fix syntax errors 4 ["\ndef f(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[1]+s[0]\n    return s[len(s)-1] + f(s[1:len(s)-1]) + s[0]\nprint(f('abcde'))\n", '\n\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n', "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i + 1)\n        kids[input[i][1]].add(i + 1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", '\n\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n']
2022-04-23 17:33:50.376642 size on output set 3
2022-04-23 17:33:50.376655 num operations 1
2022-04-23 17:33:50.376661 size on input set 1
2022-04-23 17:33:50.376802 using api key sunu
2022-04-23 17:33:58.376266 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef adj_list(m, a):\n    adj = [[] for _ in range(m)]\n    for i in range(m):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    m = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join(map(str, cycle)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650735230,
  "object": "edit"
}
2022-04-23 17:33:58.376834 fix syntax errors 4 ["\n\ndef adj_list(m, a):\n    adj = [[] for _ in range(m)]\n    for i in range(m):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    m = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join(map(str, cycle)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 17:33:58.377071 size on output set 4
2022-04-23 17:33:58.377106 num operations 1
2022-04-23 17:33:58.377118 size on input set 1
2022-04-23 17:33:58.377317 using api key kouti
2022-04-23 17:34:05.182890 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    s = input()\n    print(s)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] - 1\n    p[2] = a[0, 1] - 1\n    for i in range(3, n):\n        p[i] = a[p[i - 1], 0] - 1 if a[p[i - 1], 0] != p[i - 2] + 1 else a[p[i - 1], 1] - 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] \\\n            else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650735238,
  "object": "edit"
}
2022-04-23 17:34:05.183116 fix syntax errors 4 ["\n\ndef main():\n    s = input()\n    print(s)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] - 1\n    p[2] = a[0, 1] - 1\n    for i in range(3, n):\n        p[i] = a[p[i - 1], 0] - 1 if a[p[i - 1], 0] != p[i - 2] + 1 else a[p[i - 1], 1] - 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] \\\n            else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 17:34:05.183152 size on output set 4
