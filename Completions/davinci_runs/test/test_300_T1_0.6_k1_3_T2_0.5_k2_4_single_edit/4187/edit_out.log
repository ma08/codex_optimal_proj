2022-04-23 16:58:11.415033 num operations 1
2022-04-23 16:58:11.415058 size on input set 1
2022-04-23 16:58:11.415210 using api key kouti
2022-04-23 16:58:22.330129 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(a[0])\n    a.append(a[1])\n\n    best = 0\n    length = 0\n\n    for i in range(n + 2):\n        if a[i] == 1:\n            length += 1\n        else:\n            best = max(best, length)\n            length = 0\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue May 19 20:30:54 2020\n\n@author: antonio\n\"\"\"\n#%%\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\n#%%\nprint(best)\n"
    },
    {
      "index": 3,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()[:n]))\n\nfor i in range(n):\n    if a[i] == 0:\n        a[i] = k + 1\n\nans = 0\nfor i in range(n):\n    ans += a[i] // k\n    a[i] %= k\n\nprint(best)\n"
    }
  ],
  "created": 1650733091,
  "object": "edit"
}
2022-04-23 16:58:22.330385 fix syntax errors 4 ['\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(a[0])\n    a.append(a[1])\n\n    best = 0\n    length = 0\n\n    for i in range(n + 2):\n        if a[i] == 1:\n            length += 1\n        else:\n            best = max(best, length)\n            length = 0\n\n    print(best)\n\n\nif __name__ == "__main__":\n    main()\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Tue May 19 20:30:54 2020\n\n@author: antonio\n"""\n#%%\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\n#%%\nprint(best)\n', '\n\nn, k = map(int, input().split())\na = list(map(int, input().split()[:n]))\n\nfor i in range(n):\n    if a[i] == 0:\n        a[i] = k + 1\n\nans = 0\nfor i in range(n):\n    ans += a[i] // k\n    a[i] %= k\n\nprint(best)\n']
2022-04-23 16:58:22.330423 size on output set 4
2022-04-23 16:58:22.330434 num operations 1
2022-04-23 16:58:22.330439 size on input set 1
2022-04-23 16:58:22.330566 using api key jaanu
2022-04-23 16:58:36.518882 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 1,
      "text": "def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 3,
      "text": "def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    }
  ],
  "created": 1650733102,
  "object": "edit"
}
2022-04-23 16:58:36.519100 fix syntax errors 4 ['\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', 'def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', 'def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n']
2022-04-23 16:58:36.519236 size on output set 2
2022-04-23 16:58:36.519251 num operations 1
2022-04-23 16:58:36.519257 size on input set 1
2022-04-23 16:58:36.519381 using api key sunu
2022-04-23 16:58:39.394267 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    }
  ],
  "created": 1650733116,
  "object": "edit"
}
2022-04-23 16:58:39.394498 fix syntax errors 4 ['#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n']
2022-04-23 16:58:39.394527 size on output set 2
