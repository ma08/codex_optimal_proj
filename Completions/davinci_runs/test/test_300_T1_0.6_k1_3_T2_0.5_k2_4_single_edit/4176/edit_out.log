2022-04-23 16:54:37.999585 num operations 1
2022-04-23 16:54:37.999605 size on input set 1
2022-04-23 16:54:37.999742 using api key soukgp
2022-04-23 16:54:42.605442 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# coding: utf-8\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    a = input()\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(a * b // gcd(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650732878,
  "object": "edit"
}
2022-04-23 16:54:42.605686 fix syntax errors 4 ["\n# coding: utf-8\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a = input()\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(a * b // gcd(a, b))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 16:54:42.605718 size on output set 4
2022-04-23 16:54:42.605729 num operations 1
2022-04-23 16:54:42.605735 size on input set 1
2022-04-23 16:54:42.605859 using api key derek
2022-04-23 16:54:46.016662 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 1,
      "text": "\n\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 2,
      "text": "\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 3,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    }
  ],
  "created": 1650732882,
  "object": "edit"
}
2022-04-23 16:54:46.016953 fix syntax errors 4 ['\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n\n# ==========\n# Solution 1\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n']
2022-04-23 16:54:46.017000 size on output set 3
2022-04-23 16:54:46.017024 num operations 1
2022-04-23 16:54:46.017031 size on input set 1
2022-04-23 16:54:46.017167 using api key jaanu
2022-04-23 16:54:52.962050 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\nNotes\n-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\n\nAuthor\n------\ndbonadiman\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    A, B = map(int, sys.stdin.readline().split())  # read input\n\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)  # calculate LCM(A, B)\n\n    print(LCM)  # print result\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\n-----Notes-----\nWe can say that the LCM of A and B is the minimum number of snack pieces\nthat can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    a, b = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    lcm = reduce(mul, [a, b], 1) // gcd(a, b)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650732886,
  "object": "edit"
}
2022-04-23 16:54:52.962314 fix syntax errors 4 ['\n"""\nNotes\n-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\n\nAuthor\n------\ndbonadiman\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    A, B = map(int, sys.stdin.readline().split())  # read input\n\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)  # calculate LCM(A, B)\n\n    print(LCM)  # print result\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\nWe can say that the LCM of A and B is the minimum number of snack pieces\nthat can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    a, b = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    lcm = reduce(mul, [a, b], 1) // gcd(a, b)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 16:54:52.962474 size on output set 4
