["\nfrom sys import stdin\n\n# Read from standard input\nN, K = map(int, stdin.readline().split())\n\n# If N is even and K is odd, Aoki can always make N=0\nif N % 2 == 0 and K % 2 == 1:\n    print(0)\n# Else, the minimum value is N modulo K\nelse:\n    print(N % K)\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    C = list(map(int, sys.stdin.readline().split()))\n\n    prev = A[0]\n    cnt = 0\n    for i in range(1, N):\n        if A[i] == prev + 1:\n            cnt += 1\n        prev = A[i]\n\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n# Read from standard input\nN, K = map(int, stdin.readline().split())\n# If N is even and K is odd, Aoki can always make N=0\nif N % 2 == 0 and K % 2 == 1:\n    print(0)\n# Else, the minimum value is N modulo K\nelse:\n    print(N % K)\n", "\n\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods.\nimport atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.BytesIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# Your code goes here.\n\nN, K = map(int, input().split())\n\nif N % K == 0:\n    print(0)\nelse:\n    print(min(N % K, K - N % K))\n", "\n#\nfrom sys import stdin\n\n# Read from standard input\nN, K = map(int, stdin.readline().split())\n\n# If N is even and K is odd, Aoki can always make N=0\nif N % 2 == 0 and K % 2 == 1:\n    print(0)\n# Else, the minimum value is N modulo K\nelse:\n    print(N % K)\n", "\n\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods.\nimport atexit\nimport io\nimport sys\n\n# _INPUT_LINES = sys.stdin.read().splitlines()\n# input = iter(_INPUT_LINES).next\n# _OUTPUT_BUFFER = io.BytesIO()\n# sys.stdout = _OUTPUT_BUFFER\n\n\n# @atexit.register\n# def write():\n#     sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# Your code goes here.\n\n# N, K = map(int, input().split())\n\n# if N % K == 0:\n#     print(0)\n# else:\n#     print(min(N % K, K - N % K))\n", "\nimport sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    if N % K == 0:\n        print(0)\n    else:\n        print(N % K)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    print(min(N % K, abs(N % K - K)))\n\nif __name__ == '__main__':\n    main()\n", "\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n\"\"\"\n-----Solution----- \n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods. \nimport atexit\nimport io\nimport sys\n \n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).next\n_OUTPUT_BUFFER = io.BytesIO()\nsys.stdout = _OUTPUT_BUFFER\n \n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n \n# Your code goes here. \n \nN, K = map(int, input().split())\n\nif N % K == 0:\n    print(0)\nelse:\n    print(min(N % K, K - N % K))\n", "\n\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods.\nimport atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).next\n_OUTPUT_BUFFER = io.BytesIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n\"\"\"\n-----Solution-----\n\"\"\"\n\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# Your code goes here.\n\nN, K = map(int, input().split())\n\nif N % K == 0:\n    print(0)\nelse:\n    print(min(N % K, K - N % K))\n"]