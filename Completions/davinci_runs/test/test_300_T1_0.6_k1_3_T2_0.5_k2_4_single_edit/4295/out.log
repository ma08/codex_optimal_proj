2022-04-18 04:11:40.647594 """
Given any integer x, Aoki can do the operation below.
Operation: Replace x with the absolute difference of x and K.
You are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.

-----Constraints-----
 - 0 ≤ N ≤ 10^{18}
 - 1 ≤ K ≤ 10^{18}
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N K

-----Output-----
Print the minimum possible value taken by N after Aoki does the operation zero or more times.

-----Sample Input-----
7 4

-----Sample Output-----
1

Initially, N=7.
After one operation, N becomes |7-4| = 3.
After two operations, N becomes |3-4| = 1, which is the minimum value taken by N.
"""
2022-04-18 04:11:40.647620 --------------------------
2022-04-18 04:12:10.522733 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\n\n# Read from standard input\nN, K = map(int, stdin.readline().split())\n\n# If N is even and K is odd, Aoki can always make N=0\nif N % 2 == 0 and K % 2 == 1:\n    print(0)\n# Else, the minimum value is N modulo K\nelse:\n    print(N % K)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods.\nimport atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).next\n_OUTPUT_BUFFER = io.BytesIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# Your code goes here.\n\nN, K = map(int, input().split())\n\nif N % K == 0:\n    print(0)\nelse:\n    print(min(N % K, K - N % K))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    if N % K == 0:\n        print(0)\n    else:\n        print(N % K)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650255100,
  "id": "cmpl-4yD1gAUkZ3xeusdtV2n8isfxMI34K",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 04:12:10.522975 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\n\n# Read from standard input\nN, K = map(int, stdin.readline().split())\n\n# If N is even and K is odd, Aoki can always make N=0\nif N % 2 == 0 and K % 2 == 1:\n    print(0)\n# Else, the minimum value is N modulo K\nelse:\n    print(N % K)"
}
2022-04-18 04:12:10.523014 REASON stop
2022-04-18 04:12:10.556484 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\"\"\"\n-----TODO-----\n-\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"\n\n# This code is for the purpose of importing faster input/output methods.\nimport atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).next\n_OUTPUT_BUFFER = io.BytesIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# Your code goes here.\n\nN, K = map(int, input().split())\n\nif N % K == 0:\n    print(0)\nelse:\n    print(min(N % K, K - N % K))"
}
2022-04-18 04:12:10.556561 REASON stop
2022-04-18 04:12:10.557100 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    if N % K == 0:\n        print(0)\n    else:\n        print(N % K)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 04:12:10.557188 REASON stop
