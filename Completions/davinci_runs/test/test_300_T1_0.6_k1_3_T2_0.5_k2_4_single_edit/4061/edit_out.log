2022-04-23 16:13:39.261429 num operations 1
2022-04-23 16:13:39.261473 size on input set 1
2022-04-23 16:13:39.261694 using api key derek
2022-04-23 16:13:44.446485 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - i\n\nprint(res + 1)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()  # rstrip: \ubb38\uc790\uc5f4\uc758 \uc624\ub978\ucabd \uacf5\ubc31\uc744 \uc81c\uac70\n\nline = stdin.readline()\nt = line.rstrip()  # rstrip: \ubb38\uc790\uc5f4\uc758 \uc624\ub978\ucabd \uacf5\ubc31\uc744 \uc81c\uac70\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i\n\nprint(res)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    res += 1\n    i += 1\n\nprint(res)\n"
    }
  ],
  "created": 1650730419,
  "object": "edit"
}
2022-04-23 16:13:44.446769 fix syntax errors 4 ['\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - i\n\nprint(res + 1)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()  # rstrip: 문자열의 오른쪽 공백을 제거\n\nline = stdin.readline()\nt = line.rstrip()  # rstrip: 문자열의 오른쪽 공백을 제거\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i\n\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    res += 1\n    i += 1\n\nprint(res)\n']
2022-04-23 16:13:44.446807 size on output set 4
2022-04-23 16:13:44.446817 num operations 1
2022-04-23 16:13:44.446822 size on input set 1
2022-04-23 16:13:44.446991 using api key kouti
2022-04-23 16:13:56.298230 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 1,
      "text": "\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) < len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef findLongestSubstring(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 1\n\n    # the stack keeps the index of the characters\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                if s[stack[-1]] == '(':\n                    stack.pop()\n                else:\n                    stack.append(i)\n\n    if len(stack) == 0:\n        return len(s)\n\n    max_length = 0\n    end = len(s)\n    while len(stack) > 0:\n        start = stack.pop()\n        max_length = max(max_length, end - start - 1)\n        end = start\n    max_length = max(max_length, end)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    print findLongestSubstring(s)\n"
    },
    {
      "index": 3,
      "text": "\ndef find_longest_substring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n"
    }
  ],
  "created": 1650730424,
  "object": "edit"
}
2022-04-23 16:13:56.298456 fix syntax errors 4 ['\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n', '\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) < len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s):\n    """\n    :type s: str\n    :rtype: int\n    """\n    if len(s) == 0:\n        return 1\n\n    # the stack keeps the index of the characters\n    stack = []\n    for i in range(len(s)):\n        if s[i] == \'(\':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                if s[stack[-1]] == \'(\':\n                    stack.pop()\n                else:\n                    stack.append(i)\n\n    if len(stack) == 0:\n        return len(s)\n\n    max_length = 0\n    end = len(s)\n    while len(stack) > 0:\n        start = stack.pop()\n        max_length = max(max_length, end - start - 1)\n        end = start\n    max_length = max(max_length, end)\n\n    return max_length\n\n\nif __name__ == "__main__":\n    s = raw_input()\n    print findLongestSubstring(s)\n', '\ndef find_longest_substring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n']
2022-04-23 16:13:56.298582 size on output set 4
2022-04-23 16:13:56.298597 num operations 1
2022-04-23 16:13:56.298604 size on input set 1
2022-04-23 16:13:56.298734 using api key sunu
2022-04-23 16:14:03.716964 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 1,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 2,
      "text": "#\n# s = input()\n# t = input()\n#\n# cnt = 0\n#\n# for i in range(len(s)):\n#     if s[i] == t[0]:\n#         cnt += 1\n#         t = t[1:]\n#     if len(t) == 0:\n#         break\n#\n# if len(t) == 0:\n#     print(len(s) - cnt)\n# else:\n#     print(len(s))\n"
    },
    {
      "index": 3,
      "text": "\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n        if len(t) == 0:\n            break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    }
  ],
  "created": 1650730436,
  "object": "edit"
}
2022-04-23 16:14:03.717197 fix syntax errors 4 ['s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', 's = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', '#\n# s = input()\n# t = input()\n#\n# cnt = 0\n#\n# for i in range(len(s)):\n#     if s[i] == t[0]:\n#         cnt += 1\n#         t = t[1:]\n#     if len(t) == 0:\n#         break\n#\n# if len(t) == 0:\n#     print(len(s) - cnt)\n# else:\n#     print(len(s))\n', '\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n        if len(t) == 0:\n            break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n']
2022-04-23 16:14:03.717247 size on output set 3
