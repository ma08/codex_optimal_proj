["\nn = int(input())\nq = list(map(int, input().split()))\n\nif not all([-n < x < n for x in q]):\n    print(-1)\nelse:\n    p = [1]\n    for i in range(1, n):\n        p.append(p[-1] + q[i-1])\n    if not all([1 <= x <= n for x in p]):\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\nn = int(input())\nq = [int(i) for i in input().split()]\n\n# check if possible\nif sum(q) != 0:\n\tprint(-1)\n\texit()\n\n# check if possible\nfor i in q:\n\tif abs(i) >= n:\n\t\tprint(-1)\n\t\texit()\n\n# check if possible\nfor i in range(1, n):\n\tif q[i] == q[i-1]:\n\t\tprint(-1)\n\t\texit()\n\n# calculate p\np = [0 for i in range(n)]\nfor i in range(n-1):\n\tp[i+1] = p[i] + q[i]\n\n# check if possible\nfor i in p:\n\tif i > n or i < -1:\n\t\tprint(-1)\n\t\texit()\n\n# print possible p\nprint(*p)\n", "\nprint(input())\n", "\n\nn = int(input())\nq = [int(i) for i in input().split()]\n\n# first and last values of p\np_first = -1\np_last = n\n\n# check if possible\nif sum(q) != 0:\n\tprint(-1)\n\tsys.exit()\n\n# check if possible\nfor i in q:\n\tif abs(i) >= n:\n\t\tprint(-1)\n\t\tsys.exit()\n\n# check if possible\nfor i in range(1, n):\n\tif q[i] == q[i-1]:\n\t\tprint(-1)\n\t\tsys.exit()\n\n# calculate p\np = [0 for i in range(n)]\nfor i in range(n-1):\n\tp[i+1] = p[i] + q[i]\n\n# check if possible\nfor i in p:\n\tif i > p_last or i < p_first:\n\t\tprint(-1)\n\t\tsys.exit()\n\n# print possible p\nprint(*p)\n", "\n\nn = int(input())\nq = list(map(int, input().split()))\n\nq.sort()\n\np = [0]*n\np[0] = q[0]\n\nfor i in range(1, n-1):\n    p[i] = q[i] + p[i-1]\n\np[n-1] = q[n-2] + p[n-2]\n\nif p[n-1] < 1:\n    print('-1')\nelse:\n    print(*p)\n", "\ndef main():\n\tn = int(input())\n\tq = [int(i) for i in input().split()]\n\t\n\t# first and last values of p\n\tp_first = -1\n\tp_last = n\n\t\n\t# check if possible\n\tif sum(q) != 0:\n\t\tprint(-1)\n\t\texit()\n\t\n\t# check if possible\n\tfor i in q:\n\t\tif abs(i) >= n:\n\t\t\tprint(-1)\n\t\t\texit()\n\t\n\t# check if possible\n\tfor i in range(1, n):\n\t\tif q[i] == q[i-1]:\n\t\t\tprint(-1)\n\t\t\texit()\n\t\n\t# calculate p\n\tp = [0 for i in range(n)]\n\tfor i in range(n-1):\n\t\tp[i+1] = p[i] + q[i]\n\t\n\t# check if possible\n\tfor i in p:\n\t\tif i > p_last or i < p_first:\n\t\t\tprint(-1)\n\t\t\texit()\n\t\n\t# print possible p\n\tprint(*p)\n\t\nmain()\n", "\nn = int(input())\nq = list(map(int, input().split()))\n\nq.sort()\n\np = [0]*n\np[0] = q[0]\n\nfor i in range(1, n-1):\n    p[i] = q[i] + p[i-1]\n\np[n-1] = q[n-2] + p[n-2]\n\nif p[n-1] < 1:\n    print(-1)\nelse:\n    print(*p)\n", "\n\nn = int(input())\nq = [int(i) for i in input().split()]\n\n# first and last values of p\np_first = -1\np_last = n\n\n# check if possible\nif sum(q) != 0:\n\tprint(-1)\n\texit()\n\n# check if possible\nfor i in q:\n\tif abs(i) >= n:\n\t\tprint(-1)\n\t\texit()\n\n# check if possible \nfor i in range(1, n):\n\tif q[i] == q[i-1]:\n\t\tprint(-1)\n\t\texit()\n\n# calculate p\np = [0 for i in range(n)]\nfor i in range(n-1):\n\tp[i+1] = p[i] + q[i]\n\n# check if possible\nfor i in p:\n\tif i > p_last or i < p_first:\n\t\tprint(-1)\n\t\texit()\n\n# print possible p\nprint(*p)\n", "\n\nn = int(input())\nq = list(map(int, input().split()))\n\nq.sort()\n\np = [0]*n\np[0] = q[0]\n\nfor i in range(1, n-1):\n    p[i] = q[i] + p[i-1]\n\np[n-1] = q[n-1] + p[n-2]\n\nif p[n-1] < 1:\n    print(-1)\nelse:\n    print(*p)\n", "\nn, m = [int(x) for x in input().split()]\nfor i in range(n):\n    print('*'*m)\n", "\nn = int(input())\nq = [int(x) for x in input().split()]\n\nif not all([-n < x < n for x in q]):\n    print(-1)\nelse:\n    p = [1]\n    for i in range(1, n):\n        p.append(p[-1] + q[i-1])\n    if not all([1 <= x <= n for x in p]):\n        print(-1)\n    else:\n        print(' '.join([str(x) for x in p]))\n", "#!/usr/bin/env python3\n\nn = int(input())\nq = [int(x) for x in input().split()]\n\nif not all([-n < x < n for x in q]):\n    print(-1)\nelse:\n    p = [1]\n    for i in range(1, n):\n        p.append(p[-1] + q[i-1])\n    if not all([1 <= x <= n for x in p]):\n        print(-1)\n    else:\n        print(' '.join([str(x) for x in p]))\n"]