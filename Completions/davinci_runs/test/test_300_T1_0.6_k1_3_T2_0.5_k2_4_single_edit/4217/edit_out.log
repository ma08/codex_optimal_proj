2022-04-23 17:11:23.423444 num operations 1
2022-04-23 17:11:23.423467 size on input set 1
2022-04-23 17:11:23.423611 using api key kouti
2022-04-23 17:11:26.870097 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 if e == N else 0 for e in dic.values()]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650733883,
  "object": "edit"
}
2022-04-23 17:11:26.870333 fix syntax errors 4 ["\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 if e == N else 0 for e in dic.values()]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 17:11:26.870367 size on output set 3
2022-04-23 17:11:26.870378 num operations 1
2022-04-23 17:11:26.870383 size on input set 1
2022-04-23 17:11:26.870506 using api key soukgp
2022-04-23 17:11:30.585118 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in foods for foods in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list): # i\uac00 \ubaa8\ub4e0 food_list\uc5d0 \uc788\uc73c\uba74\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 3,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    }
  ],
  "created": 1650733886,
  "object": "edit"
}
2022-04-23 17:11:30.585417 fix syntax errors 4 ['\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in foods for foods in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '# -*- coding: utf-8 -*-\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list): # i가 모든 food_list에 있으면\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n']
2022-04-23 17:11:30.585459 size on output set 3
2022-04-23 17:11:30.585470 num operations 1
2022-04-23 17:11:30.585476 size on input set 1
2022-04-23 17:11:30.585600 using api key sunu
2022-04-23 17:11:38.665718 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#\n# I think this is a good example of how to use bit operations\n#\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N # This is a list of integers\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1)) # This is a bitwise or operation\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n\n#\n# I think this is a good example of how to use bit operations\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n\n# I think this is a good example of how to use bit operations.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * (N + 1)\nfor i in range(1, N + 1):\n    like_foods[i] = 0  # initialize\n    _, *foods = [int(n) for n in input().split()]  # read and split\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))  # set bits\n\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(1, N + 1):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:  # all N people like this food\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650733890,
  "object": "edit"
}
2022-04-23 17:11:38.666058 fix syntax errors 4 ["\n\n#\n# I think this is a good example of how to use bit operations\n#\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N # This is a list of integers\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1)) # This is a bitwise or operation\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n\n#\n# I think this is a good example of how to use bit operations\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", '\n\n# I think this is a good example of how to use bit operations.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * (N + 1)\nfor i in range(1, N + 1):\n    like_foods[i] = 0  # initialize\n    _, *foods = [int(n) for n in input().split()]  # read and split\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))  # set bits\n\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(1, N + 1):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:  # all N people like this food\n        count += 1\n\nprint(count)\n']
2022-04-23 17:11:38.666100 size on output set 4
