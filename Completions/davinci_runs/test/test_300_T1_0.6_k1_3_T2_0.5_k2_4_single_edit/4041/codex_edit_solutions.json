["def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(a, b):\n    n = len(a)\n    m = len(b)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return dp[-1][-1]\n\n\na = input()\nb = input()\nprint(len(a) + len(b) - solve(a, b))\n", "def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "\n\n# get the input\ns = input()\n\n# do the work\n# ...\n\n# output the answer\nprint(s)\n", "\n", "\n\n# this is a \"hard\" version of the problem\n# the \"easy\" version has a shorter string\n\n# get the input and split it into an array\ninputs = input().split()\n\n# get the string and the target\ns = inputs[0]\nt = inputs[1]\n\n# start with an empty string\nanswer = \"\"\n\nfor i in range(len(s)):\n    # if the current character is not in the target string\n    if s[i] not in t:\n        # add it to the answer\n        answer += s[i]\n    # if the current character is in the target string\n    else:\n        # add a space to the answer\n        answer += \" \"\n\n# output the answer\nprint(answer)\n", "\n\n# get the input\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = input()\n\n    # start with no characters removed\n    removed = 0\n\n    # start at the beginning of the string\n    left = 0\n    right = 0\n\n    # go until the end of the string\n    while right < len(s):\n        # if the current character is in the target string,\n        # move the left pointer up to the current spot\n        if s[right] in t:\n            left = right\n        # if the current character is not in the target string,\n        # add one to the number of characters removed\n        else:\n            removed += 1\n        # move the right pointer up\n        right += 1\n\n    # output the answer\n    print(removed)\n"]