2022-04-23 16:00:12.157372 num operations 1
2022-04-23 16:00:12.157393 size on input set 1
2022-04-23 16:00:12.157538 using api key sunu
2022-04-23 16:00:15.499195 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit(0)\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit(0)\n\nprint('YES')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    sys.exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        sys.exit()\n\nprint('YES')\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        break\n\nprint('YES')\n"
    },
    {
      "index": 3,
      "text": "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n"
    }
  ],
  "created": 1650729612,
  "object": "edit"
}
2022-04-23 16:00:15.499426 fix syntax errors 4 ["\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit(0)\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit(0)\n\nprint('YES')\n", "\nimport sys\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    sys.exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        sys.exit()\n\nprint('YES')\n", "\n\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        break\n\nprint('YES')\n", "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n"]
2022-04-23 16:00:15.499459 size on output set 4
2022-04-23 16:00:15.499470 num operations 1
2022-04-23 16:00:15.499476 size on input set 1
2022-04-23 16:00:15.499597 using api key kouti
2022-04-23 16:00:20.101938 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def solve(N, A):\n    \"\"\"Solve the problem!\"\"\"\n    return \"YES\"\n\n\ndef test_vova_and_his_girlfriend():\n    \"\"\"Tests the solution to the problem described in the docstring\"\"\"\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"YES\"\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    },
    {
      "index": 1,
      "text": "\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef test_vova_and_his_girlfriend():\n    \"\"\"Tests the solution to the problem described in the docstring.\"\"\"\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"YES\"\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    },
    {
      "index": 3,
      "text": "\ndef test_vova_and_his_girlfriend():\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"YES\"\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    }
  ],
  "created": 1650729615,
  "object": "edit"
}
2022-04-23 16:00:20.102152 fix syntax errors 4 ['def solve(N, A):\n    """Solve the problem!"""\n    return "YES"\n\n\ndef test_vova_and_his_girlfriend():\n    """Tests the solution to the problem described in the docstring"""\n    assert solve(5, [2, 1, 1, 2, 5]) == "YES"\n    assert solve(3, [4, 5, 3]) == "NO"\n    assert solve(2, [10, 10]) == "YES"\n\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n', '\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n', '\n\ndef test_vova_and_his_girlfriend():\n    """Tests the solution to the problem described in the docstring."""\n    assert solve(5, [2, 1, 1, 2, 5]) == "YES"\n    assert solve(3, [4, 5, 3]) == "NO"\n    assert solve(2, [10, 10]) == "YES"\n\n\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n', '\ndef test_vova_and_his_girlfriend():\n    assert solve(5, [2, 1, 1, 2, 5]) == "YES"\n    assert solve(3, [4, 5, 3]) == "NO"\n    assert solve(2, [10, 10]) == "YES"\n\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n']
2022-04-23 16:00:20.102186 size on output set 4
2022-04-23 16:00:20.102198 num operations 1
2022-04-23 16:00:20.102205 size on input set 1
2022-04-23 16:00:20.102326 using api key soukgp
2022-04-23 16:00:25.453515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return \"YES\"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return \"YES\"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return \"YES\"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(n, wall):\n    # Complete this function    \n    return \"YES\" if (len(set(wall)) <= 2) else \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    }
  ],
  "created": 1650729620,
  "object": "edit"
}
2022-04-23 16:00:25.453726 fix syntax errors 4 ['\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return "YES"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return "NO"\n        else:\n            return "YES"\n    else:\n        return "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n', '\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return "YES"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return "NO"\n        else:\n            return "YES"\n    else:\n        return "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n', '\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return "YES"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return "NO"\n        else:\n            return "YES"\n    else:\n        return "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n', '\n\ndef solve(n, wall):\n    # Complete this function    \n    return "YES" if (len(set(wall)) <= 2) else "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n']
2022-04-23 16:00:25.453858 size on output set 3
