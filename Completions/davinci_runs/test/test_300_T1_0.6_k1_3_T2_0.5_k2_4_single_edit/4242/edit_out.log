2022-04-23 17:20:45.338673 num operations 1
2022-04-23 17:20:45.338694 size on input set 1
2022-04-23 17:20:45.338836 using api key kouti
2022-04-23 17:20:50.510298 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\na, b, k = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(a, b)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print k-th largest positive integer that divides both a and b.\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\n\nprint(\"Hello World\")\n"
    },
    {
      "index": 2,
      "text": "import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    }
  ],
  "created": 1650734445,
  "object": "edit"
}
2022-04-23 17:20:50.510538 fix syntax errors 4 ['\nimport math\n\na, b, k = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(a, b)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print k-th largest positive integer that divides both a and b.\nprint(divisors[k - 1])\n', '\n\nprint("Hello World")\n', 'import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n']
2022-04-23 17:20:50.510568 size on output set 4
2022-04-23 17:20:50.510579 num operations 1
2022-04-23 17:20:50.510585 size on input set 1
2022-04-23 17:20:50.510710 using api key sunu
2022-04-23 17:20:53.434366 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 1,
      "text": "\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 2,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 3,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    }
  ],
  "created": 1650734450,
  "object": "edit"
}
2022-04-23 17:20:53.434619 fix syntax errors 4 ["\n#\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"]
2022-04-23 17:20:53.434651 size on output set 3
2022-04-23 17:20:53.434663 num operations 1
2022-04-23 17:20:53.434669 size on input set 1
2022-04-23 17:20:53.434796 using api key sunu
2022-04-23 17:20:56.944302 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    print(g*(k-1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    a, b, k = map(int, input().split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650734453,
  "object": "edit"
}
2022-04-23 17:20:56.944551 fix syntax errors 4 ['\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    print(g*(k-1))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    a, b, k = map(int, input().split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 17:20:56.944731 size on output set 3
