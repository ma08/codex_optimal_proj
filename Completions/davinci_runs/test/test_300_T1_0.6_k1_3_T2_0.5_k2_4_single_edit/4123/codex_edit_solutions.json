["# coding: utf-8\n\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\ndef main(argv):\n    if len(argv) != 2:\n        print \"Usage: %s [file]\" % argv[0]\n        sys.exit()\n\n    file_name = argv[1]\n    if os.path.exists(file_name):\n        print \"File '%s' exists.\" % file_name\n    else:\n        print \"File '%s' does not exist.\" % file_name\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n", "\n\ndef main():\n    input_n = int(input())\n    input_s = input()\n\n    max_count = 0\n    max_gram = \"\"\n    for i in range(input_n-1):\n        gram = input_s[i:i+2]\n        if input_s.count(gram) > max_count:\n            max_count = input_s.count(gram)\n            max_gram = gram\n    print(max_gram)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport os\n\ndef get_files(path):\n    for file in os.listdir(path):\n        if os.path.isfile(os.path.join(path, file)):\n            yield file\n\ndef get_py(path):\n    return (file for file in get_files(path) if file.endswith(\".py\"))\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "\ninput_n = int(input())\ninput_s = input()\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "from collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "/*\n *  file.js\n *\n *  David Janes\n *  IOTDB.org\n *  2016-01-03\n *\n *  Copyright [2013-2016] [David P. Janes]\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\"use strict\";\n\nconst iotdb = require('iotdb');\nconst _ = iotdb._;\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst assert = require(\"assert\");\nconst thing = require(\"../thing\");\n\nconst model_file = require('./models/file');\n\ndescribe(\"file\", function() {\n    describe(\"file\", function() {\n        it(\"file\", function(done) {\n            const thing_1 = thing.make({\n                model: model_file,\n                file: path.join(__dirname, \"data\", \"file\", \"file.txt\"),\n            });\n\n            thing_1.on(\"istate\", function(thing) {\n                const istate = thing.state(\"istate\");\n\n                assert.ok(_.is.Buffer(istate.file));\n                assert.ok(Buffer.compare(istate.file, new Buffer(\"Hello, World\")) === 0);\n\n                done();\n            });\n        });\n    });\n});\n", "\n\ninput_n = int(input())\ninput_str = input()\n", "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    FILE *file;\n    file = fopen(\"file.txt\", \"w\");\n    if(file == NULL)\n    {\n        printf(\"Error\");\n        exit(1);\n    }\n    fprintf(file, \"Hello World!\");\n    fclose(file);\n    \n    return 0;\n}\n", "const fs = require('fs');\n\n// fs.writeFileSync('notes.txt', 'This file was created by Node.js');\n\n// fs.appendFileSync('notes.txt', ' My name is Dima');\n\nconst dataBuffer = fs.readFileSync('notes.txt');\nconst dataString = dataBuffer.toString();\nconsole.log(dataString);\n"]