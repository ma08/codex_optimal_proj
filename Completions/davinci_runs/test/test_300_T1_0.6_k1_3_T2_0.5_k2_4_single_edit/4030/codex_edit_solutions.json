["\n\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c+=1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c+=1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            c+=1\n            l.append(c)\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\nprint(len(set(coloring(s))))\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s)\n", "\nimport sys\n\n    \"\"\"\n    Class for solving the problem\n    \"\"\"\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        \"\"\"\n        n: the length of the string\n        s: the string\n        \"\"\"\n        self.s = s\n\n    def solve(self):\n        \"\"\"\n        Solve the problem\n        \"\"\"\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, sorted_colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\n\nn = int(input())\ns = input()\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n", "\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\n\n# n = int(input())\n# s = input()\n\n# def solve(n, s):\n#     if n == 1:\n#         return 1\n#     if n == 2:\n#         return 1 if s[0] <= s[1] else 2\n\n#     start = 0\n#     cur = 0\n#     res = 0\n#     for i in range(1, n):\n#         if s[i] < s[i - 1]:\n#             cur += 1\n#             res = max(res, cur)\n#         else:\n#             cur = 0\n            \n#     return res + 1\n\n# print(solve(n, s))\n\n\n# N, K = map(int, input().split())\n# A = list(map(int, input().split()))\n\n# def solve(N, K, A):\n#     if K == 0:\n#         return \" \".join(map(str, A))\n#     if K == 1:\n#         return \" \".join(map(str, sorted(A)))\n#     if K % 2 == 0:\n#         return \" \".join(map(str, sorted(A)))\n#     else:\n#         return \" \".join(map(str, sorted(A, reverse=True)))\n\n# print(solve(N, K, A))\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# b = list(map(int, input().split()))\n\n# def solve(n, a, b):\n#     a = sorted(a)\n#     b = sorted(b, reverse=True)\n#     res = 0\n#     for i in range(n):\n#         res += a[i] * b[i]\n    \n#     return res\n\n# print(solve(n, a, b))\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# def solve(n, a):\n#     a = sorted(a)\n#     res = 0\n#     for i in range(n - 1):\n#         res += a[i]\n    \n#     res += a[-1] // 2\n\n#     return res\n\n# print(solve(n, a))\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# def solve(n, a):\n#     a = sorted(a)\n#     res = 0\n#     for i in range(n - 1):\n#         res += a[i]\n    \n#     res += a[-1] // 2\n\n#     return res\n\n# print(solve(n, a))\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# def solve(n, a):\n#     a = sorted(a)\n#     res = 0\n#     for i in range(n - 1):\n#         res += a[i]\n    \n#     res += a[-1] // 2\n\n#     return res\n\n# print(solve(n, a))\n\n\n# n = int(input())\n# s = input()\n\n# def solve(n, s):\n#     if n % 2 == 1:\n#         return 0\n#     elif s[:n // 2] == s[n // 2:]:\n#         return n // 2\n#     else:\n#         return 0\n\n# print(solve(n, s))\n\n\n# n = int(input())\n# s = input()\n\n# def solve(n, s):\n#     if n % 2 == 1:\n#         return 0\n#     elif s[:n // 2] == s[n // 2:]:\n#         return n // 2\n#     else:\n#         return 0\n\n# print(solve(n, s))\n\n\n# n = int(input())\n# s = input()\n\n# def solve(n, s):\n#     if n % 2 == 1:\n#         return 0\n#     elif s[:n // 2] == s[n // 2:]:\n#         return n // 2\n#     else:\n#         return 0\n\n# print(solve(n, s))\n", "\n\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\nimport sys\n\nclass Solver:\n    def __init__(self, n, k, a):\n        self.n = n  # \u5546\u54c1\u306e\u500b\u6570\n        self.k = k  # \u5408\u8a08\u91d1\u984d\n        self.a = a  # \u5546\u54c1\u306e\u5024\u6bb5\n\n    def solve(self):\n        a = self.a\n        n = self.n\n        k = self.k\n\n        # \u5408\u8a08\u91d1\u984d\u304c0\u306e\u3068\u304d\u306f0\u3092\u8fd4\u3059\n        if k == 0:\n            return 0\n\n        # \u5408\u8a08\u91d1\u984d\u304c\u8ca0\u306e\u3068\u304d\u306f-1\u3092\u8fd4\u3059\n        if k < 0:\n            return -1\n\n        # \u5546\u54c1\u306e\u5024\u6bb5\u304c0\u306e\u3068\u304d\u306f-1\u3092\u8fd4\u3059\n        if a[n - 1] == 0:\n            return -1\n\n        # \u5546\u54c1\u306e\u500b\u6570\u304c0\u306e\u3068\u304d\u306f-1\u3092\u8fd4\u3059\n        if n == 0:\n            return -1\n\n        return max(self.solve(n - 1, k), self.solve(n - 1, k - a[n - 1])) + 1\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    solver = Solver(n, k, a)\n    res = solver.solve()\n    print(res)\n", "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"]