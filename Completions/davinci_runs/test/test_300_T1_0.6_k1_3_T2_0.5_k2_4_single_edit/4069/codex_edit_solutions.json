["\"\"\"\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n\"\"\"\ndef takahashi_traveling(x, k, d):\n    if k <= (x // d):\n        return x - k * d\n    else:\n        return abs(x - d * ((x // d) + 1))\n\nif __name__ == '__main__':\n    x, k, d = map(int, input().rstrip().split())\n    print(takahashi_traveling(x, k, d))\n", "\n\n\n\n\n\n\nX, K, D = map(int, input().split())\n\n# if abs(X) > K * D:\n#     print(abs(X) - K * D)\n#     exit()\n\n# if abs(K * D) % 2 == abs(X) % 2:\n#     print(abs(abs(K * D) - abs(X)))\n# else:\n#     print(abs(abs(K * D) - abs(X)) + 1)\n\nprint(min(abs(X + D * K), abs(X - D * K)))\n", "\nX, K, D = map(int, input().split())\n\nif (K * D) > X:\n    print(abs(X - (K * D)))\nelse:\n    K = K - (X // D)\n    X = X % D\n    if K % 2 == 0:\n        print(abs(X))\n    else:\n        print(abs(X - D))\n", "\n\nX, K, D = map(int, input().split()) \n\n# if abs(X) > K * D:\n#     print(abs(X) - K * D)\n#     exit()\n\n# if abs(K * D) % 2 == abs(X) % 2:\n#     print(abs(abs(K * D) - abs(X)))\n# else:\n#     print(abs(abs(K * D) - abs(X)) + 1)\n\nprint(min(abs(X + D * K), abs(X - D * K)))\n", "\nX, K, D = map(int, input().split())\n\n# if abs(X) > K * D:\n#     print(abs(X) - K * D)\n#     exit()\n\n# if abs(K * D) % 2 == abs(X) % 2:\n#     print(abs(abs(K * D) - abs(X)))\n# else:\n#     print(abs(abs(K * D) - abs(X)) + 1)\n\nprint(min(abs(X + D * K), abs(X - D * K)))\n", "\nfrom math import ceil\n\nX, K, D = map(int, input().split())\n\nif K * D > X:\n    print(X - (K * D))\nelse:\n    K = K - ceil(X / D)\n    X = X % D  # X = X - (X // D) * D\n    if K % 2 == 0:\n        print(X)\n    else:\n        print(X - D)\n", "\n\nx, k, d = map(int, input().split())\n\nif (k * d) > x:\n    print(abs(x - (k * d)))\nelse:\n    k = k - (x // d)\n    x = x % d\n    if k % 2 == 0:\n        print(abs(x))\n    else:\n        print(abs(x - d))\n", "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nif N >= M:\n    print(0)\n    exit()\n\nA.sort()\ndiff = [A[i] - A[i - 1] for i in range(1, M)]\ndiff.sort(reverse=True)\n\n# if abs(K * D) % 2 == abs(X) % 2:\n#     print(abs(abs(K * D) - abs(X)))\n# else:\n#     print(abs(abs(K * D) - abs(X)) + 1)\n\nprint(min(abs(X + D * K), abs(X - D * K)))\n", "\n\nX, K, D = map(int, input().split())\nif K * D > X:\n    print(abs(X - (K * D)))\nelse:\n    K = K - (X // D)\n    X = X % D\n    if K % 2 == 0:\n        print(abs(X))\n    else:\n        print(abs(X - D))\n", "def takahashi_traveling(x, k, d):\n    if k <= (x // d):\n        return x - k * d\n    else:\n        return abs(x - d * ((x // d) + 1))\n\nif __name__ == '__main__':\n    x, k, d = map(int, input().rstrip().split())\n    print(takahashi_traveling(x, k, d))\n\n\n\"\"\"\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n\"\"\"\n", "def takahashi_traveling(x, k, d):  # x: \u4f4d\u7f6e\u3001k: \u79fb\u52d5\u56de\u6570\u3001d: \u79fb\u52d5\u8ddd\u96e2\n    if k <= (x // d):  # \u540c\u3058\u65b9\u5411\u306b\u79fb\u52d5\u3057\u7d9a\u3051\u308b\n        return x - k * d  # \u540c\u3058\u65b9\u5411\u306b\u79fb\u52d5\u3057\u7d9a\u3051\u308b\n    else:  # \u79fb\u52d5\u65b9\u5411\u3092\u5909\u3048\u308b\n        return abs(x - d * ((x // d) + 1))  # \u79fb\u52d5\u65b9\u5411\u3092\u5909\u3048\u308b\n\nif __name__ == '__main__':\n    x, k, d = map(int, input().rstrip().split())\n    print(takahashi_traveling(x, k, d))\n\n\n\"\"\"\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n\"\"\"\ndef takahashi_traveling(x, k, d):\n    if k <= (x // d):\n        return x - k * d\n    else:\n        return abs(x - d * ((x // d) + 1))\n\nif __name__ == '__main__':\n    x, k, d = map(int, input().rstrip().split())\n    print(takahashi_traveling(x, k, d))\n"]