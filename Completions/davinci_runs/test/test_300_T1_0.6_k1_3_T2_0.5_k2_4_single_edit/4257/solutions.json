["A,B=map(int,input().split())\nprint(A*B)", "a,b = input().split(\" \")\n\nprint(int(a)*int(b))", "A,B = map(int, input().split())\nprint(A*B)", "A,B = input().split()\nanswer=int(A)*int(B)\nprint(answer)", "a,b=list(map(int ,input().split()))\nprint(a*b)", "a, b = map(int, input().split())\nprint(a*b)", "A,B = input().split()\nanswer=int(A)*int(B)\nprint(answer)", "a,b=map(int,input().split())\nprint(a*b)", "a,b = list(map(int,input().split()))\n\nprint((a*b))\n", "a, b = map(float, input().split())\nprint((int(a) * int((b * 100) // 1)) // 100)", "a, b = map(int, input().split())\nprint(a*b)", "a,b=map(int,input().split())\nprint(a*b)", "a,b=map(int,input().split())\nprint(a*b)", "A,B = map(int,input().split())\n\nprint(A*B)", "A,B = input().split()\nanswer=int(A)*int(B)\nprint(answer)", "#!/usr/bin/env python3\nimport collections\nimport itertools as it\nimport math\n#import numpy as np\n \n#  = input()\n#  = int(input())\na, b  = list(map(int, input().split()))\n#  = list(map(int, input().split()))\n#  = [int(input()) for i in range(N)]\n#\n# c = collections.Counter()\n\nprint((a * b))\n", "A, B = input().split()\nA = int(A)\nB = int(B)\nprint(A * B)", "a,b = map(int ,input().split())\nprint(a*b)", "a,b = map(int, input().split())\nprint(a * b)", "A,B = map(int,input().split())\nprint(A*B)", "data = [int(x) for x in input().split()]\n\nprint(data[0]*data[1])", "a, b = map(int, input().split())\n\nprint(a * b)", "a,b=map(int,input().split())\nprint(a*b)", "A,B=map(int,input().split())\nprint(A*B)", "A, B = map(int,input().split())\nprint(A*B)", "a, b = list(map(int, input().split()))\nprint((a * b))\n", "A, B = map(int,input().split())\n\nprint(A * B)", "a, b = map(int, input().split())\nprint(a*b)", "import math\nA,B = input().split(' ')\nif int(A) *float(B) >=0:\n    answer = math.floor(int(A)*float(B))\n    print(answer)\nelse:\n    answer = math.ceil(int(A)*float(B))\n    print(answer)\n\n", "a,b=map(int,input().split())\nprint(a*b)", "a, b = map(int, input().split())\nans = int(a * b)\nprint(ans)", "a,b= map(int, input().split())\n\nprint(a*b)", "a,b = map(int, input().split())\nprint(a*b)", "a, b = map(int,input().split())\nprint(a*b)", "a, b = map(int, input().split())\nprint(a * b)", "A, B=map(int,input().split())\nprint(A*B)", "x,y =map(int,input().split())\nprint(x*y)", "a, b = map(int, input().split())\nprint(a * b)", "a = list(map(int, input().split()))\nprint(a[0]*a[1])", "x,y = list(map(int,input().split()))\nprint(x*y)", "import math\nA,B = input().split(' ')\nif int(A) *float(B) >0:\n    answer = math.floor(int(A)*float(B))\n    print(answer)\nelse:\n    answer = math.ceil(int(A)*float(B))\n    print(answer)\n\n", "a,b = map(int,input().split())\n\nc = a * b\n\nprint(c)", "a, b = map(int,input().split())\nprint(a*b)", "A,B = map(int,input().split())\nprint(A*B)", "a,b = map(int, input().split())\nprint(a*b)", "N = list(map(int,input().split()))\nprint(N[0]*N[1])", "a, b = map(int, input().split())\nprint(a * b)", "A, B = map(int, input().split())\nprint(A * B)", "A, B = map(int,input().split())\nprint(A * B)", "A, B = [int(i) for i in input().split()]\nprint((A * B))\n", "A,B = map(int,input().split())\nprint(A*B)", "AB = list(map(int, input().split()))\nprint(AB[0]*AB[1])", "a,b = map(int,input().split())\nans=a*b\nprint(ans)", "A, B = map(int,input().split())\n\nprint(int(A*B))", "A,B=map(int,input().split())\nprint(A*B)", "a,b = list(map(int,input().split()))\n\nprint((a*b))\n", "a,b= map(int,input().split())\nprint(a*b)", "a, b = map(int, input().split())\nans = a*b\nprint(ans)", "a,b = list(map(int, input().split()))\nprint((a*b))\n", "a, b = map(int, input().split())\nprint(a*b)", "a, b = map(int, input().split())\nprint(a * b)", "a, b = map(int, input().split())\nprint(a * b)", "a, b = map(int, input().split())\n\nprint(int(a * b))", "x,y=map(int ,input().split())\nprint(x*y)", "a,b = map(int,input().split())\nprint(a * b)", "a, b = list(map(int, input().split()))\nprint((a*b))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import breadth_first_order, depth_first_order, shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nA, B = na()\nprint(A * B)", "a,b = map(int,input().split())\nprint(a*b)", "a, b = map(int, input().split())\nprint(a * b)", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\na, b = [int(i) for i in input().split()]\n\ntmp = 0\nres = 0\n\nres = a * b\n\nprint(res)\n", "A,B = list(map(int,input().split()))\n\nprint((A * B))\n", "str=input()\narr=str.split(' ')\nA=int(arr[0])\nB=int(arr[1])\nif 1<=A<=100 and 1<=A<=100:\n  print(A*B)", "a, b = map(int, input().split())\n\nprint(a * b)", "A,B=input().split()\nkake=int(A)*int(B)\nprint(kake)", "A,B = map(int,input().split())\n\nprint(A*B)", "a,b = map(int,input().split())\n\nprint(a*b)", "a, b = list(map(int, input().split()))\nprint((a * b))\n", "A,B = map(int,input().split())\n\nprint(A*B)", "a,b=[int(i) for i in input().split()]\nprint(a*b)", "a,b = map(int,input().split())\nprint(a * b)", "a,b=map(int,input().split())\nprint(a*b)", "a,b=map(int,input().split())\nprint(a*b)", "a, b = list(map(int, input().split()))\nprint((a*b))\n", "A , B = [int(x) for x in input().split()]\nprint(A*B)", "numbers = list(map(int, input().split()))\nprint(numbers[0] * numbers[1])", "A,B = map(int,input().split())\nprint(A * B)", "a,b = map(int,input().split())\nprint(a*b)", "print((lambda x: int(x[0]) * int(x[1]))(input().split()))", "a, b = map(int, input().split())\nprint(a * b)", "a, b = map(int, input().split())\nprint(a*b)", "A, B = list(map(int, input().split()))\n\nprint((A * B))\n", "A,B=list(map(int,input().split()))\n\nprint(A*B)", "a, b = map(int, input().split())\n\nprint(a * b)", "A, B = map(int,input().split())\n\nprint(A * B)", "a,b=map(int,input().split())\nprint(a*b)"]