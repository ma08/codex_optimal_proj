2022-04-23 15:58:32.280400 num operations 1
2022-04-23 15:58:32.280434 size on input set 1
2022-04-23 15:58:32.280575 using api key soukgp
2022-04-23 15:58:43.363373 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if h2 == h1:\n        if m2 - m1 == 30:\n            return (h2, m2)\n        elif m2 - m1 == 2:\n            return (h2, m1 + 1)\n        else: \n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        return (h1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if h1 == h2 and m1 == m2:\n        return h1, m1\n    elif h1 == h2 and m2 - m1 == 30:\n        return h2, m2\n    elif h1 == h2 and m2 - m1 == 2:\n        return h2, m1 + 1\n    elif h1 == h2:\n        return h1, m1 + (m2 - m1) / 2\n    elif m1 < 30:\n        return h1, m1 + (m2 - m1) / 2\n    elif h1 + 1 == h2 and m2 - m1 == 30:\n        return h2, m2\n    elif h1 + 1 == h2 and m2 - m1 == 2:\n        return h2, m1 + 1\n    else:\n        return h1 + 1, m1 + (m2 - m1) / 2\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, int(m1 + (m2 - m1) / 2))\n        else:\n            return (h1, int(m1 + (m2 - m1) / 2))\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, int(m1 + (m2 - m1) / 2))\n        else:\n            return (h1 + 1, int(m1 + (m2 - m1) / 2))\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650729512,
  "object": "edit"
}
2022-04-23 15:58:43.363657 fix syntax errors 4 ['\n\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if h2 == h1:\n        if m2 - m1 == 30:\n            return (h2, m2)\n        elif m2 - m1 == 2:\n            return (h2, m1 + 1)\n        else: \n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        return (h1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(\':\'))\n    h2, m2 = map(int, lines[1].split(\':\'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print("{0:02d}:{1:02d}".format(h3, m3))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if h1 == h2 and m1 == m2:\n        return h1, m1\n    elif h1 == h2 and m2 - m1 == 30:\n        return h2, m2\n    elif h1 == h2 and m2 - m1 == 2:\n        return h2, m1 + 1\n    elif h1 == h2:\n        return h1, m1 + (m2 - m1) / 2\n    elif m1 < 30:\n        return h1, m1 + (m2 - m1) / 2\n    elif h1 + 1 == h2 and m2 - m1 == 30:\n        return h2, m2\n    elif h1 + 1 == h2 and m2 - m1 == 2:\n        return h2, m1 + 1\n    else:\n        return h1 + 1, m1 + (m2 - m1) / 2\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(\':\'))\n    h2, m2 = map(int, lines[1].split(\':\'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print("{0:02d}:{1:02d}".format(h3, m3))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(\':\'))\n    h2, m2 = map(int, lines[1].split(\':\'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print("{0:02d}:{1:02d}".format(h3, m3))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, int(m1 + (m2 - m1) / 2))\n        else:\n            return (h1, int(m1 + (m2 - m1) / 2))\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, int(m1 + (m2 - m1) / 2))\n        else:\n            return (h1 + 1, int(m1 + (m2 - m1) / 2))\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(\':\'))\n    h2, m2 = map(int, lines[1].split(\':\'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print("{0:02d}:{1:02d}".format(h3, m3))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 15:58:43.363724 size on output set 4
2022-04-23 15:58:43.363736 num operations 1
2022-04-23 15:58:43.363741 size on input set 1
2022-04-23 15:58:43.363878 using api key sunu
2022-04-23 15:58:45.803886 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650729523,
  "object": "edit"
}
2022-04-23 15:58:45.804430 fix syntax errors 4 ["\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 15:58:45.804473 size on output set 2
2022-04-23 15:58:45.804490 num operations 1
2022-04-23 15:58:45.804497 size on input set 1
2022-04-23 15:58:45.804699 using api key soukgp
2022-04-23 15:58:52.450598 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + startTime[0] * 60\n    endMinutes = endTime[1] + endTime[0] * 60\n    midMinutes = (startMinutes + endMinutes) // 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60) \n    endMinutes = endTime[1] + (endTime[0] * 60) \n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60\n    midTime[1] = midMinutes % 60 \n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650729525,
  "object": "edit"
}
2022-04-23 15:58:52.450850 fix syntax errors 4 ["\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + startTime[0] * 60\n    endMinutes = endTime[1] + endTime[0] * 60\n    midMinutes = (startMinutes + endMinutes) // 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60) \n    endMinutes = endTime[1] + (endTime[0] * 60) \n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60\n    midTime[1] = midMinutes % 60 \n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 15:58:52.450920 size on output set 3
