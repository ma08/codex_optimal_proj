2022-04-23 16:12:01.780415 num operations 1
2022-04-23 16:12:01.780437 size on input set 1
2022-04-23 16:12:01.780661 using api key kouti
2022-04-23 16:12:07.079932 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m + 1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a)) \n"
    },
    {
      "index": 1,
      "text": "\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1 \n    factors = []\n    for i in range(2, m+1): \n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)): \n        for j in range(len(a)):\n            if a[j] % factors[i] != 0: \n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n\n        return 1\n\n\n\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n\n                factors[i] = 0\n\n                break\n\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n\n    a = [int(x) for x in input().split()]\n\n    print(solve(a))\n"
    }
  ],
  "created": 1650730321,
  "object": "edit"
}
2022-04-23 16:12:07.080176 fix syntax errors 4 ['\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m + 1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == "__main__":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a)) \n', '\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == "__main__":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n', '\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1 \n    factors = []\n    for i in range(2, m+1): \n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)): \n        for j in range(len(a)):\n            if a[j] % factors[i] != 0: \n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == "__main__":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n', '\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n\n        return 1\n\n\n\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n\n                factors[i] = 0\n\n                break\n\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == "__main__":\n    n = int(input())\n\n    a = [int(x) for x in input().split()]\n\n    print(solve(a))\n']
2022-04-23 16:12:07.080219 size on output set 4
2022-04-23 16:12:07.080231 num operations 1
2022-04-23 16:12:07.080236 size on input set 1
2022-04-23 16:12:07.080360 using api key kouti
2022-04-23 16:12:10.400923 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from math import sqrt\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n"
    },
    {
      "index": 1,
      "text": "from math import *\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = Gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n"
    },
    {
      "index": 2,
      "text": "from math import sqrt\n\ndef Gcd(a, b):\n    if b == 0:\n        return a\n    return Gcd(b, a % b)\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = Gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n"
    },
    {
      "index": 3,
      "text": "from math import sqrt\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n"
    }
  ],
  "created": 1650730327,
  "object": "edit"
}
2022-04-23 16:12:10.401123 fix syntax errors 4 ['from math import sqrt\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n', 'from math import *\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = Gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n', 'from math import sqrt\n\ndef Gcd(a, b):\n    if b == 0:\n        return a\n    return Gcd(b, a % b)\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = Gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n', 'from math import sqrt\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n']
2022-04-23 16:12:10.401157 size on output set 4
2022-04-23 16:12:10.401169 num operations 1
2022-04-23 16:12:10.401175 size on input set 1
2022-04-23 16:12:10.401314 using api key derek
2022-04-23 16:12:15.942147 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2): # don't take the sqrt of n, just go up to it\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1 # if n is prime\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2): # int(n**0.5) + 1\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2): # n > 1\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn //= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n"
    }
  ],
  "created": 1650730330,
  "object": "edit"
}
2022-04-23 16:12:15.942352 fix syntax errors 4 ["\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2): # don't take the sqrt of n, just go up to it\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1 # if n is prime\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2): # int(n**0.5) + 1\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2): # n > 1\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn //= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n"]
2022-04-23 16:12:15.942394 size on output set 4
