2022-04-23 17:00:39.668689 num operations 1
2022-04-23 17:00:39.668725 size on input set 1
2022-04-23 17:00:39.668988 using api key jaanu
2022-04-23 17:00:43.512797 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not a\nf = not b\n\ng = e or f\n\nh = not c\ni = not d\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n"
    },
    {
      "index": 1,
      "text": "\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not a\nf = not b\n\ng = e or f\n\nh = not c\ni = not d\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n"
    },
    {
      "index": 2,
      "text": "\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not(a)\nf = not(b)\n\ng = e or f\n\nh = not(c)\ni = not(d)\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n"
    },
    {
      "index": 3,
      "text": "\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not (a)\nf = not (b)\n\ng = e or f\n\nh = not (c)\ni = not (d)\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n"
    }
  ],
  "created": 1650733239,
  "object": "edit"
}
2022-04-23 17:00:43.513171 fix syntax errors 4 ['#!/usr/bin/python3\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not a\nf = not b\n\ng = e or f\n\nh = not c\ni = not d\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n', '\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not a\nf = not b\n\ng = e or f\n\nh = not c\ni = not d\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n', '\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not(a)\nf = not(b)\n\ng = e or f\n\nh = not(c)\ni = not(d)\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n', '\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ne = not (a)\nf = not (b)\n\ng = e or f\n\nh = not (c)\ni = not (d)\n\nj = h or i\n\nk = g and j\n\nprint(int(k))\n']
2022-04-23 17:00:43.513205 size on output set 4
2022-04-23 17:00:43.513216 num operations 1
2022-04-23 17:00:43.513222 size on input set 1
2022-04-23 17:00:43.513348 using api key sunu
2022-04-23 17:00:48.487343 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(inp):\n    if inp[0] == inp[2] or inp[1] == inp[3]:\n        return 1\n    return 0\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(inp):\n    return 0 if inp[0] == inp[2] and inp[1] == inp[3] else 1\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n"
    },
    {
      "index": 2,
      "text": "#! /usr/bin/env python3\n\ndef main(inp):\n    if inp[0] == inp[2] and inp[1] == inp[3]:\n        return 0\n    return 1\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main(inp: list):\n    if inp[0] == inp[2] or inp[1] == inp[3]:\n        return 0\n    return 1\n\nif __name__ == '__main__':\n    inp = []\n    for _ in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n"
    }
  ],
  "created": 1650733243,
  "object": "edit"
}
2022-04-23 17:00:48.487578 fix syntax errors 4 ["\n\ndef main(inp):\n    if inp[0] == inp[2] or inp[1] == inp[3]:\n        return 1\n    return 0\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n", "\n\ndef main(inp):\n    return 0 if inp[0] == inp[2] and inp[1] == inp[3] else 1\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n", "#! /usr/bin/env python3\n\ndef main(inp):\n    if inp[0] == inp[2] and inp[1] == inp[3]:\n        return 0\n    return 1\n\nif __name__ == '__main__':\n    inp = []\n    for i in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n", "\n\ndef main(inp: list):\n    if inp[0] == inp[2] or inp[1] == inp[3]:\n        return 0\n    return 1\n\nif __name__ == '__main__':\n    inp = []\n    for _ in range(4):\n        inp.append(int(input()))\n    print(main(inp))\n"]
2022-04-23 17:00:48.487613 size on output set 4
2022-04-23 17:00:48.487624 num operations 1
2022-04-23 17:00:48.487630 size on input set 1
2022-04-23 17:00:48.487764 using api key kouti
2022-04-23 17:00:52.374629 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# first solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n"
    },
    {
      "index": 1,
      "text": "\n# first solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0 # ^ is bitwise XOR\n\n# fourth solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n"
    },
    {
      "index": 2,
      "text": "\n# first solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n"
    },
    {
      "index": 3,
      "text": "\n\n# first solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n"
    }
  ],
  "created": 1650733248,
  "object": "edit"
}
2022-04-23 17:00:52.374856 fix syntax errors 4 ['\n\n# first solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n', '\n# first solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0 # ^ is bitwise XOR\n\n# fourth solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n', '\n# first solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n', '\n\n# first solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0]:\n        return 0\n    elif data == [0, 1, 0, 1]:\n        return 1\n    elif data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# second solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    if data == [0, 1, 1, 0] or data == [1, 0, 0, 1]:\n        return 0\n    else:\n        return 1\n\n# third solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return 1 if (data[0] ^ data[2] ^ data[1] ^ data[3]) else 0\n\n# fourth solution:\ndef image():\n    data = [int(input()) for i in range(4)]\n    return int((data[0] ^ data[2]) != (data[1] ^ data[3]))\n']
2022-04-23 17:00:52.375016 size on output set 3
