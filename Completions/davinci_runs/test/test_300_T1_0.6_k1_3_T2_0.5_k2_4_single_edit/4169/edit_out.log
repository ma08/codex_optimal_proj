2022-04-23 16:51:46.319123 num operations 1
2022-04-23 16:51:46.319144 size on input set 1
2022-04-23 16:51:46.319287 using api key kouti
2022-04-23 16:51:48.996229 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    }
  ],
  "created": 1650732706,
  "object": "edit"
}
2022-04-23 16:51:48.996483 fix syntax errors 4 ['\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', '\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', '\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', '\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n']
2022-04-23 16:51:48.996523 size on output set 2
2022-04-23 16:51:48.996534 num operations 1
2022-04-23 16:51:48.996540 size on input set 1
2022-04-23 16:51:48.996682 using api key kouti
2022-04-23 16:51:55.408199 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#-----Solve-----\n\n#-----Output-----\n"
    },
    {
      "index": 1,
      "text": "#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n#-----Solve-----\n#-----Display-----\n"
    },
    {
      "index": 2,
      "text": "\n\n\n#-----Functions-----\ndef sort_stores(stores):\n    return sorted(stores, key=lambda x: x[0])\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\nstores = sort_stores(stores)\n\n\n#-----Solve-----\n\n#-----Display-----\n"
    },
    {
      "index": 3,
      "text": "\nN = 100\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append((a, b))\n\ndp = [[0 for i in range(N + 1)] for j in range(m + 1)]\nfor k in range(1, m + 1):\n    for i in range(1, N + 1):\n        if stores[k - 1][0] < i:\n            dp[k][i] = max(dp[k - 1][i], stores[k - 1][1] + dp[k - 1][i - stores[k - 1][0]])\n        else:\n            dp[k][i] = dp[k - 1][i]\n#-----Solve-----\n\nprint(dp[m][N])\n#-----Display-----\n"
    }
  ],
  "created": 1650732709,
  "object": "edit"
}
2022-04-23 16:51:55.408413 fix syntax errors 4 ['\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#-----Solve-----\n\n#-----Output-----\n', '#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n#-----Solve-----\n#-----Display-----\n', '\n\n\n#-----Functions-----\ndef sort_stores(stores):\n    return sorted(stores, key=lambda x: x[0])\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\nstores = sort_stores(stores)\n\n\n#-----Solve-----\n\n#-----Display-----\n', '\nN = 100\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append((a, b))\n\ndp = [[0 for i in range(N + 1)] for j in range(m + 1)]\nfor k in range(1, m + 1):\n    for i in range(1, N + 1):\n        if stores[k - 1][0] < i:\n            dp[k][i] = max(dp[k - 1][i], stores[k - 1][1] + dp[k - 1][i - stores[k - 1][0]])\n        else:\n            dp[k][i] = dp[k - 1][i]\n#-----Solve-----\n\nprint(dp[m][N])\n#-----Display-----\n']
2022-04-23 16:51:55.408447 size on output set 4
2022-04-23 16:51:55.408459 num operations 1
2022-04-23 16:51:55.408465 size on input set 1
2022-04-23 16:51:55.408594 using api key derek
2022-04-23 16:52:02.431060 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = number of stores\n# m = number of energy drinks we want to buy\n# a = price of one energy drink at each store\n# b = max number of energy drinks we can buy at each store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x (same logic applies to if we cannot buy)\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks (the minimum value of x that satisfies the condition)\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 2,
      "text": "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 3,
      "text": "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    }
  ],
  "created": 1650732715,
  "object": "edit"
}
2022-04-23 16:52:02.431416 fix syntax errors 4 ['\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n\n# n = number of stores\n# m = number of energy drinks we want to buy\n# a = price of one energy drink at each store\n# b = max number of energy drinks we can buy at each store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x (same logic applies to if we cannot buy)\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks (the minimum value of x that satisfies the condition)\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n']
2022-04-23 16:52:02.431495 size on output set 2
