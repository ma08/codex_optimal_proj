["\nimport math\n\n\ndef get_answer(array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(array))\n", "\n\n# SOLUTION 1\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i//m\n\n    return moves if moves >= k else -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\n\n# SOLUTION\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a[1:]:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array) + 1\n    for element in array:\n        answer += math.ceil(element / min_element)\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n\n    m = min(a)\n    for i in range(n):\n        m = gcd(m, a[i])\n\n    moves = 0\n    for i in range(n):\n        moves += a[i] // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]  # n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    array = [int(x) for x in input().split()]  # k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n    print(get_answer(n, k, array))\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k))\n\n\n\ndef min_num_operations(n, k):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += (i // m) - 1\n\n    if moves >= k:\n        return moves + 1\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\ndef min_num_operations(n, k, a):\n    return n - k\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\n\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array) - 1\n    for element in array:\n        answer += math.ceil(element / min_element)\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n"]