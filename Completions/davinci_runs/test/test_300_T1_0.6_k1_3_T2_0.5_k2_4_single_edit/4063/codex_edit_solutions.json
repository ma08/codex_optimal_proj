["\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    left, right = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\nprint(N)\nprint(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i + 1:]):\n        count += 1\n\nprint(count)\n", "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\n\nN = int(sys.stdin.readline().rstrip())\np = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(p)\n\n# def is_prime(x):\n#     if x == 2:\n#         return True\n#     elif x == 1 or x % 2 == 0:\n#         return False\n#     else:\n#         for i in range(3, int(math.sqrt(x)) + 1, 2):\n#             if x % i == 0:\n#                 return False\n#     return True\n\n\ndef is_prime(x):\n    if x == 2:\n        return True\n    if x == 1 or x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n\n\nfor i in p:\n    if is_prime(i):\n        print('Prime')\n    else:\n        print('Not Prime')\n", "\n\n\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if N//2-difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:N]):\n        count += 1\n\nprint(count)\n", "import sys\n\nX = int(sys.stdin.readline().rstrip())\nY = int(sys.stdin.readline().rstrip())\nZ = int(sys.stdin.readline().rstrip())\nK = int(sys.stdin.readline().rstrip())\n\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nB = list(map(int, sys.stdin.readline().rstrip().split()))\nC = list(map(int, sys.stdin.readline().rstrip().split()))\n\nAB = []\n\nfor i in range(X):\n    for j in range(Y):\n        AB.append(A[i] + B[j])\n\nAB.sort(reverse=True)\n\nABC = []\n\nfor i in range(min(K, X * Y)):\n    for j in range(Z):\n        ABC.append(AB[i] + C[j])\n\nABC.sort(reverse=True)\n\nfor i in range(K):\n    print(ABC[i])\n", "\n    # TODO: Refactor the code\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem, and sort them in ascending order\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]