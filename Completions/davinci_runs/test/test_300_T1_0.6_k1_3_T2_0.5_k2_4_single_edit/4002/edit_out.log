2022-04-23 15:52:14.925050 num operations 1
2022-04-23 15:52:14.925073 size on input set 1
2022-04-23 15:52:14.925221 using api key kouti
2022-04-23 15:52:21.942913 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())   # read the input\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)] # dp table\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650729136,
  "object": "edit"
}
2022-04-23 15:52:21.943242 fix syntax errors 4 ['\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())   # read the input\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)] # dp table\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 15:52:21.943300 size on output set 4
2022-04-23 15:52:21.943313 num operations 1
2022-04-23 15:52:21.943319 size on input set 1
2022-04-23 15:52:21.943475 using api key derek
2022-04-23 15:52:24.436392 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n#\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 2,
      "text": "\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 3,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    }
  ],
  "created": 1650729141,
  "object": "edit"
}
2022-04-23 15:52:24.436596 fix syntax errors 4 ['n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\n#\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', 'n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n']
2022-04-23 15:52:24.436709 size on output set 3
2022-04-23 15:52:24.436735 num operations 1
2022-04-23 15:52:24.436742 size on input set 1
2022-04-23 15:52:24.436911 using api key kouti
2022-04-23 15:52:27.206389 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650729144,
  "object": "edit"
}
2022-04-23 15:52:27.206617 fix syntax errors 4 ["\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 15:52:27.206659 size on output set 1
