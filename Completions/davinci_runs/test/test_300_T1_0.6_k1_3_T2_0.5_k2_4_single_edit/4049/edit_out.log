2022-04-23 16:08:50.143424 num operations 1
2022-04-23 16:08:50.143443 size on input set 1
2022-04-23 16:08:50.143589 using api key kouti
2022-04-23 16:08:56.926882 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nprint(min(a[0] - b[1], a[2] - b[0], a[1] - b[2]), max(a[0] - b[1], a[2] - b[0], a[1] - b[2]))\n"
    },
    {
      "index": 1,
      "text": "\nprint('Hello, World!')\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nif a[0] > b[1]:\n    a[0] -= b[1]\n    b[1] = 0\nelse:\n    b[1] -= a[0]\n    a[0] = 0\nif a[2] > b[0]:\n    a[2] -= b[0]\n    b[0] = 0\nelse:\n    b[0] -= a[2]\n    a[2] = 0\nif a[1] > b[2]:\n    a[1] -= b[2]\n    b[2] = 0\nelse:\n    b[2] -= a[1]\n    a[1] = 0\n\nprint(min(a), max(a))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nif a[0] > b[1]:\n    a[0] -= b[1]\n    b[1] = 0\nelse:\n    b[1] -= a[0]\n    a[0] = 0\nif a[2] > b[0]:\n    a[2] -= b[0]\n    b[0] = 0\nelse:\n    b[0] -= a[2]\n    a[2] = 0\nif a[1] > b[2]:\n    a[1] -= b[2]\n    b[2] = 0\nelse:\n    b[2] -= a[1]\n    a[1] = 0\n\nprint(min(a), max(a))\n"
    }
  ],
  "created": 1650730130,
  "object": "edit"
}
2022-04-23 16:08:56.927157 fix syntax errors 4 ['\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nprint(min(a[0] - b[1], a[2] - b[0], a[1] - b[2]), max(a[0] - b[1], a[2] - b[0], a[1] - b[2]))\n', "\nprint('Hello, World!')\n", '\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nif a[0] > b[1]:\n    a[0] -= b[1]\n    b[1] = 0\nelse:\n    b[1] -= a[0]\n    a[0] = 0\nif a[2] > b[0]:\n    a[2] -= b[0]\n    b[0] = 0\nelse:\n    b[0] -= a[2]\n    a[2] = 0\nif a[1] > b[2]:\n    a[1] -= b[2]\n    b[2] = 0\nelse:\n    b[2] -= a[1]\n    a[1] = 0\n\nprint(min(a), max(a))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nif a[0] > b[1]:\n    a[0] -= b[1]\n    b[1] = 0\nelse:\n    b[1] -= a[0]\n    a[0] = 0\nif a[2] > b[0]:\n    a[2] -= b[0]\n    b[0] = 0\nelse:\n    b[0] -= a[2]\n    a[2] = 0\nif a[1] > b[2]:\n    a[1] -= b[2]\n    b[2] = 0\nelse:\n    b[2] -= a[1]\n    a[1] = 0\n\nprint(min(a), max(a))\n']
2022-04-23 16:08:56.927190 size on output set 3
2022-04-23 16:08:56.927200 num operations 1
2022-04-23 16:08:56.927205 size on input set 1
2022-04-23 16:08:56.927326 using api key jaanu
2022-04-23 16:09:10.017945 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from os import path\nimport csv\n\n\ndef read_csv(file_path):\n    \"\"\"\n    Reads the CSV file at file_path to a list of dictionaries. Each\n    dictionary maps the columns in the CSV to the values for that row.\n    \"\"\"\n    output = []\n    for row in csv.DictReader(open(file_path)):\n        output.append(row)\n    return output\n\n\ndef write_csv(file_path, rows):\n    \"\"\"\n    Writes a CSV file at file_path using the list of dictionaries in rows.\n    \"\"\"\n    with open(file_path, 'w') as f:\n        writer = csv.DictWriter(f, fieldnames=rows[0].keys())\n        writer.writeheader()\n        for row in rows:\n            writer.writerow(row)\n\n\ndef read_file(file_path):\n    \"\"\"\n    Reads the file at file_path to a string.\n    \"\"\"\n    with open(file_path, 'r') as f:\n        return f.read()\n\n\ndef write_file(file_path, contents):\n    \"\"\"\n    Writes the given contents to the file at file_path.\n    \"\"\"\n    with open(file_path, 'w') as f:\n        f.write(contents)\n\n\ndef append_to_file(file_path, contents):\n    \"\"\"\n    Appends the given contents to the file at file_path.\n    \"\"\"\n    with open(file_path, 'a') as f:\n        f.write(contents)\n\n\ndef file_exists(file_path):\n    \"\"\"\n    Checks if a file exists at file_path.\n    \"\"\"\n    return path.exists(file_path)\n\n\ndef folder_exists(folder_path):\n    \"\"\"\n    Checks if a folder exists at folder_path.\n    \"\"\"\n    return path.exists(folder_path)\n\n\ndef get_full_path(file_name, subfolder=None):\n    \"\"\"\n    Returns the full path of a file in the given subfolder.\n    If subfolder is None, returns the full path of file_name in the current\n    working directory.\n    \"\"\"\n    if subfolder:\n        return path.join(subfolder, file_name)\n    else:\n        return path.join(path.curdir, file_name)\n"
    },
    {
      "index": 1,
      "text": "const fs = require('fs')\n\n// fs.writeFile('file.txt', 'hello world', (err) => {\n//     if(err) throw err;\n//     console.log(`file saved`)\n// })\n\nfs.readFile('file.txt', 'utf8', (err, data) => {\n    if(err) throw err;\n    console.log(data)\n})\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    if len(sys.argv) != 2:\n        print(\"Usage: %s <filename>\" % sys.argv[0])\n        return 1\n    filename = sys.argv[1]\n\n    # read file\n    with open(filename) as f:\n        content = f.readlines()\n    content = [x.strip() for x in content]\n    print(content)\n\n    # parse file\n    data = {}\n    for line in content:\n        if \":\" not in line:\n            continue\n        key, val = line.split(\":\")\n        data[key] = val\n    print(data)\n\n    # write file\n    with open(filename, \"w\") as f:\n        for k, v in data.items():\n            f.write(\"%s:%s\\n\" % (k, v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "const fs = require('fs');\nconst path = require('path');\n\nconst file = path.join(__dirname, './file.txt');\n\nfs.readFile(file, (err, data) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log(data.toString());\n});\n"
    }
  ],
  "created": 1650730136,
  "object": "edit"
}
2022-04-23 16:09:10.018161 fix syntax errors 4 ['from os import path\nimport csv\n\n\ndef read_csv(file_path):\n    """\n    Reads the CSV file at file_path to a list of dictionaries. Each\n    dictionary maps the columns in the CSV to the values for that row.\n    """\n    output = []\n    for row in csv.DictReader(open(file_path)):\n        output.append(row)\n    return output\n\n\ndef write_csv(file_path, rows):\n    """\n    Writes a CSV file at file_path using the list of dictionaries in rows.\n    """\n    with open(file_path, \'w\') as f:\n        writer = csv.DictWriter(f, fieldnames=rows[0].keys())\n        writer.writeheader()\n        for row in rows:\n            writer.writerow(row)\n\n\ndef read_file(file_path):\n    """\n    Reads the file at file_path to a string.\n    """\n    with open(file_path, \'r\') as f:\n        return f.read()\n\n\ndef write_file(file_path, contents):\n    """\n    Writes the given contents to the file at file_path.\n    """\n    with open(file_path, \'w\') as f:\n        f.write(contents)\n\n\ndef append_to_file(file_path, contents):\n    """\n    Appends the given contents to the file at file_path.\n    """\n    with open(file_path, \'a\') as f:\n        f.write(contents)\n\n\ndef file_exists(file_path):\n    """\n    Checks if a file exists at file_path.\n    """\n    return path.exists(file_path)\n\n\ndef folder_exists(folder_path):\n    """\n    Checks if a folder exists at folder_path.\n    """\n    return path.exists(folder_path)\n\n\ndef get_full_path(file_name, subfolder=None):\n    """\n    Returns the full path of a file in the given subfolder.\n    If subfolder is None, returns the full path of file_name in the current\n    working directory.\n    """\n    if subfolder:\n        return path.join(subfolder, file_name)\n    else:\n        return path.join(path.curdir, file_name)\n', "const fs = require('fs')\n\n// fs.writeFile('file.txt', 'hello world', (err) => {\n//     if(err) throw err;\n//     console.log(`file saved`)\n// })\n\nfs.readFile('file.txt', 'utf8', (err, data) => {\n    if(err) throw err;\n    console.log(data)\n})\n", '#!/usr/bin/python\n\nimport sys\n\ndef main():\n    if len(sys.argv) != 2:\n        print("Usage: %s <filename>" % sys.argv[0])\n        return 1\n    filename = sys.argv[1]\n\n    # read file\n    with open(filename) as f:\n        content = f.readlines()\n    content = [x.strip() for x in content]\n    print(content)\n\n    # parse file\n    data = {}\n    for line in content:\n        if ":" not in line:\n            continue\n        key, val = line.split(":")\n        data[key] = val\n    print(data)\n\n    # write file\n    with open(filename, "w") as f:\n        for k, v in data.items():\n            f.write("%s:%s\\n" % (k, v))\n\nif __name__ == "__main__":\n    main()\n', "const fs = require('fs');\nconst path = require('path');\n\nconst file = path.join(__dirname, './file.txt');\n\nfs.readFile(file, (err, data) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log(data.toString());\n});\n"]
2022-04-23 16:09:10.018309 size on output set 4
2022-04-23 16:09:10.018323 num operations 1
2022-04-23 16:09:10.018330 size on input set 1
2022-04-23 16:09:10.018466 using api key kouti
2022-04-23 16:09:29.845711 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\n# n = int(input())\n# a = list(map(int,input().split()))\n# b = list(map(int,input().split()))\n#\n# ans = 0\n#\n# for i in range(3):\n#     if a[i] == n or b[i] == n:\n#         continue\n#     else:\n#         if (i - i)%3 == 1:\n#             ans += min(a[i],b[i])\n#         elif (i - i)%3 == 2:\n#             ans += min(a[i],b[i])\n#\n# print(ans,n-ans)\n\n# n = int(input())\n# a = list(map(int,input().split()))\n# b = list(map(int,input().split()))\n#\n# min_win = 0\n# max_win = 0\n#\n# for i in range(3):\n#     for j in range(3):\n#         if a[i] == 0 or b[j] == 0:\n#             continue\n#         else:\n#             if (i - j)%3 == 1:\n#                 min_win += min(a[i],b[j])\n#             elif (i - j)%3 == 2:\n#                 max_win += min(a[i],b[j])\n#\n# print(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    if a[i] == 0 or b[i] == 0:\n        continue\n    else:\n        if (i - i)%3 == 0:\n            min_win += min(a[i],b[i])\n        else:\n            max_win += min(a[i],b[i])\n\nprint(min_win,max_win)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(3):\n    if a[i] == 0 or b[i] == 0:\n        continue\n    else:\n        if (i - i)%3 == 1:\n            ans += min(a[i],b[i])\n        elif (i - i)%3 == 2:\n            ans += min(a[i],b[i])\n\nprint(ans,n-ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(3):\n    if a[i] == n or b[i] == n:\n        continue\n    else:\n        if (i - i) % 3 == 1:\n            ans += min(a[i],b[i])\n        elif (i - i) % 3 == 2:\n            ans += min(a[i],b[i])\n\nprint(ans, n - ans)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n"
    }
  ],
  "created": 1650730150,
  "object": "edit"
}
2022-04-23 16:09:29.845981 fix syntax errors 4 ['\n\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\n# n = int(input())\n# a = list(map(int,input().split()))\n# b = list(map(int,input().split()))\n#\n# ans = 0\n#\n# for i in range(3):\n#     if a[i] == n or b[i] == n:\n#         continue\n#     else:\n#         if (i - i)%3 == 1:\n#             ans += min(a[i],b[i])\n#         elif (i - i)%3 == 2:\n#             ans += min(a[i],b[i])\n#\n# print(ans,n-ans)\n\n# n = int(input())\n# a = list(map(int,input().split()))\n# b = list(map(int,input().split()))\n#\n# min_win = 0\n# max_win = 0\n#\n# for i in range(3):\n#     for j in range(3):\n#         if a[i] == 0 or b[j] == 0:\n#             continue\n#         else:\n#             if (i - j)%3 == 1:\n#                 min_win += min(a[i],b[j])\n#             elif (i - j)%3 == 2:\n#                 max_win += min(a[i],b[j])\n#\n# print(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    if a[i] == 0 or b[i] == 0:\n        continue\n    else:\n        if (i - i)%3 == 0:\n            min_win += min(a[i],b[i])\n        else:\n            max_win += min(a[i],b[i])\n\nprint(min_win,max_win)\n', '\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(3):\n    if a[i] == 0 or b[i] == 0:\n        continue\n    else:\n        if (i - i)%3 == 1:\n            ans += min(a[i],b[i])\n        elif (i - i)%3 == 2:\n            ans += min(a[i],b[i])\n\nprint(ans,n-ans)\n', '\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(3):\n    if a[i] == n or b[i] == n:\n        continue\n    else:\n        if (i - i) % 3 == 1:\n            ans += min(a[i],b[i])\n        elif (i - i) % 3 == 2:\n            ans += min(a[i],b[i])\n\nprint(ans, n - ans)\n', '\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nmin_win = 0\nmax_win = 0\n\nfor i in range(3):\n    for j in range(3):\n        if a[i] == 0 or b[j] == 0:\n            continue\n        else:\n            if (i - j)%3 == 1:\n                min_win += min(a[i],b[j])\n            elif (i - j)%3 == 2:\n                max_win += min(a[i],b[j])\n\nprint(min_win,max_win)\n']
2022-04-23 16:09:29.846043 size on output set 4
