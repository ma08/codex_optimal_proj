2022-04-23 17:16:24.358428 num operations 1
2022-04-23 17:16:24.358459 size on input set 1
2022-04-23 17:16:24.358595 using api key sunu
2022-04-23 17:16:36.824965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            if a[i][j] == '.':\n                continue\n            if a[i][j-1] == '.' and a[i][j+1] == '.' and a[i-1][j] == '.' and a[i+1][j] == '.':\n                continue\n            s = 1\n            while True:\n                if i-s<0 or j-s<0 or i+s>=n or j+s>=m:\n                    break\n                if a[i-s][j] == '.' or a[i+s][j] == '.' or a[i][j-s] == '.' or a[i][j+s] == '.':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x,y,s in ans:\n        print(x+1,y+1,s)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if a[i][j] == '.':\n                continue\n            if a[i][j-1]=='.' and a[i][j+1]=='.' and a[i-1][j]=='.' and a[i+1][j]=='.':\n                continue\n            s = 1\n            while True:\n                if i-s < 0 or j-s < 0 or i+s >= n or j+s >= m:\n                    break\n                if a[i-s][j]=='.' or a[i+s][j]=='.' or a[i][j-s]=='.' or a[i][j+s]=='.':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x, y, s in ans:\n        print(x+1, y+1, s)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [input() for i in range(n)]\n\n    ans = []\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if a[i][j] == '.':\n                continue\n            if a[i][j - 1] == '.' and a[i][j + 1] == '.' and a[i - 1][j] == '.' and a[i + 1][j] == '.':\n                continue\n            s = 1\n            while True:\n                if i - s < 0 or j - s < 0 or i + s >= n or j + s >= m:\n                    break\n                if a[i - s][j] == '.' or a[i + s][j] == '.' or a[i][j - s] == '.' or a[i][j + s] == '.':\n                    break\n                ans.append((i, j, s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x, y, s in ans:\n        print(x + 1, y + 1, s)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            if a[i][j] == '.':\n                continue\n            if a[i][j-1]=='.' and a[i][j+1]=='.' and a[i-1][j]=='.' and a[i+1][j]=='.' and a[i-1][j-1]=='.' and a[i+1][j+1]=='.' and a[i-1][j+1]=='.' and a[i+1][j-1]=='.':\n                continue\n            s = 1\n            while True:\n                if i-s<0 or j-s<0 or i+s>=n or j+s>=m:\n                    break\n                if a[i-s][j]=='.' or a[i+s][j]=='.' or a[i][j-s]=='.' or a[i][j+s]=='.':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x,y,s in ans:\n        print(x+1,y+1,s)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650734184,
  "object": "edit"
}
2022-04-23 17:16:36.825231 fix syntax errors 4 ['\n\ndef main():\n    n,m = map(int,input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            if a[i][j] == \'.\':\n                continue\n            if a[i][j-1] == \'.\' and a[i][j+1] == \'.\' and a[i-1][j] == \'.\' and a[i+1][j] == \'.\':\n                continue\n            s = 1\n            while True:\n                if i-s<0 or j-s<0 or i+s>=n or j+s>=m:\n                    break\n                if a[i-s][j] == \'.\' or a[i+s][j] == \'.\' or a[i][j-s] == \'.\' or a[i][j+s] == \'.\':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x,y,s in ans:\n        print(x+1,y+1,s)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if a[i][j] == \'.\':\n                continue\n            if a[i][j-1]==\'.\' and a[i][j+1]==\'.\' and a[i-1][j]==\'.\' and a[i+1][j]==\'.\':\n                continue\n            s = 1\n            while True:\n                if i-s < 0 or j-s < 0 or i+s >= n or j+s >= m:\n                    break\n                if a[i-s][j]==\'.\' or a[i+s][j]==\'.\' or a[i][j-s]==\'.\' or a[i][j+s]==\'.\':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x, y, s in ans:\n        print(x+1, y+1, s)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    a = [input() for i in range(n)]\n\n    ans = []\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if a[i][j] == \'.\':\n                continue\n            if a[i][j - 1] == \'.\' and a[i][j + 1] == \'.\' and a[i - 1][j] == \'.\' and a[i + 1][j] == \'.\':\n                continue\n            s = 1\n            while True:\n                if i - s < 0 or j - s < 0 or i + s >= n or j + s >= m:\n                    break\n                if a[i - s][j] == \'.\' or a[i + s][j] == \'.\' or a[i][j - s] == \'.\' or a[i][j + s] == \'.\':\n                    break\n                ans.append((i, j, s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x, y, s in ans:\n        print(x + 1, y + 1, s)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    ans = []\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            if a[i][j] == \'.\':\n                continue\n            if a[i][j-1]==\'.\' and a[i][j+1]==\'.\' and a[i-1][j]==\'.\' and a[i+1][j]==\'.\' and a[i-1][j-1]==\'.\' and a[i+1][j+1]==\'.\' and a[i-1][j+1]==\'.\' and a[i+1][j-1]==\'.\':\n                continue\n            s = 1\n            while True:\n                if i-s<0 or j-s<0 or i+s>=n or j+s>=m:\n                    break\n                if a[i-s][j]==\'.\' or a[i+s][j]==\'.\' or a[i][j-s]==\'.\' or a[i][j+s]==\'.\':\n                    break\n                ans.append((i,j,s))\n                s += 1\n    if len(ans) == 0:\n        print(-1)\n        return\n    print(len(ans))\n    for x,y,s in ans:\n        print(x+1,y+1,s)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 17:16:36.825284 size on output set 4
2022-04-23 17:16:36.825295 num operations 1
2022-04-23 17:16:36.825301 size on input set 1
2022-04-23 17:16:36.825435 using api key jaanu
2022-04-23 17:16:39.337856 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n"
    }
  ],
  "created": 1650734196,
  "object": "edit"
}
2022-04-23 17:16:39.338159 fix syntax errors 4 ["\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n", "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n", "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n", "\nn, m = map(int, input().split())\ngrid = []\nstars = 0\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == '*':\n            stars += 1\n\nif stars == 0:\n    print(0)\n    exit()\n\n# find start star\ni, j = 0, 0\nwhile i < n:\n    if grid[i][j] == '*':\n        break\n    j += 1\n    if j == m:\n        j = 0\n        i += 1\n\n# find star width and height\nstar_width = 0\nwhile j + star_width < m and grid[i][j + star_width] == '*':\n    star_width += 1\nstar_height = 0\nwhile i + star_height < n and grid[i + star_height][j] == '*':\n    star_height += 1\n\n# check if star is valid\nif star_width == 0 or star_height == 0:\n    print(-1)\n    exit()\n\n# check if all stars are valid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*' and (i < (star_height - 1) or i >= n - (star_height - 1) or j < (star_width - 1) or j >= m - (star_width - 1)):\n            print(-1)\n            exit()\n\n# print the stars\nprint(stars)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            print(i + 1, j + 1, min(star_width, star_height))\n"]
2022-04-23 17:16:39.338222 size on output set 1
2022-04-23 17:16:39.338245 num operations 1
2022-04-23 17:16:39.338251 size on input set 1
2022-04-23 17:16:39.338375 using api key jaanu
2022-04-23 17:16:56.576013 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nstars = []\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print(\"add_star\", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print(\"check_star\", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == '.':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != '*':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print(\"remove_star\", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '.'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '*'\n\ndef main():\n    global n, m, grid\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        row = list(input())\n        grid.append(row)\n\n    find_stars()\n    if check_stars():\n        print(len(stars))\n        print_stars()\n    else:\n        print(-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print(\"add_star\", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print(\"check_star\", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == '.':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != '*':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print(\"remove_star\", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '.'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '*'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n"
    },
    {
      "index": 2,
      "text": "# https://codeforces.com/contest/1328/problem/A\n\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print(\"add_star\", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print(\"check_star\", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == '.':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != '*':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print(\"remove_star\", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '.'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '*'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n"
    },
    {
      "index": 3,
      "text": "\n\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ] \n\ndef add_star(x, y, size, col, row):\n    # print(\"add_star\", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print(\"check_star\", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == '.':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != '*':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print(\"remove_star\", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '.'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = '*'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n"
    }
  ],
  "created": 1650734199,
  "object": "edit"
}
2022-04-23 17:16:56.576390 fix syntax errors 4 ['\nstars = []\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print("add_star", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print("check_star", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == \'.\':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != \'*\':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print("remove_star", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'.\'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'*\'\n\ndef main():\n    global n, m, grid\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        row = list(input())\n        grid.append(row)\n\n    find_stars()\n    if check_stars():\n        print(len(stars))\n        print_stars()\n    else:\n        print(-1)\n\nmain()\n', '\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print("add_star", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print("check_star", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == \'.\':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != \'*\':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print("remove_star", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'.\'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'*\'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n', '# https://codeforces.com/contest/1328/problem/A\n\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ]\n\ndef add_star(x, y, size, col, row):\n    # print("add_star", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print("check_star", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == \'.\':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != \'*\':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print("remove_star", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'.\'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'*\'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n', '\n\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    row = list(input())\n    grid.append(row)\n\nstars = []\n# stars = [ [x, y, size, col, row] ] \n\ndef add_star(x, y, size, col, row):\n    # print("add_star", x, y, size, col, row)\n    stars.append([x, y, size, col, row])\n\ndef check_star(x, y, size, col, row):\n    # print("check_star", x, y, size, col, row)\n    for i in range(size):\n        for j in range(size):\n            if grid[x+i][y+j] == \'.\':\n                return False\n    return True\n\ndef check_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                if grid[x+i][y+j] != \'*\':\n                    return False\n    return True\n\ndef remove_star(x, y, size, col, row):\n    # print("remove_star", x, y, size, col, row)\n    stars.remove([x, y, size, col, row])\n\ndef find_stars():\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                add_star(i, j, 1, False, False)\n                if i+1 < n and check_star(i, j, 2, False, False):\n                    add_star(i, j, 2, False, False)\n                if j+1 < m and check_star(i, j, 2, True, False):\n                    add_star(i, j, 2, True, False)\n                if i+1 < n and j+1 < m and check_star(i, j, 2, True, True):\n                    add_star(i, j, 2, True, True)\n                if i+2 < n and check_star(i, j, 3, False, False):\n                    add_star(i, j, 3, False, False)\n                if j+2 < m and check_star(i, j, 3, True, False):\n                    add_star(i, j, 3, True, False)\n                if i+2 < n and j+2 < m and check_star(i, j, 3, True, True):\n                    add_star(i, j, 3, True, True)\n\ndef print_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        print(x+1, y+1, size)\n\ndef remove_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'.\'\n\ndef fill_stars():\n    for star in stars:\n        x, y, size, col, row = star\n        for i in range(size):\n            for j in range(size):\n                grid[x+i][y+j] = \'*\'\n\nfind_stars()\nif check_stars():\n    print(len(stars))\n    print_stars()\nelse:\n    print(-1)\n']
2022-04-23 17:16:56.576504 size on output set 4
