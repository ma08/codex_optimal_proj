2022-04-23 17:14:39.014322 num operations 1
2022-04-23 17:14:39.014343 size on input set 1
2022-04-23 17:14:39.014503 using api key derek
2022-04-23 17:14:51.283789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef search(A, d, visited, N):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited, N)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited, N))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef search(A, d, visited):\n    if sum(visited) == len(visited) - 1:\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1 and i != d:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n#\n# def search(A, d, visited):\n#     if sum(visited) == len(visited):\n#         return 1\n#     ret = 0\n#     for i in range(len(A)):\n#         if visited[i] == 0 and A[d][i] == 1:\n#             visited[i] = 1\n#             ret += search(A, i, visited)\n#             visited[i] = 0\n#     return ret\n#\n# def main():\n#     N, M = map(int, input().split())\n#     A = [[0]*N for _ in range(N)]\n#     for _ in range(M):\n#         a, b = map(int, input().split())\n#         A[a-1][b-1] = 1\n#         A[b-1][a-1] = 1\n#     visited = [0] * N\n#     visited[0] = 1\n#     print(search(A, 0, visited))\n#\n# if __name__ == '__main__':\n#     main()\n"
    }
  ],
  "created": 1650734079,
  "object": "edit"
}
2022-04-23 17:14:51.284202 fix syntax errors 4 ["\n\ndef search(A, d, visited, N):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited, N)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited, N))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef search(A, d, visited):\n    if sum(visited) == len(visited) - 1:\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1 and i != d:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# def search(A, d, visited):\n#     if sum(visited) == len(visited):\n#         return 1\n#     ret = 0\n#     for i in range(len(A)):\n#         if visited[i] == 0 and A[d][i] == 1:\n#             visited[i] = 1\n#             ret += search(A, i, visited)\n#             visited[i] = 0\n#     return ret\n#\n# def main():\n#     N, M = map(int, input().split())\n#     A = [[0]*N for _ in range(N)]\n#     for _ in range(M):\n#         a, b = map(int, input().split())\n#         A[a-1][b-1] = 1\n#         A[b-1][a-1] = 1\n#     visited = [0] * N\n#     visited[0] = 1\n#     print(search(A, 0, visited))\n#\n# if __name__ == '__main__':\n#     main()\n"]
2022-04-23 17:14:51.284262 size on output set 4
2022-04-23 17:14:51.284275 num operations 1
2022-04-23 17:14:51.284282 size on input set 1
2022-04-23 17:14:51.284459 using api key jaanu
2022-04-23 17:14:55.388681 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 1,
      "text": "\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 2,
      "text": "N,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 3,
      "text": "\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N-1:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = set()\nprint(dfs(graph,2,visited))\n"
    }
  ],
  "created": 1650734091,
  "object": "edit"
}
2022-04-23 17:14:55.389018 fix syntax errors 4 ['\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', '\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', 'N,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', '\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N-1:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = set()\nprint(dfs(graph,2,visited))\n']
2022-04-23 17:14:55.389059 size on output set 4
