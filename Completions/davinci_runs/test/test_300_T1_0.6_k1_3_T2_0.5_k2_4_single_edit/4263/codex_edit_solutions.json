["\n\ns = input().strip()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if acgt_string.count('A') > 0 and acgt_string.count('C') > 0 and acgt_string.count('G') > 0 and acgt_string.count('T') > 0:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 001\n# Problem A\n\nif __name__ == '__main__':\n    h1 = int(input())\n    h2 = int(input())\n    print(h1 - h2)\n", "\ns = input().strip()\n\nprint(s[0].upper()+s[1:])\n", "\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range\n", "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string and len(acgt_string) > 0:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    print(int(input()) * 2 * 3.141592)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 007\n# Problem A\n\nif __name__ == '__main__':\n    N = int(input())\n    print(N - 1)\n", "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans, j-i)\nprint(ans)\n", "\n\ns = input()  # input string\n\n# create a list of substrings of s that are only A, C, G, and T,\n# and have length greater than 1\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if len(acgt_string) > 1 and \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nif len(acgt_strings) > 0:\n    print(max([len(acgt_string) for acgt_string in acgt_strings]))\nelse:\n    print(\"0\")\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    string = str(input())\n    print(string[0] + string[1])\n", "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"]