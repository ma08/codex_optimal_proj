2022-04-23 17:22:36.607307 num operations 1
2022-04-23 17:22:36.607328 size on input set 1
2022-04-23 17:22:36.607471 using api key jaanu
2022-04-23 17:22:43.384671 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [[int(x) for x in input().split()] for _ in range(n + 1)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]) + abs(a[j][c] - a[j][c + 1]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m = (int(x) for x in sys.stdin.readline().split())\n    a = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650734556,
  "object": "edit"
}
2022-04-23 17:22:43.385014 fix syntax errors 4 ['\n\n\ndef main():\n    print("Hello World")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [[int(x) for x in input().split()] for _ in range(n + 1)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]) + abs(a[j][c] - a[j][c + 1]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, m = (int(x) for x in sys.stdin.readline().split())\n    a = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 17:22:43.385050 size on output set 4
2022-04-23 17:22:43.385061 num operations 1
2022-04-23 17:22:43.385067 size on input set 1
2022-04-23 17:22:43.385227 using api key derek
2022-04-23 17:22:53.985859 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 1,
      "text": "\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 2,
      "text": "\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport math\nn, m = [int(x) for x in input().split()]\n\nd = [0]*n\nd[0] = float('inf')\n\nfor i in range(1, n):\n    d[i] = int(input())\n\nd.sort()\n\ndef is_valid(k, d):\n    pos = 0\n    for i in range(m):\n        if pos >= n:\n            return False\n        while pos < n and d[pos] - d[0] < k:\n            pos += 1\n        if pos >= n:\n            return False\n        d[0] = d[pos]\n        pos += 1\n        d.sort()\n    return True\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r)//2\n    if is_valid(m, d):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n"
    }
  ],
  "created": 1650734563,
  "object": "edit"
}
2022-04-23 17:22:53.986120 fix syntax errors 4 ['n,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', "\n\nimport math\nn, m = [int(x) for x in input().split()]\n\nd = [0]*n\nd[0] = float('inf')\n\nfor i in range(1, n):\n    d[i] = int(input())\n\nd.sort()\n\ndef is_valid(k, d):\n    pos = 0\n    for i in range(m):\n        if pos >= n:\n            return False\n        while pos < n and d[pos] - d[0] < k:\n            pos += 1\n        if pos >= n:\n            return False\n        d[0] = d[pos]\n        pos += 1\n        d.sort()\n    return True\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r)//2\n    if is_valid(m, d):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n"]
2022-04-23 17:22:53.986163 size on output set 4
2022-04-23 17:22:53.986175 num operations 1
2022-04-23 17:22:53.986181 size on input set 1
2022-04-23 17:22:53.986302 using api key jaanu
2022-04-23 17:22:58.839359 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f\"n:{self.n}, m:{self.m}, matrix:{self.matrix}\"\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n                if j-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i][j-1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j-1])\n                if j+1 < self.m and abs(self.matrix[i][j] - self.matrix[i][j+1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j+1])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    }
  ],
  "created": 1650734574,
  "object": "edit"
}
2022-04-23 17:22:58.839803 fix syntax errors 4 ['\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f"n:{self.n}, m:{self.m}, matrix:{self.matrix}"\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n                if j-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i][j-1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j-1])\n                if j+1 < self.m and abs(self.matrix[i][j] - self.matrix[i][j+1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j+1])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n']
2022-04-23 17:22:58.839873 size on output set 2
