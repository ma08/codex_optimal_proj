["\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    \n    print(n-max(c.values()))\n", "var fs = require('fs');\n\nfunction write(path, content) {\n    fs.writeFile(path, content, function(err) {\n        if(err) {\n            return console.log(err);\n        }\n        console.log(\"The file was saved!\");\n    });\n}\n\nfunction append(path, content) {\n    fs.appendFile(path, content, function(err) {\n        if(err) {\n            return console.log(err);\n        }\n        console.log(\"The file was updated!\");\n    });\n}\n\nfunction read(path) {\n    fs.readFile(path, 'utf8', function(err, data) {\n        if(err) {\n            return console.log(err);\n        }\n        console.log(data);\n    });\n}\n\nfunction readSync(path) {\n    var data = fs.readFileSync(path, 'utf8');\n    console.log(data);\n}\n\nfunction create(path, content) {\n    fs.open(path, 'w', function(err, file) {\n        if(err) {\n            throw err;\n        }\n        console.log('Saved!');\n    });\n}\n\nfunction remove(path) {\n    fs.unlink(path, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Removed!');\n    });\n}\n\nfunction rename(path, newPath) {\n    fs.rename(path, newPath, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Renamed!');\n    });\n}\n\nfunction changePermission(path, mode) {\n    fs.chmod(path, mode, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Changed!');\n    });\n}\n\nfunction changeOwner(path, uid, gid) {\n    fs.chown(path, uid, gid, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Changed!');\n    });\n}\n\nfunction stat(path) {\n    fs.stat(path, function(err, stats) {\n        if(err) {\n            throw err;\n        }\n        console.log(stats);\n    });\n}\n\nfunction truncate(path, len) {\n    fs.truncate(path, len, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Truncated!');\n    });\n}\n\nfunction readDir(path) {\n    fs.readdir(path, function(err, files) {\n        if(err) {\n            throw err;\n        }\n        console.log(files);\n    });\n}\n\nfunction readDirSync(path) {\n    var files = fs.readdirSync(path);\n    console.log(files);\n}\n\nfunction createDir(path) {\n    fs.mkdir(path, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Created!');\n    });\n}\n\nfunction removeDir(path) {\n    fs.rmdir(path, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Removed!');\n    });\n}\n\nfunction watch(path, callback) {\n    fs.watch(path, callback);\n}\n\nfunction watchFile(path, callback) {\n    fs.watchFile(path, callback);\n}\n\nfunction unwatchFile(path, callback) {\n    fs.unwatchFile(path, callback);\n}\n\nfunction createReadStream(path) {\n    var stream = fs.createReadStream(path);\n    stream.on('data', function(chunk) {\n        console.log(chunk);\n    });\n}\n\nfunction createWriteStream(path) {\n    var stream = fs.createWriteStream(path);\n    stream.on('open', function() {\n        console.log('Opened!');\n    });\n}\n\nfunction createWriteStream(path) {\n    var stream = fs.createWriteStream(path);\n    stream.on('open', function() {\n        console.log('Opened!');\n    });\n}\n\nfunction close(fd) {\n    fs.close(fd, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Closed!');\n    });\n}\n\nfunction open(path, flags, mode, callback) {\n    fs.open(path, flags, mode, function(err, fd) {\n        if(err) {\n            throw err;\n        }\n        callback(fd);\n    });\n}\n\nfunction openSync(path, flags, mode) {\n    var fd = fs.openSync(path, flags, mode);\n    return fd;\n}\n\nfunction writeSync(fd, buffer, offset, length, position) {\n    fs.writeSync(fd, buffer, offset, length, position);\n}\n\nfunction readSync(fd, buffer, offset, length, position) {\n    fs.readSync(fd, buffer, offset, length, position);\n}\n\nfunction link(src, dest) {\n    fs.link(src, dest, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Linked!');\n    });\n}\n\nfunction linkSync(src, dest) {\n    fs.linkSync(src, dest);\n}\n\nfunction symlink(src, dest) {\n    fs.symlink(src, dest, function(err) {\n        if(err) {\n            throw err;\n        }\n        console.log('Symlinked!');\n    });\n}\n\nfunction symlinkSync(src, dest) {\n    fs.symlinkSync(src, dest);\n}\n\nfunction readlink(path) {\n    fs.readlink(path, function(err, linkString) {\n        if(err) {\n            throw err;\n        }\n        console.log(linkString);\n    });\n}\n\nfunction readlinkSync(path) {\n    var linkString = fs.readlinkSync(path);\n    console.log(linkString);\n}\n\nfunction realpathSync(path) {\n    var realPath = fs.realpathSync(path);\n    console.log(realPath);\n}\n", "\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    print(solve(n, a))\n", "import os\nfrom os.path import join\nimport glob\nimport json\n\n# get all the folders in the current directory\nfolders = glob.glob('./*')\n\n# iterate through each folder\nfor folder in folders:\n    # get all the files in the current folder\n    files = glob.glob(join(folder, '*'))\n    # iterate through each file\n    for file in files:\n        # open and read the file\n        with open(file, 'r') as f:\n            data = f.read()\n        # write the file\n        with open(file, 'w') as f:\n            f.write(data)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Jan  7 23:44:03 2019\n\n@author: abhijithneilabraham\n\"\"\"\n\n\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c1))\n", "n = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c.values()))\n", "import os\n\n\ndef main():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n    print(n-max(c.values()))\n", "#!/usr/bin/env python3\n\n# Created by: Evano Fotia\n# Created on: oct 2019\n# This program can write to a file\n\nimport csv\n\n\ndef main():\n    # this function can write to a file\n\n    # input\n    number_as_string = input(\"Enter a number: \")\n    number_as_number = int(number_as_string)\n\n    # process\n    if number_as_number == 1:\n        print(\"\")\n        print(\"You entered:\", number_as_number)\n        print(\"\")\n\n    # output\n    with open(\"number.txt\", \"w\") as file_object:\n        file_object.write(number_as_string)\n\n\nif __name__ == \"__main__\":\n    main()\n"]