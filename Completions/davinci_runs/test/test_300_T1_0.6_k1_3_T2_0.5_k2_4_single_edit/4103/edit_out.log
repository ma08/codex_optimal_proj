2022-04-23 16:28:26.742166 num operations 1
2022-04-23 16:28:26.742186 size on input set 1
2022-04-23 16:28:26.742360 using api key derek
2022-04-23 16:28:39.104729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b # battery for 0\n    a_left = a # battery for 1\n\n    max_segments = 0 # max number of segments\n    i = 0\n    while i < n:\n        if b_left == 0: # no more battery for 0\n            if a_left > 0: # check if there is battery for 1\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0: # no more battery for 1\n            if b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1: # segment is 1\n            if a_left < a: # check if there is room for more battery for 1\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0: # segment is 0\n            if a_left > 0: # check if there is battery for 1\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments) # print max number of segments\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    }
  ],
  "created": 1650731306,
  "object": "edit"
}
2022-04-23 16:28:39.105101 fix syntax errors 4 ["\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b # battery for 0\n    a_left = a # battery for 1\n\n    max_segments = 0 # max number of segments\n    i = 0\n    while i < n:\n        if b_left == 0: # no more battery for 0\n            if a_left > 0: # check if there is battery for 1\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0: # no more battery for 1\n            if b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1: # segment is 1\n            if a_left < a: # check if there is room for more battery for 1\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0: # segment is 0\n            if a_left > 0: # check if there is battery for 1\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0: # check if there is battery for 0\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments) # print max number of segments\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"]
2022-04-23 16:28:39.105240 size on output set 4
2022-04-23 16:28:39.105254 num operations 1
2022-04-23 16:28:39.105261 size on input set 1
2022-04-23 16:28:39.105387 using api key kouti
2022-04-23 16:28:50.171999 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 1,
      "text": "\nn, b, a = map(int, input().split()) \ns = list(map(int, input().split()))\nmax_segments = 0 \ncur_a = a\ncur_b = b \nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0: \n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a: \n                cur_a = a\n        else: \n            cur_a -= 1\n    else:\n        if cur_a > 0: \n            cur_a -= 1\n        else: \n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0: \n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a < 0 and cur_b < 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\nif n % 2 == 0:\n    print(n // 2)\nelse:\n    print(n // 2 + 1)\n"
    }
  ],
  "created": 1650731319,
  "object": "edit"
}
2022-04-23 16:28:50.172225 fix syntax errors 4 ['\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split()) \ns = list(map(int, input().split()))\nmax_segments = 0 \ncur_a = a\ncur_b = b \nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0: \n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a: \n                cur_a = a\n        else: \n            cur_a -= 1\n    else:\n        if cur_a > 0: \n            cur_a -= 1\n        else: \n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0: \n        break\n    max_segments += 1\nprint(max_segments)\n', '\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a < 0 and cur_b < 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn = int(input())\nif n % 2 == 0:\n    print(n // 2)\nelse:\n    print(n // 2 + 1)\n']
2022-04-23 16:28:50.172261 size on output set 4
2022-04-23 16:28:50.172288 num operations 1
2022-04-23 16:28:50.172294 size on input set 1
2022-04-23 16:28:50.172416 using api key derek
2022-04-23 16:29:06.090004 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, b, a, s, i = 0, b_charge = 0, a_charge = 0, max_dist = 0):\n    # initialize variables\n    b_charge = b_charge + b\n    a_charge = a_charge + a\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge != 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge != 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # number of segments, battery capacity, accumulator capacity\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, b, a, s):\n\t# initialize variables\n\ti = 0\n\tb_charge = b\n\ta_charge = a\n\tmax_dist = 0\n\twhile i < n:\n\t\t# if there is no charge on the accumulator\n\t\t# and the current segment is exposed to sunlight\n\t\t# charge the accumulator\n\t\tif a_charge == 0 and s[i] == 1:\n\t\t\ta_charge += 1\n\t\t\ti += 1\n\t\t# if there is no charge on the battery\n\t\t# and the current segment is not exposed to sunlight\n\t\t# charge the battery\n\t\telif b_charge == 0 and s[i] == 0:\n\t\t\tb_charge += 1\n\t\t\ti += 1\n\t\t# if there is charge on the accumulator\n\t\t# and the current segment is not exposed to sunlight\n\t\t# use the accumulator\n\t\telif a_charge > 0 and s[i] == 0:\n\t\t\ta_charge -= 1\n\t\t\ti += 1\n\t\t# if there is charge on the battery\n\t\t# and the current segment is exposed to sunlight\n\t\t# use the battery\n\t\telif b_charge > 0 and s[i] == 1:\n\t\t\tb_charge -= 1\n\t\t\ti += 1\n\t\t# if the battery and accumulator are both full\n\t\t# and no charge can be gained\n\t\t# the robot can't move forward\n\t\telse:\n\t\t\tbreak\n\t\t# increase the max distance\n\t\tmax_dist += 1\n\treturn max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n    return i\n\nn, b, a, d = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s, d))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    }
  ],
  "created": 1650731330,
  "object": "edit"
}
2022-04-23 16:29:06.090355 fix syntax errors 4 ["\n\ndef solve(n, b, a, s, i = 0, b_charge = 0, a_charge = 0, max_dist = 0):\n    # initialize variables\n    b_charge = b_charge + b\n    a_charge = a_charge + a\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge != 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge != 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # number of segments, battery capacity, accumulator capacity\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\n\ndef solve(n, b, a, s):\n\t# initialize variables\n\ti = 0\n\tb_charge = b\n\ta_charge = a\n\tmax_dist = 0\n\twhile i < n:\n\t\t# if there is no charge on the accumulator\n\t\t# and the current segment is exposed to sunlight\n\t\t# charge the accumulator\n\t\tif a_charge == 0 and s[i] == 1:\n\t\t\ta_charge += 1\n\t\t\ti += 1\n\t\t# if there is no charge on the battery\n\t\t# and the current segment is not exposed to sunlight\n\t\t# charge the battery\n\t\telif b_charge == 0 and s[i] == 0:\n\t\t\tb_charge += 1\n\t\t\ti += 1\n\t\t# if there is charge on the accumulator\n\t\t# and the current segment is not exposed to sunlight\n\t\t# use the accumulator\n\t\telif a_charge > 0 and s[i] == 0:\n\t\t\ta_charge -= 1\n\t\t\ti += 1\n\t\t# if there is charge on the battery\n\t\t# and the current segment is exposed to sunlight\n\t\t# use the battery\n\t\telif b_charge > 0 and s[i] == 1:\n\t\t\tb_charge -= 1\n\t\t\ti += 1\n\t\t# if the battery and accumulator are both full\n\t\t# and no charge can be gained\n\t\t# the robot can't move forward\n\t\telse:\n\t\t\tbreak\n\t\t# increase the max distance\n\t\tmax_dist += 1\n\treturn max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n    return i\n\nn, b, a, d = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s, d))\n", "#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"]
2022-04-23 16:29:06.090415 size on output set 4
