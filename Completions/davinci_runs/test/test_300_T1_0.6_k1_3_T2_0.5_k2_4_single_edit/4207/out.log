2022-04-18 03:23:55.785055 """
You are given two arrays $a$ and $b$, each contains $n$ integers.

You want to create a new array $c$ as follows: choose some real (i.e. not necessarily integer) number $d$, and then for every $i \in [1, n]$ let $c_i := d \cdot a_i + b_i$.

Your goal is to maximize the number of zeroes in array $c$. What is the largest possible answer, if you choose $d$ optimally?


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in both arrays.

The second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($-10^9 \le a_i \le 10^9$).

The third line contains $n$ integers $b_1$, $b_2$, ..., $b_n$ ($-10^9 \le b_i \le 10^9$).


-----Output-----

Print one integer — the maximum number of zeroes in array $c$, if you choose $d$ optimally.


-----Examples-----
Input
5
1 2 3 4 5
2 4 7 11 3

Output
2

Input
3
13 37 39
1 2 3

Output
2

Input
4
0 0 0 0
1 2 3 4

Output
0

Input
3
1 2 -1
-6 -12 6

Output
3



-----Note-----

In the first example, we may choose $d = -2$.

In the second example, we may choose $d = -\frac{1}{13}$.

In the third example, we cannot obtain any zero in array $c$, no matter which $d$ we choose.

In the fourth example, we may choose $d = 6$.
"""
2022-04-18 03:23:55.785077 --------------------------
2022-04-18 03:24:32.931250 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def solve(self, a, b):\n        # Write your code here\n        pass\n\n\ns = Solution()\nassert s.solve([1, 2, 3, 4, 5], [2, 4, 7, 11, 3]) == 2\nassert s.solve([13, 37, 39], [1, 2, 3]) == 2\nassert s.solve([0, 0, 0, 0], [1, 2, 3, 4]) == 0\nassert s.solve([1, 2, -1], [-6, -12, 6]) == 3"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport random\n\n#for i in range(100):\n#    n = random.randint(1, 200000)\n#    a = [random.randint(-1000000000, 1000000000) for i in range(n)]\n#    b = [random.randint(-1000000000, 1000000000) for i in range(n)]\n#    print(n)\n#    print(' '.join(map(str, a)))\n#    print(' '.join(map(str, b)))\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef solve(n, a, b):\n    a.sort()\n    b.sort()\n    #print(a)\n    #print(b)\n    if a[0] == 0:\n        return n\n    if a[0] < 0:\n        a = list(map(lambda x: -x, a))\n        b = list(map(lambda x: -x, b))\n    if b[0] > 0:\n        return 0\n    if b[n-1] < 0:\n        return n\n    if a[0] == a[n-1]:\n        if a[0] == 0:\n            return n\n        return n - (b[-1] - b[0]) // a[0]\n    return max(n - (b[-1] - b[0]) // a[0], n - (b[-1] - b[0]) // a[n-1])\n\nprint(solve(n, a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, a, b):\n    pos = []\n    neg = []\n    zero = []\n    for i in range(n):\n        if b[i] > 0:\n            pos.append(b[i] / a[i])\n        elif b[i] < 0:\n            neg.append(b[i] / a[i])\n        else:\n            zero.append(i)\n\n    pos.sort()\n    neg.sort()\n\n    res = 0\n    for i in range(len(pos)):\n        for j in range(len(neg)):\n            if pos[i] > neg[j]:\n                res += 1\n            else:\n                break\n\n    if len(zero) > 0:\n        res += len(zero) - 1\n\n    return res\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650252235,
  "id": "cmpl-4yCHT5exF8mLrZIwCc0IjYQO3HU0V",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:24:32.931564 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def solve(self, a, b):\n        # Write your code here\n        pass\n\n\ns = Solution()\nassert s.solve([1, 2, 3, 4, 5], [2, 4, 7, 11, 3]) == 2\nassert s.solve([13, 37, 39], [1, 2, 3]) == 2\nassert s.solve([0, 0, 0, 0], [1, 2, 3, 4]) == 0\nassert s.solve([1, 2, -1], [-6, -12, 6]) == 3"
}
2022-04-18 03:24:32.931613 REASON stop
2022-04-18 03:24:32.952897 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport random\n\n#for i in range(100):\n#    n = random.randint(1, 200000)\n#    a = [random.randint(-1000000000, 1000000000) for i in range(n)]\n#    b = [random.randint(-1000000000, 1000000000) for i in range(n)]\n#    print(n)\n#    print(' '.join(map(str, a)))\n#    print(' '.join(map(str, b)))\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef solve(n, a, b):\n    a.sort()\n    b.sort()\n    #print(a)\n    #print(b)\n    if a[0] == 0:\n        return n\n    if a[0] < 0:\n        a = list(map(lambda x: -x, a))\n        b = list(map(lambda x: -x, b))\n    if b[0] > 0:\n        return 0\n    if b[n-1] < 0:\n        return n\n    if a[0] == a[n-1]:\n        if a[0] == 0:\n            return n\n        return n - (b[-1] - b[0]) // a[0]\n    return max(n - (b[-1] - b[0]) // a[0], n - (b[-1] - b[0]) // a[n-1])\n\nprint(solve(n, a, b))"
}
2022-04-18 03:24:32.952982 REASON stop
2022-04-18 03:24:32.953417 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, a, b):\n    pos = []\n    neg = []\n    zero = []\n    for i in range(n):\n        if b[i] > 0:\n            pos.append(b[i] / a[i])\n        elif b[i] < 0:\n            neg.append(b[i] / a[i])\n        else:\n            zero.append(i)\n\n    pos.sort()\n    neg.sort()\n\n    res = 0\n    for i in range(len(pos)):\n        for j in range(len(neg)):\n            if pos[i] > neg[j]:\n                res += 1\n            else:\n                break\n\n    if len(zero) > 0:\n        res += len(zero) - 1\n\n    return res\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 03:24:32.953469 REASON stop
