["#!/usr/bin/env python\n\nf = open('test.txt', 'w')\nf.write('Hello Python!')\nf.close()\n", "\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k - 1] == l[k]:\n        print(-1)\n        return\n    print(l[k - 1])\n\n\nif __name__ == '__main__':\n    main()\n", "#!python3\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\nprint(a[k - 1] if k else - 1)\n", "\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na.sort()\n\nprint(a[k - 1] if k else -1 if n else 0)\n", "#!/usr/bin/env python3\n\nimport time\nimport os\n\n\ndef main():\n    content = '\u5317\u4eac\u6b22\u8fce\u4f60\u4e3a\u4f60\u5f00\u5929\u8f9f\u5730\u2026\u2026\u2026\u2026'\n    while True:\n        # \u6e05\u7406\u5c4f\u5e55\u4e0a\u7684\u8f93\u51fa\n        os.system('clear')  # os.system('cls')\n        print(content)\n        # \u4f11\u7720200\u6beb\u79d2\n        time.sleep(0.2)\n        content = content[1:] + content[0]\n\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tprint \"Hello, World!\"\n\tprint \"Argument count: \", len(sys.argv)\n\tprint \"Arguments: \", sys.argv\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(l[0])\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\na = sorted(map(int, input().split()))\n\nprint(a[k - 1] if k else -1)\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k] or k > n:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nfrom bisect import bisect_left\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))[:k]\nprint(a[-1] if k else -1)\n", "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"file.go\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tstat, err := file.Stat()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\tbs := make([]byte, stat.Size())\n\t_, err = file.Read(bs)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\tstr := string(bs)\n\tfmt.Println(str)\n}\n", "\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na.sort()\n\nprint(a[k - 1] if k else -1)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Aug  6 22:01:35 2018\n\n@author: niketan\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('C:/Users/niketan/Desktop/Machine Learning/ML_Projects/Linear Regression/Salary_Data.csv')\nx = df.iloc[:, :-1].values\ny = df.iloc[:, 1].values\n\nfrom sklearn.cross_validation import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1/3, random_state=0)\n\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(x_train, y_train)\n\ny_pred = regressor.predict(x_test)\n\nplt.scatter(x_train, y_train, color='red')\nplt.plot(x_train, regressor.predict(x_train), color='blue')\nplt.title('Salary vs Experience')\nplt.xlabel('Experience')\nplt.ylabel('Salary')\nplt.show()\n\nplt.scatter(x_test, y_test, color='red')\nplt.plot(x_train, regressor.predict(x_train), color='blue')\nplt.title('Salary vs Experience')\nplt.xlabel('Experience')\nplt.ylabel('Salary')\nplt.show()\n", "<!DOCTYPE html>\n<html>\n<head>\n\t<title>test</title>\n</head>\n<body>\n\n</body>\n</html>\n", "print(\"Hello World\")\n", "\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\nimport re\n\ndef main():\n    path = sys.argv[1]\n    files = os.listdir(path)\n\n    for file in files:\n        file_path = os.path.join(path, file)\n        if os.path.isfile(file_path):\n            f = open(file_path, 'r')\n            content = f.read()\n            f.close()\n\n            f = open(file_path, 'w')\n            content = re.sub(r'\\s*(<\\/?(?:html|body|img|table|tr|td|a|br|p|span|ul|li|div|meta|link|title)>)\\s*', r'\\1', content)\n            content = re.sub(r'\\s+', ' ', content)\n            f.write(content)\n            f.close()\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\nvar path = require('path');\n\nvar file = \"./file.txt\";\n\nfs.readFile(file, 'utf8', function(err, data) {\n  if (err) throw err;\n  console.log('OK: ' + file);\n  console.log(data)\n});\n\nconsole.log('This is after the read call');\n"]