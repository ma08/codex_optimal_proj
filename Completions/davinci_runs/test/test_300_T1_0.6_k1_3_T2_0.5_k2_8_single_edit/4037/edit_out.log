2022-04-23 21:07:59.355422 num operations 1
2022-04-23 21:07:59.355440 size on input set 1
2022-04-23 21:07:59.355617 using api key kouti
2022-04-23 21:08:20.245454 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)  # if r[-1] == 0 else 0\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r, r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-2]:\n            r.append(r[-2])\n        else:\n            r.append(max(r[-2] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r - 1]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1] + 1:\n            r.append(r[-1] + 1)\n        else:\n            r.append(max(r[-1] - b + 1, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/python3\n\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split()) #read first line as int and split\n    r = [r]\n    for line in sys.stdin: #read every line as int and split\n        a, b = map(int, line.split())\n        if a > r[-1]: #if a is greater than r (remaining)\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0)) #subtract b from r\n    print(len(r) - 1) #print last value\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r] * n\n    for line in sys.stdin:\n        a, b = map(int, line.split()) # a is the time of the next event, b is the cost\n        r[a-1] = max(r[a-1] - b, 0)\n    print(sum(r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for l in sys.stdin:\n        a, b = map(int, l.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]  # \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:  # \u0435\u0441\u043b\u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n            r.append(r[-1])  # \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043a\u0443\u043f\u0438\u043b\u0438\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650748079,
  "object": "edit"
}
2022-04-23 21:08:20.245731 fix syntax errors 8 ['\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)  # if r[-1] == 0 else 0\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r, r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-2]:\n            r.append(r[-2])\n        else:\n            r.append(max(r[-2] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r - 1]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1] + 1:\n            r.append(r[-1] + 1)\n        else:\n            r.append(max(r[-1] - b + 1, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/python3\n\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split()) #read first line as int and split\n    r = [r]\n    for line in sys.stdin: #read every line as int and split\n        a, b = map(int, line.split())\n        if a > r[-1]: #if a is greater than r (remaining)\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0)) #subtract b from r\n    print(len(r) - 1) #print last value\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r] * n\n    for line in sys.stdin:\n        a, b = map(int, line.split()) # a is the time of the next event, b is the cost\n        r[a-1] = max(r[a-1] - b, 0)\n    print(sum(r))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for l in sys.stdin:\n        a, b = map(int, l.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]  # изначально количество ресурсов\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:  # если стоимость покупки больше чем количество ресурсов\n            r.append(r[-1])  # ничего не купили\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 21:08:20.245787 size on output set 8
2022-04-23 21:08:20.245799 num operations 1
2022-04-23 21:08:20.245805 size on input set 1
2022-04-23 21:08:20.245955 using api key derek
2022-04-23 21:08:37.732682 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:  # noqa: E501\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []  # noqa: F821\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None: \n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1]) \n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects): \n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n        projects.append((int(project_rating), int(rating_change))) \n\n    projects.sort(key=lambda x: x[1]) \n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__': \n    main()\n"
    },
    {
      "index": 5,
      "text": "\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]):\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main():\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650748100,
  "object": "edit"
}
2022-04-23 21:08:37.733115 fix syntax errors 8 ["\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:  # noqa: E501\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []  # noqa: F821\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None: \n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1]) \n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects): \n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n        projects.append((int(project_rating), int(rating_change))) \n\n    projects.sort(key=lambda x: x[1]) \n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__': \n    main()\n", "\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]):\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main():\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 21:08:37.733192 size on output set 7
2022-04-23 21:08:37.733205 num operations 1
2022-04-23 21:08:37.733211 size on input set 1
2022-04-23 21:08:37.733342 using api key jaanu
2022-04-23 21:09:12.896676 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i - 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 2,
      "text": "# https://codeforces.com/contest/1206/submission/59559046\n\n\nn, r = map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i in range(n):\n    r -= p[i][0]\n    if r < 0:\n        print(i)\n        exit()\n    r += p[i][1]\nprint(n)\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n"
    },
    {
      "index": 3,
      "text": "\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 4,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i - 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast:\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution:\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact:\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 6,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i, j)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 7,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    }
  ],
  "created": 1650748117,
  "object": "edit"
}
2022-04-23 21:09:12.897218 fix syntax errors 8 ["\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i - 1)\n        break\n    r += j\nelse:\n    print(n)\n", '# https://codeforces.com/contest/1206/submission/59559046\n\n\nn, r = map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i in range(n):\n    r -= p[i][0]\n    if r < 0:\n        print(i)\n        exit()\n    r += p[i][1]\nprint(n)\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n', "\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i - 1)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast:\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution:\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact:\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i, j)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n"]
2022-04-23 21:09:12.897355 size on output set 6
