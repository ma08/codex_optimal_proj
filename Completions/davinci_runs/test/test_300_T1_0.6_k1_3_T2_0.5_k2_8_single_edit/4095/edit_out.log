2022-04-23 21:58:21.050320 num operations 1
2022-04-23 21:58:21.050339 size on input set 1
2022-04-23 21:58:21.050508 using api key kouti
2022-04-23 21:58:38.478878 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\n\n\nprint(findPairs(arr,n,m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if m == arr[(i+j)//2] and i!=j:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef findPairs(arr, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if m == arr[(i + j)//2]:\n                count += 1\n    return count\n\n\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\nprint(findPairs(arr, n, m))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if m == (arr[i]+arr[j])//2:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n"
    },
    {
      "index": 4,
      "text": "\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef findPairs(arr, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if m == arr[(i + j) // 2]:\n                count += 1\n    return count\n\n\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\nprint(findPairs(arr, n, m))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if m == arr[i]+arr[j]:\n                count +=1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n"
    },
    {
      "index": 7,
      "text": "\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n"
    }
  ],
  "created": 1650751101,
  "object": "edit"
}
2022-04-23 21:58:38.479185 fix syntax errors 8 ['\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\n\n\nprint(findPairs(arr,n,m))\n', '\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if m == arr[(i+j)//2] and i!=j:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n', '\n\ndef findPairs(arr, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if m == arr[(i + j)//2]:\n                count += 1\n    return count\n\n\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\nprint(findPairs(arr, n, m))\n', '\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if m == (arr[i]+arr[j])//2:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n', '\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n', '\n\ndef findPairs(arr, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if m == arr[(i + j) // 2]:\n                count += 1\n    return count\n\n\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\nprint(findPairs(arr, n, m))\n', '\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if m == arr[i]+arr[j]:\n                count +=1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n', '\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))\n']
2022-04-23 21:58:38.479223 size on output set 7
2022-04-23 21:58:38.479233 num operations 1
2022-04-23 21:58:38.479238 size on input set 1
2022-04-23 21:58:38.479359 using api key jaanu
2022-04-23 21:58:54.161683 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n            elif p[j - 1] == m:\n                dp[j] += dp[i]\n        for j in range(i + 1, n + 1):\n            if p[i] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, m, p):\n    dp = [0] * (n)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[j] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve(n, m, p, x):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m and j - i <= x:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]  # \u5ea7\u5e2d\n    x = int(input())  # \u9023\u7d9a\u3059\u308b\u5ea7\u5e2d\u6570\n\n    print(solve(n, m, p, x))\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n, m, p):\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n"
    }
  ],
  "created": 1650751118,
  "object": "edit"
}
2022-04-23 21:58:54.162096 fix syntax errors 8 ['\n\n\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n            elif p[j - 1] == m:\n                dp[j] += dp[i]\n        for j in range(i + 1, n + 1):\n            if p[i] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\ndef solve(n, m, p):\n    dp = [0] * (n)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[j] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\n\ndef solve(n, m, p, x):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m and j - i <= x:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]  # 座席\n    x = int(input())  # 連続する座席数\n\n    print(solve(n, m, p, x))\n', '\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\n\ndef solve(n, m, p):\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n', '\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == "__main__":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))\n']
2022-04-23 21:58:54.162151 size on output set 6
2022-04-23 21:58:54.162163 num operations 1
2022-04-23 21:58:54.162169 size on input set 1
2022-04-23 21:58:54.162328 using api key derek
2022-04-23 21:59:15.366936 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1] * current_element\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().strip().split())\n    p = list(map(int, input().strip().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(permutation):\n    n = len(permutation)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = permutation[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    permutation = list(map(int, input().split()))\n    print(count_pairs(permutation))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n"
    },
    {
      "index": 3,
      "text": "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * \\\n        same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1] % m\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p) % m)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_index = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_index - 1]) * same_elements_count[sorted_list_index + 1]\n        sorted_list[sorted_list_index] = sorted_list_index - same_elements_count[sorted_list_index - 1]\n\n        same_elements_count[sorted_list_index - 1] += 1\n        same_elements_count[sorted_list_index + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n    return pairs\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650751134,
  "object": "edit"
}
2022-04-23 21:59:15.367346 fix syntax errors 8 ["\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1] * current_element\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().strip().split())\n    p = list(map(int, input().strip().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(permutation):\n    n = len(permutation)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = permutation[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    permutation = list(map(int, input().split()))\n    print(count_pairs(permutation))\n\nif __name__ == '__main__':\n    main()\n", '\n\n', "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * \\\n        same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n", "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1] % m\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p) % m)\n\nif __name__ == '__main__':\n    main()\n", "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_index = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_index - 1]) * same_elements_count[sorted_list_index + 1]\n        sorted_list[sorted_list_index] = sorted_list_index - same_elements_count[sorted_list_index - 1]\n\n        same_elements_count[sorted_list_index - 1] += 1\n        same_elements_count[sorted_list_index + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n", "\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n    return pairs\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 21:59:15.367421 size on output set 8
