2022-04-24 00:29:52.084416 num operations 1
2022-04-24 00:29:52.084435 size on input set 1
2022-04-24 00:29:52.084574 using api key soukgp
2022-04-24 00:30:10.585020 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "from itertools import product\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n    k = [0]\n    for i, j in product(range(n), range(n)):\n        if i == j:\n            continue\n        for c in range(m):\n            k.append(abs(a[i][c] - a[j][c]))\n\n    print(max(k))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    mx = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                mx = max(mx, abs(a[j][c] - a[j + 1][c]))\n\n    print(mx)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650760192,
  "object": "edit"
}
2022-04-24 00:30:10.585325 fix syntax errors 8 ['\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import product\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n    k = [0]\n    for i, j in product(range(n), range(n)):\n        if i == j:\n            continue\n        for c in range(m):\n            k.append(abs(a[i][c] - a[j][c]))\n\n    print(max(k))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    mx = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                mx = max(mx, abs(a[j][c] - a[j + 1][c]))\n\n    print(mx)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 00:30:10.585372 size on output set 4
2022-04-24 00:30:10.585383 num operations 1
2022-04-24 00:30:10.585389 size on input set 1
2022-04-24 00:30:10.585517 using api key derek
2022-04-24 00:30:37.822902 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import ceil\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n\n\n#print(ceil(10/2))\n"
    },
    {
      "index": 1,
      "text": "#\n\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 2,
      "text": "from sys import stdin\n#n,m = [int(x) for x in stdin.readline().split()]\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in stdin.readline().split()]\n    #row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 3,
      "text": "from collections import defaultdict\nfrom heapq import *\n \ndef dijkstra(edges, f, t):\n    g = defaultdict(list)\n    for l,r,c in edges:\n        g[l].append((c,r))\n \n    q, seen = [(0,f,())], set()\n    while q:\n        (cost,v1,path) = heappop(q)\n        if v1 not in seen:\n            seen.add(v1)\n            path = (v1, path)\n            if v1 == t: return (cost, path)\n \n            for c, v2 in g.get(v1, ()):\n                if v2 not in seen:\n                    heappush(q, (cost+c, v2, path))\n \n    return float(\"inf\")\n \nif __name__ == \"__main__\":\n    edges = [\n        (\"A\", \"B\", 7),\n        (\"A\", \"D\", 5),\n        (\"B\", \"C\", 8),\n        (\"B\", \"D\", 9),\n        (\"B\", \"E\", 7),\n        (\"C\", \"E\", 5),\n        (\"D\", \"E\", 15),\n        (\"D\", \"F\", 6),\n        (\"E\", \"F\", 8),\n        (\"E\", \"G\", 9),\n        (\"F\", \"G\", 11)\n    ]\n \n    print \"=== Dijkstra ===\"\n    print edges\n    print \"A -> E:\"\n    print dijkstra(edges, \"A\", \"E\")\n    print \"F -> G:\"\n    print dijkstra(edges, \"F\", \"G\")\n"
    },
    {
      "index": 4,
      "text": "\n\nn,m = [int(x) for x in raw_input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in raw_input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint r\n"
    },
    {
      "index": 5,
      "text": "\n\nn, m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n"
    },
    {
      "index": 6,
      "text": "\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 7,
      "text": "\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    }
  ],
  "created": 1650760210,
  "object": "edit"
}
2022-04-24 00:30:37.823335 fix syntax errors 8 ['\nfrom math import ceil\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n\n\n#print(ceil(10/2))\n', '#\n\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', 'from sys import stdin\n#n,m = [int(x) for x in stdin.readline().split()]\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in stdin.readline().split()]\n    #row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', 'from collections import defaultdict\nfrom heapq import *\n \ndef dijkstra(edges, f, t):\n    g = defaultdict(list)\n    for l,r,c in edges:\n        g[l].append((c,r))\n \n    q, seen = [(0,f,())], set()\n    while q:\n        (cost,v1,path) = heappop(q)\n        if v1 not in seen:\n            seen.add(v1)\n            path = (v1, path)\n            if v1 == t: return (cost, path)\n \n            for c, v2 in g.get(v1, ()):\n                if v2 not in seen:\n                    heappush(q, (cost+c, v2, path))\n \n    return float("inf")\n \nif __name__ == "__main__":\n    edges = [\n        ("A", "B", 7),\n        ("A", "D", 5),\n        ("B", "C", 8),\n        ("B", "D", 9),\n        ("B", "E", 7),\n        ("C", "E", 5),\n        ("D", "E", 15),\n        ("D", "F", 6),\n        ("E", "F", 8),\n        ("E", "G", 9),\n        ("F", "G", 11)\n    ]\n \n    print "=== Dijkstra ==="\n    print edges\n    print "A -> E:"\n    print dijkstra(edges, "A", "E")\n    print "F -> G:"\n    print dijkstra(edges, "F", "G")\n', '\n\nn,m = [int(x) for x in raw_input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in raw_input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint r\n', '\n\nn, m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n']
2022-04-24 00:30:37.823396 size on output set 8
2022-04-24 00:30:37.823409 num operations 1
2022-04-24 00:30:37.823430 size on input set 1
2022-04-24 00:30:37.823553 using api key derek
2022-04-24 00:30:58.590620 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_diff(self):\n        max_diff = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_diff:\n                    max_diff = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_diff:\n                    max_diff = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_diff\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_diff:\", matrix_traversal.find_max_diff())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = [int(x) for x in f.readline().split(sep=' ')]\n        matrix = []\n        for i in range(n):\n            matrix.append([int(x) for x in f.readline().split()])\n        matrix_traversal = MatrixTraversal(n, m, matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f\"n:{self.n}, m:{self.m}, matrix:{self.matrix}\"\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = [int(x) for x in f.readline().split(sep=' ')]\n        matrix = []\n        for i in range(n):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(n, m, matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f\"n:{self.n}, m:{self.m}, matrix:{self.matrix}\"\n\n    def _print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n                if j-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i][j-1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j-1])\n                if j+1 < self.m and abs(self.matrix[i][j] - self.matrix[i][j+1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j+1])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    }
  ],
  "created": 1650760237,
  "object": "edit"
}
2022-04-24 00:30:58.590984 fix syntax errors 8 ['\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_diff(self):\n        max_diff = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_diff:\n                    max_diff = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_diff:\n                    max_diff = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_diff\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_diff:", matrix_traversal.find_max_diff())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = [int(x) for x in f.readline().split(sep=\' \')]\n        matrix = []\n        for i in range(n):\n            matrix.append([int(x) for x in f.readline().split()])\n        matrix_traversal = MatrixTraversal(n, m, matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f"n:{self.n}, m:{self.m}, matrix:{self.matrix}"\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = [int(x) for x in f.readline().split(sep=\' \')]\n        matrix = []\n        for i in range(n):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(n, m, matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return f"n:{self.n}, m:{self.m}, matrix:{self.matrix}"\n\n    def _print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n                if j-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i][j-1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j-1])\n                if j+1 < self.m and abs(self.matrix[i][j] - self.matrix[i][j+1]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i][j+1])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n']
2022-04-24 00:30:58.591084 size on output set 5
