["import sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) * k\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nK = M * N\nS = sum(A)\nx = K - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\n# S = sum(Ai)\n# x = M * N - S + x\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S + x\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\nimport sys\n\ndef solve(n, k, m, scores, total_score):\n    required_final_score = (n * m) - total_score\n    if required_final_score < 0: return -1\n    if required_final_score > k: return -1\n    return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n\nn = int(input())\nlist = []\nfor i in range(n):\n    a, b = map(int, sys.stdin.readline().split())\n    list.append((a, b))\n\nlist.sort(key=lambda x: x[1])\n\nend = 0\nfor i in range(n):\n    if end <= list[i][0]:\n        end = list[i][1]\n    else:\n        print(0)\n        exit()\nprint(1)\n", "import sys\n\n# Get the number of subjects, the maximum score, and the minimum score\nN, K, M = map(int, sys.stdin.readline().strip().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().strip().split()))\n\n# The lowest possible score is the minimum score, since we only need to find a score that meets or exceeds the minimum.\n# The highest possible score is the maximum score.\nlowest_score = M - 1\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score + 1.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the minimum score, we know that we can achieve the minimum by scoring middle_score + 1 on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the minimum score, we know that we cannot achieve the minimum by scoring middle_score + 1 on the final subject.\n    else:\n        # Set the lowest possible score to the middle score + 1.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the minimum.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score + 1 is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score + 1)\n", "\n# S = sum(Ai) + x\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "# coding: utf-8\n\n\n# S = sum(Ai)\n# S + x = M * N\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\n\nif M * N - S < 0:\n    print(-1)\nelif M * N - S > K:\n    print(-1)\nelse:\n    print(M * N - S)\n", "\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\n\n# S = sum(Ai) + x\n# x = M * N - S\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = n * m - sum(scores)\n    if required_final_score < 0 or required_final_score > k:\n        return -1 \n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams.\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores.\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) + 1\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n", "\n\n# M * N = S + x\n# x = M * N - S = (M - S / N) * N\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = (M * N - S) // N\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) \n    if required_final_score < 0: \n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) / len(scores)\n    if required_final_score < 0:\n        return 0\n    else:\n        return int(required_final_score)\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"]