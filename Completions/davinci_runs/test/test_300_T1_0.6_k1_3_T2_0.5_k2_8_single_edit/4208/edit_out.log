2022-04-23 23:47:23.518048 num operations 1
2022-04-23 23:47:23.518063 size on input set 1
2022-04-23 23:47:23.518245 using api key sunu
2022-04-23 23:48:18.101116 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don't match\n# for i in range(n):\n#     if left[i] != \"?\" and right[i] != \"?\":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n"
    },
    {
      "index": 2,
      "text": "\n\n# # I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# # Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don't match\n# for i in range(n):\n#     if left[i] != \"?\" and right[i] != \"?\":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n\n\ndef get_change(m):\n    coins = 0\n\n    while m > 0:\n        if m >= 10:\n            coins += 1\n            m -= 10\n        elif m >= 5:\n            coins += 1\n            m -= 5\n        else:\n            coins += 1\n            m -= 1\n\n    return coins\n\n\nif __name__ == '__main__':\n    m = int(input())\n    print(get_change(m))\n"
    },
    {
      "index": 3,
      "text": "\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\nprint(pairs)\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n"
    },
    {
      "index": 4,
      "text": "\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\nleft = input()\nright = input()\n\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i + 1, j + 1))\n\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i + 1 and pair[1] != i + 1]\n\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n"
    },
    {
      "index": 6,
      "text": "\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n"
    },
    {
      "index": 7,
      "text": "\n\n# # I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# # Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don't match\n# for i in range(n):\n#     if left[i] != \"?\" and right[i] != \"?\":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n"
    }
  ],
  "created": 1650757643,
  "object": "edit"
}
2022-04-23 23:48:18.101532 fix syntax errors 8 ['\n\n# I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don\'t match\n# for i in range(n):\n#     if left[i] != "?" and right[i] != "?":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n', '\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don\'t match\nfor i in range(n):\n    if left[i] != "?" and right[i] != "?":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n', '\n\n# # I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# # Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don\'t match\n# for i in range(n):\n#     if left[i] != "?" and right[i] != "?":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n\n\ndef get_change(m):\n    coins = 0\n\n    while m > 0:\n        if m >= 10:\n            coins += 1\n            m -= 10\n        elif m >= 5:\n            coins += 1\n            m -= 5\n        else:\n            coins += 1\n            m -= 1\n\n    return coins\n\n\nif __name__ == \'__main__\':\n    m = int(input())\n    print(get_change(m))\n', '\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don\'t match\nfor i in range(n):\n    if left[i] != "?" and right[i] != "?":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\nprint(pairs)\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n', '\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don\'t match\nfor i in range(n):\n    if left[i] != "?" and right[i] != "?":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\n\nn = int(input())\nleft = input()\nright = input()\n\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i + 1, j + 1))\n\nfor i in range(n):\n    if left[i] != "?" and right[i] != "?":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i + 1 and pair[1] != i + 1]\n\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n', '\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don\'t match\nfor i in range(n):\n    if left[i] != "?" and right[i] != "?":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])\n', '\n\n# # I/O\n# n = int(input())\n# left = input()\n# right = input()\n\n# # Solution\n\n# # Create a list of all possible left/right pairs\n# pairs = []\n# for i in range(n):\n#     for j in range(n):\n#         pairs.append((i+1, j+1))\n\n# # Filter out pairs where colors don\'t match\n# for i in range(n):\n#     if left[i] != "?" and right[i] != "?":\n#         if left[i] != right[i]:\n#             pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# # Filter out pairs where left boots repeat\n# left = [pair[0] for pair in pairs]\n# dups = [i for i in left if left.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[0] not in dups]\n\n# # Filter out pairs where right boots repeat\n# right = [pair[1] for pair in pairs]\n# dups = [i for i in right if right.count(i) > 1]\n# pairs = [pair for pair in pairs if pair[1] not in dups]\n\n# # Print pairs\n# print(len(pairs))\n# for pair in pairs:\n#     print(pair[0], pair[1])\n']
2022-04-23 23:48:18.101635 size on output set 8
2022-04-23 23:48:18.101655 num operations 1
2022-04-23 23:48:18.101661 size on input set 1
2022-04-23 23:48:18.101795 using api key derek
2022-04-23 23:48:18.180093 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-23 23:48:19.681926 using api key derek
2022-04-23 23:48:19.754172 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-23 23:48:22.757518 using api key derek
2022-04-23 23:48:22.830220 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-23 23:48:28.843644 using api key soukgp
2022-04-23 23:48:28.924837 in retry 3 12.0 <class 'Exception'>, Retrying in 12 seconds...
2022-04-23 23:48:40.937204 using api key sunu
2022-04-23 23:48:41.012314 in retry 2 24.0 <class 'Exception'>, Retrying in 24 seconds...
2022-04-23 23:49:05.036123 using api key kouti
