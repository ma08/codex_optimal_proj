2022-04-24 00:22:25.299784 num operations 1
2022-04-24 00:22:25.299807 size on input set 1
2022-04-24 00:22:25.299954 using api key kouti
2022-04-24 00:22:43.090445 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, sl):\n    if s[i] == t[i]:\n        count = count + 1\n\n# print out result\nprint(sl-count)\n"
    },
    {
      "index": 2,
      "text": "\n\n# get input\ns = input(\"\")\nt = input(\"\")\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] == t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 4,
      "text": "\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "\n\n# get input\ns = raw_input()\nt = raw_input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "\n\n# get input as array\nl = input().split(' ')\n\n# get length of array\nl_len = len(l)\n\n# loop through array\nfor i in range(0, l_len):\n    # get the number\n    num = int(l[i])\n    # check if it's divisible by 2\n    if num % 2 == 0:\n        # print the number\n        print(num)\n\n# print out result\nprint(l)\n"
    },
    {
      "index": 7,
      "text": "\n# Get input\ns = input()\nt = input()\n\n# Get length of both strings\nsl = len(s)\ntl = len(t)\n\n# Initialize count\ncount = 0\n\n# Loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    }
  ],
  "created": 1650759745,
  "object": "edit"
}
2022-04-24 00:22:43.090861 fix syntax errors 8 ['\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, sl):\n    if s[i] == t[i]:\n        count = count + 1\n\n# print out result\nprint(sl-count)\n', '\n\n# get input\ns = input("")\nt = input("")\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] == t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n\n# get input\ns = raw_input()\nt = raw_input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', "\n\n# get input as array\nl = input().split(' ')\n\n# get length of array\nl_len = len(l)\n\n# loop through array\nfor i in range(0, l_len):\n    # get the number\n    num = int(l[i])\n    # check if it's divisible by 2\n    if num % 2 == 0:\n        # print the number\n        print(num)\n\n# print out result\nprint(l)\n", '\n# Get input\ns = input()\nt = input()\n\n# Get length of both strings\nsl = len(s)\ntl = len(t)\n\n# Initialize count\ncount = 0\n\n# Loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n']
2022-04-24 00:22:43.090915 size on output set 8
2022-04-24 00:22:43.090927 num operations 1
2022-04-24 00:22:43.090932 size on input set 1
2022-04-24 00:22:43.091066 using api key jaanu
2022-04-24 00:22:59.363713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\nt = input()\n\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input(\"Enter string: \")\nt = input(\"Enter substring: \")\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t: #s[i:i+len(t)] is a slice of s from i to i + len(t)\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            print(count)\n            sys.exit()\n        else:\n            count += 1\n    print(-1)\nmain(s, t)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main())\n"
    },
    {
      "index": 5,
      "text": "\n\ninput_s = input()\ninput_t = input()\n\ndef main(input_s, input_t):\n    count = 0\n\n    for i in range(len(input_s)):\n        if input_s[i:i+len(input_t)] == input_t:\n            return count\n        else:\n            count += 1\n\nprint(main(input_s, input_t))\n"
    },
    {
      "index": 6,
      "text": "\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 7,
      "text": "\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    }
  ],
  "created": 1650759763,
  "object": "edit"
}
2022-04-24 00:22:59.364084 fix syntax errors 8 ['\n\ns = input()\nt = input()\n\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n', '\n\ns = input("Enter string: ")\nt = input("Enter substring: ")\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t: #s[i:i+len(t)] is a slice of s from i to i + len(t)\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n', '\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n', 'import sys\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            print(count)\n            sys.exit()\n        else:\n            count += 1\n    print(-1)\nmain(s, t)\n', '\n\ndef main():\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main())\n', '\n\ninput_s = input()\ninput_t = input()\n\ndef main(input_s, input_t):\n    count = 0\n\n    for i in range(len(input_s)):\n        if input_s[i:i+len(input_t)] == input_t:\n            return count\n        else:\n            count += 1\n\nprint(main(input_s, input_t))\n', '\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n', '\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n']
2022-04-24 00:22:59.364252 size on output set 8
2022-04-24 00:22:59.364270 num operations 1
2022-04-24 00:22:59.364286 size on input set 1
2022-04-24 00:22:59.364514 using api key jaanu
2022-04-24 00:23:21.649772 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n\n\n\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 1,
      "text": "\n#\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 2,
      "text": "\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen]) \n"
    },
    {
      "index": 3,
      "text": "\n\nS = input()\nT = input()\n\nslen = len(S)\ntlen = len(T)\n\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 4,
      "text": "\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 5,
      "text": "\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 6,
      "text": "\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 7,
      "text": "\n\n# Get input\nS = input()\nT = input()\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(len(S) + 1)] for j in range(len(T) + 1)]\n\n# Populate the first row\nfor i in range(1, len(S) + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, len(T) + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, len(T) + 1):\n    for i in range(1, len(S) + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    }
  ],
  "created": 1650759779,
  "object": "edit"
}
2022-04-24 00:23:21.650066 fix syntax errors 8 ['# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n\n\n\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n#\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen]) \n', '\n\nS = input()\nT = input()\n\nslen = len(S)\ntlen = len(T)\n\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n\n# Get input\nS = input()\nT = input()\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(len(S) + 1)] for j in range(len(T) + 1)]\n\n# Populate the first row\nfor i in range(1, len(S) + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, len(T) + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, len(T) + 1):\n    for i in range(1, len(S) + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n']
2022-04-24 00:23:21.650240 size on output set 6
