["\n\nn = int(input())\na = list(map(int, input().split()))\n# a.sort()\n\n\n\ndef power_of_two(m):\n    if m == 0:\n        return False\n    else:\n        return m & (m-1) == 0\n\n\n\ndef solve(n, a):\n    l = 0\n    r = n - 1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l] + a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\n\nprint(solve(n, a))\n", "import os\nimport json\n\nfile = open('testfile.txt','w')\nfile.write('Hello World')\nfile.close()\n\nfile = open('testfile.txt','r')\nprint(file.read())\nfile.close()\n\nfile = open('testfile.txt','a')\nfile.write('Hello World')\nfile.close()\n\nfile = open('testfile.txt','r')\nprint(file.read())\nfile.close()\n\nos.remove('testfile.txt')\n\nx = 'Hello World'\nprint(x[0:5])\n\nx = 'Hello World'\nprint(x[6:])\n\nx = 'Hello World'\nprint(x[-5:])\n\nx = 'Hello World'\nprint(x[0:5:2])\n\nx = 'Hello World'\nprint(x[::-1])\n\nx = 'Hello World'\nprint(x.upper())\n\nx = 'Hello World'\nprint(x.lower())\n\nx = 'Hello World'\nprint(x.split())\n\nx = 'Hello World'\nprint(x.split('W'))\n\nx = 'Hello World'\nprint(x.split('o'))\n\nx = 'Hello World'\nprint(x.split('o',1))\n\nx = 'Hello World'\nprint(x.split('o',2))\n\nx = 'Hello World'\nprint(x.split('o',3))\n\nx = 'Hello World'\nprint(len(x))\n\nx = 'Hello World'\nprint(x.count('l'))\n\nx = 'Hello World'\nprint(x.count('l',0,5))\n\nx = 'Hello World'\nprint(x.count('l',5,10))\n\nx = 'Hello World'\nprint(x.count('l',5,-1))\n\nx = 'Hello World'\nprint(x.count('l',-5,-1))\n\nx = 'Hello World'\nprint(x.count('l',-5,5))\n\nx = 'Hello World'\nprint(x.count('l',-5,-5))\n\nx = 'Hello World'\nprint(x.count('l',-5,-6))\n\nx = 'Hello World'\nprint(x.count('l',-10,-6))\n\nx = 'Hello World'\nprint(x.count('l',-10,-5))\n\nx = 'Hello World'\nprint(x.count('l',-10,-4))\n\nx = 'Hello World'\nprint(x.count('l',-10,-3))\n\nx = 'Hello World'\nprint(x.count('l',-10,-2))\n\nx = 'Hello World'\nprint(x.count('l',-10,-1))\n\nx = 'Hello World'\nprint(x.count('l',-10,0))\n\nx = 'Hello World'\nprint(x.count('l',-10,1))\n\nx = 'Hello World'\nprint(x.count('l',-10,2))\n\nx = 'Hello World'\nprint(x.count('l',-10,3))\n\nx = 'Hello World'\nprint(x.count('l',-10,4))\n\nx = 'Hello World'\nprint(x.count('l',-10,5))\n\nx = 'Hello World'\nprint(x.count('l',-10,6))\n\nx = 'Hello World'\nprint(x.count('l',-10,7))\n\nx = 'Hello World'\nprint(x.count('l',-10,8))\n\nx = 'Hello World'\nprint(x.count('l',-10,9))\n\nx = 'Hello World'\nprint(x.count('l',-10,10))\n\nx = 'Hello World'\nprint(x.count('l',-10,11))\n\nx = 'Hello World'\nprint(x.count('l',-10,12))\n\nx = 'Hello World'\nprint(x.count('l',-10,13))\n\nx = 'Hello World'\nprint(x.count('l',-10,14))\n\nx = 'Hello World'\nprint(x.count('l',-10,15))\n\nx = 'Hello World'\nprint(x.count('l',-10,16))\n\nx = 'Hello World'\nprint(x.count('l',-10,17))\n\nx = 'Hello World'\nprint(x.count('l',-10,18))\n\nx = 'Hello World'\nprint(x.count('l',-10,19))\n\nx = 'Hello World'\nprint(x.count('l',-10,20))\n\nx = 'Hello World'\nprint(x.count('l',-10,21))\n\nx = 'Hello World'\nprint(x.count('l',-10,22))\n\nx = 'Hello World'\nprint(x.count('l',-10,23))\n\nx = 'Hello World'\nprint(x.count('l',-10,24))\n\nx = 'Hello World'\nprint(x.count('l',-10,25))\n\nx = 'Hello World'\nprint(x.count('l',-10,26))\n\nx = 'Hello World'\nprint(x.count('l',-10,27))\n\nx = 'Hello World'\nprint(x.count('l',-10,28))\n\nx = 'Hello World'\nprint(x.count('l',-10,29))\n\nx = 'Hello World'\nprint(x.count('l',-10,30))\n\nx = 'Hello World'\nprint(x.count('l',-10,31))\n\nx = 'Hello World'\nprint(x.count('l',-10,32))\n\nx = 'Hello World'\nprint(x.count('l',-10,33))\n\nx = 'Hello World'\nprint(x.count('l',-10,34))\n\nx = 'Hello World'\nprint(x.count('l',-10,35))\n\nx = 'Hello World'\nprint(x.count('l',-10,36))\n\nx = 'Hello World'\nprint(x.count('l',-10,37))\n\nx = 'Hello World'\nprint(x.count('l',-10,38))\n\nx = 'Hello World'\nprint(x.count('l',-10,39))\n\nx = 'Hello World'\nprint(x.count('l',-10,40))\n\nx = 'Hello World'\nprint(x.count('l',-10,41))\n\nx = 'Hello World'\nprint(x.count('l',-10,42))\n\nx = 'Hello World'\nprint(x.count('l',-10,43))\n\nx = 'Hello World'\nprint(x.count('l',-10,44))\n\nx = 'Hello World'\nprint(x.count('l',-10,45))\n\nx = 'Hello World'\nprint(x.count('l',-10,46))\n\nx = 'Hello World'\nprint(x.count('l',-10,47))\n\nx = 'Hello World'\nprint(x.count('l',-10,48))\n", "function file(name) {\n\treturn {\n\t\tname: name,\n\t\ttype: \"file\",\n\t\tcontents: function(contents) {\n\t\t\tthis.contents = contents;\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nfunction directory(name) {\n\treturn {\n\t\tname: name,\n\t\ttype: \"directory\",\n\t\tcontents: [],\n\t\tadd: function(file) {\n\t\t\tthis.contents.push(file);\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nfunction tree(root) {\n\treturn {\n\t\troot: root,\n\t\tadd: function(file) {\n\t\t\tthis.root.add(file);\n\t\t\treturn this;\n\t\t}\n\t}\n}\n\n// Test\n\nvar root = directory(\"root\");\nvar file1 = file(\"file1\");\nfile1.contents(\"file1 contents\");\nvar dir1 = directory(\"dir1\");\nvar file2 = file(\"file2\");\nfile2.contents(\"file2 contents\");\n\nvar tree1 = tree(root);\ntree1.add(file1).add(dir1).add(file2);\n\nconsole.log(tree1);\n\nvar file3 = file(\"file3\");\nfile3.contents(\"file3 contents\");\ndir1.add(file3);\n\nconsole.log(tree1);\n", "\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n    print(n-max(c.values()))\n", "const fs = require('fs');\n\nconst file = fs.readFileSync(process.argv[2]);\nconst str = file.toString();\n\nconst lines = str.split('\\n').length - 1;\n\nconsole.log(lines);\n", "// Your JS goes here\n\n\nfor (var i = 0; i < 81; i++) {\n  var div = document.createElement('div');\n  div.style.width = \"11.1%\";\n  div.style.float = \"left\";\n  div.style.paddingBottom = \"11.1%\";\n  if (i % 2 === 0) {\n    div.style.backgroundColor = \"red\";\n  }\n  else {\n    div.style.backgroundColor = \"black\";\n  }\n  document.body.appendChild(div);\n}\n", "#!/usr/bin/python3\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c.values()))\n\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c.values()))\n", "\nn = int(input())\nl = list(map(int, input().split()))\n\nif n == 1 and l[0] != 1:\n    print(1)\nelif n == 1 and l[0] == 1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n\n    print(n-max(c.values()))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n", "const fs = require('fs');\n\nconst readFile = (file) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst writeFile = (file, data) => {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(file, data, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nmodule.exports = {\n  readFile,\n  writeFile\n};\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    print(n-max(l))\n", "n = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c.values()))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na = [0] + a\na.sort()\n\n\ndef solve(n, a):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n\n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1]\n        if a[i-1] > a[i-2]:\n            dp[i] += 1\n\n    return dp[n]\n\nprint(solve(n, a))\n", "const fs = require('fs');\n\n\nconst writeFile = (path, content) => {\n    fs.writeFile(path, content, (err) => {\n        if (err) throw err;\n        console.log('The file has been saved!');\n    });\n}\n\nconst readFile = (path, callback) => {\n    fs.readFile(path, 'utf8', (err, data) => {\n        if (err) throw err;\n        callback(data);\n    });\n}\n\nconst readFileSync = (path) => {\n    return fs.readFileSync(path, 'utf8');\n}\n\nconst readDir = (path, callback) => {\n    fs.readdir(path, (err, files) => {\n        if (err) throw err;\n        callback(files);\n    });\n}\n\nconst readDirSync = (path) => {\n    return fs.readdirSync(path);\n}\n\nconst mkdir = (path) => {\n    fs.mkdir(path, (err) => {\n        if (err) throw err;\n        console.log('Directory created!');\n    });\n}\n\nconst mkdirSync = (path) => {\n    fs.mkdirSync(path);\n}\n\nconst unlink = (path) => {\n    fs.unlink(path, (err) => {\n        if (err) throw err;\n        console.log('File deleted!');\n    });\n}\n\nconst unlinkSync = (path) => {\n    fs.unlinkSync(path);\n}\n\nconst exists = (path) => {\n    return fs.existsSync(path);\n}\n\nconst rmdir = (path) => {\n    fs.rmdir(path, (err) => {\n        if (err) throw err;\n        console.log('Directory deleted!');\n    });\n}\n\nconst rmdirSync = (path) => {\n    fs.rmdirSync(path);\n}\n\n\n\n\nmodule.exports = {\n    writeFile: writeFile,\n    readFile: readFile,\n    readFileSync: readFileSync,\n    readDir: readDir,\n    readDirSync: readDirSync,\n    mkdir: mkdir,\n    mkdirSync: mkdirSync,\n    unlink: unlink,\n    unlinkSync: unlinkSync,\n    exists: exists,\n    rmdir: rmdir,\n    rmdirSync: rmdirSync\n}\n", "//file.js\n\nvar fs = require('fs');\n\nfs.readFile('file.js', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\nfs.writeFile('message.txt', 'Hello Node.js', function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n", "\nimport math\n\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\n\ndef power_of_two(x):\n    return math.ceil(math.log2(x)) == math.floor(math.log2(x))\n\n\ndef solve(n, a):\n    left = 0\n    right = n-1\n    res = n\n\n    while left < right:\n        if power_of_two(a[left]+a[right]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n\ndef power_of_two(n):\n    return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n - 1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l] + a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\n\nprint(solve(n, a))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    print(n-max(c.values()))\n", "\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    # c1 = []\n    # for i in range(len(c)):\n    #     c1.append(c[i])\n\n\n    print(n-max(c.values()))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n"]