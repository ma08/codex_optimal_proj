["#!/bin/bash\n\nif [ $# -eq 0 ]; then\n\techo \"Usage: $0 <filename>\"\nelse\n\tif [ -e $1 ]; then\n\t\tif [ -d $1 ]; then\n\t\t\techo \"$1 is a directory\"\n\t\telif [ -f $1 ]; then\n\t\t\techo \"$1 is a regular file\"\n\t\telse\n\t\t\techo \"$1 is something else\"\n\t\tfi\n\telse\n\t\techo \"File $1 does not exist\"\n\tfi\nfi\n", "\n\ndef main():\n    wall_len = int(input())  # \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0435\u043d\u044b\n    wall_cond = list(map(int, input().split()))  # \u0432\u044b\u0441\u043e\u0442\u0430 \u0441\u0442\u0435\u043d\u044b\n    max_h = max(wall_cond)  # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430\n    min_h = min(wall_cond)  # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430\n    if max_h - min_h > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <ctype.h>\n\n//#define BUFSIZE 1024\n\nint main(int argc, char *argv[])\n{\n\t\n\tchar *input;\n\tchar *output;\n\tchar *buffer;\n\tint fdIn;\n\tint fdOut;\n\tint size;\n\tint i;\n\n\tif(argc != 3)\n\t{\n\t\tprintf(\"Error: Incorrect number of arguments.\\n\");\n\t\texit(1);\n\t}\n\telse\n\t{\n\t\tinput = argv[1];\n\t\toutput = argv[2];\n\t}\n\n\tfdIn = open(input, O_RDONLY);\n\n\tif(fdIn < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tfdOut = open(output, O_WRONLY | O_CREAT, 0666);\n\n\tif(fdOut < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tsize = lseek(fdIn, 0, SEEK_END);\n\n\tif(size < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tlseek(fdIn, 0, SEEK_SET);\n\n\tbuffer = (char *)malloc(sizeof(char) * size);\n\n\tif(read(fdIn, buffer, size) < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tfor(i = 0; i < size; i++)\n\t{\n\t\tbuffer[i] = toupper(buffer[i]);\n\t}\n\n\tif(write(fdOut, buffer, size) < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tfree(buffer);\n\n\tclose(fdIn);\n\tclose(fdOut);\n\n\treturn 0;\n}\n", "\n\nif __name__ == \"__main__\":\n    pass\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 0:\n        print('NO')\n    else:\n        if a[0] % 2 == 0 or a[-1] % 2 == 0:\n            print('NO')\n        else:\n            print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "var fs = require('fs');\n\nfs.readFile('input.txt', function (err, data) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"Asynchronous read: \" + data.toString());\n});\n\nvar data = fs.readFileSync('input.txt');\nconsole.log(\"Synchronous read: \" + data.toString());\n\nconsole.log(\"Program Ended\");\n\nfs.open('input.txt', 'r+', function (err, fd) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"File opened successfully!\");\n});\n\nconsole.log(\"Going to get file info!\");\nfs.stat('input.txt', function (err, stats) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(stats);\n    console.log(\"Got file info successfully!\");\n\n    // Check file type\n    console.log(\"isFile ? \" + stats.isFile());\n    console.log(\"isDirectory ? \" + stats.isDirectory());\n});\n\nconsole.log(\"Going to write into existing file\");\nfs.writeFile('input.txt', 'Simply Easy Learning!', function (err) {\n    if (err) {\n        return console.error(err);\n    }\n\n    console.log(\"Data written successfully!\");\n    console.log(\"Let's read newly written data\");\n    fs.readFile('input.txt', function (err, data) {\n        if (err) {\n            return console.error(err);\n        }\n        console.log(\"Asynchronous read: \" + data.toString());\n    });\n});\n\nconsole.log(\"Going to delete an existing file\");\nfs.unlink('input.txt', function (err) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"File deleted successfully!\");\n});\n\nconsole.log(\"Going to create directory /tmp/test\");\nfs.mkdir('/tmp/test', function (err) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"Directory created successfully!\");\n});\n\nconsole.log(\"Going to read directory /tmp\");\nfs.readdir(\"/tmp/\", function (err, files) {\n    if (err) {\n        return console.error(err);\n    }\n    files.forEach(function (file) {\n        console.log(file);\n    });\n});\n\nconsole.log(\"Going to delete directory /tmp/test\");\nfs.rmdir(\"/tmp/test\", function (err) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"Going to read directory /tmp\");\n\n    fs.readdir(\"/tmp/\", function (err, files) {\n        if (err) {\n            return console.error(err);\n        }\n        files.forEach(function (file) {\n            console.log(file);\n        });\n    });\n});\n", "#!/bin/bash\n\n# Bash script to check for syntax errors in all .sh files in a directory\n#\n# Usage:\n# ./file.sh [directory]\n#\n# Example:\n# ./file.sh /path/to/bash/scripts\n\nif [ -z \"$1\" ]\nthen\n    echo \"Usage: $0 [directory]\"\n    exit 1\nfi\n\nfor file in $(find $1 -name '*.sh')\ndo\n    shellcheck -x $file\ndone\n", "function readFile(fileName) {\n    const fs = require('fs');\n    const fileContents = fs.readFileSync(fileName);\n    console.log(fileContents.toString());\n}\n\nfunction writeFile(fileName, data) {\n    const fs = require('fs');\n    fs.writeFileSync(fileName, data, 'utf8');\n}\n\nfunction appendFile(fileName, data) {\n    const fs = require('fs');\n    fs.appendFileSync(fileName, data, 'utf8');\n}\n\nfunction main() {\n    const fileName = './file.txt';\n    const data = 'Hello, World!';\n    writeFile(fileName, data);\n    appendFile(fileName, data);\n    readFile(fileName);\n}\n\nmain();\n", "\n\ndef solver(n, a):\n    if n == 1:\n        return \"YES\"\n    height = a[0]\n    for i in range(1, n):\n        if a[i] < height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef main():\n    print('NO')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if max_h - min_h > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n\n\nint main(int argc, char** argv) {\n\n  // check if the number of arguments is correct\n  if (argc != 2) {\n    printf(\"Wrong number of arguments\\n\");\n    return -1;\n  }\n  \n  // open the file\n  FILE* fd = fopen(argv[1], \"r\");\n  \n  // check if the file exists\n  if (fd == NULL) {\n    printf(\"File does not exist\\n\");\n    return -1;\n  }\n  \n  // check if the file is empty\n  if (fseek(fd, 0, SEEK_END) == 0) {\n    printf(\"File is empty\\n\");\n    return -1;\n  }\n  \n  // get the size of the file\n  fseek(fd, 0, SEEK_END);\n  size_t file_size = ftell(fd);\n  rewind(fd);\n  \n  // allocate memory for the buffer\n  char* buffer = malloc(file_size * sizeof(char));\n  \n  // read the file\n  size_t result = fread(buffer, sizeof(char), file_size, fd);\n  \n  // check if the file was read correctly\n  if (result != file_size) {\n    printf(\"Error reading the file\\n\");\n    return -1;\n  }\n  \n  // print the content of the file\n  printf(\"%s\", buffer);\n  \n  // close the file\n  fclose(fd);\n  \n  return 0;\n}\n", "\n\ndef solver(n):\n    if n % 2 == 0:\n        return \"White\"\n    else:\n        return \"Black\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(solver(n))\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_h = max(a)\n    min_h = min(a)\n    if max_h - min_h > 1: print('NO')\n    else:\n        print('YES') \n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if min_h == max_h:\n        if max_h - min_h > 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "#include \"file.h\"\n\nvoid read_file(char* file_name, char* buffer) {\n    FILE* fp = fopen(file_name, \"r\");\n    if(fp == NULL) {\n        printf(\"Error opening file\\n\");\n        exit(1);\n    }\n\n    fseek(fp, 0, SEEK_END);\n    long fsize = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n\n    fread(buffer, fsize, 1, fp);\n    fclose(fp);\n}\n\nvoid write_file(char* file_name, char* buffer) {\n    FILE* fp = fopen(file_name, \"w\");\n    if(fp == NULL) {\n        printf(\"Error opening file\\n\");\n        exit(1);\n    }\n\n    fwrite(buffer, sizeof(char), strlen(buffer), fp);\n    fclose(fp);\n}\n", "function File() {\n\n}\n\nFile.prototype.createFile = function(fileName, fileContent, callback) {\n\tvar fs = require('fs');\n\tfs.writeFile(fileName, fileContent, function(err) {\n\t\tif (err) {\n\t\t\treturn console.log(err);\n\t\t}\n\n\t\tconsole.log(\"The file was saved!\");\n\t});\n};\n\nFile.prototype.readFile = function(fileName, callback) {\n\n};\n\nFile.prototype.appendFile = function(fileName, fileContent, callback) {\n\tvar fs = require('fs');\n\tfs.appendFile(fileName, fileContent, function(err) {\n\t\tif (err) {\n\t\t\treturn console.log(err);\n\t\t}\n\n\t\tconsole.log(\"The file was saved!\");\n\t});\n};\n\nFile.prototype.deleteFile = function(fileName, callback) {\n\n};\n\nFile.prototype.readDir = function(dirName, callback) {\n\n};\n\nFile.prototype.createDir = function(dirName, callback) {\n\n};\n\nFile.prototype.deleteDir = function(dirName, callback) {\n\n};\n\nFile.prototype.rename = function(oldName, newName, callback) {\n\n};\n\nFile.prototype.search = function(fileName, callback) {\n\n};\n\nmodule.exports = File;\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i] + 1)\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split())) \n    print(solver(n, a))\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height-1, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i] + 1)\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i] - 1]\n        if i > 0 and a[i] - a[i - 1] == 1:\n            ans += c[a[i - 1] - 1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"]