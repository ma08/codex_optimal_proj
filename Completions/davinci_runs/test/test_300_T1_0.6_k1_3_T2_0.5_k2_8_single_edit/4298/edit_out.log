2022-04-24 01:17:27.237697 num operations 1
2022-04-24 01:17:27.237717 size on input set 1
2022-04-24 01:17:27.237845 using api key jaanu
2022-04-24 01:17:40.972311 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split()) \n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650763047,
  "object": "edit"
}
2022-04-24 01:17:40.972643 fix syntax errors 8 ['\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))) \n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split()) \n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 01:17:40.972677 size on output set 7
2022-04-24 01:17:40.972688 num operations 1
2022-04-24 01:17:40.972694 size on input set 1
2022-04-24 01:17:40.972875 using api key sunu
2022-04-24 01:17:54.964905 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    Inspectors = []\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i <= D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N + 1):\n        if i < D or i > N - D - 1:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nInspectors = []\n\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i-D)\n            Inspectors.append(i+D)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i-D)\n            Inspectors.append(i+D)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650763061,
  "object": "edit"
}
2022-04-24 01:17:54.965229 fix syntax errors 8 ['\n\ndef main():\n    Inspectors = []\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i <= D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N + 1):\n        if i < D or i > N - D - 1:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i-D)\n            Inspectors.append(i+D)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i-D)\n            Inspectors.append(i+D)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 01:17:54.965348 size on output set 7
2022-04-24 01:17:54.965362 num operations 1
2022-04-24 01:17:54.965384 size on input set 1
2022-04-24 01:17:54.965517 using api key derek
2022-04-24 01:18:14.283792 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n"
    },
    {
      "index": 2,
      "text": "\n\n# n = int(input().split()[0])  # 6\n# d = int(input().split()[1])  # 2\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1  # 6\n    return num_inspectors\n\nassert main(6, 2) == 2\nassert main(15, 4) == 4\nassert main(20, 5) == 4\nassert main(1, 1) == 1\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\n\nprint(main(n, d))\nassert (main(1, 1) == 1)\n"
    },
    {
      "index": 6,
      "text": "\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nif __name__ == \"__main__\":\n    print(main())\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    }
  ],
  "created": 1650763075,
  "object": "edit"
}
2022-04-24 01:18:14.284217 fix syntax errors 8 ['\n\ndef main():\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n', '\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n', '\n\n# n = int(input().split()[0])  # 6\n# d = int(input().split()[1])  # 2\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1  # 6\n    return num_inspectors\n\nassert main(6, 2) == 2\nassert main(15, 4) == 4\nassert main(20, 5) == 4\nassert main(1, 1) == 1\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\n\nprint(main(n, d))\nassert (main(1, 1) == 1)\n', '\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nif __name__ == "__main__":\n    print(main())\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n']
2022-04-24 01:18:14.284270 size on output set 7
