2022-04-23 20:34:11.858862 num operations 1
2022-04-23 20:34:11.858893 size on input set 1
2022-04-23 20:34:11.859040 using api key jaanu
2022-04-23 20:34:38.250493 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n    # n, m, k = map(int, input().split())\n    # matrix = []\n    # for _ in range(n):\n    #     matrix.append(list(map(int, input().split())))\n    # dp = [[0 for i in range(k)] for j in range(m + 1)]\n    # for i in range(1, m + 1):\n    #     for j in range(k):\n    #         for r in range(n):\n    #             dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n    #             dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    # print(max(dp[m][0], dp[m][k // 2]))\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k + 1)] for j in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(k + 1):\n            for r in range(1, n + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r - 1][i - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][(j - matrix[r - 1][i - 1]) % k] + matrix[r - 1][i - 1])\n    print(dp[m][k // 2])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2] if k % 2 == 0 else -1))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():  \n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(a + b + c - max(a, b, c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1): \n        for j in range(k):\n            for r in range(n): \n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1]) \n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1]) \n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]) if k % 2 == 0 else dp[m][0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k],\n                                                        dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650746053,
  "object": "edit"
}
2022-04-23 20:34:38.250789 fix syntax errors 8 ['\n\n    # n, m, k = map(int, input().split())\n    # matrix = []\n    # for _ in range(n):\n    #     matrix.append(list(map(int, input().split())))\n    # dp = [[0 for i in range(k)] for j in range(m + 1)]\n    # for i in range(1, m + 1):\n    #     for j in range(k):\n    #         for r in range(n):\n    #             dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n    #             dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    # print(max(dp[m][0], dp[m][k // 2]))\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k + 1)] for j in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(k + 1):\n            for r in range(1, n + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r - 1][i - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][(j - matrix[r - 1][i - 1]) % k] + matrix[r - 1][i - 1])\n    print(dp[m][k // 2])\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2] if k % 2 == 0 else -1))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():  \n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(a + b + c - max(a, b, c))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1): \n        for j in range(k):\n            for r in range(n): \n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1]) \n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1]) \n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]) if k % 2 == 0 else dp[m][0])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k],\n                                                        dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for _ in range(k)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 20:34:38.250931 size on output set 8
2022-04-23 20:34:38.250946 num operations 1
2022-04-23 20:34:38.250951 size on input set 1
2022-04-23 20:34:38.251082 using api key kouti
2022-04-23 20:34:54.716683 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 2,
      "text": "\n\n"
    },
    {
      "index": 3,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n            if j == 1:\n                dp[i][j] = max(dp[i][j], a[i - 1][j - 1])\n            else:\n                dp[i][j] = max(dp[i][j], (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k)\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 4,
      "text": "\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 5,
      "text": "\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 6,
      "text": "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    },
    {
      "index": 7,
      "text": "\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"
    }
  ],
  "created": 1650746078,
  "object": "edit"
}
2022-04-23 20:34:54.717073 fix syntax errors 8 ['n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', 'n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\n\n', 'n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n            if j == 1:\n                dp[i][j] = max(dp[i][j], a[i - 1][j - 1])\n            else:\n                dp[i][j] = max(dp[i][j], (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k)\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', 'n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n', '\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n']
2022-04-23 20:34:54.717126 size on output set 4
2022-04-23 20:34:54.717139 num operations 1
2022-04-23 20:34:54.717146 size on input set 1
2022-04-23 20:34:54.717291 using api key kouti
2022-04-23 20:35:15.882494 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen, remainder is j\n    dp = [[[0] * (k + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for r in range(k + 1):\n                if j <= m // 2:\n                    dp[i][j][r] = max(dp[i][j - 1][r], dp[i - 1][j][r], dp[i - 1][j - 1][(A[i - 1][j - 1] + r) % k] + A[i - 1][j - 1])\n                else:\n                    dp[i][j][r] = dp[i][j - 1][r]\n\n    return dp[n][m // 2][0] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "def solve(n, m, k, A):\n    pass\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650746094,
  "object": "edit"
}
2022-04-23 20:35:15.882855 fix syntax errors 8 ["\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen, remainder is j\n    dp = [[[0] * (k + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for r in range(k + 1):\n                if j <= m // 2:\n                    dp[i][j][r] = max(dp[i][j - 1][r], dp[i - 1][j][r], dp[i - 1][j - 1][(A[i - 1][j - 1] + r) % k] + A[i - 1][j - 1])\n                else:\n                    dp[i][j][r] = dp[i][j - 1][r]\n\n    return dp[n][m // 2][0] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "def solve(n, m, k, A):\n    pass\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 20:35:15.882929 size on output set 4
