2022-04-23 22:15:46.039683 num operations 1
2022-04-23 22:15:46.039703 size on input set 1
2022-04-23 22:15:46.039853 using api key sunu
2022-04-23 22:16:05.504093 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N = int(input())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = [int(i) for i in input().split()]\nans = 0\nprev = -1\nfor i in range(N):\n    if prev == A[i] - 1:\n        ans += C[A[i] - 1]\n    ans += B[A[i] - 1]\n    prev = A[i] - 1\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\nx_sum = 0\ny_sum = 0\nh_sum = 0\n\nfor i in range(n):\n    x_sum += arr[i][0]\n    y_sum += arr[i][1]\n    h_sum += arr[i][2]\n\ncx = x_sum - arr[0][0] - arr[1][0] - arr[2][0]\ncy = y_sum - arr[0][1] - arr[1][1] - arr[2][1]\nh = h_sum - arr[0][2] - arr[1][2] - arr[2][2]\n\nprint(cx, cy, h)\n"
    },
    {
      "index": 2,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1]) / 2\nprint(cx, cy, h)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - (abs(cx - arr[0][0]) + abs(cy - arr[0][1]))\nprint(cx, cy, h)\n"
    },
    {
      "index": 4,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\nx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ny = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(x - arr[0][0]) - abs(y - arr[0][1])\nprint(x, y, h)\n"
    },
    {
      "index": 5,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]  # list comprehension\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2  # x\u5ea7\u6a19\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2  # y\u5ea7\u6a19\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])  # \u9ad8\u3055\nprint(cx, cy, h)\n"
    },
    {
      "index": 7,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(4)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])//2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])//2\nh = arr[0][2] - abs(cx-arr[0][0]) - abs(cy-arr[0][1])\nprint(cx, cy, h)\n"
    }
  ],
  "created": 1650752146,
  "object": "edit"
}
2022-04-23 22:16:05.504451 fix syntax errors 8 ['N = int(input())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = [int(i) for i in input().split()]\nans = 0\nprev = -1\nfor i in range(N):\n    if prev == A[i] - 1:\n        ans += C[A[i] - 1]\n    ans += B[A[i] - 1]\n    prev = A[i] - 1\nprint(ans)\n', '\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\nx_sum = 0\ny_sum = 0\nh_sum = 0\n\nfor i in range(n):\n    x_sum += arr[i][0]\n    y_sum += arr[i][1]\n    h_sum += arr[i][2]\n\ncx = x_sum - arr[0][0] - arr[1][0] - arr[2][0]\ncy = y_sum - arr[0][1] - arr[1][1] - arr[2][1]\nh = h_sum - arr[0][2] - arr[1][2] - arr[2][2]\n\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1]) / 2\nprint(cx, cy, h)\n', '\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - (abs(cx - arr[0][0]) + abs(cy - arr[0][1]))\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\nx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ny = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(x - arr[0][0]) - abs(y - arr[0][1])\nprint(x, y, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n', '\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]  # list comprehension\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2  # x座標\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2  # y座標\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])  # 高さ\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(4)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])//2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])//2\nh = arr[0][2] - abs(cx-arr[0][0]) - abs(cy-arr[0][1])\nprint(cx, cy, h)\n']
2022-04-23 22:16:05.504522 size on output set 8
2022-04-23 22:16:05.504534 num operations 1
2022-04-23 22:16:05.504540 size on input set 1
2022-04-23 22:16:05.504673 using api key jaanu
2022-04-23 22:16:31.815968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.iteritems():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 1,
      "text": "# coding: utf-8\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():  # noqa: E741\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split(' '))\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())  # \u5165\u529b\u3055\u308c\u308b\u5024\ncoord_dict = {}  # \u8f9e\u66f8\u578b\u5909\u6570\n# \u5165\u529b\u5024\uff11\u884c\u3092\u8981\u7d20\u306b\u6301\u3064\u914d\u5217\u3067\u53d6\u5f97\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    }
  ],
  "created": 1650752165,
  "object": "edit"
}
2022-04-23 22:16:31.816360 fix syntax errors 8 ['# -*- coding: utf-8 -*-\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.iteritems():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '# coding: utf-8\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():  # noqa: E741\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', "\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split(' '))\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n", '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\n\nn = int(input())  # 入力される値\ncoord_dict = {}  # 辞書型変数\n# 入力値１行を要素に持つ配列で取得\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n']
2022-04-23 22:16:31.816433 size on output set 6
2022-04-23 22:16:31.816445 num operations 1
2022-04-23 22:16:31.816450 size on input set 1
2022-04-23 22:16:31.816597 using api key soukgp
2022-04-23 22:16:58.844965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        points.append((x, y, h))\n\n\n    # C_X, C_Y is on the line that connects points with altitude 10^9\n    # C_X, C_Y is on the line that connects points with altitude 10^9-1\n    # C_X, C_Y is on the line that connects points with altitude 10^9-2\n    # ...\n    # C_X, C_Y is on the line that connects points with altitude 1\n    # C_X, C_Y is on the line that connects points with altitude 0\n\n    for cx in range(101):\n        for cy in range(101):\n            h = 0\n            for p in points:\n                h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n            if h > 0:\n                print(cx, cy, h)\n                exit()\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9.\n# C_X, C_Y is on the line that connects points with altitude 10^9-1.\n# C_X, C_Y is on the line that connects points with altitude 10^9-2.\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1.\n# C_X, C_Y is on the line that connects points with altitude 0.\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())  # x, y, h\n    points.append((x, y, h))  # x, y, h\n\n# C_X, C_Y is on the line that connects points with altitude 10^9, 10^9-1, ..., 1, 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 6,
      "text": "n = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    }
  ],
  "created": 1650752191,
  "object": "edit"
}
2022-04-23 22:16:58.845456 fix syntax errors 8 ['\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', 'def main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        points.append((x, y, h))\n\n\n    # C_X, C_Y is on the line that connects points with altitude 10^9\n    # C_X, C_Y is on the line that connects points with altitude 10^9-1\n    # C_X, C_Y is on the line that connects points with altitude 10^9-2\n    # ...\n    # C_X, C_Y is on the line that connects points with altitude 1\n    # C_X, C_Y is on the line that connects points with altitude 0\n\n    for cx in range(101):\n        for cy in range(101):\n            h = 0\n            for p in points:\n                h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n            if h > 0:\n                print(cx, cy, h)\n                exit()\n', '\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9.\n# C_X, C_Y is on the line that connects points with altitude 10^9-1.\n# C_X, C_Y is on the line that connects points with altitude 10^9-2.\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1.\n# C_X, C_Y is on the line that connects points with altitude 0.\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())  # x, y, h\n    points.append((x, y, h))  # x, y, h\n\n# C_X, C_Y is on the line that connects points with altitude 10^9, 10^9-1, ..., 1, 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', 'n = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n']
2022-04-23 22:16:58.845568 size on output set 6
