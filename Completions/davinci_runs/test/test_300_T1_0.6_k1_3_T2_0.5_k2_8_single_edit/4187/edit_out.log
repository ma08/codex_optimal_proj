2022-04-23 23:26:59.664963 num operations 1
2022-04-23 23:26:59.664984 size on input set 1
2022-04-23 23:26:59.665118 using api key sunu
2022-04-23 23:27:14.497994 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\na.append(0)\na.append(0)\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])  # add the first element to the end\na.append(a[1])  # add the second element to the end\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1 and a[i + 1] == 1:\n        best = max(best, length)\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    }
  ],
  "created": 1650756419,
  "object": "edit"
}
2022-04-23 23:27:14.498346 fix syntax errors 8 ['\n\nn = int(input())\na = list(map(int, input().split()))\na.append(0)\na.append(0)\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])  # add the first element to the end\na.append(a[1])  # add the second element to the end\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1 and a[i + 1] == 1:\n        best = max(best, length)\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n']
2022-04-23 23:27:14.498386 size on output set 5
2022-04-23 23:27:14.498412 num operations 1
2022-04-23 23:27:14.498443 size on input set 1
2022-04-23 23:27:14.498563 using api key kouti
2022-04-23 23:27:38.926987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 1,
      "text": "def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 2,
      "text": "\n#\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 3,
      "text": "\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 4,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 5,
      "text": "\n# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 6,
      "text": "\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef usage():\n\tprint(\"Usage:\")\n\tprint(\"python3 file.py <file.in>\")\n\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tif len(sys.argv) != 2:\n\t\tusage()\n\t\tsys.exit(1)\n\n\tin_file = open(sys.argv[1], \"r\")\n\n\tn = int(in_file.readline()) # number of hours per day\n\ta = list(map(int, in_file.readline().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    }
  ],
  "created": 1650756434,
  "object": "edit"
}
2022-04-23 23:27:38.927385 fix syntax errors 8 ['def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', 'def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\n#\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\n# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\n\nimport sys\n\ndef usage():\n\tprint("Usage:")\n\tprint("python3 file.py <file.in>")\n\n\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tif len(sys.argv) != 2:\n\t\tusage()\n\t\tsys.exit(1)\n\n\tin_file = open(sys.argv[1], "r")\n\n\tn = int(in_file.readline()) # number of hours per day\n\ta = list(map(int, in_file.readline().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n']
2022-04-23 23:27:38.927461 size on output set 7
2022-04-23 23:27:38.927473 num operations 1
2022-04-23 23:27:38.927479 size on input set 1
2022-04-23 23:27:38.927611 using api key soukgp
2022-04-23 23:27:58.242990 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 1\n\nwhile i < n:\n    while j < n and a[j] == 0:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 4,
      "text": "\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    i, j, m = 0, 0, 0\n\n    while i < n:\n        while j < n and a[j] == 1:\n            j += 1\n        m = max(m, j - i)\n        i = j + 1\n        j = i\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\nprint(n)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 7,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    }
  ],
  "created": 1650756458,
  "object": "edit"
}
2022-04-23 23:27:58.243336 fix syntax errors 8 ['\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 1\n\nwhile i < n:\n    while j < n and a[j] == 0:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    i, j, m = 0, 0, 0\n\n    while i < n:\n        while j < n and a[j] == 1:\n            j += 1\n        m = max(m, j - i)\n        i = j + 1\n        j = i\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\nprint(n)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', 'n = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n']
2022-04-23 23:27:58.243385 size on output set 7
