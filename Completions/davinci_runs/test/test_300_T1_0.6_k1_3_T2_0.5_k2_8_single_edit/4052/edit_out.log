2022-04-23 21:21:47.707289 num operations 1
2022-04-23 21:21:47.707308 size on input set 1
2022-04-23 21:21:47.707555 using api key derek
2022-04-23 21:22:03.764900 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n        i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\n\ndef is_valid(char, target):\n    return char == target\n\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            i += 1\n        else:\n            i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            i = j\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n            i = j\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return \"\".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n        i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(\" \".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650748907,
  "object": "edit"
}
2022-04-23 21:22:03.765287 fix syntax errors 8 ['\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n        i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\n\ndef is_valid(char, target):\n    return char == target\n\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            i += 1\n        else:\n            i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            i = j\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n            i = j\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef swap(char, i, j):\n    char = list(char)\n    char[i], char[j] = char[j], char[i]\n    return "".join(char)\n\ndef is_valid(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] == target[i]:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            else:\n                char = swap(char, i, j)\n                i += 1\n    return True\n\ndef can_swap(char, target):\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n        i += 1\n    return True\n\ndef get_swap(char, target):\n    swaps = []\n    i = 0\n    while i < len(char):\n        if char[i] != target[i]:\n            j = i + 1\n            while j < len(char) and char[j] != target[i]:\n                j += 1\n            if j == len(char):\n                return False\n            swaps.append(j)\n            char = swap(char, i, j)\n        i += 1\n    return swaps\n\ndef main():\n    n = int(input())\n    char = input()\n    target = input()\n    if can_swap(char, target):\n        swaps = get_swap(char, target)\n        print(len(swaps))\n        print(" ".join(map(str, swaps)))\n    else:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 21:22:03.765405 size on output set 7
2022-04-23 21:22:03.765427 num operations 1
2022-04-23 21:22:03.765432 size on input set 1
2022-04-23 21:22:03.765551 using api key sunu
2022-04-23 21:22:26.845743 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] \n\ndef diff(s, t):\n    for i in range(n): \n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0 \n\n    i = diff(s, t)\n    if i == n: \n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]: \n        j += 1\n    if j < n and s[j] == t[j]: \n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]: \n        j += 1\n    if j < n: \n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else: \n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t: \n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]: \n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1: \n    print(-1)\nelse: \n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]: \n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t) \n        j = i + 1\n        while j < n and s[j] != t[j]: \n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:n]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1: ]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:len(s)]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\uff0c\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:n]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n"
    }
  ],
  "created": 1650748923,
  "object": "edit"
}
2022-04-23 21:22:26.846219 fix syntax errors 8 ['\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] \n\ndef diff(s, t):\n    for i in range(n): \n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0 \n\n    i = diff(s, t)\n    if i == n: \n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]: \n        j += 1\n    if j < n and s[j] == t[j]: \n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]: \n        j += 1\n    if j < n: \n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else: \n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t: \n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]: \n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1: \n    print(-1)\nelse: \n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]: \n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t) \n        j = i + 1\n        while j < n and s[j] != t[j]: \n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:n]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1: ]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:len(s)]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]，\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n', '\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:n]\n\ndef diff(s, t):\n    for i in range(n):\n        if s[i] != t[i]:\n            return i\n    return n\n\ndef solve(s, t):\n    if s == t:\n        return 0\n\n    i = diff(s, t)\n    if i == n:\n        return -1\n\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n\n    j = i + 1\n    while j < n and s[j] != t[j]:\n        j += 1\n    if j < n:\n        s = swap(s, i, j)\n        return 1 + solve(s, t)\n    else:\n        return -1\n\ndef solve_slow(s, t):\n    # print(s, t)\n    if s == t:\n        return 0\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i+1] != t[i+1]:\n            s = swap(s, i, i+1)\n            return 1 + solve(s, t)\n    return -1\n\nresult = solve(s, t)\nif result == -1:\n    print(-1)\nelse:\n    print(result)\n    i = diff(s, t)\n    j = i + 1\n    while j < n and s[j] == t[i]:\n        j += 1\n    if j < n and s[j] == t[j]:\n        print(i+1, j+1)\n    else:\n        print(i+1, j+1)\n        i = diff(s, t)\n        j = i + 1\n        while j < n and s[j] != t[j]:\n            j += 1\n        print(i+1, j+1)\n']
2022-04-23 21:22:26.846425 size on output set 6
2022-04-23 21:22:26.846439 num operations 1
2022-04-23 21:22:26.846444 size on input set 1
2022-04-23 21:22:26.846563 using api key derek
2022-04-23 21:22:45.825336 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i + 1\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i + 1\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(' '.join(map(str, ans)))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i])\n            if pos != -1:\n                while pos != 0:\n                    ans.append(pos+i-1)\n                    moves += 1\n                    s = swap(s, pos+i-1, pos+i)\n                    pos = s[i:].find(t[i])\n                s = swap(s, i, i+pos)\n            else:\n                return -1\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve(s, t):\n    n = len(s)\n    moves = []\n    ans = []\n    i = 0\n    while i < n-1:\n        if s[i] != t[i]:\n            pos = s.find(t[i], i+1)\n            moves.append(pos)\n            ans.append(pos-i)\n            s = swap(s, pos, pos-1)\n        i += 1\n    if s != t:\n        return -1\n    return len(moves), moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, indices, ans = res\n        print(moves)\n        print(*indices)\n        print(*ans)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans, sep=' ')\n"
    },
    {
      "index": 6,
      "text": "\n\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n - 1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos - 1)\n                moves += 1\n                s = swap(s, pos - 1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n"
    },
    {
      "index": 7,
      "text": "\n\ndef solve(s, t):\n    pass\n\n\nif __name__ == '__main__':\n    pass\n"
    }
  ],
  "created": 1650748946,
  "object": "edit"
}
2022-04-23 21:22:45.825620 fix syntax errors 8 ['\n', "\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i + 1\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i + 1\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(' '.join(map(str, ans)))\n", "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i])\n            if pos != -1:\n                while pos != 0:\n                    ans.append(pos+i-1)\n                    moves += 1\n                    s = swap(s, pos+i-1, pos+i)\n                    pos = s[i:].find(t[i])\n                s = swap(s, i, i+pos)\n            else:\n                return -1\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n", "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n", "\n\ndef solve(s, t):\n    n = len(s)\n    moves = []\n    ans = []\n    i = 0\n    while i < n-1:\n        if s[i] != t[i]:\n            pos = s.find(t[i], i+1)\n            moves.append(pos)\n            ans.append(pos-i)\n            s = swap(s, pos, pos-1)\n        i += 1\n    if s != t:\n        return -1\n    return len(moves), moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, indices, ans = res\n        print(moves)\n        print(*indices)\n        print(*ans)\n", "\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n-1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos-1)\n                moves += 1\n                s = swap(s, pos-1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans, sep=' ')\n", "\n\n\ndef solve(s, t):\n    n = len(s)\n    moves = 0\n    ans = []\n    for i in range(n - 1):\n        if s[i] == t[i]:\n            continue\n        else:\n            pos = s[i:].find(t[i]) + i\n            while pos != i:\n                ans.append(pos - 1)\n                moves += 1\n                s = swap(s, pos - 1, pos)\n                pos = s[i:].find(t[i]) + i\n    if s != t:\n        return -1\n    return moves, ans\n\n\ndef swap(s, i, j):\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    t = input()\n    res = solve(s, t)\n    if res == -1:\n        print(-1)\n    else:\n        moves, ans = res\n        print(moves)\n        print(*ans)\n", "\n\ndef solve(s, t):\n    pass\n\n\nif __name__ == '__main__':\n    pass\n"]
2022-04-23 21:22:45.825762 size on output set 8
