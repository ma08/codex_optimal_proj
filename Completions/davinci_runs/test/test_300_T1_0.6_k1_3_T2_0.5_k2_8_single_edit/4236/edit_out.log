2022-04-24 00:17:12.951378 num operations 1
2022-04-24 00:17:12.951398 size on input set 1
2022-04-24 00:17:12.951567 using api key kouti
2022-04-24 00:17:46.835380 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m] \npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e 1\u2264n\u226410^5 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432 A[1\u2026n], \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 10^9.\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043d\u0435\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0443\u044e \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 A. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0451 \u0434\u043b\u0438\u043d\u0443 k, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u0435\u0451 \u0438\u043d\u0434\u0435\u043a\u0441\u044b 1\u2264i1<i2<\u2026<ik\u2264n (\u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, A[i1]\u2265A[i2]\u2265\u2026\u2265A[in]).\n\nSample Input:\n5\n5 3 4 4 2\nSample Output:\n4\n1 3 4 5\n\"\"\"\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 2,
      "text": "# \u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m.\n# \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e m \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u043d\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e n \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n# \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 if \u0438 \u0446\u0438\u043a\u043b\u044b.\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 3,
      "text": "# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 4,
      "text": "\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0433\u0440 \u0444\u0443\u0442\u0431\u043e\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043c\u0430\u0442\u0447\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0435\u0439.\n\u0417\u0430 \u043f\u043e\u0431\u0435\u0434\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043d\u0430\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f 3 \u043e\u0447\u043a\u0430, \u0437\u0430 \u043f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u2014 0, \u0437\u0430 \u043d\u0438\u0447\u044c\u044e \u2014 1.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0438\u0433\u0440.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0438\u0434\u0435\u0442 n \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0433\u0440\u044b \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\n\u041f\u0435\u0440\u0432\u0430\u044f_\u043a\u043e\u043c\u0430\u043d\u0434\u0430;\u0417\u0430\u0431\u0438\u0442\u043e_\u043f\u0435\u0440\u0432\u043e\u0439_\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439;\u0412\u0442\u043e\u0440\u0430\u044f_\u043a\u043e\u043c\u0430\u043d\u0434\u0430;\u0417\u0430\u0431\u0438\u0442\u043e_\u0432\u0442\u043e\u0440\u043e\u0439_\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\u0412\u0441\u0435\u0433\u043e_\u0438\u0433\u0440 \u041f\u043e\u0431\u0435\u0434 \u041d\u0438\u0447\u044c\u0438\u0445 \u041f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0412\u0441\u0435\u0433\u043e_\u043e\u0447\u043a\u043e\u0432\n\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043d\u0438\u0436\u0435.\n\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439.\n"
    },
    {
      "index": 5,
      "text": "\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True, \u0435\u0441\u043b\u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442\ndef check(point, interval):\n    return interval[0] <= point <= interval[1]\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not any(check(i, interval) for interval in intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\nk = int(input())\nx = [int(input()) for i in range(n)]\nprint(k // len(x))\n"
    }
  ],
  "created": 1650759433,
  "object": "edit"
}
2022-04-24 00:17:46.835857 fix syntax errors 8 ['\n\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m] \npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\n\n"""\nДано целое число 1≤n≤10^5 и массив A[1…n], содержащий неотрицательные целые числа, не превосходящие 10^9.\nНайдите наибольшую невозрастающую подпоследовательность в A. В первой строке выведите её длину k, во второй — её индексы 1≤i1<i2<…<ik≤n (таким образом, A[i1]≥A[i2]≥…≥A[in]).\n\nSample Input:\n5\n5 3 4 4 2\nSample Output:\n4\n1 3 4 5\n"""\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '# Даны два целых числа n и m.\n# Выведите все числа от 1 до m включительно, которые не делятся на ни одно из чисел от 1 до n включительно.\n# В этой задаче нельзя использовать условный оператор if и циклы.\n\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\nНапишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.\nЗа победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.\nФормат ввода следующий:\nВ первой строке указано целое число n — количество завершенных игр.\nПосле этого идет n строк, в которых записаны результаты игры в следующем формате:\nПервая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой\nВывод программы необходимо оформить следующим образом:\nКоманда:Всего_игр Побед Ничьих Поражений Всего_очков\nКонкретный пример ввода-вывода приведён ниже.\nПорядок вывода команд произвольный.\n', '\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '\n\n# SOLUTION\n\n# проверка попадания числа в один из интервалов, возвращает True, если попадает\ndef check(point, interval):\n    return interval[0] <= point <= interval[1]\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые не попадают в один из интервалов\npoints = [i for i in points if not any(check(i, interval) for interval in intervals)]\nprint(len(points))\nprint(*points)\n', '\nn = int(input())\nk = int(input())\nx = [int(input()) for i in range(n)]\nprint(k // len(x))\n']
2022-04-24 00:17:46.835957 size on output set 8
2022-04-24 00:17:46.835977 num operations 1
2022-04-24 00:17:46.835983 size on input set 1
2022-04-24 00:17:46.836148 using api key kouti
2022-04-24 00:18:02.680961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1] and segments[k][1] < segments[k+1][0]:\n        print(i+1, end=' ')\n        k += 1\n\nprint()\n"
    },
    {
      "index": 1,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 2,
      "text": "n, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 3,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i + 1 not in range(segments[k][0], segments[k][1] + 1):\n        print(i + 1, end=' ')\n    elif k + 1 < len(segments) and i + 1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 4,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\np = []\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        p.append(i+1)\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint(*p)\n"
    },
    {
      "index": 5,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if k+1 < len(segments):\n        if i+1 not in range(segments[k][0], segments[k][1]+1):\n            print(i+1, end=' ')\n        elif i+1 == segments[k][1]:\n            k += 1\n    else:\n        print(i+1, end=' ')\n\nprint()\n"
    },
    {
      "index": 6,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 7,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1) and k < len(segments):\n        print(i+1, end=' ')\n    elif k < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    }
  ],
  "created": 1650759466,
  "object": "edit"
}
2022-04-24 00:18:02.681377 fix syntax errors 8 ["\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1] and segments[k][1] < segments[k+1][0]:\n        print(i+1, end=' ')\n        k += 1\n\nprint()\n", "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "n, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i + 1 not in range(segments[k][0], segments[k][1] + 1):\n        print(i + 1, end=' ')\n    elif k + 1 < len(segments) and i + 1 == segments[k][1]:\n        k += 1\n\nprint()\n", '\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\np = []\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        p.append(i+1)\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint(*p)\n', "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if k+1 < len(segments):\n        if i+1 not in range(segments[k][0], segments[k][1]+1):\n            print(i+1, end=' ')\n        elif i+1 == segments[k][1]:\n            k += 1\n    else:\n        print(i+1, end=' ')\n\nprint()\n", "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1) and k < len(segments):\n        print(i+1, end=' ')\n    elif k < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"]
2022-04-24 00:18:02.681446 size on output set 7
2022-04-24 00:18:02.681464 num operations 1
2022-04-24 00:18:02.681474 size on input set 1
2022-04-24 00:18:02.681686 using api key derek
2022-04-24 00:18:28.692976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\na = []  # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nc = []  # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\nfor i in range(n):\n    c.append(list(map(int, input().split())))\nr = []  # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nfor i in range(n):\n    r.append(list(map(int, input().split())))\nav = []  # \u0432\u0435\u043a\u0442\u043e\u0440 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\nfor i in range(m):\n    av.append(int(input()))\nf = []  # \u0432\u0435\u043a\u0442\u043e\u0440 \u0444\u043b\u0430\u0433\u043e\u0432\nfor i in range(n):\n    f.append(0)\nans = []  # \u0432\u0435\u043a\u0442\u043e\u0440 \u043e\u0442\u0432\u0435\u0442\u0430\nfor i in range(n):\n    ans.append(0)\nk = 0\nwhile k < n:\n    for i in range(n):\n        if f[i] == 0:\n            t = 0\n            for j in range(m):\n                if r[i][j] <= av[j]:\n                    t += 1\n            if t == m:\n                for j in range(m):\n                    av[j] += c[i][j]\n                ans[i] = 1\n                f[i] = 1\n                k += 1\nfor i in ans:\n    print(i, end=' ')\n"
    },
    {
      "index": 1,
      "text": "\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else:\n                leap = False\n        else:\n            leap = True\n    else:\n        leap = False\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 4,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = set()\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.add(j)\n\nl = list(l)\nl.sort()\n\nfor i in l:\n    for j in range(n):\n        if i in range(segments[j][0], segments[j][1] + 1):\n            l.remove(i)\n            break\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 5,
      "text": "\nprint('Hello World')\n"
    },
    {
      "index": 6,
      "text": "# \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u0441\u044e\u0434\u0430:\n# https://stepik.org/lesson/54772/step/7?unit=34222\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[0][0], segments[0][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 7,
      "text": "n, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    }
  ],
  "created": 1650759482,
  "object": "edit"
}
2022-04-24 00:18:28.693473 fix syntax errors 8 ["\nn, m = map(int, input().split())  # количество процессов и количество ресурсов\na = []  # матрица авторизации\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nc = []  # матрица текущего состояния\nfor i in range(n):\n    c.append(list(map(int, input().split())))\nr = []  # матрица запросов\nfor i in range(n):\n    r.append(list(map(int, input().split())))\nav = []  # вектор свободных ресурсов\nfor i in range(m):\n    av.append(int(input()))\nf = []  # вектор флагов\nfor i in range(n):\n    f.append(0)\nans = []  # вектор ответа\nfor i in range(n):\n    ans.append(0)\nk = 0\nwhile k < n:\n    for i in range(n):\n        if f[i] == 0:\n            t = 0\n            for j in range(m):\n                if r[i][j] <= av[j]:\n                    t += 1\n            if t == m:\n                for j in range(m):\n                    av[j] += c[i][j]\n                ans[i] = 1\n                f[i] = 1\n                k += 1\nfor i in ans:\n    print(i, end=' ')\n", '\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else:\n                leap = False\n        else:\n            leap = True\n    else:\n        leap = False\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n', "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = set()\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.add(j)\n\nl = list(l)\nl.sort()\n\nfor i in l:\n    for j in range(n):\n        if i in range(segments[j][0], segments[j][1] + 1):\n            l.remove(i)\n            break\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "\nprint('Hello World')\n", "# решение задачи отсюда:\n# https://stepik.org/lesson/54772/step/7?unit=34222\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[0][0], segments[0][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", "n, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"]
2022-04-24 00:18:28.693566 size on output set 7
