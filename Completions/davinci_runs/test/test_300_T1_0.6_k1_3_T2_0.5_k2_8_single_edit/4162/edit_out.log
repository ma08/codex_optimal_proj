2022-04-23 23:02:36.147222 num operations 1
2022-04-23 23:02:36.147258 size on input set 1
2022-04-23 23:02:36.147416 using api key jaanu
2022-04-23 23:03:02.344961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 1,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 2,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2*sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 3,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 4,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 5,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N\n    #                                                                              = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 6,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    },
    {
      "index": 7,
      "text": "\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i, a_i is a list\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads in the input and parses it\n    :return: N and a_i\n    \"\"\"\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    \"\"\"\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    \"\"\"\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2*sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n"
    }
  ],
  "created": 1650754956,
  "object": "edit"
}
2022-04-23 23:03:02.345502 fix syntax errors 8 ['\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2*sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N\n    #                                                                              = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2 * sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n', '\n\n# N: The number of elements in a_i\n# a_i: The elements in a_i, a_i is a list\n\nimport sys\n\ndef read_input():\n    """\n    Reads in the input and parses it\n    :return: N and a_i\n    """\n    N = int(sys.stdin.readline())\n    a_i = list(map(int, sys.stdin.readline().split()))\n    return N, a_i\n\ndef solve(N, a_i):\n    """\n    :param N: The number of elements in a_i\n    :param a_i: The elements in a_i\n    :return: The maximum value of f\n    """\n    # This is basically a greedy algorithm.\n    # We want to maximize f(m) by making m as large as possible.\n    # This is because f(m) = (m mod a_1) + (m mod a_2) + ... + (m mod a_N) is a linear function.\n    # We want to maximize f(m) by making (m mod a_i) as large as possible for all a_i.\n    # This is because (m mod a_i) = m - floor(m/a_i)*a_i.\n    # Thus, m = (m mod a_i) + floor(m/a_i)*a_i.\n    # To maximize m, we want to make floor(m/a_i) as large as possible, which is floor(m/a_i) = 1.\n    # Thus, m = (m mod a_i) + a_i.\n    # The largest value of (m mod a_i) is a_i - 1, so m = a_i - 1 + a_i = 2a_i - 1.\n    # The sum of all the a_i is a_1 + a_2 + ... + a_N.\n    # Thus, the maximum value of f(m) is f(m) = 2a_1 - 1 + 2a_2 - 1 + ... + 2a_N - 1 = 2(a_1 + a_2 + ... + a_N) - N = 2*sum(a_i) - N\n    return 2 * sum(a_i) - N\n\nN, a_i = read_input()\nprint(solve(N, a_i))\n']
2022-04-23 23:03:02.345736 size on output set 4
2022-04-23 23:03:02.345758 num operations 1
2022-04-23 23:03:02.345768 size on input set 1
2022-04-23 23:03:02.345981 using api key sunu
2022-04-23 23:03:17.760853 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A) + 1\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a == 0 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import gcd\nfrom functools import reduce\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 3,
      "text": "\nfrom math import gcd\nfrom functools import reduce, lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 4,
      "text": "\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a == 0 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 5,
      "text": "\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(1 for a in A if m % a == 0)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 6,
      "text": "import sys\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\nsys.setrecursionlimit(10**7)\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum((m - 1) % a + 1 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    },
    {
      "index": 7,
      "text": "from math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n"
    }
  ],
  "created": 1650754982,
  "object": "edit"
}
2022-04-23 23:03:17.761135 fix syntax errors 8 ['from math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A) + 1\n\n\nl = lcmm(*A)\nprint(f(l))\n', '\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a == 0 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n', '\nfrom math import gcd\nfrom functools import reduce\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n', '\nfrom math import gcd\nfrom functools import reduce, lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n', '\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a == 0 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n', '\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(1 for a in A if m % a == 0)\n\n\nl = lcmm(*A)\nprint(f(l))\n', 'import sys\nfrom math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\nsys.setrecursionlimit(10**7)\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum((m - 1) % a + 1 for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n', 'from math import gcd\nfrom functools import reduce\nfrom functools import lru_cache\n\nN = int(input())\nA = tuple(map(int, input().split()))\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef lcmm(*args):\n    return reduce(lcm, args)\n\n\n@lru_cache(maxsize=None)\ndef f(m):\n    return sum(m % a for a in A)\n\n\nl = lcmm(*A)\nprint(f(l))\n']
2022-04-23 23:03:17.761181 size on output set 7
2022-04-23 23:03:17.761192 num operations 1
2022-04-23 23:03:17.761198 size on input set 1
2022-04-23 23:03:17.761340 using api key kouti
2022-04-23 23:03:44.748742 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Date    : 2019-07-01 21:38:04\n# @Author  : Qiman Chen\n# @Version : $Id$\n\n\n\"\"\"\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002\n\n\u4f60\u627e\u5230\u7684\u5b50\u6570\u7ec4\u5e94\u662f\u6700\u77ed\u7684\uff0c\u8bf7\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002\n\n\u793a\u4f8b 1:\n\n\u8f93\u5165: [2, 6, 4, 8, 10, 9, 15]\n\u8f93\u51fa: 5\n\u89e3\u91ca: \u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002\n\u8bf4\u660e :\n\n\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u5728\u00a0[1, 10,000]\u3002\n\u8f93\u5165\u7684\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u00a0\uff0c\u6240\u4ee5\u5347\u5e8f\u7684\u610f\u601d\u662f<=\u3002\n\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n\"\"\"\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        for j in range(a[i]):\n            b[i] += (j + 1) * (a[i] - j)\n    print(sum(b))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 4
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\nfrom collections import deque\n\n\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    B = deque(map(int, input().split()))\n    C = deque()\n    for i in range(M):\n        if len(B) == 0:\n            break\n        if len(C) < N:\n            if B[0] <= A[0]:\n                C.append(B.popleft())\n            else:\n                C.append(A.pop(0))\n        else:\n            if B[0] > C[0]:\n                C.append(B.popleft())\n                C.popleft()\n            else:\n                C.append(A.pop(0))\n                C.popleft()\n    print(sum(C))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650754997,
  "object": "edit"
}
2022-04-23 23:03:44.749175 NO RESULT
2022-04-23 23:03:44.749186 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 4
}
2022-04-23 23:03:44.749241 fix syntax errors 7 ["import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n", '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Date    : 2019-07-01 21:38:04\n# @Author  : Qiman Chen\n# @Version : $Id$\n\n\n"""\n给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。\n\n你找到的子数组应是最短的，请输出它的长度。\n\n示例 1:\n\n输入: [2, 6, 4, 8, 10, 9, 15]\n输出: 5\n解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n说明 :\n\n输入的数组长度范围在\xa0[1, 10,000]。\n输入的数组可能包含重复元素\xa0，所以升序的意思是<=。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n"""\n\ndef main():\n    pass\n\n\nif __name__ == \'__main__\':\n    main()\n', "\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        for j in range(a[i]):\n            b[i] += (j + 1) * (a[i] - j)\n    print(sum(b))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * N\n    for i in range(N):\n        for j in range(A[i]):\n            B[i] += (j + 1) * (A[i] - j)\n    print(sum(B))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nfrom collections import deque\n\n\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    B = deque(map(int, input().split()))\n    C = deque()\n    for i in range(M):\n        if len(B) == 0:\n            break\n        if len(C) < N:\n            if B[0] <= A[0]:\n                C.append(B.popleft())\n            else:\n                C.append(A.pop(0))\n        else:\n            if B[0] > C[0]:\n                C.append(B.popleft())\n                C.popleft()\n            else:\n                C.append(A.pop(0))\n                C.popleft()\n    print(sum(C))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 23:03:44.749336 size on output set 6
