2022-04-23 21:42:41.411219 num operations 1
2022-04-23 21:42:41.411242 size on input set 1
2022-04-23 21:42:41.411396 using api key derek
2022-04-23 21:43:02.348953 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(n, k):\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(k, 0, -1):\n        packets = get_min_packets(n - t, k)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n    \"\"\"\n    :param shovels: the number of shovels to be made\n    :param types: the number of types of packets\n    :return: the minimum number of packets to buy to make the shovels\n    \"\"\"\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n\"\"\"\n\nimport sys\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nsys.stdin = open(\"input.txt\", \"r\")\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels <= 0:\n        return None\n\n    min_packets = sys.maxsize\n        print(packets)\n        if packets is None:\n            continue\n        if packets < min_packets:\n            min_packets = packets\n\n    if min_packets == sys.maxsize:\n        packets = get_min_packets(shovels - t, types)\n    return min_packets + 1\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types, memo):\n    if shovels == 0: return 0\n    if shovels < 0: return sys.maxsize\n    if memo[shovels] != -1: return memo[shovels]\n    min_packets = sys.maxsize - 1\n    for t in range(1, types + 1):\n        packets = get_min_packets(shovels - t, types, memo)\n        if min_packets > packets:\n            min_packets = packets\n    memo[shovels] = min_packets + 1\n    return memo[shovels]\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        memo = [-1] * (N + 1)\n        print(get_min_packets(N, K, memo))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels == 0:\n        return 0\n    if shovels < 0:\n        return sys.maxsize\n\n    min_packets = sys.maxsize\n        min_packets = min(min_packets, packets + 1)\n    if min_packets == sys.maxsize:\n        return sys.maxsize\n    return min_packets\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650750161,
  "object": "edit"
}
2022-04-23 21:43:02.349299 fix syntax errors 8 ['\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(n, k):\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(k, 0, -1):\n        packets = get_min_packets(n - t, k)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n    """\n    :param shovels: the number of shovels to be made\n    :param types: the number of types of packets\n    :return: the minimum number of packets to buy to make the shovels\n    """\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == "__main__":\n    main()\n', '"""\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == "__main__":\n    main()\n"""\n\nimport sys\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == "__main__":\n    main()\n', '\nsys.stdin = open("input.txt", "r")\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels <= 0:\n        return None\n\n    min_packets = sys.maxsize\n        print(packets)\n        if packets is None:\n            continue\n        if packets < min_packets:\n            min_packets = packets\n\n    if min_packets == sys.maxsize:\n        packets = get_min_packets(shovels - t, types)\n    return min_packets + 1\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types, memo):\n    if shovels == 0: return 0\n    if shovels < 0: return sys.maxsize\n    if memo[shovels] != -1: return memo[shovels]\n    min_packets = sys.maxsize - 1\n    for t in range(1, types + 1):\n        packets = get_min_packets(shovels - t, types, memo)\n        if min_packets > packets:\n            min_packets = packets\n    memo[shovels] = min_packets + 1\n    return memo[shovels]\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        memo = [-1] * (N + 1)\n        print(get_min_packets(N, K, memo))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels == 0:\n        return 0\n    if shovels < 0:\n        return sys.maxsize\n\n    min_packets = sys.maxsize\n        min_packets = min(min_packets, packets + 1)\n    if min_packets == sys.maxsize:\n        return sys.maxsize\n    return min_packets\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-23 21:43:02.349494 size on output set 8
2022-04-23 21:43:02.349514 num operations 1
2022-04-23 21:43:02.349524 size on input set 1
2022-04-23 21:43:02.349722 using api key soukgp
2022-04-23 21:43:17.108575 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"
    },
    {
      "index": 1,
      "text": "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"
    },
    {
      "index": 2,
      "text": "#problem link - https://www.codechef.com/problems/TLG\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"
    },
    {
      "index": 3,
      "text": "print(\"hello world\")\n"
    },
    {
      "index": 4,
      "text": "#https://www.codechef.com/problems/TADELIVE\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"
    },
    {
      "index": 5,
      "text": "\nl = []\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    l.append(n % k if n % k else n // k)\nprint(*l, sep=\"\\n\")\n"
    },
    {
      "index": 6,
      "text": "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"
    },
    {
      "index": 7,
      "text": "\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n // k)\n    else:\n        print(n // k + 1)\n"
    }
  ],
  "created": 1650750182,
  "object": "edit"
}
2022-04-23 21:43:17.108817 fix syntax errors 8 ['\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n', '\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n', '#problem link - https://www.codechef.com/problems/TLG\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n', 'print("hello world")\n', '#https://www.codechef.com/problems/TADELIVE\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n', '\nl = []\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    l.append(n % k if n % k else n // k)\nprint(*l, sep="\\n")\n', '\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n', '\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n // k)\n    else:\n        print(n // k + 1)\n']
2022-04-23 21:43:17.108851 size on output set 6
2022-04-23 21:43:17.108862 num operations 1
2022-04-23 21:43:17.108868 size on input set 1
2022-04-23 21:43:17.109048 using api key kouti
2022-04-23 21:43:35.203148 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    },
    {
      "index": 3,
      "text": "\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef get_max_packages(n, k):\n    count = 0\n    while n > 0:\n        n -= k\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        max_packages = get_max_packages(n, k)\n        print(max_packages)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n\ndef get_min_packages(n, k, l):\n    if n <= k and n <= l:\n        return min(k, l)\n    min_packages = min(k, l)\n    for i in range(1, min_packages):\n        if n % i == 0 and n // i <= min_packages:\n            min_packages = n // i\n    return min(k, l, min_packages)\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k, l = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k, l)\n        print(min_packages)\n"
    },
    {
      "index": 6,
      "text": "\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"
    }
  ],
  "created": 1650750197,
  "object": "edit"
}
2022-04-23 21:43:35.203557 fix syntax errors 8 ["\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\n\nimport sys\n\ndef get_max_packages(n, k):\n    count = 0\n    while n > 0:\n        n -= k\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        max_packages = get_max_packages(n, k)\n        print(max_packages)\n", "\nimport sys\n\n\ndef get_min_packages(n, k, l):\n    if n <= k and n <= l:\n        return min(k, l)\n    min_packages = min(k, l)\n    for i in range(1, min_packages):\n        if n % i == 0 and n // i <= min_packages:\n            min_packages = n // i\n    return min(k, l, min_packages)\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k, l = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k, l)\n        print(min_packages)\n", "\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n"]
2022-04-23 21:43:35.203717 size on output set 6
