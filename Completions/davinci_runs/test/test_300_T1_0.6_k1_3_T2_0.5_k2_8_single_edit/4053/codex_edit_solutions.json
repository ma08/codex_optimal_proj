["\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(2 * n - 2):\n        x = input()\n        if x not in prefixes:\n            prefixes.append(x)\n        else:\n            suffixes.append(x)\n    for x in prefixes:\n        print(\"P\", end=\"\")\n    for x in suffixes:\n        print(\"S\", end=\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)] \n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings), 2)] \n    print(strings)\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range((2*n)-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings), 2) if i < len(strings)-1]\n    print(strings)\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "c1f1f2d2c2a2a3b3c3b3b3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3\n", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(2*n-2): # 2*n-2\n        x = input()\n        if len(x)==n-1:\n            prefixes.append(x)\n        else:\n            suffixes.append(x)\n    for x in prefixes: # prefixes\n        print(\"P\", end=\"\")\n    for x in suffixes: # suffixes\n        print(\"S\", end=\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\n\nfs.readFile('data.txt', (err, data) => {\n\tif (err) {\n\t\tconsole.log('error', err);\n\t}\n\tconsole.log(data.toString());\n});\n", "import os\n\n\ndef main():\n    print(\"Starting directory is: {}\".format(os.getcwd()))\n\n    os.chdir('Lyrics/Christmas')\n\n    print(\"Files in {}:\\n{}\\n\".format(os.getcwd(), os.listdir('.')))\n\n    try:\n        os.mkdir('temp')\n    except FileExistsError:\n        pass\n\n    for filename in os.listdir('.'):\n        if os.path.isdir(filename):\n            continue\n\n        new_name = get_fixed_filename(filename)\n        print(\"Renaming {} to {}\".format(filename, new_name))\n\n        full_name = os.path.join(os.getcwd(), filename)\n        new_name = os.path.join(os.getcwd(), new_name)\n        os.rename(full_name, new_name)\n\n\ndef get_fixed_filename(filename):\n    new_name = filename.replace(\" \", \"_\").replace(\".TXT\", \".txt\")\n    return new_name\n\n\ndef demo_walk():\n    os.chdir('Lyrics')\n    for directory_name, subdirectories, filenames in os.walk('.'):\n        print(\"Directory:\", directory_name)\n        print(\"\\tcontains subdirectories:\", subdirectories)\n        print(\"\\tand files:\", filenames)\n        print(\"(Current working directory is: {})\".format(os.getcwd()))\n\n        for filename in filenames:\n            full_name = os.path.join(directory_name, filename)\n            new_name = os.path.join(directory_name, get_fixed_filename(filename))\n            os.rename(full_name, new_name)\n\n\nmain()\n# demo_walk()\n", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(n-1):\n        x = input()\n        if x[0] not in prefixes:\n            prefixes.append(x)\n        else:\n            suffixes.append(x[len(x)-1])\n    for x in prefixes:\n        print(\"P\", end=\" \")\n    for x in suffixes:\n        print(\"S\", end=\" \")\n    print(\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i + 1] for i in range(0, len(strings), 2)]\n    print(strings)\n    for s in strings:\n        for i in range(n - 1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings)-1, 2)]\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i + 1] for i in range(0, len(strings), 2)]\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i + 1] for i in range(0, len(strings), 2)]\n    print(strings)\n    for s in strings:\n        for i in range(n - 1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "import os\nimport sys\n\n\ndef main():\n    if len(sys.argv) > 1:\n        filename = sys.argv[1]\n    else:\n        filename = input(\"File name: \")\n    try:\n        with open(filename) as f:\n            print(f.read())\n    except FileNotFoundError:\n        print(\"File not found\")\n\n\nif __name__ == '__main__':\n    main()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\n\ndf = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data', header=None, sep='\\s+')\ndf.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n\n# print(df.head())\n\nX = df.iloc[:, :-1].values\ny = df['MEDV'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)\n\nsc_x = StandardScaler()\nsc_y = StandardScaler()\nX_std_train = sc_x.fit_transform(X_train)\ny_std_train = sc_y.fit_transform(y_train[:, np.newaxis]).flatten()\n\nlr = LinearRegression()\nlr.fit(X_std_train, y_std_train)\n\n\ndef lin_regplot(X, y, model):\n    plt.scatter(X, y, c='blue')\n    plt.plot(X, model.predict(X), color='red')\n    return None\n\n\nlin_regplot(X_std_train, y_std_train, lr)\nplt.xlabel('Average number of rooms [RM] (standardized)')\nplt.ylabel('Price in $1000s [MEDV] (standardized)')\nplt.show()\n\n\nprint('Slope: %.3f' % lr.coef_[5])\nprint('Intercept: %.3f' % lr.intercept_)\n\n\nX_std_test = sc_x.transform(X_test)\ny_std_test = sc_y.transform(y_test[:, np.newaxis]).flatten()\n\ny_std_lin_pred = lr.predict(X_std_test)\n\nprint('R^2: %.3f' % r2_score(y_std_test, y_std_lin_pred))\n\n\ndef lin_regplot(X, y, model):\n    plt.scatter(X, y, c='blue')\n    plt.plot(X, model.predict(X), color='red')\n    return None\n\n\nlin_regplot(X_std_test, y_std_test, lr)\nplt.xlabel('Average number of rooms [RM] (standardized)')\nplt.ylabel('Price in $1000s [MEDV] (standardized)')\nplt.show()\n\n\nX = df[['LSTAT']].values\ny = df['MEDV'].values\n\nregr = LinearRegression()\n\n# create polynomial features\nquadratic = PolynomialFeatures(degree=2)\ncubic = PolynomialFeatures(degree=3)\nX_quad = quadratic.fit_transform(X)\nX_cubic = cubic.fit_transform(X)\n\n# fit features\nX_fit = np.arange(X.min(), X.max(), 1)[:, np.newaxis]\n\nregr = regr.fit(X, y)\ny_lin_fit = regr.predict(X_fit)\nlinear_r2 = r2_score(y, regr.predict(X))\n\nregr = regr.fit(X_quad, y)\ny_quad_fit = regr.predict(quadratic.fit_transform(X_fit))\nquadratic_r2 = r2_score(y, regr.predict(X_quad))\n\nregr = regr.fit(X_cubic, y)\ny_cubic_fit = regr.predict(cubic.fit_transform(X_fit))\ncubic_r2 = r2_score(y, regr.predict(X_cubic))\n\n# plot results\nplt.scatter(X, y, label='training points', color='lightgray')\n\nplt.plot(X_fit, y_lin_fit, label='linear (d=1), $R^2=%.2f$' % linear_r2, color='blue', lw=2, linestyle=':')\nplt.plot(X_fit, y_quad_fit, label='quadratic (d=2), $R^2=%.2f$' % quadratic_r2, color='red', lw=2, linestyle='-')\nplt.plot(X_fit, y_cubic_fit, label='cubic (d=3), $R^2=%.2f$' % cubic_r2, color='green', lw=2, linestyle='--')\n\nplt.xlabel('% lower status of the population [LSTAT]')\nplt.ylabel('Price in $1000s [MEDV]')\nplt.legend(loc='upper right')\n\n# plt.savefig('images/10_11.png', dpi=300)\nplt.show()\n\n\nX = df[['LSTAT']].values\ny = df['MEDV'].values\n\n# transform features\nX_log = np.log(X)\ny_sqrt = np.sqrt(y)\n\n# fit features\nX_fit = np.arange(X_log.min()-1, X_log.max()+1, 1)[:, np.newaxis]\n\nregr = regr.fit(X_log, y_sqrt)\ny_lin_fit = regr.predict(X_fit)\nlinear_r2 = r2_score(y_sqrt, regr.predict(X_log))\n\n# plot results\nplt.scatter(X_log, y_sqrt, label='training points', color='lightgray')\n\nplt.plot(X_fit, y_lin_fit, label='linear (d=1), $R^2=%.2f$' % linear_r2, color='blue', lw=2)\n\nplt.xlabel('log(% lower status of the population [LSTAT])')\nplt.ylabel('$\\sqrt{Price \\; in \\; \\$1000s \\; [MEDV]}$')\nplt.legend(loc='lower left')\n\n# plt.savefig('images/10_12.png', dpi=300)\nplt.show()\n\n", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(2*n-2):\n        x = input()\n        if x not in prefixes:\n            prefixes.append(x)\n        else:\n            suffixes.append(x)\n    for x in prefixes:\n        print(\"P\", end=\" \")\n    for x in suffixes:\n        print(\"S\", end=\" \")\n\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\n\nvar readStream = fs.createReadStream('file.txt', 'utf8');\n\nvar writeStream = fs.createWriteStream('file_copy.txt');\n\nreadStream.on('data', function(chunk){\n\twriteStream.write(chunk);\n});\n", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(2*n-2):\n        x = input()\n        if len(x) == n-1:\n            prefixes.append(x)\n        else:\n            suffixes.append(x)\n\n    for i in range(n-1):\n        if prefixes[i] in suffixes[i]:\n            print(\"P\", end=\"\")\n        else:\n            print(\"S\", end=\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\nvar path = require('path');\n\nfunction file(dir, ext, callback) {\n  fs.readdir(dir, function(err, list) {\n    if (err) {\n      return callback(err);\n    }\n    var filtered = list.filter(function(file) {\n      return path.extname(file) === '.' + ext;\n    });\n    callback(null, filtered);\n  });\n}\n\nmodule.exports = file;\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings), 2)]\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "const fs = require('fs');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('What file should I read? ', (answer) => {\n  fs.readFile(answer, 'utf8', (err, data) => {\n    if (err) throw err;\n    console.log(data);\n  });\n\n  rl.close();\n});\n"]