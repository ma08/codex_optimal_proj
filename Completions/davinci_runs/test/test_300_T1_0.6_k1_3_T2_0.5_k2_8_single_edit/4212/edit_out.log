2022-04-23 23:52:15.406638 num operations 1
2022-04-23 23:52:15.406659 size on input set 1
2022-04-23 23:52:15.406811 using api key jaanu
2022-04-23 23:52:35.752964 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\n\nn, m, q = map(int, input().split())\ns = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i][j - 1]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i - 1][j]\n\nans = 0\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        ans = max(ans, s[j][m] - s[i - 1][m] - s[j][i - 1] + s[i - 1][i - 1])\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][b] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    }
  ],
  "created": 1650757935,
  "object": "edit"
}
2022-04-23 23:52:35.753291 fix syntax errors 8 ['\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\n\nn, m, q = map(int, input().split())\ns = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i][j - 1]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i - 1][j]\n\nans = 0\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        ans = max(ans, s[j][m] - s[i - 1][m] - s[j][i - 1] + s[i - 1][i - 1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][b] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n']
2022-04-23 23:52:35.753447 size on output set 3
2022-04-23 23:52:35.753459 num operations 1
2022-04-23 23:52:35.753464 size on input set 1
2022-04-23 23:52:35.753582 using api key derek
2022-04-23 23:52:55.467869 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M + 1):  # m: 1 ~ M\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:  # c[i] + 1 ~ m\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:  # c[j] + 1 ~ m\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]  # reduce 1\n    b = [b1 - 1 for b1 in b]  # reduce 1\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    A = [None] * Q\n    B = [None] * Q\n    C = [None] * Q\n    D = [None] * Q\n    for i in range(Q):\n        A[i], B[i], C[i], D[i] = map(int, input().split())\n    A = [A1 - 1 for A1 in A]\n    B = [B1 - 1 for B1 in B]\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - C[i] == 0:\n                score_m += D[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if A[j] < B[j] and m - C[j] > 0:\n                score_m += D[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for i in range(Q):\n        if a[i] < b[i] and M - c[i] > 0:\n            score += d[i]\n            score = max(score, score)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0 and a[i] < b[i]:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if m - c[j] > 0 and a[j] < b[j]:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650757955,
  "object": "edit"
}
2022-04-23 23:52:55.468148 fix syntax errors 8 ["\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M + 1):  # m: 1 ~ M\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:  # c[i] + 1 ~ m\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:  # c[j] + 1 ~ m\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]  # reduce 1\n    b = [b1 - 1 for b1 in b]  # reduce 1\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    A = [None] * Q\n    B = [None] * Q\n    C = [None] * Q\n    D = [None] * Q\n    for i in range(Q):\n        A[i], B[i], C[i], D[i] = map(int, input().split())\n    A = [A1 - 1 for A1 in A]\n    B = [B1 - 1 for B1 in B]\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - C[i] == 0:\n                score_m += D[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if A[j] < B[j] and m - C[j] > 0:\n                score_m += D[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for i in range(Q):\n        if a[i] < b[i] and M - c[i] > 0:\n            score += d[i]\n            score = max(score, score)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0 and a[i] < b[i]:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if m - c[j] > 0 and a[j] < b[j]:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 23:52:55.468309 size on output set 7
2022-04-23 23:52:55.468323 num operations 1
2022-04-23 23:52:55.468329 size on input set 1
2022-04-23 23:52:55.468459 using api key kouti
2022-04-23 23:53:20.439216 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import deque, defaultdict\n\nn, m, k = map(int, input().split())\n\n# the adjacency list\nadj_list = defaultdict(list)\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    adj_list[u].append(v)\n\n# the queue\nqueue = deque()\nqueue.append(1)\n\n# the visited array\nvisited = [False for _ in range(n+1)]\nvisited[1] = True\n\n# the distance array\ndist = [-1 for _ in range(n+1)]\ndist[1] = 0\n\n# the number of nodes at each level\nnodes_at_level = [0 for _ in range(n+1)]\nnodes_at_level[0] = 1\n\nwhile queue:\n    u = queue.popleft()\n\n    for v in adj_list[u]:\n        if not visited[v]:\n            visited[v] = True\n            queue.append(v)\n            dist[v] = dist[u] + 1\n            nodes_at_level[dist[v]] += 1\n\n# the answer is the sum of the nodes at the first k levels\nprint(sum(nodes_at_level[:k]))\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads[::-1]:\n            if a == i and b == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 3,
      "text": "\n\n#from collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 4,
      "text": "\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 6,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 7,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    }
  ],
  "created": 1650757975,
  "object": "edit"
}
2022-04-23 23:53:20.439518 fix syntax errors 8 ['\n\nfrom collections import deque, defaultdict\n\nn, m, k = map(int, input().split())\n\n# the adjacency list\nadj_list = defaultdict(list)\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    adj_list[u].append(v)\n\n# the queue\nqueue = deque()\nqueue.append(1)\n\n# the visited array\nvisited = [False for _ in range(n+1)]\nvisited[1] = True\n\n# the distance array\ndist = [-1 for _ in range(n+1)]\ndist[1] = 0\n\n# the number of nodes at each level\nnodes_at_level = [0 for _ in range(n+1)]\nnodes_at_level[0] = 1\n\nwhile queue:\n    u = queue.popleft()\n\n    for v in adj_list[u]:\n        if not visited[v]:\n            visited[v] = True\n            queue.append(v)\n            dist[v] = dist[u] + 1\n            nodes_at_level[dist[v]] += 1\n\n# the answer is the sum of the nodes at the first k levels\nprint(sum(nodes_at_level[:k]))\n', "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads[::-1]:\n            if a == i and b == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\n#from collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"]
2022-04-23 23:53:20.439670 size on output set 7
