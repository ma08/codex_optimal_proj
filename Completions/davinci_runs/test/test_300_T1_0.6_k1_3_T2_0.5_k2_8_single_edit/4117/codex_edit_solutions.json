["\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "\n\n\nimport itertools\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "\n\ndef main():\n    n = int(input)\n    l = list(map(int, input.split()))\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]:\n                    ans += 1\n    print ans\n\nif __name__ == '__main__':\n    main\n", "\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]:\n                    ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]: ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\nl = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]:\n                cnt += 1\n\nprint(cnt)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nl = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i] and l[i] != l[j] and l[j] != l[k] and l[i] != l[k]:\n                cnt += 1\n\nprint(cnt)\n", "#!/usr/bin/python3\n\nn = int(input())\nl = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]:\n                cnt += 1\n\nprint(cnt)\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(x, y, cnt):\n    if x == N-1 and y == N-1:\n        global ans\n        ans = min(ans, cnt)\n        return\n\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n\n        if 0 <= nx and nx < N and 0 <= ny and ny < N and visited[nx][ny] == 0:\n            if arr[nx][ny] == 1:\n                visited[nx][ny] = 1\n                dfs(nx, ny, cnt+1)\n                visited[nx][ny] = 0\n            else:\n                visited[nx][ny] = 1\n                dfs(nx, ny, cnt)\n                visited[nx][ny] = 0\n\n\nN = int(input())\narr = [list(map(int, input().split())) for _ in range(N)]\nvisited = [[0] * N for _ in range(N)]\ndx = [0, 0, -1, 1]\ndy = [-1, 1, 0, 0]\nans = float('inf')\n\nvisited[0][0] = 1\ndfs(0, 0, 1)\nprint(ans)\n", "\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n-2):  # i\u756a\u76ee\u306e\u8fba\n        for j in range(i+1, n-1):  # j\u756a\u76ee\u306e\u8fba\n            for k in range(j+1, n):  # k\u756a\u76ee\u306e\u8fba\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]:  # \u4e09\u89d2\u5f62\u306e\u6210\u7acb\u6761\u4ef6\n                    ans += 1  # \u4e09\u89d2\u5f62\u3092\u6570\u3048\u308b\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n\n\n\"\"\"\n# TLE\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n\"\"\"\n", "\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n\n\n\n\n\n\"\"\"\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n\"\"\"\n", "\n\nimport fractions\nimport heapq\nimport sys, re, string, math\nfrom collections import deque, defaultdict, Counter\nfrom typing import List\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n"]