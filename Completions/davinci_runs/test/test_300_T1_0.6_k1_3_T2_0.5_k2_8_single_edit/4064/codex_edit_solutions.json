["\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0 and j - a[i] + 1 < h:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        elif j - a[i] >= 0:\n            dp[i][j] = dp[i - 1][j - a[i]]\n        elif j - a[i] + 1 < h:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 >= l and a[0] - 1 <= r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 >= l and a[i] - 1 <= r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "import sys\n\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    n, h, l, r = inl()\n    a = inl()\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "# https://atcoder.jp/contests/dp/tasks/dp_a\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif l <= a[0] <= r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif l <= a[0] - 1 <= r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] <= r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] - 1 <= r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "\n\ndef solve_dp(n, h, l, r, a, dp):\n  dp[0][a[0]] = 1\n  for i in range(n - 1):\n    for j in range(h):\n      if dp[i][j] == 0:\n        continue\n      if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n        dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n      if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n        dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n  return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0] * h for i in range(n)]\nprint(solve_dp(n, h, l, r, a, dp))\n", "\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i]) % h >= l and (j + a[i]) % h <= r:\n                dp[i][(j + a[i]) % h] = max(dp[i][(j + a[i]) % h], dp[i - 1][j] + 1)\n            if (j + a[i] - 1) % h >= l and (j + a[i] - 1) % h <= r:\n                dp[i][(j + a[i] - 1) % h] = max(dp[i][(j + a[i] - 1) % h], dp[i - 1][j] + 1)\n            dp[i][j] = max(dp[i][j], dp[i - 1][j])\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "import sys\nsys.setrecursionlimit(10 ** 7)\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[-1, -1] for i in range(n)]\n\n\ndef dfs(i):\n    if dp[i][0] != -1:\n        return dp[i]\n    if i == 0:\n        if a[i] > l and a[i] < r:\n            dp[i][0] = 1\n        else:\n            dp[i][0] = 0\n        if a[i] - 1 > l and a[i] - 1 < r:\n            dp[i][1] = 1\n        else:\n            dp[i][1] = 0\n    else:\n        dp[i][0] = max(dfs(i - 1)[0], dfs(i - 1)[1])\n        if a[i] > l and a[i] < r:\n            dp[i][0] += 1\n        dp[i][1] = max(dfs(i - 1)[0], dfs(i - 1)[1])\n        if a[i] - 1 > l and a[i] - 1 < r:\n            dp[i][1] += 1\n    return dp[i]\n\n\nprint(max(dfs(n - 1)[0], dfs(n - 1)[1]))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 < h and a[0] - 1 >= l:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 < h and a[i] - 1 >= l:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "def solve(n, m, a, b):\n    dp = [[0] * (m + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\nprint(solve(n, m, a, b))\n", "def solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\n\ndef solve_dp(n, h, l, r, a):\n    dp = [0] * h\n    dp[a[0]] = 1\n    for i in range(n):\n        nxt = [0] * h\n        for j in range(h):\n            if dp[j] == 0:\n                continue \n            nxt[(j + a[i + 1]) % h] = max(nxt[(j + a[i + 1]) % h], dp[j] + (l <= (j + a[i + 1]) % h <= r))\n            nxt[(j + a[i + 1] - 1) % h] = max(nxt[(j + a[i + 1] - 1) % h], dp[j] + (l <= (j + a[i + 1] - 1) % h <= r))\n        dp = nxt\n    return max(dp)\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndp = [[0] * h for i in range(n)]\ndp[0][a[0]] = 1\nfor i in range(n - 1):\n    for j in range(h):\n        if dp[i][j] == 0:\n            continue\n        if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n            dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n        if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n            dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\nprint(max(dp[n - 1]))\n\n", "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0] % h] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * h for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"]