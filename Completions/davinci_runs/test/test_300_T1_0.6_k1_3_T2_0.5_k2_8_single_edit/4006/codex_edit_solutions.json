["\n\n# The solution below is not correct. It is correct for the given test cases,\n# but not for the following test case:\n#   Input\n#   100\n#   Output\n#   9\n# Instead of 9, the correct answer is 10. I don't know why the solution below is not correct.\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    while len(n) > 1 and n[-1] == 0:\n        n = n[:-1]\n    if len(n) == 1:\n        return 10\n    else:\n        return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\n\n\ndef solve(n):\n    if n == 0:\n        return 'INSOMNIA'\n    else:\n        n = list(str(n))\n        n = [int(i) for i in n]\n        while len(n) > 1 and n[-1] == 0:\n            n = n[:-1]\n        if len(n) == 1:\n            return 10\n        else:\n            return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\ndef f(n):\n    return n + 1 if n % 10 else f(n // 10)\n\ndef r(n):\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s: break\n    return s\n\ndef main():\n    n = int(input())\n    print(len(r(n)))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    if n % 10 == 0:\n        return f(n // 10)\n    else:\n        return n + 1\n\ndef r(n):\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s:\n            break\n    return s\n\ndef main():\n    n = int(input())\n    print(len(r(n)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef solve(n):\n    n = list(str(n))  # convert n to list of characters\n    n = [int(i) for i in n]  # convert each character to integer\n    while len(n) > 1 and n[-1] == 0:  # remove trailing zeros\n        n = n[:-1]  # remove last element of n\n    if len(n) == 1:  # if length of n is 1, return 10\n        return 10\n    else:  # else return length of n\n        return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\n\n# The solution below is not correct.\n# It is correct for the given test cases, but not for the following test case:\n#\n#  Input\n#  100\n#  Output\n#  9\n#  Instead of 9, the correct answer is 10.\n#  I don't know why the solution below is not correct.\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    while len(n) > 1 and n[-1] == 0:\n        n = n[:-1]\n    if len(n) == 1:\n        return 10\n    else:\n        return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\ndef f(n):\n    if n % 10 == 0:\n        return f(n // 10)\n    else:\n        return n + 1\n\n\ndef r(n: int) -> set:\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s:\n            break\n    return s\n\n\ndef main():\n    n = int(input())\n    print(len(r(n)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# The solution below is not correct. It is correct for the given test cases, but not for the following test case:\n# Input\n# 101\n# Output\n# 11\n# Instead of 11, the correct answer is 12.\n# I don't know why the solution below is not correct. I think it is correct.\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    while len(n) > 1 and n[-1] == 0:\n    n = [str(i) for i in n]\n    n = ''.join(n)\n    n = int(n)\n        n = n[:-1]\n    if len(n) == 1:\n        return len(str(n))\n    else:\n        return len(str(n)) + 1\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\n\n# The solution below is not correct. It is correct for the given test cases, but not for the following test case: Input 100 Output 9 Instead of 9, the correct answer is 10. I don't know why the solution below is not correct.\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    while len(n) > 1 and n[-1] == 0:\n        n = n[:-1]\n    if len(n) == 1:\n        return 10\n    else:\n        return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    while len(n) > 1 and n[-1] == 0:\n        n = n[:-1]\n    if len(n) == 1:\n        return 10\n    else:\n        return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\n\ndef f(n):\n    if n % 10 == 0:\n        return f(n / 10)\n    else:\n        return n + 1\n\ndef r(n):\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s:\n            break\n    return s\n\ndef main():\n    n = int(input())\n    print(len(r(n)))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\ndef f(x):\n    while x % 10 == 0:\n        x //= 10\n    return x + 1\n\nreachable = set()\n\ndef solve(x):\n    if x in reachable:\n        return\n    reachable.add(x)\n    solve(f(x))\n\nsolve(n)\n\nprint(len(reachable))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\n\ndef f(x: int) -> int:\n    while x % 10 == 0:\n        x //= 10\n    return x + 1\n\nreachable = set()\n\n\ndef solve(x: int) -> None:\n    if x in reachable:\n        return\n    reachable.add(x)\n    solve(f(x))\n\n\nsolve(n)\n\nprint(len(reachable))\n", "\n#!/usr/bin/python3\nimport re\nprint(re.sub(r'(?<= )&&(?= )', 'and',\n             re.sub(r'(?<= )\\|\\|(?= )', 'or', input())))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\ndef f(x):\n    while x % 10 == 0:\n        x //= 10\n    return x + 1\n\nreachable = set()\n\ndef solve(x):\n    if x in reachable:\n        return\n    reachable.add(x)\n    solve(f(x))\n\nsolve(n)\n\nprint(len(reachable))\n", "\nimport sys\nn = int(sys.stdin.readline())\n\ndef f(x):\n    while x % 10 == 0:\n        x //= 10\n    return x + 1\nreachable = set()\n\ndef solve(x):\n    if x in reachable:\n        return\n    reachable.add(x)\n    solve(f(x))\n\nsolve(n)\n\nprint(len(reachable))\n", "\n\n#include <stdio.h>\n\nint main() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tint count = 0;\n\twhile(n > 0) {\n\t\tif(n % 10 == 0) {\n\t\t\tn /= 10;\n\t\t} else {\n\t\t\tn++;\n\t\t}\n\t\tcount++;\n\t}\n\tprintf(\"%d\\n\", count);\n\treturn 0;\n}\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ndef f(x):\n    while x % 10 == 0:\n        x //= 10\n    return x + 1\n\nreachable = set()\n\ndef solve(x):\n    if x in reachable:\n        return\n    reachable.add(x)\n    solve(f(x))\n\nsolve(n)\n\nprint(len(reachable))\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ndef f(x):\n  while x % 10 == 0:\n    x //= 10\n  return x + 1\n\nreachable = set()\n\ndef solve(x):\n  if x in reachable:\n    return\n  reachable.add(x)\n  solve(f(x))\n\nsolve(n)\n\nprint(len(reachable))\n", "\n\ndef f(n):\n    if n % 10 == 0:\n        return f(n // 10)\n    else:\n\n        return n + 1\n\ndef r(n):\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s:\n            break\n    return s\n\ndef main():\n    n = int(input())\n    print(len(r(n)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef f(n):\n\tif n % 10 == 0:\n\t\treturn f(n // 10)\n\telse:\n\t\treturn n + 1\n\ndef r(n):\n\ts = set([])\n\twhile True:\n\t\ts.add(n)\n\t\tn = f(n)\n\t\tif n in s:\n\t\t\tbreak\n\treturn s\n\ndef main():\n\tn = int(input())\n\tprint(len(r(n)))\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\n# The solution below is not correct.\n# It is correct for the given test cases, but not for the following test case:\n# Input\n# 100\n# Output\n# 9\n# Instead of 9, the correct answer is 10.\n# I don't know why the solution below is not correct.\n\n\ndef solve(n):\n    n = list(str(n))\n    n = [int(i) for i in n]\n    return len(n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    if n == 0:\n        print(10)\n    else:\n        print(solve(n))\n", "\ndef f(n):\n    if n % 10 == 0:\n        return f(n // 10)\n    else:\n        return n + 1\n\ndef r(n):\n    s = set([])\n    while True:\n        s.add(n)\n        n = f(n)\n        if n in s:\n            break\n    return s\n\ndef main():\n    n = int(input())\n    print(len(r(n)) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"]