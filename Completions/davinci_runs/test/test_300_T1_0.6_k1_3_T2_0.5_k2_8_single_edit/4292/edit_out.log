2022-04-24 01:12:38.427295 num operations 1
2022-04-24 01:12:38.427312 size on input set 1
2022-04-24 01:12:38.427466 using api key soukgp
2022-04-24 01:12:52.088794 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n"
    },
    {
      "index": 1,
      "text": "\nprint('hello world')\n"
    },
    {
      "index": 2,
      "text": "\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n"
    },
    {
      "index": 3,
      "text": "\n\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(fruits[:K]))\n"
    },
    {
      "index": 4,
      "text": "\n\n"
    },
    {
      "index": 5,
      "text": "\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n"
    },
    {
      "index": 6,
      "text": "# coding: utf-8\n\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n"
    },
    {
      "index": 7,
      "text": "\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K])) \n"
    }
  ],
  "created": 1650762758,
  "object": "edit"
}
2022-04-24 01:12:52.089111 fix syntax errors 8 ['\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n', "\nprint('hello world')\n", '\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n', '\n\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(fruits[:K]))\n', '\n\n', '\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n', '# coding: utf-8\n\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K]))\n', '\nN, K = map(int, input().split())\nfruits = sorted(list(map(int, input().split())))\nprint(sum(fruits[:K])) \n']
2022-04-24 01:12:52.089142 size on output set 6
2022-04-24 01:12:52.089159 num operations 1
2022-04-24 01:12:52.089165 size on input set 1
2022-04-24 01:12:52.089283 using api key jaanu
2022-04-24 01:13:05.753966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, K = map(int, input().split())\n\nbamboo = list(map(int, input().split()))\nbamboo.sort()\n\nprint(sum(bamboo[:K]))\n"
    },
    {
      "index": 1,
      "text": "\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K])) \n"
    },
    {
      "index": 2,
      "text": "N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n"
    },
    {
      "index": 3,
      "text": "#\n\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n"
    },
    {
      "index": 4,
      "text": "N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n"
    },
    {
      "index": 5,
      "text": "\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n"
    },
    {
      "index": 6,
      "text": "N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n"
    },
    {
      "index": 7,
      "text": "\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n"
    }
  ],
  "created": 1650762772,
  "object": "edit"
}
2022-04-24 01:13:05.754243 fix syntax errors 8 ['\n\nN, K = map(int, input().split())\n\nbamboo = list(map(int, input().split()))\nbamboo.sort()\n\nprint(sum(bamboo[:K]))\n', '\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K])) \n', 'N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n', '#\n\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n', 'N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n', '\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n', 'N, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\nprint(sum(fruit[:K]))\n', '\nN, K = map(int, input().split())\n\nfruit = list(map(int, input().split()))\nfruit.sort()\n\nprint(sum(fruit[:K]))\n']
2022-04-24 01:13:05.754273 size on output set 5
2022-04-24 01:13:05.754288 num operations 1
2022-04-24 01:13:05.754294 size on input set 1
2022-04-24 01:13:05.754430 using api key kouti
2022-04-24 01:13:27.119652 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 3,
      "text": "\n# \uc218\ud559 \uc2dc\ud5d8\uc744 \ubcf4\ub294 \ub3d9\uc548 \uc810\uc218\ub97c \uae30\ub85d\ud55c \uc2dc\ud5d8\uc9c0\uac00 \uc788\ub2e4.\n# \uc774 \uc2dc\ud5d8\uc9c0\uc758 \uc810\uc218\ub294 \uc810\uc218\ub97c \uc4f0\uace0 \ub09c \ub4a4\uc5d0 \ub4a4\uc9d1\uc5b4\uc11c \uc4f0\ub294 \ud615\ud0dc\ub85c \uc801\ud600\uc788\ub2e4.\n# \uc608\ub97c \ub4e4\uc5b4, \uc810\uc218\uac00 87\uc810\uc774\ub77c\uba74 \ucc98\uc74c\uc5d4 87\uc744 \uc4f0\uace0, \ub4a4\uc9d1\uc5b4\uc11c 78\uc744 \uc4f4\ub2e4.\n# \uc810\uc218\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc2dc\ud5d8\uc9c0\uc758 \uc810\uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n#\n# \uc785\ub825\n# \uccab\uc9f8 \uc904\uc5d0 \uc2dc\ud5d8\uc9c0\uc758 \uc810\uc218\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. \uc810\uc218\ub294 \ud56d\uc0c1 \uc591\uc758 \uc815\uc218\uc774\uba70, 100\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc815\uc218\uc774\ub2e4.\n#\n# \ucd9c\ub825\n# \uc2dc\ud5d8\uc9c0\uc758 \uc810\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n#\n# \uc608\uc81c \uc785\ub825 1\n# 87\n# \uc608\uc81c \ucd9c\ub825 1\n# 78\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n# \uc911\uc694\nsys.setrecursionlimit(10 ** 6)\n\n# \uc785\ub825\nN, M = map(int, sys.stdin.readline().rstrip().split())\ncards = list(map(int, sys.stdin.readline().rstrip().split()))\ncards.sort()\n\n# \uc7ac\uadc0\ud568\uc218\ndef dfs(depth, start):\n    if depth == 3:\n        if sum(result) == M:\n            print(result)\n        return\n    for i in range(start, N):\n        result[depth] = cards[i]\n        dfs(depth + 1, i + 1)\n\n# \uba54\uc778\nresult = [0] * 3\ndfs(0, 0)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n"
    }
  ],
  "created": 1650762785,
  "object": "edit"
}
2022-04-24 01:13:27.144778 fix syntax errors 8 ['\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\n\nimport sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\n# 수학 시험을 보는 동안 점수를 기록한 시험지가 있다.\n# 이 시험지의 점수는 점수를 쓰고 난 뒤에 뒤집어서 쓰는 형태로 적혀있다.\n# 예를 들어, 점수가 87점이라면 처음엔 87을 쓰고, 뒤집어서 78을 쓴다.\n# 점수가 주어졌을 때, 시험지의 점수를 구하는 프로그램을 작성하시오.\n#\n# 입력\n# 첫째 줄에 시험지의 점수가 주어진다. 점수는 항상 양의 정수이며, 100보다 작거나 같은 정수이다.\n#\n# 출력\n# 시험지의 점수를 출력한다.\n#\n# 예제 입력 1\n# 87\n# 예제 출력 1\n# 78\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n', '\nimport sys\n\n# 중요\nsys.setrecursionlimit(10 ** 6)\n\n# 입력\nN, M = map(int, sys.stdin.readline().rstrip().split())\ncards = list(map(int, sys.stdin.readline().rstrip().split()))\ncards.sort()\n\n# 재귀함수\ndef dfs(depth, start):\n    if depth == 3:\n        if sum(result) == M:\n            print(result)\n        return\n    for i in range(start, N):\n        result[depth] = cards[i]\n        dfs(depth + 1, i + 1)\n\n# 메인\nresult = [0] * 3\ndfs(0, 0)\n', '\nimport sys\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\n\nprices = sorted(list(map(int, sys.stdin.readline().rstrip().split())))\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)\n']
2022-04-24 01:13:27.144902 size on output set 6
