2022-04-24 00:41:22.071686 num operations 1
2022-04-24 00:41:22.071707 size on input set 1
2022-04-24 00:41:22.071842 using api key sunu
2022-04-24 00:41:39.969685 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 087\n# Problem A\n\nif __name__ == '__main__':\n    X = int(input())\n    A = int(input())\n    B = int(input())\n\n    print((X - A) % B)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem C\n\nif __name__ == '__main__':\n    from collections import Counter\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = 0\n\n    for i in range(n):\n        if a.count(i) == 1:\n            result = a.index(i)\n            break\n\n    print(result + 1)\n"
    },
    {
      "index": 2,
      "text": "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 3,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print(a + b)\n"
    },
    {
      "index": 4,
      "text": "# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 5,
      "text": "\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n"
    },
    {
      "index": 6,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest.\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 7,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 001\n# Problem A\n\nif __name__ == '__main__':\n    H1 = int(input())\n    H2 = int(input())\n\n    print(H1 - H2)\n"
    }
  ],
  "created": 1650760882,
  "object": "edit"
}
2022-04-24 00:41:39.969985 fix syntax errors 8 ["\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 087\n# Problem A\n\nif __name__ == '__main__':\n    X = int(input())\n    A = int(input())\n    B = int(input())\n\n    print((X - A) % B)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem C\n\nif __name__ == '__main__':\n    from collections import Counter\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = 0\n\n    for i in range(n):\n        if a.count(i) == 1:\n            result = a.index(i)\n            break\n\n    print(result + 1)\n", "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print(a + b)\n", "# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", '\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n', "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest.\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 001\n# Problem A\n\nif __name__ == '__main__':\n    H1 = int(input())\n    H2 = int(input())\n\n    print(H1 - H2)\n"]
2022-04-24 00:41:39.970028 size on output set 8
2022-04-24 00:41:39.970040 num operations 1
2022-04-24 00:41:39.970045 size on input set 1
2022-04-24 00:41:39.970183 using api key soukgp
2022-04-24 00:42:00.078579 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"Hello\")\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input().upper()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        substring = s[i:j]\n        if \"A\" in substring and \"C\" in substring and \"G\" in substring and \"T\" in substring:\n            acgt_strings.append(substring)\n\n# print the length of the longest substring\nprint(max([len(substring) for substring in acgt_strings]))\n"
    },
    {
      "index": 3,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 4,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 5,
      "text": "\n\ns = input(\"Enter the string : \")\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 6,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T,\n# and store the length of the longest substring\nmax_length = 0\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if \"A\" in s[i:j+1] and \"C\" in s[i:j+1] and \"G\" in s[i:j+1] and \"T\" in s[i:j+1]:\n            acgt_strings.append(s[i:j+1])\n            if len(s[i:j+1]) > max_length:\n                max_length = len(s[i:j+1])\n\n# print the length of the longest substring\nprint(max_length)\n"
    },
    {
      "index": 7,
      "text": "\n\ns = input()\n\n# # create a list of substrings of s that are only A, C, G, and T\n# acgt_strings = []\n# for i in range(len(s)):\n#     for j in range(i+1, len(s)+1):\n#         acgt_string = s[i:j]\n#         if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n#             acgt_strings.append(acgt_string)\n\n# # print the length of the longest substring\n# print(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    }
  ],
  "created": 1650760900,
  "object": "edit"
}
2022-04-24 00:42:00.078882 fix syntax errors 8 ['\nprint("Hello")\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n\ns = input().upper()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        substring = s[i:j]\n        if "A" in substring and "C" in substring and "G" in substring and "T" in substring:\n            acgt_strings.append(substring)\n\n# print the length of the longest substring\nprint(max([len(substring) for substring in acgt_strings]))\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n\ns = input("Enter the string : ")\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T,\n# and store the length of the longest substring\nmax_length = 0\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if "A" in s[i:j+1] and "C" in s[i:j+1] and "G" in s[i:j+1] and "T" in s[i:j+1]:\n            acgt_strings.append(s[i:j+1])\n            if len(s[i:j+1]) > max_length:\n                max_length = len(s[i:j+1])\n\n# print the length of the longest substring\nprint(max_length)\n', '\n\ns = input()\n\n# # create a list of substrings of s that are only A, C, G, and T\n# acgt_strings = []\n# for i in range(len(s)):\n#     for j in range(i+1, len(s)+1):\n#         acgt_string = s[i:j]\n#         if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n#             acgt_strings.append(acgt_string)\n\n# # print the length of the longest substring\n# print(max([len(acgt_string) for acgt_string in acgt_strings]))\n']
2022-04-24 00:42:00.078922 size on output set 7
2022-04-24 00:42:00.078932 num operations 1
2022-04-24 00:42:00.078937 size on input set 1
2022-04-24 00:42:00.079105 using api key derek
2022-04-24 00:42:16.688619 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n\n\n"
    },
    {
      "index": 2,
      "text": "def f(n):\n    return n * n\nprint(f(5))\n"
    },
    {
      "index": 3,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "def main():\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].upper() == s[i:j]:\n                ans = max(ans,j-i)\n    print(ans)\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].upper() == s[i:j]:\n                ans = max(ans,j-i)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\ns = \"abcdABCD1234\"\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    }
  ],
  "created": 1650760920,
  "object": "edit"
}
2022-04-24 00:42:16.688906 fix syntax errors 8 ['s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', '\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n\n\n', 'def f(n):\n    return n * n\nprint(f(5))\n', 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', "def main():\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].upper() == s[i:j]:\n                ans = max(ans,j-i)\n    print(ans)\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].upper() == s[i:j]:\n                ans = max(ans,j-i)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', '\ns = "abcdABCD1234"\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n']
2022-04-24 00:42:16.688950 size on output set 6
