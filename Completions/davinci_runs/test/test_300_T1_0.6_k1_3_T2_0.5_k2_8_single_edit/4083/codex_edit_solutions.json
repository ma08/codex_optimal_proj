["\n\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in range(n):\n        m = gcd(m, i)\n\n    moves = 0\n    for i in range(n):\n        moves += i // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array) - 1\n    for element in array:\n        answer += math.ceil(element / min_element)\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n\n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i//m\n        \n    if moves >= k:\n        return moves\n    return -1\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, a))\n\n\n\ndef min_num_operations(n, a):\n    return n - len(set(a))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n\n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += (i // m) - 1\n\n    if moves >= k:\n        return (moves // (k-1))\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m - 1\n\n    return moves if moves >= k else -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "import math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer if answer <= k else -1\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "import sys\n\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(min_num_operations(n, k, a), end=\"\")\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in range(n):\n        m = gcd(m, a[i])\n\n    moves = 0\n    for i in range(n):\n        moves += a[i] // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k + 1\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef get_answer(array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1  # \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443\n    return answer\n\n\nif __name__ == \"__main__\":\n    array = [int(x) for x in input().split()]\n    print(get_answer(array))\n", "\nimport math\n\n\ndef get_answer(n, k, array_):\n    answer = 0\n    min_element = min(array_)\n    for element in array_:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array_ = [int(x) for x in input().split()]\n    print(get_answer(n, k, array_))\n", "\ndef get_answer(n):\n    return n\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_answer(n))\n", "def main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element)\n    answer -= n\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    print(min_num_operations(n, a))\n\n\ndef min_num_operations(n, a):\n    return n\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n\n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m - 1\n\n    if moves >= k:\n        return moves + 1\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))\n", "\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n\n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m - 1\n\n    if moves >= k:\n        return moves + 1\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n", "\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in range(n):\n        m = gcd(m, i)\n\n    moves = 0\n    for i in range(n):\n        moves += i // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"]