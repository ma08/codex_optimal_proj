2022-04-24 00:47:23.608569 num operations 1
2022-04-24 00:47:23.608588 size on input set 1
2022-04-24 00:47:23.608747 using api key soukgp
2022-04-24 00:47:39.500029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:  # N^2\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\") \n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\na,b,c,d=input().split()\nprint(\"Good\" if a!=b and a!=c and a!=d and b!=c and b!=d and c!=d else \"Bad\")\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    s = input().split()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]: # if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    s = str(input())\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\") \n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    s = input()\n    print(s[::-1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    s = input().split()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650761243,
  "object": "edit"
}
2022-04-24 00:47:39.500340 fix syntax errors 8 ['\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:  # N^2\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad") \n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\na,b,c,d=input().split()\nprint("Good" if a!=b and a!=c and a!=d and b!=c and b!=d and c!=d else "Bad")\n', '\n\ndef main():\n    s = input().split()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]: # if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = str(input())\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n        print("Bad")\n    else:\n        print("Good")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad") \n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    s = input()\n    print(s[::-1])\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    s = input().split()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n']
2022-04-24 00:47:39.500375 size on output set 7
2022-04-24 00:47:39.500385 num operations 1
2022-04-24 00:47:39.500391 size on input set 1
2022-04-24 00:47:39.500519 using api key soukgp
2022-04-24 00:47:58.162491 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    # Check if the number is 4 digits long\n    if len(s) != 4:\n        # If not, then print Bad and exit\n        print(\"Bad\")\n        return\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read in the number of test cases\n    t = int(input())\n    # Loop through each test case\n    for _ in range(t):\n        # Read in the 4-digit number\n        s = input()\n        # Initialize the previous digit\n        p = 0\n        # Loop through each digit\n        for i in s:\n            # Check if the current digit is the same as the previous digit\n            if i == p:\n                # If so, then print Bad and break\n                print(\"Bad\")\n                break\n            # Otherwise, set the previous digit to the current digit\n            p = i\n        # If no digit is the same as the previous digit, then print Good\n        else:\n            print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read in the number of test cases\n    n = int(input())\n    # Loop through each test case\n    for i in range(n):\n        # Read in the 4-digit number\n        s = input()\n        # Initialize the previous digit\n        p = 0\n        # Loop through each digit\n        for i in s:\n            # Check if the current digit is the same as the previous digit\n            if i == p:\n                # If so, then print Bad and exit\n                print(\"Bad\")\n                break\n            # Otherwise, set the previous digit to the current digit\n            p = i\n        else:\n            # If no digit is the same as the previous digit, then print Good\n            print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    # Read in the number of rows\n    n = int(input())\n    # Loop through the rows\n    for i in range(n):\n        # Print each row\n        print(\"*\" * (i + 1))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = int(input())\n    # Initialize the previous digit\n    p = s % 10\n    s = s // 10\n    # Loop through each digit\n    while s > 0:\n        # Check if the current digit is the same as the previous digit\n        if s % 10 == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = s % 10\n        s = s // 10\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = int(input())\n    # Initialize the previous digit\n    p = 1\n    # Loop through each digit\n    for i in range(1, s + 1):\n        # Check if the current digit is the same as the previous digit\n        if i % 2 == 0:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i + 1\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        # Otherwise, set the previous digit to the current digit\n        p = i \n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650761259,
  "object": "edit"
}
2022-04-24 00:47:58.162820 fix syntax errors 8 ['\n\ndef main():\n    # Read in the 4-digit number\n    # Check if the number is 4 digits long\n    if len(s) != 4:\n        # If not, then print Bad and exit\n        print("Bad")\n        return\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the number of test cases\n    t = int(input())\n    # Loop through each test case\n    for _ in range(t):\n        # Read in the 4-digit number\n        s = input()\n        # Initialize the previous digit\n        p = 0\n        # Loop through each digit\n        for i in s:\n            # Check if the current digit is the same as the previous digit\n            if i == p:\n                # If so, then print Bad and break\n                print("Bad")\n                break\n            # Otherwise, set the previous digit to the current digit\n            p = i\n        # If no digit is the same as the previous digit, then print Good\n        else:\n            print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the number of test cases\n    n = int(input())\n    # Loop through each test case\n    for i in range(n):\n        # Read in the 4-digit number\n        s = input()\n        # Initialize the previous digit\n        p = 0\n        # Loop through each digit\n        for i in s:\n            # Check if the current digit is the same as the previous digit\n            if i == p:\n                # If so, then print Bad and exit\n                print("Bad")\n                break\n            # Otherwise, set the previous digit to the current digit\n            p = i\n        else:\n            # If no digit is the same as the previous digit, then print Good\n            print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the number of rows\n    n = int(input())\n    # Loop through the rows\n    for i in range(n):\n        # Print each row\n        print("*" * (i + 1))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the 4-digit number\n    s = int(input())\n    # Initialize the previous digit\n    p = s % 10\n    s = s // 10\n    # Loop through each digit\n    while s > 0:\n        # Check if the current digit is the same as the previous digit\n        if s % 10 == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = s % 10\n        s = s // 10\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    print("Hello World!")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the 4-digit number\n    s = int(input())\n    # Initialize the previous digit\n    p = 1\n    # Loop through each digit\n    for i in range(1, s + 1):\n        # Check if the current digit is the same as the previous digit\n        if i % 2 == 0:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i + 1\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    # Read in the 4-digit number\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        # Otherwise, set the previous digit to the current digit\n        p = i \n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 00:47:58.162871 size on output set 8
2022-04-24 00:47:58.162882 num operations 1
2022-04-24 00:47:58.162888 size on input set 1
2022-04-24 00:47:58.163046 using api key sunu
2022-04-24 00:48:19.282223 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -----Answer-----\n\nS = input()\n\n# \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\nif S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n    # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Answer-----\n\nS = input() # \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\n\nif len(S) == 4:\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 2,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 3,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 4,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 5,
      "text": "\n\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\uff082\u3064\u9023\u7d9a\u3067\u540c\u3058\u6570\u5b57\u304c\u3042\u308b\u304b\u3069\u3046\u304b\uff09\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 6,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 7,
      "text": "\n\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:  # S\u304c4\u6587\u5b57\u306e\u5834\u5408\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():      # S\u304c4\u6587\u5b57\u306e\u6570\u5024\u3067\u3042\u308b\u5834\u5408\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    }
  ],
  "created": 1650761278,
  "object": "edit"
}
2022-04-24 00:48:19.282624 fix syntax errors 8 ['\n\n# -----Answer-----\n\nS = input()\n\n# 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\nif S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n    # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n\n# -----Answer-----\n\nS = input() # 入力される文字列の長さが4であることを利用する\n\nif len(S) == 4:\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する（2つ連続で同じ数字があるかどうか）\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:  # Sが4文字の場合\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():      # Sが4文字の数値である場合\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n']
2022-04-24 00:48:19.282699 size on output set 5
