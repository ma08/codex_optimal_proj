["\n\ndef main():\n    n = int(input())\n\n    hard = 0\n    soft = 0\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft += 1\n        else:\n            hard += 1\n    print(min(soft, hard) * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/bash\n\n# Author: Michael Ambrus (ambrmi09@gmail.com)\n# 2013-05-19\n\nif [ -z $FILE_SH ]; then\n\nFILE_SH=\"file.sh\"\n\n# Returns the file-type of a file\n#\n# $1 - File to get file-type of\nfunction file_type() {\n\tfile --mime-type \"${1}\" | awk '{print $NF}'\n}\n\nsource s3.ebasename.sh\nif [ \"$FILE_SH\" == $( ebasename $0 ) ]; then\n\t#Not sourced, do something with this.\n\n\tFILE_SH_INFO=${FILE_SH}\n\tsource .src.ui..file.sh\n\n\tfile \"$@\"\n\n\texit $?\nfi\n\nfi\n", "import os\nimport shutil\n\n\nclass File(object):\n    def __init__(self, file_path):\n        self.file_path = file_path\n\n    def read(self):\n        with open(self.file_path, 'r') as f:\n            return f.read()\n\n    def write(self, content):\n        with open(self.file_path, 'w') as f:\n            return f.write(content)\n\n    def write_lines(self, lines):\n        with open(self.file_path, 'w') as f:\n            return f.writelines(lines)\n\n    def append(self, content):\n        with open(self.file_path, 'a') as f:\n            return f.write(content)\n\n    def append_lines(self, lines):\n        with open(self.file_path, 'a') as f:\n            return f.writelines(lines)\n\n    def read_lines(self):\n        with open(self.file_path, 'r') as f:\n            return f.readlines()\n\n    def copy(self, new_path):\n        shutil.copy(self.file_path, new_path)\n\n    def move(self, new_path):\n        shutil.move(self.file_path, new_path)\n\n    def remove(self):\n        os.remove(self.file_path)\n\n    @property\n    def size(self):\n        return os.path.getsize(self.file_path)\n\n    @property\n    def exists(self):\n        return os.path.exists(self.file_path)\n\n    @property\n    def is_file(self):\n        return os.path.isfile(self.file_path)\n\n    @property\n    def is_directory(self):\n        return os.path.isdir(self.file_path)\n\n    @property\n    def is_link(self):\n        return os.path.islink(self.file_path)\n\n    @property\n    def is_mount(self):\n        return os.path.ismount(self.file_path)\n\n    @property\n    def atime(self):\n        return os.path.getatime(self.file_path)\n\n    @property\n    def mtime(self):\n        return os.path.getmtime(self.file_path)\n\n    @property\n    def ctime(self):\n        return os.path.getctime(self.file_path)\n\n    @property\n    def extension(self):\n        return os.path.splitext(self.file_path)[1]\n\n    @property\n    def name(self):\n        return os.path.basename(self.file_path)\n\n    @property\n    def directory(self):\n        return os.path.dirname(self.file_path)\n\n    @property\n    def parent_directory(self):\n        return os.path.dirname(os.path.dirname(self.file_path))\n\n\nclass Directory(object):\n    def __init__(self, directory_path):\n        self.directory_path = directory_path\n\n    def create(self):\n        os.makedirs(self.directory_path)\n\n    def remove(self):\n        shutil.rmtree(self.directory_path)\n\n    def move(self, new_path):\n        shutil.move(self.directory_path, new_path)\n\n    def copy(self, new_path):\n        shutil.copytree(self.directory_path, new_path)\n\n    @property\n    def files(self):\n        return [File(os.path.join(self.directory_path, f)) for f in os.listdir(self.directory_path) if\n                os.path.isfile(os.path.join(self.directory_path, f))]\n\n    @property\n    def directories(self):\n        return [Directory(os.path.join(self.directory_path, d)) for d in os.listdir(self.directory_path) if\n                os.path.isdir(os.path.join(self.directory_path, d))]\n\n    @property\n    def exists(self):\n        return os.path.exists(self.directory_path)\n\n    @property\n    def is_directory(self):\n        return os.path.isdir(self.directory_path)\n\n    @property\n    def is_link(self):\n        return os.path.islink(self.directory_path)\n\n    @property\n    def is_mount(self):\n        return os.path.ismount(self.directory_path)\n\n    @property\n    def atime(self):\n        return os.path.getatime(self.directory_path)\n\n    @property\n    def mtime(self):\n        return os.path.getmtime(self.directory_path)\n\n    @property\n    def ctime(self):\n        return os.path.getctime(self.directory_path)\n\n    @property\n    def name(self):\n        return os.path.basename(self.directory_path)\n\n    @property\n    def directory(self):\n        return os.path.dirname(self.directory_path)\n\n    @property\n    def parent_directory(self):\n        return os.path.dirname(os.path.dirname(self.directory_path))\n", "\n", "#include <stdio.h>\n\nint main()\n{\n\tFILE *fp = fopen(\"file.txt\", \"w+\");\n\tfprintf(fp, \"This is testing for fprintf...\\n\");\n\tfputs(\"This is testing for fputs...\\n\", fp);\n\tfclose(fp);\n\n\treturn 0;\n}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@author:knktc\n@contact:me@knktc.com\n@create:2018-06-06 11:08\n\"\"\"\n\nimport os\nimport sys\n\nfrom .server import Server\nfrom .command import Command\nfrom .utils import get_logger\n\n\ndef main():\n    logger = get_logger()\n    logger.info('start')\n    logger.info('pid: {}'.format(os.getpid()))\n    logger.info('uid: {}'.format(os.getuid()))\n    logger.info('gid: {}'.format(os.getgid()))\n    logger.info('cwd: {}'.format(os.getcwd()))\n    logger.info('args: {}'.format(sys.argv))\n    logger.info('env: {}'.format(os.environ.get('ENV')))\n    logger.info('end')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"hard\":\n            hard.append(int(a))\n        elif b == \"soft\":\n            soft.append(int(a))\n\n    soft = sorted(soft, reverse=True)\n    hard = sorted(hard, reverse=True)\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/bash\n\n# This is a simple bash script to fix the syntax errors in the files.\n# It is used to fix the syntax error in the files.\n\n# Author : Praveen Kumar Pendyala\n# Email  : praveen.pendyala@gmail.com\n\n# Usage : ./fix_syntax.sh <file_name>\n\n# Exit if any command fails.\nset -e\n\n# Exit if any variable is not set.\nset -u\n\n# Exit if any command in a pipe fails.\nset -o pipefail\n\n# Set the input file name.\nFILE_NAME=\"$1\"\n\n# Set the output file name.\nOUTPUT_FILE_NAME=\"$FILE_NAME.fixed\"\n\n# Set the sed command to remove the extra spaces.\nSED_COMMAND=\"s/\\s\\+/ /g\"\n\n# Remove the extra spaces in the file.\nsed -r \"$SED_COMMAND\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\nsed -r \"s/\\s$//g\" \"$FILE_NAME\" > \"$OUTPUT_FILE_NAME\"\n\n# Remove the extra spaces in the beginning of the lines.\nsed -r \"s/^\\s//g\" \"$OUTPUT_FILE_NAME\" > \"$FILE_NAME\"\n\n# Remove the extra spaces in the end of the lines.\n", "#!/usr/bin/python3\n\n#importing the time module\nimport time\n\n#welcoming the user\nname = input(\"What is your name? \")\n\nprint (\"Hello, \" + name, \"Time to play hangman!\")\n\nprint (\"\")\n\n#wait for 1 second\ntime.sleep(1)\n\nprint (\"Start guessing...\")\ntime.sleep(0.5)\n\n#here we set the secret\nword = \"secret\"\n\n#creates an variable with an empty value\nguesses = ''\n\n#determine the number of turns\nturns = 10\n\n# Create a while loop\n\n#check if the turns are more than zero\nwhile turns > 0:         \n\n    # make a counter that starts with zero\n    failed = 0             \n\n    # for every character in secret_word    \n    for char in word:      \n\n    # see if the character is in the players guess\n        if char in guesses:    \n    \n        # print then out the character\n            print (char)    \n\n        else:\n    \n        # if not found, print a dash\n            print (\"_\")     \n       \n        # and increase the failed counter with one\n            failed += 1    \n\n    # if failed is equal to zero\n\n    # print You Won\n    if failed == 0:        \n        print (\"You won\")  \n\n    # exit the script\n        break              \n\n    print\n\n    # ask the user go guess a character\n    guess = input(\"guess a character:\") \n\n    # set the players guess to guesses\n    guesses += guess                    \n\n    # if the guess is not found in the secret word\n    if guess not in word:  \n \n     # turns counter decreases with 1 (now 9)\n        turns -= 1        \n \n    # print wrong\n        print (\"Wrong\")    \n \n    # how many turns are left\n        print (\"You have\", + turns, 'more guesses') \n \n    # if the turns are equal to zero\n        if turns == 0:           \n    \n        # print \"You Loose\"\n            print (\"You Loose\")  \n", "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[0])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\"\")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i + 1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "\n\ndef main():\n    n = int(input())\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    count = 0\n    for i in range(0, len(cheeses) - 1):\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n    print(count)\n\n\ncheese_board()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input(\"\"))\n    cheeses = []\n    while num_cheeses > 0:\n        line = input(\"\").split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "def read_file(file_name):\n    with open(file_name, 'r') as f:\n        lines = f.readlines()\n    return lines\n\n\ndef write_file(file_name, content):\n    with open(file_name, 'w') as f:\n        f.write(content)\n\n\ndef append_file(file_name, content):\n    with open(file_name, 'a') as f:\n        f.write(content)\n", "var fs = require(\"fs\");\n\nfs.readFile(\"best_things_ever.txt\", \"utf8\", function(error, data) {\n\n  if (error) {\n    return console.log(error);\n  }\n\n  console.log(data);\n\n  var dataArr = data.split(\",\");\n\n  console.log(dataArr);\n\n});\n", "\n\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for _ in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n\n    soft = set()\n    hard = set()\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i + 1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n"]