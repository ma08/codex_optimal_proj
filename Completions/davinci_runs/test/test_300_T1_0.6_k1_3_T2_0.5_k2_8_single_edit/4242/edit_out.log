2022-04-24 00:23:22.015038 num operations 1
2022-04-24 00:23:22.015056 size on input set 1
2022-04-24 00:23:22.015175 using api key jaanu
2022-04-24 00:23:39.399875 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nA, B, K = [int(input()) for _ in range(3)]\n\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\nprint(divisors[K - 1])\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef main():\n    # Get inputs\n    A, B, K = [int(input()) for _ in range(3)]\n\n    # Get GCD and all divisors\n    gcd = math.gcd(A, B)\n    divisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\n    divisors.sort(reverse=True)\n\n    # Print K-th largest positive integer that divides both A and B.\n    print(divisors[K - 1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 3,
      "text": "\n\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors.\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 5,
      "text": "import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 6,
      "text": "import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    }
  ],
  "created": 1650759802,
  "object": "edit"
}
2022-04-24 00:23:39.400175 fix syntax errors 8 ['\nimport math\n\nA, B, K = [int(input()) for _ in range(3)]\n\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\nprint(divisors[K - 1])\n', "\n\nimport math\n\ndef main():\n    # Get inputs\n    A, B, K = [int(input()) for _ in range(3)]\n\n    # Get GCD and all divisors\n    gcd = math.gcd(A, B)\n    divisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\n    divisors.sort(reverse=True)\n\n    # Print K-th largest positive integer that divides both A and B.\n    print(divisors[K - 1])\n\n\nif __name__ == '__main__':\n    main()\n", '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\n\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors.\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', 'import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', 'import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n']
2022-04-24 00:23:39.400219 size on output set 5
2022-04-24 00:23:39.400230 num operations 1
2022-04-24 00:23:39.400256 size on input set 1
2022-04-24 00:23:39.400395 using api key kouti
2022-04-24 00:24:01.644942 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b # min(a, b)\nb_prime = a if a > b else b # max(a, b)\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 1,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k, where k is the k-th smallest number\nprint(int(b_prime / k))\n"
    },
    {
      "index": 2,
      "text": "\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b) = b if a < b else a\n# b_prime = gcd(a, b) = a if a < b else b\na_prime = b if a < b else a\nb_prime = a if a < b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 3,
      "text": "#!/bin/python3\n\nimport sys\n\n\n# ============\n# Solution\n# ============\n\ndef gcd(a, b):\n    a_prime, b_prime = a, b\n\n    while a_prime != 0:\n        a_prime, b_prime = b_prime % a_prime, a_prime\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 4,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b) or a_prime = b_prime\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 5,
      "text": "\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 6,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a <= b else b\nb_prime = a if a >= b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 7,
      "text": "\n# https://www.hackerrank.com/challenges/maximum-draws/problem\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    }
  ],
  "created": 1650759819,
  "object": "edit"
}
2022-04-24 00:24:01.645505 fix syntax errors 8 ["\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b # min(a, b)\nb_prime = a if a > b else b # max(a, b)\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k, where k is the k-th smallest number\nprint(int(b_prime / k))\n", "\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b) = b if a < b else a\n# b_prime = gcd(a, b) = a if a < b else b\na_prime = b if a < b else a\nb_prime = a if a < b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", '#!/bin/python3\n\nimport sys\n\n\n# ============\n# Solution\n# ============\n\ndef gcd(a, b):\n    a_prime, b_prime = a, b\n\n    while a_prime != 0:\n        a_prime, b_prime = b_prime % a_prime, a_prime\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n', "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b) or a_prime = b_prime\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a <= b else b\nb_prime = a if a >= b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\n# https://www.hackerrank.com/challenges/maximum-draws/problem\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"]
2022-04-24 00:24:01.645613 size on output set 8
2022-04-24 00:24:01.645634 num operations 1
2022-04-24 00:24:01.645645 size on input set 1
2022-04-24 00:24:01.645939 using api key soukgp
2022-04-24 00:24:15.794361 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k - 1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for _ in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "from fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k-1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom math import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "from fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650759841,
  "object": "edit"
}
2022-04-24 00:24:15.794643 fix syntax errors 8 ['\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k - 1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for _ in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', 'from fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k-1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', 'from fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 00:24:15.794840 size on output set 7
