["\n\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\n\n\nprint(result)\n", "#!/usr/bin/env python3\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]]) if dp[0][0][x] != -1 else 0\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\n#\n# n, k, x = map(int, input().split())\n# arr = list(map(int, input().split()))\n#\n# if k > x:\n#     print(-1)\n#     exit()\n#\n# # For each index i, dp[i] is the max sum of beauty values of pictures that\n# # can be posted from index i to the end of the array\n# dp = [0] * (n+1)\n# dp[-1] = 0\n# for i in range(n-1, -1, -1):\n#     dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n#\n# print(dp[0])\n", "\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n + 1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n", "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n)\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k-1)] + arr[i])\n\nprint(dp[0])\n", "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n", "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n", "\n\n# SOLUTION\nimport sys, heapq\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k or k == 1:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "\n# https://www.hackerrank.com/challenges/maximize-it/problem\n\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n        return sum(a) * x\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, min(k+1, i+1)):\n            dp[i][j][1] = sum(a[i-j:i])\n\n    for i in range(1, n+1):\n        for j in range(1, min(k+1, i+1)):\n            for l in range(2, min(x+1, i-j+2)):\n                dp[i][j][l] = dp[i-1][j][l]\n                for m in range(1, j+1):\n                    dp[i][j][l] = max(dp[i][j][l], dp[i-m][j][l-1]+sum(a[i-j:i]))\n\n    return max([max(x) for x in dp[n][k]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 1:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:]) if x > 1 else 0\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 1:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\nprint(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "\n#include <iostream>\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split() \nn, k, x = map(int, data[:3]) \na = list(map(int, data[3:])) \n\nif x < k: \n    print(-1) \n    sys.exit(0) \n\nresult = sum(a[:k]) \n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "import sys\n\n\n# sys.stdin = open('input.txt')\n# sys.stdout = open('output.txt', 'w')\n\nf = sys.stdin\no = sys.stdout\n\ndef main():\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    if k > x:\n        print(-1)\n        exit()\n\n    # For each index i, dp[i] is the max sum of beauty values of pictures that\n    # can be posted from index i to the end of the array\n    dp = [0] * (n+1)\n    dp[-1] = 0\n    for i in range(n-1, -1, -1):\n        dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\n    print(dp[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\tmax_sum = -1\n\tfor i in range(n-k+1):\n\t\tcurr_sum = sum(a[i:i+k])\n\t\tcurr_sum += brute_force(n-k, k, x-1, a[i+k:])\n\t\tmax_sum = max(max_sum, curr_sum)\n\treturn max_sum\n\ndef dp(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\n\tdp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tdp[i][j][1] = sum(a[i:i+j+1])\n\t\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tfor l in range(2, x+1):\n\t\t\t\tfor m in range(i+j+1, n):\n\t\t\t\t\tif j+m-i+1 >= k:\n\t\t\t\t\t\tdp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\t\n\treturn max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\n\ndef get_max_beauty(n, k, x, arr):\n    if k > x:\n        return -1\n\n    # For each index i, dp[i] is the max sum of beauty values of pictures that\n    # can be posted from index i to the end of the array\n    dp = [0] * (n+1)\n    dp[-1] = 0\n    for i in range(n-1, -1, -1):\n        dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\n    return dp[0]\n\nif __name__ == \"__main__\":\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(get_max_beauty(n, k, x, arr))\n", "\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n", "\nimport sys\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "\n\n# n,k,x = [int(x) for x in input().split()]\n# a = [int(x) for x in input().split()]\n\n# def brute_force(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n#     max_sum = -1\n#     for i in range(n-k+1):\n#         curr_sum = sum(a[i:i+k])\n#         curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n#         max_sum = max(max_sum, curr_sum)\n#     return max_sum\n\n# def dp(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n\n#     dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             dp[i][j][1] = sum(a[i:i+j+1])\n    \n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             for l in range(2, x+1):\n#                 for m in range(i+j+1, n):\n#                     if j+m-i+1 >= k:\n#                         dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n#     return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\n# print(dp(n,k,x,a))\n\n# def dp(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n\n#     dp = [[[0 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             dp[i][j][1] = sum(a[i:i+j+1])\n    \n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             for l in range(2, x+1):\n#                 for m in range(i+j+1, n):\n#                     if j+m-i+1 >= k:\n#                         dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n#     return max([max(x) for x in dp[0][0]])\n\n# print(dp(n,k,x,a))\n\n# def dp(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n\n#     dp = [[[0 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             dp[i][j][1] = sum(a[i:i+j+1])\n    \n#     for i in range(n):\n#         for j in range(k):\n#             if i+j >= n:\n#                 break\n#             for l in range(2, x+1):\n#                 for m in range(i+j+1, n):\n#                     if j+m-i+1 >= k:\n#                         dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n#     return max([max(x) for x in dp[0][0]])\n\n# print(dp(n,k,x,a))\n", "\nfor i in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    if n == k:\n        print(sum(a))\n    else:\n        for i in range(k):\n            a.append(a[i])\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i+j >= n:\n                    break\n                dp[i][j] = sum(a[i:j+1])\n        max_sum = -1\n        for i in range(n):\n            for j in range(n):\n                if i+j >= n:\n                    break\n                max_sum = max(max_sum, dp[i][j])\n        print(max_sum)\n", "\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n", "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[n] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"]