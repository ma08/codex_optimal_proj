2022-04-23 23:57:24.433269 num operations 1
2022-04-23 23:57:24.433291 size on input set 1
2022-04-23 23:57:24.433448 using api key kouti
2022-04-23 23:57:41.945167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys;s=sys.stdin.readline;r=range;n,m=map(int,s().split());d=dict.fromkeys(r(1,m+1),0);exec('for i in r(n):\\n for j in map(int,s().split()[1:]):\\n  d[j]+=1\\nprint(sum([1 for e in d.values() if e==n]))');\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0) # dict.fromkeys(keys, value)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, input().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650758244,
  "object": "edit"
}
2022-04-23 23:57:41.945473 fix syntax errors 8 ["import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys;s=sys.stdin.readline;r=range;n,m=map(int,s().split());d=dict.fromkeys(r(1,m+1),0);exec('for i in r(n):\\n for j in map(int,s().split()[1:]):\\n  d[j]+=1\\nprint(sum([1 for e in d.values() if e==n]))');\n", "\nimport sys\n\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M+1), 0) # dict.fromkeys(keys, value)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, input().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 23:57:41.945518 size on output set 8
2022-04-23 23:57:41.945529 num operations 1
2022-04-23 23:57:41.945534 size on input set 1
2022-04-23 23:57:41.945660 using api key kouti
2022-04-23 23:58:01.326852 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 3,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 4,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 5,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = []\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list.append(list(map(int, input().split())))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    # Get input\n    N, M = map(int, input().split())\n\n    # Init\n    food_list = [[] for _ in range(N)]\n    for i in range(N):\n        K = int(input().split()[0])\n        food_list[i] = list(map(int, input().split()))\n\n    # Main\n    answer = 0\n    for i in range(1, M+1):\n        if all(i in food for food in food_list):\n            answer += 1\n    print(answer)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    }
  ],
  "created": 1650758261,
  "object": "edit"
}
2022-04-23 23:58:01.327253 fix syntax errors 8 ['\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = []\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list.append(list(map(int, input().split())))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', "\n\ndef main():\n    # Get input\n    N, M = map(int, input().split())\n\n    # Init\n    food_list = [[] for _ in range(N)]\n    for i in range(N):\n        K = int(input().split()[0])\n        food_list[i] = list(map(int, input().split()))\n\n    # Main\n    answer = 0\n    for i in range(1, M+1):\n        if all(i in food for food in food_list):\n            answer += 1\n    print(answer)\n\nif __name__ == '__main__':\n    main()\n", '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n']
2022-04-23 23:58:01.327294 size on output set 3
2022-04-23 23:58:01.327307 num operations 1
2022-04-23 23:58:01.327314 size on input set 1
2022-04-23 23:58:01.327473 using api key sunu
2022-04-23 23:58:27.336117 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "#\n# I think this is a good example of how to use bit operations\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()] # I don't know what the '_' is for\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1)) # I don't know what the '|=' is for\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n#\n# https://www.hackerrank.com/challenges/restaurant/problem\n#\n\n#\n# I think this is a good example of how to use bit operations.\n# After reading the input, we create a list of integers, where each integer\n# represents a person, and each bit of the integer represents a food.\n#\n# Then we loop through the list and count the number of people who like each\n# food.\n#\n\nimport sys\n\nN, M = [int(n) for n in sys.stdin.readline().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in sys.stdin.readline().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\ncount = 0\n    # Now it's just a simple loop\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 4,
      "text": "\n\n# I think this is a good example of how to use bit operations.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "\n\n#\n# I think this is a good example of how to use bit operations.\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "\n\n# I think this is a good example of how to use bit operations.\n# The idea is to set each bit of an integer to represent a food.\n# Each person has a binary number that specifies which food he likes.\n# The function of bitwise OR is to get a binary number that represents\n# all the foods that one person likes.\n# Then the function of bitwise AND is to check if a food is liked by all people.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "#\n# https://codeforces.com/problemset/problem/1257/A\n#\n#\n#\n#\n\n\ndef solve(n, x, a, b):\n    answer = abs(a - b) + x\n    if a > b:\n        answer -= min(a - 1, n - b)\n    else:\n        answer -= min(b - 1, n - a)\n    return answer\n\n\nq = int(input())\n\nfor _ in range(q):\n    n, x, a, b = [int(n) for n in input().split()]\n    print(solve(n, x, a, b))\n"
    }
  ],
  "created": 1650758281,
  "object": "edit"
}
2022-04-23 23:58:27.336715 fix syntax errors 8 ["\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "#\n# I think this is a good example of how to use bit operations\n#\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()] # I don't know what the '_' is for\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1)) # I don't know what the '|=' is for\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n#\n# https://www.hackerrank.com/challenges/restaurant/problem\n#\n\n#\n# I think this is a good example of how to use bit operations.\n# After reading the input, we create a list of integers, where each integer\n# represents a person, and each bit of the integer represents a food.\n#\n# Then we loop through the list and count the number of people who like each\n# food.\n#\n\nimport sys\n\nN, M = [int(n) for n in sys.stdin.readline().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in sys.stdin.readline().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\ncount = 0\n    # Now it's just a simple loop\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n\n# I think this is a good example of how to use bit operations.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n\n#\n# I think this is a good example of how to use bit operations.\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n\n# I think this is a good example of how to use bit operations.\n# The idea is to set each bit of an integer to represent a food.\n# Each person has a binary number that specifies which food he likes.\n# The function of bitwise OR is to get a binary number that represents\n# all the foods that one person likes.\n# Then the function of bitwise AND is to check if a food is liked by all people.\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", '#\n# https://codeforces.com/problemset/problem/1257/A\n#\n#\n#\n#\n\n\ndef solve(n, x, a, b):\n    answer = abs(a - b) + x\n    if a > b:\n        answer -= min(a - 1, n - b)\n    else:\n        answer -= min(b - 1, n - a)\n    return answer\n\n\nq = int(input())\n\nfor _ in range(q):\n    n, x, a, b = [int(n) for n in input().split()]\n    print(solve(n, x, a, b))\n']
2022-04-23 23:58:27.336786 size on output set 8
