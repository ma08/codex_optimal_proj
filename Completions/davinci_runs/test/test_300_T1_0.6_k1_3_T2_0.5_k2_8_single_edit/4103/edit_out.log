2022-04-23 22:05:38.087698 num operations 1
2022-04-23 22:05:38.087717 size on input set 1
2022-04-23 22:05:38.087836 using api key sunu
2022-04-23 22:06:30.616276 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n        # If we have no batteries left, we can only charge if we have a charger\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n        # If we have no chargers left, we can only charge if we have a battery\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            # If we have an empty charger, we can charge\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            # If we have a full charger, we can charge\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k, m = [int(i) for i in sys.stdin.readline().strip().split()]\n    a = [int(i) for i in sys.stdin.readline().strip().split()]\n    b = [int(i) for i in sys.stdin.readline().strip().split()]\n    a_sum = sum(a)\n    b_sum = sum(b)\n    a_left = n\n    b_left = n\n    a_index = 0\n    b_index = 0\n    a_sum_segments = []\n    b_sum_segments = []\n    while a_index < n:\n        if a_sum_segments == []:\n            a_sum_segments.append(a[a_index])\n        else:\n            a_sum_segments.append(a_sum_segments[-1] + a[a_index])\n        a_index += 1\n    while b_index < n:\n        if b_sum_segments == []:\n            b_sum_segments.append(b[b_index])\n        else:\n            b_sum_segments.append(b_sum_segments[-1] + b[b_index])\n        b_index += 1\n\n    max_segments = []\n    a_index = 0\n    b_index = 0\n    while a_index < n:\n        if a_index + k < n:\n            max_segments.append(a_sum_segments[a_index + k] - a_sum_segments[a_index])\n        else:\n            max_segments.append(a_sum_segments[n-1] - a_sum_segments[a_index])\n        a_index += 1\n    while b_index < n:\n        if b_index + k < n:\n            max_segments.append(b_sum_segments[b_index + k] - b_sum_segments[b_index])\n        else:\n            max_segments.append(b_sum_segments[n-1] - b_sum_segments[b_index])\n        b_index += 1\n\n    max_segments.sort(reverse=True)\n    max_sum = 0\n    m_index = 0\n    while m_index < m:\n        if m_index < len(max_segments):\n            max_sum += max_segments[m_index]\n        else:\n            max_sum += 0\n        m_index += 1\n    print(max_sum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    a.sort()\n    sum_a = sum(a)\n    max_a = max(a)\n    min_a = min(a)\n\n    if sum_a % n == 0:\n        print(0)\n    else:\n        mean = math.floor(sum_a / n)\n        max_a_count = a.count(max_a)\n        min_a_count = a.count(min_a)\n        if max_a_count > 1:\n            print(max_a - mean)\n        elif min_a_count > 1:\n            print(mean - min_a)\n        else:\n            print(max(max_a - mean, mean - min_a))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\nn, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\ns = [int(i) for i in sys.stdin.readline().strip().split(' ')]\nb_left = b\na_left = a\n\nmax_segments = 0\ni = 0\nwhile i < n:\n    if b_left == 0:\n        if a_left > 0:\n            a_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif a_left == 0:\n        if b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif s[i] == 1:\n        if a_left < a:\n            a_left += 1\n            b_left -= 1\n            max_segments += 1\n        elif b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif s[i] == 0:\n        if a_left > 0:\n            a_left -= 1\n            max_segments += 1\n        elif b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    i += 1\nprint(max_segments)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split()]\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    b_left = int(b)\n    a_left = int(a)\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    }
  ],
  "created": 1650751538,
  "object": "edit"
}
2022-04-23 22:06:30.616925 fix syntax errors 8 ["\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n        # If we have no batteries left, we can only charge if we have a charger\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n        # If we have no chargers left, we can only charge if we have a battery\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            # If we have an empty charger, we can charge\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            # If we have a full charger, we can charge\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", '\nimport sys\n\ndef main():\n    n, k, m = [int(i) for i in sys.stdin.readline().strip().split()]\n    a = [int(i) for i in sys.stdin.readline().strip().split()]\n    b = [int(i) for i in sys.stdin.readline().strip().split()]\n    a_sum = sum(a)\n    b_sum = sum(b)\n    a_left = n\n    b_left = n\n    a_index = 0\n    b_index = 0\n    a_sum_segments = []\n    b_sum_segments = []\n    while a_index < n:\n        if a_sum_segments == []:\n            a_sum_segments.append(a[a_index])\n        else:\n            a_sum_segments.append(a_sum_segments[-1] + a[a_index])\n        a_index += 1\n    while b_index < n:\n        if b_sum_segments == []:\n            b_sum_segments.append(b[b_index])\n        else:\n            b_sum_segments.append(b_sum_segments[-1] + b[b_index])\n        b_index += 1\n\n    max_segments = []\n    a_index = 0\n    b_index = 0\n    while a_index < n:\n        if a_index + k < n:\n            max_segments.append(a_sum_segments[a_index + k] - a_sum_segments[a_index])\n        else:\n            max_segments.append(a_sum_segments[n-1] - a_sum_segments[a_index])\n        a_index += 1\n    while b_index < n:\n        if b_index + k < n:\n            max_segments.append(b_sum_segments[b_index + k] - b_sum_segments[b_index])\n        else:\n            max_segments.append(b_sum_segments[n-1] - b_sum_segments[b_index])\n        b_index += 1\n\n    max_segments.sort(reverse=True)\n    max_sum = 0\n    m_index = 0\n    while m_index < m:\n        if m_index < len(max_segments):\n            max_sum += max_segments[m_index]\n        else:\n            max_sum += 0\n        m_index += 1\n    print(max_sum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n', "\nimport math\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    a.sort()\n    sum_a = sum(a)\n    max_a = max(a)\n    min_a = min(a)\n\n    if sum_a % n == 0:\n        print(0)\n    else:\n        mean = math.floor(sum_a / n)\n        max_a_count = a.count(max_a)\n        min_a_count = a.count(min_a)\n        if max_a_count > 1:\n            print(max_a - mean)\n        elif min_a_count > 1:\n            print(mean - min_a)\n        else:\n            print(max(max_a - mean, mean - min_a))\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n\nimport sys\n\nn, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\ns = [int(i) for i in sys.stdin.readline().strip().split(' ')]\nb_left = b\na_left = a\n\nmax_segments = 0\ni = 0\nwhile i < n:\n    if b_left == 0:\n        if a_left > 0:\n            a_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif a_left == 0:\n        if b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif s[i] == 1:\n        if a_left < a:\n            a_left += 1\n            b_left -= 1\n            max_segments += 1\n        elif b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    elif s[i] == 0:\n        if a_left > 0:\n            a_left -= 1\n            max_segments += 1\n        elif b_left > 0:\n            b_left -= 1\n            max_segments += 1\n        else:\n            break\n    i += 1\nprint(max_segments)\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", '\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split()]\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    b_left = int(b)\n    a_left = int(a)\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n']
2022-04-23 22:06:30.617095 size on output set 7
2022-04-23 22:06:30.617113 num operations 1
2022-04-23 22:06:30.617122 size on input set 1
2022-04-23 22:06:30.617307 using api key derek
2022-04-23 22:06:56.791764 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, b, a = map(int, input().split())  # \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\ns = list(map(int, input().split()))  # \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n\nmax_segments = 0  # \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432\ncur_a = a\ncur_b = b\nfor i in range(n):  # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c\n    if s[i] == 1:\n        if cur_b > 0:  # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0431\u0430\u0442\u0430\u0440\u0435\u0439\u043a\u0438\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:  # \u0435\u0441\u043b\u0438 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 \u0441\u0442\u0430\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n                cur_a = a\n        else:  # \u0435\u0441\u043b\u0438 \u0431\u0430\u0442\u0430\u0440\u0435\u0435\u043a \u043d\u0435\u0442, \u0442\u043e \u0437\u0430\u0440\u044f\u0436\u0430\u0435\u043c \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\n            cur_a -= 1\n    else:\n        if cur_a > 0:  # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b\n            cur_a -= 1\n        else:  # \u0435\u0441\u043b\u0438 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 \u043d\u0435\u0442, \u0442\u043e \u0437\u0430\u0440\u044f\u0436\u0430\u0435\u043c \u0431\u0430\u0442\u0430\u0440\u0435\u0439\u043a\u0438\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:  # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u0437\u0430\u0440\u044f\u0434\u0430 \u043d\u0438 \u0432 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u0445, \u043d\u0438 \u0432 \u0431\u0430\u0442\u0430\u0440\u0435\u0439\u043a\u0430\u0445, \u0442\u043e \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0435\u043c \u0446\u0438\u043a\u043b\n        break\n    max_segments += 1  # \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432\nprint(max_segments)\n"
    },
    {
      "index": 1,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_a < a:\n            cur_a += 1\n        elif cur_b > 0:\n            cur_b -= 1\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 3,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\n    if cur_a == 0 and cur_b == 0:\n        break\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 4,
      "text": "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 1\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n        else:\n            if cur_a == 0:\n                break\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n            if cur_a == 0:\n                break\n        else:\n            cur_b -= 1\n            if cur_b == 0:\n                break\n    if cur_a == 0 or cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 5,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 6,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 1\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            if cur_b > 0:\n                cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 7,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    }
  ],
  "created": 1650751590,
  "object": "edit"
}
2022-04-23 22:06:56.792008 fix syntax errors 8 ['\n\nn, b, a = map(int, input().split())  # ввод данных\ns = list(map(int, input().split()))  # ввод данных\n\nmax_segments = 0  # счетчик сегментов\ncur_a = a\ncur_b = b\nfor i in range(n):  # проходим по всем сегментам\n    if s[i] == 1:\n        if cur_b > 0:  # если есть батарейки\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:  # если аккумуляторов стало больше максимального числа\n                cur_a = a\n        else:  # если батареек нет, то заряжаем аккумулятор\n            cur_a -= 1\n    else:\n        if cur_a > 0:  # если есть аккумуляторы\n            cur_a -= 1\n        else:  # если аккумуляторов нет, то заряжаем батарейки\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:  # если нет заряда ни в аккумуляторах, ни в батарейках, то прекращаем цикл\n        break\n    max_segments += 1  # увеличиваем счетчик сегментов\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_a < a:\n            cur_a += 1\n        elif cur_b > 0:\n            cur_b -= 1\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\n    if cur_a == 0 and cur_b == 0:\n        break\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    max_segments += 1\nprint(max_segments)\n', '\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 1\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n        else:\n            if cur_a == 0:\n                break\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n            if cur_a == 0:\n                break\n        else:\n            cur_b -= 1\n            if cur_b == 0:\n                break\n    if cur_a == 0 or cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 1\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            if cur_b > 0:\n                cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n']
2022-04-23 22:06:56.792163 size on output set 6
2022-04-23 22:06:56.792177 num operations 1
2022-04-23 22:06:56.792184 size on input set 1
2022-04-23 22:06:56.792304 using api key derek
2022-04-23 22:07:20.147262 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, b, a, s, i=0, b_charge=0, a_charge=0, max_dist=0):\n    # initialize variables\n    b_charge = b_charge\n    a_charge = a_charge\n    max_dist = max_dist\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge = a_charge + 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge = b_charge + 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge = a_charge - 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge = b_charge - 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist = max_dist + 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 0\n    b_charge = b[0]\n    a_charge = a[0]\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and d[i] == 1:\n            a_charge = a[1]\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and d[i] == 0:\n            b_charge = b[1]\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and d[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and d[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # b = battery, a = accumulator, n = length of the road\ns = list(map(int, input().split())) # s = segments of the road\nd = list(map(int, input().split())) # d = exposed to sunlight or not\nprint(solve(n, b, a, s, d))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, b, a, s, t):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n - 1:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == \"1\":\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == \"0\":\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == \"0\":\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == \"1\":\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # read input\ns = input() # read segments\nt = input() # read segments\nprint(solve(n, b, a, s, t)) # print the solution\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == \"1\":\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == \"0\":\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == \"0\":\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == \"1\":\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()[:3])\ns = list(map(str, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n, b, a, s):\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        else:\n            break\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 7,
      "text": "\n"
    }
  ],
  "created": 1650751616,
  "object": "edit"
}
2022-04-23 22:07:20.147621 fix syntax errors 8 ["\n\ndef solve(n, b, a, s, i=0, b_charge=0, a_charge=0, max_dist=0):\n    # initialize variables\n    b_charge = b_charge\n    a_charge = a_charge\n    max_dist = max_dist\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge = a_charge + 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge = b_charge + 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge = a_charge - 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge = b_charge - 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist = max_dist + 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 0\n    b_charge = b[0]\n    a_charge = a[0]\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and d[i] == 1:\n            a_charge = a[1]\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and d[i] == 0:\n            b_charge = b[1]\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and d[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and d[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # b = battery, a = accumulator, n = length of the road\ns = list(map(int, input().split())) # s = segments of the road\nd = list(map(int, input().split())) # d = exposed to sunlight or not\nprint(solve(n, b, a, s, d))\n", '\n\ndef solve(n, b, a, s, t):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n - 1:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == "1":\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == "0":\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == "0":\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == "1":\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can\'t move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()) # read input\ns = input() # read segments\nt = input() # read segments\nprint(solve(n, b, a, s, t)) # print the solution\n', "\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", '\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == "1":\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == "0":\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == "0":\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == "1":\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can\'t move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split()[:3])\ns = list(map(str, input().split()))\nprint(solve(n, b, a, s))\n', "#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", '\n\ndef solve(n, b, a, s):\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        else:\n            break\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n', '\n']
2022-04-23 22:07:20.147730 size on output set 8
