2022-04-23 21:35:33.853146 num operations 1
2022-04-23 21:35:33.853177 size on input set 1
2022-04-23 21:35:33.853330 using api key kouti
2022-04-23 21:35:54.212607 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j])\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j])\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 2,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\"\"\"\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\n\"\"\"\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 3,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 6,
      "text": "\n# \u041d\u0430\u0439\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u041d\u041e\u041a \u0431\u044b\u043b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n"
    },
    {
      "index": 7,
      "text": "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"
    }
  ],
  "created": 1650749734,
  "object": "edit"
}
2022-04-23 21:35:54.213082 fix syntax errors 8 ['\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j])\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j])\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n"""\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\n"""\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n# Найти индексы двух чисел в массиве, чтобы их НОК был минимальным\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n', '\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n']
2022-04-23 21:35:54.213276 size on output set 7
2022-04-23 21:35:54.213292 num operations 1
2022-04-23 21:35:54.213299 size on input set 1
2022-04-23 21:35:54.213440 using api key sunu
2022-04-23 21:36:12.455224 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split()) \n    print minimum_lcm(A)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    if len(A)==1:\n        return A[0],A[0]\n    elif len(A)==2:\n        return A[0],A[1]\n    else:\n        minimum = lcm(A[0],A[1])\n        a = A[0]\n        b = A[1]\n        for i in range(1,len(A)-1):\n            for j in range(i+1,len(A)):\n                if lcm(A[i],A[j])<minimum:\n                    minimum = lcm(A[i],A[j])\n                    a = A[i]\n                    b = A[j]\n        return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)   \n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom gcd import *\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)-1):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 7,
      "text": "\n\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    }
  ],
  "created": 1650749754,
  "object": "edit"
}
2022-04-23 21:36:12.455550 fix syntax errors 8 ['\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n', '\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split()) \n    print minimum_lcm(A)\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    if len(A)==1:\n        return A[0],A[0]\n    elif len(A)==2:\n        return A[0],A[1]\n    else:\n        minimum = lcm(A[0],A[1])\n        a = A[0]\n        b = A[1]\n        for i in range(1,len(A)-1):\n            for j in range(i+1,len(A)):\n                if lcm(A[i],A[j])<minimum:\n                    minimum = lcm(A[i],A[j])\n                    a = A[i]\n                    b = A[j]\n        return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)   \n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import *\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)-1):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n']
2022-04-23 21:36:12.455678 size on output set 7
2022-04-23 21:36:12.455692 num operations 1
2022-04-23 21:36:12.455698 size on input set 1
2022-04-23 21:36:12.455866 using api key sunu
2022-04-23 21:36:40.248324 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef lcm(a, b):\n    return a * b // gcd(b, a % b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(a):\n    # Write your code here\n    return 0\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n#\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n#\n# def gcd(a, b):\n#     if b == 0: return a\n#     return gcd(b, a % b)\n#\n# def solve(a):\n#     # Write your code here\n#     n = len(a)\n#     gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n#\n#     for i in range(n):\n#         gcd_dp[i][i] = a[i]\n#         for j in range(i + 1, n):\n#             gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n#\n#     mini = 10 ** 9 + 1\n#     ans = [0, 0]\n#     for i in range(n - 1):\n#         for j in range(i + 1, n):\n#             temp = lcm(gcd_dp[i][j], a[i])\n#             if temp < mini:\n#                 mini = temp\n#                 ans = [i + 1, j + 1]\n#     return ans\n#\n# def main():\n#     n = int(input())\n#     a = [int(x) for x in input().split()]\n#     ans = solve(a)\n#     print(ans[0], ans[1])\n#\n# if __name__ == '__main__':\n#     main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef lcm(a, b):\n  return a * b // gcd(a, b)\n\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef solve(a):\n  # Write your code here\n  n = len(a)\n  gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n  for i in range(n):\n    gcd_dp[i][i] = a[i]\n    for j in range(i + 1, n):\n      gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n  mini = 10 ** 9 + 1\n  ans = [0, 0]\n  for i in range(n - 1):\n    for j in range(i + 1, n):\n      temp = lcm(gcd_dp[i][j], a[i])\n      if temp < mini:\n        mini = temp\n        ans = [i + 1, j + 1]\n  return ans\n\ndef main():\n  n = int(input())\n  a = [int(x) for x in input().split()]\n  ans = solve(a)\n  print(ans[0], ans[1])\n\nif __name__ == '__main__':\n  main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)  # a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]  # gcd_dp[i][j] = gcd(a[i], a[i + 1], ..., a[j])\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]  # gcd(a[i]) = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])  # gcd(a[i], ..., a[j]) = gcd(gcd(a[i], ..., a[j - 1]), a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650749772,
  "object": "edit"
}
2022-04-23 21:36:40.248621 fix syntax errors 8 ["\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef lcm(a, b):\n    return a * b // gcd(b, a % b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(a):\n    # Write your code here\n    return 0\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n#\n# def gcd(a, b):\n#     if b == 0: return a\n#     return gcd(b, a % b)\n#\n# def solve(a):\n#     # Write your code here\n#     n = len(a)\n#     gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n#\n#     for i in range(n):\n#         gcd_dp[i][i] = a[i]\n#         for j in range(i + 1, n):\n#             gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n#\n#     mini = 10 ** 9 + 1\n#     ans = [0, 0]\n#     for i in range(n - 1):\n#         for j in range(i + 1, n):\n#             temp = lcm(gcd_dp[i][j], a[i])\n#             if temp < mini:\n#                 mini = temp\n#                 ans = [i + 1, j + 1]\n#     return ans\n#\n# def main():\n#     n = int(input())\n#     a = [int(x) for x in input().split()]\n#     ans = solve(a)\n#     print(ans[0], ans[1])\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef lcm(a, b):\n  return a * b // gcd(a, b)\n\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef solve(a):\n  # Write your code here\n  n = len(a)\n  gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n  for i in range(n):\n    gcd_dp[i][i] = a[i]\n    for j in range(i + 1, n):\n      gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n  mini = 10 ** 9 + 1\n  ans = [0, 0]\n  for i in range(n - 1):\n    for j in range(i + 1, n):\n      temp = lcm(gcd_dp[i][j], a[i])\n      if temp < mini:\n        mini = temp\n        ans = [i + 1, j + 1]\n  return ans\n\ndef main():\n  n = int(input())\n  a = [int(x) for x in input().split()]\n  ans = solve(a)\n  print(ans[0], ans[1])\n\nif __name__ == '__main__':\n  main()\n", "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)  # a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]  # gcd_dp[i][j] = gcd(a[i], a[i + 1], ..., a[j])\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]  # gcd(a[i]) = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])  # gcd(a[i], ..., a[j]) = gcd(gcd(a[i], ..., a[j - 1]), a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 21:36:40.248757 size on output set 8
