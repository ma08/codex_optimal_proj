["\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, raw_input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    N, D = list(map(int, input().split()))\n    points = list()\n\n    for i in range(N):\n        points.append(list(map(int, input().split())))\n\n    num_pairs = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            distance = math.sqrt(distance)\n\n            if distance % 1 == 0:\n                num_pairs += 1\n\n    print(num_pairs)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n): return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n * n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n", "\n\nimport math # for sqrt\n\nN, D = list(map(int, input().split()))\npoints = list() # list of points\n\nfor i in range(N): # add all points to list\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0 # number of pairs of points\n\nfor i in range(N): # loop through points\n    for j in range(i + 1, N): # loop through points after i\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n", "\n\ndef distance(point1, point2):\n    s = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]): # sqrt(distances[key]) is an integer\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(float, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n ** 2\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]) ** 0.5:\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1[0])):\n        sum += (point1[0][i] - point2[0][i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append([list(map(int, input().split()))])\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i + 1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    summ = 0\n    for i in range(len(point1)):\n        summ += (point1[i] - point2[i])**2\n    return summ\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\n_ = stdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n * n\n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n    return round(sum**0.5)\n\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if distance(points[i], points[j]) == int(distance(points[i], points[j]))**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nN, D = map(int, input().split())\npoints = list()\n\nfor i in range(N):\n    points.append(map(int, input().split()))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n", "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n", "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n\n    # This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"]