["def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)] for i in range(1, len(s) + 1): for j in range(1, len(t) + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n", "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "\n\ndef solve(s):\n    # dp[i] = min number of operations to make s[:i] palindrome\n    dp = [0] * (len(s) + 1)\n    for i in range(1, len(s) + 1):\n        dp[i] = dp[i - 1] + 1\n        if i % 2 == 0 and s[:i // 2] == s[i // 2:i][::-1]:\n            dp[i] = min(dp[i], dp[i // 2])\n        if i % 3 == 0 and s[:i // 3] == s[i // 3 * 2:i][::-1]:\n            dp[i] = min(dp[i], dp[i // 3 * 2])\n    return dp[-1]\n\n\nprint(solve(input()))\n", "\n\n# get the input\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\n# if there are no elements, the answer is 0\nif len(a) == 0:\n    print(0)\n\n# if there is only one element, the answer is 1\nelif len(a) == 1:\n    print(1)\n\n# otherwise, we need to find the longest increasing subsequence\nelse:\n    # we'll keep track of the longest increasing subsequence so far\n    best = 0\n\n    # go through each element\n    for i in range(n):\n        # start a new subsequence with the current element\n        # and assume it will be the longest\n        best = 1\n        current = 1\n\n        # go through the rest of the elements\n        for j in range(i + 1, n):\n            # if the current element is less than the previous,\n            # then the subsequence can be extended\n            if a[j] > a[j - 1]:\n                current += 1\n                # if this is the longest subsequence so far,\n                # update the best\n                if current > best:\n                    best = current\n\n        # output the answer\n        print(best)\n", "\n\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n", "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)] # O(|s| * |t|)\n\n    for i in range(1, len(s) + 1): # O(|s|)\n        for j in range(1, len(t) + 1): # O(|t|)\n            if s[i - 1] == t[j - 1]: # O(1)\n                dp[i][j] = dp[i - 1][j - 1] + 1 # O(1)\n            else: # O(1)\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # O(1)\n\n    return len(s) - dp[-1][-1] # O(1)\n\ns = input()\nt = input()\nprint(solve(s, t)) # O(|s| + |t|)\n", "def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "import sys\n\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\nprint(solve(s, t))\n", "\n\n\n\ns = input()\nt = input()\n\n\nremoved = 0\n\n\nleft = 0\nright = 0\n\n\nwhile right < len(s):\n   \n    if s[right] in t:\n        left = right\n   \n    else:\n        removed += 1\n    \n    right += 1\n\n\nprint(removed)\n", "\n\n# get the input\nn, k, x, y = [int(x) for x in input().split()]\n\n# define the answer\nanswer = 0\n\n# if the number of houses is less than k\nif n < k:\n    # then the answer is the cost of the houses\n    answer = n * x\n# otherwise\nelse:\n    # the answer is the cost of k houses, plus the cost of the rest\n    answer = k * x + (n - k) * y\n\n# output the answer (after converting to a string)\nprint(str(answer))\n", "\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\na = input()\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n", "\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = raw_input()\nt = raw_input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n", "def solve(s, t):\n\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\n\nprint(solve(s, t))\n", "\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = input().strip()\nt = input().strip()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"]