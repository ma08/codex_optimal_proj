["\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\nclass Solver:\n    def __init__(self, n, s, k):\n        self.n = n\n        self.k = k\n        self.s = s\n\n    def solve(self):\n        def get_count(s):\n            count = 0\n\n        return get_count(self.s)\n\n    # input\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = list(map(int, input().split()))\n    k = int(input())\n\n    # solve\n    solver = Solver(n, s, k)\n    res = solver.solve()\n    # output\n    print(res)\n", "\n\nn = int(input())\n\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\n\nprint(solve(n, s))\n", "\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\nn = int(input())\ns = input()\nif n == 1:\n    print(1)\n    print(1)\nelse:\n    def coloring(s):\n        l = []\n        c = 1\n        for i in range(len(s)-1):\n            if s[i] != s[i+1]:\n                l.append(c)\n                c+=1\n            else:\n                l.append(c)\n        l.append(c)\n        return l\n    print(max(coloring(s)))\n    print(*coloring(s))\n", "import sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\n\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n    return res + 1\n\nprint(solve(n, s))\n", "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\n\ndef coloring(s):\n    l = []\n    c = 0\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c = 1\n        else:\n            c+=1\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\nimport sys\n\nclass Solver:\n  def __init__(self, n, s):\n    self.n = n\n    self.s = s\n\n  def solve(self):\n    def get_colors(s):\n      colors = [1]\n      for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n          colors.append(colors[i - 1] + 1)\n        else:\n          colors.append(colors[i - 1])\n      return colors\n\n    colors = get_colors(self.s)\n    sorted_colors = get_colors(sorted(self.s))\n    return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  s = input()\n\n  solver = Solver(n, s)\n  res = solver.solve()\n  print(res[0])\n  print(res[1])\n", "# -*- coding: utf-8 -*-\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n", "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "import sys\nsys.setrecursionlimit(10**6)\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef dfs(i, visited):\n    global n\n    global s\n    if visited[i]:\n        return 0\n    visited[i] = True\n    next_i = s[i] - 1\n    return dfs(next_i, visited) + 1\n\nans = 0\nfor i in range(n):\n    visited = [False] * n\n    res = dfs(i, visited)\n    ans = max(ans, res)\n\nprint(ans)\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n            \n    return res + 1\n\nprint(solve(n, s))\n", "\nn = int(input())\ns = input()\n\ndef solve(n, s, start):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    cur = 0\n    res = 0\n    for i in range(start + 1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n            \n    return res + 1\n\nprint(solve(n, s))\n", "\n\n\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n\n        self.s = s\n        \"\"\"\n        Returns colors of the input string\n        \"\"\"\n\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        # colors of the input string\n        colors = get_colors(self.s)\n        # colors of the sorted input string\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n", "\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n", "\n\ndef coloring(s):\n    l = []\n    for i in s:\n        if i == 'R':\n            l.append(0)\n        else:\n            l.append(1)\n    return l\n\nn = int(input())\ns = input()\n\nprint(len(s))\nprint(*coloring(s),sep=\"\")\n"]