["#!/usr/bin/env python\n\nimport sys\nimport os\nimport re\n\ndef main():\n    \"\"\"Reads a file and prints it to the screen\"\"\"\n    filename = sys.argv[1]\n    try:\n        f = open(filename, 'r')\n    except IOError:\n        print \"cannot open\", filename\n    else:\n        for line in f:\n            print line,\n        f.close()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import *\n\ndef add_edge(graph, frm, to, cost=1):\n    if frm == to: raise ValueError('invalid edge {}:{} -> {}'.format(cost, frm, to))\n    graph[frm].append((to, cost))\n    graph[to].append((frm, cost))\n\ndef readl():\n    return map(int, sys.stdin.readline().split())\n\ndef dijkstra(graph, start, end):\n    queue, enqueued = [(0, start, ())], set([start])\n    while queue:\n        (cost, v1, path) = heappop(queue)\n        if v1 not in enqueued:\n            enqueued.add(v1)\n            path = (v1, path)\n            if v1 == end:\n                return (cost, path)\n\n            for v2, c in graph[v1]:\n                if v2 not in enqueued:\n                    heappush(queue, (cost + c, v2, path))\n\n    return float(\"inf\")\n\ndef generate_graph(n, d, k):\n    if d > n:\n        return float(\"inf\")\n\n    if d == 1:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        else:\n            return float(\"inf\")\n\n    if d == 2:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 2:\n            return [1, 2]\n        else:\n            return float(\"inf\")\n\n    if d == 3:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 4:\n            return [1, 2, 3, 3, 4, 5]\n        else:\n            return float(\"inf\")\n\n    if d == 4:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 3:\n            return [1, 2, 3, 4, 5, 6]\n        else:\n            return float(\"inf\")\n\n    if k >= 4:\n        return [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11]\n\n    return float(\"inf\")\n\ndef main():\n    n, d, k = readl()\n    graph = generate_graph(n, d, k)\n    if graph == float(\"inf\"):\n        print(\"NO\")\n        sys.exit(0)\n\n    print(\"YES\")\n    for i in range(1, n):\n        print(i, graph[i - 1])\n\nif __name__ == '__main__':\n    main()\n", "// file.js\n\nvar fs = require('fs');\nvar path = require('path');\n\n// You can use fs.readFile to read the file.\n//\n// fs.readFile(path.join(__dirname, 'file.txt'), function(err, data) {\n//   console.log(data.toString());\n// });\n\n// You can use fs.writeFile to write the file.\n//\n// fs.writeFile(path.join(__dirname, 'file.txt'), 'Hello World', function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('File written');\n// });\n\n// You can use fs.appendFile to append the file.\n//\n// fs.appendFile(path.join(__dirname, 'file.txt'), 'Hello World', function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('File written');\n// });\n\n// You can use fs.rename to rename the file.\n//\n// fs.rename(path.join(__dirname, 'file.txt'), path.join(__dirname, 'file2.txt'), function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('File renamed');\n// });\n\n// You can use fs.unlink to delete the file.\n//\n// fs.unlink(path.join(__dirname, 'file2.txt'), function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('File deleted');\n// });\n\n// You can use fs.mkdir to create a directory.\n//\n// fs.mkdir(path.join(__dirname, 'test'), function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('Directory created');\n// });\n\n// You can use fs.rmdir to remove the directory.\n//\n// fs.rmdir(path.join(__dirname, 'test'), function(err) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log('Directory removed');\n// });\n\n// You can use fs.readdir to read the directory.\n//\n// fs.readdir(__dirname, function(err, files) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   files.forEach(function(file) {\n//     console.log(file);\n//   });\n// });\n\n// You can use fs.stat to get the file statistics.\n//\n// fs.stat(path.join(__dirname, 'file.txt'), function(err, stats) {\n//   if (err) {\n//     console.error(err);\n//     return;\n//   }\n//   console.log(stats);\n// });\n\n// You can use fs.exists to check if the file exists.\n//\n// fs.exists(path.join(__dirname, 'file.txt'), function(exists) {\n//   console.log(exists);\n// });\n", "\n\nfrom sys import stdin\n\ndef main():\n    n, d, k = map(int, stdin.readline().strip().split(\" \"))\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if k < d - 1:\n        print(\"NO\")\n        return\n    if n == 2:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n    if d == 2:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return \n    if d == 3:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        for i in range(1, n - 1):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 4:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        for i in range(3, n - 2):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 5:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        print(\"{} {}\".format(2, n - 2))\n        print(\"{} {}\".format(3, n - 2))\n        for i in range(4, n - 3):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    n, d, k = map(int, stdin.readline().strip().split(\" \"))\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if k < d - 1:\n        print(\"NO\")\n        return\n    if n == 2:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n    if d == 2:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 3:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        for i in range(1, n - 1):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 4:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        for i in range(3, n - 2):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 5:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        print(\"{} {}\".format(2, n - 2))\n        print(\"{} {}\".format(3, n - 2))\n        for i in range(4, n - 3):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "File.open('file.txt', 'w') { |f| f.write('Hello World!') }\n\nputs File.read('file.txt')\n", "#!/usr/bin/env node\n\nvar program = require('commander');\nvar fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\n\nprogram\n  .version('0.0.1')\n  .option('-t, --type [type]', 'Type of file to create')\n  .option('-n, --name [name]', 'Name of file to create')\n  .parse(process.argv);\n\nif (!program.type) {\n  console.error('--type is required');\n  process.exit(1);\n}\n\nif (!program.name) {\n  console.error('--name is required');\n  process.exit(1);\n}\n\nvar type = program.type;\nvar name = program.name;\n\nvar fileType = '';\n\nswitch (type) {\n  case 'component':\n    fileType = 'components';\n    break;\n  case 'container':\n    fileType = 'containers';\n    break;\n  case 'route':\n    fileType = 'routes';\n    break;\n  case 'reducer':\n    fileType = 'reducers';\n    break;\n  case 'action':\n    fileType = 'actions';\n    break;\n}\n\nvar fileName = name + '.' + type + '.js';\nvar targetPath = path.join(process.cwd(), fileType, fileName);\n\nmkdirp(path.join(process.cwd(), fileType), function (err) {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n  }\n\n  fs.writeFile(targetPath, '', function (err) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n\n    console.log('File created at ' + targetPath);\n  });\n});\n", "var fs = require('fs')\n\nfs.readFile('data.txt', 'utf8', function(err, data) {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(data)\n})\n", "f8e7a0c0-e4b3-11e9-b48c-448a5b8fc0ed\n", "\n\nfrom sys import stdin\n\ndef main():    \n    n, d, k = map(int, stdin.readline().strip().split(\" \"))\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if k < d - 1:\n        print(\"NO\")\n        return\n    if n == 2:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n    if d == 2:\n        print(\"YES\")\n        for i in range(1, n):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 3:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        for i in range(1, n - 1):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 4:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        for i in range(3, n - 2):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    if d == 5:\n        print(\"YES\")\n        print(\"{} {}\".format(1, n))\n        print(\"{} {}\".format(1, n - 1))\n        print(\"{} {}\".format(2, n - 1))\n        print(\"{} {}\".format(2, n - 2))\n        print(\"{} {}\".format(3, n - 2))\n        for i in range(4, n - 3):\n            print(\"{} {}\".format(i, i + 1))\n        return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "const fs = require('fs');\nconst path = require('path');\n\nconst file = path.join(__dirname, 'file.txt');\n\nfs.readFile(file, (err, data) => {\n  if (err) throw err;\n  console.log(data.toString());\n});\n", "\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import *\n\ndef add_edge(graph, frm, to, cost=1):\n    if frm == to:\n        raise ValueError('invalid edge {}:{} -> {}'.format(cost, frm, to))\n    graph[frm].append((to, cost))\n    graph[to].append((frm, cost))\n\ndef readl():\n    return map(int, sys.stdin.readline().split())\n\ndef dijkstra(graph, start, end):\n    queue, enqueued = [(0, start, ())], set([start])\n    while queue:\n        (cost, v1, path) = heappop(queue)\n        if v1 not in enqueued:\n            enqueued.add(v1)\n            path = (v1, path)\n            if v1 == end:\n                return (cost, path)\n\n            for v2, c in graph[v1]:\n                if v2 not in enqueued:\n                    heappush(queue, (cost + c, v2, path))\n\n    return float(\"inf\")\n\ndef generate_graph(n, d, k):\n    if d > n:\n        return float(\"inf\")\n\n    if d == 1:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        else:\n            return float(\"inf\")\n\n    if d == 2:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 2:\n            return [1, 2]\n        else:\n            return float(\"inf\")\n\n    if d == 3:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 4:\n            return [1, 2, 3, 3, 4, 5]\n        else:\n            return float(\"inf\")\n\n    if d == 4:\n        if k >= n - 1:\n            return [1 for i in range(n - 1)]\n        elif k >= 3:\n            return [1, 2, 3, 4, 5, 6]\n        else:\n            return float(\"inf\")\n\n    if k >= 4:\n        return [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11]\n\n    return float(\"inf\")\n\ndef main():\n    n, d, k = readl()\n    graph = generate_graph(n, d, k)\n    if graph == float(\"inf\"):\n        print \"NO\"\n        sys.exit(0)\n\n    print \"YES\"\n    for i in range(1, n):\n        print i, graph[i - 1]\n\nif __name__ == '__main__':\n    main()\n"]