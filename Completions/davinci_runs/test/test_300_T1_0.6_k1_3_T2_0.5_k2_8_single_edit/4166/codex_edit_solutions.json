["\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nprint(number)\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < [constraints[i][1] for i in range(M)]:\n    print(number)\nelse:\n    print(-1)\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end='')\n        else:\n            print(a[i], end='')\n    print('')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < min(constraints):\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    print(\"Hello, world!\")\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\nfor i in range(10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[0], end=\"\")\n            break\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The number of digits\nN = int(input())\n# The number of constraints\nM = int(input())\n# List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n# Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n# If the number is less than all constraints\n\nprint(number)\n", "#!/usr/bin/env python\n\n\nN, M = map(int, input().split())\n# for i in range(10 ** N):\n#     if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n#         print(i)\n#         exit()\n# print(-1)\n\nfor i in range(1, N+1):\n    print(i)\n", "from itertools import permutations\n\nN, M = map(int, input().split())\nfor i in permutations(range(10), N):\n    if all(i[s - 1] == c for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print('')\n\nif __name__ == '__main__':\n    main()\n", "\n\nN, M = map(int, input().split())\nfor i in range(10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):  # noqa: E501\n        print(i)\n        exit()\nprint(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0 and n > 1:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0 and n > 1:\n            print(a[i], end=\"\")\n        elif i == 0 and n == 1 and a[i] == 0:\n            print(0, end=\"\")\n        elif i == 0 and n == 1 and a[i] != 0:\n            print(a[i], end=\"\")\n        elif i != 0 and a[i] != 0:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "N, M = map(int, input().split())\n\n\nfor i in range(10 ** (N - 1), 10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [1] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < [x[1] for x in constraints]:\n    print(''.join(str(x) for x in number))\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    if n == 1 and a[0] == 0:\n        print(0)\n    else:\n        for i in range(n):\n            if i == 0 and a[i] == 0:\n                print(-1)\n                return\n            elif i == 0 and a[i] != 0:\n                print(a[i], end=\"\")\n            else:\n                print(a[i], end=\"\")\n        print(\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[i][1]:\n    print(number)\nelse:\n    print(-1)\n"]