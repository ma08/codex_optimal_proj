["\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60) \n    endMinutes = endTime[1] + (endTime[0] * 60) \n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2 \n\n    midTime = [0, 0] \n    midTime[0] = midMinutes / 60 \n    midTime[1] = midMinutes % 60 \n\n    return midTime \n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1])) \n\ndef main():\n    startTime = list(map(int, input().split(':'))) \n    endTime = list(map(int, input().split(':'))) \n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n\n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if h2 == h1:\n        if m2 - m1 == 30:\n            return (h2, m2)\n        elif m2 - m1 == 2:\n            return (h2, m1 + 1)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(\":\")\n    line2 = sys.stdin.readline().strip().split(\":\")\n    h1 = int(line1[0]) \n    m1 = int(line1[1]) \n    h2 = int(line2[0]) \n    m2 = int(line2[1]) \n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2 or m2 - m1 == 58:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2 or m2 - m1 == 58:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [midMinutes / 60, midMinutes % 60]\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30 and h2 == h1:\n        if m2 - m1 == 30: return (h2, m2)\n        elif m2 - m1 == 2: return (h2, m1 + 1)\n        else: return (h1, m1 + (m2 - m1) / 2)\n    elif m1 >= 30 and h2 == h1:\n        if m2 - m1 == 30: return (h2, m2)\n        elif m2 - m1 == 2: return (h2, m1 + 1)\n        else: return (h1, m1 + (m2 - m1) / 2)\n    elif m1 < 30 and h2 != h1: return (h1, m1 + (m2 - m1) / 2)\n    elif m1 >= 30 and h2 != h1: return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    start_minutes = startTime[1] + (startTime[0] * 60)\n    end_minutes = endTime[1] + (endTime[0] * 60)\n    mid_minutes = start_minutes + (end_minutes - start_minutes) / 2\n\n\n    mid_time = [0, 0]\n    mid_time[0] = mid_minutes / 60\n    mid_time[1] = mid_minutes % 60\n\n    return mid_time\n\ndef print_time(time):\n    print('{:02d}:{:02d}'.format(time[0], time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    mid_time = getMidTime(startTime, endTime)\n    print_time(mid_time)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return h2, m2\n            elif m2 - m1 == 2:\n                return h2, m1 + 1\n            else:\n                return h1, m1 + (m2 - m1) / 2\n        else:\n            return h1, m1 + (m2 - m1) / 2\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return h2, m2\n            elif m2 - m1 == 2:\n                return h2, m1 + 1\n            else:\n                return h1, m1 + (m2 - m1) / 2\n        else:\n            return h1 + 1, m1 + (m2 - m1) / 2\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n\ndef Solve(h1, h2, m1, m2):\n    if m1 < 30:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1, m1 + (m2 - m1) / 2)\n    else:\n        if h2 == h1:\n            if m2 - m1 == 30:\n                return (h2, m2)\n            elif m2 - m1 == 2:\n                return (h2, m1 + 1)\n            else:\n                return (h1, m1 + (m2 - m1) / 2)\n        else:\n            return (h1 + 1, m1 + (m2 - m1) / 2)\n\ndef main():\n    lines = sys.stdin.readlines()\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n    h3, m3 = Solve(h1, h2, m1, m2)\n    print(\"{0:02d}:{1:02d}\".format(h3, m3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':')\n    line2 = sys.stdin.readline().strip().split(':')\n    h1 = int(line1[0])\n    m1 = int(line1[1])\n    h2 = int(line2[0])\n    m2 = int(line2[1])\n\n    m1 += (h1 * 60)\n    m2 += (h2 * 60)\n\n    if m1 < m2:\n        m3 = (m2 + m1) / 2\n    else:\n        m3 = (m1 + m2) / 2 + (12 * 60)\n    \n    h3 = m3 / 60\n    m3 %= 60\n    print('{0:02d}:{1:02d}'.format(h3, m3))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    line1 = sys.stdin.readline().strip().split(':') \n    line2 = sys.stdin.readline().strip().split(':') \n    h1 = int(line1[0])\n    m1 = int(line1[1]) \n    h2 = int(line2[0])\n    m2 = int(line2[1]) \n\n    m1 += (h1 * 60) \n    m2 += (h2 * 60) \n\n    if m1 < m2: \n        m3 = (m2 + m1) / 2 \n    else: \n        m3 = (m1 + m2) / 2 + (12 * 60) \n    \n    h3 = m3 / 60 \n    m3 %= 60 \n    print('{0:02d}:{1:02d}'.format(h3, m3)) \n\nif __name__ == '__main__': \n    main() \n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)  # convert hours to minutes and add minutes\n    endMinutes = endTime[1] + (endTime[0] * 60)  # convert hours to minutes and add minutes\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60  # convert minutes to hours\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60) #convert to minutes\n    endMinutes = endTime[1] + (endTime[0] * 60) #convert to minutes\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n\n    midTime = [0, 0]\n    midTime[0] = midMinutes // 60\n    midTime[1] = midMinutes % 60\n\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\n\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef getMidTime(startTime, endTime):\n    startMinutes = startTime[1] + (startTime[0] * 60)\n    endMinutes = endTime[1] + (endTime[0] * 60)\n    midMinutes = startMinutes + (endMinutes - startMinutes) / 2\n    midTime = [0, 0]\n    midTime[0] = midMinutes / 60\n    midTime[1] = midMinutes % 60\n    return midTime\n\ndef printTime(time):\n    print('{:02d}:{:02d}'.format(time[0],time[1]))\ndef main():\n    startTime = list(map(int, input().split(':')))\n    endTime = list(map(int, input().split(':')))\n    midTime = getMidTime(startTime, endTime)\n    printTime(midTime)\nif __name__ == '__main__':\n    main()\n", "\n"]