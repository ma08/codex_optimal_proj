["\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n\nn, k = 5, 3\narr = [1, 2, 2, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(array):\n    return max(array)\n\ndef get_max_number_index(array):\n    return array.index(get_max_number(array))\n\ndef get_min_number(array):\n    return min(array)\n\ndef get_min_number_index(array):\n    return array.index(get_min_number(array))\n\ndef get_number(array, index):\n    return array[index]\n\ndef get_half_number(a, i):\n    return a[i] // 2\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\ndef set_number(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n#\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n\nn, k = 5, 3\narr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while i < n:\n        a[i] = a[i] / 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\nn, k = 5, 3\narr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] // 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(number_list):\n    return max(number_list)\n\ndef get_max_number_index(number_list):\n    return number_list.index(get_max_number(number_list))\n\ndef get_min_number(number_list):\n    return min(number_list)\n\ndef get_min_number_index(number_list):\n    return number_list.index(get_min_number(number_list))\n\ndef get_number(number_list, index):\n    return number_list[index]\n\ndef get_half_number(number_list, index):\n    return number_list[index] // 2\n\ndef is_number_multiple_of_two(number_list, index):\n    return (number_list[index] & 1) == 0\n\ndef set_number(number_list, index, number):\n    number_list[index] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\nn, k = 5, 3\narr = [1, 2, 3, 3, 4]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    if a[0] * 2 < a[n - 1]:\n        while a[i] < a[n - 1]:\n            a[i] = a[i] // 2\n            i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] // 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n\nn, k = 5, 3\narr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(l):\n    return max(l)\n\ndef get_max_number_index(l):\n    return l.index(get_max_number(l))\n\ndef get_min_number(l):\n    return min(l)\n\ndef get_min_number_index(l):\n    return l.index(get_min_number(l))\n\ndef get_number(l, i):\n    return l[i]\n\ndef get_half_number(l, i):\n    return l[i] // 2\n\ndef is_number_multiple_of_two(l, i):\n    return (l[i] & 1) == 0\n\ndef set_number(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(a):\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\ndef get_min_number(a):\n    return min(a)\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\ndef get_number(a, i):\n    return a[i]\n\ndef get_half_number(a, i):\n    return a[i] // k\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & (k - 1)) == 0\n\ndef set_number(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef get_max_number(a):\n\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\n\ndef get_min_number(a):\n    return min(a)\n\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\n\ndef get_number(a, i):\n    return a[i]\n\n\ndef get_half_number(a, i):\n    return a[i] // 2\n\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\n\ndef set_number(a, i, number):\n    a[i] = number\n\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(\n                a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(\n                a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(a):\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\ndef get_min_number(a):\n    return min(a)\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\ndef get_half_number(a, i):\n    return a[i] // 2\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(a))\n", "\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while i < n and a[i] < a[n - 1]:\n        a[i] = a[i] // 2 + 1\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while i < n and a[i] < a[n - 1]:\n        a[i] = a[i] / 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] / 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(a):\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\ndef get_min_number(a):\n    return min(a)\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\ndef get_number(a, i):\n    return a[i]\n\ndef get_half_number(a, i):\n    return a[i] // 2\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\ndef set_number(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(a):\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\ndef get_min_number(a):\n    return min(a)\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\ndef get_number(a, i):\n    return a[i]\n\ndef get_half_number(a, i):\n    return a[i] // k\n\ndef is_number_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\ndef set_number(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "import sys\n\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n    if min(arr) == 0:\n        arr.remove(0)\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0 and len(set(arr)) > 1:\n            return -1\n    if min(arr) == 0:\n        arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n"]