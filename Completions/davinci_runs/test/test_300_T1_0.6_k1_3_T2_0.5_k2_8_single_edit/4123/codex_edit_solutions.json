["\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "const fs = require('fs');\n\nfs.stat('./file.js', (err, stats) => {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(stats);\n    }\n});\n", "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1)) \n\nprint(max(c, key=c.get))\n", "import sys\ninput_n = int(sys.stdin.readline())\ninput_s = sys.stdin.readline()\n\n\nprint(input_s)\n", "\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\n\n#python\nprint(max(c, key=c.get))\n", "import os\n\nclass File(object):\n    def __init__(self, filename):\n        self.filename = filename\n        self.file = None\n        self.filedata = None\n        self.filesize = 0\n        self.filepos = 0\n        self.filemode = None\n\n    def open(self, mode):\n        self.file = open(self.filename, mode)\n        self.filemode = mode\n\n    def read(self, size=None):\n        if size is None:\n            self.filedata = self.file.read()\n            self.filesize = len(self.filedata)\n        else:\n            self.filedata = self.file.read(size)\n            self.filesize = len(self.filedata)\n\n    def write(self, data):\n        self.file.write(data)\n\n    def close(self):\n        self.file.close()\n\n    def seek(self, offset, whence=0):\n        self.filepos = self.file.seek(offset, whence)\n\n    def tell(self):\n        return self.filepos\n\n    def truncate(self, size=None):\n        if size is None:\n            self.file.truncate()\n        else:\n            self.file.truncate(size)\n\n    def fstat(self):\n        return self.file.fstat()\n\n    def fsync(self):\n        self.file.fsync()\n\n    def flush(self):\n        self.file.flush()\n\n    def fileno(self):\n        return self.file.fileno()\n\n    def isatty(self):\n        return self.file.isatty()\n\n    def __iter__(self):\n        return self.file.__iter__()\n\n    def next(self):\n        return self.file.next()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, traceback):\n        self.close()\n\n    def __del__(self):\n        self.close()\n\n    def __str__(self):\n        return '<File filename=%s, filemode=%s, filedata=%s>' % (self.filename, self.filemode, self.filedata)\n\n    def __repr__(self):\n        return self.__str__()\n", "{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97975158691406,\n          40.724216769057434\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The High Line\",\n        \"description\": \"Chelsea\",\n        \"marker-color\": \"#3bb2d0\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"rail-metro\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.96625518798828,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The Cloisters\",\n        \"description\": \"Washington Heights\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97262573242188,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The American Museum of Natural History\",\n        \"description\": \"Upper West Side\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97975158691406,\n          40.724216769057434\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The High Line\",\n        \"description\": \"Chelsea\",\n        \"marker-color\": \"#3bb2d0\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"rail-metro\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.96625518798828,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The Cloisters\",\n        \"description\": \"Washington Heights\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97262573242188,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The American Museum of Natural History\",\n        \"description\": \"Upper West Side\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97975158691406,\n          40.724216769057434\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The High Line\",\n        \"description\": \"Chelsea\",\n        \"marker-color\": \"#3bb2d0\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"rail-metro\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.96625518798828,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The Cloisters\",\n        \"description\": \"Washington Heights\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -73.97262573242188,\n          40.76488012868384\n        ]\n      },\n      \"properties\": {\n        \"title\": \"The American Museum of Natural History\",\n        \"description\": \"Upper West Side\",\n        \"marker-color\": \"#f0a030\",\n        \"marker-size\": \"large\",\n        \"marker-symbol\": \"park\"\n      }\n    }\n  ]\n}\n", "const fs = require(\"fs\");\n\nmodule.exports = {\n  read: (file) => {\n    return new Promise((resolve, reject) => {\n      fs.readFile(file, \"utf8\", (err, data) => {\n        if (err) reject(err);\n        resolve(data);\n      });\n    });\n  },\n\n  write: (file, data) => {\n    return new Promise((resolve, reject) => {\n      fs.writeFile(file, data, \"utf8\", (err) => {\n        if (err) reject(err);\n        resolve();\n      });\n    });\n  },\n};\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "\n\nfrom collections import defaultdict\nfrom collections import deque\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nd = defaultdict(deque)\n\nfor i in range(n):\n    for j in range(m):\n        d[a[i] + b[j]].append((i, j))\n\nfor _ in range(int(input())):\n    x = int(input())\n\n    if not d[x]:\n        print(-1)\n        continue\n\n    i, j = d[x].popleft()\n    print(i + 1, j + 1)\n", "# \u89e3\u7b54\n# \u6587\u5b57\u5217\u306e\u6700\u983b\u5024\u3092\u6c42\u3081\u308b\u554f\u984c\n# \u6587\u5b57\u5217\u306e\u4e2d\u3067\u6700\u3082\u51fa\u73fe\u56de\u6570\u304c\u591a\u30442\u6587\u5b57\u306e\u30b0\u30e9\u30e0\u3092\u6c42\u3081\u308b\n# \u6700\u7d42\u7684\u306b\u51fa\u73fe\u56de\u6570\u304c\u540c\u3058\u5834\u5408\u306f\u3001\u8f9e\u66f8\u9806\u304c\u5c0f\u3055\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\n# \u5165\u529b\n#   N\u6587\u5b57\u306e\u6587\u5b57\u5217S\n# \u51fa\u529b\n#   \u6700\u983b\u5024\u306e2\u6587\u5b57\u306e\u30b0\u30e9\u30e0\n\n\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "#!/usr/bin/env python3\n\nimport os\nimport sys\nimport subprocess\n\n# change working directory to the directory of this script\nos.chdir(os.path.dirname(os.path.realpath(__file__)))\n\n# find all files in the current directory\nfiles = os.listdir()\n\n# remove this script from the list\nfiles.remove('file.py')\n\n# remove files that are not .py files\nfor f in files:\n    if not f.endswith('.py'):\n        files.remove(f)\n\n# remove files that are not executable\nfor f in files:\n    if not os.access(f, os.X_OK):\n        files.remove(f)\n\n# print the list of files\nprint('\\n'.join(files))\n\n# if there are no files, exit\nif len(files) == 0:\n    sys.exit()\n\n# otherwise, ask the user which file to run\nprint('\\nWhich file would you like to run?')\n\n# get the user's choice\nchoice = input()\n\n# if the choice is valid, run it\nif choice in files:\n    subprocess.call(['python3', choice])\n# otherwise, exit\nelse:\n    sys.exit()\n", "var fs = require('fs');\n\nvar fileName = process.argv[2];\n\nvar file = fs.readFileSync(fileName).toString();\n\nvar lines = file.split('\\n').length - 1;\n\nconsole.log(lines);\n", "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(n-1):\n    gram = s[i:i+2]\n    if s.count(gram) > max_count:\n        max_count = s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "\n\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n - 1))\n\nprint(max(c, key=c.get))\n", "f6d0e9d0-0121-11ea-9ada-3f4e47606da2\n", "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Coding for Kids</title>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n\t<link href='https://fonts.googleapis.com/css?family=Roboto:400,100,300' rel='stylesheet' type='text/css'>\n\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\">\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"animate.css\">\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"script.js\"></script>\n</head>\n<body>\n\n\t<!-- NAVIGATION -->\n\n\t<nav>\n\t\t<div class=\"container\">\n\t\t\t<div class=\"logo\">\n\t\t\t\t<img src=\"logo.png\">\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"#\">Home</a></li>\n\t\t\t\t<li><a href=\"#\">About</a></li>\n\t\t\t\t<li><a href=\"#\">Contact</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- HEADER -->\n\n\t<header>\n\t\t<div class=\"container\">\n\t\t\t<h1>Coding for Kids</h1>\n\t\t\t<h2>A platform for kids to learn code</h2>\n\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t<button>Get Started</button>\n\t\t</div>\n\t</header>\n\n\t<!-- ABOUT -->\n\n\t<section class=\"about\">\n\t\t<div class=\"container\">\n\t\t\t<div class=\"about-content\">\n\t\t\t\t<h1>About</h1>\n\t\t\t\t<h2>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</h2>\n\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t</div>\n\t\t\t<div class=\"about-image\">\n\t\t\t\t<img src=\"laptop.png\">\n\t\t\t</div>\n\t\t</div>\n\t</section>\n\n\t<!-- FEATURES -->\n\n\t<section class=\"features\">\n\t\t<div class=\"container\">\n\t\t\t<div class=\"features-content\">\n\t\t\t\t<h1>Features</h1>\n\t\t\t\t<h2>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</h2>\n\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t</div>\n\t\t\t<div class=\"features-list\">\n\t\t\t\t<div class=\"feature\">\n\t\t\t\t\t<i class=\"fa fa-code fa-4x\"></i>\n\t\t\t\t\t<h3>Lorem ipsum dolor sit amet.</h3>\n\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"feature\">\n\t\t\t\t\t<i class=\"fa fa-code fa-4x\"></i>\n\t\t\t\t\t<h3>Lorem ipsum dolor sit amet.</h3>\n\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"feature\">\n\t\t\t\t\t<i class=\"fa fa-code fa-4x\"></i>\n\t\t\t\t\t<h3>Lorem ipsum dolor sit amet.</h3>\n\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n\n\t<!-- CONTACT -->\n\n\t<section class=\"contact\">\n\t\t<div class=\"container\">\n\t\t\t<div class=\"contact-content\">\n\t\t\t\t<h1>Contact</h1>\n\t\t\t\t<h2>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</h2>\n\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel lorem eget magna rhoncus blandit. Nulla facilisi. Sed eu condimentum enim, sed tincidunt sem. Nulla facilisi. Aenean ut nisi eget nisi gravida gravida. </p>\n\t\t\t</div>\n\t\t\t<div class=\"contact-form\">\n\t\t\t\t<form>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<input type=\"text\" placeholder=\"Name\">\n\t\t\t\t\t\t<input type=\"email\" placeholder=\"Email\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<textarea placeholder=\"Message\"></textarea>\n\t\t\t\t\t<button>Send</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n\n\t<!-- FOOTER -->\n\n\t<footer>\n\t\t<div class=\"container\">\n\t\t\t<div class=\"copyright\">\n\t\t\t\t<p>&copy; 2015 Coding for Kids. All Rights Reserved.</p>\n\t\t\t</div>\n\t\t\t<div class=\"social\">\n\t\t\t\t<a href=\"#\"><i class=\"fa fa-facebook\"></i></a>\n\t\t\t\t<a href=\"#\"><i class=\"fa fa-twitter\"></i></a>\n\t\t\t\t<a href=\"#\"><i class=\"fa fa-instagram\"></i\n", "\n#\n# from collections import Counter\n#\n# n = int(input())\n# s = input()\n#\n# c = Counter(s[i:i+2] for i in range(n-1))\n#\n# print(max(c, key=c.get))\n", "\n\nn = int(input())\ns = input()\n\ncount = 0\ngram = \"\"\nfor i in range(n-1):\n    gram_ = s[i:i+2]\n    if s.count(gram_) > count:\n        count = s.count(gram_)\n        gram = gram_\nprint(gram)\n", "\n\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(max_gram)\n", "\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n"]