2022-04-23 22:20:37.761016 num operations 1
2022-04-23 22:20:37.761046 size on input set 1
2022-04-23 22:20:37.761215 using api key sunu
2022-04-23 22:20:54.230000 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i + 1 < len(xs) and (xs[i + 1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "def main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650752437,
  "object": "edit"
}
2022-04-23 22:20:54.230299 fix syntax errors 8 ['\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i + 1 < len(xs) and (xs[i + 1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", '\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n', 'def main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print("Start: ", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print("Move: ", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print("Skip: ", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-23 22:20:54.230349 size on output set 5
2022-04-23 22:20:54.230361 num operations 1
2022-04-23 22:20:54.230367 size on input set 1
2022-04-23 22:20:54.230511 using api key jaanu
2022-04-23 22:21:13.169912 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef min_moves(pieces, target_coordinates):\n    moves_required = 0\n    target_coordinates.sort()\n\n\n    for i in range(len(pieces)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required // 2\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    print(min_moves(x, list(range(1, n + 1))))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required \n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n    return moves_required\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 6,
      "text": "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    },
    {
      "index": 7,
      "text": "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"
    }
  ],
  "created": 1650752454,
  "object": "edit"
}
2022-04-23 22:21:13.170317 fix syntax errors 8 ["\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\n\ndef min_moves(pieces, target_coordinates):\n    moves_required = 0\n    target_coordinates.sort()\n\n\n    for i in range(len(pieces)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required // 2\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    print(min_moves(x, list(range(1, n + 1))))\n", "\n\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required \n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "import sys\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n    return moves_required\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n"]
2022-04-23 22:21:13.170375 size on output set 5
2022-04-23 22:21:13.170388 num operations 1
2022-04-23 22:21:13.170394 size on input set 1
2022-04-23 22:21:13.170520 using api key jaanu
2022-04-23 22:21:31.266404 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))[1:]\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M-1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split()))) # list comprehension\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M): # for i in range(M-1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1 # total_moves += max(moves_from_current_to_next - 1, 0)\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    A.sort()\n    B.sort(reverse=True)\n\n    for i in range(K):\n        if A[i] < B[i]:\n            A[i], B[i] = B[i], A[i]\n        else:\n            break\n\n    print(sum(A))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):  # M-1\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650752473,
  "object": "edit"
}
2022-04-23 22:21:31.266668 fix syntax errors 8 ["\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))[1:]\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M-1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split()))) # list comprehension\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M): # for i in range(M-1):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1 # total_moves += max(moves_from_current_to_next - 1, 0)\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    A.sort()\n    B.sort(reverse=True)\n\n    for i in range(K):\n        if A[i] < B[i]:\n            A[i], B[i] = B[i], A[i]\n        else:\n            break\n\n    print(sum(A))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):  # M-1\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 22:21:31.266811 size on output set 5
