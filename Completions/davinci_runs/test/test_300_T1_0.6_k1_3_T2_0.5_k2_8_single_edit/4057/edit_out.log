2022-04-23 21:27:33.514355 num operations 1
2022-04-23 21:27:33.514387 size on input set 1
2022-04-23 21:27:33.514523 using api key derek
2022-04-23 21:27:49.538456 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Author: George Garchagudashvili\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 1,
      "text": "# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 2,
      "text": "\n'''\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n'''\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/python3\n\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 4,
      "text": "# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Solution\n\n# Number of files\nn = int(input())\n# Value of files\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each file value.\n\n# Pocket number assigned to each file value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the file\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the file\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 6,
      "text": "\n\n# Solution\n'''\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n'''\n"
    },
    {
      "index": 7,
      "text": "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    }
  ],
  "created": 1650749253,
  "object": "edit"
}
2022-04-23 21:27:49.538765 fix syntax errors 8 ['\n# Author: George Garchagudashvili\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', "\n'''\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n'''\n", '#!/usr/bin/python3\n\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '\n\n# Solution\n\n# Number of files\nn = int(input())\n# Value of files\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each file value.\n\n# Pocket number assigned to each file value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the file\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the file\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', "\n\n# Solution\n'''\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n'''\n", '\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n']
2022-04-23 21:27:49.538910 size on output set 7
2022-04-23 21:27:49.538924 num operations 1
2022-04-23 21:27:49.538929 size on input set 1
2022-04-23 21:27:49.539140 using api key kouti
2022-04-23 21:28:07.479987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(arr):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\nprint(get_min_pockets(arr))\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  result = 0\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  for i in d:\n    if d[i] % 2 != 0:\n      result += 1\n  return result\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    }
  ],
  "created": 1650749269,
  "object": "edit"
}
2022-04-23 21:28:07.480256 fix syntax errors 8 ['\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(arr):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\nprint(get_min_pockets(arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  result = 0\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  for i in d:\n    if d[i] % 2 != 0:\n      result += 1\n  return result\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n']
2022-04-23 21:28:07.480295 size on output set 3
2022-04-23 21:28:07.480307 num operations 1
2022-04-23 21:28:07.480313 size on input set 1
2022-04-23 21:28:07.480464 using api key sunu
2022-04-23 21:28:22.282437 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input(\"Enter n: \"))\nfor i in range(1,n+1):\n    for j in range(1,i+1):\n        print(\"*\",end=\"\")\n    print()\n"
    },
    {
      "index": 5,
      "text": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 6,
      "text": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(len(set(a)))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650749287,
  "object": "edit"
}
2022-04-23 21:28:22.282665 fix syntax errors 8 ['\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input("Enter n: "))\nfor i in range(1,n+1):\n    for j in range(1,i+1):\n        print("*",end="")\n    print()\n', 'n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', 'n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', "#!/usr/bin/env python\n\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(len(set(a)))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-23 21:28:22.282694 size on output set 5
