["\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))]) % 3 == 0\n\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i+1, len(str(s)) + 1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n    return count\n\nprint(max_divisible_three_cuts(3121))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts(1000000000000000000000000000000000))\nprint(max_divisible_three_cuts(201920181))\n", "\n\ndef sum_digits(n):\n    return sum(map(lambda x: int(x), str(n)))\n\ndef sum_digits_divisible_by_3(n):\n    return sum_digits(n) % 3 == 0\n\ndef find_cuts(s):\n    cuts = []\n    i = 0\n    while i < len(s) - 1:\n        if not sum_digits_divisible_by_3(s[:i+1]):\n            cuts.append(i + 1)\n            i += 1\n            continue\n        i += 1\n    if sum_digits_divisible_by_3(s[:i+1]):\n        return cuts\n    else:\n        return cuts + [len(s)]\n\ndef get_sub_strings(s, cuts):\n    sub_strings = []\n    i = 0\n    for cut in cuts:\n        sub_strings.append(s[i:cut])\n        i = cut\n    sub_strings.append(s[i:])\n    return sub_strings\n\ndef main():\n    s = input()\n    cuts = find_cuts(s)\n    sub_strings = get_sub_strings(s, cuts)\n    count = 0\n    for sub_string in sub_strings:\n        if sum_digits_divisible_by_3(sub_string):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef sum_digits(n):\n\n    return sum(map(lambda x: int(x), str(n)))\n\ndef sum_digits_divisible_by_3(n):\n    return sum(map(lambda x: int(x), str(n))) % 3 == 0\n\n\ndef find_cuts(s):\n    cuts = []\n    i = 0\n    while i < len(s) - 1:\n        if not sum_digits_divisible_by_3(s[:i + 1]):\n            cuts.append(i + 1)\n            i += 1\n            continue\n        i += 1\n    if sum_digits_divisible_by_3(s[:i + 1]):\n        return cuts\n    else:\n        return cuts + [len(s)]\n\n\ndef get_sub_strings(s, cuts):\n    sub_strings = []\n    i = 0\n    for cut in cuts:\n        sub_strings.append(s[i:cut])\n        i = cut\n    sub_strings.append(s[i:])\n    return sub_strings\n\n\ndef main():\n    s = input()\n    cuts = find_cuts(s)\n    sub_strings = get_sub_strings(s, cuts)\n    count = 0\n    for sub_string in sub_strings:\n        if sum_digits_divisible_by_3(sub_string):\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))]) % 3 == 0\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n    return count\n\n\nprint(max_divisible_three_cuts(3121))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts(1000000000000000000000000000000000))\nprint(max_divisible_three_cuts(201920181))\n", "\n\ndef sum_digits(n):\n    return sum(map(lambda x: int(x), str(n))) % 3 == 0\n\ndef sum_digits_divisible_by_3(n):\n    return sum_digits(n)\n\ndef find_cuts(s):\n    cuts = []\n    i = 0\n    while i < len(s):\n        if not sum_digits_divisible_by_3(s[:i+1]) and sum_digits_divisible_by_3(s[:i]):\n            cuts.append(i + 1)\n            i += 1\n            continue\n        i += 1\n    return cuts\n\ndef get_sub_strings(s, cuts):\n    sub_strings = []\n    i = 0\n    for cut in cuts:\n        sub_strings.append(s[i:cut])\n        i = cut\n    sub_strings.append(s[i:])\n    return sub_strings\n\ndef main():\n    s = input()\n    cuts = find_cuts(s)\n    sub_strings = get_sub_strings(s, cuts)\n    count = 0\n    for sub_string in sub_strings:\n        if sum_digits_divisible_by_3(sub_string):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))]) % 3 == 0\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n    return count\n\n\nprint(max_divisible_three_cuts(3121))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts(1000000000000000000000000000000000))\nprint(max_divisible_three_cuts(201920181))\n", "\n\ndef sum_digits(s):\n    return sum(map(lambda x: int(x), str(s)))\n\ndef sum_digits_divisible_by_3(s):\n    return sum(map(lambda x: int(x), str(s))) % 3 == 0\n\ndef find_cuts(s):\n    cuts = []\n    i = 0\n    while i < len(s) - 1:\n        if not sum_digits_divisible_by_3(s[:i+1]):\n            cuts.append(i + 1)\n            i += 1\n            continue\n        i += 1\n    if sum_digits_divisible_by_3(s[i+1:]):\n        return cuts\n    else:\n        return cuts + [len(s)]\n\ndef get_sub_strings(s, cuts):\n    sub_strings = []\n    i = 0\n    for cut in cuts:\n        sub_strings.append(s[i:cut])\n        i = cut\n    sub_strings.append(s[i:])\n    return sub_strings\n\ndef main():\n    s = input()\n    cuts = find_cuts(s)\n    sub_strings = get_sub_strings(s, cuts)\n    count = 0\n    for sub_string in sub_strings:\n        if sum_digits_divisible_by_3(sub_string):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))])%3 == 0\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_divisible_by_three(int(s[i:j])):\n                count += 1\n    return count\n\nprint(max_divisible_three_cuts('3121'))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts('1000000000000000000000000000000000'))\nprint(max_divisible_three_cuts('201920181'))\n", "\ninput = input(\"Enter a number: \")\n\nif len(input) == 1:\n    print(1)\nelse:\n    count = 0\n    for i in range(1, len(input)):\n        if int(input[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\ninput = input.strip()\ninput = input()\n\nif len(input) == 1:\n    print(0)\nelse:\n    count = 0\n    for i in range(1, len(input)):\n        if int(input[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))]) % 3 == 0\n\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n\n    return count\n\nprint(max_divisible_three_cuts(3121))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts(1000000000000000000000000000000000))\nprint(max_divisible_three_cuts(201920181))\n", "\n\ninput_str = input()\n\nif len(input_str) == 1:\n    print(1)\nelse:\n    count = 0\n    for i in range(1, len(input_str)):\n        if int(input_str[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\n\ninput = str(input())\n\nif len(input) == 1:\n    print(1)\nelse:\n    count = 0\n    for i in range(1, len(input)):\n        if int(input[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))]) % 3 == 0\n\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n    return count\n\n\nprint(max_divisible_three_cuts(3121))\nprint(max_divisible_three_cuts(6))\nprint(max_divisible_three_cuts(1000000000000000000000000000000000))\nprint(max_divisible_three_cuts(201920181))\n", "\n\ndef is_divisible_by_three(n):\n    return sum([int(x) for x in list(str(n))])%3 == 0\n\ndef max_divisible_three_cuts(s):\n    count = 0\n    for i in range(len(str(s))):\n        for j in range(i+1, len(str(s))+1):\n            if is_divisible_by_three(int(str(s)[i:j])):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(max_divisible_three_cuts(3121))\n    print(max_divisible_three_cuts(6))\n    print(max_divisible_three_cuts(1000000000000000000000000000000000))\n    print(max_divisible_three_cuts(201920181))\n", "\ninput = input()\n\nif len(input) == 1:\n    print(1)\nelse:\n    count = 0\n    for i in range(1, len(input)):\n        if int(input[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\n\ninput_value = input()\n\nif len(input_value) == 1:\n    print(1)\nelse:\n    count = 0\n    for i in range(1, len(input_value)):\n        if int(input_value[:i]) % 3 == 0:\n            count += 1\n    print(count)\n", "\n\ndef sum_digits(n):\n    return sum(map(int, str(n)))\n\ndef sum_digits_divisible_by_3(n):\n    return sum(map(int, str(n))) % 3 == 0\n\ndef find_cuts(s):\n    cuts = []\n    i = 0\n    while i < len(s) - 1:\n        if not sum_digits_divisible_by_3(s[:i+1]):\n            cuts.append(i + 1)\n            i += 1\n            continue\n        i += 1\n    if sum_digits_divisible_by_3(s[:i+1]):\n        return cuts\n    else:\n        return cuts + [len(s)]\n\ndef get_sub_strings(s, cuts):\n    sub_strings = []\n    i = 0\n    for cut in cuts:\n        sub_strings.append(s[i:cut])\n        i = cut\n    sub_strings.append(s[i:])\n    return sub_strings\n\ndef main():\n    s = input()\n    cuts = find_cuts(s)\n    sub_strings = get_sub_strings(s, cuts)\n    count = 0\n    for sub_string in sub_strings:\n        if sum_digits_divisible_by_3(sub_string):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]