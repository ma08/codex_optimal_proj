2022-04-23 20:46:26.447466 num operations 1
2022-04-23 20:46:26.447506 size on input set 1
2022-04-23 20:46:26.447685 using api key derek
2022-04-23 20:47:16.928303 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2018/11/14 17:36\n# @Author  : fans\n# @File    : file.py\n# @Software: PyCharm Community Edition\n# @Notice  : Copyright(c) 2018 Asiainfo Technologies Co., Ltd.\n# All rights reserved.\nimport os\n\n# path=r'C:\\Users\\Administrator\\Desktop\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\u5efa\u6587\u4ef6\u5939\\\u65b0\n"
    },
    {
      "index": 1,
      "text": "var fs = require('fs');\n\nvar file = fs.readFileSync('file.txt', 'utf8');\n\nconsole.log(file);\n"
    },
    {
      "index": 2,
      "text": "var fs = require('fs');\n\nfs.readFile('./data.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n  console.log(data.split('\\n').length);\n});\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar file = process.argv[2];\nvar extension = path.extname(file);\n\nif (extension === '.txt') {\n  fs.readFile(file, 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n  });\n} else {\n  console.log('Please provide a .txt file');\n}\n"
    },
    {
      "index": 4,
      "text": "const fs = require('fs');\nconst path = require('path');\n\nconst file = path.join(__dirname, 'file.txt');\n\nfs.readFile(file, 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n\nconsole.log('TEST');\n"
    },
    {
      "index": 5,
      "text": "const fs = require(\"fs\");\n\nfunction readFile(path) {\n  return new Promise((resolve, reject) => {\n    try {\n      const result = fs.readFileSync(path, \"utf-8\");\n      resolve(result);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nfunction writeFile(path, content) {\n  return new Promise((resolve, reject) => {\n    try {\n      fs.writeFileSync(path, content);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nmodule.exports = {\n  readFile,\n  writeFile,\n};\n"
    },
    {
      "index": 6,
      "text": "def open_file(filename)\n  file = File.open(filename)\n  yield file\n  file.close\nend\n\nopen_file('test.txt') do |file|\n  puts file.read\nend\n"
    },
    {
      "index": 7,
      "text": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>File Upload</title>\n</head>\n<body>\n\t<form action=\"file.php\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t<input type=\"file\" name=\"file\">\n\t\t<input type=\"submit\" name=\"submit\" value=\"submit\">\n\t</form>\n</body>\n</html>\n"
    }
  ],
  "created": 1650746786,
  "object": "edit"
}
2022-04-23 20:47:16.928595 fix syntax errors 8 ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2018/11/14 17:36\n# @Author  : fans\n# @File    : file.py\n# @Software: PyCharm Community Edition\n# @Notice  : Copyright(c) 2018 Asiainfo Technologies Co., Ltd.\n# All rights reserved.\nimport os\n\n# path=r'C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新建文件夹\\新\n", "var fs = require('fs');\n\nvar file = fs.readFileSync('file.txt', 'utf8');\n\nconsole.log(file);\n", "var fs = require('fs');\n\nfs.readFile('./data.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n  console.log(data.split('\\n').length);\n});\n", "#!/usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar file = process.argv[2];\nvar extension = path.extname(file);\n\nif (extension === '.txt') {\n  fs.readFile(file, 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n  });\n} else {\n  console.log('Please provide a .txt file');\n}\n", "const fs = require('fs');\nconst path = require('path');\n\nconst file = path.join(__dirname, 'file.txt');\n\nfs.readFile(file, 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n\nconsole.log('TEST');\n", 'const fs = require("fs");\n\nfunction readFile(path) {\n  return new Promise((resolve, reject) => {\n    try {\n      const result = fs.readFileSync(path, "utf-8");\n      resolve(result);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nfunction writeFile(path, content) {\n  return new Promise((resolve, reject) => {\n    try {\n      fs.writeFileSync(path, content);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nmodule.exports = {\n  readFile,\n  writeFile,\n};\n', "def open_file(filename)\n  file = File.open(filename)\n  yield file\n  file.close\nend\n\nopen_file('test.txt') do |file|\n  puts file.read\nend\n", '<!DOCTYPE html>\n<html>\n<head>\n\t<title>File Upload</title>\n</head>\n<body>\n\t<form action="file.php" method="post" enctype="multipart/form-data">\n\t\t<input type="file" name="file">\n\t\t<input type="submit" name="submit" value="submit">\n\t</form>\n</body>\n</html>\n']
2022-04-23 20:47:16.928767 size on output set 8
2022-04-23 20:47:16.928780 num operations 1
2022-04-23 20:47:16.928787 size on input set 1
2022-04-23 20:47:16.928954 using api key sunu
2022-04-23 20:48:08.824397 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# test comment\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nsteps = 0\n\nwhile n != m:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 4,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 23:46:31 2020\n\n@author: karanwaghela\n\"\"\"\n\ndef optimal_sequence(n):\n    sequence = []\n    while n >= 1:\n        sequence.append(n)\n        if n % 3 == 0:\n            n = n // 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return reversed(sequence)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 7,
      "text": "\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    exit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    exit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        exit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        exit()\n    steps += 1\n\nprint(steps)\n"
    }
  ],
  "created": 1650746836,
  "object": "edit"
}
2022-04-23 20:48:08.824653 fix syntax errors 8 ['\n# test comment\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nsteps = 0\n\nwhile n != m:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '#!/usr/bin/env python3\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Mon Sep  7 23:46:31 2020\n\n@author: karanwaghela\n"""\n\ndef optimal_sequence(n):\n    sequence = []\n    while n >= 1:\n        sequence.append(n)\n        if n % 3 == 0:\n            n = n // 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return reversed(sequence)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    exit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    exit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        exit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        exit()\n    steps += 1\n\nprint(steps)\n']
2022-04-23 20:48:08.824793 size on output set 7
2022-04-23 20:48:08.824807 num operations 1
2022-04-23 20:48:08.824814 size on input set 1
2022-04-23 20:48:08.825035 using api key derek
2022-04-23 20:48:25.717285 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\nimport math\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\ncount = 0\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0 and m != 1:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 3,
      "text": "\n\n\nimport sys\n\n\ninput_list = sys.stdin.readline().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\nimport sys\n\nfor line in sys.stdin:\n    print(line)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 7,
      "text": "\nimport math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    }
  ],
  "created": 1650746888,
  "object": "edit"
}
2022-04-23 20:48:25.717575 fix syntax errors 8 ['\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n', '#!/usr/bin/python3\nimport math\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\ncount = 0\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0 and m != 1:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\n\n\nimport sys\n\n\ninput_list = sys.stdin.readline().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\nimport math\n\nimport sys\n\nfor line in sys.stdin:\n    print(line)\n', '\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\nimport math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n']
2022-04-23 20:48:25.717710 size on output set 8
