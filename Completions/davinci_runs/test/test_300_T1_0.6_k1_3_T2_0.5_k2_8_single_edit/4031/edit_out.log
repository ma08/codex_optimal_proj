2022-04-23 21:02:17.103877 num operations 1
2022-04-23 21:02:17.103899 size on input set 1
2022-04-23 21:02:17.104046 using api key derek
2022-04-23 21:02:37.024716 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import Counter\n\n\ndef solve(s):\n    c = Counter(s)\n    odd = 0\n    for k, v in c.items():\n        if v % 2 == 1:\n            odd += 1\n    if odd > 1:\n        return 'NO SOLUTION'\n    ret = ''\n    for k, v in c.items():\n        if v % 2 == 1:\n            ret = k\n            c[k] -= 1\n        for _ in range(v // 2):\n            ret = k + ret + k\n    return ret\n\ndef main():\n    s = input()\n    print(solve(s))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(raw_input())\n    strings = []\n    for _ in range(n):\n        strings.append(raw_input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    solve()\n"
    }
  ],
  "created": 1650747737,
  "object": "edit"
}
2022-04-23 21:02:37.025136 fix syntax errors 8 ["from collections import Counter\n\n\ndef solve(s):\n    c = Counter(s)\n    odd = 0\n    for k, v in c.items():\n        if v % 2 == 1:\n            odd += 1\n    if odd > 1:\n        return 'NO SOLUTION'\n    ret = ''\n    for k, v in c.items():\n        if v % 2 == 1:\n            ret = k\n            c[k] -= 1\n        for _ in range(v // 2):\n            ret = k + ret + k\n    return ret\n\ndef main():\n    s = input()\n    print(solve(s))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(raw_input())\n    strings = []\n    for _ in range(n):\n        strings.append(raw_input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    solve()\n"]
2022-04-23 21:02:37.025354 size on output set 8
2022-04-23 21:02:37.025379 num operations 1
2022-04-23 21:02:37.025389 size on input set 1
2022-04-23 21:02:37.025565 using api key kouti
2022-04-23 21:03:03.128947 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ababab')\n    False\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'abc')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba'])\n    ['a', 'ba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    >>> reorder(['qwerty', 'qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if not is_substring(strings[j], strings[i]):\n                if is_substring(strings[i], strings[j]):\n                    strings[i], strings[j] = strings[j], strings[i]\n                else:\n                    return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    >>> is_substring('a', 'b')\n    False\n    \"\"\"\n    if a == b or a == '':\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if start > len(b) - len(a):\n            return False\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    >>> reorder(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'])\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']\n    >>> reorder(['ba', 'a'])\n    False\n    >>> reorder(['a', 'b', 'a', 'b', 'a'])\n    False\n    >>> reorder(['a', 'b', 'b', 'a', 'a'])\n    ['a', 'b', 'a', 'b', 'a']\n    >>> reorder(['a', 'b', 'b', 'a', 'a'])\n    ['a', 'b', 'a', 'b', 'a']\n    \"\"\"\n    if len(strings) == 0:\n        return strings\n    for i in range(len(strings)):\n        if strings[i] == '':\n            return False\n        for j in range(i+1, len(strings)):\n            if not (is_substring(strings[i], strings[j]) or is_substring(strings[j], strings[i])):\n                return False\n    strings.sort(key = len)\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b or len(a) > len(b):\n        return a == b\n    for i in range(len(b) - len(a) + 1):\n        if a == b[i:i+len(a)]:\n            return True\n    return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)-1):\n            if is_substring(strings[i], strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n            elif not is_substring(strings[j], strings[i]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 4,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a') True\n    >>> is_substring('ab', 'a') False\n    >>> is_substring('a', 'ab') True\n    >>> is_substring('a', 'abab') True\n    >>> is_substring('ab', 'abab') True\n    >>> is_substring('abab', 'abab') True\n    >>> is_substring('abab', 'ab') False\n    >>> is_substring('ab', 'ababab') True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a') True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba']) ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab']) False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty']) ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    # import doctest\n    # doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba']) == ['a', 'ba', 'aba', 'aba', 'abacaba']\n    True\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab']) == False\n    True\n    >>> reorder(['qwerty', 'qwerty', 'qwerty']) == ['qwerty', 'qwerty', 'qwerty']\n    True\n    >>> reorder(['a', 'ba', 'aba', 'aba', 'abacaba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'ba', 'aba', 'aba', 'abacaba']) == ['a', 'ba', 'aba', 'aba', 'abacaba']\n    True\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 6,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b[:len(a)]:\n        return True\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 7,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n        >>> is_substring('a', 'a')\n        True\n        >>> is_substring('ab', 'a')\n        False\n        >>> is_substring('a', 'ab')\n        True\n        >>> is_substring('a', 'abab')\n        True\n        >>> is_substring('ab', 'abab')\n        True\n        >>> is_substring('abab', 'abab')\n        True\n        >>> is_substring('abab', 'ab')\n        False\n        >>> is_substring('ab', 'ababab')\n        True\n        >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n        True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n        >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n        ['a', 'ba', 'aba', 'aba', 'abacaba']\n        >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n        False\n        >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n        ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    }
  ],
  "created": 1650747757,
  "object": "edit"
}
2022-04-23 21:03:03.129398 fix syntax errors 8 ['\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ababab\')\n    False\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'abc\')\n    True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\'])\n    [\'a\', \'ba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if not is_substring(strings[j], strings[i]):\n                if is_substring(strings[i], strings[j]):\n                    strings[i], strings[j] = strings[j], strings[i]\n                else:\n                    return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    >>> is_substring(\'a\', \'b\')\n    False\n    """\n    if a == b or a == \'\':\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if start > len(b) - len(a):\n            return False\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    >>> reorder([\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\'])\n    [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\']\n    >>> reorder([\'ba\', \'a\'])\n    False\n    >>> reorder([\'a\', \'b\', \'a\', \'b\', \'a\'])\n    False\n    >>> reorder([\'a\', \'b\', \'b\', \'a\', \'a\'])\n    [\'a\', \'b\', \'a\', \'b\', \'a\']\n    >>> reorder([\'a\', \'b\', \'b\', \'a\', \'a\'])\n    [\'a\', \'b\', \'a\', \'b\', \'a\']\n    """\n    if len(strings) == 0:\n        return strings\n    for i in range(len(strings)):\n        if strings[i] == \'\':\n            return False\n        for j in range(i+1, len(strings)):\n            if not (is_substring(strings[i], strings[j]) or is_substring(strings[j], strings[i])):\n                return False\n    strings.sort(key = len)\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b or len(a) > len(b):\n        return a == b\n    for i in range(len(b) - len(a) + 1):\n        if a == b[i:i+len(a)]:\n            return True\n    return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)-1):\n            if is_substring(strings[i], strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n            elif not is_substring(strings[j], strings[i]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\') True\n    >>> is_substring(\'ab\', \'a\') False\n    >>> is_substring(\'a\', \'ab\') True\n    >>> is_substring(\'a\', \'abab\') True\n    >>> is_substring(\'ab\', \'abab\') True\n    >>> is_substring(\'abab\', \'abab\') True\n    >>> is_substring(\'abab\', \'ab\') False\n    >>> is_substring(\'ab\', \'ababab\') True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\') True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\']) [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\']) False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\']) [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    # import doctest\n    # doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\']) == [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    True\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\']) == False\n    True\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\']) == [\'qwerty\', \'qwerty\', \'qwerty\']\n    True\n    >>> reorder([\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']) == [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    True\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b[:len(a)]:\n        return True\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n        >>> is_substring(\'a\', \'a\')\n        True\n        >>> is_substring(\'ab\', \'a\')\n        False\n        >>> is_substring(\'a\', \'ab\')\n        True\n        >>> is_substring(\'a\', \'abab\')\n        True\n        >>> is_substring(\'ab\', \'abab\')\n        True\n        >>> is_substring(\'abab\', \'abab\')\n        True\n        >>> is_substring(\'abab\', \'ab\')\n        False\n        >>> is_substring(\'ab\', \'ababab\')\n        True\n        >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n        True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n        >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n        [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n        >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n        False\n        >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n        [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n']
2022-04-23 21:03:03.129624 size on output set 8
2022-04-23 21:03:03.129645 num operations 1
2022-04-23 21:03:03.129656 size on input set 1
2022-04-23 21:03:03.129873 using api key soukgp
2022-04-23 21:03:16.409543 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 3,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 4,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 5,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 6,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 7,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\", substrings\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    }
  ],
  "created": 1650747783,
  "object": "edit"
}
2022-04-23 21:03:16.409808 fix syntax errors 8 ['\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO", substrings\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n']
2022-04-23 21:03:16.409859 size on output set 2
