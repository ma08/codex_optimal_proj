2022-04-18 01:39:47.317243 """
You are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.

Let's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \dots r]$.

Your task is to construct such string $s$ of minimum possible length that there are exactly $k$ positions $i$ such that $s[i \dots i + n - 1] = t$. In other words, your task is to construct such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.

It is guaranteed that the answer is always unique.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n, k \le 50$) â€” the length of the string $t$ and the number of substrings.

The second line of the input contains the string $t$ consisting of exactly $n$ lowercase Latin letters.


-----Output-----

Print such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.

It is guaranteed that the answer is always unique.


-----Examples-----
Input
3 4
aba

Output
ababababa

Input
3 2
cat

Output
catcat
"""
2022-04-18 01:39:47.317259 --------------------------
2022-04-18 01:40:40.003429 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n    s = t\n    while len(s) < k * n:\n        s += t\n    print(s[:k * n])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, k, t):\n    def check(s):\n        return s.count(t) == k\n\n    if n == 1:\n        return t * k\n\n    if k == 1:\n        return t\n\n    if n == 2:\n        return t * (k // 2) + t[:k % 2]\n\n    if n == 3:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        return t[:2] * (k // 3) + t[:k % 3]\n\n    if n == 4:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        if k % 4 == 0:\n            return t * (k // 4)\n\n        if k % 4 == 1:\n            return t[:2] * (k // 4) + t[:1]\n\n        if k % 4 == 2:\n            return t[:2] * (k // 4) + t[:2]\n\n        return t[:2] * (k // 4) + t[:3]\n\n    if k % (n - 1) == 0:\n        return t[:n - 1] * (k // (n - 1)) + t[:1]\n\n    if k % n == 0:\n        return t * (k // n)\n\n    if k % (n + 1) == 0:\n        return t[:n] * (k // (n + 1)) + t[:1]\n\n    if k % (n - 1) == 1:\n        return t[:n - 1] * (k // (n - 1)) + t[:2]\n\n    if k % n == 1:\n        return t[:n] * (k // n) + t[:1]\n\n    if k % (n + 1) == 1:\n        return t[:n] * (k // (n + 1)) + t[:2]\n\n    if k % (n - 1) == 2:\n        return t[:n - 1] * (k // (n - 1)) + t[:3]\n\n    if k % n == 2:\n        return t[:n] * (k // n) + t[:2]\n\n    if k % (n + 1) == 2:\n        return t[:n] * (k // (n + 1)) + t[:3]\n\n    if k % (n - 1) == 3:\n        return t[:n - 1] * (k // (n - 1)) + t[:4]\n\n    if k % n == 3:\n        return t[:n] * (k // n) + t[:3]\n\n    if k % (n + 1) == 3:\n        return t[:n] * (k // (n + 1)) + t[:4]\n\n    return t * (k // n) + t[:k % n]\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    t = input()\n\n    s = solve(n, k, t)\n\n    print(s)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, t):\n    \"\"\"\n    >>> solve(3, 4, 'aba')\n    'ababababa'\n    >>> solve(3, 2, 'cat')\n    'catcat'\n    \"\"\"\n    s = ''\n    while k > 0:\n        s += t\n        k -= 1\n    return s + t[0:n-(len(s) % n)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    n, k = map(int, input().split())\n    t = input()\n    print(solve(n, k, t))"
    }
  ],
  "created": 1650245987,
  "id": "cmpl-4yAeh1x1dOdTpgyIAK1FBJyQ4RRkh",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:40:40.003657 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n    s = t\n    while len(s) < k * n:\n        s += t\n    print(s[:k * n])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 01:40:40.003708 REASON stop
2022-04-18 01:40:40.037196 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, k, t):\n    def check(s):\n        return s.count(t) == k\n\n    if n == 1:\n        return t * k\n\n    if k == 1:\n        return t\n\n    if n == 2:\n        return t * (k // 2) + t[:k % 2]\n\n    if n == 3:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        return t[:2] * (k // 3) + t[:k % 3]\n\n    if n == 4:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        if k % 4 == 0:\n            return t * (k // 4)\n\n        if k % 4 == 1:\n            return t[:2] * (k // 4) + t[:1]\n\n        if k % 4 == 2:\n            return t[:2] * (k // 4) + t[:2]\n\n        return t[:2] * (k // 4) + t[:3]\n\n    if k % (n - 1) == 0:\n        return t[:n - 1] * (k // (n - 1)) + t[:1]\n\n    if k % n == 0:\n        return t * (k // n)\n\n    if k % (n + 1) == 0:\n        return t[:n] * (k // (n + 1)) + t[:1]\n\n    if k % (n - 1) == 1:\n        return t[:n - 1] * (k // (n - 1)) + t[:2]\n\n    if k % n == 1:\n        return t[:n] * (k // n) + t[:1]\n\n    if k % (n + 1) == 1:\n        return t[:n] * (k // (n + 1)) + t[:2]\n\n    if k % (n - 1) == 2:\n        return t[:n - 1] * (k // (n - 1)) + t[:3]\n\n    if k % n == 2:\n        return t[:n] * (k // n) + t[:2]\n\n    if k % (n + 1) == 2:\n        return t[:n] * (k // (n + 1)) + t[:3]\n\n    if k % (n - 1) == 3:\n        return t[:n - 1] * (k // (n - 1)) + t[:4]\n\n    if k % n == 3:\n        return t[:n] * (k // n) + t[:3]\n\n    if k % (n + 1) == 3:\n        return t[:n] * (k // (n + 1)) + t[:4]\n\n    return t * (k // n) + t[:k % n]\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    t = input()\n\n    s = solve(n, k, t)\n\n    print(s)"
}
2022-04-18 01:40:40.037266 REASON stop
2022-04-18 01:40:40.037746 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, t):\n    \"\"\"\n    >>> solve(3, 4, 'aba')\n    'ababababa'\n    >>> solve(3, 2, 'cat')\n    'catcat'\n    \"\"\"\n    s = ''\n    while k > 0:\n        s += t\n        k -= 1\n    return s + t[0:n-(len(s) % n)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    n, k = map(int, input().split())\n    t = input()\n    print(solve(n, k, t))"
}
2022-04-18 01:40:40.037802 REASON stop
