["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    lengths = list(map(int, sys.stdin.readline().split()))\n    if max(lengths) < sum(lengths) - max(lengths):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    lengths = list(map(int, input().split()))\n\n    print(\"Yes\" if (max(lengths) < sum(lengths) - max(lengths)) else \"No\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n\tn = int(input())\n\tlengths = list(map(int, input().split()))\n\n\tprint(\"Yes\" if (max(lengths) < sum(lengths) - max(lengths)) else \"No\")\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\nn = int(input())\nline = input().split()\nline = [int(i) for i in line]  # list comprehension\n\n# print(n, line)\n\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "#include <iostream>\nimport sys\n\nn = int(sys.stdin.readline())\nline = sys.stdin.readline().split()\nline = [int(i) for i in line]\n# print(n, line)\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\nline = sys.stdin.readline().split('')\nline = [int(i) for i in line]\n\n# print(n, line)\n\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\nimport sys\n\nn = int(sys.stdin.readline())\nline = sys.stdin.readline().split()\nline = [int(i) for i in line]\n\n# print(n, line)\n\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    lengths = list(map(int, sys.stdin.readline().split()))\n    if max(lengths) < sum(lengths) - max(lengths):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    lengths = list(map(int, sys.stdin.readline().split()))\n    if max(lengths) < sum(lengths) - max(lengths):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\nn = int(sys.stdin.readline())\nline = sys.stdin.readline().split()\nline = [int(i) for i in line]\n\n# print(n, line)\n\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    lengths = list(map(int, sys.stdin.readline().split()))\n    if max(lengths) < sum(lengths) - max(lengths)\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport heapq\nimport math\nimport sys\n\ninf = float(\"inf\")\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n        self.dist = {}\n\n    def add_edge(self, u, v, w):\n        if u in self.graph:\n            self.graph[u][v] = w\n        else:\n            self.graph[u] = {v: w}\n\n    def dijkstra(self, s):\n        self.dist[s] = 0\n        pq = []\n        heapq.heappush(pq, (0, s))\n\n        while pq:\n            d, u = heapq.heappop(pq)\n            if d > self.dist[u]:\n                continue\n            for v, w in self.graph[u].items():\n                if v not in self.dist or self.dist[v] > self.dist[u] + w:\n                    self.dist[v] = self.dist[u] + w\n                    heapq.heappush(pq, (self.dist[v], v))\n\n    def shortest_path(self, s, t):\n        self.dijkstra(s)\n        return self.dist[t]\n\n    def all_shortest_path(self, s):\n        self.dijkstra(s)\n        return self.dist\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph()\n    for _ in range(m):\n        u, v, w = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v, w)\n        g.add_edge(v, u, w)\n\n    s, t = map(int, sys.stdin.readline().split())\n    print(g.shortest_path(s, t))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    lengths = list(map(int, input().split()))\n\n\n    print(\"Yes\" if (max(lengths) < sum(lengths) - max(lengths)) else \"No\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        lengths = list(map(int, sys.stdin.readline().split()))\n        if max(lengths) < sum(lengths) - max(lengths):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    lengths = list(map(int, input().split()))\n\n    print(\"Yes\" if max(lengths) < sum(lengths) - max(lengths) else \"No\")\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\nfile\n\"\"\"\n\nimport sys\n\n    \"\"\"\n    main\n    \"\"\"\ndef main():\n    n = int(sys.stdin.readline())\n    lengths = list(map(int, sys.stdin.readline().split()))\n    if max(lengths) < sum(lengths) - max(lengths):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn = int(sys.stdin.readline())\nline = sys.stdin.readline().split()\nline = [int(i) for i in line]\n\n# print(n, line)\n\nif max(line) < sum(line) - max(line):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"]