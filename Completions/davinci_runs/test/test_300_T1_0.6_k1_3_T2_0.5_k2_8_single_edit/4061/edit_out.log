2022-04-23 21:30:35.350281 num operations 1
2022-04-23 21:30:35.350302 size on input set 1
2022-04-23 21:30:35.350432 using api key kouti
2022-04-23 21:30:50.628116 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i - 1\n\nprint(res)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n"
    },
    {
      "index": 3,
      "text": "\nfrom sys import stdin\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 6
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n"
    }
  ],
  "created": 1650749435,
  "object": "edit"
}
2022-04-23 21:30:50.628393 NO RESULT
2022-04-23 21:30:50.628402 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-23 21:30:50.628445 NO RESULT
2022-04-23 21:30:50.628451 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 6
}
2022-04-23 21:30:50.628490 fix syntax errors 6 ['\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i - 1\n\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n', '\nfrom sys import stdin\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n']
2022-04-23 21:30:50.628525 size on output set 4
2022-04-23 21:30:50.628535 num operations 1
2022-04-23 21:30:50.628541 size on input set 1
2022-04-23 21:30:50.628660 using api key sunu
2022-04-23 21:31:12.864667 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# def findLongestSubstring(s, t):\n#     \"\"\"\n#     :type s: str\n#     :type t: str\n#     :rtype: int\n#     \"\"\"\n#     if len(s) == len(t):\n#         return 0\n\n#     left, right = 0, len(s) - 1\n#     while right - left > 1:\n#         mid = (left + right) // 2\n#         if all(c in s[mid:] for c in t):\n#             left = mid\n#         else:\n#             right = mid\n\n#     if all(c in s[right:] for c in t):\n#         return len(s) - right\n#     else:\n#         return len(s) - left\n\ndef findLongestSubstring(s, t): \n    if len(s) == len(t): \n        return 0 \n    left, right = 0, len(s) - 1 \n    while right - left > 1: \n        mid = (left + right) // 2 \n        if all(c in s[mid:] for c in t): \n            left = mid \n        else: \n            right = mid \n    if all(c in s[right:] for c in t): \n        return len(s) - right \n    else: \n        return len(s) - left \n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef findLongestSubstring(s, t)\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0;\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2;\n        if all(c in s[mid:] for c in t):\n            left = mid;\n        else:\n            right = mid;\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right;\n    else:\n        return len(s) - left;\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) <= len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 0:\n        mid = (left + right) // 2\n        if all(c in s[mid+1:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right+1:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print(findLongestSubstring(s, t))\n"
    },
    {
      "index": 7,
      "text": "\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    }
  ],
  "created": 1650749450,
  "object": "edit"
}
2022-04-23 21:31:12.865194 fix syntax errors 8 ['\n\n# def findLongestSubstring(s, t):\n#     """\n#     :type s: str\n#     :type t: str\n#     :rtype: int\n#     """\n#     if len(s) == len(t):\n#         return 0\n\n#     left, right = 0, len(s) - 1\n#     while right - left > 1:\n#         mid = (left + right) // 2\n#         if all(c in s[mid:] for c in t):\n#             left = mid\n#         else:\n#             right = mid\n\n#     if all(c in s[right:] for c in t):\n#         return len(s) - right\n#     else:\n#         return len(s) - left\n\ndef findLongestSubstring(s, t): \n    if len(s) == len(t): \n        return 0 \n    left, right = 0, len(s) - 1 \n    while right - left > 1: \n        mid = (left + right) // 2 \n        if all(c in s[mid:] for c in t): \n            left = mid \n        else: \n            right = mid \n    if all(c in s[right:] for c in t): \n        return len(s) - right \n    else: \n        return len(s) - left \n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t)\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0;\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2;\n        if all(c in s[mid:] for c in t):\n            left = mid;\n        else:\n            right = mid;\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right;\n    else:\n        return len(s) - left;\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) <= len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 0:\n        mid = (left + right) // 2\n        if all(c in s[mid+1:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right+1:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print(findLongestSubstring(s, t))\n', '\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n']
2022-04-23 21:31:12.865281 size on output set 6
2022-04-23 21:31:12.865294 num operations 1
2022-04-23 21:31:12.865300 size on input set 1
2022-04-23 21:31:12.865450 using api key soukgp
2022-04-23 21:31:34.632553 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt + 1)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 1,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 2,
      "text": "\ns = input() # input\u306e\u6587\u5b57\u3092s\u306b\u4ee3\u5165\nt = input() # input\u306e\u6587\u5b57\u3092t\u306b\u4ee3\u5165\n\ncnt = 0\n\nfor i in range(len(s)): # s\u306e\u6587\u5b57\u6570\u5206\u30eb\u30fc\u30d7\n    if s[i] == t[0]: # s[i]\u304ct[0]\u3068\u4e00\u81f4\u3059\u308b\u5834\u5408\n        cnt += 1\n        t = t[1:] # t\u30921\u6587\u5b57\u6e1b\u3089\u3059\n    if len(t) == 0: # t\u304c\u7a7a\u306b\u306a\u3063\u305f\u3089\n        break\n\nif len(t) == 0: # t\u304c\u7a7a\u3060\u3063\u305f\u3089\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 3,
      "text": "\ns = input(\"s: \")\nt = input(\"t: \")\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(\"len(s) - cnt: \", len(s) - cnt)\nelse:\n    print(\"len(s): \", len(s))\n"
    },
    {
      "index": 4,
      "text": "def main():\n    s = input()\n    t = input()\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            cnt += 1\n            t = t[1:]\n        if len(t) == 0:\n            break\n    if len(t) == 0:\n        print(len(s) - cnt)\n    else:\n        print(len(s))\nmain()\n"
    },
    {
      "index": 5,
      "text": "\ns = input()  # abab\nt = input()  # aba\n\ncnt = 0\n\nfor i in range(len(s)):\n    print(i)\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n        if len(t) == 0:\n            break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 6,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 7,
      "text": "s = input()\nt = input()\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    }
  ],
  "created": 1650749472,
  "object": "edit"
}
2022-04-23 21:31:34.632881 fix syntax errors 8 ['\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt + 1)\nelse:\n    print(len(s))\n', 's = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', '\ns = input() # inputの文字をsに代入\nt = input() # inputの文字をtに代入\n\ncnt = 0\n\nfor i in range(len(s)): # sの文字数分ループ\n    if s[i] == t[0]: # s[i]がt[0]と一致する場合\n        cnt += 1\n        t = t[1:] # tを1文字減らす\n    if len(t) == 0: # tが空になったら\n        break\n\nif len(t) == 0: # tが空だったら\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', '\ns = input("s: ")\nt = input("t: ")\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print("len(s) - cnt: ", len(s) - cnt)\nelse:\n    print("len(s): ", len(s))\n', 'def main():\n    s = input()\n    t = input()\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            cnt += 1\n            t = t[1:]\n        if len(t) == 0:\n            break\n    if len(t) == 0:\n        print(len(s) - cnt)\n    else:\n        print(len(s))\nmain()\n', '\ns = input()  # abab\nt = input()  # aba\n\ncnt = 0\n\nfor i in range(len(s)):\n    print(i)\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n        if len(t) == 0:\n            break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', 's = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', 's = input()\nt = input()\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n']
2022-04-23 21:31:34.632966 size on output set 7
