2022-04-23 21:44:35.542991 num operations 1
2022-04-23 21:44:35.543011 size on input set 1
2022-04-23 21:44:35.543149 using api key sunu
2022-04-23 21:44:54.485330 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30\n    minute *= 6\n\n    x1 = 3 * math.cos(math.radians(hour))\n    y1 = 3 * math.sin(math.radians(hour))\n    x2 = 4 * math.cos(math.radians(minute))\n    y2 = 4 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = hour * 30.0\n    minute = minute * 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 5,
      "text": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <math.h>\nusing namespace std;\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split();\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = h * 30.0\n    minute = m * 6.0\n\n    x1 = a * math.cos(math.radians(hour))\n    y1 = a * math.sin(math.radians(hour))\n    x2 = b * math.cos(math.radians(minute))\n    y2 = b * math.sin(math.radians(minute))\n\n    dist = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n    return dist\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m, a, b))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hourAngle = hour * 30.0\n    minuteAngle = minute * 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hourAngle))\n    y1 = 3.0 * math.sin(math.radians(hourAngle))\n    x2 = 4.0 * math.cos(math.radians(minuteAngle))\n    y2 = 4.0 * math.sin(math.radians(minuteAngle))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    }
  ],
  "created": 1650750275,
  "object": "edit"
}
2022-04-23 21:44:54.485629 fix syntax errors 8 ['\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30\n    minute *= 6\n\n    x1 = 3 * math.cos(math.radians(hour))\n    y1 = 3 * math.sin(math.radians(hour))\n    x2 = 4 * math.cos(math.radians(minute))\n    y2 = 4 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\nimport sys\nimport math\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = hour * 30.0\n    minute = minute * 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <math.h>\nusing namespace std;\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split();\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = h * 30.0\n    minute = m * 6.0\n\n    x1 = a * math.cos(math.radians(hour))\n    y1 = a * math.sin(math.radians(hour))\n    x2 = b * math.cos(math.radians(minute))\n    y2 = b * math.sin(math.radians(minute))\n\n    dist = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n    return dist\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m, a, b))\n', '\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hourAngle = hour * 30.0\n    minuteAngle = minute * 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hourAngle))\n    y1 = 3.0 * math.sin(math.radians(hourAngle))\n    x2 = 4.0 * math.cos(math.radians(minuteAngle))\n    y2 = 4.0 * math.sin(math.radians(minuteAngle))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n']
2022-04-23 21:44:54.485767 size on output set 7
2022-04-23 21:44:54.485781 num operations 1
2022-04-23 21:44:54.485787 size on input set 1
2022-04-23 21:44:54.485924 using api key soukgp
2022-04-23 21:45:08.658368 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\n[a, b, h, m] = map(int, input().split())\n\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\nx = x_h - x_m\ny = y_h - y_m\n\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 3,
      "text": "import math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 4,
      "text": "import math\n\n# \u5165\u529b\na, b, h, m = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 5,
      "text": "import math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 6,
      "text": "import math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 7,
      "text": "import math\n\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    }
  ],
  "created": 1650750294,
  "object": "edit"
}
2022-04-23 21:45:08.658648 fix syntax errors 8 ['import math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', '\n\nimport math\n\n[a, b, h, m] = map(int, input().split())\n\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\nx = x_h - x_m\ny = y_h - y_m\n\nprint(math.sqrt(x ** 2 + y ** 2))\n', '\nimport math\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n# 入力\na, b, h, m = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n']
2022-04-23 21:45:08.658706 size on output set 5
2022-04-23 21:45:08.658719 num operations 1
2022-04-23 21:45:08.658725 size on input set 1
2022-04-23 21:45:08.658859 using api key soukgp
2022-04-23 21:45:52.378187 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nimport math \n\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    print(A[0], A[-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 6,
      "text": "import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    }
  ],
  "created": 1650750308,
  "object": "edit"
}
2022-04-23 21:45:52.378500 fix syntax errors 8 ['import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', "\n\nimport sys\nimport math \n\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    print(A[0], A[-1])\n\nif __name__ == '__main__':\n    main()\n", 'import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', 'import math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n']
2022-04-23 21:45:52.378536 size on output set 3
