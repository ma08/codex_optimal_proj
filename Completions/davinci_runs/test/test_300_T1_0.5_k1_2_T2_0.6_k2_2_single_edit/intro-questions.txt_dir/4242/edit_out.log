2022-04-20 20:20:03.927727 num operations 1
2022-04-20 20:20:03.927751 size on input set 1
2022-04-20 20:20:03.927964 using api key soukgp
2022-04-20 20:20:11.053475 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\na, b, k = map(int, input().split())\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ng = gcd(a, b)\n\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\nfor i in range(1, n + 1):\n    print(i)\n"
    }
  ],
  "created": 1650486004,
  "object": "edit"
}
2022-04-20 20:20:11.053731 fix syntax errors 2 ['import math\n\n\na, b, k = map(int, input().split())\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ng = gcd(a, b)\n\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', 'n = int(input())\nfor i in range(1, n + 1):\n    print(i)\n']
2022-04-20 20:20:11.053759 size on output set 2
2022-04-20 20:20:11.053769 num operations 1
2022-04-20 20:20:11.053775 size on input set 1
2022-04-20 20:20:11.053932 using api key jaanu
2022-04-20 20:20:22.095625 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[K-1]\n\nprint(find_num(A, B, K))\n"
    },
    {
      "index": 1,
      "text": "import math\n\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors[-K]\n\n\ndef find_num(A, B):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))[-K]\n    return common_factors\n\nprint(find_num(A, B, K))\n"
    }
  ],
  "created": 1650486011,
  "object": "edit"
}
2022-04-20 20:20:22.095842 fix syntax errors 2 ['\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[K-1]\n\nprint(find_num(A, B, K))\n', 'import math\n\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors[-K]\n\n\ndef find_num(A, B):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))[-K]\n    return common_factors\n\nprint(find_num(A, B, K))\n']
2022-04-20 20:20:22.095885 size on output set 2
