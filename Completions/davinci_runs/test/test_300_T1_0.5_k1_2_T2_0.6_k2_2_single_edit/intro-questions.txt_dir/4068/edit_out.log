2022-04-20 19:26:19.832487 num operations 1
2022-04-20 19:26:19.832525 size on input set 1
2022-04-20 19:26:19.832756 using api key sourya
2022-04-20 19:26:30.279729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport numpy as np\n\ndef main():\n    while True:\n        N, M = map(int, input().split())\n        if N == 0 and M == 0:\n            break\n        broken_steps = [int(input()) for _ in range(M)]\n        broken_steps.sort()\n        dp = np.zeros((N+1), dtype=np.int64)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, N+1):\n            if i in broken_steps:\n                dp[i] = 0\n            else:\n                dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n        print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650482779,
  "object": "edit"
}
2022-04-20 19:26:30.279999 fix syntax errors 2 ['\nimport numpy as np\n\ndef main():\n    while True:\n        N, M = map(int, input().split())\n        if N == 0 and M == 0:\n            break\n        broken_steps = [int(input()) for _ in range(M)]\n        broken_steps.sort()\n        dp = np.zeros((N+1), dtype=np.int64)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, N+1):\n            if i in broken_steps:\n                dp[i] = 0\n            else:\n                dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n        print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', 'import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:26:30.280034 size on output set 2
2022-04-20 19:26:30.280046 num operations 1
2022-04-20 19:26:30.280052 size on input set 1
2022-04-20 19:26:30.280226 using api key gabby
2022-04-20 19:26:30.320209 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:26:31.822105 using api key sourya
2022-04-20 19:26:36.373177 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nbroken = set(map(int, input().split()))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    }
  ],
  "created": 1650482791,
  "object": "edit"
}
2022-04-20 19:26:36.373394 fix syntax errors 2 ['\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n', '\n\nn = int(input())\nbroken = set(map(int, input().split()))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n']
2022-04-20 19:26:36.373438 size on output set 2
