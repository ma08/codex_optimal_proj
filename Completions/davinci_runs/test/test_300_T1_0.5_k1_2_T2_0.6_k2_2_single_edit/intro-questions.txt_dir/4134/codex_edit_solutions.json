["\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for y in range(1, n+1):\n    for x in range(1, m+1):\n      if y == 1 and x == 1:\n        continue\n      for z in range(k+1):\n        if y > 1:\n          dp[y][x][z^grid[y-1][x-1]] += dp[y-1][x][z]\n        if x > 1:\n          dp[y][x][z^grid[y-1][x-1]] += dp[y][x-1][z]\n  \n  print(dp[n][m][k] % 1000000007)\n\nif __name__ == \"__main__\":\n  main()\n", "\ndef solve(n, m, k, grid):\n    return \"\"\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    ans = solve(n, m, k, grid)\n    if ans == \"\":\n        print(\"IMPOSSIBLE\")\n    else:\n        print(\"POSSIBLE\")\n        print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing, using Dynamic Programming\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"]