2022-04-20 20:06:20.737350 num operations 1
2022-04-20 20:06:20.737378 size on input set 1
2022-04-20 20:06:20.737568 using api key sunu
2022-04-20 20:06:35.689713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom fractions import gcd\n\n\nn = int(input())\na_list = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        ans = max(ans, gcd(a_list[i], a_list[j]))\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\ndef resolve():\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    n = int(input())\n    a_list = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = max(ans, gcd(a_list[i], a_list[j]))\n\n    print(ans)\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n5 7 10\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 8 8 1\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"6\n27 16 9 8 4 2\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"1\n1000000000000000000\"\"\"\n        output = \"\"\"1000000000000000000\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
    }
  ],
  "created": 1650485180,
  "object": "edit"
}
2022-04-20 20:06:35.689980 fix syntax errors 2 ['\nfrom fractions import gcd\n\n\nn = int(input())\na_list = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        ans = max(ans, gcd(a_list[i], a_list[j]))\n\nprint(ans)\n', '# -*- coding: utf-8 -*-\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\ndef resolve():\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    n = int(input())\n    a_list = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = max(ans, gcd(a_list[i], a_list[j]))\n\n    print(ans)\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_入力例_1(self):\n        input = """3\n5 7 10"""\n        output = """5"""\n        self.assertIO(input, output)\n\n    def test_入力例_2(self):\n        input = """4\n1 8 8 1"""\n        output = """1"""\n        self.assertIO(input, output)\n\n    def test_入力例_3(self):\n        input = """6\n27 16 9 8 4 2"""\n        output = """2"""\n        self.assertIO(input, output)\n\n    def test_入力例_4(self):\n        input = """1\n1000000000000000000"""\n        output = """1000000000000000000"""\n        self.assertIO(input, output)\n\n\nif __name__ == "__main__":\n    unittest.main()\n']
2022-04-20 20:06:35.690027 size on output set 2
2022-04-20 20:06:35.690038 num operations 1
2022-04-20 20:06:35.690044 size on input set 1
2022-04-20 20:06:35.690203 using api key jaanu
2022-04-20 20:06:48.412918 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \u5165\u529b\nN = int(input())\nA = list(map(int, input().split()))\n\n# \u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n# \u521d\u671f\u5024\ngcd_max = 0\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\nfor i in range(N):\n    for j in range(N):\n        # \u81ea\u5206\u81ea\u8eab\u3068\u6bd4\u8f03\u3057\u306a\u3044\n        if i != j:\n            # \u6700\u5927\u516c\u7d04\u6570\n            gcd_tmp = gcd(A[i], A[j])\n            # \u66f4\u65b0\n            if gcd_max < gcd_tmp:\n                gcd_max = gcd_tmp\n\n# \u51fa\u529b\nprint(gcd_max)\n"
    },
    {
      "index": 1,
      "text": "\n# \u5165\u529b\nN = int(input())\nA = list(map(int, input().split()))\n\na = []\nfor i in range(N):\n    a.append(i)\n\n# \u521d\u671f\u5316\nans = 0\n\n# \u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u90e8\u8a66\u3059\nfor i in range(2**N):\n    # \u96c6\u5408\u3092\u521d\u671f\u5316\n    S = []\n    for j in range(N):\n        # \u96c6\u5408S\u306b\u5024\u3092\u8ffd\u52a0\n        if (i >> j) & 1:\n            S.append(A[j])\n\n    # \u96c6\u5408\u5185\u306e\u6700\u5927\u516c\u7d04\u6570\n    tmp = 0\n    for j in range(len(S)):\n        tmp = gcd(tmp, S[j])\n\n    # \u96c6\u5408\u5185\u306e\u6700\u5927\u516c\u7d04\u6570\u304cans\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u66f4\u65b0\n    ans = max(tmp, ans)\n\n# \u89e3\u7b54\nprint(ans)\n"
    }
  ],
  "created": 1650485195,
  "object": "edit"
}
2022-04-20 20:06:48.413129 fix syntax errors 2 ['\n# 入力\nN = int(input())\nA = list(map(int, input().split()))\n\n# 最大公約数\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n# 初期値\ngcd_max = 0\n\n# 全組み合わせ\nfor i in range(N):\n    for j in range(N):\n        # 自分自身と比較しない\n        if i != j:\n            # 最大公約数\n            gcd_tmp = gcd(A[i], A[j])\n            # 更新\n            if gcd_max < gcd_tmp:\n                gcd_max = gcd_tmp\n\n# 出力\nprint(gcd_max)\n', '\n# 入力\nN = int(input())\nA = list(map(int, input().split()))\n\na = []\nfor i in range(N):\n    a.append(i)\n\n# 初期化\nans = 0\n\n# 組み合わせを全部試す\nfor i in range(2**N):\n    # 集合を初期化\n    S = []\n    for j in range(N):\n        # 集合Sに値を追加\n        if (i >> j) & 1:\n            S.append(A[j])\n\n    # 集合内の最大公約数\n    tmp = 0\n    for j in range(len(S)):\n        tmp = gcd(tmp, S[j])\n\n    # 集合内の最大公約数がansより大きければ更新\n    ans = max(tmp, ans)\n\n# 解答\nprint(ans)\n']
2022-04-20 20:06:48.413170 size on output set 2
