2022-04-20 19:26:36.789853 num operations 1
2022-04-20 19:26:36.789886 size on input set 1
2022-04-20 19:26:36.790066 using api key soukgp
2022-04-20 19:26:44.599038 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys, heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    a = list(map(lambda x: x * (-1), a))\n    heapq.heapify(a)\n    for _ in range(n):\n        print(heapq.heappop(a) * (-1))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650482796,
  "object": "edit"
}
2022-04-20 19:26:44.599331 fix syntax errors 2 ["import sys, heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    a = list(map(lambda x: x * (-1), a))\n    heapq.heapify(a)\n    for _ in range(n):\n        print(heapq.heappop(a) * (-1))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:26:44.599364 size on output set 2
2022-04-20 19:26:44.599380 num operations 1
2022-04-20 19:26:44.599388 size on input set 1
2022-04-20 19:26:44.599553 using api key sourya
2022-04-20 19:26:49.709321 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X - K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nprint(X // (2 * D))\n"
    }
  ],
  "created": 1650482804,
  "object": "edit"
}
2022-04-20 19:26:49.709554 fix syntax errors 2 ['\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X - K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nprint(X // (2 * D))\n']
2022-04-20 19:26:49.709587 size on output set 2
