2022-04-20 19:47:05.352816 num operations 1
2022-04-20 19:47:05.352837 size on input set 1
2022-04-20 19:47:05.353035 using api key sourya
2022-04-20 19:47:05.526958 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:47:07.028929 using api key kouti
2022-04-20 19:47:30.787884 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef encode(expr):\n    pass\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef add(a, b):\n    return a + b\n\ndef mul(a, b):\n    return a * b\n\ndef sub(a, b):\n    return a - b\n\ndef div(a, b):\n    return a / b\n\ndef mod(a, b):\n    return a % b\n\ndef exp(a, b):\n    return a ** b\n\ndef lshift(a, b):\n    return a << b\n\ndef rshift(a, b):\n    return a >> b\n\ndef and_op(a, b):\n    return a & b\n\ndef xor(a, b):\n    return a ^ b\n\ndef or_op(a, b):\n    return a | b\n\ndef inv(a):\n    return ~a\n\ndef not_op(a):\n    return not a\n\ndef neg(a):\n    return -a\n\ndef pos(a):\n    return +a\n\ndef absol(a):\n    return abs(a)\n\ndef int_(a):\n    return int(a)\n\ndef float_(a):\n    return float(a)\n\ndef round_(a):\n    return round(a)\n\ndef floor(a):\n    return math.floor(a)\n\ndef ceil(a):\n    return math.ceil(a)\n\ndef trunc(a):\n    return math.trunc(a)\n\ndef log(a):\n    return math.log(a)\n\ndef log2(a):\n    return math.log2(a)\n\ndef log10(a):\n    return math.log10(a)\n\ndef sqrt(a):\n    return math.sqrt(a)\n\ndef sin(a):\n    return math.sin(a)\n\ndef cos(a):\n    return math.cos(a)\n\ndef tan(a):\n    return math.tan(a)\n\ndef asin(a):\n    return math.asin(a)\n\ndef acos(a):\n    return math.acos(a)\n\ndef atan(a):\n    return math.atan(a)\n\ndef sinh(a):\n    return math.sinh(a)\n\ndef cosh(a):\n    return math.cosh(a)\n\ndef tanh(a):\n    return math.tanh(a)\n\ndef asinh(a):\n    return math.asinh(a)\n\ndef acosh(a):\n    return math.acosh(a)\n\ndef atanh(a):\n    return math.atanh(a)\n\ndef fact(a):\n    return math.factorial(a)\n\ndef is_prime(a):\n    return is_prime(a)\n\ndef divs(a):\n    return divisors(a)\n\ndef num_divs(a):\n    return num_divisors(a)\n\ndef sum_divs(a):\n    return sum_divisors(a)\n\ndef is_square(a):\n    return math.sqrt(a) % 1 == 0\n\ndef is_triangle(a):\n    return (-1 + math.sqrt(8 * a + 1)) % 2 == 0\n\ndef is_pentagonal(a):\n    return (1 + math.sqrt(24 * a + 1)) % 6 == 0\n\ndef is_hexagonal(a):\n    return (1 + math.sqrt(8 * a + 1)) % 4 == 0\n\ndef is_heptagonal(a):\n    return (3 + math.sqrt(40 * a + 9)) % 10 == 0\n\ndef is_octagonal(a):\n    return (2 + math.sqrt(3 * a + 4)) % 3 == 0\n\ndef is_palindrome(a):\n    return str(a) == str(a)[::-1]\n\ndef is_pandigital(a):\n    return set(str(a)) == set('123456789')\n\ndef is_abundant(a):\n    return sum_divisors(a) > 2 * a\n\ndef is_deficient(a):\n    return sum_divisors(a) < 2 * a\n\ndef is_perfect(a):\n    return sum_divisors(a) == 2 * a\n\ndef is_even(a):\n    return a % 2 == 0\n\ndef is_odd(a):\n    return a % 2 == 1\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650484027,
  "object": "edit"
}
2022-04-20 19:47:30.788148 fix syntax errors 2 ["\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef encode(expr):\n    pass\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef add(a, b):\n    return a + b\n\ndef mul(a, b):\n    return a * b\n\ndef sub(a, b):\n    return a - b\n\ndef div(a, b):\n    return a / b\n\ndef mod(a, b):\n    return a % b\n\ndef exp(a, b):\n    return a ** b\n\ndef lshift(a, b):\n    return a << b\n\ndef rshift(a, b):\n    return a >> b\n\ndef and_op(a, b):\n    return a & b\n\ndef xor(a, b):\n    return a ^ b\n\ndef or_op(a, b):\n    return a | b\n\ndef inv(a):\n    return ~a\n\ndef not_op(a):\n    return not a\n\ndef neg(a):\n    return -a\n\ndef pos(a):\n    return +a\n\ndef absol(a):\n    return abs(a)\n\ndef int_(a):\n    return int(a)\n\ndef float_(a):\n    return float(a)\n\ndef round_(a):\n    return round(a)\n\ndef floor(a):\n    return math.floor(a)\n\ndef ceil(a):\n    return math.ceil(a)\n\ndef trunc(a):\n    return math.trunc(a)\n\ndef log(a):\n    return math.log(a)\n\ndef log2(a):\n    return math.log2(a)\n\ndef log10(a):\n    return math.log10(a)\n\ndef sqrt(a):\n    return math.sqrt(a)\n\ndef sin(a):\n    return math.sin(a)\n\ndef cos(a):\n    return math.cos(a)\n\ndef tan(a):\n    return math.tan(a)\n\ndef asin(a):\n    return math.asin(a)\n\ndef acos(a):\n    return math.acos(a)\n\ndef atan(a):\n    return math.atan(a)\n\ndef sinh(a):\n    return math.sinh(a)\n\ndef cosh(a):\n    return math.cosh(a)\n\ndef tanh(a):\n    return math.tanh(a)\n\ndef asinh(a):\n    return math.asinh(a)\n\ndef acosh(a):\n    return math.acosh(a)\n\ndef atanh(a):\n    return math.atanh(a)\n\ndef fact(a):\n    return math.factorial(a)\n\ndef is_prime(a):\n    return is_prime(a)\n\ndef divs(a):\n    return divisors(a)\n\ndef num_divs(a):\n    return num_divisors(a)\n\ndef sum_divs(a):\n    return sum_divisors(a)\n\ndef is_square(a):\n    return math.sqrt(a) % 1 == 0\n\ndef is_triangle(a):\n    return (-1 + math.sqrt(8 * a + 1)) % 2 == 0\n\ndef is_pentagonal(a):\n    return (1 + math.sqrt(24 * a + 1)) % 6 == 0\n\ndef is_hexagonal(a):\n    return (1 + math.sqrt(8 * a + 1)) % 4 == 0\n\ndef is_heptagonal(a):\n    return (3 + math.sqrt(40 * a + 9)) % 10 == 0\n\ndef is_octagonal(a):\n    return (2 + math.sqrt(3 * a + 4)) % 3 == 0\n\ndef is_palindrome(a):\n    return str(a) == str(a)[::-1]\n\ndef is_pandigital(a):\n    return set(str(a)) == set('123456789')\n\ndef is_abundant(a):\n    return sum_divisors(a) > 2 * a\n\ndef is_deficient(a):\n    return sum_divisors(a) < 2 * a\n\ndef is_perfect(a):\n    return sum_divisors(a) == 2 * a\n\ndef is_even(a):\n    return a % 2 == 0\n\ndef is_odd(a):\n    return a % 2 == 1\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:47:30.788198 size on output set 2
2022-04-20 19:47:30.788213 num operations 1
2022-04-20 19:47:30.788219 size on input set 1
2022-04-20 19:47:30.788407 using api key kouti
2022-04-20 19:47:37.632228 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>+<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+>'\n        elif expr[i] == '-':\n            result_bf += '->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650484050,
  "object": "edit"
}
2022-04-20 19:47:37.632586 fix syntax errors 2 ["\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>+<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+>'\n        elif expr[i] == '-':\n            result_bf += '->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:47:37.632656 size on output set 2
