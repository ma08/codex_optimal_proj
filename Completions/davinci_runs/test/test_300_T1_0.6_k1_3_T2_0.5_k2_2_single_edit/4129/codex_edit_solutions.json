["\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport numpy as np\n\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "// var fs = require('fs');\n// var path = require('path');\n\n// fs.readdir(process.argv[2], function(err, list){\n// \tfor(var i = 0; i < list.length; i++){\n// \t\tif(path.extname(list[i]) === '.' + process.argv[3]){\n// \t\t\tconsole.log(list[i]);\n// \t\t}\n// \t}\n// })\n\nvar fs = require('fs');\nvar path = require('path');\n\nfunction fileFilter(err, list){\n\tfor(var i = 0; i < list.length; i++){\n\t\tif(path.extname(list[i]) === '.' + process.argv[3]){\n\t\t\tconsole.log(list[i]);\n\t\t}\n\t}\n}\n\nfunction getFiles(dir){\n\tfs.readdir(dir, fileFilter);\n}\n\ngetFiles(process.argv[2]);\n", "// var fs = require('fs');\n\n// fs.readFile('input.txt', function(err, data) {\n//     if (err) return console.error(err);\n//     console.log(data.toString());\n// });\n\n// console.log('Program Ended');\n\n\n// var events = require('events');\n// var eventEmitter = new events.EventEmitter();\n\n// var connectHandler = function connected() {\n//     console.log('connection successful.');\n\n//     eventEmitter.emit('data_received');\n// }\n\n// eventEmitter.on('connection', connectHandler);\n\n// eventEmitter.on('data_received', function() {\n//     console.log('data received successfully.');\n// });\n\n// eventEmitter.emit('connection');\n\n// console.log('Program Ended');\n\n\n// var events = require('events');\n// var eventEmitter = new events.EventEmitter();\n\n// var listener1 = function listener1() {\n//     console.log('listener1 executed.');\n// }\n\n// var listener2 = function listener2() {\n//     console.log('listener2 executed.');\n// }\n\n// eventEmitter.addListener('connection', listener1);\n\n// eventEmitter.on('connection', listener2);\n\n// var eventListeners = require('events').EventEmitter.listenerCount(eventEmitter, 'connection');\n// console.log(eventListeners + ' Listener(s) listening to connection event');\n\n// eventEmitter.emit('connection');\n\n// eventEmitter.removeListener('connection', listener1);\n// console.log('listener1 will not listen now.');\n\n// eventEmitter.emit('connection');\n\n// eventListeners = require('events').EventEmitter.listenerCount(eventEmitter, 'connection');\n// console.log(eventListeners + ' Listener(s) listening to connection event');\n\n// console.log('Program Ended');\n\n\n// var buf = new Buffer(256);\n// len = buf.write('Simply Easy Learning');\n// console.log('Octets written: ' + len);\n\n\n// var buf = new Buffer(26);\n// for (var i = 0; i < 26; i++) {\n//     buf[i] = i + 97;\n// }\n\n// console.log(buf.toString('ascii'));\n// console.log(buf.toString('ascii', 0, 5));\n// console.log(buf.toString('utf8', 0, 5));\n// console.log(buf.toString(undefined, 0, 5));\n\n\n// var buffer1 = new Buffer('TutorialsPoint');\n// var buffer2 = new Buffer('Simply Easy Learning');\n// var buffer3 = Buffer.concat([buffer1, buffer2]);\n// console.log('buffer3 content: ' + buffer3.toString());\n\n\n// var buffer1 = new Buffer('ABC');\n// var buffer2 = new Buffer('ABCD');\n// var result = buffer1.compare(buffer2);\n\n// if (result < 0) {\n//     console.log(buffer1 + ' comes before ' + buffer2);\n// } else if (result == 0) {\n//     console.log(buffer1 + ' is same as ' + buffer2);\n// } else {\n//     console.log(buffer1 + ' comes after ' + buffer2);\n// }\n\n\n// var buffer1 = new Buffer('ABC');\n// var buffer2 = new Buffer(3);\n// buffer1.copy(buffer2);\n// console.log('buffer2 content: ' + buffer2.toString());\n\n\n// var buffer1 = new Buffer('TutorialsPoint');\n// var buffer2 = buffer1.slice(0, 9);\n// console.log('buffer2 content: ' + buffer2.toString());\n\n\n// var fs = require('fs');\n\n// fs.open('input.txt', 'r+', function(err, fd) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log('File opened successfully!');\n// });\n\n\n// var fs = require('fs');\n\n// console.log('Going to open file!');\n// fs.open('input.txt', 'r+', function(err, fd) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log('File opened successfully!');\n// });\n\n\n// var fs = require('fs');\n\n// console.log('Going to get file info!');\n// fs.stat('input.txt', function(err, stats) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log(stats);\n//     console.log('Got file info successfully!');\n\n//     console.log('isFile ? ' + stats.isFile());\n//     console.log('isDirectory ? ' + stats.isDirectory());\n// });\n\n\n// var fs = require('fs');\n\n// console.log('Going to write into existing file');\n// fs.writeFile('input.txt', 'Simply Easy Learning!', function(err) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log('Data written successfully!');\n//     console.log('Let\\'s read newly written data');\n//     fs.readFile('input.txt', function(err, data) {\n//         if (err) {\n//             return console.error(err);\n//         }\n//         console.log('Asynchronous read: ' + data.toString());\n//     });\n// });\n\n\n// var fs = require('fs');\n\n// console.log('Going to open file!');\n// fs.open('input.txt', 'r+', function(err, fd) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log('File opened successfully!');\n//     console.log('Going to truncate the file after 10 bytes');\n\n//     fs.ftruncate(fd, 10, function(err) {\n//         if (err) {\n//             console.log(err);\n//         }\n//         console.log('File truncated successfully.');\n//         console.log('Going to read the same file');\n//         fs.read(fd, buf, 0, buf.length, 0, function(err, bytes) {\n//             if (err) {\n//                 console.log(err);\n//             }\n//             console.log(bytes + ' bytes read');\n\n//             if (bytes > 0) {\n//                 console.log(buf.slice(0, bytes).toString());\n//             }\n//         });\n//     });\n// });\n\n\n// var fs = require('fs');\n\n// console.log('Going to delete an existing file');\n// fs.unlink('input.txt', function(err) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log('File deleted successfully!');\n// });\n\n\nvar fs = require('fs');\n\nconsole.log('Going to create directory /tmp/test');\nfs.mkdir('/tmp/test', function(err) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log('Directory created successfully!');\n});\n", "\nimport sys\nfrom collections import defaultdict\n\nn, m, s = sys.stdin.readline().split()\nn, m, s = int(n), int(m), int(s)\nedges = defaultdict(list)\nfor i in range(m):\n    u, v = sys.stdin.readline().split()\n    u, v = int(u), int(v)\n    edges[u].append(v)\nvisited = set()\nq = [s]\nwhile q:\n    node = q.pop()\n    visited.add(node)\n    for edge in edges[node]:\n        if edge not in visited:\n            q.append(edge)\nprint(n - len(visited))\n", "\nimport sys\nfrom collections import defaultdict\n\n\ndef bfs(n, m, s):\n    edges = defaultdict(set)\n    for _ in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n"]