2022-04-20 18:55:59.089932 num operations 1
2022-04-20 18:55:59.089953 size on input set 1
2022-04-20 18:55:59.090153 using api key kouti
2022-04-20 18:56:11.272216 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# this is the \"hard\" version of the problem\n\n# get the input and make it into a list\ns = list(input())\n\n# start with no characters found\nfound = 0\n\n# start at the end of the string\nleft = len(s) - 1\nright = len(s) - 1\n\nwhile left >= 0:\n    # if the current character is not a vowel,\n    # move the right pointer back\n    if s[left] not in \"aeiou\":\n        right = left\n    # if the current character is a vowel,\n    # add one to the number of characters found\n    else:\n        found += 1\n    # move the left pointer back\n    left -= 1\n\n# output the answer\nprint(found)\n"
    },
    {
      "index": 1,
      "text": "\n\n# get the input\nn = int(input())\ns = input()\n\n# start with no flips\nflips = 0\n\n# go through each character in the string\nfor i in range(n):\n    # if the character is not a '+', add one to the flip count\n    if s[i] != '+':\n        flips += 1\n\n# output the answer\nprint(flips)\n"
    }
  ],
  "created": 1650480959,
  "object": "edit"
}
2022-04-20 18:56:11.272519 fix syntax errors 2 ['\n\n# this is the "hard" version of the problem\n\n# get the input and make it into a list\ns = list(input())\n\n# start with no characters found\nfound = 0\n\n# start at the end of the string\nleft = len(s) - 1\nright = len(s) - 1\n\nwhile left >= 0:\n    # if the current character is not a vowel,\n    # move the right pointer back\n    if s[left] not in "aeiou":\n        right = left\n    # if the current character is a vowel,\n    # add one to the number of characters found\n    else:\n        found += 1\n    # move the left pointer back\n    left -= 1\n\n# output the answer\nprint(found)\n', "\n\n# get the input\nn = int(input())\ns = input()\n\n# start with no flips\nflips = 0\n\n# go through each character in the string\nfor i in range(n):\n    # if the character is not a '+', add one to the flip count\n    if s[i] != '+':\n        flips += 1\n\n# output the answer\nprint(flips)\n"]
2022-04-20 18:56:11.272557 size on output set 2
2022-04-20 18:56:11.272569 num operations 1
2022-04-20 18:56:11.272576 size on input set 1
2022-04-20 18:56:11.272768 using api key sourya
2022-04-20 18:56:14.567307 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def solve(s, t):\n\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\n\nprint(solve(s, t))\n"
    },
    {
      "index": 1,
      "text": "def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input().strip()\nt = input().strip()\nprint(solve(s, t))\n"
    }
  ],
  "created": 1650480971,
  "object": "edit"
}
2022-04-20 18:56:14.567527 fix syntax errors 2 ['def solve(s, t):\n\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\n\nprint(solve(s, t))\n', 'def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input().strip()\nt = input().strip()\nprint(solve(s, t))\n']
2022-04-20 18:56:14.567557 size on output set 2
