["def minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\n\nimport sys, math\n\ndef get_min_cost(n, c):\n    if n == 1:\n        return 0\n    min_cost = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            min_cost = min(min_cost, c[i]) + min_cost\n            min_cost = min(min_cost, c[n//i]) + min_cost\n    return min_cost\n\ndef get_min_split(n, c):\n    if n == 1:\n        return 1\n    min_split = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            min_split = min(min_split, c[i]) + min_split\n            min_split = min(min_split, c[n//i]) + min_split\n    return min_split\n\ndef get_min_cost(n, c):\n    if n == 1:\n        return 0\n    min_cost = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            min_cost = min(min_cost, c[i]) + min_cost\n            min_cost = min(min_cost, c[n//i]) + min_cost\n    return min_cost\n\ndef get_min_split(n, c):\n    if n == 1:\n        return 1\n    min_split = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            min_split = min(min_split, c[i]) + min_split\n            min_split = min(min_split, c[n//i]) + min_split\n    return min_split\n", "\n#\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, a, b):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    else:\n        if n % 2 == 0:\n            return (a * (n//2)) + (b * (n//2))\n        else:\n            return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(input().strip())\nfor _ in range(q):\n    n, a, b = input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)]\n    print solve(n, a, b)\n", "\n\ndef minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n"]