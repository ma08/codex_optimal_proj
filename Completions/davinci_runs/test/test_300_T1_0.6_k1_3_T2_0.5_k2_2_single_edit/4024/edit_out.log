2022-04-20 18:50:34.816682 num operations 1
2022-04-20 18:50:34.816722 size on input set 1
2022-04-20 18:50:34.816882 using api key sunu
2022-04-20 18:50:37.373988 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    }
  ],
  "created": 1650480634,
  "object": "edit"
}
2022-04-20 18:50:37.374248 fix syntax errors 2 ['\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n']
2022-04-20 18:50:37.374282 size on output set 1
2022-04-20 18:50:37.374294 num operations 1
2022-04-20 18:50:37.374300 size on input set 1
2022-04-20 18:50:37.374459 using api key soukgp
2022-04-20 18:50:43.069581 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # print(n,k)\n    n,k = map(int,input().split())\n    # print(s)\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n            elif s[0] == s[len(s)-1]:\n                count += 1\n                s = s[1:]\n                s = s[1:]\n            else:\n                count += len(s) - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650480637,
  "object": "edit"
}
2022-04-20 18:50:43.069792 fix syntax errors 2 ['\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # print(n,k)\n    n,k = map(int,input().split())\n    # print(s)\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n            elif s[0] == s[len(s)-1]:\n                count += 1\n                s = s[1:]\n                s = s[1:]\n            else:\n                count += len(s) - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 18:50:43.069825 size on output set 2
2022-04-20 18:50:43.069837 num operations 1
2022-04-20 18:50:43.069843 size on input set 1
2022-04-20 18:50:43.070003 using api key jaanu
2022-04-20 18:50:50.371393 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] == s[i + 1]:\n        res = min(res, cost[i] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * n\n    for i in range(n):\n        cost[i] = i + 1\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, dfs(i + 1, n, k - 1, s, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650480643,
  "object": "edit"
}
2022-04-20 18:50:50.371620 fix syntax errors 2 ['\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] == s[i + 1]:\n        res = min(res, cost[i] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * n\n    for i in range(n):\n        cost[i] = i + 1\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, dfs(i + 1, n, k - 1, s, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 18:50:50.371741 size on output set 2
