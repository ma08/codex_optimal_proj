2022-04-20 19:42:39.114851 num operations 1
2022-04-20 19:42:39.114874 size on input set 1
2022-04-20 19:42:39.115057 using api key jaanu
2022-04-20 19:42:47.074283 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "\n# coding: utf-8\n\nimport sys\n\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\n\nA.sort()\nA.reverse()\n\nans = 0\nfor i in range(N):\n    if i % 2 == 0:\n        ans += A[i]\n    else:\n        ans -= A[i]\n\nprint(ans)\n"
    }
  ],
  "created": 1650483759,
  "object": "edit"
}
2022-04-20 19:42:47.074537 fix syntax errors 2 ['\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', '\n# coding: utf-8\n\nimport sys\n\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\n\nA.sort()\nA.reverse()\n\nans = 0\nfor i in range(N):\n    if i % 2 == 0:\n        ans += A[i]\n    else:\n        ans -= A[i]\n\nprint(ans)\n']
2022-04-20 19:42:47.074571 size on output set 2
2022-04-20 19:42:47.074582 num operations 1
2022-04-20 19:42:47.074588 size on input set 1
2022-04-20 19:42:47.074755 using api key derek
2022-04-20 19:42:47.115829 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:42:48.617713 using api key sunu
2022-04-20 19:42:52.938614 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split()) # a = price, b = distance\n    stores.append([a, b]) # stores[i] = [price, distance]\n\n#-----Solve-----\n\n#-----Display-----\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Constants-----\n\n# -----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n# -----Solve-----\n\n# -----Display-----\n"
    }
  ],
  "created": 1650483768,
  "object": "edit"
}
2022-04-20 19:42:52.938849 fix syntax errors 2 ['\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split()) # a = price, b = distance\n    stores.append([a, b]) # stores[i] = [price, distance]\n\n#-----Solve-----\n\n#-----Display-----\n', '\n\n# -----Constants-----\n\n# -----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n# -----Solve-----\n\n# -----Display-----\n']
2022-04-20 19:42:52.938878 size on output set 2
2022-04-20 19:42:52.938891 num operations 1
2022-04-20 19:42:52.938899 size on input set 1
2022-04-20 19:42:52.939056 using api key gabby
2022-04-20 19:42:52.979756 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:42:54.481654 using api key derek
2022-04-20 19:42:54.522055 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 19:42:57.525448 using api key soukgp
2022-04-20 19:43:00.019099 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 1,
      "text": "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    }
  ],
  "created": 1650483777,
  "object": "edit"
}
2022-04-20 19:43:00.019318 fix syntax errors 2 ['\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n']
2022-04-20 19:43:00.019363 size on output set 2
