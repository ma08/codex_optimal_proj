["\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number(a):\n    return max(a)\n\ndef get_max_number_index(a):\n    return a.index(get_max_number(a))\n\ndef get_min_number(a):\n    return min(a)\n\ndef get_min_number_index(a):\n    return a.index(get_min_number(a))\n\ndef get_number_at_index(a, i):\n    return a[i]\n\ndef get_half_number_at_index(a, i):\n    return a[i] // 2\n\ndef is_number_at_index_multiple_of_two(a, i):\n    return (a[i] & 1) == 0\n\ndef set_number_at_index(a, i, number):\n    a[i] = number\n\ndef is_number_same_as_others(a):\n    return len(set(a)) == 1\n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_at_index_multiple_of_two(a, get_max_number_index(a)):\n            set_number_at_index(a, get_max_number_index(a), get_half_number_at_index(a, get_max_number_index(a)))\n            operations += 1\n        else:\n            set_number_at_index(a, get_min_number_index(a), get_half_number_at_index(a, get_min_number_index(a)))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "#!/usr/bin/env python3\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] // 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# n, k = map(int, input().split())\n# arr = list(map(int, input().split()))\n\nn, k = 5, 3\narr = [1, 2, 2, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef get_max_number():\n    return max(a) \n\ndef get_max_number_index():\n    return a.index(get_max_number())\n\ndef get_min_number():\n    return min(a) \n\ndef get_min_number_index():\n    return a.index(get_min_number()) \n\ndef get_number(i):\n    return a[i] \n\ndef get_half_number(i):\n    return a[i] // 2 \n\ndef is_number_multiple_of_two(i):\n    return (a[i] & 1) == 0 \n\ndef set_number(i, number):\n    a[i] = number\n\ndef is_number_same_as_others():\n    return len(set(a)) == 1 \n\ndef get_number_of_operations(n, k, a):\n    operations = 0\n\n    while not is_number_same_as_others(a):\n        if is_number_multiple_of_two(a, get_max_number_index(a)):\n            a[get_max_number_index(a)] = get_half_number(a, get_max_number_index(a))\n            operations += 1\n        else:\n            a[get_min_number_index(a)] = get_half_number(a, get_min_number_index(a))\n            operations += 1\n\n    return operations\n\nprint(get_number_of_operations(n, k, a))\n", "\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] // 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    i = 0\n    while a[i] < a[n - 1]:\n        a[i] = a[i] // 2\n        i += 1\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n# n, k = 5, 3\n# arr = [1, 2, 2, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 4, 5]\n\n# n, k = 5, 3\n# arr = [1, 2, 3, 3, 3]\n\n\ndef run(arr, k):\n    count = 0\n    while len(set(arr)) > 1:\n        count += 1\n        if min(arr) == 0:\n            arr.remove(0)\n        arr = list(map(lambda x: x // 2, arr))\n        if min(arr) == 0:\n            arr.remove(0)\n    if len(set(arr)) == 1 and arr.count(arr[0]) >= k:\n        return count\n    else:\n        return -1\n\n\nprint(run(arr, k))\n"]