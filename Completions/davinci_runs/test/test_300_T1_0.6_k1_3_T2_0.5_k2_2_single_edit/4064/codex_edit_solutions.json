["import sys\nsys.setrecursionlimit(10**9)\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))[1:]\nmemo = [0] * (n + 1)\n\ndef dfs(cur):\n    if cur == n - 1:\n        return 0\n    if memo[cur] != 0:\n        return memo[cur]\n    memo[cur] = max(dfs(cur + 1), dfs(cur + 2)) + a[cur]\n    return memo[cur]\n\nprint(dfs(0))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0 for j in range(h)] for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)  # noqa: E501\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)  # noqa: E501\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "#\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j])\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j])\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "n = int(input())\na = list(map(int, input().split()))\n\n\ndp = [0 for _ in range(n)]\ndp[0] = 1\nfor i in range(1, n):\n    if i - a[i] >= 0:\n        dp[i] = max(dp[i - a[i]], dp[i - a[i] + 1])\n    else:\n        dp[i] = dp[i - a[i] + 1]\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] < a[j]:\n            ans = max(ans, dp[i] + 1 + dp[j])\n        else:\n            ans = max(ans, dp[i] + 1)\n\nprint(ans)\n"]