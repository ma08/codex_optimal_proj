2022-04-18 01:48:21.193459 """
There is an infinite board of square tiles. Initially all tiles are white.

Vova has a red marker and a blue marker. Red marker can color $a$ tiles. Blue marker can color $b$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $a$ red tiles and exactly $b$ blue tiles across the board.

Vova wants to color such a set of tiles that:

  they would form a rectangle, consisting of exactly $a+b$ colored tiles;  all tiles of at least one color would also form a rectangle. 

Here are some examples of correct colorings:

 [Image] 

Here are some examples of incorrect colorings:

 [Image] 

Among all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?

It is guaranteed that there exists at least one correct coloring.


-----Input-----

A single line contains two integers $a$ and $b$ ($1 \le a, b \le 10^{14}$) — the number of tiles red marker should color and the number of tiles blue marker should color, respectively.


-----Output-----

Print a single integer — the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $a$ tiles red and exactly $b$ tiles blue.

It is guaranteed that there exists at least one correct coloring.


-----Examples-----
Input
4 4

Output
12

Input
3 9

Output
14

Input
9 3

Output
14

Input
3 6

Output
12

Input
506 2708

Output
3218



-----Note-----

The first four examples correspond to the first picture of the statement.

Note that for there exist multiple correct colorings for all of the examples.

In the first example you can also make a rectangle with sides $1$ and $8$, though its perimeter will be $18$ which is greater than $8$.

In the second example you can make the same resulting rectangle with sides $3$ and $4$, but red tiles will form the rectangle with sides $1$ and $3$ and blue tiles will form the rectangle with sides $3$ and $3$.
"""
2022-04-18 01:48:21.193480 --------------------------
2022-04-18 01:48:58.662242 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# from math import sqrt\n# from sys import stdin, stdout\n\n# def solve(a, b):\n#     m = min(a, b)\n#     n = max(a, b)\n#     if n % m == 0:\n#         return n + (n / m) + (n / m)\n#     else:\n#         s = int(sqrt(m))\n#         while s > 0:\n#             if m % s == 0:\n#                 return n + (m / s) + (n * s)\n#             s -= 1\n#         return n + 2 * m\n\n# a, b = map(int, stdin.readline().split())\n# stdout.write(str(solve(a, b)))\n\nfrom math import sqrt\nfrom sys import stdin, stdout\n\ndef solve(a, b):\n    m = min(a, b)\n    n = max(a, b)\n    if n % m == 0:\n        return n + (n / m) + (n / m)\n    else:\n        s = int(sqrt(m))\n        while s > 0:\n            if m % s == 0:\n                return n + (m / s) + (n * s)\n            s -= 1\n        return n + 2 * m\n\na, b = map(int, stdin.readline().split())\nstdout.write(str(solve(a, b)))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    import sys\n    import math\n    # define the recurrence relation\n    def f(n,a,b):\n        if n==0:\n            return 0\n        if (n,a,b) in d:\n            return d[(n,a,b)]\n        else:\n            d[(n,a,b)]=min(a*n+f(n-1,a,b),b*n+f(n-1,a,b),a*b+f(n-1,a-1,b-1))\n            return d[(n,a,b)]\n    a,b=map(int,sys.stdin.readline().split())\n    n=(a+b)//2\n    d={}\n    print(f(n,a,b))\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#Python 2.7.12\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef main():\n    a, b = map(int, raw_input().split())\n    g = gcd(a, b)\n    a /= g\n    b /= g\n    if a == b:\n        print 4 * a\n    else:\n        print 2 * (a + b)\n\nmain()"
    }
  ],
  "created": 1650246501,
  "id": "cmpl-4yAmzoXes6MuCRjXRdrA8U3qNJuJE",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:48:58.662476 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# from math import sqrt\n# from sys import stdin, stdout\n\n# def solve(a, b):\n#     m = min(a, b)\n#     n = max(a, b)\n#     if n % m == 0:\n#         return n + (n / m) + (n / m)\n#     else:\n#         s = int(sqrt(m))\n#         while s > 0:\n#             if m % s == 0:\n#                 return n + (m / s) + (n * s)\n#             s -= 1\n#         return n + 2 * m\n\n# a, b = map(int, stdin.readline().split())\n# stdout.write(str(solve(a, b)))\n\nfrom math import sqrt\nfrom sys import stdin, stdout\n\ndef solve(a, b):\n    m = min(a, b)\n    n = max(a, b)\n    if n % m == 0:\n        return n + (n / m) + (n / m)\n    else:\n        s = int(sqrt(m))\n        while s > 0:\n            if m % s == 0:\n                return n + (m / s) + (n * s)\n            s -= 1\n        return n + 2 * m\n\na, b = map(int, stdin.readline().split())\nstdout.write(str(solve(a, b)))"
}
2022-04-18 01:48:58.662519 REASON stop
2022-04-18 01:48:58.699970 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    import sys\n    import math\n    # define the recurrence relation\n    def f(n,a,b):\n        if n==0:\n            return 0\n        if (n,a,b) in d:\n            return d[(n,a,b)]\n        else:\n            d[(n,a,b)]=min(a*n+f(n-1,a,b),b*n+f(n-1,a,b),a*b+f(n-1,a-1,b-1))\n            return d[(n,a,b)]\n    a,b=map(int,sys.stdin.readline().split())\n    n=(a+b)//2\n    d={}\n    print(f(n,a,b))\nmain()"
}
2022-04-18 01:48:58.700052 REASON stop
2022-04-18 01:48:58.700519 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#Python 2.7.12\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef main():\n    a, b = map(int, raw_input().split())\n    g = gcd(a, b)\n    a /= g\n    b /= g\n    if a == b:\n        print 4 * a\n    else:\n        print 2 * (a + b)\n\nmain()"
}
2022-04-18 01:48:58.700577 REASON stop
