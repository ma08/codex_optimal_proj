["\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n", "// function readFile(file, onSuccess) {\n//   fs.readFile(file, function(err, content) {\n//     if (err) {\n//       return console.log(err);\n//     }\n//     onSuccess(content);\n//   });\n// }\n\n// function writeFile(file, content, onSuccess) {\n//   fs.writeFile(file, content, function(err) {\n//     if (err) {\n//       return console.log(err);\n//     }\n//     onSuccess(content);\n//   });\n// }\n\n// function appendFile(file, content, onSuccess) {\n//   fs.appendFile(file, content, function(err) {\n//     if (err) {\n//       return console.log(err);\n//     }\n//     onSuccess(content);\n//   });\n// }\n\n// function readFilePromise(file) {\n//   return new Promise(function(resolve, reject) {\n//     fs.readFile(file, function(err, content) {\n//       if (err) {\n//         reject(err);\n//       }\n//       resolve(content);\n//     });\n//   });\n// }\n\n// function writeFilePromise(file, content) {\n//   return new Promise(function(resolve, reject) {\n//     fs.writeFile(file, content, function(err) {\n//       if (err) {\n//         reject(err);\n//       }\n//       resolve(content);\n//     });\n//   });\n// }\n\n// function appendFilePromise(file, content) {\n//   return new Promise(function(resolve, reject) {\n//     fs.appendFile(file, content, function(err) {\n//       if (err) {\n//         reject(err);\n//       }\n//       resolve(content);\n//     });\n//   });\n// }\n\n// readFilePromise(file).then(function(content) {\n//   console.log(content);\n// });\n\n// readFilePromise(file)\n//   .then(function(content) {\n//     return writeFilePromise(file, content + '\\nHello');\n//   })\n//   .then(function(content) {\n//     console.log(content);\n//   })\n//   .catch(function(err) {\n//     console.log(err);\n//   });\n\n// readFilePromise(file)\n//   .then(function(content) {\n//     return appendFilePromise(file, content + '\\nHello');\n//   })\n//   .then(function(content) {\n//     console.log(content);\n//   })\n//   .catch(function(err) {\n//     console.log(err);\n//   });\n\n// Promise.all([readFilePromise(file), readFilePromise(file)]).then(function(\n//   contents\n// ) {\n//   // console.log(contents);\n// });\n\n// Promise.race([readFilePromise(file), readFilePromise(file)]).then(function(\n//   firstContent\n// ) {\n//   console.log(firstContent);\n// });\n\n// async function readFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   console.log(content);\n// }\n\n// readFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await writeFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n\n// async function readWriteFileAsync(file) {\n//   const content = await readFilePromise(file);\n//   await appendFilePromise(file, content + '\\nHello');\n//   console.log(content);\n// }\n\n// readWriteFileAsync(file);\n", "import math\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n", "n, m = map(int, input().split())\nsteps = 0\n\n\nif n == m:\n    print(steps)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(\"-1\")\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "// The file system module allows you to work with the file system on your computer.\n\n// To include the File System module, use the require() method:\n\nvar fs = require('fs');\n\n// Create a File:\n\n// To create a file in Node.js, you can use one of the following methods:\n\n// fs.appendFile()\n// fs.open()\n// fs.writeFile()\n\n// The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:\n\nfs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});\n\n// The fs.open() method takes a \"flag\" as the second argument, if the flag is \"w\" for \"writing\", the specified file is opened for writing. If the file does not exist, an empty file is created:\n\nfs.open('mynewfile2.txt', 'w', function (err, file) {\n  if (err) throw err;\n  console.log('Saved!');\n});\n\n// The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exist, a new file, containing the specified content, will be created:\n\nfs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});\n\n// The fs.writeFile() method is used to update the specified file with the specified data:\n\nfs.writeFile('mynewfile3.txt', 'This is my text', function (err) {\n  if (err) throw err;\n  console.log('Replaced!');\n});\n\n// The fs.appendFile() method appends the specified content at the end of the specified file:\n\nfs.appendFile('mynewfile1.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});\n\n// The fs.appendFile() method appends the specified content at the end of the specified file:\n\nfs.appendFile('mynewfile1.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});\n\n// The fs.unlink() method deletes the specified file:\n\nfs.unlink('mynewfile2.txt', function (err) {\n  if (err) throw err;\n  console.log('File deleted!');\n});\n\n// The fs.rename() method renames the specified file:\n\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {\n  if (err) throw err;\n  console.log('File Renamed!');\n});\n\n// Read a File:\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// To read the file, you can use the following method:\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n// The fs.readFile() method is used to read files on your computer.\n\nfs.readFile('mynewfile3.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n", "\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0, end=\"\")\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1, end=\"\")\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1, end=\"\")\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1, end=\"\")\n        quit()\n    steps += 1\n\nprint(steps, end=\"\")\n"]