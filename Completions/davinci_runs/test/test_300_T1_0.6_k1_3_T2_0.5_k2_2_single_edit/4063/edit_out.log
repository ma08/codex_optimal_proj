2022-04-20 19:05:07.381793 num operations 1
2022-04-20 19:05:07.381814 size on input set 1
2022-04-20 19:05:07.381987 using api key sunu
2022-04-20 19:05:10.969377 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650481507,
  "object": "edit"
}
2022-04-20 19:05:10.969633 fix syntax errors 2 ['\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n', 'import sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n']
2022-04-20 19:05:10.969659 size on output set 2
2022-04-20 19:05:10.969670 num operations 1
2022-04-20 19:05:10.969675 size on input set 1
2022-04-20 19:05:10.969830 using api key derek
2022-04-20 19:05:11.011835 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:05:12.513711 using api key soukgp
2022-04-20 19:05:15.037787 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481512,
  "object": "edit"
}
2022-04-20 19:05:15.037999 fix syntax errors 2 ["\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:05:15.038029 size on output set 1
2022-04-20 19:05:15.038041 num operations 1
2022-04-20 19:05:15.038048 size on input set 1
2022-04-20 19:05:15.038207 using api key sunu
2022-04-20 19:05:26.424254 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    # Read the number of problems, number of choices, and the difficulty of each problem\n    N, K = [int(x) for x in input().split()]\n    problems = [int(x) for x in input().split()]\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if problems[i] + problems[j] == K:\n                count += 1\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # # Calculate the number of choices of the integer K\n    # count = 0\n    # for difficulty in problems_by_difficulty:\n    #     if difficulty in problems_by_difficulty:\n    #         count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n    #\n    # # Print the answer\n    # print(count)\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if N//2-difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481515,
  "object": "edit"
}
2022-04-20 19:05:26.424500 fix syntax errors 2 ["\n\n\ndef main():\n    # Read the number of problems, number of choices, and the difficulty of each problem\n    N, K = [int(x) for x in input().split()]\n    problems = [int(x) for x in input().split()]\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if problems[i] + problems[j] == K:\n                count += 1\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # # Calculate the number of choices of the integer K\n    # count = 0\n    # for difficulty in problems_by_difficulty:\n    #     if difficulty in problems_by_difficulty:\n    #         count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n    #\n    # # Print the answer\n    # print(count)\n", "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if N//2-difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:05:26.424542 size on output set 2
