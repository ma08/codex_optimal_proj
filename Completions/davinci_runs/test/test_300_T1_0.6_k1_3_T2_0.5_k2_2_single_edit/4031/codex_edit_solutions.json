["\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES') \n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba']) is False\n    False\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab']) is False\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty']) is False\n    False\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    print(n, m)\n    messages = []\n    for _ in range(n):\n        messages.append(input())\n    for _ in range(m):\n        s = input()\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])[0]\n    'a'\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])[1]\n    'ba'\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])[2]\n    'aba'\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])[3]\n    'aba'\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])[4]\n    'abacaba'\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab']) is False\n    True\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])[0]\n    'qwerty'\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])[1]\n    'qwerty'\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])[2]\n    'qwerty'\n    \"\"\"\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)-1):\n            if not is_substring(strings[i], strings[j]) and not is_substring(strings[j], strings[i]):\n                return False, []\n    strings.sort(key=len)\n    return True, strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result, strings = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"]