["\ndef roman_to_int(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    roman_to_int_map = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    }\n    total = 0\n    for i in range(len(s)):\n        current_value = roman_to_int_map[s[i]]\n        if i == len(s) - 1:\n            total += current_value\n            continue\n        next_value = roman_to_int_map[s[i+1]]\n        if current_value < next_value:\n            total -= current_value\n        else:\n            total += current_value\n    return total\n", "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n", "import sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    N, K = map(int, sys.stdin.readline().strip().split())\n\n    if N == 1:\n        print(1)\n        return\n\n    min_packets = N\n    for k in range(1, K + 1):\n        if N % k == 0:\n            packets = N // k\n            if packets < min_packets:\n                min_packets = packets\n\n    print(min_packets)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_max_packages(n, k):\n    max_packages = n\n    for i in range(2, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages > max_packages:\n                max_packages = packages\n    return max_packages\n"]