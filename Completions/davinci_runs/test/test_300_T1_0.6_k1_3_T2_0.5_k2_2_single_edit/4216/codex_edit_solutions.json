["\n\n\nimport math\n\ndef main():\n    n = int(input())\n    a = int(math.sqrt(n))\n    while n % a != 0:\n        a -= 1\n    b = n // a\n    print(max(len(str(a)), len(str(b))))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    min_f = 10**10\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            a, b = i, n // i\n            f = max(len(str(a)), len(str(b)))\n            if f < min_f:\n                min_f = f\n\n    print(min_f)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nn = int(input())\n\nprimes = []\nfor i in range(2, int(math.sqrt(n)) + 1):\n    if n % i == 0:\n        primes.append(i)\n\nprint(n // primes[0])\n", "\n\ndef check_if_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef check_if_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef check_if_emirp(n):\n    return check_if_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_palindrome_prime(n):\n    return check_if_prime(n) and check_if_palindrome(n)\n\ndef check_if_emirp_palindrome(n):\n    return check_if_emirp(n) and check_if_palindrome(n)\n\ndef check_if_emirp_palindrome_prime(n):\n    return check_if_emirp_palindrome(n) and check_if_prime(n)\n\ndef check_if_emirp_palindrome_prime_reversed(n):\n    return check_if_emirp_palindrome_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n) and check_if_prime(int(str(n)[::-1]))\n\ndef check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed(n):\n    return check_if_emirp_palindrome_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime_reversed_prime(n) and check_if_prime(int(str(n)[::-1]))\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    min_f = 10**10\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            a, b = i, n // i\n            f = max(len(str(a)), len(str(b)))\n            if f < min_f:\n                min_f = f\n\n    print(min_f)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    n = int(input())\n    a = int(math.sqrt(n))\n    while n % a != 0:\n        a -= 1\n    b = n // a\n    print(max(len(str(a)), len(str(b))), end=\"\")\n\nmain()\n"]