["\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\nbest = 0\nlength = 0\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\nprint(best)\n", "def solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n", "\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\nprint(m)\n", "\n\n# \u0412\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 input.txt) \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0442\u0435\u043a\u0441\u0442.\n# \u0421\u043b\u043e\u0432\u043e\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0434\u0443\u0449\u0438\u0445 \u043f\u043e\u0434\u0440\u044f\u0434, \u0441\u043b\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n# \u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n# \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\ns = set()\n\nfor word in input().split():\n    s.add(word)\n\nprint(len(s))\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 2\n\n# \u0412\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 input.txt) \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0442\u0435\u043a\u0441\u0442.\n# \u0421\u043b\u043e\u0432\u043e\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0434\u0443\u0449\u0438\u0445 \u043f\u043e\u0434\u0440\u044f\u0434, \u0441\u043b\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n# \u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n# \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\ns = set()\n\nfor word in input().split():\n    s.add(word)\n\nprint(len(s))\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 3\n\n# \u0412\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 (\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 input.txt) \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0442\u0435\u043a\u0441\u0442.\n# \u0421\u043b\u043e\u0432\u043e\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0434\u0443\u0449\u0438\u0445 \u043f\u043e\u0434\u0440\u044f\u0434, \u0441\u043b\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n# \u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442.\n\n# \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n# \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\ns = set()\n\nfor word in input().split():\n    s.add(word)\n\nprint(len(s))\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 4\n\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b lst \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0447\u0438\u0441\u043b\u043e x \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e x \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 lst.\n\n# \u041f\u043e\u0437\u0438\u0446\u0438\u0438 \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043d\u0443\u043b\u044f, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e x \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442\" (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a, \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b).\n\n# \u041f\u043e\u0437\u0438\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\nlst = list(map(int, input().split()))\nx = int(input())\n\nif x in lst:\n    for i in range(len(lst)):\n        if lst[i] == x:\n            print(i, end=' ')\nelse:\n    print('\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442')\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 5\n\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0446\u0435\u043b\n\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n", "#!/usr/bin/python3\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n", "def solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input())  # number of hours per day\n    a = list(map(int, input().split()))  # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"]