["\n\nn = int(raw_input())\ns = raw_input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n", "import sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n-2):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef main():\n    N, M = NMI()\n    A = NLI()\n    A.sort()\n    B = NLI()\n    B.sort()\n    C = NLI()\n    C.sort()\n\n    # \u5404B\u306b\u3064\u3044\u3066\u3001A\u304b\u3089\u9078\u3079\u308b\u3082\u306e\u306e\u6700\u5927\u6570\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u6c42\u3081\u308b\n    def bisearch_max(k):\n        ng = -1\n        ok = N\n        while ok - ng > 1:\n            mid = (ok+ng) // 2\n            if A[mid] < k:\n                ok = mid\n            else:\n                ng = mid\n        return ok\n\n    # \u5404B\u306b\u3064\u3044\u3066\u3001C\u304b\u3089\u9078\u3079\u308b\u3082\u306e\u306e\u6700\u5927\u6570\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u6c42\u3081\u308b\n    def bisearch_min(k):\n        ng = -1\n        ok = M\n        while ok - ng > 1:\n            mid = (ok+ng) // 2\n            if C[mid] <= k:\n                ok = mid\n            else:\n                ng = mid\n        return ok\n\n    ans = 0\n    for b in B:\n        ans += bisearch_max(b) * (M - bisearch_min(b))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n", "\nimport sys\n\ndef main():\n    N = int(input())\n    S = input()\n    cnt = 0\n    for i in range(N-2):\n        if S[i] == 'A' and S[i+1] == 'B' and S[i+2] == 'C':\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nnum_subsequences = 0\n\nfor i in range(n):\n    if s[i] != \"A\":\n        continue\n    if s[i+1] == \"B\":\n        if s[i+2] == \"C\":\n            num_subsequences += 1\n\nprint(num_subsequences)\n", "\nimport sys\n\n# Get the number of characters in the string\nn = int(sys.stdin.readline())\n\n# Get the string\ns = sys.stdin.readline()\n\n# Initialize the number of contiguous subsequences equal to ABC\nnum_subsequences = 0\n\n# For every character in the string\nfor i in range(n):\n    # If the character is not A, skip it\n    if s[i] != \"A\":\n        continue\n    # If the character is A and the following character is B, check the following character\n    if s[i+1] == \"B\":\n        # If the following character is B and the character after that is C, increment the number of subsequences\n        if s[i+2] == \"C\":\n            num_subsequences += 1\n\n# Print the number of subsequences\nprint(num_subsequences)\n"]