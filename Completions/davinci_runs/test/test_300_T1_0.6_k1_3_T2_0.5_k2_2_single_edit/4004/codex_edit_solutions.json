["\n\ndef main():\n    print('hello world')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nprint(a)\n", "\n# Solution\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sort the array\na.sort()\n\n# check if the first and last elements are the same\nif a[0] == a[n - 1]:\n  print(0)\nelse:\n  # get the difference between the first two elements\n  d = a[1] - a[0]\n  # iterate through the array, if the difference is not the same between the current element and the previous, return -1\n  for i in range(1, n - 1):\n    if (a[i + 1] - a[i]) != d:\n      print(-1)\n      break\n  else:\n    print(d)\n", "\n#!/bin/python3\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sort the array in ascending order\na.sort()\n\n# check if the first and last elements are the same\nif a[0] == a[n - 1]:\n  print(0)\nelse:\n  # get the difference between the first two elements\n  d = a[1] - a[0]\n  # iterate through the array, if the difference is not the same between the current element and the previous, return -1 and break\n  for i in range(1, n - 1):\n    if (a[i + 1] - a[i]) != d:\n      print(-1)\n      break\n  else:\n    print(d)\n", "\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef solve(n, a):\n    d = a[0]\n    for i in range(1, n):\n        d = gcd(d, a[i])\n    return d\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nprint(solve(n, a))\n", "\nimport os\nimport sys\nimport shutil\nimport argparse\nimport configparser\n\n\ndef get_parser():\n    parser = argparse.ArgumentParser(description=\"A simple file organizer\")\n    parser.add_argument(\"path\", help=\"Path to the file or directory\")\n\n    return parser\n\n\ndef get_file_extension(path):\n    return os.path.splitext(path)[1][1:]\n\n\ndef get_config():\n    config = configparser.ConfigParser()\n    config.read(\"config.ini\")\n\n    return config\n\n\ndef move_file(path, extension):\n    config = get_config()\n    destination = config[\"DEFAULT\"][extension]\n\n    if not destination:\n        return False\n\n    destination = os.path.join(os.path.dirname(path), destination)\n\n    if not os.path.exists(destination):\n        os.makedirs(destination)\n\n    shutil.move(path, destination)\n\n    return True\n\n\ndef organize(path):\n    if os.path.isfile(path):\n        extension = get_file_extension(path)\n        move_file(path, extension)\n\n    elif os.path.isdir(path):\n        for file in os.listdir(path):\n            organize(os.path.join(path, file))\n\n    else:\n        print(\"Invalid path\")\n        sys.exit(1)\n\n\ndef main():\n    parser = get_parser()\n    args = parser.parse_args()\n\n    organize(args.path)\n\n\nif __name__ == '__main__':\n    main()\n"]