["# coding: utf-8\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\n# A\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5927\u304d\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\norder_A = sorted(A, reverse=True)\n# \u98df\u3079\u3066\u3044\u304f\u9806\u756a\u306bB\u3068C\u3092\u4e26\u3073\u66ff\u3048\u308b\nB = [B[order_A.index(i)-1] for i in range(1,N+1)]\nC = [C[order_A.index(i)-1] for i in range(1,N)]\n\n# \u5408\u8a08\u3092\u8a08\u7b97\ntotal = sum(B) + sum(C)\n\n# \u76f4\u524d\u306b\u98df\u3079\u305f\u6599\u7406\u3068\u540c\u3058\u3082\u306e\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u6e1b\u7b97\u3059\u308b\nfor i in range(N-2):\n    if order_A[i] == order_A[i+1]:\n        total -= C[i]\n\nprint(total)\n", "\nN = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nC = [int(x) for x in input().split()]\n\npoints = 0\nfor i in range(N-1):\n    if A[i+1] - A[i] == 1:\n        points += (B[A[i]-1] + C[A[i]-1])\n    else:\n        points += B[A[i]-1]\npoints += B[A[N-1]-1]\nprint(points)\n", "\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\n# A\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5927\u304d\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\norder_A = sorted(A, reverse=True)\n# \u98df\u3079\u3066\u3044\u304f\u9806\u756a\u306bB\u3068C\u3092\u4e26\u3073\u66ff\u3048\u308b\nB = [B[order_A.index(i)-1] for i in range(1,N+1)]\nC = [C[order_A.index(i)-1] for i in range(1,N)]\n\n# \u5408\u8a08\u3092\u8a08\u7b97\ntotal = sum(B) + sum(C)\n\n# \u76f4\u524d\u306b\u98df\u3079\u305f\u6599\u7406\u3068\u540c\u3058\u3082\u306e\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u6e1b\u7b97\u3059\u308b\nfor i in range(N-2):\n    if order_A[i] == order_A[i+1]:\n        total -= C[i]\n\nprint(total)\n\n", "\n\n# n = input()\n# a = list(map(int,input().split()))\n# b = list(map(int,input().split()))\n# c = list(map(int,input().split()))\n\n# ans = 0\n\n# for i in range(len(a)):\n#     ans += b[a[i]-1]\n#     if i != 0 and a[i] == a[i-1] + 1:\n#         ans += c[a[i-1]-1]\n\n# print(ans)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dfs(c,v)\n#         dp[v] += dp[c]\n\n# n = int(input())\n# tree = [[] for _ in range(n)]\n# dp = [0 for _ in range(n)]\n# for _ in range(n-1):\n#     a,b = map(int,input().split())\n#     tree[a-1].append(b-1)\n#     tree[b-1].append(a-1)\n# for i in range(n):\n#     dp[i] = int(input())\n\n# dfs(0,-1)\n# print(dp)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dfs(c,v)\n#         dp[v] += dp[c]\n\n# def dfs2(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dp2[c] = dp2[v] + dp[v] - dp[c] + (n-dp[c])\n#         dfs2(c,v)\n\n# n = int(input())\n# tree = [[] for _ in range(n)]\n# dp = [0 for _ in range(n)]\n# dp2 = [0 for _ in range(n)]\n# for _ in range(n-1):\n#     a,b = map(int,input().split())\n#     tree[a-1].append(b-1)\n#     tree[b-1].append(a-1)\n# for i in range(n):\n#     dp[i] = int(input())\n\n# dfs(0,-1)\n# dfs2(0,-1)\n# print(dp2)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dfs(c,v)\n#         dp[v] += dp[c]\n\n# def dfs2(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dp2[c] = dp2[v] + dp[v] - dp[c] + (n-dp[c])\n#         dfs2(c,v)\n\n# n = int(input())\n# tree = [[] for _ in range(n)]\n# dp = [0 for _ in range(n)]\n# dp2 = [0 for _ in range(n)]\n# for _ in range(n-1):\n#     a,b = map(int,input().split())\n#     tree[a-1].append(b-1)\n#     tree[b-1].append(a-1)\n# for i in range(n):\n#     dp[i] = int(input())\n\n# dfs(0,-1)\n# dfs2(0,-1)\n# print(dp2)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dfs(c,v)\n#         dp[v] += dp[c]\n\n# def dfs2(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dp2[c] = dp2[v] + dp[v] - dp[c] + (n-dp[c])\n#         dfs2(c,v)\n\n# n = int(input())\n# tree = [[] for _ in range(n)]\n# dp = [0 for _ in range(n)]\n# dp2 = [0 for _ in range(n)]\n# for _ in range(n-1):\n#     a,b = map(int,input().split())\n#     tree[a-1].append(b-1)\n#     tree[b-1].append(a-1)\n# for i in range(n):\n#     dp[i] = int(input())\n\n# dfs(0,-1)\n# dfs2(0,-1)\n# print(dp2)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dfs(c,v)\n#         dp[v] += dp[c]\n\n# def dfs2(v,p):\n#     for c in tree[v]:\n#         if c == p:\n#             continue\n#         dp2[c] = dp2[v] + dp[v] - dp[c] + (n-dp[c])\n#         dfs2(c,v)\n\n# n = int(input())\n# tree = [[] for _ in range(n)]\n# dp = [0 for _ in range(n)]\n# dp2 = [0 for _ in range(n)]\n# for _ in range(n-1):\n#     a,b = map(int,input().split())\n#     tree[a-1].append(b-1)\n#     tree[b-1].append(a-1)\n# for i in range(n):\n#     dp[i] = int(input())\n\n# dfs(0,-1)\n# dfs2(0,-1)\n# print(dp2)\n", "\n\nN = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nC = [int(x) for x in input().split()]\n\npoints = 0\nfor i in range(N-1):\n    if A[i + 1] - A[i] == 1:\n        points += (B[A[i] - 1] + C[A[i] - 1])\n    else:\n        points += B[A[i] - 1]\npoints += B[A[N - 1] - 1]\nprint(points)\n", "\n\nn = input()\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(len(a)):\n    ans += b[a[i]-1]\n    if i != 0 and a[i] == a[i-1] + 1:\n        ans += c[a[i-1]-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(ans)\n"]