2022-04-20 19:45:14.220418 num operations 1
2022-04-20 19:45:14.220441 size on input set 1
2022-04-20 19:45:14.220613 using api key jaanu
2022-04-20 19:45:17.133907 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650483914,
  "object": "edit"
}
2022-04-20 19:45:17.134187 fix syntax errors 2 ["import math\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:45:17.134223 size on output set 2
2022-04-20 19:45:17.134236 num operations 1
2022-04-20 19:45:17.134276 size on input set 1
2022-04-20 19:45:17.134439 using api key gabby
2022-04-20 19:45:17.170686 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:45:18.672594 using api key soukgp
2022-04-20 19:45:25.175911 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ==============\n# Solution 1 \n# ==============\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 1,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split())) # split the input into 2 variables\n\nif a > b: # if a is greater than b\n    a, b = b, a # swap a and b\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    }
  ],
  "created": 1650483918,
  "object": "edit"
}
2022-04-20 19:45:25.176121 fix syntax errors 2 ['\n\n# ==============\n# Solution 1 \n# ==============\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split())) # split the input into 2 variables\n\nif a > b: # if a is greater than b\n    a, b = b, a # swap a and b\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n']
2022-04-20 19:45:25.176149 size on output set 2
2022-04-20 19:45:25.176161 num operations 1
2022-04-20 19:45:25.176166 size on input set 1
2022-04-20 19:45:25.176322 using api key sunu
2022-04-20 19:45:30.690464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n    LCM = reduce(mul, [A, B], 1) / gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650483925,
  "object": "edit"
}
2022-04-20 19:45:30.690679 fix syntax errors 2 ['\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B) = A × B ÷ GCD(A, B)\n    LCM = reduce(mul, [A, B], 1) / gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:45:30.690716 size on output set 2
