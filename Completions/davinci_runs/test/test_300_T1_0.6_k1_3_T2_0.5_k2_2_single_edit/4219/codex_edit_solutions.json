["\nn = int(input())\na = [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i])] for i in range(n)]\ny = [[0 for _ in range(a[i])] for i in range(n)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j], y[i][j] = map(int, input().split())\n        x[i][j] -= 1\n\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:  # \u521d\u671f\u5024-1\u306a\u306e\u3067\u3001\u521d\u3081\u3066\u8a08\u7b97\u3059\u308b\u3068\u304d\u306f-1\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef dfs(v):\n    global visited, honest, dishonest\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(dishonest[v])):\n        if not visited[dishonest[v][i]]:\n            dfs(dishonest[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\ndishonest = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            dishonest[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())  # \u5165\u529b\na = [int(input()) for _ in range(n)]  # \u5165\u529b\nx = [[0 for _ in range(a[i])] for i in range(n)]  # \u5165\u529b\ny = [[0 for _ in range(a[i])] for i in range(n)]  # \u5165\u529b\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j], y[i][j] = map(int, input().split())  # \u5165\u529b\n\n        x[i][j] -= 1\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n", "import sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(N):\n        if honest[v][i] == 1 and not visited[i]:\n            dfs(i)\n        if unkind[v][i] == 1 and not visited[i]:\n            dfs(i)\n\nN = int(input())\nhonest = [[0] * N for i in range(N)]\nunkind = [[0] * N for i in range(N)]\nvisited = [False] * N\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 0:\n            honest[i][x-1] = 1\n        elif y == 1:\n            unkind[i][x-1] = 1\nans = 0\nfor i in range(N):\n    if not visited[i]:\n        dfs(i)\n        ans += 1\nprint(ans)\n", "\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n"]