2022-04-20 20:06:09.821832 num operations 1
2022-04-20 20:06:09.821849 size on input set 1
2022-04-20 20:06:09.822055 using api key gabby
2022-04-20 20:06:09.938664 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 20:06:11.440562 using api key sunu
2022-04-20 20:06:17.956489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    try:\n        N, M = map(int, input().split())\n        A = [[0]*N for _ in range(N)]\n        for _ in range(M):\n            a, b = map(int, input().split())\n            A[a-1][b-1] = 1\n            A[b-1][a-1] = 1\n        visited = [0] * N\n        visited[0] = 1\n        print(search(A, 0, visited))\n    except:\n        print(0)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650485171,
  "object": "edit"
}
2022-04-20 20:06:17.956809 fix syntax errors 2 ["\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    try:\n        N, M = map(int, input().split())\n        A = [[0]*N for _ in range(N)]\n        for _ in range(M):\n            a, b = map(int, input().split())\n            A[a-1][b-1] = 1\n            A[b-1][a-1] = 1\n        visited = [0] * N\n        visited[0] = 1\n        print(search(A, 0, visited))\n    except:\n        print(0)\n\nif __name__ == '__main__':\n    main()\n", "\ndef search(A, d, visited):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 20:06:17.956847 size on output set 2
2022-04-20 20:06:17.956859 num operations 1
2022-04-20 20:06:17.956865 size on input set 1
2022-04-20 20:06:17.957028 using api key sunu
2022-04-20 20:06:24.970675 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int, input().split())))\n\n\ndef dfs(graph, vertex, visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph, next_vertex, visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N + 1)]\nfor a, b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph, 1, visited))\n"
    }
  ],
  "created": 1650485178,
  "object": "edit"
}
2022-04-20 20:06:24.970901 fix syntax errors 2 ['def dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', '\n\nN, M = map(int, input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int, input().split())))\n\n\ndef dfs(graph, vertex, visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph, next_vertex, visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N + 1)]\nfor a, b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph, 1, visited))\n']
2022-04-20 20:06:24.970939 size on output set 2
