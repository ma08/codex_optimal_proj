["\n", "\n\na, b, x = map(int, input().split())\n\nif (a - x) >= b:\n    print(\"0\" * x + \"1\" * b)\nelif (b - x) >= a:\n    print(\"1\" * x + \"0\" * a)\nelse:\n    zeros = a - (x - b)\n    print(\"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b)\n", "#!/usr/bin/env python3\n\n# Use A[i] to represent the number of 0s required in the first i bits\n# Use B[i] to represent the number of 1s required in the first i bits\n# Use C[i] to represent the number of transitions required in the first i bits\n# Initially, A[0] = a, B[0] = b, C[0] = 0\n# At each step, we have 2 options:\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0\n# At each step, we choose the option that will give us C[i] == x\n# If C[i] > x, then we need to add 0 to the string\n# If C[i] < x, then we need to add 1 to the string\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1\n# If B[i-1] == 0, then we have to add 0\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n", "\n#!/usr/bin/env python\n#Solution\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n", "\n\n# Use A to represent the number of 0s required in the first i bits\n# Use B to represent the number of 1s required in the first i bits\n# Use C to represent the number of transitions required in the first i bits\n# Initially, A = a, B = b, C = 0\n# At each step, we have 2 options for adding to the string:\n# 1) Add 0: A -= 1, B remains the same, C += 1\n# 2) Add 1: A remains the same, B -= 1, C += 1\n# When adding 0 to the string, if A == 0, then there is no more 0s left to add, we have to add 1\n# When adding 1 to the string, if B == 0, then there is no more 1s left to add, we have to add 0\n# At each step, we choose the option that will give us C == x\n# If C > x, then we need to add 0 to the string\n# If C < x, then we need to add 1 to the string\n# If C == x, then we have 2 options, we can add 0 or 1, but if A == 0, then we have to add 1\n# If B == 0, then we have to add 0\n\ndef solve(a, b, x):\n    A = a\n    B = b\n    C = 0\n    for _ in range(a + b - 1):\n        if C > x:\n            A -= 1\n            C += 1\n        elif C < x:\n            B -= 1\n            C += 1\n        else:\n            if A == 0:\n                B -= 1\n                C += 1\n            elif B == 0:\n                A -= 1\n                C += 1\n            else:\n                A -= 1\n                C += 1\n    ans = []\n    for i in range(a + b - 1):\n        if A > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n", "\n\na, b, x = map(int, raw_input().split())\n\nif (b - x) >= a:\n    print \"1\" * x + \"0\" * a\nelif (a - x) >= b:\n    print \"0\" * x + \"1\" * b\nelse:\n    zeros = a - (x - b)\n    print \"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b\n"]