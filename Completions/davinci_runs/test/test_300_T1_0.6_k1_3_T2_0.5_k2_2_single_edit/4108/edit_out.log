2022-04-20 19:21:45.310161 num operations 1
2022-04-20 19:21:45.310178 size on input set 1
2022-04-20 19:21:45.310360 using api key soukgp
2022-04-20 19:21:49.612919 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef can_make_equal(S, T):\n    if len(S) != len(T):\n        return False\n    if sorted(S) != sorted(T):\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    S = input().strip()\n    T = input().strip()\n    print(\"Yes\" if can_make_equal(S, T) else \"No\")\n"
    },
    {
      "index": 1,
      "text": "\n\ndef can_make_equal(S, T):\n    if len(S) != len(T) or sorted(S) != sorted(T):\n        return False\n    return True \n\nif __name__ == \"__main__\":\n    S = input()\n    T = input()\n    print(\"Yes\" if can_make_equal(S, T) else \"No\")\n"
    }
  ],
  "created": 1650482505,
  "object": "edit"
}
2022-04-20 19:21:49.613174 fix syntax errors 2 ['\n\ndef can_make_equal(S, T):\n    if len(S) != len(T):\n        return False\n    if sorted(S) != sorted(T):\n        return False\n    return True\n\nif __name__ == "__main__":\n    S = input().strip()\n    T = input().strip()\n    print("Yes" if can_make_equal(S, T) else "No")\n', '\n\ndef can_make_equal(S, T):\n    if len(S) != len(T) or sorted(S) != sorted(T):\n        return False\n    return True \n\nif __name__ == "__main__":\n    S = input()\n    T = input()\n    print("Yes" if can_make_equal(S, T) else "No")\n']
2022-04-20 19:21:49.613205 size on output set 2
2022-04-20 19:21:49.613217 num operations 1
2022-04-20 19:21:49.613223 size on input set 1
2022-04-20 19:21:49.613422 using api key soukgp
2022-04-20 19:22:02.684771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\nt = input()\n\ns = list(s)\nt = list(t)\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n# s = input()\n# t = input()\n#\n# sDict = {}\n# tDict = {}\n#\n# for i in range(len(s))\n#     if s[i] not in sDict:\n#         sDict[s[i]] = 1\n#     else:\n#         sDict[s[i]] += 1\n#\n#     if t[i] not in tDict:\n#         tDict[t[i]] = 1\n#     else:\n#         tDict[t[i]] += 1\n#\n# if sDict == tDict:\n#     print(\"Yes\")\n# else:\n#     print(\"No\")\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()\nt = input()\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    }
  ],
  "created": 1650482509,
  "object": "edit"
}
2022-04-20 19:22:02.685005 fix syntax errors 2 ['\n\ns = input()\nt = input()\n\ns = list(s)\nt = list(t)\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print("Yes")\nelse:\n    print("No")\n\n# s = input()\n# t = input()\n#\n# sDict = {}\n# tDict = {}\n#\n# for i in range(len(s))\n#     if s[i] not in sDict:\n#         sDict[s[i]] = 1\n#     else:\n#         sDict[s[i]] += 1\n#\n#     if t[i] not in tDict:\n#         tDict[t[i]] = 1\n#     else:\n#         tDict[t[i]] += 1\n#\n# if sDict == tDict:\n#     print("Yes")\n# else:\n#     print("No")\n', '\n\ns = input()\nt = input()\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print("Yes")\nelse:\n    print("No")\n']
2022-04-20 19:22:02.685049 size on output set 2
