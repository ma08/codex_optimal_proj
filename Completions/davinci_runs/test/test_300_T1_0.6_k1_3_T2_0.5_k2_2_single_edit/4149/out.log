2022-04-18 02:54:31.457927 """
Authors guessed an array $a$ consisting of $n$ integers; each integer is not less than $2$ and not greater than $2 \cdot 10^5$. You don't know the array $a$, but you know the array $b$ which is formed from it with the following sequence of operations:  Firstly, let the array $b$ be equal to the array $a$;  Secondly, for each $i$ from $1$ to $n$:   if $a_i$ is a prime number, then one integer $p_{a_i}$ is appended to array $b$, where $p$ is an infinite sequence of prime numbers ($2, 3, 5, \dots$);  otherwise (if $a_i$ is not a prime number), the greatest divisor of $a_i$ which is not equal to $a_i$ is appended to $b$;   Then the obtained array of length $2n$ is shuffled and given to you in the input. 

Here $p_{a_i}$ means the $a_i$-th prime number. The first prime $p_1 = 2$, the second one is $p_2 = 3$, and so on.

Your task is to recover any suitable array $a$ that forms the given array $b$. It is guaranteed that the answer exists (so the array $b$ is obtained from some suitable array $a$). If there are multiple answers, you can print any.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $2n$ integers $b_1, b_2, \dots, b_{2n}$ ($2 \le b_i \le 2750131$), where $b_i$ is the $i$-th element of $b$. $2750131$ is the $199999$-th prime number.


-----Output-----

In the only line of the output print $n$ integers $a_1, a_2, \dots, a_n$ ($2 \le a_i \le 2 \cdot 10^5$) in any order — the array $a$ from which the array $b$ can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.


-----Examples-----
Input
3
3 5 2 3 2 4

Output
3 4 2 
Input
1
2750131 199999

Output
199999 
Input
1
3 6

Output
6
"""
2022-04-18 02:54:31.457964 --------------------------
2022-04-18 02:56:10.521903 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nb = [int(x) for x in input().split()]\n\na = []\n\nfor i in range(n):\n    if b[i] in b[n:]:\n        a.append(b[i])\n    else:\n        for j in range(n, 2*n):\n            if b[j] == b[i]:\n                a.append(b[j])\n                break\n\nprint(*a)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#Solution\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n\tif b[i] in b[n:]:\n\t\ta.append(b[i])\n\telse:\n\t\ta.append(b[n + i])\n\nprint(*a)"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# def zeroes(n):\n#     return int(n / 5) + zeroes(int(n / 5)) if n >= 5 else 0\n\n# def factorial(n):\n#     return 1 if n == 1 or n == 0 else n * factorial(n - 1)\n\n# def prime_factors(n):\n#     i = 2\n#     factors = []\n#     while i * i <= n:\n#         if n % i:\n#             i += 1\n#         else:\n#             n //= i\n#             factors.append(i)\n#     if n > 1:\n#         factors.append(n)\n#     return factors\n\n\n# # print(prime_factors(12))\n# # print(factorial(12))\n# # print(zeroes(factorial(12)))\n\n# def is_prime(n):\n#     return 2 in [n, 2**n % n]\n\n# def find_primes(n):\n#     primes = []\n#     current_num = 2\n#     while len(primes) < n:\n#         if is_prime(current_num):\n#             primes.append(current_num)\n#         current_num += 1\n#     return primes\n\n# def find_divisors(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n# def find_divisors2(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors3(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors4(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors5(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors6(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors7(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors8(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors9(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors10(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors11(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors12(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors13(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors14(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors15(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors16(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors17(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors18(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors19(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors20(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors21(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors22(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors23(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors24(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors25(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors26(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors27(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors28(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors29(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors30(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors31(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors32(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors33(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors34(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors35(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors36(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors37(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current"
    }
  ],
  "created": 1650250471,
  "id": "cmpl-4yBp159LeuEXDO9IwxONFy7cFpg2M",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 02:56:10.522389 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nb = [int(x) for x in input().split()]\n\na = []\n\nfor i in range(n):\n    if b[i] in b[n:]:\n        a.append(b[i])\n    else:\n        for j in range(n, 2*n):\n            if b[j] == b[i]:\n                a.append(b[j])\n                break\n\nprint(*a)"
}
2022-04-18 02:56:10.522435 REASON stop
2022-04-18 02:56:10.543193 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#Solution\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n\tif b[i] in b[n:]:\n\t\ta.append(b[i])\n\telse:\n\t\ta.append(b[n + i])\n\nprint(*a)"
}
2022-04-18 02:56:10.543267 REASON stop
2022-04-18 02:56:10.543826 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# def zeroes(n):\n#     return int(n / 5) + zeroes(int(n / 5)) if n >= 5 else 0\n\n# def factorial(n):\n#     return 1 if n == 1 or n == 0 else n * factorial(n - 1)\n\n# def prime_factors(n):\n#     i = 2\n#     factors = []\n#     while i * i <= n:\n#         if n % i:\n#             i += 1\n#         else:\n#             n //= i\n#             factors.append(i)\n#     if n > 1:\n#         factors.append(n)\n#     return factors\n\n\n# # print(prime_factors(12))\n# # print(factorial(12))\n# # print(zeroes(factorial(12)))\n\n# def is_prime(n):\n#     return 2 in [n, 2**n % n]\n\n# def find_primes(n):\n#     primes = []\n#     current_num = 2\n#     while len(primes) < n:\n#         if is_prime(current_num):\n#             primes.append(current_num)\n#         current_num += 1\n#     return primes\n\n# def find_divisors(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n# def find_divisors2(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors3(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors4(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors5(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors6(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors7(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors8(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors9(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors10(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors11(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors12(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors13(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors14(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors15(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors16(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors17(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors18(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors19(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors20(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors21(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors22(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors23(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors24(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors25(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors26(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors27(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors28(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors29(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors30(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors31(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors32(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors33(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors34(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors35(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors36(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current_num)\n#         current_num += 1\n#     return divisors\n\n\n# def find_divisors37(n):\n#     divisors = []\n#     current_num = 1\n#     while current_num <= n:\n#         if n % current_num == 0:\n#             divisors.append(current"
}
2022-04-18 02:56:10.543936 REASON length
