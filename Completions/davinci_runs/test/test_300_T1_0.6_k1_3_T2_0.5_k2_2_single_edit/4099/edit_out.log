2022-04-20 19:17:23.084927 num operations 1
2022-04-20 19:17:23.084952 size on input set 1
2022-04-20 19:17:23.085177 using api key kouti
2022-04-20 19:17:27.520443 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) + k\n    if required_final_score < 0:\n        return -1\n    if required_final_score > k:\n        return -1\n    return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    return max(0, (n * m) - sum(scores))\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"
    }
  ],
  "created": 1650482243,
  "object": "edit"
}
2022-04-20 19:17:27.520691 fix syntax errors 2 ["\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores) + k\n    if required_final_score < 0:\n        return -1\n    if required_final_score > k:\n        return -1\n    return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    return max(0, (n * m) - sum(scores))\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"]
2022-04-20 19:17:27.520786 size on output set 2
2022-04-20 19:17:27.520800 num operations 1
2022-04-20 19:17:27.520806 size on input set 1
2022-04-20 19:17:27.520967 using api key derek
2022-04-20 19:17:27.555544 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:17:29.057484 using api key jaanu
2022-04-20 19:17:33.387315 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n"
    },
    {
      "index": 1,
      "text": "\n\n# S = sum(Ai) + x \n# x = M * N - S \n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n"
    }
  ],
  "created": 1650482249,
  "object": "edit"
}
2022-04-20 19:17:33.387521 fix syntax errors 2 ['\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n', '\n\n# S = sum(Ai) + x \n# x = M * N - S \n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n']
2022-04-20 19:17:33.387544 size on output set 2
2022-04-20 19:17:33.387556 num operations 1
2022-04-20 19:17:33.387562 size on input set 1
2022-04-20 19:17:33.387718 using api key sunu
2022-04-20 19:17:50.790704 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Get the number of subjects and the goal score\nN, M = map(int, sys.stdin.readline().split())\n\n# Get the maximum score\nK = int(sys.stdin.readline())\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal\nif lowest_score > K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject\nelse:\n    print(lowest_score)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n# Get the number of subjects and the goal score\nN, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal\n# The highest possible score is the sum of all the scores\nlowest_score = M\nhighest_score = sum(scores)\n\n# As long as the lowest score is less than the highest score, we can keep checking\nwhile lowest_score < highest_score:\n    middle_score = (lowest_score + highest_score) // 2\n\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject\n    if total >= N * M:\n        # Set the highest possible score to the middle score\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject\n    else:\n        # Set the lowest possible score to 1 greater than the middle score\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the sum of all the scores, we cannot achieve the goal\nif lowest_score >= sum(scores):\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject\nelse:\n    print(lowest_score)\n"
    }
  ],
  "created": 1650482253,
  "object": "edit"
}
2022-04-20 19:17:50.790943 fix syntax errors 2 ['\nimport sys\n\n# Get the number of subjects and the goal score\nN, M = map(int, sys.stdin.readline().split())\n\n# Get the maximum score\nK = int(sys.stdin.readline())\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal\nif lowest_score > K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject\nelse:\n    print(lowest_score)\n', 'import sys\n\n# Get the number of subjects and the goal score\nN, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal\n# The highest possible score is the sum of all the scores\nlowest_score = M\nhighest_score = sum(scores)\n\n# As long as the lowest score is less than the highest score, we can keep checking\nwhile lowest_score < highest_score:\n    middle_score = (lowest_score + highest_score) // 2\n\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject\n    if total >= N * M:\n        # Set the highest possible score to the middle score\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject\n    else:\n        # Set the lowest possible score to 1 greater than the middle score\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the sum of all the scores, we cannot achieve the goal\nif lowest_score >= sum(scores):\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject\nelse:\n    print(lowest_score)\n']
2022-04-20 19:17:50.791102 size on output set 2
