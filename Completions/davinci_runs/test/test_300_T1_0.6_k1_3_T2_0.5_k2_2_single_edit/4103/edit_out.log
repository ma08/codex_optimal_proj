2022-04-20 19:19:52.140021 num operations 1
2022-04-20 19:19:52.140044 size on input set 1
2022-04-20 19:19:52.140278 using api key jaanu
2022-04-20 19:20:05.080093 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        a, b = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n        s = a + b\n        print(s)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    }
  ],
  "created": 1650482392,
  "object": "edit"
}
2022-04-20 19:20:05.080332 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        a, b = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n        s = a + b\n        print(s)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"]
2022-04-20 19:20:05.080370 size on output set 2
2022-04-20 19:20:05.080382 num operations 1
2022-04-20 19:20:05.080387 size on input set 1
2022-04-20 19:20:05.080549 using api key sunu
2022-04-20 19:20:17.195620 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 1,
      "text": "\n\nn, b, a = map(int, input().split())  # \u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ns = list(map(int, input().split()))\n\n\ndef solve_problem(n, b, a, s):\n    max_segments = 0\n    cur_a = a\n    cur_b = b\n    for i in range(n):\n        if s[i] == 1:\n            if cur_b > 0:\n                cur_b -= 1\n                cur_a += 1\n                if cur_a > a:\n                    cur_a = a\n            else:\n                cur_a -= 1\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n            else:\n                cur_b -= 1\n        if cur_a == 0 and cur_b == 0:\n            break\n        max_segments += 1\n    return max_segments\n\n\nprint(solve_problem(n, b, a, s))\n"
    }
  ],
  "created": 1650482405,
  "object": "edit"
}
2022-04-20 19:20:17.195837 fix syntax errors 2 ['\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\n\nn, b, a = map(int, input().split())  # читаем входные данные\ns = list(map(int, input().split()))\n\n\ndef solve_problem(n, b, a, s):\n    max_segments = 0\n    cur_a = a\n    cur_b = b\n    for i in range(n):\n        if s[i] == 1:\n            if cur_b > 0:\n                cur_b -= 1\n                cur_a += 1\n                if cur_a > a:\n                    cur_a = a\n            else:\n                cur_a -= 1\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n            else:\n                cur_b -= 1\n        if cur_a == 0 and cur_b == 0:\n            break\n        max_segments += 1\n    return max_segments\n\n\nprint(solve_problem(n, b, a, s))\n']
2022-04-20 19:20:17.195878 size on output set 2
2022-04-20 19:20:17.195892 num operations 1
2022-04-20 19:20:17.195898 size on input set 1
2022-04-20 19:20:17.196067 using api key kouti
2022-04-20 19:20:39.630353 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, b, a, s):\n    # initialize variables for the accumulator and the battery\n    a_charge = 0\n    b_charge = 0\n    # initialize variables for the max distance and the current segment\n    max_dist = 1\n    current_segment = 0\n    # loop through all segments\n    for segment in s:\n        # if the current segment is exposed to sunlight\n        # and the accumulator is not full\n        if segment == 1 and a_charge < a:\n            # increase the charge on the accumulator\n            a_charge += 1\n        # if the current segment is not exposed to sunlight\n        # and the accumulator is not empty\n        elif segment == 0 and a_charge > 0:\n            # decrease the charge on the accumulator\n            a_charge -= 1\n        # if the current segment is not exposed to sunlight\n        # and the battery is not full\n        elif segment == 0 and b_charge < b:\n            # increase the charge on the battery\n            b_charge += 1\n        # if the current segment is exposed to sunlight\n        # and the battery is not empty\n        elif segment == 1 and b_charge > 0:\n            # decrease the charge on the battery\n            b_charge -= 1\n        # if the current segment is not exposed to sunlight\n        # and the battery and the accumulator are both empty\n        elif segment == 0 and a_charge == 0 and b_charge == 0:\n            # break the loop\n            break\n        # if the current segment is exposed to sunlight\n        # and the battery and the accumulator are both full\n        elif segment == 1 and a_charge == a and b_charge == b:\n            # break the loop\n            break\n        # update the current segment\n        current_segment += 1\n        # if the current segment is the last segment\n        # the robot can move forward\n        if current_segment == n - 1:\n            # increase the max distance\n            max_dist += 1\n    # return the max distance\n    return max_dist \n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    }
  ],
  "created": 1650482417,
  "object": "edit"
}
2022-04-20 19:20:39.630672 fix syntax errors 2 ["#!/usr/bin/env python3\n\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", '\n\ndef solve(n, b, a, s):\n    # initialize variables for the accumulator and the battery\n    a_charge = 0\n    b_charge = 0\n    # initialize variables for the max distance and the current segment\n    max_dist = 1\n    current_segment = 0\n    # loop through all segments\n    for segment in s:\n        # if the current segment is exposed to sunlight\n        # and the accumulator is not full\n        if segment == 1 and a_charge < a:\n            # increase the charge on the accumulator\n            a_charge += 1\n        # if the current segment is not exposed to sunlight\n        # and the accumulator is not empty\n        elif segment == 0 and a_charge > 0:\n            # decrease the charge on the accumulator\n            a_charge -= 1\n        # if the current segment is not exposed to sunlight\n        # and the battery is not full\n        elif segment == 0 and b_charge < b:\n            # increase the charge on the battery\n            b_charge += 1\n        # if the current segment is exposed to sunlight\n        # and the battery is not empty\n        elif segment == 1 and b_charge > 0:\n            # decrease the charge on the battery\n            b_charge -= 1\n        # if the current segment is not exposed to sunlight\n        # and the battery and the accumulator are both empty\n        elif segment == 0 and a_charge == 0 and b_charge == 0:\n            # break the loop\n            break\n        # if the current segment is exposed to sunlight\n        # and the battery and the accumulator are both full\n        elif segment == 1 and a_charge == a and b_charge == b:\n            # break the loop\n            break\n        # update the current segment\n        current_segment += 1\n        # if the current segment is the last segment\n        # the robot can move forward\n        if current_segment == n - 1:\n            # increase the max distance\n            max_dist += 1\n    # return the max distance\n    return max_dist \n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n']
2022-04-20 19:20:39.630736 size on output set 2
