2022-04-18 02:37:58.203033 """
There are N cities on a number line. The i-th city is located at coordinate x_i.
Your objective is to visit all these cities at least once.
In order to do so, you will first set a positive integer D.
Then, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:
 - Move 1: travel from coordinate y to coordinate y + D.
 - Move 2: travel from coordinate y to coordinate y - D.
Find the maximum value of D that enables you to visit all the cities.
Here, to visit a city is to travel to the coordinate where that city is located.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 10^5
 - 1 \leq X \leq 10^9
 - 1 \leq x_i \leq 10^9
 - x_i are all different.
 - x_1, x_2, ..., x_N \neq X

-----Input-----
Input is given from Standard Input in the following format:
N X
x_1 x_2 ... x_N

-----Output-----
Print the maximum value of D that enables you to visit all the cities.

-----Sample Input-----
3 3
1 7 11

-----Sample Output-----
2

Setting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.
 - Perform Move 2 to travel to coordinate 1.
 - Perform Move 1 to travel to coordinate 3.
 - Perform Move 1 to travel to coordinate 5.
 - Perform Move 1 to travel to coordinate 7.
 - Perform Move 1 to travel to coordinate 9.
 - Perform Move 1 to travel to coordinate 11.
"""
2022-04-18 02:37:58.203049 --------------------------
2022-04-18 02:38:24.853671 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    # input\n    n, x = map(int, input().split())\n    xi = list(map(int, input().split()))\n\n    # sort xi\n    xi.sort()\n\n    # find D\n    D = 0\n    for i in range(1, n+1):\n        D = max(D, abs(x - xi[i-1]))\n\n    print(D)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, x = map(int, input().split())\n    x_list = list(map(int, input().split()))\n    x_list.append(x)\n    x_list.sort()\n    d_list = []\n    for i in range(len(x_list) - 1):\n        d_list.append(x_list[i + 1] - x_list[i])\n    print(max(d_list) // 2)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom math import floor, ceil\n\nN, X = map(int, sys.stdin.readline().split())\nx = list(map(int, sys.stdin.readline().split()))\n\nx.sort()\n\nm_diff = max([abs(x[i] - x[i+1]) for i in range(len(x) - 1)])\n\nprint(floor(m_diff / 2))"
    }
  ],
  "created": 1650249478,
  "id": "cmpl-4yBZ0KKIP3WkufwAyLdnMdcfezRMU",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 02:38:24.853912 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    # input\n    n, x = map(int, input().split())\n    xi = list(map(int, input().split()))\n\n    # sort xi\n    xi.sort()\n\n    # find D\n    D = 0\n    for i in range(1, n+1):\n        D = max(D, abs(x - xi[i-1]))\n\n    print(D)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 02:38:24.853951 REASON stop
2022-04-18 02:38:25.005157 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, x = map(int, input().split())\n    x_list = list(map(int, input().split()))\n    x_list.append(x)\n    x_list.sort()\n    d_list = []\n    for i in range(len(x_list) - 1):\n        d_list.append(x_list[i + 1] - x_list[i])\n    print(max(d_list) // 2)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 02:38:25.005269 REASON stop
2022-04-18 02:38:25.049436 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom math import floor, ceil\n\nN, X = map(int, sys.stdin.readline().split())\nx = list(map(int, sys.stdin.readline().split()))\n\nx.sort()\n\nm_diff = max([abs(x[i] - x[i+1]) for i in range(len(x) - 1)])\n\nprint(floor(m_diff / 2))"
}
2022-04-18 02:38:25.049510 REASON stop
