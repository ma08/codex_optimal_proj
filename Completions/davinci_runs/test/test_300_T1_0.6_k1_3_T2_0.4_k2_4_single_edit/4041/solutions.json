["s = input()\nt = input()\nl, r = [0]*len(t), [0]*len(t)\nli, ri = 0, len(s) - 1\nfor i in range(len(t)):\n    while s[ li ] != t[ i ]:\n        li += 1\n    while s[ ri ] != t[ - i - 1 ]:\n        ri -= 1\n    l[ i ] = li\n    r[ -i -1 ] = ri\n    li += 1\n    ri -= 1\n\nprint( max( [ r[ 0 ], len(s) - l[ -1 ] - 1 ] + [ max( 0, r[ i ] - l[ i - 1 ] ) - 1 for i in range( 1, len(t) ) ] ) )\n", "def check(mid):\n    qa = False\n    for i in range(n - mid + 1):\n        u = 0\n        for j in range(i):\n            if u < m and s[j] == t[u]:\n                u += 1\n        for j in range(i + mid, n):\n            if u < m and s[j] == t[u]:\n                u += 1\n        if u == m:\n            qa = True\n            break\n    return qa\n\n\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nl = -1\nr = n - m + 1\nwhile r - l > 1:\n    mid = (l + r) // 2\n    if check(mid):\n        l = mid\n    else:\n        r = mid\nprint(l)", "def check(s, t):\n\ti = 0\n\tj = 0\n\twhile i < len(s) and j < len(t):\n\t\tif (s[i] == t[j]):\n\t\t\tj += 1\n\t\ti += 1\n\treturn j == len(t)\ns = input()\nt = input()\nans = 0\nfor i in range(len(s) + 1):\n\tfor j in range(i, len(s) + 1):\n\t\tif (check(s[:i] + s[j:], t)):\n\t\t\tans = max(ans, j - i)\nprint(ans)\n", "s = input()\nt = input()\n\nforward = []\n\nbackward = []\n\nrptr = 0\n\nfor i in range(len(s)):\n    if rptr == len(t):\n        break\n    if s[i] == t[rptr]:\n        forward.append(i)\n        rptr += 1\n\nrptr = len(t)-1\nfor i in range(len(s)-1, -1, -1):\n    if rptr == -1:\n        break\n    if s[i] == t[rptr]:\n        backward.append(i)\n        rptr -= 1\n\nbackward = backward[::-1]\nbackward.append(forward[-1])\n\nmx = max(forward[0], len(s)-1-backward[-2], len(s)-1-forward[-1], backward[0])\n#print(mx)\nfor i in range(len(t)):\n    mx = max(mx, abs(forward[i] - backward[i+1])-1)\n    #print(i, mx)\nprint(mx)\n", "s=str(input())\nt=str(input())\ni=0\nj=0\narr1=[]\nwhile(i<len(s)):\n\tif(s[i]==t[j]):\n\t\tarr1.append(i+1)\n\t\tj+=1\n\ti+=1\n\tif(j==len(t)):\n\t\tbreak\n\ni=len(s)-1\nj=len(t)-1\narr2=[0]*len(t)\nwhile(i>=0):\n\tif(s[i]==t[j]):\n\t\tarr2[j]=i+1\n\t\tj-=1\n\ti-=1\n\tif(j==-1):\n\t\tbreak\n\nans=max(arr2[0]-1,len(s)-arr1[-1])\n\nfor i in range(len(t)-1):\n\tans=max(ans,arr2[i+1]-arr1[i]-1)\n\nprint(ans)\n\n", "from sys import stdin\ns=stdin.readline().strip()\ns1=stdin.readline().strip()\ndp=[-1 for i in range(len(s1)+1)]\ndp1=[-1 for i in range(len(s1)+1)]\nx=0\nfor i in range(len(s)):\n    if s[i]==s1[x]:\n        dp[x+1]=i\n        x+=1\n        if x>=len(s1):\n            break\nx=len(s1)-1\ny=1\ndp[0]=-1\ndp1[0]=len(s)\nfor i in range(len(s)-1,-1,-1):\n    if s[i]==s1[x]:\n        dp1[y]=i\n        x-=1\n        y+=1\n        if x<0:\n            break\n\nans=0\nfor i in range(len(s1)+1):\n    ans=max(dp1[len(s1)-i]-dp[i]-1,ans)\n    ans=max(dp[len(s1)-i]-dp1[i]-1,ans)\n    \n        \nprint(ans)\n", "def remove(s,t,start,end):\n    arr = []\n    for i in range(start):\n        arr.append(s[i])\n\n    for i in range(end+1,len(s)):\n        arr.append(s[i])\n\n\n    i = 0\n    j = 0\n    while i < len(arr) and j < len(t):\n        if arr[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    if j == len(t):\n        return True\n\n    return False\n\ndef solve(s,t):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            if remove(s,t,i,j):\n                ans = max(ans,j-i+1)\n\n    print(ans)\n\ndef main():\n    s = input()\n    t = input()\n    solve(s,t)\n\n\nmain()\n", "s = input()\nt = input()\nn = len(s)\n\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        st = s[ : i] + s[j+1 :]\n        #print(st)\n        \n        cur, ok = 0, 0\n        \n        for ch in st:\n            if ch == t[cur]:\n                cur += 1\n            if cur == len(t):\n                ok = 1\n                break\n            \n        if ok == 1:\n            ans = max(ans, len(s) - len(st))\nprint(ans)\n", "\ndef main():\n\n    s = input()\n    t = input()\n    n = len(s)\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            a = s[ : i] \n            b = s[j+1 :]\n            st = a+b\n            cur, ok = 0, 0\n            \n            for ch in st:\n                if ch == t[cur]:\n                    cur += 1\n                if cur == len(t):\n                    ok = 1\n                    break\n                \n            if ok == 1:\n                ans = max(ans, len(s) - len(st))\n    return ans\n\nprint(main())\n", "from sys import stdin\nfrom sys import setrecursionlimit as SRL; SRL(10**7)\nrd = stdin.readline\nrrd = lambda: list(map(int, rd().strip().split()))\n\ns = str(rd().strip())\n\nt = str(rd().strip())\ns = '0' + s\n\ncanl = [0] * (len(s) + 10)\ncanr = [0] * (len(s) + 10)\n\nj = 0\nfor i,v in enumerate(s):\n\n    if j<len(t) and v == t[j]:\n        j += 1\n    canl[i] = j\n\nj = len(t) - 1\n\nfor i in range(len(s)-1,-1,-1):\n    if j>=0 and s[i] == t[j]:\n        j -= 1\n    canr[i] = len(t)-j-1\n\n\ndef check(x):\n    if x > len(s):\n        return False\n\n    for i in range(1,len(s) - x+1):\n        l = i - 1\n        r = i + x\n\n        if canl[l] + canr[r] >= len(t):\n\n            return True\n\n    return False\n\n\nl = 0\nr = len(s)\n\n\nwhile l<r:\n    mid = (l+r)//2\n    if check(mid):\n        l = mid + 1\n    else:\n        r = mid\n\n\nprint(r-1)\n\n\n\n\n\n", "s = input()\nt = input()\nn = len(s)\nm = len(t)\nl = [-1]\nr = [n]\nc = 0\nfor i in range(n):\n    if s[i] == t[c]:\n        l.append(i)\n        c += 1\n        if c >= m:\n            break\nc = 0\nfor i in range(n):\n    if s[-1-i] == t[-1-c]:\n        r.append(n-1-i)\n        c += 1\n        if c >= m:\n            break\nmx = 0\nfor i in range(m+1):\n    mx = max(mx, r[m-i]-l[i]-1)\nprint(mx)\n", "def subseq(a, b):\n    j = 0\n    for i in range(len(a)):\n        if j < len(b) and a[i] == b[j]:\n            j = j + 1\n    if j == len(b):\n        return True\n    else:\n        return False\n\n\ns = input()\nt = input()\nans = 0\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        cur = s[:i] + s[j+1:len(s)]\n        if subseq(cur, t) and j - i + 1 > ans:\n            ans = j - i + 1\nprint (ans)\n", "s = input()\nt = input()\n\n\ndef compute_prefix(s, t):\n    prefix = [0 for i in range(len(t) + 1)]\n    i = 0\n    j = 0\n    while i < len(t):\n        while s[j] != t[i]:\n            j += 1\n        prefix[i+1] = j+1\n        i += 1\n        j += 1\n    return prefix\n\n\nprefix = compute_prefix(s, t)\nsuffix = compute_prefix(s[::-1], t[::-1])\nres = 0\nfor i in range(len(t) + 1):\n    res = max(res, len(s) - (prefix[i] + suffix[len(t) - i]))\nprint(res)\n", "def pp(s, t):\n    last = 0\n    for i in t:\n        if last == len(s):\n            return 0\n        while(s[last] != i):\n            last += 1\n            if last == len(s):\n                return 0\n        last += 1\n    return 1\n\ns, t = input(), input()\nans = 0\nn = len(s)\nfor i in range(n):\n    for j in range(i, n):\n        if pp(s[:i] + s[(j + 1):], t):\n            ans = max(ans, j - i + 1)\nprint(ans)\n\n\n# print(pp('bbaba', 'bb'))\n\n# s = '0123456789'\n# print(s[:2] + s[4:])\n", "S = input()\nT = input()\nN, M = len(S), len(T)\n\ndef calc(s, t):\n    X = [0] * len(s)\n    j = 0\n    for i in range(len(s)):\n        if j >= len(t):\n            X[i] = j\n        elif s[i] == t[j]:\n            X[i] = j+1\n            j += 1\n        else:\n            X[i] = X[i-1]\n    return [0] + X\n\n        \nA, B = calc(S, T), calc(S[::-1], T[::-1])[::-1]\n# print(A, B)\nl, r = 0, N\nwhile r-l>1:\n    m = (l+r)//2\n    C = [A[i]+B[i+m] for i in range(N-m+1)]\n    # print(\"m, C =\", m, C)\n    if max(C) >= M:\n        l = m\n    else:\n        r = m\nprint(l)\n", "s = input()\nt = input()\n\ni = 0\nl = []\nfor c in t:\n    while s[i] != c:\n        i += 1\n    l.append(i)\n    i += 1\n\ni = len(s)-1\nr = []\nfor c in t[::-1]:\n    while s[i] != c:\n        i -= 1\n    r.append(i)\n    i -= 1\n\nr.reverse()\n\nmx = r[0]\nfor i in range(len(t)-1):\n    mx = max(mx, r[i+1] - l[i] - 1)\nmx = max(mx, len(s)-l[-1]-1)\n\nprint(mx)", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport math\nfrom math import gcd,sqrt\n\ndef isSubSequence(str1,str2,m,n): \n      \n    j = 0    # Index of str1 \n    i = 0    # Index of str2 \n      \n    # Traverse both str1 and str2 \n    # Compare current character of str2 with  \n    # first unmatched character of str1 \n    # If matched, then move ahead in str1 \n      \n    while j<m and i<n: \n        if str1[j] == str2[i]:     \n            j = j+1    \n        i = i + 1\n          \n    # If all characters of str1 matched, then j is equal to m \n    return j==m\n\n#T = int(input())\n#N = int(input())\ns1 = input()\nN = len(s1)\ns2 = input()\n#N,M,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\nres = 0\nfor i in range(N):\n    for j in range(i,N):\n        s = s1[:i] + s1[(j+1):]\n        # check subsequence\n        #print(s)\n        if isSubSequence(s2,s,len(s2),len(s)):\n            res = max(res,j-i+1)\n            \nprint(res)\n", "s = input()\nt = input()\n\npos = [[-1, -1] for i in range(len(t))]\n\nptr = 0\nfor i,c in enumerate(t):\n    while s[ptr] != c:\n        ptr += 1\n    pos[i][0] = ptr\n    ptr += 1\n\nptr = len(s) - 1\nfor i in range(len(t)-1, -1, -1):\n    c = t[i]\n    while s[ptr] != c:\n        ptr -= 1\n    pos[i][1] = ptr\n    ptr -= 1\n\nbest = max(pos[0][1], len(s)-pos[-1][0]-1)\nfor i in range(1, len(pos)):\n    best = max(best, pos[i][1] - pos[i-1][0] - 1)\n\nprint(best)\n", "def is_subseq(s, t):\n\tif(len(t) > len(s)):\n\t\treturn False\n\ti = 0\n\tj = 0\n\t# is t a subsequence of s?\n\twhile(j < len(t)):\n\t\tif(s[i]==t[j]):\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\t\tif(i==len(s)):\n\t\t\tbreak\n\treturn j==len(t)\ns = input()\nt = input()\nmx = 0\nfor i in range(len(s)):\n\tfor j in range(len(s)):\n\t\tl = min(i, j)\n\t\tr = max(i, j)\n\t\ts2 = s[:l]+s[r:]\n\t\tif(is_subseq(s2, t)==True):\n\t\t\tmx = max(mx, r-l)\n\t\t\t# print(s2)\nfor i in range(len(s)):\n\ts2 = s[:i]\n\tif(is_subseq(s2, t)==True):\n\t\tmx = max(mx, len(s)-i)\n\ts2 = s[i:]\n\tif(is_subseq(s2, t)==True):\n\t\tmx = max(mx, i)\n\nprint(mx)", "s = input()\nt = input()\nfp = [-1]\ntp = 0\nfor i in range(len(s)):\n    if s[i] == t[tp]:\n        fp.append(i)\n        tp += 1\n        if tp == len(t):\n            break\nlp = [len(s)]\ntp = len(t) - 1\nfor i in range(len(s) -1, -1 , -1):\n    if s[i] == t[tp]:\n        lp.append(i)\n        tp -= 1\n        if tp == -1:\n            break\nlp.reverse()\nprint(max([ (l-f) for (l,f) in zip(lp, fp)]) - 1)", "s = input()\nt = input()\nn = len(s)\nm = len(t)\nle = []\nri = []\nans = 0\np = 0\nfor i in range(n):\n    if p < m:\n        if s[i] == t[p]:\n            le.append(i)\n            if p == m - 1:\n                ans = max(ans, n - 1 - i)\n            p += 1\np = m - 1\nfor j in range(n - 1, -1, -1):\n    if p >= 0:\n        if s[j] == t[p]:\n            ri.append(j)\n            if p == 0:\n                ans = max(ans, j - 0)\n            p -= 1\nri.reverse()\nfor k in range(m - 1):\n    ans = max(ans, ri[k + 1] - le[k] - 1)\nprint(ans)", "import io, os\n#input = io.StringIO(os.read(0, os.fstat(0).st_size).decode()).readline\n\ndef check(d):\n\tfor i in range(len(s) - d + 1):\n\t\tpos = 0\n\t\t#print(s[:i] + s[i + d:], i)\n\t\tfor x in s[:i]:\n\t\t\tif x == s1[pos]:\n\t\t\t\tpos += 1\n\t\t\t\tif pos == len(s1):\n\t\t\t\t\treturn True\n\t\tfor x in s[i + d:]:\n\t\t\tif x == s1[pos]:\n\t\t\t\tpos += 1\n\t\t\t\tif pos == len(s1):\n\t\t\t\t\treturn True\n\treturn False\n\ns = input()\ns1 = input()\n\nl = 0\nr = len(s)\n\nwhile r - l > 1:\n\tmid = (r + l) // 2\n\tif check(mid):\n\t\tl = mid\n\telse:\n\t\tr = mid\n\nprint(l)\n\"\"\"\ncheck(3)\n\"\"\"\n", "from sys import stdin\ninput = stdin.readline\n\ns = input()\nt = input()\n\nn = len(t)\nlow = [0 for i in range(len(t))]\nhigh = [0 for i in range(len(t))]\n\nacc = 0\n\nfor i in range(n):\n    acc_t = t[i]\n    \n    while acc_t != s[acc]: acc += 1\n    low[i] = acc\n    acc += 1\n\nacc = len(s)-1\n    \nfor i in range(len(t)):\n    acc_t = t[n-i-1]\n    \n    while acc_t != s[acc]: acc -= 1\n    high[n-i-1] = acc\n    acc -= 1\n    \nres = max(high[0], len(s)-low[n-1]-1)\n\nfor i in range(n-1):\n    res = max(res, high[i+1]-low[i]-1)\n    \nprint(res)", "from sys import stdin, stdout\n\ninput = stdin.readline\n\ns, t = list(map(str, stdin.read().split()))\n\nn, m = len(s), len(t)\na = [0] * m\nb = [0] * m\n\npos = 0\nfor i in range(n):\n    if s[i] == t[pos]:\n        a[pos] = i\n        pos += 1\n        if pos == m:\n            break\n\npos = m - 1\nfor i in range(n - 1, -1, -1):\n    if s[i] == t[pos]:\n        b[pos] = i\n        pos -= 1\n        if pos == -1:\n            break\n\nres = max(b[0], n - (a[-1] + 1))\nfor i in range(m - 1):\n    res = max(res, (b[i + 1] - 1) - (a[i] + 1) + 1)\n\nprint(res)\n", "def isSubSequence(str1,str2,m,n): \n    j = 0 \n    i = 0 \n    while j<m and i<n: \n        if str1[j] == str2[i]:     \n            j = j+1    \n        i = i + 1\n    return j==m\ns=input()\nt=input()\nLengthT=len(t)\nA=[]\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        p=s[:i]+s[j:]\n        if isSubSequence(t,p,LengthT,len(p)):\n            A.append(j-i)\ntry:\n    print(max(A))\nexcept:\n    print(0)"]