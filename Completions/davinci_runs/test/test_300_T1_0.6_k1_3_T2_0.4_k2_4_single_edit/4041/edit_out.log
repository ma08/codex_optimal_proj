2022-04-20 13:47:01.711259 num operations 1
2022-04-20 13:47:01.711280 size on input set 1
2022-04-20 13:47:01.711515 using api key gabby
2022-04-20 13:47:07.274790 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    s = input()\n    t = input()\n    return s, t\n"
    },
    {
      "index": 1,
      "text": "\n\n# get the input\ns = input()\nt = input()\n\n# make a list of the characters in t\ntlist = list(t)\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in tlist:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    },
    {
      "index": 2,
      "text": "\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\nfrom sys import stdin\n# get the input\ns = stdin.readline().strip()\nt = stdin.readline().strip()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    },
    {
      "index": 3,
      "text": "\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\nimport sys\nsys.stdin = open('input.txt')\n# get the input\ns = input().strip()\nt = input().strip()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    }
  ],
  "created": 1650462421,
  "object": "edit"
}
2022-04-20 13:47:07.275072 fix syntax errors 4 ['\n\ndef get_input():\n    s = input()\n    t = input()\n    return s, t\n', '\n\n# get the input\ns = input()\nt = input()\n\n# make a list of the characters in t\ntlist = list(t)\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in tlist:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n', '\n\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\nfrom sys import stdin\n# get the input\ns = stdin.readline().strip()\nt = stdin.readline().strip()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n', '\n\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\nimport sys\nsys.stdin = open(\'input.txt\')\n# get the input\ns = input().strip()\nt = input().strip()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n']
2022-04-20 13:47:07.275119 size on output set 4
2022-04-20 13:47:07.275131 num operations 1
2022-04-20 13:47:07.275137 size on input set 1
2022-04-20 13:47:07.275297 using api key gabby
2022-04-20 13:47:17.119518 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, m, a, b):\n    # dp[i][j] = length of the longest common subsequence from first i chars of a and first j chars of b\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n + m - dp[-1][-1]\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solve(n, m, a, b))\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(a, b):\n    dp = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\n    for i in range(1, len(a) + 1):\n        for j in range(1, len(b) + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + (a[i - 1] == b[j - 1]))\n    return dp[-1][-1]\n\nprint(solve(input(), input()))\n"
    }
  ],
  "created": 1650462427,
  "object": "edit"
}
2022-04-20 13:47:17.119756 fix syntax errors 4 ['def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, m, a, b):\n    # dp[i][j] = length of the longest common subsequence from first i chars of a and first j chars of b\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n + m - dp[-1][-1]\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solve(n, m, a, b))\n', '\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n', '\ndef solve(a, b):\n    dp = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\n    for i in range(1, len(a) + 1):\n        for j in range(1, len(b) + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + (a[i - 1] == b[j - 1]))\n    return dp[-1][-1]\n\nprint(solve(input(), input()))\n']
2022-04-20 13:47:17.119895 size on output set 4
