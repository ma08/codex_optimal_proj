["#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n\nint main(int argc, char *argv[]) {\n\n\tchar *filename = argv[1];\n\tint fd = open(filename, O_RDWR);\n\t\n\tif (fd == -1) {\n\t\tprintf(\"error opening file: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\t\n\tprintf(\"file opened successfully\\n\");\n\t\n\tchar *buf = malloc(sizeof(char) * 1024);\n\tint bytes_read = read(fd, buf, 1024);\n\t\n\tif (bytes_read == -1) {\n\t\tprintf(\"error reading file: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\t\n\tprintf(\"%s\\n\", buf);\n\t\n\tchar *new_buf = \"hello world!\\n\";\n\tint bytes_written = write(fd, new_buf, strlen(new_buf));\n\t\n\tif (bytes_written == -1) {\n\t\tprintf(\"error writing to file: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\t\n\tprintf(\"file written to successfully\\n\");\n\t\n\tclose(fd);\n\t\n\treturn 0;\n}\n", "console.log('hello world');\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    print('YES' if max_h - min_h <= 1 else 'NO')\n\n\nif __name__ == \"__main__\":\n    main()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\nint main(int argc, char *argv[])\n{\n  int fd;\n  char buf[1024];\n  ssize_t nread;\n  int i;\n\n  if (argc < 2) {\n    fprintf(stderr, \"Usage: %s file...\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  for (i = 1; i < argc; i++) {\n    fd = open(argv[i], O_RDONLY);\n    if (fd == -1) {\n      perror(\"open\");\n      continue;\n    }\n\n    while ((nread = read(fd, buf, sizeof(buf))) > 0)\n      if (write(STDOUT_FILENO, buf, nread) != nread) {\n        perror(\"write\");\n        exit(EXIT_FAILURE);\n      }\n\n    if (nread == -1) {\n      perror(\"read\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (close(fd) == -1) {\n      perror(\"close\");\n      exit(EXIT_FAILURE);\n    }\n  }\n\n  exit(EXIT_SUCCESS);\n}\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n)\n\n\nif __name__ == \"__main__\":\n    main()\n", "// var fs = require('fs');\n// fs.readFile('file.js', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n\n// var fs = require('fs');\n// var data = fs.readFileSync('file.js', 'utf8');\n// console.log(data);\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n\n// var fs = require('fs');\n// fs.readFile('file.js', 'utf8', function (err, data) {\n//   if (err) throw err;\n//   console.log(data);\n// });\n// console.log('end');\n", "\n\n\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))\n    if max(wall_cond) - min(wall_cond) > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = [int(i) for i in input().split()]\n    if max(wall_cond) - min(wall_cond) > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n"]