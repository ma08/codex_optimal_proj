["\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n\ndef solve(n, b, a, s, t):\n    # initialize variables\n    i = 0\n    b_charge = b\n    t_charge = t\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        elif a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a, t = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s, t))\n", "\nimport sys\n\ndef main():\n  n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n  s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n  b_left = b\n  a_left = a\n\n  max_segments = 0\n  i = 0\n  while i < n:\n    if b_left == 0:\n      if a_left > 0:\n        a_left -= 1\n        max_segments += 1\n      else:\n        break\n    elif a_left == 0:\n      if b_left > 0:\n        b_left -= 1\n        max_segments += 1\n      else:\n        break\n    elif s[i] == 1:\n      if a_left < a:\n        a_left += 1\n        b_left -= 1\n        max_segments += 1\n      elif b_left > 0:\n        b_left -= 1\n        max_segments += 1\n      else:\n        break\n    elif s[i] == 0:\n      if a_left > 0:\n        a_left -= 1\n        max_segments += 1\n      elif b_left > 0:\n        b_left -= 1\n        max_segments += 1\n      else:\n        break\n    i += 1\n  print(max_segments)\n\nmain()\n", "\n\ndef solve(n, b, a, s, t):\n    # initialize variables\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    for i in range(n):\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist >= t\n\nn, b, a, t = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s, t))\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n\ndef solve(n, b, a, s, t):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n and s[i] != t:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == t:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] != t:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] != t:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == t:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n", "\n\ndef solve(n, b, a, s, i):\n    # initialize variables\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n and (a_charge > 0 or b_charge > 0):\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        elif a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery is empty\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if the battery and accumulator are both empty\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"]