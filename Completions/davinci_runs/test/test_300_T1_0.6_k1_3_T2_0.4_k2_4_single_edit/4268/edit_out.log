2022-04-20 14:57:53.847675 num operations 1
2022-04-20 14:57:53.847696 size on input set 1
2022-04-20 14:57:53.847887 using api key kouti
2022-04-20 14:58:03.199235 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\n\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))  # sort the points so that we can use them as a key\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum((x1 - x2) ** 2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\n\ndef main():\n    print(num_pairs_with_integer_distance(points))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            distances[key] = sum((x1 - x2)**2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 3,
      "text": "\ndef foo(x):\n    return x + 1\n"
    }
  ],
  "created": 1650466674,
  "object": "edit"
}
2022-04-20 14:58:03.199665 fix syntax errors 4 ["\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\n\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))  # sort the points so that we can use them as a key\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum((x1 - x2) ** 2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\n\ndef main():\n    print(num_pairs_with_integer_distance(points))\n\n\nif __name__ == '__main__':\n    main()\n", '\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            distances[key] = sum((x1 - x2)**2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\ndef foo(x):\n    return x + 1\n']
2022-04-20 14:58:03.199745 size on output set 4
2022-04-20 14:58:03.199765 num operations 1
2022-04-20 14:58:03.199777 size on input set 1
2022-04-20 14:58:03.200070 using api key gabby
2022-04-20 14:58:04.870514 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    }
  ],
  "created": 1650466683,
  "object": "edit"
}
2022-04-20 14:58:04.870754 fix syntax errors 4 ['import math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n']
2022-04-20 14:58:04.870877 size on output set 2
2022-04-20 14:58:04.870892 num operations 1
2022-04-20 14:58:04.870898 size on input set 1
2022-04-20 14:58:04.871057 using api key derek
2022-04-20 14:58:04.913030 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 14:58:06.414930 using api key jaanu
2022-04-20 14:58:10.737250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef distance(point1, point2):\n    summ = 0\n    for i in range(len(point1)):\n        summ += (point1[i] - point2[i])**2\n    return summ\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef distance(point1, point2):\n    summ = 0\n    for i in range(len(point1)):\n        summ += (point1[i] - point2[i])**2\n    return summ\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)-1):\n        sum += (point1[i+1] - point2[i+1])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(float, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650466686,
  "object": "edit"
}
2022-04-20 14:58:10.737517 fix syntax errors 4 ["\n\ndef distance(point1, point2):\n    summ = 0\n    for i in range(len(point1)):\n        summ += (point1[i] - point2[i])**2\n    return summ\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    summ = 0\n    for i in range(len(point1)):\n        summ += (point1[i] - point2[i])**2\n    return summ\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)-1):\n        sum += (point1[i+1] - point2[i+1])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(float, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:58:10.737561 size on output set 3
