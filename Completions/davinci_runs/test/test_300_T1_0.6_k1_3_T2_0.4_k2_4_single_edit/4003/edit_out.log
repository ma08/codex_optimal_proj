2022-04-20 13:34:35.708580 num operations 1
2022-04-20 13:34:35.708599 size on input set 1
2022-04-20 13:34:35.708808 using api key jaanu
2022-04-20 13:34:54.062206 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n  # dp_l[i] is the length of the longest increasing subsequence ending at i\n        dp_r = [0] * n  # dp_r[i] is the length of the longest decreasing subsequence starting at i\n        dp_l[0] = 1  # base case\n        dp_r[n - 1] = 1  # base case\n        for i in range(1, n):  # O(n)\n            if a[i] > a[i - 1]:  # if a[i] is greater than the previous element, then we can extend the subsequence\n                dp_l[i] = dp_l[i - 1] + 1\n            else:  # else, we start a new subsequence\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):  # O(n)\n            if a[i] < a[i + 1]:  # if a[i] is less than the next element, then we can extend the subsequence\n                dp_r[i] = dp_r[i + 1] + 1\n            else:  # else, we start a new subsequence\n                dp_r[i] = 1\n        l, r = 0, 0  # indices of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        ans = 0  # length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        for i in range(n):  # O(n)\n            if dp_l[i] + dp_r[i] - 1 > ans:  # if the length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i is greater than the current max\n                ans = dp_l[i] + dp_r[i] - 1  # update max\n                l = i  # update index\n                r = i  # update index\n        print(ans)  # print length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        ans = \"\"  # string of moves\n        for i in range(l):  # O(n)\n            ans += 'L'  # move left\n        for i in range(r + 1, n):  # O(n)\n            ans += 'R'  # move right\n        print(ans)  # print string of moves\n\n\nSolution().solve3()\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n\nSolution().solve3()\n"
    },
    {
      "index": 2,
      "text": "\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n\nSolution().solve3()\n"
    },
    {
      "index": 3,
      "text": "\n\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1): \n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = \"\"\n        for i in range(l):\n            ans += 'L'\n        for i in range(r + 1, n):\n            ans += 'R'\n        print(ans)\n\n\nSolution().solve3()\n"
    }
  ],
  "created": 1650461676,
  "object": "edit"
}
2022-04-20 13:34:54.062612 fix syntax errors 4 ['\n\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n  # dp_l[i] is the length of the longest increasing subsequence ending at i\n        dp_r = [0] * n  # dp_r[i] is the length of the longest decreasing subsequence starting at i\n        dp_l[0] = 1  # base case\n        dp_r[n - 1] = 1  # base case\n        for i in range(1, n):  # O(n)\n            if a[i] > a[i - 1]:  # if a[i] is greater than the previous element, then we can extend the subsequence\n                dp_l[i] = dp_l[i - 1] + 1\n            else:  # else, we start a new subsequence\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):  # O(n)\n            if a[i] < a[i + 1]:  # if a[i] is less than the next element, then we can extend the subsequence\n                dp_r[i] = dp_r[i + 1] + 1\n            else:  # else, we start a new subsequence\n                dp_r[i] = 1\n        l, r = 0, 0  # indices of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        ans = 0  # length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        for i in range(n):  # O(n)\n            if dp_l[i] + dp_r[i] - 1 > ans:  # if the length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i is greater than the current max\n                ans = dp_l[i] + dp_r[i] - 1  # update max\n                l = i  # update index\n                r = i  # update index\n        print(ans)  # print length of the longest increasing subsequence ending at i and the longest decreasing subsequence starting at i\n        ans = ""  # string of moves\n        for i in range(l):  # O(n)\n            ans += \'L\'  # move left\n        for i in range(r + 1, n):  # O(n)\n            ans += \'R\'  # move right\n        print(ans)  # print string of moves\n\n\nSolution().solve3()\n', '\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n\nSolution().solve3()\n', '\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n\nSolution().solve3()\n', '\n\nclass Solution:\n    def __init__(self):\n        self.N = int(input())\n        self.A = [int(x) for x in input().split()]\n\n    def solve(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        print(max([dp_l[i] + dp_r[i] - 1 for i in range(n)]))\n\n    def solve2(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1): \n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n    def solve3(self):\n        n = self.N\n        a = self.A\n        dp_l = [0] * n\n        dp_r = [0] * n\n        dp_l[0] = 1\n        dp_r[n - 1] = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                dp_l[i] = dp_l[i - 1] + 1\n            else:\n                dp_l[i] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] < a[i + 1]:\n                dp_r[i] = dp_r[i + 1] + 1\n            else:\n                dp_r[i] = 1\n        l, r = 0, 0\n        ans = 0\n        for i in range(n):\n            if dp_l[i] + dp_r[i] - 1 > ans:\n                ans = dp_l[i] + dp_r[i] - 1\n                l = i\n                r = i\n        print(ans)\n        ans = ""\n        for i in range(l):\n            ans += \'L\'\n        for i in range(r + 1, n):\n            ans += \'R\'\n        print(ans)\n\n\nSolution().solve3()\n']
2022-04-20 13:34:54.062755 size on output set 3
2022-04-20 13:34:54.062768 num operations 1
2022-04-20 13:34:54.062774 size on input set 1
2022-04-20 13:34:54.062943 using api key jaanu
2022-04-20 13:35:02.920759 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(a):\n    n = len(a)\n    dp = [[1, 1] for _ in range(n)]\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n"
    },
    {
      "index": 1,
      "text": "\na = [1, 2, 3, 4, 5, 6]\n\ndef solve(a):\n    n = len(a)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\n\nimport sys\n\ndef solve(a, n):\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\nprint(solve(a, n))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef solve(a):\n    n = len(a)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n"
    }
  ],
  "created": 1650461694,
  "object": "edit"
}
2022-04-20 13:35:02.921009 fix syntax errors 4 ['\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(a):\n    n = len(a)\n    dp = [[1, 1] for _ in range(n)]\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n', '\na = [1, 2, 3, 4, 5, 6]\n\ndef solve(a):\n    n = len(a)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n', '#!/usr/bin/python3\n\n\nimport sys\n\ndef solve(a, n):\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\nprint(solve(a, n))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef solve(a):\n    n = len(a)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n    return max(dp[n - 1][0], dp[n - 1][1])\n\nprint(solve(a))\n']
2022-04-20 13:35:02.921064 size on output set 4
2022-04-20 13:35:02.921081 num operations 1
2022-04-20 13:35:02.921090 size on input set 1
2022-04-20 13:35:02.921336 using api key sunu
2022-04-20 13:35:09.925966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----SOLUTION-----#\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----SOLUTION-----\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/python\n#-----SOLUTION-----\n\nN = int(input())\nA = list(map(int, input().split()))\n\n#N = 5\n#A = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n"
    },
    {
      "index": 3,
      "text": "\n\n#-----SOLUTION-----#\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n"
    }
  ],
  "created": 1650461704,
  "object": "edit"
}
2022-04-20 13:35:09.926299 fix syntax errors 4 ["\n\n#-----SOLUTION-----#\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n", "\n\n# -----SOLUTION-----\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n", "\n\n#!/usr/bin/python\n#-----SOLUTION-----\n\nN = int(input())\nA = list(map(int, input().split()))\n\n#N = 5\n#A = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n", "\n\n#-----SOLUTION-----#\n\n#N = int(input())\n#A = list(map(int, input().split()))\n\nN = 5\nA = [1, 2, 4, 3, 2]\n\ndef solve(N, A):\n    L = [None] * N\n    R = [None] * N\n    L[0] = 1\n    R[N-1] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            L[i] = L[i-1] + 1\n        else:\n            L[i] = 1\n    for i in range(N-2, -1, -1):\n        if A[i] < A[i+1]:\n            R[i] = R[i+1] + 1\n        else:\n            R[i] = 1\n    \n    \n    #print(L, R)\n    \n    best_len = 0\n    best_index = None\n    for i in range(N):\n        if (L[i] + R[i] - 1) > best_len:\n            best_len = L[i] + R[i] - 1\n            best_index = i\n            \n    #print(best_len, best_index)\n    \n    moves = []\n    for i in range(best_index - L[best_index] + 1, best_index + 1):\n        moves.append('L')\n    for i in range(best_index + 1, best_index + R[best_index]):\n        moves.append('R')\n        \n    print(best_len)\n    print(''.join(moves))\n    \nsolve(N, A)\n"]
2022-04-20 13:35:09.926358 size on output set 3
