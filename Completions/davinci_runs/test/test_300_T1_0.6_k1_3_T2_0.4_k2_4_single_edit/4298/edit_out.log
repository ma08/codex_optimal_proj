2022-04-20 15:07:06.896395 num operations 1
2022-04-20 15:07:06.896415 size on input set 1
2022-04-20 15:07:06.896585 using api key soukgp
2022-04-20 15:07:09.435583 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n    \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650467227,
  "object": "edit"
}
2022-04-20 15:07:09.435845 fix syntax errors 4 ['import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n    \n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 15:07:09.435875 size on output set 2
2022-04-20 15:07:09.435887 num operations 1
2022-04-20 15:07:09.435893 size on input set 1
2022-04-20 15:07:09.436051 using api key derek
2022-04-20 15:07:09.470620 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 15:07:10.972563 using api key jaanu
2022-04-20 15:07:14.331774 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i <= D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i + 1)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650467231,
  "object": "edit"
}
2022-04-20 15:07:14.332008 fix syntax errors 4 ['\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i <= D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i + 1)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 15:07:14.332042 size on output set 4
2022-04-20 15:07:14.332054 num operations 1
2022-04-20 15:07:14.332060 size on input set 1
2022-04-20 15:07:14.332221 using api key derek
2022-04-20 15:07:14.367364 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 15:07:15.869262 using api key soukgp
2022-04-20 15:07:24.512792 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main(n, d))\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n\nprint(main(n, d))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 3,
      "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0]) # number of houses\n    # d = int(input().split()[1]) # distance between houses\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n"
    }
  ],
  "created": 1650467235,
  "object": "edit"
}
2022-04-20 15:07:24.513046 fix syntax errors 4 ['\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main(n, d))\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n\nprint(main(n, d))\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0]) # number of houses\n    # d = int(input().split()[1]) # distance between houses\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n']
2022-04-20 15:07:24.513189 size on output set 4
