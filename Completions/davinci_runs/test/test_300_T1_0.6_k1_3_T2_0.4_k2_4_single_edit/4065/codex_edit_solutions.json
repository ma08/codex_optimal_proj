["\n\ndef getMaxContest(arr):\n    n = len(arr)\n    dp = [1] * n  # dp[i] is the longest increasing subsequence ending at i\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] <= 2 * arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)  # max of all dp[i]\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n", "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    problemset = []\n\n\nif __name__ == \"__main__\":\n    pass\n", "import sys\n\n\n\ndef read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\n\ndef get_max_contest(problemset):\n    if len(sys.argv) != 2:\n        print(\"Usage: python3 file.py input.txt\")\n        sys.exit(1)\n    problemset = read_file(sys.argv[1])\n    print(get_max_contest(problemset))\n\n\nif __name__ == \"__main__\":\n    pass\n", "\n\ndef getMaxContest(a, n):\n    dp = [1] * n \n    for i in range(1, n): \n        for j in range(i): \n            if a[i] <= 2 * a[j]: \n                dp[i] = max(dp[i], dp[j] + 1) \n    return max(dp) \n\nif __name__ == \"__main__\": \n    n = int(input())\n    a = list(map(int, input().split()))\n    print(getMaxContest(a, n))\n", "\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest({\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5}))\n\n\nif __name__ == \"__main__\":\n    pass\n", "\n\n\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n", "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset, contests):\n    pass\n\n\nif __name__ == \"__main__\":\n    pass\n", "#\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n \nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n", "\n\ndef getMaxContest(arr):\n    n = len(arr)\n    dp = [1] * n #dp[i] = the longest increasing subsequence ending at arr[i]\n    for i in range(n): #iterate through all the elements\n        for j in range(i): #compare with all the elements before it\n            if arr[i] <= 2 * arr[j]: #if arr[i] is less than 2 times the value of arr[j]\n                dp[i] = max(dp[i], dp[j] + 1) #update dp[i] with the max of its current value and dp[j] + 1\n    return max(dp) #return the max value in dp array\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"]