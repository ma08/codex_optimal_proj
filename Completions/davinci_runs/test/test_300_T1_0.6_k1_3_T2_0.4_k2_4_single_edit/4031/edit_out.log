2022-04-20 13:44:07.213975 num operations 1
2022-04-20 13:44:07.213996 size on input set 1
2022-04-20 13:44:07.214201 using api key derek
2022-04-20 13:44:07.331885 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 13:44:08.833740 using api key derek
2022-04-20 13:44:08.869739 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 13:44:11.873124 using api key derek
2022-04-20 13:44:11.909506 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 13:44:17.911636 using api key gabby
2022-04-20 13:44:25.672797 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    i = j = 0\n    while i < n and j < m:\n        if a[i] + k < b[j]:\n            i += 1\n        elif a[i] - k > b[j]:\n            j += 1\n        else:\n            print(a[i], b[j])\n            i += 1\n            j += 1\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_substring(s1, s2):\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key = lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650462257,
  "object": "edit"
}
2022-04-20 13:44:25.673077 fix syntax errors 4 ["\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    i = j = 0\n    while i < n and j < m:\n        if a[i] + k < b[j]:\n            i += 1\n        elif a[i] - k > b[j]:\n            j += 1\n        else:\n            print(a[i], b[j])\n            i += 1\n            j += 1\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key = lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i + len(s1)] == s1:\n            return True\n\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i - 1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 13:44:25.673125 size on output set 4
2022-04-20 13:44:25.673137 num operations 1
2022-04-20 13:44:25.673143 size on input set 1
2022-04-20 13:44:25.673304 using api key sunu
2022-04-20 13:44:38.785086 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start + len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result is not False:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a') == True\n    True \n    >>> is_substring('ab', 'a') == False\n    True \n    >>> is_substring('a', 'ab') == True\n    True \n    >>> is_substring('a', 'abab') == True\n    True \n    >>> is_substring('ab', 'abab') == True\n    True \n    >>> is_substring('abab', 'abab') == True\n    True \n    >>> is_substring('abab', 'ab') == False\n    True \n    >>> is_substring('ab', 'ababab') == True\n    True \n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a') == True\n    True \n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba']) == ['a', 'ba', 'aba', 'aba', 'abacaba']\n    True \n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab']) == False\n    True \n    >>> reorder(['qwerty', 'qwerty', 'qwerty']) == ['qwerty', 'qwerty', 'qwerty']\n    True \n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n        >>> is_substring('a', 'a')\n        True\n        >>> is_substring('ab', 'a')\n        False\n        >>> is_substring('a', 'ab')\n        True\n        >>> is_substring('a', 'abab')\n        True\n        >>> is_substring('ab', 'abab')\n        True\n        >>> is_substring('abab', 'abab')\n        True\n        >>> is_substring('abab', 'ab')\n        False\n        >>> is_substring('ab', 'ababab')\n        True\n        >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n        True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n        >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n        ['a', 'ba', 'aba', 'aba', 'abacaba']\n        >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n        False\n        >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n        ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    #import doctest\n    #doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")\n"
    }
  ],
  "created": 1650462265,
  "object": "edit"
}
2022-04-20 13:44:38.785491 fix syntax errors 4 ['\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start + len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\')\n    True\n    >>> is_substring(\'ab\', \'a\')\n    False\n    >>> is_substring(\'a\', \'ab\')\n    True\n    >>> is_substring(\'a\', \'abab\')\n    True\n    >>> is_substring(\'ab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'abab\')\n    True\n    >>> is_substring(\'abab\', \'ab\')\n    False\n    >>> is_substring(\'ab\', \'ababab\')\n    True\n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n    True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n    [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n    False\n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n    [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result is not False:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\ndef is_substring(a, b):\n    """\n    >>> is_substring(\'a\', \'a\') == True\n    True \n    >>> is_substring(\'ab\', \'a\') == False\n    True \n    >>> is_substring(\'a\', \'ab\') == True\n    True \n    >>> is_substring(\'a\', \'abab\') == True\n    True \n    >>> is_substring(\'ab\', \'abab\') == True\n    True \n    >>> is_substring(\'abab\', \'abab\') == True\n    True \n    >>> is_substring(\'abab\', \'ab\') == False\n    True \n    >>> is_substring(\'ab\', \'ababab\') == True\n    True \n    >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\') == True\n    True \n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n    >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\']) == [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n    True \n    >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\']) == False\n    True \n    >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\']) == [\'qwerty\', \'qwerty\', \'qwerty\']\n    True \n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n', '\n\ndef is_substring(a, b):\n    """\n        >>> is_substring(\'a\', \'a\')\n        True\n        >>> is_substring(\'ab\', \'a\')\n        False\n        >>> is_substring(\'a\', \'ab\')\n        True\n        >>> is_substring(\'a\', \'abab\')\n        True\n        >>> is_substring(\'ab\', \'abab\')\n        True\n        >>> is_substring(\'abab\', \'abab\')\n        True\n        >>> is_substring(\'abab\', \'ab\')\n        False\n        >>> is_substring(\'ab\', \'ababab\')\n        True\n        >>> is_substring(\'abcabcabcabcabcabcabcabcabcabcabcab\', \'a\')\n        True\n    """\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    """\n        >>> reorder([\'a\', \'aba\', \'abacaba\', \'ba\', \'aba\'])\n        [\'a\', \'ba\', \'aba\', \'aba\', \'abacaba\']\n        >>> reorder([\'a\', \'abacaba\', \'ba\', \'aba\', \'abab\'])\n        False\n        >>> reorder([\'qwerty\', \'qwerty\', \'qwerty\'])\n        [\'qwerty\', \'qwerty\', \'qwerty\']\n    """\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == "__main__":\n    #import doctest\n    #doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print("YES")\n        for s in result:\n            print(s)\n    else:\n        print("NO")\n']
2022-04-20 13:44:38.785584 size on output set 4
2022-04-20 13:44:38.785597 num operations 1
2022-04-20 13:44:38.785602 size on input set 1
2022-04-20 13:44:38.785759 using api key gabby
2022-04-20 13:44:42.784643 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    },
    {
      "index": 3,
      "text": "\ndef solution(n, strings):\n    if n == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n"
    }
  ],
  "created": 1650462278,
  "object": "edit"
}
2022-04-20 13:44:42.784976 fix syntax errors 4 ['\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n', '\ndef solution(n, strings):\n    if n == 1:\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))\n']
2022-04-20 13:44:42.785013 size on output set 2
