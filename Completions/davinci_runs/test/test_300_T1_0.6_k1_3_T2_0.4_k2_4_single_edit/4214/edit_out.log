2022-04-20 14:42:08.238675 num operations 1
2022-04-20 14:42:08.238697 size on input set 1
2022-04-20 14:42:08.238868 using api key sunu
2022-04-20 14:42:10.441657 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport itertools\nimport sys\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    },
    {
      "index": 2,
      "text": "\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    },
    {
      "index": 3,
      "text": "\nimport itertools\nimport sys\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    }
  ],
  "created": 1650465728,
  "object": "edit"
}
2022-04-20 14:42:10.441952 fix syntax errors 4 ['\nimport itertools\nimport sys\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n', '\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n', '\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n', '\nimport itertools\nimport sys\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n']
2022-04-20 14:42:10.442004 size on output set 2
2022-04-20 14:42:10.442016 num operations 1
2022-04-20 14:42:10.442022 size on input set 1
2022-04-20 14:42:10.442178 using api key gabby
2022-04-20 14:42:13.383683 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport itertools\n\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650465730,
  "object": "edit"
}
2022-04-20 14:42:13.383942 fix syntax errors 4 ['#!/usr/bin/env python3\n\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n', '\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport itertools\n\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n', '\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 14:42:13.384250 size on output set 3
2022-04-20 14:42:13.384289 num operations 1
2022-04-20 14:42:13.384299 size on input set 1
2022-04-20 14:42:13.384512 using api key sourya
2022-04-20 14:42:18.325058 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    xy_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(xy_list[path[j]][0], xy_list[path[j]][1], xy_list[path[j + 1]][0], xy_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [list(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths (permutations)\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0.0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n\n    # All possible paths\n\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n\n            for i in range(n):\n                if i not in path:\n\n                    inner(path + [i])\n\n    inner([])\n\n\n    # All lengths of paths\n\n    lengths = [0] * n_factorial\n\n    for i, path in enumerate(paths):\n\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for _ in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650465733,
  "object": "edit"
}
2022-04-20 14:42:18.325338 fix syntax errors 4 ["\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    xy_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(xy_list[path[j]][0], xy_list[path[j]][1], xy_list[path[j + 1]][0], xy_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [list(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths (permutations)\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0.0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n\n    # All possible paths\n\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n\n            for i in range(n):\n                if i not in path:\n\n                    inner(path + [i])\n\n    inner([])\n\n\n    # All lengths of paths\n\n    lengths = [0] * n_factorial\n\n    for i, path in enumerate(paths):\n\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = [tuple(map(int, input().split())) for _ in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(x_y_list[path[j]][0], x_y_list[path[j]][1], x_y_list[path[j + 1]][0], x_y_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:42:18.325398 size on output set 4
