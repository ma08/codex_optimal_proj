2022-04-20 13:54:27.290500 num operations 1
2022-04-20 13:54:27.290522 size on input set 1
2022-04-20 13:54:27.290694 using api key sunu
2022-04-20 13:54:31.591250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\nprint(N)\nprint(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nN = int(sys.stdin.readline().rstrip())  # \u6570\u5b57\u306e\u6570\nd = list(map(int, sys.stdin.readline().rstrip().split()))  # \u6570\u5b57\u306e\u30ea\u30b9\u30c8\n\n# print(N)\n# print(d)\n\ncount = 0\n\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:])\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\nprint(N)\n# print(d)\n\n# count = 0\n# for i in range(1, N):\n#     if sum(d[:i]) == sum(d[i:]):\n#         count += 1\n\n# print(count)\n"
    }
  ],
  "created": 1650462867,
  "object": "edit"
}
2022-04-20 13:54:31.591563 fix syntax errors 4 ['\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\nprint(N)\nprint(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n', 'import sys\n\nN = int(sys.stdin.readline().rstrip())  # 数字の数\nd = list(map(int, sys.stdin.readline().rstrip().split()))  # 数字のリスト\n\n# print(N)\n# print(d)\n\ncount = 0\n\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n', 'import sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:])\n        count += 1\n\nprint(count)\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\nprint(N)\n# print(d)\n\n# count = 0\n# for i in range(1, N):\n#     if sum(d[:i]) == sum(d[i:]):\n#         count += 1\n\n# print(count)\n']
2022-04-20 13:54:31.591607 size on output set 4
2022-04-20 13:54:31.591620 num operations 1
2022-04-20 13:54:31.591625 size on input set 1
2022-04-20 13:54:31.591779 using api key sourya
2022-04-20 13:54:37.089764 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return K_max - K_min + 1\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650462871,
  "object": "edit"
}
2022-04-20 13:54:37.090007 fix syntax errors 4 ["\n#\n\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return K_max - K_min + 1\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 13:54:37.090048 size on output set 4
2022-04-20 13:54:37.090067 num operations 1
2022-04-20 13:54:37.090073 size on input set 1
2022-04-20 13:54:37.090224 using api key soukgp
2022-04-20 13:54:43.746444 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if (N//2-difficulty) in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if N//2-difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    print('hello world')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650462877,
  "object": "edit"
}
2022-04-20 13:54:43.746783 fix syntax errors 4 ["\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if (N//2-difficulty) in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if N//2-difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print('hello world')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 13:54:43.746831 size on output set 4
