2022-04-20 15:00:35.467756 num operations 1
2022-04-20 15:00:35.467776 size on input set 1
2022-04-20 15:00:35.467989 using api key jaanu
2022-04-20 15:00:40.026920 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m+1\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650466835,
  "object": "edit"
}
2022-04-20 15:00:40.027201 fix syntax errors 4 ['\n\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m+1\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello World!")\n\nif __name__ == "__main__":\n    main()\n', '\n#\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 15:00:40.027237 size on output set 4
2022-04-20 15:00:40.027249 num operations 1
2022-04-20 15:00:40.027254 size on input set 1
2022-04-20 15:00:40.027443 using api key sourya
2022-04-20 15:00:45.910559 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10 ** num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10 ** (num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10 ** (num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10 ** (num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10 ** num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10 ** (num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10 ** (num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10 ** (num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 0:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits <= k:\n    num_digits -= 1\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n"
    }
  ],
  "created": 1650466840,
  "object": "edit"
}
2022-04-20 15:00:45.910819 fix syntax errors 4 ['\n\ndef get_digit(k):\n    """\n    Returns the digit at position k in the sequence\n    """\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10 ** num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10 ** (num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10 ** (num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10 ** (num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n', '\ndef get_digit(k):\n    """\n    Returns the digit at position k in the sequence\n    """\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n', '\n\ndef get_digit(k):\n    """\n    Returns the digit at position k in the sequence\n    """\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10 ** num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10 ** (num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10 ** (num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10 ** (num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n', '\n\ndef get_digit(k):\n    """\n    Returns the digit at position k in the sequence\n    """\n    if k == 0:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits <= k:\n    num_digits -= 1\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n']
2022-04-20 15:00:45.910993 size on output set 3
2022-04-20 15:00:45.911008 num operations 1
2022-04-20 15:00:45.911014 size on input set 1
2022-04-20 15:00:45.911173 using api key sourya
2022-04-20 15:01:00.009446 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n * (n + 1) < query * 2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i * (i + 1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1:])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(query, solution):\n    if query == 1:\n        solution.append(1)\n    elif query == 2:\n        solution.append(2)\n    else:\n        # 1 + 2 + 3 + 4 + ... + n\n        n = 1\n        while n*(n+1) < query*2:\n            n += 1\n        n -= 1\n        # I need to find the digit at the position query-n in the block from 1 to n\n        # So I find the position of query-n in the sequence\n        pos = 0\n        for i in range(1, n+1):\n            pos += i*(i+1)\n        pos = query - pos\n\n        # I find the number at this position\n        num = 0\n        while pos != 0:\n            num += 1\n            if pos > num:\n                pos -= num\n            else:\n                break\n        # And finally I find the digit\n        solution.append(str(num)[pos-1])\n\n    return solution\n\ndef main():\n    q = int(input())\n    queries = [int(input()) for _ in range(q)]\n    solution = []\n    for query in queries:\n        solve(query, solution)\n    print('\\n'.join(solution))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append('1')\n\telif query == 2:\n\t\tsolution.append('2')\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n"
    }
  ],
  "created": 1650466845,
  "object": "edit"
}
2022-04-20 15:01:00.009699 fix syntax errors 4 ["\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n * (n + 1) < query * 2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i * (i + 1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n", "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1:])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n", "\n\ndef solve(query, solution):\n    if query == 1:\n        solution.append(1)\n    elif query == 2:\n        solution.append(2)\n    else:\n        # 1 + 2 + 3 + 4 + ... + n\n        n = 1\n        while n*(n+1) < query*2:\n            n += 1\n        n -= 1\n        # I need to find the digit at the position query-n in the block from 1 to n\n        # So I find the position of query-n in the sequence\n        pos = 0\n        for i in range(1, n+1):\n            pos += i*(i+1)\n        pos = query - pos\n\n        # I find the number at this position\n        num = 0\n        while pos != 0:\n            num += 1\n            if pos > num:\n                pos -= num\n            else:\n                break\n        # And finally I find the digit\n        solution.append(str(num)[pos-1])\n\n    return solution\n\ndef main():\n    q = int(input())\n    queries = [int(input()) for _ in range(q)]\n    solution = []\n    for query in queries:\n        solve(query, solution)\n    print('\\n'.join(solution))\n\nmain()\n", "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append('1')\n\telif query == 2:\n\t\tsolution.append('2')\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n"]
2022-04-20 15:01:00.009765 size on output set 4
