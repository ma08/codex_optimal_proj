2022-04-20 13:53:08.884677 num operations 1
2022-04-20 13:53:08.884698 size on input set 1
2022-04-20 13:53:08.884889 using api key kouti
2022-04-20 13:53:29.438513 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution 1\n\n# # Number of coins\n# n = int(input())\n# # Value of coins\n# a = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# Solution\n#\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n#\na.sort()\n#\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n#\n# Pocket number assigned to each coin value\nlast_pocket = {}\n#\n# Number of pockets used\nnum_pockets = 0\n#\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n#\nprint(num_pockets)\n"
    },
    {
      "index": 2,
      "text": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n# Solution\n\n# Number of coins\nint n;\ncin>>n;\n# Value of coins\nvector<int> a(n);\nfor(int i=0;i<n;i++){\n    cin>>a[i];\n}\nsort(a.begin(),a.end());\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 3,
      "text": "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    }
  ],
  "created": 1650462789,
  "object": "edit"
}
2022-04-20 13:53:29.438799 fix syntax errors 4 ['\n\n# Solution 1\n\n# # Number of coins\n# n = int(input())\n# # Value of coins\n# a = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '\n#\n# Solution\n#\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n#\na.sort()\n#\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n#\n# Pocket number assigned to each coin value\nlast_pocket = {}\n#\n# Number of pockets used\nnum_pockets = 0\n#\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n#\nprint(num_pockets)\n', '\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n# Solution\n\n# Number of coins\nint n;\ncin>>n;\n# Value of coins\nvector<int> a(n);\nfor(int i=0;i<n;i++){\n    cin>>a[i];\n}\nsort(a.begin(),a.end());\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n']
2022-04-20 13:53:29.438853 size on output set 4
2022-04-20 13:53:29.438863 num operations 1
2022-04-20 13:53:29.438869 size on input set 1
2022-04-20 13:53:29.439026 using api key jaanu
2022-04-20 13:53:34.330076 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    }
  ],
  "created": 1650462809,
  "object": "edit"
}
2022-04-20 13:53:34.330346 fix syntax errors 4 ['\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n']
2022-04-20 13:53:34.330480 size on output set 2
2022-04-20 13:53:34.330493 num operations 1
2022-04-20 13:53:34.330499 size on input set 1
2022-04-20 13:53:34.330663 using api key kouti
2022-04-20 13:53:35.846126 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    }
  ],
  "created": 1650462814,
  "object": "edit"
}
2022-04-20 13:53:35.846348 fix syntax errors 4 ['\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '#!/usr/bin/python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n']
2022-04-20 13:53:35.846372 size on output set 3
