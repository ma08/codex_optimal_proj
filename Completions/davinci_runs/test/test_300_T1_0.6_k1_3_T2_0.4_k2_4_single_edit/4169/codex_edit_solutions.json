["# https://atcoder.jp/contests/abc086/tasks/arc089_a\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "\nINF = 1000000007\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\nstoredict = {}\nfor i in range(n):\n    a, b = map(int, input().split())\n    storedict[a] = b\n    stores.append([a, b])\n\ndef solve(n, m, stores):\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a in storedict:\n            storedict[a] += b\n        else:\n            storedict[a] = b\n    max_val = 0\n    for key, val in storedict.items():\n        max_val = max(max_val, val)\n    return max_val\n#-----Solve-----\n\nprint(solve(n, m, stores))\n#-----Display-----\n", "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n", "# https://atcoder.jp/contests/abc097/tasks/arc097_b\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "inf = float('inf')\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = [None] * n\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores[i] = [a, b]\n\ndef solve():\n    dp = [[[inf] * (m + 1) for _ in range(n)] for _ in range(2)]\n    dp[0][0][0] = 0\n    dp[0][0][1] = 0\n#-----Solve-----\n    for i in range(n):\n        for j in range(m + 1):\n            dp[0][i + 1][j] = min(dp[0][i + 1][j], dp[0][i][j])\n            dp[1][i + 1][j] = min(dp[1][i + 1][j], dp[0][i][j] + stores[i][0])\n            if j >= 1:\n                dp[1][i + 1][j] = min(dp[1][i + 1][j], dp[1][i][j - 1] + stores[i][1])\n\n    return dp[1][n][m]\n\nprint(solve())\n#-----Display-----\n", "\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())  # a: cost, b: distance\n    stores.append([a, b])\n\nstores.sort(key=lambda x: x[0] / x[1])\n#-----Solve-----\n\n#-----Display-----\n", "\nINF = 10**10\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\ndp = [INF] * (n+1)\ndp[0] = 0\nfor i in range(n):\n    dp[i+1] = min(dp[i+1], dp[i] + stores[i][0])\n    dp[i+2] = min(dp[i+2], dp[i] + stores[i][1])\n#-----Solve-----\n\nprint(dp[-1])\n#-----Display-----\n", "\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n", "\n\nfrom collections import deque\nimport sys\n\nN, M, C = map(int, input().split())\nB = list(map(int, input().split()))\nA = [list(map(int, input().split())) for _ in range(N)]\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n", "\n\n\n# https://atcoder.jp/contests/abc173/tasks/abc173_c\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"]