2022-04-20 13:37:45.368248 num operations 1
2022-04-20 13:37:45.368273 size on input set 1
2022-04-20 13:37:45.368522 using api key kouti
2022-04-20 13:37:58.963265 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narray = list(map(int, input().split()))\n\ndef min_instability(array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\n\nprint(min_instability(array))\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\n\n\ndef max_overlap(n, start_times, end_times):\n    # create a dictionary of start times\n    start_times_dict = defaultdict(int)\n    for time in start_times:\n        start_times_dict[time] += 1\n    # create a dictionary of end times\n    end_times_dict = defaultdict(int)\n    for time in end_times:\n        end_times_dict[time] += 1\n    # create a dictionary of times\n    times_dict = defaultdict(int)\n    for time in start_times + end_times:\n        times_dict[time] += 1\n    # create a list of times\n    times = list(times_dict.keys())\n    times.sort()\n    # create a list of overlap counts\n    overlap_counts = [0]\n    for time in times:\n        overlap_counts.append(overlap_counts[-1] + start_times_dict[time] - end_times_dict[time])\n    # return the max overlap count\n    return max(overlap_counts)\n\nn = int(input()) # number of meetings\nstart_times = []\nend_times = []\nfor i in range(n):\n    start_time, end_time = map(int, input().split()) # start and end times of the ith meeting\n    start_times.append(start_time)\n    end_times.append(end_time)\n\nprint(max_overlap(n, start_times, end_times))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\narray = list(map(int, input().split()))\ndef min_instability(n, array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\nprint(min_instability(n, array))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\narray = list(map(int, input().split()))\n\ndef min_instability(n, array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\n\nprint(min_instability(n, array))\n"
    }
  ],
  "created": 1650461865,
  "object": "edit"
}
2022-04-20 13:37:58.963570 fix syntax errors 4 ['\n\nn = int(input())\narray = list(map(int, input().split()))\n\ndef min_instability(array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\n\nprint(min_instability(array))\n', 'from collections import defaultdict\n\n\ndef max_overlap(n, start_times, end_times):\n    # create a dictionary of start times\n    start_times_dict = defaultdict(int)\n    for time in start_times:\n        start_times_dict[time] += 1\n    # create a dictionary of end times\n    end_times_dict = defaultdict(int)\n    for time in end_times:\n        end_times_dict[time] += 1\n    # create a dictionary of times\n    times_dict = defaultdict(int)\n    for time in start_times + end_times:\n        times_dict[time] += 1\n    # create a list of times\n    times = list(times_dict.keys())\n    times.sort()\n    # create a list of overlap counts\n    overlap_counts = [0]\n    for time in times:\n        overlap_counts.append(overlap_counts[-1] + start_times_dict[time] - end_times_dict[time])\n    # return the max overlap count\n    return max(overlap_counts)\n\nn = int(input()) # number of meetings\nstart_times = []\nend_times = []\nfor i in range(n):\n    start_time, end_time = map(int, input().split()) # start and end times of the ith meeting\n    start_times.append(start_time)\n    end_times.append(end_time)\n\nprint(max_overlap(n, start_times, end_times))\n', '\nn = int(input())\narray = list(map(int, input().split()))\ndef min_instability(n, array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\nprint(min_instability(n, array))\n', '\nn = int(input())\narray = list(map(int, input().split()))\n\ndef min_instability(n, array):\n    array.sort()\n    min_instability = array[-1] - array[0]\n\n    for i in range(1, n-1):\n        if array[i] - array[i-1] < min_instability:\n            min_instability = array[i] - array[i-1]\n        if array[i+1] - array[i] < min_instability:\n            min_instability = array[i+1] - array[i]\n    return min_instability\n\nprint(min_instability(n, array))\n']
2022-04-20 13:37:58.963619 size on output set 4
2022-04-20 13:37:58.963631 num operations 1
2022-04-20 13:37:58.963637 size on input set 1
2022-04-20 13:37:58.963800 using api key gabby
2022-04-20 13:38:00.491853 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n"
    },
    {
      "index": 1,
      "text": "\n\n\n#\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n"
    }
  ],
  "created": 1650461879,
  "object": "edit"
}
2022-04-20 13:38:00.492080 fix syntax errors 4 ['\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n', '\n\n\n#\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n', '\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n', '\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif n == 2:\n    print(0)\nelse:\n    print(min(a[n - 2] - a[0], a[n - 1] - a[1]))\n']
2022-04-20 13:38:00.492107 size on output set 2
2022-04-20 13:38:00.492119 num operations 1
2022-04-20 13:38:00.492125 size on input set 1
2022-04-20 13:38:00.492279 using api key sourya
2022-04-20 13:38:05.989000 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import deque\nfrom itertools import combinations\n\nn = int(input())\na = deque(map(int, input().split()))\n\na = sorted(a)\na = deque(a)\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n"
    }
  ],
  "created": 1650461880,
  "object": "edit"
}
2022-04-20 13:38:05.989411 fix syntax errors 4 ['\nfrom collections import deque\nfrom itertools import combinations\n\nn = int(input())\na = deque(map(int, input().split()))\n\na = sorted(a)\na = deque(a)\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n', '\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n', '\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(min(a[-1] - a[1], a[-2] - a[0]))\n']
2022-04-20 13:38:05.989489 size on output set 4
