["from math import gcd\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2, sep=' ')\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n", "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b) \n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # for i in range(n):\n    #     gcd_dp[i][i] = a[i]\n    #     for j in range(i + 1, n):\n    #         gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    # for i in range(n - 1):\n    #     for j in range(i + 1, n):\n    #         temp = lcm(gcd_dp[i][j], a[i])\n    #         if temp < mini:\n    #             mini = temp\n    #             ans = [i + 1, j + 1]\n    # return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n", "\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            if j == i:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = dp[i][j - 1] ^ a[j]\n\n    return dp\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n\nif __name__ == '__main__':\n    main()\n", "import sys\ninput = sys.stdin.readline\n\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]  # GCD of [i, j]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])  # GCD of [i, j]\n\n    mini = 10 ** 9 + 1  # Initialize minimum value\n    ans = [0, 0]  # Initialize answer\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])  # LCM of [i, j]\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]  # Update answer\n    return ans\n\ndef main():\n    n = int(input())  # Number of elements\n    a = [int(x) for x in input().split()]  # Elements\n    ans = solve(a)\n    print(ans[0], ans[1])  # Print answer\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)-1):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n", "\nfrom gcd import *\ndef lcm(x,y):\n    return x*y/gcd(x,y)\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\n", "\nimport sys\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(sys.stdin.readline())\n    A = map(int,sys.stdin.readline().split())\n    print minimum_lcm(A)\n", "\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]  # gcd_dp[i][j] = gcd(a[i], a[i+1], ..., a[j])\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1  # \u7b54\u3048\u306e\u6700\u5c0f\u5024\n    ans = [0, 0]  # \u7b54\u3048\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"]