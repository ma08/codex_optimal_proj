2022-04-20 14:59:35.128601 num operations 1
2022-04-20 14:59:35.128623 size on input set 1
2022-04-20 14:59:35.128854 using api key kouti
2022-04-20 14:59:39.370357 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = sorted([name for name in names if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]])\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = sorted(filter(lambda x:x[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"], names))\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x: x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650466775,
  "object": "edit"
}
2022-04-20 14:59:39.370643 fix syntax errors 4 ['#!/usr/bin/env python3\n\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = sorted([name for name in names if name[0] in ["M", "A", "R", "C", "H"]])\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '# -*- coding: utf-8 -*-\n\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = sorted(filter(lambda x:x[0] in ["M", "A", "R", "C", "H"], names))\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x: x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 14:59:39.370686 size on output set 4
2022-04-20 14:59:39.370697 num operations 1
2022-04-20 14:59:39.370703 size on input set 1
2022-04-20 14:59:39.370858 using api key gabby
2022-04-20 14:59:46.198721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, A, B = map(int, input().split())\n    ans = 0\n    for i in range(N+1):\n        s = sum([int(j) for j in str(i)])\n        if A <= s <= B:\n            ans += i\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = set(['M', 'A', 'R', 'C', 'H'])\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars and len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                    count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650466779,
  "object": "edit"
}
2022-04-20 14:59:46.198959 fix syntax errors 4 ["\n\ndef main():\n    N, A, B = map(int, input().split())\n    ans = 0\n    for i in range(N+1):\n        s = sum([int(j) for j in str(i)])\n        if A <= s <= B:\n            ans += i\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = set(['M', 'A', 'R', 'C', 'H'])\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars and len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                    count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:59:46.198999 size on output set 4
2022-04-20 14:59:46.199012 num operations 1
2022-04-20 14:59:46.199018 size on input set 1
2022-04-20 14:59:46.199175 using api key kouti
2022-04-20 14:59:49.289344 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for _ in range(n):\n        line = sys.stdin.readline()\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650466786,
  "object": "edit"
}
2022-04-20 14:59:49.289723 fix syntax errors 4 ["\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for _ in range(n):\n        line = sys.stdin.readline()\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:59:49.289788 size on output set 3
