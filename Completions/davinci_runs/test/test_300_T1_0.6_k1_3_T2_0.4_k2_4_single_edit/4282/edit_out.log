2022-04-20 15:01:25.699144 num operations 1
2022-04-20 15:01:25.699178 size on input set 1
2022-04-20 15:01:25.699410 using api key jaanu
2022-04-20 15:01:37.342242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start] \n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i + 1)\n        kids[input[i][1]].add(i + 1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 3,
      "text": "\nfrom collections import defaultdict\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n\n    def find_cycle(graph, start):\n        visited, cycle = set(), [start]\n        while True:\n            if cycle[-1] in visited:\n                return cycle[cycle.index(cycle[-1]):]\n            else:\n                visited.add(cycle[-1])\n                cycle.append(graph[cycle[-1]])\n\n    def find_all_cycles(graph):\n        cycles = []\n        visited = set()\n        for start in graph:\n            if start not in visited:\n                cycle = find_cycle(graph, start)\n                cycles.append(cycle)\n                visited |= set(cycle)\n        return cycles\n\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    }
  ],
  "created": 1650466885,
  "object": "edit"
}
2022-04-20 15:01:37.342558 fix syntax errors 4 ['\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n', "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start] \n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i + 1)\n        kids[input[i][1]].add(i + 1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n\n    def find_cycle(graph, start):\n        visited, cycle = set(), [start]\n        while True:\n            if cycle[-1] in visited:\n                return cycle[cycle.index(cycle[-1]):]\n            else:\n                visited.add(cycle[-1])\n                cycle.append(graph[cycle[-1]])\n\n    def find_all_cycles(graph):\n        cycles = []\n        visited = set()\n        for start in graph:\n            if start not in visited:\n                cycle = find_cycle(graph, start)\n                cycles.append(cycle)\n                visited |= set(cycle)\n        return cycles\n\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"]
2022-04-20 15:01:37.342707 size on output set 4
2022-04-20 15:01:37.342722 num operations 1
2022-04-20 15:01:37.342728 size on input set 1
2022-04-20 15:01:37.342897 using api key jaanu
2022-04-20 15:01:49.195495 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[edges[i][0] - 1].append(i + 1)\n        adj[edges[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    edges = []\n    for _ in range(n):\n        edges.append(tuple(map(int, input().split())))\n    adj = adj_list(n, edges)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n+1)]\n    for edge in edges:\n        adj[edge[0]].append(edge[1])\n        adj[edge[1]].append(edge[0])\n    return adj[1:]\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1] # start from node 1\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]: # if no edges coming out of v\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650466897,
  "object": "edit"
}
2022-04-20 15:01:49.195740 fix syntax errors 4 ["\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[edges[i][0] - 1].append(i + 1)\n        adj[edges[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    edges = []\n    for _ in range(n):\n        edges.append(tuple(map(int, input().split())))\n    adj = adj_list(n, edges)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n+1)]\n    for edge in edges:\n        adj[edge[0]].append(edge[1])\n        adj[edge[1]].append(edge[0])\n    return adj[1:]\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1] # start from node 1\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]: # if no edges coming out of v\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 15:01:49.195793 size on output set 4
2022-04-20 15:01:49.195805 num operations 1
2022-04-20 15:01:49.195812 size on input set 1
2022-04-20 15:01:49.195974 using api key gabby
2022-04-20 15:01:55.581438 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=np.int32)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=np.int32)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print('Hello World')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] + 1\n    p[2] = a[0, 1] + 1\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] + 1 if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1] + 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650466909,
  "object": "edit"
}
2022-04-20 15:01:55.581776 fix syntax errors 4 ["\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=np.int32)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=np.int32)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print('Hello World')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] + 1\n    p[2] = a[0, 1] + 1\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] + 1 if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1] + 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 15:01:55.581816 size on output set 4
