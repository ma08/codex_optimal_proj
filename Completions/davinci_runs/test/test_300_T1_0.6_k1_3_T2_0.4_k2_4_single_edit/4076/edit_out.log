2022-04-20 13:59:17.176800 num operations 1
2022-04-20 13:59:17.176822 size on input set 1
2022-04-20 13:59:17.177032 using api key sunu
2022-04-20 13:59:23.355879 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = hour * 30.0\n    minute = minute * 6.0\n\n    x1 = 3.0 * math.cos(hour)\n    y1 = 3.0 * math.sin(hour)\n    x2 = 4.0 * math.cos(minute)\n    y2 = 4.0 * math.sin(minute)\n\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 2,
      "text": "import math\n\nimport sys\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30\n    minute *= 6\n\n    x1 = 3 * math.cos(math.radians(hour))\n    y1 = 3 * math.sin(math.radians(hour))\n    x2 = 4 * math.cos(math.radians(minute))\n    y2 = 4 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n"
    }
  ],
  "created": 1650463157,
  "object": "edit"
}
2022-04-20 13:59:23.356156 fix syntax errors 4 ['import sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour = hour * 30.0\n    minute = minute * 6.0\n\n    x1 = 3.0 * math.cos(hour)\n    y1 = 3.0 * math.sin(hour)\n    x2 = 4.0 * math.cos(minute)\n    y2 = 4.0 * math.sin(minute)\n\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', 'import math\n\nimport sys\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30\n    minute *= 6\n\n    x1 = 3 * math.cos(math.radians(hour))\n    y1 = 3 * math.sin(math.radians(hour))\n    x2 = 4 * math.cos(math.radians(minute))\n    y2 = 4 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n', '#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef distanceBetweenHands(hour, minute):\n    hour *= 30.0\n    minute *= 6.0\n\n    x1 = 3.0 * math.cos(math.radians(hour))\n    y1 = 3.0 * math.sin(math.radians(hour))\n    x2 = 4.0 * math.cos(math.radians(minute))\n    y2 = 4.0 * math.sin(math.radians(minute))\n\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n\nparams = sys.stdin.readline().split()\na = int(params[0])\nb = int(params[1])\nh = int(params[2])\nm = int(params[3])\n\nprint(distanceBetweenHands(h, m))\n']
2022-04-20 13:59:23.356197 size on output set 4
2022-04-20 13:59:23.356208 num operations 1
2022-04-20 13:59:23.356213 size on input set 1
2022-04-20 13:59:23.356392 using api key sourya
2022-04-20 13:59:26.349928 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\n# input\n[a, b, h, m] = map(int, input().split())\n\n# degree\n# clock hands coordinate\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# coordinate\nx = x_h - x_m\ny = y_h - y_m\n\n# output\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 1,
      "text": "import math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 2,
      "text": "import math\n\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\n# \u5165\u529b\n[a, b, h, m] = map(int, input().split())\n\n# \u5ea6\u6570\u6cd5\n# \u6642\u8a08\u306e\u91dd\u306e\u5ea7\u6a19\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# \u5ea7\u6a19\nx = x_h - x_m\ny = y_h - y_m\n\n# \u51fa\u529b\nprint(math.sqrt(x ** 2 + y ** 2))\n"
    }
  ],
  "created": 1650463163,
  "object": "edit"
}
2022-04-20 13:59:26.350195 fix syntax errors 4 ['import math\n\n\n# input\n[a, b, h, m] = map(int, input().split())\n\n# degree\n# clock hands coordinate\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# coordinate\nx = x_h - x_m\ny = y_h - y_m\n\n# output\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', 'import math\n\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n', '\nimport math\n\n# 入力\n[a, b, h, m] = map(int, input().split())\n\n# 度数法\n# 時計の針の座標\nx_h = a * math.sin(math.radians(30 * h + 0.5 * m))\ny_h = a * math.cos(math.radians(30 * h + 0.5 * m))\nx_m = b * math.sin(math.radians(6 * m))\ny_m = b * math.cos(math.radians(6 * m))\n\n# 座標\nx = x_h - x_m\ny = y_h - y_m\n\n# 出力\nprint(math.sqrt(x ** 2 + y ** 2))\n']
2022-04-20 13:59:26.350402 size on output set 4
2022-04-20 13:59:26.350420 num operations 1
2022-04-20 13:59:26.350427 size on input set 1
2022-04-20 13:59:26.350593 using api key jaanu
2022-04-20 13:59:27.760223 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n"
    }
  ],
  "created": 1650463166,
  "object": "edit"
}
2022-04-20 13:59:27.760474 fix syntax errors 4 ['\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n', '\nimport math\n\nA, B, H, M = map(int, input().split())\n\nrad_h = 2 * math.pi * (H / 12 + M / 60 / 12)\nrad_m = 2 * math.pi * (M / 60)\n\nrad = abs(rad_h - rad_m)\n\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad)))\n']
2022-04-20 13:59:27.760504 size on output set 1
