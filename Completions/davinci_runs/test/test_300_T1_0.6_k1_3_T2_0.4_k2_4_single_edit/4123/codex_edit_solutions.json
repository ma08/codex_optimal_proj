["\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i + 2] for i in range(n - 1))\n\nprint(max(c, key=c.get))\n", "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(n-1):\n    gram = s[i:i+2]\n    if s.count(gram) > max_count:\n        max_count = s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\n\nconsole.log(file.toString().split('\\n').length-1);\n", "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'file.txt');\n\nfs.readFile(filePath, {encoding: 'utf-8'}, (err, data) => {\n    console.log(data);\n});\n\nconsole.log('Reading file...');\n", "\ninput_n = int(input())\ninput_s = input()\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i+2] for i in range(n-1))\n\nprint(max(c, key=c.get))\n", "#!/usr/bin/env python3\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s[i:i + 2] for i in range(n - 1))\n\nprint(max(c, key = c.get))\n", "\ninput_n = int(input())\ninput_s = input()\n\nmax_count = 0\nmax_gram = \"\"\nfor i in range(input_n-1):\n    gram = input_s[i:i+2]\n    if input_s.count(gram) > max_count:\n        max_count = input_s.count(gram)\n        max_gram = gram\nprint(max_gram)\n", "import os\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\nimport os\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('integers', metavar='N', type=int, nargs='+',\n                        help='an integer for the accumulator')\n    parser.add_argument('--sum', dest='accumulate', action='store_const',\n                        const=sum, default=max,\n                        help='sum the integers (default: find the max)')\n\n    args = parser.parse_args()\n    print(args.accumulate(args.integers))\n\n\nif __name__ == '__main__':\n    main()\n"]