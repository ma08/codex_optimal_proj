["\n\ns = input(\"Enter a string: \")\n\n# print the length of the longest substring of s that is only A, C, G, and T\nprint(max([len(s[i:j]) for i in range(len(s)) for j in range(i+1, len(s)+1) if \"A\" in s[i:j] and \"C\" in s[i:j] and \"G\" in s[i:j] and \"T\" in s[i:j]]))\n", "\n\ns = input() \nn = len(s) \nans = 0\nfor i in range(n):\n    for j in range(i+1, n+1):\n        if \"A\" in s[i:j] and \"C\" in s[i:j] and \"G\" in s[i:j] and \"T\" in s[i:j]:\n            ans = max(ans, j-i)\nprint(ans)\n", "\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*- \n\n# AtCoder Beginner Contest #001\n# Problem A\n\nif __name__ == '__main__':\n    print(int(input()) - int(input()))\n", "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem C\n\nif __name__ == '__main__':\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    # See:\n    # https://www.youtube.com/watch?v=CpZh4eF8QBw\n    # https://img.atcoder.jp/arc093/editorial.pdf\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n\n    # See:\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n    # https://beta.atcoder.jp/contests/arc093/submissions/2757335\n", "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = input()\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string: \n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"]