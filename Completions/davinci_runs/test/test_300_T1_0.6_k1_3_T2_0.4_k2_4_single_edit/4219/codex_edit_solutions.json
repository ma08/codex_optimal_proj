["\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and people[testimony[0] - 1].kind != \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n", "\n#\n# N = int(raw_input())\n#\n# class Person:\n#     def __init__(self, id, testimonies):\n#         self.id = id\n#         self.testimonies = testimonies\n#         self.kind = None\n#\n# def find_max_honest_persons():\n#     people = []\n#     for i in range(N):\n#         testimonies = []\n#         for j in range(int(raw_input())):\n#             testimony = [int(x) for x in raw_input().split(\" \")]\n#             testimonies.append(testimony)\n#         people.append(Person(i + 1, testimonies))\n#\n#     people = set_kind_of_people_recursively(people)\n#\n#     max_honest_persons = 0\n#     for person in people:\n#         if person.kind == \"h\":\n#             max_honest_persons += 1\n#     return max_honest_persons\n#\n# def set_kind_of_people_recursively(people):\n#     for person in people:\n#         if person.kind is None:\n#             set_kind_of_person(person, people)\n#     return people\n#\n# def set_kind_of_person(person, people):\n#     if person.kind is None:\n#         person.kind = \"h\"\n#         for testimony in person.testimonies:\n#             if testimony[1] == 1 and not people[testimony[0] - 1].kind == \"h\":\n#                 person.kind = \"u\"\n#                 break\n#         for testimony in person.testimonies:\n#             if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n#                 people[testimony[0] - 1].kind = \"u\"\n#                 set_kind_of_people_recursively(people)\n#                 break\n#\n# print find_max_honest_persons()\n", "\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n", "\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n", "import sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(N):\n        if honest[v][i] and not visited[i]:\n            dfs(i)\n    for i in range(N):\n        if unkind[v][i] and not visited[i]:\n            dfs(i)\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n", "from collections import deque\n\n\ndef bfs(i):\n    q = deque([(i, 0)])\n    while q:\n        v, d = q.popleft()\n        if d > 2:\n            return False\n        for u in g[v]:\n            if u == i:\n                return True\n            if not used[u]:\n                used[u] = True\n                q.append((u, d + 1))\n    return False\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n", "# coding: utf-8\n\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(N):\n        if honest[v][i] and not visited[i]:\n            dfs(i)\n    for i in range(N):\n        if unkind[v][i] and not visited[i]:\n            dfs(i)\n\nN = int(input())\nhonest = [[False] * N for i in range(N)]\nunkind = [[False] * N for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i][x-1] = True\n        else:\n            unkind[i][x-1] = True\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n", "import sys\n\ndef dfs(v):\n    global visited, honest, unkind\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n", "\nn = int(input())\na = [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i])] for i in range(n)]\ny = [[0 for _ in range(a[i])] for i in range(n)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j], y[i][j] = map(int, input().split())\n        x[i][j] -= 1\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n", "import sys\ninput = sys.stdin.readline\n\n\nn, k = map(int, input().split())\na = [int(input()) for _ in range(n)]    \ndp = [[0 for _ in range(k+1)] for _ in range(n+1)]\ndp[0][0] = 1\nfor i in range(1, n+1):\n    for j in range(k+1):\n        dp[i][j] = dp[i-1][j]\n        if j - a[i-1] >= 0:\n            dp[i][j] += dp[i-1][j-a[i-1]]\n\nprint(dp[n][k])\n"]