2022-04-20 13:54:03.908171 num operations 1
2022-04-20 13:54:03.908191 size on input set 1
2022-04-20 13:54:03.908468 using api key jaanu
2022-04-20 13:54:06.756918 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i + 1\n\nprint(res)\n"
    }
  ],
  "created": 1650462844,
  "object": "edit"
}
2022-04-20 13:54:06.757191 fix syntax errors 4 ['\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n', '\nfrom sys import stdin\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n', '\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n', '\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i + 1\n\nprint(res)\n']
2022-04-20 13:54:06.757230 size on output set 4
2022-04-20 13:54:06.757242 num operations 1
2022-04-20 13:54:06.757247 size on input set 1
2022-04-20 13:54:06.757403 using api key sunu
2022-04-20 13:54:10.017608 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_longest_substring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0 or len(t) == 0:\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0 or len(t) == 0:\n        return 0\n\n    left, right = 0, len(s)\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    }
  ],
  "created": 1650462846,
  "object": "edit"
}
2022-04-20 13:54:10.017862 fix syntax errors 4 ['\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n', '\n\ndef find_longest_substring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == 0 or len(t) == 0:\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == 0 or len(t) == 0:\n        return 0\n\n    left, right = 0, len(s)\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n']
2022-04-20 13:54:10.017908 size on output set 4
2022-04-20 13:54:10.018008 num operations 1
2022-04-20 13:54:10.018015 size on input set 1
2022-04-20 13:54:10.018172 using api key jaanu
2022-04-20 13:54:15.593512 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "a, b, c = map(int, input().split())\nprint(a*b*c)\n"
    },
    {
      "index": 1,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt * len(t))\nelse:\n    print(len(s))\n"
    },
    {
      "index": 2,
      "text": "\ns = input()  # s = abracadabra\nt = input()  # t = abra\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:  # s[i] = a, b, r, a, c, a, d, a, b, r, a\n        # t[0] = a, b, r, a\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    },
    {
      "index": 3,
      "text": "#\n# s = input()\n# t = input()\n#\n# cnt = 0\n#\n# for i in range(len(s)):\n#     if s[i] == t[0]:\n#         cnt += 1\n#         t = t[1:]\n#     if len(t) == 0:\n#         break\n#\n# if len(t) == 0:\n#     print(len(s) - cnt)\n# else:\n#     print(len(s))\n"
    }
  ],
  "created": 1650462850,
  "object": "edit"
}
2022-04-20 13:54:15.593758 fix syntax errors 4 ['a, b, c = map(int, input().split())\nprint(a*b*c)\n', 's = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt * len(t))\nelse:\n    print(len(s))\n', '\ns = input()  # s = abracadabra\nt = input()  # t = abra\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:  # s[i] = a, b, r, a, c, a, d, a, b, r, a\n        # t[0] = a, b, r, a\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n', '#\n# s = input()\n# t = input()\n#\n# cnt = 0\n#\n# for i in range(len(s)):\n#     if s[i] == t[0]:\n#         cnt += 1\n#         t = t[1:]\n#     if len(t) == 0:\n#         break\n#\n# if len(t) == 0:\n#     print(len(s) - cnt)\n# else:\n#     print(len(s))\n']
2022-04-20 13:54:15.593791 size on output set 4
