["var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar lines = file.toString().split('\\n').length - 1;\nconsole.log(lines);\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = sorted(map(int, input().split()))\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom bisect import bisect_left\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1) \n", "import os\n\n\ndef write_file(file_name, text):\n    f = open(file_name, 'w')\n    f.write(text)\n    f.close()\n\n\ndef read_file(file_name):\n    f = open(file_name, 'r')\n    return f.read()\n\n\ndef main():\n    file_name = 'file.txt'\n    write_file(file_name, 'Hello world!')\n    print(read_file(file_name))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n-1:\n        print(l[-1])\n        return\n    if l[k-1] == l[k] or k == 0:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na.sort()\n\nprint(a[k - 1] if k else -1)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <file>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    if not os.path.isfile(filename):\n        print(\"{} is not a file\".format(filename))\n        sys.exit(1)\n\n    with open(filename, 'rb') as f:\n        data = f.read()\n\n    print(\"{} is a {} file\".format(filename, filetype(data)))\n\ndef filetype(data):\n    if data.startswith(b'\\x1f\\x8b\\x08'):\n        return 'gzip'\n    elif data.startswith(b'\\x42\\x5a\\x68'):\n        return 'bzip2'\n    elif data.startswith(b'\\x50\\x4b\\x03\\x04'):\n        return 'zip'\n    elif data.startswith(b'\\x37\\x7a\\xbc\\xaf\\x27\\x1c'):\n        return '7z'\n    elif data.startswith(b'\\x52\\x61\\x72\\x21\\x1a\\x07\\x00'):\n        return 'rar'\n    elif data.startswith(b'\\x78\\x01'):\n        return 'dmg'\n    elif data.startswith(b'\\x25\\x50\\x44\\x46'):\n        return 'pdf'\n    elif data.startswith(b'\\x49\\x44\\x33'):\n        return 'mp3'\n    elif data.startswith(b'\\x00\\x00\\x00\\x18\\x66\\x74\\x79\\x70\\x6d\\x70\\x34\\x32'):\n        return 'mp4'\n    elif data.startswith(b'\\x00\\x00\\x00\\x20\\x66\\x74\\x79\\x70\\x69\\x73\\x6f\\x6d'):\n        return 'm4a'\n    elif data.startswith(b'\\x00\\x00\\x00\\x20\\x66\\x74\\x79\\x70\\x4d\\x34\\x41\\x20'):\n        return 'm4v'\n    elif data.startswith(b'\\x00\\x00\\x00\\x1c\\x66\\x74\\x79\\x70\\x4d\\x34\\x41\\x20'):\n        return 'm4v'\n    elif data.startswith(b'\\x00\\x00\\x00\\x1c\\x66\\x74\\x79\\x70\\x6d\\x70\\x34\\x32'):\n        return 'mp4'\n    elif data.startswith(b'\\x00\\x00\\x00\\x1c\\x66\\x74\\x79\\x70\\x4d\\x53\\x4e\\x56'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x14\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x6d\\x70\\x34\\x32'):\n        return 'mp4'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x69\\x73\\x6f\\x6d'):\n        return 'm4a'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x4d\\x34\\x56\\x20'):\n        return 'm4v'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x4d\\x34\\x41\\x20'):\n        return 'm4v'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x4d\\x53\\x4e\\x56'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x6d\\x70\\x34\\x32'):\n        return 'mp4'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x6d\\x6d\\x76\\x68'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    elif data.startswith(b'\\x00\\x00\\x00\\x00\\x66\\x74\\x79\\x70\\x71\\x74\\x20\\x20'):\n        return 'mov'\n    else:\n        return 'unknown'\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k] and l[k-1] != 1:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "#include <stdio.h>\n\nint main() {\n  FILE *fp;\n  char buff[255];\n\n  fp = fopen(\"test.txt\", \"r\");\n  fscanf(fp, \"%s\", buff);\n  printf(\"1 : %s\\n\", buff);\n\n  fgets(buff, 255, fp);\n  printf(\"2 : %s\\n\", buff);\n\n  fgets(buff, 255, fp);\n  printf(\"3 : %s\\n\", buff);\n\n  fclose(fp);\n  return 0;\n}\n", "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n"]