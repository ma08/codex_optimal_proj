["\n\n# get input\ns = input(\"Enter a string: \")\nt = input(\"Enter another string: \")\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, sl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n", "\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n", "\n\n# Get input \nS = input()\nT = input()\n\n# Set up variables \nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed \nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row \nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column \nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix \nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n", "\n\n# get input from user\ns = raw_input()\nt = raw_input()\n\n# get length of both strings and initialize count\nsl = len(s)\ntl = len(t)\ncount = 0\n\n# loop through t and check if s has it, if not add to count\nfor i in range(tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result of count\nprint(count)\n", "\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n", "\n\ns = input(\"s=\")\nt = input(\"t=\")\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n", "\n# Get input\nS = input()\nT = input()\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(len(S) + 1)] for j in range(len(T) + 1)]\n\n# Populate the first row\nfor i in range(1, len(S) + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, len(T) + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, len(T) + 1):\n    for i in range(1, len(S) + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[len(T)][len(S)])\n", "\n\n# get input from user\ns = raw_input()\nt = raw_input()\n\n# get length of both strings and initialize count\nsl = len(s) \ntl = len(t) \ncount = 0 \n\n# loop through t and check if s has it, if not increment count\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result, the number of differences between the two strings\nprint str(count)\n", "\n\n# # Get input\n# S = input()\n# T = input()\n\n# # Set up variables\n# slen = len(S)\n# tlen = len(T)\n\n# # Initialize array to store the minimum number of changes needed\n# changes = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# # Populate the first row\n# for i in range(1, slen + 1):\n#     changes[0][i] = i\n\n# # Populate the first column\n# for j in range(1, tlen + 1):\n#     changes[j][0] = j\n\n# # Calculate the rest of the matrix\n# for j in range(1, tlen + 1):\n#     for i in range(1, slen + 1):\n#         if S[i-1] == T[j-1]:\n#             changes[j][i] = changes[j-1][i-1]\n#         else:\n#             changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\n# print(changes[tlen][slen])\n\n# def get_change(m):\n#     #write your code here\n#     num_coins = 0\n#     denom = [10, 5, 1]\n#     for i in denom:\n#         num_coins += m // i\n#         m %= i\n#     return num_coins\n\n# if __name__ == '__main__':\n#     m = int(input())\n#     print(get_change(m))\n\n# def get_change(m):\n#     #write your code here\n#     num_coins = 0\n#     denom = [10, 5, 1]\n#     for i in denom:\n#         num_coins += m // i\n#         m %= i\n#     return num_coins\n\n# if __name__ == '__main__':\n#     m = int(input())\n#     print(get_change(m))\n\n# def get_optimal_value(capacity, weights, values):\n#     value = 0.\n#     for i in range(len(weights)):\n#         if capacity == 0:\n#             return value\n#         a = min(weights[i], capacity)\n#         value += a * values[i] / weights[i]\n#         weights[i] -= a\n#         capacity -= a\n#     return value\n\n\n# if __name__ == \"__main__\":\n#     data = list(map(int, input().split()))\n#     n, capacity = data[0:2]\n#     values = []\n#     weights = []\n#     for i in range(n):\n#         data = list(map(int, input().split()))\n#         values.append(data[0])\n#         weights.append(data[1])\n#     opt_value = get_optimal_value(capacity, weights, values)\n#     print(\"{:.10f}\".format(opt_value))\n\n# def get_optimal_value(capacity, weights, values):\n#     value = 0.\n#     for i in range(len(weights)):\n#         if capacity == 0:\n#             return value\n#         a = min(weights[i], capacity)\n#         value += a * values[i] / weights[i]\n#         weights[i] -= a\n#         capacity -= a\n#     return value\n\n\n# if __name__ == \"__main__\":\n#     data = list(map(int, input().split()))\n#     n, capacity = data[0:2]\n#     values = []\n#     weights = []\n#     for i in range(n):\n#         data = list(map(int, input().split()))\n#         values.append(data[0])\n#         weights.append(data[1])\n#     opt_value = get_optimal_value(capacity, weights, values)\n#     print(\"{:.10f}\".format(opt_value))\n\n# def get_optimal_value(capacity, weights, values):\n#     value = 0.\n#     for i in range(len(weights)):\n#         if capacity == 0:\n#             return value\n#         a = min(weights[i], capacity)\n#         value += a * values[i] / weights[i]\n#         weights[i] -= a\n#         capacity -= a\n#     return value\n\n\n# if __name__ == \"__main__\":\n#     data = list(map(int, input().split()))\n#     n, capacity = data[0:2]\n#     values = []\n#     weights = []\n#     for i in range(n):\n#         data = list(map(int, input().split()))\n#         values.append(data[0])\n#         weights.append(data[1])\n#     opt_value = get_optimal_value(capacity, weights, values)\n#     print(\"{:.10f}\".format(opt_value))\n", "\n\n# get input\ns = input().split()\nt = input().split()\n\n# get length of both strings\nsl = int(s[0])\ntl = int(t[0])\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i+1] != t[i+1]:\n        count += 1\n\n# print out result\nprint(count)\n", "\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"]