2022-04-20 14:06:52.557547 num operations 1
2022-04-20 14:06:52.557565 size on input set 1
2022-04-20 14:06:52.557756 using api key kouti
2022-04-20 14:07:10.489497 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1) \n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n"
    }
  ],
  "created": 1650463612,
  "object": "edit"
}
2022-04-20 14:07:10.489799 fix syntax errors 4 ['\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n', '\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n', '\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom heapq import *\nfrom math import inf\n\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1) \n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n', '\ndef main():\n\tn, k, x = map(int, sys.stdin.readline().split())\n\ta = list(map(int, sys.stdin.readline().split()))\n\tif x < k:\n\t\tprint(-1)\n\t\treturn\n\tif k == 1:\n\t\tprint(sum(a[:x]))\n\t\treturn\n\t# dp[i][j] = max sum for first i pictures, with j pictures left to be reposted\n\tdp = [[-inf for j in range(x+1)] for i in range(n+1)]\n\tdp[0][0] = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, x+1):\n\t\t\t# include this picture\n\t\t\tif i >= k:\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n\t\t\t# exclude this picture\n\t\t\tdp[i][j] = max(dp[i][j], dp[i-1][j])\n\t\t\t# include this picture, and some before it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]))\n\t\t\t# include this picture, and some before it, and some after it\n\t\t\tif i >= k:\n\t\t\t\tfor l in range(1, min(i, k)):\n\t\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i-l][j-1] + sum(a[i-l:i]) + sum(a[i:i+m]))\n\t\t\t# include this picture, and some after it\n\t\t\tif i < n:\n\t\t\t\tfor m in range(1, min(n-i+1, k)):\n\t\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i:i+m]))\n\tprint(dp[n][x])\nmain()\n']
2022-04-20 14:07:10.489948 size on output set 4
2022-04-20 14:07:10.489960 num operations 1
2022-04-20 14:07:10.489966 size on input set 1
2022-04-20 14:07:10.490132 using api key soukgp
2022-04-20 14:07:15.270342 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "def main():\n    s = input()\n    n = int(input())\n    for _ in range(n):\n        a, b = map(int,input().split())\n        tmp = s[a-1:b]\n        s = s[:a-1] + tmp[::-1] + s[b:]\n    print(s)\n\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650463630,
  "object": "edit"
}
2022-04-20 14:07:15.270598 fix syntax errors 4 ["\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = -1\n    for i in range(n):\n        if res < sum(a[i:i + x]):\n            res = sum(a[i:i + x])\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    s = input()\n    n = int(input())\n    for _ in range(n):\n        a, b = map(int,input().split())\n        tmp = s[a-1:b]\n        s = s[:a-1] + tmp[::-1] + s[b:]\n    print(s)\n\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:07:15.270636 size on output set 3
2022-04-20 14:07:15.270648 num operations 1
2022-04-20 14:07:15.270655 size on input set 1
2022-04-20 14:07:15.270829 using api key sunu
2022-04-20 14:07:18.117368 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = 0\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = []\n    for i in range(n):\n        dp.append([0 for j in range(x+1)])\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650463635,
  "object": "edit"
}
2022-04-20 14:07:18.117616 fix syntax errors 4 ["\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = 0\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = [[0 for j in range(x+1)] for i in range(n)]\n    for i in range(n):\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    dp = []\n    for i in range(n):\n        dp.append([0 for j in range(x+1)])\n    dp[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            if i >= k:\n                for r in range(1, j+1):\n                    dp[i][j] = max(dp[i][j], dp[i-k][j-r] + a[i])\n    return dp[n-1][x]\n\ndef main():\n    line = sys.stdin.readline()\n    n, k, x = [int(x) for x in line.split()]\n    line = sys.stdin.readline()\n    a = [int(x) for x in line.split()]\n    print(max_beauty_sum(n, k, x, a))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:07:18.117744 size on output set 3
