2022-04-20 14:32:49.634932 num operations 1
2022-04-20 14:32:49.634953 size on input set 1
2022-04-20 14:32:49.635168 using api key soukgp
2022-04-20 14:32:55.979126 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # first element\na.append(a[1]) # second element\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na = [a[-1]] + a + [a[0]]\n\nbest = 0\nlength = 0\n\nfor i in range(n + 1):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 3,
      "text": "import sys\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # add first element to the end\na.append(a[1]) # add second element to the end\n\nbest = 0 # current best\nlength = 0 # current length\n\nfor i in range(n + 2): # iterate through array\n    if a[i] == 1:\n        length += 1 # increase length\n    else:\n        best = max(best, length) # update best\n        length = 0 # reset length\n\nprint(best) # print best\n"
    }
  ],
  "created": 1650465169,
  "object": "edit"
}
2022-04-20 14:32:55.979401 fix syntax errors 4 ['\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # first element\na.append(a[1]) # second element\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na = [a[-1]] + a + [a[0]]\n\nbest = 0\nlength = 0\n\nfor i in range(n + 1):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', 'import sys\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # add first element to the end\na.append(a[1]) # add second element to the end\n\nbest = 0 # current best\nlength = 0 # current length\n\nfor i in range(n + 2): # iterate through array\n    if a[i] == 1:\n        length += 1 # increase length\n    else:\n        best = max(best, length) # update best\n        length = 0 # reset length\n\nprint(best) # print best\n']
2022-04-20 14:32:55.979437 size on output set 4
2022-04-20 14:32:55.979449 num operations 1
2022-04-20 14:32:55.979455 size on input set 1
2022-04-20 14:32:55.979625 using api key sunu
2022-04-20 14:33:09.263217 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 2,
      "text": "\n# https://codeforces.com/problemset/problem/1186/B\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 3,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    }
  ],
  "created": 1650465176,
  "object": "edit"
}
2022-04-20 14:33:09.263463 fix syntax errors 4 ['\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\n# https://codeforces.com/problemset/problem/1186/B\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n']
2022-04-20 14:33:09.263618 size on output set 3
2022-04-20 14:33:09.263634 num operations 1
2022-04-20 14:33:09.263640 size on input set 1
2022-04-20 14:33:09.263807 using api key jaanu
2022-04-20 14:33:15.805731 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 2,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    }
  ],
  "created": 1650465189,
  "object": "edit"
}
2022-04-20 14:33:15.805966 fix syntax errors 4 ['\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# i, j, m = 0, 0, 0\n#\n# while i < n:\n#     while j < n and a[j] == 1:\n#         j += 1\n#     m = max(m, j - i)\n#     i = j + 1\n#     j = i\n#\n# print(m)\n\n\nn = int(input())\na = list(map(int, input().split()))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n']
2022-04-20 14:33:15.806000 size on output set 3
