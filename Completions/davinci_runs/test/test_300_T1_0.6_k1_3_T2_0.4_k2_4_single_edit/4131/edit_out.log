2022-04-20 14:15:12.282471 num operations 1
2022-04-20 14:15:12.282490 size on input set 1
2022-04-20 14:15:12.282651 using api key gabby
2022-04-20 14:15:20.338483 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:0>6d}{:0>6d}'.format(city.pref, i + 1))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:0>6d}{:0>6d}'.format(city.pref, i + 1), flush=True)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year, id):\n        self.pref = pref\n        self.id = id\n        self.year = year\n\ncity_list = [None] * m\nn, m = map(int, sys.stdin.readline().split())\n\nprefs = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    city_list[_] = City(p, y, _)\n    prefs[p].append(city_list[_])\n\nfor p, cities in sorted(prefs.items()):\n    cities.sort(key=lambda x: x.year)\n    for i, city in enumerate(cities):\n        city_list[city.id] = '{:0>6d}{:0>6d}'.format(city.pref, i + 1)\n\nfor city in city_list:\n    print(city)\n"
    },
    {
      "index": 3,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:06d}{:06d}'.format(city.pref, i + 1))\n"
    }
  ],
  "created": 1650464112,
  "object": "edit"
}
2022-04-20 14:15:20.338760 fix syntax errors 4 ["\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:0>6d}{:0>6d}'.format(city.pref, i + 1))\n", "\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:0>6d}{:0>6d}'.format(city.pref, i + 1), flush=True)\n", "\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year, id):\n        self.pref = pref\n        self.id = id\n        self.year = year\n\ncity_list = [None] * m\nn, m = map(int, sys.stdin.readline().split())\n\nprefs = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    city_list[_] = City(p, y, _)\n    prefs[p].append(city_list[_])\n\nfor p, cities in sorted(prefs.items()):\n    cities.sort(key=lambda x: x.year)\n    for i, city in enumerate(cities):\n        city_list[city.id] = '{:0>6d}{:0>6d}'.format(city.pref, i + 1)\n\nfor city in city_list:\n    print(city)\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport collections\n\nclass City:\n    def __init__(self, pref, year):\n        self.pref = pref\n        self.year = year\n\nn, m = map(int, sys.stdin.readline().split())\n\npref_dic = collections.defaultdict(list)\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    pref_dic[p].append(City(p, y))\n\nfor p, c in sorted(pref_dic.items()):\n    c.sort(key=lambda x: x.year)\n    for i, city in enumerate(c):\n        print('{:06d}{:06d}'.format(city.pref, i + 1))\n"]
2022-04-20 14:15:20.338804 size on output set 4
2022-04-20 14:15:20.338816 num operations 1
2022-04-20 14:15:20.338823 size on input set 1
2022-04-20 14:15:20.338990 using api key derek
2022-04-20 14:15:20.374421 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 14:15:21.876370 using api key kouti
2022-04-20 14:16:04.265367 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n\n    print(\"%06d%06d\" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print(\"%06d%06d\" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n    print(\"%06d%06d\" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0]-1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n    print(\"%06d%06d\" % (city[i][0], l[city[i][0]-1].index(city[i][1])+1))\n"
    }
  ],
  "created": 1650464121,
  "object": "edit"
}
2022-04-20 14:16:04.265716 fix syntax errors 4 ['\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n\n    print("%06d%06d" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n', '\n\n\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print("%06d%06d" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n', '\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0] - 1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n    print("%06d%06d" % (city[i][0], l[city[i][0] - 1].index(city[i][1]) + 1))\n', '\nimport sys\n\nN, M = map(int, input().split())\ncity = [tuple(map(int, input().split())) for i in range(M)]\n\nl = [[] for i in range(N)]\nfor i in range(M):\n    l[city[i][0]-1].append(city[i][1])\n\nfor i in range(N):\n    l[i].sort()\n\nfor i in range(M):\n    print("%06d%06d" % (city[i][0], l[city[i][0]-1].index(city[i][1])+1))\n']
2022-04-20 14:16:04.265769 size on output set 4
2022-04-20 14:16:04.265784 num operations 1
2022-04-20 14:16:04.265790 size on input set 1
2022-04-20 14:16:04.265961 using api key sourya
2022-04-20 14:16:06.144393 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# \u30d7\u30ea\u30f3\u30b9\u3068\u9b54\u6cd5\u306e\u30ad\u30ce\u30b3\u3067\u7fd2\u3063\u305f\u3084\u3064\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u541b\u306f\u81ea\u5206\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u304b\u3001\u305d\u306e\u6642\u306e\u4f53\u91cd\u306f\u4f55\u3060\u3063\u305f\u304b\u3001\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\u899a\u3048\u3066\u3044\u308b\u304b\u3044\uff1f\n# \u30de\u30ea\u30f3\uff1a\u899a\u3048\u3066\u3044\u308b\u3088\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u308c\u3092\u8a00\u3063\u3066\u307f\u308d\u3002\n# \u30de\u30ea\u30f3\uff1a\u307e\u305a\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u3060\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e00\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u3053\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u306a\u3093\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u306e\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u3057\u3066\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306f\u3069\u3046\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306b\u306f\u3001\u7b2c\u4e8c\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c2\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u3069\u3093\u306a\u8272\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u30d4\u30f3\u30af\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3068\u540c\u3058\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# \u30d7\u30ea\u30f3\u30b9\u3068\u9b54\u6cd5\u306e\u30ad\u30ce\u30b3\u3067\u7fd2\u3063\u305f\u3084\u3064\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u541b\u306f\u81ea\u5206\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u304b\u3001\u305d\u306e\u6642\u306e\u4f53\u91cd\u306f\u4f55\u3060\u3063\u305f\u304b\u3001\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\u899a\u3048\u3066\u3044\u308b\u304b\u3044\uff1f\n# \u30de\u30ea\u30f3\uff1a\u899a\u3048\u3066\u3044\u308b\u3088\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u308c\u3092\u8a00\u3063\u3066\u307f\u308d\u3002\n# \u30de\u30ea\u30f3\uff1a\u307e\u305a\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u3060\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e00\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u3053\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u306a\u3093\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u306e\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u3057\u3066\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306f\u3069\u3046\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306b\u306f\u3001\u7b2c\u4e8c\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c2\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u3069\u3093\u306a\u8272\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u30d4\u30f3\u30af\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3068\u540c\u3058\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# \u30d7\u30ea\u30f3\u30b9\u3068\u9b54\u6cd5\u306e\u30ad\u30ce\u30b3\u3067\u7fd2\u3063\u305f\u3084\u3064\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u541b\u306f\u81ea\u5206\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u304b\u3001\u305d\u306e\u6642\u306e\u4f53\u91cd\u306f\u4f55\u3060\u3063\u305f\u304b\u3001\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\u899a\u3048\u3066\u3044\u308b\u304b\u3044\uff1f\n# \u30de\u30ea\u30f3\uff1a\u899a\u3048\u3066\u3044\u308b\u3088\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u308c\u3092\u8a00\u3063\u3066\u307f\u308d\u3002\n# \u30de\u30ea\u30f3\uff1a\u307e\u305a\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u3060\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e00\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u3053\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u306a\u3093\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u306e\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u3057\u3066\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306f\u3069\u3046\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306b\u306f\u3001\u7b2c\u4e8c\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c2\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u3069\u3093\u306a\u8272\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u30d4\u30f3\u30af\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3068\u540c\u3058\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# \u30d7\u30ea\u30f3\u30b9\u3068\u9b54\u6cd5\u306e\u30ad\u30ce\u30b3\u3067\u7fd2\u3063\u305f\u3084\u3064\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u541b\u306f\u81ea\u5206\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u304b\u3001\u305d\u306e\u6642\u306e\u4f53\u91cd\u306f\u4f55\u3060\u3063\u305f\u304b\u3001\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\u899a\u3048\u3066\u3044\u308b\u304b\u3044\uff1f\n# \u30de\u30ea\u30f3\uff1a\u899a\u3048\u3066\u3044\u308b\u3088\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u308c\u3092\u8a00\u3063\u3066\u307f\u308d\u3002\n# \u30de\u30ea\u30f3\uff1a\u307e\u305a\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u3060\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u4f55\u756a\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e00\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u3053\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u305d\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u306a\u3093\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u306e\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u3057\u3066\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306f\u3069\u3046\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306b\u306f\u3001\u7b2c\u4e8c\u56de\u76ee\u304b\u3089\u6570\u3048\u3066\u7b2c1\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c2\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u305d\u308c\u306f\u3069\u3093\u306a\u30ad\u30ce\u30b3\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u305d\u308c\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3067\u3057\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u4f55\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u3069\u3093\u306a\u8272\u3060\u3063\u305f\u304b\uff1f\n# \u30de\u30ea\u30f3\uff1a\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u30d4\u30f3\u30af\u3060\u3063\u305f\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306e\u8272\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u30d4\u30f3\u30af\u306e\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3068\u540c\u3058\u30ad\u30ce\u30b3\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e00\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n# \u30d7\u30ea\u30f3\u30b9\uff1a\u3058\u3083\u3042\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u306f\u7b2c\u4e8c\u56de\u76ee\u306e\u30ad\u30ce\u30b3\u3092\u98df\u3079\u305f\u3068\u304d\u306e\u4f53\u91cd\u3060\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u304b\u3002\n# \u30de\u30ea\u30f3\uff1a\u305d\u3046\u3067\u3059\u3002\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n"
    }
  ],
  "created": 1650464164,
  "object": "edit"
}
2022-04-20 14:16:06.144855 fix syntax errors 4 ["\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# プリンスと魔法のキノコで習ったやつ\n# プリンス：君は自分は何番目のキノコを食べたか、その時の体重は何だったか、どんなキノコだったか覚えているかい？\n# マリン：覚えているよ。\n# プリンス：じゃあそれを言ってみろ。\n# マリン：まずは第一回目のキノコを食べたときだ。\n# プリンス：それは何番目のキノコだったか？\n# マリン：第一回目から数えて第1回目のキノコだった。\n# プリンス：じゃあそのキノコは何だったか？\n# マリン：このキノコはピンクのキノコだった。\n# プリンス：じゃあそのキノコを食べたときの体重はなんだったか？\n# マリン：そのときの体重は第1回目のキノコを食べたときの体重だった。\n# プリンス：そして第二回目のキノコを食べたときはどうだったか？\n# マリン：第二回目のキノコを食べたときには、第二回目から数えて第1回目のキノコを食べたときの体重は第2回目のキノコを食べたときの体重だった。\n# プリンス：じゃあ第一回目のキノコは第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは何だったか？\n# マリン：それは第二回目のキノコでした。\n# プリンス：それはどんなキノコだったか？\n# マリン：それは第二回目のキノコの色でした。\n# プリンス：じゃあ第二回目のキノコの色は何だったか？\n# マリン：第二回目のキノコの色は第二回目のキノコの色だった。\n# プリンス：じゃあ第二回目のキノコの色はどんな色だったか？\n# マリン：第二回目のキノコの色はピンクだった。\n# プリンス：じゃあ第二回目のキノコの色は第一回目のキノコの色だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコはピンクのキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは第一回目のキノコと同じキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n", "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# プリンスと魔法のキノコで習ったやつ\n# プリンス：君は自分は何番目のキノコを食べたか、その時の体重は何だったか、どんなキノコだったか覚えているかい？\n# マリン：覚えているよ。\n# プリンス：じゃあそれを言ってみろ。\n# マリン：まずは第一回目のキノコを食べたときだ。\n# プリンス：それは何番目のキノコだったか？\n# マリン：第一回目から数えて第1回目のキノコだった。\n# プリンス：じゃあそのキノコは何だったか？\n# マリン：このキノコはピンクのキノコだった。\n# プリンス：じゃあそのキノコを食べたときの体重はなんだったか？\n# マリン：そのときの体重は第1回目のキノコを食べたときの体重だった。\n# プリンス：そして第二回目のキノコを食べたときはどうだったか？\n# マリン：第二回目のキノコを食べたときには、第二回目から数えて第1回目のキノコを食べたときの体重は第2回目のキノコを食べたときの体重だった。\n# プリンス：じゃあ第一回目のキノコは第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは何だったか？\n# マリン：それは第二回目のキノコでした。\n# プリンス：それはどんなキノコだったか？\n# マリン：それは第二回目のキノコの色でした。\n# プリンス：じゃあ第二回目のキノコの色は何だったか？\n# マリン：第二回目のキノコの色は第二回目のキノコの色だった。\n# プリンス：じゃあ第二回目のキノコの色はどんな色だったか？\n# マリン：第二回目のキノコの色はピンクだった。\n# プリンス：じゃあ第二回目のキノコの色は第一回目のキノコの色だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコはピンクのキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは第一回目のキノコと同じキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n", "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# プリンスと魔法のキノコで習ったやつ\n# プリンス：君は自分は何番目のキノコを食べたか、その時の体重は何だったか、どんなキノコだったか覚えているかい？\n# マリン：覚えているよ。\n# プリンス：じゃあそれを言ってみろ。\n# マリン：まずは第一回目のキノコを食べたときだ。\n# プリンス：それは何番目のキノコだったか？\n# マリン：第一回目から数えて第1回目のキノコだった。\n# プリンス：じゃあそのキノコは何だったか？\n# マリン：このキノコはピンクのキノコだった。\n# プリンス：じゃあそのキノコを食べたときの体重はなんだったか？\n# マリン：そのときの体重は第1回目のキノコを食べたときの体重だった。\n# プリンス：そして第二回目のキノコを食べたときはどうだったか？\n# マリン：第二回目のキノコを食べたときには、第二回目から数えて第1回目のキノコを食べたときの体重は第2回目のキノコを食べたときの体重だった。\n# プリンス：じゃあ第一回目のキノコは第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは何だったか？\n# マリン：それは第二回目のキノコでした。\n# プリンス：それはどんなキノコだったか？\n# マリン：それは第二回目のキノコの色でした。\n# プリンス：じゃあ第二回目のキノコの色は何だったか？\n# マリン：第二回目のキノコの色は第二回目のキノコの色だった。\n# プリンス：じゃあ第二回目のキノコの色はどんな色だったか？\n# マリン：第二回目のキノコの色はピンクだった。\n# プリンス：じゃあ第二回目のキノコの色は第一回目のキノコの色だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコはピンクのキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは第一回目のキノコと同じキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n", "\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\n# プリンスと魔法のキノコで習ったやつ\n# プリンス：君は自分は何番目のキノコを食べたか、その時の体重は何だったか、どんなキノコだったか覚えているかい？\n# マリン：覚えているよ。\n# プリンス：じゃあそれを言ってみろ。\n# マリン：まずは第一回目のキノコを食べたときだ。\n# プリンス：それは何番目のキノコだったか？\n# マリン：第一回目から数えて第1回目のキノコだった。\n# プリンス：じゃあそのキノコは何だったか？\n# マリン：このキノコはピンクのキノコだった。\n# プリンス：じゃあそのキノコを食べたときの体重はなんだったか？\n# マリン：そのときの体重は第1回目のキノコを食べたときの体重だった。\n# プリンス：そして第二回目のキノコを食べたときはどうだったか？\n# マリン：第二回目のキノコを食べたときには、第二回目から数えて第1回目のキノコを食べたときの体重は第2回目のキノコを食べたときの体重だった。\n# プリンス：じゃあ第一回目のキノコは第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは何だったか？\n# マリン：それは第二回目のキノコでした。\n# プリンス：それはどんなキノコだったか？\n# マリン：それは第二回目のキノコの色でした。\n# プリンス：じゃあ第二回目のキノコの色は何だったか？\n# マリン：第二回目のキノコの色は第二回目のキノコの色だった。\n# プリンス：じゃあ第二回目のキノコの色はどんな色だったか？\n# マリン：第二回目のキノコの色はピンクだった。\n# プリンス：じゃあ第二回目のキノコの色は第一回目のキノコの色だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコはピンクのキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコは第一回目のキノコと同じキノコだったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第一回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第一回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n# プリンス：じゃあ第二回目のキノコを食べたときの体重は第二回目のキノコを食べたときの体重だったということか。\n# マリン：そうです。\n\ncities.sort(key=lambda x: x[1])\n\n# print(cities)\n\ncnt = collections.defaultdict(list)\nfor i, c in enumerate(cities):\n    cnt[c[0]].append(i + 1)\n\n# print(cnt)\n\nfor i in range(1, N + 1):\n    if cnt[i]:\n        for c in cnt[i]:\n            print('{:06d}{:06d}'.format(i, c))\n    else:\n        print('{:06d}{:06d}'.format(i, 0))\n"]
2022-04-20 14:16:06.145075 size on output set 1
