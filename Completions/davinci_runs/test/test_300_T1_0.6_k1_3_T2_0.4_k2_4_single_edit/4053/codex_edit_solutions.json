["#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n#define MAX_ARGS 64\n#define MAX_ARG_LEN 16\n#define MAX_LINE_LEN 512\n#define WHITESPACE \" .,\\t\\n\"\n\nstruct command_t {\n  char *name;\n  int argc;\n  char *argv[MAX_ARGS];\n};\n\n/* Function prototypes */\nint parseCommand(char *, struct command_t *);\nvoid printPrompt();\nvoid readCommand(char *);\n\nint main() {\n  char *cmdLine;\n  struct command_t command;\n  int pid, status;\n  int i;\n  int fd;\n\n  cmdLine = (char *) malloc(MAX_LINE_LEN);\n\n  while (1) {\n    printPrompt();\n    /* Read the command line and parse it */\n    readCommand(cmdLine);\n    //printf(\"DEBUG: Command entered: %s\\n\", cmdLine);\n\n    parseCommand(cmdLine, &command);\n\n    /* Create a child process to execute the command */\n    pid = fork();\n\n    if (pid < 0) {\n      /* Error occurred */\n      fprintf(stderr, \"Fork failed\\n\");\n      exit(1);\n    }\n    else if (pid == 0) {\n      /* Child process */\n      if (strcmp(command.argv[command.argc - 1], \"&\") == 0) {\n        command.argv[command.argc - 1] = NULL;\n        command.argc--;\n      }\n\n      for (i = 0; i < command.argc; i++) {\n        if (strcmp(command.argv[i], \">\") == 0) {\n          fd = open(command.argv[i + 1], O_WRONLY | O_CREAT, 0644);\n          dup2(fd, 1);\n          close(fd);\n          command.argv[i] = NULL;\n        }\n        else if (strcmp(command.argv[i], \"<\") == 0) {\n          fd = open(command.argv[i + 1], O_RDONLY);\n          dup2(fd, 0);\n          close(fd);\n          command.argv[i] = NULL;\n        }\n      }\n\n      /* Execute the command */\n      execvp(command.argv[0], command.argv);\n    }\n    else {\n      /* Parent process */\n      if (strcmp(command.argv[command.argc - 1], \"&\") == 0) {\n        waitpid(pid, &status, WNOHANG);\n      }\n      else {\n        waitpid(pid, &status, 0);\n      }\n    }\n  }\n\n  return 0;\n}\n\n/* End main */\n\n/* Parse Command line and populate struct command_t */\nint parseCommand(char *cLine, struct command_t *cmd) {\n  int argc;\n  char **clPtr;\n  /* Initialization */\n  clPtr = &cLine; /* cLine is the command line */\n  argc = 0;\n  cmd->argv[argc] = (char *) malloc(MAX_ARG_LEN);\n  /* Fill argv[] */\n  while ((cmd->argv[argc] = strsep(clPtr, WHITESPACE)) != NULL) {\n    cmd->argv[++argc] = (char *) malloc(MAX_ARG_LEN);\n  }\n\n  /* Set the command name and argc */\n  cmd->argc = argc - 1;\n  cmd->name = (char *) malloc(sizeof(cmd->argv[0]));\n  strcpy(cmd->name, cmd->argv[0]);\n  return 1;\n}\n\n/* Print prompt and read command functions - pp. 79-80 */\nvoid printPrompt() {\n  printf(\"myshell>\");\n}\n\nvoid readCommand(char *buffer) {\n  fgets(buffer, MAX_LINE_LEN, stdin);\n}\n", "file.js\n", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(2 * n - 2):\n        x = input()\n        if x not in prefixes:\n            prefixes.append(x)\n        else:\n            suffixes.append(x)\n    for x in prefixes:\n        print(\"P\", end=\"\")\n    for x in suffixes:\n        print(\"S\", end=\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings) - 1, 2)]\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i + 1] for i in range(0, len(strings), 2)]\n    print(strings)\n    for s in strings:\n        for i in range(n - 1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings), 2)]\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    strings = [sys.stdin.readline().strip() for i in range(2*n-2)]\n    strings = [strings[i] + strings[i+1] for i in range(0, len(strings)-1, 2)]\n    print(strings)\n    for s in strings:\n        for i in range(n-1):\n            if s[:i] not in strings:\n                sys.stdout.write(\"P\")\n                break\n        else:\n            sys.stdout.write(\"S\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/bash\n\n#\n# This script is used to fix syntax errors in the source code.\n#\n# It will not fix indentation errors.\n#\n\n#\n# Fix syntax errors in the source code.\n#\n# The -i option is used to edit the file in place.\n#\n\n#\n# Remove trailing whitespace.\n#\nsed -i 's/[ \\t]*$//' *.cpp *.h\n\n#\n# Remove spaces before semicolons.\n#\nsed -i 's/[ \\t]\\+;/;/g' *.cpp *.h\n\n#\n# Remove spaces before opening parentheses.\n#\nsed -i 's/[ \\t]\\+([(]/([(]/g' *.cpp *.h\n\n#\n# Remove spaces before closing parentheses.\n#\nsed -i 's/[ \\t]\\+[)]/)/g' *.cpp *.h\n\n#\n# Remove spaces before opening braces.\n#\nsed -i 's/[ \\t]\\+{/{/g' *.cpp *.h\n\n#\n# Remove spaces before closing braces.\n#\nsed -i 's/[ \\t]\\+}/}/g' *.cpp *.h\n\n#\n# Remove spaces before commas.\n#\nsed -i 's/[ \\t]\\+,/,/g' *.cpp *.h\n\n#\n# Remove spaces before colons.\n#\nsed -i 's/[ \\t]\\+:/:/g' *.cpp *.h\n\n#\n# Remove spaces before asterisks.\n#\nsed -i 's/[ \\t]\\+\\*/\\*/g' *.cpp *.h\n\n#\n# Remove spaces before ampersands.\n#\nsed -i 's/[ \\t]\\+&/&/g' *.cpp *.h\n\n#\n# Remove spaces before equal signs.\n#\nsed -i 's/[ \\t]\\+=/=/g' *.cpp *.h\n\n#\n# Remove spaces before plus signs.\n#\nsed -i 's/[ \\t]\\+\\+/\\+/g' *.cpp *.h\n\n#\n# Remove spaces before minus signs.\n#\nsed -i 's/[ \\t]\\+-/-/g' *.cpp *.h\n\n#\n# Remove spaces before less than signs.\n#\nsed -i 's/[ \\t]\\+</</g' *.cpp *.h\n\n#\n# Remove spaces before greater than signs.\n#\nsed -i 's/[ \\t]\\+>/>/g' *.cpp *.h\n\n#\n# Remove spaces before exclamation points.\n#\nsed -i 's/[ \\t]\\+\\!/\\!/g' *.cpp *.h\n\n#\n# Remove spaces before question marks.\n#\nsed -i 's/[ \\t]\\+\\?/?/g' *.cpp *.h\n\n#\n# Remove spaces before percent signs.\n#\nsed -i 's/[ \\t]\\+%/%/g' *.cpp *.h\n\n#\n# Remove spaces before forward slashes.\n#\nsed -i 's/[ \\t]\\+\\//\\//g' *.cpp *.h\n\n#\n# Remove spaces before backslashes.\n#\nsed -i 's/[ \\t]\\+\\\\/\\\\/g' *.cpp *.h\n\n#\n# Remove spaces before vertical bars.\n#\nsed -i 's/[ \\t]\\+|/|/g' *.cpp *.h\n\n#\n# Remove spaces before carets.\n#\nsed -i 's/[ \\t]\\+\\^/\\^/g' *.cpp *.h\n\n#\n# Remove spaces before tildes.\n#\nsed -i 's/[ \\t]\\+~/~/g' *.cpp *.h\n\n#\n# Remove spaces before double quotes.\n#\nsed -i 's/[ \\t]\\+\\\"/\\\"/g' *.cpp *.h\n\n#\n# Remove spaces before single quotes.\n#\nsed -i \"s/[ \\t]\\+\\'/\\'/g\" *.cpp *.h\n\n#\n# Remove spaces before periods.\n#\nsed -i 's/[ \\t]\\+././g' *.cpp *.h\n\n#\n# Remove spaces before octothorpes.\n#\nsed -i 's/[ \\t]\\+#/#/g' *.cpp *.h\n\n#\n# Remove spaces before at signs.\n#\nsed -i 's/[ \\t]\\+@/@/g' *.cpp *.h\n\n#\n# Remove spaces before dollar signs.\n#\nsed -i 's/[ \\t]\\+\\$/\\$/g' *.cpp *.h\n\n#\n# Remove spaces before pound signs.\n#\nsed -i 's/[ \\t]\\+\\\u00a3/\\\u00a3/g' *.cpp *.h\n\n#\n# Remove spaces before backticks.\n#\nsed -i 's/[ \\t]\\+\\`/\\`/g' *.cpp *.h\n\n#\n# Remove spaces before underscores.\n#\nsed -i 's/[ \\t]\\+_/_/g' *.cpp *.h\n\n#\n# Remove spaces before curly braces.\n#\nsed -i 's/[ \\t]\\+\\{/\\{/g' *.cpp *.h\n\n#\n# Remove spaces before square brackets.\n#\nsed -i 's/[ \\t]\\+\\[/\\[/g' *.cpp *.h\n\n#\n# Remove spaces before angle brackets.\n#\nsed -i 's/[ \\t]\\+\\</\\</g' *.cpp *.h\n\n#\n# Remove spaces before tildes.\n#\nsed -i 's/[ \\t]\\+\\~/\\~/g' *.cpp *.h\n\n#\n# Remove spaces before equal signs.\n#\nsed -i 's/[ \\t]\\+=\\+/\\+/g' *.cpp *.h\n\n#\n# Remove spaces before exclamation points.\n#\nsed -i 's/[ \\t]\\+\\!\\=/\\!\\=/g' *.cpp *.h\n\n#\n# Remove spaces before backslashes.\n#\nsed -i 's/[ \\t]\\+\\\\\\//\\\\\\//g' *.cpp *.h\n\n#\n# Remove spaces before colons.\n#\nsed -i 's/[ \\t]\\+\\:\\\\:/\\:\\\\:/g' *.cpp *.h\n\n#\n# Remove spaces before vertical bars.\n#\nsed -i 's/[ \\t]\\+\\|\\|/\\|\\|/g' *.cpp *.h\n\n#\n# Remove spaces before ampersands.\n#\nsed -i 's/[ \\t]\\+\\&\\&/\\&\\&/g' *.cpp *.h\n\n#\n# Remove spaces before less than signs.\n#\nsed -i 's/[ \\t]\\+\\<\\=/\\<\\=/g' *.cpp *.h\n\n#\n# Remove spaces before greater than signs.\n#\nsed -i 's/[ \\t]\\+\\>\\=/\\>\\=/g' *.cpp *.h\n\n#\n# Remove spaces before less than signs.\n#\nsed -i 's/[ \\t]\\+\\<\\</\\<\\</g' *.cpp *.h\n\n#\n# Remove spaces before greater than signs.\n#\nsed -i 's/[ \\t]\\+\\>\\>/\\>\\>/g' *.cpp *.h\n\n#\n# Remove spaces before less than signs.\n#\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    print \"Hello world\"\n\nif __name__ == \"__main__\":\n    main()\n"]