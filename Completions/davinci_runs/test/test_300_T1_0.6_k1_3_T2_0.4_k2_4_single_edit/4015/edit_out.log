2022-04-20 13:38:06.392559 num operations 1
2022-04-20 13:38:06.392579 size on input set 1
2022-04-20 13:38:06.392785 using api key derek
2022-04-20 13:38:06.511192 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 13:38:08.013100 using api key gabby
2022-04-20 13:38:45.742659 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "var fs = require('fs');\n\nvar readStream = fs.createReadStream('file.txt');\nvar writeStream = fs.createWriteStream('file2.txt');\n\nreadStream.pipe(writeStream);\n\nconsole.log('finished');\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport os\nimport shutil\n\ndef main():\n    print('Arguments: ', sys.argv)\n\n    if len(sys.argv) < 3:\n        print('Usage: python3 {} <source_dir> <destination_dir>'.format(sys.argv[0]))\n        sys.exit(1)\n\n    source = sys.argv[1]\n    destination = sys.argv[2]\n\n    if not os.path.exists(source):\n        print('Source directory does not exist')\n        sys.exit(1)\n\n    if not os.path.exists(destination):\n        print('Destination directory does not exist')\n        sys.exit(1)\n\n    for filename in os.listdir(source):\n        if filename.endswith('.txt'):\n            shutil.copy(os.path.join(source, filename), destination)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import os\n\ndef main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'file.txt');\n\nconst readFile = fs.readFile(filePath, 'utf-8', (err, data) => {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  ],
  "created": 1650461888,
  "object": "edit"
}
2022-04-20 13:38:45.742937 fix syntax errors 4 ["var fs = require('fs');\n\nvar readStream = fs.createReadStream('file.txt');\nvar writeStream = fs.createWriteStream('file2.txt');\n\nreadStream.pipe(writeStream);\n\nconsole.log('finished');\n", "#!/usr/bin/env python3\n\nimport sys\nimport os\nimport shutil\n\ndef main():\n    print('Arguments: ', sys.argv)\n\n    if len(sys.argv) < 3:\n        print('Usage: python3 {} <source_dir> <destination_dir>'.format(sys.argv[0]))\n        sys.exit(1)\n\n    source = sys.argv[1]\n    destination = sys.argv[2]\n\n    if not os.path.exists(source):\n        print('Source directory does not exist')\n        sys.exit(1)\n\n    if not os.path.exists(destination):\n        print('Destination directory does not exist')\n        sys.exit(1)\n\n    for filename in os.listdir(source):\n        if filename.endswith('.txt'):\n            shutil.copy(os.path.join(source, filename), destination)\n\nif __name__ == '__main__':\n    main()\n", 'import os\n\ndef main():\n    print("Hello world!")\n\nif __name__ == "__main__":\n    main()\n', "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'file.txt');\n\nconst readFile = fs.readFile(filePath, 'utf-8', (err, data) => {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]
2022-04-20 13:38:45.742980 size on output set 4
2022-04-20 13:38:45.742993 num operations 1
2022-04-20 13:38:45.742998 size on input set 1
2022-04-20 13:38:45.743156 using api key kouti
2022-04-20 13:38:56.453459 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(n, m):\n    if n == m:\n        return 0\n\n    if m % 2 == 1 and m % 3 == 1:\n        return -1\n\n    steps = 0\n\n    while n != 1:\n        if n % 3 == 0:\n            n = int(n / 3)\n        elif n % 2 == 0:\n            n = int(n / 2)\n        else:\n            return -1\n        steps += 1\n\n    while m != 1:\n        if m % 3 == 0:\n            m = int(m / 3)\n        elif m % 2 == 0:\n            m = int(m / 2)\n        else:\n            return -1\n        steps += 1\n\n    return steps\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650461925,
  "object": "edit"
}
2022-04-20 13:38:56.453823 fix syntax errors 4 ['\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', "\n\ndef solve(n, m):\n    if n == m:\n        return 0\n\n    if m % 2 == 1 and m % 3 == 1:\n        return -1\n\n    steps = 0\n\n    while n != 1:\n        if n % 3 == 0:\n            n = int(n / 3)\n        elif n % 2 == 0:\n            n = int(n / 2)\n        else:\n            return -1\n        steps += 1\n\n    while m != 1:\n        if m % 3 == 0:\n            m = int(m / 3)\n        elif m % 2 == 0:\n            m = int(m / 2)\n        else:\n            return -1\n        steps += 1\n\n    return steps\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(solve(n, m))\n"]
2022-04-20 13:38:56.453868 size on output set 2
2022-04-20 13:38:56.453881 num operations 1
2022-04-20 13:38:56.453888 size on input set 1
2022-04-20 13:38:56.454056 using api key kouti
2022-04-20 13:39:09.082424 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math as m\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_semiprime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime(n / i):\n                return True\n    return False\n\ndef is_almost_prime(n):\n    if n == 1:\n        return False\n    count = 0\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    if count == 1:\n        return True\n    return False\n\nn = int(sys.stdin.read())\n\ncount = 0\nfor i in range(1, n + 1):\n    if is_almost_prime(i):\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math \n\ndef main():\n    input_list = sys.stdin.read().split()\n\n\n    n = int(input_list[0])\n    m = int(input_list[1])\n\n    if n == m:\n        print(0)\n    else:\n        if m % n != 0:\n            print(-1)\n        else:\n            m = m / n\n            count = 0\n            while m > 1:\n                if m % 2 != 0 and m % 3 != 0:\n                    print(-1)\n                    break\n                elif m % 2 == 0:\n                    m = m / 2\n                    count += 1\n                elif m % 3 == 0:\n                    m = m / 3\n                    count += 1\n            if m == 1:\n                print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    }
  ],
  "created": 1650461936,
  "object": "edit"
}
2022-04-20 13:39:09.082694 fix syntax errors 4 ['\n\nimport sys\nimport math as m\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_semiprime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime(n / i):\n                return True\n    return False\n\ndef is_almost_prime(n):\n    if n == 1:\n        return False\n    count = 0\n    for i in range(2, int(m.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    if count == 1:\n        return True\n    return False\n\nn = int(sys.stdin.read())\n\ncount = 0\nfor i in range(1, n + 1):\n    if is_almost_prime(i):\n        count += 1\n\nprint(count)\n', "\n\nimport sys\nimport math \n\ndef main():\n    input_list = sys.stdin.read().split()\n\n\n    n = int(input_list[0])\n    m = int(input_list[1])\n\n    if n == m:\n        print(0)\n    else:\n        if m % n != 0:\n            print(-1)\n        else:\n            m = m / n\n            count = 0\n            while m > 1:\n                if m % 2 != 0 and m % 3 != 0:\n                    print(-1)\n                    break\n                elif m % 2 == 0:\n                    m = m / 2\n                    count += 1\n                elif m % 3 == 0:\n                    m = m / 3\n                    count += 1\n            if m == 1:\n                print(count)\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n']
2022-04-20 13:39:09.082748 size on output set 4
