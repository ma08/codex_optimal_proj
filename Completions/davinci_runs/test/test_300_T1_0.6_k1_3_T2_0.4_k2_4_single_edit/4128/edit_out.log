2022-04-20 14:14:03.362072 num operations 1
2022-04-20 14:14:03.362093 size on input set 1
2022-04-20 14:14:03.362308 using api key gabby
2022-04-20 14:14:05.819062 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2))\n"
    },
    {
      "index": 2,
      "text": "\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2)) \n"
    },
    {
      "index": 3,
      "text": "\n\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(max(0, (n + 1) // 2))\n"
    }
  ],
  "created": 1650464043,
  "object": "edit"
}
2022-04-20 14:14:05.819322 fix syntax errors 4 ['\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2))\n', '#!/usr/bin/env python3\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2))\n', '\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2)) \n', '\n\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(max(0, (n + 1) // 2))\n']
2022-04-20 14:14:05.819349 size on output set 4
2022-04-20 14:14:05.819359 num operations 1
2022-04-20 14:14:05.819365 size on input set 1
2022-04-20 14:14:05.819539 using api key gabby
2022-04-20 14:14:08.089030 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650464045,
  "object": "edit"
}
2022-04-20 14:14:08.089264 fix syntax errors 4 ["import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 14:14:08.089298 size on output set 2
2022-04-20 14:14:08.089337 num operations 1
2022-04-20 14:14:08.089344 size on input set 1
2022-04-20 14:14:08.089499 using api key gabby
2022-04-20 14:14:13.963877 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nfrom math import sqrt\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    return int(sqrt(n))\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n\n\ndef solve(n):\n    count = 0\n    for i in range(3, n, 2):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0])\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1])\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    if n < 4:\n        return 0\n    if n % 2 == 1:\n        return int(n / 2)\n    return int(n / 2 - 1)\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\nimport sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip()) - 1\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    num_digits = math.floor(math.log10(n)) + 1\n    if num_digits == 1:\n        return n\n    if num_digits == 2:\n        return 9\n    if num_digits == 3:\n        return 9 + (n - 99)\n    if num_digits == 4:\n        return 9 + 900\n    if num_digits == 5:\n        return 9 + 900 + (n - 9999)\n    return 9 + 900 + 90000\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650464048,
  "object": "edit"
}
2022-04-20 14:14:13.964126 fix syntax errors 4 ['import sys\nfrom math import sqrt\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    return int(sqrt(n))\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport math\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n\n\ndef solve(n):\n    count = 0\n    for i in range(3, n, 2):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0])\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1])\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    if n < 4:\n        return 0\n    if n % 2 == 1:\n        return int(n / 2)\n    return int(n / 2 - 1)\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\nimport sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip()) - 1\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    num_digits = math.floor(math.log10(n)) + 1\n    if num_digits == 1:\n        return n\n    if num_digits == 2:\n        return 9\n    if num_digits == 3:\n        return 9 + (n - 99)\n    if num_digits == 4:\n        return 9 + 900\n    if num_digits == 5:\n        return 9 + 900 + (n - 9999)\n    return 9 + 900 + 90000\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 14:14:13.964283 size on output set 4
