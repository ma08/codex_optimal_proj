2022-04-19 18:31:32.915143 num operations 1
2022-04-19 18:31:32.915163 size on input set 1
2022-04-19 18:31:32.915345 using api key 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
2022-04-19 18:32:09.053181 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = 1\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] & ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650393093,
  "object": "edit"
}
2022-04-19 18:32:09.053465 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = 1\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] & ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    # n, m = map(int, input().split())\n    # bulbs = [list(map(int, input().split())) for _ in range(m)]\n    # states = list(map(int, input().split()))\n    # switches = [[False] * n for _ in range(m)]\n    # for i in range(m):\n    #     for j in range(1, bulbs[i][0] + 1):\n    #         switches[i][bulbs[i][j] - 1] = True\n    # # print(switches)\n    # cnt = 0\n    # for i in range(2 ** n):\n    #     flag = True\n    #     for j in range(m):\n    #         c = 0\n    #         for k in range(n):\n    #             if switches[j][k] and ((i >> k) & 1):\n    #                 c += 1\n    #         if c % 2 != states[j]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         cnt += 1\n    # print(cnt)\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 18:32:09.053655 size on output set 3
2022-04-19 18:32:09.053674 num operations 1
2022-04-19 18:32:09.053683 size on input set 1
2022-04-19 18:32:09.053879 using api key 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
2022-04-19 18:32:21.567618 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())  # N: \u96fb\u7403\u306e\u6570, M: \u30b9\u30a4\u30c3\u30c1\u306e\u6570\n\nk_list = []  # \u30b9\u30a4\u30c3\u30c1\u304c\u4f55\u500b\u306e\u96fb\u7403\u3092\u64cd\u4f5c\u3059\u308b\u304b\ns_list = []  # \u30b9\u30a4\u30c3\u30c1\u304c\u3069\u306e\u96fb\u7403\u3092\u64cd\u4f5c\u3059\u308b\u304b\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))  # \u96fb\u7403\u306e\u72b6\u614b\n\ndef check_light(state):\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u96fb\u7403\u306e\u72b6\u614b\u306b\u5fdc\u3058\u3066\u3001\u30b9\u30a4\u30c3\u30c1\u304c\u64cd\u4f5c\u3059\u308b\u96fb\u7403\u306e\u72b6\u614b\u3092\u8abf\u3079\u308b\n    \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u306a\u3089True, \u305d\u308c\u4ee5\u5916\u306fFalse\n    \"\"\"\n    for i in range(M):\n        odd_even = 0  # \u5947\u6570\u306a\u30891, \u5076\u6570\u306a\u30890\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1  # \u5947\u6570\u306a\u30891\u3092\u8db3\u3057\u7d9a\u3051\u308b\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):  # \u96fb\u7403\u306e\u72b6\u614b\u3092\u5168\u3066\u8a66\u3059\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u96fb\u7403\u306e\u72b6\u614b\u3092\u5168\u3066\u8a66\u3059\n    \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u72b6\u614b\u306e\u6570\u3092\u8fd4\u3059\n    \"\"\"\n    if n == N:\n        if check_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 2,
      "text": "\n# input\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    }
  ],
  "created": 1650393129,
  "object": "edit"
}
2022-04-19 18:32:21.567852 fix syntax errors 3 ['\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())  # N: 電球の数, M: スイッチの数\n\nk_list = []  # スイッチが何個の電球を操作するか\ns_list = []  # スイッチがどの電球を操作するか\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))  # 電球の状態\n\ndef check_light(state):\n    """\n    入力された電球の状態に応じて、スイッチが操作する電球の状態を調べる\n    全ての電球が点灯しているならTrue, それ以外はFalse\n    """\n    for i in range(M):\n        odd_even = 0  # 奇数なら1, 偶数なら0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1  # 奇数なら1を足し続ける\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):  # 電球の状態を全て試す\n    """\n    入力された電球の状態を全て試す\n    全ての電球が点灯している状態の数を返す\n    """\n    if n == N:\n        if check_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\n# input\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n']
2022-04-19 18:32:21.567915 size on output set 3
