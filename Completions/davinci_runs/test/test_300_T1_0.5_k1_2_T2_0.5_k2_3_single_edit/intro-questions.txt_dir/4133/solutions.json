["\"\"\"\nCodeforces April Fools Contest 2014 Problem I\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\nclass InputHandlerObject(object):\n    inputs = []\n\n    def getInput(self, n = 0):\n        res = \"\"\n        inputs = self.inputs\n        if not inputs: inputs.extend(input().split(\" \"))\n        if n == 0:\n            res = inputs[:]\n            inputs[:] = []\n        while n > len(inputs):\n            inputs.extend(input().split(\" \"))\n        if n > 0:\n            res = inputs[:n]\n            inputs[:n] = []\n        return res\nInputHandler = InputHandlerObject()\ng = InputHandler.getInput\n\n############################## SOLUTION ##############################\n\n# ?(_/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\ngolorp = input().split(\":-\")\ngolorp[0] = golorp[0][2:]\n\nct = 0\njaws = []\nfor x in range(len(golorp[0])):\n    if golorp[0][x] == \"_\":\n        ct += 1\n    else:\n        jaws.append(ct)\n        ct = 0\n\nct = 0\nconditionsraw = []\nfor x in range(len(golorp[1])):\n    if golorp[1][x] == \"_\":\n        ct += 1\n    else:\n        conditionsraw.append(ct)\n        conditionsraw.append(golorp[1][x])\n        ct = 0\n\nconditions = []\nfor x in range(0, len(conditionsraw)//4):\n    if conditionsraw[4*x+1] == \">\":\n        conditions.append((conditionsraw[4*x+2], conditionsraw[4*x]))\n    else:\n        conditions.append((conditionsraw[4*x], conditionsraw[4*x+2]))\n\ninedges = [[-1]] * (max(jaws) + 1)\noutedges = [[-1]] * (max(jaws) + 1)\nval = [-1] * (max(jaws) + 1)\nprocessed = [False] * (max(jaws) + 1)\nfor x in jaws:\n    inedges[x] = []\n    outedges[x] = []\n\nfor x, y in conditions:\n    inedges[y].append(x)\n    outedges[x].append(y)\n\nfor i in range(10):\n    for x in jaws:\n        if not inedges[x] and not processed[x]:\n            val[x] += 1\n            processed[x] = True\n            for y in outedges[x]:\n                val[y] = max(val[y], val[x])\n                inedges[y].remove(x)\n\nfailure = False\nfor x in jaws:\n    if not processed[x] or val[x] > 9:\n        failure = True\n        break\n\nif failure:\n    print(\"false\")\nelse:\n    s = \"\"\n    for x in jaws:\n        s += str(val[x])\n    print(s)", "class InputHandlerObject(object):\n    inputs = []\n\n    def getInput(self, n = 0):\n        res = \"\"\n        inputs = self.inputs\n        if not inputs: inputs.extend(input().split(\" \"))\n        if n == 0:\n            res = inputs[:]\n            inputs[:] = []\n        while n > len(inputs):\n            inputs.extend(input().split(\" \"))\n        if n > 0:\n            res = inputs[:n]\n            inputs[:n] = []\n        return res\nInputHandler = InputHandlerObject()\ng = InputHandler.getInput\n\ngolorp = input().split(\":-\")\ngolorp[0] = golorp[0][2:]\n\nct = 0\njaws = []\nfor x in range(len(golorp[0])):\n    if golorp[0][x] == \"_\":\n        ct += 1\n    else:\n        jaws.append(ct)\n        ct = 0\n\nct = 0\nconditionsraw = []\nfor x in range(len(golorp[1])):\n    if golorp[1][x] == \"_\":\n        ct += 1\n    else:\n        conditionsraw.append(ct)\n        conditionsraw.append(golorp[1][x])\n        ct = 0\n\nconditions = []\nfor x in range(0, len(conditionsraw)//4):\n    if conditionsraw[4*x+1] == \">\":\n        conditions.append((conditionsraw[4*x+2], conditionsraw[4*x]))\n    else:\n        conditions.append((conditionsraw[4*x], conditionsraw[4*x+2]))\n\ninedges = [[-1]] * (max(jaws) + 1)\noutedges = [[-1]] * (max(jaws) + 1)\nval = [-1] * (max(jaws) + 1)\nprocessed = [False] * (max(jaws) + 1)\nfor x in jaws:\n    inedges[x] = []\n    outedges[x] = []\n\nfor x, y in conditions:\n    inedges[y].append(x)\n    outedges[x].append(y)\n\nfor i in range(10):\n    for x in jaws:\n        if not inedges[x] and not processed[x]:\n            val[x] += 1\n            processed[x] = True\n            for y in outedges[x]:\n                val[y] = max(val[y], val[x])\n                inedges[y].remove(x)\n\nfailure = False\nfor x in jaws:\n    if not processed[x] or val[x] > 9:\n        failure = True\n        break\n\nif failure:\n    print(\"false\")\nelse:\n    s = \"\"\n    for x in jaws:\n        s += str(val[x])\n    print(s)", "import re\n\nline=input()\n\nline = line.rstrip('.')\na, b, c = line.partition(\"):-\")\nrels = c.split(',')\n\nrelations = set()\nfor rel in rels:\n    if \"<\" in rel:\n        x, _, y = rel.partition(\"<\")\n        relations.add((len(x), len(y)))\n    else:\n        x, _, y = rel.partition(\">\")\n        relations.add((len(y), len(x)))\n\na = a.lstrip(\"?(\")\nargs = re.split(r\"(\\+|-|\\*|/)\", a)\nargs = [len(args[i]) for i in range(0, len(args), 2)]\n\n\n# print(args)\n# print(relations)\n\nedges = {k:[] for k in args}\nfor j, i in relations:\n    edges[i].append(j)\n\nseen = {k:0 for k in args}\n\nq = []\n\ndef topsort(k):\n    if seen[k] == 1:\n        print(\"false\")\n        quit()\n    seen[k] = 1\n    for other in edges[k]:\n        topsort(other)\n    q.append(k)\n    seen[k] = 2\n    return True\n\nfor k in args:\n    if seen[k] == 0:\n        topsort(k)\n\nvals = {}\n\nfor k in q:\n    others = edges[k]\n    maxval = -1\n    for other in others:\n        maxval = max(maxval, vals.get(other, -1))\n    vals[k] = maxval+1\n    if(vals[k]>9):\n        print(\"false\")\n        quit()\n\nfor k in args:\n    print(vals[k], end='')\n\nprint()"]