2022-04-19 18:16:06.477812 num operations 1
2022-04-19 18:16:06.477833 size on input set 1
2022-04-19 18:16:06.478054 using api key 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
2022-04-19 18:16:46.209664 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "var fs = require('fs');\nvar file = fs.readFileSync(process.argv[2]);\nvar lines = file.toString().split('\\n').length - 1;\nconsole.log(lines);\n"
    },
    {
      "index": 1,
      "text": "import os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\nimport send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n\nimport os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\n# import send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n# import os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\n# import send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 2,
      "text": "var fs = require('fs');\n\nfunction readFile(filePath) {\n  return fs.readFileSync(filePath, 'utf-8');\n}\n\nfunction writeFile(filePath, content) {\n  fs.writeFileSync(filePath, content);\n}\n\nfunction getDirFiles(dirPath) {\n  return fs.readdirSync(dirPath);\n}\n\nfunction getFileExtension(filePath) {\n  var fileExtension = filePath.split('.').pop();\n  return fileExtension;\n}\n\nfunction getFileName(filePath) {\n  var fileName = filePath.split('/').pop();\n  return fileName;\n}\n\nfunction getFileContent(filePath) {\n  var fileContent = readFile(filePath);\n  return fileContent;\n}\n\nfunction getFileSize(filePath) {\n  var fileSize = fs.statSync(filePath).size;\n  return fileSize;\n}\n\nfunction isFile(filePath) {\n  return fs.statSync(filePath).isFile();\n}\n\nfunction isDir(filePath) {\n  return fs.statSync(filePath).isDirectory();\n}\n\nfunction hasExtension(filePath, extension) {\n  var fileExtension = getFileExtension(filePath);\n  return extension === fileExtension;\n}\n\nfunction hasContent(filePath, content) {\n  var fileContent = getFileContent(filePath);\n  return content === fileContent;\n}\n\nfunction hasSize(filePath, size) {\n  var fileSize = getFileSize(filePath);\n  return size === fileSize;\n}\n\nfunction hasName(filePath, name) {\n  var fileName = getFileName(filePath);\n  return name === fileName;\n}\n\nfunction hasFiles(dirPath, files) {\n  var dirFiles = getDirFiles(dirPath);\n  return files.length === dirFiles.length && files.every(function(file) {\n    return dirFiles.indexOf(file) !== -1;\n  });\n}\n\nmodule.exports = {\n  readFile: readFile,\n  writeFile: writeFile,\n  getDirFiles: getDirFiles,\n  getFileExtension: getFileExtension,\n  getFileName: getFileName,\n  getFileContent: getFileContent,\n  getFileSize: getFileSize,\n  isFile: isFile,\n  isDir: isDir,\n  hasExtension: hasExtension,\n  hasContent: hasContent,\n  hasSize: hasSize,\n  hasName: hasName,\n  hasFiles: hasFiles\n};\n"
    }
  ],
  "created": 1650392166,
  "object": "edit"
}
2022-04-19 18:16:46.209944 fix syntax errors 3 ["var fs = require('fs');\nvar file = fs.readFileSync(process.argv[2]);\nvar lines = file.toString().split('\\n').length - 1;\nconsole.log(lines);\n", "import os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\nimport send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n\nimport os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\n# import send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n# import os\n\n# os.chdir('/Users/paul/Desktop/')\n\n# print(os.getcwd())\n\n# os.mkdir('/Users/paul/Desktop/newfolder')\n\n# os.rename('/Users/paul/Desktop/newfolder', '/Users/paul/Desktop/secondfolder')\n\n# os.rmdir('/Users/paul/Desktop/secondfolder')\n\n# print(os.listdir())\n\n# print(os.path.exists('/Users/paul/Desktop/'))\n\n# print(os.path.isfile('/Users/paul/Desktop/'))\n\n# print(os.path.isdir('/Users/paul/Desktop/'))\n\n# print(os.path.splitext('/Users/paul/Desktop/file.txt'))\n\n# print(dir(os.path))\n\n\n# import shutil\n\n# shutil.copy('/Users/paul/Desktop/file.txt', '/Users/paul/Desktop/copy.txt')\n\n# shutil.copytree('/Users/paul/Desktop/', '/Users/paul/Desktop/copy')\n\n# shutil.move('/Users/paul/Desktop/copy.txt', '/Users/paul/Desktop/new')\n\n# shutil.rmtree('/Users/paul/Desktop/new')\n\n# for dirpath, dirnames, filenames in os.walk('/Users/paul/Desktop/'):\n#     print('Current path: ', dirpath)\n#     print('Directories: ', dirnames)\n#     print('Files: ', filenames)\n#     print()\n\n# import send2trash\n\n# send2trash.send2trash('/Users/paul/Desktop/copy.txt')\n\n# import zipfile\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip', 'w')\n\n# zip.write('/Users/paul/Desktop/file.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# zip.close()\n\n# zip = zipfile.ZipFile('/Users/paul/Desktop/file.zip')\n\n# zip.extractall('/Users/paul/Desktop/new')\n\n# zip.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "var fs = require('fs');\n\nfunction readFile(filePath) {\n  return fs.readFileSync(filePath, 'utf-8');\n}\n\nfunction writeFile(filePath, content) {\n  fs.writeFileSync(filePath, content);\n}\n\nfunction getDirFiles(dirPath) {\n  return fs.readdirSync(dirPath);\n}\n\nfunction getFileExtension(filePath) {\n  var fileExtension = filePath.split('.').pop();\n  return fileExtension;\n}\n\nfunction getFileName(filePath) {\n  var fileName = filePath.split('/').pop();\n  return fileName;\n}\n\nfunction getFileContent(filePath) {\n  var fileContent = readFile(filePath);\n  return fileContent;\n}\n\nfunction getFileSize(filePath) {\n  var fileSize = fs.statSync(filePath).size;\n  return fileSize;\n}\n\nfunction isFile(filePath) {\n  return fs.statSync(filePath).isFile();\n}\n\nfunction isDir(filePath) {\n  return fs.statSync(filePath).isDirectory();\n}\n\nfunction hasExtension(filePath, extension) {\n  var fileExtension = getFileExtension(filePath);\n  return extension === fileExtension;\n}\n\nfunction hasContent(filePath, content) {\n  var fileContent = getFileContent(filePath);\n  return content === fileContent;\n}\n\nfunction hasSize(filePath, size) {\n  var fileSize = getFileSize(filePath);\n  return size === fileSize;\n}\n\nfunction hasName(filePath, name) {\n  var fileName = getFileName(filePath);\n  return name === fileName;\n}\n\nfunction hasFiles(dirPath, files) {\n  var dirFiles = getDirFiles(dirPath);\n  return files.length === dirFiles.length && files.every(function(file) {\n    return dirFiles.indexOf(file) !== -1;\n  });\n}\n\nmodule.exports = {\n  readFile: readFile,\n  writeFile: writeFile,\n  getDirFiles: getDirFiles,\n  getFileExtension: getFileExtension,\n  getFileName: getFileName,\n  getFileContent: getFileContent,\n  getFileSize: getFileSize,\n  isFile: isFile,\n  isDir: isDir,\n  hasExtension: hasExtension,\n  hasContent: hasContent,\n  hasSize: hasSize,\n  hasName: hasName,\n  hasFiles: hasFiles\n};\n"]
2022-04-19 18:16:46.210102 size on output set 3
2022-04-19 18:16:46.210116 num operations 1
2022-04-19 18:16:46.210121 size on input set 1
2022-04-19 18:16:46.210286 using api key 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
2022-04-19 18:16:46.598755 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-19 18:16:48.100676 using api key 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
2022-04-19 18:16:59.009747 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2) or (x4 >= x1 and x4 <= x2 and y4 >= y1 and y4 <= y2)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2) or (x4 >= x1 and x4 <= x2 and y4 >= y1 and y4 <= y2)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    }
  ],
  "created": 1650392208,
  "object": "edit"
}
2022-04-19 18:16:59.010072 fix syntax errors 3 ['\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2) or (x4 >= x1 and x4 <= x2 and y4 >= y1 and y4 <= y2)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2) or (x4 >= x1 and x4 <= x2 and y4 >= y1 and y4 <= y2)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n']
2022-04-19 18:16:59.010189 size on output set 3
