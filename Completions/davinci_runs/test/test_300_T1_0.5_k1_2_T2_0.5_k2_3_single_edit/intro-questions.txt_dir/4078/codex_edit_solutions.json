["const fs = require('fs');\n\nfs.readFile(process.argv[2], 'utf-8', (err, data) => {\n  if (err) {\n    return console.error(err);\n  }\n  console.log(data.split('\\n').length - 1);\n});\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].strip().split())\n    a = list(map(int, lines[1].strip().split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].strip().split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\nlogging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m): segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0; max_indices = []\n    for i in range(m):\n        diff = 0; indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r]) # 1-indexed\n            indices.append(j + 1)\n        if diff > max_diff: max_diff = diff; max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "var fs = require('fs');\n\nfs.readFile('file.js', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log(data);\n});\n", "import os\n\ndef file_name(file_dir):\n\tfor root, dirs, files in os.walk(file_dir):\n\t\tprint(root) # \u5f53\u524d\u76ee\u5f55\u8def\u5f84\n\t\tprint(dirs) # \u5f53\u524d\u8def\u5f84\u4e0b\u6240\u6709\u5b50\u76ee\u5f55\n\t\tprint(files) # \u5f53\u524d\u8def\u5f84\u4e0b\u6240\u6709\u975e\u76ee\u5f55\u5b50\u6587\u4ef6\n\nfile_name(\"/Users/zheng/Desktop/\")\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 1].split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n\n                continue\n\n            l, r = segments[j]\n\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w+\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=\"output.txt\")\n    args = parser.parse_args()\n\n    main(args)\n"]