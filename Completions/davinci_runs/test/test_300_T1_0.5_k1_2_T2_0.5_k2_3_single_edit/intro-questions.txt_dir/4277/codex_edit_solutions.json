["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),\n                        default=sys.stdin)\n    parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),\n                        default=sys.stdout)\n    args = parser.parse_args()\n\n    with args.infile as fp:\n        with args.outfile as wp:\n            solve(fp, wp)\n\n\ndef solve(fp, wp):\n    n, a, b = map(int, fp.readline().split())\n    print(min(n*a, b), file=wp)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "import sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().rstrip().split())\nif n * a <= b:\n    print(n * a)\nelse:\n    print(b)\n", "import sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n"]