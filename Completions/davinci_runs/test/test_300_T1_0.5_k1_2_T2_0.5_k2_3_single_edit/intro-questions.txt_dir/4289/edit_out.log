2022-04-19 19:15:57.460780 num operations 1
2022-04-19 19:15:57.460796 size on input set 1
2022-04-19 19:15:57.460963 using api key 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
2022-04-19 19:16:00.131224 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\nprint(diff.index(min(diff)) + 1)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\n\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\n\n\nprint(diff.index(min(diff)) + 1)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\n\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\n\nprint(diff.index(min(diff)) + 1)\n"
    }
  ],
  "created": 1650395757,
  "object": "edit"
}
2022-04-19 19:16:00.131491 fix syntax errors 3 ['\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\nprint(diff.index(min(diff)) + 1)\n', '\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\n\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\n\n\nprint(diff.index(min(diff)) + 1)\n', 'import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nt, a = map(int, input().split())\nh = [int(input()) for i in range(n)]\n\ndiff = []\nfor i in range(n):\n    diff.append(abs(t - h[i] * 0.006 - a))\n\nprint(diff.index(min(diff)) + 1)\n']
2022-04-19 19:16:00.131521 size on output set 3
2022-04-19 19:16:00.131540 num operations 1
2022-04-19 19:16:00.131546 size on input set 1
2022-04-19 19:16:00.131712 using api key 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
2022-04-19 19:16:42.029948 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# === import ======================================================================================================================================================\nimport sys\n\n# === const =======================================================================================================================================================\n\n# === functions ===================================================================================================================================================\n\nclass File:\n    def __init__(self):\n        pass\n\n    def __del__(self):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __repr__(self):\n        pass\n\n    def __iter__(self):\n        pass\n\n    def __next__(self):\n        pass\n\n    def __getitem__(self):\n        pass\n\n    def __setitem__(self):\n        pass\n\n    def __len__(self):\n        pass\n\n    def __contains__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __add__(self):\n        pass\n\n    def __sub__(self):\n        pass\n\n    def __mul__(self):\n        pass\n\n    def __truediv__(self):\n        pass\n\n    def __floordiv__(self):\n        pass\n\n    def __mod__(self):\n        pass\n\n    def __pow__(self):\n        pass\n\n    def __lshift__(self):\n        pass\n\n    def __rshift__(self):\n        pass\n\n    def __and__(self):\n        pass\n\n    def __or__(self):\n        pass\n\n    def __xor__(self):\n        pass\n\n    def __invert__(self):\n        pass\n\n    def __neg__(self):\n        pass\n\n    def __pos__(self):\n        pass\n\n    def __abs__(self):\n        pass\n\n    def __int__(self):\n        pass\n\n    def __float__(self):\n        pass\n\n    def __complex__(self):\n        pass\n\n    def __hex__(self):\n        pass\n\n    def __oct__(self):\n        pass\n\n    def __bin__(self):\n        pass\n\n    def __index__(self):\n        pass\n\n    def __enter__(self):\n        pass\n\n    def __exit__(self):\n        pass\n\n    def __iadd__(self):\n        pass\n\n    def __isub__(self):\n        pass\n\n    def __imul__(self):\n        pass\n\n    def __itruediv__(self):\n        pass\n\n    def __ifloordiv__(self):\n        pass\n\n    def __imod__(self):\n        pass\n\n    def __ipow__(self):\n        pass\n\n    def __ilshift__(self):\n        pass\n\n    def __irshift__(self):\n        pass\n\n    def __iand__(self):\n        pass\n\n    def __ior__(self):\n        pass\n\n    def __ixor__(self):\n        pass\n\n    def __getattr__(self):\n        pass\n\n    def __setattr__(self):\n        pass\n\n    def __delattr__(self):\n        pass\n\n    def __getattribute__(self):\n        pass\n\n    def __get__(self):\n        pass\n\n    def __set__(self):\n        pass\n\n    def __delete__(self):\n        pass\n\n    def __init_subclass__(self):\n        pass\n\n    def __instancecheck__(self):\n        pass\n\n    def __subclasscheck__(self):\n        pass\n\n    def __call__(self):\n        pass\n\n    def __new__(self):\n        pass\n\n    def __prepare__(self):\n        pass\n\n    def __getnewargs_ex__(self):\n        pass\n\n    def __getnewargs__(self):\n        pass\n\n    def __reduce_ex__(self):\n        pass\n\n    def __reduce__(self):\n        pass\n\n    def __copy__(self):\n        pass\n\n    def __deepcopy__(self):\n        pass\n\n    def __sizeof__(self):\n        pass\n\n    def __dir__(self):\n        pass\n\n    def __reversed__(self):\n        pass\n\n    def __hash__(self):\n        pass\n\n    def __missing__(self):\n        pass\n\n    def __getinitargs__(self):\n        pass\n\n    def __getstate__(self):\n        pass\n\n    def __setstate__(self):\n        pass\n\n    def __getformat__(self):\n        pass\n\n    def __setformat__(self):\n        pass\n\n    def __repr__(self):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __format__(self):\n        pass\n\n    def __bytes__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __ne__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __bool__(self):\n        pass\n\n    def __getattribute__(self):\n        pass\n\n    def __getattr__(self):\n        pass\n\n    def __setattr__(self):\n        pass\n\n    def __delattr__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __ne__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __init__(self):\n        pass\n\n    def __new__(self):\n        pass\n\n    def __del__(self):\n        pass\n\n    def __call__(self):\n        pass\n\n    def __len__(self):\n        pass\n\n    def __length_hint__(self):\n        pass\n\n    def __getitem__(self):\n        pass\n\n    def __missing__(self):\n        pass\n\n    def __setitem__(self):\n        pass\n\n    def __delitem__(self):\n        pass\n\n    def __iter__(self):\n        pass\n\n    def __reversed__(self):\n        pass\n\n    def __contains__(self):\n        pass\n\n    def __add__(self):\n        pass\n\n    def __sub__(self):\n        pass\n\n    def __mul__(self):\n        pass\n\n    def __matmul__(self):\n        pass\n\n    def __truediv__(self):\n        pass\n\n    def __floordiv__(self):\n        pass\n\n    def __mod__(self):\n        pass\n\n    def\n# === classes =====================================================================================================================================================\n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# === import ======================================================================================================================================================\nimport sys\n\n# === const =======================================================================================================================================================\n\n# === functions ===================================================================================================================================================\n\n# === classes =====================================================================================================================================================\n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport os\n# === import ======================================================================================================================================================\nimport re\nimport math\nimport itertools\nfrom collections import deque\nfrom collections import defaultdict\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\nfrom copy import deepcopy\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom functools import reduce\nimport sys\n\ninf = float(\"inf\")\nmod = 1000000007\nsys.setrecursionlimit(200000)\n\n# === functions ===================================================================================================================================================\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\n# === const =======================================================================================================================================================\n\n# === classes =====================================================================================================================================================\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return \"\\n\".join(\"{}: {}\".format(r, self.members(r)) for r in self.roots())\n \n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650395760,
  "object": "edit"
}
2022-04-19 19:16:42.030407 fix syntax errors 3 ['\n\n# === import ======================================================================================================================================================\nimport sys\n\n# === const =======================================================================================================================================================\n\n# === functions ===================================================================================================================================================\n\nclass File:\n    def __init__(self):\n        pass\n\n    def __del__(self):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __repr__(self):\n        pass\n\n    def __iter__(self):\n        pass\n\n    def __next__(self):\n        pass\n\n    def __getitem__(self):\n        pass\n\n    def __setitem__(self):\n        pass\n\n    def __len__(self):\n        pass\n\n    def __contains__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __add__(self):\n        pass\n\n    def __sub__(self):\n        pass\n\n    def __mul__(self):\n        pass\n\n    def __truediv__(self):\n        pass\n\n    def __floordiv__(self):\n        pass\n\n    def __mod__(self):\n        pass\n\n    def __pow__(self):\n        pass\n\n    def __lshift__(self):\n        pass\n\n    def __rshift__(self):\n        pass\n\n    def __and__(self):\n        pass\n\n    def __or__(self):\n        pass\n\n    def __xor__(self):\n        pass\n\n    def __invert__(self):\n        pass\n\n    def __neg__(self):\n        pass\n\n    def __pos__(self):\n        pass\n\n    def __abs__(self):\n        pass\n\n    def __int__(self):\n        pass\n\n    def __float__(self):\n        pass\n\n    def __complex__(self):\n        pass\n\n    def __hex__(self):\n        pass\n\n    def __oct__(self):\n        pass\n\n    def __bin__(self):\n        pass\n\n    def __index__(self):\n        pass\n\n    def __enter__(self):\n        pass\n\n    def __exit__(self):\n        pass\n\n    def __iadd__(self):\n        pass\n\n    def __isub__(self):\n        pass\n\n    def __imul__(self):\n        pass\n\n    def __itruediv__(self):\n        pass\n\n    def __ifloordiv__(self):\n        pass\n\n    def __imod__(self):\n        pass\n\n    def __ipow__(self):\n        pass\n\n    def __ilshift__(self):\n        pass\n\n    def __irshift__(self):\n        pass\n\n    def __iand__(self):\n        pass\n\n    def __ior__(self):\n        pass\n\n    def __ixor__(self):\n        pass\n\n    def __getattr__(self):\n        pass\n\n    def __setattr__(self):\n        pass\n\n    def __delattr__(self):\n        pass\n\n    def __getattribute__(self):\n        pass\n\n    def __get__(self):\n        pass\n\n    def __set__(self):\n        pass\n\n    def __delete__(self):\n        pass\n\n    def __init_subclass__(self):\n        pass\n\n    def __instancecheck__(self):\n        pass\n\n    def __subclasscheck__(self):\n        pass\n\n    def __call__(self):\n        pass\n\n    def __new__(self):\n        pass\n\n    def __prepare__(self):\n        pass\n\n    def __getnewargs_ex__(self):\n        pass\n\n    def __getnewargs__(self):\n        pass\n\n    def __reduce_ex__(self):\n        pass\n\n    def __reduce__(self):\n        pass\n\n    def __copy__(self):\n        pass\n\n    def __deepcopy__(self):\n        pass\n\n    def __sizeof__(self):\n        pass\n\n    def __dir__(self):\n        pass\n\n    def __reversed__(self):\n        pass\n\n    def __hash__(self):\n        pass\n\n    def __missing__(self):\n        pass\n\n    def __getinitargs__(self):\n        pass\n\n    def __getstate__(self):\n        pass\n\n    def __setstate__(self):\n        pass\n\n    def __getformat__(self):\n        pass\n\n    def __setformat__(self):\n        pass\n\n    def __repr__(self):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __format__(self):\n        pass\n\n    def __bytes__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __ne__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __bool__(self):\n        pass\n\n    def __getattribute__(self):\n        pass\n\n    def __getattr__(self):\n        pass\n\n    def __setattr__(self):\n        pass\n\n    def __delattr__(self):\n        pass\n\n    def __lt__(self):\n        pass\n\n    def __le__(self):\n        pass\n\n    def __eq__(self):\n        pass\n\n    def __ne__(self):\n        pass\n\n    def __gt__(self):\n        pass\n\n    def __ge__(self):\n        pass\n\n    def __init__(self):\n        pass\n\n    def __new__(self):\n        pass\n\n    def __del__(self):\n        pass\n\n    def __call__(self):\n        pass\n\n    def __len__(self):\n        pass\n\n    def __length_hint__(self):\n        pass\n\n    def __getitem__(self):\n        pass\n\n    def __missing__(self):\n        pass\n\n    def __setitem__(self):\n        pass\n\n    def __delitem__(self):\n        pass\n\n    def __iter__(self):\n        pass\n\n    def __reversed__(self):\n        pass\n\n    def __contains__(self):\n        pass\n\n    def __add__(self):\n        pass\n\n    def __sub__(self):\n        pass\n\n    def __mul__(self):\n        pass\n\n    def __matmul__(self):\n        pass\n\n    def __truediv__(self):\n        pass\n\n    def __floordiv__(self):\n        pass\n\n    def __mod__(self):\n        pass\n\n    def\n# === classes =====================================================================================================================================================\n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == "__main__":\n    main()\n', '\n# === import ======================================================================================================================================================\nimport sys\n\n# === const =======================================================================================================================================================\n\n# === functions ===================================================================================================================================================\n\n# === classes =====================================================================================================================================================\n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == "__main__":\n    main()\n', '\n\nimport os\n# === import ======================================================================================================================================================\nimport re\nimport math\nimport itertools\nfrom collections import deque\nfrom collections import defaultdict\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\nfrom copy import deepcopy\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom functools import reduce\nimport sys\n\ninf = float("inf")\nmod = 1000000007\nsys.setrecursionlimit(200000)\n\n# === functions ===================================================================================================================================================\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\n# === const =======================================================================================================================================================\n\n# === classes =====================================================================================================================================================\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return "\\n".join("{}: {}".format(r, self.members(r)) for r in self.roots())\n \n\n# === main ========================================================================================================================================================\ndef main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dif = [abs(t - h[i] * 0.006 - a) for i in range(n)]\n    ans = dif.index(min(dif)) + 1\n    print(ans)\n\n# ==================================================================================\nif __name__ == "__main__":\n    main()\n']
2022-04-19 19:16:42.030525 size on output set 3
