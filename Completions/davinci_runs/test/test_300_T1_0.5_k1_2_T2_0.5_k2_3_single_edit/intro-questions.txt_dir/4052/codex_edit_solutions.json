["\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n            i = 0\n            j = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    print(i, end=' ')\n                    i += 1\n                    count += 1\n        else:\n            print(-1)\n\nmain()\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            print(count)\n            i = 0\n            j = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    print(i, end=' ')\n                    i += 1\n                    count += 1\n        else:\n            print(-1)\n\nmain()\n", "def read_file(filename):\n\tlines = []\n\twith open(filename, 'r', encoding='utf-8-sig') as f:\n\t\tfor line in f:\n\t\t\tlines.append(line.strip())\n\treturn lines\n\ndef convert(lines):\n\tnew = []\n\tperson = None\n\tfor line in lines:\n\t\tif line == 'Allen':\n\t\t\tperson = 'Allen'\n\t\t\tcontinue\n\t\telif line == 'Tom':\n\t\t\tperson = 'Tom'\n\t\t\tcontinue\n\t\tif person:\n\t\t\tnew.append(person + ': ' + line)\n\treturn new\n\ndef write_file(filename, lines):\n\twith open(filename, 'w') as f:\n\t\tfor line in lines:\n\t\t\tf.write(line + '\\n')\n\n\ndef main():\n\tlines = read_file('input.txt')\n\tlines = convert(lines)\n\twrite_file('output.txt', lines)\n\nmain()\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t or n == 1:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for i in range(26):\n            if d.get(chr(ord('a') + i), 0) != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n                print(*indices)\n        else:\n            print(-1)\n\nmain()\n", "var fs = require('fs');\nvar path = require('path');\n\nvar file = {\n  /**\n   * \u5224\u65ad\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u662f\u5426\u5b58\u5728\n   * @param  {String}  filePath \u6587\u4ef6\u6216\u6587\u4ef6\u5939\u8def\u5f84\n   * @return {Boolean}\n   */\n  exists: function(filePath) {\n    return fs.existsSync(filePath);\n  },\n  /**\n   * \u521b\u5efa\u6587\u4ef6\u5939\n   * @param  {String} dir \u6587\u4ef6\u5939\u8def\u5f84\n   * @return {Boolean}\n   */\n  mkdir: function(dir) {\n    if (this.exists(dir)) {\n      return true;\n    }\n\n    if (this.mkdir(path.dirname(dir))) {\n      fs.mkdirSync(dir);\n      return true;\n    }\n  },\n  /**\n   * \u521b\u5efa\u6587\u4ef6\n   * @param  {String} filePath \u6587\u4ef6\u8def\u5f84\n   * @param  {String} content  \u6587\u4ef6\u5185\u5bb9\n   * @return {Boolean}\n   */\n  create: function(filePath, content) {\n    this.mkdir(path.dirname(filePath));\n    fs.writeFileSync(filePath, content, 'utf8');\n    return true;\n  },\n  /**\n   * \u8bfb\u53d6\u6587\u4ef6\n   * @param  {String} filePath \u6587\u4ef6\u8def\u5f84\n   * @return {String}\n   */\n  read: function(filePath) {\n    return fs.readFileSync(filePath, 'utf8');\n  },\n  /**\n   * \u5220\u9664\u6587\u4ef6\n   * @param  {String} filePath \u6587\u4ef6\u8def\u5f84\n   * @return {Boolean}\n   */\n  delete: function(filePath) {\n    if (this.exists(filePath)) {\n      fs.unlinkSync(filePath);\n      return true;\n    }\n    return false;\n  },\n  /**\n   * \u904d\u5386\u6587\u4ef6\u5939\n   * @param  {String} dirPath  \u6587\u4ef6\u5939\u8def\u5f84\n   * @param  {Function} callback \u56de\u8c03\u51fd\u6570\n   * @return {Boolean}\n   */\n  travel: function(dirPath, callback) {\n    if (this.exists(dirPath)) {\n      fs.readdirSync(dirPath).forEach(function(file) {\n        var pathname = path.join(dirPath, file);\n\n        if (fs.statSync(pathname).isDirectory()) {\n          this.travel(pathname, callback);\n        } else {\n          callback(pathname);\n        }\n      }.bind(this));\n    }\n  }\n};\n\nmodule.exports = file;\n", "<?php\nrequire_once(\"lib/config.php\");\nrequire_once(\"lib/funcs.php\");\nrequire_once(\"lib/file.php\");\n\n$file = new File();\n$file->create(\"teste.txt\", \"teste\");\n\n?>\n"]