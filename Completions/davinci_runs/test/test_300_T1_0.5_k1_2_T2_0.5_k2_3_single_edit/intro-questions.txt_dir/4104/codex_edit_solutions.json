["\n\ndef main():\n    expression = input()\n    expression = expression.split('+')\n    result = 0\n    for i in expression:\n        i = i.split('-')\n        for j in i:\n            result += int(j)\n        result -= len(i) - 1\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    expression = input()\n    result = eval(expression) #eval() is a dangerous function\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    expression = input()\n    expression = expression.split('-')\n    result = 0\n    for i in expression:\n        i = i.split('+')\n        for j in i:\n            result += int(j)\n        result -= 1\n    print(result)\n\nmain()\n", "\n\ndef main():\n    expression = input(\"enter expression: \")\n    result = eval(expression) #eval is a function that evaluates an expression\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    expression = input('Input expression: ')\n    for i in range(len(expression)):\n        expression[i] = expression[i].split('-')\n    expression = expression.split('+')\n    result = 0\n    for i in expression:\n        for j in range(len(i)):\n            result += int(i[j])\n        result -= len(i) - 1 \n    print(result)\n\nmain()\n"]