2022-04-19 18:19:01.423346 num operations 1
2022-04-19 18:19:01.423357 size on input set 1
2022-04-19 18:19:01.423506 using api key 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
2022-04-19 18:19:04.829580 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\ndef get_input():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m or n > m or m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650392341,
  "object": "edit"
}
2022-04-19 18:19:04.829842 fix syntax errors 3 ["import sys\n\n\ndef get_input():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m or n > m or m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-19 18:19:04.829878 size on output set 3
2022-04-19 18:19:04.829890 num operations 1
2022-04-19 18:19:04.829896 size on input set 1
2022-04-19 18:19:04.830066 using api key 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
2022-04-19 18:19:07.389241 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----#\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n#-----Solution-------\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650392344,
  "object": "edit"
}
2022-04-19 18:19:07.389480 fix syntax errors 3 ['\n\n#-----Solution-----#\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n#-----Solution-------\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-19 18:19:07.389518 size on output set 3
