["\n\ndef find_blocks(a, n):\n\td = {}\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\ts = sum(a[i:j+1])\n\t\t\tif s not in d:\n\t\t\t\td[s] = [(i, j)]\n\t\t\telse:\n\t\t\t\td[s].append((i, j))\n\tres = []\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\ts = sum(a[i:j+1])\n\t\t\tif s in d:\n\t\t\t\tfor l, r in d[s]:\n\t\t\t\t\tif l > j or r < i:\n\t\t\t\t\t\tres.append((i, j))\n\treturn res\n\ndef main():\n\tn = int(input())\n\ta = [int(s) for s in input().split()]\n\tres = find_blocks(a, n)\n\tprint(len(res))\n\tfor l, r in res:\n\t\tprint(l+1, r+1)\n\nif __name__ == \"__main__\":\n\tmain()\n", "#!/usr/bin/env python3\n\n\n\ndef main():\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    print(n)\n    print(' '.join(map(str, a)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sums = [0]\n    for i in a:\n        sums.append(sums[-1] + i)\n    sums.append(sums[-1])\n    blocks = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            blocks.append([i, j, sums[j] - sums[i]])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1])\n    res = []\n    while len(blocks) > 0:\n        i = blocks[0][0]\n        j = blocks[0][1]\n        blocks.pop(0)\n        res.append([i, j])\n        for k in range(len(blocks)):\n            if blocks[k][0] < j:\n                blocks.pop(k)\n                k -= 1\n    print(len(res))\n    for i in res:\n        print(i[0] + 1, i[1])\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sums = [0]\n    for i in a:\n        sums.append(sums[-1] + i)\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            blocks.append([i, j, sums[j] - sums[i]])\n    blocks.sort(key=lambda x: x[2])\n    blocks.sort(key=lambda x: x[1])\n    res = []\n    while len(blocks) > 0:\n        i = blocks[0][0]\n        j = blocks[0][1]\n        blocks.pop(0)\n        res.append([i, j])\n        for k in range(len(blocks)):\n            if blocks[k][0] < j:\n                blocks.pop(k)\n                k -= 1\n    print(len(res))\n    for i in res:\n        print(i[0] + 1, i[1])\n\nmain()\n", "\n\ndef find_blocks(a):\n    n = len(a)\n    d = dict()\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(a[i:j+1])\n            if s not in d:\n                d[s] = [(i, j)]\n            else:\n                d[s].append((i, j))\n    res = list()\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(a[i:j+1])\n            if s in d:\n                for l, r in d[s]:\n                    if l > j or r < i:\n                        res.append((i, j))\n    return res\n\ndef main():\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    res = find_blocks(a)\n    print(len(res))\n    for l, r in res:\n        print(l+1, r+1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sums = []\n    sums.append(0)\n    for i in a:\n        sums.append(sums[-1] + i)\n    sums.append(sums[-1])\n    blocks = []   \n    for i in range(n):\n        for j in range(i+1, n+1):\n            blocks.append([i, j, sums[j] - sums[i]]) \n    blocks.sort(key=lambda x: x[2])\n    for i in blocks:\n        print(i)\n    blocks.sort(key=lambda x: x[1])\n    res = []\n    while len(blocks) > 0:\n        i = blocks[0][0]\n        j = blocks[0][1]\n        blocks.pop(0)\n        res.append([i, j])\n        for k in range(len(blocks)-1, -1, -1):\n            if blocks[k][0] < j:\n                blocks.pop(k)\n                #k -= 1\n    print(res)\n    print(len(res))\n    for i in res:\n        print(i[0] + 1, i[1])\n\nmain()\n"]