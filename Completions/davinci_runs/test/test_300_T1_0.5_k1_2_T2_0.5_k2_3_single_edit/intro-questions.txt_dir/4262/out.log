2022-04-09 19:25:44.514744 """
We have two permutations P and Q of size N (that is, P and Q are both rearrangements of (1,~2,~...,~N)).
There are N! possible permutations of size N. Among them, let P and Q be the a-th and b-th lexicographically smallest permutations, respectively. Find |a - b|.

-----Notes-----
For two sequences X and Y, X is said to be lexicographically smaller than Y if and only if there exists an integer k such that X_i = Y_i~(1 \leq i < k) and X_k < Y_k.

-----Constraints-----
 - 2 \leq N \leq 8
 - P and Q are permutations of size N.

-----Input-----
Input is given from Standard Input in the following format:
N
P_1 P_2 ... P_N
Q_1 Q_2 ... Q_N

-----Output-----
Print |a - b|.

-----Sample Input-----
3
1 3 2
3 1 2

-----Sample Output-----
3

There are 6 permutations of size 3: (1,~2,~3), (1,~3,~2), (2,~1,~3), (2,~3,~1), (3,~1,~2), and (3,~2,~1). Among them, (1,~3,~2) and (3,~1,~2) come 2-nd and 5-th in lexicographical order, so the answer is |2 - 5| = 3.
"""
2022-04-09 19:25:44.514764 --------------------------
2022-04-09 19:25:59.915879 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))"
    }
  ],
  "created": 1649546745,
  "id": "cmpl-4vEkbGOixm5vfPYjuyihQ5snbasjR",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 19:25:59.916291 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 19:25:59.916330 REASON stop
2022-04-09 19:25:59.917647 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))"
}
2022-04-09 19:25:59.917725 REASON stop
