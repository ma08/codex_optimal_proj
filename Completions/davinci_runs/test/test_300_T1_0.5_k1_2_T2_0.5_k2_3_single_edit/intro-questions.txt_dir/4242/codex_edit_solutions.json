["\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nA, B, K = map(int, input().split())\nprint(find_num(A, B, K))\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    if len(common_factors) < K:\n        return -1\n    else:\n        return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "\nimport math\n\ndef gcd(a, b):\n\tif a < b:\n\t\ta, b = b, a\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n\na, b, k = map(int, input().split())\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n\tif g % i == 0:\n\t\tdivisors.append(i)\n\t\tif i != g // i:\n\t\t\tdivisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n != 1:\n        factors.append(n)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[K-1]\n\nprint(find_num(A, B, K))\n"]