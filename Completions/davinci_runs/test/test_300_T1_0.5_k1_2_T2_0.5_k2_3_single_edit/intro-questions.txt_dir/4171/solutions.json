["# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nfrom collections import deque\nimport math\nimport copy\n \n#T = int(input())\n#N = int(input())\n#s1 = input()\n#s2 = input()\nN,K = [int(x) for x in stdin.readline().split()]\narr = [int(x) for x in stdin.readline().split()]\narr.sort()\n\nfreq = {}\n\nfor i in range(N):\n    num = arr[i]\n    if num not in freq:\n        freq[num] = []\n        \n    round = 0\n    freq[num].append(0)\n    while num!=0:\n        round += 1\n        num = num//2\n        if num not in freq:\n            freq[num] = []\n            \n        freq[num].append(round)\n\nres = 999999999999\nfor key in freq:\n    if len(freq[key])<K:\n        continue\n    else:\n        s = sum(freq[key][:K])\n        res = min(res,s)\n        \nprint(res)\n        \n", "import math\nfrom heapq import merge\nn, k = list(map(int, input().split()))\nmaxN = 2 * (10 ** 5) + 10\ncnt = [list() for i in range(0, maxN + 1)]\na = list(map(int, input().split()))\nfor c in a:\n    cnt[c].append(0)\nbest = 1000000000\nfor i in range(maxN - 1, -1, -1):\n    if 2 * i < maxN:\n        cnt[2 * i] = [x + 1 for x in cnt[2 * i]]\n        for p in cnt[2 * i]:\n            p += 1\n    if 2 * i + 1 < maxN:\n        cnt[2 * i + 1] = [x + 1 for x in cnt[2 * i + 1]]\n    if 2 * i < maxN:\n        cnt[i] = list(merge(cnt[i], list(merge(cnt[2 * i], cnt[2 * i + 1]))))\n    while len(cnt[i]) > k:\n        cnt[i].pop()\n    if len(cnt[i]) == k:\n        best = min(best, sum(cnt[i]))\nprint(best)\n", "n, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ncnt = dict()\nsum = dict()\n\nres = n * 20\n\nfor x in a:\n    y = x\n    cur = 0\n    while True:\n        if y == 0:\n            break\n        if y not in cnt:\n            cnt[y] = 0\n            sum[y] = 0\n        if cnt[y] < k:\n            cnt[y] += 1\n            sum[y] += cur\n            if cnt[y] == k:\n                res = min(res, sum[y])\n        y >>= 1\n        cur += 1\nprint(res)", "n,k=list(map(int,input().split()))\nit=list(map(int,input().split()))\na=[[] for i in range(n)]\nss={}\nfor i in range(n):\n    j=it[i]\n    a[i]=[j]\n    try:\n        ss[j].append(0)\n    except:\n        ss[j]=[0]\n    st=0\n    while True:\n        st+=1\n        j=j//2\n        try:\n            ss[j].append(st)\n        except:\n            ss[j]=[st]\n        a[i].append(j)\n        if j==0:\n            break\ntt=ss.copy()\nmi=10**10\nfor i in ss:\n    if len(ss[i])>=k:\n        tt[i].sort()\n        mi=min(mi,sum(tt[i][:k]))\nprint(mi)\n\n        \n        \n            \n", "\"\"\"\nuseful stuff \nx= list(map(int,input().split()))\nx =[int (e) for e in input().split()]\n\nswap x,y=y,x\nsubstring a[x:y] mean x to y-1\n\nprint list\nprint(*list)\nprint(' '.join(map(str,listname)))\n\nstart from 1 to n\nfor i in range(1,n+1)\n\nDon't froget dumb stuff like:\nif: \nfor:\nwhile: \nand tab\ndef doesn't require data type\n\"\"\"\nz= []\na = []\nfor i in range (200010):\n    a.append([])\nn,k = [int (e) for e in input().split()]\nb = [int (e) for e in input().split()]\nfor x in b:\n    c=x\n    ct=0\n    a[x].append(0)\n    while(c!=0):\n        c>>=1\n        ct+=1\n        a[c].append(ct)\nans=10000000000\nfor i in range(200000):\n    if(len(a[i])<k):\n        continue\n    a[i].sort()\n    s=0\n    for j in range(k):\n        s+=a[i][j]\n    ans=min(ans,s)\nprint(ans)\n", "n, k = [int(x) for x in input().split()]\nnums = sorted([int(x) for x in input().split()])\ncount = [0 for _ in range(2 * 100000 + 10)]\nops = [0 for _ in range(2 * 100000 + 10)]\nfor num in nums:\n    op = 0\n    while (num > 0):\n        ops[num] += op if count[num] < k else 0\n        count[num] += 1\n        num = num // 2\n        op += 1\n    ops[num] += op if count[num] < k else 0\n    count[num] += 1\n\nminn = 0\nminop = ops[0]\nfor i in range(2 * 100000 + 1):\n    if (count[i] >= k and ops[i] < minop):\n        minn = i\n        minop = ops[i]\n\nprint(minop)\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nans=[[0,0] for i in range(200001)]\na.sort()\nfor i in range(n):\n    ans[a[i]][0]+=1\nfor i in range(n):\n    s=a[i]\n    d=1\n    while (s>0):\n        s=s//2\n        if ans[s][0]<k:\n            ans[s][0]+=1\n            ans[s][1]+=d\n        d+=1\nmi=100000000\nfor i in range(len(ans)):\n    if ans[i][0]>=k:\n        if ans[i][1]<mi:\n            mi=ans[i][1]\nprint(mi)", "n, k = [int(i) for i in input().split()]\na = sorted([int(i) for i in input().split()])\n\nnumbers = [[0, 0] for i in range(a[-1]+1)]\n\nfor i in range(n):\n    op = 0\n    \n    while a[i] > 0:\n        if numbers[a[i]][0] < k:\n            numbers[a[i]][0] += 1\n            numbers[a[i]][1] += op\n        \n        a[i] //= 2\n        op += 1\n        \n    numbers[0][0] += 1\n    numbers[0][1] += op\n    \nans = numbers[0][1]\n\nfor number in numbers:\n    if number[0] >= k and number[1] < ans: ans = number[1]\n        \nprint(ans)", "MOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\nn, m = I()\nl = I()\nl.sort()\nans = MOD\no = [0]*300000\nd = [0]*300000\nfor i in range(n):\n\tk = l[i]\n\to[k] += 1\n\tif o[k] == m:\n\t\t\tans = min(ans, d[k])\n\ti = 0\n\twhile k > 0:\n\t\ti += 1\n\t\tk //= 2\n\t\to[k] += 1\n\t\td[k] += i\n\t\tif o[k] == m:\n\t\t\tans = min(ans, d[k])\n\nprint(ans)", "from math import log\n\n\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nans = 0\na = [[] for i in range(200001)]\nfor i in range(n):\n    x = arr[i]\n    l = 0\n    while True:\n        a[x].append(l)\n        if x == 0:\n            break\n        x //= 2\n        l += 1\nmn = 1000000000\nfor i in range(len(a)):\n    a[i].sort()\n    if len(a[i]) >= k:\n        mn = min(mn, sum(a[i][:k]))\nprint(mn)\n", "import collections\nn,k=list(map(int,input().split()))\nA=[int(i) for i in input().split()]\nans=float(\"inf\")\nD1,D2=collections.defaultdict(list),collections.defaultdict(int)\nfor i in range(n):\n  a=A[i]\n  c=0\n  D1[a].append(c)\n  D2[a]+=1\n  while a>0:\n    a//=2\n    c+=1\n    D1[a].append(c)\n    D2[a]+=1\nfor i in range(max(A)+1):\n  if D2[i]>=k:\n    D1[i].sort()\n    ans=min(ans,sum(D1[i][:k]))\nprint(ans)\n\n", "'''input\n5 3\n1 2 3 3 3\n'''\nfrom collections import defaultdict as dd\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nd = dd(list)\nfor x in a:\n\ti = 0\n\twhile(x):\n\t\td[x].append(i)\n\t\tx //= 2\n\t\ti += 1\nans = 999999999999\nfor i in d:\n\tif len(d[i]) >= k:\n\t\td[i].sort()\n\t\tans = min(ans, sum(d[i][0:k]))\nprint(ans)", "from collections import defaultdict as DD\nimport sys\nMOD=pow(10,9)+7\n\ndef IN(f=0):\n    if f==0:\n        return ( [int(i) for i in sys.stdin.readline().split()] )\n    else:\n        return ( int(sys.stdin.readline()) )\n\nn,k=IN()\na=IN()\nb=[]\n\nd=DD(list)\nfor x in a:\n    i=0\n    while(x!=0):\n        d[x].append(i)\n        x=x//2\n        i+=1\n    d[0].append(i)\n    #print(d)\n\nans=9999999999999\nfor x in d:\n    if len(d[x])>=k:\n        r=d[x]\n        r.sort()\n        ans=min(ans,sum(r[:k]))\nprint(ans)\n        \n\n\n", "n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nvalue_lists = [[] for _ in range(2 * (10**5) + 1)]\nfor val in arr:\n    turn = 0\n    while val != 1:\n        value_lists[val].append(turn)\n        val //= 2\n        turn += 1\n    value_lists[val].append(turn)\nmindist = 999999999\nfor turns_val in value_lists:\n    if len(turns_val) < k:\n        continue\n    turns_val.sort()\n    mindist = min(mindist, sum(turns_val[:k]))\nprint(mindist)\n", "n, k = map(int,input().split())\nl = list(map(int,input().split()))\nd = {}\nfor liczba in l:\n    ll = liczba\n    while ll > 0:\n        d[ll] = []\n        ll //= 2\nfor liczba in l:\n    i = 0\n    ll = liczba\n    while ll > 0:\n        d[ll].append(i)\n        ll //= 2\n        i += 1\nwyn = 1000000000\nfor number in d:\n    if len(d[number]) < k:\n        continue\n    a = d[number].copy()\n    a.sort()\n    wyn = min(wyn, sum(a[:k]))\nprint(wyn)", "ans = {}\nn,k = (int(s) for s in input().split())\nl = [int(s) for s in input().split()]\nl.sort()\n\nfor i in range(n):\n    x = l[i]\n    count = 0\n    while (x>0):\n        if x in ans:\n            if ans[x][0] <k:\n                ans[x][0]+=1\n                ans[x][1]+=count\n        else:\n            ans[x] = [1, count]\n        count+=1\n        x = x//2\n    if 0 in ans:\n        if ans[0][0] < k:\n            ans[0][0] += 1\n            ans[0][1] += count\n    else:\n        ans[x] = [1, count]\n# print(ans)\nansm = 1000000000007\nfor i in ans:\n    if ans[i][0]>=k:\n        ansm = min(ansm, ans[i][1])\nprint(ansm)\n", "b = {}\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb[0] = []\nfor x in a:\n    j = 0\n    while(x > 0):\n        if(x in b):\n            b[x].append(j)\n        else:\n            b[x] = [j]\n        x //= 2\n        j += 1\n    b[0].append(j)\n\nans = 10**10\n\nfor i in b:\n    b[i].sort()\n    if(len(b[i]) >= k):\n        ans = min(sum(b[i][:k]), ans)\n\nprint(ans)\n", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nG = []\nfor _ in range(2 * 10 ** 5 + 100):\n    G.append([])\nc = 0\nfor i in A:\n    if len(G[i]) < k:\n        G[i].append(0)\nwhile True:\n    c += 1\n    f = True\n    for i in range(n):\n        if A[i]:\n            A[i] //= 2\n            if len(G[A[i]]) < k:\n                G[A[i]].append(c)\n        if A[i]:\n            f = False\n    if f:\n        break\nans = 10 ** 9\nfor t in G:\n    if len(t) == k:\n        ans = min(ans, sum(t))\nprint(ans)\n", "from sys import stdin\n\ninput = stdin.readline\ninf = 1000 * 1000 * 1000\n\nn, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\n\nb = []\nfor i in range(200001):\n    b.append([])\n\nfor i in a:\n    ctr = 0\n    while i > 0:\n        b[i].append(ctr)\n        i //= 2\n        ctr += 1\n    b[i].append(ctr)\n\nres = inf\nfor i in b:\n    if len(i) >= k:\n        i.sort()\n        tmp = 0\n        for j in range(k):\n            tmp += i[j]\n        res = min(res, tmp)\n\n\nprint(res)\n", "def deep(mas, pref, k):\n    deepmas = []\n    s = 0\n    for el in mas:\n        if el[:len(pref)] == pref:\n            deepmas.append(el)\n            if len(deepmas) <= k:\n                s += len(el) - len(pref)\n    if len(deepmas) >= k:\n        return min(s, deep(deepmas, pref + '0', k), deep(deepmas, pref + '1', k))\n    else:\n        return 20000000000000000\n\nn, k = list(map(int, input().split()))\nmas = list(map(int, input().split()))\nmas.sort()\nmas = list(map(bin, mas))\npref = '0b'\nans = deep(mas, pref, k)\nprint(ans)\n", "from sys import stdin,stdout\n\ndef __starting_point():\n    n,k=list(map(int,stdin.readline().split()))\n    a=list(map(int,stdin.readline().split()))\n    num=[[] for i in range(200005)]\n    ans=200000*100\n    for x in a:\n        cnt=0\n        while x>0:\n            num[x].append(cnt)\n            x//=2\n            cnt+=1\n        num[x].append(cnt)\n    for i in range(200001):\n        if len(num[i])<k:\n            continue\n        num[i].sort()\n        cnt=0\n        for j in range(k):\n            cnt+=num[i][j]\n        ans=min(ans,cnt)\n    stdout.write('%d\\n'%(ans))\n\n\n\n__starting_point()", "from collections import *\nn,k = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nA.sort()\nd = defaultdict(lambda: [0,0])\nfor i in A:\n\tnum = i\n\tstp = 0\n\twhile num>0:\n\t\tif d[num][0]<k:\n\t\t\td[num][0]+=1\n\t\t\td[num][1]+=stp\n\t\tnum = num//2\n\t\tstp +=1\n\tif d[num][0]<k:\n\t\t\td[num][0]+=1\n\t\t\td[num][1]+=stp\n\nmn = 10**20\nfor i in d:\n\tif(d[i][0]>=k):\n\t\tmn = min(d[i][1],mn)\n\nprint(mn)", "MAX = 2 * 10 ** 5\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = sorted(map(int, input().split()))\n\n    ops = [0] * (MAX + 1)\n    ks = [0] * (MAX + 1)\n\n    for x in a:\n        c = x\n        j = 0\n\n        while True:\n            if ks[c] < k:\n                ops[c] += j\n                ks[c] += 1\n\n            if c == 0:\n                break\n\n            c //= 2\n            j += 1\n\n    min_ops = float('inf')\n    for i in range(MAX + 1):\n        if ks[i] == k:\n            min_ops = min(ops[i], min_ops)\n\n    print(min_ops)\n\n\nmain()\n", "def main():\n    n,k = list(map(int,input().split()))\n    arr = list(map(int,input().split()))\n    nums = [[0 for i in range(2)] for j in range(2*10**5+1)]\n    arr.sort()\n    for i in arr:\n        moves = 0\n        #print('start')\n        while i >= 0:\n            if nums[i][0] == k:\n                break\n            nums[i][0] += 1\n            nums[i][1] += moves\n            moves += 1\n            i = i//2\n            if i == 0:\n                nums[i][0] += 1\n                nums[i][1] += moves\n                break\n\n    min_moves = float('inf')\n    for i in range(2*10**5+1):\n        if nums[i][0] >= k:\n            min_moves = min(min_moves,nums[i][1])\n\n    print(min_moves)\n\n\nmain()\n", "n,k1=map(int,input().split())\nli=list(map(int,input().split()))\nd={}\nfor i in li:\n    k=0\n    while i!=0:\n        try:\n            d[i].append(k)\n        except KeyError:\n            d[i]=[k]\n            \n        k+=1\n        i=i//2\nmi=100000000\nfor i in d.values():\n    if len(i)>=k1:\n        i.sort()\n        mi=min(mi,sum(i[:k1]))\nprint(mi)"]