["K = int(input())\nS = input()\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[0:K] + '...')", "k=int(input())\nw=input()\nif len(w)<=k:\n    print(w)\nelse:\n    print((w[:k]+\"...\"))\n", "k = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print((s[:k] + '...'))\n", "a=int(input())\ns=input()\nif len(s)>a:\n   print(s[:a]+\"...\")\nelse:\n   print(s)", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print((S[:K] + '...'))\n", "k = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + '...')", "def answer(k:int, s:str) -> str:\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'\n\nk = int(input())\ns = input()\n\nprint(answer(k, s))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nK = ni()\nS = ns()\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + '...')", "K = int(input())\nS = str(input())\n\nif len(S) <= K:\n    print(S)\nelse:\n   print((S[0:K] + '...'))\n", "K, S = int(input()), input()\n\nif K < len(S):\n    print(f\"{S[:K]}...\")\nelse:\n    print(S)", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nk = int(input())\ns = input()\n\ntmp = 0\nres = 0\n\nif len(s) <= k:\n    res = s\nelse:\n    res = s[:k] + \"...\"\n\nprint(res)\n", "from collections import Counter\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\nmod = 1000000007\ninf = int(1e18)\n\n\ndef main():\n    k = int(input())\n    s = input()\n    if len(s) > k:\n        print((s[:k] + \"...\"))\n    else:\n        print(s)\n\nmain()\n", "k=int(input())\ns=input()\nif len(s) <= k:\n  print(s)\nelse:\n  print(s[:k]+'...')", "def main() -> None:\n    k = int(input())\n    s = input()\n\n    print((s if len(s) <= k else s[:k]+'...'))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "k = int(input())\ns = input()\n\nif len(s) <= k:\n  print(s)\nelse:\n  print((s[:k] + \"...\"))\n", "K=int(input())\nS= input()\n\nif len(S)<=K:\n    print(S)\nelse:\n    print(S[:K]+'...')", "K = int(input())\nS = input()\nN = len(S)\n\nprint(S[:K] + \"...\" if len(S) > K else S)", "k=int(input())\ns=input()\n\nif len(s)<=k:\n    print(s)\nelse:\n    print(s[:k]+'...')", "K = int(input())\nS = str(input())\nif len(S) <= K:\n  print(S)\nelse:\n  print(S[0:K]+'...')", "K = int(input())\nS = str(input())\n\nSK = S[0: (K)]\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(SK + '...')", "K = int(input())\nS = input()\n\n\nprint(S if len(S) <= K else S[:K]+\"...\")", "K = int(input())\nS = input()\nT = \"\"\nif(K >= len(S)):\n    print(S)\nelse:\n    for i in range(K):\n        T += S[i]\n    print(T + \"...\")", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nK = int(input())\nS = input()\n\nprint((S[:min(len(S), K)] + (\"...\" if len(S) > K else \"\")))\n", "K = int(input())\nS = input()\nprint(S if len(S) <= K else S[:K]+'...')", "k = int(input())\n\ns = input()\n\nans = \"\"\n\nif len(s) <= k:\n    print(s)    \nelse:\n    for i in range(k):\n        ans += s[i]\n    print(ans + \"...\")", "K=int (input())\nS=input()\n\nif len(S)<=K:\n\tprint(S)\nelse:\n\tprint(S[:K]+'...')", "k = int(input())\ns = input()\nif len(s) <= k:\n  print(s)\nelse:\n  print((s[:k] + \"...\"))\n", "k = int(input())\ns = input()\nif len(s) <= k:\n    print(s)\nelse:\n    print((s[:k]+'...'))\n", "num= int(input())\nline=input()\nlines=list(line)\nif len(lines)<=num:\n    print(line)\nelse:\n    for i in range(num):\n        print(lines[i],end=\"\")\n    print(\"...\")\n    \n", "k = int(input())\ns = input()\nif len(s) <= k:\n  print(s)\nelse:\n  print(s[:k] + \"...\")", "integer = int(input())\nstring = input()\nif len(string) > integer:\n    print(string[:integer] + '...')\nelse:\n    print(string)", "k=int(input())\ns=input()\nif len(s)<=k:\n    print(s)\nelse:\n    for i in range(k):\n        print(s[i],end=\"\")\n    print(\"...\",end=\"\")", "k = int(input())\ns = input()\n\nif(len(s) <= k): print(s)\nelse:\n  print(s[0:k]+\"...\")", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    string = S[0:K] + \"...\"\n    print(string)", "K = int(input())\nS = input()\nif len(S) <= K:\n    print(S)\n    return\nelse:\n    print(S[:K] + '...')\n    return", "K = int(input())\nS = input()\ncharacters = len(S)\n\nif characters <= K:\n    print(S)\nelif characters > K:\n    print(S[:K] + \"...\")", "K = int(input())\nS = input()\n\ns_num = len(S)\n\nif K >= s_num:\n    print(S)\nelse:\n    print(S[:K] + \"...\")", "k = int(input())\ns = str(input())\nif len(s)<= k:\n    print(s)\nelse:\n    print(s[0:k] + \"...\")", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + \"...\")", "n=int(input())\ntxt=input()\n# print(type(n))\nif len(txt)<=n:\n\tprint(txt)\nelse:\n\tprint((\"%s...\"%txt[:n]))\n", "# S \u306e\u9577\u3055\u304c K \u4ee5\u4e0b\u3067\u3042\u308c\u3070\u3001S \u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# S \u306e\u9577\u3055\u304c K \u3092\u4e0a\u56de\u3063\u3066\u3044\u308b\u306a\u3089\u3070\u3001\n# \u5148\u982d K \u6587\u5b57\u3060\u3051\u3092\u5207\u308a\u51fa\u3057\u3001\u672b\u5c3e\u306b ... \u3092\u4ed8\u52a0\u3057\u3066\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# K \u306f 1 \u4ee5\u4e0a 100 \u4ee5\u4e0b\u306e\u6574\u6570\n# S \u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217\n# S \u306e\u9577\u3055\u306f 1 \u4ee5\u4e0a 100 \u4ee5\u4e0b\n\nK = int(input())\nS = str(input())\n\nif K >= len(S):\n    print(S)\nelse:\n    print((S[0:K] + '...'))\n", "K=int(input());S=input();L=len(S);print(S[:min(K,L)]+\"...\"*(K<L))", "K = int(input())\nS = str(input())\n\nif len(S) <= K:\n    print(S)\nelse:\n    ans = S[:K] + '...'\n    print(ans)", "n = int(input())\nif n < 1 or n > 100:\n    return\n\nn1 = input()\n\ni = len(n1)\nif i < 1 or i > 100:\n    return\n\nn2 = '...'\n\nif n >= i:\n    print(n1)\nelse:\n    print(n1[:n] + n2)", "K=int(input())\nS=input()\n\nif len(S)>K:\n  s=S[:K]+\"...\"\n  print(s)\nelse:\n  print(S)", "K = int(input())\nS = input()\nprint(S[:K] + '...' if len(S) > K else S)", "k = int(input())\ns = input()\nif k >= len(s):\n    print(s)\nelse:\n    s = s[:k]+'...'\n    print(s)\n", "#                               #\n    # author : samars_diary #\n    # 18-09-2020 \u2502 22:13:22 #\n#                               #\n\nimport sys, os.path\n\n#if(os.path.exists('input.txt')):\n    #sys.stdin = open('input.txt',\"r\")\n    #sys.stdout = open('output.txt',\"w\")\n\nsys.setrecursionlimit(10 ** 5)\n\ndef mod(): return 10**9+7\ndef i(): return sys.stdin.readline().strip()\ndef ii(): return int(sys.stdin.readline())\ndef li(): return list(sys.stdin.readline().strip())\ndef mii(): return map(int, sys.stdin.readline().split())\ndef lii(): return list(map(int, sys.stdin.readline().strip().split()))\n\n#print=sys.stdout.write\n\ndef solve():\n    k=ii();s=i()\n    if len(list(s))<=k: print(s)\n    else: print(s[:k]+'...')\n\nfor _ in range(1):\n    solve()", "k = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print((s[:k]+'...'))\n", "K=int(input())\nS=input()\nif K>=len(S):\n    print(S)\nelse:\n    for i in range(K):\n        print(S[i],end='')\n    print(\"...\")", "K = int(input())\nS = str(input())\n\nN = len(S)\nif(N <= K):\n  print(S)\nelse:\n  print(S[:K] + '...')", "k = int(input())\ns = input()\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + '...')", "\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(map(int, input().split()))\ndef i_row(N): return [int(input()) for _ in range(N)]\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\n\nk=i_input()\ns=input()\nif len(s)<=k:\n    print(s)\nelse:\n    print(s[0:k]+\"...\")", "K=int(input())\nS=input()\n\nif len(S)<=K:\n    print(S)\nelse:\n    print((S[0:K]+\"...\"))\n", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + '...')", "k = int(input())\ns = input()\n\nif len(s) > k:\n  print(s[0:k]+\"...\")\nelse:\n  print(s)", "k = int(input())\ns = str(input())\n\nif len(s) > k:\n    s = s[:k] + '...'\n\nprint(s)", "cnt = int(input())\nstring = input()\n\nif len(string) <= cnt:\n    print(string)\nelse:\n    print(string[:cnt] + \"...\")", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print((S[:K] + '...'))\n", "K = int(input())\nS = input()\nif len(S) <= K:\n  print(S)\nelse:\n  print('{}...'.format(S[:K]))", "K = int(input())\nS = input()\nwords = int(len(S))\n\nif K < words:\n    print(S[0:K] + \"...\")\n\nelse:\n    print(S)", "k=int(input())\ns=input()\nif len(s)>k:\n  print(s[:k]+\"...\")\nelse:\n  print(s)", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[0:K]+\"...\")", "K=int(input())\nS=input()\nif len(S)<=K:\n    print(S)\nelse:\n    for i in range(K):\n        print(S[i],end=\"\")\n    print(\"...\")", "K = int(input())\nS = input()\nprint(S[:K]+\"...\" if len(S) > K else S)", "K = int(input())\nS = str(input())\nSS = str()\ni = 0\n\nif len(S) >K:\n  for i in range(K):\n    SS += S[i]\n    i += 1\n\n  print(SS + '...')\n\nelse:\n  print(S)", "k=int(input())\ns=list(input())\nss=(\"\").join(s)\nS=len(s)\nsss=(\"\").join(s[0:k])\nif S<=k:\n  print(ss)\nelse:\n  print(sss+(\"...\"))", "k = int(input())\ns = input()\nif len(s) <= k:\n    print(s)\nelse:\n    for i in range(k):\n        print(s[i], end=\"\")\n    print(\"...\")        \n", "K = int(input())\nS = input()\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[0:K] + '...')", "k = int(input())\ns = input()\nif len(s) <= k:\n    print(s)\nelse:\n    print((s[:k]+'...'))\n", "K = int(input())\nS = input()\nwords = int(len(S))\n\nif K < words:\n    print(S[0:K] + \"...\")\n\nelse:\n    print(S)", "k=int(input())\ns=input()\nif len(s)<=k:\n    print(s)\nelse:\n    print(s[:k]+\"...\")", "k,s=int(input()),input();print([s[:k]+'...',s][len(s)<=k])", "k=int(input())\ns=input()\nif len(s)<=k:\n  print(s)\nelse:\n  print(s[:k]+\"...\")", "k = int(input())\ns = input()\nif len(s) > k:\n    print (s[: k] + \"...\")\nelse:\n    print(s)", "k = int(input())\ns = input()\n\nl = len(s)\n\nif l > k:\n    print((s[0:k] + '...'))\nelse:\n    print(s)\n", "k = int(input())\ns = str(input())\n\nif len(s) <= k:\n    print(s)\nelse:\n    ans = s[0:k] + '...'\n    print(ans)", "K = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K]+\"...\")\nelse:\n    print(S)", "k = int(input())\ns = input()\nif len(s) <= k :\n    print(s)\nelse :\n    print(s[:k],end='...')", "k = int(input())\ns = input()\n\nif k < len(s):\n    print((s[:k]+'...'))\nelse:\n    print(s)\n", "\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print((s[:k] + '...'))\n", "K=int(input())\nS=input()\nif K>=len(S):\n    print(S)\nelse:\n    print(S[:K]+'...')", "K = int(input())\nS = input()\n\nif len(S) > K:\n    print((S[:K] + \"...\"))\nelse:\n    print(S)\n", "k = int(input())\ns = input()\nif(len(s) <= k):\n    print(s)\nelse:\n    print((s[0:k]+'...'))    \n", "K = int(input())\nS = input()\n\nS_len = len(S)\n\nif len(S)<=K:\n    print(S)\nelse:\n    print(S[0:K]+'...')", "K = int(input())\nS = str(input())\nif K >= len(S):\n    print(S)\nelse:\n    print((S[0:K] + '...'))\n", "N = int(input())\nK = str(input())\nx = K[:N]\n\nif N < len(K):\n    print(x+'...')\nelse:\n    print(x)", "K=int(input())\nS=input()\nN=len(S)\n\nif N<=K:\n    print(S)\nelse:\n    ans=[]\n    for i in range(K):\n        ans.append(S[i])\n    print(''.join(ans)+'...')", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + '...')", "N = int(input())\nK = str(input())\nx = K[:N]\n \nif N < len(K):\n    print(x+'...')\nelse:\n    print(x)", "K = int(input())\nS = input()\n\nif len (S)>K:\n    s = S[:K]+'...'\n    print(s)\nelse:\n    print(S)", "k = int(input())\ns = input()\n\nif len(s) <= k:\n  print(s)\nelse:\n  print(s[:k] + '...')", "K=int(input())\nS = input()\nif len(S)<=K:\n    print(S)\nelse:\n    print(S[:K]+'...')", "K = int(input())\nS = input()\nif len(S)<=K:\n    print(S)\nelse :\n    print(S[:K]+\"...\")", "K = int(input())\nS = input()\n\nif len(S) <= K:\n  print(S)\nelse:\n  print(S[:K]+'...')", "k = int(input())\n\ns = input()\n\nif len(s) > k:\n    s = s[:k] + \"...\"\n\nprint(s)", "k = int(input())\ns = input()\nprint(s if len(s)<=k else s[:k]+'...')", "K = int(input())\nS = input()\n\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + \"...\")", "n = int(input())\nli = list(input())\nif len(li) > n:\n    for i in range(n):\n        print(li[i],end=\"\")\n    print(\"...\")\nelse:\n    for i in range(len(li)):\n        print(li[i],end=\"\")", "k = int(input())\ns = input()\nprint(s if len(s) <= k else s[:k] + \"...\")"]