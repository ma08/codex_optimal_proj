["\n\nimport math\n\ndef distance(a, b):\n    return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef main():\n    N = int(input())\n    towns = [tuple(map(int, input().split())) for _ in range(N)]\n    total_distance = 0\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                total_distance += distance(towns[i], towns[j])\n                count += 1\n    print(total_distance / count)\n\nif __name__ == '__main__':\n    main()", "\n\nN = int(input())\nxy = []\nfor i in range(N):\n    xy.append(list(map(int, input().split())))\n\n# \u90fd\u5e02\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u914d\u5217dist\u306b\u683c\u7d0d\ndist = []\nfor i in range(N):\n    for j in range(i):\n        dist.append(((abs(xy[i][0] - xy[j][0])) ** 2 + (abs(xy[i][1] - xy[j][1])) ** 2) ** (1 / 2))\n\n# \u90fd\u5e02\u3092\u5168\u3066\u8a2a\u308c\u308b\u7d4c\u8def\u3092\u5217\u6319\n# \u90fd\u5e02\u3092\u8a2a\u308c\u308b\u9806\u756a\u306f\u30ea\u30b9\u30c8cities\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u8868\u3059\ncities = list(range(N))\nroute = list(itertools.permutations(cities))\n\n# \u90fd\u5e02\u9593\u306e\u8ddd\u96e2\u306e\u7dcf\u548c\u3092\u8a08\u7b97\nsum = 0\nfor i in route:\n    for j in range(len(i) - 1):\n        if j == 0:\n            sum += dist[i[j] * (N - 1) + i[j + 1]]\n        else:\n            sum += dist[i[j] * (N - 1) + i[j + 1] - i[j] - 1]\n\nprint(sum / len(route))", "\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\ntowns = []\nfor i in range(N):\n    x, y = map(int, sys.stdin.readline().split())\n    towns.append([x,y])\n\ndef dist(t1, t2):\n    return math.sqrt((t1[0]-t2[0])**2 + (t1[1]-t2[1])**2)\n\ndef calc_dist(towns):\n    d = 0.0\n    for i in range(len(towns)-1):\n        d += dist(towns[i], towns[i+1])\n    return d\n\ndef fact(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n\ndef make_perm(towns):\n    if len(towns) <= 1:\n        return [towns]\n    res = []\n    for i in range(len(towns)):\n        for j in make_perm(towns[:i]+towns[i+1:]):\n            res.append([towns[i]] + j)\n    return res\n\nperm = make_perm(towns)\n\ntotal_dist = 0.0\nfor p in perm:\n    total_dist += calc_dist(p)\n\nprint(total_dist/fact(N))", "\n\nimport math\n\ndef calc_dist(x1, y1, x2, y2):\n    dist = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n    return dist\n\ndef calc_all_dist(cord_list):\n    result_dist = 0\n    for i in range(len(cord_list)-1):\n        result_dist += calc_dist(cord_list[i][0], cord_list[i][1], cord_list[i+1][0], cord_list[i+1][1])\n    return result_dist\n\ndef calc_avg_dist(cord_list):\n    avg_dist = 0\n    for i in range(len(cord_list)):\n        avg_dist += calc_all_dist(cord_list[i:])\n    avg_dist /= math.factorial(len(cord_list))\n    return avg_dist\n\nif __name__ == '__main__':\n    num_town = int(input())\n    town_cord = []\n    for i in range(num_town):\n        town_cord.append(list(map(int, input().split())))\n    print(calc_avg_dist(town_cord))", "\n\n# import math\n#\n# def distance(x1,y1,x2,y2):\n#     return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n#\n# def main():\n#     n = int(input())\n#     towns = [list(map(int,input().split())) for _ in range(n)]\n#     perm = list(itertools.permutations(list(range(n))))\n#     ans = 0\n#     for p in perm:\n#         for i in range(len(p)-1):\n#             ans += distance(towns[p[i]][0],towns[p[i]][1],towns[p[i+1]][0],towns[p[i+1]][1])\n#     print(ans/len(perm))\n#\n# if __name__ == '__main__':\n#     main()\n\nimport math\nimport itertools\n\n\ndef main():\n    n = int(input())\n    towns = [list(map(int, input().split())) for _ in range(n)]\n    perm = list(itertools.permutations(list(range(n))))\n    ans = 0\n    for p in perm:\n        for i in range(len(p) - 1):\n            ans += distance(towns[p[i]][0], towns[p[i]][1], towns[p[i + 1]][0], towns[p[i + 1]][1])\n    print(ans / len(perm))\n\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n\nif __name__ == '__main__':\n    main()", "\n\nfrom itertools import permutations\n\ndef calc_distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\ndef calc_distances(towns):\n    distances = [0]\n    for i in range(0, len(towns) - 1):\n        distances.append(calc_distance(towns[i][0], towns[i][1], towns[i + 1][0], towns[i + 1][1]))\n    return distances\n\ndef main():\n    N = int(input())\n    towns = []\n    for i in range(N):\n        town = list(map(int, input().split()))\n        towns.append(town)\n\n    routes = list(permutations(towns))\n\n    total_distance = 0\n    for route in routes:\n        distances = calc_distances(route)\n        total_distance += sum(distances)\n    average_distance = total_distance / len(routes)\n\n    print(average_distance)\n\nif __name__ == '__main__':\n    main()", "\n\nimport itertools\n\nn = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(n)]\n\ndef distance(town1, town2):\n    return ((town1[0]-town2[0])**2+(town1[1]-town2[1])**2)**0.5\n\nroutes = list(itertools.permutations(towns))\n\ntotal_distance = 0\nfor route in routes:\n    for i in range(len(route)-1):\n        total_distance += distance(route[i], route[i+1])\n\nprint(total_distance/len(routes))", "\n\nimport math\nimport itertools\n\nN = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(N)]\n\n# permutations of indices of towns\npermutations = itertools.permutations(range(N))\ndistances = [math.hypot(towns[i][0] - towns[j][0], towns[i][1] - towns[j][1]) for i, j in permutations]\n\nprint(sum(distances) / math.factorial(N))"]