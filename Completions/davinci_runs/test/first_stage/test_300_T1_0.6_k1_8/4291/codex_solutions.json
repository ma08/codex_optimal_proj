["", "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn,q = map(int,input().split())\ns = list(input())\n\nac_count = []\nac_count.append(0)\n\nfor i in range(1,n+1):\n    if s[i-1] == 'A' and s[i] == 'C':\n        ac_count.append(ac_count[i-1]+1)\n    else:\n        ac_count.append(ac_count[i-1])\n\nfor _ in range(q):\n    l,r = map(int,input().split())\n    print(ac_count[r]-ac_count[l])", "\n\n\nn, q = map(int, input().split())\ns = input()\n\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(s[l-1:r].count('AC'))", "\n\ndef main():\n    # Get the necessary inputs\n    n, q = [int(x) for x in input().split()]\n    s = input()\n    queries = [[int(x) for x in input().split()] for i in range(q)]\n\n    # Create a list of all the indices of 'A' in the string\n    a_indices = []\n    for i in range(n):\n        if s[i] == 'A':\n            a_indices.append(i)\n\n    # Create a list of all the indices of 'C' in the string\n    c_indices = []\n    for i in range(n):\n        if s[i] == 'C':\n            c_indices.append(i)\n\n    # For each query, find how many 'A's are in the string\n    # between the start and end indices\n    # Then find out how many 'C's are in the string between\n    # the start and end indices\n    # Then check how many 'C's are after the 'A's in the string\n    for query in queries:\n        start_index = query[0]\n        end_index = query[1]\n\n        a_count = 0\n        for i in range(len(a_indices)):\n            if a_indices[i] >= start_index - 1 and a_indices[i] <= end_index - 1:\n                a_count += 1\n\n        c_count = 0\n        for i in range(len(c_indices)):\n            if c_indices[i] >= start_index - 1 and c_indices[i] <= end_index - 1:\n                c_count += 1\n\n        ac_count = 0\n        for i in range(len(a_indices)):\n            if a_indices[i] >= start_index - 1 and a_indices[i] <= end_index - 1:\n                for j in range(len(c_indices)):\n                    if c_indices[j] > a_indices[i] and c_indices[j] <= end_index - 1:\n                        ac_count += 1\n                        break\n\n        print(ac_count)\n\nif __name__ == '__main__':\n    main()", "\n\nN, Q = map(int, input().split())\nS = input()\n\n# Preprocessing\n# numAC[i] is the number of AC in S[:i+1]\nnumAC = [0] * (N + 1)\nfor i in range(N - 1):\n    if S[i:i+2] == 'AC':\n        numAC[i+2] = numAC[i+1] + 1\n    else:\n        numAC[i+2] = numAC[i+1]\n\nfor _ in range(Q):\n    l, r = map(int, input().split())\n    print(numAC[r] - numAC[l])", "\n\nimport sys\n\n# read input\nnq = sys.stdin.readline().split()\nn = int(nq[0])\nq = int(nq[1])\ns = sys.stdin.readline().rstrip()\n\n# create a list of all AC substring positions\nac_pos = []\nfor i in range(n-1):\n\tif s[i:i+2] == 'AC':\n\t\tac_pos.append(i+1)\n\n# list of queries\nqueries = []\nfor i in range(q):\n\tqueries.append(sys.stdin.readline().split())\n\n# for each query, print the number of substring 'AC' in the range\nfor i in range(q):\n\tl = int(queries[i][0])\n\tr = int(queries[i][1])\n\tcount = 0\n\tfor j in range(len(ac_pos)):\n\t\tif ac_pos[j] >= l and ac_pos[j] < r:\n\t\t\tcount += 1\n\tprint(count)", "\n\nN,Q=map(int,input().split())\nS=input()\n\na_cnt,c_cnt=0,0\nfor i in range(N):\n    if S[i]==\"A\":\n        a_cnt+=1\n    elif S[i]==\"C\":\n        c_cnt+=1\n\nac_cnt=[0]\nac_cnt.extend([a_cnt*c_cnt])\n\nfor i in range(1,N):\n    if S[i-1]==\"A\" and S[i]==\"C\":\n        ac_cnt[i]=ac_cnt[i-1]\n    elif S[i-1]==\"A\" and S[i]!=\"C\":\n        a_cnt-=1\n        ac_cnt[i]=ac_cnt[i-1]-c_cnt\n    elif S[i-1]!=\"A\" and S[i]==\"C\":\n        c_cnt-=1\n        ac_cnt[i]=ac_cnt[i-1]-a_cnt\n    else:\n        ac_cnt[i]=ac_cnt[i-1]\n\nfor i in range(Q):\n    l,r=map(int,input().split())\n    print(ac_cnt[r-1]-ac_cnt[l-1])", "\n\nN, Q = map(int, input().split())\nS = input()\n\n# \u6587\u5b57\u5217\u3092\u8d70\u67fb\u3057\u3001AC\u304c\u51fa\u73fe\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u524d\u306b\u51fa\u73fe\u3057\u305fG\u306e\u4f4d\u7f6e\u3092\u8a18\u9332\u3059\u308b\n# G\u306e\u4f4d\u7f6e\u3092\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001AC\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u53ef\u80fd\n# \u4f8b: ACGACGACG -> [1, 3, 5]\n# \u4f8b: ACACGACG -> [1, 2, 4]\n# \u3053\u308c\u3089\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001AC\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306fAC\u304c\u51fa\u73fe\u3057\u305f\u56de\u6570\u30921\u5897\u3084\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u51fa\u73fe\u3057\u305f\u56de\u6570\u30921\u5897\u3084\u3059\n# \u51fa\u73fe\u3057\u305f\u56de\u6570\u3092\u6570\u3048\u3066\u3044\u308b\u306e\u3067\u3001AC\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f2\u56de\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u3066\u3057\u307e\u3046\n# \u51fa\u73fe\u3057\u305f\u56de\u6570\u30921/2\u3057\u3066\u3044\u308b\u306e\u306f\u3053\u306e\u305f\u3081\n\ndef solve():\n    ac_count = 0\n    g_list = []\n    for i in range(N-1):\n        if S[i] == 'G':\n            g_list.append(i)\n        elif S[i] == 'C' and S[i-1] == 'A':\n            if len(g_list) == 0:\n                ac_count += 1\n            elif i - g_list[-1] > 1:\n                ac_count += 1\n            else:\n                g_list.pop()\n                ac_count += 1\n        else:\n            g_list = []\n    ans = []\n    for i in range(Q):\n        l, r = map(int, input().split())\n        ans.append(ac_count[r-2] - ac_count[l-1])\n    for i in ans:\n        print(i)\n\nsolve()"]