["", "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    d = dict()\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    s = 0\n    for i in range(1, n+1):\n        if i == m:\n            s += d[i]\n        elif i < m:\n            s += d[i] * (d.get(m-i, 0))\n        else:\n            s += d[i] * (d.get(m+i, 0))\n    print(s)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    Solution\n    \"\"\"\n    n, m = map(int, input().split())\n    p = input().split()\n    p = [int(i) for i in p]\n\n    # p[0], p[1], ... , p[n-1]\n    # p[i] means p_i\n\n    # p_[i] <= p_[i+1]\n    # p_[i] <= m\n    # p_[i] >= m\n\n    # count[i] is the number of p_j that satisfies p_j <= i\n    count = [0] * (n+1)\n    for i in p:\n        count[i] += 1\n\n    # for i in range(1, n + 1):\n    #     count[i] = count[i-1] + count[i]\n\n    for i in range(1, n + 1):\n        count[i] += count[i-1]\n\n    # count[i] is the number of p_j that satisfies p_j <= i\n\n    # count[i] - count[j] is the number of p_k that satisfies j < p_k <= i\n\n    if m > n:\n        return 0\n\n    result = 0\n\n    if n % 2 == 1:\n        # n is odd\n        for i in range(m, n + 1):\n            result += count[i] - count[m-1]\n    else:\n        # n is even\n        for i in range(m, n + 1):\n            result += count[i] - count[m-1]\n        result += count[m] - count[m-1]\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef median(arr, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i:j+1] == sorted(arr[i:j+1]):\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(median(arr, n, m))", "\ndef solve(n, m, p):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    l = 0\n    r = 0\n    cnt = 0\n    for i in range(n):\n        l = i\n        for j in range(i, n):\n            r = j\n            if p[l] == p[r] and p[l] == m:\n                cnt = cnt + 1\n    print cnt\n\n# n, m = map(int, raw_input().split())\n# p = map(int, raw_input().split())\nn, m = 5, 4\np = [2, 4, 5, 3, 1]\nsolve(n, m, p)", "\n\nimport random\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    perm = list(map(int, sys.stdin.readline().split()))\n    assert(len(perm) == n)\n    assert(set(perm) == set(range(1, n+1)))\n\n    cnt = 0\n    lefts = [0] * n\n    rights = [0] * n\n    for i in range(n):\n        if perm[i] < m:\n            lefts[i] = 1\n    for i in range(n-1, -1, -1):\n        if perm[i] > m:\n            rights[i] = 1\n        if i > 0:\n            lefts[i-1] += lefts[i]\n            rights[i-1] += rights[i]\n    for i in range(n):\n        cnt += lefts[i] * rights[i]\n    print(cnt)\n\nmain()", "\n\n\ndef get_input():\n    n, m = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    return n, m, arr\n\n\ndef get_pairs_for_median(n, arr, m):\n    # count the number of times m is in arr\n    # count the number of times m is on the right side of m\n    # count the number of times m is on the left side of m\n    # count the number of times m is in the middle of m\n\n    # use the following formula:\n    # (n_right * n_left) + (n_left * n_middle) + (n_right * n_middle) + (n_middle * n_middle - 1) / 2\n\n    n_right = 0\n    n_left = 0\n    n_middle = 0\n\n    for num in arr:\n        if num == m:\n            n_middle += 1\n        elif num < m:\n            n_left += 1\n        else:\n            n_right += 1\n\n    # print(n_right, n_middle, n_left)\n    return (n_right * n_left) + (n_left * n_middle) + (n_right * n_middle) + (n_middle * (n_middle - 1) / 2)\n\n\ndef main():\n    n, m, arr = get_input()\n    print(int(get_pairs_for_median(n, arr, m)))\n\n\nif __name__ == \"__main__\":\n    main()"]