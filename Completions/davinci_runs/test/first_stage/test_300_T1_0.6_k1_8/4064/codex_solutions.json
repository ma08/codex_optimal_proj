["\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\ngood_till_now = 0\nfor i in range(n):\n    if r >= (a[i] - 1) % h >= l:\n        good_till_now += 1\n    if r >= a[i] % h >= l:\n        good_till_now += 1\n    good = max(good, good_till_now)\n    good_till_now -= 1\nprint(good)", "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n):\n        if l <= (a[i] - 1) % h <= r:\n            dp[i][0] = max(dp[i - 1])\n        if l <= a[i] % h <= r:\n            dp[i][1] = max(dp[i - 1])\n    return max(dp[-1])\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, h, l, r, a))", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\nfor i in range(1, n):\n    if l <= (a[i - 1] - 1) % h <= r or l <= a[i - 1] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)", "\n\nimport sys\n\ndef separate_times(a, l, r, h):\n    n = len(a)\n    good = 0\n    bad = 0\n    for i in range(n):\n        if l <= (a[i] - 1) % h <= r:\n            bad += 1\n        elif l <= a[i] % h <= r:\n            good += 1\n        else:\n            pass\n    return good, bad\n\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    g, b = separate_times(a, l, r, h)\n    print(g + (b + 1) // 2)\n\nif __name__ == '__main__':\n    main()", "\n\nn, h, l, r = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\n\ngood = 0\nfor i in range(len(a)):\n    if l <= (a[i] - 1) % h <= r:\n        good += 1\n    if l <= a[i] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)", "\n\n\ndef solve(a, h, l, r):\n    dp = [[0, 0] for _ in range(h)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, h):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i - 1][0] + 1 if i + 1 in a else 0\n    return max(dp[l][0], dp[l][1], dp[r][0], dp[r][1])\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, h, l, r))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n# n, h, l, r = map(int, '7 24 21 23'.split())\n# a = list(map(int, '16 17 14 20 20 11 22'.split()))\n\nif h % 2 == 0:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n        else:\n            a[i] += 1\n# print(a)\n\ncnt = 0\nfor i in range(1, n+1):\n    if h * i >= l and h * i <= r:\n        cnt += 1\n\nfor i in range(1, n):\n    if a[i] % 2 == 0:\n        if a[i-1] % 2 == 0:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n        else:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n    else:\n        if a[i-1] % 2 == 0:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n        else:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n\nprint(cnt)", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# if a[0] is in [l,r], then add 1 to the number of good times\ngood = a[0] in range(l,r+1)\n\n# if a[i] is in [l,r] and a[i-1] is not in [a[i-1]-1,a[i]-2], then add 1 to the number of good times\nfor i in range(1,n):\n    if a[i] in range(l,r+1):\n        if a[i-1] not in range(a[i-1]-1,a[i]-2):\n            good += 1\n\n# if a[-1] is in [l,r] and a[-2] is not in [a[-2]-1,a[-1]-2], then add 1 to the number of good times\nif a[-1] in range(l,r+1) and a[-2] not in range(a[-2]-1,a[-1]-2):\n    good += 1\n\nprint(good)"]