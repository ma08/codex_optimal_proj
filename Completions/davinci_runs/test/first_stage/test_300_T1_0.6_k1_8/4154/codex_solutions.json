["\n\nn, m = map(int, input().split())\n\nl, r = [], []\nfor i in range(m):\n    li, ri = map(int, input().split())\n    l.append(li)\n    r.append(ri)\n\nmin_l = min(l)\nmax_r = max(r)\n\nprint(max_r - min_l + 1)", "\n\n#-----main-----\n\n# get inputs\nN, M = map(int, input().split())\nL = [0] * M\nR = [0] * M\nfor i in range(M):\n    L[i], R[i] = map(int, input().split())\n\n# solve\nans = 0\nfor i in range(N):\n    for j in range(M):\n        if L[j] <= i + 1 <= R[j]:\n            ans += 1\n            break\nprint(ans)", "\n\n\ndef main():\n    N, M = [int(x) for x in input().split()]\n    gates = []\n    for _ in range(M):\n        L, R = [int(x) for x in input().split()]\n        gates.append((L, R))\n    gates = sorted(gates)\n    ans = 0\n    r = gates[0][1]\n    for i in range(1, M):\n        if gates[i][0] <= r:\n            r = min(r, gates[i][1])\n        else:\n            ans += 1\n            r = gates[i][1]\n    print(ans + 1)\n\nif __name__ == '__main__':\n    main()", "\n\n# N = 4\n# M = 2\n# L = [1, 2]\n# R = [3, 4]\n\nN, M = map(int, input().split())\nL = []\nR = []\nfor i in range(M):\n    l, r = map(int, input().split())\n    L.append(l)\n    R.append(r)\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6570\u3092\u51fa\u529b\nans = 0\nfor i in range(1, N + 1):\n    is_pass = True\n    for j in range(M):\n        if i < L[j] or i > R[j]:\n            is_pass = False\n    if is_pass:\n        ans += 1\n\nprint(ans)", "\n\n#N = Number of cards\n#M = Number of gates\nN, M = list(map(int, input().split()))\n#List of gates\ngates = [list(map(int, input().split())) for i in range(M)]\n#The first gate\nfirst = gates[0][0]\n#The last gate\nlast = gates[M-1][1]\n\n#Can you pass the first gate?\nfirst_pass = False\nif first == 1:\n    first_pass = True\n#Can you pass the last gate?\nlast_pass = False\nif last == N:\n    last_pass = True\n#Can you pass all the gates?\npass_all = False\nif first_pass and last_pass:\n    pass_all = True\n\n#If you can pass all the gates, you can pass all the gates.\nif pass_all:\n    print(N)\n#If you cannot pass all the gates, you can pass all the gates.\nelse:\n    print(0)", "\n\n\ndef main():\n    # -------------\n    # Read Input\n    # -------------\n    n, m = map(int, input().split())\n    gates = [list(map(int, input().split())) for _ in range(m)]\n\n    # -------------\n    # Solve\n    # -------------\n    # Sort gates by L\n    gates = sorted(gates, key=lambda x: x[0])\n\n    # Iterate through gates\n    curr_L = 0\n    curr_R = 0\n    num_cards = 0\n    for L, R in gates:\n        # If the current range is contained in the next range, do nothing\n        if curr_L <= L <= curr_R:\n            continue\n\n        # If the current range does not overlap with the next range,\n        # increment the number of cards and update the current range\n        else:\n            curr_L = L\n            curr_R = R\n            num_cards += 1\n\n    # -------------\n    # Output\n    # -------------\n    print(num_cards)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# input\nN, M = [int(i) for i in input().split()]\nL = [0]*M\nR = [0]*M\nfor i in range(M):\n    L[i], R[i] = [int(i) for i in input().split()]\n\n# output\nans = 0\n\nfor i in range(1, N+1):\n    if all(L[j] <= i <= R[j] for j in range(M)):\n        ans += 1\n\nprint(ans)", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    gates = [0]*n\n    for _ in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        for i in range(l, r+1):\n            gates[i-1] += 1\n    print(gates.count(m))\n\nif __name__ == '__main__':\n    main()"]