["\n\n\n# n, m = map(int, input().split())\n# mat = []\n# for i in range(n):\n#     mat.append(list(map(int, input().split())))\n\n# mat = [[1, 1], [0, 1]]\n# n, m = 2, 2\nmat = [[0,0,0,1], [0,0,0,0], [1,1,1,1]]\nn, m = 3, 4\n\ndef check_sorted(mat):\n    for i in range(1, n):\n        for j in range(1, m):\n            if mat[i][j] < mat[i][j - 1]:\n                return False\n    return True\n\ndef invert_row(mat, i):\n    for j in range(m):\n        if mat[i][j] == 1:\n            mat[i][j] = 0\n        else:\n            mat[i][j] = 1\n\ndef invert_col(mat, i):\n    for j in range(n):\n        if mat[j][i] == 1:\n            mat[j][i] = 0\n        else:\n            mat[j][i] = 1\n\ndef sort_row(mat, i):\n    if check_sorted(mat):\n        return\n    else:\n        invert_row(mat, i)\n        if check_sorted(mat):\n            return\n        else:\n            invert_row(mat, i)\n            if check_sorted(mat):\n                return\n            else:\n                invert_col(mat, i)\n                if check_sorted(mat):\n                    return\n                else:\n                    invert_col(mat, i)\n                    if check_sorted(mat):\n                        return\n                    else:\n                        invert_row(mat, i)\n                        if check_sorted(mat):\n                            return\n                        else:\n                            invert_row(mat, i)\n                            if check_sorted(mat):\n                                return\n                            else:\n                                invert_col(mat, i)\n                                if check_sorted(mat):\n                                    return\n                                else:\n                                    return False\n\nif check_sorted(mat):\n    print(\"YES\")\n    print(\"\".join([\"0\" for i in range(n)]))\n    print(\"\".join([\"0\" for i in range(m)]))\nelse:\n    print(\"NO\")", "\n\ndef main():\n    n, m = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n\n    res = [[-1 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 0:\n                res[i][j] = 0\n            else:\n                if i == 0:\n                    res[i][j] = 1\n                else:\n                    if res[i - 1][j] == 0:\n                        res[i][j] = 1\n                    elif res[i - 1][j] == 1:\n                        res[i][j] = 0\n                if j == 0:\n                    res[i][j] = 1\n                else:\n                    if res[i][j - 1] == 0:\n                        res[i][j] = 1\n                    elif res[i][j - 1] == 1:\n                        res[i][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if res[i][j] == -1:\n                print(\"NO\")\n                return\n            if res[i][j] == 1:\n                if res[i - 1][j] == 1 or res[i][j - 1] == 1:\n                    print(\"NO\")\n                    return\n\n    print(\"YES\")\n    for i in range(n):\n        print(\"\".join(map(str, res[i])))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    \"\"\"\n    The answer is yes iff the number of 0s and 1s in\n    each row and column are the same.\n    \"\"\"\n    n, m = [int(i) for i in input().split()]\n    a = [[int(i) for i in input().split()] for _ in range(n)]\n    r = [0] * n\n    c = [0] * m\n    for i in range(n):\n        for j in range(m):\n            r[i] += a[i][j]\n            c[j] += a[i][j]\n    for i in range(n):\n        if r[i] != m // 2 and r[i] != (m + 1) // 2:\n            print('NO')\n            return\n    for j in range(m):\n        if c[j] != n // 2 and c[j] != (n + 1) // 2:\n            print('NO')\n            return\n    print('YES')\n    for i in range(n):\n        print(r[i] % 2, end='')\n    print()\n    for j in range(m):\n        print(c[j] % 2, end='')\n\n\nif __name__ == '__main__':\n    main()", "\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    row_inverse = [0] * n\n    column_inverse = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                if (i + j) % 2 == 0:\n                    row_inverse[i] = 1\n                    column_inverse[j] = 1\n                else:\n                    row_inverse[i] = 0\n                    column_inverse[j] = 0\n            else:\n                if (i + j) % 2 == 0:\n                    row_inverse[i] = 0\n                    column_inverse[j] = 0\n                else:\n                    row_inverse[i] = 1\n                    column_inverse[j] = 1\n    a = [[a[i][j] ^ row_inverse[i] ^ column_inverse[j] for j in range(m)] for i in range(n)]\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] > a[i + 1][j] or a[i][j] > a[i][j + 1]:\n                print(\"NO\")\n                exit()\n    for j in range(m - 1):\n        if a[n - 1][j] > a[n - 1][j + 1]:\n            print(\"NO\")\n            exit()\n    for i in range(n - 1):\n        if a[i][m - 1] > a[i + 1][m - 1]:\n            print(\"NO\")\n            exit()\n    print(\"YES\")\n    print(\"\".join(map(str, row_inverse)))\n    print(\"\".join(map(str, column_inverse)))", "\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\ndef is_sorted(a):\n    for i in range(n):\n        for j in range(m):\n            if i < n-1:\n                if a[i][j] > a[i+1][j]:\n                    return False\n            if j < m-1:\n                if a[i][j] > a[i][j+1]:\n                    return False\n    return True\n\ndef inverse_rows(a):\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = 1 - a[i][j]\n    return a\n\ndef inverse_columns(a):\n    for i in range(n):\n        for j in range(m):\n            a[j][i] = 1 - a[j][i]\n    return a\n\nsorted_row = is_sorted(a) and is_sorted(inverse_rows(a[:]))\nsorted_col = is_sorted(a) and is_sorted(inverse_columns(a[:]))\n\nif sorted_row or sorted_col:\n    print(\"YES\")\n    if sorted_row:\n        print(\"\".join([\"0\" for i in range(n)]))\n        print(\"\".join([\"0\" for i in range(m)]))\n    else:\n        print(\"\".join([\"0\" for i in range(n)]))\n        print(\"\".join([\"1\" for i in range(m)]))\nelse:\n    print(\"NO\")", "\n\nimport sys\nimport os\nimport heapq\nimport itertools\nfrom collections import Counter, deque\nfrom queue import PriorityQueue\nfrom copy import deepcopy\n\n#--------------------------------------------\n\ndef solve():\n    pass\n\ndef main():\n    # sys.stdin = open('input.txt', 'r')\n    # sys.stdout = open('output.txt', 'w')\n    solve()\n\nmain()\n\n#--------------------------------------------\n\ndef test():\n    n,m = map(int,input().split())\n    a = [[0]*m for i in range(n)]\n    for i in range(n):\n        a[i] = list(map(int,input().split()))\n    # print(a)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    print(a)\n\ntest()", "\nfrom collections import Counter\n\ndef checker(matrix, rows, cols):\n    sorted_matrix = []\n    for i in range(rows):\n        for j in range(cols):\n            sorted_matrix.append(matrix[i][j])\n    sorted_matrix = sorted(sorted_matrix)\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != sorted_matrix[0]:\n                return False\n            sorted_matrix.pop(0)\n    return True\n\ndef possible(matrix, rows, cols):\n    if checker(matrix, rows, cols):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    rows, cols = map(int, input().split())\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(map(int, input().split())))\n    print(possible(matrix, rows, cols))\n\nif __name__ == '__main__':\n    main()", "\n\nn, m = map(int, input().split())\na = [[int(j) for j in input().split()] for i in range(n)]\n\ndef is_sorted():\n    for j in range(m):\n        for i in range(n):\n            if a[i][j] != 0:\n                return False\n    return True\n\nif is_sorted():\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * m)\nelse:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"1\" * m)"]