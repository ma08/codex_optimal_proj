["", "\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().strip().split())\ns = stdin.readline().strip()\n\ndp = [[-1 for _ in range(n+1)] for _ in range(k+1)]\n\nfor i in range(n+1):\n    dp[0][i] = 0\n\nfor i in range(1, k+1):\n    for j in range(1, n+1):\n        if s[:j].count(s[j-1]) >= i:\n            dp[i][j] = dp[i-1][j-1]\n\n        if dp[i][j-1] != -1:\n            if dp[i][j] == -1:\n                dp[i][j] = dp[i][j-1] + n - j\n            else:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + n - j)\nprint(dp[k][n])", "\n\ndef solution(s, k):\n    \"\"\"\n        >>> solution('asdf', 5)\n        4\n        >>> solution('aaaaa', 6)\n        15\n        >>> solution('aaaaa', 7)\n        -1\n        >>> solution('ajihiushda', 100)\n        233\n    \"\"\"\n    n = len(s)\n    dp = [[0]*(1 << n) for _ in range(k+1)]\n    for i in range(n):\n        dp[1][1 << i] = n - 1\n    for i in range(2, k+1):\n        for mask in range(1 << n):\n            tmp = 0\n            for j in range(n):\n                if (mask & (1 << j)) == 0:\n                    continue\n                tmp += dp[i-1][mask - (1 << j)]\n            dp[i][mask] = tmp\n    return dp[-1][-1] if dp[-1][-1] > 0 else -1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\nfrom collections import defaultdict\nfrom itertools import combinations\nimport sys\nsys.setrecursionlimit(10**5)\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\n\ndef ways(s):\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    # print(d)\n    ans = 0\n    for i in d.values():\n        ans += i*(i+1)//2\n    return ans\n\n\ndef dfs(s, cnt, cost):\n    global ans\n    if cnt == k:\n        ans = min(ans, cost)\n        return\n    if cost > ans:\n        return\n    if cost+ways(s[i+1:]) < ans:\n        for i in range(len(s)):\n            dfs(s[:i]+s[i+1:], cnt+1, cost+i)\n\n\ninput_string = input()\nn, k = map(int, input_string.split())\ns = input()\nans = float('inf')\ndfs(s, 0, 0)\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)", "\n\n\ndef subsequences(string):\n    if len(string) == 0:\n        return ['']\n    else:\n        first = string[0]\n        rest = string[1:]\n        rest_subs = subsequences(rest)\n        return rest_subs + [first + s for s in rest_subs]\n\n\ndef subsequences_cost(string, k):\n    subs = subsequences(string)\n    cost = [(len(string) - len(i)) for i in subs]\n    dp = [[0 for _ in range(k + 1)] for _ in range(len(cost))]\n    for i in range(len(cost)):\n        dp[i][0] = cost[i]\n    for i in range(1, k + 1):\n        for j in range(len(cost)):\n            dp[j][i] = min(dp[j][i - 1], dp[j - 1][i - 1], dp[j - 2][i - 1])\n    if dp[-1][k] == 0:\n        return -1\n    return dp[-1][k]\n\n\nif __name__ == '__main__':\n    n, k = [int(i) for i in input().split()]\n    string = input()\n    print(subsequences_cost(string, k))", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(n):\n        dp[1][i] = i + 1\n    for i in range(2, k+1):\n        for j in range(n):\n            dp[i][j] = n + 1\n            for l in range(j+1):\n                dp[i][j] = min(dp[i][j], dp[i-1][l] + n - (j-l))\n    if dp[k][n-1] <= n:\n        print(dp[k][n-1])\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main(s, k):\n    n = len(s)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = dp[i][j - 1] + (1 if s[i:j] not in s[i:j - 1] else 0)\n    ans = float('inf')\n    for i in range(n + 1):\n        if dp[0][i] < k:\n            continue\n        j = i\n        while j < n + 1 and dp[0][j] - dp[0][i] <= k:\n            if dp[0][j] - dp[0][i] == k:\n                ans = min(ans, n - j + i)\n            j += 1\n    return -1 if ans == float('inf') else ans\n\nif __name__ == '__main__':\n    s = input()\n    k = int(input())\n    print(main(s, k))", "\n\nimport os\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        n, k = map(int, f.readline().strip().split())\n        s = f.readline().strip()\n        if k > n:\n            return -1\n        dp = [0] + [sys.maxint for _ in range(k-1)]\n        for i in range(n):\n            for j in range(k-1, 0, -1):\n                dp[j] = min(dp[j], dp[j-1] + n-i)\n        return dp[k-1]\n        \nif __name__ == '__main__':\n    tests = [\n        ('test.1.in', 'test.1.out'),\n        ('test.2.in', 'test.2.out'),\n        ('test.3.in', 'test.3.out'),\n        ('test.4.in', 'test.4.out'),\n        ('test.5.in', 'test.5.out'),\n        ('test.6.in', 'test.6.out'),\n    ]\n    for test in tests:\n        try:\n            assert int(os.popen('echo 1 | python main.py {}'.format(test[0])).read()) == int(open(test[1]).read())\n            print 'Test {} passed'.format(test[0])\n        except Exception as e:\n            print 'Test {} failed'.format(test[0])\n            print e"]