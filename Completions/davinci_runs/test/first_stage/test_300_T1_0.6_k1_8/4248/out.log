2022-04-16 20:30:18.897712 """
-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of points on a plane.

Each of the next n lines contains two real coordinates x_{i} and y_{i} of the $i^{\text{th}}$ point, specified with exactly 2 fractional digits. All coordinates are between  - 1000 and 1000, inclusive.


-----Output-----

Output a single real number θ — the answer to the problem statement. The absolute or relative error of your answer should be at most 10^{ - 2}.


-----Examples-----
Input
8
-2.14 2.06
-1.14 2.04
-2.16 1.46
-2.14 0.70
-1.42 0.40
-0.94 -0.48
-1.42 -1.28
-2.16 -1.62

Output
5.410

Input
5
2.26 1.44
2.28 0.64
2.30 -0.30
1.58 0.66
3.24 0.66

Output
5.620

Input
8
6.98 2.06
6.40 1.12
5.98 0.24
5.54 -0.60
7.16 0.30
7.82 1.24
8.34 0.24
8.74 -0.76

Output
5.480

Input
5
10.44 2.06
10.90 0.80
11.48 -0.48
12.06 0.76
12.54 2.06

Output
6.040

Input
8
16.94 2.42
15.72 2.38
14.82 1.58
14.88 0.50
15.76 -0.16
16.86 -0.20
17.00 0.88
16.40 0.92

Output
6.040

Input
7
20.62 3.00
21.06 2.28
21.56 1.36
21.66 0.56
21.64 -0.52
22.14 2.32
22.62 3.04

Output
6.720
"""
2022-04-16 20:30:18.897731 --------------------------
2022-04-16 20:31:58.577793 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef get_angle(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.degrees(math.atan2(y2-y1, x2-x1))\n\ndef get_next_point(p1, p2, p3, p4):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n\n    y = ((x1-x2)*(y3-y4))/((y1-y2)*(x3-x4))\n    x = (y1-y2-y*y3+y*y4)/(x1-x2)\n    c = y1-y*y2-x*x1\n\n    return x, y, c\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n\n    angles = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            angles.append(get_angle(points[i], points[j]))\n    angles.sort()\n\n    max_angle = 0\n    for i in range(len(angles)-1):\n        max_angle = max(max_angle, angles[i+1]-angles[i])\n\n    print('%.3f' % (max_angle))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef get_x(x, y):\n    return (x**2 + y**2)**(1/2)\n\ndef get_y(x, y):\n    return math.atan2(y, x)\n\ndef get_angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)\n\ndef get_distance(x1, y1, x2, y2):\n    return ((x2 - x1)**2 + (y2 - y1)**2)**(1/2)\n\ndef get_intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    d = ((x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4))\n    if d == 0:\n        return [0, 0]\n    x = ((x1*y2 - y1*x2)*(x3 - x4) - (x1 - x2)*(x3*y4 - y3*x4)) / d\n    y = ((x1*y2 - y1*x2)*(y3 - y4) - (y1 - y2)*(x3*y4 - y3*x4)) / d\n    return [x, y]\n\ndef get_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2)\n\ndef get_triangle_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2)\n\ndef get_quadrilateral_area(x1, y1, x2, y2, x3, y3, x4, y4):\n    return get_triangle_area(x1, y1, x2, y2, x3, y3) + get_triangle_area(x1, y1, x4, y4, x3, y3)\n\ndef get_circle_area(x1, y1, x2, y2, x3, y3):\n    a = get_distance(x1, y1, x2, y2)\n    b = get_distance(x2, y2, x3, y3)\n    c = get_distance(x3, y3, x1, y1)\n    p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\ndef get_point_to_line_distance(a, b, c, x, y):\n    return abs(a * x + b * y + c) / (a**2 + b**2)**(1/2)\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    x_, y_ = map(float, input().split())\n    x.append(x_)\n    y.append(y_)\n\nx1 = x[0]\ny1 = y[0]\nx2 = x[1]\ny2 = y[1]\nx3 = x[2]\ny3 = y[2]\n\nx_ = x3 + (x3 - x2)\ny_ = y3 + (y3 - y2)\n\nx4, y4 = get_intersection(x1, y1, x2, y2, x3, y3, x_, y_)\n\nx5 = x4 + x4 - x3\ny5 = y4 + y4 - y3\n\nx6 = x5 + x5 - x4\ny6 = y5 + y5 - y4\n\nx7 = x6 + x6 - x5\ny7 = y6 + y6 - y5\n\nx8 = x7 + x7 - x6\ny8 = y7 + y7 - y6\n\nx9 = x8 + x8 - x7\ny9 = y8 + y8 - y7\n\nx10 = x9 + x9 - x8\ny10 = y9 + y9 - y8\n\nx11 = x10 + x10 - x9\ny11 = y10 + y10 - y9\n\nx12 = x11 + x11 - x10\ny12 = y11 + y11 - y10\n\nx13 = x12 + x12 - x11\ny13 = y12 + y12 - y11\n\nx14 = x13 + x13 - x12\ny14 = y13 + y13 - y12\n\nx15 = x14 + x14 - x13\ny15 = y14 + y14 - y13\n\nx16 = x15 + x15 - x14\ny16 = y15 + y15 - y14\n\nx17 = x16 + x16 - x15\ny17 = y16 + y16 - y15\n\nx18 = x17 + x17 - x16\ny18 = y17 + y17 - y16\n\nx19 = x18 + x18 - x17\ny19 = y18 + y18 - y17\n\nx20 = x19 + x19 - x18\ny20 = y19 + y19 - y18\n\nx21 = x20 + x20 - x19\ny21 = y20 + y20 - y19\n\nx22 = x21 + x21 - x20\ny22 = y21 + y21 - y20\n\nx23 = x22 + x22 - x21\ny23 = y22 + y22 - y21\n\nx24 = x23 + x23 - x22\ny24 = y23 + y23 - y22\n\nx25 = x24 + x24 - x23\ny25 = y24 + y24 - y23\n\nx26 = x25 + x25 - x24\ny26 = y25 + y25 - y24\n\nx27 = x26 + x26 - x25\ny27 = y26 + y26 - y25\n\nx28 = x27 + x27 - x26\ny28 = y27 + y27 - y26\n\nx29 = x28 + x28 - x27\ny29 = y28 + y28 - y27\n\nx30 = x29 + x29 - x28\ny30 = y29 + y29 - y28\n\nx31 = x30 + x30 - x29\ny31 = y30 + y30 - y29\n\nx32 = x31 + x31 - x30\ny32 = y31 + y31 - y30\n\nx33 = x32 + x32 - x31\ny33 = y32 + y32 - y31\n\nx34 = x33 + x33 - x32\ny34 = y33 + y33 - y32\n\nx35 = x34 + x34 - x33\ny35 = y34 + y34 - y33\n\nx36 = x35 + x35 - x34\ny36 = y35 + y35 - y34\n\nx37 = x36 + x36 - x35\ny37 = y36 + y36 - y35\n\nx38 = x37 + x37 - x36\ny38 = y37 + y37 - y36\n\nx39 = x38 + x38 - x37\ny39 = y38 + y38 - y37\n\nx40 = x39 + x39 - x38\ny40 = y39 + y39 - y38\n\nx41 = x40 + x40 - x39\ny41 = y40 + y40 - y39\n\nx42 = x41 + x41 - x40\ny42 = y41 + y41 - y40\n\nx43 = x42 + x42 - x41\ny43 = y42 + y42 - y41\n\nx44 = x43 + x43 - x42\ny44 = y43 + y43 - y42\n\nx45 = x44 + x44 - x43\ny45 = y44 + y44 - y43\n\nx46 = x45 + x45 - x44\ny46 = y45 + y45 - y44\n\nx47 = x46 + x46 - x45\ny47 = y46 + y46 - y45\n\nx48 = x47 + x47 - x46\ny48 = y47 + y47 - y46\n\nx49 = x48 + x48 - x47\ny49 = y48 + y48 - y47\n\nx50 = x49 + x49 - x48\ny50 = y49 + y49 - y48\n\nx51 = x50 + x50 - x49\ny51 = y50 + y50 - y49\n\nx52 = x51 + x51 - x50\ny52 = y51 + y51 - y50\n\nx53 = x52 + x52 - x51\ny53 = y52 + y52 - y51\n\nx54 = x53 + x53 - x52\ny54 = y53 + y53 - y52\n\nx55 = x54 + x54 - x53\ny55 = y54 + y54 - y53\n\nx56 = x55 + x55 - x54\ny56 = y55 + y55 - y54\n\nx57 = x56 + x56 - x55\ny57 = y56 + y56 - y55\n\nx58 = x57 + x57 - x56\ny58 = y57 + y57 - y56\n\nx59 = x58 + x58 - x57\ny59 = y58 + y58 - y57\n\nx60 = x59 + x59 - x58\ny60 = y59 + y59 - y58\n\nx61 = x60 + x60 - x59\ny61 = y60 + y60 - y59\n\nx62 = x61 + x61 - x60\ny62 = y61 + y61 - y60\n\nx63 = x62 + x62 - x61\ny63 = y62 + y62 - y61\n\nx64 = x63 + x63 - x62\ny64 = y63 + y63 - y62\n\nx65 = x64 + x64 - x63\ny65 = y64 + y64 - y63\n\nx66 = x65 + x65 - x64\ny66 = y65 + y65 - y64\n\nx67 = x66 + x66 - x65\ny67 = y66 + y66 - y65\n\nx68 = x67 + x67 - x66\ny68 = y67 + y67 - y66\n\nx69 = x68 + x68 - x67\ny69 = y68 + y68 - y67\n\nx70 = x69 + x69 - x68\ny70 = y69 + y69 - y68\n\nx71 = x70 + x70 - x69\ny71 = y70 + y70 - y69\n\nx72 = x71 + x71 - x70\ny72 = y71 + y71 - y70\n\nx73 = x72 + x72 - x71\ny73 = y72 + y72 - y71\n\nx74 = x73 + x73 - x72\ny74 = y73 + y73 - y72\n\nx75 = x74 + x74 - x73\ny75 = y74 + y74 - y73\n\nx76 = x75 + x75 - x74\ny76 = y75 + y75 - y74\n\nx77 = x76 + x76 - x75\ny77 = y76 + y76 - y75\n\nx78 = x77 + x77 - x76\ny78 = y77 + y77 - y76\n\nx79 = x78 + x78 - x77\ny79 = y78 + y78 - y77\n\nx80 = x79 + x79 - x78\ny80 = y79 + y79 - y78\n\nx81 = x80 + x80 - x79\ny81 = y80 + y80 - y79\n\nx82 = x81 + x81 - x80\ny82 = y81 + y81 - y80\n\nx83 = x82 + x82 - x81\ny83 = y82 + y82 - y81\n\nx84 = x83 + x83 - x82\ny84 = y83 + y83 - y82\n\nx85 = x84 + x84 - x83\ny85 = y84 + y84 - y83\n\nx86 = x85 + x85 - x84\ny86 = y85 + y85 - y84\n\nx87 = x86 + x86 - x85\ny87 = y86 + y86 - y85\n\nx88 = x87 + x87 - x86\ny88 = y87 + y87 - y86\n\nx89 = x88 + x88 - x87\ny89 = y88 + y88 - y87\n\nx90 = x89 + x89 - x88\ny90 = y89 + y89 - y88\n\nx91 = x90 + x90 - x89\ny91 = y90 + y90 - y89\n\nx92 = x91 + x91 - x90\ny92 = y91 + y91 - y90\n\nx93 = x92 + x92 - x91\ny93 = y92 + y92 - y91\n\nx94 = x93 + x93 - x92\ny94 = y93 + y93 - y92\n\nx95 = x94 + x94 - x93\ny95 = y94 + y94 - y93\n\nx96 = x95 + x95 - x94\ny96 = y95 + y95"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split(\" \"))\n        points.append((x, y))\n    points.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[j][1] >= points[i][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n            else:\n                ans = max(ans, points[i][1] - points[j][1])\n    print(\"{:.3f}\".format(ans))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n    for i in range(n):\n        points.append(map(float, sys.stdin.readline().split()))\n\n    # print(points)\n    # print(dist(points[0], points[1]))\n    # print(dist(points[0], points[2]))\n    # print(dist(points[1], points[2]))\n    # print(dist(points[2], points[1]))\n    # print(dist(points[2], points[0]))\n\n    # print(angle(points[1], points[0], points[2]))\n    # print(angle(points[2], points[1], points[0]))\n    # print(angle(points[0], points[2], points[1]))\n    # print(angle(points[0], points[1], points[2]))\n    # print(angle(points[2], points[0], points[1]))\n    # print(angle(points[1], points[2], points[0]))\n\n    max_angle = 0\n    for i in range(n):\n        for j in range(n):\n            p1 = points[i]\n            p2 = points[j]\n            if i != j:\n                for k in range(n):\n                    if i != k and j != k:\n                        p3 = points[k]\n                        # print(p1, p2, p3)\n                        angles = [angle(p1, p2, p3), angle(p1, p3, p2), angle(p2, p1, p3), angle(p2, p3, p1), angle(p3, p1, p2), angle(p3, p2, p1)]\n                        max_angle = max(max_angle, max(angles))\n    # print(max_angle)\n    print(round(max_angle, 3))\n\n\ndef angle(p1, p2, p3):\n    \"\"\"\n    Calculate the angle between three points\n    \"\"\"\n    return math.acos(\n        ((p2[0] - p1[0]) * (p3[0] - p1[0]) + (p2[1] - p1[1]) * (p3[1] - p1[1])) /\n        (dist(p1, p2) * dist(p1, p3))\n    )\n\n\ndef dist(p1, p2):\n    \"\"\"\n    Calculate the distance between two points\n    \"\"\"\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return [int(x) for x in read_line().split()]\n\ndef read_floats():\n    return [float(x) for x in read_line().split()]\n\ndef solve_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return [float(\"inf\")]\n        else:\n            return [-c/b]\n    else:\n        if b**2 - 4*a*c < 0:\n            return []\n        else:\n            return [(-b + math.sqrt(b**2 - 4*a*c)) / (2*a), (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)]\n\ndef is_close(a, b):\n    return abs(a - b) < 1e-6\n\ndef get_angle(a, b, c):\n    ab = math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n    bc = math.sqrt((b[0] - c[0])**2 + (b[1] - c[1])**2)\n    ac = math.sqrt((a[0] - c[0])**2 + (a[1] - c[1])**2)\n    return math.acos((ab**2 + bc**2 - ac**2) / (2*ab*bc))\n\ndef get_min_angle(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                a = points[i]\n                b = points[j]\n                c = points[k]\n                ab = [b[0] - a[0], b[1] - a[1]]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                angle = get_angle(a, b, c)\n                if angle < min_angle:\n                    min_angle = angle\n    return min_angle\n\ndef get_min_angle_improved(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            a = points[i]\n            b = points[j]\n            ab = [b[0] - a[0], b[1] - a[1]]\n            ab_norm = math.sqrt(ab[0]**2 + ab[1]**2)\n            ab_normed = [ab[0] / ab_norm, ab[1] / ab_norm]\n            ab_perp = [-ab[1], ab[0]]\n            ab_perp_norm = math.sqrt(ab_perp[0]**2 + ab_perp[1]**2)\n            ab_perp_normed = [ab_perp[0] / ab_perp_norm, ab_perp[1] / ab_perp_norm]\n            t_values = []\n            for k in range(len(points)):\n                if k == i or k == j:\n                    continue\n                c = points[k]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                t = ab_normed[0] * ac[0] + ab_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n                t = ab_perp_normed[0] * ac[0] + ab_perp_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n            if len(t_values) > 0:\n                t_values.sort()\n                for k in range(len(t_values) - 1):\n                    angle = math.acos((2*t_values[k]*t_values[k+1] - (t_values[k]**2 + t_values[k+1]**2)) / (2*t_values[k]*t_values[k+1]))\n                    if angle < min_angle:\n                        min_angle = angle\n    return min_angle\n\ndef main():\n    n = int(read_line())\n    points = []\n    for i in range(n):\n        points.append(read_floats())\n    min_angle = get_min_angle_improved(points)\n    print(math.degrees(min_angle))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    points = sorted(points)\n    angles = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                angles.append(math.pi / 2)\n            else:\n                angles.append(math.atan((points[j][1] - points[i][1]) / (points[j][0] - points[i][0])))\n    print(min(angles) * 180 / math.pi)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef get_theta(points):\n    return (points[1][1] - points[0][1]) / (points[1][0] - points[0][0])\n\ndef get_dist(points):\n    return ((points[1][0] - points[0][0])**2 + (points[1][1] - points[0][1])**2)**0.5\n\ndef get_input():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = [float(x) for x in input().split()]\n        points.append((x, y))\n    return points\n\ndef get_points(points):\n    max_d = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            dist = get_dist([p1, p2])\n            if dist > max_d:\n                max_d = dist\n                max_points = [p1, p2]\n    return max_points\n\ndef get_theta_max(points):\n    theta_max = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            theta = get_theta([p1, p2])\n            if theta > theta_max:\n                theta_max = theta\n                max_points = [p1, p2]\n    return theta_max, max_points\n\ndef main():\n    points = get_input()\n    theta_max, max_points = get_theta_max(points)\n    print(theta_max)\n    print(max_points)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom math import degrees, atan2, pi\n\npoints = []\n\nfor _ in range(int(stdin.readline())):\n    points.append(tuple(float(x) for x in stdin.readline().split()))\n\nfor p1 in points:\n    for p2 in points:\n        if p1 == p2:\n            continue\n        theta = degrees(atan2(p2[1] - p1[1], p2[0] - p1[0]))\n        if theta < 0:\n            theta += 360\n        print(theta)\n\n# print(degrees(atan2(1, 0)))\n# print(pi)"
    }
  ],
  "created": 1650141019,
  "id": "cmpl-4xjLfGEhWX9IxTdLGjFl1kY3Ep7pj",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:31:58.578586 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef get_angle(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.degrees(math.atan2(y2-y1, x2-x1))\n\ndef get_next_point(p1, p2, p3, p4):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n\n    y = ((x1-x2)*(y3-y4))/((y1-y2)*(x3-x4))\n    x = (y1-y2-y*y3+y*y4)/(x1-x2)\n    c = y1-y*y2-x*x1\n\n    return x, y, c\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n\n    angles = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            angles.append(get_angle(points[i], points[j]))\n    angles.sort()\n\n    max_angle = 0\n    for i in range(len(angles)-1):\n        max_angle = max(max_angle, angles[i+1]-angles[i])\n\n    print('%.3f' % (max_angle))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:31:58.578665 REASON stop
2022-04-16 20:31:58.596838 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef get_x(x, y):\n    return (x**2 + y**2)**(1/2)\n\ndef get_y(x, y):\n    return math.atan2(y, x)\n\ndef get_angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)\n\ndef get_distance(x1, y1, x2, y2):\n    return ((x2 - x1)**2 + (y2 - y1)**2)**(1/2)\n\ndef get_intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    d = ((x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4))\n    if d == 0:\n        return [0, 0]\n    x = ((x1*y2 - y1*x2)*(x3 - x4) - (x1 - x2)*(x3*y4 - y3*x4)) / d\n    y = ((x1*y2 - y1*x2)*(y3 - y4) - (y1 - y2)*(x3*y4 - y3*x4)) / d\n    return [x, y]\n\ndef get_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2)\n\ndef get_triangle_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2)\n\ndef get_quadrilateral_area(x1, y1, x2, y2, x3, y3, x4, y4):\n    return get_triangle_area(x1, y1, x2, y2, x3, y3) + get_triangle_area(x1, y1, x4, y4, x3, y3)\n\ndef get_circle_area(x1, y1, x2, y2, x3, y3):\n    a = get_distance(x1, y1, x2, y2)\n    b = get_distance(x2, y2, x3, y3)\n    c = get_distance(x3, y3, x1, y1)\n    p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\ndef get_point_to_line_distance(a, b, c, x, y):\n    return abs(a * x + b * y + c) / (a**2 + b**2)**(1/2)\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    x_, y_ = map(float, input().split())\n    x.append(x_)\n    y.append(y_)\n\nx1 = x[0]\ny1 = y[0]\nx2 = x[1]\ny2 = y[1]\nx3 = x[2]\ny3 = y[2]\n\nx_ = x3 + (x3 - x2)\ny_ = y3 + (y3 - y2)\n\nx4, y4 = get_intersection(x1, y1, x2, y2, x3, y3, x_, y_)\n\nx5 = x4 + x4 - x3\ny5 = y4 + y4 - y3\n\nx6 = x5 + x5 - x4\ny6 = y5 + y5 - y4\n\nx7 = x6 + x6 - x5\ny7 = y6 + y6 - y5\n\nx8 = x7 + x7 - x6\ny8 = y7 + y7 - y6\n\nx9 = x8 + x8 - x7\ny9 = y8 + y8 - y7\n\nx10 = x9 + x9 - x8\ny10 = y9 + y9 - y8\n\nx11 = x10 + x10 - x9\ny11 = y10 + y10 - y9\n\nx12 = x11 + x11 - x10\ny12 = y11 + y11 - y10\n\nx13 = x12 + x12 - x11\ny13 = y12 + y12 - y11\n\nx14 = x13 + x13 - x12\ny14 = y13 + y13 - y12\n\nx15 = x14 + x14 - x13\ny15 = y14 + y14 - y13\n\nx16 = x15 + x15 - x14\ny16 = y15 + y15 - y14\n\nx17 = x16 + x16 - x15\ny17 = y16 + y16 - y15\n\nx18 = x17 + x17 - x16\ny18 = y17 + y17 - y16\n\nx19 = x18 + x18 - x17\ny19 = y18 + y18 - y17\n\nx20 = x19 + x19 - x18\ny20 = y19 + y19 - y18\n\nx21 = x20 + x20 - x19\ny21 = y20 + y20 - y19\n\nx22 = x21 + x21 - x20\ny22 = y21 + y21 - y20\n\nx23 = x22 + x22 - x21\ny23 = y22 + y22 - y21\n\nx24 = x23 + x23 - x22\ny24 = y23 + y23 - y22\n\nx25 = x24 + x24 - x23\ny25 = y24 + y24 - y23\n\nx26 = x25 + x25 - x24\ny26 = y25 + y25 - y24\n\nx27 = x26 + x26 - x25\ny27 = y26 + y26 - y25\n\nx28 = x27 + x27 - x26\ny28 = y27 + y27 - y26\n\nx29 = x28 + x28 - x27\ny29 = y28 + y28 - y27\n\nx30 = x29 + x29 - x28\ny30 = y29 + y29 - y28\n\nx31 = x30 + x30 - x29\ny31 = y30 + y30 - y29\n\nx32 = x31 + x31 - x30\ny32 = y31 + y31 - y30\n\nx33 = x32 + x32 - x31\ny33 = y32 + y32 - y31\n\nx34 = x33 + x33 - x32\ny34 = y33 + y33 - y32\n\nx35 = x34 + x34 - x33\ny35 = y34 + y34 - y33\n\nx36 = x35 + x35 - x34\ny36 = y35 + y35 - y34\n\nx37 = x36 + x36 - x35\ny37 = y36 + y36 - y35\n\nx38 = x37 + x37 - x36\ny38 = y37 + y37 - y36\n\nx39 = x38 + x38 - x37\ny39 = y38 + y38 - y37\n\nx40 = x39 + x39 - x38\ny40 = y39 + y39 - y38\n\nx41 = x40 + x40 - x39\ny41 = y40 + y40 - y39\n\nx42 = x41 + x41 - x40\ny42 = y41 + y41 - y40\n\nx43 = x42 + x42 - x41\ny43 = y42 + y42 - y41\n\nx44 = x43 + x43 - x42\ny44 = y43 + y43 - y42\n\nx45 = x44 + x44 - x43\ny45 = y44 + y44 - y43\n\nx46 = x45 + x45 - x44\ny46 = y45 + y45 - y44\n\nx47 = x46 + x46 - x45\ny47 = y46 + y46 - y45\n\nx48 = x47 + x47 - x46\ny48 = y47 + y47 - y46\n\nx49 = x48 + x48 - x47\ny49 = y48 + y48 - y47\n\nx50 = x49 + x49 - x48\ny50 = y49 + y49 - y48\n\nx51 = x50 + x50 - x49\ny51 = y50 + y50 - y49\n\nx52 = x51 + x51 - x50\ny52 = y51 + y51 - y50\n\nx53 = x52 + x52 - x51\ny53 = y52 + y52 - y51\n\nx54 = x53 + x53 - x52\ny54 = y53 + y53 - y52\n\nx55 = x54 + x54 - x53\ny55 = y54 + y54 - y53\n\nx56 = x55 + x55 - x54\ny56 = y55 + y55 - y54\n\nx57 = x56 + x56 - x55\ny57 = y56 + y56 - y55\n\nx58 = x57 + x57 - x56\ny58 = y57 + y57 - y56\n\nx59 = x58 + x58 - x57\ny59 = y58 + y58 - y57\n\nx60 = x59 + x59 - x58\ny60 = y59 + y59 - y58\n\nx61 = x60 + x60 - x59\ny61 = y60 + y60 - y59\n\nx62 = x61 + x61 - x60\ny62 = y61 + y61 - y60\n\nx63 = x62 + x62 - x61\ny63 = y62 + y62 - y61\n\nx64 = x63 + x63 - x62\ny64 = y63 + y63 - y62\n\nx65 = x64 + x64 - x63\ny65 = y64 + y64 - y63\n\nx66 = x65 + x65 - x64\ny66 = y65 + y65 - y64\n\nx67 = x66 + x66 - x65\ny67 = y66 + y66 - y65\n\nx68 = x67 + x67 - x66\ny68 = y67 + y67 - y66\n\nx69 = x68 + x68 - x67\ny69 = y68 + y68 - y67\n\nx70 = x69 + x69 - x68\ny70 = y69 + y69 - y68\n\nx71 = x70 + x70 - x69\ny71 = y70 + y70 - y69\n\nx72 = x71 + x71 - x70\ny72 = y71 + y71 - y70\n\nx73 = x72 + x72 - x71\ny73 = y72 + y72 - y71\n\nx74 = x73 + x73 - x72\ny74 = y73 + y73 - y72\n\nx75 = x74 + x74 - x73\ny75 = y74 + y74 - y73\n\nx76 = x75 + x75 - x74\ny76 = y75 + y75 - y74\n\nx77 = x76 + x76 - x75\ny77 = y76 + y76 - y75\n\nx78 = x77 + x77 - x76\ny78 = y77 + y77 - y76\n\nx79 = x78 + x78 - x77\ny79 = y78 + y78 - y77\n\nx80 = x79 + x79 - x78\ny80 = y79 + y79 - y78\n\nx81 = x80 + x80 - x79\ny81 = y80 + y80 - y79\n\nx82 = x81 + x81 - x80\ny82 = y81 + y81 - y80\n\nx83 = x82 + x82 - x81\ny83 = y82 + y82 - y81\n\nx84 = x83 + x83 - x82\ny84 = y83 + y83 - y82\n\nx85 = x84 + x84 - x83\ny85 = y84 + y84 - y83\n\nx86 = x85 + x85 - x84\ny86 = y85 + y85 - y84\n\nx87 = x86 + x86 - x85\ny87 = y86 + y86 - y85\n\nx88 = x87 + x87 - x86\ny88 = y87 + y87 - y86\n\nx89 = x88 + x88 - x87\ny89 = y88 + y88 - y87\n\nx90 = x89 + x89 - x88\ny90 = y89 + y89 - y88\n\nx91 = x90 + x90 - x89\ny91 = y90 + y90 - y89\n\nx92 = x91 + x91 - x90\ny92 = y91 + y91 - y90\n\nx93 = x92 + x92 - x91\ny93 = y92 + y92 - y91\n\nx94 = x93 + x93 - x92\ny94 = y93 + y93 - y92\n\nx95 = x94 + x94 - x93\ny95 = y94 + y94 - y93\n\nx96 = x95 + x95 - x94\ny96 = y95 + y95"
}
2022-04-16 20:31:58.597049 REASON length
2022-04-16 20:31:58.597057 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split(\" \"))\n        points.append((x, y))\n    points.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[j][1] >= points[i][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n            else:\n                ans = max(ans, points[i][1] - points[j][1])\n    print(\"{:.3f}\".format(ans))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:31:58.597089 REASON stop
2022-04-16 20:31:58.597508 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n    for i in range(n):\n        points.append(map(float, sys.stdin.readline().split()))\n\n    # print(points)\n    # print(dist(points[0], points[1]))\n    # print(dist(points[0], points[2]))\n    # print(dist(points[1], points[2]))\n    # print(dist(points[2], points[1]))\n    # print(dist(points[2], points[0]))\n\n    # print(angle(points[1], points[0], points[2]))\n    # print(angle(points[2], points[1], points[0]))\n    # print(angle(points[0], points[2], points[1]))\n    # print(angle(points[0], points[1], points[2]))\n    # print(angle(points[2], points[0], points[1]))\n    # print(angle(points[1], points[2], points[0]))\n\n    max_angle = 0\n    for i in range(n):\n        for j in range(n):\n            p1 = points[i]\n            p2 = points[j]\n            if i != j:\n                for k in range(n):\n                    if i != k and j != k:\n                        p3 = points[k]\n                        # print(p1, p2, p3)\n                        angles = [angle(p1, p2, p3), angle(p1, p3, p2), angle(p2, p1, p3), angle(p2, p3, p1), angle(p3, p1, p2), angle(p3, p2, p1)]\n                        max_angle = max(max_angle, max(angles))\n    # print(max_angle)\n    print(round(max_angle, 3))\n\n\ndef angle(p1, p2, p3):\n    \"\"\"\n    Calculate the angle between three points\n    \"\"\"\n    return math.acos(\n        ((p2[0] - p1[0]) * (p3[0] - p1[0]) + (p2[1] - p1[1]) * (p3[1] - p1[1])) /\n        (dist(p1, p2) * dist(p1, p3))\n    )\n\n\ndef dist(p1, p2):\n    \"\"\"\n    Calculate the distance between two points\n    \"\"\"\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:31:58.597609 REASON stop
2022-04-16 20:31:58.616467 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return [int(x) for x in read_line().split()]\n\ndef read_floats():\n    return [float(x) for x in read_line().split()]\n\ndef solve_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return [float(\"inf\")]\n        else:\n            return [-c/b]\n    else:\n        if b**2 - 4*a*c < 0:\n            return []\n        else:\n            return [(-b + math.sqrt(b**2 - 4*a*c)) / (2*a), (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)]\n\ndef is_close(a, b):\n    return abs(a - b) < 1e-6\n\ndef get_angle(a, b, c):\n    ab = math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n    bc = math.sqrt((b[0] - c[0])**2 + (b[1] - c[1])**2)\n    ac = math.sqrt((a[0] - c[0])**2 + (a[1] - c[1])**2)\n    return math.acos((ab**2 + bc**2 - ac**2) / (2*ab*bc))\n\ndef get_min_angle(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                a = points[i]\n                b = points[j]\n                c = points[k]\n                ab = [b[0] - a[0], b[1] - a[1]]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                angle = get_angle(a, b, c)\n                if angle < min_angle:\n                    min_angle = angle\n    return min_angle\n\ndef get_min_angle_improved(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            a = points[i]\n            b = points[j]\n            ab = [b[0] - a[0], b[1] - a[1]]\n            ab_norm = math.sqrt(ab[0]**2 + ab[1]**2)\n            ab_normed = [ab[0] / ab_norm, ab[1] / ab_norm]\n            ab_perp = [-ab[1], ab[0]]\n            ab_perp_norm = math.sqrt(ab_perp[0]**2 + ab_perp[1]**2)\n            ab_perp_normed = [ab_perp[0] / ab_perp_norm, ab_perp[1] / ab_perp_norm]\n            t_values = []\n            for k in range(len(points)):\n                if k == i or k == j:\n                    continue\n                c = points[k]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                t = ab_normed[0] * ac[0] + ab_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n                t = ab_perp_normed[0] * ac[0] + ab_perp_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n            if len(t_values) > 0:\n                t_values.sort()\n                for k in range(len(t_values) - 1):\n                    angle = math.acos((2*t_values[k]*t_values[k+1] - (t_values[k]**2 + t_values[k+1]**2)) / (2*t_values[k]*t_values[k+1]))\n                    if angle < min_angle:\n                        min_angle = angle\n    return min_angle\n\ndef main():\n    n = int(read_line())\n    points = []\n    for i in range(n):\n        points.append(read_floats())\n    min_angle = get_min_angle_improved(points)\n    print(math.degrees(min_angle))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:31:58.616584 REASON stop
2022-04-16 20:31:58.622624 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    points = sorted(points)\n    angles = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                angles.append(math.pi / 2)\n            else:\n                angles.append(math.atan((points[j][1] - points[i][1]) / (points[j][0] - points[i][0])))\n    print(min(angles) * 180 / math.pi)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:31:58.622721 REASON stop
2022-04-16 20:31:58.624052 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef get_theta(points):\n    return (points[1][1] - points[0][1]) / (points[1][0] - points[0][0])\n\ndef get_dist(points):\n    return ((points[1][0] - points[0][0])**2 + (points[1][1] - points[0][1])**2)**0.5\n\ndef get_input():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = [float(x) for x in input().split()]\n        points.append((x, y))\n    return points\n\ndef get_points(points):\n    max_d = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            dist = get_dist([p1, p2])\n            if dist > max_d:\n                max_d = dist\n                max_points = [p1, p2]\n    return max_points\n\ndef get_theta_max(points):\n    theta_max = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            theta = get_theta([p1, p2])\n            if theta > theta_max:\n                theta_max = theta\n                max_points = [p1, p2]\n    return theta_max, max_points\n\ndef main():\n    points = get_input()\n    theta_max, max_points = get_theta_max(points)\n    print(theta_max)\n    print(max_points)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:31:58.624168 REASON stop
2022-04-16 20:31:58.625083 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom math import degrees, atan2, pi\n\npoints = []\n\nfor _ in range(int(stdin.readline())):\n    points.append(tuple(float(x) for x in stdin.readline().split()))\n\nfor p1 in points:\n    for p2 in points:\n        if p1 == p2:\n            continue\n        theta = degrees(atan2(p2[1] - p1[1], p2[0] - p1[0]))\n        if theta < 0:\n            theta += 360\n        print(theta)\n\n# print(degrees(atan2(1, 0)))\n# print(pi)"
}
2022-04-16 20:31:58.625193 REASON stop
