["\n\nimport sys\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nif n%3 != 0:\n    print(\"Error\")\n    sys.exit(1)\n\nc = Counter(s)\n\nif c['0'] > n//3:\n    print(\"Error\")\n    sys.exit(1)\n\nif c['1'] > n//3:\n    print(\"Error\")\n    sys.exit(1)\n\nif c['2'] > n//3:\n    print(\"Error\")\n    sys.exit(1)\n\nif c['0'] == n//3:\n    print(\"0\"*n)\n    sys.exit(0)\n\nif c['1'] == n//3:\n    print(\"1\"*n)\n    sys.exit(0)\n\nif c['2'] == n//3:\n    print(\"2\"*n)\n    sys.exit(0)\n\nout = \"\"\n\nif c['0'] > 0:\n    out += \"0\"\n    c['0'] -= 1\nif c['1'] > 0:\n    out += \"1\"\n    c['1'] -= 1\nif c['2'] > 0:\n    out += \"2\"\n    c['2'] -= 1\n\nwhile c['0'] != 0 and c['2'] != 0:\n    out += \"02\"\n    c['0'] -= 1\n    c['2'] -= 1\n\nwhile c['0'] != 0 and c['1'] != 0:\n    out += \"01\"\n    c['0'] -= 1\n    c['1'] -= 1\n\nwhile c['1'] != 0 and c['2'] != 0:\n    out += \"12\"\n    c['1'] -= 1\n    c['2'] -= 1\n\nprint(out+(\"0\"*c['0'])+(\"1\"*c['1'])+(\"2\"*c['2']))", "\n\ndef main():\n    input()\n    s = input()\n    r = \"\"\n    if s.count(\"0\") < s.count(\"2\"):\n        for c in s:\n            if c == \"2\":\n                r = r + \"0\"\n            elif c == \"1\":\n                r = r + \"1\"\n            else:\n                r = r + \"2\"\n        print(r)\n    else:\n        print(s)\n\nif __name__ == '__main__':\n    main()", "\n\n#-----Solution-----\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    assert len(s) == n\n    assert n % 3 == 0\n    # assert all(c in '012' for c in s)\n    assert s.count('0') % 3 == 0\n    assert s.count('1') % 3 == 0\n    assert s.count('2') % 3 == 0\n\n    if s.count('0') == n // 3 and s.count('1') == n // 3 and s.count('2') == n // 3:\n        print(s)\n        sys.exit(0)\n\n    if s.count('0') > n // 3:\n        i = n - n // 3\n        while i < n and s[i] != '0':\n            i += 1\n        s = s[:i] + '1' + s[i+1:]\n    elif s.count('0') < n // 3:\n        i = 0\n        while i < n and s[i] != '1':\n            i += 1\n        s = s[:i] + '0' + s[i+1:]\n\n    if s.count('1') > n // 3:\n        i = n - n // 3\n        while i < n and s[i] != '1':\n            i += 1\n        s = s[:i] + '2' + s[i+1:]\n    elif s.count('1') < n // 3:\n        i = 0\n        while i < n and s[i] != '2':\n            i += 1\n        s = s[:i] + '1' + s[i+1:]\n\n    if s.count('2') > n // 3:\n        i = n - n // 3\n        while i < n and s[i] != '2':\n            i += 1\n        s = s[:i] + '0' + s[i+1:]\n    elif s.count('2') < n // 3:\n        i = 0\n        while i < n and s[i] != '0':\n            i += 1\n        s = s[:i] + '2' + s[i+1:]\n\n    print(s)\n\nmain()", "\n\nimport sys\n\n# n = int(input())\n# s = input()\n\nn = 3\ns = \"121\"\n\n# n = 6\n# s = \"000000\"\n\n# n = 6\n# s = \"211200\"\n\n# n = 6\n# s = \"120110\"\n\n# n = 6\n# s = \"102100\"\n\n\ndef solve(n, s):\n    zeroes = 0\n    ones = 0\n    twos = 0\n\n    for i in range(n):\n        if s[i] == \"0\":\n            zeroes += 1\n        elif s[i] == \"1\":\n            ones += 1\n        else:\n            twos += 1\n\n    if zeroes == ones and ones == twos:\n        return s\n\n    if zeroes > ones:\n        ones += 1\n        zeroes -= 1\n    elif ones > twos:\n        twos += 1\n        ones -= 1\n    else:\n        zeroes += 1\n        twos -= 1\n\n    s = s.replace(\"0\", \"\", zeroes)\n    s = s.replace(\"1\", \"\", ones)\n    s = s.replace(\"2\", \"\", twos)\n\n    return solve(n, s)\n\n\nprint(solve(n, s))", "\n\ndef main():\n    n = int(input())\n    s = input()\n\n    n_0 = n // 3\n    n_1 = n // 3\n    n_2 = n // 3\n\n    for i in range(n):\n        if s[i] == '0':\n            n_0 -= 1\n        elif s[i] == '1':\n            n_1 -= 1\n        else:\n            n_2 -= 1\n\n        if n_0 < 0:\n            s = s[:i] + '0' * (-n_0) + s[i:]\n            n_0 = 0\n        elif n_1 < 0:\n            s = s[:i] + '1' * (-n_1) + s[i:]\n            n_1 = 0\n        elif n_2 < 0:\n            s = s[:i] + '2' * (-n_2) + s[i:]\n            n_2 = 0\n\n    print(s)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    if n % 3 == 0:\n        left_most = None\n        for i in range(n):\n            if s[i] != \"0\":\n                left_most = i\n                break\n        res = [\"0\"] * n\n        for i in range(left_most, n):\n            if s[i] == \"0\":\n                res[i] = \"0\"\n            elif s[i] == \"1\":\n                res[i] = \"1\"\n            else:\n                res[i] = \"2\"\n        print(\"\".join(res))\n    else:\n        print(\"No solution\")\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\ns = input()\n\nr = [0]*3\nfor c in s:\n    r[int(c)] += 1\n\nres = [\"\"]*n\n\nfor i in range(n):\n    x = min(r)\n    y = r.index(x)\n    res[i] = str(y)\n    r[y] += 1\n\nprint(\"\".join(res))", "\n\nn = int(input())\ns = input()\n\n#substitute each character with 0, 1, or 2\n#if substitution is not possible, then the balanced ternary string is the same as the original\n#the balanced ternary string with the least replacements will be the one with the least 0's, then 1's, then 2's\n#so we start by replacing 2's with 0's, then 1's with 0's, then 2's with 1's, then 1's with 2's\n#the order of replacement is important because we want the least number of replacements\n\nfor i in range(len(s)):\n    if s[i] == '2':\n        s = s[:i] + '0' + s[i+1:]\n\n    elif s[i] == '1':\n        s = s[:i] + '0' + s[i+1:]\n\n    elif s[i] == '0':\n        s = s[:i] + '1' + s[i+1:]\n\nprint(s)"]