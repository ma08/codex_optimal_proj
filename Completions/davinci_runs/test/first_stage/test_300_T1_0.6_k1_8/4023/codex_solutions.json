["\n\ndef canComplete(n, wall):\n    if n == 1:\n        return True\n    # find the highest wall\n    highest = max(wall)\n    # every wall should be equal to highest\n    for i in range(n):\n        if wall[i] != highest:\n            return False\n    return True\n\nn = int(input())\nwall = list(map(int, input().split()))\n\nif canComplete(n, wall):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a))==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    wall = [int(i) for i in input().split()]\n    if n == 1:\n        print(\"YES\")\n        return\n    elif n == 2:\n        print(\"YES\" if wall[0] == wall[1] else \"NO\")\n        return\n    else:\n        maxHeight = max(wall)\n        minHeight = min(wall)\n        if (maxHeight - minHeight) % 2 == 0:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef canComplete(n, heights):\n    # If the height of all the parts of the wall are equal, then the wall is complete\n    if len(set(heights)) == 1:\n        return \"YES\"\n    \n    # If there are no equal adjacent parts of the wall, then the wall can never be complete\n    if len(set(heights)) == len(heights):\n        return \"NO\"\n\n    # If there are equal adjacent parts of the wall, then the wall can be complete\n    return \"YES\"\n\n# Test cases\nassert canComplete(5, [2, 1, 1, 2, 5]) == \"YES\"\nassert canComplete(3, [4, 5, 3]) == \"NO\"\nassert canComplete(2, [10, 10]) == \"YES\"\nassert canComplete(2, [2, 2]) == \"YES\"\nassert canComplete(3, [1, 2, 3]) == \"NO\"\nassert canComplete(4, [5, 5, 5, 5]) == \"YES\"\n# If a brick is placed horizontally on 2 parts of the wall, then the height of both parts of the wall increase by 1\n# If a brick is placed vertically on 2 parts of the wall, then the height of one part of the wall increases by 2 and the other part remains the same\n# A wall is complete when the height of all parts of the wall are the same and there are no empty spaces in the wall\n# If there are no empty spaces in the wall, then the height of all parts of the wall must be equal\n# If the height of all parts of the wall are equal, then there are no empty spaces in the wall\n# If there are no equal adjacent parts of the wall, then the wall can never be complete\n# If there are equal adjacent parts of the wall, then the wall can be complete\n# If the height of all the parts of the wall are equal, then the wall is complete", "\n\nn=int(input())\na=list(map(int,input().split()))\nif(all(a[0]==a[i] for i in range(n))):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\n\ndef check(n, a):\n    if a[0] != a[n-1]:\n        return \"NO\"\n    for i in range(n-1):\n        if a[i+1] - a[i] > 1:\n            return \"NO\"\n    return \"YES\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nprint(check(n, a))", "\n\ndef solve(n, a):\n    n_holes = 0\n    max_a = max(a)\n    if max_a <= 1:\n        return 'YES'\n    if n == 1:\n        return 'NO'\n    for i in range(1, n-1):\n        if a[i] == max_a and a[i-1] == a[i+1]:\n            n_holes += 1\n    if n_holes >= max_a - 1:\n        return 'YES'\n    return 'NO'\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(n, a))\n\nif __name__ == '__main__':\n    main()"]