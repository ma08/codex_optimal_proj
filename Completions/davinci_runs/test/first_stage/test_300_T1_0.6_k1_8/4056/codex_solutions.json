["\n\n__author__ = 'Danyang'\nMOD = 10**9+7\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        n = cipher\n        a = map(int, raw_input().strip().split(' '))\n\n        # for each element, find the number of divisors\n        # for each divisor, count the number of occurrence\n        # find the common divisors\n        # count the number of common divisors\n\n        max_a = max(a)\n        cnt_divisor = [0 for _ in xrange(max_a+1)]\n        for num in a:\n            for divisor in xrange(1, int(math.sqrt(num))+1):\n                if num%divisor==0:\n                    cnt_divisor[divisor] += 1\n                    if divisor!=num/divisor:\n                        cnt_divisor[num/divisor] += 1\n\n        ret = 0\n        for i in xrange(max_a+1):\n            if cnt_divisor[i]==n:\n                ret += 1\n        return ret\n\nif __name__==\"__main__\":\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = f.readline().strip()\n\n        # solve\n        s = \"%s\\n\"%(Solution().solve(cipher))\n        print s,", "\n\nfrom sys import stdin\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_list(l):\n    return reduce(gcd, l)\n\ndef main():\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    g = gcd_list(l)\n    d = {}\n    for i in range(2, g + 1):\n        if g % i == 0:\n            d[i] = True\n    print(len(d))\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return divisors\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    divisors = get_divisors(a[0])\n    for i in range(1, n):\n        divisors = list(set(divisors).intersection(get_divisors(a[i])))\n    print(len(divisors))\n\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution:\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    a[i] = math.gcd(a[i], a[i-1])\n\nfor i in range(n):\n    a[i] = math.gcd(a[i], a[i-1])\n\nprint(a[n-1])", "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [1, 2, 3, 4, 5]\n\ndef common_divisors(a):\n    if len(a) == 1:\n        return 1\n    else:\n        b = a[1:]\n        c = []\n        for i in range(1, a[0]+1):\n            if a[0] % i == 0:\n                c.append(i)\n        for i in a:\n            if i in b:\n                b.remove(i)\n        return common_divisors(b) + len(c)\n\nprint(common_divisors(a))", "\n\n# ---Solution---\n\ndef find_gcd(a, b):\n    if a == 0:\n        return b\n    return find_gcd(b % a, a)\n\ndef find_lcm(a, b):\n    return (a * b) // find_gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nlcm = a[0]\nfor i in range(1, n):\n    lcm = find_lcm(lcm, a[i])\n\nprint(len(str(lcm)))", "\n\nfrom math import gcd\nfrom functools import reduce\nfrom collections import Counter\n\ndef factorize(num):\n    factors = []\n    for i in range(2, num+1):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n        if num == 1:\n            break\n    return factors\n\ndef count_factors(num):\n    factors = factorize(num)\n    count = Counter(factors)\n    return count\n\n\ndef count_factors_of_all(nums):\n    if len(nums) == 1:\n        return count_factors(nums[0])\n    else:\n        return nums[0] + count_factors_of_all(nums[1:])\n\ndef get_common_factors(count):\n    common = []\n    for k, v in count.items():\n        if v == len(nums):\n            common.append(k)\n    return common\n\nn = int(input())\nnums = [int(i) for i in input().split()]\n\ncount = count_factors_of_all(nums)\ncount = dict(count)\ncommon = get_common_factors(count)\n\nprint(len(common))", "\n\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a, a)\n\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\ncommon_lcm = a[0]\nfor i in range(1,n):\n    common_lcm = lcm(common_lcm, a[i])\n\ncount = 0\nfor i in range(1, common_lcm+1):\n    if common_lcm%i == 0:\n        count += 1\nprint(count)"]