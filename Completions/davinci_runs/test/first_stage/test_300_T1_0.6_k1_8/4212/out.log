2022-04-16 20:17:33.888714 """
Given are positive integers N, M, Q, and Q quadruples of integers ( a_i , b_i , c_i , d_i ).
Consider a sequence A satisfying the following conditions:
 - A is a sequence of N positive integers.
 - 1 \leq A_1 \leq A_2 \le \cdots \leq A_N \leq M.
Let us define a score of this sequence as follows:
 - The score is the sum of d_i over all indices i such that A_{b_i} - A_{a_i} = c_i. (If there is no such i, the score is 0.)
Find the maximum possible score of A.

-----Constraints-----
 - All values in input are integers.
 - 2 ≤ N ≤ 10
 - 1 \leq M \leq 10
 - 1 \leq Q \leq 50
 - 1 \leq a_i < b_i \leq N ( i = 1, 2, ..., Q )
 - 0 \leq c_i \leq M - 1 ( i = 1, 2, ..., Q )
 - (a_i, b_i, c_i) \neq (a_j, b_j, c_j) (where i \neq j)
 - 1 \leq d_i \leq 10^5 ( i = 1, 2, ..., Q )

-----Input-----
Input is given from Standard Input in the following format:
N M Q
a_1 b_1 c_1 d_1
:
a_Q b_Q c_Q d_Q

-----Output-----
Print the maximum possible score of A.

-----Sample Input-----
3 4 3
1 3 3 100
1 2 2 10
2 3 2 10

-----Sample Output-----
110

When A = \{1, 3, 4\}, its score is 110. Under these conditions, no sequence has a score greater than 110, so the answer is 110.
"""
2022-04-16 20:17:33.888741 --------------------------
2022-04-16 20:17:58.069721 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# ============ #\n#  Functions   #\n# ============ #\n\ndef read_input():\n    global N, M, Q, abcd_list\n    N, M, Q = map(int, input().split())\n    abcd_list = [list(map(int, input().split())) for i in range(Q)]\n\n\ndef calc_score(sequence):\n    score = 0\n    for a, b, c, d in abcd_list:\n        if sequence[b-1] - sequence[a-1] == c:\n            score += d\n    return score\n\n\ndef dfs(depth, sequence):\n    if depth == N:\n        return calc_score(sequence[:])\n    ans = 0\n    for i in range(1, M+1):\n        sequence.append(i)\n        ans = max(ans, dfs(depth+1, sequence))\n        sequence.pop()\n    return ans\n\n\n# ============ #\n#  Main        #\n# ============ #\n\nread_input()\nans = dfs(0, [])\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# \u65b9\u91dd\n# \u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306bDP\u3092\u4f7f\u3046\n# DP[i][j] := i\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u4f7f\u3044\u3001\u6700\u5f8c\u306e\u8981\u7d20\u304cj\u306e\u3068\u304d\u306e\u6700\u5927\u5024\n# DP[i][j] = max(DP[i][j], DP[i-1][k]) + d[i][j]\n# \u3053\u308c\u3067\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\ndef main():\n    N, M, Q = map(int, input().split())\n    d = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(Q):\n        a, b, c, dd = map(int, input().split())\n        d[b][c] += dd\n    DP = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            DP[i][j] = DP[i-1][j]\n            for k in range(1, M+1):\n                DP[i][j] = max(DP[i][j], DP[i-1][k])\n            DP[i][j] += d[i][j]\n    print(max(DP[N]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    N, M, Q = map(int, sys.stdin.readline().split())\n    query = []\n    for q in range(Q):\n        a, b, c, d = map(int, sys.stdin.readline().split())\n        query.append((a-1, b-1, c, d))\n    query.sort(key=lambda x: x[2])\n    # print(query)\n\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[N][N] = 0\n    for i in range(N-1, -1, -1):\n        dp[i][N] = dp[i+1][N]\n        dp[N][i] = dp[N][i+1]\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, i, -1):\n            dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n\n    for i in range(Q):\n        a, b, c, d = query[i]\n        dp[a][b] = max(dp[a+1][b], dp[a][b+1], dp[a][b] + d)\n\n    print(dp[0][0])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# Input\nN, M, Q = map(int, input().split())\n\nconditions = list()\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    conditions.append((a, b, c, d))\n\n# Calculate\ndp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(M+1):\n        for a, b, c, d in conditions:\n            if a-1 == i and b-1 == i+1 and j-c == 0:\n                dp[i+1][j] = max(dp[i][j]+d, dp[i+1][j])\n            elif a-1 <= i and b-1 == i+1 and 0 <= j-c <= M:\n                dp[i+1][j] = max(dp[i][j-c]+d, dp[i+1][j])\n            else:\n                dp[i+1][j] = dp[i][j]\n\nprint(dp[N][0])"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# sys.stdin = open('in.txt')\n\nn, m, q = map(int, input().split())\n\na = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    ai, bi, ci, di = map(int, input().split())\n    a[ai][ci] += di\n    if bi != n:\n        a[bi + 1][ci] -= di\n\ns = 0\nans = 0\n\nfor i in range(1, n + 1):\n    for j in range(m):\n        s += a[i][j]\n        ans = max(ans, s)\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN, M, Q = (int(x) for x in input().split())\n\n# dp[i][j][k] = maximum possible score of A_1, A_2, ..., A_i, where A_i = j, A_i - A_{i-1} = k\ndp = [[[0 for k in range(M)] for j in range(M)] for i in range(N+1)]\n\nfor i in range(1, Q+1):\n    a, b, c, d = (int(x) for x in input().split())\n    a -= 1\n    b -= 1\n    if a == 0:\n        for j in range(c, M):\n            dp[b][j][c] = max(dp[b][j][c], d)\n    else:\n        for j in range(M):\n            for k in range(M):\n                if j + k >= M:\n                    continue\n                dp[b][j+k][k] = max(dp[b][j+k][k], dp[a][j][k] + d)\n\nprint(max(max(max(dp[N]))))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN, M, Q = map(int, input().split())\n\nmax_score = 0\n\nfor i in range(Q):\n    a, b, c, d = map(int, input().split())\n    if b - a == c:\n        max_score += d\n\nprint(max_score)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    score = 0\n    for i in range(q):\n        a, b, c, d = map(int, sys.stdin.readline().split())\n        if a == 1:\n            score += d\n        else:\n            score += d * (m - c)\n    print(score)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650140254,
  "id": "cmpl-4xj9K2vHQQOOax3ifI4CsUMuTTu5d",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:17:58.070073 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# ============ #\n#  Functions   #\n# ============ #\n\ndef read_input():\n    global N, M, Q, abcd_list\n    N, M, Q = map(int, input().split())\n    abcd_list = [list(map(int, input().split())) for i in range(Q)]\n\n\ndef calc_score(sequence):\n    score = 0\n    for a, b, c, d in abcd_list:\n        if sequence[b-1] - sequence[a-1] == c:\n            score += d\n    return score\n\n\ndef dfs(depth, sequence):\n    if depth == N:\n        return calc_score(sequence[:])\n    ans = 0\n    for i in range(1, M+1):\n        sequence.append(i)\n        ans = max(ans, dfs(depth+1, sequence))\n        sequence.pop()\n    return ans\n\n\n# ============ #\n#  Main        #\n# ============ #\n\nread_input()\nans = dfs(0, [])\nprint(ans)"
}
2022-04-16 20:17:58.070110 REASON stop
2022-04-16 20:17:58.087564 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# \u65b9\u91dd\n# \u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306bDP\u3092\u4f7f\u3046\n# DP[i][j] := i\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u4f7f\u3044\u3001\u6700\u5f8c\u306e\u8981\u7d20\u304cj\u306e\u3068\u304d\u306e\u6700\u5927\u5024\n# DP[i][j] = max(DP[i][j], DP[i-1][k]) + d[i][j]\n# \u3053\u308c\u3067\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\ndef main():\n    N, M, Q = map(int, input().split())\n    d = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(Q):\n        a, b, c, dd = map(int, input().split())\n        d[b][c] += dd\n    DP = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            DP[i][j] = DP[i-1][j]\n            for k in range(1, M+1):\n                DP[i][j] = max(DP[i][j], DP[i-1][k])\n            DP[i][j] += d[i][j]\n    print(max(DP[N]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:17:58.087766 REASON stop
2022-04-16 20:17:58.088272 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    N, M, Q = map(int, sys.stdin.readline().split())\n    query = []\n    for q in range(Q):\n        a, b, c, d = map(int, sys.stdin.readline().split())\n        query.append((a-1, b-1, c, d))\n    query.sort(key=lambda x: x[2])\n    # print(query)\n\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[N][N] = 0\n    for i in range(N-1, -1, -1):\n        dp[i][N] = dp[i+1][N]\n        dp[N][i] = dp[N][i+1]\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, i, -1):\n            dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n\n    for i in range(Q):\n        a, b, c, d = query[i]\n        dp[a][b] = max(dp[a+1][b], dp[a][b+1], dp[a][b] + d)\n\n    print(dp[0][0])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:17:58.088339 REASON stop
2022-04-16 20:17:58.105550 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# Input\nN, M, Q = map(int, input().split())\n\nconditions = list()\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    conditions.append((a, b, c, d))\n\n# Calculate\ndp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(M+1):\n        for a, b, c, d in conditions:\n            if a-1 == i and b-1 == i+1 and j-c == 0:\n                dp[i+1][j] = max(dp[i][j]+d, dp[i+1][j])\n            elif a-1 <= i and b-1 == i+1 and 0 <= j-c <= M:\n                dp[i+1][j] = max(dp[i][j-c]+d, dp[i+1][j])\n            else:\n                dp[i+1][j] = dp[i][j]\n\nprint(dp[N][0])"
}
2022-04-16 20:17:58.105656 REASON stop
2022-04-16 20:17:58.119264 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# sys.stdin = open('in.txt')\n\nn, m, q = map(int, input().split())\n\na = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    ai, bi, ci, di = map(int, input().split())\n    a[ai][ci] += di\n    if bi != n:\n        a[bi + 1][ci] -= di\n\ns = 0\nans = 0\n\nfor i in range(1, n + 1):\n    for j in range(m):\n        s += a[i][j]\n        ans = max(ans, s)\n\nprint(ans)"
}
2022-04-16 20:17:58.119416 REASON stop
2022-04-16 20:17:58.121166 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN, M, Q = (int(x) for x in input().split())\n\n# dp[i][j][k] = maximum possible score of A_1, A_2, ..., A_i, where A_i = j, A_i - A_{i-1} = k\ndp = [[[0 for k in range(M)] for j in range(M)] for i in range(N+1)]\n\nfor i in range(1, Q+1):\n    a, b, c, d = (int(x) for x in input().split())\n    a -= 1\n    b -= 1\n    if a == 0:\n        for j in range(c, M):\n            dp[b][j][c] = max(dp[b][j][c], d)\n    else:\n        for j in range(M):\n            for k in range(M):\n                if j + k >= M:\n                    continue\n                dp[b][j+k][k] = max(dp[b][j+k][k], dp[a][j][k] + d)\n\nprint(max(max(max(dp[N]))))"
}
2022-04-16 20:17:58.121259 REASON stop
2022-04-16 20:17:58.126378 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN, M, Q = map(int, input().split())\n\nmax_score = 0\n\nfor i in range(Q):\n    a, b, c, d = map(int, input().split())\n    if b - a == c:\n        max_score += d\n\nprint(max_score)"
}
2022-04-16 20:17:58.126475 REASON stop
2022-04-16 20:17:58.127512 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    score = 0\n    for i in range(q):\n        a, b, c, d = map(int, sys.stdin.readline().split())\n        if a == 1:\n            score += d\n        else:\n            score += d * (m - c)\n    print(score)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:17:58.127603 REASON stop
