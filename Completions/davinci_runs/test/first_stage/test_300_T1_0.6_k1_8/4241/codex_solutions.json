["\n\nS = str(input())\nT = str(input())\n\ndef solution(S,T):\n    temp = 0\n    for i in range(0, len(T)):\n        if S[i] == T[i]:\n            temp = temp + 1\n    return len(T) - temp\n\nprint(solution(S,T))", "\n\ns = input()\nt = input()\n\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] != t[i]:\n        count += 1\n\nprint(count)", "\n\ns = input()\nt = input()\nlen_s = len(s)\nlen_t = len(t)\n\ndp = [[0 for _ in range(len_t + 1)] for _ in range(len_s + 1)]\n\nfor i in range(len_s):\n    for j in range(len_t):\n        dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n        if s[i] == t[j]:\n            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + 1)\n\nprint(len_s - dp[len_s][len_t])", "\n\nimport sys\n\ndef min_changes(s, t):\n    n_changes = 0\n    prev_match_idx = -1\n    for i, t_char in enumerate(t):\n        s_idx = s.find(t_char, prev_match_idx + 1)\n        if s_idx == -1:\n            n_changes += 1\n        else:\n            prev_match_idx = s_idx\n    return n_changes\n\nif __name__ == \"__main__\":\n    s = next(sys.stdin).strip()\n    t = next(sys.stdin).strip()\n    print(min_changes(s, t))", "\n\ns = input()\nt = input()\n\ncount = 0\nfor i in range(len(s)):\n    for j in range(len(t)):\n        if s[i+j] == t[j]:\n            continue\n        else:\n            count +=1\nprint(count)", "\n\ns = input()\nt = input()\n\n#s = \"cabacc\"\n#t = \"abc\"\n\n\"\"\"\ndef get_diff_count(a,b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            count += 1\n    return count\n\"\"\"\n\ndef get_diff_count(a,b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            count += 1\n    return count\n\nmin_diff = len(s)\nfor i in range(len(s) - len(t) + 1):\n    diff = get_diff_count(s[i:i+len(t)],t)\n    if diff < min_diff:\n        min_diff = diff\nprint(min_diff)", "\n\ndef solve(s, t):\n\tanswer = 0\n\tt_pos = 0\n\tfor s_pos in range(len(s)):\n\t\tif t_pos == len(t):\n\t\t\tbreak\n\t\tif s[s_pos] != t[t_pos]:\n\t\t\tanswer += 1\n\t\telse:\n\t\t\tt_pos += 1\n\n\treturn answer\n\ndef main():\n\ts = input()\n\tt = input()\n\tprint(solve(s, t))\n\nif __name__ == '__main__':\n\tmain()", "\n\ndef count_substring_changes(s, t):\n    min_changes = len(s)\n    for i in range(len(s)):\n        changes = 0\n        for j in range(len(t)):\n            if s[i+j] != t[j]:\n                changes += 1\n        if changes < min_changes:\n            min_changes = changes\n    return min_changes\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(count_substring_changes(s, t))"]