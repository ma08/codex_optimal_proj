["from collections import defaultdict\nn = int(input())\ns_dict = defaultdict(int)\nfor i in range(n):\n  s_int = [0] * 26\n  s = list(input())\n  for si in s:\n    s_int[ord(si) - ord('a')] += 1\n  cnt = 0\n  for s_int_i in s_int:\n    cnt *= 10\n    cnt += s_int_i\n  s_dict[cnt] += 1\nans = 0\nfor key in s_dict:\n  ans += s_dict[key] * (s_dict[key] - 1) / 2\nprint(int(ans))", "from collections import Counter\n\nn = int(input())\n\na =[]\nans= 0\nfor i in range(n):\n  b = sorted(input())\n  b = \"\".join(b)\n  a.append(b)\nmycounter =Counter(a)\nfor j in mycounter.values():\n  l = j\n  if l >= 2:\n    ans += ((l-1)+1)*(l-1)//2\n\nprint(ans)", "N = int(input())\ndic = {}\nans = 0\nfor i in range(N):\n    a = sorted(input())\n    a = \"\".join(a)\n    if a in dic:\n        ans += dic[a]\n        dic[a] += 1\n    else:\n        dic[a] =1\nprint(ans)", "N=int(input())\nS=[''.join(sorted(input())) for _ in range(N)]\nans=0\nnum=1\nS.sort()\nfor i in range(1,N):\n    if S[i-1]==S[i]:\n        num+=1\n    else:\n        ans+=num*(num-1)//2\n        num=1\nans+=num*(num-1)//2\nprint(ans)\n", "from collections import Counter\nN = int(input())\nAset = dict()\nAns = 0\nfor _ in range(N):\n    S = input()\n    NewS = ''\n    S = sorted(S)\n    for i in range(len(S)):\n        NewS += S[i]\n    if NewS not in Aset:\n        Aset[NewS] = 1\n    else:\n        Ans += Aset[NewS]\n        Aset[NewS] += 1\nprint(Ans)", "import collections\nN = int(input())\nls, rst = [], 0\nfor i in range(N):\n    s = list(input())\n    s.sort()\n    ls.append(''.join(s))\nrst_ls = collections.Counter(ls)\nfor i in rst_ls.values():\n    rst += (i * (i - 1)) // 2\nprint(rst)", "import collections\nimport sys\n\ninput = sys.stdin.readline\n\nclass common_function():\n    \"\"\"\n        1. \u3088\u304f\u4f7f\u3044\u305d\u3046\u3067\u4e88\u3081\u7528\u610f\u3057\u3066\u3042\u308b\u3082\u306e\u3092\u307e\u3068\u3081\u305f\n        2. \u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u95a2\u6570\u7fa4\u3092\u307e\u3068\u3081\u305f\n    \"\"\"\n    def nCk(self, n:int, k:int):\n        \"\"\"\n            mod \u3092\u4f7f\u7528\u3057\u306a\u3044 combination nCk \u3092\u6c42\u3081\u308b\u30e1\u30bd\u30c3\u30c9\n            1\u56de \u306e nCk \u3092\u6c42\u3081\u308b\u306e\u306b O(k) \u304b\u304b\u308b.\n        \"\"\"\n        k = min(k, n-k)\n        numer = 1\n        for i in range(n, n-k, -1):\n            numer *= i\n        denom = 1\n        for i in range(k, 1, -1):\n            denom *= i\n        return numer // denom\n\ndef main():\n    common = common_function()\n    N = int(input())\n    slist = []\n    tlist = []\n    for _ in range(N):\n        s = list(input()[:-1])\n        s.sort()\n        slist.append(s)\n    slist.sort()\n    cnt = 1; tlist.append(cnt)\n    for i in range(N-1):\n        if slist[i] == slist[i+1]:\n            tlist.append(cnt)\n        else:\n            cnt += 1\n            tlist.append(cnt)\n    tlistcount = list(collections.Counter(tlist).items())\n    tlistcount.sort(key=lambda x: x[1], reverse=True)\n    ans = 0\n    for t0, t1 in tlistcount:\n        if t1 == 1:\n            break\n        ans += common.nCk(t1, 2)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\nn = int(input())\nm = []\ncount = 0\nfor i in range(n):\n    m.append(\"\".join(sorted(str(input()))))\nm = Counter(m)\nans = 0\nfor j in m.values():\n    ans += j * (j-1) / 2\nprint(int(ans))", "from collections import Counter\nn = int(input())\ns = [tuple(sorted(input())) for _ in range(n)]\n\nc = Counter(s)\nans = 0\nfor i in list(c.values()):\n    ans += i*(i-1)//2\nprint(ans)\n", "from math import factorial as f\n\nn = int(input())\nd = {}\n\nfor _ in range(n):\n  s = list(input())\n  s.sort()\n  s = \"\".join(s)\n\n  is_ok = d.get(s, False)\n  if is_ok: d[s] += 1\n  else: d[s] = 1\n\nans = 0\n\nfor i in d.values():\n  if i >= 2:\n    ans += f(i) // f(i-2) // f(2)\n\nprint(ans)", "N = int(input())\nl = []\nfor i in range(N):\n    s = input()\n    S = [s[x] for x in range(10)]\n    S = sorted(S)\n    s = \"\"\n    for j in range(10):\n        s += S[j]\n    l.append(s)\n\n\nfrom collections import Counter\n\nl = Counter(l)\nc = l.values()\nans = 0\nfor i in c:\n    ans += i * (i - 1) // 2\n\nprint(ans)", "n = int(input())\nL = [\"\".join(sorted(input())) for i in range(n)]\n\n\nfrom collections import Counter\nL = Counter(L)\n\ndef num(n):\n    return n*(n-1)//2\n    \ncnt = 0  \nfor v in L.values():\n    cnt +=num(v)\nprint(cnt)", "n = int(input())\nd = dict()\nfor i in range(n):\n  S = ''.join(sorted(list(input())))\n  if S in d.keys():\n    d[S] +=1\n  else:\n    d[S] = 1\n \nans = 0\nfor i in d.values():\n  ans += i*(i-1)//2\nprint(ans)", "from collections import Counter \nN = int(input())\ns = [input() for _ in range(N)]\n \n# N=10^5\u3088\u308a\u3001O(N)\u3067\u89e3\u304f\nfor i in range(N):\n  s[i] = sorted(s[i])\n  s[i] = ''.join(s[i])\n\ns = Counter(s).most_common()\nans = 0\nfor t in s:\n  ans += t[1]*(t[1]-1)//2\n  \nprint(ans)", "import collections\nn=int(input())\ns=[]\na=0\n\nfor i in range(n):\n    b=list(input())\n    b.sort()\n    b=str(b)\n    s.append(b)\n\nc=collections.Counter(s)\n\nfor i in c.values():\n    if i>1:\n        a+=i*(i-1)//2\n\nprint(a)", "n=int(input())\nmozi=[]\nfor i in range(n):\n    mozi.append(sorted(input()))\nmozi.sort()\n\ndef hantei(x,y):\n    for i in range(10):\n        if x[i]!=y[i]:\n            return False\n    return True\n\ndef conbi(n,r):\n    ue=1\n    for i in range(n-r+1,n+1):\n        ue*=i\n \n    sita=1\n \n    for i in range(1,r+1):\n        sita*=i\n \n \n    return (ue//sita)\ni=0\nans=0\nwhile i<n-1:\n    c=1\n    while i<n-1 and hantei(mozi[i],mozi[i+1]):\n        c+=1\n        i+=1\n    ans+=conbi(c,2)\n    i+=1\n\nprint(ans)", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n    s = [''.join(sorted(list(SS()))) for _ in range(N)]\n\n    cnt = collections.Counter(s)\n    ans = sum([i * (i - 1) // 2 for i in list(cnt.values())])\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import collections \nfrom scipy.special import comb\n\nN=int(input())\nList=[]\nfor i in range(N):\n    line=list(str(input()))\n    line.sort()\n    List.append(\"\".join(line))\n \nans=0   \nfor i,j in collections.Counter(List).items():\n    num=comb(j, 2, exact=True)\n    ans+=num\n    \nprint(ans)", "\nurl = \"https://atcoder.jp//contests/abc137/tasks/abc137_c\"\n\nimport itertools\n\ndef main():\n    n = int(input())\n    maps = {}\n    count = 0\n    for i in range(n):\n        s = sorted(input())\n        s = ''.join(s)\n        maps.setdefault(s, 0)\n        maps[s] += 1\n    for k in maps:\n        count += maps[k] * (maps[k] - 1) // 2\n    print(count)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\nN = int(input())\nrecords = {}\n\nfor i in range(N):\n    l = ''.join(sorted(input()))\n    records.setdefault(l, 0)\n    records[l] += 1\n\ncount = 0\nfor v in records.values():\n    if v == 1:\n        continue\n    else:\n        count += math.comb(v, 2)\n\nprint(count)", "from collections import Counter\nn = int(input())\ns = []\nfor i in range(n):\n    s1 = ''.join(sorted(input()))\n    s.append(s1)\ns = Counter(s).most_common()\nnum = 0\nfor i,h in s:\n    num += (h*(h-1))//2\nprint(num)", "N = int(input())\nD = {}\nres = 0\n\nfor i in range(N):\n  A = list(input())\n  A.sort()\n  if str(A) in D:\n    res += D[str(A)]\n    D[str(A)] += 1\n  else:\n    D[str(A)] = 1\n    \nprint(res)", "from collections import defaultdict as dd\n\nn=int(input())\ndic=dd(int)\nfor i in range(n):\n  s=sorted(input())\n  dic[''.join(s)]+=1\n\nans=0  \nfor v in dic.values():\n  ans+=(v)*(v-1)//2\nprint(ans)", "from collections import defaultdict\n\nn=int(input())\nl=[]\nclst=defaultdict(lambda:0)\nfor i in range(n):\n  clst[str(sorted(input()))]+=1\n  \nans=0\nfor x in clst.values():\n  x-=1\n  if x > 0:\n    ans+=(1+x)*x//2 \nprint(ans)", "import itertools\nN = int(input())\nA = [input() for i in range(N)]\ndic = {}\nans = 0\nfor j in range(N):\n    a = str(sorted(A[j]))\n    if a not in dic:\n        dic[a] = 1\n    else:\n        dic[a] += 1\n        ans += dic[a]-1\n\nprint(ans)", "from collections import Counter\nn = int(input())\nlst = []\nfor _ in range(n):\n    s = sorted(list(input()))\n    lst.append(\"\".join(s))\nc = Counter(lst)\nans = 0\nfor k,v in c.items():\n    ans += v*(v-1)//2\n\nprint(ans)", "N = int(input())\nS = []\nans = 0\n\nfor i in range(N):\n  s = list(input())\n  s.sort()\n  S.append(\"\".join(s))\n\nS.sort()\n\ncount = 1\n\nfor j in range(N-1):\n  if S[j] == S[j+1]:\n    count += 1\n  else:\n    if count > 1:\n      ans += count*(count-1)//2\n    count = 1\nelse:\n    if count > 1:\n      ans += count*(count-1)//2\n\nprint(ans)", "N = int(input())\ns = [sorted(input()) for i in range(N)]\ns.sort()\nans = 0\nfor i in range(N-1):\n    if s[i] == s[i+1]:\n        start = i\n        end = N-1\n        while start != end:\n            center = (start + end) // 2\n            if s[center] == s[i]:\n                if s[center+1] == s[i]:\n                    start = center+1\n                else:\n                    start = end = center\n            else:\n                end = center\n        ans += start - i\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 10 00:32:19 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nd = dict()\nfor i in range(N):\n    S = input()\n    S = ''.join(sorted(list(S)))\n    #print(S)\n    if S in d.keys():\n        d[S] += 1\n    else:\n        d[S] = 1\n\nans = 0\nfor n in d.values():\n    ans += n*(n-1)//2\nprint(ans)", "import collections\nN = int(input())\nS_ls = []\ncnt, rst = 0, 0\nfor i in range(N):\n    S = list(input())\n    S.sort()\n    val = ''\n    S_ls.append(''.join(S))\nrst_ls = collections.Counter(S_ls)\nfor i in rst_ls.values():\n    rst += i * (i - 1) // 2\nprint(rst)", "N=int(input())\nd={}\nc=0\nfor i in range(N):\n    s=str(sorted(input()))\n    if s in d:\n        c+=d[s]\n        d[s]+=1\n    else:\n        d[s]=1\nprint(c)", "n = int(input())\nd = {}\nans = 0\nfor i in range(n):\n    s = ''.join(sorted(input()))\n    if s in d:\n        ans += d[s]\n        d[s] += 1\n    else:\n        d[s] = 1\nprint(ans)", "from collections import Counter\nn = int(input())\ncnt_s = Counter([\" \".join(sorted(input())) for i in range(n)])\nprint(sum(v*(v - 1)//2 for v in cnt_s.values()))", "N = int(input())\nS = [list(map(str, input())) for _ in range(N)]\nS.sort()\nfor s in S:\n    s.sort()\n\nans = 0\ndic = {}\n\nfor s in S:\n    ss = \"\".join(s)\n    if ss in dic:\n        ans += dic[ss]\n        dic[ss] += 1\n    else:\n        dic[ss] = 1\n\nprint(ans)", "n = int(input())\nd = {}\nans = 0\nfor i in range(n):\n    s = ''.join(sorted(input()))\n    if s in d:\n        ans += d[s]\n        d[s] += 1\n    else:\n        d[s] = 1\nprint(ans)", "n = int(input())\nd = {}\ne = []\nans = 0\nfor i in range(n):\n  s = list(input())\n  s.sort()\n  s = \"\".join(s)\n  if s in d:\n    d[s] += 1\n  else:\n    d[s] = 1\nfor key,value in d.items():\n  if value > 1:\n    e.append(d[key])\nfor j in e:\n  ans += j*(j-1)//2\nprint(ans)", "n = int(input())\ns = [list(input()) for i in range(n)]\ncnt_dic = {}\nsum_cnt = 0\n\nfor i in range(n):\n    s[i].sort()\n    if str(s[i]) in cnt_dic:\n        cnt_dic[str(s[i])] = cnt_dic[str(s[i])] + 1\n    else:\n        cnt_dic[str(s[i])] = 1\n\nfor n in cnt_dic.values():\n    sum_cnt += int( n * (n-1) / 2)\n\nprint(sum_cnt)", "import sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    n = ini()\n    count = Counter()\n    for i in range(n):\n        s = ins()\n        s = \"\".join(sorted(s))\n        count[s] += 1\n\n    ans = 0\n    for k, v in count.items():\n        if v > 1:\n            ans += v * (v - 1) // 2\n    return ans\n\n\nprint(solve())\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, Ss):\n    for i in range(N):\n        Ss[i] = ''.join(sorted(list(Ss[i])))\n    Ss.sort()\n    ans = 0\n    flg = False\n    counter = 0\n    for i in range(N - 1):\n        if Ss[i] == Ss[i + 1]:\n            if not flg:\n                flg = True\n                counter = i\n        elif flg:\n            ans += (i - counter + 1) * (i - counter) // 2\n            flg = False\n    if flg:\n        ans += ((N - 1) - counter + 1) * ((N - 1) - counter) // 2\n    print(ans)\n\n\ndef __starting_point():\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    Ss = [input() for _ in range(N)]\n    # As = [int(i) for i in input().split()]\n    # Bs = [int(i) for i in input().split()]\n    solve(N, Ss)\n\n__starting_point()", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    L = []\n    for i in range(N):\n        temp = input().rstrip()\n        temp = sorted(temp)\n        L.append(temp)\n    for i in range(9, -1, -1):\n        L.sort(key = lambda x:x[i])\n    ans = 0\n    index = 0\n    temp_index = 0\n\n    while True:\n        while index+1 < N and L[index+1] == L[index]:\n            index+=1\n            temp_index+=1\n        ans += (temp_index+1)*temp_index // 2\n        temp_index=0\n        index+=1\n        if index >= N-1:\n            break\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import collections\nS=[]\nn=int(input())\nfor _ in range(n):\n    s=input()\n    S.append(str(sorted(s)))\nss=collections.Counter(S)\ncount=0\nfor i in ss.values():\n    count+=int(i*(i-1)/2)\nprint(count)", "import collections\nN = int(input())\nls, rst = [], 0\nfor i in range(N):\n    s = list(input())\n    s.sort()\n    ls.append(''.join(s))\nrst_ls = collections.Counter(ls)\nfor i in rst_ls.values():\n    if i >= 2:\n        rst += i * (i - 1) // 2\nprint(rst)", "n=int(input())\nl=[]\n\nfor i in range(n):\n  l.append(sorted(input()))\n\nl.sort()\n\nclst=[]\ncnt=0\nfor i in range(len(l)-1):\n  if l[i]==l[i+1]:\n    cnt+=1\n    if i == len(l)-2:\n      clst.append(cnt)\n  else:\n    if cnt > 0:\n      clst.append(cnt)\n    cnt=0\n\nans=0\nfor x in clst:\n  ans+=(1+x)*x//2 \nprint(ans)", "from collections import Counter\nN = int(input())\ns = [str(sorted(input())) for _ in range(N) ]\nc = Counter(s)\ncnt = []\n\nfor i in list(c.values()):\n    cnt.append(i * (i -1)//2)\nprint((sum(cnt)))\n\n", "n = int(input())\n\ncount = 0\nsn = {}\nfor i in range(n):\n  s = list(input())\n  check = \"\".join(sorted(s)) \n  if not check in sn:\n    sn[check] = 1\n  else :\n    count += sn[check]\n    sn[check] += 1\n    \nprint(count)   ", "import math\nimport collections\nimport itertools\nimport copy\n\ndef YesNo(Bool):\n    if(Bool):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\n\n\ndef resolve():\n\n    N=int(input())\n    tmp={}\n\n    ans=0\n    for i in range(N):\n        S=list(input())\n        S.sort()\n        Ssort=''.join(S)\n        if(Ssort in tmp):\n            tmp[Ssort]+=1\n        else:\n            tmp[Ssort]=1\n\n    for i in list(tmp.values()):\n        ans+=(i*(i-1))//2\n\n    print(ans)\n\nresolve()\n\n", "import collections\n\nfrom scipy.special import comb\n\n\nn = int(input())\naa = []\n\nfor i in range(n):\n  s = sorted(input())\n  s = [''.join(s)]\n  aa.append(*s)\n\ncc = collections.Counter(aa)\nc = [c[1] for c in cc.items() if c[1] >1]\n\nans = 0\nfor i in range(len(c)):\n  ans += comb(c[i], 2, exact=True)\n  \n\nprint(int(ans))", "from collections import defaultdict\n\ndd = defaultdict(int)\nn = int(input())\nans = 0\nfor _ in range(n):\n    m = list(input())\n    m.sort()\n    tmp = \"\".join(m)\n    ans += dd[tmp]\n    dd[tmp] += 1\nprint(ans)\n", "import collections\n\nn = int(input())\nabc = []\n\nfor i in range(n):\n  a = list(input())\n  a.sort()\n  a = str(a)\n  abc.append(a)\n\nc = collections.Counter(abc)\ncnt = 0\n\nfor i in c:\n  num = c[i]\n  if num != 1:\n    cnt += num*(num-1) // 2\n \nprint(cnt)", "import collections\nN = int(input())\nls = []\nrst = 0\nfor i in range(N):\n    s = list(input())\n    s.sort()\n    ls.append(''.join(s))\nrst_cnt = collections.Counter(ls)\nfor i in rst_cnt.values():\n    rst += i * (i - 1) // 2\nprint(rst)", "N=int(input())\nans=0\nli=[]\nfor i in range(N):\n    s=list(input())\n    s.sort()\n    li.append(s)\nli.sort()\ntemp=1\nfor j in range(N-1):\n    if li[j]==li[j+1]:\n        temp+=1\n    else:\n        ans+=temp*(temp-1)//2\n        temp=1\n        \nans+=temp*(temp-1)//2\nprint(ans)\n", "from collections import Counter\n\n# \u5165\u529b (\u5404\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f)\nN = int(input())\nS = [''.join(sorted(input())) for _ in range(N)]\n\n# Counter \u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\nnum = Counter(S)\n\n# \u5404\u6587\u5b57\u5217\u3054\u3068\u306b\u500b\u6570 x \u3092\u6271\u3046\nresult = sum(x * (x - 1) // 2 for x in num.values())\nprint(result)", "\ndef main():\n    N = int(input())\n\n    S = []\n    d = {}\n    ans = 0\n    for _ in range(N):\n        t = input()\n        t = \"\".join(sorted(t))\n        if t in d:\n            ans += d[t]\n            d[t] += 1\n        else:\n            d[t] = 1\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nN=int(input())\ncharl=[]\nans=0\nfor _ in range(N):\n    charl.append(''.join(sorted(input())))\nanad=defaultdict(int)\nfor char in charl:\n    anad[char]+=1\nfor anadv in anad.values():\n    if anadv>1:\n        ans+=anadv*(anadv-1)//2\nprint(ans)", "n=int(input())\nhowmany={}\ncou=0\nfor i in range(n):\n  s=input()\n  sen=[c for c in s]\n  sen.sort()\n  a=''.join(sen)\n  if a in howmany:\n    howmany[a]+=1\n    cou+=howmany[a]\n  else:\n    howmany[a]=0\nprint(cou)", "import collections\n\nn = int(input())\ns = [''.join(sorted(list(input()))) for _ in range(n)]\n\nc = collections.Counter(s)\nprint(sum([i*(i-1)//2 for i in c.values()]))", "import math\nN = int(input())\nS = [list(map(str, input())) for _ in range(N)]\nS.sort()\nfor s in S:\n    s.sort()\n\nans = 0\n\ndic = {}\n\nSS = []\n\nfor s in S:\n    SS.append(\"\".join(s))\n\nfor i in range(N):\n    if SS[i] in dic:\n        dic[SS[i]] += 1\n    else:\n        dic[SS[i]] = 1\n\nfor key in dic:\n    if dic[key] > 1:\n        ans += dic[key] * (dic[key] - 1) // 2\n\nprint(ans)", "def anagram(s):\n    dic = {}\n    for moji in s:\n        dic.setdefault(moji,0)\n        dic[moji]+=1\n    sort_list = sorted(dic)\n    #print(sort_list)\n    ans = ''\n    for moji in sort_list:\n        ans += moji + str(dic[moji])\n    return ans\n\nn = int(input())\ns = []\nans_dic = {}\nfor i in range(n):\n    s.append(anagram(str(input())))\n    ans_dic.setdefault(s[i],0)\n    ans_dic[s[i]] += 1\n#print(ans_dic)\nans = 0\nfor val in ans_dic.values():\n    ans += val * (val - 1) //2\nprint(ans)", "from collections import Counter\n\n\ndef mapt(fn, *args):\n    return tuple(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    k = int(input())\n    a = sorted([\"\".join(sorted(input())) for _ in range(k)])\n    d = Counter(a)\n    return int(sum(val*(val-1)/2 for val in d.values()))\n\n\n\nprint(main())", "import collections as c\nprint(sum(i*(i-1)//2 for i in c.Counter(''.join(sorted(input())) for _ in range(int(input()))).values()))", "import math\ndef comb(n, r):\n  if n-r>=0:\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n  else:\n    return 0\n    \nn=int(input())\nl=[]\nfor i in range(n):\n  s=sorted(input())\n  l.append(s)\nl.sort()\ncnt=1\nans=0\n\nfor i in range(n-1):\n  if l[i]==l[i+1]:\n    cnt+=1\n  else:\n    ans+=comb(cnt,2)\n    cnt=1\n    \nans+=comb(cnt,2)    \n    \nprint(ans)", "import collections\nN = int(input())\nls = []\nrst = 0\nfor i in range(N):\n    s = list(input())\n    s.sort()\n    ls.append(''.join(s))\nrst_cnt = collections.Counter(ls)\nfor i in rst_cnt.values():\n    rst += i * (i - 1) // 2\nprint(rst)", "N=int(input())\nd={}\nc=0\nfor i in range(N):\n    s=''.join(sorted(input()))\n    if s in d:\n        c+=d[s]\n        d[s]+=1\n    else:\n        d[s]=1\nprint(c)", "N = int(input())\ns = [input() for i in range(N)]\nt = sorted(map(sorted,s))\ncount = 0\nans = 0\nfor i in range(N-1):\n    if(t[i] == t[i+1]):\n        count += 1\n    else:\n        ans += (count*(count+1))//2\n        count = 0\nif(count > 0):\n    ans += (count*(count+1))//2\nprint(ans)", "from collections import Counter\n\nN = int(input())\ns = [input() for _ in range(N)]\n \n# N=10^5\u3088\u308a\u3001O(N)\u3067\u89e3\u304f\n# \u30bd\u30fc\u30c8\uff08\u3055\u3089\u306b\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001\u6587\u5b57\u5217\u306b\u76f4\u3059\uff09\u3059\u308b\u3053\u3068\u3067\u3001\u6587\u5b57\u5206\u5e03\u3092\u5f97\u308b\nfor i in range(N):\n  s[i] = ''.join(sorted(s[i]))\n\n# \u6587\u5b57\u5206\u5e03\u304c\u540c\u3058\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u500b\u6570\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n# \u5404\u6587\u5b57\u5206\u5e03\u306e\u51fa\u73fe\u500b\u6570n\u306b\u5bfe\u3057\u3066\u3001nC2\u306e\u548c\u3092\u53d6\u308b\ns = Counter(s).most_common()\nans = 0\nfor p in s:\n  ans += p[1] * (p[1]-1) // 2\n  \nprint(ans)", "import math\n\ndef c(n, r):\n    return math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    s = \"\".join(sorted([c for c in input()]))\n    d[s] = d.get(s, 0) + 1\n\nans = 0\nfor v in d.values():\n    if v >= 2:\n        ans += c(v, 2)\nprint(ans)", "import sys\nimport math\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn = inint()\n\nz = {():0}\nans = 0\n\ndef combinations(n, r):\n    if n < r:\n        return 0\n    else:\n        return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(n):\n    c = [0]*123\n    s = input()\n    for j in range(len(s)):\n        c[ord(s[j])] += 1\n    try:\n        z[tuple(c)] += 1\n    except:\n        z[tuple(c)] = 1\n\nfor i in z:\n    ans += combinations(z[i],2)\n\nprint(ans)", "import collections\ndef resolve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(str(sorted(list(input()))))\n    a = collections.Counter(words)\n    ans = 0\n    for i in a.values():\n        ans += i*(i-1)//2\n    print(ans)\nresolve()", "import itertools,math\nn = int(input())\nword = [input() for _ in range(n)]\ncount = 0\n\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(n):\n    word[i] = sorted(word[i])\n\nnew_word = list(sorted(word))\n\nx = 1\n\nfor i in range(n-1):\n    if new_word[i] == new_word[i+1]:\n        x += 1\n    elif x >= 2:\n        count += combinations_count(x,2)\n        x = 1\nif x >= 2:\n    count +=  combinations_count(x,2)\n\nprint(count)", "from collections import Counter\nimport math\n\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nn=int(input())\nl=[\"\".join(sorted(input())) for i in range(n)]\nc=Counter(l).most_common()\nans=0\nfor i in range(len(c)):\n    if c[i][1]>=2:\n        ans+=combinations_count(c[i][1],2)\nprint(ans)", "N=int(input())\nP=[]\nfor i in range(N):\n    s=input()\n    s=sorted(s)\n    P.append(s)\n\nP=sorted(P)\nlast=P[0]\ncnt=0\nans=0\nfor i in range(1,N):\n    if P[i]==last:\n        cnt+=1\n        ans+=cnt\n    else:\n        last=P[i]\n        cnt=0\nprint(ans)", "n=int(input())\ns={}\nans=0\nfor i in range(n):\n    a=tuple(sorted(input()))\n    if a in s:\n        s[a]+=1\n    else:\n        s[a]=1\nfor i in s.values():\n    ans+=((i*(i-1))//2)\nprint(ans)", "n = int(input())\ns = sorted([sorted(input()) for _ in range(n)])\nans = 0\nx = 0\ni = 0\nwhile x < n-1:\n    cnt = 1\n    for i in range(x, n-1):\n        if s[i] == s[i+1]:\n            cnt += 1\n            x = i+1\n        else:\n          x = i+1\n          break\n    ans += (cnt*(cnt-1))/2\nprint(int(ans))", "import collections\nN=int(input())\nS = collections.Counter([''.join(sorted(input())) for i in range(N)])\nprint(sum(map(lambda x: x*(x-1)//2, S.values())))", "import collections\nN = int(input())\ns = [\"\".join(sorted(input())) for i in range(N)]\n\nans = 0\ncnt = collections.Counter(s)\nfor i in cnt.values():\n    if i > 1:\n        ans += i*(i-1)//2\n\nprint(ans)", "from math import factorial\nn = int(input())\ns = [input() for i in range(n)]\nd = {}\nfor i in s:\n    x = \"\".join(sorted(list(i)))\n    if x not in d:\n        d[x] = 1\n    else:\n        d[x] += 1\nans = 0\nfor i in d:\n    if d[i] >= 2:\n        ans += factorial(d[i]) // (factorial(d[i]-2)*2)\nprint(ans)", "from collections import Counter\nN = int(input())\ns = [str(sorted(input())) for _ in range(N)]\nc = Counter(s)\n\ncnt = []\nfor i in list(c.values()):\n    cnt.append(i * (i - 1)//2)\nprint((sum(cnt)))\n", "N = int(input())\n\nans = 0\nd = {}\n\nfor i in range(N):\n    txt = \"\".join(sorted(input()))\n    d.setdefault(txt,0)\n    \n    ans += d[txt]\n    d[txt] += 1\n    \nprint(ans)", "from collections import defaultdict,Counter\n\nN = int(input())\nS = [str(input())for _ in range(N)]\nD = defaultdict(int)\n\nfor s in S:\n  cur = sorted(s)\n  cur = \"\".join(map(str,cur))\n  D[cur] += 1\ncnt = 0\nfor c in D.values():\n  cnt += c*(c-1)//2\nans = cnt\nprint(ans)", "import collections\nN = int(input())\ns = [\"\".join(sorted(input())) for _ in range(N)]\ns.sort()\nC = collections.Counter(s)\nD = C.most_common()\n\nans = 0\nfor i in D:\n    ans += i[1]*(i[1] - 1)//2\nprint(ans)", "#\u4ed6\u306e\u4eba\u306e\u56de\u7b54\nimport collections\n\nN = int(input())\ns = [\"\".join(sorted(input())) for _ in range(N)]\n#sorted\u3067\u30ea\u30b9\u30c8\u306b\u306a\u3063\u305f\u6587\u5b57\u5217\u3092join\u3067\u3082\u3046\u4e00\u5ea6\u6587\u5b57\u5217\u306b\nc = collections.Counter(s)\n#c\u306f\u8f9e\u66f8\u306e\u5f62\u3092\u3068\u308b\nans = 0\n\n# s\u304b\u3089\u91cd\u8907\u3092\u7121\u304f\u3059\nfor si in set(s):\n    n = c[si]\n    ans += n * (n - 1) // 2 \n    # n C 2\u3092\u8a08\u7b97\nprint(ans)\n", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    L = []\n    for i in range(N):\n        temp = input().rstrip()\n        temp = sorted(temp)\n        L.append(\"\".join(temp))\n    L.sort()\n    ans = 0\n    index = 0\n    temp_index = 0\n\n    while True:\n        while index+1 < N and L[index+1] == L[index]:\n            index+=1\n            temp_index+=1\n        ans += (temp_index+1)*temp_index // 2\n        temp_index=0\n        index+=1\n        if index >= N-1:\n            break\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import collections as c\n\nn = int(input())\ns = []\nans = 0\n\nfor i in range(n):\n    t = list(input())\n    t.sort()\n    t = str(t)\n    s.append(t)\n\ns = c.Counter(s)\nfor i in s.values():\n    ans += i*(i-1)//2\nprint(ans)", "from collections import Counter\n\nN = int(input())\ns_list = []\nfor i in range(N):\n    s = input()\n    s_min = sorted(s)\n    s_min_join = \"\".join(s_min)\n    s_list.append(s_min_join)\n\ns_list_c = Counter(s_list)\n\nans = 0\nfor j in list(s_list_c.values()):\n    ans += j*(j-1)//2\n\nprint(ans) ", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    L = []\n    for i in range(N):\n        temp = input().rstrip()\n        temp = [ord(temp[i]) - 97 for i in range(10)]\n        temp.sort()\n        L.append(temp)\n    for i in range(9, -1, -1):\n        L.sort(key = lambda x:x[i])\n    ans = 0\n    index = 0\n    temp_index = 0\n\n    while True:\n        while index+1 < N and L[index+1] == L[index]:\n            index+=1\n            temp_index+=1\n        ans += (temp_index+1)*temp_index // 2\n        temp_index=0\n        index+=1\n        \n        if index >= N-1:\n            break\n        \n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import collections\nN = int(input())\nls, rst = [], 0\nfor i in range(N):\n    s = list(input())\n    s.sort()\n    ls.append(''.join(s))\nrst_dic = collections.Counter(ls)\nfor i in rst_dic.values():\n    if i >= 2:\n        rst += i * (i - 1) // 2\nprint(rst)", "n = int(input())\ns = {}\nfor _ in range(n):\n  t = \"\".join(sorted(input()))\n  if t not in s: s[t] = 1\n  else: s[t] += 1\n\nans = 0\nfor i in s.values(): ans += i*(i-1)//2\nprint(ans)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\n\ndef read():\n    N = int(input().strip())\n    S = []\n    for i in range(N):\n        S.append(input().strip())\n    return N, S\n\n\ndef solve(N, S):\n    words = defaultdict(int)\n    for s in S:\n        key = \"\".join(list(sorted(s)))\n        words[key] += 1\n    \n    ans = 0\n    for key in words:\n        n = words[key]\n        if n >= 2:\n            ans += n * (n-1) // 2\n    return ans\n\n\ndef __starting_point():\n    inputs = read()\n    print((\"%s\" % solve(*inputs)))\n\n__starting_point()", "N = int(input())\nM = [input() for i in range(N)]\n \nM_sorted = [''.join(sorted(m)) for m in M]\nd = {}\nans = 0\n \nfor m in M_sorted :\n    d.setdefault(m,0)\n    ans += d[m]\n    d[m] += 1\n \nprint(ans)", "n = int(input())\ns = {}\n\nans = 0\nfor i in range(n):\n    x = \"\".join(sorted(input()))\n    if x not in s:\n        s[x] = 1\n    else:\n        ans += s[x]\n        s[x] += 1\n\nprint(ans)\n", "from collections import Counter\n\n\ndef main():\n    n = int(input())\n    cnt = Counter()\n    ans = 0\n    for i in range(n):\n        s = \"\".join(sorted(input()))\n        if cnt[s] == 0:\n            cnt[s] = 1\n        else:\n            ans += cnt[s]\n            cnt[s] += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ncount = 0\nx = {}\n\nfor i in range(n):\n  s = \"\".join(sorted(input()))\n  if s in x:\n    count += x[s]\n    x[s] += 1\n  else:\n    x[s] = 1\nprint(count)", "import collections\nimport math\nn=int(input())\ns=[input() for i in range(n)]\n\nfor i in range(n):\n    s[i]=list(s[i])\n    s[i].sort()\n    s[i]=''.join(s[i])\n\nc=collections.Counter(s)\n\na=0\n\nfor i in c.values():\n    if i>1:\n        a+=i*(i-1)//2\n\nprint(a)", "N = int(input())\ncnt = {}\n\nfor _ in range(N):\n    s = ''.join(sorted(input(), key=str.lower))\n    if s in cnt:\n        cnt[s] += 1\n    else:\n        cnt[s] = 1\n\nres = 0\nfor val in cnt.values():\n    res += val * (val - 1) // 2\n\nprint(res)", "import sys\nimport math\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn = inint()\n\nz = {}\nans = 0\n\nfor i in range(n):\n    s = \"\".join(sorted(input()))\n    try:\n        z[s] += 1\n    except:\n        z[s] = 1\n\nfor i in z:\n    ans += z[i]*(z[i]-1)//2\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\nlis = {}\ncounter = 0\nN = int(input().rstrip())\nfor i in range(N):\n  str = \"\".join(sorted(list(input().rstrip())))\n  if str in lis:\n    lis[str] += 1\n    counter += lis[str]\n  else:\n    lis[str] = 0\nprint(counter)"]