["", "\n\nfrom math import ceil\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if k >= n:\n            print(1)\n        else:\n            print(ceil(n / k))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        print(n // k + (1 if n % k != 0 else 0))\n\nmain()", "\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n//k)\n    else:\n        print((n//k)+1)", "\n\n# SOLUTION\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)", "\n# We can solve this problem by brute force and test each package size from 1 to k, but it is too slow.\n# We can also solve this problem by dynamic programming, but it is also too slow.\n# The solution is to find the answer by hand.\n# Let's assume that we want to buy n shovels with k types of packages.\n# If k > n, the answer is n.\n# If k <= n, the answer is n / k + n % k, because we can buy n / k packages of k shovels and n % k packages of 1 shovel.\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n // k)\n    else:\n        print(n // k + 1)", "\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if n % (k+1) == 0:\n        print(n//(k+1))\n    else:\n        print(n//(k+1) + 1)", "\n\nfor i in range(int(input())):\n    n, k = map(int, input().split())\n    #print(min(n, k))\n    print(k // n + (k % n != 0))"]