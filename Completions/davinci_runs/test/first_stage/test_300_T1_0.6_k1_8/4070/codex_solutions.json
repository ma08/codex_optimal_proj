["\n\nimport time\n\ndef timeTest(testNumber):\n    start = time.time()\n    for test in range(testNumber):\n        solution(571576)\n    print('{0} tests in {1} seconds'.format(testNumber, time.time() - start))\n\ndef solution(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n -= 1\n        count += 1\n    return count\n\nprint(solution(11))\nprint(solution(14))\nprint(solution(61441))\nprint(solution(571576))\nprint(solution(2128506))\n\ntimeTest(1000000)", "\n\n\ndef function(n):\n    return n & (-n)\n\n\nif __name__ == '__main__':\n    print(function(int(input())))", "\n\n\ndef solve(n):\n    return n % 4\n\n\nprint(solve(11))\nprint(solve(14))\nprint(solve(61441))\nprint(solve(571576))\nprint(solve(2128506))", "\n\n\ndef is_prime(n):\n    \"\"\"\n    Checks if n is a prime number\n    :param n: number to check\n    :return: True n is a prime number, else False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef find_largest_factor(n):\n    \"\"\"\n    Finds the largest factor of n that is a prime number\n    :param n: number to find the largest factor of\n    :return: largest factor of n that is a prime number\n    \"\"\"\n    i = n\n    while i > 1:\n        if n % i == 0 and is_prime(i):\n            return i\n        i -= 1\n\n\ndef main():\n    n = int(input())\n    print(find_largest_factor(n))\n\n\nif __name__ == '__main__':\n    main()", "\n\n# 1. My Solution\ndef solution(n):\n    answer = n % 2\n    while n > 0:\n        n = int(n / 2)\n        answer += n % 2\n    return answer", "\n\nn = int(input())\n\nif n == 0:\n    print(0)\nelif n % 2 == 0:\n    print(n // 2)\nelse:\n    print(n // 2 + 1)", "\n\nn = int(input())\n\ndef is_prime(n):\n    if n <= 1: return False\n    elif n <= 3: return True\n    elif n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(1, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef find_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_lcm(a, b):\n    return a * b // find_gcd(a, b)\n\ndef find_lcm_list(list):\n    if len(list) == 1: return list[0]\n    elif len(list) == 2: return find_lcm(list[0], list[1])\n    else:\n        list[1] = find_lcm(list[0], list[1])\n        return find_lcm_list(list[1:])\n\ndef find_solution(n):\n    primes = find_primes(n)\n    lcm = find_lcm_list(primes)\n    return lcm\n\nprint(find_solution(n))"]