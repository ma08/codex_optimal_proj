["", "\n\nimport re\n\ndef read_int():\n    return int(input())\n\ndef read_line():\n    return input().strip()\n\ndef read_ints():\n    return [\n        int(i)\n        for i in input().split()\n    ]\n\ndef get_star_at(grid, x, y):\n    size = 1\n    while grid[x][y-size] == '*':\n        size += 1\n    return x, y-size, size\n\ndef get_stars(grid):\n    stars = []\n    for x, row in enumerate(grid):\n        for y, ch in enumerate(row):\n            if ch == '*':\n                stars.append(get_star_at(grid, x, y))\n    return stars\n\ndef print_stars(stars):\n    print(len(stars))\n    for star in stars:\n        print(*star)\n\ndef solve(case):\n    n, m = read_ints()\n    grid = [read_line() for _ in range(n)]\n    stars = get_stars(grid)\n    print_stars(stars)\n\ndef main():\n    t = read_int()\n    for i in range(t):\n        solve(i)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef draw_grid(n, m, grid):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                size = 1\n                while (i - size) >= 0 and (j - size) >= 0 and (i + size) < n and (j + size) < m:\n                    if grid[i - size][j - size] == \"*\" and grid[i - size][j + size] == \"*\" and grid[i + size][j - size] == \"*\" and grid[i + size][j + size] == \"*\":\n                        size += 1\n                    else:\n                        break\n                yield i, j, size\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    answer = []\n    for i, j, size in draw_grid(n, m, grid):\n        answer.append((i + 1, j + 1, size))\n    if len(answer) == 0:\n        print(-1)\n    else:\n        print(len(answer))\n        for i, j, size in answer:\n            print(i, j, size)\n\nif __name__ == '__main__':\n    main()", "\n\ndef isLegal(center, size):\n    x, y = center\n    return x - size >= 0 and x + size < N and y - size >= 0 and y + size < M\n\ndef drawStar(center, size):\n    x, y = center\n    for i in range(x - size, x + size + 1):\n        for j in range(y - size, y + size + 1):\n            grid[i][j] = '.'\n\ndef find(grid):\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '*':\n                return i, j\n\ndef isValid(grid, size):\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '*':\n                return False\n    return True\n\ndef draw(grid):\n    res = []\n    while True:\n        center = find(grid)\n        if center is None:\n            return res\n        size = 0\n        while isLegal(center, size) and isValid(grid, size):\n            drawStar(center, size)\n            size += 1\n        if size == 0:\n            return False\n        size -= 1\n        if size == 0:\n            return False\n        drawStar(center, size)\n        res.append(center + (size,))\n\ndef main():\n    global N, M, grid\n    N, M = (int(x) for x in input().split())\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    res = draw(grid)\n    if res is False:\n        print(-1)\n    else:\n        print(len(res))\n        for center, size in res:\n            print(center[0] + 1, center[1] + 1, size)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    g = [list(input()) for _ in range(n)]\n\n    stars = set()\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] == '*':\n                stars.add((i, j))\n\n    def get_size(x, y):\n        size = 0\n        while x + size < n and y + size < m and x - size > 0 and y - size > 0:\n            for i in range(x - size, x + size):\n                if g[i][y - size] != '*':\n                    return size\n                if g[i][y + size] != '*':\n                    return size\n            for j in range(y - size, y + size):\n                if g[x - size][j] != '*':\n                    return size\n                if g[x + size][j] != '*':\n                    return size\n            size += 1\n        return size\n\n    def has_star(x, y, size):\n        for i in range(x - size, x + size):\n            for j in range(y - size, y + size):\n                if g[i][j] == '*':\n                    return True\n        return False\n\n    stars_list = []\n    while stars:\n        star = stars.pop()\n        size = get_size(star[0], star[1])\n        for i in range(size):\n            for j in range(size):\n                if has_star(star[0] + i, star[1] + j, size):\n                    stars_list.append((star[0] + i, star[1] + j, size))\n                    stars.discard((star[0] + i, star[1] + j))\n                if has_star(star[0] - i, star[1] - j, size):\n                    stars_list.append((star[0] - i, star[1] - j, size))\n                    stars.discard((star[0] - i, star[1] - j))\n                if has_star(star[0] + i, star[1] - j, size):\n                    stars_list.append((star[0] + i, star[1] - j, size))\n                    stars.discard((star[0] + i, star[1] - j))\n                if has_star(star[0] - i, star[1] + j, size):\n                    stars_list.append((star[0] - i, star[1] + j, size))\n                    stars.discard((star[0] - i, star[1] + j))\n\n    if stars:\n        print(-1)\n        return\n\n    print(len(stars_list))\n    for star in stars_list:\n        print(*star)\n\n\nif __name__ == '__main__':\n    main()", "\ndef is_valid(x, y, n, m, grid):\n    if x-1 >= 0:\n        if grid[x-1][y] == '.':\n            return False\n    if x+1 <= n-1:\n        if grid[x+1][y] == '.':\n            return False\n    if y-1 >= 0:\n        if grid[x][y-1] == '.':\n            return False\n    if y+1 <= m-1:\n        if grid[x][y+1] == '.':\n            return False\n    return True\n\ndef solve():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if is_valid(i, j, n, m, grid):\n                    stars.append((i+1, j+1, 1))\n                else:\n                    return -1\n    return len(stars)\n\nans = solve()\nif ans == -1:\n    print(ans)\nelse:\n    print(ans)\n    for star in ans:\n        print(star[0], star[1], star[2])", "\n\ndef is_star(grid, x, y, s):\n    for i in range(x - s, x + s + 1):\n        for j in range(y - s, y + s + 1):\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]):\n                if (i - x)**2 + (j - y)**2 > s**2 or grid[i][j] == '.':\n                    return False\n    return True\n\ndef draw_star(grid, x, y, s):\n    for i in range(x - s, x + s + 1):\n        for j in range(y - s, y + s + 1):\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]):\n                grid[i][j] = '.'\n\ndef check(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                return False\n    return True\n\ndef solve(grid):\n    if check(grid):\n        return True\n    for x in range(len(grid)):\n        for y in range(len(grid[0])):\n            if grid[x][y] == '*':\n                for s in range(len(grid)):\n                    if is_star(grid, x, y, s):\n                        draw_star(grid, x, y, s)\n                        if solve(grid):\n                            return True\n                        else:\n                            draw_star(grid, x, y, s)\n                return False\n    return False\n\nn, m = list(map(int, input().split()))\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\nif solve(grid):\n    print(\"-1\")\nelse:\n    print(\"-1\")"]