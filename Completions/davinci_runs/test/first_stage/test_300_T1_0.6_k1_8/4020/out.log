2022-04-16 18:55:11.226862 """
Polycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.

Polycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.


-----Input-----

The first line of the input contains two integers $h_1$ and $m_1$ in the format hh:mm.

The second line of the input contains two integers $h_2$ and $m_2$ in the same format (hh:mm).

It is guaranteed that $0 \le h_1, h_2 \le 23$ and $0 \le m_1, m_2 \le 59$.

It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.


-----Output-----

Print two integers $h_3$ and $m_3$ ($0 \le h_3 \le 23, 0 \le m_3 \le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.


-----Examples-----
Input
10:00
11:00

Output
10:30

Input
11:10
11:12

Output
11:11

Input
01:02
03:02

Output
02:02
"""
2022-04-16 18:55:11.226870 --------------------------
2022-04-16 18:55:31.780799 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m1 == m2:\n\th3 = (h1 + h2) // 2\n\tm3 = m1\nelse:\n\tm3 = (m1 + m2) // 2\n\th3 = (h1 + h2) // 2\n\tif m3 >= 60:\n\t\th3 += 1\n\t\tm3 = 0\n\nprint('{:02}:{:02}'.format(h3, m3))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef time_midpoint(start_time, end_time):\n    # Use datetime to calculate midpoint\n    start_time = datetime.datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.datetime.strptime(end_time, \"%H:%M\")\n\n    midpoint = start_time + (end_time - start_time) / 2\n    midpoint = midpoint.strftime(\"%H:%M\")\n    return midpoint\n\nstart_time, end_time = input(), input()\nprint(time_midpoint(start_time, end_time))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n# Solution submitted by Andrew Huang\nh1, m1 = list(map(int, input().split(':')))\nh2, m2 = list(map(int, input().split(':')))\n\n# minutes in the contest\nm = m2-m1\nif h2 < h1:\n    m += (h2+24-h1)*60\nelse:\n    m += (h2-h1)*60\n\n# midpoint\nmid_m = m // 2\nmid_h = h1 + (mid_m // 60)\nmid_m = m1 + (mid_m % 60)\nif mid_m >= 60:\n    mid_m -= 60\n    mid_h = (mid_h+1) % 24\n\nprint(str(mid_h).zfill(2) + \":\" + str(mid_m).zfill(2))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    h1, m1 = map(int, input().split(':'))\n    h2, m2 = map(int, input().split(':'))\n\n    d = (h2 - h1) * 60 + (m2 - m1) // 2\n    h3 = (h1 * 60 + m1 + d) // 60\n    m3 = (h1 * 60 + m1 + d) % 60\n\n    print('{:02}:{:02}'.format(h3, m3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef getMidPoint(time1, time2):\n    h1, m1 = map(int, time1.split(':'))\n    h2, m2 = map(int, time2.split(':'))\n    h = h2 - h1\n    m = m2 - m1\n    if m < 0:\n        h -= 1\n        m += 60\n    h += m // 2\n    m %= 2\n    if h < 0:\n        h += 24\n    if h < 10:\n        h = '0' + str(h)\n    else:\n        h = str(h)\n    if m < 10:\n        m = '0' + str(m)\n    else:\n        m = str(m)\n    return h + ':' + m\n\ndef main():\n    time1 = sys.stdin.readline().strip()\n    time2 = sys.stdin.readline().strip()\n    print(getMidPoint(time1, time2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\ndef time_length(h1,m1,h2,m2):\n    h=h2-h1\n    m=m2-m1\n    if m<0:\n        m+=60\n        h-=1\n    return h*60+m\n\ndef time_mid(h1,m1,h2,m2):\n    h=h1\n    m=m1\n    l=time_length(h1,m1,h2,m2)\n    l=l/2\n    while l>0:\n        m+=1\n        l-=1\n        if m==60:\n            h+=1\n            m=0\n    if m<10:\n        print(\"{}:0{}\".format(h,m))\n    else:\n        print(\"{}:{}\".format(h,m))\n\nh1,m1,h2,m2=map(int,raw_input().split(\":\"))\ntime_mid(h1,m1,h2,m2)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\nimport sys\n\ndef read_input(lines):\n    if isinstance(lines, list):\n        return lines\n    return sys.stdin.readlines()\n\ndef get_time_parts(time):\n    return time.split(':')\n\ndef get_time_in_minutes(time):\n    h, m = get_time_parts(time)\n    return int(h) * 60 + int(m)\n\ndef get_time_from_minutes(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return '%02d:%02d' % (h, m)\n\ndef get_mid_time(start, end):\n    start_minutes = get_time_in_minutes(start)\n    end_minutes = get_time_in_minutes(end)\n    mid_minutes = start_minutes + (end_minutes - start_minutes) // 2\n    return get_time_from_minutes(mid_minutes)\n\n\nif __name__ == '__main__':\n    lines = read_input('''10:00\n11:00'''.split('\\n'))\n    start = lines[0]\n    end = lines[1]\n    print(get_mid_time(start, end))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    h_1, m_1 = map(int, input().split(\":\"))\n    h_2, m_2 = map(int, input().split(\":\"))\n    total = (h_2 - h_1) * 60 + (m_2 - m_1)\n    half = total // 2\n    h_3 = (h_1 * 60 + m_1 + half) // 60\n    m_3 = (h_1 * 60 + m_1 + half) % 60\n    print(\"{:0>2}:{:0>2}\".format(h_3, m_3))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650135311,
  "id": "cmpl-4xhrbfOYjTSL3Yoe7WMXDJWI2AWfc",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 18:55:31.781103 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m1 == m2:\n\th3 = (h1 + h2) // 2\n\tm3 = m1\nelse:\n\tm3 = (m1 + m2) // 2\n\th3 = (h1 + h2) // 2\n\tif m3 >= 60:\n\t\th3 += 1\n\t\tm3 = 0\n\nprint('{:02}:{:02}'.format(h3, m3))"
}
2022-04-16 18:55:31.781140 REASON stop
2022-04-16 18:55:31.793328 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef time_midpoint(start_time, end_time):\n    # Use datetime to calculate midpoint\n    start_time = datetime.datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.datetime.strptime(end_time, \"%H:%M\")\n\n    midpoint = start_time + (end_time - start_time) / 2\n    midpoint = midpoint.strftime(\"%H:%M\")\n    return midpoint\n\nstart_time, end_time = input(), input()\nprint(time_midpoint(start_time, end_time))"
}
2022-04-16 18:55:31.793509 REASON stop
2022-04-16 18:55:31.793957 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n# Solution submitted by Andrew Huang\nh1, m1 = list(map(int, input().split(':')))\nh2, m2 = list(map(int, input().split(':')))\n\n# minutes in the contest\nm = m2-m1\nif h2 < h1:\n    m += (h2+24-h1)*60\nelse:\n    m += (h2-h1)*60\n\n# midpoint\nmid_m = m // 2\nmid_h = h1 + (mid_m // 60)\nmid_m = m1 + (mid_m % 60)\nif mid_m >= 60:\n    mid_m -= 60\n    mid_h = (mid_h+1) % 24\n\nprint(str(mid_h).zfill(2) + \":\" + str(mid_m).zfill(2))"
}
2022-04-16 18:55:31.794025 REASON stop
2022-04-16 18:55:31.813008 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    h1, m1 = map(int, input().split(':'))\n    h2, m2 = map(int, input().split(':'))\n\n    d = (h2 - h1) * 60 + (m2 - m1) // 2\n    h3 = (h1 * 60 + m1 + d) // 60\n    m3 = (h1 * 60 + m1 + d) % 60\n\n    print('{:02}:{:02}'.format(h3, m3))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:55:31.813186 REASON stop
2022-04-16 18:55:31.814459 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef getMidPoint(time1, time2):\n    h1, m1 = map(int, time1.split(':'))\n    h2, m2 = map(int, time2.split(':'))\n    h = h2 - h1\n    m = m2 - m1\n    if m < 0:\n        h -= 1\n        m += 60\n    h += m // 2\n    m %= 2\n    if h < 0:\n        h += 24\n    if h < 10:\n        h = '0' + str(h)\n    else:\n        h = str(h)\n    if m < 10:\n        m = '0' + str(m)\n    else:\n        m = str(m)\n    return h + ':' + m\n\ndef main():\n    time1 = sys.stdin.readline().strip()\n    time2 = sys.stdin.readline().strip()\n    print(getMidPoint(time1, time2))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 18:55:31.814568 REASON stop
2022-04-16 18:55:31.815246 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\ndef time_length(h1,m1,h2,m2):\n    h=h2-h1\n    m=m2-m1\n    if m<0:\n        m+=60\n        h-=1\n    return h*60+m\n\ndef time_mid(h1,m1,h2,m2):\n    h=h1\n    m=m1\n    l=time_length(h1,m1,h2,m2)\n    l=l/2\n    while l>0:\n        m+=1\n        l-=1\n        if m==60:\n            h+=1\n            m=0\n    if m<10:\n        print(\"{}:0{}\".format(h,m))\n    else:\n        print(\"{}:{}\".format(h,m))\n\nh1,m1,h2,m2=map(int,raw_input().split(\":\"))\ntime_mid(h1,m1,h2,m2)"
}
2022-04-16 18:55:31.815365 REASON stop
2022-04-16 18:55:31.828960 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\nimport sys\n\ndef read_input(lines):\n    if isinstance(lines, list):\n        return lines\n    return sys.stdin.readlines()\n\ndef get_time_parts(time):\n    return time.split(':')\n\ndef get_time_in_minutes(time):\n    h, m = get_time_parts(time)\n    return int(h) * 60 + int(m)\n\ndef get_time_from_minutes(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return '%02d:%02d' % (h, m)\n\ndef get_mid_time(start, end):\n    start_minutes = get_time_in_minutes(start)\n    end_minutes = get_time_in_minutes(end)\n    mid_minutes = start_minutes + (end_minutes - start_minutes) // 2\n    return get_time_from_minutes(mid_minutes)\n\n\nif __name__ == '__main__':\n    lines = read_input('''10:00\n11:00'''.split('\\n'))\n    start = lines[0]\n    end = lines[1]\n    print(get_mid_time(start, end))"
}
2022-04-16 18:55:31.829066 REASON stop
2022-04-16 18:55:31.829921 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    h_1, m_1 = map(int, input().split(\":\"))\n    h_2, m_2 = map(int, input().split(\":\"))\n    total = (h_2 - h_1) * 60 + (m_2 - m_1)\n    half = total // 2\n    h_3 = (h_1 * 60 + m_1 + half) // 60\n    m_3 = (h_1 * 60 + m_1 + half) % 60\n    print(\"{:0>2}:{:0>2}\".format(h_3, m_3))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:55:31.830011 REASON stop
