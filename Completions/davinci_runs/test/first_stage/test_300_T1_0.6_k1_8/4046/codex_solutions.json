["\n\ndef main():\n    n = int(input())\n    q = [int(item) for item in input().split()]\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, len(q)):\n        p[i] = p[i-1] + q[i]\n    if any(i < 1 or i > n for i in p):\n        print(-1)\n    elif len(set(p)) != len(q):\n        print(-1)\n    else:\n        print(*p)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nq = [int(x) for x in input().split()]\n\nif sum(q) != 0 or q[0] <= -n or q[-1] >= n or any(q[i] == q[i+1] == 0 for i in range(n-2)):\n    print(-1)\nelse:\n    p = [0]*n\n    p[0] = q[0]\n    p[-1] = -q[-1]\n    for i in range(1, n-1):\n        p[i] = q[i] - p[i-1]\n    print(*p)", "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    cnt = [0] * n\n    for i in q:\n        cnt[i + n + 1] += 1\n    pos = [0] * n\n    for i in range(n):\n        pos[i] = cnt[i] - cnt[i + 2]\n    if sum(pos) != 0:\n        print(-1)\n        return\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = i + 1\n    for i in range(n - 1):\n        ans[i + 1] += q[i]\n        if ans[i + 1] <= 0 or ans[i + 1] > n:\n            print(-1)\n            return\n    print(*ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n-1):\n        p[i] = p[i-1] + q[i]\n    p[n-1] = p[n-2] + q[n-2]\n    for i in range(n):\n        if p[i] > n or p[i] < 1:\n            print(-1)\n            exit()\n    if len(set(p)) != len(p):\n        print(-1)\n        exit()\n    print(*p)\n\nif __name__ == \"__main__\":\n    main()", "\nn = int(input())\nq = map(int, input().split())\n\ndef f(n, q):\n    if n == 1:\n        return [1]\n    else:\n        if q[-1] >= 0:\n            return [n] + f(n-1, q[:-1])\n        else:\n            return [1] + f(n-1, [q[-1] + x for x in q[:-1]])\n\nans = f(n, list(q))\nif ans[0] < 0:\n    print(-1)\nelse:\n    print(*ans)", "\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\ndef restore_permutation(n, q):\n    q = [q[0]] + q\n    p = [0 for x in range(n+1)]\n    p[0] = q[0]\n    p[1] = q[1]\n    i = 2\n    while i <= n:\n        p[i] = p[i-1] + q[i]\n        if p[i] < 1 or p[i] > n:\n            return [-1]\n        if p[i] in p[:i]:\n            return [-1]\n        i += 1\n    return p[1:]\n\nn = int(input())\nq = [int(x) for x in input().split()]\nprint(' '.join([str(x) for x in restore_permutation(n, q)]))", "\n\nimport sys\n\ndef permutation(n, q):\n    p = [0]*n\n    p[0] = q[0]\n    p[1] = q[1]\n    for i in range(2, n):\n        p[i] = q[i-1] + p[i-1]\n    for i in range(n):\n        if p[i] < 1 or p[i] > n:\n            return -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] == p[j]:\n                return -1\n    return p\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    q = [int(x) for x in sys.stdin.readline().strip().split()]\n    p = permutation(n, q)\n    if p == -1:\n        print(p)\n    else:\n        for i in range(n):\n            p[i] += i+1\n        print(\" \".join(str(x) for x in p))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nq = list(map(int, input().split()))\n\nif len(q) != n - 1:\n    print(-1)\nelse:\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        p[i] = p[i-1] + q[i-1]\n\n    if max(p) > n or min(p) < 1:\n        print(-1)\n    else:\n        for i in range(n):\n            print(p[i], end=\" \")"]