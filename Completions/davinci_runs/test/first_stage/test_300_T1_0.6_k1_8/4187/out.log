2022-04-16 20:09:44.042472 """
Each day in Berland consists of $n$ hours. Polycarp likes time management. That's why he has a fixed schedule for each day — it is a sequence $a_1, a_2, \dots, a_n$ (each $a_i$ is either $0$ or $1$), where $a_i=0$ if Polycarp works during the $i$-th hour of the day and $a_i=1$ if Polycarp rests during the $i$-th hour of the day.

Days go one after another endlessly and Polycarp uses the same schedule for each day.

What is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.


-----Input-----

The first line contains $n$ ($1 \le n \le 2\cdot10^5$) — number of hours per day.

The second line contains $n$ integer numbers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 1$), where $a_i=0$ if the $i$-th hour in a day is working and $a_i=1$ if the $i$-th hour is resting. It is guaranteed that $a_i=0$ for at least one $i$.


-----Output-----

Print the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.


-----Examples-----
Input
5
1 0 1 0 1

Output
2

Input
6
0 1 0 1 1 0

Output
2

Input
7
1 0 1 1 1 0 1

Output
3

Input
3
0 0 0

Output
0



-----Note-----

In the first example, the maximal rest starts in last hour and goes to the first hour of the next day.

In the second example, Polycarp has maximal rest from the $4$-th to the $5$-th hour.

In the third example, Polycarp has maximal rest from the $3$-rd to the $5$-th hour.

In the fourth example, Polycarp has no rest at all.
"""
2022-04-16 20:09:44.042505 --------------------------
2022-04-16 20:10:11.711209 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef getMaxRest(n, hours):\n\tmaxRest = 0\n\tcurRest = 0\n\tfor i in range(n):\n\t\tif hours[i] == 1:\n\t\t\tcurRest += 1\n\t\t\tif curRest > maxRest:\n\t\t\t\tmaxRest = curRest\n\t\telse:\n\t\t\tcurRest = 0\n\treturn maxRest\n\nn = int(input())\nhours = list(map(int, input().split()))\nprint(getMaxRest(n, hours))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef maxRest(a):\n    maxRest = 0\n    curRest = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            curRest += 1\n            if curRest > maxRest:\n                maxRest = curRest\n        else:\n            curRest = 0\n    return maxRest\n\nprint(maxRest(a + a))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nschedule = list(map(int,input().split()))\n\nmaximum = 0\ncurrent = 0\n\nfor i in schedule:\n    if i == 1:\n        current += 1\n    else:\n        current = 0\n    if current > maximum:\n        maximum = current\n\nprint(maximum)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\nn = int(input())\na = input().split()\n\nfor i in range(n):\n    a[i] = int(a[i])\n\nmax_rest = 0\ncur_rest = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        cur_rest += 1\n    else:\n        if cur_rest > max_rest:\n            max_rest = cur_rest\n        cur_rest = 0\n\nif cur_rest > max_rest:\n    max_rest = cur_rest\n\nprint(max_rest)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nif a[0] == 0:\n    ans = 0\nelse:\n    ans = 1\ncnt = 1\nfor i in range(n-1):\n    if a[i] == a[i+1]:\n        cnt += 1\n    else:\n        ans = max(ans, cnt)\n        cnt = 1\nans = max(ans, cnt)\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# A = [0, 1, 0, 1, 1, 0]\n# N = len(A)\n# dp = [0] * N\n\n# i = N - 2\n# while i >= 0:\n#     if A[i] == 1:\n#         dp[i] = dp[i + 1] + 1\n#     else:\n#         dp[i] = dp[i + 1]\n#     i -= 1\n#\n# # print(dp)\n#\n# a = 0\n# for i in range(N):\n#     if A[i] == 0:\n#         if dp[i] > a:\n#             a = dp[i]\n# print(a)\n\n# A = [0, 1, 0, 1, 1, 0]\n# N = len(A)\n#\n# a = 0\n# i = 0\n# while i < N:\n#     j = i + 1\n#     c = 1\n#     if A[i] == 0:\n#         while j < N and A[j] == 1:\n#             c += 1\n#             j += 1\n#         if c > a:\n#             a = c\n#         i = j\n#     else:\n#         i += 1\n# print(a)\n\nA = [0, 1, 0, 1, 1, 0]\nN = len(A)\n\na = 0\ni = 0\nwhile i < N:\n    if A[i] == 0:\n        j = i + 1\n        c = 1\n        while j < N and A[j] == 1:\n            c += 1\n            j += 1\n        if c > a:\n            a = c\n        i = j\n    else:\n        i += 1\nprint(a)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(i) for i in input().split()]\nmax_rest_len = 0\nrest_len = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        rest_len += 1\n    else:\n        rest_len = 0\n    if rest_len > max_rest_len:\n        max_rest_len = rest_len\n\nprint(max_rest_len)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\nfrom pprint import pprint\n\ndef solution(n, a):\n    rest_count = 0\n    max_rest = 0\n    for x in a:\n        if x == 0:\n            rest_count = 0\n        else:\n            rest_count += 1\n            max_rest = max(max_rest, rest_count)\n    return max_rest\n\ndef test_solution():\n    assert solution(5, [1, 0, 1, 0, 1]) == 2\n    assert solution(6, [0, 1, 0, 1, 1, 0]) == 2\n    assert solution(7, [1, 0, 1, 1, 1, 0, 1]) == 3\n    assert solution(3, [0, 0, 0]) == 0\n\ntest_solution()"
    }
  ],
  "created": 1650139784,
  "id": "cmpl-4xj1kbgOsBnMGHEpyrGCvnbZMrjvR",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:10:11.711566 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef getMaxRest(n, hours):\n\tmaxRest = 0\n\tcurRest = 0\n\tfor i in range(n):\n\t\tif hours[i] == 1:\n\t\t\tcurRest += 1\n\t\t\tif curRest > maxRest:\n\t\t\t\tmaxRest = curRest\n\t\telse:\n\t\t\tcurRest = 0\n\treturn maxRest\n\nn = int(input())\nhours = list(map(int, input().split()))\nprint(getMaxRest(n, hours))"
}
2022-04-16 20:10:11.711604 REASON stop
2022-04-16 20:10:11.735845 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef maxRest(a):\n    maxRest = 0\n    curRest = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            curRest += 1\n            if curRest > maxRest:\n                maxRest = curRest\n        else:\n            curRest = 0\n    return maxRest\n\nprint(maxRest(a + a))"
}
2022-04-16 20:10:11.736056 REASON stop
2022-04-16 20:10:11.736538 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nschedule = list(map(int,input().split()))\n\nmaximum = 0\ncurrent = 0\n\nfor i in schedule:\n    if i == 1:\n        current += 1\n    else:\n        current = 0\n    if current > maximum:\n        maximum = current\n\nprint(maximum)"
}
2022-04-16 20:10:11.736603 REASON stop
2022-04-16 20:10:11.753494 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\nn = int(input())\na = input().split()\n\nfor i in range(n):\n    a[i] = int(a[i])\n\nmax_rest = 0\ncur_rest = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        cur_rest += 1\n    else:\n        if cur_rest > max_rest:\n            max_rest = cur_rest\n        cur_rest = 0\n\nif cur_rest > max_rest:\n    max_rest = cur_rest\n\nprint(max_rest)"
}
2022-04-16 20:10:11.753599 REASON stop
2022-04-16 20:10:11.775186 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nif a[0] == 0:\n    ans = 0\nelse:\n    ans = 1\ncnt = 1\nfor i in range(n-1):\n    if a[i] == a[i+1]:\n        cnt += 1\n    else:\n        ans = max(ans, cnt)\n        cnt = 1\nans = max(ans, cnt)\nprint(ans)"
}
2022-04-16 20:10:11.775378 REASON stop
2022-04-16 20:10:11.776741 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# A = [0, 1, 0, 1, 1, 0]\n# N = len(A)\n# dp = [0] * N\n\n# i = N - 2\n# while i >= 0:\n#     if A[i] == 1:\n#         dp[i] = dp[i + 1] + 1\n#     else:\n#         dp[i] = dp[i + 1]\n#     i -= 1\n#\n# # print(dp)\n#\n# a = 0\n# for i in range(N):\n#     if A[i] == 0:\n#         if dp[i] > a:\n#             a = dp[i]\n# print(a)\n\n# A = [0, 1, 0, 1, 1, 0]\n# N = len(A)\n#\n# a = 0\n# i = 0\n# while i < N:\n#     j = i + 1\n#     c = 1\n#     if A[i] == 0:\n#         while j < N and A[j] == 1:\n#             c += 1\n#             j += 1\n#         if c > a:\n#             a = c\n#         i = j\n#     else:\n#         i += 1\n# print(a)\n\nA = [0, 1, 0, 1, 1, 0]\nN = len(A)\n\na = 0\ni = 0\nwhile i < N:\n    if A[i] == 0:\n        j = i + 1\n        c = 1\n        while j < N and A[j] == 1:\n            c += 1\n            j += 1\n        if c > a:\n            a = c\n        i = j\n    else:\n        i += 1\nprint(a)"
}
2022-04-16 20:10:11.776845 REASON stop
2022-04-16 20:10:11.778580 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(i) for i in input().split()]\nmax_rest_len = 0\nrest_len = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        rest_len += 1\n    else:\n        rest_len = 0\n    if rest_len > max_rest_len:\n        max_rest_len = rest_len\n\nprint(max_rest_len)"
}
2022-04-16 20:10:11.778699 REASON stop
2022-04-16 20:10:11.780355 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\nfrom pprint import pprint\n\ndef solution(n, a):\n    rest_count = 0\n    max_rest = 0\n    for x in a:\n        if x == 0:\n            rest_count = 0\n        else:\n            rest_count += 1\n            max_rest = max(max_rest, rest_count)\n    return max_rest\n\ndef test_solution():\n    assert solution(5, [1, 0, 1, 0, 1]) == 2\n    assert solution(6, [0, 1, 0, 1, 1, 0]) == 2\n    assert solution(7, [1, 0, 1, 1, 1, 0, 1]) == 3\n    assert solution(3, [0, 0, 0]) == 0\n\ntest_solution()"
}
2022-04-16 20:10:11.780619 REASON stop
