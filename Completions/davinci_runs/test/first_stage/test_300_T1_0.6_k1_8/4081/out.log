2022-04-16 19:19:50.470542 """
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).

You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.

You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).

For example, for the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$), where $a_i$ is the $i$-th element of $a$. All these integers are pairwise distinct.


-----Output-----

In the first line of the output print $k$ — the maximum number of elements in a strictly increasing sequence you can obtain.

In the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.


-----Examples-----
Input
5
2 1 5 4 3

Output
4
LRRR

Input
7
1 3 5 6 7 4 2

Output
7
LRLRLLL

Input
3
1 2 3

Output
3
LLL

Input
4
1 2 4 3

Output
4
LLRL



-----Note-----

The first example is described in the problem statement.
"""
2022-04-16 19:19:50.470567 --------------------------
2022-04-16 19:21:00.495471 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    order = sorted(range(n), key=lambda x: a[x])\n    left = [0 for _ in range(n)]\n    right = [0 for _ in range(n)]\n    for i in range(1, n):\n        left[i] = left[i - 1] + 1 if order[i] < order[i - 1] else left[i - 1]\n    for i in range(n - 2, -1, -1):\n        right[i] = right[i + 1] + 1 if order[i] < order[i + 1] else right[i + 1]\n    l, r = 0, 0\n    m = 0\n    for i in range(n):\n        if left[i] + right[i] > m:\n            l, r, m = left[i], right[i], left[i] + right[i]\n    s = ['' for _ in range(m)]\n    i = 0\n    for j in range(l):\n        s[j] = 'L'\n    for j in range(l, m):\n        s[j] = 'R'\n    return m, \"\".join(s)\n\nm, s = solve(n, a)\nprint(m)\nprint(s)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        print('L')\n        return\n\n    if n == 2:\n        print(2)\n        print('LL')\n        return\n\n    def get_path(a, left_path, right_path, curr_idx, target_idx):\n        if curr_idx == target_idx:\n            return left_path\n        else:\n            if a[curr_idx] < a[target_idx]:\n                left_path.append('L')\n                return get_path(a, left_path, right_path, curr_idx + 1, target_idx)\n            else:\n                right_path.append('R')\n                return get_path(a, left_path, right_path, curr_idx - 1, target_idx)\n\n    # left_path = []\n    # right_path = []\n    # path = get_path(a, left_path, right_path, 0, n-1)\n    #\n    # print(len(path))\n    # print(''.join(path))\n\n    # check if all ascending\n    is_ascending = True\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            is_ascending = False\n            break\n    if is_ascending:\n        print(n)\n        print('L' * n)\n        return\n\n    # check if all descending\n    is_descending = True\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            is_descending = False\n            break\n    if is_descending:\n        print(n)\n        print('R' * n)\n        return\n\n    # if not ascending or descending, then we need to find the longest increasing sequence\n    # the longest sequence can be found if we just take the first number, then take the last number, then take the first number,\n    # and so on and so forth\n    # the only exception to this rule is when we have a sequence like [1, 2, 4, 3]\n    # in this case, we will take the first number, then take the 2nd number, then take the 4th number, and then take the 3rd number\n\n    print(n)\n    print('L' * (n - 1) + 'R')\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# The solution for this problem is simple, we can use a stack to keep track of the next largest number.\n# The stack is used as a stack of indices of the array, the top of the stack is the index of the largest number in the array.\n# When the next largest number is found, we pop the stack and add to the answer the stack size.\n\n# The stack starts empty, and we start from the left of the array.\n# If the number is larger than the top of the stack, we push it to the stack.\n# If the number is smaller than the top of the stack, we pop the stack until it is empty or the top of the stack is smaller than the number.\n# We add to the answer the stack size (number of elements popped).\n# We then push the number to the stack.\n\n# We do the same from the right.\n# We then take the maximum of the answers from the left and right.\n# The maximum is the longest strictly increasing sequence.\n\n# EXAMPLE\n# Let the array be [1, 2, 3, 4, 5].\n# We start with an empty stack.\n# We look at 1, it is smaller than the empty stack, so we pop the stack and add to the answer the stack size (which is 0).\n# We then push 1 to the stack.\n# We look at 2, it is larger than 1, so we push 2 to the stack.\n# We look at 3, it is larger than 2, so we push 3 to the stack.\n# We look at 4, it is larger than 3, so we push 4 to the stack.\n# We look at 5, it is larger than 4, so we push 5 to the stack.\n# We have finished the left side of the array.\n# The answer is 0.\n# The stack is [1, 2, 3, 4, 5].\n\n# We start with the right side of the array.\n# We look at 5, it is larger than the top of the stack (1), so we pop the stack and add to the answer the stack size.\n# We then push 5 to the stack.\n# We look at 4, it is larger than the top of the stack (2), so we pop the stack and add to the answer the stack size.\n# We then push 4 to the stack.\n# We look at 3, it is smaller than the top of the stack (4), so we pop the stack until it is empty or the top of the stack is smaller than 3.\n# We add to the answer the stack size.\n# We then push 3 to the stack.\n# We look at 2, it is smaller than the top of the stack (3), so we pop the stack until it is empty or the top of the stack is smaller than 2.\n# We add to the answer the stack size.\n# We then push 2 to the stack.\n# We look at 1, it is smaller than the top of the stack (2), so we pop the stack until it is empty or the top of the stack is smaller than 1.\n# We add to the answer the stack size.\n# We then push 1 to the stack.\n# We have finished the right side of the array.\n# The answer is 6.\n# The stack is empty.\n\n# The answer is the maximum of the two answers, which is 6.\n# We can translate this to the sequence LLLLLLL.\n\n# COMPLEXITY\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nfromLeft = deque()\nfromRight = deque()\n\nlAnswer = 0\nrAnswer = 0\n\nfor i in range(n):\n    # From left\n    while fromLeft and a[fromLeft[-1]] >= a[i]:\n        fromLeft.pop()\n    \n    lAnswer += len(fromLeft)\n    fromLeft.append(i)\n    \n    # From right\n    while fromRight and a[fromRight[-1]] >= a[n - 1 - i]:\n        fromRight.pop()\n    \n    rAnswer += len(fromRight)\n    fromRight.append(n - 1 - i)\n\n# The answer is the maximum of the two answers\nanswer = max(lAnswer, rAnswer)\n\n# We print the answer\nprint(answer)\n\n# We print the sequence\nif lAnswer > rAnswer:\n    # We go from left\n    curr = deque()\n    for i in range(n):\n        while curr and a[curr[-1]] >= a[i]:\n            curr.pop()\n        \n        print('L', end='')\n        curr.append(i)\nelse:\n    # We go from right\n    curr = deque()\n    for i in range(n):\n        while curr and a[curr[-1]] >= a[n - 1 - i]:\n            curr.pop()\n        \n        print('R', end='')\n        curr.append(n - 1 - i)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef test_code():\n    pass\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    inc = [1] * n\n    dec = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i]:\n                inc[i] = max(inc[i], inc[j] + 1)\n            elif a[j] > a[i]:\n                dec[i] = max(dec[i], dec[j] + 1)\n\n    print(max(inc + dec))\n\n    # print(inc)\n    # print(dec)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\nimport math\nn = int(input())\na = list(map(int, input().split()))\nans = []\nl = 1\nr = n\nwhile l <= r:\n    if a[l-1] == l:\n        l += 1\n        ans.append('L')\n    elif a[r-1] == r:\n        r -= 1\n        ans.append('R')\n    else:\n        break\nans.reverse()\nprint(len(ans))\nprint(''.join(ans))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef LIS(l):\n    n = len(l)\n    d = [1] * n\n\n    for i in range(1,n):\n        for j in range(0,i):\n            if l[j] < l[i] and d[i] < d[j] + 1 :\n                d[i] = d[j] + 1\n                \n    return d[n-1]\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    print(LIS(a))\n    \n    #for i in range(1,n):\n    #    if a[i] > a[i-1]:\n    #        print('L', end='')\n    #    else:\n    #        print('R', end='')\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# ======== SOLUTION =========\n\nn = int(input())\na = list(map(int, input().split()))\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n# \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 LIS\nb = [0] * n\n\nfor i in range(n):\n    b[a[i]-1] = i\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f LIS\n# \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 -1\nc = [-1] * n\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nc[0] = b[0]\n# \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0434\u043b\u0438\u043d\u044b LIS\nlen = 1\n\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nfor i in range(1, n):\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 LIS \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    if b[i] < c[len-1]:\n        c[len-1] = b[i]\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 LIS \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    elif b[i] > c[len-1]:\n        len += 1\n        c[len-1] = b[i]\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u043b\u0438\u043d\u0443 LIS\nprint(len)\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nd = [0] * len\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\nd[len-1] = a[c[len-1]]\n\n# \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\nlast = c[len-1]\n\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\nfor i in range(n-1, -1, -1):\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    if b[i] < last and b[i] > c[len-2]:\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n        # \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e last\n        d[len-2] = a[i]\n        last = c[len-2]\n        len -= 1\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\nfor i in range(len):\n    if d[i] == a[i]:\n        print('L', end='')\n    else:\n        print('R', end='')"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n# SOURCE: https://codeforces.com/problemset/problem/1165/C\n\n# SOLUTION:\n\n# read input\nn = int(input())\na = list(map(int, input().split()))\n\n# create list of indices\na_ind = [i for i in range(n)]\n\n# order a and a_ind in ascending order\na_ind.sort(key = lambda i: a[i])\na.sort()\n\n# create list for storing results\nres = []\n\n# create list for storing indices\nind = []\n\n# store the indices of the first and last elements of the sorted lists\nind.append(a_ind[0])\nind.append(a_ind[-1])\n\n# if the first element in a is less than the second element in a,\n# then add the first element of a to res and remove it from a\nif a[0] < a[1]:\n    res.append('L')\n    a.pop(0)\n\n# if the last element in a is greater than the second to last element\n# in a, then add the last element of a to res and remove it from a\nif a[-1] > a[-2]:\n    res.append('R')\n    a.pop(-1)\n\n# while a is not empty\nwhile a:\n    # if the index of the first element in a is less than the index\n    # of the last element in a\n    if a_ind[0] < a_ind[-1]:\n        # if the first element in a is less than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        if a[0] < a[1]:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n        # if the last element in a is greater than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        elif a[-1] > a[-2]:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n        # if the first element in a is greater than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        else:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n    # if the index of the first element in a is greater than the index\n    # of the last element in a\n    else:\n        # if the last element in a is greater than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        if a[-1] > a[-2]:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n        # if the first element in a is less than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        elif a[0] < a[1]:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n        # if the last element in a is less than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        else:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n\n# print the length of res\nprint(len(res))\n# print res\nprint(''.join(res))"
    }
  ],
  "created": 1650136790,
  "id": "cmpl-4xiFSZRnKma2G6GXp2cmjYDgybCwU",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:21:00.495982 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    order = sorted(range(n), key=lambda x: a[x])\n    left = [0 for _ in range(n)]\n    right = [0 for _ in range(n)]\n    for i in range(1, n):\n        left[i] = left[i - 1] + 1 if order[i] < order[i - 1] else left[i - 1]\n    for i in range(n - 2, -1, -1):\n        right[i] = right[i + 1] + 1 if order[i] < order[i + 1] else right[i + 1]\n    l, r = 0, 0\n    m = 0\n    for i in range(n):\n        if left[i] + right[i] > m:\n            l, r, m = left[i], right[i], left[i] + right[i]\n    s = ['' for _ in range(m)]\n    i = 0\n    for j in range(l):\n        s[j] = 'L'\n    for j in range(l, m):\n        s[j] = 'R'\n    return m, \"\".join(s)\n\nm, s = solve(n, a)\nprint(m)\nprint(s)"
}
2022-04-16 19:21:00.496073 REASON stop
2022-04-16 19:21:00.527258 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        print('L')\n        return\n\n    if n == 2:\n        print(2)\n        print('LL')\n        return\n\n    def get_path(a, left_path, right_path, curr_idx, target_idx):\n        if curr_idx == target_idx:\n            return left_path\n        else:\n            if a[curr_idx] < a[target_idx]:\n                left_path.append('L')\n                return get_path(a, left_path, right_path, curr_idx + 1, target_idx)\n            else:\n                right_path.append('R')\n                return get_path(a, left_path, right_path, curr_idx - 1, target_idx)\n\n    # left_path = []\n    # right_path = []\n    # path = get_path(a, left_path, right_path, 0, n-1)\n    #\n    # print(len(path))\n    # print(''.join(path))\n\n    # check if all ascending\n    is_ascending = True\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            is_ascending = False\n            break\n    if is_ascending:\n        print(n)\n        print('L' * n)\n        return\n\n    # check if all descending\n    is_descending = True\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            is_descending = False\n            break\n    if is_descending:\n        print(n)\n        print('R' * n)\n        return\n\n    # if not ascending or descending, then we need to find the longest increasing sequence\n    # the longest sequence can be found if we just take the first number, then take the last number, then take the first number,\n    # and so on and so forth\n    # the only exception to this rule is when we have a sequence like [1, 2, 4, 3]\n    # in this case, we will take the first number, then take the 2nd number, then take the 4th number, and then take the 3rd number\n\n    print(n)\n    print('L' * (n - 1) + 'R')\n\nmain()"
}
2022-04-16 19:21:00.527495 REASON stop
2022-04-16 19:21:00.528009 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# The solution for this problem is simple, we can use a stack to keep track of the next largest number.\n# The stack is used as a stack of indices of the array, the top of the stack is the index of the largest number in the array.\n# When the next largest number is found, we pop the stack and add to the answer the stack size.\n\n# The stack starts empty, and we start from the left of the array.\n# If the number is larger than the top of the stack, we push it to the stack.\n# If the number is smaller than the top of the stack, we pop the stack until it is empty or the top of the stack is smaller than the number.\n# We add to the answer the stack size (number of elements popped).\n# We then push the number to the stack.\n\n# We do the same from the right.\n# We then take the maximum of the answers from the left and right.\n# The maximum is the longest strictly increasing sequence.\n\n# EXAMPLE\n# Let the array be [1, 2, 3, 4, 5].\n# We start with an empty stack.\n# We look at 1, it is smaller than the empty stack, so we pop the stack and add to the answer the stack size (which is 0).\n# We then push 1 to the stack.\n# We look at 2, it is larger than 1, so we push 2 to the stack.\n# We look at 3, it is larger than 2, so we push 3 to the stack.\n# We look at 4, it is larger than 3, so we push 4 to the stack.\n# We look at 5, it is larger than 4, so we push 5 to the stack.\n# We have finished the left side of the array.\n# The answer is 0.\n# The stack is [1, 2, 3, 4, 5].\n\n# We start with the right side of the array.\n# We look at 5, it is larger than the top of the stack (1), so we pop the stack and add to the answer the stack size.\n# We then push 5 to the stack.\n# We look at 4, it is larger than the top of the stack (2), so we pop the stack and add to the answer the stack size.\n# We then push 4 to the stack.\n# We look at 3, it is smaller than the top of the stack (4), so we pop the stack until it is empty or the top of the stack is smaller than 3.\n# We add to the answer the stack size.\n# We then push 3 to the stack.\n# We look at 2, it is smaller than the top of the stack (3), so we pop the stack until it is empty or the top of the stack is smaller than 2.\n# We add to the answer the stack size.\n# We then push 2 to the stack.\n# We look at 1, it is smaller than the top of the stack (2), so we pop the stack until it is empty or the top of the stack is smaller than 1.\n# We add to the answer the stack size.\n# We then push 1 to the stack.\n# We have finished the right side of the array.\n# The answer is 6.\n# The stack is empty.\n\n# The answer is the maximum of the two answers, which is 6.\n# We can translate this to the sequence LLLLLLL.\n\n# COMPLEXITY\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nfromLeft = deque()\nfromRight = deque()\n\nlAnswer = 0\nrAnswer = 0\n\nfor i in range(n):\n    # From left\n    while fromLeft and a[fromLeft[-1]] >= a[i]:\n        fromLeft.pop()\n    \n    lAnswer += len(fromLeft)\n    fromLeft.append(i)\n    \n    # From right\n    while fromRight and a[fromRight[-1]] >= a[n - 1 - i]:\n        fromRight.pop()\n    \n    rAnswer += len(fromRight)\n    fromRight.append(n - 1 - i)\n\n# The answer is the maximum of the two answers\nanswer = max(lAnswer, rAnswer)\n\n# We print the answer\nprint(answer)\n\n# We print the sequence\nif lAnswer > rAnswer:\n    # We go from left\n    curr = deque()\n    for i in range(n):\n        while curr and a[curr[-1]] >= a[i]:\n            curr.pop()\n        \n        print('L', end='')\n        curr.append(i)\nelse:\n    # We go from right\n    curr = deque()\n    for i in range(n):\n        while curr and a[curr[-1]] >= a[n - 1 - i]:\n            curr.pop()\n        \n        print('R', end='')\n        curr.append(n - 1 - i)"
}
2022-04-16 19:21:00.528087 REASON stop
2022-04-16 19:21:00.560189 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef test_code():\n    pass\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    inc = [1] * n\n    dec = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i]:\n                inc[i] = max(inc[i], inc[j] + 1)\n            elif a[j] > a[i]:\n                dec[i] = max(dec[i], dec[j] + 1)\n\n    print(max(inc + dec))\n\n    # print(inc)\n    # print(dec)"
}
2022-04-16 19:21:00.560289 REASON stop
2022-04-16 19:21:00.585160 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\nimport math\nn = int(input())\na = list(map(int, input().split()))\nans = []\nl = 1\nr = n\nwhile l <= r:\n    if a[l-1] == l:\n        l += 1\n        ans.append('L')\n    elif a[r-1] == r:\n        r -= 1\n        ans.append('R')\n    else:\n        break\nans.reverse()\nprint(len(ans))\nprint(''.join(ans))"
}
2022-04-16 19:21:00.585270 REASON stop
2022-04-16 19:21:00.586379 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef LIS(l):\n    n = len(l)\n    d = [1] * n\n\n    for i in range(1,n):\n        for j in range(0,i):\n            if l[j] < l[i] and d[i] < d[j] + 1 :\n                d[i] = d[j] + 1\n                \n    return d[n-1]\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    print(LIS(a))\n    \n    #for i in range(1,n):\n    #    if a[i] > a[i-1]:\n    #        print('L', end='')\n    #    else:\n    #        print('R', end='')\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:21:00.586493 REASON stop
2022-04-16 19:21:00.587650 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# ======== SOLUTION =========\n\nn = int(input())\na = list(map(int, input().split()))\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n# \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 LIS\nb = [0] * n\n\nfor i in range(n):\n    b[a[i]-1] = i\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f LIS\n# \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 -1\nc = [-1] * n\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nc[0] = b[0]\n# \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0434\u043b\u0438\u043d\u044b LIS\nlen = 1\n\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nfor i in range(1, n):\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 LIS \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    if b[i] < c[len-1]:\n        c[len-1] = b[i]\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 LIS \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    elif b[i] > c[len-1]:\n        len += 1\n        c[len-1] = b[i]\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u043b\u0438\u043d\u0443 LIS\nprint(len)\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nd = [0] * len\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\nd[len-1] = a[c[len-1]]\n\n# \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\nlast = c[len-1]\n\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\nfor i in range(n-1, -1, -1):\n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    # \u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 LIS\n    if b[i] < last and b[i] > c[len-2]:\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n        # \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e last\n        d[len-2] = a[i]\n        last = c[len-2]\n        len -= 1\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\nfor i in range(len):\n    if d[i] == a[i]:\n        print('L', end='')\n    else:\n        print('R', end='')"
}
2022-04-16 19:21:00.587743 REASON stop
2022-04-16 19:21:00.588612 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n# SOURCE: https://codeforces.com/problemset/problem/1165/C\n\n# SOLUTION:\n\n# read input\nn = int(input())\na = list(map(int, input().split()))\n\n# create list of indices\na_ind = [i for i in range(n)]\n\n# order a and a_ind in ascending order\na_ind.sort(key = lambda i: a[i])\na.sort()\n\n# create list for storing results\nres = []\n\n# create list for storing indices\nind = []\n\n# store the indices of the first and last elements of the sorted lists\nind.append(a_ind[0])\nind.append(a_ind[-1])\n\n# if the first element in a is less than the second element in a,\n# then add the first element of a to res and remove it from a\nif a[0] < a[1]:\n    res.append('L')\n    a.pop(0)\n\n# if the last element in a is greater than the second to last element\n# in a, then add the last element of a to res and remove it from a\nif a[-1] > a[-2]:\n    res.append('R')\n    a.pop(-1)\n\n# while a is not empty\nwhile a:\n    # if the index of the first element in a is less than the index\n    # of the last element in a\n    if a_ind[0] < a_ind[-1]:\n        # if the first element in a is less than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        if a[0] < a[1]:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n        # if the last element in a is greater than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        elif a[-1] > a[-2]:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n        # if the first element in a is greater than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        else:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n    # if the index of the first element in a is greater than the index\n    # of the last element in a\n    else:\n        # if the last element in a is greater than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        if a[-1] > a[-2]:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n        # if the first element in a is less than the second element in a\n        # (this is to ensure that we can keep the sequence increasing)\n        elif a[0] < a[1]:\n            # add the first element of a to res and remove it from a\n            res.append('L')\n            a.pop(0)\n            # remove the index of the first element of a from the list of indices\n            a_ind.pop(0)\n        # if the last element in a is less than the second to last element\n        # in a (this is to ensure that we can keep the sequence increasing)\n        else:\n            # add the last element of a to res and remove it from a\n            res.append('R')\n            a.pop(-1)\n            # remove the index of the last element of a from the list of indices\n            a_ind.pop(-1)\n\n# print the length of res\nprint(len(res))\n# print res\nprint(''.join(res))"
}
2022-04-16 19:21:00.588722 REASON stop
