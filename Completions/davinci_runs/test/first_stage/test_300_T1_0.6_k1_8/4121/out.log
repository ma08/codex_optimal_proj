2022-04-16 19:37:15.572623 """
Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.

The current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.

Vova can only use $2 \times 1$ bricks to put in the wall (he has infinite supply of them, however).

Vova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).

The next paragraph is specific to the version 1 of the problem.

Vova can also put bricks vertically. That means increasing height of any part of the wall by 2.

Vova is a perfectionist, so he considers the wall completed when:

  all parts of the wall has the same height;  the wall has no empty spaces inside it. 

Can Vova complete the wall using any amount of bricks (possibly zero)?


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of parts in the wall.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$) — the initial heights of the parts of the wall.


-----Output-----

Print "YES" if Vova can complete the wall using any amount of bricks (possibly zero).

Print "NO" otherwise.


-----Examples-----
Input
5
2 1 1 2 5

Output
YES

Input
3
4 5 3

Output
YES

Input
2
10 10

Output
YES

Input
3
1 2 3

Output
NO



-----Note-----

In the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.

In the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.

In the third example the wall is already complete.
"""
2022-04-16 19:37:15.572637 --------------------------
2022-04-16 19:37:41.531703 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int,input().split(' ')))\n\n    # check if it is possible\n    if len(set(a)) == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    a.sort()\n    if a[0] == a[-1]-1 and a[-1] - a[-2] == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    if a[0] == a[-1]-2:\n        print(\"YES\")\n        return\n\n    # else\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef vova_wall():\n    n = int(input())\n    a = list(map(int,input().split()))\n    if len(a) == 1:\n        return \"YES\"\n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        i = 0\n        while i < len(a) - 1:\n            if a[i] == a[i+1]:\n                i += 1\n            else:\n                break\n        if i == len(a) - 1:\n            return \"YES\"\n        else:\n            if a[i] < a[i+1]:\n                a[i] += 1\n            else:\n                a[i+1] += 1\n            j = i\n            while j < len(a) - 1:\n                if a[j] == a[j+1]:\n                    j += 1\n                else:\n                    break\n            if j == len(a) - 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n\nprint(vova_wall())"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Find the min and max height\n    2. If min == max, then YES\n    3. If min+1 == max, then YES\n    4. If min+2 == max, then YES\n    5. Else, NO\n    \"\"\"\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    # print(a)\n    min_height = min(a)\n    max_height = max(a)\n    # print(min_height, max_height)\n    if min_height == max_height:\n        print('YES')\n        return\n    if min_height == max_height-1:\n        print('YES')\n        return\n    if min_height == max_height-2:\n        print('YES')\n        return\n    print('NO')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef solve(n, a):\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n        if a[i] - a[i - 1] == 1:\n            a[i] -= 1\n    return \"YES\"\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    # Read in the number of parts in the wall\n    num_parts = int(input())\n\n    # Read in the initial height of the wall\n    heights = [int(x) for x in input().split()]\n\n    # Check if the wall is already complete\n    if len(set(heights)) == 1:\n        print(\"YES\")\n        return\n\n    # Find the maximum height of the wall\n    max_height = max(heights)\n\n    # Check if the wall can be completed\n    if 2 * len(set(heights)) - 1 > max_height:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ninput_str = input().split()\nn = int(input_str[0])\ninput_str = input().split()\na = list(map(int, input_str))\n\nfor i in range(n-1):\n    if a[i] != a[i+1]:\n        print(\"NO\")\n        quit()\nprint(\"YES\")"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#-----IDEAS/PSEUDOCODE-----\n# have a list of heights\n# if there is one element in the list, it is complete\n# if there are more than 1 element in the list, then ask if there are any consecutive elements that are the same height\n# if there are, then you can place a brick and increase the height of both\n# if there are not, then you can ask if there are any elements that are greater than or equal to the max height\n# if there are, you can place a brick on top of that element and increase the height\n# if there are not, then you cannot complete the wall\n\n#-----CODE-----\nn = int(input())\nheights = list(map(int, input().split()))\n\nif n == 1:\n\tprint(\"YES\")\n\tquit()\n\nfor i in range(n):\n\tif i == 0:\n\t\tif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telif i == n-1:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telse:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\t\t\nprint(\"NO\")"
    }
  ],
  "created": 1650137835,
  "id": "cmpl-4xiWJOzzVupN5VfhuMAhUC0rItgLp",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:37:41.532013 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int,input().split(' ')))\n\n    # check if it is possible\n    if len(set(a)) == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    a.sort()\n    if a[0] == a[-1]-1 and a[-1] - a[-2] == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    if a[0] == a[-1]-2:\n        print(\"YES\")\n        return\n\n    # else\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:37:41.532111 REASON stop
2022-04-16 19:37:41.546898 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef vova_wall():\n    n = int(input())\n    a = list(map(int,input().split()))\n    if len(a) == 1:\n        return \"YES\"\n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        i = 0\n        while i < len(a) - 1:\n            if a[i] == a[i+1]:\n                i += 1\n            else:\n                break\n        if i == len(a) - 1:\n            return \"YES\"\n        else:\n            if a[i] < a[i+1]:\n                a[i] += 1\n            else:\n                a[i+1] += 1\n            j = i\n            while j < len(a) - 1:\n                if a[j] == a[j+1]:\n                    j += 1\n                else:\n                    break\n            if j == len(a) - 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n\nprint(vova_wall())"
}
2022-04-16 19:37:41.547114 REASON stop
2022-04-16 19:37:41.547616 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    1. Find the min and max height\n    2. If min == max, then YES\n    3. If min+1 == max, then YES\n    4. If min+2 == max, then YES\n    5. Else, NO\n    \"\"\"\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    # print(a)\n    min_height = min(a)\n    max_height = max(a)\n    # print(min_height, max_height)\n    if min_height == max_height:\n        print('YES')\n        return\n    if min_height == max_height-1:\n        print('YES')\n        return\n    if min_height == max_height-2:\n        print('YES')\n        return\n    print('NO')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:37:41.547678 REASON stop
2022-04-16 19:37:41.559707 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef solve(n, a):\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n        if a[i] - a[i - 1] == 1:\n            a[i] -= 1\n    return \"YES\"\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:37:41.559809 REASON stop
2022-04-16 19:37:41.583689 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:37:41.583801 REASON stop
2022-04-16 19:37:41.584997 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    # Read in the number of parts in the wall\n    num_parts = int(input())\n\n    # Read in the initial height of the wall\n    heights = [int(x) for x in input().split()]\n\n    # Check if the wall is already complete\n    if len(set(heights)) == 1:\n        print(\"YES\")\n        return\n\n    # Find the maximum height of the wall\n    max_height = max(heights)\n\n    # Check if the wall can be completed\n    if 2 * len(set(heights)) - 1 > max_height:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:37:41.585080 REASON stop
2022-04-16 19:37:41.586251 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ninput_str = input().split()\nn = int(input_str[0])\ninput_str = input().split()\na = list(map(int, input_str))\n\nfor i in range(n-1):\n    if a[i] != a[i+1]:\n        print(\"NO\")\n        quit()\nprint(\"YES\")"
}
2022-04-16 19:37:41.586342 REASON stop
2022-04-16 19:37:41.587456 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#-----IDEAS/PSEUDOCODE-----\n# have a list of heights\n# if there is one element in the list, it is complete\n# if there are more than 1 element in the list, then ask if there are any consecutive elements that are the same height\n# if there are, then you can place a brick and increase the height of both\n# if there are not, then you can ask if there are any elements that are greater than or equal to the max height\n# if there are, you can place a brick on top of that element and increase the height\n# if there are not, then you cannot complete the wall\n\n#-----CODE-----\nn = int(input())\nheights = list(map(int, input().split()))\n\nif n == 1:\n\tprint(\"YES\")\n\tquit()\n\nfor i in range(n):\n\tif i == 0:\n\t\tif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telif i == n-1:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telse:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\t\t\nprint(\"NO\")"
}
2022-04-16 19:37:41.587556 REASON stop
