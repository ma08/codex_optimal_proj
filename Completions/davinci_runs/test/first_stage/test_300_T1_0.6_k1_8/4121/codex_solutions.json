["\n\ndef main():\n    \"\"\"\n    1. Find the min and max height\n    2. If min == max, then YES\n    3. If min+1 == max, then YES\n    4. If min+2 == max, then YES\n    5. Else, NO\n    \"\"\"\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    # print(a)\n    min_height = min(a)\n    max_height = max(a)\n    # print(min_height, max_height)\n    if min_height == max_height:\n        print('YES')\n        return\n    if min_height == max_height-1:\n        print('YES')\n        return\n    if min_height == max_height-2:\n        print('YES')\n        return\n    print('NO')\n\nif __name__ == '__main__':\n    main()", "\n\n#-----IDEAS/PSEUDOCODE-----\n# have a list of heights\n# if there is one element in the list, it is complete\n# if there are more than 1 element in the list, then ask if there are any consecutive elements that are the same height\n# if there are, then you can place a brick and increase the height of both\n# if there are not, then you can ask if there are any elements that are greater than or equal to the max height\n# if there are, you can place a brick on top of that element and increase the height\n# if there are not, then you cannot complete the wall\n\n#-----CODE-----\nn = int(input())\nheights = list(map(int, input().split()))\n\nif n == 1:\n\tprint(\"YES\")\n\tquit()\n\nfor i in range(n):\n\tif i == 0:\n\t\tif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telif i == n-1:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\telse:\n\t\tif heights[i] == heights[i-1]:\n\t\t\theights[i] += 1\n\t\t\theights[i-1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == heights[i+1]:\n\t\t\theights[i] += 1\n\t\t\theights[i+1] += 1\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\telif heights[i] == max(heights):\n\t\t\theights[i] += 2\n\t\t\tprint(\"YES\")\n\t\t\tquit()\n\t\t\t\nprint(\"NO\")", "\n\ndef vova_wall():\n    n = int(input())\n    a = list(map(int,input().split()))\n    if len(a) == 1:\n        return \"YES\"\n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        i = 0\n        while i < len(a) - 1:\n            if a[i] == a[i+1]:\n                i += 1\n            else:\n                break\n        if i == len(a) - 1:\n            return \"YES\"\n        else:\n            if a[i] < a[i+1]:\n                a[i] += 1\n            else:\n                a[i+1] += 1\n            j = i\n            while j < len(a) - 1:\n                if a[j] == a[j+1]:\n                    j += 1\n                else:\n                    break\n            if j == len(a) - 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n\nprint(vova_wall())", "\n\ndef main():\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    # Read in the number of parts in the wall\n    num_parts = int(input())\n\n    # Read in the initial height of the wall\n    heights = [int(x) for x in input().split()]\n\n    # Check if the wall is already complete\n    if len(set(heights)) == 1:\n        print(\"YES\")\n        return\n\n    # Find the maximum height of the wall\n    max_height = max(heights)\n\n    # Check if the wall can be completed\n    if 2 * len(set(heights)) - 1 > max_height:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int,input().split(' ')))\n\n    # check if it is possible\n    if len(set(a)) == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    a.sort()\n    if a[0] == a[-1]-1 and a[-1] - a[-2] == 1:\n        print(\"YES\")\n        return\n\n    # check if it is possible\n    if a[0] == a[-1]-2:\n        print(\"YES\")\n        return\n\n    # else\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ninput_str = input().split()\nn = int(input_str[0])\ninput_str = input().split()\na = list(map(int, input_str))\n\nfor i in range(n-1):\n    if a[i] != a[i+1]:\n        print(\"NO\")\n        quit()\nprint(\"YES\")", "\n\ndef solve(n, a):\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n        if a[i] - a[i - 1] == 1:\n            a[i] -= 1\n    return \"YES\"\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"]