["", "\nfrom collections import Counter\n\nn = int(input())\ntext = input().split()\n\ncounts = Counter(text)\n\nif len(counts) == 1:\n    print(n)\nelse:\n    print(n + 2)", "\n\n#-----Solution-----\n\nimport sys\n\nn = int(input())\nwords = input().split()\n\nif len(set(words)) == 1:\n    print(3 + n - 1)\n    sys.exit(0)\n\nl = 0\n\nfor i in range(n):\n    for j in range(i, n):\n        if words[i:j+1] == words[0:j-i+1]:\n            l = max(l, len(words[0:j-i+1]) + 2)\n\nprint(l + n - l + 1)", "\n\ndef main():\n    n = int(input())\n    words = input().split(' ')\n    if n == 1:\n        print(len(words[0]))\n    else:\n        minLen = len(words[0])\n        for i in range(0, n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    for k in range(0, n):\n                        if k == i:\n                            count = 2\n                            for l in range(i+1, n):\n                                if l == j:\n                                    count += 1\n                                    break\n                                elif words[l] == words[i]:\n                                    count += 1\n                                else:\n                                    break\n                            minLen = min(minLen, len(words[i])*count + len(words[i]) + len(words[k+count]) + len(''.join(words[0:k])) + len(''.join(words[k+count+1:n])))\n                            break\n                        if words[k] != words[i]:\n                            minLen = min(minLen, len(words[i])*2 + len(words[k]) + len(''.join(words[0:k])) + len(''.join(words[k+1:n])))\n        print(minLen)\n\nmain()", "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    abbreviation(n, words)\n\ndef abbreviation(n, words):\n    # Find words that repeat\n    repeats = [0] * n\n    for i in range(1, n):\n        if words[i] == words[i-1]: repeats[i] = 1\n\n    # Find max run of repeats\n    max_run = 0\n    run = 0\n    for i in range(1, n):\n        if repeats[i] == 1: run += 1\n        else:\n            if run > max_run: max_run = run\n            run = 0\n\n    # Find the number of words that don't repeat\n    single_words = 0\n    for i in range(n):\n        if repeats[i] == 0: single_words += 1\n\n    # Find the minimum length\n    min_length = n\n    if max_run >= 2:\n        length = n - max_run + 1 + 2\n        if length < min_length: min_length = length\n\n    if max_run >= 3:\n        length = n - max_run + 1 + 3\n        if length < min_length: min_length = length\n\n    if single_words > 0:\n        length = n - single_words + 1\n        if length < min_length: min_length = length\n\n    print(min_length)\n\nmain()", "\n\ndef get_text_length(text):\n    text_length = 0\n    for word in text:\n        text_length += len(word)\n    return text_length\n\ndef get_text_without_duplicates(text):\n    text_without_duplicates = []\n    for word in text:\n        if word not in text_without_duplicates:\n            text_without_duplicates.append(word)\n    return text_without_duplicates\n\ndef get_text_with_abbreviation(text, abbreviation):\n    text_with_abbreviation = []\n    for word in text:\n        if word in abbreviation:\n            text_with_abbreviation.append(word[0])\n        else:\n            text_with_abbreviation.append(word)\n    return text_with_abbreviation\n\ndef get_number_of_duplicates(text, abbreviation):\n    number_of_duplicates = 0\n    for word in text:\n        if word in abbreviation:\n            number_of_duplicates += 1\n    return number_of_duplicates\n\ndef get_number_of_abbreviations(text, abbreviation):\n    number_of_duplicates = get_number_of_duplicates(text, abbreviation)\n    return number_of_duplicates - 1 if number_of_duplicates > 1 else number_of_duplicates\n\ndef get_maximum_length_of_text_after_abbreviation(text, abbreviation):\n    text_with_abbreviation = get_text_with_abbreviation(text, abbreviation)\n    number_of_abbreviations = get_number_of_abbreviations(text, abbreviation)\n    return get_text_length(text_with_abbreviation) - number_of_abbreviations\n\ndef get_maximum_length_of_text_after_abbreviations(text):\n    text_without_duplicates = get_text_without_duplicates(text)\n    combinations = combinations_with_replacement(text_without_duplicates, 2)\n    maximum_length = get_text_length(text)\n    for combination in combinations:\n        maximum_length = min(maximum_length, get_maximum_length_of_text_after_abbreviation(text, combination))\n    return maximum_length\n\ndef main():\n    n = int(input())\n    text = input().split()\n    print(get_maximum_length_of_text_after_abbreviations(text))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    ans = 0\n    for i in range(n):\n        ans += len(words[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                ans -= len(words[i])\n                break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    total_len = len(s)\n    max_len = 1\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word, count in word_count.items():\n        if count > 1:\n            max_len = max(max_len, len(word))\n    print(total_len - (count - 1) * (max_len - 2))\n\nif __name__ == '__main__':\n    main()"]