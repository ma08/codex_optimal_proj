["", "\n\n#-----Solution-----\n\nprint(min(len(input()),len(input())) + abs(len(input()) - len(input())))", "\n\ns = input()\nt = input()\n\nmin_len = min(len(s), len(t))\n\nfor i in range(min_len):\n    if s[i] != t[i]:\n        break\n\nprint(len(s) + len(t) - 2*i)", "\n\n\ndef main():\n    s = input()\n    t = input()\n\n    print(len(s) + len(t) - 2 * common_prefix(s, t))\n\n\ndef common_prefix(s, t):\n    for i in range(min(len(s), len(t))):\n        if s[i] != t[i]:\n            return i\n    return min(len(s), len(t))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main(s,t):\n\n    while s and t:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        elif s[0] > t[0]:\n            s = s[1:]\n        else:\n            t = t[1:]\n\n    return len(s) + len(t)\n\nprint(main(input(), input()))", "\n\ns = input()\nt = input()\n\nn = len(s)\nm = len(t)\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if s[i - 1] == t[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(n + m - 2 * dp[-1][-1])", "\n\ns = input()\nt = input()\n# t_len = len(t)\n# s_len = len(s)\n\n# t_set = set(t)\n# s_set = set(s)\n\n# t_set.difference_update(s_set)\n# s_set.difference_update(t_set)\n\n# print(len(t_set) + len(s_set))\n\n# def common_substring(s, t):\n#     s_len = len(s) + 1\n#     t_len = len(t) + 1\n#     dp = [[0 for _ in range(t_len)] for _ in range(s_len)]\n\n#     for i in range(1, s_len):\n#         for j in range(1, t_len):\n#             if s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n#     return dp[-1][-1]\n\n# min_len = min(len(s), len(t))\n# max_len = max(len(s), len(t))\n\n# if min_len == 0:\n#     print(max_len)\n# else:\n#     print(max_len - common_substring(s, t))\n\n# def solve(s, t):\n#     n = len(s)\n#     m = len(t)\n#     dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n#     for i in range(n+1):\n#         for j in range(m+1):\n#             if i == 0 or j == 0:\n#                 dp[i][j] = max(i, j)\n#             elif s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1]\n#             else:\n#                 dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n#     return dp[-1][-1]\n\n# print(solve(s, t))\n\n# from collections import Counter\n\n# counter_s = Counter(s)\n# counter_t = Counter(t)\n\n# counter_s.subtract(counter_t)\n# ans = sum(abs(c) for c in counter_s.values())\n# print(ans)\n\nfrom collections import Counter\n\ncounter_s = Counter(s)\ncounter_t = Counter(t)\n\ncounter_s.subtract(counter_t)\nans = sum(abs(c) for c in counter_s.values())\nprint(ans)", "\nfrom collections import deque\n\ns = deque(raw_input())\nt = deque(raw_input())\n\nprint sum(map(len, [s, t])) - sum(map(len, [s & t, s ^ t]))"]