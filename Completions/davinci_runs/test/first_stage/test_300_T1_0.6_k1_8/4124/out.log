2022-04-16 19:37:56.775699 """
You are given two strings $s$ and $t$. In a single move, you can choose any of two strings and delete the first (that is, the leftmost) character. After a move, the length of the string decreases by $1$. You can't choose a string if it is empty.

For example:  by applying a move to the string "where", the result is the string "here",  by applying a move to the string "a", the result is an empty string "". 

You are required to make two given strings equal using the fewest number of moves. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the initial strings.

Write a program that finds the minimum number of moves to make two given strings $s$ and $t$ equal.


-----Input-----

The first line of the input contains $s$. In the second line of the input contains $t$. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and $2\cdot10^5$, inclusive.


-----Output-----

Output the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.


-----Examples-----
Input
test
west

Output
2

Input
codeforces
yes

Output
9

Input
test
yes

Output
7

Input
b
ab

Output
1



-----Note-----

In the first example, you should apply the move once to the first string and apply the move once to the second string. As a result, both strings will be equal to "est".

In the second example, the move should be applied to the string "codeforces" $8$ times. As a result, the string becomes "codeforces" $\to$ "es". The move should be applied to the string "yes" once. The result is the same string "yes" $\to$ "es".

In the third example, you can make the strings equal only by completely deleting them. That is, in the end, both strings will be empty.

In the fourth example, the first character of the second string should be deleted.
"""
2022-04-16 19:37:56.775707 --------------------------
2022-04-16 19:38:34.452666 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nprint(min(len(input()),len(input())) + abs(len(input()) - len(input())))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nfrom collections import deque\n\ns = deque(raw_input())\nt = deque(raw_input())\n\nprint sum(map(len, [s, t])) - sum(map(len, [s & t, s ^ t]))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\nn = len(s)\nm = len(t)\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if s[i - 1] == t[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(n + m - 2 * dp[-1][-1])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n# t_len = len(t)\n# s_len = len(s)\n\n# t_set = set(t)\n# s_set = set(s)\n\n# t_set.difference_update(s_set)\n# s_set.difference_update(t_set)\n\n# print(len(t_set) + len(s_set))\n\n# def common_substring(s, t):\n#     s_len = len(s) + 1\n#     t_len = len(t) + 1\n#     dp = [[0 for _ in range(t_len)] for _ in range(s_len)]\n\n#     for i in range(1, s_len):\n#         for j in range(1, t_len):\n#             if s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n#     return dp[-1][-1]\n\n# min_len = min(len(s), len(t))\n# max_len = max(len(s), len(t))\n\n# if min_len == 0:\n#     print(max_len)\n# else:\n#     print(max_len - common_substring(s, t))\n\n# def solve(s, t):\n#     n = len(s)\n#     m = len(t)\n#     dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n#     for i in range(n+1):\n#         for j in range(m+1):\n#             if i == 0 or j == 0:\n#                 dp[i][j] = max(i, j)\n#             elif s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1]\n#             else:\n#                 dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n#     return dp[-1][-1]\n\n# print(solve(s, t))\n\n# from collections import Counter\n\n# counter_s = Counter(s)\n# counter_t = Counter(t)\n\n# counter_s.subtract(counter_t)\n# ans = sum(abs(c) for c in counter_s.values())\n# print(ans)\n\nfrom collections import Counter\n\ncounter_s = Counter(s)\ncounter_t = Counter(t)\n\ncounter_s.subtract(counter_t)\nans = sum(abs(c) for c in counter_s.values())\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\nmin_len = min(len(s), len(t))\n\nfor i in range(min_len):\n    if s[i] != t[i]:\n        break\n\nprint(len(s) + len(t) - 2*i)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main(s,t):\n\n    while s and t:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        elif s[0] > t[0]:\n            s = s[1:]\n        else:\n            t = t[1:]\n\n    return len(s) + len(t)\n\nprint(main(input(), input()))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    s = input()\n    t = input()\n\n    print(len(s) + len(t) - 2 * common_prefix(s, t))\n\n\ndef common_prefix(s, t):\n    for i in range(min(len(s), len(t))):\n        if s[i] != t[i]:\n            return i\n    return min(len(s), len(t))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1650137876,
  "id": "cmpl-4xiWyBnOE8qkPJfjNwO0HcOLd2WaG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:38:34.452939 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nprint(min(len(input()),len(input())) + abs(len(input()) - len(input())))"
}
2022-04-16 19:38:34.452971 REASON stop
2022-04-16 19:38:34.502735 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nfrom collections import deque\n\ns = deque(raw_input())\nt = deque(raw_input())\n\nprint sum(map(len, [s, t])) - sum(map(len, [s & t, s ^ t]))"
}
2022-04-16 19:38:34.502918 REASON stop
2022-04-16 19:38:34.503433 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\nn = len(s)\nm = len(t)\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if s[i - 1] == t[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(n + m - 2 * dp[-1][-1])"
}
2022-04-16 19:38:34.503506 REASON stop
2022-04-16 19:38:34.527072 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n# t_len = len(t)\n# s_len = len(s)\n\n# t_set = set(t)\n# s_set = set(s)\n\n# t_set.difference_update(s_set)\n# s_set.difference_update(t_set)\n\n# print(len(t_set) + len(s_set))\n\n# def common_substring(s, t):\n#     s_len = len(s) + 1\n#     t_len = len(t) + 1\n#     dp = [[0 for _ in range(t_len)] for _ in range(s_len)]\n\n#     for i in range(1, s_len):\n#         for j in range(1, t_len):\n#             if s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n#     return dp[-1][-1]\n\n# min_len = min(len(s), len(t))\n# max_len = max(len(s), len(t))\n\n# if min_len == 0:\n#     print(max_len)\n# else:\n#     print(max_len - common_substring(s, t))\n\n# def solve(s, t):\n#     n = len(s)\n#     m = len(t)\n#     dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n#     for i in range(n+1):\n#         for j in range(m+1):\n#             if i == 0 or j == 0:\n#                 dp[i][j] = max(i, j)\n#             elif s[i-1] == t[j-1]:\n#                 dp[i][j] = dp[i-1][j-1]\n#             else:\n#                 dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n#     return dp[-1][-1]\n\n# print(solve(s, t))\n\n# from collections import Counter\n\n# counter_s = Counter(s)\n# counter_t = Counter(t)\n\n# counter_s.subtract(counter_t)\n# ans = sum(abs(c) for c in counter_s.values())\n# print(ans)\n\nfrom collections import Counter\n\ncounter_s = Counter(s)\ncounter_t = Counter(t)\n\ncounter_s.subtract(counter_t)\nans = sum(abs(c) for c in counter_s.values())\nprint(ans)"
}
2022-04-16 19:38:34.527209 REASON stop
2022-04-16 19:38:34.539142 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\nmin_len = min(len(s), len(t))\n\nfor i in range(min_len):\n    if s[i] != t[i]:\n        break\n\nprint(len(s) + len(t) - 2*i)"
}
2022-04-16 19:38:34.539251 REASON stop
2022-04-16 19:38:34.540188 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main(s,t):\n\n    while s and t:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        elif s[0] > t[0]:\n            s = s[1:]\n        else:\n            t = t[1:]\n\n    return len(s) + len(t)\n\nprint(main(input(), input()))"
}
2022-04-16 19:38:34.540286 REASON stop
2022-04-16 19:38:34.541255 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    s = input()\n    t = input()\n\n    print(len(s) + len(t) - 2 * common_prefix(s, t))\n\n\ndef common_prefix(s, t):\n    for i in range(min(len(s), len(t))):\n        if s[i] != t[i]:\n            return i\n    return min(len(s), len(t))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:38:34.541402 REASON stop
2022-04-16 19:38:34.541869 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": ""
}
2022-04-16 19:38:34.541941 REASON stop
