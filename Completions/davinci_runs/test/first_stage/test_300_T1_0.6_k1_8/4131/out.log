2022-04-16 19:41:03.344533 """
In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.
City i is established in year Y_i and belongs to Prefecture P_i.
You can assume that there are no multiple cities that are established in the same year.
It is decided to allocate a 12-digit ID number to each city.
If City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.
Here, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.
Find the ID numbers for all the cities.
Note that there can be a prefecture with no cities.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - 1 \leq M \leq 10^5
 - 1 \leq P_i \leq N
 - 1 \leq Y_i \leq 10^9
 - Y_i are all different.
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M
P_1 Y_1
:
P_M Y_M

-----Output-----
Print the ID numbers for all the cities, in ascending order of indices (City 1, City 2, ...).

-----Sample Input-----
2 3
1 32
2 63
1 12

-----Sample Output-----
000001000002
000002000001
000001000001

 - As City 1 is the second established city among the cities that belong to Prefecture 1, its ID number is 000001000002.
 - As City 2 is the first established city among the cities that belong to Prefecture 2, its ID number is 000002000001.
 - As City 3 is the first established city among the cities that belong to Prefecture 1, its ID number is 000001000001.
"""
2022-04-16 19:41:03.344547 --------------------------
2022-04-16 19:41:21.878398 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ncity_dict = {}\nfor i in range(m):\n    prefecture, year = map(int, sys.stdin.readline().split())\n    if prefecture in city_dict:\n        city_dict[prefecture].append(year)\n    else:\n        city_dict[prefecture] = [year]\n\nfor i in range(1, n+1):\n    if i in city_dict:\n        city_dict[i].sort()\n        for j in range(len(city_dict[i])):\n            print(\"{:0>6}{:0>6}\".format(i, j+1))\n    else:\n        continue"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # read data\n    N, M = map(int,sys.stdin.readline().split())\n    P = []\n    Y = []\n    for i in range(M):\n        p, y = map(int,sys.stdin.readline().split())\n        P.append(p)\n        Y.append(y)\n    # sort\n    idx = [i[0] for i in sorted(enumerate(Y), key=lambda x:x[1])]\n    Y = [Y[i] for i in idx]\n    P = [P[i] for i in idx]\n    # print\n    for i in range(M):\n        p = \"{0:06d}\".format(P[i])\n        y = \"{0:06d}\".format(i+1)\n        print(p+y)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    N, M = map(int, input().split())\n    P = [[] for i in range(N+1)]\n    for i in range(M):\n        p, y = map(int, input().split())\n        P[p].append(y)\n    for i in range(1, N+1):\n        P[i].sort()\n    for i in range(M):\n        p, y = map(int, input().split())\n        print(\"%06d%06d\" % (p, P[p].index(y)+1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    city = []\n    for i in range(M):\n        city.append(list(map(int, input().split())))\n    city.sort(key=lambda x:x[1])\n    prefecture = [[] for _ in range(N+1)]\n    for i in range(M):\n        prefecture[city[i][0]].append(i)\n    for i in range(M):\n        prefecture[city[i][0]][-1] = len(prefecture[city[i][0]])\n    for i in range(M):\n        print(\"{:0>6}{:0>6}\".format(city[i][0], prefecture[city[i][0]].pop()))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nread = sys.stdin.readline\n\ndef main():\n    n, m = map(int, read().split())\n    p = [0]*m\n    y = [0]*m\n    for i in range(m):\n        p[i], y[i] = map(int, read().split())\n    # print(n, m)\n    # print(p)\n    # print(y)\n    num = [0]*m\n    for i in range(m):\n        num[i] = str(p[i]).zfill(6) + str(y[i]).zfill(6)\n    print(num)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef city_ids(n, m, p_y):\n    city_ids = [0] * m\n    p_y = sorted(p_y, key=lambda x:x[1])\n    for i in range(m):\n        city_ids[i] = '{:06d}{:06d}'.format(p_y[i][0], i+1)\n    return city_ids\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    p_y = [list(map(int, input().split())) for _ in range(m)]\n    city_ids = city_ids(n, m, p_y)\n    for i in city_ids:\n        print(i)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\nN, M = [int(x) for x in input().split()]\n\ndef get_code(prefecture, year):\n    code = \"{:06d}\".format(prefecture) + \"{:06d}\".format(year)\n    return code\n\nprefecture_to_year_to_code = defaultdict(lambda: defaultdict(int))\nfor _ in range(M):\n    prefecture, year = [int(x) for x in input().split()]\n    year_to_code = prefecture_to_year_to_code[prefecture]\n    year_to_code[year] += 1\n    code = get_code(prefecture, year_to_code[year])\n    print(code)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nclass City:\n    def __init__(self, prefecture, year):\n        self.prefecture = prefecture\n        self.year = year\n        self.id = None\n\n    def __str__(self):\n        return self.id\n\ndef set_id(city):\n    prefecture = str(city.prefecture)\n    order = str(city.order)\n    while len(prefecture) < 6:\n        prefecture = \"0\" + prefecture\n    while len(order) < 6:\n        order = \"0\" + order\n    city.id = prefecture + order\n\ndef main():\n    N, M = (int(i) for i in input().split())\n    cities = []\n    for _ in range(M):\n        prefecture, year = (int(i) for i in input().split())\n        cities.append(City(prefecture, year))\n    cities.sort(key=lambda c: c.year)\n    for i in range(M):\n        cities[i].order = i + 1\n    for city in cities:\n        set_id(city)\n        print(city)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650138063,
  "id": "cmpl-4xiZzdohNQiJNDXkQ0LEORPUhALs7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:41:21.878671 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ncity_dict = {}\nfor i in range(m):\n    prefecture, year = map(int, sys.stdin.readline().split())\n    if prefecture in city_dict:\n        city_dict[prefecture].append(year)\n    else:\n        city_dict[prefecture] = [year]\n\nfor i in range(1, n+1):\n    if i in city_dict:\n        city_dict[i].sort()\n        for j in range(len(city_dict[i])):\n            print(\"{:0>6}{:0>6}\".format(i, j+1))\n    else:\n        continue"
}
2022-04-16 19:41:21.878706 REASON stop
2022-04-16 19:41:22.491113 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # read data\n    N, M = map(int,sys.stdin.readline().split())\n    P = []\n    Y = []\n    for i in range(M):\n        p, y = map(int,sys.stdin.readline().split())\n        P.append(p)\n        Y.append(y)\n    # sort\n    idx = [i[0] for i in sorted(enumerate(Y), key=lambda x:x[1])]\n    Y = [Y[i] for i in idx]\n    P = [P[i] for i in idx]\n    # print\n    for i in range(M):\n        p = \"{0:06d}\".format(P[i])\n        y = \"{0:06d}\".format(i+1)\n        print(p+y)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:41:22.491318 REASON stop
2022-04-16 19:41:22.732081 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    N, M = map(int, input().split())\n    P = [[] for i in range(N+1)]\n    for i in range(M):\n        p, y = map(int, input().split())\n        P[p].append(y)\n    for i in range(1, N+1):\n        P[i].sort()\n    for i in range(M):\n        p, y = map(int, input().split())\n        print(\"%06d%06d\" % (p, P[p].index(y)+1))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:41:22.732432 REASON stop
2022-04-16 19:41:23.112158 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    city = []\n    for i in range(M):\n        city.append(list(map(int, input().split())))\n    city.sort(key=lambda x:x[1])\n    prefecture = [[] for _ in range(N+1)]\n    for i in range(M):\n        prefecture[city[i][0]].append(i)\n    for i in range(M):\n        prefecture[city[i][0]][-1] = len(prefecture[city[i][0]])\n    for i in range(M):\n        print(\"{:0>6}{:0>6}\".format(city[i][0], prefecture[city[i][0]].pop()))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:41:23.112410 REASON stop
2022-04-16 19:41:23.326011 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nread = sys.stdin.readline\n\ndef main():\n    n, m = map(int, read().split())\n    p = [0]*m\n    y = [0]*m\n    for i in range(m):\n        p[i], y[i] = map(int, read().split())\n    # print(n, m)\n    # print(p)\n    # print(y)\n    num = [0]*m\n    for i in range(m):\n        num[i] = str(p[i]).zfill(6) + str(y[i]).zfill(6)\n    print(num)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:41:23.326141 REASON stop
2022-04-16 19:41:23.687940 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef city_ids(n, m, p_y):\n    city_ids = [0] * m\n    p_y = sorted(p_y, key=lambda x:x[1])\n    for i in range(m):\n        city_ids[i] = '{:06d}{:06d}'.format(p_y[i][0], i+1)\n    return city_ids\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    p_y = [list(map(int, input().split())) for _ in range(m)]\n    city_ids = city_ids(n, m, p_y)\n    for i in city_ids:\n        print(i)"
}
2022-04-16 19:41:23.688056 REASON stop
2022-04-16 19:41:24.046600 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom collections import defaultdict\n\nN, M = [int(x) for x in input().split()]\n\ndef get_code(prefecture, year):\n    code = \"{:06d}\".format(prefecture) + \"{:06d}\".format(year)\n    return code\n\nprefecture_to_year_to_code = defaultdict(lambda: defaultdict(int))\nfor _ in range(M):\n    prefecture, year = [int(x) for x in input().split()]\n    year_to_code = prefecture_to_year_to_code[prefecture]\n    year_to_code[year] += 1\n    code = get_code(prefecture, year_to_code[year])\n    print(code)"
}
2022-04-16 19:41:24.046719 REASON stop
2022-04-16 19:41:24.406756 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nclass City:\n    def __init__(self, prefecture, year):\n        self.prefecture = prefecture\n        self.year = year\n        self.id = None\n\n    def __str__(self):\n        return self.id\n\ndef set_id(city):\n    prefecture = str(city.prefecture)\n    order = str(city.order)\n    while len(prefecture) < 6:\n        prefecture = \"0\" + prefecture\n    while len(order) < 6:\n        order = \"0\" + order\n    city.id = prefecture + order\n\ndef main():\n    N, M = (int(i) for i in input().split())\n    cities = []\n    for _ in range(M):\n        prefecture, year = (int(i) for i in input().split())\n        cities.append(City(prefecture, year))\n    cities.sort(key=lambda c: c.year)\n    for i in range(M):\n        cities[i].order = i + 1\n    for city in cities:\n        set_id(city)\n        print(city)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:41:24.406891 REASON stop
