["", "\n\nn = int(input())\na = [int(i) for i in input().split()]\n\n# \u043f\u043e\u0438\u0441\u043a \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441 \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0432\u0435\u0441\u043e\u043c\n# \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043e\u043a\u0441\u0435\u0440\u0430\nleft_neighbors = [None for i in range(n)]\nright_neighbors = [None for i in range(n)]\n\nfor i in range(n):\n  j = i - 1\n  while j >= 0:\n    if a[j] < a[i]:\n      left_neighbors[i] = j\n      break\n    j -= 1\n  j = i + 1\n  while j < n:\n    if a[j] < a[i]:\n      right_neighbors[i] = j\n      break\n    j += 1\n\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0432\u0435\u0441 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043e\u043a\u0441\u0435\u0440\u0430\nmax_weight = [a[i] + 1 for i in range(n)]\nfor i in range(n):\n  if left_neighbors[i] is not None:\n    max_weight[i] = min(max_weight[i], a[left_neighbors[i]] + 1)\n  if right_neighbors[i] is not None:\n    max_weight[i] = min(max_weight[i], a[right_neighbors[i]] + 1)\n\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0432\u0435\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0431\u043e\u043a\u0441\u0435\u0440\u043e\u0432\nmax_weight_all = min(max_weight)\n\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u043a\u0441\u0435\u0440\u043e\u0432, \u0432\u0435\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0433\u043e\nmax_count = 0\nfor i in range(n):\n  if a[i] < max_weight_all:\n    max_count += 1\n\n# \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0435\u0441 \u0432\u0441\u0435\u0445 \u0431\u043e\u043a\u0441\u0435\u0440\u043e\u0432 \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u043a\u0441\u0435\u0440\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0440\u0430\u0432\u043d\u043e\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0431\u043e\u043a\u0441\u0435\u0440\u043e\u0432, \u0432\u0435\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0433\u043e,\n# \u043f\u043b\u044e\u0441 \u043e\u0434\u0438\u043d \u0431\u043e\u043a\u0441\u0435\u0440 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u043c \u0432\u0435\u0441\u043e\u043c\nprint(max_count + 1)", "\n\nn = int(input())\nweights = list(map(int, input().split()))\n\nweights.sort()\n\nunique_weights = [weights[0]]\nfor weight in weights:\n    if weight != unique_weights[-1]:\n        unique_weights.append(weight)\n\nprint(len(unique_weights))", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    current_number = arr[0]\n    current_number_count = 1\n    max_count = 0\n\n    for i in range(1, n):\n        if arr[i] == current_number:\n            current_number_count += 1\n        else:\n            if current_number_count > max_count:\n                max_count = current_number_count\n            current_number = arr[i]\n            current_number_count = 1\n\n    if current_number_count > max_count:\n        max_count = current_number_count\n\n    print(n - max_count)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\ncnt = 1\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        cnt += 1\n\nprint(cnt)", "\n\ndef solve(n, arr):\n    if n == 1:\n        return 1\n    else:\n        count = 1\n        for i in range(n-1):\n            if arr[i] != arr[i+1]:\n                count += 1\n        return count\n\ndef main():\n    n = int(input())\n    arr = [int(i) for i in input().strip().split()]\n    print(solve(n, arr))\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(n, a):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] + 1 != a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "\n\nfrom collections import deque\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline())\n    a = deque(map(int, stdin.readline().split()))\n\n    a.sort()\n\n    max_len = 1\n    prev = a.popleft()\n    while a:\n        curr = a.popleft()\n        if curr - prev > 1:\n            max_len += 1\n        else:\n            max_len = 1\n        prev = curr\n\n    print(max_len)\n\n\nif __name__ == '__main__':\n    main()"]