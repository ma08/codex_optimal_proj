["\n\nN = int(input())\ndoublets = [False] * 3\n\nfor _ in range(N):\n    d1, d2 = map(int, input().split())\n    if d1 == d2:\n        doublets.insert(0, True)\n    else:\n        doublets.insert(0, False)\n    if all(doublets):\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")", "\n\nfrom collections import deque\n\ndef dice_rolling(n):\n    dice_rolls = deque()\n    for i in range(n):\n        dice_rolls.append(input().split(\" \"))\n    doubles = 0\n    for roll in dice_rolls:\n        if roll[0] == roll[1]:\n            doubles += 1\n            if doubles == 3:\n                return \"Yes\"\n        else:\n            doubles = 0\n    return \"No\"\n\nprint(dice_rolling(int(input())))", "\n\nN = int(input())\n\nfor i in range(N):\n    dice = list(map(int, input().split()))\n    if dice[0] == dice[1]:\n        break\nelse:\n    print(\"No\")\n    exit()\n\nfor i in range(i+1, N):\n    dice = list(map(int, input().split()))\n    if dice[0] == dice[1]:\n        for i in range(i+1, N):\n            dice = list(map(int, input().split()))\n            if dice[0] == dice[1]:\n                print(\"Yes\")\n                exit()\n        print(\"No\")\n        exit()\n\nprint(\"No\")", "\n\nimport sys\n\ndef main():\n    num_rolls = int(input())\n    doublets_in_a_row = 0\n    for i in range(num_rolls):\n        dice_roll = input().split()\n        if dice_roll[0] == dice_roll[1]:\n            doublets_in_a_row += 1\n            if doublets_in_a_row == 3:\n                print('Yes')\n                sys.exit()\n        else:\n            doublets_in_a_row = 0\n    print('No')\n\nif __name__ == '__main__':\n    main()", "\n\nfrom collections import deque\n\ndef check_doublets(dice_rolls):\n    \"\"\"\n    Returns True if doublets occurred at least three times in a row\n    \"\"\"\n    # Create a double-ended queue to keep track of doublets\n    # Use a deque so we can easily pop values off the front\n    doublets = deque()\n\n    # Iterate through each dice roll\n    for i in range(0, len(dice_rolls)):\n        # Check if the current roll is a doublet\n        if dice_rolls[i][0] == dice_rolls[i][1]:\n            doublets.append(i)\n        else:\n            # If we get a non-doublet, reset the doublets queue\n            doublets.clear()\n\n        # If we have three consecutive doublets, return True\n        if len(doublets) == 3 and i - doublets[0] == 2:\n            return True\n\n    # If we get through the whole list without finding 3 consecutive doublets, return False\n    return False\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Read the number of rolls\n    num_rolls = int(input())\n\n    # Read the rolls\n    dice_rolls = []\n    for _ in range(0, num_rolls):\n        dice_roll = [int(x) for x in input().split()]\n        dice_rolls.append(dice_roll)\n\n    # Check if doublets occurred at least three times in a row\n    if check_doublets(dice_rolls):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\n\nd_list = []\n\nfor i in range(n):\n    d_list.append([int(x) for x in input().split()])\n\nflag = False\n\nfor i in range(n-2):\n    if(d_list[i][0]==d_list[i][1] and d_list[i+1][0]==d_list[i+1][1] and d_list[i+2][0]==d_list[i+2][1]):\n        flag = True\n        break\n\nif(flag):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\nN = int(input())\nstat = [0]*7\nfor i in range(N):\n    a, b = map(int, input().split())\n    if a == b:\n        stat[a] += 1\nif max(stat) >= 3:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\ndef triplet_dice(dice_rolls):\n    \"\"\"\n    Given a list of dice rolls, check if triplets occurred at least three times in a row.\n    \"\"\"\n    # go through dice_rolls and check if any triplets are in a row\n    for idx in range(len(dice_rolls) - 2):\n        if dice_rolls[idx][0] == dice_rolls[idx][1] and dice_rolls[idx + 1][0] == dice_rolls[idx + 1][1] and dice_rolls[idx + 2][0] == dice_rolls[idx + 2][1]:\n            return True\n    # if no triplets are found, return false\n    return False\n\n# get number of dice rolls\nnum_rolls = int(input())\n# get all dice rolls\ndice_rolls = []\nfor _ in range(num_rolls):\n    dice_roll = [int(i) for i in input().split()]\n    dice_rolls.append(dice_roll)\n# check if triplets occurred at least three times in a row\nif triplet_dice(dice_rolls):\n    print('Yes')\nelse:\n    print('No')"]