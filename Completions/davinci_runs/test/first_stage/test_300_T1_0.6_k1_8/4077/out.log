2022-04-16 19:19:02.568771 """
You are given an integer sequence $a_1, a_2, \dots, a_n$.

Find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.

The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.

For example, if $a=[4, 2, 7, 5]$ then its median is $4$ since after sorting the sequence, it will look like $[2, 4, 5, 7]$ and the left of two middle elements is equal to $4$. The median of $[7, 1, 2, 9, 6]$ equals $6$ since after sorting, the value $6$ will be in the middle of the sequence.

Write a program to find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.


-----Input-----

The first line contains integers $n$ and $m$ ($1 \le n,m \le 2\cdot10^5$) â€” the length of the given sequence and the required value of the median.

The second line contains an integer sequence $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2\cdot10^5$).


-----Output-----

Print the required number.


-----Examples-----
Input
5 4
1 4 5 60 4

Output
8

Input
3 1
1 1 1

Output
6

Input
15 2
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3

Output
97



-----Note-----

In the first example, the suitable pairs of indices are: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 2)$, $(2, 3)$, $(2, 5)$, $(4, 5)$ and $(5, 5)$.
"""
2022-04-16 19:19:02.568792 --------------------------
2022-04-16 19:19:22.710121 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    answer = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] <= m and arr[j] >= m:\n                answer += 1\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        if a[i] == m:\n            cnt += 1\n        else:\n            break\n\n    if cnt == 0:\n        print(0)\n        return 0\n\n    j = i + cnt - 1\n\n    for i in range(n - cnt):\n        if a[i] == m:\n            cnt += 1\n        else:\n            break\n\n    for i in range(n):\n        if a[i] == m:\n            cnt += n - j\n        else:\n            break\n\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nfreq = [0] * (max(a) + 1)\nfor i in a:\n    freq[i] += 1\n\n# Prefix sum\nfor i in range(1, max(a) + 1):\n    freq[i] += freq[i - 1]\n\n# print(freq)\n\n# for i in range(n):\n#     a[i] = freq[a[i] - 1] + 1\n\n# print(a)\n\ncount = 0\nfor i in range(n):\n    if a[i] == m:\n        count += 1\n        # print(a[i], a[i])\n    elif a[i] < m:\n        continue\n    else:\n        # print(a[i], m)\n        count += freq[a[i] - 1] - freq[m - 1] + 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ndef median(a, l, r):\n    if (r - l + 1) % 2 == 0:\n        return (a[l + (r - l) // 2] + a[l + (r - l) // 2 - 1]) // 2\n    else:\n        return a[l + (r - l) // 2]\n\ndef count_occurrences(arr, x):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count\n\nfor i in range(n):\n    a[i] = median(a, 0, i)\n\ncount = 0\nfor i in range(n):\n    if a[i] == m:\n        count += (count_occurrences(a, m) - 1)\n    else:\n        count += count_occurrences(a, m)\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\ncount = 0\n\n# Loop through the list\nfor i in range(n):\n    # If the value is larger than the median, break out of the loop\n    if a[i] >= m:\n        break\n    # If the value is less than the median, count the number of elements larger than the median\n    else:\n        count += n - i - 1\n\n# Add the number of elements equal to the median\ncount += a.count(m)\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main(file):\n    n, m = map(int, file.readline().strip().split())\n    arr = list(map(int, file.readline().strip().split()))\n    arr.sort()\n    left = None\n    right = None\n    count = 0\n    while left != (n - 1) and right != (n - 1):\n        if left == None:\n            left = 0\n        elif arr[left] < m:\n            left += 1\n        if right == None:\n            right = n - 1\n        elif arr[right] > m:\n            right -= 1\n        if arr[left] == m and arr[right] == m:\n            count += (right - left + 1) * (right - left) / 2\n            left += 1\n        elif arr[left] == m and arr[right] != m:\n            left += 1\n        elif arr[left] != m and arr[right] == m:\n            right -= 1\n    print(int(count))\n\nif __name__ == \"__main__\":\n    with open('inputs/MEDIAN.txt') as f:\n        main(f)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())"
    }
  ],
  "created": 1650136742,
  "id": "cmpl-4xiEg3MBFfTHwJFE4TlxxhPyMsfX5",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:19:22.710406 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    answer = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] <= m and arr[j] >= m:\n                answer += 1\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:19:22.710440 REASON stop
2022-04-16 19:19:22.731554 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        if a[i] == m:\n            cnt += 1\n        else:\n            break\n\n    if cnt == 0:\n        print(0)\n        return 0\n\n    j = i + cnt - 1\n\n    for i in range(n - cnt):\n        if a[i] == m:\n            cnt += 1\n        else:\n            break\n\n    for i in range(n):\n        if a[i] == m:\n            cnt += n - j\n        else:\n            break\n\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:19:22.731748 REASON stop
2022-04-16 19:19:22.732438 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nfreq = [0] * (max(a) + 1)\nfor i in a:\n    freq[i] += 1\n\n# Prefix sum\nfor i in range(1, max(a) + 1):\n    freq[i] += freq[i - 1]\n\n# print(freq)\n\n# for i in range(n):\n#     a[i] = freq[a[i] - 1] + 1\n\n# print(a)\n\ncount = 0\nfor i in range(n):\n    if a[i] == m:\n        count += 1\n        # print(a[i], a[i])\n    elif a[i] < m:\n        continue\n    else:\n        # print(a[i], m)\n        count += freq[a[i] - 1] - freq[m - 1] + 1\n\nprint(count)"
}
2022-04-16 19:19:22.732519 REASON stop
2022-04-16 19:19:22.746384 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-16 19:19:22.746514 REASON stop
2022-04-16 19:19:22.747392 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ndef median(a, l, r):\n    if (r - l + 1) % 2 == 0:\n        return (a[l + (r - l) // 2] + a[l + (r - l) // 2 - 1]) // 2\n    else:\n        return a[l + (r - l) // 2]\n\ndef count_occurrences(arr, x):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count\n\nfor i in range(n):\n    a[i] = median(a, 0, i)\n\ncount = 0\nfor i in range(n):\n    if a[i] == m:\n        count += (count_occurrences(a, m) - 1)\n    else:\n        count += count_occurrences(a, m)\nprint(count)"
}
2022-04-16 19:19:22.747484 REASON stop
2022-04-16 19:19:22.767811 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\ncount = 0\n\n# Loop through the list\nfor i in range(n):\n    # If the value is larger than the median, break out of the loop\n    if a[i] >= m:\n        break\n    # If the value is less than the median, count the number of elements larger than the median\n    else:\n        count += n - i - 1\n\n# Add the number of elements equal to the median\ncount += a.count(m)\n\nprint(count)"
}
2022-04-16 19:19:22.767913 REASON stop
2022-04-16 19:19:22.768926 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main(file):\n    n, m = map(int, file.readline().strip().split())\n    arr = list(map(int, file.readline().strip().split()))\n    arr.sort()\n    left = None\n    right = None\n    count = 0\n    while left != (n - 1) and right != (n - 1):\n        if left == None:\n            left = 0\n        elif arr[left] < m:\n            left += 1\n        if right == None:\n            right = n - 1\n        elif arr[right] > m:\n            right -= 1\n        if arr[left] == m and arr[right] == m:\n            count += (right - left + 1) * (right - left) / 2\n            left += 1\n        elif arr[left] == m and arr[right] != m:\n            left += 1\n        elif arr[left] != m and arr[right] == m:\n            right -= 1\n    print(int(count))\n\nif __name__ == \"__main__\":\n    with open('inputs/MEDIAN.txt') as f:\n        main(f)"
}
2022-04-16 19:19:22.769000 REASON stop
2022-04-16 19:19:22.770239 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())"
}
2022-04-16 19:19:22.770319 REASON stop
