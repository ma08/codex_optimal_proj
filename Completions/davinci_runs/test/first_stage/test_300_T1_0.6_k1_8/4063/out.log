2022-04-16 19:11:29.568933 """
Takahashi made N problems for competitive programming.
The problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).
He is dividing the problems into two categories by choosing an integer K, as follows:
 - A problem with difficulty K or higher will be for ARCs.
 - A problem with difficulty lower than K will be for ABCs.
How many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?

-----Problem Statement-----
 - 2 \leq N \leq 10^5
 - N is an even number.
 - 1 \leq d_i \leq 10^5
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
d_1 d_2 ... d_N

-----Output-----
Print the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.

-----Sample Input-----
6
9 1 4 4 6 7

-----Sample Output-----
2

If we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.
Thus, the answer is 2.
"""
2022-04-16 19:11:29.568952 --------------------------
2022-04-16 19:11:55.017190 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\nN = int(input())\ndifficulties = list(map(int, input().split()))\n\n# Count the number of problems with difficulties of each integer\ncounter = Counter(difficulties)\n\n# Sort the difficulties\ndifficulties = list(set(difficulties))\ndifficulties.sort()\n\n# Count the number of problems with difficulties of each integer\ncounter = Counter(difficulties)\n\n# Get the number of problems for each difficulty\nproblem_nums = list(counter.values())\n\n# Get the number of combinations\nnum_combinations = 0\n\nfor i in range(len(problem_nums)):\n    # Every problem with difficulty i is for ARCs\n    if i == 0:\n        num_combinations += problem_nums[i] * (problem_nums[i] - 1) // 2\n    # Every problem with difficulty i is for ABCs\n    elif i == len(problem_nums) - 1:\n        num_combinations += problem_nums[i] * (problem_nums[i] - 1) // 2\n    # Every problem with difficulty i is for ARCs and every problem with difficulty i+1 is for ABCs\n    else:\n        num_combinations += problem_nums[i] * problem_nums[i+1]\n\nprint(num_combinations)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n    Problem Statement: https://atcoder.jp/contests/arc065/tasks/arc065_a\n\"\"\"\n\nimport sys\nimport collections\n\n\ndef solve():\n    n = int(input())\n    problems = list(map(int, input().split()))\n\n    counter = collections.Counter(problems)\n\n    result = 0\n    for k, v in counter.items():\n        if k > n // 2:\n            result += v\n    return result\n\n\ndef main():\n    print(solve())\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 0\n\n# a[i]\u3088\u308a\u5c0f\u3055\u3044\u6570\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n# \u5de6\u5074\u3001\u53f3\u5074\u3068\u3082\u306b\u6c42\u3081\u3066\u304a\u304f\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i] = sum(1 for x in a[:i] if x < a[i])\n\nfor i in range(n):\n    r[i] = sum(1 for x in a[i:] if x < a[i])\n\n# \u53f3\u5074\u306e\u5408\u8a08\u3068\u5de6\u5074\u306e\u5408\u8a08\u304c\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u6570\u3048\u4e0a\u3052\u308b\nfor i in range(n):\n    ans += l[i] == r[i]\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nimport sys\n\nn = int(input())\nd = list(map(int, sys.stdin.readline().split()))\n\n# The number of problems for ARCs and the number of problems for ABCs are the same when the number of problems with difficulty K is the same.\n# Therefore, we only need to count the number of problems with each difficulty.\n\n# Python's Counter class is useful for counting the number of elements in a list.\n# It returns a dictionary with the element as the key and the number of the element as the value.\ncounter = Counter(d)\n\n# The minimum difficulty that can be chosen is 1, and the maximum difficulty is 10^5.\n# Therefore, we choose the number of problems with difficulty i from 1 to 10^5, and check whether the number of problems is the same.\n# If the number is the same, we increase the number of choices by 1.\n\nans = 0\nfor i in range(1, 10 ** 5 + 1):\n    if counter[i] == counter[i + 1]:\n        ans += 1\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN = int(input())\nd_list = list(map(int, input().split()))\n\nd_list.sort(reverse=True)\n\nd_list = [0] + d_list\n\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-d_list[i]]\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-d_list[i]]\ndp = [[0 for _ in range(N+1)] for _ in range(N+1)]\n\nfor i in range(N+1):\n    dp[0][i] = 1\n\nfor i in range(1, N+1):\n    for j in range(N+1):\n        dp[i][j] = dp[i-1][j]\n        if j - d_list[i] >= 0:\n            dp[i][j] += dp[i-1][j-d_list[i]]\n\nans = 0\nfor i in range(1, N//2+1):\n    if dp[N//2][i] > 0:\n        ans += 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#Imports\nimport sys\n\n#Functions\ndef number_of_choices(diff_list):\n    \"\"\"\n    Given a list of problem difficulties, return the number of choices of K that make the number of problems for ARCs\n    and the number of problems for ABCs the same.\n    :param diff_list: list of int\n    :return: int\n    \"\"\"\n    #Get the number of problems\n    num_problems = len(diff_list)\n    #Sort the list\n    diff_list.sort()\n    #Set the initial value for the number of choices\n    num_choices = 0\n    #Loop through all possible values of K, keeping track of the number of problems for ARCs and ABCs\n    for K in range(1, diff_list[0]):\n        num_arcs = 0\n        num_abcs = 0\n        for i in range(num_problems):\n            if diff_list[i] >= K:\n                num_arcs += 1\n            else:\n                num_abcs += 1\n        #If the number of problems for ARCs and ABCs are the same, increase the number of choices for K\n        if num_arcs == num_abcs:\n            num_choices += 1\n    #Return the number of choices\n    return num_choices\n\n#Main Script\nif __name__ == \"__main__\":\n    #Read the number of problems\n    num_problems = int(sys.stdin.readline())\n    #Read the problem difficulties\n    diff_list = list(map(int, sys.stdin.readline().split()))\n    #Find the number of choices of K that make the number of problems for ARCs and the number of problems for ABCs the same\n    num_choices = number_of_choices(diff_list)\n    #Print the result\n    print(num_choices)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nd = list(map(int, input().split()))\n\nif N % 2 != 0:\n    print(0)\n    exit()\n\ncount_dic = {}\nfor diff in d:\n    if diff in count_dic:\n        count_dic[diff] += 1\n    else:\n        count_dic[diff] = 1\n\ncounts = list(count_dic.values())\ncounts.sort()\n\nif len(counts) == 1:\n    print(1)\n    exit()\n\nif len(counts) % 2 == 0:\n    if counts[int(len(counts) / 2)] == counts[int(len(counts) / 2) - 1]:\n        print(int(len(counts) / 2))\n        exit()\n\nprint(0)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(input())\n    d = list(map(int, input().split()))\n\n    # Calculate\n    d.sort()\n    mid = n // 2\n    if d[mid] == d[mid - 1]:\n        print(d[mid] - d[0])\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650136289,
  "id": "cmpl-4xi7NdjHSiD8LAozCpQtzgkYg5mA0",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:11:55.017587 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\nN = int(input())\ndifficulties = list(map(int, input().split()))\n\n# Count the number of problems with difficulties of each integer\ncounter = Counter(difficulties)\n\n# Sort the difficulties\ndifficulties = list(set(difficulties))\ndifficulties.sort()\n\n# Count the number of problems with difficulties of each integer\ncounter = Counter(difficulties)\n\n# Get the number of problems for each difficulty\nproblem_nums = list(counter.values())\n\n# Get the number of combinations\nnum_combinations = 0\n\nfor i in range(len(problem_nums)):\n    # Every problem with difficulty i is for ARCs\n    if i == 0:\n        num_combinations += problem_nums[i] * (problem_nums[i] - 1) // 2\n    # Every problem with difficulty i is for ABCs\n    elif i == len(problem_nums) - 1:\n        num_combinations += problem_nums[i] * (problem_nums[i] - 1) // 2\n    # Every problem with difficulty i is for ARCs and every problem with difficulty i+1 is for ABCs\n    else:\n        num_combinations += problem_nums[i] * problem_nums[i+1]\n\nprint(num_combinations)"
}
2022-04-16 19:11:55.017628 REASON stop
2022-04-16 19:11:55.234511 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n    Problem Statement: https://atcoder.jp/contests/arc065/tasks/arc065_a\n\"\"\"\n\nimport sys\nimport collections\n\n\ndef solve():\n    n = int(input())\n    problems = list(map(int, input().split()))\n\n    counter = collections.Counter(problems)\n\n    result = 0\n    for k, v in counter.items():\n        if k > n // 2:\n            result += v\n    return result\n\n\ndef main():\n    print(solve())\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:11:55.234714 REASON stop
2022-04-16 19:11:55.329492 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 0\n\n# a[i]\u3088\u308a\u5c0f\u3055\u3044\u6570\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n# \u5de6\u5074\u3001\u53f3\u5074\u3068\u3082\u306b\u6c42\u3081\u3066\u304a\u304f\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i] = sum(1 for x in a[:i] if x < a[i])\n\nfor i in range(n):\n    r[i] = sum(1 for x in a[i:] if x < a[i])\n\n# \u53f3\u5074\u306e\u5408\u8a08\u3068\u5de6\u5074\u306e\u5408\u8a08\u304c\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u6570\u3048\u4e0a\u3052\u308b\nfor i in range(n):\n    ans += l[i] == r[i]\n\nprint(ans)"
}
2022-04-16 19:11:55.329618 REASON stop
2022-04-16 19:11:55.357894 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nimport sys\n\nn = int(input())\nd = list(map(int, sys.stdin.readline().split()))\n\n# The number of problems for ARCs and the number of problems for ABCs are the same when the number of problems with difficulty K is the same.\n# Therefore, we only need to count the number of problems with each difficulty.\n\n# Python's Counter class is useful for counting the number of elements in a list.\n# It returns a dictionary with the element as the key and the number of the element as the value.\ncounter = Counter(d)\n\n# The minimum difficulty that can be chosen is 1, and the maximum difficulty is 10^5.\n# Therefore, we choose the number of problems with difficulty i from 1 to 10^5, and check whether the number of problems is the same.\n# If the number is the same, we increase the number of choices by 1.\n\nans = 0\nfor i in range(1, 10 ** 5 + 1):\n    if counter[i] == counter[i + 1]:\n        ans += 1\nprint(ans)"
}
2022-04-16 19:11:55.358018 REASON stop
2022-04-16 19:11:55.394375 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN = int(input())\nd_list = list(map(int, input().split()))\n\nd_list.sort(reverse=True)\n\nd_list = [0] + d_list\n\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-d_list[i]]\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-d_list[i]]\ndp = [[0 for _ in range(N+1)] for _ in range(N+1)]\n\nfor i in range(N+1):\n    dp[0][i] = 1\n\nfor i in range(1, N+1):\n    for j in range(N+1):\n        dp[i][j] = dp[i-1][j]\n        if j - d_list[i] >= 0:\n            dp[i][j] += dp[i-1][j-d_list[i]]\n\nans = 0\nfor i in range(1, N//2+1):\n    if dp[N//2][i] > 0:\n        ans += 1\n\nprint(ans)"
}
2022-04-16 19:11:55.394504 REASON stop
2022-04-16 19:11:55.434418 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#Imports\nimport sys\n\n#Functions\ndef number_of_choices(diff_list):\n    \"\"\"\n    Given a list of problem difficulties, return the number of choices of K that make the number of problems for ARCs\n    and the number of problems for ABCs the same.\n    :param diff_list: list of int\n    :return: int\n    \"\"\"\n    #Get the number of problems\n    num_problems = len(diff_list)\n    #Sort the list\n    diff_list.sort()\n    #Set the initial value for the number of choices\n    num_choices = 0\n    #Loop through all possible values of K, keeping track of the number of problems for ARCs and ABCs\n    for K in range(1, diff_list[0]):\n        num_arcs = 0\n        num_abcs = 0\n        for i in range(num_problems):\n            if diff_list[i] >= K:\n                num_arcs += 1\n            else:\n                num_abcs += 1\n        #If the number of problems for ARCs and ABCs are the same, increase the number of choices for K\n        if num_arcs == num_abcs:\n            num_choices += 1\n    #Return the number of choices\n    return num_choices\n\n#Main Script\nif __name__ == \"__main__\":\n    #Read the number of problems\n    num_problems = int(sys.stdin.readline())\n    #Read the problem difficulties\n    diff_list = list(map(int, sys.stdin.readline().split()))\n    #Find the number of choices of K that make the number of problems for ARCs and the number of problems for ABCs the same\n    num_choices = number_of_choices(diff_list)\n    #Print the result\n    print(num_choices)"
}
2022-04-16 19:11:55.434538 REASON stop
2022-04-16 19:11:55.455806 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nd = list(map(int, input().split()))\n\nif N % 2 != 0:\n    print(0)\n    exit()\n\ncount_dic = {}\nfor diff in d:\n    if diff in count_dic:\n        count_dic[diff] += 1\n    else:\n        count_dic[diff] = 1\n\ncounts = list(count_dic.values())\ncounts.sort()\n\nif len(counts) == 1:\n    print(1)\n    exit()\n\nif len(counts) % 2 == 0:\n    if counts[int(len(counts) / 2)] == counts[int(len(counts) / 2) - 1]:\n        print(int(len(counts) / 2))\n        exit()\n\nprint(0)"
}
2022-04-16 19:11:55.456093 REASON stop
2022-04-16 19:11:55.485342 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(input())\n    d = list(map(int, input().split()))\n\n    # Calculate\n    d.sort()\n    mid = n // 2\n    if d[mid] == d[mid - 1]:\n        print(d[mid] - d[0])\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:11:55.485470 REASON stop
