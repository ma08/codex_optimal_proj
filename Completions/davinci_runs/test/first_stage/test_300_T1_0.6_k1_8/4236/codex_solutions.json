["", "\n\n# SOLUTION\n# let m be the upper bound of the coordinates\n# all the points in the range [1,m] inclusive will be stored in a list\n# if the point belongs to a segment, it will be removed from the list\n# finally, the length of the list will be the number of points that don't belong to any segment,\n# and the elements of the list will be the points that don't belong to any segment.\n\n# initialize a list of points from 1 to m inclusive\npoints = list(range(1,int(input().split()[1])+1))\n\n# for each of the n segments\nfor i in range(int(input().split()[0])):\n  # convert the input to a list of integers\n  segment = list(map(int,input().split()))\n  # remove all the points that belong to the segment\n  for point in points:\n    if point in range(segment[0],segment[1]+1):\n      points.remove(point)\n\n# print the length of the list of points that don't belong to any segment\nprint(len(points))\n# print the points that don't belong to any segment\nfor point in points:\n  print(point, end = \" \")", "\n\ndef getInput():\n    n, m = map(int, input().split(' '))\n    segs = []\n    for i in range(n):\n        segs.append(list(map(int, input().split(' '))))\n    return n, m, segs\n\ndef getPoints(n, m, segs):\n    points = list(range(m+1))\n    for seg in segs:\n        for i in range(seg[0], seg[1]+1):\n            if i in points:\n                points.remove(i)\n    return points\n\ndef printPoints(points):\n    print(len(points))\n    for p in points:\n        print(p, end = ' ')\n\ndef main():\n    n, m, segs = getInput()\n    points = getPoints(n, m, segs)\n    printPoints(points)\n\nmain()", "\n\ndef find_segments(n, m):\n    n_list = []\n    for i in range(n):\n        n_list.append(list(map(int, input().split())))\n    return n_list\n\ndef find_possible_segments(n, m):\n    possible_segments = []\n    for i in range(m):\n        possible_segments.append(i+1)\n    return possible_segments\n\ndef main():\n    n, m = map(int, input().split())\n    possible_segments = find_possible_segments(n,m)\n    segments = find_segments(n,m)\n    for s in segments:\n        if s[0] in possible_segments:\n            possible_segments.remove(s[0])\n        if s[1] in possible_segments:\n            possible_segments.remove(s[1])\n    print(len(possible_segments))\n    print(*possible_segments)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, input().split())))\n    points = set(range(1, m + 1))\n    for s in segments:\n        points -= set(range(s[0], s[1] + 1))\n    print(len(points))\n    print(*points)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nnums = [True] * (m + 2)\n\nfor i in range(n):\n    l, r = map(int, sys.stdin.readline().split())\n    nums[l] = False\n    nums[r + 1] = False\n\nprint(sum(nums))\nfor i, v in enumerate(nums[1:], 1):\n    if v:\n        print(i, end=' ')", "\n\n# SOLUTION\n\nn, m = map(int, input().split())\n\nl = [0 for _ in range(m+2)]\n\nfor i in range(n):\n    left, right = map(int, input().split())\n    l[left] += 1\n    l[right+1] -= 1\n\nfor i in range(1, m+2):\n    l[i] += l[i-1]\n\nans = 0\n\nfor i in range(1, m+1):\n    if l[i] == 0:\n        ans += 1\n\nprint(ans)\n\nif ans > 0:\n    for i in range(1, m+1):\n        if l[i] == 0:\n            print(i, end=' ')", "\n\ndef main():\n    n, m = map(int, input().split())\n    values = []\n    for i in range(n):\n        values.append(list(map(int, input().split())))\n    values = sorted(values)\n\n    i = 0\n    result = []\n    while i < m:\n        if i < values[0][0]:\n            result.append(i)\n            i += 1\n        else:\n            i = values[0][1] + 1\n            values.pop(0)\n\n    print(len(result))\n    if result:\n        print(' '.join(map(str, result)))\n\n\nif __name__ == '__main__':\n    main()"]