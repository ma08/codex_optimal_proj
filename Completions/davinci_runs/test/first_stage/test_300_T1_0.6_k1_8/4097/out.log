2022-04-16 19:28:13.190531 """
Polycarp likes arithmetic progressions. A sequence $[a_1, a_2, \dots, a_n]$ is called an arithmetic progression if for each $i$ ($1 \le i < n$) the value $a_{i+1} - a_i$ is the same. For example, the sequences $[42]$, $[5, 5, 5]$, $[2, 11, 20, 29]$ and $[3, 2, 1, 0]$ are arithmetic progressions, but $[1, 0, 1]$, $[1, 3, 9]$ and $[2, 3, 1]$ are not.

It follows from the definition that any sequence of length one or two is an arithmetic progression.

Polycarp found some sequence of positive integers $[b_1, b_2, \dots, b_n]$. He agrees to change each element by at most one. In the other words, for each element there are exactly three options: an element can be decreased by $1$, an element can be increased by $1$, an element can be left unchanged.

Determine a minimum possible number of elements in $b$ which can be changed (by exactly one), so that the sequence $b$ becomes an arithmetic progression, or report that it is impossible.

It is possible that the resulting sequence contains element equals $0$.


-----Input-----

The first line contains a single integer $n$ $(1 \le n \le 100\,000)$ — the number of elements in $b$.

The second line contains a sequence $b_1, b_2, \dots, b_n$ $(1 \le b_i \le 10^{9})$.


-----Output-----

If it is impossible to make an arithmetic progression with described operations, print -1. In the other case, print non-negative integer — the minimum number of elements to change to make the given sequence becomes an arithmetic progression. The only allowed operation is to add/to subtract one from an element (can't use operation twice to the same position).


-----Examples-----
Input
4
24 21 14 10

Output
3

Input
2
500 500

Output
0

Input
3
14 5 1

Output
-1

Input
5
1 3 6 9 12

Output
1



-----Note-----

In the first example Polycarp should increase the first number on $1$, decrease the second number on $1$, increase the third number on $1$, and the fourth number should left unchanged. So, after Polycarp changed three elements by one, his sequence became equals to $[25, 20, 15, 10]$, which is an arithmetic progression.

In the second example Polycarp should not change anything, because his sequence is an arithmetic progression.

In the third example it is impossible to make an arithmetic progression.

In the fourth example Polycarp should change only the first element, he should decrease it on one. After that his sequence will looks like $[0, 3, 6, 9, 12]$, which is an arithmetic progression.
"""
2022-04-16 19:28:13.190548 --------------------------
2022-04-16 19:29:50.192346 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#------------------------------------------------------------------------------#\n\nn = int(input())\ns = list(map(int, input().split()))\n\n#------------------------------------------------------------------------------#\n\n\"\"\"\nFirst, we can calculate the difference between each adjacent element to see if the sequence is an arithmetic progression.\nIf it is, then we can return 0.\nIf not, then we need to change at least one element.\n\nIf the difference between two adjacent elements is not the same, then we need to change at least one of the two elements.\nIf we change the first element, then we need to change at least one more, so we can change the second element as well.\nIf we change the second element, then we may not need to change the first element.\n\nIf the difference between two adjacent elements is the same, then we need to change at least one element.\nIf we change the first element, then we need to change at least one more, so we can change the second element as well.\nIf we change the second element, then we may not need to change the first element.\n\nFor every two adjacent elements, we can calculate the difference.\nIf the differences are the same, then we need to change at least one element.\nIf the differences are not the same, then we need to change at least two elements.\n\nWe can count the number of differences that are the same and the number of differences that are not the same.\nIf they are the same, then we need to change at least one element.\nIf they are not the same, then we need to change at least two elements.\n\nIf there are at least two differences that are not the same, then we can't make an arithmetic progression.\n\"\"\"\n\nif n <= 2:\n    print(0)\nelse:\n    # Calculate the difference between each adjacent element\n    diffs = [0] * (n-1)\n    for i in range(n-1):\n        diffs[i] = s[i+1] - s[i]\n\n    # Count the number of differences that are the same and the number of differences that are not the same\n    same = 0\n    not_same = 0\n    for i in range(n-2):\n        if diffs[i] == diffs[i+1]:\n            same += 1\n        else:\n            not_same += 1\n\n    # Check if there are at least two differences that are not the same\n    if not_same >= 2:\n        print(-1)\n    else:\n        # Return the minimum number of elements to change\n        print(max(same, not_same))\n\n#------------------------------------------------------------------------------#\n\n\"\"\"\nhttps://codeforces.com/blog/entry/66006\n\nThe other way to solve this problem is to use the fact that we can reduce the sequence to an arithmetic progression by changing at most one of the elements.\n\nLet's prove this by induction.\nThe basis is trivial.\n\nLet's assume that we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change.\nNow let's consider the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$.\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$ to an arithmetic progression with at most one change by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$ to an arithmetic progression with at most one change by changing the element $b_{n+1}$.\n\nThus, we can reduce the sequence to an arithmetic progression with at most one change.\n\nNow let's consider the sequence $[b_1, b_2, \\dots, b_n]$.\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change by changing the element $b_1$.\n\nThus, we can reduce the sequence to an arithmetic progression with at most one change.\n\nSince we can reduce the sequence to an arithmetic progression with at most one change, we can find the minimum number of elements to change by finding the minimum number of elements to change to get an arithmetic progression.\n\nIf we change the element $b_1$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$.\nIf we don't change the element $b_1$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$.\n\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_{n+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$).\n\nIf the difference between $b_i$ and $b_{i+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by changing the element $b_i$.\nIf the difference between $b_i$ and $b_{i+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by changing the element $b_{i+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$).\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$.\n\nIf the difference between $b_{n-1}$ and $b_n$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_{n-1}$.\nIf the difference between $b_{n-1}$ and $b_n$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_n$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n <= 2:\n        print(0)\n    else:\n        diff = a[1] - a[0]\n        for i in range(2, n):\n            if a[i] - a[i - 1] != diff:\n                break\n        else:\n            print(0)\n            return\n        change = 0\n        if a[i] - a[i - 1] == diff + 1:\n            change += 1\n            a[i] -= 1\n        elif a[i] - a[i - 1] == diff - 1:\n            change += 1\n            a[i] += 1\n        else:\n            print(-1)\n            return\n        for j in range(i + 1, n):\n            if a[j] - a[j - 1] != diff:\n                change += 1\n                if a[j] - a[j - 1] == diff + 1:\n                    a[j] -= 1\n                else:\n                    print(-1)\n                    return\n        print(change)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, b):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    bb = [b[i + 1] - b[i] for i in range(n - 1)]\n    if max(bb) == min(bb):\n        return 0\n    if max(bb) - min(bb) == 1:\n        s = sum(bb)\n        if s % 2 == 0:\n            if s / 2 in bb:\n                return 1\n            else:\n                return 2\n        else:\n            return 2\n    else:\n        return -1\n\nif __name__ == '__main__':\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(solve(n, b))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\ndef dif(lst):\n    difs = []\n    for i in range(len(lst) - 1):\n        difs.append(lst[i+1] - lst[i])\n    return difs\n\ndef main(n, lst):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    difs = dif(lst)\n    if difs[1:] == difs[:-1]:\n        return 0\n    if len(set(difs)) == 1:\n        return 0\n    if len(set(difs)) == 2:\n        if difs[0] == difs[1]:\n            return 1\n        else:\n            return 2\n    if len(set(difs)) > 2:\n        return -1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(main(n, lst))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # find the difference between the first two elements in the list\n    d = a[1] - a[0]\n\n    # count the number of elements that are different from the arithmetic progression\n    diff = 0\n    for i in range(1, n):\n        if a[i] - a[i-1] != d:\n            diff += 1\n\n    # if there are more than 2 elements that are different from the arithmetic progression, it is impossible to make it an arithmetic progression\n    if diff > 2:\n        print(-1)\n    else:\n        print(diff)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\nb = list(map(int, input().split()))\n\n# check if b is an AP\nap = True\nfor i in range(1, len(b)-1):\n    if b[i+1] - b[i] != b[1] - b[0]:\n        ap = False\n        break\n\nif ap:\n    print(0)\nelse:\n    # check if we can make an AP by changing only one element\n    for i in range(1, len(b)-1):\n        if b[i+1] - b[i] == b[i] - b[i-1]:\n            print(1)\n            break\n    else:\n        # check if we can make an AP by changing two elements\n        for i in range(1, len(b)-1):\n            if b[i+1] - b[i] == 2*(b[i] - b[i-1]):\n                print(2)\n                break\n            elif b[i+1] - b[i] == 2*(b[i+1] - b[i+2]):\n                print(2)\n                break\n        else:\n            print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    z = arr[1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] != z:\n            if arr[i+1] - arr[i] == z+1 and arr[i+1] - arr[i-1] == z*2:\n                arr[i] += 1\n            elif arr[i+1] - arr[i] == z-1 and arr[i+1] - arr[i-1] == z:\n                arr[i+1] -= 1\n            else:\n                print(-1)\n                return\n    print(arr.count(arr[0])+arr.count(arr[len(arr)-1]))\n    \n    \n    \nmain()"
    }
  ],
  "created": 1650137293,
  "id": "cmpl-4xiNZb3mKkgeBCAy4hOKOuLAjgtWw",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:29:50.192824 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#------------------------------------------------------------------------------#\n\nn = int(input())\ns = list(map(int, input().split()))\n\n#------------------------------------------------------------------------------#\n\n\"\"\"\nFirst, we can calculate the difference between each adjacent element to see if the sequence is an arithmetic progression.\nIf it is, then we can return 0.\nIf not, then we need to change at least one element.\n\nIf the difference between two adjacent elements is not the same, then we need to change at least one of the two elements.\nIf we change the first element, then we need to change at least one more, so we can change the second element as well.\nIf we change the second element, then we may not need to change the first element.\n\nIf the difference between two adjacent elements is the same, then we need to change at least one element.\nIf we change the first element, then we need to change at least one more, so we can change the second element as well.\nIf we change the second element, then we may not need to change the first element.\n\nFor every two adjacent elements, we can calculate the difference.\nIf the differences are the same, then we need to change at least one element.\nIf the differences are not the same, then we need to change at least two elements.\n\nWe can count the number of differences that are the same and the number of differences that are not the same.\nIf they are the same, then we need to change at least one element.\nIf they are not the same, then we need to change at least two elements.\n\nIf there are at least two differences that are not the same, then we can't make an arithmetic progression.\n\"\"\"\n\nif n <= 2:\n    print(0)\nelse:\n    # Calculate the difference between each adjacent element\n    diffs = [0] * (n-1)\n    for i in range(n-1):\n        diffs[i] = s[i+1] - s[i]\n\n    # Count the number of differences that are the same and the number of differences that are not the same\n    same = 0\n    not_same = 0\n    for i in range(n-2):\n        if diffs[i] == diffs[i+1]:\n            same += 1\n        else:\n            not_same += 1\n\n    # Check if there are at least two differences that are not the same\n    if not_same >= 2:\n        print(-1)\n    else:\n        # Return the minimum number of elements to change\n        print(max(same, not_same))\n\n#------------------------------------------------------------------------------#\n\n\"\"\"\nhttps://codeforces.com/blog/entry/66006\n\nThe other way to solve this problem is to use the fact that we can reduce the sequence to an arithmetic progression by changing at most one of the elements.\n\nLet's prove this by induction.\nThe basis is trivial.\n\nLet's assume that we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change.\nNow let's consider the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$.\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$ to an arithmetic progression with at most one change by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n, b_{n+1}]$ to an arithmetic progression with at most one change by changing the element $b_{n+1}$.\n\nThus, we can reduce the sequence to an arithmetic progression with at most one change.\n\nNow let's consider the sequence $[b_1, b_2, \\dots, b_n]$.\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can reduce the sequence $[b_1, b_2, \\dots, b_n]$ to an arithmetic progression with at most one change by changing the element $b_1$.\n\nThus, we can reduce the sequence to an arithmetic progression with at most one change.\n\nSince we can reduce the sequence to an arithmetic progression with at most one change, we can find the minimum number of elements to change by finding the minimum number of elements to change to get an arithmetic progression.\n\nIf we change the element $b_1$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$.\nIf we don't change the element $b_1$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nWe can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ by changing the element $b_{n+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$.\n\nIf the difference between $b_n$ and $b_{n+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_n$.\nIf the difference between $b_n$ and $b_{n+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_{n+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$).\n\nIf the difference between $b_i$ and $b_{i+1}$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by changing the element $b_i$.\nIf the difference between $b_i$ and $b_{i+1}$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by changing the element $b_{i+1}$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$).\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$.\n\nIf the difference between $b_{n-1}$ and $b_n$ is equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_{n-1}$.\nIf the difference between $b_{n-1}$ and $b_n$ is not equal to the difference between $b_1$ and $b_2$, then we can get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by changing the element $b_n$.\n\nThus, we can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$.\n\nWe can find the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between $b_i$ and $b_{i+1}$ for each $i$ ($1 \\le i < n$) or the difference between $b_{n-1}$ and $b_n$ or the difference between $b_n$ and $b_{n+1}$ by finding the minimum number of elements to change to get an arithmetic progression with the difference between $b_1$ and $b_2$ or the difference between $b_n$ and $b_{n+1}$ or the difference between"
}
2022-04-16 19:29:50.194068 REASON length
2022-04-16 19:29:50.194089 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n <= 2:\n        print(0)\n    else:\n        diff = a[1] - a[0]\n        for i in range(2, n):\n            if a[i] - a[i - 1] != diff:\n                break\n        else:\n            print(0)\n            return\n        change = 0\n        if a[i] - a[i - 1] == diff + 1:\n            change += 1\n            a[i] -= 1\n        elif a[i] - a[i - 1] == diff - 1:\n            change += 1\n            a[i] += 1\n        else:\n            print(-1)\n            return\n        for j in range(i + 1, n):\n            if a[j] - a[j - 1] != diff:\n                change += 1\n                if a[j] - a[j - 1] == diff + 1:\n                    a[j] -= 1\n                else:\n                    print(-1)\n                    return\n        print(change)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:29:50.194226 REASON stop
2022-04-16 19:29:50.211083 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, b):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    bb = [b[i + 1] - b[i] for i in range(n - 1)]\n    if max(bb) == min(bb):\n        return 0\n    if max(bb) - min(bb) == 1:\n        s = sum(bb)\n        if s % 2 == 0:\n            if s / 2 in bb:\n                return 1\n            else:\n                return 2\n        else:\n            return 2\n    else:\n        return -1\n\nif __name__ == '__main__':\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(solve(n, b))"
}
2022-04-16 19:29:50.211192 REASON stop
2022-04-16 19:29:50.211712 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\ndef dif(lst):\n    difs = []\n    for i in range(len(lst) - 1):\n        difs.append(lst[i+1] - lst[i])\n    return difs\n\ndef main(n, lst):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    difs = dif(lst)\n    if difs[1:] == difs[:-1]:\n        return 0\n    if len(set(difs)) == 1:\n        return 0\n    if len(set(difs)) == 2:\n        if difs[0] == difs[1]:\n            return 1\n        else:\n            return 2\n    if len(set(difs)) > 2:\n        return -1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(main(n, lst))"
}
2022-04-16 19:29:50.211791 REASON stop
2022-04-16 19:29:50.235739 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-16 19:29:50.235844 REASON stop
2022-04-16 19:29:50.246856 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # find the difference between the first two elements in the list\n    d = a[1] - a[0]\n\n    # count the number of elements that are different from the arithmetic progression\n    diff = 0\n    for i in range(1, n):\n        if a[i] - a[i-1] != d:\n            diff += 1\n\n    # if there are more than 2 elements that are different from the arithmetic progression, it is impossible to make it an arithmetic progression\n    if diff > 2:\n        print(-1)\n    else:\n        print(diff)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:29:50.246968 REASON stop
2022-04-16 19:29:50.248158 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\nb = list(map(int, input().split()))\n\n# check if b is an AP\nap = True\nfor i in range(1, len(b)-1):\n    if b[i+1] - b[i] != b[1] - b[0]:\n        ap = False\n        break\n\nif ap:\n    print(0)\nelse:\n    # check if we can make an AP by changing only one element\n    for i in range(1, len(b)-1):\n        if b[i+1] - b[i] == b[i] - b[i-1]:\n            print(1)\n            break\n    else:\n        # check if we can make an AP by changing two elements\n        for i in range(1, len(b)-1):\n            if b[i+1] - b[i] == 2*(b[i] - b[i-1]):\n                print(2)\n                break\n            elif b[i+1] - b[i] == 2*(b[i+1] - b[i+2]):\n                print(2)\n                break\n        else:\n            print(-1)"
}
2022-04-16 19:29:50.248240 REASON stop
2022-04-16 19:29:50.249106 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    z = arr[1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] != z:\n            if arr[i+1] - arr[i] == z+1 and arr[i+1] - arr[i-1] == z*2:\n                arr[i] += 1\n            elif arr[i+1] - arr[i] == z-1 and arr[i+1] - arr[i-1] == z:\n                arr[i+1] -= 1\n            else:\n                print(-1)\n                return\n    print(arr.count(arr[0])+arr.count(arr[len(arr)-1]))\n    \n    \n    \nmain()"
}
2022-04-16 19:29:50.249194 REASON stop
