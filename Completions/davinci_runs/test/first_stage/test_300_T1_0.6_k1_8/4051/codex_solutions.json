["", "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # build stacks\n    ravioli = [[] for _ in range(n)]\n    for i in range(n):\n        ravioli[i] = [a[i]] * a[i]\n\n    # can it be sorted?\n    can_be_sorted = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(ravioli[i]) == 0 or len(ravioli[j]) == 0:\n                continue\n            height_diff = len(ravioli[j]) - len(ravioli[i])\n            if height_diff > 1:\n                can_be_sorted = False\n                break\n            if height_diff == 1:\n                ravioli[i].extend(ravioli[j])\n                ravioli[j] = []\n\n    # output\n    if can_be_sorted:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nl = list(map(int, input().split()))\n\nfor i in range(n):\n    if (l[i] >= l[i+1]) and (l[i+1] >= l[i+2]) and (l[i+2] >= l[i+3]):\n        print(\"YES\")\n        break\n    elif (l[i] <= l[i+1]) and (l[i+1] <= l[i+2]) and (l[i+2] <= l[i+3]):\n        print(\"YES\")\n        break\n    elif (l[i] >= l[i+1]) and (l[i+1] <= l[i+2]) and (l[i+2] >= l[i+3]):\n        print(\"NO\")\n        break\n    elif (l[i] <= l[i+1]) and (l[i+1] >= l[i+2]) and (l[i+2] <= l[i+3]):\n        print(\"NO\")\n        break\n    else:\n        print(\"yes\")", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    ravioli = [0] * 101\n    for i in a:\n        ravioli[i] += 1\n\n    for i in range(100, 0, -1):\n        if ravioli[i] > 0:\n            ravioli[i-1] += ravioli[i] - 1\n            if ravioli[i-1] > ravioli[i]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef canBeSorted(arr):\n\tstack = []\n\tfor i in arr:\n\t\tstack.append(i)\n\t\tfor j in range(len(stack)-1):\n\t\t\tif stack[j] < stack[j+1]:\n\t\t\t\tstack[j], stack[j+1] = stack[j+1], stack[j]\n\treturn stack == sorted(arr)\n\nprint(\"YES\" if canBeSorted(a) else \"NO\")", "\n\ndef ravioliSort(l):\n    ravioli = [[] for i in range(len(l))]\n    for i in range(len(ravioli)):\n        for j in range(l[i]):\n            ravioli[i].append(True)\n    sortedList = []\n    while len(ravioli) > 0:\n        tallest = max(ravioli)\n        sortedList.append(len(tallest))\n        ravioli.remove(tallest)\n        if len(ravioli) > 0:\n            for i in range(len(ravioli)):\n                if len(tallest) > len(ravioli[i]):\n                    ravioli[i].append(False)\n    return sortedList == l\n\ndef main():\n    l = [int(i) for i in input().split()]\n    print(\"YES\" if ravioliSort(l) else \"NO\")\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n    if a[i]>a[i+1]+1:\n        print('NO')\n        break\nelse:\n    print('YES')", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [0] + a\n    stack = 0\n    for i in range(1, n+1):\n        stack += a[i]\n        if stack > i:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nmain()"]