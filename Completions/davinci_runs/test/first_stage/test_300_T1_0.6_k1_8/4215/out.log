2022-04-16 20:18:44.455248 """
The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)
We will close the window so as to minimize the total horizontal length of the uncovered part of the window.
Find the total horizontal length of the uncovered parts of the window then.

-----Constraints-----
 - 1 \leq A \leq 100
 - 1 \leq B \leq 100
 - A and B are integers.

-----Input-----
Input is given from Standard Input in the following format:
A B

-----Output-----
Print the total horizontal length of the uncovered parts of the window.

-----Sample Input-----
12 4

-----Sample Output-----
4

We have a window with a horizontal length of 12, and two curtains, each of length 4, that cover both ends of the window, for example. The uncovered part has a horizontal length of 4.
"""
2022-04-16 20:18:44.455268 --------------------------
2022-04-16 20:18:56.857337 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nA,B = input().split()\nA = int(A)\nB = int(B)\n\n# the total horizontal length of the uncovered part of the window\n# = the horizontal length of the window - the horizontal length of the curtains\nprint(A - B)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    a, b = map(int, input().split())\n    print(abs(a - b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# Get the input\nA, B = map(int, input().split())\n\n# Case 1: The curtains overlap and cover the entire window\nif A <= B:\n    print(0)\n# Case 2: The curtains do not overlap and leave uncovered parts of the window\nelse:\n    print(A - B)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\nimport sys\n\ndef main():\n  input = sys.stdin.readline()\n  a = int(input.split(\" \")[0])\n  b = int(input.split(\" \")[1])\n\n  if a < b:\n    print(\"0\")\n  else:\n    print(a - b)\n\nif __name__ == '__main__':\n  main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Read the input\na, b = map(int, input().split())\n\n# Print the solution\nprint(min(a, b) * 2)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(max(a-b*2, 0))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nA,B = map(int, input().split())\n\nif A > B:\n    print(A - B)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#----Solution----\na, b = map(int, input().split())\nprint(max(0, a - b * 2))"
    }
  ],
  "created": 1650140324,
  "id": "cmpl-4xjASlQVLmnpVrUcFm3fjw5PMFHCu",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:18:56.857598 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nA,B = input().split()\nA = int(A)\nB = int(B)\n\n# the total horizontal length of the uncovered part of the window\n# = the horizontal length of the window - the horizontal length of the curtains\nprint(A - B)"
}
2022-04-16 20:18:56.857633 REASON stop
2022-04-16 20:18:56.858822 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    a, b = map(int, input().split())\n    print(abs(a - b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:18:56.858970 REASON stop
2022-04-16 20:18:56.859424 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# Get the input\nA, B = map(int, input().split())\n\n# Case 1: The curtains overlap and cover the entire window\nif A <= B:\n    print(0)\n# Case 2: The curtains do not overlap and leave uncovered parts of the window\nelse:\n    print(A - B)"
}
2022-04-16 20:18:56.859488 REASON stop
2022-04-16 20:18:56.882493 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\nimport sys\n\ndef main():\n  input = sys.stdin.readline()\n  a = int(input.split(\" \")[0])\n  b = int(input.split(\" \")[1])\n\n  if a < b:\n    print(\"0\")\n  else:\n    print(a - b)\n\nif __name__ == '__main__':\n  main()"
}
2022-04-16 20:18:56.882597 REASON stop
2022-04-16 20:18:56.884336 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Read the input\na, b = map(int, input().split())\n\n# Print the solution\nprint(min(a, b) * 2)"
}
2022-04-16 20:18:56.884429 REASON stop
2022-04-16 20:18:56.885377 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(max(a-b*2, 0))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:18:56.885460 REASON stop
2022-04-16 20:18:56.886280 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nA,B = map(int, input().split())\n\nif A > B:\n    print(A - B)\nelse:\n    print(0)"
}
2022-04-16 20:18:56.886357 REASON stop
2022-04-16 20:18:56.887422 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#----Solution----\na, b = map(int, input().split())\nprint(max(0, a - b * 2))"
}
2022-04-16 20:18:56.887487 REASON stop
