["\n\nimport sys\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = 0\n\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] != l[j] and l[j] != l[k] and l[k] != l[i] and l[i] + l[j] > l[k] and l[j] + l[k] > l[i] and l[k] + l[i] > l[j]:\n                    count += 1\n    \n    print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\nN = int(sys.stdin.readline())\nL = [int(line) for line in sys.stdin.readlines()]\n\n# count the pairs of sticks whose sum is larger than or equal to the length of the remaining stick\nans = 0\nfor i in range(N - 2):\n    for j in range(i + 1, N - 1):\n        for k in range(j + 1, N):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i] and L[i] + L[j] > L[k]:\n                ans += 1\nprint(ans)", "\n\nimport sys\n\nreadline = sys.stdin.readline\n\nN = int(readline())\nL = list(map(int, readline().split()))\n\ncount = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[j] + L[k] > L[i] and L[k] + L[i] > L[j]:\n                    count += 1\n\nprint(count)", "\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = list(map(int, sys.stdin.readline().split()))\n\nl.sort()\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[j]+l[i] > l[k]:\n                ans += 1\n\nprint(ans)", "\n\nn = int(input())\nl = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            if l[i] != l[j] and l[i] != l[k] and l[j] != l[k]:\n                if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]:\n                    ans += 1\nprint(ans)", "\n\n# Get input\nnum_sticks = int(input())\nlengths = [int(i) for i in input().split()]\n\n# Create a dictionary of unique lengths with the number of each length\nlengths_dict = {}\nfor length in lengths:\n    if length in lengths_dict:\n        lengths_dict[length] += 1\n    else:\n        lengths_dict[length] = 1\n\n# Get the number of unique lengths\nnum_unique_lengths = len(lengths_dict)\n\n# Create a list of unique lengths\nunique_lengths = list(lengths_dict.keys())\n\n# If there are fewer than 3 unique lengths, then there are no triples that can form a triangle\nif num_unique_lengths < 3:\n    print(0)\n\n# Otherwise, determine the number of triples that can form a triangle\nelse:\n    # Create a dictionary of unique_lengths with the number of unique combinations of unique lengths\n    unique_lengths_combinations = {(i, j): 0 for i in unique_lengths for j in unique_lengths}\n    for i in unique_lengths:\n        for j in unique_lengths:\n            if i != j:\n                for k in unique_lengths:\n                    if i != k and j != k:\n                        if i + j > k and j + k > i and k + i > j:\n                            unique_lengths_combinations[(i, j)] += 1\n\n    # Create a dictionary of lengths with the number of unique combinations of lengths\n    lengths_combinations = {(i, j): 0 for i in lengths_dict for j in lengths_dict}\n    for i in lengths_dict:\n        for j in lengths_dict:\n            if i != j:\n                lengths_combinations[(i, j)] = lengths_dict[i] * lengths_dict[j] * unique_lengths_combinations[(i, j)]\n\n    # For each unique length, determine the number of unique combinations that include that length\n    triples = 0\n    for length in lengths_dict:\n        for i in lengths_dict:\n            if i != length:\n                for j in lengths_dict:\n                    if j != length and j != i:\n                        triples += lengths_dict[length] * lengths_combinations[(i, j)]\n    print(int(triples / 6))", "\n\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[i] != l[j] and l[j] != l[k] and l[k] != l[i]:\n                if l[i] + l[j] > l[k] and l[j] + l[k] > l[i] and l[k] + l[i] > l[j]:\n                    ans += 1\n\nprint(ans)", "\n\nn = int(input())\nl = map(int, input().split())\nl = list(set(l))\n\ncount = 0\nfor i in range(len(l)):\n  for j in range(i+1, len(l)):\n    for k in range(j+1, len(l)):\n      if l[i]+l[j] > l[k] and l[i]+l[k] > l[j] and l[j]+l[k] > l[i]:\n        count += 1\n\nprint(count)"]