2022-04-16 19:04:21.370382 """
You are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.

You can perform each of the two following types of moves any (possibly, zero) number of times on any chip:

  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$);  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). 

Note that it's allowed to move chips to any integer coordinate, including negative and zero.

Your task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 100$) — the number of chips.

The second line of the input contains $n$ integers $x_1, x_2, \dots, x_n$ ($1 \le x_i \le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.


-----Output-----

Print one integer — the minimum total number of coins required to move all $n$ chips to the same coordinate.


-----Examples-----
Input
3
1 2 3

Output
1

Input
5
2 2 2 3 3

Output
2



-----Note-----

In the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.

In the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.
"""
2022-04-16 19:04:21.370396 --------------------------
2022-04-16 19:04:36.530791 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nmoves = min(x.count(min(x)), x.count(max(x)))\n\nprint(moves)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    xs = [int(x) for x in input().split()]\n    xs.sort()\n    num_moves = 0\n    for i in range(len(xs) - 1):\n        if xs[i + 1] - xs[i] > 2:\n            num_moves += xs[i + 1] - xs[i] - 2\n    print(num_moves)\n\nif __name__ == \"__main__\":\n    main('chips')"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    x.sort()\n    print(min(sum(x)-n*x[0], sum(x)-n*x[n-1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif n % 2 == 0:\n    if x[n//2] == x[n//2 - 1]:\n        print(0)\n    else:\n        print(x[n//2] - x[n//2 - 1])\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nx.sort()\nc = 0\nfor i in range(1, n):\n    c += x[i] - x[i-1] - 1\n\nprint(c)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nc = 0\n\nfor i in x:\n  if i % 2 == 0:\n    c += i//2\n  else:\n    c += (i+1)//2\n\nprint(c)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n > 1:\n        min_x = min(x)\n        max_x = max(x)\n        print(max_x - min_x)\n    else:\n        print(0)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    chips = list(map(int, input().split()))\n\n    # find the minimum and maximum chips\n    min_chip, max_chip = min(chips), max(chips)\n    # find the minimum distance between the minimum and maximum chips\n    min_distance = min_chip + max_chip\n    # find the number of chips with the minimum distance\n    min_chips = chips.count(min_distance)\n    # find the number of chips with the maximum distance\n    max_chips = chips.count(min_distance + 1)\n\n    # calculate the minimum number of moves\n    moves = min_chips + max_chips\n    if moves == 0:\n        moves = 2\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650135861,
  "id": "cmpl-4xi0T3lqfb7xuoaArF1v5MYnv9n9t",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:04:36.531099 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nmoves = min(x.count(min(x)), x.count(max(x)))\n\nprint(moves)"
}
2022-04-16 19:04:36.531133 REASON stop
2022-04-16 19:04:36.564048 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    xs = [int(x) for x in input().split()]\n    xs.sort()\n    num_moves = 0\n    for i in range(len(xs) - 1):\n        if xs[i + 1] - xs[i] > 2:\n            num_moves += xs[i + 1] - xs[i] - 2\n    print(num_moves)\n\nif __name__ == \"__main__\":\n    main('chips')"
}
2022-04-16 19:04:36.564245 REASON stop
2022-04-16 19:04:36.564653 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    x.sort()\n    print(min(sum(x)-n*x[0], sum(x)-n*x[n-1]))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:04:36.564712 REASON stop
2022-04-16 19:04:36.566617 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif n % 2 == 0:\n    if x[n//2] == x[n//2 - 1]:\n        print(0)\n    else:\n        print(x[n//2] - x[n//2 - 1])\nelse:\n    print(0)"
}
2022-04-16 19:04:36.566696 REASON stop
2022-04-16 19:04:36.579869 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nx.sort()\nc = 0\nfor i in range(1, n):\n    c += x[i] - x[i-1] - 1\n\nprint(c)"
}
2022-04-16 19:04:36.579990 REASON stop
2022-04-16 19:04:36.580701 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\nc = 0\n\nfor i in x:\n  if i % 2 == 0:\n    c += i//2\n  else:\n    c += (i+1)//2\n\nprint(c)"
}
2022-04-16 19:04:36.580767 REASON stop
2022-04-16 19:04:36.596768 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n > 1:\n        min_x = min(x)\n        max_x = max(x)\n        print(max_x - min_x)\n    else:\n        print(0)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:04:36.596896 REASON stop
2022-04-16 19:04:36.597813 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    chips = list(map(int, input().split()))\n\n    # find the minimum and maximum chips\n    min_chip, max_chip = min(chips), max(chips)\n    # find the minimum distance between the minimum and maximum chips\n    min_distance = min_chip + max_chip\n    # find the number of chips with the minimum distance\n    min_chips = chips.count(min_distance)\n    # find the number of chips with the maximum distance\n    max_chips = chips.count(min_distance + 1)\n\n    # calculate the minimum number of moves\n    moves = min_chips + max_chips\n    if moves == 0:\n        moves = 2\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:04:36.597941 REASON stop
