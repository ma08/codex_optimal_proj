2022-04-16 18:52:35.734331 """
Let's call an array good if there is an element in the array that equals to the sum of all other elements. For example, the array $a=[1, 3, 3, 7]$ is good because there is the element $a_4=7$ which equals to the sum $1 + 3 + 3$.

You are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).

For example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. 

You have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of elements in the array $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^6$) — elements of the array $a$.


-----Output-----

In the first line print one integer $k$ — the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).

In the second line print $k$ distinct integers $j_1, j_2, \dots, j_k$ in any order — nice indices of the array $a$.

If there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.


-----Examples-----
Input
5
2 5 1 2 2

Output
3
4 1 5
Input
4
8 3 5 2

Output
2
1 4 

Input
5
2 1 2 4 3

Output
0




-----Note-----

In the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).

In the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).

In the third example you cannot make the given array good by removing exactly one element.
"""
2022-04-16 18:52:35.734347 --------------------------
2022-04-16 18:54:13.719650 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tleft, right = 0, sum(a)\n\tfor i in range(n):\n\t\tright -= a[i]\n\t\tif left == right:\n\t\t\tprint(i + 1, end=' ')\n\t\tleft += a[i]\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#Solution:\n\nn = int(input())\na = list(map(int,input().split()))\ns = sum(a)\nans = []\nfor i in range(n):\n    if a[i] == s-a[i]:\n        ans.append(i+1)\nprint(len(ans))\nfor i in ans:\n    print(i,end=\" \")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef get_input():\n    \"\"\"\n    gets input and returns as list of ints\n    \"\"\"\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    return n, a\n\ndef get_indices(n, a):\n    \"\"\"\n    given n as int, a as list of ints\n    returns list of indices for which the array is good\n    \n    call sum(a[:i] + a[i+1:])\n    \"\"\"\n\n    nice_indices = []\n    for i in range(n):\n        if sum(a[:i] + a[i+1:]) == a[i]:\n            nice_indices.append(i+1)\n    return nice_indices\n\ndef print_output(nice_indices):\n    \"\"\"\n    given nice_indices as list of ints\n    prints output\n    \"\"\"\n\n    print(len(nice_indices))\n    if len(nice_indices) != 0:\n        print(*nice_indices)\n\ndef main():\n    n, a = get_input()\n    nice_indices = get_indices(n, a)\n    print_output(nice_indices)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate sum of all elements\nsum_a = sum(a)\n\n# Initialize an empty set\nnice_indices = set()\n\nfor i, a_i in enumerate(a):\n    # Find the sum of all elements except the i-th\n    sum_without_i = sum_a - a_i\n\n    # If the i-th element is equal to the sum of all other elements\n    if a_i == sum_without_i:\n        # Add the i-th index to nice_indices\n        nice_indices.add(i + 1)\n\n# Print the size of nice_indices\nprint(len(nice_indices))\n\n# If there are nice indices\nif len(nice_indices) > 0:\n    # Print them in one line\n    print(*nice_indices)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    res = []\n    for i in range(n):\n        if 2 * a[i] == s:\n            res.append(i + 1)\n    print(len(res))\n    print(*res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# read input\nn = int(input())\na = list(map(int, input().split()))\n\n# find the sum of all numbers in the array\ntotal = sum(a)\n\n# find the number of nice indices\nnice = 0\n\nfor i in range(n):\n    # if the sum of all numbers except the ith number equals the ith number, then it is a nice index\n    if a[i] == (total - a[i]):\n        nice += 1\n\n# print the number of nice indices\nprint(nice)\n\n# print the nice indices\nfor i in range(n):\n    if a[i] == (total - a[i]):\n        print(i + 1, end=\" \")"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef remove_and_test(array, element):\n    array.remove(element)\n    return sum(array) == element\n\nif __name__ == \"__main__\":\n    n = int(input())\n    array = [int(i) for i in input().split()]\n    array_sum = sum(array)\n    nice_indices = []\n    for index, element in enumerate(array):\n        if remove_and_test(array, element):\n            nice_indices.append(index + 1)\n    print(len(nice_indices))\n    print(*nice_indices)\n\n\n\n##################################################\n#\n#\n# from collections import deque\n#\n#\n# def solve(array, array_sum, index=0):\n#     if index == len(array):\n#         return 0\n#     if array_sum - array[index] == array[index]:\n#         return 1 + solve(array, array_sum, index + 1)\n#     return solve(array, array_sum, index + 1)\n#\n# def solve(array, array_sum, index=0):\n#     if index == len(array):\n#         return 0\n#     if array_sum - array[index] == array[index]:\n#         return 1 + solve(array, array_sum, index + 1)\n#     return solve(array, array_sum, index + 1)\n#\n# def solve(array, array_sum):\n#     array_sum = sum(array)\n#     return sum([1 if array_sum - element == element else 0 for element in array])\n#\n#\n#\n# def solve(array, array_sum):\n#     array_sum = sum(array)\n#     nice_indices = []\n#     for index, element in enumerate(array):\n#         if array_sum - element == element:\n#             nice_indices.append(index + 1)\n#     return nice_indices\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     array = [int(i) for i in input().split()]\n#     array_sum = sum(array)\n#     nice_indices = solve(array, array_sum)\n#     print(len(nice_indices))\n#     print(*nice_indices)\n#\n#\n#\n# def solve(array_sum, array):\n#     array_sum = sum(array)\n#     return sum([1 if array_sum - element == element else 0 for element in array])\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     array = [int(i) for i in input().split()]\n#     array_sum = sum(array)\n#     print(solve(array, array_sum))\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    }
  ],
  "created": 1650135155,
  "id": "cmpl-4xhp5cjnOKbD4OklpNpSBrzsBou4l",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 18:54:13.720067 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tleft, right = 0, sum(a)\n\tfor i in range(n):\n\t\tright -= a[i]\n\t\tif left == right:\n\t\t\tprint(i + 1, end=' ')\n\t\tleft += a[i]\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-16 18:54:13.720111 REASON stop
2022-04-16 18:54:13.741763 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#Solution:\n\nn = int(input())\na = list(map(int,input().split()))\ns = sum(a)\nans = []\nfor i in range(n):\n    if a[i] == s-a[i]:\n        ans.append(i+1)\nprint(len(ans))\nfor i in ans:\n    print(i,end=\" \")"
}
2022-04-16 18:54:13.742005 REASON stop
2022-04-16 18:54:13.742483 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef get_input():\n    \"\"\"\n    gets input and returns as list of ints\n    \"\"\"\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    return n, a\n\ndef get_indices(n, a):\n    \"\"\"\n    given n as int, a as list of ints\n    returns list of indices for which the array is good\n    \n    call sum(a[:i] + a[i+1:])\n    \"\"\"\n\n    nice_indices = []\n    for i in range(n):\n        if sum(a[:i] + a[i+1:]) == a[i]:\n            nice_indices.append(i+1)\n    return nice_indices\n\ndef print_output(nice_indices):\n    \"\"\"\n    given nice_indices as list of ints\n    prints output\n    \"\"\"\n\n    print(len(nice_indices))\n    if len(nice_indices) != 0:\n        print(*nice_indices)\n\ndef main():\n    n, a = get_input()\n    nice_indices = get_indices(n, a)\n    print_output(nice_indices)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 18:54:13.742545 REASON stop
2022-04-16 18:54:13.766280 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate sum of all elements\nsum_a = sum(a)\n\n# Initialize an empty set\nnice_indices = set()\n\nfor i, a_i in enumerate(a):\n    # Find the sum of all elements except the i-th\n    sum_without_i = sum_a - a_i\n\n    # If the i-th element is equal to the sum of all other elements\n    if a_i == sum_without_i:\n        # Add the i-th index to nice_indices\n        nice_indices.add(i + 1)\n\n# Print the size of nice_indices\nprint(len(nice_indices))\n\n# If there are nice indices\nif len(nice_indices) > 0:\n    # Print them in one line\n    print(*nice_indices)"
}
2022-04-16 18:54:13.766431 REASON stop
2022-04-16 18:54:13.767755 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-16 18:54:13.767879 REASON stop
2022-04-16 18:54:13.784674 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    res = []\n    for i in range(n):\n        if 2 * a[i] == s:\n            res.append(i + 1)\n    print(len(res))\n    print(*res)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 18:54:13.784819 REASON stop
2022-04-16 18:54:13.786475 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# read input\nn = int(input())\na = list(map(int, input().split()))\n\n# find the sum of all numbers in the array\ntotal = sum(a)\n\n# find the number of nice indices\nnice = 0\n\nfor i in range(n):\n    # if the sum of all numbers except the ith number equals the ith number, then it is a nice index\n    if a[i] == (total - a[i]):\n        nice += 1\n\n# print the number of nice indices\nprint(nice)\n\n# print the nice indices\nfor i in range(n):\n    if a[i] == (total - a[i]):\n        print(i + 1, end=\" \")"
}
2022-04-16 18:54:13.786609 REASON stop
2022-04-16 18:54:13.787786 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef remove_and_test(array, element):\n    array.remove(element)\n    return sum(array) == element\n\nif __name__ == \"__main__\":\n    n = int(input())\n    array = [int(i) for i in input().split()]\n    array_sum = sum(array)\n    nice_indices = []\n    for index, element in enumerate(array):\n        if remove_and_test(array, element):\n            nice_indices.append(index + 1)\n    print(len(nice_indices))\n    print(*nice_indices)\n\n\n\n##################################################\n#\n#\n# from collections import deque\n#\n#\n# def solve(array, array_sum, index=0):\n#     if index == len(array):\n#         return 0\n#     if array_sum - array[index] == array[index]:\n#         return 1 + solve(array, array_sum, index + 1)\n#     return solve(array, array_sum, index + 1)\n#\n# def solve(array, array_sum, index=0):\n#     if index == len(array):\n#         return 0\n#     if array_sum - array[index] == array[index]:\n#         return 1 + solve(array, array_sum, index + 1)\n#     return solve(array, array_sum, index + 1)\n#\n# def solve(array, array_sum):\n#     array_sum = sum(array)\n#     return sum([1 if array_sum - element == element else 0 for element in array])\n#\n#\n#\n# def solve(array, array_sum):\n#     array_sum = sum(array)\n#     nice_indices = []\n#     for index, element in enumerate(array):\n#         if array_sum - element == element:\n#             nice_indices.append(index + 1)\n#     return nice_indices\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     array = [int(i) for i in input().split()]\n#     array_sum = sum(array)\n#     nice_indices = solve(array, array_sum)\n#     print(len(nice_indices))\n#     print(*nice_indices)\n#\n#\n#\n# def solve(array_sum, array):\n#     array_sum = sum(array)\n#     return sum([1 if array_sum - element == element else 0 for element in array])\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     array = [int(i) for i in input().split()]\n#     array_sum = sum(array)\n#     print(solve(array, array_sum))\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
}
2022-04-16 18:54:13.787929 REASON length
