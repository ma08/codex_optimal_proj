["", "\n\n\ndef is_acceptable(arr, k):\n    for i in range(len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) < k:\n            return False\n    return True\n\n\ndef find_max_acceptable_k(arr):\n    k = 0\n    while True:\n        if is_acceptable(arr, k):\n            return k\n        k += 1\n\n\ndef main():\n    n, m = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(arr[j][i])\n        k = find_max_acceptable_k(col)\n        if k == 0:\n            break\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m = map(int, input().split())\n\nrows = []\nfor _ in range(n):\n    row = list(map(int, input().split()))\n    rows.append(row)\n\ns = []\nfor i in range(m):\n    for j in range(n):\n        s.append(rows[j][i])\n\nmax_diff = 0\nfor i in range(1, len(s)):\n    max_diff = max(max_diff, abs(s[i] - s[i-1]))\n\nprint(max_diff)", "\n\n# def bestTraversal(matrix):\n#     rows = len(matrix)\n#     cols = len(matrix[0])\n#     col_max = []\n#     col_min = []\n#     for i in range(cols):\n#         min_val = 1000000000\n#         max_val = 0\n#         for j in range(rows):\n#             if matrix[j][i] > max_val:\n#                 max_val = matrix[j][i]\n#             if matrix[j][i] < min_val:\n#                 min_val = matrix[j][i]\n#         col_max.append(max_val)\n#         col_min.append(min_val)\n#     print(col_max)\n#     print(col_min)\n#\n#     best = 0\n#     for i in range(cols):\n#         for j in range(i + 1, cols):\n#             best = max(best, col_max[i] - col_min[j], col_max[j] - col_min[i])\n#\n#     return best\n#\n#\n# n, m = [int(x) for x in input().split()]\n# matrix = []\n# for i in range(n):\n#     matrix.append([int(x) for x in input().split()])\n#\n# print(bestTraversal(matrix))\n\n\ndef bestTraversal(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    col_max = []\n    col_min = []\n    for i in range(cols):\n        min_val = 1000000000\n        max_val = 0\n        for j in range(rows):\n            if matrix[j][i] > max_val:\n                max_val = matrix[j][i]\n            if matrix[j][i] < min_val:\n                min_val = matrix[j][i]\n        col_max.append(max_val)\n        col_min.append(min_val)\n    print(col_max)\n    print(col_min)\n\n    best = 0\n    for i in range(cols):\n        for j in range(i + 1, cols):\n            best = max(best, col_max[i] - col_min[j], col_max[j] - col_min[i])\n\n    return best\n\n\nn, m = [int(x) for x in input().split()]\nmatrix = []\nfor i in range(n):\n    matrix.append([int(x) for x in input().split()])\n\nprint(bestTraversal(matrix))", "\n\nimport math\n\n# TODO:\n# \u0431\u044b\u043b\u043e \u0431\u044b \u043a\u0440\u0443\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a.\n# \u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 k \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044e.\n# \u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0438\u0445 \u043e\u0431\u0445\u043e\u0434\u0430 \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c.\n# \u043d\u043e \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u0434\u043e\u043b\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a.\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f k \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043e\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044e.\n# \u0435\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0433\u043e \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443.\n\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 k \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044e.\ndef check_k(k, a, n, m):\n    # \u0431\u0435\u0440\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 a \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0432 \u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n    # \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 indices\n    indices = [i for i in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i][0] > a[j][0]:\n                # \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\n                a[i], a[j] = a[j], a[i]\n                # \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\n                indices[i], indices[j] = indices[j], indices[i]\n    # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 b \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u044b a\n    b = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[indices[i]][j]\n    # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 k \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044e\n    for j in range(m):\n        for i in range(n - 1):\n            if abs(b[i][j] - b[i + 1][j]) < k:\n                return False\n    return True\n\n\ndef main():\n    # \u0432\u0432\u043e\u0434\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 a\n    n, m = map(int, input().split())\n    a = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        a[i] = [int(j) for j in input().split()]\n    # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f k \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043e\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044e\n    for k in range(n * m):\n        if check_k(k, a, n, m):\n            print(k)\n            return\n    print(\"\u042d\u0442\u043e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\")\n\n\nmain()", "\n\nimport sys\nimport math\nimport itertools\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    a = [[int(x) for x in line.split()] for line in lines[1:]]\n    b = [[a[i][j] for i in range(n)] for j in range(m)]\n    s = [x for bb in b for x in bb]\n    print(max(abs(s[i] - s[i+1]) for i in range(len(s) - 1)))\n\nif __name__ == '__main__':\n    main()"]