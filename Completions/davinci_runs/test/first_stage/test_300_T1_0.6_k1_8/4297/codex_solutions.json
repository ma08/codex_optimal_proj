["\n\nimport unittest\n\n\nclass TestMinPosInt(unittest.TestCase):\n\n    def test_1(self):\n        n = 3\n        expected = 6\n        actual = min_pos_int(n)\n        self.assertEqual(expected, actual)\n\n    def test_2(self):\n        n = 2\n        expected = 2\n        actual = min_pos_int(n)\n        self.assertEqual(expected, actual)\n\n    def test_3(self):\n        n = 4\n        expected = 4\n        actual = min_pos_int(n)\n        self.assertEqual(expected, actual)\n\n    def test_4(self):\n        n = 6\n        expected = 6\n        actual = min_pos_int(n)\n        self.assertEqual(expected, actual)\n\n\ndef min_pos_int(n):\n    return n * 2\n\n\nif __name__ == '__main__':\n    unittest.main()", "\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\n\n# print(math.gcd(2, N))\n# print(math.gcd(N, 2))\n\nprint(lcm(2, N))", "\n\nprint(2*int(input()))", "\n\nprint(int(input()) * 2)", "\nN = int(input())\n\nif N % 2 == 0:\n    print(N)\nelse:\n    print(2 * N)", "\n\nN = int(input())\nprint(2*N)", "\nprint((lambda n: 4 if n%2==0 else 2*n)(int(input())))", "\n\ndef main():\n    n = int(input())\n\n    if n % 2 == 0:\n        print(n)\n    else:\n        print(2*n)\n\nif __name__ == \"__main__\":\n    main()"]