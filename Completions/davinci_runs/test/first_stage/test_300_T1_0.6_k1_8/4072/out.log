2022-04-16 19:16:04.127603 """
-----Input-----

The input contains a single integer a (10 ≤ a ≤ 999).


-----Output-----

Output 0 or 1.


-----Examples-----
Input
13

Output
1

Input
927

Output
1

Input
48

Output
0
"""
2022-04-16 19:16:04.127612 --------------------------
2022-04-16 19:17:43.395808 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\na = int(input())\n\nresult = 0\n\nif a % 13 == 0:\n    result = 1\n\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\nn = int(input())\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(1 if is_prime(n) else 0)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\na = int(input())\n\nif (a < 10):\n    print(0)\nelif (a < 100):\n    print(1)\nelif (a < 1000):\n    print(1)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\na = int(input())\nif (a % 13 == 0):\n    print(1)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef lucky(num):\n    num=str(num)\n    if len(num)==1:\n        if num[0] in ['4','7']:\n            return 1\n        else:\n            return 0\n    else:\n        if num[0] in ['4','7'] and num[1] in ['4','7']:\n            return 1\n        else:\n            return 0\n\nprint(lucky(int(input())))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Test input\nnumber = int(input())\n\n# Get last digit\nlast_digit = number % 10\n\n# Check if last digit is 3, 5 or 7\nif last_digit == 3 or last_digit == 5 or last_digit == 7:\n    print(1)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef is_lucky(n):\n    n = str(n)\n    return sum([int(n[i]) for i in range(3)]) == sum([int(n[i]) for i in range(3,6)])\n\nprint(is_lucky(int(input())))"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# Test Cases\n# 1\n# 0\n# 10\n# 1\n# 48\n# 0\n# 927\n# 1\n# 13\n# 1\n# 100\n# 1\n# 200\n# 1\n# 300\n# 1\n# 400\n# 1\n# 500\n# 1\n# 600\n# 1\n# 700\n# 1\n# 800\n# 1\n# 900\n# 1\n# 999\n# 1\n# 998\n# 0\n# 997\n# 0\n# 996\n# 0\n# 995\n# 0\n# 994\n# 0\n# 993\n# 0\n# 992\n# 0\n# 991\n# 0\n# 990\n# 0\n# 989\n# 0\n# 988\n# 0\n# 987\n# 0\n# 986\n# 0\n# 985\n# 0\n# 984\n# 0\n# 983\n# 0\n# 982\n# 0\n# 981\n# 0\n# 980\n# 0\n# 979\n# 0\n# 978\n# 0\n# 977\n# 0\n# 976\n# 0\n# 975\n# 0\n# 974\n# 0\n# 973\n# 0\n# 972\n# 0\n# 971\n# 0\n# 970\n# 0\n# 969\n# 0\n# 968\n# 0\n# 967\n# 0\n# 966\n# 0\n# 965\n# 0\n# 964\n# 0\n# 963\n# 0\n# 962\n# 0\n# 961\n# 0\n# 960\n# 0\n# 959\n# 0\n# 958\n# 0\n# 957\n# 0\n# 956\n# 0\n# 955\n# 0\n# 954\n# 0\n# 953\n# 0\n# 952\n# 0\n# 951\n# 0\n# 950\n# 0\n# 949\n# 0\n# 948\n# 0\n# 947\n# 0\n# 946\n# 0\n# 945\n# 0\n# 944\n# 0\n# 943\n# 0\n# 942\n# 0\n# 941\n# 0\n# 940\n# 0\n# 939\n# 0\n# 938\n# 0\n# 937\n# 0\n# 936\n# 0\n# 935\n# 0\n# 934\n# 0\n# 933\n# 0\n# 932\n# 0\n# 931\n# 0\n# 930\n# 0\n# 929\n# 0\n# 928\n# 0\n# 927\n# 1\n# 926\n# 0\n# 925\n# 0\n# 924\n# 0\n# 923\n# 0\n# 922\n# 0\n# 921\n# 0\n# 920\n# 0\n# 919\n# 0\n# 918\n# 0\n# 917\n# 0\n# 916\n# 0\n# 915\n# 0\n# 914\n# 0\n# 913\n# 0\n# 912\n# 0\n# 911\n# 0\n# 910\n# 0\n# 909\n# 0\n# 908\n# 0\n# 907\n# 0\n# 906\n# 0\n# 905\n# 0\n# 904\n# 0\n# 903\n# 0\n# 902\n# 0\n# 901\n# 0\n# 900\n# 1\n# 899\n# 0\n# 898\n# 0\n# 897\n# 0\n# 896\n# 0\n# 895\n# 0\n# 894\n# 0\n# 893\n# 0\n# 892\n# 0\n# 891\n# 0\n# 890\n# 0\n# 889\n# 0\n# 888\n# 0\n# 887\n# 0\n# 886\n# 0\n# 885\n# 0\n# 884\n# 0\n# 883\n# 0\n# 882\n# 0\n# 881\n# 0\n# 880\n# 0\n# 879\n# 0\n# 878\n# 0\n# 877\n# 0\n# 876\n# 0\n# 875\n# 0\n# 874\n# 0\n# 873\n# 0\n# 872\n# 0\n# 871\n# 0\n# 870\n# 0\n# 869\n# 0\n# 868\n# 0\n# 867\n# 0\n# 866\n# 0\n# 865\n# 0\n# 864\n# 0\n# 863\n# 0\n# 862\n# 0\n# 861\n# 0\n# 860\n# 0\n# 859\n# 0\n# 858\n# 0\n# 857\n# 0\n# 856\n# 0\n# 855\n# 0\n# 854\n# 0\n# 853\n# 0\n# 852\n# 0\n# 851\n# 0\n# 850\n# 0\n# 849\n# 0\n# 848\n# 0\n# 847\n# 0\n# 846\n# 0\n# 845\n# 0\n# 844\n# 0\n# 843\n# 0\n# 842\n# 0\n# 841\n# 0\n# 840\n# 0\n# 839\n# 0\n# 838\n# 0\n# 837\n# 0\n# 836\n# 0\n# 835\n# 0\n# 834\n# 0\n# 833\n# 0\n# 832\n# 0\n# 831\n# 0\n# 830\n# 0\n# 829\n# 0\n# 828\n# 0\n# 827\n# 0\n# 826\n# 0\n# 825\n# 0\n# 824\n# 0\n# 823\n# 0\n# 822\n# 0\n# 821\n# 0\n# 820\n# 0\n# 819\n# 0\n# 818\n# 0\n# 817\n# 0\n# 816\n# 0\n# 815\n# 0\n# 814\n# 0\n# 813\n# 0\n# 812\n# 0\n# 811\n# 0\n# 810\n# 0\n# 809\n# 0\n# 808\n# 0\n# 807\n# 0\n# 806\n# 0\n# 805\n# 0\n# 804\n# 0\n# 803\n# 0\n# 802\n# 0\n# 801\n# 0\n# 800\n# 1\n# 799\n# 0\n# 798\n# 0\n# 797\n# 0\n# 796\n# 0\n# 795\n# 0\n# 794\n# 0\n# 793\n# 0\n# 792\n# 0\n# 791\n# 0\n# 790\n# 0\n# 789\n# 0\n# 788\n# 0\n# 787\n# 0\n# 786\n# 0\n# 785\n# 0\n# 784\n# 0\n# 783\n# 0\n# 782\n# 0\n# 781\n# 0\n# 780\n# 0\n# 779\n# 0\n# 778\n# 0\n# 777\n# 0\n# 776\n# 0\n# 775\n# 0\n# 774\n# 0\n# 773\n# 0\n# 772\n# 0\n# 771\n# 0\n# 770\n# 0\n# 769\n# 0\n# 768\n# 0\n# 767\n# 0\n# 766\n# 0\n# 765\n# 0\n# 764\n# 0\n# 763\n# 0\n# 762\n# 0\n# 761\n# 0\n# 760\n# 0\n# 759\n# 0\n# 758\n# 0\n# 757\n# 0\n# 756\n# 0\n# 755\n# 0\n# 754\n# 0\n# 753\n# 0\n# 752\n# 0\n# 751\n# 0\n# 750\n# 0\n# 749\n# 0\n# 748\n# 0\n# 747\n# 0\n# 746\n# 0\n# 745\n# 0\n# 744\n# 0\n# 743\n# 0\n# 742\n# 0\n# 741\n# 0\n# 740\n# 0\n# 739\n# 0\n# 738\n# 0\n# 737\n# 0\n# 736\n# 0\n# 735\n# 0\n# 734\n# 0\n# 733\n# 0\n# 732\n# 0\n# 731\n# 0\n# 730\n# 0\n# 729\n# 0\n# 728\n# 0\n# 727\n# 0\n# 726\n# 0\n# 725\n# 0\n# 724\n# 0\n# 723\n# 0\n# 722\n# 0\n# 721\n# 0\n# 720\n# 0\n# 719\n# 0\n# 718\n# 0\n# 717\n# 0\n# 716\n# 0\n# 715\n# 0\n# 714\n# 0\n# 713\n# 0\n# 712\n# 0\n# 711\n# 0\n# 710\n# 0\n# 709\n# 0\n# 708\n# 0\n# 707\n# 0\n# 706\n# 0\n# 705\n# 0\n# 704\n# 0\n# 703\n# 0\n# 702\n# 0\n# 701\n# 0\n# 700\n# 1\n# 699\n# 0\n# 698\n# 0\n# 697\n# 0\n# 696\n# 0\n# 695\n# 0\n# 694\n# 0\n# 693\n# 0\n# 692\n# 0\n# 691\n# 0\n# 690\n# 0\n# 689\n# 0\n# 688\n# 0\n# 687\n# 0\n# 686\n# 0\n# 685\n# 0\n# 684\n# 0\n# 683\n# 0\n# 682\n# 0\n# 681\n# 0\n# 680\n# 0\n# 679\n# 0\n# 678\n# 0\n# 677\n# 0\n# 676\n# 0\n# 675\n# 0\n# 674\n# 0\n# 673\n# 0\n# 672\n# 0\n# 671\n# 0\n# 670\n# 0\n# 669\n# 0\n# 668\n# 0\n# 667\n# 0\n# 666\n# 0\n# 665\n# 0\n# 664\n# 0\n# 663\n# 0\n# 662\n# 0\n# 661\n# 0\n# 660\n# 0\n# 659\n# 0\n# 658\n# 0\n# 657\n# 0\n# 656\n# 0\n# 655\n# 0\n# 654\n# 0\n# 653\n# 0\n# 652\n# 0\n# 651\n# 0\n# 650\n# 0\n# 649\n# 0\n# 648\n# 0\n# 647\n# 0\n# 646\n# 0\n# 645\n# 0\n# 644\n# 0\n# 643\n# 0\n# 642\n# 0\n# 641\n# 0\n# 640\n# 0\n# 639\n# 0\n# 638\n# 0\n# 637\n# 0\n# 636\n# 0\n# 635\n# 0\n# 634\n# 0\n# 633\n# 0\n# 632\n# 0\n# 631\n# 0\n# 630\n# 0\n# 629\n# 0\n# 628\n# 0\n# 627\n# 0\n# 626\n# 0\n# 625\n# 0\n# 624\n# 0\n# 623\n# 0\n# 622\n# 0\n# 621\n# 0\n# 620\n# 0\n# 619\n# 0\n# 618\n# 0\n# 617\n# 0\n# 616\n# 0\n# 615\n# 0\n# 614\n# 0\n# 613\n# 0\n# 612\n# 0\n# 611\n# 0\n# 610\n# 0\n# 609\n# 0\n# 608\n# 0\n# 607\n# 0\n# 606\n# 0\n# 605\n# 0\n# 604\n# 0\n# 603\n# 0\n# 602\n# 0\n# 601\n# 0\n# 600\n# 1\n# 599\n# 0\n# 598\n# 0\n# 597\n# 0\n# 596\n# 0\n# 595\n# 0\n# 594\n# 0\n# 593\n# 0\n# 592\n# 0\n# 591\n# 0\n# 590\n# 0\n# 589\n# 0\n# 588\n# 0\n# 587\n# 0\n# 586\n# 0\n# 585\n# 0\n# 584\n# 0\n# 583\n# 0\n# 582\n# 0\n# 581\n# 0\n# 580\n# 0\n# 579\n# 0\n# 578\n# 0\n# 577\n# 0\n# 576\n# 0\n# 575\n# 0\n# 574\n# 0\n# 573\n# 0\n# 572\n# 0\n# 571\n# 0\n# 570\n# 0\n# 569\n# 0\n# 568\n# 0\n# 567\n# 0\n# 566\n# 0\n# 565\n# 0\n# 564\n# 0\n# 563\n# 0\n# 562\n# 0\n# 561\n# 0\n# 560\n# 0\n# 559\n# 0\n# 558\n# 0\n# 557\n# 0\n# 556\n# 0\n# 555\n# 0\n# 554\n# 0\n# 553\n# 0\n# 552\n# 0\n# 551\n# 0\n# 550\n# 0\n# 549\n# 0"
    }
  ],
  "created": 1650136564,
  "id": "cmpl-4xiBo063mXhJlag7TSMuSEZfrdrtU",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:17:43.396175 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\na = int(input())\n\nresult = 0\n\nif a % 13 == 0:\n    result = 1\n\nprint(result)"
}
2022-04-16 19:17:43.396285 REASON stop
2022-04-16 19:17:43.438649 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\nn = int(input())\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(1 if is_prime(n) else 0)"
}
2022-04-16 19:17:43.438838 REASON stop
2022-04-16 19:17:43.439401 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\na = int(input())\n\nif (a < 10):\n    print(0)\nelif (a < 100):\n    print(1)\nelif (a < 1000):\n    print(1)\nelse:\n    print(0)"
}
2022-04-16 19:17:43.439467 REASON stop
2022-04-16 19:17:43.452912 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\na = int(input())\nif (a % 13 == 0):\n    print(1)\nelse:\n    print(0)"
}
2022-04-16 19:17:43.453018 REASON stop
2022-04-16 19:17:43.488090 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef lucky(num):\n    num=str(num)\n    if len(num)==1:\n        if num[0] in ['4','7']:\n            return 1\n        else:\n            return 0\n    else:\n        if num[0] in ['4','7'] and num[1] in ['4','7']:\n            return 1\n        else:\n            return 0\n\nprint(lucky(int(input())))"
}
2022-04-16 19:17:43.488204 REASON stop
2022-04-16 19:17:43.489278 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Test input\nnumber = int(input())\n\n# Get last digit\nlast_digit = number % 10\n\n# Check if last digit is 3, 5 or 7\nif last_digit == 3 or last_digit == 5 or last_digit == 7:\n    print(1)\nelse:\n    print(0)"
}
2022-04-16 19:17:43.489440 REASON stop
2022-04-16 19:17:43.490038 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef is_lucky(n):\n    n = str(n)\n    return sum([int(n[i]) for i in range(3)]) == sum([int(n[i]) for i in range(3,6)])\n\nprint(is_lucky(int(input())))"
}
2022-04-16 19:17:43.490121 REASON stop
2022-04-16 19:17:43.490845 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# Test Cases\n# 1\n# 0\n# 10\n# 1\n# 48\n# 0\n# 927\n# 1\n# 13\n# 1\n# 100\n# 1\n# 200\n# 1\n# 300\n# 1\n# 400\n# 1\n# 500\n# 1\n# 600\n# 1\n# 700\n# 1\n# 800\n# 1\n# 900\n# 1\n# 999\n# 1\n# 998\n# 0\n# 997\n# 0\n# 996\n# 0\n# 995\n# 0\n# 994\n# 0\n# 993\n# 0\n# 992\n# 0\n# 991\n# 0\n# 990\n# 0\n# 989\n# 0\n# 988\n# 0\n# 987\n# 0\n# 986\n# 0\n# 985\n# 0\n# 984\n# 0\n# 983\n# 0\n# 982\n# 0\n# 981\n# 0\n# 980\n# 0\n# 979\n# 0\n# 978\n# 0\n# 977\n# 0\n# 976\n# 0\n# 975\n# 0\n# 974\n# 0\n# 973\n# 0\n# 972\n# 0\n# 971\n# 0\n# 970\n# 0\n# 969\n# 0\n# 968\n# 0\n# 967\n# 0\n# 966\n# 0\n# 965\n# 0\n# 964\n# 0\n# 963\n# 0\n# 962\n# 0\n# 961\n# 0\n# 960\n# 0\n# 959\n# 0\n# 958\n# 0\n# 957\n# 0\n# 956\n# 0\n# 955\n# 0\n# 954\n# 0\n# 953\n# 0\n# 952\n# 0\n# 951\n# 0\n# 950\n# 0\n# 949\n# 0\n# 948\n# 0\n# 947\n# 0\n# 946\n# 0\n# 945\n# 0\n# 944\n# 0\n# 943\n# 0\n# 942\n# 0\n# 941\n# 0\n# 940\n# 0\n# 939\n# 0\n# 938\n# 0\n# 937\n# 0\n# 936\n# 0\n# 935\n# 0\n# 934\n# 0\n# 933\n# 0\n# 932\n# 0\n# 931\n# 0\n# 930\n# 0\n# 929\n# 0\n# 928\n# 0\n# 927\n# 1\n# 926\n# 0\n# 925\n# 0\n# 924\n# 0\n# 923\n# 0\n# 922\n# 0\n# 921\n# 0\n# 920\n# 0\n# 919\n# 0\n# 918\n# 0\n# 917\n# 0\n# 916\n# 0\n# 915\n# 0\n# 914\n# 0\n# 913\n# 0\n# 912\n# 0\n# 911\n# 0\n# 910\n# 0\n# 909\n# 0\n# 908\n# 0\n# 907\n# 0\n# 906\n# 0\n# 905\n# 0\n# 904\n# 0\n# 903\n# 0\n# 902\n# 0\n# 901\n# 0\n# 900\n# 1\n# 899\n# 0\n# 898\n# 0\n# 897\n# 0\n# 896\n# 0\n# 895\n# 0\n# 894\n# 0\n# 893\n# 0\n# 892\n# 0\n# 891\n# 0\n# 890\n# 0\n# 889\n# 0\n# 888\n# 0\n# 887\n# 0\n# 886\n# 0\n# 885\n# 0\n# 884\n# 0\n# 883\n# 0\n# 882\n# 0\n# 881\n# 0\n# 880\n# 0\n# 879\n# 0\n# 878\n# 0\n# 877\n# 0\n# 876\n# 0\n# 875\n# 0\n# 874\n# 0\n# 873\n# 0\n# 872\n# 0\n# 871\n# 0\n# 870\n# 0\n# 869\n# 0\n# 868\n# 0\n# 867\n# 0\n# 866\n# 0\n# 865\n# 0\n# 864\n# 0\n# 863\n# 0\n# 862\n# 0\n# 861\n# 0\n# 860\n# 0\n# 859\n# 0\n# 858\n# 0\n# 857\n# 0\n# 856\n# 0\n# 855\n# 0\n# 854\n# 0\n# 853\n# 0\n# 852\n# 0\n# 851\n# 0\n# 850\n# 0\n# 849\n# 0\n# 848\n# 0\n# 847\n# 0\n# 846\n# 0\n# 845\n# 0\n# 844\n# 0\n# 843\n# 0\n# 842\n# 0\n# 841\n# 0\n# 840\n# 0\n# 839\n# 0\n# 838\n# 0\n# 837\n# 0\n# 836\n# 0\n# 835\n# 0\n# 834\n# 0\n# 833\n# 0\n# 832\n# 0\n# 831\n# 0\n# 830\n# 0\n# 829\n# 0\n# 828\n# 0\n# 827\n# 0\n# 826\n# 0\n# 825\n# 0\n# 824\n# 0\n# 823\n# 0\n# 822\n# 0\n# 821\n# 0\n# 820\n# 0\n# 819\n# 0\n# 818\n# 0\n# 817\n# 0\n# 816\n# 0\n# 815\n# 0\n# 814\n# 0\n# 813\n# 0\n# 812\n# 0\n# 811\n# 0\n# 810\n# 0\n# 809\n# 0\n# 808\n# 0\n# 807\n# 0\n# 806\n# 0\n# 805\n# 0\n# 804\n# 0\n# 803\n# 0\n# 802\n# 0\n# 801\n# 0\n# 800\n# 1\n# 799\n# 0\n# 798\n# 0\n# 797\n# 0\n# 796\n# 0\n# 795\n# 0\n# 794\n# 0\n# 793\n# 0\n# 792\n# 0\n# 791\n# 0\n# 790\n# 0\n# 789\n# 0\n# 788\n# 0\n# 787\n# 0\n# 786\n# 0\n# 785\n# 0\n# 784\n# 0\n# 783\n# 0\n# 782\n# 0\n# 781\n# 0\n# 780\n# 0\n# 779\n# 0\n# 778\n# 0\n# 777\n# 0\n# 776\n# 0\n# 775\n# 0\n# 774\n# 0\n# 773\n# 0\n# 772\n# 0\n# 771\n# 0\n# 770\n# 0\n# 769\n# 0\n# 768\n# 0\n# 767\n# 0\n# 766\n# 0\n# 765\n# 0\n# 764\n# 0\n# 763\n# 0\n# 762\n# 0\n# 761\n# 0\n# 760\n# 0\n# 759\n# 0\n# 758\n# 0\n# 757\n# 0\n# 756\n# 0\n# 755\n# 0\n# 754\n# 0\n# 753\n# 0\n# 752\n# 0\n# 751\n# 0\n# 750\n# 0\n# 749\n# 0\n# 748\n# 0\n# 747\n# 0\n# 746\n# 0\n# 745\n# 0\n# 744\n# 0\n# 743\n# 0\n# 742\n# 0\n# 741\n# 0\n# 740\n# 0\n# 739\n# 0\n# 738\n# 0\n# 737\n# 0\n# 736\n# 0\n# 735\n# 0\n# 734\n# 0\n# 733\n# 0\n# 732\n# 0\n# 731\n# 0\n# 730\n# 0\n# 729\n# 0\n# 728\n# 0\n# 727\n# 0\n# 726\n# 0\n# 725\n# 0\n# 724\n# 0\n# 723\n# 0\n# 722\n# 0\n# 721\n# 0\n# 720\n# 0\n# 719\n# 0\n# 718\n# 0\n# 717\n# 0\n# 716\n# 0\n# 715\n# 0\n# 714\n# 0\n# 713\n# 0\n# 712\n# 0\n# 711\n# 0\n# 710\n# 0\n# 709\n# 0\n# 708\n# 0\n# 707\n# 0\n# 706\n# 0\n# 705\n# 0\n# 704\n# 0\n# 703\n# 0\n# 702\n# 0\n# 701\n# 0\n# 700\n# 1\n# 699\n# 0\n# 698\n# 0\n# 697\n# 0\n# 696\n# 0\n# 695\n# 0\n# 694\n# 0\n# 693\n# 0\n# 692\n# 0\n# 691\n# 0\n# 690\n# 0\n# 689\n# 0\n# 688\n# 0\n# 687\n# 0\n# 686\n# 0\n# 685\n# 0\n# 684\n# 0\n# 683\n# 0\n# 682\n# 0\n# 681\n# 0\n# 680\n# 0\n# 679\n# 0\n# 678\n# 0\n# 677\n# 0\n# 676\n# 0\n# 675\n# 0\n# 674\n# 0\n# 673\n# 0\n# 672\n# 0\n# 671\n# 0\n# 670\n# 0\n# 669\n# 0\n# 668\n# 0\n# 667\n# 0\n# 666\n# 0\n# 665\n# 0\n# 664\n# 0\n# 663\n# 0\n# 662\n# 0\n# 661\n# 0\n# 660\n# 0\n# 659\n# 0\n# 658\n# 0\n# 657\n# 0\n# 656\n# 0\n# 655\n# 0\n# 654\n# 0\n# 653\n# 0\n# 652\n# 0\n# 651\n# 0\n# 650\n# 0\n# 649\n# 0\n# 648\n# 0\n# 647\n# 0\n# 646\n# 0\n# 645\n# 0\n# 644\n# 0\n# 643\n# 0\n# 642\n# 0\n# 641\n# 0\n# 640\n# 0\n# 639\n# 0\n# 638\n# 0\n# 637\n# 0\n# 636\n# 0\n# 635\n# 0\n# 634\n# 0\n# 633\n# 0\n# 632\n# 0\n# 631\n# 0\n# 630\n# 0\n# 629\n# 0\n# 628\n# 0\n# 627\n# 0\n# 626\n# 0\n# 625\n# 0\n# 624\n# 0\n# 623\n# 0\n# 622\n# 0\n# 621\n# 0\n# 620\n# 0\n# 619\n# 0\n# 618\n# 0\n# 617\n# 0\n# 616\n# 0\n# 615\n# 0\n# 614\n# 0\n# 613\n# 0\n# 612\n# 0\n# 611\n# 0\n# 610\n# 0\n# 609\n# 0\n# 608\n# 0\n# 607\n# 0\n# 606\n# 0\n# 605\n# 0\n# 604\n# 0\n# 603\n# 0\n# 602\n# 0\n# 601\n# 0\n# 600\n# 1\n# 599\n# 0\n# 598\n# 0\n# 597\n# 0\n# 596\n# 0\n# 595\n# 0\n# 594\n# 0\n# 593\n# 0\n# 592\n# 0\n# 591\n# 0\n# 590\n# 0\n# 589\n# 0\n# 588\n# 0\n# 587\n# 0\n# 586\n# 0\n# 585\n# 0\n# 584\n# 0\n# 583\n# 0\n# 582\n# 0\n# 581\n# 0\n# 580\n# 0\n# 579\n# 0\n# 578\n# 0\n# 577\n# 0\n# 576\n# 0\n# 575\n# 0\n# 574\n# 0\n# 573\n# 0\n# 572\n# 0\n# 571\n# 0\n# 570\n# 0\n# 569\n# 0\n# 568\n# 0\n# 567\n# 0\n# 566\n# 0\n# 565\n# 0\n# 564\n# 0\n# 563\n# 0\n# 562\n# 0\n# 561\n# 0\n# 560\n# 0\n# 559\n# 0\n# 558\n# 0\n# 557\n# 0\n# 556\n# 0\n# 555\n# 0\n# 554\n# 0\n# 553\n# 0\n# 552\n# 0\n# 551\n# 0\n# 550\n# 0\n# 549\n# 0"
}
2022-04-16 19:17:43.490963 REASON length
