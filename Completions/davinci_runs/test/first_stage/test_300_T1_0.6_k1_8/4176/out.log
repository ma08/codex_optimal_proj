2022-04-16 20:05:16.840740 """
Takahashi is organizing a party.
At the party, each guest will receive one or more snack pieces.
Takahashi predicts that the number of guests at this party will be A or B.
Find the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.
We assume that a piece cannot be divided and distributed to multiple guests.

-----Constraints-----
 - 1 \leq A, B \leq 10^5
 - A \neq B
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
A B

-----Output-----
Print the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.

-----Sample Input-----
2 3

-----Sample Output-----
6

When we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.
"""
2022-04-16 20:05:16.840762 --------------------------
2022-04-16 20:05:37.961497 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n#\n# def lcm(a, b):\n#     \"\"\"\n#     Return the lowest common multiple of a and b.\n#     \"\"\"\n#     if a < b:\n#         a, b = b, a\n#     for i in range(b, a * b + 1, b):\n#         if i % a == 0:\n#             return i\n#     return a * b\n#\n#\n# def main():\n#     a, b = map(int, input().split())\n#     print(lcm(a, b))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n# ==========\n# Solution 2\n# ==========\n\nimport fractions\n\n\ndef lcm(a, b):\n    \"\"\"\n    Return the lowest common multiple of a and b.\n    \"\"\"\n    return a * b // fractions.gcd(a, b)\n\n\ndef main():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom math import gcd\n\na, b = map(int, input().split())\n\nprint(a * b // gcd(a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\n\n# \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u4e92\u9664\u6cd5\u3092\u7528\u3044\u308b\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(a * b // gcd(a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\na, b = map(int, input().split())\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# The minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\nprint(a*b//gcd(a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    a, b = map(int, input().split())\n    print((a * b) // gcd(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef get_snack_num(a, b):\n    return a * b // math.gcd(a, b)\n\n\na, b = map(int, input().split())\nprint(get_snack_num(a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na, b = map(int, input().split())\nprint(lcm(a, b))"
    }
  ],
  "created": 1650139516,
  "id": "cmpl-4xixQ3HyGkuIUuPwcyLqAMpBa9Gxa",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:05:37.961787 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# ==========\n# Solution 1\n# ==========\n#\n# def lcm(a, b):\n#     \"\"\"\n#     Return the lowest common multiple of a and b.\n#     \"\"\"\n#     if a < b:\n#         a, b = b, a\n#     for i in range(b, a * b + 1, b):\n#         if i % a == 0:\n#             return i\n#     return a * b\n#\n#\n# def main():\n#     a, b = map(int, input().split())\n#     print(lcm(a, b))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n# ==========\n# Solution 2\n# ==========\n\nimport fractions\n\n\ndef lcm(a, b):\n    \"\"\"\n    Return the lowest common multiple of a and b.\n    \"\"\"\n    return a * b // fractions.gcd(a, b)\n\n\ndef main():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:05:37.961824 REASON stop
2022-04-16 20:05:38.017436 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom math import gcd\n\na, b = map(int, input().split())\n\nprint(a * b // gcd(a, b))"
}
2022-04-16 20:05:38.017615 REASON stop
2022-04-16 20:05:38.018096 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\n\n# \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u4e92\u9664\u6cd5\u3092\u7528\u3044\u308b\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(a * b // gcd(a, b))"
}
2022-04-16 20:05:38.018172 REASON stop
2022-04-16 20:05:38.035579 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\na, b = map(int, input().split())\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# The minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\nprint(a*b//gcd(a, b))"
}
2022-04-16 20:05:38.035741 REASON stop
2022-04-16 20:05:38.036599 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    a, b = map(int, input().split())\n    print((a * b) // gcd(a, b))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:05:38.036731 REASON stop
2022-04-16 20:05:38.037641 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef get_snack_num(a, b):\n    return a * b // math.gcd(a, b)\n\n\na, b = map(int, input().split())\nprint(get_snack_num(a, b))"
}
2022-04-16 20:05:38.037772 REASON stop
2022-04-16 20:05:38.046101 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:05:38.046227 REASON stop
2022-04-16 20:05:38.047497 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na, b = map(int, input().split())\nprint(lcm(a, b))"
}
2022-04-16 20:05:38.047601 REASON stop
