["\n\nn, d = map(int, input().split())\n\n# In this problem, we need to find the minimum number of inspectors required.\n# This can be achieved by using the greedy algorithm.\n# The idea is to start from 1 and add an inspector to the next tree which is not covered by the previous inspector.\n# Since we have to cover all the trees, the last inspector should cover the last tree.\n# This can be achieved by adding the last inspector at the tree which is not covered by the previous inspector.\n\n# Initially, we need to cover tree 1.\ncount = 1\n# The tree which is covered by the last inspector.\nlast = 1\n\n# For the ith tree, the range of trees covered by the inspector is [i-d, i+d].\n# We will start from 1 and add an inspector to the next tree which is not covered by the previous inspector.\nfor i in range(2, n+1):\n    # If the tree is not covered by the previous inspector, we will add an inspector.\n    # There are four cases to check:\n    # 1. The tree is not covered by the previous inspector and the next tree is not covered by the last inspector.\n    # 2. The tree is covered by the previous inspector and the next tree is not covered by the last inspector.\n    # 3. The tree is not covered by the previous inspector and the next tree is covered by the last inspector.\n    # 4. The tree is covered by the previous inspector and the next tree is covered by the last inspector.\n    if i-d > last or last < i+d:\n        count += 1\n        last = i+d\n\nprint(count)", "\n\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= D:\n    print(1)\nelse:\n    print(numpy.ceil(N / (D * 2 + 1)))", "\n\nn, d = map(int, input().split())\n\nprint((n + d) // (2 * d + 1))", "\n\nimport sys\n\nN, D = map(int, input().split())\n\ngolden = 0\nfor i in range(1, N+1):\n    if i % 7 == 0:\n        golden = i\n        break\n\nif golden == 0:\n    print(N)\nelse:\n    if golden-D >= 1 and golden+D <= N:\n        print(2)\n    else:\n        print(1)", "\n\nimport sys\n\nN, D = map(int, input().split())\n\nif N <= 1:\n    print(N)\nelif D == 0:\n    print(1)\nelse:\n    print((N + 2 * D - 1) // (2 * D))", "\n\nN, D = map(int, input().split())\n\nprint(N // (2*D + 1) + (1 if N % (2 * D + 1) else 0))", "\n\nn, d = map(int, input().split())\n\ninspectors = 0\nfor i in range(1, n+1):\n    if i + d > n:\n        inspectors += 1\n        break\n    else:\n        i += (2 * d)\n        inspectors += 1\n\nprint(inspectors)", "\n\nN, D = map(int, inp"]