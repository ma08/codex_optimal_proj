["\n\nfrom bisect import bisect_left\nimport heapq\nfrom random import randrange\n\ndef attack(monsters, hps):\n    if len(monsters) == 1:\n        return monsters[0]\n    # get random attacker and target\n    attacker = randrange(len(monsters))\n    target = randrange(len(monsters))\n    while target == attacker:\n        target = randrange(len(monsters))\n    # subtract attacker's hp from target's\n    hps[target] -= hps[attacker]\n    if hps[target] <= 0:\n        # remove dead target\n        del monsters[target]\n        del hps[target]\n    return attack(monsters, hps)\n\ndef solve(n, hps):\n    # sort hps in descending order\n    hps.sort(reverse=True)\n    # create ordered list of monsters\n    monsters = list(range(n))\n    # find the number of monsters with the same hp as the last monster\n    last_hp = hps[-1]\n    i = bisect_left(hps, last_hp)\n    # if all monsters have the same hp, return that hp\n    if i == n:\n        return last_hp\n    # if there are multiple monsters with the same hp, randomly attack them\n    return attack(monsters[i:], hps[i:])\n\ndef main():\n    n = int(input())\n    hps = list(map(int, input().split()))\n    print(solve(n, hps))\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef solve(N, A):\n    A = sorted(A)\n    # print(A)\n    for i in range(N-1):\n        A[i+1] -= A[i]\n        if A[i+1] < 0:\n            A[i+1] = 0\n    # print(A)\n    return A[-1]\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))", "\n\nimport random\nimport heapq\n\nclass Monster:\n    def __init__(self, id, health):\n        self.id = id\n        self.health = health\n\n    def __lt__(self, other):\n        return self.health < other.health\n\n\ndef attack(monsters, attacks):\n    attacker = heapq.heappop(monsters)\n    defender = heapq.heappop(monsters)\n    # print('attacker:', attacker.id, attacker.health)\n    # print('defender:', defender.id, defender.health)\n    if attacker.health > defender.health:\n        defender.health = 0\n        heapq.heappush(monsters, attacker)\n    else:\n        attacker.health = 0\n        heapq.heappush(monsters, defender)\n    attacks += 1\n    # print('attacks:', attacks)\n    return attacker.id, defender.id, attacks\n\n\ndef main():\n    n = int(input())\n    monsters = [Monster(i+1, int(health)) for i, health in enumerate(input().split())]\n    heapq.heapify(monsters)\n    attacks = 0\n    while len(monsters) > 1:\n        _, _, attacks = attack(monsters, attacks)\n    print(monsters[0].health)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport random\n\ndef main():\n    n = int(input())\n    monsters = [i for i in map(int, input().split())]\n    while len(monsters) > 1:\n        a = random.choice(monsters)\n        b = random.choice(monsters)\n        if a != b:\n            monsters.remove(b)\n            monsters.remove(a)\n            monsters.append(b - a)\n    print(monsters[0])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            a[i + 1] = a[i] + 1\n\n    print(a[n - 1])\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport random\n\ndef solve(A):\n  while len(A) > 1:\n    attacker, defender = random.sample(A, 2)\n    A.remove(defender)\n    defender = max(defender - attacker, 0)\n    if defender > 0:\n      A.append(defender)\n  return A[0]\n\nN = int(input())\nA = [int(i) for i in input().split()]\nprint(solve(A))", "\n\n# Version 1\nnum_monsters = int(input())\nmonster_healths = list(map(int, input().split()))\n\nwhile len(monster_healths) > 1:\n    monster_healths.remove(max(monster_healths))\n    print(monster_healths)\n\nprint(monster_healths[0])\n\n# Version 2\nnum_monsters = int(input())\nmonster_healths = list(map(int, input().split()))\n\nwhile len(monster_healths) > 1:\n    monster_healths.remove(max(monster_healths))\n\nprint(monster_healths[0])", "\nimport random\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    while len(A) > 1:\n        x = A.pop(random.randint(0, len(A)-1))\n        y = A.pop(random.randint(0, len(A)-1))\n        A.append(max(x-y, 0))\n    print(A[0])\n\n\nif __name__ == '__main__':\n    main()"]