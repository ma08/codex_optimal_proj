["def sol(a,k):\n    n=len(a)\n    if(k==0):return 1\n    if(k==1):\n        v=set()\n        for x in a:\n            v.add(x)\n        return len(v)\n    if(n<k or n<1 or k<1):\n        return 0\n    if(n==k):\n        return 1\n    sz=max(3000,n)\n    v1=[0]*sz\n    v2=[0]*sz\n    v3=[0]*sz\n    v2[n-1]=1\n    v3[a[n-1]-1]=1\n    for i in range(n-2,-1,-1):\n        if(i<0):break\n        v2[i]=v2[i+1]\n        if(v3[a[i]-1]==0):\n            v2[i]+=1\n            v3[a[i]-1]=1\n    for j in range(1,k):\n        v3=[0]*sz\n        v1[n-1]=0\n        for i in range(n-2,-1,-1):\n            v1[i]=v1[i+1]\n            v1[i]=v1[i]+v2[i+1]\n            v1[i] = v1[i] - v3[a[i] - 1]\n            v3[a[i] - 1] = v2[i + 1]\n        v2=v1.copy()\n    return v1[0]\nn,k=list(map(int,input().split()))\ns=input()\nar=[]\nfor x in s:\n    ar.append(ord(x))\nans=0\ncur=n\nwhile cur>=0:\n    mx=min(k,sol(ar,cur))\n    k-=mx\n    ans+=(n-cur)*mx\n    cur-=1\nif(k!=0):\n    print(-1)\nelse:\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn,W=list(map(int,input().split()))\ns=input().strip()\n\nNEXTLIST=[[n]*26 for i in range(n+1)]\n\nfor i in range(n-1,-1,-1):\n    for j in range(26):\n        NEXTLIST[i][j]=NEXTLIST[i+1][j]\n    NEXTLIST[i][ord(s[i])-97]=i\n\nDP=[[0]*(n+1) for i in range(n+1)]\n\nDP[0][0]=1\n\nfor i in range(n):\n    for j in range(26):\n        if NEXTLIST[i][j]!=n:\n            for k in range(n):\n                DP[NEXTLIST[i][j]+1][k+1]+=DP[i][k]\n\n#print(DP)\n\nHLIST=[0]*(n+1)\n\nfor i in range(n+1):\n    for j in range(n+1):\n        HLIST[j]+=DP[i][j]\n\n#print(HLIST)\n\nANS=0\nfor i in range(n,-1,-1):\n    #print(i,W)\n    if W>HLIST[i]:\n        ANS+=(n-i)*HLIST[i]\n        W-=HLIST[i]\n    else:\n        ANS+=W*(n-i)\n        print(ANS)\n        return\n\nelse:\n    print(-1)\n", "# @author \n\nimport sys\n\nclass HSubsequencesHardVersion:\n    def solve(self):\n        n, k = [int(_) for _ in input().split()]\n        s = input()\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        last = {key: -1 for key in (chr(x) for x in range(ord('a'), ord('z') + 1))}\n        for i in range(1, n + 1):\n            dp[i][0] = 1\n            for j in range(1, i + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] - (dp[last[s[i - 1]]][j - 1] if last[s[i - 1]] != -1 else 0)\n            last[s[i - 1]] = i - 1\n\n        ans = 0\n        tot = 0\n        for sz in range(n, -1, -1):\n            ans += min(k - tot, dp[n][sz]) * (n - sz)\n            tot = min(k, tot + dp[n][sz])\n            if tot == k:\n                break\n\n        if tot >= k:\n            print(ans)\n        else:\n            print(-1)\n\nsolver = HSubsequencesHardVersion()\ninput = sys.stdin.readline\n\nsolver.solve()\n", "import sys\nimport itertools\n\ninputs = sys.stdin.read().split()\nlen_string = int(inputs[0])\ndesired_size = int(inputs[1])\nstring = inputs[2]\n\ndef val_of_letter(char): return ord(char)-ord(\"a\")\n\nnum_subsequences = [1]\nnum_subsequences_so_far = [0]*len_string\nlast_num_subsequences_so_far = [0]*len_string\nnum_subsequences_for_this_letter_so_far = [0]*26\n\nlast_num_subsequences_so_far[len_string-1] = 1;\nnum_subsequences_for_this_letter_so_far[val_of_letter(string[-1])] = 1;\n\nfor i in range(len_string-2, -1, -1):\n    last_num_subsequences_so_far[i] = \\\n        last_num_subsequences_so_far[i+1]\n    if num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] == 0:\n         last_num_subsequences_so_far[i] += 1\n         num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] = 1\nnum_subsequences.append(last_num_subsequences_so_far[0])\n\nfor length in range(2, len_string+1):\n    for i in range(26): num_subsequences_for_this_letter_so_far[i] = 0\n    \n    num_subsequences_so_far[len_string-1] = 0\n    for i in range(len_string-2, -1, -1):\n        num_subsequences_so_far[i] = \\\n            num_subsequences_so_far[i+1] + \\\n            last_num_subsequences_so_far[i+1] - \\\n            num_subsequences_for_this_letter_so_far[val_of_letter(string[i])]\n        # print(length, i, num_subsequences_so_far[i], num_subsequences_so_far[i+1], last_num_subsequences_so_far[i+1], num_subsequences_for_this_letter_so_far[val_of_letter(string[i])])\n        num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] = \\\n            last_num_subsequences_so_far[i+1]\n    # print()\n    \n    num_subsequences.append(num_subsequences_so_far[0])\n    for i in range(len_string):\n         last_num_subsequences_so_far[i] = num_subsequences_so_far[i]\n\n# print(num_subsequences)\nsize = 0\ncost = 0\nfor i in range(len_string, -1, -1):\n    cur_size = num_subsequences[i]\n    if size+cur_size >= desired_size:\n        cost += (desired_size-size)*(len_string-i)\n        size = desired_size\n        break\n    cost += cur_size*(len_string-i)\n    size += cur_size\n\nif size >= desired_size: sys.stdout.write(str(cost)+\"\\n\")\nelse: sys.stdout.write(\"-1\\n\")\n", "line1 = input().split(' ')\nn = int(line1[0])\nk = int(line1[1])\ns = list(input())\n\ndp = [101*[0] for i in range(101)]\nlast = 26*[-1]\n\nfor i in range(n+1):\n    dp[0][i] = 1\n\nfor l in range(1, n+1):\n    dp[l][0] = 0\n    for c in range(26):\n        last[c] = -1\n    for i in range(1, n+1):\n        dp[l][i] = dp[l-1][i-1] + dp[l][i-1]\n        if last[ord(s[i-1])-ord('a')] != -1:\n            dp[l][i] -= dp[l-1][last[ord(s[i-1])-ord('a')]-1]\n        last[ord(s[i-1])-ord('a')] = i\n\ni = 0\nres = 0\nwhile i <= n and k >= 0:\n    c = min(k, dp[n-i][n])\n    k -= c\n    res += c * i\n    i += 1\nif k > 0:\n    print(-1)\nelse:\n    print(res)\n", "n, tt = list(map(int, input().split()))\ns = input()\n\ndp = [[0]*(n + 1) for i in range(n+1)]\n\nfor c in range(n+1):\n\tdp[0][c] = 1\n\nlast = [-1]*26\n\nfor c in range(1, n + 1):\n\tk = ord(s[c-1]) - ord('a')\n\tfor r in range(1, n+1):\n\t\tdp[r][c] = dp[r][c-1] + dp[r-1][c-1]\n\tif last[k] == -1:\n\t\tlast[k] = c - 1\n\t\tcontinue\n\telse:\n\t\tp = last[k]\n\t\tfor r in range(1, n+1):\n\t\t\tdp[r][c] = dp[r][c] - dp[r-1][p]\n\t\tlast[k] = c-1\n\nsu, ans, t = 0, 0, 0\nfor r in range(n+1):\n\tsu = su + dp[r][n]\nif su < tt:\n\tans = -1\nelse:\n\tfor i in range(n, -1, -1):\n\t\tr = min(tt, dp[i][n])\n\t\tans += t*r\n\t\ttt -= r\n\t\tt += 1\n\nprint(ans) \n", "[n, k] = [int(i) for i in input().split()]\ns = input()\ncntsz = [0 for i in range(105)]\ndp = [[0 for i in range(105)] for j in range(105)]\nlst = [0 for i in range(105)]\nprv = [0 for i in range(26)]\nn = len(s)\ns = '%' + s\nfor i in range(n + 1):\n  dp[i][0]=1\nfor i in range(1, n + 1):\n\tlst[i] = prv[ord(s[i])-ord('a')]\n\tprv[ord(s[i]) - ord('a')] = i\nfor sz in range(1, n + 1):\n\tfor i in range(1, n + 1):\n\t\tdp[i][sz] += dp[i - 1][sz]\n\t\tdp[i][sz] += dp[i - 1][sz - 1]\n\t\tif lst[i] != 0:\n\t\t\t dp[i][sz] -= dp[lst[i]-1][sz-1]\nfor sz in range(1, n + 1):\n\tfor i in range(1, n + 1):\n\t\tcntsz[sz] += dp[i][sz]\n\t\tcntsz[sz] -= dp[i - 1][sz]\ncntsz[0] += 1\ndone = 0\nans = 0\nfor i in range(n, -1, -1):\n    if done + cntsz[i] >= k:\n       ans += (n - i) * (k - done)\n       done = k\n       break\n    done += cntsz[i]\n    ans += cntsz[i] * (n - i)\nif done < k:\n    print(-1)\nelse:\n    print(ans)", "n, k = list(map(int, input().split()))\ns = \"$\" + input()\n\ncnt = [[0]*(n+1) for i in range(n+1)]\n\ncnt[0][0] = 1\n\nfor l in range(1, n+1):\n\tfor i in range(l, n+1):\n\t\tused = [False] * 26\n\t\tfor j in range(i, n+1):\n\t\t\tx = ord(s[j]) - ord('a')\n\t\t\tif not used[x]:\n\t\t\t\tcnt[l][j] += cnt[l-1][i-1]\n\t\t\t\tused[x] = True\n\nans = 0\nfor l in range(n, -1, -1):\n\ts = sum(cnt[l])\n\tif s < k:\n\t\tans += (n-l) * s\n\t\tk -= s\n\telse:\n\t\tans += (n-l) * k\n\t\tk = 0\n\t\tbreak\n\nif k > 0: ans = -1\n\nprint(ans)\n", "n, k = map(int, input().split())\ns = \"$\" + input()\n\ncnt = [[0]*(n+1) for i in range(n+1)]\n\ncnt[0][0] = 1\n\nfor l in range(1, n+1):\n\tfor i in range(l, n+1):\n\t\tused = [False] * 26\n\t\tfor j in range(i, n+1):\n\t\t\tx = ord(s[j]) - ord('a')\n\t\t\tif not used[x]:\n\t\t\t\tcnt[l][j] += cnt[l-1][i-1]\n\t\t\t\tused[x] = True\n\nans = 0\nfor l in range(n, -1, -1):\n\ts = sum(cnt[l])\n\tif s < k:\n\t\tans += (n-l) * s\n\t\tk -= s\n\telse:\n\t\tans += (n-l) * k\n\t\tk = 0\n\t\tbreak\n\nif k > 0: ans = -1\n\nprint(ans)", "n, k = list(map(int, input().split(' ')))\ns = input()\ndp = [[0] * (n + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor l in range(0, n):\n    for i in range(l, n + 1):\n        used = [False] * 26\n        for j in range(i + 1, n + 1):\n            ch = ord(s[j - 1]) - ord('a')\n            if not used[ch]:\n                dp[l + 1][j] += dp[l][i]\n                used[ch] = True\ntotal = 0\nfor l in range(n, -1, -1):\n    sums = sum(dp[l])\n    if sums >= k:\n        total += (n - l) * k\n        k = 0\n        break\n    total += (n - l) * sums\n    k -= sums\nif k > 0:\n    total = -1\nprint(total)\n", "n,k=map(int,input().split())\ns=input()\ns=[ord(c)-ord('a') for c in s]\ndp=[[[0]*26 for i in range(n+1)]for i in range(n)]\ndp[0][1][s[0]]=1\nsm=None\n\nfor i in range(1,n):\n    c=s[i]\n    for cc in range(26):\n        dp[i][1][cc]=dp[i-1][1][cc]\n    dp[i][1][c]=1\n    for j in reversed(range(2,n+1)):\n        for cc in range(26):\n            if cc!=c:\n                dp[i][j][cc]=dp[i-1][j][cc]\n            else:\n                tm=0\n                for t in range(26):\n                    tm+=dp[i-1][j-1][t]\n                dp[i][j][cc]=tm\n# print(dp[-1][-1])\ndef get(x):\n    if x==0:\n        return 1\n    ans=0\n    for i in range(26):\n        ans+=dp[-1][x][i]\n    return ans\ncnt=0\ncost=0\nfor re in reversed(range(n+1)):\n    x=get(re)\n    if x+cnt>=k:\n        cost+=(n-re)*(k-cnt)\n        cnt=k\n        break\n    else:\n        cost+=(n-re)*x\n        cnt+=x\nif cnt<k:\n    print(-1)\nelse:\n    print(cost)", "n,k=map(int,input().split())\ns=input()\ns=[ord(c)-ord('a') for c in s]\ndp=[[[0]*26 for i in range(n+1)]for i in range(n)]\ndp[0][1][s[0]]=1\nsm=None\n\nfor i in range(1,n):\n    c=s[i]\n    for cc in range(26):\n        dp[i][1][cc]=dp[i-1][1][cc]\n    dp[i][1][c]=1\n    for j in reversed(range(2,n+1)):\n        for cc in range(26):\n            if cc!=c:\n                dp[i][j][cc]=dp[i-1][j][cc]\n            else:\n                tm=0\n                for t in range(26):\n                    tm+=dp[i-1][j-1][t]\n                dp[i][j][cc]=tm\n# print(dp[-1][-1])\ndef get(x):\n    if x==0:\n        return 1\n    ans=0\n    for i in range(26):\n        ans+=dp[-1][x][i]\n    return ans\ncnt=0\ncost=0\nfor re in reversed(range(n+1)):\n    x=get(re)\n    if x+cnt>=k:\n        cost+=(n-re)*(k-cnt)\n        cnt=k\n        break\n    else:\n        cost+=(n-re)*x\n        cnt+=x\nif cnt<k:\n    print(-1)\nelse:\n    print(cost)", "n, K = list(map(int, input().split()))\ns = input()\nmax_n = 104\ndp = [[0] * max_n for i in range(max_n)] \ns = \"$\" + s;\nfor i in range(n + 1):\n  dp[0][i] = 1;\n\nfor ln in range(1, n + 1):\n  for j in range(1, n + 1):\n    dp[ln][j] = dp[ln][j - 1] + dp[ln - 1][j - 1];\n    for k in range(j - 1, 0, -1):\n      if s[k] == s[j]:\n        dp[ln][j] -= dp[ln - 1][k - 1];\n        break;\nans = 0;\nfor ln in range(n, -1, -1):\n  cnt = dp[ln][n];\n  if (cnt < K):\n    ans += (cnt * (n - ln));\n    K -= cnt;\n  else:\n    ans += (K * (n - ln));\n    K = 0;\n    break;\nif (K != 0):\n  print(-1)\nelse:\n  print(ans)\n\n", "def super_solve(n, k, s):\n\tlast = []\n\tfor i in range (0, 256):\n\t\tlast.append(0)\n\tdp = []\n\tfor i in range (0, 105):\n\t\ttmp = []\n\t\tfor j in range (0, 105):\n\t\t\ttmp.append(0)\n\t\tdp.append( tmp )\n\t\n\tnow = []\n\tfor i in range (0, 105):\n\t\ttmp = []\n\t\tfor j in range (0, 105):\n\t\t\ttmp.append(0)\n\t\tnow.append( tmp )\n\n\tdp[0][0] = 1\n\tnow[0][0] = 1\n\tfor i in range (1, n + 1):\n\t\tc = ord(s[i])\n\t\tfor j in range (0, n + 1):\n\t\t\tdp[i][j] += dp[i-1][j]\n\t\tfor j in range (1, n + 1):\n\t\t\tdp[i][j] += dp[i-1][j-1]\n\t\tif last[c] > 0:\n\t\t\tfor j in range (1, n + 1):\n\t\t\t\tdp[i][j] -= dp[ last[c] - 1 ][j - 1]\n\t\tfor j in range (0, n + 1):\n\t\t\tnow[i][j] = dp[i][j] - dp[i-1][j]\n\t\tlast[c] = i\n\n\n\n\tcost = 0\n\tbaki = k\n\tj = n\n\twhile( j >= 0 ):\n\t\tfor i in range (0, n + 1):\n\t\t\tcur = now[i][j]\n\t\t\tmy = min(baki, cur)\n\t\t\tcost += my * j\n\t\t\tbaki -= my\n\t\tj -= 1\n\n\tret = k * n - cost\n\tif baki > 0:\n\t\tret = -1\n\treturn ret\n\ndef main():\n\tline = input()\n\tline = line.split(' ')\n\tn = int(line[0])\n\tk = int(line[1])\n\ttmp = input()\n\ts = []\n\ts.append(0)\n\tfor i in range (0, n):\n\t\ts.append( tmp[i] )\n\tret = super_solve(n, k, s)\n\tprint (ret)\n\n\ndef __starting_point():\n  main()\n__starting_point()", "n, d = list(map(int,input().split()))\ns = input()\nt = [[-1 for i in range(n + 1)] for j in range(n + 1)]\nfor i in range(1, n + 1):\n\tfor j in range(i, n + 1):\n\t\tif j == i:\n\t\t\tt[i][j] = 1\n\t\telse:\n\t\t\tt[i][j] = 0\njes = [0] * 300\nfor i in range(1, n + 1):\n\tjes[ord(s[i - 1])] = 1\n\tt[i][1] = sum(jes)\nfor j in range(2, n + 1):\n\tind = [-1] * 300\n\tind[ord(s[j - 1])] = j - 1\n\t#obliczamy t[j + 1][j], t[j + 2][j], ...\n\tfor i in range(j + 1, n + 1):\n\t\tif ind[ord(s[i - 1])] == -1:\n\t\t\tt[i][j] = t[i - 1][j] + t[i-1][j-1] \n\t\telse:\n\t\t\tt[i][j] = t[i - 1][j] + t[i - 1][j - 1] - t[ind[ord(s[i-1])]][j - 1]\n\t\tind[ord(s[i - 1])] = i - 1\n#t[n][1], t[n][2], ..., t[n][n]\nrozne = [t[n][i] for i in range(1, n + 1)]\nrozne.reverse()\nroz = rozne + [1]\ndupa = 0\nwyn = 0\nfor i in range(n + 1):\n\tif dupa < d:\n\t\tk = min(roz[i], (d-dupa))\n\t\tdupa += k\n\t\twyn += k * i\n\telse:\n\t\tbreak\nif dupa >= d:\n\tprint(wyn)\nelse:\n\tprint(-1)\n", "n, kk = list(map(int, input().split()))\ns = '@'+input()\ndp = [[0] * (n+1) for i in range(n+1)]\ndp[0][0] = 1\nfor i in range(1, n+1):\n    for j in range(i, n+1):\n        tag = [True]*26\n        for k in range(j, n+1):\n            idx = ord(s[k])-ord('a')\n            if tag[idx]:\n                dp[i][k] += dp[i-1][j-1]\n                tag[idx] = False\nans = 0\n# print(dp)\nfor i in range(n, -1, -1):\n    # print(ans,k,i)\n    tmp = sum(dp[i])\n    if kk > tmp:\n        kk -= tmp\n        ans += (n-i)*tmp\n    else:\n        ans += kk*(n-i)\n        kk = 0\n        break\nif kk > 0:\n    ans = -1\nprint(ans)\n", "n,setsize=list(map(int,input().split()))\ns=input()\ncount = [[0 for j in range(n+1)] for i in range(n+1)]\nfor i in range(n):\n\tj = i-1\n\twhile(j>=0):\n\t\tfor k in range(1,n):\n\t\t\tcount[i][k+1] += count[j][k]\n\t\tif(s[j]==s[i]):\n\t\t\tbreak\n\t\tj-=1\n\tif(j==-1):\n\t\tcount[i][1]+=1\n# print(count)\ncost = 0\ncount[0][0]=1\nfor l in range(n,-1,-1):\n\tif(setsize==0):\n\t\tbreak\n\tct = 0\n\tlocalcost = n - l\n\tfor i in range(n):\n\t\tct += count[i][l]\n\tminct = min(setsize,ct)\n\tsetsize-=minct\n\t# print(\"for k=\",setsize,\"l=\",l,\";minct=\",minct,\";localcost=\",localcost)\n\tcost += (minct*localcost)\nif(setsize==0):\n\tprint(cost)\nelse:\n\tprint(-1)", "from sys import stdout, stdin\n\nn, kk = list(map(int, stdin.readline().split()))\ns = stdin.readline().strip()\ns += \"$\"\nn = n+1\n\ndp = [[0 for i in range(n)] for j in range(n)]\np = 10**15+5\nfor i in range(n):\n    dp[i][0] = 1\nfor end in range(n):\n    for length in range(1, n):\n        seen = []\n        ans = 0\n        for k in range(end-1, -1, -1):\n            if s[k] not in seen:\n                seen.append(s[k])\n                ans += dp[k][length-1]\n                ans %= p\n        dp[end][length] = ans\n\ntotals = [dp[n-1][length] for length in range(n)]\n#print(totals)\n\nans = 0\nidx = n-1\nwhile idx >= 0 and kk > 0:\n    ans += min(totals[idx], kk)*(n-1-idx)\n    kk -= totals[idx]\n    idx -= 1\n\nif kk <= 0:\n    stdout.write(str(ans) +\"\\n\")\nelse:\n    print(-1)\n\n", "from string import ascii_lowercase\n\nn, k = map(int, input().split())\ns = input()\n\ntodo = [1] + ([0] * n)\ndp = {letter: [0] * (n + 1) for letter in ascii_lowercase}\nfor letter in s:\n    prev = dp[letter]\n    dp[letter] = [0] + todo[:n]\n    todo = [a - b + c for a, b, c in zip(todo, prev, dp[letter])]\n\nanswer = 0\nfor cost, amt in enumerate(todo[::-1]):\n    if k > amt:\n        k -= amt\n        answer += amt * cost\n    else:\n        answer += k * cost\n        k = 0\n        break\nprint(-1 if k else answer)", "import sys\ninput = sys.stdin.readline\nimport bisect\nn,k=map(int,input().split())\ns=input()\nNext=[[float(\"inf\")]*(26) for _ in range(n+1)]\nfor i in reversed(range(n)):\n  for j in range(26):\n    Next[i][j]=Next[i+1][j]\n  Next[i][ord(s[i])-97]=i\nDP=[[0]*(n+1) for _ in range(n+1)]\nDP[0][0]=1\nfor i in range(n):\n  for j in range(26):\n    nxt=Next[i][j]\n    for l in range(n):\n      if nxt<float(\"inf\"):\n        DP[nxt+1][l+1]+=DP[i][l]\nAns=[0]*(n+1)\nfor i in range(n+1):\n  for j in range(n+1):\n    Ans[n-j]+=DP[i][j]\nAns2=[0]\nfor i in range(n+1):\n  Ans2.append(Ans2[-1]+Ans[i])\nif Ans2[-1]<k:\n  print(-1)\nelse:\n  ind=bisect.bisect_left(Ans2,k)\n  ans,num=0,0\n  for i in range(ind-1):\n    ans+=i*Ans[i]\n    num+=Ans[i]\n  ans+=(ind-1)*(k-num)\n  print(ans)", "n, k = map(int, input().split())\ns = input()\ndp = [[0] * 102 for i in range(102)]\ndp1 = [[0] * 102  for i in range(30)]\n\nfor i in range(0, n + 1):\n    dp[i][0] = 1\nfor i in range(1, n + 1):\n    nm = ord(s[i - 1]) - ord('a')\n    for le in range(1, i + 1):\n        dp[i][le] = dp[i - 1][le] + dp[i - 1][le - 1]\n        dp[i][le] -= dp1[nm][le]\n    for le in range(1, i + 1):\n        dp1[nm][le] += (dp[i][le] - dp[i - 1][le])\n        \n    \nans = 0\nfor le in range(n, -1, -1):\n    if k == 0:\n        break\n    x = min(dp[n][le], k)\n    ans += (n - le) * x\n    k -= x\nif k != 0:\n    print(-1)\nelse:\n    print(ans)", "import math\nn, k = map(int, input().split())\n# print(n, k)\ndp = [[0]*102 for i in range(102)]\n# print(len(dp))\ns = input()\nlast = [-1] * 26\nfor i in range(0, 101):\n    dp[i][0] = 1\n\nfor i in range(1, n+1):\n\tfor j in range(1, n+1):\n\t\tch = s[i-1]\n\t\tdp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\t\tsub = last[ord(ch)-ord('a')]\n\t\tif sub == -1:\n\t\t\tcontinue\n\t\tsub -= 1\n\t\tdp[i][j] -= dp[sub][j-1]\n\tlast[ord(ch)-ord('a')] = i\n\nans = int(0)\n\nfor i in range(n, -1, -1):# Need to consider empty subsequence too\n    if dp[n][i] >= k:\n        # print(i, k)\n        ans += (k) * (n - i)\n        k = 0\n    elif (k > 0):\n        k -= dp[n][i]\n        ans += (n - i) * dp[n][i]\n    else:\n        break\nif k > 0:\n    ans = -1\nprint(ans)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# File              : H.py\n# Author            : JCHRYS <jchrys@me.com>\n# Date              : 30.08.2019\n# Last Modified Date: 30.08.2019\n# Last Modified By  : JCHRYS <jchrys@me.com>\nclass const:\n    size = 26; # size of lowercase alphabet\n\nn, k = list(map(int, input().split()));\ns = input();\n\nmaxpos = [[-1 for _ in range(const.size)] for _ in range(n)];\n\nfor i in range(n):\n    for j in range(const.size):\n        if i > 0:\n            maxpos[i][j] = maxpos[i - 1][j]\n    maxpos[i][ord(s[i]) - ord('a')] = i\n\n#print(*[row for row in maxpos], sep=\"\\n\")\ndp = [[0 for _ in range(n + 1)] for _ in range(n)];\n\nfor i in range(n):\n    dp[i][1] = 1\n\nfor length in range(2, n):\n    for endswith in range(1, n):\n        for before in range(const.size):\n            if maxpos[endswith - 1][before] != -1:\n                dp[endswith][length] = dp[endswith][length] + dp[maxpos[endswith - 1][before]][length - 1];\n\n\n#print(*[row for row in dp], sep=\"\\n\")\nk -= 1;\nans = 0;\nfor length in range(n-1, 0, -1):\n    temp = 0;\n    for i in range(const.size):\n        if (maxpos[n-1][i] != -1):\n            temp += dp[maxpos[n-1][i]][length];\n    \n    if temp >= k:\n        ans += k * (n - length);\n        k = 0;\n        break;\n    else:\n        k -= temp;\n        ans += temp * (n-length);\n  \n\nif (k == 1):\n    ans += n;\n    k-=1\n\nif k > 0:\n    print(-1)\n    return\nprint(ans)\n\n\n\n\n", "def subsequences_of_length(s):\n    n = len(s)\n\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    to_int = {}\n    for i, char in enumerate(alphabet):\n        to_int[char] = i\n\n    next_i = [[n] * len(alphabet) for i in range(n + 1)]\n    for i in reversed(range(n)):\n        for j, char in enumerate(alphabet):\n            next_i[i][j] = next_i[i+1][j]\n        next_i[i][to_int[s[i]]] = i\n\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for k in range(n):\n            for j in range(26):\n                if next_i[i][j] >= n:\n                    continue\n                dp[k+1][next_i[i][j] + 1] += dp[k][i]\n\n    ans = [sum(dp[i]) for i in range(n + 1)]\n    return ans\n\n\nn, k = map(int, input().split())\ns = input()\nans_len = subsequences_of_length(s)\n\nans_cnt = 0\nans = 0\nfor length in reversed(range(len(ans_len))):\n    cnt = ans_len[length]\n    if ans_cnt + cnt <= k:\n        ans_cnt += cnt\n        ans += cnt * (n - length)\n    else:\n        ans += (k - ans_cnt) * (n - length)\n        ans_cnt = k\nif ans_cnt != k:\n    print(-1)\nelse:\n    print(ans)", "n, k = list(map(int, input().split()))\ns = input()\nlast = [[-1 for i in range(26)] for j in range(n)]\nfor i in range(n):\n    for j in range(26):\n        if i != 0:\n            last[i][j] = last[i-1][j]\n    last[i][ord(s[i])-ord('a')] = i\ndp = [[0 for i in range(n+1)] for j in range(n)]\nfor i in range(n):\n    dp[i][1] = 1\nfor len in range(2, n+1):\n    for i in range(1, n):\n        for j in range(26):\n            if last[i-1][j] != -1:\n                dp[i][len] += dp[last[i-1][j]][len-1]\nans = 0\nfor len in range(n, 0, -1):\n    cnt = 0\n    for j in range(26):\n        if last[n-1][j] != -1:\n            cnt += dp[last[n-1][j]][len]\n    if cnt >= k:\n        ans += k*(n-len)\n        k = 0\n        break\n    else:\n        ans += cnt*(n-len)\n        k -= cnt\nif k == 1:\n    ans += n\n    k = 0\nif k > 0:\n    print(-1)\nelse:\n    print(ans)\n"]