["\n\n# Solution1: \n# 1. find the block of the number, the block of the number is the number of digits it has\n# 2. find the offset of the number in the block\n# 3. find the number in the block\n# 4. find the digit at the offset of the number\n\n# Time: O(logN)\n# Space: O(1)\n\ndef find_block(n):\n    \"\"\"\n    find the block of the number, the block of the number is the number of digits it has\n    \"\"\"\n    i = 1\n    while n > 0:\n        n -= i * 9 * 10 ** (i - 1)\n        i += 1\n    return i - 1\n\ndef find_offset(n):\n    \"\"\"\n    find the offset of the number in the block\n    \"\"\"\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n    return i - 1\n\ndef find_number(n):\n    \"\"\"\n    find the number in the block\n    \"\"\"\n    i = 1\n    while n > 0:\n        n -= i * 9 * 10 ** (i - 1)\n        i += 1\n    n += (i - 1) * 9 * 10 ** (i - 2)\n    number = n // (i - 1)\n    return number\n\ndef find_digit(n):\n    \"\"\"\n    find the digit at the offset of the number\n    \"\"\"\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n    n += i - 1\n    number = n // i\n    offset = n % i\n    digit = int(str(number)[offset])\n    return digit\n\ndef solution1(n):\n    block = find_block(n)\n    offset = find_offset(n)\n    number = find_number(n)\n    digit = find_digit(n)\n    return digit\n\n# Solution2:\n# 1. find the block of the number, the block of the number is the number of digits it has\n# 2. find the offset of the number in the block\n# 3. find the number in the block\n# 4. find the digit at the offset of the number\n\n# Time: O(logN)\n# Space: O(1)\n\ndef solution2(n):\n    # find the block of the number, the block of the number is the number of digits it has\n    i = 1\n    while n > 0:\n        n -= i * 9 * 10 ** (i - 1)\n        i += 1\n    i -= 1\n    n += (i) * 9 * 10 ** (i - 1)\n    \n    # find the offset of the number in the block\n    j = 1\n    while n > 0:\n        n -= j\n        j += 1\n    j -= 1\n    n += j\n    \n    # find the number in the block\n    number = n // j\n    \n    # find the digit at the offset of the number\n    digit = int(str(number)[n % j])\n    return digit\n\n# Solution3:\n# 1. find the block of the number, the block of the number is the number of digits it has\n# 2. find the offset of the number in the block\n# 3. find the number in the block\n# 4. find the digit at the offset of the number\n\n# Time: O(logN)\n# Space: O(1)\n\ndef solution3(n):\n    # find the block of the number, the block of the number is the number of digits it has\n    i = 1\n    while n > 0:\n        n -= i * 9 * 10 ** (i - 1)\n        i += 1\n    i -= 1\n    n += (i) * 9 * 10 ** (i - 1)\n    \n    # find the offset of the number in the block\n    j = 1\n    while n > 0:\n        n -= j\n        j += 1\n    j -= 1\n    n += j\n    \n    # find the number in the block\n    number = n // j\n    digit = int(str(number)[n % j])\n    return digit\n\n# Solution4:\n# 1. find the block of the number, the block of the number is the number of digits it has\n# 2. find the offset of the number in the block\n# 3. find the number in the block\n# 4. find the digit at the offset of the number\n\n# Time: O(logN)\n# Space: O(1)\n\ndef solution4(n):\n    # find the block of the number, the block of the number is the number of digits it has\n    i = 1\n    while n > 0:\n        n -= i * 9 * 10 ** (i - 1)\n        i += 1\n    i -= 1\n    n += (i) * 9 * 10 ** (i - 1)\n    \n    # find the offset of the number in the block\n    j = 1\n    while n > 0:\n        n -= j\n        j += 1\n    j -= 1\n    n += j\n    \n    # find the number in the block\n    number = n // j\n    digit = int(str(number)[n % j])\n    return digit\n\nn = 5\nk = [1, 3, 20, 38, 56]\nans = [1, 2, 5, 2, 0]\nfor i in range(n):\n    a = solution1(k[i])\n    b = solution2(k[i])\n    c = solution3(k[i])\n    d = solution4(k[i])\n    if a == ans[i] and b == ans[i] and c == ans[i] and d == ans[i]:\n        print('Test case %d passed' %(i + 1))\n    else:\n        print('Test case %d failed' %(i + 1))", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(getDigit(k))\n\n# Gets the digit at position k in the sequence\ndef getDigit(k):\n    digit = 0\n    block = 1\n    while k > block:\n        k -= block\n        block += 1\n    return k%10\n\nmain()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(f(k))\n\ndef f(k):\n    if k == 1:\n        return 1\n    i = 1\n    while k > len(str(i)):\n        k -= len(str(i))\n        i += 1\n    return int(str(i)[k-1])\n\nmain()", "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef getDigit(k):\n    \"\"\"\n    Returns the digit at kth position of the sequence\n    \"\"\"\n    block_size = 1\n    block_start = 1\n    block_end = 1\n    while k > block_size:\n        block_start = block_end+1\n        block_end = block_start + block_size\n        k -= block_size\n        block_size += 1\n\n    # Now k is a number between 1 and block_size\n    number = block_start + (k-1)\n    digit = number % 10\n    return digit\n\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(getDigit(k))", "\n\nif __name__ == \"__main__\":\n    pass", "\n\n# SOLUTION\ndef solve(k):\n    l = 0\n    r = k\n    while l < r:\n        m = (l + r) // 2\n        if m * (m + 1) // 2 < k:\n            l = m + 1\n        else:\n            r = m\n    k -= l * (l - 1) // 2\n    return str(l)[k - 1]\n\nqueries = int(input())\nfor _ in range(queries):\n    k = int(input())\n    print(solve(k))", "\n\n#SOLVED\n\ndef find_digit(q):\n    for _ in range(q):\n        k = int(input())\n        i = 1\n        curr = 1\n        while k > curr:\n            curr += (i * 9 * 10 ** (i - 1))\n            i += 1\n        curr -= (i - 1) * 9 * 10 ** (i - 2)\n        j = k - curr\n        i -= 1\n        num = (j - 1) // i\n        digit = (j - 1) % i\n        print(str(num + 1)[digit])\n\nfind_digit(int(input()))"]