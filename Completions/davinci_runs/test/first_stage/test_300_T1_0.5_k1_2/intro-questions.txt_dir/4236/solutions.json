["def mi():\n\treturn map(int, input().split())\n\nn,m = mi()\na = [0]*m\nfor i in range(n):\n\tl,r = mi()\n\tfor i in range(l-1, r):\n\t\ta[i] = 1\nprint (a.count(0))\nfor i in range(m):\n\tif a[i]==0:\n\t\tprint (i+1, end = ' ')", "n,m=map(int,input().split())\nar=[0]*m\nfor i in range(n):\n    a,b=map(int,input().split())\n    for e in range(a-1,b):\n        ar[e]=1\nans=[]\nfor i in range(m):\n    if(ar[i]==0):\n        ans.append(i+1)\nprint(len(ans))\nprint(*ans)", "n, m = map(int, input().split())\nz = set(range(1, m + 1))\nfor u in range(n):\n    x, y = map(int, input().split())\n    for i in range(x, y + 1):\n        z.discard(i)\nprint(len(z))\nfor i in z:\n    print(i, end = ' ')\n", "n, m = map(int, input().split())\nnum = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    num.append([l, r])\nans = []\nfor i in range(1, m + 1):\n    for j in range(n):\n        if num[j][0] <= i and num[j][1] >= i:\n            break\n    else:\n        ans.append(i)\nprint(len(ans))\nif ans:\n    print(*ans)", "#      \nimport collections, atexit, math, sys\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\nimport bisect \ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\ndef memo(func):  \n    cache={}  \n    def wrap(*args):  \n        if args not in cache:  \n            cache[args]=func(*args)  \n        return cache[args]  \n    return wrap\n\n@memo\ndef comb (n,k):\n    if k==0: return 1\n    if n==k: return 1\n    return comb(n-1,k-1) + comb(n-1,k)\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, M= getIntList()\nzz = set()\nfor i in range(N):\n    l,r = getIntList()\n    for j in range(l,r+1):\n        zz.add(j)\nprint(M-len(zz))\nfor i in range(1,M+1):\n    if i not in zz:\n        print(i,end = ' ')\n\n\n\n\n\n\n\n", "n,m=map(int,input().split())\ns=[]\nans=[]\nfor i in range(n):\n    s.append(list(map(int,input().split())))\nfor i in range(1,m+1):\n    t=True\n    for j in s:\n        if i>=j[0] and i<=j[1]:\n            t=False\n            break\n    if t:\n        ans.append(i)\nprint(len(ans))\nfor i in ans:\n    print(i,end=\" \")\n", "import math as ma\nfrom decimal import Decimal as dec\n\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , m):\n\tm0 = m\n\ty = 0\n\tx = 1\n\tif (m == 1):\n\t\treturn 0\n\twhile (a > 1):\n\t\tq = a // m\n\t\tt = m\n\t\tm = a % m\n\t\ta = t\n\t\tt = y\n\t\ty = x - q * y\n\t\tx = t\n\tif (x < 0):\n\t\tx = x + m0\n\treturn x\n\nm=10000019\ndef binomialCoefficient(n , k):\n\tif (k > n - k):\n\t\tk = (n - k)%m\n\tres = 1\n\tfor i in range(k):\n\t\tres = (res * (n - i))%m\n\t\tres = (res * modInverse((i + 1),m))%m\n\treturn res\n\n\ndef num():\n\treturn map(int , input().split())\n\n\ndef nu():\n\treturn int(input())\n\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\n\nn,m=num()\na=[0]*(m)\nfor ii in range(n):\n\tl,r=num()\n\tfor i in range(l-1,r):\n\t\ta[i]=1\nc=0\nll=[]\nfor i in range(m):\n\tif(a[i]==0):\n\t\tc+=1\n\t\tll.append(i+1)\nprint(c)\nprint(*ll,sep=\" \")", "import sys, math, random\nfrom fractions import gcd\nfrom itertools import permutations\n\ndebug = 0\nif debug:\n    f = open(\"input.txt\", \"r\")\n    input = f.readline\nelse:\n    input = sys.stdin.readline\n\ndef mp():\n    return list(map(int, input().split()))\n\ndef _main():\n    n, m = mp()\n    a = [0] * n\n    for i in range(n):\n        a[i] = mp()\n    ans = []\n    for i in range(1, m + 1):\n        t = False\n        for j in a:\n            if j[0] <= i and j[1] >= i:\n                t = True\n        if t == False:\n            ans.append(i)\n    print(len(ans))\n    print(*ans)\n_main()\n", "a = [False,] * 110\nb = []\nans = 0\nn, m = map(int, input().split())\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    while l <= r:\n        a[l] = True\n        l += 1\n\nfor i in range(1, m + 1):\n    if not a[i]:\n        b.append(i)\n        ans += 1\n\nprint(ans)\nprint(*b)", "n, m = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\nans = 0\nansw = []\nfor i in range(1, m + 1):\n    flag = False\n    for elem in a:\n        flag |= elem[0] <= i <= elem[1]\n    ans += not flag\n    if not flag:\n        answ.append(i)\nprint(ans)\nprint(*answ)", "def go():\n    n, m = [int(i) for i in input().split(' ')]\n    x = [0] * (m + 1)\n    for i in range(n):\n        a = [int(i) for i in input().split(' ')]\n        for i in range(a[0], a[1] + 1):\n            x[i] = 1\n    o = ''\n    c = 0\n    for i in range(1, len(x)):\n        if x[i] == 0:\n            o += '{} '.format(i)\n            c += 1\n    print(c)\n    return o.strip()\nprint(go())\n", "n, m = map(int, input().split())\notr = []\nfor i in range(n):\n    otr.append([int(j) for j in input().split()])\nanswer = 0\ns = []\nfor i in range(1, m+1):\n    Ok = True\n    for j in range(n):\n        if otr[j][0] <= i and otr[j][1] >= i:\n            Ok = False\n    if Ok:\n        s.append(i)\n        answer+=1\nprint(answer)\nprint(' '.join(map(str, s)))", "n, m = map(int, input().split())\na = [0]*(m+1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    while l!=r+1:\n        a[l] = 1\n        l+=1\n\nprint(a.count(0)-1)\nfor i in range(1,m+1):\n    if a[i]==0:\n        print(i, end = ' ')", "n, m = map(int, input().split())\nseg = [0] * (m + 1)\nseg[0] = 1\nfor i in range(n):\n    a, b = map(int, input().split())\n    for j in range(a, b + 1):\n        seg[j] = 1\n\nrec = []\nfor i in range(m + 1):\n    if seg[i] != 1:\n        rec.append(i)\n\nprint(len(rec))\nprint(\" \".join(map(str, rec)))", "n, m = map(int, input().split())\na = [i for i in range(1, m+1)]\n\nfor _ in range(n):\n    l, r = map(int, input().split())\n    for x in range(l, r+1):\n        if x in a:\n            a.remove(x)\n\nprint(len(a))\nprint(*a)", "n, m = list(map(int, input().split()))\nall = set(range(1, m + 1))\nfor i in range(n):\n\tl, r = list(map(int, input().split()))\n\tfor j in range(l, r + 1):\n\t\tall.discard(j)\n\nprint(len(all))\nprint(*all)\n", "n, m = map(int, input().split())\ns = []\nk = 0\nans = []\nfor i in range(n):\n    l, r= map(int,input().split())\n    s.append((l ,r))\nfor i in range(1, m + 1):\n    flag = True\n    for j in range(n):\n        if s[j][0] <= i <= s[j][1]:\n            flag = False\n    if flag:\n        k = k + 1\n        ans.append(i)\nprint(k, end=' \\n')\nfor i in range(k):\n    print(ans[i], end=' ')", "[n,m] = [int(i) for i in input().split()]\n\narr = [0]*m\n\nfor i in range(n):\n    [s,e] = [int(i) for i in input().split()]\n    for i in range(s,e+1):\n        arr[i-1] = 1\n\nout = []\nfor i in range(m):\n    if arr[i] == 0:\n        out.append(i+1)\n\nprint(len(out))\nfor i in out:\n    print(i, end=\" \")\nprint()\n", "n, m = [int(i) for i in input().split()]\nf = [True] * (m + 1)\nf[0] = False  \nfor i in range(n):\n    p, q = [int(j) for j in input().split()]\n    for j in range(p, q + 1):\n        f[j] = False\nprint(sum(f))\nfor i in range(1, m + 1):\n    if f[i]:\n        print(i, end = \" \")\nprint()\n\n", "n, m = map(int, input().split())\na = list(range(1, m+1))\nfor i in range(n):\n    l, r = map(int, input().split())\n    for x in range(l, r+1):\n        if x in a: a.remove(x)\nprint(len(a))\nfor x in a:\n    print(x, end=\" \")\n", "n, m = list(map(int, input().split()))\nremain = set(range(1, m + 1))\nfor _ in range(n):\n    l, r = list(map(int, input().split()))\n    for i in range(l, r + 1):\n        remain.discard(i)\n\nprint(len(remain))\nprint(*sorted(remain))\n", "\ns = input().split(\" \")\nn,m = int(s[0]),int(s[1])\nvisit = [0 for i in range(m+1)]\nfor i in range(n):\n\ts = input().split(\" \")\n\tl,r = int(s[0]),int(s[1])\n\tfor i in range(l,r+1):\n\t\tvisit[i] = 1\nres = []\nfor i in range(1,m+1):\n\tif visit[i] == 0:\n\t\tres.append(i)\nprint(len(res))\nfor i in res:\n\tprint(i,end=\" \")", "# from math import ceil\n#from sys import stdout\n\nt = 1#int(input())\nfor test in range(1,t+1):\n    n,m = list(map(int, input().split()))\n    ans = []\n    count = 0\n    D = {}\n    for i in range(n):\n        l,r = list(map(int, input().split()))\n        for j in range(l, r+1):\n            D[j] = 1\n    for i in range(1, m+1):\n        if i not in D:\n            count+=1\n            ans.append(i)\n    print(count)\n    print(*ans)\n\n\n\n\n\n\n    \n", "import sys\nn, m = map(int, sys.stdin.readline().split())\ntab = [False]*m\nfor loop in range(n):\n    d, f = map(int, sys.stdin.readline().split())\n    for i in range(d-1, f, 1):\n        tab[i] = True\nout = list()\nr = 0\nfor loop in range(m):\n    if not tab[loop]:\n        r+=1\n        out.append(loop+1)\nprint(r)\nprint(*out)", "n, m = list(map(int, input().split()))\nused_points = [False] * (m + 1)\nfor ind in range(n):\n    l, r = list(map(int, input().split()))\n    for point in range(l, r + 1):\n        used_points[point] = True\n\ncount_not_used = 0\nres = ''\nfor point in range(1, m + 1):\n    if not used_points[point]:\n        count_not_used += 1\n        res += str(point) + ' '\n\nprint(count_not_used)\nprint(res)\n"]