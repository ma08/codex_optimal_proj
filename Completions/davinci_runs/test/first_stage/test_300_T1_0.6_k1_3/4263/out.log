2022-04-18 03:54:30.569421 """
You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.
Here, a ACGT string is a string that contains no characters other than A, C, G and T.

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - S is a string of length between 1 and 10 (inclusive).
 - Each character in S is an uppercase English letter.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the length of the longest ACGT string that is a substring of S.

-----Sample Input-----
ATCODER

-----Sample Output-----
3

Among the ACGT strings that are substrings of ATCODER, the longest one is ATC.
"""
2022-04-18 03:54:30.569442 --------------------------
2022-04-18 03:54:59.470340 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)"
    }
  ],
  "created": 1650254070,
  "id": "cmpl-4yCl4F7KaPIyXaFUB3X7UzLweN8Qm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:54:59.470583 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)"
}
2022-04-18 03:54:59.470655 REASON stop
2022-04-18 03:54:59.503163 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))"
}
2022-04-18 03:54:59.503245 REASON stop
2022-04-18 03:54:59.503747 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)"
}
2022-04-18 03:54:59.503813 REASON stop
