2022-04-18 02:23:12.927838 """
Takahashi is taking exams on N subjects. The score on each subject will be an integer between 0 and K (inclusive).
He has already taken exams on N-1 subjects and scored A_i points on the i-th subject.
His goal is to achieve the average score of M points or above on the N subjects.
Print the minimum number of points Takahashi needs on the final subject to achieve his goal.
If the goal is unachievable, print -1 instead.

-----Constraints-----
 - 2 \leq N \leq 100
 - 1 \leq K \leq 100
 - 1 \leq M \leq K
 - 0 \leq A_i \leq K
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N K M
A_1 A_2 ... A_{N-1}

-----Output-----
Print the minimum number of points required on the final subject, or -1.

-----Sample Input-----
5 10 7
8 10 3 6

-----Sample Output-----
8

If he scores 8 points on the final subject, his average score will be (8+10+3+6+8)/5 = 7 points, which meets the goal.
"""
2022-04-18 02:23:12.927853 --------------------------
2022-04-18 02:23:50.791375 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# S = sum(Ai) + x\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))"
    }
  ],
  "created": 1650248593,
  "id": "cmpl-4yBKjP35C5Nojm08rLkiDDwR8vdgT",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 02:23:50.791585 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score\nN, K, M = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)"
}
2022-04-18 02:23:50.791651 REASON stop
2022-04-18 02:23:50.813932 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# S = sum(Ai) + x\n# x = M * N - S\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)"
}
2022-04-18 02:23:50.813991 REASON stop
2022-04-18 02:23:50.814473 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))"
}
2022-04-18 02:23:50.814523 REASON stop
