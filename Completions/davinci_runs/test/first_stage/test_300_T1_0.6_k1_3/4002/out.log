2022-04-18 01:32:41.420116 """
You are given a matrix $a$ of size $n \times m$ consisting of integers.

You can choose no more than $\left\lfloor\frac{m}{2}\right\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.

Note that you can choose zero elements (and the sum of such set is $0$).


-----Input-----

The first line of the input contains three integers $n$, $m$ and $k$ ($1 \le n, m, k \le 70$) — the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \le a_{i, j} \le 70$).


-----Output-----

Print one integer — the maximum sum divisible by $k$ you can obtain.


-----Examples-----
Input
3 4 3
1 2 3 4
5 2 2 2
7 1 1 4

Output
24

Input
5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6

Output
56



-----Note-----

In the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.
"""
2022-04-18 01:32:41.420148 --------------------------
2022-04-18 01:33:12.335201 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])"
    }
  ],
  "created": 1650245562,
  "id": "cmpl-4yAXqHUUFtMpHS6al1d1ncIv2oOal",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:33:12.335436 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 01:33:12.335486 REASON stop
2022-04-18 01:33:12.381215 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 01:33:12.381304 REASON stop
2022-04-18 01:33:12.381802 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])"
}
2022-04-18 01:33:12.381862 REASON stop
