2022-04-18 02:14:05.698889 """
The only difference between easy and hard versions is the number of elements in the array.

You are given an array $a$ consisting of $n$ integers. In one move you can choose any $a_i$ and divide it by $2$ rounding down (in other words, in one move you can set $a_i := \lfloor\frac{a_i}{2}\rfloor$).

You can perform such an operation any (possibly, zero) number of times with any $a_i$.

Your task is to calculate the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.

Don't forget that it is possible to have $a_i = 0$ after some operations, thus the answer always exists.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 50$) â€” the number of elements in the array and the number of equal numbers required.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

Print one integer â€” the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.


-----Examples-----
Input
5 3
1 2 2 4 5

Output
1

Input
5 3
1 2 3 4 5

Output
2

Input
5 3
1 2 3 3 3

Output
0
"""
2022-04-18 02:14:05.698905 --------------------------
2022-04-18 02:14:32.088298 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))"
    }
  ],
  "created": 1650248045,
  "id": "cmpl-4yBBtHMpx8aLEdAUxwlMTbZ8ksqnD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 02:14:32.088512 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\nimport math\n\n\ndef get_answer(n, k, array):\n    answer = 0\n    min_element = min(array)\n    for element in array:\n        answer += math.ceil(element / min_element) - 1\n    return answer\n\n\nif __name__ == \"__main__\":\n    n, k = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(get_answer(n, k, array))"
}
2022-04-18 02:14:32.088580 REASON stop
2022-04-18 02:14:32.183968 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_num_operations(n, k, a))\n\n\ndef min_num_operations(n, k, a):\n    return n - k\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 02:14:32.184050 REASON stop
2022-04-18 02:14:32.184522 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n, k, a):\n    if len(set(a)) == 1:\n        return 0\n    \n    m = min(a)\n    for i in a:\n        m = gcd(m, i)\n\n    moves = 0\n    for i in a:\n        moves += i // m\n\n    if moves >= k:\n        return moves\n    return -1\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))"
}
2022-04-18 02:14:32.184574 REASON stop
