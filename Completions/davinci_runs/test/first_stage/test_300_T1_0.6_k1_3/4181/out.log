2022-04-18 03:11:06.832146 """
There are N+1 towns. The i-th town is being attacked by A_i monsters.
We have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.
What is the maximum total number of monsters the heroes can cooperate to defeat?

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 10^5
 - 1 \leq A_i \leq 10^9
 - 1 \leq B_i \leq 10^9

-----Input-----
Input is given from Standard Input in the following format:
N
A_1 A_2 ... A_{N+1}
B_1 B_2 ... B_N

-----Output-----
Print the maximum total number of monsters the heroes can defeat.

-----Sample Input-----
2
3 5 2
4 5

-----Sample Output-----
9

If the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.
 - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.
 - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.
"""
2022-04-18 03:11:06.832160 --------------------------
2022-04-18 03:11:57.020437 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650251466,
  "id": "cmpl-4yC54VDpPHcOj38AToBCwDVjg59D6",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:11:57.020685 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)"
}
2022-04-18 03:11:57.020724 REASON stop
2022-04-18 03:11:57.533218 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))"
}
2022-04-18 03:11:57.533349 REASON stop
2022-04-18 03:11:57.663520 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 03:11:57.663652 REASON stop
