["\n\nn, t = map(int, input().split())\n\nvalues = []\nfor i in range(n):\n    values.append(list(map(int, input().split())))\n\ntle = True\nfor i in range(n):\n    if values[i][1] <= t:\n        tle = False\n        print(values[i][0])\n        break\n\nif tle:\n    print('TLE')", "\n\nn, t = map(int, input().split())\ncost = []\nfor i in range(n):\n    c,r = map(int, input().split())\n    if r <= t:\n        cost.append(c)\n\nif len(cost) > 0:\n    print(min(cost))\nelse:\n    print(\"TLE\")", "\n\nimport sys\n\n\ndef output(route_list, time):\n    route_list.sort(key=lambda x: x[0])\n    for route_cost, route_time in route_list:\n        if route_time <= time:\n            print(route_cost)\n            return\n    print(\"TLE\")\n\n\nif __name__ == \"__main__\":\n    input_stream = sys.stdin\n    N, T = map(int, input_stream.readline().split())\n    route_list = []\n    for i in range(N):\n        route_cost, route_time = map(int, input_stream.readline().split())\n        route_list.append((route_cost, route_time))\n    output(route_list, T)", "\n\nn, t = map(int, input().split())\ncost, time = [], []\nfor i in range(n):\n    c, ti = map(int, input().split())\n    cost.append(c)\n    time.append(ti)\n\nans = 10 ** 10\nfor i in range(n):\n    if time[i] <= t:\n        ans = min(ans, cost[i])\n\nif ans == 10 ** 10:\n    print('TLE')\nelse:\n    print(ans)", "\n\nclass Route:\n    def __init__(self, cost, time):\n        self.cost = cost\n        self.time = time\n\n    def __lt__(self, other):\n        return self.cost < other.cost\n\ndef main():\n    n, t = map(int, input().split())\n    routes = [Route(*map(int, input().split())) for _ in range(n)]\n    routes.sort()\n    for route in routes:\n        if route.time <= t:\n            print(route.cost)\n            return\n    print(\"TLE\")\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    N, T = map(int, input().split())\n    ct = [tuple(map(int, input().split())) for _ in range(N)]\n    ct = sorted(ct, key=lambda x:x[0])\n    for cost, time in ct:\n        if time <= T:\n            print(cost)\n            break\n    else:\n        print(\"TLE\")\n\nif __name__ == '__main__':\n    main()", "\n\n#1st solution (TLE)\nN, T = list(map(int, input().split()))\ncosts = []\ntimes = []\n\nfor i in range(N):\n    c, t = list(map(int, input().split()))\n    costs.append(c)\n    times.append(t)\n\nfor i in range(N):\n    if times[i] <= T:\n        print(costs[i])\n        exit()\nprint(\"TLE\")\n\n#2nd solution\nN, T = list(map(int, input().split()))\ncosts = []\ntimes = []\n\nfor i in range(N):\n    c, t = list(map(int, input().split()))\n    costs.append(c)\n    times.append(t)\n\ncosts = sorted(costs)\ntimes = sorted(times)\n\nfor i in range(N):\n    if times[i] <= T:\n        print(costs[i])\n        exit()\nprint(\"TLE\")", "\n\n# N, t = map(int, input().split())\n# arr = []\n# for i in range(N):\n#     arr.append(list(map(int, input().split())))\n#\n# arr.sort(key=lambda x: [x[0], x[1]])\n#\n# for i in range(N):\n#     if arr[i][1] <= t:\n#         print(arr[i][0])\n#         break\n#     else:\n#         print(\"TLE\")\n#         break\n\nN, t = map(int, input().split())\narr = []\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\n\narr.sort(key=lambda x: [x[0], x[1]])\n\nfor i in range(N):\n    if arr[i][1] <= t:\n        print(arr[i][0])\n        break\n    else:\n        print(\"TLE\")\n        break"]