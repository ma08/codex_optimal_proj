2022-04-16 18:47:56.923789 """
There is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right — $(x_2, y_2)$.

After that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right — $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right — $(x_6, y_6)$.  [Image] Example of three rectangles. 

Determine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.


-----Input-----

The first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \le x_1 < x_2 \le 10^{6}, 0 \le y_1 < y_2 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the white sheet.

The second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \le x_3 < x_4 \le 10^{6}, 0 \le y_3 < y_4 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the first black sheet.

The third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \le x_5 < x_6 \le 10^{6}, 0 \le y_5 < y_6 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the second black sheet.

The sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.


-----Output-----

If some part of the white sheet can be seen from the above after the two black sheets are placed, print "YES" (without quotes). Otherwise print "NO".


-----Examples-----
Input
2 2 4 4
1 1 3 5
3 1 5 5

Output
NO

Input
3 3 7 5
0 0 4 6
0 0 7 4

Output
YES

Input
5 2 10 5
3 1 7 6
8 1 11 7

Output
YES

Input
0 0 1000000 1000000
0 0 499999 1000000
500000 0 1000000 1000000

Output
YES



-----Note-----

In the first example the white sheet is fully covered by black sheets.

In the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.
"""
2022-04-16 18:47:56.923806 --------------------------
2022-04-16 18:48:21.907414 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    x3, y3, x4, y4 = [int(x) for x in input().split()]\n    x5, y5, x6, y6 = [int(x) for x in input().split()]\n\n    if x2 <= x5 or x6 <= x1:\n        print(\"YES\")\n    elif y2 <= y5 or y6 <= y1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    x1,y1,x2,y2=map(int,input().split())\n    x3,y3,x4,y4=map(int,input().split())\n    x5,y5,x6,y6=map(int,input().split())\n    if (x1>=x3 and x2<=x4 and y1>=y3 and y2<=y4) or (x1>=x5 and x2<=x6 and y1>=y5 and y2<=y6):\n        print('NO')\n    else:\n        print('YES')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef is_inside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return not (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef is_outside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef rect_intersection(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    x5, y5, x6, y6 = max(x1, x3), max(y1, y3), min(x2, x4), min(y2, y4)\n    return x5, y5, x6, y6\n\ndef is_visible(rect1, rect2, rect3):\n    if is_inside(rect1, rect2) and is_inside(rect1, rect3):\n        return False\n    if is_outside(rect1, rect2) and is_outside(rect1, rect3):\n        return True\n    if is_inside(rect1, rect2) and is_outside(rect1, rect3):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect2)\n        if is_outside((x1, y1, x2, y2), rect3):\n            return True\n    if is_inside(rect1, rect3) and is_outside(rect1, rect2):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect3)\n        if is_outside((x1, y1, x2, y2), rect2):\n            return True\n    return False\n\ndef main():\n    rect1 = tuple(map(int, input().split()))\n    rect2 = tuple(map(int, input().split()))\n    rect3 = tuple(map(int, input().split()))\n    if is_visible(rect1, rect2, rect3):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#Solution\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\nif x3 <= x1 <= x4 and y3 <= y1 <= y4 and x5 <= x1 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y2 <= y4 and x5 <= x2 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x1 <= x4 and y3 <= y2 <= y4 and x5 <= x1 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y1 <= y4 and x5 <= x2 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelse:\n    print('YES')"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef check(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x3 < x2 and x4 > x1 and y3 < y2 and y4 > y1:\n        return False\n    return True\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if check(x1, y1, x2, y2, x3, y3, x4, y4) and check(x1, y1, x2, y2, x5, y5, x6, y6):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    \"\"\"\n    Returns True if some part of the white sheet can be seen from the above after the two black sheets are placed.\n    Otherwise returns False.\n    \"\"\"\n    s1 = (x2 - x1) * (y2 - y1)\n    s2 = (x4 - x3) * (y4 - y3)\n    s3 = (x6 - x5) * (y6 - y5)\n    s_total = (max(x2, x4, x6) - min(x1, x3, x5)) * (max(y2, y4, y6) - min(y1, y3, y5))\n    s_all = s1 + s2 + s3 - s_total\n    if s_all > 0:\n        return False\n    else:\n        return True\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\nprint(\"YES\" if visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) else \"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef is_in_range(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 < x3 < x2 and y1 < y3 < y2\n\ndef is_intersect(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (is_in_range(x1, y1, x2, y2, x3, y3, x4, y4) or\n            is_in_range(x1, y1, x2, y2, x3, y4, x4, y3) or\n            is_in_range(x3, y3, x4, y4, x1, y1, x2, y2) or\n            is_in_range(x3, y3, x4, y4, x1, y2, x2, y1))\n\ndef is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_intersect(x1, y1, x2, y2, x3, y3, x4, y4) or\n            not is_intersect(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650134877,
  "id": "cmpl-4xhkblq1J6JQW3FTjMv8NTnKEF9qn",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 18:48:21.907793 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    x3, y3, x4, y4 = [int(x) for x in input().split()]\n    x5, y5, x6, y6 = [int(x) for x in input().split()]\n\n    if x2 <= x5 or x6 <= x1:\n        print(\"YES\")\n    elif y2 <= y5 or y6 <= y1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:48:21.907837 REASON stop
2022-04-16 18:48:21.924603 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    x1,y1,x2,y2=map(int,input().split())\n    x3,y3,x4,y4=map(int,input().split())\n    x5,y5,x6,y6=map(int,input().split())\n    if (x1>=x3 and x2<=x4 and y1>=y3 and y2<=y4) or (x1>=x5 and x2<=x6 and y1>=y5 and y2<=y6):\n        print('NO')\n    else:\n        print('YES')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 18:48:21.924778 REASON stop
2022-04-16 18:48:21.925259 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:48:21.925319 REASON stop
2022-04-16 18:48:21.935807 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef is_inside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return not (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef is_outside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef rect_intersection(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    x5, y5, x6, y6 = max(x1, x3), max(y1, y3), min(x2, x4), min(y2, y4)\n    return x5, y5, x6, y6\n\ndef is_visible(rect1, rect2, rect3):\n    if is_inside(rect1, rect2) and is_inside(rect1, rect3):\n        return False\n    if is_outside(rect1, rect2) and is_outside(rect1, rect3):\n        return True\n    if is_inside(rect1, rect2) and is_outside(rect1, rect3):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect2)\n        if is_outside((x1, y1, x2, y2), rect3):\n            return True\n    if is_inside(rect1, rect3) and is_outside(rect1, rect2):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect3)\n        if is_outside((x1, y1, x2, y2), rect2):\n            return True\n    return False\n\ndef main():\n    rect1 = tuple(map(int, input().split()))\n    rect2 = tuple(map(int, input().split()))\n    rect3 = tuple(map(int, input().split()))\n    if is_visible(rect1, rect2, rect3):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:48:21.935925 REASON stop
2022-04-16 18:48:21.936966 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#Solution\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\nif x3 <= x1 <= x4 and y3 <= y1 <= y4 and x5 <= x1 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y2 <= y4 and x5 <= x2 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x1 <= x4 and y3 <= y2 <= y4 and x5 <= x1 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y1 <= y4 and x5 <= x2 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelse:\n    print('YES')"
}
2022-04-16 18:48:21.937072 REASON stop
2022-04-16 18:48:21.959112 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef check(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x3 < x2 and x4 > x1 and y3 < y2 and y4 > y1:\n        return False\n    return True\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if check(x1, y1, x2, y2, x3, y3, x4, y4) and check(x1, y1, x2, y2, x5, y5, x6, y6):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 18:48:21.959222 REASON stop
2022-04-16 18:48:21.960938 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    \"\"\"\n    Returns True if some part of the white sheet can be seen from the above after the two black sheets are placed.\n    Otherwise returns False.\n    \"\"\"\n    s1 = (x2 - x1) * (y2 - y1)\n    s2 = (x4 - x3) * (y4 - y3)\n    s3 = (x6 - x5) * (y6 - y5)\n    s_total = (max(x2, x4, x6) - min(x1, x3, x5)) * (max(y2, y4, y6) - min(y1, y3, y5))\n    s_all = s1 + s2 + s3 - s_total\n    if s_all > 0:\n        return False\n    else:\n        return True\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\nprint(\"YES\" if visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) else \"NO\")"
}
2022-04-16 18:48:21.961091 REASON stop
2022-04-16 18:48:21.961816 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef is_in_range(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 < x3 < x2 and y1 < y3 < y2\n\ndef is_intersect(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (is_in_range(x1, y1, x2, y2, x3, y3, x4, y4) or\n            is_in_range(x1, y1, x2, y2, x3, y4, x4, y3) or\n            is_in_range(x3, y3, x4, y4, x1, y1, x2, y2) or\n            is_in_range(x3, y3, x4, y4, x1, y2, x2, y1))\n\ndef is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_intersect(x1, y1, x2, y2, x3, y3, x4, y4) or\n            not is_intersect(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 18:48:21.961954 REASON stop
