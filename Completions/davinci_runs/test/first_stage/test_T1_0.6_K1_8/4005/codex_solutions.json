["\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef check(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x3 < x2 and x4 > x1 and y3 < y2 and y4 > y1:\n        return False\n    return True\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if check(x1, y1, x2, y2, x3, y3, x4, y4) and check(x1, y1, x2, y2, x5, y5, x6, y6):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    x3, y3, x4, y4 = [int(x) for x in input().split()]\n    x5, y5, x6, y6 = [int(x) for x in input().split()]\n\n    if x2 <= x5 or x6 <= x1:\n        print(\"YES\")\n    elif y2 <= y5 or y6 <= y1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n#Solution\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\nif x3 <= x1 <= x4 and y3 <= y1 <= y4 and x5 <= x1 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y2 <= y4 and x5 <= x2 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x1 <= x4 and y3 <= y2 <= y4 and x5 <= x1 <= x6 and y5 <= y2 <= y6:\n    print('NO')\nelif x3 <= x2 <= x4 and y3 <= y1 <= y4 and x5 <= x2 <= x6 and y5 <= y1 <= y6:\n    print('NO')\nelse:\n    print('YES')", "\n\ndef is_inside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return not (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef is_outside(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    return (x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3)\n\ndef rect_intersection(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    x5, y5, x6, y6 = max(x1, x3), max(y1, y3), min(x2, x4), min(y2, y4)\n    return x5, y5, x6, y6\n\ndef is_visible(rect1, rect2, rect3):\n    if is_inside(rect1, rect2) and is_inside(rect1, rect3):\n        return False\n    if is_outside(rect1, rect2) and is_outside(rect1, rect3):\n        return True\n    if is_inside(rect1, rect2) and is_outside(rect1, rect3):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect2)\n        if is_outside((x1, y1, x2, y2), rect3):\n            return True\n    if is_inside(rect1, rect3) and is_outside(rect1, rect2):\n        x1, y1, x2, y2 = rect_intersection(rect1, rect3)\n        if is_outside((x1, y1, x2, y2), rect2):\n            return True\n    return False\n\ndef main():\n    rect1 = tuple(map(int, input().split()))\n    rect2 = tuple(map(int, input().split()))\n    rect3 = tuple(map(int, input().split()))\n    if is_visible(rect1, rect2, rect3):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    x1,y1,x2,y2=map(int,input().split())\n    x3,y3,x4,y4=map(int,input().split())\n    x5,y5,x6,y6=map(int,input().split())\n    if (x1>=x3 and x2<=x4 and y1>=y3 and y2<=y4) or (x1>=x5 and x2<=x6 and y1>=y5 and y2<=y6):\n        print('NO')\n    else:\n        print('YES')\n\nif __name__ == '__main__':\n    main()", "\n\ndef is_in_range(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 < x3 < x2 and y1 < y3 < y2\n\ndef is_intersect(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (is_in_range(x1, y1, x2, y2, x3, y3, x4, y4) or\n            is_in_range(x1, y1, x2, y2, x3, y4, x4, y3) or\n            is_in_range(x3, y3, x4, y4, x1, y1, x2, y2) or\n            is_in_range(x3, y3, x4, y4, x1, y2, x2, y1))\n\ndef is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_intersect(x1, y1, x2, y2, x3, y3, x4, y4) or\n            not is_intersect(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    if is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()", "\n\ndef visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    \"\"\"\n    Returns True if some part of the white sheet can be seen from the above after the two black sheets are placed.\n    Otherwise returns False.\n    \"\"\"\n    s1 = (x2 - x1) * (y2 - y1)\n    s2 = (x4 - x3) * (y4 - y3)\n    s3 = (x6 - x5) * (y6 - y5)\n    s_total = (max(x2, x4, x6) - min(x1, x3, x5)) * (max(y2, y4, y6) - min(y1, y3, y5))\n    s_all = s1 + s2 + s3 - s_total\n    if s_all > 0:\n        return False\n    else:\n        return True\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\nprint(\"YES\" if visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) else \"NO\")"]