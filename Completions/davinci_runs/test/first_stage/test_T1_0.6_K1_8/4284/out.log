2022-04-16 20:42:21.737801 """
Vova is playing a computer game. There are in total $n$ turns in the game and Vova really wants to play all of them. The initial charge of his laptop battery (i.e. the charge before the start of the game) is $k$.

During each turn Vova can choose what to do:   If the current charge of his laptop battery is strictly greater than $a$, Vova can just play, and then the charge of his laptop battery will decrease by $a$;  if the current charge of his laptop battery is strictly greater than $b$ ($b<a$), Vova can play and charge his laptop, and then the charge of his laptop battery will decrease by $b$;  if the current charge of his laptop battery is less than or equal to $a$ and $b$ at the same time then Vova cannot do anything and loses the game. 

Regardless of Vova's turns the charge of the laptop battery is always decreases.

Vova wants to complete the game (Vova can complete the game if after each of $n$ turns the charge of the laptop battery is strictly greater than $0$). Vova has to play exactly $n$ turns. Among all possible ways to complete the game, Vova wants to choose the one where the number of turns when he just plays (first type turn) is the maximum possible. It is possible that Vova cannot complete the game at all.

Your task is to find out the maximum possible number of turns Vova can just play (make the first type turn) or report that Vova cannot complete the game.

You have to answer $q$ independent queries.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 10^5$) — the number of queries. Each query is presented by a single line.

The only line of the query contains four integers $k, n, a$ and $b$ ($1 \le k, n \le 10^9, 1 \le b < a \le 10^9$) — the initial charge of Vova's laptop battery, the number of turns in the game and values $a$ and $b$, correspondingly.


-----Output-----

For each query print one integer: -1 if Vova cannot complete the game or the maximum number of turns Vova can just play (make the first type turn) otherwise.


-----Example-----
Input
6
15 5 3 2
15 5 4 3
15 5 2 1
15 5 5 1
16 7 5 2
20 5 7 3

Output
4
-1
5
2
0
1



-----Note-----

In the first example query Vova can just play $4$ turns and spend $12$ units of charge and then one turn play and charge and spend $2$ more units. So the remaining charge of the battery will be $1$.

In the second example query Vova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.
"""
2022-04-16 20:42:21.737830 --------------------------
2022-04-16 20:42:47.623110 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    if n*b >= k:\n        print(n)\n    else:\n        p = k - n*b\n        if p % (a-b) == 0:\n            print(n-p//(a-b))\n        else:\n            print(n-p//(a-b)-1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef max_play_turns(k,n,a,b):\n    # if b >= k:\n    #     return 0\n    # if a >= k:\n    #     return -1\n\n    # if b == 0:\n    #     return -1\n\n    # a_turns = k // a\n    # b_turns = k // b\n\n    # if b_turns >= n:\n    #     return n\n    # if a_turns >= n:\n    #     return -1\n\n    # rem_b_charge = k % b\n    # if rem_b_charge >= a:\n    #     return b_turns + 1\n    # else:\n    #     return b_turns\n\n    # can_a_turns = n - b_turns\n    # can_b_turns = n - a_turns\n\n    # if can_b_turns >= 0:\n    #     return can_b_turns\n    # elif can_a_turns >= 0:\n    #     return can_a_turns\n    # else:\n    #     return -1\n    if b > k:\n        return 0\n    if a > k:\n        return -1\n    if b == 0:\n        return -1\n    a_turns = k // a\n    b_turns = k // b\n    if b_turns >= n:\n        return n\n    if a_turns >= n:\n        return -1\n    rem_b_charge = k % b\n    if rem_b_charge >= a:\n        return b_turns + 1\n    else:\n        return b_turns\n    can_a_turns = n - b_turns\n    can_b_turns = n - a_turns\n    if can_b_turns >= 0:\n        return can_b_turns\n    elif can_a_turns >= 0:\n        return can_a_turns\n    else:\n        return -1\n\nq = int(input())\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_play_turns(k,n,a,b))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nimport sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\nf = sys.stdin\no = sys.stdout\n\ndef main():\n    q = int(f.readline())\n    while q > 0:\n        q -= 1\n        l = list(map(int, f.readline().split()))\n        k = l[0]\n        n = l[1]\n        a = l[2]\n        b = l[3]\n        play = k // a\n        charge = k // b\n        if play + charge < n:\n            print(-1, file = o)\n        elif play >= n:\n            print(n, file = o)\n        else:\n            print(play, file = o)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef solve(k, n, a, b):\n    if k < a:\n        return -1\n    if (k - b) % (a - b) == 0:\n        return k // (a - b) - 1\n    return k // (a - b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(solve(k, n, a, b))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\nclass Game:\n  def __init__(self, initial_charge, turns, play, charge):\n    self.initial_charge = initial_charge\n    self.turns = turns\n    self.play = play\n    self.charge = charge\n\n  def solve(self):\n    if self.play > self.charge:\n      return self.turns\n    return self.initial_charge // self.charge\n\nclass ChargeGame:\n  def __init__(self):\n    self.games = []\n\n  def add_game(self, initial_charge, turns, play, charge):\n    self.games.append(Game(initial_charge, turns, play, charge))\n\n  def solve(self):\n    for game in self.games:\n      print(game.solve())\n\nif __name__ == \"__main__\":\n  charge_game = ChargeGame()\n  for line in sys.stdin:\n    inputs = [int(x) for x in line.split()]\n    charge_game.add_game(inputs[0], inputs[1], inputs[2], inputs[3])\n  charge_game.solve()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nq = int(input())\n\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n\n    if k < n*b:\n        print(-1)\n        continue\n\n    if n*a < k:\n        print(n)\n        continue\n\n    # k >= n*b and k >= n*a\n    n_just_play = (k-n*b)//(a-b)\n\n    # n_just_play is max possible\n\n    if n_just_play < n:\n        print(n_just_play)\n    else:\n        print(n)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef play(k, n, a, b):\n    # check if Vova can play at all\n    if k < a:\n        return -1\n    # check if Vova can play without charging\n    if k - a * n >= 0:\n        return n\n    # check if Vova can play with charging\n    if k - b * n < 0:\n        return -1\n    # calculate how many times Vova can play without charging\n    num_plays = math.floor((k - b * n) / (a - b))\n    return num_plays\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(play(k, n, a, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom math import ceil\n\ndef solve(k, n, a, b):\n    # if n is not divisible by 2, then Vova cannot just play n turns\n    if n % 2 != 0:\n        return -1\n\n    # if the battery charge is not enough to just play n turns, then Vova cannot just play n turns\n    if k < (n/2) * a:\n        return -1\n\n    # Vova can just play n turns if the charge is enough\n    if k >= (n/2) * a:\n        return n/2\n\n    # Vova can just play ceil(n/2) turns if the charge is enough\n    if k >= ceil(n/2) * b:\n        return ceil(n/2)\n\n    return -1\n\nq = int(stdin.readline())\nfor _ in range(q):\n    k, n, a, b = map(int, stdin.readline().split())\n    print(solve(k, n, a, b))"
    }
  ],
  "created": 1650141741,
  "id": "cmpl-4xjXJWk8nRUTsR0qUuLCCM7Zxnpb9",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:42:47.623614 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    if n*b >= k:\n        print(n)\n    else:\n        p = k - n*b\n        if p % (a-b) == 0:\n            print(n-p//(a-b))\n        else:\n            print(n-p//(a-b)-1)"
}
2022-04-16 20:42:47.623674 REASON stop
2022-04-16 20:42:47.671739 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef max_play_turns(k,n,a,b):\n    # if b >= k:\n    #     return 0\n    # if a >= k:\n    #     return -1\n\n    # if b == 0:\n    #     return -1\n\n    # a_turns = k // a\n    # b_turns = k // b\n\n    # if b_turns >= n:\n    #     return n\n    # if a_turns >= n:\n    #     return -1\n\n    # rem_b_charge = k % b\n    # if rem_b_charge >= a:\n    #     return b_turns + 1\n    # else:\n    #     return b_turns\n\n    # can_a_turns = n - b_turns\n    # can_b_turns = n - a_turns\n\n    # if can_b_turns >= 0:\n    #     return can_b_turns\n    # elif can_a_turns >= 0:\n    #     return can_a_turns\n    # else:\n    #     return -1\n    if b > k:\n        return 0\n    if a > k:\n        return -1\n    if b == 0:\n        return -1\n    a_turns = k // a\n    b_turns = k // b\n    if b_turns >= n:\n        return n\n    if a_turns >= n:\n        return -1\n    rem_b_charge = k % b\n    if rem_b_charge >= a:\n        return b_turns + 1\n    else:\n        return b_turns\n    can_a_turns = n - b_turns\n    can_b_turns = n - a_turns\n    if can_b_turns >= 0:\n        return can_b_turns\n    elif can_a_turns >= 0:\n        return can_a_turns\n    else:\n        return -1\n\nq = int(input())\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_play_turns(k,n,a,b))"
}
2022-04-16 20:42:47.671996 REASON stop
2022-04-16 20:42:47.672757 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nimport sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\nf = sys.stdin\no = sys.stdout\n\ndef main():\n    q = int(f.readline())\n    while q > 0:\n        q -= 1\n        l = list(map(int, f.readline().split()))\n        k = l[0]\n        n = l[1]\n        a = l[2]\n        b = l[3]\n        play = k // a\n        charge = k // b\n        if play + charge < n:\n            print(-1, file = o)\n        elif play >= n:\n            print(n, file = o)\n        else:\n            print(play, file = o)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:42:47.672918 REASON stop
2022-04-16 20:42:47.702768 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef solve(k, n, a, b):\n    if k < a:\n        return -1\n    if (k - b) % (a - b) == 0:\n        return k // (a - b) - 1\n    return k // (a - b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(solve(k, n, a, b))"
}
2022-04-16 20:42:47.702875 REASON stop
2022-04-16 20:42:47.722522 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\nclass Game:\n  def __init__(self, initial_charge, turns, play, charge):\n    self.initial_charge = initial_charge\n    self.turns = turns\n    self.play = play\n    self.charge = charge\n\n  def solve(self):\n    if self.play > self.charge:\n      return self.turns\n    return self.initial_charge // self.charge\n\nclass ChargeGame:\n  def __init__(self):\n    self.games = []\n\n  def add_game(self, initial_charge, turns, play, charge):\n    self.games.append(Game(initial_charge, turns, play, charge))\n\n  def solve(self):\n    for game in self.games:\n      print(game.solve())\n\nif __name__ == \"__main__\":\n  charge_game = ChargeGame()\n  for line in sys.stdin:\n    inputs = [int(x) for x in line.split()]\n    charge_game.add_game(inputs[0], inputs[1], inputs[2], inputs[3])\n  charge_game.solve()"
}
2022-04-16 20:42:47.722647 REASON stop
2022-04-16 20:42:47.723591 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nq = int(input())\n\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n\n    if k < n*b:\n        print(-1)\n        continue\n\n    if n*a < k:\n        print(n)\n        continue\n\n    # k >= n*b and k >= n*a\n    n_just_play = (k-n*b)//(a-b)\n\n    # n_just_play is max possible\n\n    if n_just_play < n:\n        print(n_just_play)\n    else:\n        print(n)"
}
2022-04-16 20:42:47.723674 REASON stop
2022-04-16 20:42:47.724564 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef play(k, n, a, b):\n    # check if Vova can play at all\n    if k < a:\n        return -1\n    # check if Vova can play without charging\n    if k - a * n >= 0:\n        return n\n    # check if Vova can play with charging\n    if k - b * n < 0:\n        return -1\n    # calculate how many times Vova can play without charging\n    num_plays = math.floor((k - b * n) / (a - b))\n    return num_plays\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(play(k, n, a, b))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 20:42:47.724647 REASON stop
2022-04-16 20:42:47.725423 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom math import ceil\n\ndef solve(k, n, a, b):\n    # if n is not divisible by 2, then Vova cannot just play n turns\n    if n % 2 != 0:\n        return -1\n\n    # if the battery charge is not enough to just play n turns, then Vova cannot just play n turns\n    if k < (n/2) * a:\n        return -1\n\n    # Vova can just play n turns if the charge is enough\n    if k >= (n/2) * a:\n        return n/2\n\n    # Vova can just play ceil(n/2) turns if the charge is enough\n    if k >= ceil(n/2) * b:\n        return ceil(n/2)\n\n    return -1\n\nq = int(stdin.readline())\nfor _ in range(q):\n    k, n, a, b = map(int, stdin.readline().split())\n    print(solve(k, n, a, b))"
}
2022-04-16 20:42:47.725501 REASON stop
