["\n\n# SOLUTION\n\nimport sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\nf = sys.stdin\no = sys.stdout\n\ndef main():\n    q = int(f.readline())\n    while q > 0:\n        q -= 1\n        l = list(map(int, f.readline().split()))\n        k = l[0]\n        n = l[1]\n        a = l[2]\n        b = l[3]\n        play = k // a\n        charge = k // b\n        if play + charge < n:\n            print(-1, file = o)\n        elif play >= n:\n            print(n, file = o)\n        else:\n            print(play, file = o)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\nclass Game:\n  def __init__(self, initial_charge, turns, play, charge):\n    self.initial_charge = initial_charge\n    self.turns = turns\n    self.play = play\n    self.charge = charge\n\n  def solve(self):\n    if self.play > self.charge:\n      return self.turns\n    return self.initial_charge // self.charge\n\nclass ChargeGame:\n  def __init__(self):\n    self.games = []\n\n  def add_game(self, initial_charge, turns, play, charge):\n    self.games.append(Game(initial_charge, turns, play, charge))\n\n  def solve(self):\n    for game in self.games:\n      print(game.solve())\n\nif __name__ == \"__main__\":\n  charge_game = ChargeGame()\n  for line in sys.stdin:\n    inputs = [int(x) for x in line.split()]\n    charge_game.add_game(inputs[0], inputs[1], inputs[2], inputs[3])\n  charge_game.solve()", "\n\nimport math\n\ndef play(k, n, a, b):\n    # check if Vova can play at all\n    if k < a:\n        return -1\n    # check if Vova can play without charging\n    if k - a * n >= 0:\n        return n\n    # check if Vova can play with charging\n    if k - b * n < 0:\n        return -1\n    # calculate how many times Vova can play without charging\n    num_plays = math.floor((k - b * n) / (a - b))\n    return num_plays\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(play(k, n, a, b))\n\nif __name__ == \"__main__\":\n    main()", "\n\nq = int(input())\n\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n\n    if k < n*b:\n        print(-1)\n        continue\n\n    if n*a < k:\n        print(n)\n        continue\n\n    # k >= n*b and k >= n*a\n    n_just_play = (k-n*b)//(a-b)\n\n    # n_just_play is max possible\n\n    if n_just_play < n:\n        print(n_just_play)\n    else:\n        print(n)", "\n\ndef max_play_turns(k,n,a,b):\n    # if b >= k:\n    #     return 0\n    # if a >= k:\n    #     return -1\n\n    # if b == 0:\n    #     return -1\n\n    # a_turns = k // a\n    # b_turns = k // b\n\n    # if b_turns >= n:\n    #     return n\n    # if a_turns >= n:\n    #     return -1\n\n    # rem_b_charge = k % b\n    # if rem_b_charge >= a:\n    #     return b_turns + 1\n    # else:\n    #     return b_turns\n\n    # can_a_turns = n - b_turns\n    # can_b_turns = n - a_turns\n\n    # if can_b_turns >= 0:\n    #     return can_b_turns\n    # elif can_a_turns >= 0:\n    #     return can_a_turns\n    # else:\n    #     return -1\n    if b > k:\n        return 0\n    if a > k:\n        return -1\n    if b == 0:\n        return -1\n    a_turns = k // a\n    b_turns = k // b\n    if b_turns >= n:\n        return n\n    if a_turns >= n:\n        return -1\n    rem_b_charge = k % b\n    if rem_b_charge >= a:\n        return b_turns + 1\n    else:\n        return b_turns\n    can_a_turns = n - b_turns\n    can_b_turns = n - a_turns\n    if can_b_turns >= 0:\n        return can_b_turns\n    elif can_a_turns >= 0:\n        return can_a_turns\n    else:\n        return -1\n\nq = int(input())\nfor i in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_play_turns(k,n,a,b))", "\n\n\ndef solve(k, n, a, b):\n    if k < a:\n        return -1\n    if (k - b) % (a - b) == 0:\n        return k // (a - b) - 1\n    return k // (a - b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(solve(k, n, a, b))", "\n\nfrom sys import stdin\nfrom math import ceil\n\ndef solve(k, n, a, b):\n    # if n is not divisible by 2, then Vova cannot just play n turns\n    if n % 2 != 0:\n        return -1\n\n    # if the battery charge is not enough to just play n turns, then Vova cannot just play n turns\n    if k < (n/2) * a:\n        return -1\n\n    # Vova can just play n turns if the charge is enough\n    if k >= (n/2) * a:\n        return n/2\n\n    # Vova can just play ceil(n/2) turns if the charge is enough\n    if k >= ceil(n/2) * b:\n        return ceil(n/2)\n\n    return -1\n\nq = int(stdin.readline())\nfor _ in range(q):\n    k, n, a, b = map(int, stdin.readline().split())\n    print(solve(k, n, a, b))", "\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    if n*b >= k:\n        print(n)\n    else:\n        p = k - n*b\n        if p % (a-b) == 0:\n            print(n-p//(a-b))\n        else:\n            print(n-p//(a-b)-1)"]