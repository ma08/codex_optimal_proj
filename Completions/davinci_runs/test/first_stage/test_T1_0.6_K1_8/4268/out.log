2022-04-16 20:35:58.106080 """
There are N points in a D-dimensional space.
The coordinates of the i-th point are (X_{i1}, X_{i2}, ..., X_{iD}).
The distance between two points with coordinates (y_1, y_2, ..., y_D) and (z_1, z_2, ..., z_D) is \sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}.
How many pairs (i, j) (i < j) are there such that the distance between the i-th point and the j-th point is an integer?

-----Constraints-----
 - All values in input are integers.
 - 2 \leq N \leq 10
 - 1 \leq D \leq 10
 - -20 \leq X_{ij} \leq 20
 - No two given points have the same coordinates. That is, if i \neq j, there exists k such that X_{ik} \neq X_{jk}.

-----Input-----
Input is given from Standard Input in the following format:
N D
X_{11} X_{12} ... X_{1D}
X_{21} X_{22} ... X_{2D}
\vdots
X_{N1} X_{N2} ... X_{ND}

-----Output-----
Print the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.

-----Sample Input-----
3 2
1 2
5 5
-2 8

-----Sample Output-----
1

The number of pairs with an integer distance is one, as follows:
 - The distance between the first point and the second point is \sqrt{|1-5|^2 + |2-5|^2} = 5, which is an integer.
 - The distance between the second point and the third point is \sqrt{|5-(-2)|^2 + |5-8|^2} = \sqrt{58}, which is not an integer.
 - The distance between the third point and the first point is \sqrt{|-2-1|^2+|8-2|^2} = 3\sqrt{5}, which is not an integer.
"""
2022-04-16 20:35:58.106120 --------------------------
2022-04-16 20:36:15.544023 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    next(sys.stdin)\n    points = [tuple(map(int, line.split())) for line in sys.stdin]\n    dists = dict()\n    for i in range(len(points)):\n        for j in range(i):\n            d = dist(points[i], points[j])\n            dists[d] = dists.get(d, 0) + 1\n\n    print(sum(dists.values()))\n\ndef dist(p1, p2):\n    d = 0\n    for x, y in zip(p1, p2):\n        d += (x - y) ** 2\n    return int(d ** 0.5)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nfrom math import sqrt\nfrom itertools import combinations\n\ndef distance(p1, p2):\n    return sqrt(sum([(x-y)**2 for x,y in zip(p1,p2)]))\n\ndef integer_distance(points):\n    count = 0\n    for p1, p2 in combinations(points, r=2):\n        if distance(p1,p2).is_integer():\n            count += 1\n    return count\n\ndef main():\n    N, D = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    print(integer_distance(points))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----main-----\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += sum([(x[i][k]-x[j][k])**2 for k in range(d)])**0.5 == int(sum([(x[i][k]-x[j][k])**2 for k in range(d)])**0.5)\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    dist = []\n    for i in range(n):\n        for j in range(i+1, n):\n            tmp = 0\n            for k in range(d):\n                tmp += abs(points[i][k] - points[j][k])**2\n            dist.append(tmp)\n    cnt = 0\n    for i in range(len(dist)):\n        if dist[i]**0.5 == int(dist[i]**0.5):\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python3\n\nimport sys\n\nN, D = list(map(int, input().split()))\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndists = []\n\nfor i in range(N):\n    for j in range(i+1, N):\n        dist = 0\n        for k in range(D):\n            dist += (points[i][k] - points[j][k]) ** 2\n        dists.append(dist)\n\nans = 0\n\nfor dist in dists:\n    if dist ** 0.5 == int(dist ** 0.5):\n        ans += 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    num_points, num_dimensions = [int(x) for x in input().split()]\n    points = []\n    for _ in range(num_points):\n        points.append([int(x) for x in input().split()])\n    # print(points)\n    num_pairs = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            dist = 0\n            for k in range(num_dimensions):\n                dist += (points[i][k] - points[j][k])**2\n            # print(dist)\n            if dist**0.5 == int(dist**0.5):\n                num_pairs += 1\n    print(num_pairs)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom operator import mul\nfrom functools import reduce\nfrom math import sqrt\n\ndef main():\n    n,d = map(int, sys.stdin.readline().split())\n    points = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if int(sqrt(sum([(x-y)*(x-y) for x,y in zip(points[i],points[j])]))) == sqrt(sum([(x-y)*(x-y) for x,y in zip(points[i],points[j])])):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    nums = input().split()\n    N = int(nums[0])\n    D = int(nums[1])\n    points = []\n    for i in range(0, N):\n        points.append(input().split())\n    pairs = []\n    for i in points:\n        for j in points:\n            if i != j:\n                if is_integer_distance(i, j):\n                    pairs.append((i, j))\n    print(len(pairs))\n\ndef is_integer_distance(p1, p2):\n    distance = 0\n    for i in range(0, len(p1)):\n        distance += (int(p1[i]) - int(p2[i])) ** 2\n    return distance ** 0.5 == int(distance ** 0.5)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650141358,
  "id": "cmpl-4xjR8j0c8bUpwvoZ6M6YJAzwKT9tw",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:36:15.544488 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    next(sys.stdin)\n    points = [tuple(map(int, line.split())) for line in sys.stdin]\n    dists = dict()\n    for i in range(len(points)):\n        for j in range(i):\n            d = dist(points[i], points[j])\n            dists[d] = dists.get(d, 0) + 1\n\n    print(sum(dists.values()))\n\ndef dist(p1, p2):\n    d = 0\n    for x, y in zip(p1, p2):\n        d += (x - y) ** 2\n    return int(d ** 0.5)\n\nmain()"
}
2022-04-16 20:36:15.544575 REASON stop
2022-04-16 20:36:15.546475 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nfrom math import sqrt\nfrom itertools import combinations\n\ndef distance(p1, p2):\n    return sqrt(sum([(x-y)**2 for x,y in zip(p1,p2)]))\n\ndef integer_distance(points):\n    count = 0\n    for p1, p2 in combinations(points, r=2):\n        if distance(p1,p2).is_integer():\n            count += 1\n    return count\n\ndef main():\n    N, D = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    print(integer_distance(points))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:36:15.546691 REASON stop
2022-04-16 20:36:15.547341 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----main-----\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += sum([(x[i][k]-x[j][k])**2 for k in range(d)])**0.5 == int(sum([(x[i][k]-x[j][k])**2 for k in range(d)])**0.5)\nprint(ans)"
}
2022-04-16 20:36:15.547470 REASON stop
2022-04-16 20:36:15.559995 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    dist = []\n    for i in range(n):\n        for j in range(i+1, n):\n            tmp = 0\n            for k in range(d):\n                tmp += abs(points[i][k] - points[j][k])**2\n            dist.append(tmp)\n    cnt = 0\n    for i in range(len(dist)):\n        if dist[i]**0.5 == int(dist[i]**0.5):\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:36:15.560112 REASON stop
2022-04-16 20:36:15.561578 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python3\n\nimport sys\n\nN, D = list(map(int, input().split()))\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndists = []\n\nfor i in range(N):\n    for j in range(i+1, N):\n        dist = 0\n        for k in range(D):\n            dist += (points[i][k] - points[j][k]) ** 2\n        dists.append(dist)\n\nans = 0\n\nfor dist in dists:\n    if dist ** 0.5 == int(dist ** 0.5):\n        ans += 1\n\nprint(ans)"
}
2022-04-16 20:36:15.561676 REASON stop
2022-04-16 20:36:15.577138 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    num_points, num_dimensions = [int(x) for x in input().split()]\n    points = []\n    for _ in range(num_points):\n        points.append([int(x) for x in input().split()])\n    # print(points)\n    num_pairs = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            dist = 0\n            for k in range(num_dimensions):\n                dist += (points[i][k] - points[j][k])**2\n            # print(dist)\n            if dist**0.5 == int(dist**0.5):\n                num_pairs += 1\n    print(num_pairs)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:36:15.577241 REASON stop
2022-04-16 20:36:15.578406 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom operator import mul\nfrom functools import reduce\nfrom math import sqrt\n\ndef main():\n    n,d = map(int, sys.stdin.readline().split())\n    points = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if int(sqrt(sum([(x-y)*(x-y) for x,y in zip(points[i],points[j])]))) == sqrt(sum([(x-y)*(x-y) for x,y in zip(points[i],points[j])])):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:36:15.578491 REASON stop
2022-04-16 20:36:15.579721 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    nums = input().split()\n    N = int(nums[0])\n    D = int(nums[1])\n    points = []\n    for i in range(0, N):\n        points.append(input().split())\n    pairs = []\n    for i in points:\n        for j in points:\n            if i != j:\n                if is_integer_distance(i, j):\n                    pairs.append((i, j))\n    print(len(pairs))\n\ndef is_integer_distance(p1, p2):\n    distance = 0\n    for i in range(0, len(p1)):\n        distance += (int(p1[i]) - int(p2[i])) ** 2\n    return distance ** 0.5 == int(distance ** 0.5)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:36:15.579821 REASON stop
