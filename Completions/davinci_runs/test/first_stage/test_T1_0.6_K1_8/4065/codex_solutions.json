["\n\n\ndef solve(inp):\n    n = inp[0]\n    a = inp[1]\n    d = dict()\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    ret = 1\n    for i in range(1, n):\n        if a[i] in d:\n            d[a[i]] -= 1\n            if d[a[i]] == 0:\n                d.pop(a[i])\n        else:\n            continue\n        if a[i] * 2 in d:\n            d[a[i] * 2] -= 1\n            if d[a[i] * 2] == 0:\n                d.pop(a[i] * 2)\n        else:\n            continue\n        ret += 1\n    return ret\n\n\nimport sys\n\nif __name__ == \"__main__\":\n    inp = [int(x) for x in sys.stdin.readline().strip().split()]\n    inp.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(solve(inp))", "\n\nimport sys\n\ndef solution(n, a):\n    \"\"\"\n    >>> solution(10, [1, 2, 5, 6, 7, 10, 21, 23, 24, 49])\n    4\n    >>> solution(5, [2, 10, 50, 110, 250])\n    1\n    >>> solution(6, [4, 7, 12, 100, 150, 199])\n    3\n    \"\"\"\n    max_contest = 1\n    for i in range(1, n):\n        if a[i] <= a[i-1] * 2:\n            max_contest += 1\n        else:\n            break\n    return max_contest\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solution(n, a))", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n\n    res = 1\n    cur_max = a[0]\n    for i in range(1, n):\n        if a[i] <= cur_max * 2:\n            res += 1\n            cur_max = a[i]\n    print(res)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # dp[i] - number of problems in the longest sequence of problems ending with a[i]\n    dp = [0] * n\n\n    dp[0] = 1\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            if a[i] // 2 in a:\n                dp[i] = dp[a.index(a[i] // 2)] + 1\n            else:\n                dp[i] = 1\n        else:\n            dp[i] = 1\n\n    print(max(dp))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# -*- coding: utf-8 -*-\n# @Date    : 2018-09-14 10:27:29\n# @Author  : raj lath (oorja.halt@gmail.com)\n# @Link    : link\n# @Version : 1.0.0\n\nimport os\nfrom sys import stdin\n\nmax_val=int(10e12)\nmin_val=int(-10e12)\n\ndef read_int()     : return int(stdin.readline())\ndef read_ints()    : return [int(x) for x in stdin.readline().split()]\ndef read_str()     : return input()\ndef read_strs()    : return [x for x in stdin.readline().split()]\n\nnb_test = read_int()\narr     = [0] + read_ints()\n\ndef max_len(arr):\n    if len(arr) == 1: return 1\n    res = 1\n    max_val = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > 2 * max_val:\n            max_val = arr[i]\n            res += 1\n    return res\n\nprint(max_len(arr))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n - max(len(list(takewhile(lambda x: x <= 2 * a[i], a[i+1:]))) for i in range(n-1)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print(1)\n        return\n\n    ans = 0\n    max_num = a[0]\n    for num in a:\n        if num <= max_num * 2:\n            ans += 1\n        else:\n            max_num = num\n    \n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    The idea is that the contest with the minimum difficulty of problems will have the maximum number of problems.\n    We will start from the left, and keep adding problems until the max difficulty is more than twice the current\n    difficulty. If the max difficulty is less than twice the current difficulty, we will add the current difficulty\n    to the contest, and continue.\n\n    \"\"\"\n    # read input\n    n = int(input())\n    difficulties = list(map(int, input().split()))\n\n    # initialize variables\n    contest = []\n    max_difficulty = 0\n    for difficulty in difficulties:\n        if difficulty * 2 > max_difficulty:\n            contest.append(difficulty)\n            max_difficulty = difficulty\n    print(len(contest))\n\n\nif __name__ == '__main__':\n    main()"]