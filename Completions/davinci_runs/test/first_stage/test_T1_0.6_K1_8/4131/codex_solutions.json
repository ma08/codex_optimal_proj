["\n\n\ndef main():\n    N, M = map(int, input().split())\n    P = [[] for i in range(N+1)]\n    for i in range(M):\n        p, y = map(int, input().split())\n        P[p].append(y)\n    for i in range(1, N+1):\n        P[i].sort()\n    for i in range(M):\n        p, y = map(int, input().split())\n        print(\"%06d%06d\" % (p, P[p].index(y)+1))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    city = []\n    for i in range(M):\n        city.append(list(map(int, input().split())))\n    city.sort(key=lambda x:x[1])\n    prefecture = [[] for _ in range(N+1)]\n    for i in range(M):\n        prefecture[city[i][0]].append(i)\n    for i in range(M):\n        prefecture[city[i][0]][-1] = len(prefecture[city[i][0]])\n    for i in range(M):\n        print(\"{:0>6}{:0>6}\".format(city[i][0], prefecture[city[i][0]].pop()))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ncity_dict = {}\nfor i in range(m):\n    prefecture, year = map(int, sys.stdin.readline().split())\n    if prefecture in city_dict:\n        city_dict[prefecture].append(year)\n    else:\n        city_dict[prefecture] = [year]\n\nfor i in range(1, n+1):\n    if i in city_dict:\n        city_dict[i].sort()\n        for j in range(len(city_dict[i])):\n            print(\"{:0>6}{:0>6}\".format(i, j+1))\n    else:\n        continue", "\n\ndef city_ids(n, m, p_y):\n    city_ids = [0] * m\n    p_y = sorted(p_y, key=lambda x:x[1])\n    for i in range(m):\n        city_ids[i] = '{:06d}{:06d}'.format(p_y[i][0], i+1)\n    return city_ids\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    p_y = [list(map(int, input().split())) for _ in range(m)]\n    city_ids = city_ids(n, m, p_y)\n    for i in city_ids:\n        print(i)", "\n\nimport sys\n\ndef main():\n    # read data\n    N, M = map(int,sys.stdin.readline().split())\n    P = []\n    Y = []\n    for i in range(M):\n        p, y = map(int,sys.stdin.readline().split())\n        P.append(p)\n        Y.append(y)\n    # sort\n    idx = [i[0] for i in sorted(enumerate(Y), key=lambda x:x[1])]\n    Y = [Y[i] for i in idx]\n    P = [P[i] for i in idx]\n    # print\n    for i in range(M):\n        p = \"{0:06d}\".format(P[i])\n        y = \"{0:06d}\".format(i+1)\n        print(p+y)\n\nif __name__ == \"__main__\":\n    main()", "\n\nclass City:\n    def __init__(self, prefecture, year):\n        self.prefecture = prefecture\n        self.year = year\n        self.id = None\n\n    def __str__(self):\n        return self.id\n\ndef set_id(city):\n    prefecture = str(city.prefecture)\n    order = str(city.order)\n    while len(prefecture) < 6:\n        prefecture = \"0\" + prefecture\n    while len(order) < 6:\n        order = \"0\" + order\n    city.id = prefecture + order\n\ndef main():\n    N, M = (int(i) for i in input().split())\n    cities = []\n    for _ in range(M):\n        prefecture, year = (int(i) for i in input().split())\n        cities.append(City(prefecture, year))\n    cities.sort(key=lambda c: c.year)\n    for i in range(M):\n        cities[i].order = i + 1\n    for city in cities:\n        set_id(city)\n        print(city)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nfrom collections import defaultdict\n\nN, M = [int(x) for x in input().split()]\n\ndef get_code(prefecture, year):\n    code = \"{:06d}\".format(prefecture) + \"{:06d}\".format(year)\n    return code\n\nprefecture_to_year_to_code = defaultdict(lambda: defaultdict(int))\nfor _ in range(M):\n    prefecture, year = [int(x) for x in input().split()]\n    year_to_code = prefecture_to_year_to_code[prefecture]\n    year_to_code[year] += 1\n    code = get_code(prefecture, year_to_code[year])\n    print(code)", "\n\nimport sys\nread = sys.stdin.readline\n\ndef main():\n    n, m = map(int, read().split())\n    p = [0]*m\n    y = [0]*m\n    for i in range(m):\n        p[i], y[i] = map(int, read().split())\n    # print(n, m)\n    # print(p)\n    # print(y)\n    num = [0]*m\n    for i in range(m):\n        num[i] = str(p[i]).zfill(6) + str(y[i]).zfill(6)\n    print(num)\n\nif __name__ == '__main__':\n    main()"]