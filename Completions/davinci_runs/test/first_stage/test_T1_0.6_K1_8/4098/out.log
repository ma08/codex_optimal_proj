2022-04-16 19:29:50.651684 """
You are a coach at your local university. There are $n$ students under your supervision, the programming skill of the $i$-th student is $a_i$.

You have to form $k$ teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than $k$ (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than $5$. Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).

It is possible that some students not be included in any team at all.

Your task is to report the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 5000$) — the number of students and the maximum number of teams, correspondingly.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is a programming skill of the $i$-th student.


-----Output-----

Print one integer — the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.


-----Examples-----
Input
5 2
1 2 15 15 15

Output
5

Input
6 1
36 4 1 25 9 16

Output
2

Input
4 4
1 10 100 1000

Output
4
"""
2022-04-16 19:29:50.651700 --------------------------
2022-04-16 19:30:24.251495 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(a, k):\n    a = sorted(a)\n    ans = 0\n    for l in range(len(a)):\n        for r in range(l, len(a)):\n            if a[r] - a[l] <= 5:\n                ans = max(ans, r - l + 1)\n    return ans\n\nn, k = map(int, sys.stdin.readline().split())\na = map(int, sys.stdin.readline().split())\nprint solve(a, k)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n\n    i = 0\n    j = 0\n    teams = 0\n    while i < n:\n        while j < n and a[j] - a[i] <= 5:\n            j += 1\n        teams += 1\n        if teams > k:\n            break\n        i = j\n    print(n - i)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef count_teams(student_list, skill_diff, num_teams):\n    \"\"\"\n    Returns the maximum number of students that can be in a team.\n    \"\"\"\n    team_count = 0\n    team_size = 0\n    student_list.sort()\n    for i in range(len(student_list)):\n        if i == 0:\n            team_size += 1\n        elif student_list[i] - student_list[i-1] <= skill_diff:\n            team_size += 1\n        else:\n            team_count += team_size\n            team_size = 1\n    team_count += team_size\n    return int(team_count / num_teams)\n\n#main\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(count_teams(a, 5, k))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef get_all_teams(skills):\n    teams = []\n    for skill_lvl in skills:\n        for team in teams:\n            if team[-1] + 5 >= skill_lvl >= team[0]:\n                team.append(skill_lvl)\n                break\n        else:\n            teams.append([skill_lvl])\n    return teams\n\ndef get_best_teams(skills, k):\n    teams = get_all_teams(skills)\n    teams_by_size = sorted(teams, key=len, reverse=True)\n    if len(teams_by_size) <= k:\n        return len(skills)\n    else:\n        return sum(len(team) for team in teams_by_size[:k])\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split()))\n    print(get_best_teams(skills, k))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#n, k = map(int, raw_input().split())\n#a = map(int, raw_input().split())\n\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n\n#n, k = 6, 1\n#a = [36, 4, 1, 25, 9, 16]\n\n#n, k = 4, 4\n#a = [1, 10, 100, 1000]\n\na.sort()\n\n#print n, k, a\n\n#print a[3] - a[0]\n#print a[4] - a[1]\n#print a[5] - a[2]\n\ni = 0\nj = 0\n\nwhile i < n:\n\tif j - i < k - 1:\n\t\tif a[j] - a[i] <= 5:\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\telse:\n\t\ti += 1\n\nprint j - i + 1"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef test_data():\n    \"\"\"Generate test data.\"\"\"\n    n = 5000\n    k = 5000\n    a = [1] * n\n    for i in range(n):\n        a[i] = i + 1\n\n    return n, k, a\n\ndef read_data():\n    \"\"\"Read data from stdin.\"\"\"\n    data = sys.stdin.readlines()\n    n, k = [int(i.strip()) for i in data[0].split()]\n    a = [int(i.strip()) for i in data[1].split()]\n\n    return n, k, a\n\ndef solve(n, k, a):\n    \"\"\"Solve the problem.\"\"\"\n    a.sort()\n    # a is sorted\n    # We want to minimize the number of teams\n    # A team is defined by the maximum skill level\n    # So, we want to find the minimum number of teams whose\n    # last skill level is at most 5 apart\n\n    # If a[i] - a[i-1] > 5, then we have to add a new team\n    # with skill level a[i-1] + 5, since a[i] is in a different\n    # team.\n\n    # If a[i] - a[i-1] <= 5, then a[i] can be in the same team\n    # as a[i-1].\n\n    # We can represent the teams as a list of last skill levels\n    # for each team.\n    # For example, for a = [1, 2, 15, 15, 15] we have teams = [10]\n    # For a = [1, 2, 15, 15, 16] we have teams = [10, 15]\n\n    # Initialize the list of teams to a single team\n    teams = [a[0] + 5]\n    for i in range(1, n):\n        if a[i] - teams[-1] > 5:\n            # We need to add a new team\n            teams.append(a[i] + 5)\n\n    # The number of students is the number of teams times 5,\n    # plus the number of students in the last team\n    return len(teams) * 5 + a[-1] - teams[-1] + 1\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    # n, k, a = test_data()\n    n, k, a = read_data()\n    print(solve(n, k, a))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    def check(x):\n        cnt = 0\n        for i in range(n):\n            if a[i] <= x:\n                cnt += 1\n            else:\n                break\n        return cnt\n\n    l, r = 0, 10**9\n    while l < r:\n        mid = (l+r)//2\n        if check(mid) >= k:\n            r = mid\n        else:\n            l = mid+1\n    res = 0\n    for i in range(n):\n        if a[i] <= l:\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport os\nimport sys\n\n#practice = open(\"practice\", \"w\")\n#sys.stdin = practice\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    #print(a)\n    i = 0\n    total = 0\n    while i < len(a)-1 and k > 0:\n        if k == 1:\n            total += len(a) - i\n            break\n        if a[i+1] - a[i] <= 5:\n            total += 1\n            i += 1\n        else:\n            total += 1\n            i += 1\n            k -= 1\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650137390,
  "id": "cmpl-4xiP8Jp2QRZZwTl81WXuLqyM3FrXZ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:30:24.251830 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(a, k):\n    a = sorted(a)\n    ans = 0\n    for l in range(len(a)):\n        for r in range(l, len(a)):\n            if a[r] - a[l] <= 5:\n                ans = max(ans, r - l + 1)\n    return ans\n\nn, k = map(int, sys.stdin.readline().split())\na = map(int, sys.stdin.readline().split())\nprint solve(a, k)"
}
2022-04-16 19:30:24.251930 REASON stop
2022-04-16 19:30:24.276194 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n\n    i = 0\n    j = 0\n    teams = 0\n    while i < n:\n        while j < n and a[j] - a[i] <= 5:\n            j += 1\n        teams += 1\n        if teams > k:\n            break\n        i = j\n    print(n - i)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:30:24.276374 REASON stop
2022-04-16 19:30:24.276842 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef count_teams(student_list, skill_diff, num_teams):\n    \"\"\"\n    Returns the maximum number of students that can be in a team.\n    \"\"\"\n    team_count = 0\n    team_size = 0\n    student_list.sort()\n    for i in range(len(student_list)):\n        if i == 0:\n            team_size += 1\n        elif student_list[i] - student_list[i-1] <= skill_diff:\n            team_size += 1\n        else:\n            team_count += team_size\n            team_size = 1\n    team_count += team_size\n    return int(team_count / num_teams)\n\n#main\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(count_teams(a, 5, k))"
}
2022-04-16 19:30:24.276909 REASON stop
2022-04-16 19:30:24.294015 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef get_all_teams(skills):\n    teams = []\n    for skill_lvl in skills:\n        for team in teams:\n            if team[-1] + 5 >= skill_lvl >= team[0]:\n                team.append(skill_lvl)\n                break\n        else:\n            teams.append([skill_lvl])\n    return teams\n\ndef get_best_teams(skills, k):\n    teams = get_all_teams(skills)\n    teams_by_size = sorted(teams, key=len, reverse=True)\n    if len(teams_by_size) <= k:\n        return len(skills)\n    else:\n        return sum(len(team) for team in teams_by_size[:k])\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split()))\n    print(get_best_teams(skills, k))"
}
2022-04-16 19:30:24.294124 REASON stop
2022-04-16 19:30:24.313219 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#n, k = map(int, raw_input().split())\n#a = map(int, raw_input().split())\n\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n\n#n, k = 6, 1\n#a = [36, 4, 1, 25, 9, 16]\n\n#n, k = 4, 4\n#a = [1, 10, 100, 1000]\n\na.sort()\n\n#print n, k, a\n\n#print a[3] - a[0]\n#print a[4] - a[1]\n#print a[5] - a[2]\n\ni = 0\nj = 0\n\nwhile i < n:\n\tif j - i < k - 1:\n\t\tif a[j] - a[i] <= 5:\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\telse:\n\t\ti += 1\n\nprint j - i + 1"
}
2022-04-16 19:30:24.313396 REASON stop
2022-04-16 19:30:24.315209 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef test_data():\n    \"\"\"Generate test data.\"\"\"\n    n = 5000\n    k = 5000\n    a = [1] * n\n    for i in range(n):\n        a[i] = i + 1\n\n    return n, k, a\n\ndef read_data():\n    \"\"\"Read data from stdin.\"\"\"\n    data = sys.stdin.readlines()\n    n, k = [int(i.strip()) for i in data[0].split()]\n    a = [int(i.strip()) for i in data[1].split()]\n\n    return n, k, a\n\ndef solve(n, k, a):\n    \"\"\"Solve the problem.\"\"\"\n    a.sort()\n    # a is sorted\n    # We want to minimize the number of teams\n    # A team is defined by the maximum skill level\n    # So, we want to find the minimum number of teams whose\n    # last skill level is at most 5 apart\n\n    # If a[i] - a[i-1] > 5, then we have to add a new team\n    # with skill level a[i-1] + 5, since a[i] is in a different\n    # team.\n\n    # If a[i] - a[i-1] <= 5, then a[i] can be in the same team\n    # as a[i-1].\n\n    # We can represent the teams as a list of last skill levels\n    # for each team.\n    # For example, for a = [1, 2, 15, 15, 15] we have teams = [10]\n    # For a = [1, 2, 15, 15, 16] we have teams = [10, 15]\n\n    # Initialize the list of teams to a single team\n    teams = [a[0] + 5]\n    for i in range(1, n):\n        if a[i] - teams[-1] > 5:\n            # We need to add a new team\n            teams.append(a[i] + 5)\n\n    # The number of students is the number of teams times 5,\n    # plus the number of students in the last team\n    return len(teams) * 5 + a[-1] - teams[-1] + 1\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    # n, k, a = test_data()\n    n, k, a = read_data()\n    print(solve(n, k, a))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:30:24.315406 REASON stop
2022-04-16 19:30:24.316161 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    def check(x):\n        cnt = 0\n        for i in range(n):\n            if a[i] <= x:\n                cnt += 1\n            else:\n                break\n        return cnt\n\n    l, r = 0, 10**9\n    while l < r:\n        mid = (l+r)//2\n        if check(mid) >= k:\n            r = mid\n        else:\n            l = mid+1\n    res = 0\n    for i in range(n):\n        if a[i] <= l:\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:30:24.316264 REASON stop
2022-04-16 19:30:24.317209 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport os\nimport sys\n\n#practice = open(\"practice\", \"w\")\n#sys.stdin = practice\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    #print(a)\n    i = 0\n    total = 0\n    while i < len(a)-1 and k > 0:\n        if k == 1:\n            total += len(a) - i\n            break\n        if a[i+1] - a[i] <= 5:\n            total += 1\n            i += 1\n        else:\n            total += 1\n            i += 1\n            k -= 1\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:30:24.317301 REASON stop
