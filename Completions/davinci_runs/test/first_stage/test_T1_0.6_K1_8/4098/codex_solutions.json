["\n\n#n, k = map(int, raw_input().split())\n#a = map(int, raw_input().split())\n\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n\n#n, k = 6, 1\n#a = [36, 4, 1, 25, 9, 16]\n\n#n, k = 4, 4\n#a = [1, 10, 100, 1000]\n\na.sort()\n\n#print n, k, a\n\n#print a[3] - a[0]\n#print a[4] - a[1]\n#print a[5] - a[2]\n\ni = 0\nj = 0\n\nwhile i < n:\n\tif j - i < k - 1:\n\t\tif a[j] - a[i] <= 5:\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\telse:\n\t\ti += 1\n\nprint j - i + 1", "\n\nimport sys\n\ndef test_data():\n    \"\"\"Generate test data.\"\"\"\n    n = 5000\n    k = 5000\n    a = [1] * n\n    for i in range(n):\n        a[i] = i + 1\n\n    return n, k, a\n\ndef read_data():\n    \"\"\"Read data from stdin.\"\"\"\n    data = sys.stdin.readlines()\n    n, k = [int(i.strip()) for i in data[0].split()]\n    a = [int(i.strip()) for i in data[1].split()]\n\n    return n, k, a\n\ndef solve(n, k, a):\n    \"\"\"Solve the problem.\"\"\"\n    a.sort()\n    # a is sorted\n    # We want to minimize the number of teams\n    # A team is defined by the maximum skill level\n    # So, we want to find the minimum number of teams whose\n    # last skill level is at most 5 apart\n\n    # If a[i] - a[i-1] > 5, then we have to add a new team\n    # with skill level a[i-1] + 5, since a[i] is in a different\n    # team.\n\n    # If a[i] - a[i-1] <= 5, then a[i] can be in the same team\n    # as a[i-1].\n\n    # We can represent the teams as a list of last skill levels\n    # for each team.\n    # For example, for a = [1, 2, 15, 15, 15] we have teams = [10]\n    # For a = [1, 2, 15, 15, 16] we have teams = [10, 15]\n\n    # Initialize the list of teams to a single team\n    teams = [a[0] + 5]\n    for i in range(1, n):\n        if a[i] - teams[-1] > 5:\n            # We need to add a new team\n            teams.append(a[i] + 5)\n\n    # The number of students is the number of teams times 5,\n    # plus the number of students in the last team\n    return len(teams) * 5 + a[-1] - teams[-1] + 1\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    # n, k, a = test_data()\n    n, k, a = read_data()\n    print(solve(n, k, a))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef count_teams(student_list, skill_diff, num_teams):\n    \"\"\"\n    Returns the maximum number of students that can be in a team.\n    \"\"\"\n    team_count = 0\n    team_size = 0\n    student_list.sort()\n    for i in range(len(student_list)):\n        if i == 0:\n            team_size += 1\n        elif student_list[i] - student_list[i-1] <= skill_diff:\n            team_size += 1\n        else:\n            team_count += team_size\n            team_size = 1\n    team_count += team_size\n    return int(team_count / num_teams)\n\n#main\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(count_teams(a, 5, k))", "\n\nimport os\nimport sys\n\n#practice = open(\"practice\", \"w\")\n#sys.stdin = practice\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    #print(a)\n    i = 0\n    total = 0\n    while i < len(a)-1 and k > 0:\n        if k == 1:\n            total += len(a) - i\n            break\n        if a[i+1] - a[i] <= 5:\n            total += 1\n            i += 1\n        else:\n            total += 1\n            i += 1\n            k -= 1\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef solve(a, k):\n    a = sorted(a)\n    ans = 0\n    for l in range(len(a)):\n        for r in range(l, len(a)):\n            if a[r] - a[l] <= 5:\n                ans = max(ans, r - l + 1)\n    return ans\n\nn, k = map(int, sys.stdin.readline().split())\na = map(int, sys.stdin.readline().split())\nprint solve(a, k)", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n\n    i = 0\n    j = 0\n    teams = 0\n    while i < n:\n        while j < n and a[j] - a[i] <= 5:\n            j += 1\n        teams += 1\n        if teams > k:\n            break\n        i = j\n    print(n - i)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_all_teams(skills):\n    teams = []\n    for skill_lvl in skills:\n        for team in teams:\n            if team[-1] + 5 >= skill_lvl >= team[0]:\n                team.append(skill_lvl)\n                break\n        else:\n            teams.append([skill_lvl])\n    return teams\n\ndef get_best_teams(skills, k):\n    teams = get_all_teams(skills)\n    teams_by_size = sorted(teams, key=len, reverse=True)\n    if len(teams_by_size) <= k:\n        return len(skills)\n    else:\n        return sum(len(team) for team in teams_by_size[:k])\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split()))\n    print(get_best_teams(skills, k))", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    def check(x):\n        cnt = 0\n        for i in range(n):\n            if a[i] <= x:\n                cnt += 1\n            else:\n                break\n        return cnt\n\n    l, r = 0, 10**9\n    while l < r:\n        mid = (l+r)//2\n        if check(mid) >= k:\n            r = mid\n        else:\n            l = mid+1\n    res = 0\n    for i in range(n):\n        if a[i] <= l:\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()"]