2022-04-16 20:00:28.069105 """
You are given integers N and K. Find the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.
The order of a,b,c does matter, and some of them can be the same.

-----Constraints-----
 - 1 \leq N,K \leq 2\times 10^5
 - N and K are integers.

-----Input-----
Input is given from Standard Input in the following format:
N K

-----Output-----
Print the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.

-----Sample Input-----
3 2

-----Sample Output-----
9

(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1) and (3,3,3) satisfy the condition.
"""
2022-04-16 20:00:28.069126 --------------------------
2022-04-16 20:02:08.900640 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\n\n# \u89e3\u7b54\u306f\u89e3\u8aacpdf\u3092\u53c2\u7167\na = n // k\nb = n // k\nc = n // k\n\n# a+b, b+c, c+a\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u306e\u500b\u6570\u3092\u8a08\u7b97\n# \u5404\u6570\u5b57\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a,b,c\u304c\u5168\u3066K\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3082\u8003\u3048\u308b\nans = a * b * c\n\n# a+b\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a\u304cK\u306e\u500d\u6570\u3067\u306a\u3044\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001b\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n# b\u306e\u6700\u5927\u5024\u3092N - K + 1\u3068\u3059\u308b\nans += a * (b - 1) * c\n\n# b+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# b,c\u306e\u500b\u6570\u306fa\u306e\u5834\u5408\u3068\u540c\u3058\u306a\u306e\u3067\u3001a\u306e\u5834\u5408\u306e\u8a08\u7b97\u7d50\u679c\u3092\u4f7f\u7528\u3059\u308b\nans += 2 * ans\n\n# a+b+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001a,b,c\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n# \u3059\u3079\u3066\u306e\u5834\u5408\u3092\u8a08\u7b97\u3059\u308b\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u9664\u5916\u3059\u308b\n# a=b=c\u306e\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001a\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\nans += a * c\n\nprint(ans)"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# N = 3   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 2 2   3 1 1   3 1 3   3 3 1   3 3 3\n# 1 1 2   1 2 1   1 2 2   1 2 3   2 1 2   2 2 1   2 2 2   2 2 3   3 2 1\n# 1 2 3   2 1 3   2 2 3   2 3 1   2 3 2   3 1 2   3 2 1   3 2 2   3 2 3\n\n# N = 4   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 2 1   1 2 3   1 3 1   1 3 3   2 1 2   2 1 3   2 3 1   2 3 3   3 1 2\n# 1 2 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 1   2 1 4   2 3 2   2 3 4\n# 2 1 4   2 3 1   2 3 4   2 4 1   2 4 3   3 1 1   3 1 3   3 2 1   3 2 4\n# 3 2 2   3 2 3   3 3 1   3 3 4   3 4 1   3 4 2   4 1 1   4 1 4   4 3 1\n# 4 3 4   4 4 1\n# 1 2 2   1 2 3   1 3 2   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 2 2   1 2 3   1 3 2   1 3 3   2 1 2   2 1 4   2 3 2   2 3 4   3 1 2\n# 1 2 4   1 3 1   1 3 4   1 4 1   1 4 3   2 1 3   2 3 1   2 3 3   2 4 1\n# 2 4 3   3 1 1   3 1 4   3 2 1   3 2 4   3 4 1   3 4 2   4 1 2   4 1 3\n# 4 2 1   4 2 3   4 3 1   4 3 3\n# 1 2 3   1 3 1   1 3 2   1 3 3   1 3 4   2 1 1   2 1 4   2 3 1   2 3 4\n# 2 3 3   2 3 4   3 1 1   3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4\n# 3 3 1   3 3 2   3 3 3   3 4 1   3 4 2   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 3 1   4 3 2   4 4 1   4 4 2\n# 1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4   2 1 1\n# 1 1 2   1 1 3   1 1 4   1 2 2   1 2 3   1 2 4   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 2   2 1 3   2 1 4   2 2 1   2 2 2\n# 2 2 3   2 2 4   2 3 1   2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3\n# 2 4 4   3 1 1   3 1 2   3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4\n# 3 3 1   3 3 2   3 3 3   3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1\n# 4 1 2   4 1 3   4 1 4   4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2\n# 4 3 3   4 3 4   4 4 1   4 4 2   4 4 3   4 4 4\n\n# N = 5   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 2   2 1 3   2 1 4   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3   2 4 4   3 1 1   3 1 2\n# 3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2   4 3 3   4 3 4   4 4 1\n# 4 4 2   4 4 3   4 4 4\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 1 5   1 2 1   1 2 2   1 2 3   1 2 4   1 2 5   1 3 1   1 3 2   1 3 3\n# 1 3 4   1 3 5   1 4 1   1 4 2   1 4 3   1 4 4   1 4 5   1 5 1   1 5 2\n# 1 5 3   1 5 4   1 5 5   2 1 1   2 1 2   2 1 3   2 1 4   2 1 5   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 3 5   2 4 1   2 4 2   2 4 3   2 4 4   2 4 5\n# 2 5 1   2 5 2   2 5 3   2 5 4   2 5 5   3 1 1   3 1 2   3 1 3   3 1 4\n# 3 1 5   3 2 1   3 2 2   3 2 3   3 2 4   3 2 5   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 3 5   3 4 1   3 4 2   3 4 3   3 4 4   3 4 5   3 5 1   3 5 2\n# 3 5 3   3 5 4   3 5 5   4 1 1   4 1 2   4 1 3   4 1 4   4 1 5   4 2 1\n# 4 2 2   4 2 3   4 2 4   4 2 5   4 3 1   4 3 2   4 3 3   4 3 4   4 3 5\n# 4 4 1   4 4 2   4 4 3   4 4 4   4 4 5   4 5 1   4 5 2   4 5 3   4 5 4\n# 4 5 5   5 1 1   5 1 2   5 1 3   5 1 4   5 1 5   5 2 1   5 2 2   5 2 3\n# 5 2 4   5 2 5   5 3 1   5 3 2   5 3 3   5 3 4   5 3 5   5 4 1   5 4 2\n# 5 4 3   5 4 4   5 4 5   5 5 1   5 5 2   5 5 3   5 5 4   5 5 5\n# 1 1 2   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 2   2 1 3   2 1 4   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3   2 4 4   3 1 1   3 1 2\n# 3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2   4 3 3   4 3 4   4 4 1\n# 4 4 2   4 4 3   4 4 4\n# 1 1 3   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 5   1 2 1   1 2 2   1 2 3   1 2 4   1 2 5   1 3 1   1 3 2   1 3 3\n# 1 3 4   1 3 5   1 4 1   1 4 2   1 4 3   1 4 4   1 4 5   1 5 1   1 5 2\n# 1 5 3   1 5 4   1 5 5   2 1 1   2 1 2   2 1 3   2 1 4   2 1 5   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 3 5   2 4 1   2 4 2   2 4 3   2 4 4   2 4 5\n# 2 5 1   2 5 2   2 5 3   2 5 4   2 5 5   3 1 1   3 1 2   3 1 3   3 1 4\n# 3 1 5   3 2 1   3 2 2   3 2 3   3 2 4   3 2 5   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 3 5   3 4 1   3 4 2   3 4 3   3 4 4   3 4 5   3 5 1   3 5 2\n# 3 5 3   3 5 4   3 5 5   4 1 1   4 1 2   4 1 3   4 1 4   4 1 5   4 2 1\n# 4 2 2   4 2 3   4 2 4   4 2 5   4 3 1   4 3 2   4 3 3   4 3 4   4 3 5\n# 4 4 1   4 4 2   4 4 3   4 4 4   4 4 5   4 5 1   4 5 2   4 5 3   4 5 4\n# 4 5 5   5 1 1   5 1 2   5 1 3   5 1 4   5 1 5   5 2 1   5 2 2   5 2 3\n# 5 2 4   5 2 5   5 3 1   5 3 2   5 3 3   5 3 4   5 3 5   5 4 1   5 4 2\n# 5 4 3   5 4 4   5 4 5   5 5 1   5 5 2   5 5 3   5 5 4   5 5 5\n# 1 1 1   1 1 3   1"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    n, k: positive integers\n    \"\"\"\n    # create an array of n+1\n    a = [0] * (n+1)\n    # create a dictionary to store the number of values\n    # that are multiples of k\n    d = {}\n    # loop through the array\n    for i in range(1, n+1):\n        # if i is a multiple of k\n        if i%k == 0:\n            # store the number of i that are multiples of k\n            d[i] = d.get(i, 0) + 1\n        # else if i is not a multiple of k\n        else:\n            # store the number of i that are multiples of k\n            d[i] = d.get(i, 0)\n        # count the number of values that are multiples of k\n        a[i] = d[i]\n    # initialize the triple counter\n    cnt = 0\n    # loop through the array\n    for i in range(1, n+1):\n        # loop through the array\n        for j in range(1, n+1):\n            # if i+j is a multiple of k\n            if (i+j)%k == 0:\n                # add the number of j that are multiples of k\n                # to the triple counter\n                cnt += a[j]\n    # return the triple counter\n    return cnt\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(solve(n, k))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef solve(N, K):\n    count = 0\n    for i in range(K, N+1):\n        count += (i//K)**3\n    return count\n\n\ndef main():\n    N, K = map(int, input().split())\n    print(solve(N, K))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# input\nN, K = map(int, input().split())\n\n# initialization\ncount = 0\n\n# counting\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        for c in range(1, N + 1):\n            if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# get input\nN,K = map(int,input().split())\n\n# initialization\ncount = 0\n\n# count the number of triples\nfor a in range(1,N+1):\n    for b in range(a,N+1):\n        for c in range(b,N+1):\n            if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                count += 1\n\n# output\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\n\nans = 0\nfor a in range(1, n+1):\n    for b in range(1, n+1):\n        for c in range(1, n+1):\n            if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                ans += 1\nprint(ans)"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# N, K = map(int, input().split())\n# N, K = 3, 2\nN, K = map(int, \"3 2\".split())\n\n\"\"\"\n(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1),(3,3,3)\n\na,b,c <= N\na + b, b + c, c + a => K\n\n1,1,1 => 1,1,1\n1,1,2 => 1,1,2\n1,1,3 => 1,1,3\n1,2,1 => 1,2,1\n1,2,2 => 1,2,2\n1,2,3 => 1,2,3\n1,3,1 => 1,3,1\n1,3,2 => 1,3,2\n1,3,3 => 1,3,3\n2,1,1 => 2,1,1\n2,1,2 => 2,1,2\n2,1,3 => 2,1,3\n2,2,1 => 2,2,1\n2,2,2 => 2,2,2\n2,2,3 => 2,2,3\n2,3,1 => 2,3,1\n2,3,2 => 2,3,2\n2,3,3 => 2,3,3\n3,1,1 => 3,1,1\n3,1,2 => 3,1,2\n3,1,3 => 3,1,3\n3,2,1 => 3,2,1\n3,2,2 => 3,2,2\n3,2,3 => 3,2,3\n3,3,1 => 3,3,1\n3,3,2 => 3,3,2\n3,3,3 => 3,3,3\n\na + b, b + c, c + a => K\n1 + 1, 1 + 1, 1 + 1 => 2, 2, 2\n1 + 1, 1 + 2, 2 + 1 => 2, 3, 3\n1 + 1, 1 + 3, 3 + 1 => 2, 4, 4\n1 + 2, 2 + 1, 1 + 2 => 3, 3, 3\n1 + 2, 2 + 2, 2 + 1 => 3, 4, 4\n1 + 2, 2 + 3, 3 + 2 => 3, 5, 5\n1 + 3, 3 + 1, 1 + 3 => 4, 4, 4\n1 + 3, 3 + 2, 2 + 3 => 4, 5, 5\n1 + 3, 3 + 3, 3 + 1 => 4, 6, 6\n2 + 1, 1 + 2, 2 + 1 => 3, 3, 3\n2 + 1, 1 + 3, 3 + 2 => 3, 4, 4\n2 + 1, 2 + 2, 2 + 1 => 4, 4, 4\n2 + 1, 2 + 3, 3 + 2 => 4, 5, 5\n2 + 1, 3 + 1, 1 + 3 => 4, 4, 4\n2 + 1, 3 + 2, 2 + 3 => 4, 5, 5\n2 + 1, 3 + 3, 3 + 1 => 4, 6, 6\n2 + 2, 2 + 1, 1 + 2 => 4, 4, 4\n2 + 2, 2 + 2, 2 + 2 => 4, 4, 4\n2 + 2, 2 + 3, 3 + 2 => 4, 5, 5\n2 + 2, 3 + 1, 1 + 3 => 4, 5, 5\n2 + 2, 3 + 2, 2 + 3 => 4, 5, 5\n2 + 2, 3 + 3, 3 + 2 => 4, 6, 6\n2 + 3, 3 + 1, 1 + 3 => 5, 5, 5\n2 + 3, 3 + 2, 2 + 3 => 5, 5, 5\n2 + 3, 3 + 3, 3 + 2 => 5, 6, 6\n3 + 1, 1 + 2, 2 + 1 => 4, 4, 4\n3 + 1, 1 + 3, 3 + 1 => 4, 4, 4\n3 + 1, 2 + 1, 1 + 3 => 4, 4, 4\n3 + 1, 2 + 2, 2 + 1 => 5, 5, 5\n3 + 1, 2 + 3, 3 + 1 => 5, 5, 5\n3 + 1, 3 + 2, 2 + 3 => 5, 6, 6\n3 + 1, 3 + 3, 3 + 1 => 6, 6, 6\n3 + 2, 2 + 1, 1 + 3 => 5, 5, 5\n3 + 2, 2 + 2, 2 + 3 => 5, 5, 5\n3 + 2, 2 + 3, 3 + 2 => 5, 6, 6\n3 + 2, 3 + 1, 1 + 3 => 5, 5, 5\n3 + 2, 3 + 2, 2 + 3 => 5, 6, 6\n3 + 2, 3 + 3, 3 + 2 => 6, 6, 6\n3 + 3, 3 + 1, 1 + 3 => 6, 6, 6\n3 + 3, 3 + 2, 2 + 3 => 6, 6, 6\n3 + 3, 3 + 3, 3 + 3 => 6, 6, 6\n\na + b, b + c, c + a => K\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3"
    }
  ],
  "created": 1650139228,
  "id": "cmpl-4xism6PQAMN9YLilEXog1UWy9kwyk",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 20:02:08.901086 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\n\n# \u89e3\u7b54\u306f\u89e3\u8aacpdf\u3092\u53c2\u7167\na = n // k\nb = n // k\nc = n // k\n\n# a+b, b+c, c+a\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u306e\u500b\u6570\u3092\u8a08\u7b97\n# \u5404\u6570\u5b57\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a,b,c\u304c\u5168\u3066K\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3082\u8003\u3048\u308b\nans = a * b * c\n\n# a+b\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a\u304cK\u306e\u500d\u6570\u3067\u306a\u3044\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001b\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n# b\u306e\u6700\u5927\u5024\u3092N - K + 1\u3068\u3059\u308b\nans += a * (b - 1) * c\n\n# b+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# a+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# b,c\u306e\u500b\u6570\u306fa\u306e\u5834\u5408\u3068\u540c\u3058\u306a\u306e\u3067\u3001a\u306e\u5834\u5408\u306e\u8a08\u7b97\u7d50\u679c\u3092\u4f7f\u7528\u3059\u308b\nans += 2 * ans\n\n# a+b+c\u304cK\u306e\u500d\u6570\u3067\u3042\u308b\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001a,b,c\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n# \u3059\u3079\u3066\u306e\u5834\u5408\u3092\u8a08\u7b97\u3059\u308b\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u9664\u5916\u3059\u308b\n# a=b=c\u306e\u5834\u5408\u3092\u8003\u3048\u308b\n# \u3053\u306e\u6642\u3001a\u306fK\u306e\u500d\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\nans += a * c\n\nprint(ans)"
}
2022-04-16 20:02:08.901132 REASON stop
2022-04-16 20:02:08.933919 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# N = 3   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 2 2   3 1 1   3 1 3   3 3 1   3 3 3\n# 1 1 2   1 2 1   1 2 2   1 2 3   2 1 2   2 2 1   2 2 2   2 2 3   3 2 1\n# 1 2 3   2 1 3   2 2 3   2 3 1   2 3 2   3 1 2   3 2 1   3 2 2   3 2 3\n\n# N = 4   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 2 1   1 2 3   1 3 1   1 3 3   2 1 2   2 1 3   2 3 1   2 3 3   3 1 2\n# 1 2 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 1   2 1 4   2 3 2   2 3 4\n# 2 1 4   2 3 1   2 3 4   2 4 1   2 4 3   3 1 1   3 1 3   3 2 1   3 2 4\n# 3 2 2   3 2 3   3 3 1   3 3 4   3 4 1   3 4 2   4 1 1   4 1 4   4 3 1\n# 4 3 4   4 4 1\n# 1 2 2   1 2 3   1 3 2   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 2 2   1 2 3   1 3 2   1 3 3   2 1 2   2 1 4   2 3 2   2 3 4   3 1 2\n# 1 2 4   1 3 1   1 3 4   1 4 1   1 4 3   2 1 3   2 3 1   2 3 3   2 4 1\n# 2 4 3   3 1 1   3 1 4   3 2 1   3 2 4   3 4 1   3 4 2   4 1 2   4 1 3\n# 4 2 1   4 2 3   4 3 1   4 3 3\n# 1 2 3   1 3 1   1 3 2   1 3 3   1 3 4   2 1 1   2 1 4   2 3 1   2 3 4\n# 2 3 3   2 3 4   3 1 1   3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4\n# 3 3 1   3 3 2   3 3 3   3 4 1   3 4 2   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 3 1   4 3 2   4 4 1   4 4 2\n# 1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4   2 1 1\n# 1 1 2   1 1 3   1 1 4   1 2 2   1 2 3   1 2 4   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 2   2 1 3   2 1 4   2 2 1   2 2 2\n# 2 2 3   2 2 4   2 3 1   2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3\n# 2 4 4   3 1 1   3 1 2   3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4\n# 3 3 1   3 3 2   3 3 3   3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1\n# 4 1 2   4 1 3   4 1 4   4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2\n# 4 3 3   4 3 4   4 4 1   4 4 2   4 4 3   4 4 4\n\n# N = 5   K = 2\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 2   2 1 3   2 1 4   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3   2 4 4   3 1 1   3 1 2\n# 3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2   4 3 3   4 3 4   4 4 1\n# 4 4 2   4 4 3   4 4 4\n# 1 1 1   1 1 3   1 3 1   1 3 3   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 4   1 2 1   1 2 2   1 2 3   1 2 4   1 3 4   1 4 1   1 4 3   1 4 4\n# 2 1 4   2 3 1   2 3 3   2 3 4   3 1 2   3 1 4   3 2 1   3 2 3   3 2 4\n# 3 1 3   3 3 1   3 3 3   3 3 4   4 1 1   4 1 3   4 3 1   4 3 3   4 4 1\n# 1 1 2   1 2 4   1 3 2   1 3 4   1 4 2   2 1 2   2 1 4   2 3 2   2 3 4\n# 2 1 3   2 3 2   2 3 4   2 4 1   2 4 2   3 1 1   3 1 4   3 2 4   3 4 1\n# 3 2 1   3 2 4   3 4 2   4 1 2   4 1 3   4 2 1   4 2 3   4 3 1   4 3 3\n# 4 4 2   4 4 3\n# 1 1 5   1 2 1   1 2 2   1 2 3   1 2 4   1 2 5   1 3 1   1 3 2   1 3 3\n# 1 3 4   1 3 5   1 4 1   1 4 2   1 4 3   1 4 4   1 4 5   1 5 1   1 5 2\n# 1 5 3   1 5 4   1 5 5   2 1 1   2 1 2   2 1 3   2 1 4   2 1 5   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 3 5   2 4 1   2 4 2   2 4 3   2 4 4   2 4 5\n# 2 5 1   2 5 2   2 5 3   2 5 4   2 5 5   3 1 1   3 1 2   3 1 3   3 1 4\n# 3 1 5   3 2 1   3 2 2   3 2 3   3 2 4   3 2 5   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 3 5   3 4 1   3 4 2   3 4 3   3 4 4   3 4 5   3 5 1   3 5 2\n# 3 5 3   3 5 4   3 5 5   4 1 1   4 1 2   4 1 3   4 1 4   4 1 5   4 2 1\n# 4 2 2   4 2 3   4 2 4   4 2 5   4 3 1   4 3 2   4 3 3   4 3 4   4 3 5\n# 4 4 1   4 4 2   4 4 3   4 4 4   4 4 5   4 5 1   4 5 2   4 5 3   4 5 4\n# 4 5 5   5 1 1   5 1 2   5 1 3   5 1 4   5 1 5   5 2 1   5 2 2   5 2 3\n# 5 2 4   5 2 5   5 3 1   5 3 2   5 3 3   5 3 4   5 3 5   5 4 1   5 4 2\n# 5 4 3   5 4 4   5 4 5   5 5 1   5 5 2   5 5 3   5 5 4   5 5 5\n# 1 1 2   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 2   2 1 3   2 1 4   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 4 1   2 4 2   2 4 3   2 4 4   3 1 1   3 1 2\n# 3 1 3   3 1 4   3 2 1   3 2 2   3 2 3   3 2 4   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 4 1   3 4 2   3 4 3   3 4 4   4 1 1   4 1 2   4 1 3   4 1 4\n# 4 2 1   4 2 2   4 2 3   4 2 4   4 3 1   4 3 2   4 3 3   4 3 4   4 4 1\n# 4 4 2   4 4 3   4 4 4\n# 1 1 3   1 2 1   1 2 2   1 2 3   1 2 4   1 3 1   1 3 2   1 3 3   1 3 4\n# 1 4 1   1 4 2   1 4 3   1 4 4   2 1 1   2 1 3   2 3 1   2 3 3   3 1 1\n# 1 1 5   1 2 1   1 2 2   1 2 3   1 2 4   1 2 5   1 3 1   1 3 2   1 3 3\n# 1 3 4   1 3 5   1 4 1   1 4 2   1 4 3   1 4 4   1 4 5   1 5 1   1 5 2\n# 1 5 3   1 5 4   1 5 5   2 1 1   2 1 2   2 1 3   2 1 4   2 1 5   2 3 1\n# 2 3 2   2 3 3   2 3 4   2 3 5   2 4 1   2 4 2   2 4 3   2 4 4   2 4 5\n# 2 5 1   2 5 2   2 5 3   2 5 4   2 5 5   3 1 1   3 1 2   3 1 3   3 1 4\n# 3 1 5   3 2 1   3 2 2   3 2 3   3 2 4   3 2 5   3 3 1   3 3 2   3 3 3\n# 3 3 4   3 3 5   3 4 1   3 4 2   3 4 3   3 4 4   3 4 5   3 5 1   3 5 2\n# 3 5 3   3 5 4   3 5 5   4 1 1   4 1 2   4 1 3   4 1 4   4 1 5   4 2 1\n# 4 2 2   4 2 3   4 2 4   4 2 5   4 3 1   4 3 2   4 3 3   4 3 4   4 3 5\n# 4 4 1   4 4 2   4 4 3   4 4 4   4 4 5   4 5 1   4 5 2   4 5 3   4 5 4\n# 4 5 5   5 1 1   5 1 2   5 1 3   5 1 4   5 1 5   5 2 1   5 2 2   5 2 3\n# 5 2 4   5 2 5   5 3 1   5 3 2   5 3 3   5 3 4   5 3 5   5 4 1   5 4 2\n# 5 4 3   5 4 4   5 4 5   5 5 1   5 5 2   5 5 3   5 5 4   5 5 5\n# 1 1 1   1 1 3   1"
}
2022-04-16 20:02:08.934155 REASON length
2022-04-16 20:02:08.934164 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    n, k: positive integers\n    \"\"\"\n    # create an array of n+1\n    a = [0] * (n+1)\n    # create a dictionary to store the number of values\n    # that are multiples of k\n    d = {}\n    # loop through the array\n    for i in range(1, n+1):\n        # if i is a multiple of k\n        if i%k == 0:\n            # store the number of i that are multiples of k\n            d[i] = d.get(i, 0) + 1\n        # else if i is not a multiple of k\n        else:\n            # store the number of i that are multiples of k\n            d[i] = d.get(i, 0)\n        # count the number of values that are multiples of k\n        a[i] = d[i]\n    # initialize the triple counter\n    cnt = 0\n    # loop through the array\n    for i in range(1, n+1):\n        # loop through the array\n        for j in range(1, n+1):\n            # if i+j is a multiple of k\n            if (i+j)%k == 0:\n                # add the number of j that are multiples of k\n                # to the triple counter\n                cnt += a[j]\n    # return the triple counter\n    return cnt\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(solve(n, k))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:02:08.934199 REASON stop
2022-04-16 20:02:08.934706 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef solve(N, K):\n    count = 0\n    for i in range(K, N+1):\n        count += (i//K)**3\n    return count\n\n\ndef main():\n    N, K = map(int, input().split())\n    print(solve(N, K))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 20:02:08.934772 REASON stop
2022-04-16 20:02:08.958890 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# input\nN, K = map(int, input().split())\n\n# initialization\ncount = 0\n\n# counting\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        for c in range(1, N + 1):\n            if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                count += 1\n\nprint(count)"
}
2022-04-16 20:02:08.959003 REASON stop
2022-04-16 20:02:08.967623 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# get input\nN,K = map(int,input().split())\n\n# initialization\ncount = 0\n\n# count the number of triples\nfor a in range(1,N+1):\n    for b in range(a,N+1):\n        for c in range(b,N+1):\n            if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                count += 1\n\n# output\nprint(count)"
}
2022-04-16 20:02:08.967726 REASON stop
2022-04-16 20:02:08.968980 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\n\nans = 0\nfor a in range(1, n+1):\n    for b in range(1, n+1):\n        for c in range(1, n+1):\n            if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                ans += 1\nprint(ans)"
}
2022-04-16 20:02:08.969082 REASON stop
2022-04-16 20:02:08.970094 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# N, K = map(int, input().split())\n# N, K = 3, 2\nN, K = map(int, \"3 2\".split())\n\n\"\"\"\n(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1),(3,3,3)\n\na,b,c <= N\na + b, b + c, c + a => K\n\n1,1,1 => 1,1,1\n1,1,2 => 1,1,2\n1,1,3 => 1,1,3\n1,2,1 => 1,2,1\n1,2,2 => 1,2,2\n1,2,3 => 1,2,3\n1,3,1 => 1,3,1\n1,3,2 => 1,3,2\n1,3,3 => 1,3,3\n2,1,1 => 2,1,1\n2,1,2 => 2,1,2\n2,1,3 => 2,1,3\n2,2,1 => 2,2,1\n2,2,2 => 2,2,2\n2,2,3 => 2,2,3\n2,3,1 => 2,3,1\n2,3,2 => 2,3,2\n2,3,3 => 2,3,3\n3,1,1 => 3,1,1\n3,1,2 => 3,1,2\n3,1,3 => 3,1,3\n3,2,1 => 3,2,1\n3,2,2 => 3,2,2\n3,2,3 => 3,2,3\n3,3,1 => 3,3,1\n3,3,2 => 3,3,2\n3,3,3 => 3,3,3\n\na + b, b + c, c + a => K\n1 + 1, 1 + 1, 1 + 1 => 2, 2, 2\n1 + 1, 1 + 2, 2 + 1 => 2, 3, 3\n1 + 1, 1 + 3, 3 + 1 => 2, 4, 4\n1 + 2, 2 + 1, 1 + 2 => 3, 3, 3\n1 + 2, 2 + 2, 2 + 1 => 3, 4, 4\n1 + 2, 2 + 3, 3 + 2 => 3, 5, 5\n1 + 3, 3 + 1, 1 + 3 => 4, 4, 4\n1 + 3, 3 + 2, 2 + 3 => 4, 5, 5\n1 + 3, 3 + 3, 3 + 1 => 4, 6, 6\n2 + 1, 1 + 2, 2 + 1 => 3, 3, 3\n2 + 1, 1 + 3, 3 + 2 => 3, 4, 4\n2 + 1, 2 + 2, 2 + 1 => 4, 4, 4\n2 + 1, 2 + 3, 3 + 2 => 4, 5, 5\n2 + 1, 3 + 1, 1 + 3 => 4, 4, 4\n2 + 1, 3 + 2, 2 + 3 => 4, 5, 5\n2 + 1, 3 + 3, 3 + 1 => 4, 6, 6\n2 + 2, 2 + 1, 1 + 2 => 4, 4, 4\n2 + 2, 2 + 2, 2 + 2 => 4, 4, 4\n2 + 2, 2 + 3, 3 + 2 => 4, 5, 5\n2 + 2, 3 + 1, 1 + 3 => 4, 5, 5\n2 + 2, 3 + 2, 2 + 3 => 4, 5, 5\n2 + 2, 3 + 3, 3 + 2 => 4, 6, 6\n2 + 3, 3 + 1, 1 + 3 => 5, 5, 5\n2 + 3, 3 + 2, 2 + 3 => 5, 5, 5\n2 + 3, 3 + 3, 3 + 2 => 5, 6, 6\n3 + 1, 1 + 2, 2 + 1 => 4, 4, 4\n3 + 1, 1 + 3, 3 + 1 => 4, 4, 4\n3 + 1, 2 + 1, 1 + 3 => 4, 4, 4\n3 + 1, 2 + 2, 2 + 1 => 5, 5, 5\n3 + 1, 2 + 3, 3 + 1 => 5, 5, 5\n3 + 1, 3 + 2, 2 + 3 => 5, 6, 6\n3 + 1, 3 + 3, 3 + 1 => 6, 6, 6\n3 + 2, 2 + 1, 1 + 3 => 5, 5, 5\n3 + 2, 2 + 2, 2 + 3 => 5, 5, 5\n3 + 2, 2 + 3, 3 + 2 => 5, 6, 6\n3 + 2, 3 + 1, 1 + 3 => 5, 5, 5\n3 + 2, 3 + 2, 2 + 3 => 5, 6, 6\n3 + 2, 3 + 3, 3 + 2 => 6, 6, 6\n3 + 3, 3 + 1, 1 + 3 => 6, 6, 6\n3 + 3, 3 + 2, 2 + 3 => 6, 6, 6\n3 + 3, 3 + 3, 3 + 3 => 6, 6, 6\n\na + b, b + c, c + a => K\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3)]\n\n[(1,1,1), (1,1,3), (1,3,1), (1,3,3), (2,2,2), (3,1,1), (3,1,3), (3,3,1), (3,3,3"
}
2022-04-16 20:02:08.970200 REASON length
