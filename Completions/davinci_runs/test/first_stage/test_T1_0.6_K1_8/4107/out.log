2022-04-16 19:32:16.413771 """
You work as a system administrator in a dormitory, which has $n$ rooms one after another along a straight hallway. Rooms are numbered from $1$ to $n$.

You have to connect all $n$ rooms to the Internet.

You can connect each room to the Internet directly, the cost of such connection for the $i$-th room is $i$ coins. 

Some rooms also have a spot for a router. The cost of placing a router in the $i$-th room is also $i$ coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room $i$, you connect all rooms with the numbers from $max(1,~i - k)$ to $min(n,~i + k)$ inclusive to the Internet, where $k$ is the range of router. The value of $k$ is the same for all routers. 

Calculate the minimum total cost of connecting all $n$ rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n, k \le 2 \cdot 10^5$) — the number of rooms and the range of each router.

The second line of the input contains one string $s$ of length $n$, consisting only of zeros and ones. If the $i$-th character of the string equals to '1' then there is a spot for a router in the $i$-th room. If the $i$-th character of the string equals to '0' then you cannot place a router in the $i$-th room.


-----Output-----

Print one integer — the minimum total cost of connecting all $n$ rooms to the Internet.


-----Examples-----
Input
5 2
00100

Output
3

Input
6 1
000000

Output
21

Input
4 1
0011

Output
4

Input
12 6
000010000100

Output
15



-----Note-----

In the first example it is enough to place the router in the room $3$, then all rooms will be connected to the Internet. The total cost of connection is $3$.

In the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is $1 + 2 + 3 + 4 + 5 + 6 = 21$.

In the third example you need to connect the room $1$ directly and place the router in the room $3$. Thus, the total cost of connection of all rooms is $1 + 3 = 4$.

In the fourth example you need to place routers in rooms $5$ and $10$. Then all rooms will be connected to the Internet. The total cost of connection is $5 + 10 = 15$.
"""
2022-04-16 19:32:16.413785 --------------------------
2022-04-16 19:32:39.832420 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#Solution\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nint main()\n{\n    ll n, k, ans = 0;\n    string s;\n    cin >> n >> k;\n    cin >> s;\n    bool has[n + 1] = {};\n    for (int i = 1; i <= n; ++i) {\n        if (s[i - 1] == '1')\n            has[i] = true;\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (has[i]) {\n            ans += i;\n            for (int j = max(1ll, i - k); j <= min(n, i + k); ++j)\n                has[j] = false;\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (has[i])\n            ans += i;\n    }\n    cout << ans << \"\\n\";\n    return 0;\n}"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\n# total amount of routers needed\nrouters = sum(map(int, s))\n\n# set up cost array\ncosts = [i for i in range(1, n+1)]\n\n# set up range array\nranges = [k+1 if int(s[i]) == 1 else 0 for i in range(n)]\n\n# set up cumulative array\ncumulative = [0]*n\ncumulative[0] = ranges[0]\nfor i in range(1, n):\n    cumulative[i] = max(ranges[i], cumulative[i-1] - 1)\n\n# set up dp array\ndp = [0]*n\n\n# fill dp array\nfor i in range(n):\n    if cumulative[i] < 1:\n        dp[i] = costs[i]\n    else:\n        dp[i] = min(dp[i-1] + costs[i], (dp[i-cumulative[i]] + costs[i-cumulative[i]]) if i-cumulative[i] >= 0 else float(\"inf\"))\n\nprint(dp[-1])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nline = input().split(\" \")\nn = int(line[0])\nk = int(line[1])\ns = input()\n\ncosts = [0] * (n + 1)\nfor i in range(1, n + 1):\n    costs[i] = i + costs[i - 1]\n\n# print(costs)\n\npos = -1\nresult = 0\nfor i in range(n):\n    if s[i] == '1':\n        if pos == -1:\n            result += costs[i]\n        else:\n            result += costs[i] - costs[pos + k + 1]\n        pos = i\n\nif pos == -1:\n    result += costs[n]\nelse:\n    result += costs[n] - costs[pos + k + 1]\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    rooms, router_range = map(int, input().split())\n    routers = input()\n    cost = 0\n    router_count = 0\n    router_index = []\n    for i in range(rooms):\n        if routers[i] == '1':\n            router_count += 1\n            router_index.append(i)\n        else:\n            if router_count == 0:\n                cost += i + 1\n            else:\n                router_count -= 1\n    if router_count > 0:\n        cost += sum(router_index[router_count:])\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef read_ints_from_line():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef solve(n, k, rooms):\n    # room i costs i to connect\n    # router i costs i to place\n    # router i connects rooms max(1, i-k) to min(i+k, n) inclusive\n\n    # if we have a router in room i, we cannot have a router in room j if\n    # j < i-k or j > i+k\n    # we also cannot have a router in room j if it does not have a spot for\n    # a router\n\n    # the optimal solution is to place routers in rooms that are furthest\n    # away from other routers, with the restriction that we cannot place a\n    # router in a room with no spot for a router\n\n    # we can iterate through the rooms backwards, and place a router in\n    # the first room we find that has a spot for a router, and that is far\n    # enough away from the last router we placed\n    router_cost = 0\n    router_index = -1\n    for i in range(n, 0, -1):\n        if rooms[i-1] == '1' and i > router_index + k:\n            router_cost += i\n            router_index = i\n    cost = router_cost\n    for i in range(n):\n        cost += i+1\n    return cost\n\ndef main():\n    n, k = read_ints_from_line()\n    rooms = sys.stdin.readline().strip()\n    print solve(n, k, rooms)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\ntotal, router_count = 0, 0\nfor i in range(n):\n  if s[i] == '1':\n    if router_count == 0:\n      total += 1\n    router_count += 1\n    if router_count == k + 1:\n      router_count = 0\n  else:\n    if router_count == 0:\n      total += i + 1\n    else:\n      router_count = 0\n\nprint(total)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline()\n    cost = 0\n    if s[0] == '1':\n        cost += 1\n    for i in range(1, n):\n        if s[i] == '1':\n            cost += i\n        elif s[i - 1] == '1':\n            cost += i\n        else:\n            for j in range(max(0, i - k + 1), i):\n                if s[j] == '1':\n                    cost += i\n                    break\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport string\n\ndef wifi_range_room(length, room_range, room_spot):\n\t#initialize the rooms dictionary\n\troom_dict = {}\n\tfor i in range(1, length + 1):\n\t\troom_dict[i] = 0\n\t\n\t#place the routers\n\tfor i in range(1, length + 1):\n\t\tif room_spot[i -1] == '1':\n\t\t\tfor j in range(max(1, i - room_range), min(length, i + room_range) + 1):\n\t\t\t\troom_dict[j] = 1\n\t\n\t#count the cost\n\tcost = 0\n\tfor i in range(1, length + 1):\n\t\tif room_dict[i] == 0:\n\t\t\tcost += i\n\treturn cost\n\nif __name__ == \"__main__\":\n\tlength, room_range = list(map(int, input().split()))\n\troom_spot = input()\n\tprint(wifi_range_room(length, room_range, room_spot))"
    }
  ],
  "created": 1650137536,
  "id": "cmpl-4xiRUxUjRFSyGDkYRdC5Sv8p7J8sZ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:32:39.832802 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#Solution\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nint main()\n{\n    ll n, k, ans = 0;\n    string s;\n    cin >> n >> k;\n    cin >> s;\n    bool has[n + 1] = {};\n    for (int i = 1; i <= n; ++i) {\n        if (s[i - 1] == '1')\n            has[i] = true;\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (has[i]) {\n            ans += i;\n            for (int j = max(1ll, i - k); j <= min(n, i + k); ++j)\n                has[j] = false;\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (has[i])\n            ans += i;\n    }\n    cout << ans << \"\\n\";\n    return 0;\n}"
}
2022-04-16 19:32:39.832842 REASON stop
2022-04-16 19:32:39.865322 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ns = input()\n\n# total amount of routers needed\nrouters = sum(map(int, s))\n\n# set up cost array\ncosts = [i for i in range(1, n+1)]\n\n# set up range array\nranges = [k+1 if int(s[i]) == 1 else 0 for i in range(n)]\n\n# set up cumulative array\ncumulative = [0]*n\ncumulative[0] = ranges[0]\nfor i in range(1, n):\n    cumulative[i] = max(ranges[i], cumulative[i-1] - 1)\n\n# set up dp array\ndp = [0]*n\n\n# fill dp array\nfor i in range(n):\n    if cumulative[i] < 1:\n        dp[i] = costs[i]\n    else:\n        dp[i] = min(dp[i-1] + costs[i], (dp[i-cumulative[i]] + costs[i-cumulative[i]]) if i-cumulative[i] >= 0 else float(\"inf\"))\n\nprint(dp[-1])"
}
2022-04-16 19:32:39.865522 REASON stop
2022-04-16 19:32:39.865972 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nline = input().split(\" \")\nn = int(line[0])\nk = int(line[1])\ns = input()\n\ncosts = [0] * (n + 1)\nfor i in range(1, n + 1):\n    costs[i] = i + costs[i - 1]\n\n# print(costs)\n\npos = -1\nresult = 0\nfor i in range(n):\n    if s[i] == '1':\n        if pos == -1:\n            result += costs[i]\n        else:\n            result += costs[i] - costs[pos + k + 1]\n        pos = i\n\nif pos == -1:\n    result += costs[n]\nelse:\n    result += costs[n] - costs[pos + k + 1]\nprint(result)"
}
2022-04-16 19:32:39.866076 REASON stop
2022-04-16 19:32:39.885325 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    rooms, router_range = map(int, input().split())\n    routers = input()\n    cost = 0\n    router_count = 0\n    router_index = []\n    for i in range(rooms):\n        if routers[i] == '1':\n            router_count += 1\n            router_index.append(i)\n        else:\n            if router_count == 0:\n                cost += i + 1\n            else:\n                router_count -= 1\n    if router_count > 0:\n        cost += sum(router_index[router_count:])\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:32:39.885430 REASON stop
2022-04-16 19:32:39.902241 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef read_ints_from_line():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef solve(n, k, rooms):\n    # room i costs i to connect\n    # router i costs i to place\n    # router i connects rooms max(1, i-k) to min(i+k, n) inclusive\n\n    # if we have a router in room i, we cannot have a router in room j if\n    # j < i-k or j > i+k\n    # we also cannot have a router in room j if it does not have a spot for\n    # a router\n\n    # the optimal solution is to place routers in rooms that are furthest\n    # away from other routers, with the restriction that we cannot place a\n    # router in a room with no spot for a router\n\n    # we can iterate through the rooms backwards, and place a router in\n    # the first room we find that has a spot for a router, and that is far\n    # enough away from the last router we placed\n    router_cost = 0\n    router_index = -1\n    for i in range(n, 0, -1):\n        if rooms[i-1] == '1' and i > router_index + k:\n            router_cost += i\n            router_index = i\n    cost = router_cost\n    for i in range(n):\n        cost += i+1\n    return cost\n\ndef main():\n    n, k = read_ints_from_line()\n    rooms = sys.stdin.readline().strip()\n    print solve(n, k, rooms)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:32:39.902356 REASON stop
2022-04-16 19:32:39.903510 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ns = input()\n\ntotal, router_count = 0, 0\nfor i in range(n):\n  if s[i] == '1':\n    if router_count == 0:\n      total += 1\n    router_count += 1\n    if router_count == k + 1:\n      router_count = 0\n  else:\n    if router_count == 0:\n      total += i + 1\n    else:\n      router_count = 0\n\nprint(total)"
}
2022-04-16 19:32:39.903595 REASON stop
2022-04-16 19:32:39.904684 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline()\n    cost = 0\n    if s[0] == '1':\n        cost += 1\n    for i in range(1, n):\n        if s[i] == '1':\n            cost += i\n        elif s[i - 1] == '1':\n            cost += i\n        else:\n            for j in range(max(0, i - k + 1), i):\n                if s[j] == '1':\n                    cost += i\n                    break\n    print(cost)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:32:39.904810 REASON stop
2022-04-16 19:32:39.905759 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport string\n\ndef wifi_range_room(length, room_range, room_spot):\n\t#initialize the rooms dictionary\n\troom_dict = {}\n\tfor i in range(1, length + 1):\n\t\troom_dict[i] = 0\n\t\n\t#place the routers\n\tfor i in range(1, length + 1):\n\t\tif room_spot[i -1] == '1':\n\t\t\tfor j in range(max(1, i - room_range), min(length, i + room_range) + 1):\n\t\t\t\troom_dict[j] = 1\n\t\n\t#count the cost\n\tcost = 0\n\tfor i in range(1, length + 1):\n\t\tif room_dict[i] == 0:\n\t\t\tcost += i\n\treturn cost\n\nif __name__ == \"__main__\":\n\tlength, room_range = list(map(int, input().split()))\n\troom_spot = input()\n\tprint(wifi_range_room(length, room_range, room_spot))"
}
2022-04-16 19:32:39.905863 REASON stop
