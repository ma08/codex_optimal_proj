["\n\n\ndef main():\n    n, x, y = map(int, input().split())\n    s = list(map(int, input()))\n    res = [0] * n\n    for i in range(n):\n        res[i] = s[i] ^ 1\n    for i in range(y):\n        res[n - x + i] = s[n - x + i] ^ 1\n    print(sum(res))\n\nmain()", "\n\nimport sys\n\n\ndef main():\n    n, x, y = map(int, sys.stdin.readline().split())\n\n    number = sys.stdin.readline().rstrip()\n\n    # find where the 10^y starts\n    start = n - y - 1\n    # find where the 10^x starts\n    end = n - x\n\n    # if 10^y is in the 10^x range\n    if end <= start:\n        print(0)\n        return\n\n    # if 10^y is not in the 10^x range\n    else:\n        # if 10^y is in the 10^x range, but not in the beginning\n        # find where the number of 1's are in 10^y range\n        ones = number[start:end].count('1')\n        # count the number of 1's in the 10^x range\n        x_ones = number[end:].count('1')\n        # if the number of 1's in the 10^y range is even,\n        # it will be congruent to 0 in the 10^x range\n        # and we need to change x_ones 1's to 0's\n        if ones % 2 == 0:\n            print(x_ones)\n        # if the number of 1's in the 10^y range is odd,\n        # it will be congruent to 10^y in the 10^x range\n        # and we need to change x_ones 0's to 1's\n        else:\n            print(x_ones)\n\n\nif __name__ == '__main__':\n    main()", "\n\nfrom sys import stdin\nfrom itertools import product\n\nn, x, y = [int(i) for i in stdin.readline().split()]\ns = stdin.readline().strip()\n\nif int(s[:x]) % 10**x == 10**y:\n    print(0)\n    exit()\n\ndef flip(s, i):\n    return s[:i] + str(1-int(s[i])) + s[i+1:]\n\ndef check(s, x, y):\n    return int(s[:x]) % 10**x == 10**y\n\ndef solve(s, x, y):\n    best = float(\"inf\")\n    for i in range(n):\n        if check(s, x, y):\n            best = min(best, i)\n        else:\n            if i+x < n:\n                best = min(best, i + solve(flip(s, i+x), x, y))\n            if i+x+1 < n:\n                best = min(best, i + solve(flip(s, i+x+1), x, y))\n    return best\n\nprint(solve(s, x, y))", "\n\ndef main():\n    n,x,y = [int(i) for i in input().split()]\n    a = input()\n    if y == 0:\n        if a[0] == '0':\n            print(1)\n        else:\n            print(0)\n    else:\n        print(min(1, int(a[y-1]) + int(a[x-1])))\n\nmain()", "\n\ndef main():\n    n, x, y = [int(x) for x in input().split()]\n    the_string = input()\n    the_string = list(the_string)\n    if the_string[-y:] == ['1']*y:\n        print(0)\n    else:\n        the_string[-y:] = ['1']*y\n        print(n-y)\n        print(''.join(the_string))\nmain()", "\n\nn, x, y = map(int, input().split())\nn, x, y = int(n), int(x), int(y)\nstring = input()\n\n# the only way to change the remainder is to change the last y digits\n# we want the remainder to be 10^y, so we want to change the last y digits to 10^y\n# we can do this by changing the last y 1s to 0s.\n\n# if there are less than y 1s in the last x digits, then we need to change some digits before the last x digits\n# because the first digit is 1, we can change the first digit to 0 to change the last y digits to 0\n\n# the number of operations is the number of 1s in the last x digits\n\ndef get_num_ones(string):\n    num_ones = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            num_ones += 1\n    return num_ones\n\nnum_ones = get_num_ones(string[-x:])\nif num_ones < y:\n    print(num_ones + 1)\nelse:\n    print(num_ones)", "\n\nn,x,y = map(int,input().split())\ns = input()\n\nif y==0:\n    print(0)\nelse:\n    count = 0\n    for i in range(y,0,-1):\n        if s[i] != '1':\n            count += 1\n    print(count)", "\n\nn, x, y = map(int, input().split())\nnumber = input()\n\nnumber = number[::-1]\n\nones = 0\n\nfor i in range(y):\n    if number[i] == '1':\n        ones += 1\n\nif ones % 2 == 0:\n    print(0)\nelse:\n    print(1)"]