["\n\nimport sys\n\ndef main():\n    n, b, a = map(int, sys.stdin.readline().split())\n    s = list(map(int, sys.stdin.readline().split()))\n\n    ans = 0\n    while b > 0 and a > 0:\n        ans += 1\n        if s[ans - 1] == 1:\n            b = min(b + 1, 2)\n            a = min(a - 1, 1)\n        else:\n            b = min(b - 1, 2)\n            a = min(a - 1, 1)\n\n    while a > 0:\n        ans += 1\n        a = min(a - 1, 1)\n    while b > 0:\n        ans += 1\n        b = min(b - 1, 2)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n\n    i = 0\n    while i < n:\n        if s[i] == 1:\n            if a < b:\n                a += 1\n                b -= 1\n            else:\n                a -= 1\n        else:\n            if a > 0:\n                a -= 1\n            elif b > 0:\n                b -= 1\n            else:\n                break\n        i += 1\n\n    print(i)\n\nmain()", "\n\n\ndef main():\n\tn, b, a = map(int, input().split())\n\ts = list(map(int, input().split()))\n\t\n\tmax_dist = 0\n\t\n\tbattery_charge = b\n\taccumulator_charge = a\n\t\n\tfor i in range(n):\n\t\tif s[i] == 1:\n\t\t\tif accumulator_charge < a and battery_charge > 0:\n\t\t\t\taccumulator_charge += 1\n\t\t\t\tbattery_charge -= 1\n\t\t\n\t\tif accumulator_charge > 0:\n\t\t\taccumulator_charge -= 1\n\t\telif battery_charge > 0:\n\t\t\tbattery_charge -= 1\n\t\telse:\n\t\t\tbreak\n\t\t\n\t\tmax_dist += 1\n\t\t\n\tprint(max_dist)\n\n\nif __name__ == \"__main__\":\n\tmain()", "\n\ndef determine_max_distance_that_can_be_traveled(n, b, a, s):\n    max_distance_that_can_be_traveled = 0\n    b_charge = b\n    a_charge = a\n    for i in range(n):\n        if s[i] == 1:\n            if b_charge > 0:\n                b_charge -= 1\n                a_charge += 1\n                max_distance_that_can_be_traveled += 1\n            elif a_charge > 0:\n                a_charge -= 1\n                max_distance_that_can_be_traveled += 1\n        else:\n            if a_charge > 0:\n                a_charge -= 1\n                max_distance_that_can_be_traveled += 1\n            elif b_charge > 0:\n                b_charge -= 1\n                max_distance_that_can_be_traveled += 1\n        if a_charge > a:\n            a_charge = a\n        if b_charge > b:\n            b_charge = b\n    return max_distance_that_can_be_traveled\n\nn, b, a = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\nprint(determine_max_distance_that_can_be_traveled(n, b, a, s))", "\n\n\ndef _get_args():\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n    return n, b, a, s\n\n\ndef solve(n, b, a, s):\n    # TODO: Solve the problem!\n    return 0\n\n\nif __name__ == '__main__':\n    print(solve(*_get_args()))", "\nimport sys\n\ndef get_maximum_distance(n, b, a, s):\n    \"\"\"\n    :param n: the robot's destination point\n    :param b: the battery capacity\n    :param a: the accumulator capacity\n    :param s: an array of n integers (0 <= s[i] <= 1) where s[i] is 1 if the i-th segment of distance is exposed to sunlight, and 0 otherwise\n    :return: the maximum number of segments the robot can pass if you control him optimally\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\nif __name__ == '__main__':\n    n, b, a = map(int, sys.stdin.readline().split())\n    s = list(map(int, sys.stdin.readline().split()))\n    print(get_maximum_distance(n, b, a, s))", "\n\ndef solution(n, b, a, s):\n    \"\"\"\n    Calculate maximum segments.\n\n    Parameters\n    ----------\n    n : int\n        The robot's destination point.\n    b : int\n        The battery capacity.\n    a : int\n        The accumulator capacity.\n    s : list\n        List of segments.\n\n    Returns\n    -------\n    int\n        Maximum segments.\n    \"\"\"\n    max_segments = 0\n    battery = b\n    accumulator = a\n    for i in range(n):\n        if s[i] == 0:\n            if accumulator > 0:\n                accumulator -= 1\n            elif battery > 0:\n                battery -= 1\n            else:\n                break\n        else:\n            if battery > 0:\n                battery -= 1\n                accumulator += 1\n                if accumulator > a:\n                    accumulator = a\n            elif accumulator > 0:\n                accumulator -= 1\n            else:\n                break\n        max_segments += 1\n    return max_segments\n\n# n, b, a = [int(x) for x in input().split()]\n# s = [int(x) for x in input().split()]\n# print(solution(n, b, a, s))", "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_len = 0\nbattery = b\naccumulator = a\n\nfor s_i in s:\n    if s_i:\n        if battery < b:\n            battery += 1\n        else:\n            if accumulator > 0:\n                accumulator -= 1\n            else:\n                break\n    else:\n        if accumulator > 0:\n            accumulator -= 1\n        else:\n            if battery > 0:\n                battery -= 1\n            else:\n                break\n    max_len += 1\n\nprint(max_len)"]