2022-04-16 19:34:14.073485 """
Takahashi, who is a novice in competitive programming, wants to learn M algorithms.
Initially, his understanding level of each of the M algorithms is 0.
Takahashi is visiting a bookstore, where he finds N books on algorithms.
The i-th book (1\leq i\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\leq j\leq M).
There is no other way to increase the understanding levels of the algorithms.
Takahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.


"""
2022-04-16 19:34:14.073494 --------------------------
2022-04-16 19:34:41.319355 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    N,M,X = [int(x) for x in input().split()]\n    A = []\n    for _ in range(N):\n        A.append([int(x) for x in input().split()])\n    C = [int(x) for x in input().split()]\n    A = np.array(A)\n    C = np.array(C)\n    costs = np.array([min(np.sum(A[np.where(A[:,i]>0)[0]]),C[np.where(A[:,i]>0)[0]].sum()) for i in range(M)])\n    costs[np.where(costs == 0)[0]] = float('inf')\n    print(min(costs))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# input\nN, M, X = map(int, input().split())\nA = []\nfor _ in range(N):\n    A.append(list(map(int, input().split())))\nC = list(map(int, input().split()))\n\n\n# solve\nans = float('inf')\nfor bit in range(2**N):\n    cost = 0\n    # bit\u306e1\u304c\u7acb\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u307f\u8cfc\u5165\n    for i in range(N):\n        if bit & (1 << i):\n            cost += C[i]\n    # bit\u306e1\u304c\u7acb\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u5408\u8a08\u3067X\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    algo = [0] * M\n    for i in range(N):\n        if bit & (1 << i):\n            for j in range(M):\n                algo[j] += A[i][j]\n    if min(algo) >= X:\n        ans = min(ans, cost)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#%%\n\ndef dfs(n, m, x, a, c, dp):\n    if dp[n][m] >= 0:\n        return dp[n][m]\n    res = float('inf')\n    if n == N:\n        if m >= X:\n            res = 0\n    elif m >= X:\n        res = dfs(n+1, m, x, a, c, dp)\n    else:\n        res = min(dfs(n+1, m, x, a, c, dp), dfs(n+1, m | x[n], x, a, c, dp) + c[n])\n    dp[n][m] = res\n    return res\n\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\ndp = [[-1]*(1<<M) for _ in range(N)]\n\nx = [0]*N\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 1:\n            x[i] += 1<<j\n\nans = dfs(0, 0, x, A, C, dp)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)\n\n\n\n#%%\n\n#TLE\n\ndef dfs(n, m, x, a, c):\n    res = float('inf')\n    if n == N:\n        if m >= X:\n            res = 0\n    elif m >= X:\n        res = dfs(n+1, m, x, a, c)\n    else:\n        res = min(dfs(n+1, m, x, a, c), dfs(n+1, m | x[n], x, a, c) + c[n])\n    return res\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\nx = [0]*N\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 1:\n            x[i] += 1<<j\n\nans = dfs(0, 0, x, A, C)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nN,M,X = map(int,input().split())\nC = []\nA = []\nfor i in range(N):\n    C.append(int(input()))\n    A.append(list(map(int,input().split())))\n\n# dp[i][j] := i \u756a\u76ee\u307e\u3067\u306e\u672c\u3092\u8cb7\u3063\u3066\u3001j \u756a\u76ee\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\u304c X \u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u6700\u5c0f\u30b3\u30b9\u30c8\ndp = [[float('inf') for j in range(M+1)] for i in range(N)]\nfor i in range(N):\n    dp[i][0] = 0\n\nfor i in range(N):\n    for j in range(1,M+1):\n        if i == 0:\n            dp[i][j] = C[i] if A[i][j-1] >= X else 0\n        else:\n            dp[i][j] = min(dp[i-1][j],dp[i][j-1] + C[i] if A[i][j-1] >= X else 0)\n\nif dp[N-1][M] == float('inf'):\n    print(-1)\nelse:\n    print(dp[N-1][M])"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN, M, X = map(int, input().split())\n\nC = [0] * N\nA = [[0] * M for _ in range(N)]\n\nfor i in range(N):\n    C[i] = int(input())\n    A[i] = list(map(int, input().split()))\n\n\"\"\"\nbit\u5168\u63a2\u7d22\n\u5168\u3066\u306e\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u3064\u3044\u3066\u3001\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u3067\u5fc5\u8981\u306a\u672c\u3092\u8cb7\u3063\u305f\u6642\u306e\u5fc5\u8981\u91d1\u984d\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u3067\u306e\u5fc5\u8981\u91d1\u984d\u306f\u3001\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u304a\u3051\u308b\u8cb7\u3046\u672c\u3092\u6c7a\u3081\u3001\n\u8cb7\u3046\u672c\u306e\u5358\u4fa1\u306e\u5408\u8a08\u306b\u52a0\u3048\u3001\u305d\u308c\u305e\u308c\u306e\u672c\u306b\u304a\u3051\u308b\u6280\u8853\u306e\u7406\u89e3\u5ea6\u3092\u8a08\u7b97\u3057\u3001\n\u305d\u308c\u3089\u306e\u6700\u5c0f\u5024\u3092\u53d6\u3063\u305f\u3082\u306e\u3068\u3059\u308b\u3002\n\"\"\"\nans = float(\"inf\")\nfor i in range(2**N):\n    tmp = [0] * M\n    count = 0\n    for j in range(N):\n        if (i >> j) & 1:\n            count += C[j]\n            for k in range(M):\n                tmp[k] += A[j][k]\n    if min(tmp) >= X:\n        ans = min(ans, count)\n\nif ans == float(\"inf\"):\n    print(-1)\nelse:\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    n,m = map(int,input().split())\n    a = [list(map(int,input().split())) for _ in range(n)]\n    c = list(map(int,input().split()))\n    dp = [[float('inf')]*(1<<m) for _ in range(n+1)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(1<<m):\n            dp[i+1][j] = min(dp[i+1][j],dp[i][j])\n            nj = j\n            for k in range(m):\n                if a[i][k] and not j&(1<<k):\n                    nj |= (1<<k)\n            dp[i+1][nj] = min(dp[i+1][nj],dp[i][j] + c[i])\n    ans = dp[n][-1]\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport numpy as np\n\nN, M, X = map(int, input().split())\nC = []\nA = []\nfor i in range(N):\n    c = int(input())\n    a = list(map(int, input().split()))\n    C.append(c)\n    A.append(a)\n\nA = np.array(A)\nC = np.array(C)\n\n# \u5168\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u53d6\u5f97\u3067\u304d\u308b\u304b\nans = \"no\"\nfor i in range(2**N):\n    purchase = [0]*N\n    cost = 0\n    for j in range(N):\n        if (i>>j) & 1:\n            purchase[j] = 1\n    purchase = np.array(purchase)\n    res = np.zeros(M)\n    for j in range(M):\n        res[j] = np.dot(A[:,j], purchase)\n    if all(res >= X):\n        ans = min(ans, cost)\nif ans == \"no\":\n    print(ans)\nelse:\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, x = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 10 ** 9\n    for i in range(1 << n):\n        cost = 0\n        algo = [0] * m\n        for j in range(n):\n            if i & (1 << j):\n                cost += a[j][0]\n                for k in range(m):\n                    algo[k] += a[j][k+1]\n        if min(algo) >= x:\n            ans = min(ans, cost)\n    if ans == 10 ** 9:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650137654,
  "id": "cmpl-4xiTOPjt0PPVHEIt6gMmHnU1iwJaX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:34:41.319754 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    N,M,X = [int(x) for x in input().split()]\n    A = []\n    for _ in range(N):\n        A.append([int(x) for x in input().split()])\n    C = [int(x) for x in input().split()]\n    A = np.array(A)\n    C = np.array(C)\n    costs = np.array([min(np.sum(A[np.where(A[:,i]>0)[0]]),C[np.where(A[:,i]>0)[0]].sum()) for i in range(M)])\n    costs[np.where(costs == 0)[0]] = float('inf')\n    print(min(costs))\n    \nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:34:41.319815 REASON stop
2022-04-16 19:34:41.395542 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# input\nN, M, X = map(int, input().split())\nA = []\nfor _ in range(N):\n    A.append(list(map(int, input().split())))\nC = list(map(int, input().split()))\n\n\n# solve\nans = float('inf')\nfor bit in range(2**N):\n    cost = 0\n    # bit\u306e1\u304c\u7acb\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u307f\u8cfc\u5165\n    for i in range(N):\n        if bit & (1 << i):\n            cost += C[i]\n    # bit\u306e1\u304c\u7acb\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u5408\u8a08\u3067X\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    algo = [0] * M\n    for i in range(N):\n        if bit & (1 << i):\n            for j in range(M):\n                algo[j] += A[i][j]\n    if min(algo) >= X:\n        ans = min(ans, cost)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
}
2022-04-16 19:34:41.395741 REASON stop
2022-04-16 19:34:41.396283 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#%%\n\ndef dfs(n, m, x, a, c, dp):\n    if dp[n][m] >= 0:\n        return dp[n][m]\n    res = float('inf')\n    if n == N:\n        if m >= X:\n            res = 0\n    elif m >= X:\n        res = dfs(n+1, m, x, a, c, dp)\n    else:\n        res = min(dfs(n+1, m, x, a, c, dp), dfs(n+1, m | x[n], x, a, c, dp) + c[n])\n    dp[n][m] = res\n    return res\n\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\ndp = [[-1]*(1<<M) for _ in range(N)]\n\nx = [0]*N\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 1:\n            x[i] += 1<<j\n\nans = dfs(0, 0, x, A, C, dp)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)\n\n\n\n#%%\n\n#TLE\n\ndef dfs(n, m, x, a, c):\n    res = float('inf')\n    if n == N:\n        if m >= X:\n            res = 0\n    elif m >= X:\n        res = dfs(n+1, m, x, a, c)\n    else:\n        res = min(dfs(n+1, m, x, a, c), dfs(n+1, m | x[n], x, a, c) + c[n])\n    return res\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\nx = [0]*N\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 1:\n            x[i] += 1<<j\n\nans = dfs(0, 0, x, A, C)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
}
2022-04-16 19:34:41.396353 REASON stop
2022-04-16 19:34:41.411161 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nN,M,X = map(int,input().split())\nC = []\nA = []\nfor i in range(N):\n    C.append(int(input()))\n    A.append(list(map(int,input().split())))\n\n# dp[i][j] := i \u756a\u76ee\u307e\u3067\u306e\u672c\u3092\u8cb7\u3063\u3066\u3001j \u756a\u76ee\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\u304c X \u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u6700\u5c0f\u30b3\u30b9\u30c8\ndp = [[float('inf') for j in range(M+1)] for i in range(N)]\nfor i in range(N):\n    dp[i][0] = 0\n\nfor i in range(N):\n    for j in range(1,M+1):\n        if i == 0:\n            dp[i][j] = C[i] if A[i][j-1] >= X else 0\n        else:\n            dp[i][j] = min(dp[i-1][j],dp[i][j-1] + C[i] if A[i][j-1] >= X else 0)\n\nif dp[N-1][M] == float('inf'):\n    print(-1)\nelse:\n    print(dp[N-1][M])"
}
2022-04-16 19:34:41.411266 REASON stop
2022-04-16 19:34:41.431856 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN, M, X = map(int, input().split())\n\nC = [0] * N\nA = [[0] * M for _ in range(N)]\n\nfor i in range(N):\n    C[i] = int(input())\n    A[i] = list(map(int, input().split()))\n\n\"\"\"\nbit\u5168\u63a2\u7d22\n\u5168\u3066\u306e\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u3064\u3044\u3066\u3001\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u3067\u5fc5\u8981\u306a\u672c\u3092\u8cb7\u3063\u305f\u6642\u306e\u5fc5\u8981\u91d1\u984d\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u3067\u306e\u5fc5\u8981\u91d1\u984d\u306f\u3001\u5404\u30d3\u30c3\u30c8\u30d1\u30bf\u30fc\u30f3\u306b\u304a\u3051\u308b\u8cb7\u3046\u672c\u3092\u6c7a\u3081\u3001\n\u8cb7\u3046\u672c\u306e\u5358\u4fa1\u306e\u5408\u8a08\u306b\u52a0\u3048\u3001\u305d\u308c\u305e\u308c\u306e\u672c\u306b\u304a\u3051\u308b\u6280\u8853\u306e\u7406\u89e3\u5ea6\u3092\u8a08\u7b97\u3057\u3001\n\u305d\u308c\u3089\u306e\u6700\u5c0f\u5024\u3092\u53d6\u3063\u305f\u3082\u306e\u3068\u3059\u308b\u3002\n\"\"\"\nans = float(\"inf\")\nfor i in range(2**N):\n    tmp = [0] * M\n    count = 0\n    for j in range(N):\n        if (i >> j) & 1:\n            count += C[j]\n            for k in range(M):\n                tmp[k] += A[j][k]\n    if min(tmp) >= X:\n        ans = min(ans, count)\n\nif ans == float(\"inf\"):\n    print(-1)\nelse:\n    print(ans)"
}
2022-04-16 19:34:41.432089 REASON stop
2022-04-16 19:34:41.433111 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    n,m = map(int,input().split())\n    a = [list(map(int,input().split())) for _ in range(n)]\n    c = list(map(int,input().split()))\n    dp = [[float('inf')]*(1<<m) for _ in range(n+1)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(1<<m):\n            dp[i+1][j] = min(dp[i+1][j],dp[i][j])\n            nj = j\n            for k in range(m):\n                if a[i][k] and not j&(1<<k):\n                    nj |= (1<<k)\n            dp[i+1][nj] = min(dp[i+1][nj],dp[i][j] + c[i])\n    ans = dp[n][-1]\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:34:41.433222 REASON stop
2022-04-16 19:34:41.434296 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport numpy as np\n\nN, M, X = map(int, input().split())\nC = []\nA = []\nfor i in range(N):\n    c = int(input())\n    a = list(map(int, input().split()))\n    C.append(c)\n    A.append(a)\n\nA = np.array(A)\nC = np.array(C)\n\n# \u5168\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u53d6\u5f97\u3067\u304d\u308b\u304b\nans = \"no\"\nfor i in range(2**N):\n    purchase = [0]*N\n    cost = 0\n    for j in range(N):\n        if (i>>j) & 1:\n            purchase[j] = 1\n    purchase = np.array(purchase)\n    res = np.zeros(M)\n    for j in range(M):\n        res[j] = np.dot(A[:,j], purchase)\n    if all(res >= X):\n        ans = min(ans, cost)\nif ans == \"no\":\n    print(ans)\nelse:\n    print(ans)"
}
2022-04-16 19:34:41.434378 REASON stop
2022-04-16 19:34:41.435720 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, x = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 10 ** 9\n    for i in range(1 << n):\n        cost = 0\n        algo = [0] * m\n        for j in range(n):\n            if i & (1 << j):\n                cost += a[j][0]\n                for k in range(m):\n                    algo[k] += a[j][k+1]\n        if min(algo) >= x:\n            ans = min(ans, cost)\n    if ans == 10 ** 9:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:34:41.435804 REASON stop
