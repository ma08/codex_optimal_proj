2022-04-16 19:23:01.423385 """
We guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.

Your task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.

You have to answer $t$ independent queries.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 25$) — the number of queries. Then $t$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 300$) — the number of divisors in the list.

The second line of the query contains $n$ integers $d_1, d_2, \dots, d_n$ ($2 \le d_i \le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.


-----Output-----

For each query print the answer to it.

If the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.


-----Example-----
Input
2
8
8 2 12 6 4 24 16 3
1
2

Output
48
4
"""
2022-04-16 19:23:01.423403 --------------------------
2022-04-16 19:23:24.523790 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nt = int(input()) # number of test cases\nfor i in range(t):\n    n = int(input()) # number of divisors\n    divisors = list(map(int, input().split())) # list of divisors\n    divisors.sort() # sort in ascending order\n    x = divisors[-1] # last element is x\n    for d in divisors:\n        if x % d != 0:\n            print(-1)\n            break\n    else:\n        print(x)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = list(map(int,input().split()))\n        divisors.sort()\n        ans = divisors[0] * divisors[1]\n        for x in divisors[2:]:\n            if x % ans != 0:\n                print(-1)\n                break\n        else:\n            print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef find_min(divisor_list):\n    if len(divisor_list) == 1:\n        return divisor_list[0] * 2\n    # remove duplicates\n    divisor_list = list(set(divisor_list))\n    # sort the list\n    divisor_list.sort()\n    factor_dict = defaultdict(int)\n    for divisor in divisor_list:\n        factor_list = []\n        for i in range(2, int(divisor ** 0.5) + 1):\n            if divisor % i == 0:\n                factor_list.append(i)\n        if len(factor_list) == 0:\n            factor_dict[divisor] += 1\n        else:\n            for factor in factor_list:\n                factor_dict[factor] += 1\n                factor_dict[divisor // factor] += 1\n    max_factor_count = max(factor_dict.values())\n    max_factor_list = [k for k, v in factor_dict.items() if v == max_factor_count]\n    max_factor_list.sort()\n    num = max_factor_list[0]\n    for i in range(1, len(max_factor_list)):\n        num *= max_factor_list[i]\n    return num\n\n\nif __name__ == '__main__':\n    num_queries = int(input())\n    for _ in range(num_queries):\n        num_divisors = int(input())\n        divisor_list = list(map(int, input().split()))\n        print(find_min(divisor_list))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef min_number(divisors):\n    if len(divisors) == 0:\n        return 1\n    if len(divisors) == 1:\n        return divisors[0]*2\n    divisors.sort()\n    #print(divisors)\n    if divisors[-1] == divisors[-2]*2:\n        divisors.pop()\n        return divisors[-1]*2\n    else:\n        if divisors[-1] % divisors[-2] == 0:\n            return divisors[-1]*2\n        else:\n            return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().strip().split()))\n    print(min_number(divisors))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfor i in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0]*2)\n    else:\n        print(min(d)*max(d))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    d.append(0)\n    x = d[0]\n    for i in range(1, n):\n        if d[i] != d[i-1]*2:\n            x = d[i-1]*2\n            break\n    if x == d[0]:\n        print(-1)\n    else:\n        print(x)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef find_min_x(n, divisors):\n    divisors.sort()\n    min_x = divisors[0]\n    for divisor in divisors[1:]:\n        if min_x % divisor != 0:\n            return -1\n    return min_x\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        divisors = [int(d) for d in sys.stdin.readline().split()]\n        print(find_min_x(n, divisors))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = [int(x) for x in input().split()]\n    divisors.sort()\n    if divisors[0] == 2:\n        print(2 * divisors[-1])\n    else:\n        print(divisors[0] * divisors[1])"
    }
  ],
  "created": 1650136981,
  "id": "cmpl-4xiIXbFGorUVTHzSuUIbIy0scMyWo",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:23:24.524133 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nt = int(input()) # number of test cases\nfor i in range(t):\n    n = int(input()) # number of divisors\n    divisors = list(map(int, input().split())) # list of divisors\n    divisors.sort() # sort in ascending order\n    x = divisors[-1] # last element is x\n    for d in divisors:\n        if x % d != 0:\n            print(-1)\n            break\n    else:\n        print(x)"
}
2022-04-16 19:23:24.524170 REASON stop
2022-04-16 19:23:24.555221 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = list(map(int,input().split()))\n        divisors.sort()\n        ans = divisors[0] * divisors[1]\n        for x in divisors[2:]:\n            if x % ans != 0:\n                print(-1)\n                break\n        else:\n            print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:23:24.555454 REASON stop
2022-04-16 19:23:24.556304 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef find_min(divisor_list):\n    if len(divisor_list) == 1:\n        return divisor_list[0] * 2\n    # remove duplicates\n    divisor_list = list(set(divisor_list))\n    # sort the list\n    divisor_list.sort()\n    factor_dict = defaultdict(int)\n    for divisor in divisor_list:\n        factor_list = []\n        for i in range(2, int(divisor ** 0.5) + 1):\n            if divisor % i == 0:\n                factor_list.append(i)\n        if len(factor_list) == 0:\n            factor_dict[divisor] += 1\n        else:\n            for factor in factor_list:\n                factor_dict[factor] += 1\n                factor_dict[divisor // factor] += 1\n    max_factor_count = max(factor_dict.values())\n    max_factor_list = [k for k, v in factor_dict.items() if v == max_factor_count]\n    max_factor_list.sort()\n    num = max_factor_list[0]\n    for i in range(1, len(max_factor_list)):\n        num *= max_factor_list[i]\n    return num\n\n\nif __name__ == '__main__':\n    num_queries = int(input())\n    for _ in range(num_queries):\n        num_divisors = int(input())\n        divisor_list = list(map(int, input().split()))\n        print(find_min(divisor_list))"
}
2022-04-16 19:23:24.556473 REASON stop
2022-04-16 19:23:24.579116 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef min_number(divisors):\n    if len(divisors) == 0:\n        return 1\n    if len(divisors) == 1:\n        return divisors[0]*2\n    divisors.sort()\n    #print(divisors)\n    if divisors[-1] == divisors[-2]*2:\n        divisors.pop()\n        return divisors[-1]*2\n    else:\n        if divisors[-1] % divisors[-2] == 0:\n            return divisors[-1]*2\n        else:\n            return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().strip().split()))\n    print(min_number(divisors))"
}
2022-04-16 19:23:24.579245 REASON stop
2022-04-16 19:23:24.590462 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfor i in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0]*2)\n    else:\n        print(min(d)*max(d))"
}
2022-04-16 19:23:24.590566 REASON stop
2022-04-16 19:23:24.591690 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    d.append(0)\n    x = d[0]\n    for i in range(1, n):\n        if d[i] != d[i-1]*2:\n            x = d[i-1]*2\n            break\n    if x == d[0]:\n        print(-1)\n    else:\n        print(x)"
}
2022-04-16 19:23:24.591768 REASON stop
2022-04-16 19:23:24.592832 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef find_min_x(n, divisors):\n    divisors.sort()\n    min_x = divisors[0]\n    for divisor in divisors[1:]:\n        if min_x % divisor != 0:\n            return -1\n    return min_x\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        divisors = [int(d) for d in sys.stdin.readline().split()]\n        print(find_min_x(n, divisors))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:23:24.592904 REASON stop
2022-04-16 19:23:24.593879 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = [int(x) for x in input().split()]\n    divisors.sort()\n    if divisors[0] == 2:\n        print(2 * divisors[-1])\n    else:\n        print(divisors[0] * divisors[1])"
}
2022-04-16 19:23:24.593944 REASON stop
