["\n\nimport sys\n\nn = int(input())\n\n# a-z 26, aa-zz 26^2, aaa-zzz 26^3, aaaa-zzzz 26^4, aaaaa-zzzzz 26^5\n# 26 + 26^2 + 26^3 + 26^4 + 26^5 = 308915776\n\n# a-z 26, aa-zz 26^2, aaa-zzz 26^3, aaaa-zzzz 26^4, aaaaa-zzzzz 26^5\n# 26 + 26^2 + 26^3 + 26^4 + 26^5 = 308915776\n\nn -= 1\n\nif n < 26:\n    print(chr(ord('a') + n))\nelif n < 702:\n    n -= 26\n    print(chr(ord('a') + n // 26), chr(ord('a') + n % 26), sep='')\nelif n < 18278:\n    n -= 702\n    print(chr(ord('a') + n // 676), chr(ord('a') + (n % 676) // 26), chr(ord('a') + n % 26), sep='')\nelif n < 475254:\n    n -= 18278\n    print(chr(ord('a') + n // 17576), chr(ord('a') + (n % 17576) // 676), chr(ord('a') + (n % 676) // 26), chr(ord('a') + n % 26), sep='')\nelif n < 26 ** 5:\n    n -= 475254\n    print(chr(ord('a') + n // 456976), chr(ord('a') + (n % 456976) // 17576), chr(ord('a') + (n % 17576) // 676), chr(ord('a') + (n % 676) // 26), chr(ord('a') + n % 26), sep='')\nelse:\n    n -= 26 ** 5\n    print(chr(ord('a') + n // 11881376), chr(ord('a') + (n % 11881376) // 456976), chr(ord('a') + (n % 456976) // 17576), chr(ord('a') + (n % 17576) // 676), chr(ord('a') + (n % 676) // 26), chr(ord('a') + n % 26), sep='')", "\n\nimport sys\n\n\ndef number_to_string(n):\n    n -= 1\n    # Each time we add a new character to the string, we have 26 new strings.\n    # So we need to count how many times we've added a new character.\n    # This is the same as counting how many times we've divided by 26.\n    chars_added = 0\n    while n > 0:\n        n //= 26\n        chars_added += 1\n\n    # The number of strings with a specific number of characters is 26^(number of characters).\n    # This means that the first string with a specific number of characters is 26^(number of characters) + 1.\n    # The next string is 26^(number of characters) + 2, and so on.\n    # So we need to subtract the first number with this many characters from our input.\n    n = n + 1\n    n -= 26 ** chars_added\n\n    # Now, we can convert this number to base 26 and add 97 to each digit to get the ASCII code for each letter.\n    # We need to start from the end of the string, not the beginning.\n    # This means we need to reverse the string.\n    # We also need to convert each digit to a character using chr, instead of just getting the ASCII code.\n    return \"\".join(reversed([chr(n % 26 + 97) for n in [n // 26 ** e % 26 for e in range(chars_added)]]))\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(number_to_string(n))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nN = int(input())\n\nd = {}\ni = 1\nfor c1 in range(ord('a'), ord('z')+1):\n    d[i] = chr(c1)\n    i += 1\nfor c1 in range(ord('a'), ord('z')+1):\n    for c2 in range(ord('a'), ord('z')+1):\n        d[i] = chr(c1)+chr(c2)\n        i += 1\nfor c1 in range(ord('a'), ord('z')+1):\n    for c2 in range(ord('a'), ord('z')+1):\n        for c3 in range(ord('a'), ord('z')+1):\n            d[i] = chr(c1)+chr(c2)+chr(c3)\n            i += 1\nfor c1 in range(ord('a'), ord('z')+1):\n    for c2 in range(ord('a'), ord('z')+1):\n        for c3 in range(ord('a'), ord('z')+1):\n            for c4 in range(ord('a'), ord('z')+1):\n                d[i] = chr(c1)+chr(c2)+chr(c3)+chr(c4)\n                i += 1\nfor c1 in range(ord('a'), ord('z')+1):\n    for c2 in range(ord('a'), ord('z')+1):\n        for c3 in range(ord('a'), ord('z')+1):\n            for c4 in range(ord('a'), ord('z')+1):\n                for c5 in range(ord('a'), ord('z')+1):\n                    d[i] = chr(c1)+chr(c2)+chr(c3)+chr(c4)+chr(c5)\n                    i += 1\n\nprint(d[N])\n\n\"\"\"\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        int tmp = i;\n        while (tmp > 0) {\n            tmp /= 26;\n            cnt++;\n        }\n    }\n    int len = cnt;\n    char s[len+1];\n    s[len] = '\\0';\n    while (n > 0) {\n        s[--len] = 'a' + (n-1)%26;\n        n = (n-1)/26;\n    }\n    cout << s << endl;\n    return 0;\n}\n\"\"\"", "\n\n\nnum = int(input())\n\ndef name(num):\n    count = 1\n    while True:\n        if num <= 26:\n            return chr(96 + num)\n        else:\n            if num <= 26 * 26:\n                return chr(96 + count) + chr(96 + (num - 26 * count))\n\n            else:\n                count += 1\n                num -= 26 * 26\n                continue\nname(num)", "\n\ndef main():\n    N = int(input())\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    name = \"\"\n    while N > 0:\n        N -= 1\n        name = alpha[N % 26] + name\n        N //= 26\n    print(name)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_index(index, base):\n    base -= 1\n    if index > base:\n        index -= base\n        index = get_index(index, base)\n    return index\n\ndef get_char(index):\n    return chr(97 + index)\n\ndef num_to_alpha(num):\n    if num <= 26:\n        return get_char(num - 1)\n    else:\n        num -= 26\n        base = 26\n        i = 1\n        while True:\n            base *= 26\n            if num <= base:\n                break\n            i += 1\n            num -= base\n        index = get_index(num, base)\n        return \"\".join([get_char(i) for i in range(index)])\n\nif __name__ == '__main__':\n    num = int(input())\n    print(num_to_alpha(num))"]