["\n\ndef solve(a):\n    n = len(a)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3 if a[0] < a[1] < a[2] else 2\n    else:\n        i = 0\n        while i < n - 2 and a[i] < a[i + 1]:\n            i += 1\n        j = n - 1\n        while j >= 2 and a[j] > a[j - 1]:\n            j -= 1\n        return max(i + 1, n - j)\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(solve(a))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(array):\n    n = len(array)\n    result = 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    i = 0\n    j = 1\n    if array[i] < array[j]:\n        result = 2\n    i = 1\n    j = 2\n    while j < n:\n        if array[i] < array[j]:\n            result += 1\n            i += 1\n            j += 1\n        else:\n            if i > 0 and i < n - 1:\n                temp = array[i]\n                array[i] = array[i - 1]\n                if array[i - 1] < array[i + 1]:\n                    result += 1\n                else:\n                    result = 1\n                array[i - 1] = temp\n                i = i - 1\n                j = j - 1\n            else:\n                if i == 0:\n                    temp = array[i]\n                    array[i] = array[i + 1]\n                    if array[i] < array[i + 2]:\n                        result += 1\n                    else:\n                        result = 1\n                    array[i + 1] = temp\n                    i = i + 1\n                    j = j + 1\n                else:\n                    result = 1\n                    i = i - 1\n                    j = j - 1\n    return result\n\n\nif __name__ == '__main__':\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(solve(array))", "\n\n\ndef solve(n: int, a: list):\n    if n == 2:\n        return 2\n    else:\n        # if n > 2:\n        max_len = 1\n        for i in range(n - 1):\n            if i > 0:\n                if a[i] - a[i - 1] == 1:\n                    if a[i] + 1 == a[i + 1]:\n                        max_len += 1\n            if a[i] + 1 == a[i + 1]:\n                max_len += 1\n        return max_len\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "\n\ndef max_subarray(array):\n    n = len(array)\n    max_length = 0\n    for i in range(n):\n        if i == 0:\n            if array[i] <= array[i+1]:\n                max_length = 2\n        elif i == n-1:\n            if array[i] >= array[i-1]:\n                max_length = max(max_length, 2)\n        elif array[i] >= array[i-1] and array[i] <= array[i+1]:\n            max_length = max(max_length, 3)\n        elif array[i] <= array[i-1] and array[i] >= array[i+1]:\n            max_length = max(max_length, 3)\n        elif array[i] >= array[i-1] and array[i] >= array[i+1]:\n            max_length = max(max_length, 2)\n        elif array[i] <= array[i-1] and array[i] <= array[i+1]:\n            max_length = max(max_length, 2)\n    return max_length\n\n\nn = int(input())\narray = [int(x) for x in input().split()]\nprint(n - max_subarray(array))", "\n\n\ndef find_longest_increasing_subarray(arr):\n    # find longest increasing subarray\n    longest_inc_subarray = [1 for i in arr]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            longest_inc_subarray[i] = longest_inc_subarray[i - 1] + 1\n\n    # find longest increasing subarray with one element removed\n    longest_inc_subarray_removed = [1 for i in arr]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            longest_inc_subarray_removed[i] = longest_inc_subarray_removed[i - 1] + 1\n        else:\n            if i > 1:\n                longest_inc_subarray_removed[i] = max(longest_inc_subarray_removed[i - 1],\n                                                      longest_inc_subarray[i - 1])\n\n    return max(longest_inc_subarray[-1], longest_inc_subarray_removed[-1])\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_longest_increasing_subarray(arr))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# initialize answer\nans = 1\n\n# run two loops:\n# the first loop will be used to track the length of the increasing subarray\n# the second loop will be used to reset the length if the array is decreasing\nfor i in range(1, n):\n    if arr[i - 1] < arr[i]:\n        ans += 1\n    else:\n        ans = 1\n\nprint(ans)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# print(n, a)\n\nif n == 2:\n    print(2)\nelse:\n    l = 0\n    r = 0\n    ans = 1\n    while r < n - 1:\n        # print(l, r, ans)\n        if a[r] < a[r + 1]:\n            r += 1\n            ans = max(ans, r - l + 1)\n        else:\n            l = r + 1\n            r += 1\n    l = 0\n    r = 0\n    while r < n - 2:\n        # print(l, r, ans)\n        if a[r] < a[r + 1] < a[r + 2]:\n            r += 1\n            ans = max(ans, r - l + 1)\n        else:\n            l = r + 1\n            r += 1\n    print(ans)", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    longest = [[1] * n] * 2\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            longest[0][i] = longest[0][i - 1] + 1\n    for i in reversed(range(n - 1)):\n        if a[i] < a[i + 1]:\n            longest[1][i] = longest[1][i + 1] + 1\n    res = max(max(longest[0]), max(longest[1]))\n    for i in range(1, n - 1):\n        if a[i - 1] + 1 < a[i + 1]:\n            res = max(res, longest[0][i - 1] + longest[1][i + 1])\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"]