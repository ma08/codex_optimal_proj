["\n\ndef get_theta(points):\n    return (points[1][1] - points[0][1]) / (points[1][0] - points[0][0])\n\ndef get_dist(points):\n    return ((points[1][0] - points[0][0])**2 + (points[1][1] - points[0][1])**2)**0.5\n\ndef get_input():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = [float(x) for x in input().split()]\n        points.append((x, y))\n    return points\n\ndef get_points(points):\n    max_d = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            dist = get_dist([p1, p2])\n            if dist > max_d:\n                max_d = dist\n                max_points = [p1, p2]\n    return max_points\n\ndef get_theta_max(points):\n    theta_max = 0\n    max_points = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            p1, p2 = points[i], points[j]\n            theta = get_theta([p1, p2])\n            if theta > theta_max:\n                theta_max = theta\n                max_points = [p1, p2]\n    return theta_max, max_points\n\ndef main():\n    points = get_input()\n    theta_max, max_points = get_theta_max(points)\n    print(theta_max)\n    print(max_points)\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split(\" \"))\n        points.append((x, y))\n    points.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[j][1] >= points[i][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n            else:\n                ans = max(ans, points[i][1] - points[j][1])\n    print(\"{:.3f}\".format(ans))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return [int(x) for x in read_line().split()]\n\ndef read_floats():\n    return [float(x) for x in read_line().split()]\n\ndef solve_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return [float(\"inf\")]\n        else:\n            return [-c/b]\n    else:\n        if b**2 - 4*a*c < 0:\n            return []\n        else:\n            return [(-b + math.sqrt(b**2 - 4*a*c)) / (2*a), (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)]\n\ndef is_close(a, b):\n    return abs(a - b) < 1e-6\n\ndef get_angle(a, b, c):\n    ab = math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n    bc = math.sqrt((b[0] - c[0])**2 + (b[1] - c[1])**2)\n    ac = math.sqrt((a[0] - c[0])**2 + (a[1] - c[1])**2)\n    return math.acos((ab**2 + bc**2 - ac**2) / (2*ab*bc))\n\ndef get_min_angle(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                a = points[i]\n                b = points[j]\n                c = points[k]\n                ab = [b[0] - a[0], b[1] - a[1]]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                angle = get_angle(a, b, c)\n                if angle < min_angle:\n                    min_angle = angle\n    return min_angle\n\ndef get_min_angle_improved(points):\n    min_angle = float(\"inf\")\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            a = points[i]\n            b = points[j]\n            ab = [b[0] - a[0], b[1] - a[1]]\n            ab_norm = math.sqrt(ab[0]**2 + ab[1]**2)\n            ab_normed = [ab[0] / ab_norm, ab[1] / ab_norm]\n            ab_perp = [-ab[1], ab[0]]\n            ab_perp_norm = math.sqrt(ab_perp[0]**2 + ab_perp[1]**2)\n            ab_perp_normed = [ab_perp[0] / ab_perp_norm, ab_perp[1] / ab_perp_norm]\n            t_values = []\n            for k in range(len(points)):\n                if k == i or k == j:\n                    continue\n                c = points[k]\n                ac = [c[0] - a[0], c[1] - a[1]]\n                t = ab_normed[0] * ac[0] + ab_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n                t = ab_perp_normed[0] * ac[0] + ab_perp_normed[1] * ac[1]\n                if t > 0:\n                    t_values.append(t)\n            if len(t_values) > 0:\n                t_values.sort()\n                for k in range(len(t_values) - 1):\n                    angle = math.acos((2*t_values[k]*t_values[k+1] - (t_values[k]**2 + t_values[k+1]**2)) / (2*t_values[k]*t_values[k+1]))\n                    if angle < min_angle:\n                        min_angle = angle\n    return min_angle\n\ndef main():\n    n = int(read_line())\n    points = []\n    for i in range(n):\n        points.append(read_floats())\n    min_angle = get_min_angle_improved(points)\n    print(math.degrees(min_angle))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n    for i in range(n):\n        points.append(map(float, sys.stdin.readline().split()))\n\n    # print(points)\n    # print(dist(points[0], points[1]))\n    # print(dist(points[0], points[2]))\n    # print(dist(points[1], points[2]))\n    # print(dist(points[2], points[1]))\n    # print(dist(points[2], points[0]))\n\n    # print(angle(points[1], points[0], points[2]))\n    # print(angle(points[2], points[1], points[0]))\n    # print(angle(points[0], points[2], points[1]))\n    # print(angle(points[0], points[1], points[2]))\n    # print(angle(points[2], points[0], points[1]))\n    # print(angle(points[1], points[2], points[0]))\n\n    max_angle = 0\n    for i in range(n):\n        for j in range(n):\n            p1 = points[i]\n            p2 = points[j]\n            if i != j:\n                for k in range(n):\n                    if i != k and j != k:\n                        p3 = points[k]\n                        # print(p1, p2, p3)\n                        angles = [angle(p1, p2, p3), angle(p1, p3, p2), angle(p2, p1, p3), angle(p2, p3, p1), angle(p3, p1, p2), angle(p3, p2, p1)]\n                        max_angle = max(max_angle, max(angles))\n    # print(max_angle)\n    print(round(max_angle, 3))\n\n\ndef angle(p1, p2, p3):\n    \"\"\"\n    Calculate the angle between three points\n    \"\"\"\n    return math.acos(\n        ((p2[0] - p1[0]) * (p3[0] - p1[0]) + (p2[1] - p1[1]) * (p3[1] - p1[1])) /\n        (dist(p1, p2) * dist(p1, p3))\n    )\n\n\ndef dist(p1, p2):\n    \"\"\"\n    Calculate the distance between two points\n    \"\"\"\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin\nfrom math import degrees, atan2, pi\n\npoints = []\n\nfor _ in range(int(stdin.readline())):\n    points.append(tuple(float(x) for x in stdin.readline().split()))\n\nfor p1 in points:\n    for p2 in points:\n        if p1 == p2:\n            continue\n        theta = degrees(atan2(p2[1] - p1[1], p2[0] - p1[0]))\n        if theta < 0:\n            theta += 360\n        print(theta)\n\n# print(degrees(atan2(1, 0)))\n# print(pi)", "\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    points = sorted(points)\n    angles = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                angles.append(math.pi / 2)\n            else:\n                angles.append(math.atan((points[j][1] - points[i][1]) / (points[j][0] - points[i][0])))\n    print(min(angles) * 180 / math.pi)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport math\n\ndef get_angle(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.degrees(math.atan2(y2-y1, x2-x1))\n\ndef get_next_point(p1, p2, p3, p4):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n\n    y = ((x1-x2)*(y3-y4))/((y1-y2)*(x3-x4))\n    x = (y1-y2-y*y3+y*y4)/(x1-x2)\n    c = y1-y*y2-x*x1\n\n    return x, y, c\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n\n    angles = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            angles.append(get_angle(points[i], points[j]))\n    angles.sort()\n\n    max_angle = 0\n    for i in range(len(angles)-1):\n        max_angle = max(max_angle, angles[i+1]-angles[i])\n\n    print('%.3f' % (max_angle))\n\n\nif __name__ == \"__main__\":\n    main()"]