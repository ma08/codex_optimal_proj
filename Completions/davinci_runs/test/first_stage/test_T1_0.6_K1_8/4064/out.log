2022-04-16 19:11:55.964449 """
Vova had a pretty weird sleeping schedule. There are $h$ hours in a day. Vova will sleep exactly $n$ times. The $i$-th time he will sleep exactly after $a_i$ hours from the time he woke up. You can assume that Vova woke up exactly at the beginning of this story (the initial time is $0$). Each time Vova sleeps exactly one day (in other words, $h$ hours).

Vova thinks that the $i$-th sleeping time is good if he starts to sleep between hours $l$ and $r$ inclusive.

Vova can control himself and before the $i$-th time can choose between two options: go to sleep after $a_i$ hours or after $a_i - 1$ hours.

Your task is to say the maximum number of good sleeping times Vova can obtain if he acts optimally.


-----Input-----

The first line of the input contains four integers $n, h, l$ and $r$ ($1 \le n \le 2000, 3 \le h \le 2000, 0 \le l \le r < h$) — the number of times Vova goes to sleep, the number of hours in a day and the segment of the good sleeping time.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i < h$), where $a_i$ is the number of hours after which Vova goes to sleep the $i$-th time.


-----Output-----

Print one integer — the maximum number of good sleeping times Vova can obtain if he acts optimally.


-----Example-----
Input
7 24 21 23
16 17 14 20 20 11 22

Output
3



-----Note-----

The maximum number of good times in the example is $3$.

The story starts from $t=0$. Then Vova goes to sleep after $a_1 - 1$ hours, now the time is $15$. This time is not good. Then Vova goes to sleep after $a_2 - 1$ hours, now the time is $15 + 16 = 7$. This time is also not good. Then Vova goes to sleep after $a_3$ hours, now the time is $7 + 14 = 21$. This time is good. Then Vova goes to sleep after $a_4 - 1$ hours, now the time is $21 + 19 = 16$. This time is not good. Then Vova goes to sleep after $a_5$ hours, now the time is $16 + 20 = 12$. This time is not good. Then Vova goes to sleep after $a_6$ hours, now the time is $12 + 11 = 23$. This time is good. Then Vova goes to sleep after $a_7$ hours, now the time is $23 + 22 = 21$. This time is also good.
"""
2022-04-16 19:11:55.964463 --------------------------
2022-04-16 19:12:16.876186 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n):\n        if l <= (a[i] - 1) % h <= r:\n            dp[i][0] = max(dp[i - 1])\n        if l <= a[i] % h <= r:\n            dp[i][1] = max(dp[i - 1])\n    return max(dp[-1])\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, h, l, r, a))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, h, l, r = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\n\ngood = 0\nfor i in range(len(a)):\n    if l <= (a[i] - 1) % h <= r:\n        good += 1\n    if l <= a[i] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\nfor i in range(1, n):\n    if l <= (a[i - 1] - 1) % h <= r or l <= a[i - 1] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef separate_times(a, l, r, h):\n    n = len(a)\n    good = 0\n    bad = 0\n    for i in range(n):\n        if l <= (a[i] - 1) % h <= r:\n            bad += 1\n        elif l <= a[i] % h <= r:\n            good += 1\n        else:\n            pass\n    return good, bad\n\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    g, b = separate_times(a, l, r, h)\n    print(g + (b + 1) // 2)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\ndef solve(a, h, l, r):\n    dp = [[0, 0] for _ in range(h)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, h):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i - 1][0] + 1 if i + 1 in a else 0\n    return max(dp[l][0], dp[l][1], dp[r][0], dp[r][1])\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, h, l, r))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n# n, h, l, r = map(int, '7 24 21 23'.split())\n# a = list(map(int, '16 17 14 20 20 11 22'.split()))\n\nif h % 2 == 0:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n        else:\n            a[i] += 1\n# print(a)\n\ncnt = 0\nfor i in range(1, n+1):\n    if h * i >= l and h * i <= r:\n        cnt += 1\n\nfor i in range(1, n):\n    if a[i] % 2 == 0:\n        if a[i-1] % 2 == 0:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n        else:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n    else:\n        if a[i-1] % 2 == 0:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n        else:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# if a[0] is in [l,r], then add 1 to the number of good times\ngood = a[0] in range(l,r+1)\n\n# if a[i] is in [l,r] and a[i-1] is not in [a[i-1]-1,a[i]-2], then add 1 to the number of good times\nfor i in range(1,n):\n    if a[i] in range(l,r+1):\n        if a[i-1] not in range(a[i-1]-1,a[i]-2):\n            good += 1\n\n# if a[-1] is in [l,r] and a[-2] is not in [a[-2]-1,a[-1]-2], then add 1 to the number of good times\nif a[-1] in range(l,r+1) and a[-2] not in range(a[-2]-1,a[-1]-2):\n    good += 1\n\nprint(good)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\ngood_till_now = 0\nfor i in range(n):\n    if r >= (a[i] - 1) % h >= l:\n        good_till_now += 1\n    if r >= a[i] % h >= l:\n        good_till_now += 1\n    good = max(good, good_till_now)\n    good_till_now -= 1\nprint(good)"
    }
  ],
  "created": 1650136316,
  "id": "cmpl-4xi7osWt6ecg2xpIplYko7JTM2mLl",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:12:16.876491 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, h, l, r, a):\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n):\n        if l <= (a[i] - 1) % h <= r:\n            dp[i][0] = max(dp[i - 1])\n        if l <= a[i] % h <= r:\n            dp[i][1] = max(dp[i - 1])\n    return max(dp[-1])\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, h, l, r, a))"
}
2022-04-16 19:12:16.876524 REASON stop
2022-04-16 19:12:16.878069 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, h, l, r = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\n\ngood = 0\nfor i in range(len(a)):\n    if l <= (a[i] - 1) % h <= r:\n        good += 1\n    if l <= a[i] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)"
}
2022-04-16 19:12:16.878233 REASON stop
2022-04-16 19:12:16.878643 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\nfor i in range(1, n):\n    if l <= (a[i - 1] - 1) % h <= r or l <= a[i - 1] % h <= r:\n        good += 1\n        a[i] -= 1\n\nprint(good)"
}
2022-04-16 19:12:16.878730 REASON stop
2022-04-16 19:12:16.891621 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef separate_times(a, l, r, h):\n    n = len(a)\n    good = 0\n    bad = 0\n    for i in range(n):\n        if l <= (a[i] - 1) % h <= r:\n            bad += 1\n        elif l <= a[i] % h <= r:\n            good += 1\n        else:\n            pass\n    return good, bad\n\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    g, b = separate_times(a, l, r, h)\n    print(g + (b + 1) // 2)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:12:16.891731 REASON stop
2022-04-16 19:12:16.892768 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\ndef solve(a, h, l, r):\n    dp = [[0, 0] for _ in range(h)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, h):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i - 1][0] + 1 if i + 1 in a else 0\n    return max(dp[l][0], dp[l][1], dp[r][0], dp[r][1])\n\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, h, l, r))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:12:16.892864 REASON stop
2022-04-16 19:12:16.910989 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n# n, h, l, r = map(int, '7 24 21 23'.split())\n# a = list(map(int, '16 17 14 20 20 11 22'.split()))\n\nif h % 2 == 0:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n        else:\n            a[i] += 1\n# print(a)\n\ncnt = 0\nfor i in range(1, n+1):\n    if h * i >= l and h * i <= r:\n        cnt += 1\n\nfor i in range(1, n):\n    if a[i] % 2 == 0:\n        if a[i-1] % 2 == 0:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n        else:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n    else:\n        if a[i-1] % 2 == 0:\n            if h * i + 1 >= l and h * i + 1 <= r:\n                cnt += 1\n        else:\n            if h * i >= l and h * i <= r:\n                cnt += 1\n\nprint(cnt)"
}
2022-04-16 19:12:16.911126 REASON stop
2022-04-16 19:12:16.911859 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# if a[0] is in [l,r], then add 1 to the number of good times\ngood = a[0] in range(l,r+1)\n\n# if a[i] is in [l,r] and a[i-1] is not in [a[i-1]-1,a[i]-2], then add 1 to the number of good times\nfor i in range(1,n):\n    if a[i] in range(l,r+1):\n        if a[i-1] not in range(a[i-1]-1,a[i]-2):\n            good += 1\n\n# if a[-1] is in [l,r] and a[-2] is not in [a[-2]-1,a[-1]-2], then add 1 to the number of good times\nif a[-1] in range(l,r+1) and a[-2] not in range(a[-2]-1,a[-1]-2):\n    good += 1\n\nprint(good)"
}
2022-04-16 19:12:16.912002 REASON stop
2022-04-16 19:12:16.912696 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\ngood_till_now = 0\nfor i in range(n):\n    if r >= (a[i] - 1) % h >= l:\n        good_till_now += 1\n    if r >= a[i] % h >= l:\n        good_till_now += 1\n    good = max(good, good_till_now)\n    good_till_now -= 1\nprint(good)"
}
2022-04-16 19:12:16.912798 REASON stop
