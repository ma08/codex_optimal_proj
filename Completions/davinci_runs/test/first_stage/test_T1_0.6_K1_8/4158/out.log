2022-04-16 19:52:56.751254 """
There are $n$ distinct points on a coordinate line, the coordinate of $i$-th point equals to $x_i$. Choose a subset of the given set of points such that the distance between each pair of points in a subset is an integral power of two. It is necessary to consider each pair of points, not only adjacent. Note that any subset containing one element satisfies the condition above. Among all these subsets, choose a subset with maximum possible size.

In other words, you have to choose the maximum possible number of points $x_{i_1}, x_{i_2}, \dots, x_{i_m}$ such that for each pair $x_{i_j}$, $x_{i_k}$ it is true that $|x_{i_j} - x_{i_k}| = 2^d$ where $d$ is some non-negative integer number (not necessarily the same for each pair of points).


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of points.

The second line contains $n$ pairwise distinct integers $x_1, x_2, \dots, x_n$ ($-10^9 \le x_i \le 10^9$) — the coordinates of points.


-----Output-----

In the first line print $m$ — the maximum possible number of points in a subset that satisfies the conditions described above.

In the second line print $m$ integers — the coordinates of points in the subset you have chosen.

If there are multiple answers, print any of them.


-----Examples-----
Input
6
3 5 4 7 10 12

Output
3
7 3 5
Input
5
-1 2 5 8 11

Output
1
8



-----Note-----

In the first example the answer is $[7, 3, 5]$. Note, that $|7-3|=4=2^2$, $|7-5|=2=2^1$ and $|3-5|=2=2^1$. You can't find a subset having more points satisfying the required property.
"""
2022-04-16 19:52:56.751308 --------------------------
2022-04-16 19:54:39.455446 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    N = int(input())\n    X = [int(x) for x in input().split()]\n    # M = {}\n    # for i in range(N):\n    #     for j in range(i+1,N):\n    #         m = abs(X[i]-X[j])\n    #         if m not in M:\n    #             M[m] = set()\n    #         M[m].add(X[i])\n    #         M[m].add(X[j])\n    # M = list(M.items())\n    # M.sort(key=lambda x: x[0])\n    #\n    # ans = set()\n    # for i in range(len(M)-1):\n    #     if M[i][0]*2 == M[i+1][0]:\n    #         ans = ans.union(M[i][1])\n    #\n    # ans = list(ans)\n    # ans.sort()\n    #\n    # print(len(ans))\n    # print(*ans)\n\n    M = {}\n    for i in range(N):\n        if X[i] not in M:\n            M[X[i]] = set()\n        M[X[i]].add(X[i])\n    for i in range(N):\n        for j in range(i+1,N):\n            if abs(X[i]-X[j]) not in M:\n                M[abs(X[i]-X[j])] = set()\n            M[abs(X[i]-X[j])].add(X[i])\n            M[abs(X[i]-X[j])].add(X[j])\n\n    M = list(M.items())\n    M.sort(key=lambda x: x[0])\n\n    ans = set()\n    for i in range(len(M)-1):\n        if M[i][0]*2 == M[i+1][0]:\n            ans = ans.union(M[i][1])\n\n    ans = list(ans)\n    ans.sort()\n\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef solution():\n    pass\n\ndef main():\n    solution()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[j] - x[i]) % 2 == 0:\n                ans.append((x[i], x[j], (x[j] - x[i]) // 2))\n    ans.sort()\n    res = []\n    for i in range(len(ans)):\n        cnt = 0\n        for j in range(i, len(ans)):\n            if ans[j][0] == ans[i][0] and ans[j][1] == ans[i][1]:\n                cnt += 1\n        res.append((cnt, ans[i][0], ans[i][1], ans[i][2]))\n    ans = []\n    res.sort()\n    res.reverse()\n    for i in range(len(res)):\n        if res[i][0] > len(ans) and res[i][0] > 1:\n            temp = []\n            for j in range(i, len(res)):\n                if res[j][0] == res[i][0] and res[j][1] == res[i][1] and res[j][2] == res[i][2]:\n                    temp.append(res[j])\n            if len(temp) == res[i][0]:\n                ans = temp\n                break\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][3], end=\" \")\n\nmain()"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#############################################################################################################################################\n\n# from collections import Counter\n# import math\n# import sys\n# import bisect\n# import heapq\n# import itertools\n# import random\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import matplotlib.animation as animation\n# from functools import reduce\n# from collections import deque\n# from types import GeneratorType\n# from math import gcd\n\n# def readInts():\n#     return list(map(int, stdin.readline().strip().split()))\n# def readInt():\n#     return int(stdin.readline().strip())\n# def readIntsindex0():\n#     return list(map(lambda x: int(x) - 1, input().split()))\n# def readStrs():\n#     return stdin.readline().strip().split()\n# def readStr():\n#     return stdin.readline().strip()\n# def readnumbertolist():\n#     a=[int(i) for i in list(input())]\n#     return a\n# def strlistTostr(list1):\n#     return ''.join(list1)\n# def numlistTostr(list1):\n#     return ''.join(str(e) for e in list1)\n# def strTolist(str):\n#     return str.split()\n# def strlistTointlist(str):\n#     return map(int, str)\n# def slicenum(number,x):\n#     return int(str(number)[:x])\n# def precise(num):\n#     return \"{0:.10f}\".format(num)\n# def rsorted(a):\n#     return sorted(a,reverse=True)\n# def binar(x):\n#     return '{:031b}'.format(x)\n# def findpermute(word):\n#     perms = [''.join(p) for p in permutations(word)]\n#     return set(perms)\n# def findsubsets(S,m):\n#     return set(itertools.combinations(S, m))\n# def sort1(yy,index):\n#     return yy.sort(key = lambda x:x[index])\n# def reversepair(yy):\n#     return yy[::-1]\n# def checkint(x):\n#     return (x).is_integer()\n# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n# def vowel_count(str):\n#     count = 0\n#     vowel = set(\"aeiouAEIOU\")\n#     for alphabet in str:\n#         if alphabet in vowel:\n#             count = count + 1\n#     return count\n# def leapyear(year):\n#     return calendar.isleap(year)\n# def primes_sieve(limit):\n#     limitn = limit+1\n#     not_prime = set()\n#     primes = []\n#     for i in range(2, limitn):\n#         if i in not_prime:\n#             continue\n#         for f in range(i*2, limitn, i):\n#             not_prime.add(f)\n#         primes.append(i)\n#     return primes\n# def distinctstr(s):\n#     t =''.join(set(s))\n#     return t\n# def countdict(s):\n#     d ={}\n#     for i in range(len(s)):\n#         if s[i] not in d.keys():\n#             d[s[i]]=1\n#         else:\n#             d[s[i]]+=1\n#     return d\n# import operator as op\n# def nck(n, k):\n#     k = min(n-k,k)\n#     result = 1\n#     for i in range(1, k+1):\n#         result = result* (n-i+1) / i\n#     return result\n# def matrixcheck(x,y):\n#     faadu = []\n#     directions = zip((0,0,1,-1),(1,-1,0,0))\n#     for dx,dy in directions:\n#         if R>x+dx>=0<=y+dy<C and A[x+dx][y+dy]==0:\n#             faadu.append((x+dx,y+dy))\n#     return faadu\n# def stringcount(s):\n#     return [s.count(i) for i in \"abcdefghijklmnopqrstuvwxyz\"]\n# def bubbleSort(arr):\n#     n = len(arr)\n#     for i in range(n):\n#         for j in range(0, n-i-1):\n#             if arr[j] > arr[j+1] :\n#                 arr[j], arr[j+1] = arr[j+1], arr[j]\n# def isSubsetSum(st, n, sm) :\n#     # arr, n, k\n#     subset=[[True] * (sm+1)] * (n+1)\n#     for i in range(0, n+1) :\n#         subset[i][0] = True\n#     for i in range(1, sm + 1) :\n#         subset[0][i] = False\n#     for i in range(1, n+1) :\n#         for j in range(1, sm+1) :\n#             if(j < st[i-1]) :\n#                 subset[i][j] = subset[i-1][j]\n#             if (j >= st[i-1]) :\n#                 subset[i][j] = subset[i-1][j] or subset[i - 1][j-st[i-1]]\n#     return subset[n][sm];\n# def decimal_to_octal(dec):\n#     decimal = int(dec)\n#     return oct(decimal)\n# def decimal_to_binary(dec):\n#     decimal = int(dec)\n#     return bin(decimal)\n# def decimal_to_hexadecimal(dec):\n#     decimal = int(dec)\n#     return hex(decimal)\n# def dictlist(keys,values):\n#     {d.setdefault(key,[]).append(value) for key, value in zip(keys,values)}\n#     return d\n# if __name__ == '__main__':\n#     n = int(input())\n#     integer_list = map(int, input().split())\n#     t = tuple(integer_list)\n#     print(hash(t))\n# def case():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         print(a.index(a[k-1]))\n# def case1():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case2():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case3():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case4():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case5():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case6():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case7():\n#     for _ in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case8():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case9():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case10():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case11():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case12():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case13():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case14():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case15():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case16():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case17():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#        "
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    n = read_int()\n    x = read_ints()\n\n    # Compute the largest possible set, then we can use the inverse\n    # to get the smallest set.\n    ans = set()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            d = x[j] - x[i]\n            if d == 0:\n                ans.add(x[i])\n                break\n\n            k = 0\n            while d > 0:\n                if d & 1:\n                    break\n                d >>= 1\n                k += 1\n\n            if d == 0:\n                ans.add(x[i])\n                ans.add(x[j])\n                break\n\n    print(len(ans))\n    print(*sorted(ans))\n\nsolve()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn = int(input())\nx = list(map(int, input().split()))\n\nd = {}\n\nfor i in x:\n    d[i] = 0\n\nfor i in range(len(x)):\n    for j in range(i+1, len(x)):\n        k = x[j] - x[i]\n        if k > 0:\n            d[k] += 1\n\nm = max(d.values())\n\nfor i in d.keys():\n    if d[i] == m:\n        print(m)\n        print(i)\n        break"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef find_lcm(x,y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if ((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\ndef find_gcd(x,y):\n    while(y):\n        x,y = y,x%y\n    return x\n\ndef find_gcd_lcm(x,y):\n    gcd = find_gcd(x,y)\n    lcm = (x*y)//gcd\n    return gcd,lcm\n\ndef find_diff_power_2(x,y):\n    gcd,lcm = find_gcd_lcm(x,y)\n    if lcm == 1:\n        return True\n    elif lcm & (lcm-1) == 0:\n        return True\n    else:\n        return False\n\ndef find_subset(a):\n    subset = []\n    while a:\n        base = a[0]\n        subset.append(base)\n        a.pop(0)\n        for i in range(len(a)-1,-1,-1):\n            if find_diff_power_2(base,a[i]):\n                base = a[i]\n                subset.append(base)\n                a.pop(i)\n    return subset\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    subset = find_subset(a)\n    print(len(subset))\n    print(*subset)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx = sorted(x)\n\n# x = [3, 5, 4, 7, 10, 12]\n# x = [3, 5, 4, 7, 10, 12, 5]\n# x = [-1, 2, 5, 8, 11]\n# x = [0, 2, 6, 8]\n# x = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n\n# print(x)\n\nsol = []\n\nfor i in x:\n    if len(sol) == 0:\n        sol.append(i)\n    else:\n        if i in sol:\n            continue\n        else:\n            # print(\"{} is not in {}\".format(i, sol))\n            for j in sol:\n                if i-j in sol or j-i in sol:\n                    # print(\"{} is not in {}\".format(i, sol))\n                    break\n                else:\n                    # print(\"{} is in {}\".format(i, sol))\n                    sol.append(i)\n                    break\n\n# print(sol)\nprint(len(sol))\nfor s in sol:\n    print(s, end=' ')"
    }
  ],
  "created": 1650138776,
  "id": "cmpl-4xilUgeaCUDAab2f4TuNgwsu3Hr1l",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:54:39.455857 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    N = int(input())\n    X = [int(x) for x in input().split()]\n    # M = {}\n    # for i in range(N):\n    #     for j in range(i+1,N):\n    #         m = abs(X[i]-X[j])\n    #         if m not in M:\n    #             M[m] = set()\n    #         M[m].add(X[i])\n    #         M[m].add(X[j])\n    # M = list(M.items())\n    # M.sort(key=lambda x: x[0])\n    #\n    # ans = set()\n    # for i in range(len(M)-1):\n    #     if M[i][0]*2 == M[i+1][0]:\n    #         ans = ans.union(M[i][1])\n    #\n    # ans = list(ans)\n    # ans.sort()\n    #\n    # print(len(ans))\n    # print(*ans)\n\n    M = {}\n    for i in range(N):\n        if X[i] not in M:\n            M[X[i]] = set()\n        M[X[i]].add(X[i])\n    for i in range(N):\n        for j in range(i+1,N):\n            if abs(X[i]-X[j]) not in M:\n                M[abs(X[i]-X[j])] = set()\n            M[abs(X[i]-X[j])].add(X[i])\n            M[abs(X[i]-X[j])].add(X[j])\n\n    M = list(M.items())\n    M.sort(key=lambda x: x[0])\n\n    ans = set()\n    for i in range(len(M)-1):\n        if M[i][0]*2 == M[i+1][0]:\n            ans = ans.union(M[i][1])\n\n    ans = list(ans)\n    ans.sort()\n\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:54:39.455917 REASON stop
2022-04-16 19:54:39.487469 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef solution():\n    pass\n\ndef main():\n    solution()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:54:39.487631 REASON stop
2022-04-16 19:54:39.488103 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[j] - x[i]) % 2 == 0:\n                ans.append((x[i], x[j], (x[j] - x[i]) // 2))\n    ans.sort()\n    res = []\n    for i in range(len(ans)):\n        cnt = 0\n        for j in range(i, len(ans)):\n            if ans[j][0] == ans[i][0] and ans[j][1] == ans[i][1]:\n                cnt += 1\n        res.append((cnt, ans[i][0], ans[i][1], ans[i][2]))\n    ans = []\n    res.sort()\n    res.reverse()\n    for i in range(len(res)):\n        if res[i][0] > len(ans) and res[i][0] > 1:\n            temp = []\n            for j in range(i, len(res)):\n                if res[j][0] == res[i][0] and res[j][1] == res[i][1] and res[j][2] == res[i][2]:\n                    temp.append(res[j])\n            if len(temp) == res[i][0]:\n                ans = temp\n                break\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][3], end=\" \")\n\nmain()"
}
2022-04-16 19:54:39.488169 REASON stop
2022-04-16 19:54:39.514936 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#############################################################################################################################################\n\n# from collections import Counter\n# import math\n# import sys\n# import bisect\n# import heapq\n# import itertools\n# import random\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import matplotlib.animation as animation\n# from functools import reduce\n# from collections import deque\n# from types import GeneratorType\n# from math import gcd\n\n# def readInts():\n#     return list(map(int, stdin.readline().strip().split()))\n# def readInt():\n#     return int(stdin.readline().strip())\n# def readIntsindex0():\n#     return list(map(lambda x: int(x) - 1, input().split()))\n# def readStrs():\n#     return stdin.readline().strip().split()\n# def readStr():\n#     return stdin.readline().strip()\n# def readnumbertolist():\n#     a=[int(i) for i in list(input())]\n#     return a\n# def strlistTostr(list1):\n#     return ''.join(list1)\n# def numlistTostr(list1):\n#     return ''.join(str(e) for e in list1)\n# def strTolist(str):\n#     return str.split()\n# def strlistTointlist(str):\n#     return map(int, str)\n# def slicenum(number,x):\n#     return int(str(number)[:x])\n# def precise(num):\n#     return \"{0:.10f}\".format(num)\n# def rsorted(a):\n#     return sorted(a,reverse=True)\n# def binar(x):\n#     return '{:031b}'.format(x)\n# def findpermute(word):\n#     perms = [''.join(p) for p in permutations(word)]\n#     return set(perms)\n# def findsubsets(S,m):\n#     return set(itertools.combinations(S, m))\n# def sort1(yy,index):\n#     return yy.sort(key = lambda x:x[index])\n# def reversepair(yy):\n#     return yy[::-1]\n# def checkint(x):\n#     return (x).is_integer()\n# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n# def vowel_count(str):\n#     count = 0\n#     vowel = set(\"aeiouAEIOU\")\n#     for alphabet in str:\n#         if alphabet in vowel:\n#             count = count + 1\n#     return count\n# def leapyear(year):\n#     return calendar.isleap(year)\n# def primes_sieve(limit):\n#     limitn = limit+1\n#     not_prime = set()\n#     primes = []\n#     for i in range(2, limitn):\n#         if i in not_prime:\n#             continue\n#         for f in range(i*2, limitn, i):\n#             not_prime.add(f)\n#         primes.append(i)\n#     return primes\n# def distinctstr(s):\n#     t =''.join(set(s))\n#     return t\n# def countdict(s):\n#     d ={}\n#     for i in range(len(s)):\n#         if s[i] not in d.keys():\n#             d[s[i]]=1\n#         else:\n#             d[s[i]]+=1\n#     return d\n# import operator as op\n# def nck(n, k):\n#     k = min(n-k,k)\n#     result = 1\n#     for i in range(1, k+1):\n#         result = result* (n-i+1) / i\n#     return result\n# def matrixcheck(x,y):\n#     faadu = []\n#     directions = zip((0,0,1,-1),(1,-1,0,0))\n#     for dx,dy in directions:\n#         if R>x+dx>=0<=y+dy<C and A[x+dx][y+dy]==0:\n#             faadu.append((x+dx,y+dy))\n#     return faadu\n# def stringcount(s):\n#     return [s.count(i) for i in \"abcdefghijklmnopqrstuvwxyz\"]\n# def bubbleSort(arr):\n#     n = len(arr)\n#     for i in range(n):\n#         for j in range(0, n-i-1):\n#             if arr[j] > arr[j+1] :\n#                 arr[j], arr[j+1] = arr[j+1], arr[j]\n# def isSubsetSum(st, n, sm) :\n#     # arr, n, k\n#     subset=[[True] * (sm+1)] * (n+1)\n#     for i in range(0, n+1) :\n#         subset[i][0] = True\n#     for i in range(1, sm + 1) :\n#         subset[0][i] = False\n#     for i in range(1, n+1) :\n#         for j in range(1, sm+1) :\n#             if(j < st[i-1]) :\n#                 subset[i][j] = subset[i-1][j]\n#             if (j >= st[i-1]) :\n#                 subset[i][j] = subset[i-1][j] or subset[i - 1][j-st[i-1]]\n#     return subset[n][sm];\n# def decimal_to_octal(dec):\n#     decimal = int(dec)\n#     return oct(decimal)\n# def decimal_to_binary(dec):\n#     decimal = int(dec)\n#     return bin(decimal)\n# def decimal_to_hexadecimal(dec):\n#     decimal = int(dec)\n#     return hex(decimal)\n# def dictlist(keys,values):\n#     {d.setdefault(key,[]).append(value) for key, value in zip(keys,values)}\n#     return d\n# if __name__ == '__main__':\n#     n = int(input())\n#     integer_list = map(int, input().split())\n#     t = tuple(integer_list)\n#     print(hash(t))\n# def case():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         print(a.index(a[k-1]))\n# def case1():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case2():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case3():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case4():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case5():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case6():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case7():\n#     for _ in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case8():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case9():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case10():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case11():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case12():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case13():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case14():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case15():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         print(a.index(b))\n# def case16():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#         b=a[k-1]\n#         a.sort()\n#         for i in range(n):\n#             if a[i]==b:\n#                 print(i)\n#                 break\n# def case17():\n#     for i in range(int(input())):\n#         n=int(input())\n#         a=list(map(int,input().split()))\n#         k=int(input())\n#        "
}
2022-04-16 19:54:39.515099 REASON length
2022-04-16 19:54:39.515106 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    n = read_int()\n    x = read_ints()\n\n    # Compute the largest possible set, then we can use the inverse\n    # to get the smallest set.\n    ans = set()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            d = x[j] - x[i]\n            if d == 0:\n                ans.add(x[i])\n                break\n\n            k = 0\n            while d > 0:\n                if d & 1:\n                    break\n                d >>= 1\n                k += 1\n\n            if d == 0:\n                ans.add(x[i])\n                ans.add(x[j])\n                break\n\n    print(len(ans))\n    print(*sorted(ans))\n\nsolve()"
}
2022-04-16 19:54:39.515158 REASON stop
2022-04-16 19:54:39.535002 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn = int(input())\nx = list(map(int, input().split()))\n\nd = {}\n\nfor i in x:\n    d[i] = 0\n\nfor i in range(len(x)):\n    for j in range(i+1, len(x)):\n        k = x[j] - x[i]\n        if k > 0:\n            d[k] += 1\n\nm = max(d.values())\n\nfor i in d.keys():\n    if d[i] == m:\n        print(m)\n        print(i)\n        break"
}
2022-04-16 19:54:39.535105 REASON stop
2022-04-16 19:54:39.536284 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef find_lcm(x,y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if ((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\ndef find_gcd(x,y):\n    while(y):\n        x,y = y,x%y\n    return x\n\ndef find_gcd_lcm(x,y):\n    gcd = find_gcd(x,y)\n    lcm = (x*y)//gcd\n    return gcd,lcm\n\ndef find_diff_power_2(x,y):\n    gcd,lcm = find_gcd_lcm(x,y)\n    if lcm == 1:\n        return True\n    elif lcm & (lcm-1) == 0:\n        return True\n    else:\n        return False\n\ndef find_subset(a):\n    subset = []\n    while a:\n        base = a[0]\n        subset.append(base)\n        a.pop(0)\n        for i in range(len(a)-1,-1,-1):\n            if find_diff_power_2(base,a[i]):\n                base = a[i]\n                subset.append(base)\n                a.pop(i)\n    return subset\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    subset = find_subset(a)\n    print(len(subset))\n    print(*subset)\n\nmain()"
}
2022-04-16 19:54:39.536375 REASON stop
2022-04-16 19:54:39.537131 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx = sorted(x)\n\n# x = [3, 5, 4, 7, 10, 12]\n# x = [3, 5, 4, 7, 10, 12, 5]\n# x = [-1, 2, 5, 8, 11]\n# x = [0, 2, 6, 8]\n# x = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n\n# print(x)\n\nsol = []\n\nfor i in x:\n    if len(sol) == 0:\n        sol.append(i)\n    else:\n        if i in sol:\n            continue\n        else:\n            # print(\"{} is not in {}\".format(i, sol))\n            for j in sol:\n                if i-j in sol or j-i in sol:\n                    # print(\"{} is not in {}\".format(i, sol))\n                    break\n                else:\n                    # print(\"{} is in {}\".format(i, sol))\n                    sol.append(i)\n                    break\n\n# print(sol)\nprint(len(sol))\nfor s in sol:\n    print(s, end=' ')"
}
2022-04-16 19:54:39.537211 REASON stop
