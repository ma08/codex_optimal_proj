["\n\ndef find_lcm(x,y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if ((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\ndef find_gcd(x,y):\n    while(y):\n        x,y = y,x%y\n    return x\n\ndef find_gcd_lcm(x,y):\n    gcd = find_gcd(x,y)\n    lcm = (x*y)//gcd\n    return gcd,lcm\n\ndef find_diff_power_2(x,y):\n    gcd,lcm = find_gcd_lcm(x,y)\n    if lcm == 1:\n        return True\n    elif lcm & (lcm-1) == 0:\n        return True\n    else:\n        return False\n\ndef find_subset(a):\n    subset = []\n    while a:\n        base = a[0]\n        subset.append(base)\n        a.pop(0)\n        for i in range(len(a)-1,-1,-1):\n            if find_diff_power_2(base,a[i]):\n                base = a[i]\n                subset.append(base)\n                a.pop(i)\n    return subset\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    subset = find_subset(a)\n    print(len(subset))\n    print(*subset)\n\nmain()", "\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    n = read_int()\n    x = read_ints()\n\n    # Compute the largest possible set, then we can use the inverse\n    # to get the smallest set.\n    ans = set()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            d = x[j] - x[i]\n            if d == 0:\n                ans.add(x[i])\n                break\n\n            k = 0\n            while d > 0:\n                if d & 1:\n                    break\n                d >>= 1\n                k += 1\n\n            if d == 0:\n                ans.add(x[i])\n                ans.add(x[j])\n                break\n\n    print(len(ans))\n    print(*sorted(ans))\n\nsolve()", "\n\ndef main():\n    N = int(input())\n    X = [int(x) for x in input().split()]\n    # M = {}\n    # for i in range(N):\n    #     for j in range(i+1,N):\n    #         m = abs(X[i]-X[j])\n    #         if m not in M:\n    #             M[m] = set()\n    #         M[m].add(X[i])\n    #         M[m].add(X[j])\n    # M = list(M.items())\n    # M.sort(key=lambda x: x[0])\n    #\n    # ans = set()\n    # for i in range(len(M)-1):\n    #     if M[i][0]*2 == M[i+1][0]:\n    #         ans = ans.union(M[i][1])\n    #\n    # ans = list(ans)\n    # ans.sort()\n    #\n    # print(len(ans))\n    # print(*ans)\n\n    M = {}\n    for i in range(N):\n        if X[i] not in M:\n            M[X[i]] = set()\n        M[X[i]].add(X[i])\n    for i in range(N):\n        for j in range(i+1,N):\n            if abs(X[i]-X[j]) not in M:\n                M[abs(X[i]-X[j])] = set()\n            M[abs(X[i]-X[j])].add(X[i])\n            M[abs(X[i]-X[j])].add(X[j])\n\n    M = list(M.items())\n    M.sort(key=lambda x: x[0])\n\n    ans = set()\n    for i in range(len(M)-1):\n        if M[i][0]*2 == M[i+1][0]:\n            ans = ans.union(M[i][1])\n\n    ans = list(ans)\n    ans.sort()\n\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[j] - x[i]) % 2 == 0:\n                ans.append((x[i], x[j], (x[j] - x[i]) // 2))\n    ans.sort()\n    res = []\n    for i in range(len(ans)):\n        cnt = 0\n        for j in range(i, len(ans)):\n            if ans[j][0] == ans[i][0] and ans[j][1] == ans[i][1]:\n                cnt += 1\n        res.append((cnt, ans[i][0], ans[i][1], ans[i][2]))\n    ans = []\n    res.sort()\n    res.reverse()\n    for i in range(len(res)):\n        if res[i][0] > len(ans) and res[i][0] > 1:\n            temp = []\n            for j in range(i, len(res)):\n                if res[j][0] == res[i][0] and res[j][1] == res[i][1] and res[j][2] == res[i][2]:\n                    temp.append(res[j])\n            if len(temp) == res[i][0]:\n                ans = temp\n                break\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][3], end=\" \")\n\nmain()", "\n\n# SOLUTION\n\nn = int(input())\nx = list(map(int, input().split()))\n\nd = {}\n\nfor i in x:\n    d[i] = 0\n\nfor i in range(len(x)):\n    for j in range(i+1, len(x)):\n        k = x[j] - x[i]\n        if k > 0:\n            d[k] += 1\n\nm = max(d.values())\n\nfor i in d.keys():\n    if d[i] == m:\n        print(m)\n        print(i)\n        break", "\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx = sorted(x)\n\n# x = [3, 5, 4, 7, 10, 12]\n# x = [3, 5, 4, 7, 10, 12, 5]\n# x = [-1, 2, 5, 8, 11]\n# x = [0, 2, 6, 8]\n# x = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n\n# print(x)\n\nsol = []\n\nfor i in x:\n    if len(sol) == 0:\n        sol.append(i)\n    else:\n        if i in sol:\n            continue\n        else:\n            # print(\"{} is not in {}\".format(i, sol))\n            for j in sol:\n                if i-j in sol or j-i in sol:\n                    # print(\"{} is not in {}\".format(i, sol))\n                    break\n                else:\n                    # print(\"{} is in {}\".format(i, sol))\n                    sol.append(i)\n                    break\n\n# print(sol)\nprint(len(sol))\nfor s in sol:\n    print(s, end=' ')", "\n\ndef solution():\n    pass\n\ndef main():\n    solution()\n\nif __name__ == '__main__':\n    main()"]