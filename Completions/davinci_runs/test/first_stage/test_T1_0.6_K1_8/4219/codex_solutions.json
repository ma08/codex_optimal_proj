["\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ntestimonies = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(sys.stdin.readline())\n    for j in range(A_i):\n        testimony = list(map(int, sys.stdin.readline().split()))\n        testimonies[i].append(testimony)\n\nhonesty = [0 for i in range(N)]\n\ndef recur(i):\n    if i == N:\n        return 1\n    elif honesty[i] != 0:\n        return honesty[i]\n    else:\n        for testimony in testimonies[i]:\n            if testimony[1] == 1:\n                if honesty[testimony[0] - 1] == 0:\n                    honesty[i] = recur(i + 1)\n                elif honesty[testimony[0] - 1] == 1:\n                    honesty[i] = recur(i + 1)\n                elif honesty[testimony[0] - 1] == 2:\n                    honesty[i] = 0\n            elif testimony[1] == 0:\n                if honesty[testimony[0] - 1] == 0:\n                    honesty[i] = recur(i + 1) + 1\n                elif honesty[testimony[0] - 1] == 1:\n                    honesty[i] = recur(i + 1) + 1\n                elif honesty[testimony[0] - 1] == 2:\n                    honesty[i] = recur(i + 1)\n\n        if honesty[i] == 0:\n            honesty[i] = recur(i + 1) + 1\n\n    return honesty[i]\n\nprint(recur(0))", "\n\nimport copy\n\ndef search(x, y, N, a, testimony, memo):\n    # print(x, y)\n    if (x, y) in memo:\n        return memo[(x, y)]\n    if (x, y) == (N, 1):\n        return 1\n    elif (x, y) == (N, 0):\n        return 0\n\n    res = 0\n    for i in range(x + 1, N + 1):\n        if (x, y) in testimony[i]:\n            res += search(i, testimony[i][(x, y)], N, a, testimony, memo)\n    memo[(x, y)] = res\n    return res\n\ndef main():\n    N = int(input())\n    a = [int(input()) for _ in range(N)]\n    testimony = [dict() for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for _ in range(a[i - 1]):\n            x, y = map(int, input().split())\n            testimony[i][(x, y)] = y\n    # print(testimony)\n    memo = dict()\n    ans = 0\n    for i in range(1, N + 1):\n        if (i, 1) in testimony[1]:\n            ans += search(1, testimony[1][(i, 1)], N, a, testimony, memo)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n = int(input())\n    tes = [[] for _ in range(n)]\n    for i in range(n):\n        for _ in range(int(input())):\n            tes[i].append(input().split())\n    ans = 0\n    for i in range(1, 2 ** n):\n        res = []\n        for j in range(n):\n            if (i >> j) & 1:\n                res.append(1)\n            else:\n                res.append(0)\n        flag = True\n        for j in range(n):\n            for k in tes[j]:\n                if int(k[1]) != res[j] and res[int(k[0]) - 1] == res[j]:\n                    flag = False\n        if flag:\n            ans = max(ans, bin(i).count('1'))\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n        self.testimonies = []\n        self.honest = None\n    def add_testimony(self, testimony):\n        self.testimonies.append(testimony)\n    def __repr__(self):\n        return str(self.name) + \":\" + str(self.honest)\n\nclass Testimony:\n    def __init__(self, person, honest):\n        self.person = person\n        self.honest = honest\n    def __repr__(self):\n        return str(self.person) + \":\" + str(self.honest)\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [Person(i) for i in range(1, N + 1)]\n    for person in people:\n        A = int(sys.stdin.readline())\n        for _ in range(A):\n            x, y = list(map(int, sys.stdin.readline().split()))\n            person.add_testimony(Testimony(x - 1, y))\n    print(max_honest(people))\n\ndef max_honest(people):\n    def search(i):\n        if i == len(people):\n            return 0\n        person = people[i]\n        ret0 = search(i + 1)\n        for testimony in person.testimonies:\n            if testimony.honest and not people[testimony.person].honest:\n                break\n            elif not testimony.honest and people[testimony.person].honest:\n                break\n        else:\n            person.honest = True\n            ret1 = search(i + 1) + 1\n            person.honest = None\n            return max(ret0, ret1)\n        return ret0\n    return search(0)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# my solution\n# n = int(input())\n# truth = [0]*n\n# for i in range(n):\n#     a = int(input())\n#     for j in range(a):\n#         x, y = map(int, input().split())\n#         if y == 1 and truth[i] != -1:\n#             truth[x-1] += 1\n#         elif y == 0 and truth[i] != -1:\n#             if truth[x-1] == 1:\n#                 truth[i] = -1\n#                 truth[x-1] = 0\n#             else:\n#                 truth[x-1] = -1\n# print(sum(1 for i in truth if i >= 1))\n\nn = int(input())\nis_honest = [False for i in range(n)]\nis_unkind = [False for i in range(n)]\n\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x, y = map(int, input().split())\n        if y == 1:\n            is_honest[x-1] = True\n        else:\n            if is_honest[x-1]:\n                is_unkind[i] = True\n                is_honest[x-1] = False\n            else:\n                is_unkind[x-1] = True\nprint(sum(1 for i in range(n) if is_honest[i] and not is_unkind[i]))", "\n\nimport sys\n\n\ndef read_input(input_file):\n    n = int(input_file.readline().rstrip())\n    people = [0] * n\n    for i in range(n):\n        num_testimonies = int(input_file.readline().rstrip())\n        people[i] = []\n        for j in range(num_testimonies):\n            testimony = list(map(int, input_file.readline().rstrip().split()))\n            people[i].append(testimony)\n    return n, people\n\n\ndef is_honest(person, people):\n    for testimony in person:\n        if testimony[1] == 1 and people[testimony[0] - 1] == 0:\n            return False\n        if testimony[1] == 0 and people[testimony[0] - 1] == 1:\n            return False\n    return True\n\n\ndef main(input_file):\n    n, people = read_input(input_file)\n    honest = 0\n    for i in range(1, 2 ** n):\n        person = [0] * n\n        for j in range(n):\n            person[j] = (i >> j) & 1\n        if is_honest(person, people):\n            honest = max(honest, sum(person))\n    print(honest)\n\n\nif __name__ == '__main__':\n    main(sys.stdin)", "\n\n\"\"\"\n[\u56de\u7b54]\n\u3053\u306e\u554f\u984c\u306f\u3001\u518d\u5e30\u3067\u89e3\u3051\u308b\u3002\n\n\u307e\u305a\u3001\u300c\u672c\u5f53\u306b\u3042\u308b\u4eba\u304c\u5618\u3092\u3064\u3044\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\u4f8b\u3048\u3070\u3001person_1\u304cperson_2\u304c\u5618\u3092\u3064\u3044\u3066\u3044\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306fperson_2\u304c\u6b63\u76f4\u8005\u3067\u3042\u308a\u3001person_1\u304c\u5618\u3092\u3064\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\n\u305d\u3046\u3044\u3046\u4eba\u304c\u4f55\u4eba\u3044\u308b\u304b\u3092\u6570\u3048\u308b\u95a2\u6570\u3092\u4f5c\u308a\u3001\u305d\u308c\u30920~15\u4eba\u307e\u3067\u8a66\u3057\u3066\u307f\u308b\u3002\n\n\"\"\"\n\nclass Person:\n    def __init__(self, n, a, x, y):\n        self.n = n\n        self.a = a\n        self.x = x\n        self.y = y\n        self.honest = True\n        self.testimonies = []\n        for i in range(a):\n            self.testimonies.append(Testimony(x[i], y[i]))\n\nclass Testimony:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef liar_count(people, cnt, n, a, x, y):\n    if cnt == n:\n        return 0\n    if people[cnt].honest:\n        return liar_count(people, cnt+1, n, a, x, y)\n    else:\n        cnt_liar = 0\n        for t in people[cnt].testimonies:\n            if people[t.x-1].honest != t.y:\n                cnt_liar += 1\n        return cnt_liar + liar_count(people, cnt+1, n, a, x, y)\n\ndef main():\n    n = int(input())\n    people = []\n    for i in range(n):\n        a = int(input())\n        x = []\n        y = []\n        for j in range(a):\n            xy = input().split()\n            x.append(int(xy[0]))\n            y.append(int(xy[1]))\n        people.append(Person(i, a, x, y))\n    max_honest = 0\n    for i in range(n+1):\n        people = [Person(i, a, x, y) for i in range(n)]\n        for j in range(i):\n            people[j].honest = False\n        max_honest = max(max_honest, i-liar_count(people, 0, n, a, x, y))\n    print(max_honest)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport itertools\n\ndef get_input():\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.strip())\n    return lines\n\ndef get_testimony(testimony, people):\n    for person in people:\n        if testimony[0] == person[0]:\n            return person[1]\n\ndef check_testimonies(testimonies, people):\n    for testimony in testimonies:\n        if not testimony[1]:\n            return False\n    return True\n\ndef get_max_honest_people(people):\n    max_honest_people = 0\n    num_people = len(people)\n\n    for i in range(1, num_people + 1):\n        for honest_people in itertools.combinations(people, i):\n            if check_testimonies(honest_people, people):\n                max_honest_people = i\n        if max_honest_people == num_people:\n            break\n\n    return max_honest_people\n\ndef main():\n    lines = get_input()\n    num_people = int(lines[0])\n    people = []\n\n    for i in range(num_people):\n        num_testimonies = int(lines[i + 1])\n        testimonies = []\n        for j in range(num_testimonies):\n            testimonies.append((int(lines[i + j + 2].split(' ')[0]), int(lines[i + j + 2].split(' ')[1])))\n\n        people.append((i+1, testimonies))\n\n    for person in people:\n        for testimony in person[1]:\n            testimony_person = get_testimony(testimony, people)\n            if testimony_person:\n                if testimony_person[testimony[0] - 1][1] == testimony[1]:\n                    testimony_person[testimony[0] - 1][1] = True\n                else:\n                    testimony_person[testimony[0] - 1][1] = False\n\n    max_honest_people = get_max_honest_people(people)\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()"]