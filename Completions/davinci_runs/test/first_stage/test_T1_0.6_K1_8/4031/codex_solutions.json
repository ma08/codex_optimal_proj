["\n\nN = int(input())\n\n# Store all the strings\nstrings = []\nfor i in range(N):\n    strings.append(input())\n\n# Sort the strings\nstrings.sort()\n\n# Check that strings[i] is a substring of strings[i+1] for all i\nfor i in range(N-1):\n    if strings[i] not in strings[i+1]:\n        print(\"NO\")\n        exit()\n\n# If all tests pass, print \"YES\" followed by the strings\nprint(\"YES\")\nfor string in strings:\n    print(string)", "\n\nif __name__ == '__main__':\n    n = int(input())\n    strings = [input() for _ in range(n)]\n\n    tree = []\n    for i in range(n):\n        current = strings[i]\n        if len(tree) == 0:\n            tree.append(current)\n        else:\n            for j in range(len(tree)):\n                if current in tree[j]:\n                    tree.insert(j, current)\n                    break\n            if len(tree) == i:\n                tree.append(current)\n\n    print('YES')\n    for s in tree:\n        print(s)", "\n\ndef is_substring(a, b):\n    return b.find(a) != -1\n\ndef is_subsequence(a, b):\n    i = 0\n    for j in range(len(b)):\n        if i < len(a) and a[i] == b[j]:\n            i += 1\n    return i == len(a)\n\ndef solve(s):\n    n = len(s)\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if is_substring(s[i], s[j]):\n                d[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] > 1:\n                return False\n    return True\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    s.sort()\n    if solve(s):\n        print(\"YES\")\n        for i in range(n):\n            print(s[i])\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef isSubstring(a, b):\n    j = 0\n    for i in range(len(a)):\n        if a[i] == b[j]:\n            j += 1\n            if j == len(b):\n                return True\n    return False\n\ndef isValid(strings):\n    strings.sort(key=len)\n    for i in range(len(strings) - 1):\n        if not isSubstring(strings[i], strings[i + 1]):\n            return False\n    return True\n\ndef main():\n    strings = []\n    n = int(input())\n    for i in range(n):\n        strings.append(input())\n    if isValid(strings):\n        print(\"YES\")\n        for s in strings:\n            print(s)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n = int(input())\n    arr = [input() for _ in range(n)]\n\n    if n == 1:\n        print('YES')\n        print(arr[0])\n        return\n\n    if n == 2:\n        if arr[0] in arr[1]:\n            print('YES')\n            print(arr[0])\n            print(arr[1])\n        elif arr[1] in arr[0]:\n            print('YES')\n            print(arr[1])\n            print(arr[0])\n        else:\n            print('NO')\n        return\n\n    arr.sort(key=lambda x: len(x))\n\n    possible = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] not in arr[j]:\n                possible = False\n                break\n        if not possible:\n            break\n\n    if possible:\n        print('YES')\n        for a in arr:\n            print(a)\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\nn = int(input())\nstrings = []\n\nfor i in range(n):\n    strings.append(input())\n\nstrings.sort(key=len)\n\ndef is_substring(a, b):\n    for i in range(len(b) - len(a) + 1):\n        if b[i:i+len(a)] == a:\n            return True\n    return False\n\nfor i in range(1, len(strings)):\n    if not is_substring(strings[i], strings[i-1]):\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n    print(*strings, sep='\\n')", "\n\ndef solve(n, strings):\n    strings.sort()\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[j].find(strings[i]) != 0:\n                return False\n    return True\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    if solve(n, strings):\n        print(\"YES\")\n        for string in strings:\n            print(string)\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    if solve(strings):\n        print(\"YES\")\n        for i in strings:\n            print(i)\n    else:\n        print(\"NO\")\n\ndef solve(strings):\n    strings.sort(key=lambda x: len(x))\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] not in strings[j]:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()"]