["\n\n# N: Number of items\n# M: Number of popular items\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Number of votes\ntotal_votes = sum(A)\n\n# If the most popular item has more than 1/4M of the total votes, it is a popular item\nif A[0] > total_votes / (4 * M):\n    if A[0] == A[1]:\n        print('No')\n    else:\n        print('Yes')\nelse:\n    print('No')", "\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nX = sorted(A, reverse=True)\n\nif X[M-1] >= sum(X) // 4 // M:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nif max(A) >= n / (4 * m):\n    print('Yes')\nelse:\n    print('No')", "\n\nn, m = map(int, input().split())\nvotes = sorted(list(map(int, input().split())), reverse=True)\n\nif votes[0] >= (4 * m * votes[-1]):\n    print('Yes')\nelse:\n    print('No')", "\n\nclass PopularItem:\n    def __init__(self, n, m, lst):\n        self.n = n\n        self.m = m\n        self.lst = lst\n\n    def canSelect(self):\n        total_votes = sum(self.lst)\n        min_votes = total_votes//(4*self.m)\n        return all(i >= min_votes for i in self.lst)\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    lst = list(map(int, input().split()))\n    print(\"Yes\" if PopularItem(n, m, lst).canSelect() else \"No\")", "\n\n#1. Get input\nN, M = map(int, input().split())\nvotes = list(map(int, input().split()))\n\n#2. Check if M is possible\nif max(votes) >= sum(votes) / (4*M):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\ndef main():\n    N, M = (int(n) for n in input().split())\n    A = [int(n) for n in input().split()]\n    if max(A) // (4 * M) == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif __name__ == '__main__':\n    main()", "\n\nfrom itertools import accumulate\nfrom typing import List, Tuple\n\ndef poll(n: int, m: int, votes: List[int]) -> Tuple[str, int]:\n    \"\"\"\n    >>> poll(4, 1, [5, 4, 2, 1])\n    ('Yes', 5)\n    >>> poll(4, 2, [5, 4, 2, 1])\n    ('Yes', 3)\n    >>> poll(4, 3, [5, 4, 2, 1])\n    ('No', 2)\n    >>> poll(4, 4, [5, 4, 2, 1])\n    ('No', 1)\n    >>> poll(2, 1, [4, 2])\n    ('No', 2)\n    >>> poll(2, 2, [4, 2])\n    ('No', 1)\n    \"\"\"\n    total_votes = sum(votes)\n    threshold = total_votes // (4 * m)\n    popular_votes = [0] + list(accumulate(votes))\n\n    for i in range(1, n + 1 - m + 1):\n        if popular_votes[i + m - 1] - popular_votes[i - 1] >= threshold:\n            return 'Yes', threshold\n    return 'No', threshold\n\nif __name__ == '__main__':\n    n, m = [int(x) for x in input().split(' ')]\n    votes = [int(x) for x in input().split(' ')]\n    print(poll(n, m, votes)[0])"]