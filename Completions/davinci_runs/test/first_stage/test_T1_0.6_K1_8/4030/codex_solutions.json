["\n\nn = int(input())\ns = input()\n\nres = 1\nc = [1]\nfor i in range(1, n):\n    if s[i] > s[i - 1]:\n        c.append(1)\n    else:\n        c.append(c[i - 1] + 1)\n        res = max(res, c[i])\n\nprint(res)\nprint(*c)", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n\n    r = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            r[i] = r[i - 1]\n        elif s[i] < s[i - 1]:\n            r[i] = r[i - 1] + 1\n    print(max(r))\n    print(*r)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin\n\ninput = stdin.readline\n#input = lambda: \"9\\nabacbecfd\\n\"\n\nn = int(input())\ns = input()\n\ndef solve():\n    # print(n, s)\n    # print(sorted(s))\n    if s == sorted(s):\n        return 1\n    # print(\"first char\", s[0])\n\n    # pattern\n    # [a-z]?[a-z]?[a-z]?[a-z]?[a-z]?[a-z]?[a-z]\n    prefix = \"\"\n    suffix = \"\"\n    # print(\"s[-1]\", s[-1])\n    for i in range(n-1, -1, -1):\n        # print(\"i\", i)\n        if s[i] < s[-1]:\n            break\n        suffix += s[i]\n    for i in range(n):\n        if s[i] > s[0]:\n            break\n        prefix += s[i]\n    # print(\"prefix, suffix\", prefix, suffix)\n    if len(suffix) == n - 1:\n        return 2\n    if len(suffix) <= 1:\n        return 3\n    if len(suffix) == 2:\n        return 2\n    if len(suffix) == 3 and s[-1] != s[-2] and s[-3] != s[-2]:\n        return 2\n    if len(suffix) == 4 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2]:\n        return 2\n    if len(suffix) == 5 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2] and s[-5] != s[-2]:\n        return 2\n    if len(suffix) == 6 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2] and s[-5] != s[-2] and s[-6] != s[-2]:\n        return 2\n    if len(suffix) == 7 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2] and s[-5] != s[-2] and s[-6] != s[-2] and s[-7] != s[-2]:\n        return 2\n    if len(suffix) == 8 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2] and s[-5] != s[-2] and s[-6] != s[-2] and s[-7] != s[-2] and s[-8] != s[-2]:\n        return 2\n    if len(suffix) == 9 and s[-1] != s[-2] and s[-3] != s[-2] and s[-4] != s[-2] and s[-5] != s[-2] and s[-6] != s[-2] and s[-7] != s[-2] and s[-8] != s[-2] and s[-9] != s[-2]:\n        return 2\n    return 3\n\ndef main():\n    colors = solve()\n    print(colors)\n    if colors == 1:\n        print(*[1 for _ in range(n)])\n    elif colors == 2:\n        print(*[1 if s[i] == s[0] else 2 for i in range(n)])\n    else:\n        print(*[1 if s[i] == s[0] else 2 if s[i] == s[-1] else 3 for i in range(n)])\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\ns = input()\n\nres = 1\nc = [0] * n\nc[0] = 1\nfor i in range(1, n):\n    if s[i] != s[i-1]:\n        c[i] = c[i-1] + 1\n    else:\n        c[i] = c[i-1]\n    res = max(res, c[i])\nprint(res)\nprint(*c)", "\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    return n,s\n\ndef get_sorted_string(s):\n    return ''.join(sorted(s))\n\ndef get_longest_substring(s):\n    if len(s) == 0 or s == get_sorted_string(s):\n        return s\n    for i in range(len(s)-1,0,-1):\n        if s[i] > s[i-1]:\n            return s[i:]\n\ndef color_string(s, n):\n    if len(s) == 0:\n        return []\n    sorted_s = get_sorted_string(s)\n    longest_substring = get_longest_substring(s)\n    color = 1\n    if longest_substring == sorted_s:\n        color = 2\n    return [color] + color_string(s[:-len(longest_substring)], n)\n\ndef main():\n    n,s = get_input()\n    result = color_string(s,n)\n    print(max(result))\n    print(' '.join(map(str,result)))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\ndef main():\n    # s = sys.stdin.readline()\n    # nums = [int(n) for n in s.split()]\n    # print(s)\n    # print(nums)\n\n    n = int(sys.stdin.readline())\n    s = [c for c in sys.stdin.readline()]\n    # print(n)\n    # print(s)\n\n    # color\n    colors = [0 for i in range(len(s))]\n    colors[0] = 1\n    colors[1] = 2\n    for i in range(2, len(s)):\n        if s[i - 1] < s[i]:\n            colors[i] = colors[i - 1]\n        else:\n            colors[i] = colors[i - 2] + 1\n    # print(colors)\n    print(max(colors))\n    print(' '.join(str(i) for i in colors))\n\n\nif __name__==\"__main__\":\n    main()", "\n\n# Read input\nn = int(input())\ns = input()\n\n# Initialize the answer as an empty list\nans = []\n\n# Initialize the current color to 1\ncurr = 1\n\n# Iterate over the characters of s, starting at index 1\nfor i in range(1, n):\n\t# If the previous character and the current character are different\n\tif s[i-1] != s[i]:\n\t\t# Set the color of the current character to the current color\n\t\tans.append(curr)\n\t\t# If the current color is 1, set it to 2, otherwise set it to 1\n\t\tcurr = 2 if curr == 1 else 1\n\t# Otherwise, the previous character and the current character are the same\n\telse:\n\t\t# Set the color of the current character to the current color\n\t\tans.append(curr)\n\n# Print the answer\nprint(max(ans))\nprint(\" \".join(map(str, ans)))", "\n\ndef main():\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(1)\n        print(1)\n        return\n    c = []\n    c.append(1)\n    cnt = 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            c.append(c[i - 1])\n        else:\n            cnt += 1\n            c.append(cnt)\n    print(cnt)\n    print(*c)\n\nif __name__ == \"__main__\":\n    main()"]