2022-04-16 19:25:36.999801 """
You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.

Let's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \ge i_1$, $j_2 \ge i_2$, and for every $t \in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text "to be or not to be" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words "to be".

An abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text "a ab a a b ab a a b c" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation "AAA" and obtain the text "a AAA b AAA b c", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation "AAAB" and obtain the text "a AAAB AAAB c".

What is the minimum length of the text after at most one abbreviation?


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 300$) — the number of words in the text.

The next line contains $n$ space-separated words of the text $w_1, w_2, \dots, w_n$. Each word consists only of lowercase Latin letters.

It is guaranteed that the length of text does not exceed $10^5$.


-----Output-----

Print one integer — the minimum length of the text after at most one abbreviation.


-----Examples-----
Input
6
to be or not to be

Output
12

Input
10
a ab a a b ab a a b c

Output
13

Input
6
aa bb aa aa bb bb

Output
11



-----Note-----

In the first example you can obtain the text "TB or not TB".

In the second example you can obtain the text "a AAAB AAAB c".

In the third example you can obtain the text "AB aa AB bb".
"""
2022-04-16 19:25:36.999816 --------------------------
2022-04-16 19:26:11.331766 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef get_text_length(text):\n    text_length = 0\n    for word in text:\n        text_length += len(word)\n    return text_length\n\ndef get_text_without_duplicates(text):\n    text_without_duplicates = []\n    for word in text:\n        if word not in text_without_duplicates:\n            text_without_duplicates.append(word)\n    return text_without_duplicates\n\ndef get_text_with_abbreviation(text, abbreviation):\n    text_with_abbreviation = []\n    for word in text:\n        if word in abbreviation:\n            text_with_abbreviation.append(word[0])\n        else:\n            text_with_abbreviation.append(word)\n    return text_with_abbreviation\n\ndef get_number_of_duplicates(text, abbreviation):\n    number_of_duplicates = 0\n    for word in text:\n        if word in abbreviation:\n            number_of_duplicates += 1\n    return number_of_duplicates\n\ndef get_number_of_abbreviations(text, abbreviation):\n    number_of_duplicates = get_number_of_duplicates(text, abbreviation)\n    return number_of_duplicates - 1 if number_of_duplicates > 1 else number_of_duplicates\n\ndef get_maximum_length_of_text_after_abbreviation(text, abbreviation):\n    text_with_abbreviation = get_text_with_abbreviation(text, abbreviation)\n    number_of_abbreviations = get_number_of_abbreviations(text, abbreviation)\n    return get_text_length(text_with_abbreviation) - number_of_abbreviations\n\ndef get_maximum_length_of_text_after_abbreviations(text):\n    text_without_duplicates = get_text_without_duplicates(text)\n    combinations = combinations_with_replacement(text_without_duplicates, 2)\n    maximum_length = get_text_length(text)\n    for combination in combinations:\n        maximum_length = min(maximum_length, get_maximum_length_of_text_after_abbreviation(text, combination))\n    return maximum_length\n\ndef main():\n    n = int(input())\n    text = input().split()\n    print(get_maximum_length_of_text_after_abbreviations(text))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\nfrom collections import Counter\n\nn = int(input())\ntext = input().split()\n\ncounts = Counter(text)\n\nif len(counts) == 1:\n    print(n)\nelse:\n    print(n + 2)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    abbreviation(n, words)\n\ndef abbreviation(n, words):\n    # Find words that repeat\n    repeats = [0] * n\n    for i in range(1, n):\n        if words[i] == words[i-1]: repeats[i] = 1\n\n    # Find max run of repeats\n    max_run = 0\n    run = 0\n    for i in range(1, n):\n        if repeats[i] == 1: run += 1\n        else:\n            if run > max_run: max_run = run\n            run = 0\n\n    # Find the number of words that don't repeat\n    single_words = 0\n    for i in range(n):\n        if repeats[i] == 0: single_words += 1\n\n    # Find the minimum length\n    min_length = n\n    if max_run >= 2:\n        length = n - max_run + 1 + 2\n        if length < min_length: min_length = length\n\n    if max_run >= 3:\n        length = n - max_run + 1 + 3\n        if length < min_length: min_length = length\n\n    if single_words > 0:\n        length = n - single_words + 1\n        if length < min_length: min_length = length\n\n    print(min_length)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split(' ')\n    if n == 1:\n        print(len(words[0]))\n    else:\n        minLen = len(words[0])\n        for i in range(0, n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    for k in range(0, n):\n                        if k == i:\n                            count = 2\n                            for l in range(i+1, n):\n                                if l == j:\n                                    count += 1\n                                    break\n                                elif words[l] == words[i]:\n                                    count += 1\n                                else:\n                                    break\n                            minLen = min(minLen, len(words[i])*count + len(words[i]) + len(words[k+count]) + len(''.join(words[0:k])) + len(''.join(words[k+count+1:n])))\n                            break\n                        if words[k] != words[i]:\n                            minLen = min(minLen, len(words[i])*2 + len(words[k]) + len(''.join(words[0:k])) + len(''.join(words[k+1:n])))\n        print(minLen)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nimport sys\n\nn = int(input())\nwords = input().split()\n\nif len(set(words)) == 1:\n    print(3 + n - 1)\n    sys.exit(0)\n\nl = 0\n\nfor i in range(n):\n    for j in range(i, n):\n        if words[i:j+1] == words[0:j-i+1]:\n            l = max(l, len(words[0:j-i+1]) + 2)\n\nprint(l + n - l + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    ans = 0\n    for i in range(n):\n        ans += len(words[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                ans -= len(words[i])\n                break\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    total_len = len(s)\n    max_len = 1\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word, count in word_count.items():\n        if count > 1:\n            max_len = max(max_len, len(word))\n    print(total_len - (count - 1) * (max_len - 2))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650137137,
  "id": "cmpl-4xiL3m4RGyARMpnzKy4hBGdF7nxM5",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:26:11.332169 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": ""
}
2022-04-16 19:26:11.332225 REASON stop
2022-04-16 19:26:11.364673 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef get_text_length(text):\n    text_length = 0\n    for word in text:\n        text_length += len(word)\n    return text_length\n\ndef get_text_without_duplicates(text):\n    text_without_duplicates = []\n    for word in text:\n        if word not in text_without_duplicates:\n            text_without_duplicates.append(word)\n    return text_without_duplicates\n\ndef get_text_with_abbreviation(text, abbreviation):\n    text_with_abbreviation = []\n    for word in text:\n        if word in abbreviation:\n            text_with_abbreviation.append(word[0])\n        else:\n            text_with_abbreviation.append(word)\n    return text_with_abbreviation\n\ndef get_number_of_duplicates(text, abbreviation):\n    number_of_duplicates = 0\n    for word in text:\n        if word in abbreviation:\n            number_of_duplicates += 1\n    return number_of_duplicates\n\ndef get_number_of_abbreviations(text, abbreviation):\n    number_of_duplicates = get_number_of_duplicates(text, abbreviation)\n    return number_of_duplicates - 1 if number_of_duplicates > 1 else number_of_duplicates\n\ndef get_maximum_length_of_text_after_abbreviation(text, abbreviation):\n    text_with_abbreviation = get_text_with_abbreviation(text, abbreviation)\n    number_of_abbreviations = get_number_of_abbreviations(text, abbreviation)\n    return get_text_length(text_with_abbreviation) - number_of_abbreviations\n\ndef get_maximum_length_of_text_after_abbreviations(text):\n    text_without_duplicates = get_text_without_duplicates(text)\n    combinations = combinations_with_replacement(text_without_duplicates, 2)\n    maximum_length = get_text_length(text)\n    for combination in combinations:\n        maximum_length = min(maximum_length, get_maximum_length_of_text_after_abbreviation(text, combination))\n    return maximum_length\n\ndef main():\n    n = int(input())\n    text = input().split()\n    print(get_maximum_length_of_text_after_abbreviations(text))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:26:11.364876 REASON stop
2022-04-16 19:26:11.365427 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\nfrom collections import Counter\n\nn = int(input())\ntext = input().split()\n\ncounts = Counter(text)\n\nif len(counts) == 1:\n    print(n)\nelse:\n    print(n + 2)"
}
2022-04-16 19:26:11.365491 REASON stop
2022-04-16 19:26:11.390627 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    abbreviation(n, words)\n\ndef abbreviation(n, words):\n    # Find words that repeat\n    repeats = [0] * n\n    for i in range(1, n):\n        if words[i] == words[i-1]: repeats[i] = 1\n\n    # Find max run of repeats\n    max_run = 0\n    run = 0\n    for i in range(1, n):\n        if repeats[i] == 1: run += 1\n        else:\n            if run > max_run: max_run = run\n            run = 0\n\n    # Find the number of words that don't repeat\n    single_words = 0\n    for i in range(n):\n        if repeats[i] == 0: single_words += 1\n\n    # Find the minimum length\n    min_length = n\n    if max_run >= 2:\n        length = n - max_run + 1 + 2\n        if length < min_length: min_length = length\n\n    if max_run >= 3:\n        length = n - max_run + 1 + 3\n        if length < min_length: min_length = length\n\n    if single_words > 0:\n        length = n - single_words + 1\n        if length < min_length: min_length = length\n\n    print(min_length)\n\nmain()"
}
2022-04-16 19:26:11.390733 REASON stop
2022-04-16 19:26:11.402683 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split(' ')\n    if n == 1:\n        print(len(words[0]))\n    else:\n        minLen = len(words[0])\n        for i in range(0, n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    for k in range(0, n):\n                        if k == i:\n                            count = 2\n                            for l in range(i+1, n):\n                                if l == j:\n                                    count += 1\n                                    break\n                                elif words[l] == words[i]:\n                                    count += 1\n                                else:\n                                    break\n                            minLen = min(minLen, len(words[i])*count + len(words[i]) + len(words[k+count]) + len(''.join(words[0:k])) + len(''.join(words[k+count+1:n])))\n                            break\n                        if words[k] != words[i]:\n                            minLen = min(minLen, len(words[i])*2 + len(words[k]) + len(''.join(words[0:k])) + len(''.join(words[k+1:n])))\n        print(minLen)\n\nmain()"
}
2022-04-16 19:26:11.402836 REASON stop
2022-04-16 19:26:11.404107 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nimport sys\n\nn = int(input())\nwords = input().split()\n\nif len(set(words)) == 1:\n    print(3 + n - 1)\n    sys.exit(0)\n\nl = 0\n\nfor i in range(n):\n    for j in range(i, n):\n        if words[i:j+1] == words[0:j-i+1]:\n            l = max(l, len(words[0:j-i+1]) + 2)\n\nprint(l + n - l + 1)"
}
2022-04-16 19:26:11.404237 REASON stop
2022-04-16 19:26:11.405238 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    ans = 0\n    for i in range(n):\n        ans += len(words[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                ans -= len(words[i])\n                break\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:26:11.405326 REASON stop
2022-04-16 19:26:11.406131 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    total_len = len(s)\n    max_len = 1\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word, count in word_count.items():\n        if count > 1:\n            max_len = max(max_len, len(word))\n    print(total_len - (count - 1) * (max_len - 2))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:26:11.406225 REASON stop
