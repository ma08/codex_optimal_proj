2022-04-16 19:52:06.580265 """
The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.

If $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.

The test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.

Determine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).


-----Input-----

The first line contains two integers $n$ and $w$ $(1 \le n \le 1\,000, 1 \le w \le 10^{9})$ â€” the number of bus stops and the capacity of the bus.

The second line contains a sequence $a_1, a_2, \dots, a_n$ $(-10^{6} \le a_i \le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.


-----Output-----

Print the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.


-----Examples-----
Input
3 5
2 1 -3

Output
3

Input
2 4
-1 1

Output
4

Input
4 10
2 4 1 2

Output
2



-----Note-----

In the first example initially in the bus could be $0$, $1$ or $2$ passengers.

In the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.

In the third example initially in the bus could be $0$ or $1$ passenger.
"""
2022-04-16 19:52:06.580312 --------------------------
2022-04-16 19:52:27.837339 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif a[0] < 0 or a[0] > w:\n    print(0)\nelse:\n    for i in range(1, len(a)):\n        if a[i] < -w or a[i] > w:\n            print(0)\n            break\n        else:\n            a[i] = a[i] + a[i - 1]\n            if a[i] < 0 or a[i] > w:\n                print(0)\n                break\n            else:\n                a[i] = a[i] - a[i - 1]\n\n    if sum(a) >= 0:\n        print(w - a[0] + 1)\n    else:\n        print(a[0] + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n):\n        x += a[i]\n        if x > w or x < 0:\n            print(0)\n            exit()\n    print(w-x+1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef possible_solutions(n,w,a):\n    #print(f'n={n} w={w} a={a}')\n    if n == 0:\n        return 1\n    if n == 1:\n        #print(f'a[0]={a[0]}')\n        if (w - a[0]) >= 0 and (w - a[0]) <= w:\n            return 1\n        return 0\n    total = 0\n    for i in range(0, w+1):\n        if (i - a[0]) >= 0 and (i - a[0]) <= w:\n            total += possible_solutions(n-1, w, a[1:])\n    return total\n\ndef main():\n    n, w = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(possible_solutions(n,w,a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef find_moves(n, w, moves):\n    start_positions = []\n\n    for i in range(0, w + 1):\n        current_position = i\n        can_move = True\n\n        for move in moves:\n            current_position += move\n\n            if current_position > w or current_position < 0:\n                can_move = False\n                break\n\n        if can_move:\n            start_positions.append(i)\n\n    return len(start_positions)\n\n\ndef main():\n    line = input()\n    line = line.split(\" \")\n    n = int(line[0])\n    w = int(line[1])\n\n    line = input()\n    line = line.split(\" \")\n    moves = []\n\n    for move in line:\n        moves.append(int(move))\n\n    print(find_moves(n, w, moves))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\n\ndef main():\n    n, capacity = map(int, stdin.readline().split())\n    change_in_passengers = list(map(int, stdin.readline().split()))\n\n    # Initialize the last bus stop\n    # capacity + 1, because we want the amount of passengers\n    # to be between 0 and capacity, not 1 and capacity + 1\n    last_bus_stop = [0 for _ in range(capacity + 1)]\n    last_bus_stop[0] = 1\n\n    for change in change_in_passengers:\n        current_bus_stop = [0 for _ in range(capacity + 1)]\n        for passengers, ways in enumerate(last_bus_stop):\n            # We can't have negative people in the bus\n            if passengers - change < 0:\n                continue\n\n            # We can't have more people in the bus than the capacity\n            if passengers - change > capacity:\n                continue\n\n            current_bus_stop[passengers - change] += ways\n        last_bus_stop = current_bus_stop\n\n    print(sum(last_bus_stop))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Read input\nn,w = map(int,input().split())\na = list(map(int,input().split()))\n\n# Check if it is possible to have a contradictory situation\nstart = 0\nfor i in a:\n    start += i\nif start > w or start < 0:\n    print(0)\n    exit()\n\n# Count the number of ways to get to the last passenger count\n# We can do this by counting backwards.\n# We start with the number of ways to reach the total we want at the last stop.\n# If the last stop adds two passengers, then the total number of ways to get to that\n# total is the sum of the number of ways to get to that total minus two.\n# This is because if we can get to the number x, then we can get to x minus 2 by\n# removing two people at the last stop.\n# We can also do this in reverse.\nways = [1] + [0]*w\nfor i in reversed(range(n)):\n    for j in range(w+1):\n        if j >= -a[i]:\n            ways[j] += ways[j+a[i]]\n\n# Print the number of ways to get to zero at the first stop\nprint(ways[0])"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, w = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n\n    count = 0\n    for i in range(n):\n        count += a[i]\n\n    if count < -w or count > w:\n        print 0\n    else:\n        print w - abs(count) + 1\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650138726,
  "id": "cmpl-4xikgj5Cw7gdMSMp8IzkJvHmL6EUO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-16 19:52:27.837617 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif a[0] < 0 or a[0] > w:\n    print(0)\nelse:\n    for i in range(1, len(a)):\n        if a[i] < -w or a[i] > w:\n            print(0)\n            break\n        else:\n            a[i] = a[i] + a[i - 1]\n            if a[i] < 0 or a[i] > w:\n                print(0)\n                break\n            else:\n                a[i] = a[i] - a[i - 1]\n\n    if sum(a) >= 0:\n        print(w - a[0] + 1)\n    else:\n        print(a[0] + 1)"
}
2022-04-16 19:52:27.837652 REASON stop
2022-04-16 19:52:27.886201 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n):\n        x += a[i]\n        if x > w or x < 0:\n            print(0)\n            exit()\n    print(w-x+1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:52:27.886401 REASON stop
2022-04-16 19:52:27.886849 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef possible_solutions(n,w,a):\n    #print(f'n={n} w={w} a={a}')\n    if n == 0:\n        return 1\n    if n == 1:\n        #print(f'a[0]={a[0]}')\n        if (w - a[0]) >= 0 and (w - a[0]) <= w:\n            return 1\n        return 0\n    total = 0\n    for i in range(0, w+1):\n        if (i - a[0]) >= 0 and (i - a[0]) <= w:\n            total += possible_solutions(n-1, w, a[1:])\n    return total\n\ndef main():\n    n, w = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(possible_solutions(n,w,a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:52:27.886920 REASON stop
2022-04-16 19:52:27.908866 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef find_moves(n, w, moves):\n    start_positions = []\n\n    for i in range(0, w + 1):\n        current_position = i\n        can_move = True\n\n        for move in moves:\n            current_position += move\n\n            if current_position > w or current_position < 0:\n                can_move = False\n                break\n\n        if can_move:\n            start_positions.append(i)\n\n    return len(start_positions)\n\n\ndef main():\n    line = input()\n    line = line.split(\" \")\n    n = int(line[0])\n    w = int(line[1])\n\n    line = input()\n    line = line.split(\" \")\n    moves = []\n\n    for move in line:\n        moves.append(int(move))\n\n    print(find_moves(n, w, moves))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:52:27.909027 REASON stop
2022-04-16 19:52:27.909901 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-16 19:52:27.909995 REASON stop
2022-04-16 19:52:27.912625 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\n\ndef main():\n    n, capacity = map(int, stdin.readline().split())\n    change_in_passengers = list(map(int, stdin.readline().split()))\n\n    # Initialize the last bus stop\n    # capacity + 1, because we want the amount of passengers\n    # to be between 0 and capacity, not 1 and capacity + 1\n    last_bus_stop = [0 for _ in range(capacity + 1)]\n    last_bus_stop[0] = 1\n\n    for change in change_in_passengers:\n        current_bus_stop = [0 for _ in range(capacity + 1)]\n        for passengers, ways in enumerate(last_bus_stop):\n            # We can't have negative people in the bus\n            if passengers - change < 0:\n                continue\n\n            # We can't have more people in the bus than the capacity\n            if passengers - change > capacity:\n                continue\n\n            current_bus_stop[passengers - change] += ways\n        last_bus_stop = current_bus_stop\n\n    print(sum(last_bus_stop))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-16 19:52:27.912712 REASON stop
2022-04-16 19:52:27.914264 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Read input\nn,w = map(int,input().split())\na = list(map(int,input().split()))\n\n# Check if it is possible to have a contradictory situation\nstart = 0\nfor i in a:\n    start += i\nif start > w or start < 0:\n    print(0)\n    exit()\n\n# Count the number of ways to get to the last passenger count\n# We can do this by counting backwards.\n# We start with the number of ways to reach the total we want at the last stop.\n# If the last stop adds two passengers, then the total number of ways to get to that\n# total is the sum of the number of ways to get to that total minus two.\n# This is because if we can get to the number x, then we can get to x minus 2 by\n# removing two people at the last stop.\n# We can also do this in reverse.\nways = [1] + [0]*w\nfor i in reversed(range(n)):\n    for j in range(w+1):\n        if j >= -a[i]:\n            ways[j] += ways[j+a[i]]\n\n# Print the number of ways to get to zero at the first stop\nprint(ways[0])"
}
2022-04-16 19:52:27.914347 REASON stop
2022-04-16 19:52:27.915439 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, w = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n\n    count = 0\n    for i in range(n):\n        count += a[i]\n\n    if count < -w or count > w:\n        print 0\n    else:\n        print w - abs(count) + 1\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-16 19:52:27.915522 REASON stop
