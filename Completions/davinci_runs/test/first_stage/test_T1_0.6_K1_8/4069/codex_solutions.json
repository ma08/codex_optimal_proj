["\n\nnums = input().split()\n\nx = int(nums[0])\nk = int(nums[1])\nd = int(nums[2])\n\n# If the destination is larger than x, move towards the destination\n# If the destination is smaller than x, move towards the destination\n# If the destination is equal to x, move towards the destination\n# In other words, move towards the destination\n# If k is even, the destination is x\n# If k is odd, the destination is x +- d\n\nx_abs = abs(x)\nk_rem = k % 2\nif k_rem == 0:\n    print(x_abs)\nelse:\n    print(min(x_abs + d, x_abs - d))", "\n\nx, k, d = map(int, input().split())\n\n# \u521d\u671f\u4f4d\u7f6e\u304c\u6b63\u306e\u5834\u5408\nif x >= 0:\n    # \u6b63\u306e\u6570\u3067\u79fb\u52d5\u3057\u3066\u3044\u3051\u308b\u5834\u5408\n    if x < k * d:\n        # \u6700\u5c0f\u306e\u79fb\u52d5\u8ddd\u96e2\u3092\u7b97\u51fa\n        if x % d == 0:\n            print(abs(x - (k * d)))\n        else:\n            print(abs(x - (d * (k - (x // d)))))\n    # \u6b63\u306e\u6570\u3067\u79fb\u52d5\u3057\u3066\u3044\u3051\u306a\u3044\u5834\u5408\n    else:\n        # \u79fb\u52d5\u56de\u6570\u304c\u5947\u6570\u306e\u5834\u5408\n        if k % 2 == 1:\n            print(abs(x - (k * d)))\n        # \u79fb\u52d5\u56de\u6570\u304c\u5076\u6570\u306e\u5834\u5408\n        else:\n            print(abs(x - (d * (k - (x // d)))))\n\n# \u521d\u671f\u4f4d\u7f6e\u304c\u8ca0\u306e\u5834\u5408\nelse:\n    # \u8ca0\u306e\u6570\u3067\u79fb\u52d5\u3057\u3066\u3044\u3051\u308b\u5834\u5408\n    if x > k * -d:\n        # \u6700\u5c0f\u306e\u79fb\u52d5\u8ddd\u96e2\u3092\u7b97\u51fa\n        if x % d == 0:\n            print(abs(x - (k * d)))\n        else:\n            print(abs(x - (d * (k - (x // d)))))\n    # \u8ca0\u306e\u6570\u3067\u79fb\u52d5\u3057\u3066\u3044\u3051\u306a\u3044\u5834\u5408\n    else:\n        # \u79fb\u52d5\u56de\u6570\u304c\u5947\u6570\u306e\u5834\u5408\n        if k % 2 == 1:\n            print(abs(x - (k * d)))\n        # \u79fb\u52d5\u56de\u6570\u304c\u5076\u6570\u306e\u5834\u5408\n        else:\n            print(abs(x - (d * (k - (x // d)))))", "\n\nx, k, d = map(int, input().split())\n\nif x < 0:\n    x = -x\n\nmoves = x // d\nif moves >= k:\n    print(x - k * d)\nelse:\n    k -= moves\n    x -= moves * d\n    if k % 2 == 0:\n        print(x)\n    else:\n        print(d - x)", "\n\ndef main():\n    x, k, d = map(int, input().split())\n    # 2\u9032\u6cd5\u3067\u8003\u3048\u308b\u3068\u3001X\u304c\u5076\u6570\u306a\u3089\u3001X/D\u306e\u7aef\u6570\u3092\u5076\u6570\u56de\u7e70\u308a\u4e0a\u3052\u308b\u306e\u304c\u6700\u5584\n    # X\u304c\u5947\u6570\u306e\u5834\u5408\u306f\u3001\u5947\u6570\u56de\u7e70\u308a\u4e0a\u3052\u305f\u5f8c\u3001D\u3092\u8db3\u3059\u306e\u304c\u6700\u5584\n    if x % d == 0:\n        ans = 0\n    elif abs(x) // d % 2 == 0:\n        ans = d - abs(x) % d\n    else:\n        ans = abs(x) % d\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# -*- coding: utf-8 -*-\n\ndef move(x, k, d):\n    if k <= 0:\n        return x\n    if x >= 0:\n        return move(x - d, k - 1, d)\n    else:\n        return move(x + d, k - 1, d)\n\nx, k, d = map(int, input().split())\nprint(abs(move(x, k, d)))", "\n\nimport sys\n\ndef main():\n    # Read input\n    x, k, d = map(int, sys.stdin.readline().split())\n\n    # Solve\n    if k * d <= x:\n        print(abs(x - k * d))\n    else:\n        kd_rem = k * d - x\n        k_rem = kd_rem // d\n        x_rem = x - (k - k_rem) * d\n        print(abs(x_rem - kd_rem % d))\n\nif __name__ == \"__main__\":\n    main()", "\n\n#main-----\nx,k,d = map(int,input().split())\n\nif k*d <= abs(x):\n    print(abs(x)-k*d)\nelse:\n    k -= abs(x)//d\n    k %= 2\n    print(abs(x)%d if k else d-(abs(x)%d))", "\n\n# You can write to stdout for debugging purposes, e.g.\n# print(\"This is a debug message\")\n\ndef solution(x, k, d):\n    # write your code in Python 3.6\n    if abs(x) >= k * d:\n        return abs(x) - k * d\n    else:\n        return abs(abs(x) - k * d) % d\n\nprint(solution(6, 2, 4))\nprint(solution(10, 100, 1))\nprint(solution(1000000000000, 1000000000000, 1))\nprint(solution(0, 3, 3))"]