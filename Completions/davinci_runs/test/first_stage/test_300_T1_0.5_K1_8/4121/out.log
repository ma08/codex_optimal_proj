2022-04-19 22:11:06.979330 """
Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.

The current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.

Vova can only use $2 \times 1$ bricks to put in the wall (he has infinite supply of them, however).

Vova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).

The next paragraph is specific to the version 1 of the problem.

Vova can also put bricks vertically. That means increasing height of any part of the wall by 2.

Vova is a perfectionist, so he considers the wall completed when:

  all parts of the wall has the same height;  the wall has no empty spaces inside it. 

Can Vova complete the wall using any amount of bricks (possibly zero)?


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of parts in the wall.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$) — the initial heights of the parts of the wall.


-----Output-----

Print "YES" if Vova can complete the wall using any amount of bricks (possibly zero).

Print "NO" otherwise.


-----Examples-----
Input
5
2 1 1 2 5

Output
YES

Input
3
4 5 3

Output
YES

Input
2
10 10

Output
YES

Input
3
1 2 3

Output
NO



-----Note-----

In the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.

In the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.

In the third example the wall is already complete.
"""
2022-04-19 22:11:06.979349 --------------------------
2022-04-19 22:11:06.979493 using api key gabby
2022-04-19 22:11:21.301750 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if max(a) - min(a) > 1:\n        print(\"NO\")\n        return\n    if max(a) - min(a) == 1:\n        if a.count(max(a)) > 1 and a.count(min(a)) > 1:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\n# Fill in the gaps\nfor i in range(n - 1):\n    if h[i] == h[i + 1]:\n        h[i + 1] += 1\n\n# Check if all equal\nif len(set(h)) == 1:\n    print('YES')\nelse:\n    print('NO')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [*map(int, sys.stdin.readline().strip().split())]\n    a.sort()\n    print(a)\n    if a[0] == a[-1]:\n        print('YES')\n        return\n    if a[0] + 1 == a[1] and a[-2] + 1 == a[-1]:\n        print('YES')\n        return\n    print('NO')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef solve(n, a):\n    a = list(map(int, a))\n    if len(set(a)) == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if max(a) - min(a) > 2:\n        return 'NO'\n    if max(a) - min(a) == 2:\n        if a.count(max(a)) > 1 and a.count(min(a)) > 1:\n            return 'NO'\n        return 'YES'\n    if max(a) - min(a) == 1:\n        if a.count(max(a)) > 1 or a.count(min(a)) > 1:\n            return 'NO'\n        return 'YES'\n\n\n\ndef main():\n    n = int(input())\n    a = input().split()\n    print(solve(n, a))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(\"YES\")\n        return\n\n    # Check if the wall is already complete\n    if all(x == a[0] for x in a):\n        print(\"YES\")\n        return\n\n    # Check if there are any gaps in the wall\n    if any(a[i] + 1 != a[i + 1] for i in range(n - 1)):\n        print(\"NO\")\n        return\n\n    # Check if the wall can be completed using horizontal bricks\n    if any(a[i] == a[i + 1] for i in range(n - 1)):\n        print(\"YES\")\n        return\n\n    # Check if the wall can be completed using vertical bricks\n    if any(a[i] == a[i + 1] + 2 for i in range(n - 1)):\n        print(\"YES\")\n        return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650406267,
  "id": "cmpl-4yqLrPnkWoFSc3IIfNRfY0U6eFwJy",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:11:21.302067 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if max(a) - min(a) > 1:\n        print(\"NO\")\n        return\n    if max(a) - min(a) == 1:\n        if a.count(max(a)) > 1 and a.count(min(a)) > 1:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:11:21.302103 REASON stop
2022-04-19 22:11:21.302752 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
2022-04-19 22:11:21.302828 REASON stop
2022-04-19 22:11:21.303277 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\n# Fill in the gaps\nfor i in range(n - 1):\n    if h[i] == h[i + 1]:\n        h[i + 1] += 1\n\n# Check if all equal\nif len(set(h)) == 1:\n    print('YES')\nelse:\n    print('NO')"
}
2022-04-19 22:11:21.303345 REASON stop
2022-04-19 22:11:21.318506 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-19 22:11:21.318635 REASON stop
2022-04-19 22:11:21.324781 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-19 22:11:21.324923 REASON stop
2022-04-19 22:11:21.339873 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [*map(int, sys.stdin.readline().strip().split())]\n    a.sort()\n    print(a)\n    if a[0] == a[-1]:\n        print('YES')\n        return\n    if a[0] + 1 == a[1] and a[-2] + 1 == a[-1]:\n        print('YES')\n        return\n    print('NO')\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:11:21.340001 REASON stop
2022-04-19 22:11:21.342394 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef solve(n, a):\n    a = list(map(int, a))\n    if len(set(a)) == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if max(a) - min(a) > 2:\n        return 'NO'\n    if max(a) - min(a) == 2:\n        if a.count(max(a)) > 1 and a.count(min(a)) > 1:\n            return 'NO'\n        return 'YES'\n    if max(a) - min(a) == 1:\n        if a.count(max(a)) > 1 or a.count(min(a)) > 1:\n            return 'NO'\n        return 'YES'\n\n\n\ndef main():\n    n = int(input())\n    a = input().split()\n    print(solve(n, a))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:11:21.342556 REASON stop
2022-04-19 22:11:21.343102 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(\"YES\")\n        return\n\n    # Check if the wall is already complete\n    if all(x == a[0] for x in a):\n        print(\"YES\")\n        return\n\n    # Check if there are any gaps in the wall\n    if any(a[i] + 1 != a[i + 1] for i in range(n - 1)):\n        print(\"NO\")\n        return\n\n    # Check if the wall can be completed using horizontal bricks\n    if any(a[i] == a[i + 1] for i in range(n - 1)):\n        print(\"YES\")\n        return\n\n    # Check if the wall can be completed using vertical bricks\n    if any(a[i] == a[i + 1] + 2 for i in range(n - 1)):\n        print(\"YES\")\n        return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:11:21.343280 REASON stop
