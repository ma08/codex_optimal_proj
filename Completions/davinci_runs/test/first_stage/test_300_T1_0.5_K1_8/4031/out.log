2022-04-19 21:09:34.766492 """
You are given $n$ strings. Each string consists of lowercase English letters. Rearrange (reorder) the given strings in such a way that for every string, all strings that are placed before it are its substrings.

String $a$ is a substring of string $b$ if it is possible to choose several consecutive letters in $b$ in such a way that they form $a$. For example, string "for" is contained as a substring in strings "codeforces", "for" and "therefore", but is not contained as a substring in strings "four", "fofo" and "rof".


-----Input-----

The first line contains an integer $n$ ($1 \le n \le 100$) â€” the number of strings.

The next $n$ lines contain the given strings. The number of letters in each string is from $1$ to $100$, inclusive. Each string consists of lowercase English letters.

Some strings might be equal.


-----Output-----

If it is impossible to reorder $n$ given strings in required order, print "NO" (without quotes).

Otherwise print "YES" (without quotes) and $n$ given strings in required order.


-----Examples-----
Input
5
a
aba
abacaba
ba
aba

Output
YES
a
ba
aba
aba
abacaba

Input
5
a
abacaba
ba
aba
abab

Output
NO

Input
3
qwerty
qwerty
qwerty

Output
YES
qwerty
qwerty
qwerty



-----Note-----

In the second example you cannot reorder the strings because the string "abab" is not a substring of the string "abacaba".
"""
2022-04-19 21:09:34.766507 --------------------------
2022-04-19 21:09:34.766605 using api key sourya
2022-04-19 21:10:19.106046 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\nstrings.sort()\n\nfor i in range(n-1):\n    if not strings[i] in strings[i+1]:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")\nprint(\"\\n\".join(strings))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    strings = []\n    for x in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n\n    for i in range(n):\n        for j in range(i):\n            if strings[i].find(strings[j]) != 0:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for s in strings:\n        print(s)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nif n == 1:\n    print('YES')\n    print(s[0])\nelse:\n    s = sorted(s, key = len)\n    for i in range(n-1):\n        if s[i] not in s[i+1]:\n            print('NO')\n            break\n    else:\n        print('YES')\n        for i in s:\n            print(i)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    strings = [input() for _ in range(n)]\n    strings.sort(key=lambda s: len(s), reverse=True)\n    for i in range(1, n):\n        if not strings[i].startswith(strings[i - 1]):\n            return print(\"NO\")\n    print(\"YES\")\n    print(\"\\n\".join(strings))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Solution\n\ndef solve(n, arr):\n    arr.sort(key=len)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] not in arr[j]:\n                return 'NO'\n    return 'YES\\n' + '\\n'.join(arr)\n\n\nn = int(input())\narr = [input() for _ in range(n)]\nprint(solve(n, arr))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\nn       = int(input())\nstrings = [input() for _ in range(n)]\n\n# sort strings by length\nstrings.sort(key=lambda x: len(x))\n\n# sort strings by lexicographical order\nstrings.sort()\n\n# check if strings can be reordered\nfor i in range(n - 1):\n    if strings[i] not in strings[i + 1]:\n        print(\"NO\")\n        quit()\n\nprint(\"YES\")\nprint(\"\\n\".join(strings))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = []\n    for _ in range(n):\n        s.append(input())\n    s.sort(key=len)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] not in s[j]:\n                print('NO')\n                return\n    print('YES')\n    for i in s:\n        print(i)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# Solution 1\n# def is_substring(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     for i in range(len(string2) - len(string1) + 1):\n#         if string1 == string2[i:i+len(string1)]:\n#             return True\n#     return False\n#\n#\n# def is_substring_2(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     return string1 in string2\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     strings = []\n#     for _ in range(n):\n#         strings.append(input())\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if is_substring(strings[i], strings[j]):\n#                 strings[i], strings[j] = strings[j], strings[i]\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if not is_substring(strings[i], strings[j]):\n#                 print(\"NO\")\n#                 exit()\n#     print(\"YES\")\n#     for s in strings:\n#         print(s)\n\n# Solution 2\n# def is_substring(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     for i in range(len(string2) - len(string1) + 1):\n#         if string1 == string2[i:i+len(string1)]:\n#             return True\n#     return False\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     strings = []\n#     for _ in range(n):\n#         strings.append(input())\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if is_substring(strings[i], strings[j]):\n#                 strings[i], strings[j] = strings[j], strings[i]\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if not is_substring(strings[i], strings[j]):\n#                 print(\"NO\")\n#                 exit()\n#     print(\"YES\")\n#     for s in strings:\n#         print(s)\n\n# Solution 3\ndef is_substring(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    for i in range(len(string2) - len(string1) + 1):\n        if string1 == string2[i:i+len(string1)]:\n            return True\n    return False\n\n\ndef is_substring_2(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string1 in string2\n\n\ndef is_substring_3(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string2.startswith(string1)\n\n\ndef is_substring_4(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string2.endswith(string1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_substring_4(strings[i], strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if not is_substring_3(strings[i], strings[j]):\n                print(\"NO\")\n                exit()\n    print(\"YES\")\n    for s in strings:\n        print(s)"
    }
  ],
  "created": 1650402574,
  "id": "cmpl-4ypOI2J6yQlPHT478b3CXzsaecAV8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:10:19.106404 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\nstrings.sort()\n\nfor i in range(n-1):\n    if not strings[i] in strings[i+1]:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")\nprint(\"\\n\".join(strings))"
}
2022-04-19 21:10:19.106551 REASON stop
2022-04-19 21:10:19.108314 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    strings = []\n    for x in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n\n    for i in range(n):\n        for j in range(i):\n            if strings[i].find(strings[j]) != 0:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for s in strings:\n        print(s)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:10:19.108425 REASON stop
2022-04-19 21:10:19.108934 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nif n == 1:\n    print('YES')\n    print(s[0])\nelse:\n    s = sorted(s, key = len)\n    for i in range(n-1):\n        if s[i] not in s[i+1]:\n            print('NO')\n            break\n    else:\n        print('YES')\n        for i in s:\n            print(i)"
}
2022-04-19 21:10:19.109010 REASON stop
2022-04-19 21:10:19.129930 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    strings = [input() for _ in range(n)]\n    strings.sort(key=lambda s: len(s), reverse=True)\n    for i in range(1, n):\n        if not strings[i].startswith(strings[i - 1]):\n            return print(\"NO\")\n    print(\"YES\")\n    print(\"\\n\".join(strings))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:10:19.130049 REASON stop
2022-04-19 21:10:19.147251 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Solution\n\ndef solve(n, arr):\n    arr.sort(key=len)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] not in arr[j]:\n                return 'NO'\n    return 'YES\\n' + '\\n'.join(arr)\n\n\nn = int(input())\narr = [input() for _ in range(n)]\nprint(solve(n, arr))"
}
2022-04-19 21:10:19.147394 REASON stop
2022-04-19 21:10:19.148426 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\nn       = int(input())\nstrings = [input() for _ in range(n)]\n\n# sort strings by length\nstrings.sort(key=lambda x: len(x))\n\n# sort strings by lexicographical order\nstrings.sort()\n\n# check if strings can be reordered\nfor i in range(n - 1):\n    if strings[i] not in strings[i + 1]:\n        print(\"NO\")\n        quit()\n\nprint(\"YES\")\nprint(\"\\n\".join(strings))"
}
2022-04-19 21:10:19.148518 REASON stop
2022-04-19 21:10:19.153237 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = []\n    for _ in range(n):\n        s.append(input())\n    s.sort(key=len)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] not in s[j]:\n                print('NO')\n                return\n    print('YES')\n    for i in s:\n        print(i)\n\nmain()"
}
2022-04-19 21:10:19.153327 REASON stop
2022-04-19 21:10:19.158998 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# Solution 1\n# def is_substring(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     for i in range(len(string2) - len(string1) + 1):\n#         if string1 == string2[i:i+len(string1)]:\n#             return True\n#     return False\n#\n#\n# def is_substring_2(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     return string1 in string2\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     strings = []\n#     for _ in range(n):\n#         strings.append(input())\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if is_substring(strings[i], strings[j]):\n#                 strings[i], strings[j] = strings[j], strings[i]\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if not is_substring(strings[i], strings[j]):\n#                 print(\"NO\")\n#                 exit()\n#     print(\"YES\")\n#     for s in strings:\n#         print(s)\n\n# Solution 2\n# def is_substring(string1, string2):\n#     if len(string1) > len(string2):\n#         return False\n#     for i in range(len(string2) - len(string1) + 1):\n#         if string1 == string2[i:i+len(string1)]:\n#             return True\n#     return False\n#\n#\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     strings = []\n#     for _ in range(n):\n#         strings.append(input())\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if is_substring(strings[i], strings[j]):\n#                 strings[i], strings[j] = strings[j], strings[i]\n#\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             if not is_substring(strings[i], strings[j]):\n#                 print(\"NO\")\n#                 exit()\n#     print(\"YES\")\n#     for s in strings:\n#         print(s)\n\n# Solution 3\ndef is_substring(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    for i in range(len(string2) - len(string1) + 1):\n        if string1 == string2[i:i+len(string1)]:\n            return True\n    return False\n\n\ndef is_substring_2(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string1 in string2\n\n\ndef is_substring_3(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string2.startswith(string1)\n\n\ndef is_substring_4(string1, string2):\n    if len(string1) > len(string2):\n        return False\n    return string2.endswith(string1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_substring_4(strings[i], strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if not is_substring_3(strings[i], strings[j]):\n                print(\"NO\")\n                exit()\n    print(\"YES\")\n    for s in strings:\n        print(s)"
}
2022-04-19 21:10:19.159191 REASON stop
