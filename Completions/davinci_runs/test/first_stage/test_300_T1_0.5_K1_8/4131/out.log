2022-04-19 22:14:55.761932 """
In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.
City i is established in year Y_i and belongs to Prefecture P_i.
You can assume that there are no multiple cities that are established in the same year.
It is decided to allocate a 12-digit ID number to each city.
If City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.
Here, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.
Find the ID numbers for all the cities.
Note that there can be a prefecture with no cities.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - 1 \leq M \leq 10^5
 - 1 \leq P_i \leq N
 - 1 \leq Y_i \leq 10^9
 - Y_i are all different.
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M
P_1 Y_1
:
P_M Y_M

-----Output-----
Print the ID numbers for all the cities, in ascending order of indices (City 1, City 2, ...).

-----Sample Input-----
2 3
1 32
2 63
1 12

-----Sample Output-----
000001000002
000002000001
000001000001

 - As City 1 is the second established city among the cities that belong to Prefecture 1, its ID number is 000001000002.
 - As City 2 is the first established city among the cities that belong to Prefecture 2, its ID number is 000002000001.
 - As City 3 is the first established city among the cities that belong to Prefecture 1, its ID number is 000001000001.
"""
2022-04-19 22:14:55.761945 --------------------------
2022-04-19 22:14:55.762059 using api key derek
2022-04-19 22:15:31.635478 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\nN, M = map(int, input().split())\n\ncity_dict = defaultdict(list)\nfor i in range(M):\n    p, y = map(int, input().split())\n    city_dict[p].append(y)\n\nfor p, ys in city_dict.items():\n    ys.sort()\n\nfor i in range(M):\n    p, y = map(int, input().split())\n    print(\"{:06}{:06}\".format(p, city_dict[p].index(y)+1))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# N: number of prefectures\n# M: number of cities\n# P_i: prefecture number of city i\n# Y_i: year of establishment of city i\nN, M = map(int, input().split())\n\n# Dictionary to store the cities per prefecture\npref = {}\nfor i in range(M):\n    P, Y = map(int, input().split())\n    if P in pref:\n        pref[P].append(Y)\n    else:\n        pref[P] = [Y]\n\n# Sort the cities per prefecture\nfor i in pref:\n    pref[i].sort()\n\n# Print the result\nfor i in range(M):\n    P, Y = map(int, input().split())\n    print(\"{:06d}{:06d}\".format(P, pref[P].index(Y) + 1))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    prefectures = [[] for _ in range(n+1)]\n    for _ in range(m):\n        p, y = map(int, input().split())\n        prefectures[p].append(y)\n    for p in range(1, n+1):\n        prefectures[p].sort()\n        for i, year in enumerate(prefectures[p]):\n            print('{:0>6}{:0>6}'.format(p, i+1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\"\"\"\n\u89e3\u8aac\n\u30fb\u89e3\u8aac\u898b\u305f\n\u30fb\u554f\u984c\u6587\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u90fd\u5e02i\u306f\u90fd\u9053\u5e9c\u770cP_i\u306b\u5c5e\u3057\u3001\u305d\u306e\u90fd\u9053\u5e9c\u770c\u306e\u4e2d\u3067\u7b2cx\u756a\u76ee\u306b\u8a2d\u7acb\u3055\u308c\u305f\u90fd\u5e02\u3068\u3044\u3046\u3053\u3068\u3002\n\u3000\u3064\u307e\u308a\u3001\u90fd\u9053\u5e9c\u770cP_i\u3067\u3001\u7b2cx\u756a\u76ee\u306b\u8a2d\u7acb\u3055\u308c\u305f\u90fd\u5e02i\u306b\u5bfe\u3057\u3066\u3001\u90fd\u9053\u5e9c\u770cP_i\u306eID\u3068\u3001x\u306eID\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u30fb\u305d\u308c\u305e\u308c\u306e\u90fd\u9053\u5e9c\u770c\u3067\u3001\u8a2d\u7acb\u3055\u308c\u305f\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u8a2d\u7acb\u9806\u306bID\u3092\u3064\u3051\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\u30fb\u8a2d\u7acb\u3055\u308c\u305f\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u306e\u306f\u3001\u8a2d\u7acb\u5e74Y_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u540c\u3058\u8a2d\u7acb\u5e74\u306e\u90fd\u5e02\u306f\u90fd\u9053\u5e9c\u770cP_i\u3067\u30bd\u30fc\u30c8\u3059\u308c\u3070\u3044\u3044\u3002\n\u30fb\u3053\u308c\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u8a2d\u7acb\u5e74Y_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u90fd\u9053\u5e9c\u770cP_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u305d\u308c\u3092\u90fd\u9053\u5e9c\u770c\u306e\u305d\u308c\u305e\u308c\u306e\u90fd\u5e02\u306e\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u304f\u3002\n\u30fb\u90fd\u9053\u5e9c\u770c\u306e\u305d\u308c\u305e\u308c\u306e\u90fd\u5e02\u306e\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u306e\u306f\u3001\u8a2d\u7acb\u9806\u306bID\u3092\u3064\u3051\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\u30fb\u305d\u308c\u305e\u308c\u306e\u90fd\u9053\u5e9c\u770c\u306e\u90fd\u5e02\u3092\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u304f\u306e\u306f\u3001\u8f9e\u66f8\u578b\u3067\u5b9f\u88c5\u3057\u305f\u3002\n\u30fb\u3053\u308c\u3067O(MlogM)\u3067\u7d42\u308f\u308b\u3002\n\"\"\"\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    cities = []\n    for i in range(M):\n        P, Y = map(int, input().split())\n        cities.append((P, Y, i))\n    cities.sort(key=lambda x:(x[0], x[1]))\n    dic = {}\n    for city in cities:\n        if city[0] not in dic:\n            dic[city[0]] = []\n        dic[city[0]].append(city)\n    for i in range(M):\n        P = cities[i][0]\n        Y = cities[i][1]\n        idx = dic[P].index((P, Y, cities[i][2]))\n        print(\"{0:06}{1:06}\".format(P, idx+1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nprefecture = [[] for _ in range(n + 1)]\nfor i in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    prefecture[p].append(y)\n\nfor i in range(n + 1):\n    prefecture[i].sort()\n\nfor i in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    id = str(p).zfill(6) + str(prefecture[p].index(y) + 1).zfill(6)\n    print(id)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\n\nyear_to_prefecture = {}\nfor i in range(M):\n    P, Y = map(int, input().split())\n    if Y in year_to_prefecture:\n        year_to_prefecture[Y].append(P)\n    else:\n        year_to_prefecture[Y] = [P]\n\nyear_list = sorted(list(year_to_prefecture.keys()))\n\nprefecture_to_city_num = {}\nfor year in year_list:\n    for prefecture in year_to_prefecture[year]:\n        if prefecture in prefecture_to_city_num:\n            prefecture_to_city_num[prefecture] += 1\n        else:\n            prefecture_to_city_num[prefecture] = 1\n\nfor year in year_list:\n    for prefecture in year_to_prefecture[year]:\n        print(str(prefecture).zfill(6) + str(prefecture_to_city_num[prefecture]).zfill(6))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\nprefectures = [0] * (N + 1)\ncities = []\nfor i in range(M):\n    p, y = map(int, input().split())\n    prefectures[p] += 1\n    cities.append([p, y, i])\n\nfor i in range(1, N + 1):\n    prefectures[i] += prefectures[i - 1]\n\ncities.sort(key=lambda x: (x[0], x[1]))\n\nfor i in range(M):\n    p, y, index = cities[i]\n    prefecture = str(p).zfill(6)\n    city = str(prefectures[p]).zfill(6)\n    print(prefecture + city)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# \u5165\u529b\nN, M = map(int, input().split())\nP = []\nY = []\nfor _ in range(M):\n    p, y = map(int, input().split())\n    P.append(p)\n    Y.append(y)\n\n# \u51fa\u529b\nfor i in range(M):\n    p = P[i]\n    y = Y[i]\n    print('{:0=6d}{:0=6d}'.format(p, Y.count(y)))"
    }
  ],
  "created": 1650406495,
  "id": "cmpl-4yqPXhj7JRyZkia3Kwm3OdNVsZNjk",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:15:31.635931 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom collections import defaultdict\n\nN, M = map(int, input().split())\n\ncity_dict = defaultdict(list)\nfor i in range(M):\n    p, y = map(int, input().split())\n    city_dict[p].append(y)\n\nfor p, ys in city_dict.items():\n    ys.sort()\n\nfor i in range(M):\n    p, y = map(int, input().split())\n    print(\"{:06}{:06}\".format(p, city_dict[p].index(y)+1))"
}
2022-04-19 22:15:31.635979 REASON stop
2022-04-19 22:15:31.798961 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# N: number of prefectures\n# M: number of cities\n# P_i: prefecture number of city i\n# Y_i: year of establishment of city i\nN, M = map(int, input().split())\n\n# Dictionary to store the cities per prefecture\npref = {}\nfor i in range(M):\n    P, Y = map(int, input().split())\n    if P in pref:\n        pref[P].append(Y)\n    else:\n        pref[P] = [Y]\n\n# Sort the cities per prefecture\nfor i in pref:\n    pref[i].sort()\n\n# Print the result\nfor i in range(M):\n    P, Y = map(int, input().split())\n    print(\"{:06d}{:06d}\".format(P, pref[P].index(Y) + 1))"
}
2022-04-19 22:15:31.799141 REASON stop
2022-04-19 22:15:32.037747 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    prefectures = [[] for _ in range(n+1)]\n    for _ in range(m):\n        p, y = map(int, input().split())\n        prefectures[p].append(y)\n    for p in range(1, n+1):\n        prefectures[p].sort()\n        for i, year in enumerate(prefectures[p]):\n            print('{:0>6}{:0>6}'.format(p, i+1))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:15:32.037908 REASON stop
2022-04-19 22:15:32.376400 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\"\"\"\n\u89e3\u8aac\n\u30fb\u89e3\u8aac\u898b\u305f\n\u30fb\u554f\u984c\u6587\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u90fd\u5e02i\u306f\u90fd\u9053\u5e9c\u770cP_i\u306b\u5c5e\u3057\u3001\u305d\u306e\u90fd\u9053\u5e9c\u770c\u306e\u4e2d\u3067\u7b2cx\u756a\u76ee\u306b\u8a2d\u7acb\u3055\u308c\u305f\u90fd\u5e02\u3068\u3044\u3046\u3053\u3068\u3002\n\u3000\u3064\u307e\u308a\u3001\u90fd\u9053\u5e9c\u770cP_i\u3067\u3001\u7b2cx\u756a\u76ee\u306b\u8a2d\u7acb\u3055\u308c\u305f\u90fd\u5e02i\u306b\u5bfe\u3057\u3066\u3001\u90fd\u9053\u5e9c\u770cP_i\u306eID\u3068\u3001x\u306eID\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u30fb\u305d\u308c\u305e\u308c\u306e\u90fd\u9053\u5e9c\u770c\u3067\u3001\u8a2d\u7acb\u3055\u308c\u305f\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u8a2d\u7acb\u9806\u306bID\u3092\u3064\u3051\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\u30fb\u8a2d\u7acb\u3055\u308c\u305f\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u306e\u306f\u3001\u8a2d\u7acb\u5e74Y_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u540c\u3058\u8a2d\u7acb\u5e74\u306e\u90fd\u5e02\u306f\u90fd\u9053\u5e9c\u770cP_i\u3067\u30bd\u30fc\u30c8\u3059\u308c\u3070\u3044\u3044\u3002\n\u30fb\u3053\u308c\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u8a2d\u7acb\u5e74Y_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u90fd\u9053\u5e9c\u770cP_i\u3067\u30bd\u30fc\u30c8\u3057\u3066\u3001\u305d\u308c\u3092\u90fd\u9053\u5e9c\u770c\u306e\u305d\u308c\u305e\u308c\u306e\u90fd\u5e02\u306e\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u304f\u3002\n\u30fb\u90fd\u9053\u5e9c\u770c\u306e\u305d\u308c\u305e\u308c\u306e\u90fd\u5e02\u306e\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u306e\u306f\u3001\u8a2d\u7acb\u9806\u306bID\u3092\u3064\u3051\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\u30fb\u305d\u308c\u305e\u308c\u306e\u90fd\u9053\u5e9c\u770c\u306e\u90fd\u5e02\u3092\u8a2d\u7acb\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u304f\u306e\u306f\u3001\u8f9e\u66f8\u578b\u3067\u5b9f\u88c5\u3057\u305f\u3002\n\u30fb\u3053\u308c\u3067O(MlogM)\u3067\u7d42\u308f\u308b\u3002\n\"\"\"\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    cities = []\n    for i in range(M):\n        P, Y = map(int, input().split())\n        cities.append((P, Y, i))\n    cities.sort(key=lambda x:(x[0], x[1]))\n    dic = {}\n    for city in cities:\n        if city[0] not in dic:\n            dic[city[0]] = []\n        dic[city[0]].append(city)\n    for i in range(M):\n        P = cities[i][0]\n        Y = cities[i][1]\n        idx = dic[P].index((P, Y, cities[i][2]))\n        print(\"{0:06}{1:06}\".format(P, idx+1))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:15:32.376560 REASON stop
2022-04-19 22:15:32.632378 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nprefecture = [[] for _ in range(n + 1)]\nfor i in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    prefecture[p].append(y)\n\nfor i in range(n + 1):\n    prefecture[i].sort()\n\nfor i in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    id = str(p).zfill(6) + str(prefecture[p].index(y) + 1).zfill(6)\n    print(id)"
}
2022-04-19 22:15:32.632545 REASON stop
2022-04-19 22:15:32.984745 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\n\nyear_to_prefecture = {}\nfor i in range(M):\n    P, Y = map(int, input().split())\n    if Y in year_to_prefecture:\n        year_to_prefecture[Y].append(P)\n    else:\n        year_to_prefecture[Y] = [P]\n\nyear_list = sorted(list(year_to_prefecture.keys()))\n\nprefecture_to_city_num = {}\nfor year in year_list:\n    for prefecture in year_to_prefecture[year]:\n        if prefecture in prefecture_to_city_num:\n            prefecture_to_city_num[prefecture] += 1\n        else:\n            prefecture_to_city_num[prefecture] = 1\n\nfor year in year_list:\n    for prefecture in year_to_prefecture[year]:\n        print(str(prefecture).zfill(6) + str(prefecture_to_city_num[prefecture]).zfill(6))"
}
2022-04-19 22:15:32.984945 REASON stop
2022-04-19 22:15:33.374298 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\nprefectures = [0] * (N + 1)\ncities = []\nfor i in range(M):\n    p, y = map(int, input().split())\n    prefectures[p] += 1\n    cities.append([p, y, i])\n\nfor i in range(1, N + 1):\n    prefectures[i] += prefectures[i - 1]\n\ncities.sort(key=lambda x: (x[0], x[1]))\n\nfor i in range(M):\n    p, y, index = cities[i]\n    prefecture = str(p).zfill(6)\n    city = str(prefectures[p]).zfill(6)\n    print(prefecture + city)"
}
2022-04-19 22:15:33.374464 REASON stop
2022-04-19 22:15:33.696140 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# \u5165\u529b\nN, M = map(int, input().split())\nP = []\nY = []\nfor _ in range(M):\n    p, y = map(int, input().split())\n    P.append(p)\n    Y.append(y)\n\n# \u51fa\u529b\nfor i in range(M):\n    p = P[i]\n    y = Y[i]\n    print('{:0=6d}{:0=6d}'.format(p, Y.count(y)))"
}
2022-04-19 22:15:33.696423 REASON stop
