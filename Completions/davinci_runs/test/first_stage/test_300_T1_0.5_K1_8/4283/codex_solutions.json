["\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\n# O(n^2) solution\n# def check(x):\n#     for i in range(n - 1):\n#         for j in range(i + 1, n):\n#             if abs(a[i] - a[j]) <= x:\n#                 return True\n#     return False\n\n# l = 0\n# r = 10**9\n# while l < r:\n#     m = (l + r) // 2\n#     if check(m):\n#         l = m + 1\n#     else:\n#         r = m\n# print(l - 1)\n\n# O(n) solution\ncnt = 0\nfor i in range(1, n):\n    if abs(a[i] - a[i - 1]) <= 5:\n        cnt += 1\nprint(cnt + 1)", "\n\n#----------------------------------------------------------------------------------\n\n\"\"\"\n    Approach:\n    1. Sort the skills\n    2. Iterate over the skills\n        - If the difference between the current skill and the previous skill is less than 5, increment the count\n        - Else, update the max_count\n\"\"\"\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n\n    prev_skill = skills[0]\n    count = 1\n    max_count = 1\n\n    for i in range(1, n):\n        if skills[i] - prev_skill <= 5:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n        prev_skill = skills[i]\n\n    max_count = max(max_count, count)\n\n    print(max_count)\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n = int(input())\n    a = input().split()\n    a = [int(x) for x in a]\n    a.sort()\n    max_count = 0\n    i = 0\n    while i < n:\n        count = 1\n        j = i + 1\n        while j < n and a[j] <= a[i] + 5:\n            count += 1\n            j += 1\n        if count > max_count:\n            max_count = count\n        i += 1\n    print(max_count)\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmax_size = 0\n\nfor i in range(n-1):\n    if a[i+1] - a[i] > 5:\n        continue\n    else:\n        curr_size = 2\n        for j in range(i+1, n-1):\n            if a[j+1] - a[j] > 5:\n                break\n            else:\n                curr_size += 1\n        if curr_size > max_size:\n            max_size = curr_size\n\nprint(max_size)", "\n\nimport sys\n\ndef main():\n    num_students = int(sys.stdin.readline())\n    skills = [int(x) for x in sys.stdin.readline().split()]\n    skills.sort()\n\n    i = 0\n    j = 0\n    max_team_size = 0\n    while i < num_students:\n        while j < num_students and skills[j] - skills[i] <= 5:\n            j += 1\n        max_team_size = max(max_team_size, j - i)\n        i += 1\n\n    print(max_team_size)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sort the array and create a dictionary of the number of elements at each skill level\na.sort()\ncounts = {}\nfor num in a:\n    if num not in counts:\n        counts[num] = 1\n    else:\n        counts[num] += 1\n\n# iterate through the skill levels and find the highest number of elements that could be in a team\nmax_count = 0\nfor skill in counts:\n    count = 0\n    for sub_skill in range(skill - 5, skill + 6):\n        if sub_skill in counts:\n            count += counts[sub_skill]\n    max_count = max(max_count, count)\n\nprint(max_count)", "\n\ndef solve():\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    ans = 1\n    for i in range(1, n):\n        if a[i] - a[i-1] <= 5:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nsolve()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    a.sort()\n\n    # print(n, a)\n\n    t = {}\n    for i in a:\n        if i not in t:\n            t[i] = 1\n        else:\n            t[i] += 1\n    # print(t)\n\n    max_len = 0\n    for key in t:\n        cur_len = 0\n        for i in range(-5, 6):\n            if key + i in t:\n                cur_len += t[key + i]\n        # print(key, cur_len)\n        if cur_len > max_len:\n            max_len = cur_len\n\n    print(max_len)\n\n\nif __name__ == '__main__':\n    main()"]