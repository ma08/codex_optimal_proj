["from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\n\nif n == 0:\n    print(0)\n    return\n\nans = deque()\ni = 0\nwhile n != 0:\n    tmp = ( n % 2**(i+1) ) // 2**i\n    ans.appendleft(tmp)\n    n -= tmp * (-2)**i\n    i += 1\nprint(*list(ans),sep=\"\")", "N = int(input())\n\ns = \"\"\n\nwhile N != 0:\n    # Python\u3067\u306f\u8ca0\u306e\u6570\u3092\u5272\u3063\u3066\u3082\u4f59\u308a\u304c\u6b63\u306b\u306a\u308b\n    # -2\u3067\u5272\u3063\u305f\u3068\u304d\u306e\"\u7406\u60f3\u7684\u306a\"\u4f59\u308a(0or1\u306b\u306a\u3063\u3066\u304f\u308c\u308b)\u306f2\u3067\u5272\u3063\u305f\u4f59\u308a\u3068\u540c\u3058\n    r = int(N % 2)\n    # \u3053\u3053\u306f-2\n    N = (N - r) / (-2)\n    s += str(int(r))\n\n# N=0\u306e\u6642\u306f\u304b\u3089\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304d\u3066\u3057\u307e\u3046\nif s == \"\":\n    print((0))\n    return\nelse:\n    # reverse\n    print((s[::-1]))\n", "n = int(input())\n#a, b = map(int,input().split())\n#l = list(map(int,input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n\nansl = []\nif n != 0:\n    while abs(n) > 0:\n        if n % 2 == 0:\n            ansl.append(\"0\")\n            n = n//(-2)\n        else:\n            ansl.append(\"1\")\n            n = (n-1)//(-2)\n    print((''.join(ansl[::-1])))\nelse:\n    print((0))\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, log2\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN = INT()\n\nif N == 0:\n\tprint(0)\n\treturn\n\nlim = 32\ntop = [0]*(lim+1)\nbottom = [0]*(lim+1)\n\nfor i in range(1, lim+1):\n\tif i%2:\n\t\tt = (i+1)//2\n\t\ttop[i] = (4**t-1)//3\n\t\tbottom[i] = bottom[i-1]\n\telse:\n\t\tb = i//2\n\t\tbottom[i] = (4**b-1)*2//3\n\t\ttop[i] = top[i-1]\n\ndigit = [0]*(lim+1)\nfor i in range(1, lim+1):\n\tdigit[i] = (-2)**(i-1)\n\nif 0 <= N:\n\tidx = bisect_left(top, N)\nelse:\n\tidx = bisect_left(bottom, -N)\n\nans = \"\"\nfor i in range(idx, 0, -1):\n\tif -bottom[i-1] <= N <= top[i-1]:\n\t\tans += \"0\"\n\telse:\n\t\tans += \"1\"\n\t\tN -= digit[i]\n\nprint(ans)", "N = int(input())\n\nif N==0:\n    print((0))\n    return\n\nans = ''\nwhile N:\n    if N%2:\n        N -= 1\n        ans += '1'\n    else:\n        ans += '0'\n    N //= -2\n\nprint((ans[::-1]))\n", "N = int(input())\n\nmax_digit = 34\n\nbits = [0]*max_digit\nsign = N > 0\nif N < 0: N = - N\n\nfor i in range(N.bit_length()):\n    if (N >> i) & 1:\n        if i & 1 == sign:\n            bits[i] += 1\n            bits[i + 1] += 1\n        else:\n            bits[i] += 1\n\nfor i in range(max_digit):\n    if bits[i] == 2:\n        if bits[i + 1] == 1:\n            bits[i] = 0\n            bits[i + 1] = 0\n        else:\n            bits[i] = 0\n            bits[i + 1] += 1\n            bits[i + 2] += 1\n\nres = ''\nflg = False\nfor i in reversed(range(max_digit)):\n    if not flg and bits[i] == 1:\n        flg = True\n        res += '1'\n    elif flg:\n        res += str(bits[i])\n\nif res == '': res = '0'\n\nprint(res)", "n = int(input())\n\nif n == 0:\n    print(0)\n    return\n\nans = []\nwhile n != 0:\n    ans.append(n % 2)\n    n = - (n // 2)\nprint(''.join(map(str, reversed(ans))))", "N = int(input())\nif N == 0:\n    s = '0'\nelse:\n    s = ''\nwhile N != 0:\n    m = N%2\n    s += str(m)\n    N = (N - m)*(-1)//2\nprint(s[::-1])", "n = int(input())\n\ns = ''\nwhile(n != 0):\n    s = str(n % 2)+s\n    n = -(n//2)\nprint((0 if(s == \"\") else s))\n", "def mod(n):\n    if n > 0:\n        return -(n//2), n%2\n    elif n < 0:\n        return (-n+1)//2 ,(-n)%2\n    else:\n        return 0,0\n    \ndef main():\n    N = int( input())\n    if N == 0:\n        print((0))\n        return\n    ANS = []\n    while N != 0:\n        N, b = mod(N)\n        ANS.append(b)\n    print((\"\".join( map( str, ANS[::-1]))))\n        \ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nS = \"\"\nwhile N!=0:\n  if N&1:\n    S = \"1\"+S\n    N = (N-1)//(-2)\n  else:\n    S = \"0\"+S\n    N = N//(-2)\nprint(0 if S==\"\" else S)", "n=int(input())\nif n==0:\n    print(0)\n    return\nans=\"\"\nwhile n!=0:\n    r=n%-2\n    if r<0:\n        r+=2\n    ans+=str(r)\n    n=(n-r)//(-2)\nprint(ans[::-1])", "N = int(input())\n \nif N == 0:\n    print(0)\n    return\nans = []\nwhile N:\n    ans.append(N % 2)\n    N = N // 2\n    N *= -1\nprint(\"\".join(map(str, ans[::-1])))", "N = int(input())\ndef solve(N):\n    if N == 0:\n        return '0'\n    ans = ''\n    while N != 0:\n        ans += str(N & 1)\n        N >>= 1\n        N *= -1\n    return ans[::-1]\nprint(solve(N))", "# \u89e3\u8aac\u3068\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# https://atcoder.jp/contests/abc105/submissions/17007379\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\nimport math\n\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N):\n    if N == 0:\n        print('0')\n        return\n\n    ans = ''\n    while N != 0:\n        # 1\u6841\u76ee\u304c 1 or 0 \u304b\u306fN\u304c\u5947\u6570\u304b\u5076\u6570\u304b\u306b\u3088\u3063\u3066\u306e\u307f\u6c7a\u307e\u308b.\n        #  \u2192 2 \u3067\u5272\u3063\u305f\u4f59\u308a\u304b\u3089 1 or 0 \u3092\u6c7a\u5b9a\u3059\u308b.\n        m = N % 2\n        ans = str(m) + ans\n        # 1\u6841\u76ee\u306e\u60c5\u5831\u3092\u53d6\u308a\u9664\u3044\u3066(\u5076\u6570\u306b\u3057\u3066)\u53f3\u30b7\u30d5\u30c8\u3057, \u6b21\u306e\u6841\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u78ba\u8a8d\u3057\u3066\u3044\u304f.\n        # \u3053\u306e\u6642, 2(,4,6,...)\u6841\u76ee\u306f\u8ca0\u306e\u8981\u7d20\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067, 1\u6841\u76ee(1 or 0)\u3068\u3057\u3066\u5224\u5b9a\u3059\u308b\u305f\u3081\u306b\u6b63\u8ca0\u3092\u53cd\u8ee2\u3055\u305b\u308b.\n        N = (N - m) * (-1) >> 1\n    print(ans)\n\n\ndef __starting_point():\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "import itertools\nN = int(input())\n\nif N == 0:\n    print(0)\n    return\nans = []\nwhile N !=0:\n    ans.append(N%2)\n    N = -(N-N%2)//2\nans.reverse()\nprint(\"\".join(list(map(str,ans))))", "n = int(input())\n\ns = ''\nwhile True:\n    if n % 2 == 0:\n        s = '0' + s\n        n = n // -2\n    else:\n        s = '1' + s\n        n = (n - 1) // -2\n    if n == 0:\n        break\nprint(s)\n\n", "N=int(input())\nif N==0:\n  print(0)\n  return\nif N>0:\n  S=bin(N)[2:]\n  S=list(S[::-1])\n  S=list(map(int,S))\n  S+=[0]*1000\n  i=0\n  while True:\n    S[i+1]+=S[i]//2\n    S[i]=S[i]%2\n    if i%2==1:\n      S[i+1]=S[i+1]+S[i]\n    i+=1\n    if i==len(S)-1:\n      break\n  S=list(map(str,S))\n  S=list(reversed(S))\n  S=\"\".join(S)\n  print(int(S))\nelse:\n  N=abs(N)\n  S=bin(N)[2:]\n  S=list(S[::-1])\n  S=list(map(int,S))\n  S+=[0]*1000\n  i=0\n  while True:\n    S[i+1]+=S[i]//2\n    S[i]=S[i]%2\n    if i%2==0:\n      S[i+1]=S[i+1]+S[i]\n    i+=1\n    if i==len(S)-1:\n      break\n  S=list(map(str,S))\n  S=list(reversed(S))\n  S=\"\".join(S)\n  print(int(S))", "n=int(input())\nif n==0:\n    print(0)\n    return\nans=\"\"\nwhile n!=0:\n    r=n%2\n    ans+=str(r)\n    n=(n-r)//(-2)\nprint(ans[::-1])", "N = int(input())\n\nans = \"\"\n\nif N == 0:\n    print(0)\n    return\n\nwhile N != 0:\n    a, b = divmod(N, 2)\n    ans = str(b) + ans\n    N = -a\n\nprint(ans)", "s=\"\"\nn=int(input())\nif n==0:print(0)\nelse:\n while n!=0:s=str(n%2)+s;n=-(n//2)\n print(s)", "N  = int(input())\nif N == 0:\n    print((0))\nelse:\n    ans = \"\"\n    while N != 0:\n        if N%2 == 1:\n            ans += \"1\"\n            N -= 1\n        else:\n            ans += \"0\"\n        N //= -2\n    print((ans[::-1]))\n    # tmp = [1*(i==0) for i in ans][::-1]\n    # print(\"\".join(map(str, tmp)))\n", "N=int(input())\n\nif N >= 0:\n  n = N\n  i = 0\n  while 1:\n    b = bin(n)[2:]\n    if i >= len(b):\n      break\n    if i % 2 == 1 and b[-i-1]=='1':\n      n += 2**(i+1)\n    i += 1\n  print(bin(n)[2:])\n  \nelse:\n  n = -N\n  i = 0\n  while 1:\n    b = bin(n)[2:]\n    if i >= len(b):\n      break\n    if i % 2 == 0 and b[-i-1]=='1':\n      n += 2**(i+1)\n    i += 1\n  print(bin(n)[2:])", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[6]:\n\n\nN = int(input())\n\n\n# In[7]:\n\n\na = \"\"\nif N == 0:\n    a = 0\nwhile N != 0:\n    if N%2 != 0:\n        N -= 1\n        a = \"1\" + a\n    else:\n        a = \"0\" + a\n    N //= -2\nprint(a)\n\n\n# In[ ]:\n\n\n\n\n", "N = int(input())\nans = []\nwhile N != 0:\n    r = N % 2\n    N = (N - r) // (-2)\n    ans += [r]\nprint((''.join(map(str, ans[::-1])) if ans else 0))\n", "def mod(i,j):\n    if i%j == 0:\n        return [str(0), i//j]\n    else:\n        return [str(-(i%j)),(i//j)+1]\n\nn = int(input())\nw = \"\"\nif n == 0:\n    w = 0\nelse:\n    while n != 0:\n        i,j = mod(n,-2)\n        w = i + w\n        n = j\nprint(w)", "n=int(input())\nif n==0:\n    print(0)\n    return\nans=\"\"\nwhile n!=0:\n    r=n%2\n    if r<0:\n        r+=2\n    ans+=str(r)\n    n=(n-r)//(-2)\nprint(ans[::-1])", "N=int(input())\nans=''\nwhile 1:\n    ans+=str(N%2)\n    if N in [0,1]:\n        break\n    N=0-N//2\nprint(ans[::-1])", "N = int(input())\n\ndef minus_binary(n, S: str):\n    if n == 0:\n        if S == \"\":\n            S = \"0\"\n        return S\n    \n    if n == 1:\n        S = \"1\" + S\n        return minus_binary(0, S)\n\n    else:\n        if n%2 == 1:\n            n -= 1\n            S = \"1\" + S\n        else:\n            S = \"0\" + S\n\n        return minus_binary(n/(-2), S)\n\nS = \"\"\nprint(minus_binary(N, S))", "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\n# def input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\nimport string\n# string.ascii_lowercase\nfrom bisect import bisect_left\nMOD = int(1e9)+7\nINF = float('inf')\n\n\ndef solve():\n    # n, m = [int(x) for x in input().split()]\n    # n, m = [int(x) for x in input().split()]\n    n = -int(input())\n    if n == 0:\n        print((0))\n        return\n    ans = []\n    while n != 0:\n        n, m = divmod(n, -2)\n        ans.append(-m)\n\n    ans.reverse()\n    print((''.join([str(x) for x in ans])))\n\n        \n\n\nt = 1\n# t = int(input())\nfor case in range(1,t+1):\n    ans = solve()\n\n\n\"\"\"\n\n\"\"\"\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nif n == 0:\n    print((0))\n    return\nans = []\nwhile(n != 0):\n\n    rem = n % 2\n\n    n = (n-rem)//(-2)\n\n    ans.append(rem)\n\nans.reverse()\n\nprint((\"\".join(map(str, ans))))\n", "N = int(input())\n \ndef base(x, n):\n  ret = []\n  while x != 0:\n    ret.append( x % abs(n))\n    if n < 0:\n      x = - ( (-x)//n )\n    else:\n      x //= n\n  return ret\n \nif N == 0:\n  print(0)\nelse:\n  print(\"\".join(map(str, reversed(base(N, -2)))))", "N = int(input())\nans = []\nif N == 0:\n    print((0))\nelse:\n    while N:\n        ans.append(N % 2)\n        N = -(N // 2)\n    print((\"\".join(map(str, ans[::-1]))))\n", "N = int(input())\nif N == 0:\n    s = '0'\nelse:\n    s = ''\nwhile N != 0:\n    m = N%2\n    s += str(m)\n    N = (N - m)*(-1)//2\nprint(s[::-1])", "N=int(input())\n# 1011: -9\n# 101  1 + 4 =5\n# 10: -2\n# 1\n\ndef calc(x):\n    ans=\"\"\n    \n    while True:\n\n        if x%2==0:\n            ans=\"0\"+ans\n        else:\n            ans=\"1\"+ans\n            x-=1\n        if x==0:\n            break\n\n        x = x//(-2)\n    return ans\n\na=calc(N)\n\nprint(a)        ", "N = int(input())\nif N == 0:\n    print('0')\n    return\n\nans = ''\nwhile abs(N) > 0:\n    if abs(N) % 2 == 0:\n        ans += '0'\n        N //= 2\n    else:\n        N -= 1\n        N //= 2\n        ans += '1'\n    N *= -1\nprint((ans[::-1]))\n", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n\n    if N == 0:\n        ans = \"0\"\n    else:\n        ans = \"\"\n        while N != 0:\n            q, r = divmod(N, -2)\n            if r == 0:\n                ans = \"\".join([\"0\", ans])\n            else:\n                ans = \"\".join([\"1\", ans])\n            r = r + 2 if r < 0 else r\n            N = (N - r) // -2\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nif n == 0:\n    print(0)\n    return\nd = []\nwhile n != 0:\n    p = n % 2\n    d.append(p)\n    n = (n - p) * (-1) // 2\nfor u in reversed(d):\n    print(u, end='')\nprint()\n", "n = int(input())\nif n == 0:\n  print(0)\n  return\nans = []\nwhile n>0 or n<0:\n  if n == 0:\n    break\n  else:\n    if n%2==0:\n      ans.append(0)\n      n = n//(-2)\n    else:\n      ans.append(1)\n      n = (n-1)//(-2)\n    \nprint(*ans[::-1], sep='')", "def main():\n    n = int(input())\n    s = []\n    if n==0:\n        print((0))\n        return\n    while n!=1:\n        if n%(-2)==-1:\n            n = n//(-2)+1\n            s.append(1)\n        else:\n            s.append(0)\n            n = n//(-2)\n    s.append(n)\n    s.reverse()\n    print((''.join([str(x) for x in s])))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nN = n\n\nans = \"\"\n\nwhile n != 0:\n    if n % 2 == 1:\n        ans += \"1\"\n        n = n - 1\n        n //= -2\n    else:\n        ans += \"0\"\n        n //= -2\n\nprint(ans[::-1] if N != 0 else 0)", "def main():\n\timport math\n\tN = int(input())\n\tn = math.ceil(math.log(100000000000, 4)) # toriaezu BIG ENOUGH na number\n\tM = int('10' * n, 2)\n\tB = format(N + M, 'b')\n\tprint(even_toggle(B))\n\ndef even_toggle(b):\n\tr = []\n\tfor i in range(len(b)):\n\t\tif i % 2 == 0:\n\t\t\tr.insert(0, b[-i-1])\n\t\telse:\n\t\t\tr.insert(0, str(1 - int(b[-i-1])))\n\thead_zeroes = 0\n\tfor i in range(len(r)):\n\t\tif r[i] == \"0\":\n\t\t\thead_zeroes += 1\n\t\telse:\n\t\t\tbreak\n\treturn \"\".join(r[head_zeroes:]) or \"0\"\n\nmain()", "import math\nimport sys\npin=sys.stdin.readline\n\ndef main():\n  N=int(pin())\n  ansl=[]\n  if N==0:\n    print(0)\n    return\n  while True:\n    if N==0:\n      break\n    ansl.append(N%2)\n    N=-(N//2)\n  ans=\"\".join(map(str,ansl))\n  ans=ans[::-1]\n  print(ans)\n  return\nmain()", "N = int(input())\na = \"\"\nif N == 0:\n    a = 0\nwhile N != 0:\n    if N % 2 != 0:\n        N -= 1\n        a = \"1\" + a\n    else:\n        a = \"0\" + a\n    N = N // -2\nprint(a)\n", "import math\nN = int(input())\n\nans = \"\"\nif N == 1:\n    print(\"1\") \nelif N == 0:\n    print(\"0\")  \nelif N == -1:\n    print(\"10\")\nelse:\n    while True:\n        r = N % 2\n        N = (N-r) /-2\n        ans = str(int(r)) + ans\n        if N == 0 or N == 1:\n            ans = str(int(N)) + ans\n            break\n\n    print(ans)", "import math\nN = int(input())\nif N == 0:\n  print(0)\n  return\np = int(math.log2(abs(N))) + 1\nans = [0] * (p + 10)\nnow = 0\nfor i in range(p + 10):\n  x = N % (2 ** (i + 1))\n  y = (now + ((-1) ** i) * (2 ** i) ) % (2 ** (i + 1))\n  if (y == x) or (y + 2 ** (i + 1) == x):\n    now += ((-1) ** i) * (2 ** i)\n    ans[i] = 1\n  if now == N:\n    break\n  #print(now, ans, x, y)\n\n#print(\"n\", now, ans, x, y)\np = 0\nfor i in range(1, len(ans) + 1):\n  if p == 0:\n    if ans[-i] != 0:\n      p = 1\n      print(ans[-i], end = \"\")\n  else:\n    print(ans[-i], end = \"\")\n\nprint(\"\")\n\n", "#!/usr/bin/env python\n\nn = int(input())\n\nif n == 0:\n    print((0))\n    return\n\nans = ''\nwhile abs(n) > 0:\n    r = n%2 \n    ans = str(r) + ans \n    \n    if r == 1:\n        n -= 1\n    n //= (-2)\n\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\n#from itertools import accumulate #list(accumulate(A))\n\nN = ii()\nans = ''\n\ndef div(a, b=-2):\n    if a >= 0:\n        return -(a//(-b)), a%(-b)\n    else:\n        if (-a)%(-b) == 0:\n            return (-a)//(-b), 0\n        else:\n            return (-a)//(-b)+1, 1\n\nwhile True:\n    N, m = div(N)\n    ans += str(m)\n    if abs(N) < 2:\n        break\n\nif N == -1:\n    ans += '11'\nelif N == 1:\n    ans += '1'\n\nprint(ans[::-1])", "N = int(input())\nif N==0:\n    print(0)\n    return\n\nans = ''\nwhile N!=1:\n    d = N%2\n    ans += str(d)\n    N -= d\n    N //= -2\nans += '1'\nprint(ans[::-1])", "N=int(input())\n\nb=-2\ntemp=N\nans=\"\"\nwhile True:\n    if temp%b!=0:\n        ans=\"1\"+ans\n        temp=temp-(b//(-2))\n    else:\n        ans=\"0\"+ans\n    b=b*(-2)\n    if temp==0:break\n\nprint(ans)\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\nimport math\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N):\n    if N == 0:\n        print('0')\n        return\n    x = math.ceil(math.log2(abs(N))) + 1\n    minus = [(-2) ** i for i in range(1, x + 1, 2)]\n    plus = [(-2) ** i for i in range(0, x + 1, 2)]\n    minus.sort()\n    plus.sort(reverse=True)\n\n    minus_sum = [0]\n    for m in minus:\n        minus_sum.append(minus_sum[-1] + m)\n    plus_sum = [0]\n    for p in plus:\n        plus_sum.append(plus_sum[-1] + p)\n\n    ans = ''\n    n = 0\n    flg = True if len(plus) > len(minus) else False\n    m = 0\n    p = 0\n    while True:\n        if flg:\n            tg = plus[p]\n            p += 1\n        else:\n            tg = minus[m]\n            m += 1\n\n        if n + tg >= N:\n            if n + tg != N and n + tg + (minus_sum[-1] - minus_sum[m]) > N:\n                ans += '0'\n            else:\n                ans += '1'\n                n += tg\n        else:\n            if n + tg + (plus_sum[-1] - plus_sum[p]) < N:\n                ans += '0'\n            else:\n                ans += '1'\n                n += tg\n        flg = not flg\n        if p >= len(plus) and m >= len(minus):\n            break\n    print((str(int(ans))))\n\n\ndef __starting_point():\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    # A = [int(i) for i in input().split()]\n    # B = [int(i) for i in input().split()]\n    # AB = [[int(i) for i in input().split()] for _ in range(N)]\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "N = int(input())\na = 2\nans = \"\"\nfor i in range(1000):\n    if N % a == 0:\n        ans = \"0\"+ans\n    else:\n        ans = \"1\"+ans\n        if i % 2 == 0:\n            N -= 2**i\n        else:\n            N += 2**i\n    a *= 2\n    if N == 0:\n        break\nprint(ans)\n", "n=int(input())\nx = \"\"\nwhile n!=0:\n    x = str(n%2) + x\n    n = -(n//2)\nif x == \"\":\n    print((0))\nelse:\n    print(x)\n", "N = int(input())\n\nif N == 0:\n    print((0))\n    return\nans = []\nwhile N:\n    ans.append(N % 2)\n    N = N // 2\n    N *= -1\n\nprint((\"\".join(map(str, ans[::-1]))))\n\n", "import os\nimport sys\nfrom collections import defaultdict, Counter\nfrom itertools import product, permutations,combinations, accumulate\nfrom operator import itemgetter\nfrom bisect import bisect_left,bisect\nfrom heapq import heappop,heappush,heapify\nfrom math import ceil, floor, sqrt\nfrom copy import deepcopy\n\ndef main():\n    n = int(input())\n    \n    if n == 0:\n        print(0)\n        return\n\n    ans = \"\"\n    while n:\n        if n%2:\n            n -= 1\n            ans += \"1\"\n        else:\n            ans += \"0\"\n        n //= (-2)\n\n    print(ans[::-1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    n = i_input()\n    l = []\n    cnt = 0\n    while True:\n        if cnt%2 == 0:\n            l.append(n%2)\n            n = -(n//2)\n            cnt += 1\n        else:\n            l.append(n%2)\n            n = -(n//2)\n            cnt += 1\n        if n == 0:\n            break\n        # break\n    l.reverse()\n    print((\"\".join(map(str,l))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n = int(input())\n    ans = [] if n != 0 else [0, ]\n    while n:\n        ans.append(-(n % -2))\n        n = -(n // 2)\n    print((''.join(list(map(str, ans[::-1])))))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\namari = []\n\nwhile True:\n    if n >1 or n<0:\n        amari.append(-(n%(-2)))\n        n = (n-(-(n%(-2))))//(-2)\n    else:\n        amari.append(n)\n        break\n\ngyaku = amari[::-1]\nprint(*gyaku,sep=\"\")", "import sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN=int(input())\ns = []\nif N ==0:\n    print((0))\n    return\n    \nwhile N:\n    r = N%(-2)\n    if r<0:\n        r+=2\n    N = (N-r)//(-2)\n    s.append(str(r))\n\nprint((''.join(s)[::-1]))\n", "N = int(input())\ns = \"\"\ni = 0\n\nwhile N != 0:\n    if N % 2 == 0:\n        s += \"0\"\n        N //= 2\n    else:\n        s += \"1\"\n        if i % 2 == 0:\n            N = (N - 1)//2\n        else:\n            N = (N + 1)//2\n    i += 1\n\nif s == \"\":\n    print(\"0\")\nelse:\n    print(s[::-1])", "import sys\nstdin = sys.stdin\nsys.setrecursionlimit(10**6)\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nn = ni()\na = 2\nans = ''\n\nif n==0:\n    print(0)\n    return\n\nwhile n != 0:\n    if n%a == 0:\n        ans = '0' + ans\n    else:\n        ans = '1' + ans\n        n-=(a//2)\n    a*=(-2)\n\nprint(ans)", "n=int(input())\nif n==0:\n  print((0))\n  return\nans=[]\nwhile n!=0:\n  n-=1\n  ans.append(n%-2)\n  n//=(-2)\n#print(ans)\ntmp=[1*(i==0) for i in ans][::-1]\nprint((\"\".join(map(str,tmp))))\n", "def IntBaseConvert(N,K):\n    if (type(N) is int) and (type(K) is int):\n        if K>=2 and N>=0:\n            if N==0:\n                return [0]\n            else:\n                ConvertNum = []\n                while N>0:\n                    ConvertNum.append(N%K)\n                    N = N//K\n                return ConvertNum[::-1]\n        elif K<=-2:\n            if N==0:\n                return [0]\n            else:\n                ConvertNum = []\n                while abs(N)>0:\n                    ConvertNum.append(N%abs(K))\n                    N = (N-N%abs(K))//K\n                return ConvertNum[::-1]\n        else:\n            return []\n    else:\n        return []\n      \nConvertNum = IntBaseConvert(int(input()),-2)\nprint(''.join(str(T) for T in ConvertNum))", "import sys\n \nN = int(sys.stdin.readline())\nif N == 0:\n    print(0)\n    return\nbinN = \"\"\npN = abs(N)\nwhile N != 0:\n    if abs(N % -2) == 1:\n        binN += \"1\"\n    else:\n        binN += \"0\"\n    N += N%(-2)\n    N //= -2\nprint(binN[::-1])", "n = int(input())\nc = 0\nwhile 1:\n    c += 1\n    if n == 0:\n      break\n    if n > 0:\n        if c%2 == 1: \n            if (4**(c//2+1)-1)//3 >= n:\n                break\n    elif n < 0:\n        if c%2 == 0:\n            if abs(2*(4**(c//2)-1))//3 >= abs(n):\n                break\nif n == 0:\n    ans = [\"0\"]\nelse:\n    k = 0\n    ans = []\n    while k < c:\n        ans.append(str(n%2))\n        n = (-1)* (n//2)\n        k += 1\nprint(\"\".join(ans[::-1]))", "def BaseM2Num(N):\n    if N==0:\n        return [0]\n    else:\n        List = []\n        while abs(N)>0:\n            if N%2==0:\n                N //= (-2)\n                List.append(0)\n            else:\n                N = (N-1)//(-2)\n                List.append(1)\n        return List[::-1]\n      \nList = BaseM2Num(int(input()))\nprint(''.join(str(T) for T in List))", "# C - Base -2 Number\n\nN = int(input())\n\nans = ''\nif N == 0:\n    ans = '0'\nwhile N != 0:\n    if N % 2 == 1:\n        ans = '1' + ans\n        N -= 1\n    else:\n        ans = '0' + ans\n    N //= -2\nprint(ans)\n", "N = int(input())\n\nres = []\nsign = 1\nwhile N:\n    if N%2 == 0:\n        res.append(0)\n    else:\n        N -= sign\n        res.append(1)\n    N //= 2\n    sign *= -1\nif not res:\n    res = [0]\nprint(*reversed(res),sep='')", "import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom itertools import accumulate\nfrom itertools import permutations\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom collections import Counter\nimport fractions\nimport math\nfrom collections import deque\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import insort_left\nimport itertools\nfrom heapq import heapify\nfrom heapq import heappop\nfrom heapq import heappush\nimport heapq\nfrom copy import deepcopy\nfrom decimal import Decimal\nalf = list(\"abcdefghijklmnopqrstuvwxyz\")\nALF = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n#import numpy as np\nINF = float(\"inf\")\n#d = defaultdict(int)\n#d = defaultdict(list)\ns = \"\"\nN = int(input())\nif N == 0:\n    print(0)\nelse:\n    while N != 0:\n        x = N % (-2)\n        if x == 0:\n            s = \"0\"+s\n            N = N // (-2)\n        else:\n            N = N//(-2)+1\n            s = \"1\" + s\n\n    print(s)", "n = int(input())\nans = ''\nwhile n!=0:\n    r = n%2\n    n = (n-r) // (-2)\n    ans += str(r)\nprint(ans[::-1] if ans else 0)", "N = int(input())\ndef po(n,k):\n    if k <= 0:\n        return 0 <= n <= 1\n    if k % 2 == 0 and -2*(2**k-1)//3 <= n <= (2**(k+2)-1)//3:\n        return True\n    elif k % 2 == 1 and -2*(2**(k+1)-1)//3 <= n <= (2**(k+1)-1)//3:\n        return True\n    return False\n\ndef f(n):\n    k = 0\n    while True:\n        if po(n,k):\n            break\n        k += 1\n    ls = []\n    while k >= 0:\n        if po(n-(-2)**k, k-1):\n            n -= (-2)**k\n            ls.append(\"1\")\n        else:\n            ls.append(\"0\")\n        k -= 1\n    return \"\".join(ls)\nprint(f(N))", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = I()\n    if N == 0:\n        print(0)\n        return\n    if N < 0:\n        N = -N\n        D = defaultdict(int)\n        index = 0\n        while N >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if N & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408D[index]\u3068D[index+1]\u306b1\u3092\u8db3\u3059\n                if index % 2 == 0:\n                    D[index] += 1\n                    D[index+1] += 1\n                else:\n                    D[index] += 1\n            else:\n                D[index] = D[index]\n            N = N>>1\n            index += 1\n    else:\n        D = defaultdict(int)\n        if N & 1 == 1:\n            D[0] = 1\n        else:\n            D[0] = 0\n        index = 1\n        N = N >> 1\n\n        while N >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if N & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408D[index]\u3068D[index+1]\u306b1\u3092\u8db3\u3059\n                if index % 2 == 1:\n                    D[index] += 1\n                    D[index+1] += 1\n                else:\n                    D[index] += 1\n            else:\n                D[index] = D[index]\n            N = N>>1\n            index += 1\n            \n            \n    index = 0\n    while True:\n        if not index in D.keys():\n            break\n        if D[index] <= 1:\n            pass\n        else:\n            temp = D[index]\n            D[index] = temp % 2\n            D[index+1] += (temp // 2)\n            D[index+2] += (temp // 2)\n            if D[index+1] >= D[index+2] * 2:\n                temp = D[index+2]\n                D[index+2] -= temp\n                D[index+1] -= temp * 2\n        index += 1\n    res = True\n\n    for i in reversed(D.values()):\n        if res and i == 1:\n            res = False\n        if not res:\n            print(i, end=\"\")\n    print()\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int( input() )\n\nif n == 0:\n    print('0')\nelse:\n    sum = 0\n    i = 0\n    S = []\n    while n != 0:\n\n        x = n % (2 ** (i+1))\n        if x != 0:\n            S.append('1')\n\n            n -= (-2) ** i\n\n        else:\n            S.append('0')\n        i += 1\n    \n    S = S[::-1]\n    strS = ''.join(S)\n    print(strS)\n", "#coding:utf-8\n\nimport sys\nimport bisect\n\nSUM_P = [2**x for x in range(0, 31, 2)]\nSUM_M = [2**x for x in range(1, 31, 2)]\nfor i in range(len(SUM_P)-1):\n    SUM_P[i+1] += SUM_P[i]\nfor i in range(len(SUM_M)-1):\n    SUM_M[i+1] += SUM_M[i]\n\n\nN = int(input())\n\nret = 0\nwhile N != 0:\n    if N > 0:\n        idx = bisect.bisect_left(SUM_P, N)\n        idx = idx * 2\n        N -= 2 ** idx\n        ret += 2**idx\n    else:\n        idx = bisect.bisect_left(SUM_M, abs(N))\n        idx = (idx * 2) + 1\n        N += 2 ** idx\n        ret += 2**idx\n\nprint((format(ret, \"b\")))\n", "N = int(input())\nans = [] if N != 0 else [0]\nwhile N:\n    ans.append(-(N % -2))\n    N = -(N // 2)\nprint((\"\".join(map(str, ans[::-1]))))\n", "N = int(input())\n\ns = \"\"\n\nwhile N != 0:\n    # Python\u3067\u306f\u8ca0\u306e\u6570\u3092\u5272\u3063\u3066\u3082\u4f59\u308a\u304c\u6b63\u306b\u306a\u308b\n    # -2\u3067\u5272\u3063\u305f\u3068\u304d\u306e\"\u7406\u60f3\u7684\u306a\"\u4f59\u308a(0or1\u306b\u306a\u3063\u3066\u304f\u308c\u308b)\u306f2\u3067\u5272\u3063\u305f\u4f59\u308a\u3068\u540c\u3058\n    # -2\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u4f59\u308a\u306f0or-1\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3001-1\u3068\u306a\u3063\u305f\u30891\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3057\u3066\u3082\u826f\u3044\n    r = int(N % 2)\n    # \u3053\u3053\u306f\u7d20\u76f4\u306b-2\n    N = (N - r) / (-2)\n    s += str(int(r))\n\n# N=0\u306e\u6642\u306f\u7a7a\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304d\u3066\u3057\u307e\u3046\nif s == \"\":\n    print((0))\n    return\nelse:\n    # reverse\n    print((s[::-1]))\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N = int(readline())\n\n    ans = []\n    while abs(N) > 0:\n        ans.append(N % 2)\n        N //= 2\n        N *= -1\n\n    if ans:\n        ans = ''.join(map(str, reversed(ans)))\n    else:\n        ans = 0\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\n\nbasis = [(-2) ** d for d in range(64)]\ncs = [1, -2]\nfor i in range(2, len(basis)):\n    cs.append(cs[i - 2] + basis[i])\n\nS = ['0'] * len(basis)\n\nn = N\nmax_i = 0\nwhile n != 0:\n    if n > 0:\n        for i in range(0, len(basis), 2):\n            if cs[i] >= n:\n                S[i] = '1'\n                n -= basis[i]\n                max_i = max(max_i, i)\n                break\n    else:\n        for i in range(1, len(basis), 2):\n            if cs[i] <= n:\n                S[i] = '1'\n                n -= basis[i]\n                max_i = max(max_i, i)\n                break\n\nprint((''.join(S[:max_i + 1])[::-1]))\n", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n\n    if N == 0:\n        print((0))\n    else:\n        ans = []\n        while abs(N) > 0:\n            r = N % 2\n            ans.append(r)\n            if r == 1:\n                N -= 1\n            N //= -2\n\n        print((''.join([str(i) for i in reversed(ans)])))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N = -int(input())\na = \"\"\n\nwhile N:\n  a+=str(N%2)\n  N//=-2\n\nif a==\"\":\n  print(0)\nelse:\n  print(a[::-1])", "#!/usr/bin/env python\n\nn = int(input())\n\nif n == 0:\n    print((0))\n    return\n\nans = ''\nwhile abs(n) > 0:\n    r = n%2 \n    ans += str(r) \n    n //= 2\n    n = -n\n\nif abs(n)%2 == 1:\n    print(ans)\nelse:\n    print((ans[::-1]))\n", "n = int(input())\n\ndp =[0]*40\n\nif n ==0:\n    print(0)\n\nelif n >0:\n    x = bin(n)\n    bx = x[2:]\n    lx = len(bx)\n    for i in range(lx-1,-1,-1):\n        dp[i] = int(bx[lx-1-i])\n    for i in range(40):\n        if i % 2 ==1 and dp[i]==1:\n            dp[i+1] +=1\n    while max(dp) >1:\n        for i in range(40):\n            if dp[i] >=2:\n                dp[i] -=2\n                if dp[i+1] >0:\n                    dp[i+1] -=1\n                else:\n                    dp[i+1] +=1\n                    dp[i+2] +=1\n    dpr = list(reversed(dp))\n    dprs = list(map(lambda x :str(x),dpr))\n    dprj = \"\".join(dprs)\n    print(int(dprj))    \n\nelse:\n    x = bin(-n)\n    bx = x[2:]\n    lx = len(bx)\n    for i in range(lx-1,-1,-1):\n        dp[i] = int(bx[lx-1-i])\n    for i in range(40):\n        if i % 2 ==0 and dp[i]==1:\n            dp[i+1] +=1\n    while max(dp) >1:\n        for i in range(40):\n            if dp[i] >=2:\n                dp[i] -=2\n                if dp[i+1] >0:\n                    dp[i+1] -=1\n                else:\n                    dp[i+1] +=1\n                    dp[i+2] +=1\n    dpr = list(reversed(dp))\n    dprs = list(map(lambda x :str(x),dpr))\n    dprj = \"\".join(dprs)\n    print(int(dprj))    ", "n=int(input())\nans=[]\nif n==0:\n    print(0)\n    return\nwhile True:\n    if n==0:\n        break\n    if n>=0:\n        ans.append(n%2)\n        n=(-1)*(n//2)\n    else:\n        ans.append((n*-1)%2)\n        if (n*-1)%2==1:\n            n=(n*-1)//2+1\n        else:\n            n=(n*-1)//2\n    \n\nfor i in range(len(ans)):\n    ans[i]=str(ans[i])\nprint(\"\".join(list(ans[::-1])))", "n=int(input());result=[]\nwhile n!=0:\n  r=n%2\n  n=(n-r)//-2\n  result.append(r)\nprint(''.join(map(str,result[::-1])) if result else 0)", "N = int(input())\na = \"\"\nif N ==0:\n  a =0\nwhile N !=0:\n  if N%2 != 0:\n    a = \"1\" + a\n  else:\n    a = \"0\" + a\n  N = - (N//2)\nprint(a)", "n=int(input());result=[]\nwhile n!=0:\n  r=n%2\n  n=(n-r)//-2\n  result.append(r)\nprint(''.join(map(str,(result[::-1]))) if result else 0)", "N = int(input())\nS = list()\nif N==0:\n  print((0))\n  return\nelif N>0:\n  while N>0:\n    S.append(N%2)\n    N//=2\n  S.append(0)\n  S.append(0)\n  for i in range(len(S)-1):\n    if i%2==1 and S[i]==1:\n      S[i+1] += 1\n    if S[i]==2:\n      S[i]=0\n      S[i+1]+=1\nelse:\n  N *= -1\n  while N>0:\n    S.append(N%2)\n    N//=2\n  S.append(0)\n  S.append(0)\n  for i in range(len(S)-1):\n    if i%2==0 and S[i]==1:\n      S[i+1] += 1\n    if S[i]==2:\n      S[i]=0\n      S[i+1]+=1\n  \nS.reverse()\nwhile S[0]==0:\n  S = S[1:]\nans = \"\"\nfor s in S:\n  ans += str(s)\nprint(ans)\n", "n = int(input())\nif n == 0:\n  print(0)\n  return\ns = \"\"\nwhile n != 0:\n  m = abs(n % -2)\n  s = str(m) + s\n  n = (n - m) // -2\nprint(s)", "N = int(input())\n\n\ndef max_pos_number(n):\n    val = 0\n    for i in range(n):\n        if i % 2 == 0:\n            val += 2**i\n    return val\n\n\ndef min_pos_number(n):\n    val = 0\n    for i in range(n):\n        if i % 2 == 1:\n            val -= 2**i\n\n    return val\n\n\nn = 1\nwhile True:\n    if min_pos_number(n) <= N <= max_pos_number(n):\n        break\n    n += 1\n\nresult = []\nfor i in range(n-1, -1, -1):\n    if i % 2 == 0:\n        if N > max_pos_number(i):\n            result.append(1)\n            N -= (-2) ** i\n        else:\n            result.append(0)\n    else:\n        if N < min_pos_number(i):\n            result.append(1)\n            N -= (-2) ** i\n        else:\n            result.append(0)\nprint((''.join([str(x) for x in result])))\n", "N = int(input())\nans = \"\"\n\nif N==0:\n  print(0)\nelse:\n  while N!=0:\n    ans+=str(N%2)\n    N=-(N//2)\n  print(ans[::-1])", "x=[0]*32\nx[0]=1\nx[1]=-2\nfor i in range(2,32):\n  x[i]=x[i-2]+(-2)**i\nn=int(input())\nif n==0:\n  print(0)\n  return\nans=''\nfor i in range(2,33)[::-1]:\n  if i%2:\n    l=x[i-2]\n    r=x[i-1]\n  else:\n    l=x[i-1]\n    r=x[i-2]\n  t=n-(-2)**i\n  if l<=t and t<=r:\n    n=t\n    ans=ans+'1'\n  else:\n    ans=ans+'0'\nls=['10','11','00','01']\nans=ans+ls[n+2]\nfor i in range(len(ans)):\n  if ans[i]=='1':\n    re=i\n    break\nprint(ans[re:])", "n = int(input())\nif n == 0:\n  print(0)\n  return\na = [1]\np = [1]\nm = [0]\nhi = [1]\nlo = [1]\ni = 0\nwhile(True):\n  if n >= lo[i] and n<= hi[i]:\n    break\n  i += 1\n  a.append(a[i-1]*-2)\n  if i%2==0:\n    p.append(p[i-1]+a[i])\n    m.append(m[i-1])\n  else:\n    p.append(p[i-1])\n    m.append(m[i-1]+a[i])\n  hi.append(a[i]+p[i-1])\n  lo.append(a[i]+m[i-1])\nans = []\nfor j in range(i+1)[::-1]:\n  if n >= lo[j] and n<= hi[j]:\n    ans.append(1)\n    n-=a[j]\n  else:\n    ans.append(0)\nprint(*ans,sep=\"\")", "\nN = int(input())\n\ndef base(x, n):\n  ret = []\n  while x != 0:\n    ret.append( x % abs(n))\n    if n < 0:\n      x = - ( (-x)//n )\n    else:\n      x //= n\n  return ret\n\nif N == 0:\n  print(0)\nelse:\n  print(\"\".join(map(str, reversed(base(N, -2)))))", "n =  int(input())\nx = ''\nwhile n != 0:\n    x = str(n%2) + x\n    n = -(n//2)\nprint((0 if x == '' else x))\n", "import sys\n\nN = int(sys.stdin.readline())\nif N == 0:\n    print(0)\n    return\nbinN = \"\"\npN = abs(N)\nwhile N != 0:\n    if abs(N % -2) == 1:\n        binN += \"1\"\n    else:\n        binN += \"0\"\n    N += N%(-2)\n    N //= -2\nprint(binN[::-1])", "n = int(input())\nif n==0:\n  print(0)\n  return\nif n==1:\n  print(1)\n  return\nl = []\nwhile n!=1:\n  if n%2==0:\n    n //= -2\n    l.append(0)\n  else:\n    n = (n-1)//(-2)\n    l.append(1)\nl.append(1)\nl = l[::-1]\nprint(*l,sep=\"\")"]