["\n\n\ndef solve(n, a):\n    # find the longest increasing subsequence\n    lis = [1 for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    # find the longest decreasing subsequence\n    lds = [1 for _ in range(n)]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    # find the maximum\n    max_len = -1\n    for i in range(n):\n        max_len = max(max_len, lis[i] + lds[i] - 1)\n    # find the answer\n    ans = \"\"\n    for i in range(n):\n        if lis[i] + lds[i] - 1 == max_len:\n            ans += \"L\" * lis[i]\n            ans += \"R\" * (lds[i] - 1)\n            break\n    return max_len, ans\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans[0])\n    print(ans[1])", "\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    # create a list of tuples (value, index)\n    a_indexed = [(a[i], i) for i in range(n)]\n\n    # sort it by value\n    a_indexed.sort()\n\n    # create a list of tuples (value, index, is_left)\n    # is_left is True if the element is on the left, False otherwise\n    a_indexed_left = [(a_indexed[i][0], a_indexed[i][1], True) for i in range(n)]\n    a_indexed_right = [(a_indexed[i][0], a_indexed[i][1], False) for i in range(n)]\n\n    # sort it by the index\n    a_indexed_left.sort(key=lambda x: x[1])\n    a_indexed_right.sort(key=lambda x: x[1])\n\n    # create a list of tuples (value, index, is_left, is_included)\n    # is_included is True if the element is included in the result, False otherwise\n    a_indexed_left_included = [(a_indexed_left[i][0], a_indexed_left[i][1], a_indexed_left[i][2], False) for i in range(n)]\n    a_indexed_right_included = [(a_indexed_right[i][0], a_indexed_right[i][1], a_indexed_right[i][2], False) for i in range(n)]\n\n    # include the first element (the leftmost one) in the result\n    a_indexed_left_included[0] = (a_indexed_left_included[0][0], a_indexed_left_included[0][1], a_indexed_left_included[0][2], True)\n    a_indexed_right_included[0] = (a_indexed_right_included[0][0], a_indexed_right_included[0][1], a_indexed_right_included[0][2], True)\n\n    # iterate over all elements except the first one\n    for i in range(1, n):\n        # if the current element is on the left\n        if a_indexed_left_included[i][2] == True:\n            # if the previous element is included in the result\n            if a_indexed_left_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_left_included[i][0] > a_indexed_left_included[i - 1][0]:\n                    a_indexed_left_included[i] = (a_indexed_left_included[i][0], a_indexed_left_included[i][1], a_indexed_left_included[i][2], True)\n        # if the current element is on the right\n        else:\n            # if the previous element is included in the result\n            if a_indexed_right_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_right_included[i][0] > a_indexed_right_included[i - 1][0]:\n                    a_indexed_right_included[i] = (a_indexed_right_included[i][0], a_indexed_right_included[i][1], a_indexed_right_included[i][2], True)\n\n    # count the number of elements included in the result\n    result_left = sum(i[3] for i in a_indexed_left_included)\n    result_right = sum(i[3] for i in a_indexed_right_included)\n\n    # if the result obtained by taking the leftmost element is greater than or equal to the result obtained by taking the rightmost element,\n    # print the result obtained by taking the leftmost element\n    if result_left >= result_right:\n        print(result_left)\n        for i in a_indexed_left_included:\n            if i[3] == True:\n                print('L', end='')\n    # if the result obtained by taking the leftmost element is less than the result obtained by taking the rightmost element,\n    # print the result obtained by taking the rightmost element\n    else:\n        print(result_right)\n        for i in a_indexed_right_included:\n            if i[3] == True:\n                print('R', end='')\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(n, a):\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = 1\n    for i in reversed(range(n - 1)):\n        if a[i] < a[i + 1]:\n            r[i] = r[i + 1] + 1\n        else:\n            r[i] = 1\n    r[n - 1] = 1\n    ans = max(l + r)\n    # print(l, r)\n    return ans\n\n\ndef print_ans(ans):\n    print(len(ans))\n    print(''.join(ans))\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print_ans(ans)\n\n\ndef test():\n    assert solve(5, [2, 1, 5, 4, 3]) == 'LRRR'\n    assert solve(7, [1, 3, 5, 6, 7, 4, 2]) == 'LRLRLLL'\n    assert solve(3, [1, 2, 3]) == 'LLL'\n    assert solve(4, [1, 2, 4, 3]) == 'LLRL'\n\n\nif __name__ == \"__main__\":\n    test()\n    main()", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nstack = []\n\nans = []\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(a[i])\n        ans.append('L')\n    elif stack[-1] < a[i]:\n        stack.append(a[i])\n        ans.append('L')\n    else:\n        while len(stack) > 0 and stack[-1] > a[i]:\n            stack.pop()\n        if len(stack) == 0:\n            stack.append(a[i])\n            ans.append('L')\n        elif stack[-1] < a[i]:\n            stack.append(a[i])\n            ans.append('L')\n        else:\n            stack.pop()\n            ans.append('R')\n\nprint(len(stack))\nprint(''.join(ans))", "\n\ndef solve(n, a):\n    res = [0]*n\n    stack = []\n    for i in range(n):\n        while len(stack) > 0 and stack[-1][0] < a[i]:\n            res[stack[-1][1]] = i+1\n            stack.pop()\n        stack.append((a[i], i))\n    while len(stack) > 0:\n        res[stack[-1][1]] = stack[-1][1]+1\n        stack.pop()\n    cur = 0\n    ans = [0]*n\n    for i in range(n):\n        if res[i] > cur:\n            ans[i] = 'L'\n            cur = res[i]\n        else:\n            ans[i] = 'R'\n    return ''.join(ans)\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(n, a))\n\nif __name__ == '__main__':\n    main()", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [None]*n\nr = [None]*n\n\nl[0] = 0\nfor i in range(1, n):\n    l[i] = l[i-1]\n    if a[i] > a[i-1]:\n        l[i] += 1\n\nr[-1] = 0\nfor i in range(n-2, -1, -1):\n    r[i] = r[i+1]\n    if a[i] < a[i+1]:\n        r[i] += 1\n\nans = 0\npos = 0\nfor i in range(n):\n    if l[i] + r[i] + 1 > ans:\n        ans = l[i] + r[i] + 1\n        pos = i\n\nprint(ans)\nprint('L'*(l[pos]+1) + 'R'*r[pos])"]